void sub_239636AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v13;

  if (a12 == a11)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_239636B28(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v31;
  BOOL v33;
  BOOL v35;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = *(char **)(a1 + 16);
  if (v4 != *(char **)(a1 + 24))
    goto LABEL_70;
  v5 = *(char **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 > *(_QWORD *)a1)
  {
    v7 = (uint64_t)(v6 - *(_QWORD *)a1) >> 4;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = (char *)(v6 - 16 * v9);
    if ((char *)v6 == v4)
      goto LABEL_69;
    v12 = (unint64_t)&v4[-v6 - 16];
    if (v12 >= 0x210)
    {
      v23 = 16 * v10 + (v12 & 0xFFFFFFFFFFFFFFF0);
      v24 = v6 + 8;
      v25 = v6 + 8 + v23;
      v26 = v6 + 8 + 16 * v10;
      v27 = v23 + v6 + 16;
      v28 = v6 + 8 + (v12 & 0xFFFFFFFFFFFFFFF0);
      v29 = (v12 & 0xFFFFFFFFFFFFFFF0) + v6 + 16;
      v31 = (unint64_t)v11 < v28 && v6 < v25;
      v33 = (unint64_t)v11 < v29 && v24 < v25;
      v35 = v26 < v28 && v6 < v27;
      v37 = v26 < v29 && v24 < v27;
      if (v26 >= v25 || (unint64_t)v11 >= v27)
      {
        if (v31)
        {
          v13 = *(char **)(a1 + 8);
        }
        else if (v33)
        {
          v13 = *(char **)(a1 + 8);
        }
        else if (v35)
        {
          v13 = *(char **)(a1 + 8);
        }
        else if (v37)
        {
          v13 = *(char **)(a1 + 8);
        }
        else
        {
          v39 = (v12 >> 4) + 1;
          v40 = 16 * (v39 & 0x1FFFFFFFFFFFFFFCLL);
          v11 += v40;
          v13 = (char *)(v6 + v40);
          v41 = v39 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = (_OWORD *)(v6 + 16 * v10);
            v43 = *(_OWORD *)(v6 + 16);
            v45 = *(_OWORD *)(v6 + 32);
            v44 = *(_OWORD *)(v6 + 48);
            *v42 = *(_OWORD *)v6;
            v42[1] = v43;
            v42[2] = v45;
            v42[3] = v44;
            v6 += 64;
            v41 -= 4;
          }
          while (v41);
          if (v39 == (v39 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_68;
        }
      }
      else
      {
        v13 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v13 = *(char **)(a1 + 8);
    }
    do
    {
      *(_QWORD *)v11 = *(_QWORD *)v13;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v13 + 1);
      v11 += 16;
      v13 += 16;
    }
    while (v13 != v4);
LABEL_68:
    v4 = *(char **)(a1 + 8);
LABEL_69:
    *(_QWORD *)(a1 + 8) = &v4[16 * v10];
    *(_QWORD *)(a1 + 16) = v11;
    v4 = v11;
    goto LABEL_70;
  }
  v14 = (v4 - v5) >> 3;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 60)
    sub_239418A80();
  v15 = v14 >> 2;
  v16 = 16 * v14;
  v17 = (char *)operator new(16 * v14);
  v18 = &v17[16 * v15];
  v20 = (unint64_t)&v4[-v6];
  v19 = v4 == (char *)v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF0];
    v21 = (char *)(v20 - 16);
    if (v20 - 16 < 0xD0)
    {
      v22 = &v17[16 * v15];
      do
      {
LABEL_60:
        *(_QWORD *)v22 = *(_QWORD *)v6;
        *((_QWORD *)v22 + 1) = *(_QWORD *)(v6 + 8);
        v22 += 16;
        v6 += 16;
      }
      while (v22 != v4);
      goto LABEL_61;
    }
    v46 = v20 & 0xFFFFFFFFFFFFFFF0;
    v47 = (unint64_t)v18 >= v6 + v46 || v6 >= (unint64_t)&v17[16 * v15 + v46];
    v22 = &v17[16 * v15];
    if (!v47)
      goto LABEL_60;
    v48 = ((unint64_t)v21 >> 4) + 1;
    v49 = 16 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
    v22 = &v18[v49];
    v50 = v6 + v49;
    v51 = (__int128 *)(v6 + 32);
    v52 = &v17[16 * v15 + 32];
    v53 = v48 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *(v51 - 2);
      v54 = *(v51 - 1);
      v57 = *v51;
      v56 = v51[1];
      v51 += 4;
      *((_OWORD *)v52 - 2) = v55;
      *((_OWORD *)v52 - 1) = v54;
      *(_OWORD *)v52 = v57;
      *((_OWORD *)v52 + 1) = v56;
      v52 += 64;
      v53 -= 4;
    }
    while (v53);
    v6 = v50;
    if (v48 != (v48 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_60;
  }
LABEL_61:
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = *(char **)(a1 + 16);
  }
LABEL_70:
  *(_QWORD *)v4 = *a2;
  *((_QWORD *)v4 + 1) = a2[1];
  *(_QWORD *)(a1 + 16) += 16;
}

uint64_t *sub_239636DE4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2396370D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_2396370EC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  char *v13;
  void **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void *v22;
  BOOL v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  char *v27;
  void *memptr;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = *(unsigned int *)(a2 + 16);
  v11 = (v10 + 31) & 0x1FFFFFFE0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = v11;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x100BBD03uLL);
  v12 = memptr;
  *(_QWORD *)v8 = memptr;
  if (!v12)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v10)
    memcpy(v12, *(const void **)a2, v10);
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  v13 = v8 + 24;
  v27 = v8 + 24;
  v15 = (char *)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
    v19 = (void **)a1[1];
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v8[v16 * 8];
      v18 = (char *)&v14[v16];
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 3) = v14[v16 - 3];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v17 - 2) = v14[v16 - 2];
      *((_QWORD *)v18 - 2) = 0;
      *((_DWORD *)v17 - 2) = v14[v16 - 1];
      *((_DWORD *)v18 - 2) = 0;
      v16 -= 3;
    }
    while (&v14[v16] != (void **)v15);
    v19 = (void **)*a1;
    v14 = (void **)a1[1];
    v8 += v16 * 8;
    v13 = v27;
  }
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v9;
  if (v14 != v19)
  {
    v20 = v14 - 3;
    v21 = v14 - 3;
    do
    {
      v22 = *v21;
      v21 -= 3;
      free(v22);
      v23 = v20 == v19;
      v20 = v21;
    }
    while (!v23);
    v14 = v19;
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_2396372EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942A88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239637300(unsigned int *a1, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *j;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  float *v24;
  unsigned int v25;
  float v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  unsigned int *k;
  unsigned int v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  float v39;
  unsigned int v40;
  float v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float i;
  unsigned int v48;
  float v49;
  unsigned int *v50;
  unsigned int v51;
  float *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  unsigned int v57;
  float v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  float v63;
  float v64;
  uint64_t *v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  float v74;
  float v75;
  uint64_t v76;
  unsigned int v77;
  float v78;
  int64_t v79;
  int64_t v80;
  unsigned int *v81;
  int64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  unsigned int v86;
  float v87;
  float v88;
  unsigned int v89;
  unsigned int v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  float v96;
  float v97;
  unsigned int v98;
  float v99;
  uint64_t v100;
  uint64_t v102;
  unsigned int v103;
  uint64_t *v104;
  unsigned int *v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  float v110;
  float v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  float v119;
  float v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  float v124;
  unsigned int *v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  float v129;
  float v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  float v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int *v138;

BOOL sub_239637EB4(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  float v24;
  float v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v21 = *(a2 - 1);
      v22 = *a1;
      v23 = **a3;
      v24 = *(float *)(v23 + 20 * v21 + 12);
      v25 = *(float *)(v23 + 20 * *a1 + 12);
      if (v24 > v25 || v24 >= v25 && *(float *)(v23 + 20 * v21 + 16) > *(float *)(v23 + 20 * v22 + 16))
      {
        *a1 = v21;
        *(a2 - 1) = v22;
      }
      return result;
    case 3:
      sub_239636020(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_2396363FC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_239635E88(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_239636020(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = **a3;
      break;
  }
  while (2)
  {
    v14 = *v9;
    v15 = *v8;
    v16 = *(float *)(v12 + 20 * *v9 + 12);
    v17 = *(float *)(v12 + 20 * *v8 + 12);
    if (v16 <= v17 && (v16 < v17 || *(float *)(v12 + 20 * v14 + 16) <= *(float *)(v12 + 20 * v15 + 16)))
      goto LABEL_7;
    *v9 = v15;
    v13 = a1;
    if (v8 == a1)
      goto LABEL_6;
    v18 = v10;
    while (1)
    {
      v19 = *(unsigned int *)((char *)a1 + v18 + 4);
      v20 = *(float *)(v12 + 20 * v19 + 12);
      if (v16 > v20)
        goto LABEL_13;
      if (v16 < v20)
        break;
      if (*(float *)(v12 + 20 * v14 + 16) <= *(float *)(v12 + 20 * v19 + 16))
      {
        v13 = (unsigned int *)((char *)a1 + v18 + 8);
        goto LABEL_6;
      }
LABEL_13:
      --v8;
      *(unsigned int *)((char *)a1 + v18 + 8) = v19;
      v18 -= 4;
      if (v18 == -8)
      {
        v13 = a1;
        goto LABEL_6;
      }
    }
    v13 = v8;
LABEL_6:
    *v13 = v14;
    if (++v11 == 8)
      return v9 + 1 == a2;
LABEL_7:
    v8 = v9;
    v10 += 4;
    if (++v9 != a2)
      continue;
    return 1;
  }
}

uint64_t sub_239638134(uint64_t result, int a2, float a3, float a4, float a5)
{
  *(float *)result = a5;
  *(_DWORD *)(result + 4) = a2;
  *(float *)(result + 8) = a3;
  *(float *)(result + 12) = a4;
  return result;
}

uint64_t *sub_239638144(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 192;
  *a1 = v4;
  a1[1] = (uint64_t)sub_2396388F8;
  if (CVHWAFeatureExtractionCreate())
  {
    v7 = 71;
    goto LABEL_6;
  }
  if (CVHWAFeatureExtractionConfigCreateWithPreset())
  {
    v7 = 77;
LABEL_6:
    sub_239A444D4((uint64_t)"unknown file", v7, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  CVHWAFeatureExtractionConfigSetEnableFeatureMatching();
  CVHWAFeatureExtractionConfigSetEnableDynamicThresholding();
  CVHWAFeatureExtractionConfigSetMaxNumberOfKeypoints();
  CVHWAFeatureExtractionConfigSetDetectionFlow();
  CVHWAFeatureExtractionConfigSetExtraTestThreshold();
  CVHWAFeatureExtractionConfigSetEnableParedGrid();
  CVHWAFeatureExtractionConfigSetResponseThreshold();
  v5 = *a1;
  *(_QWORD *)(v5 + 16) = *a2;
  *(_QWORD *)(v5 + 24) = -1;
  return a1;
}

void sub_239638280(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396382A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (v2[1])
  {
    CVHWAFeatureExtractionRelease();
    v2 = *(_QWORD **)a1;
  }
  if (*v2)
  {
    CVHWAFeatureExtractionConfigRelease();
    v3 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (!v3)
      return a1;
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  (*(void (**)(void))(a1 + 8))();
  return a1;
}

BOOL sub_239638314()
{
  int v0;
  _BOOL8 v1;

  if (!MEMORY[0x24BE05A70])
    return 0;
  v0 = CVHWAFeatureExtractionConfigCreateWithPreset();
  v1 = v0 == 0;
  if (v0)
    return 0;
  CVHWAFeatureExtractionConfigRelease();
  return v1;
}

uint64_t sub_23963839C(int32x2_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  int32x2_t *v10;
  signed int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  float32x2_t v33;
  int32x2_t v34;
  float32x2_t v35;
  char *v36;
  unint64_t v37;
  int32x2_t *v38;
  __int32 v39;
  char v40;
  int32x2_t v41;
  CVPixelBufferRef pixelBuffer;
  _QWORD v43[3];
  void *v44[2];
  void *v45[2];
  __int128 v46;
  void *__p;
  void *v48;
  char v49;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 24);
  for (i = *(_QWORD *)(a3 + 32); i != v6; i -= 24)
  {
    v8 = *(void **)(i - 24);
    free(v8);
  }
  *(_QWORD *)(a3 + 32) = v6;
  if (*(_BYTE *)(a3 + 72))
  {
    v9 = *(void **)(a3 + 48);
    if (v9)
    {
      *(_QWORD *)(a3 + 56) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a3 + 72) = 0;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = HIDWORD(*(_QWORD *)(a2 + 32));
  if (v11 < (*a1)[4].i32[0])
    return 0;
  v41 = *(int32x2_t *)(a2 + 32);
  if (v12 != v10[3].i32[0] || v11 != v10[3].i32[1])
  {
    CVHWAFeatureExtractionConfigSetImageSize();
    CVHWAFeatureExtractionConfigSetMaxImageSize();
    if (CVHWAFeatureExtractionInitGP())
      return 2;
    (*a1)[3] = vrev64_s32(v41);
  }
  v49 = 0;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  LOBYTE(__p) = 0;
  sub_239416500(a2, v43);
  sub_23979C580((uint64_t)v43);
  pixelBuffer = 0;
  v14 = (_QWORD *)operator new();
  *v14 = &off_250AE1708;
  v14[1] = &pixelBuffer;
  v14[2] = 0;
  v14[3] = v14;
  if (CVHWAFeatureExtractionProcess()
    || (CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL),
        v15 = MEMORY[0x23B83CEDC](pixelBuffer),
        v16 = MEMORY[0x23B83CED0](pixelBuffer),
        v17 = v16,
        v15)
    && !v16)
  {
    v13 = 1;
    goto LABEL_18;
  }
  v26 = v15;
  v27 = (char *)v44[0];
  v28 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44[1] - (char *)v44[0]) >> 2);
  if (v15 <= v28)
  {
    if (v15 < v28)
      v44[1] = (char *)v44[0] + 20 * v15;
  }
  else
  {
    sub_239634F24((char **)v44, v15 - v28);
    v27 = (char *)v44[0];
  }
  v29 = 0;
  if (v15)
  {
    v30 = vcvt_f32_s32(vadd_s32(v41, (int32x2_t)0x100000001));
    v31 = vcvt_f32_s32(v41);
    v32 = v17 + 12;
    do
    {
      v33 = *(float32x2_t *)(v32 - 12);
      if (v33.f32[0] > 2.0)
      {
        v34 = vcgt_f32(v30, v33);
        if ((v34.i8[0] & 1) != 0 && v33.f32[1] > 2.0 && (v34.i8[4] & 1) != 0)
        {
          v35 = vadd_f32(v33, (float32x2_t)0x3F0000003F000000);
          v36 = &v27[20 * v29];
          *(int8x8_t *)v36 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v35, v31), (int8x8_t)v31, (int8x8_t)v35), (int8x8_t)vcltz_f32(v35));
          *((_DWORD *)v36 + 2) = *(_DWORD *)(v32 - 4);
          *((float *)v36 + 3) = *(float *)v32 * 1.4142;
          *((_DWORD *)v36 + 4) = *(_DWORD *)(v32 + 8);
          ++v29;
        }
      }
      v32 += 24;
      --v26;
    }
    while (v26);
    v37 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44[1] - (char *)v27) >> 2);
    if (v29 > v37)
    {
      sub_239634F24((char **)v44, v29 - v37);
      goto LABEL_52;
    }
  }
  else
  {
    v37 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44[1] - (char *)v27) >> 2);
  }
  if (v37 > v29)
    v44[1] = &v27[20 * v29];
LABEL_52:
  v38 = *a1;
  v39 = (*a1)[2].i32[0];
  if (v39)
  {
    if (v39 != 1)
    {
      if (v39 != 2 || !sub_239633760((uint64_t *)v44, a3, v38[2].i32[1], 0))
        goto LABEL_56;
      goto LABEL_60;
    }
    v40 = sub_2396326C8(v11, v12, (uint64_t *)v44, a3, v38[2].i32[1], 9u, 0, 0);
  }
  else
  {
    v40 = sub_239631A14((uint64_t *)v44, a3, v38[2].i32[1]);
  }
  if ((v40 & 1) == 0)
  {
LABEL_56:
    v13 = 3;
    goto LABEL_18;
  }
LABEL_60:
  v13 = 0;
LABEL_18:
  v18 = v14[3];
  if (!v18)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
  v19 = (_QWORD *)v14[3];
  if (v19 == v14)
  {
    v20 = 4;
    v19 = v14;
  }
  else
  {
    if (!v19)
      goto LABEL_24;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_24:
  MEMORY[0x23B83E31C](v14, 0x1020C40A5B76CDFLL);
  sub_23979BCF4(v43);
  if (v49 && __p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v21 = (char *)v45[1];
  if (v45[1])
  {
    v22 = (char *)v46;
    v23 = v45[1];
    if ((void *)v46 != v45[1])
    {
      do
      {
        v24 = (void *)*((_QWORD *)v22 - 3);
        v22 -= 24;
        free(v24);
      }
      while (v22 != v21);
      v23 = v45[1];
    }
    *(_QWORD *)&v46 = v21;
    operator delete(v23);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  return v13;
}

void sub_239638800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_239638868((uint64_t *)va);
  sub_23979BCF4((uint64_t *)va1);
  sub_2394162A0((uint64_t)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_239638868(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[3];
    if (!v3)
      sub_2394172E0();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v4 = (_QWORD *)v2[3];
    if (v4 == v2)
    {
      v5 = 4;
      v4 = v2;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        MEMORY[0x23B83E31C](v2, 0x1020C40A5B76CDFLL);
        return a1;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_2396388F8(uint64_t result)
{
  if (result)
    JUMPOUT(0x23B83E31CLL);
  return result;
}

void sub_239638918()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23963892C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE1708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239638964(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE1708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239638984(uint64_t a1)
{
  CVPixelBufferUnlockBaseAddress(**(CVPixelBufferRef **)(a1 + 8), 1uLL);
  CVPixelBufferRelease(**(CVPixelBufferRef **)(a1 + 8));
}

uint64_t sub_2396389B8(uint64_t a1, id *a2, id *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, char a10)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  id v32;
  unint64_t v33;
  id v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  int8x8_t *v46;
  int8x8_t *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  float32x2_t v54;
  float32x2_t *v55;
  float32x2_t v56;
  int8x8_t v57;
  float v58;
  float v59;
  __int32 v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int8x8_t *v75;
  char *v76;
  int8x8_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void **v92;
  void *v93;
  int v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _DWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  _QWORD *v126;
  _QWORD *v127;
  void *v128;
  void *v130;
  void *v131;
  void *v132;
  void *context;
  int32x2_t v134;
  int8x8_t v135;
  void **v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  void *v143;
  id v144;
  uint64_t v145;
  unint64_t v146;
  void *__p;
  unint64_t v148;
  uint64_t v149;
  void *v150[2];
  void *v151[2];
  int v152;
  _QWORD v153[3];
  _QWORD v154[3];
  _QWORD v155[3];
  id v156;
  id v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v142 = a4;
  v138 = a5;
  v140 = a6;
  v141 = a7;
  v139 = a8;
  context = (void *)MEMORY[0x23B83EC40]();
  if ((a10 & 1) == 0)
  {
    sub_239A444D4((uint64_t)"unknown file", 49, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v137 = *a2;
  v144 = *a3;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = v17;
  if (*(_DWORD *)(a1 + 44) < (int)v17)
  {
    sub_239A444D4((uint64_t)"unknown file", 56, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v134 = *(int32x2_t *)(a1 + 32);
  v19 = SHIDWORD(v17);
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, (int)v17, SHIDWORD(v17), 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setUsage:", 3);
  v155[1] = 0;
  v155[2] = 0;
  v155[0] = &off_250AEF6A0;
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(std::__shared_weak_count **)(a1 + 16);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v143 = v20;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v21 + 56))(v21, v155);
  sub_23979D0F0((uint64_t)v155, v150);
  v27 = v150[0];
  v26 = (std::__shared_weak_count *)v150[1];
  if (!v150[1])
    goto LABEL_13;
  v28 = (unint64_t *)((char *)v150[1] + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_13:
    if (v27)
      goto LABEL_14;
LABEL_25:
    v39 = *(const void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v39)
    {
      v40 = *(_QWORD *)(a1 + 8);
      v41 = *(std::__shared_weak_count **)(a1 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v40 + 88))(v40, 0, "unknown location");
      v39 = *(const void **)(a1 + 24);
    }
    if (MGGetBoolAnswer())
    {
      v45 = (id)objc_msgSend(v142, "newBufferWithBytesNoCopy:length:options:deallocator:", v39, (int)v19 * v18, 0, 0);
    }
    else
    {
      v45 = objc_retainAutorelease(v139);
      memcpy((void *)objc_msgSend(v45, "contents"), v39, (int)v19 * v18);
      nullsub_4(v45);
    }

    if (v18 % (int)objc_msgSend(v142, "minimumLinearTextureAlignmentForPixelFormat:", 10))
    {
      v120 = objc_msgSend(v142, "newTextureWithDescriptor:", v20);
      objc_msgSend(v138, "commandBuffer");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v121, "blitCommandEncoder");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      v154[0] = v18;
      v154[1] = v19;
      v123 = (int)v19 * v18;
      v154[2] = 1;
      memset(v153, 0, sizeof(v153));
      v124 = v18;
      v30 = (void *)v120;
      objc_msgSend(v122, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v45, 0, v124, v123, v154, v120, 0, 0, v153);
      objc_msgSend(v122, "endEncoding");
      objc_msgSend(v121, "commit");
      objc_msgSend(v121, "waitUntilCompleted");

      v139 = v45;
      if (v120)
        goto LABEL_15;
    }
    else
    {
      v139 = v45;
      v30 = (void *)objc_msgSend(v45, "newTextureWithDescriptor:offset:bytesPerRow:", v20, 0, v18);
      if (v30)
        goto LABEL_15;
    }
    goto LABEL_143;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (!v27)
    goto LABEL_25;
LABEL_14:
  v30 = (void *)objc_msgSend(v142, "newTextureWithDescriptor:iosurface:plane:", v20, sub_23979C580((uint64_t)v155), 0);
  if (v30)
  {
LABEL_15:
    objc_msgSend(v138, "commandBuffer");
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v137, "encodeToCommandBuffer:sourceTexture:keypointsBuffer:keypointBufferOffset:keypointCountBuffer:keypointCountBufferOffset:", v131, v30, v141, 0, v140, 0);
    objc_msgSend(v131, "blitCommandEncoder");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v141;
    v156 = v32;
    v33 = (unint64_t)v140;
    v157 = (id)v33;
    v132 = v31;
    nullsub_4(v31);

    objc_msgSend(v31, "endEncoding");
    objc_msgSend(v131, "commit");
    objc_msgSend(v131, "waitUntilCompleted");
    objc_msgSend(v131, "error");
    v34 = (id)objc_claimAutoreleasedReturnValue();
    v35 = v34;
    if (v34 && objc_msgSend(v34, "code"))
    {

LABEL_23:
      v37 = 0;
      v38 = v132;
LABEL_157:

      goto LABEL_158;
    }

    LODWORD(v33) = *(_DWORD *)objc_msgSend(objc_retainAutorelease((id)v33), "contents");
    v36 = objc_msgSend(v144, "maximumKeyPoints");
    if (v33 >= v36)
      v33 = v36;
    else
      v33 = v33;
    v145 = objc_msgSend(objc_retainAutorelease(v32), "contents");
    if ((_DWORD)v33 && !v145)
      goto LABEL_23;
    v46 = *(int8x8_t **)a9;
    v130 = v30;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a9 + 16) - *(_QWORD *)a9) >> 2) < v33)
    {
      v47 = *(int8x8_t **)(a9 + 8);
      v48 = (char *)operator new(20 * v33);
      v49 = &v48[20 * (((char *)v47 - (char *)v46) / 20)];
      v50 = v49;
      if (v47 != v46)
      {
        v51 = &v48[20 * (((char *)v47 - (char *)v46) / 20)];
        do
        {
          v52 = *(_OWORD *)&v47[-3].u8[4];
          v50 = v51 - 20;
          *((_DWORD *)v51 - 1) = v47[-1].i32[1];
          *(_OWORD *)(v51 - 20) = v52;
          v47 = (int8x8_t *)((char *)v47 - 20);
          v51 -= 20;
        }
        while (v47 != v46);
      }
      *(_QWORD *)a9 = v50;
      *(_QWORD *)(a9 + 8) = v49;
      *(_QWORD *)(a9 + 16) = &v48[20 * v33];
      if (v46)
        operator delete(v46);
    }
    *(_OWORD *)v150 = 0u;
    *(_OWORD *)v151 = 0u;
    v152 = 1065353216;
    __p = 0;
    v148 = 0;
    v149 = 0;
    sub_2394187EC((uint64_t)&__p, v33);
    if ((_DWORD)v33)
    {
      v53 = 0;
      v54 = vcvt_f32_s32(v134);
      do
      {
        while (1)
        {
          v55 = (float32x2_t *)(v145 + 36 * v53);
          v56 = vadd_f32(*v55, (float32x2_t)0x3F0000003F000000);
          v57 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v56, v54), (int8x8_t)v54, (int8x8_t)v56), (int8x8_t)vcltz_f32(v56));
          v58 = (float)(v55[1].f32[1] / 180.0) * 3.14159265;
          v59 = v55[1].f32[0] * 0.5;
          v60 = v55[2].i32[0];
          v61 = v57.u32[0];
          if (*(float *)v57.i32 == 0.0)
            v61 = 0;
          v62 = v57.u32[1];
          if (*(float *)&v57.i32[1] == 0.0)
            v62 = 0;
          v63 = ((v61 >> 2) + 2654435769u + (v61 << 6) + v62) ^ v61;
          v64 = v59 == 0.0 ? 2654435769 : LODWORD(v59) + 2654435769;
          v65 = (v64 + (v63 >> 2) + (v63 << 6)) ^ v63;
          v66 = v58 == 0.0 ? 2654435769 : LODWORD(v58) + 2654435769;
          v67 = (v66 + (v65 >> 2) + (v65 << 6)) ^ v65;
          v146 = v67;
          if (v150[1])
          {
            v68 = (uint8x8_t)vcnt_s8((int8x8_t)v150[1]);
            v68.i16[0] = vaddlv_u8(v68);
            if (v68.u32[0] > 1uLL)
            {
              v69 = v67;
              if ((void *)v67 >= v150[1])
                v69 = v67 % (unint64_t)v150[1];
            }
            else
            {
              v69 = v67 & ((unint64_t)v150[1] - 1);
            }
            v70 = (_QWORD *)*((_QWORD *)v150[0] + v69);
            if (v70)
            {
              v71 = (_QWORD *)*v70;
              if (v71)
                break;
            }
          }
LABEL_75:
          v75 = *(int8x8_t **)(a9 + 8);
          v74 = *(_QWORD *)(a9 + 16);
          if ((unint64_t)v75 >= v74)
          {
            v77 = *(int8x8_t **)a9;
            v78 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v75 - *(_QWORD *)a9) >> 2);
            v79 = v78 + 1;
            if (v78 + 1 > 0xCCCCCCCCCCCCCCCLL)
              sub_2394189F8();
            v80 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74 - (_QWORD)v77) >> 2);
            if (2 * v80 > v79)
              v79 = 2 * v80;
            if (v80 >= 0x666666666666666)
              v81 = 0xCCCCCCCCCCCCCCCLL;
            else
              v81 = v79;
            if (v81)
            {
              v135 = v57;
              if (v81 > 0xCCCCCCCCCCCCCCCLL)
                sub_239418A80();
              v82 = (char *)operator new(20 * v81);
              v57 = v135;
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[20 * v78];
            *(int8x8_t *)v83 = v57;
            *((float *)v83 + 2) = v58;
            *((float *)v83 + 3) = v59;
            *((_DWORD *)v83 + 4) = v60;
            v84 = v83;
            if (v75 != v77)
            {
              do
              {
                v85 = *(_OWORD *)&v75[-3].u8[4];
                *((_DWORD *)v84 - 1) = v75[-1].i32[1];
                *(_OWORD *)(v84 - 20) = v85;
                v84 -= 20;
                v75 = (int8x8_t *)((char *)v75 - 20);
              }
              while (v75 != v77);
              v75 = *(int8x8_t **)a9;
            }
            v76 = v83 + 20;
            *(_QWORD *)a9 = v84;
            *(_QWORD *)(a9 + 8) = v83 + 20;
            *(_QWORD *)(a9 + 16) = &v82[20 * v81];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v75 = v57;
            *(float *)v75[1].i32 = v58;
            *(float *)&v75[1].i32[1] = v59;
            v76 = (char *)&v75[2] + 4;
            v75[2].i32[0] = v60;
          }
          *(_QWORD *)(a9 + 8) = v76;
          v86 = v148;
          if (v148 == v149 << 6)
          {
            if ((uint64_t)(v148 + 1) < 0)
              sub_2394189F8();
            v87 = v149 << 7;
            if (v149 << 7 <= (v148 & 0xFFFFFFFFFFFFFFC0) + 64)
              v87 = (v148 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v148 <= 0x3FFFFFFFFFFFFFFELL)
              v88 = v87;
            else
              v88 = 0x7FFFFFFFFFFFFFFFLL;
            sub_2394187EC((uint64_t)&__p, v88);
            v86 = v148;
          }
          v148 = v86 + 1;
          *(_QWORD *)((char *)__p + ((v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v86;
          sub_239465800((uint64_t)v150, &v146, &v146);
          if (++v53 == v33)
            goto LABEL_110;
        }
        if (v68.u32[0] < 2uLL)
        {
          while (1)
          {
            v73 = v71[1];
            if (v73 == v67)
            {
              if (v71[2] == v67)
                goto LABEL_102;
            }
            else if ((v73 & ((uint64_t)v150[1] - 1)) != v69)
            {
              goto LABEL_75;
            }
            v71 = (_QWORD *)*v71;
            if (!v71)
              goto LABEL_75;
          }
        }
        while (1)
        {
          v72 = v71[1];
          if (v72 == v67)
            break;
          if ((void *)v72 >= v150[1])
            v72 %= (unint64_t)v150[1];
          if (v72 != v69)
            goto LABEL_75;
LABEL_65:
          v71 = (_QWORD *)*v71;
          if (!v71)
            goto LABEL_75;
        }
        if (v71[2] != v67)
          goto LABEL_65;
LABEL_102:
        v89 = v148;
        if (v148 == v149 << 6)
        {
          if ((uint64_t)(v148 + 1) < 0)
            sub_2394189F8();
          v90 = v149 << 7;
          if (v149 << 7 <= (v148 & 0xFFFFFFFFFFFFFFC0) + 64)
            v90 = (v148 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v148 <= 0x3FFFFFFFFFFFFFFELL)
            v91 = v90;
          else
            v91 = 0x7FFFFFFFFFFFFFFFLL;
          sub_2394187EC((uint64_t)&__p, v91);
          v89 = v148;
        }
        v148 = v89 + 1;
        *(_QWORD *)((char *)__p + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v89);
        ++v53;
      }
      while (v53 != v33);
    }
LABEL_110:
    v92 = (void **)(a9 + 48);
    if (*(_BYTE *)(a9 + 72))
    {
      v93 = *v92;
      if (*v92)
      {
        *(_QWORD *)(a9 + 56) = v93;
        operator delete(v93);
        v94 = *(unsigned __int8 *)(a9 + 72);
        *(_QWORD *)(a9 + 56) = 0;
        *(_QWORD *)(a9 + 64) = 0;
        *v92 = 0;
        if (!v94)
          sub_2394875CC();
        if ((_DWORD)v33)
          goto LABEL_114;
LABEL_148:
        v125 = 0;
        v95 = 0;
LABEL_149:
        v30 = v130;
        v38 = v132;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a9 + 8) - *(_QWORD *)a9) >> 2) != (v95 - v125) >> 2)
        {
          sub_239A444D4((uint64_t)"unknown file", 197, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (__p)
          operator delete(__p);
        v126 = v151[0];
        if (v151[0])
        {
          do
          {
            v127 = (_QWORD *)*v126;
            operator delete(v126);
            v126 = v127;
          }
          while (v127);
        }
        v128 = v150[0];
        v150[0] = 0;
        if (v128)
          operator delete(v128);
        v37 = 1;
        goto LABEL_157;
      }
      *v92 = 0;
      *(_QWORD *)(a9 + 56) = 0;
      *(_QWORD *)(a9 + 64) = 0;
      if (!(_DWORD)v33)
        goto LABEL_148;
    }
    else
    {
      *v92 = 0;
      *(_QWORD *)(a9 + 56) = 0;
      *(_QWORD *)(a9 + 64) = 0;
      *(_BYTE *)(a9 + 72) = 1;
      if (!(_DWORD)v33)
        goto LABEL_148;
    }
LABEL_114:
    v136 = (void **)(a9 + 48);
    v95 = (char *)operator new(4 * v33);
    v96 = 0;
    *(_QWORD *)(a9 + 48) = v95;
    *(_QWORD *)(a9 + 56) = v95;
    *(_QWORD *)(a9 + 64) = &v95[4 * v33];
    while (1)
    {
      if (((*(_QWORD *)((char *)__p + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
        goto LABEL_117;
      v97 = v145 + 36 * v96;
      v98 = *(_DWORD *)(v97 + 28);
      v99 = *(_DWORD *)(v97 + 32);
      v100 = v98 + v99 * objc_msgSend(v144, "layersPerOctave") - 1;
      v102 = *(char **)(a9 + 56);
      v101 = *(_QWORD *)(a9 + 64);
      if ((unint64_t)v102 < v101)
      {
        *(_DWORD *)v102 = v100;
        v95 = v102 + 4;
        v20 = v143;
      }
      else
      {
        v103 = (char *)*v136;
        v104 = v102 - (_BYTE *)*v136;
        v105 = v104 >> 2;
        v106 = (v104 >> 2) + 1;
        if (v106 >> 62)
          sub_2394189F8();
        v107 = v101 - (_QWORD)v103;
        if (v107 >> 1 > v106)
          v106 = v107 >> 1;
        if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
          v108 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v108 = v106;
        if (v108)
        {
          if (v108 >> 62)
            sub_239418A80();
          v109 = operator new(4 * v108);
          v110 = &v109[4 * v105];
          *v110 = v100;
          v95 = (char *)(v110 + 1);
          if (v102 != v103)
          {
LABEL_129:
            v111 = v102 - 4 - v103;
            v20 = v143;
            if (v111 < 0x2C)
              goto LABEL_173;
            if ((unint64_t)(v102 - &v109[v104]) < 0x20)
              goto LABEL_173;
            v112 = (v111 >> 2) + 1;
            v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
            v114 = &v102[-v113];
            v110 = (_DWORD *)((char *)v110 - v113);
            v115 = &v109[4 * v105 - 16];
            v116 = v102 - 16;
            v117 = v112 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v118 = *(_OWORD *)v116;
              *(v115 - 1) = *((_OWORD *)v116 - 1);
              *v115 = v118;
              v115 -= 2;
              v116 -= 32;
              v117 -= 8;
            }
            while (v117);
            v102 = v114;
            if (v112 != (v112 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_173:
              do
              {
                v119 = *((_DWORD *)v102 - 1);
                v102 -= 4;
                *--v110 = v119;
              }
              while (v102 != v103);
            }
            *(_QWORD *)(a9 + 48) = v110;
            *(_QWORD *)(a9 + 56) = v95;
            *(_QWORD *)(a9 + 64) = &v109[4 * v108];
            if (!v103)
              goto LABEL_116;
LABEL_139:
            operator delete(v103);
            goto LABEL_116;
          }
        }
        else
        {
          v109 = 0;
          v110 = (_DWORD *)(4 * v105);
          *(_DWORD *)(4 * v105) = v100;
          v95 = (char *)(4 * v105 + 4);
          if (v102 != v103)
            goto LABEL_129;
        }
        v20 = v143;
        *(_QWORD *)(a9 + 48) = v110;
        *(_QWORD *)(a9 + 56) = v95;
        *(_QWORD *)(a9 + 64) = &v109[4 * v108];
        if (v103)
          goto LABEL_139;
      }
LABEL_116:
      *(_QWORD *)(a9 + 56) = v95;
LABEL_117:
      if (++v96 == v33)
      {
        v125 = *v136;
        goto LABEL_149;
      }
    }
  }
LABEL_143:
  v37 = 0;
LABEL_158:
  sub_2399107E4(v155);

  objc_autoreleasePoolPop(context);
  return v37;
}

void sub_239639700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_2399107E4((_QWORD *)(v33 - 200));
  _Unwind_Resume(a1);
}

uint64_t *sub_239639890(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  _BYTE v51[48];

  memset(&v51[8], 0, 29);
  *(_QWORD *)&v51[40] = 0x800000000;
  v6 = operator new();
  v48 = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v49 = 0;
  v50 = 0u;
  *(_OWORD *)v51 = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&v51[32];
  *a1 = v6;
  a1[1] = (uint64_t)sub_23963A2EC;
  v7 = (void *)objc_opt_new();
  LODWORD(v8) = *(_DWORD *)a2;
  objc_msgSend(v7, "setSigma:", v8, 0, 0, 0, 0);
  objc_msgSend(v7, "setLayersPerOctave:", *(unsigned int *)(a2 + 4));
  objc_msgSend(v7, "setOctaves:", *(unsigned int *)(a2 + 8));
  objc_msgSend(v7, "setUpscale:", *(unsigned __int8 *)(a2 + 12));
  *(float *)&v9 = *(float *)(a2 + 20) + *(float *)(a2 + 16);
  objc_msgSend(v7, "setContrastThreshold:", v9);
  objc_msgSend(v7, "contrastThreshold");
  if (*(float *)&v10 < 0.0)
  {
    LODWORD(v10) = 0;
    objc_msgSend(v7, "setContrastThreshold:", v10);
  }
  objc_msgSend(v7, "setEdgeThreshold:", *(unsigned int *)(a2 + 24));
  LODWORD(v11) = *(_DWORD *)(a2 + 28);
  objc_msgSend(v7, "setInitialSigma:", v11);
  objc_msgSend(v7, "setImageBoundary:", *(unsigned int *)(a2 + 32));
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  objc_msgSend(v7, "setOrientationRadius:", v12);
  LODWORD(v13) = *(_DWORD *)(a2 + 40);
  objc_msgSend(v7, "setOrientationWeight:", v13);
  objc_msgSend(v7, "setOrientationBins:", *(unsigned int *)(a2 + 44));
  LODWORD(v14) = *(_DWORD *)(a2 + 48);
  objc_msgSend(v7, "setOrientationThreshold:", v14);
  objc_msgSend(v7, "setMaximumKeyPoints:", *(unsigned int *)(a2 + 52));
  v15 = v7;
  sub_239639CC0((std::__shared_weak_count_vtbl **)&v48, v15, 0);
  v16 = *a1;
  v17 = v48;
  v48 = 0uLL;
  v18 = *(std::__shared_weak_count **)(v16 + 8);
  *(_OWORD *)v16 = v17;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  nullsub_4(a3);
  sub_2397A9494(v24);
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = *(void **)(*a1 + 32);
  *(_QWORD *)(*a1 + 32) = v25;

  v27 = objc_msgSend(*(id *)(*a1 + 32), "newBufferWithLength:options:", *(int *)(a2 + 68) * (uint64_t)*(int *)(a2 + 68), 0);
  v28 = *(void **)(*a1 + 56);
  *(_QWORD *)(*a1 + 56) = v27;

  v29 = objc_msgSend(*(id *)(*a1 + 32), "newBufferWithLength:options:", 4, 0);
  v30 = *(void **)(*a1 + 40);
  *(_QWORD *)(*a1 + 40) = v29;

  v31 = objc_msgSend(*(id *)(*a1 + 32), "newBufferWithLength:options:", 36 * *(unsigned int *)(a2 + 52), 0);
  v32 = *(void **)(*a1 + 48);
  *(_QWORD *)(*a1 + 48) = v31;

  v33 = objc_msgSend(*(id *)(*a1 + 32), "newCommandQueue");
  v34 = *(void **)(*a1 + 64);
  *(_QWORD *)(*a1 + 64) = v33;

  v35 = objc_alloc(MEMORY[0x24BDDE3F8]);
  v36 = (void *)objc_msgSend(v35, "initWithDevice:descriptor:", *(_QWORD *)(*a1 + 32), v15);

  objc_msgSend(v36, "setEdgeMode:", 1);
  v37 = v36;
  sub_239639CC0((std::__shared_weak_count_vtbl **)&v48, v37, 0);
  v38 = *a1;
  v39 = v48;
  v48 = 0uLL;
  v40 = *(std::__shared_weak_count **)(v38 + 24);
  *(_OWORD *)(v38 + 16) = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *a1;
  *(_DWORD *)(v46 + 72) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(v46 + 76) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(v46 + 80) = *(_DWORD *)(a2 + 64);

  return a1;
}

void sub_239639C54(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v5 = *v1;
  *v1 = 0;
  if (v5)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_239639CC0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23946D6F0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBF58;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_239639D9C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239639DB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_239639DCC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    ((void (*)(void))a1[1])();
  return a1;
}

uint64_t sub_239639E04()
{
  return MGGetBoolAnswer();
}

uint64_t sub_239639E10(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  signed int v10;
  signed int v11;
  signed int v12;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  id v41;
  std::__shared_weak_count *v42;
  id v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  void *v46[2];
  void *v47[2];
  __int128 v48;
  void *__p;
  void *v50;
  char v51;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 24);
  for (i = *(_QWORD *)(a3 + 32); i != v6; i -= 24)
  {
    v8 = *(void **)(i - 24);
    free(v8);
  }
  *(_QWORD *)(a3 + 32) = v6;
  if (*(_BYTE *)(a3 + 72))
  {
    v9 = *(void **)(a3 + 48);
    if (v9)
    {
      *(_QWORD *)(a3 + 56) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a3 + 72) = 0;
  }
  v10 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v12 = *(_DWORD *)(*a1 + 84);
  if (v10 < v12 || v11 < v12)
    return 0;
  v51 = 0;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)v47 = 0u;
  v48 = 0u;
  LOBYTE(__p) = 0;
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
    goto LABEL_28;
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v15 = *(_QWORD *)(a2 + 8);
    v20 = *(std::__shared_weak_count **)(a2 + 16);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  if (*(_BYTE *)(a2 + 49))
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v15 + 96))(&v45, v15, 0);
  else
LABEL_28:
    v45 = 0;
  bzero((void *)objc_msgSend(*(id *)(*a1 + 48), "contents"), objc_msgSend(*(id *)(*a1 + 48), "length"));
  v24 = *(void **)(*a1 + 48);
  objc_msgSend(v24, "length");
  nullsub_4(v24);
  sub_23946D5E0(&v43, *a1 + 16);
  sub_23946D5E0(&v41, *a1);
  v25 = sub_2396389B8(a2, &v43, &v41, *(void **)(*a1 + 32), *(void **)(*a1 + 64), *(void **)(*a1 + 40), *(void **)(*a1 + 48), *(void **)(*a1 + 56), (uint64_t)v46, *(_BYTE *)(*a1 + 76));
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v45;
  v45 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if ((v25 & 1) == 0)
  {
    v14 = 1;
    if (!v51)
      goto LABEL_56;
    goto LABEL_54;
  }
  v33 = *a1;
  v34 = *(_DWORD *)(*a1 + 80);
  if (!v34)
  {
    v35 = sub_239631A14((uint64_t *)v46, a3, *(int *)(v33 + 72));
    goto LABEL_52;
  }
  if (v34 == 1)
  {
    v35 = sub_2396326C8(v10, v11, (uint64_t *)v46, a3, *(int *)(v33 + 72), 9u, 0, 0);
LABEL_52:
    if ((v35 & 1) == 0)
      goto LABEL_46;
    goto LABEL_53;
  }
  if (v34 != 2 || !sub_239633760((uint64_t *)v46, a3, *(int *)(v33 + 72), 0))
  {
LABEL_46:
    v14 = 3;
    if (!v51)
      goto LABEL_56;
LABEL_54:
    if (__p)
    {
      v50 = __p;
      operator delete(__p);
    }
    goto LABEL_56;
  }
LABEL_53:
  v14 = 0;
  if (v51)
    goto LABEL_54;
LABEL_56:
  v36 = (char *)v47[1];
  if (v47[1])
  {
    v37 = (char *)v48;
    v38 = v47[1];
    if ((void *)v48 != v47[1])
    {
      do
      {
        v39 = (void *)*((_QWORD *)v37 - 3);
        v37 -= 24;
        free(v39);
      }
      while (v37 != v36);
      v38 = v47[1];
    }
    *(_QWORD *)&v48 = v36;
    operator delete(v38);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return v14;
}

void sub_23963A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2394162A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23963A1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2394162A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23963A1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  v5 = v12;
  v12 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_2394162A0((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_23963A218(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_23963A2EC(uint64_t result)
{
  if (result)
  {
    sub_23963A218(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_23963A318(uint64_t a1, unsigned int *a2, _QWORD *a3, int a4)
{
  int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 **v24;
  __int16 *v25;
  __int16 *v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  _WORD *v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int16x8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  int16x8_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 *v87;
  uint64_t v88;
  uint64_t v89;
  __int16 *v90;
  char *v91;
  uint64_t v92;
  __int16 v93;
  _QWORD *v94;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v4 = a4;
  v5 = a3;
  v6 = a2[2];
  if (v6 != -1)
  {
    v94 = a3;
    v96 = a4;
    if (*a3)
      goto LABEL_3;
    goto LABEL_30;
  }
  v34 = a2[3];
  v35 = (v34 + 1) * *(_DWORD *)(a1 + 8);
  if (v35 >= (v34 + 1) * *(_DWORD *)(a1 + 12))
    v35 = (v34 + 1) * *(_DWORD *)(a1 + 12);
  v6 = (int)(round(log((double)v35) / 0.693147181 + -2.0) + (double)v34);
  v94 = v5;
  v96 = v4;
  if (!*v5)
  {
LABEL_30:
    if (v6 <= 0)
    {
      *v5 = 0;
      v5[1] = 0;
      v5[2] = v6;
      return;
    }
    v36 = v6;
    v37 = malloc_type_malloc(72 * v6, 0x10A004022C67442uLL);
    v38 = 0;
    *v5 = 0;
    v5[1] = v37;
    v99 = v36;
    v5[2] = v36;
    while (1)
    {
      while (1)
      {
        v39 = *v5;
        v40 = v5[2];
        if (v38)
          break;
        if (*v5 >= v40)
        {
          v53 = 2 * v40;
          v16 = v40 == 0;
          v54 = 3;
          if (!v16)
            v54 = v53;
          if (v54 <= v39)
            v55 = v39 + 1;
          else
            v55 = v54;
          if (v55)
          {
            v5[1] = malloc_type_realloc((void *)v5[1], 72 * v55, 0xD9C78668uLL);
            v39 = *v5;
          }
          v5[2] = v55;
        }
        *v5 = v39 + 1;
        v56 = v5[1] + 72 * v39;
        *(_QWORD *)(v56 + 64) = 0;
        *(_OWORD *)(v56 + 32) = 0u;
        *(_OWORD *)(v56 + 48) = 0u;
        *(_OWORD *)v56 = 0u;
        *(_OWORD *)(v56 + 16) = 0u;
        sub_23963A964(a1, (uint64_t)a2, v5[1] + 72 * *v5 - 72, v4);
        v38 = 1;
        if (v99 == 1)
          return;
      }
      if (*v5 >= v40)
      {
        v41 = 2 * v40;
        v16 = v40 == 0;
        v42 = 3;
        if (!v16)
          v42 = v41;
        if (v42 <= v39)
          v43 = v39 + 1;
        else
          v43 = v42;
        if (v43)
        {
          v5[1] = malloc_type_realloc((void *)v5[1], 72 * v43, 0x6387CDF6uLL);
          v39 = *v5;
        }
        v5[2] = v43;
      }
      *v5 = v39 + 1;
      v44 = v5[1] + 72 * v39;
      *(_QWORD *)(v44 + 64) = 0;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_OWORD *)(v44 + 48) = 0u;
      *(_OWORD *)v44 = 0u;
      *(_OWORD *)(v44 + 16) = 0u;
      v45 = *v5;
      v46 = v5[1];
      v47 = (int16x8_t *)a2[1];
      v48 = v46 + 72 * (v38 - 1);
      v51 = *(_QWORD *)(v48 + 48);
      v50 = (uint64_t *)(v48 + 48);
      v49 = v51;
      v101 = *(v50 - 5);
      if (v51 < 1)
        v52 = 0;
      else
        v52 = malloc_type_malloc(4 * v49, 0x37AC3073uLL);
      v57 = v45 - 1;
      v58 = v46 + 72 * (v45 - 1);
      *(_QWORD *)(v58 + 48) = 0;
      v59 = (uint64_t *)(v58 + 48);
      v59[1] = (uint64_t)v52;
      v60 = *v50;
      v59[2] = *v50;
      if (v60 >= 1)
      {
        bzero(v52, 4 * v60);
        v60 = *v50;
        v52 = (void *)v59[1];
      }
      v61 = (uint64_t *)(v46 + 72 * v57);
      v62 = (int)v47;
      *v59 = v60;
      memcpy(v52, *(const void **)(v46 + 72 * (v38 - 1) + 56), 4 * *v50);
      v63 = (int)v47 + 1;
      if ((v47 & 0x80000000) != 0)
      {
        v67 = v47;
        v72 = (_QWORD *)(v46 + 72 * v57);
        v72[3] = 0;
        v72[4] = 0;
        v72[5] = v63;
        if ((_DWORD)v47 != -1)
        {
          *v61 = 0;
          v61[1] = 0;
          v61[2] = (int)v47 + 2;
          v73 = 2 * ((int)v47 + 2);
          if (v73 <= 1)
            v73 = 1;
          if ((_DWORD)v47 == -2)
            v74 = 10;
          else
            v74 = v73;
          v70 = (char *)malloc_type_realloc(0, 24 * v74, 0xC56FDAC7uLL);
          v61[1] = (uint64_t)v70;
          v61[2] = v74;
          v71 = *v61;
          v4 = v96;
          v69 = v101;
          goto LABEL_69;
        }
        v68 = 1;
      }
      else
      {
        v64 = v63;
        v65 = malloc_type_malloc(24 * v63, 0x1010040113C0ABBuLL);
        v66 = (_QWORD *)(v46 + 72 * v57);
        v66[3] = 0;
        v66[4] = v65;
        v66[5] = v64;
        v67 = v47;
        v68 = (uint64_t)v47->i64 + 2;
      }
      v4 = v96;
      v69 = v101;
      v70 = (char *)malloc_type_malloc(24 * v68, 0x1010040113C0ABBuLL);
      v71 = 0;
      v61[1] = (uint64_t)v70;
      v61[2] = v68;
LABEL_69:
      v75 = v69 + 24 * v62;
      *v61 = v71 + 1;
      v76 = &v70[24 * v71];
      *(_QWORD *)v76 = 0;
      *((_QWORD *)v76 + 1) = 0;
      *((_QWORD *)v76 + 2) = 0;
      v77 = v61[1] + 24 * *v61;
      LODWORD(v76) = *(_DWORD *)(v75 + 8) + (*(int *)(v75 + 8) < 0);
      v78 = *(_DWORD *)(v75 + 8) / 2;
      v79 = *(_DWORD *)(v75 + 12) / 2;
      *(_DWORD *)(v77 - 16) = v78;
      *(_DWORD *)(v77 - 12) = v79;
      v80 = (unsigned int *)(v77 - 16);
      *((_QWORD *)v80 + 1) = (uint64_t)(int)v76 >> 1;
      v81 = (char *)malloc_type_malloc(2 * (v79 + 16) * v78, 0x1000040BDFB0063uLL);
      v82 = *((_QWORD *)v80 + 1);
      v83 = &v81[16 * v82];
      *((_QWORD *)v80 - 1) = v83;
      v84 = v80[1];
      if ((int)v84 >= 1)
      {
        v85 = *v80;
        if ((int)v85 >= 1)
        {
          v86 = 0;
          v87 = *(__int16 **)v75;
          v88 = 2 * v82;
          v89 = 4 * *(_QWORD *)(v69 + 24 * v62 + 16);
          do
          {
            v90 = v87;
            v91 = v83;
            v92 = v85;
            do
            {
              v93 = *v90;
              v90 += 2;
              *(_WORD *)v91 = v93;
              v91 += 2;
              --v92;
            }
            while (v92);
            ++v86;
            v83 += v88;
            v87 = (__int16 *)((char *)v87 + v89);
          }
          while (v86 != v84);
        }
      }
      sub_23963F010(v67, (uint64_t)v61, v4);
      v5 = v94;
      if (++v38 == v99)
        return;
    }
  }
LABEL_3:
  if (v6 >= 1)
  {
    v7 = 0;
    v98 = v6;
    do
    {
      while (1)
      {
        v8 = v5[1];
        if (v7)
          break;
        sub_23963A964(a1, (uint64_t)a2, v5[1], v4);
        v7 = 1;
        if (v98 == 1)
          return;
      }
      v9 = (_QWORD *)(v8 + 72 * v7);
      v100 = (int)a2[1];
      v97 = *(v9 - 8);
      v10 = v9 + 6;
      v11 = v9[6];
      v12 = v9 - 3;
      v13 = *(v9 - 3);
      v14 = v9[8];
      if (v13 > v14)
      {
        v15 = 2 * v14;
        v16 = v14 == 0;
        v17 = 64;
        if (!v16)
          v17 = v15;
        if (v17 <= v13)
          v18 = *(v9 - 3);
        else
          v18 = v17;
        if (v18)
        {
          *(_QWORD *)(v8 + 72 * v7 + 56) = malloc_type_realloc(*(void **)(v8 + 72 * v7 + 56), 4 * v18, 0xAB46227DuLL);
          v5 = v94;
        }
        v9[8] = v18;
        v4 = v96;
      }
      if (v13 > v11)
        bzero((void *)(*(_QWORD *)(v8 + 72 * v7 + 56) + 4 * *v10), 4 * (v13 - v11));
      v19 = *v12;
      *v10 = *v12;
      memcpy(*(void **)(v8 + 72 * v7 + 56), *(const void **)(v8 + 72 * (v7 - 1) + 56), 4 * v19);
      v20 = v9[1];
      v21 = *(unsigned int *)(v20 + 12);
      if ((int)v21 >= 1)
      {
        v22 = *(unsigned int *)(v20 + 8);
        if ((int)v22 >= 1)
        {
          v23 = 0;
          v24 = (__int16 **)(v97 + 24 * (int)v100);
          v25 = *v24;
          v26 = v24[2];
          v27 = *(_WORD **)v20;
          v28 = 2 * *(_QWORD *)(v20 + 16);
          v29 = 4 * (_QWORD)v26;
          do
          {
            v30 = v25;
            v31 = v27;
            v32 = v22;
            do
            {
              v33 = *v30;
              v30 += 2;
              *v31++ = v33;
              --v32;
            }
            while (v32);
            ++v23;
            v27 = (_WORD *)((char *)v27 + v28);
            v25 = (__int16 *)((char *)v25 + v29);
          }
          while (v23 != v21);
        }
      }
      sub_23963F3EC(v100, (_QWORD *)(v8 + 72 * v7++), v4);
    }
    while (v7 != v98);
  }
}

int16x8_t *sub_23963A964(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  int v8;
  double v9;
  double v10;
  int v11;
  long double v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  int v21;
  float v22;
  double v23;
  uint64_t v24;
  float v25;
  int v27;
  float v28;
  int v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v40;
  uint64_t v41;

  v7 = *(float *)a2;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = 4.0;
  if (!v8)
    v9 = 1.0;
  v10 = fmax((float)(v7 * v7) - (float)(*(float *)(a2 + 24) * *(float *)(a2 + 24)) * v9, 0.01);
  v11 = *(_DWORD *)(a2 + 4);
  v12 = exp2(1.0 / (double)v11);
  *(_QWORD *)(a3 + 48) = 0;
  v13 = *(_QWORD *)(a3 + 64);
  if (v13 >= 1)
  {
    v14 = *(float **)(a3 + 56);
    v15 = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *v14 = v7;
    v16 = sqrt(v10);
    if (v11 < -1)
      goto LABEL_26;
    goto LABEL_12;
  }
  v17 = 2 * v13;
  if (2 * v13 <= 1)
    v17 = 1;
  if (v13)
    v13 = v17;
  else
    v13 = 64;
  v14 = (float *)malloc_type_realloc(*(void **)(a3 + 56), 4 * v13, 0x724FF54FuLL);
  *(_QWORD *)(a3 + 56) = v14;
  *(_QWORD *)(a3 + 64) = v13;
  v18 = *(_QWORD *)(a3 + 48);
  v15 = v18 + 1;
  *(_QWORD *)(a3 + 48) = v18 + 1;
  v14[v18] = v7;
  v16 = sqrt(v10);
  if (v11 >= -1)
  {
LABEL_12:
    v19 = 0;
    v20 = v7;
    if (v11 + 2 <= 1)
      v21 = 1;
    else
      v21 = v11 + 2;
    do
    {
      v23 = pow(v12, (double)v19);
      if (v15 >= v13)
      {
        v24 = 2 * v13;
        if (!v13)
          v24 = 64;
        if (v24 <= v15)
          v13 = v15 + 1;
        else
          v13 = v24;
        if (v13)
        {
          v14 = (float *)malloc_type_realloc(v14, 4 * v13, 0x706B40B0uLL);
          *(_QWORD *)(a3 + 56) = v14;
          v15 = *(_QWORD *)(a3 + 48);
        }
        *(_QWORD *)(a3 + 64) = v13;
      }
      v22 = sqrt(-(v23 * v20 * (v23 * v20) - v12 * (v23 * v20 * (v23 * v20)) * v12));
      v14[v15++] = v22;
      *(_QWORD *)(a3 + 48) = v15;
      ++v19;
    }
    while (v21 != v19);
  }
LABEL_26:
  if (*(_QWORD *)a3)
  {
    v25 = v16;
    sub_23963EE40(a1, *(_QWORD *)(a3 + 8), a4, v25);
    return (int16x8_t *)sub_23963F3EC(*(unsigned int *)(a2 + 4), (_QWORD *)a3, a4);
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 12);
    DWORD2(v40) = *(_DWORD *)(a1 + 8) << (v8 != 0);
    HIDWORD(v40) = v27 << (v8 != 0);
    v41 = SDWORD2(v40);
    *(_QWORD *)&v40 = (char *)malloc_type_malloc(2 * (HIDWORD(v40) + 16) * DWORD2(v40), 0x1000040BDFB0063uLL)
                    + 16 * SDWORD2(v40);
    v28 = v16;
    sub_23963EE40(a1, (uint64_t)&v40, a4, v28);
    v29 = *(_DWORD *)(a2 + 4);
    if (v29 < 0)
    {
      v30 = 0;
    }
    else
    {
      v30 = malloc_type_malloc(24 * v29 + 24, 0x1010040113C0ABBuLL);
      v29 = *(_DWORD *)(a2 + 4);
    }
    v31 = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v30;
    *(_QWORD *)(a3 + 40) = v29 + 1;
    if (v29 >= -1)
      v31 = (char *)malloc_type_malloc(24 * (v29 + 2), 0x1010040113C0ABBuLL);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v31;
    v32 = *(int *)(a2 + 4);
    v33 = v32 + 2;
    *(_QWORD *)(a3 + 16) = v32 + 2;
    if ((int)v32 > -2)
    {
      v36 = 0;
    }
    else
    {
      v34 = 2 * v33;
      if (2 * v33 <= 1)
        v34 = 1;
      if ((_DWORD)v32 == -2)
        v35 = 10;
      else
        v35 = v34;
      v31 = (char *)malloc_type_realloc(v31, 24 * v35, 0xB1F48321uLL);
      *(_QWORD *)(a3 + 8) = v31;
      *(_QWORD *)(a3 + 16) = v35;
      v36 = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v36 + 1;
    v37 = &v31[24 * v36];
    v38 = v40;
    *((_QWORD *)v37 + 2) = v41;
    *(_OWORD *)v37 = v38;
    return sub_23963F010((int16x8_t *)*(unsigned int *)(a2 + 4), a3, a4);
  }
}

uint64_t sub_23963ACE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
}

float32x2_t sub_23963AD08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x2_t *v17;
  int *v18;
  int v19;

  v7 = *(_QWORD *)(a3 + 16);
  if (v7 <= 4999)
  {
    v9 = 2 * v7;
    if (2 * v7 <= 5000)
      v9 = 5000;
    if (v7)
      v10 = v9;
    else
      v10 = 5000;
    *(_QWORD *)(a3 + 8) = malloc_type_realloc(*(void **)(a3 + 8), 148 * v10, 0xCEA6B7FAuLL);
    *(_QWORD *)(a3 + 16) = v10;
    v8 = *(_QWORD *)(a4 + 16);
    if (v8 > 4999)
    {
LABEL_3:
      if (*a1 < 1)
        goto LABEL_19;
      goto LABEL_17;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 16);
    if (v8 > 4999)
      goto LABEL_3;
  }
  v12 = 2 * v8;
  if (2 * v8 <= 5000)
    v12 = 5000;
  if (v8)
    v13 = v12;
  else
    v13 = 5000;
  *(_QWORD *)(a4 + 8) = malloc_type_realloc(*(void **)(a4 + 8), 8 * v13, 0xA39AAA29uLL);
  *(_QWORD *)(a4 + 16) = v13;
  if (*a1 >= 1)
  {
LABEL_17:
    v14 = 0;
    v15 = 0;
    do
    {
      sub_23963AE6C();
      ++v15;
      v14 += 72;
    }
    while (*a1 > v15);
  }
LABEL_19:
  v16 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 >= *(_QWORD *)a4)
    v16 = *(_QWORD *)a4;
  if (v16 >= 1)
  {
    v17 = *(float32x2_t **)(a3 + 8);
    v18 = *(int **)(a4 + 8);
    do
    {
      v19 = *v18;
      v18 += 2;
      result = vmul_n_f32(*v17, (float)(1 << v19));
      *v17 = result;
      v17 = (float32x2_t *)((char *)v17 + 148);
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_23963AE6C()
{
  uint64_t v0;
  int v1;
  uint16x8_t v2;
  int8x16_t v3;
  uint16x8_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  float v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  int v30;
  uint64_t *v31;
  int v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint64_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint64_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  _OWORD *v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  _OWORD *v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint64_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  _OWORD *v70;
  uint16x8_t v71;
  uint64_t v72;
  uint16x8_t v73;
  uint64_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  signed int v107;
  signed int v108;
  uint64_t *v109;
  uint64_t *v110;
  _DWORD *v111;
  int *v112;
  uint64_t v113;
  int *v114;
  char *v115;
  uint64_t v116;
  int *v117;
  int v118;
  int64_t v119;
  char *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unsigned int *v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  __int128 v138;
  char *v139;
  unsigned int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t i;
  __int128 *v146;
  uint64_t v147;
  char *v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  char *v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unint64_t v181;
  char *v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  char *v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  char *v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  char *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  char *v257;
  int v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  char *v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  int v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  char *v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  char *v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  unint64_t v339;
  uint64_t v340;
  char *v341;
  int v342;
  int v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  float32x4_t v349;
  uint64_t v350;
  unsigned int *v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  int v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  int *v366;
  signed int v367;
  int *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int16x8_t v372;
  uint64_t v373;
  uint64_t v374;
  int16x8_t v375;
  uint64_t *v376;
  char *v377;
  uint64_t v378;
  int v379;
  int v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  _BYTE v384[160];
  int v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  int8x16_t v392;
  __int128 v393;
  uint16x8_t v394;
  int v395;
  uint64_t v396;

  v0 = MEMORY[0x24BDAC7A8]();
  v360 = v8;
  v361 = v9;
  v11 = (int *)v10;
  v396 = *MEMORY[0x24BDAC8D0];
  v12 = *(float *)(v10 + 16);
  v13 = *(_DWORD *)(v10 + 4);
  v381 = 0;
  v382 = 0;
  v383 = 0;
  v374 = v10;
  v362 = v0;
  if (v13 < 1)
  {
    v15 = 0;
    v368 = 0;
    goto LABEL_130;
  }
  v14 = v1;
  v15 = 0;
  v16 = 0;
  v368 = 0;
  v17 = 0;
  v18 = vcvtms_s32_f32((float)((float)((float)(v12 * 0.5) / (float)v13) * 255.0) * 256.0);
  v19 = (int8x16_t)vdupq_n_s16(v18);
  v375 = (int16x8_t)v19;
  v365 = v0 + 24;
  v20.i64[0] = 0x8000800080008000;
  v20.i64[1] = 0x8000800080008000;
  v367 = v18;
  v363 = v14;
  while (2)
  {
    v21 = *(_QWORD *)(v0 + 32);
    v22 = v21 + 24 * v16++;
    v23 = v11[7];
    v366 = (int *)(v22 + 36);
    if (v23 >= *(_DWORD *)(v22 + 36) - v23)
      goto LABEL_4;
    v24 = 0;
    v25 = (uint64_t *)(v22 + 24);
    v376 = (uint64_t *)(v22 + 48);
    v26 = v23;
    v364 = v16;
    v27 = v21 + 24 * v16;
    v30 = *(_DWORD *)(v27 + 8);
    v29 = (_DWORD *)(v27 + 8);
    v28 = v30;
    v31 = (uint64_t *)(v29 + 2);
    v369 = v23 - 1;
    v370 = v23 + 1;
    v32 = v11[7];
    v33 = v368;
    v373 = v22;
    do
    {
      if (v32 + 9 > v28 - v32)
      {
        v34 = v32;
        v371 = v17;
        if (v32 >= v28 - v32)
          goto LABEL_7;
LABEL_96:
        v102 = v34;
        do
        {
          v103 = *v25;
          v104 = *v31;
          v105 = *(unsigned __int16 *)(*v25 + 2 * (v102 + v26 * *v31));
          v106 = (__int16)v105;
          v107 = v105 - 0x8000;
          v108 = 0x8000 - v105;
          if (v106 < 0)
            v108 = v107;
          if (v108 >= v18)
          {
            v109 = v31;
            v110 = v25;
            v111 = v29;
            v112 = v33;
            if (sub_23963F854((uint64_t *)v22, v103, v104, v376, v102, v26))
            {
              if (v24 >= v371)
              {
                v113 = 2 * v371;
                if (!v371)
                  v113 = 32;
                if (v113 <= v24)
                  v113 = v24 + 1;
                v33 = v112;
                if (v113)
                {
                  v371 = v113;
                  v33 = (int *)malloc_type_realloc(v112, 8 * v113, 0x8271CDD8uLL);
                }
                else
                {
                  v371 = 0;
                }
              }
              else
              {
                v33 = v112;
              }
              v29 = v111;
              v114 = &v33[2 * v24];
              *v114 = v102;
              v114[1] = v26;
              v28 = *v111;
              v22 = v373;
              v11 = (int *)v374;
              v32 = *(_DWORD *)(v374 + 28);
              ++v24;
              v18 = v367;
              v20.i64[0] = 0x8000800080008000;
              v20.i64[1] = 0x8000800080008000;
            }
            else
            {
              v22 = v373;
              v11 = (int *)v374;
              v33 = v112;
              v20.i64[0] = 0x8000800080008000;
              v20.i64[1] = 0x8000800080008000;
              v29 = v111;
            }
            v25 = v110;
            v31 = v109;
          }
          ++v102;
        }
        while (v102 < v28 - v32);
        goto LABEL_7;
      }
      v35 = 0;
      v36 = v32;
      do
      {
        v40 = *v25;
        v41 = *v31;
        v42 = v32 + v35;
        v43 = v42 + v26 * *v31;
        v19 = *(int8x16_t *)(*v25 + 2 * v43);
        v2.i64[0] = v375.i64[0];
        if ((vmaxvq_u16((uint16x8_t)vcgtq_s16(vabsq_s16((int16x8_t)veorq_s8(v19, v20)), v375)) & 0x8000) != 0)
        {
          v44 = *(_QWORD *)(v22 + 16);
          v45 = v376[2];
          v46 = v40 + 2 * (v42 + v369 * v41);
          v47 = *(uint16x8_t *)(v46 - 2);
          v48 = *(uint16x8_t *)(v46 + 2);
          v49 = v40 + 2 * v43;
          v50 = *(uint16x8_t *)(v49 - 2);
          v51 = *(uint16x8_t *)(v49 + 2);
          v52 = v40 + 2 * (v42 + v370 * v41);
          v53 = *(uint16x8_t *)(v52 - 2);
          v54 = *(uint16x8_t *)(v52 + 2);
          v55 = vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(v47, (uint16x8_t)v20), *(uint16x8_t *)v46), v48), v50), v51), v53), *(uint16x8_t *)v52), v54);
          v56 = vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(v47, (uint16x8_t)v20), *(uint16x8_t *)v46), v48), v50), v51), v53), *(uint16x8_t *)v52), v54);
          v57 = (_OWORD *)(*(_QWORD *)v22 + 2 * (v42 + v369 * v44));
          v58 = *(uint16x8_t *)((char *)v57 - 2);
          v59 = *(uint16x8_t *)v57;
          v60 = *(uint16x8_t *)((char *)v57 + 2);
          v61 = (_OWORD *)(*(_QWORD *)v22 + 2 * (v42 + v26 * v44));
          v62 = *(uint16x8_t *)((char *)v61 - 2);
          v63 = *(uint16x8_t *)v61;
          v64 = *(uint16x8_t *)((char *)v61 + 2);
          v65 = *(_QWORD *)v22 + 2 * (v42 + v370 * v44);
          v66 = *(uint16x8_t *)(v65 - 2);
          v67 = *(uint16x8_t *)(v65 + 2);
          v68 = vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(v55, v58), v59), v60), v62), v63), v64), v66), *(uint16x8_t *)v65), v67);
          v69 = vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(v56, v58), v59), v60), v62), v63), v64), v66), *(uint16x8_t *)v65), v67);
          v70 = (_OWORD *)(*v376 + 2 * (v42 + v369 * v45));
          v71 = *(uint16x8_t *)((char *)v70 - 2);
          v4 = *(uint16x8_t *)v70;
          v5 = *(uint16x8_t *)((char *)v70 + 2);
          v72 = *v376 + 2 * (v42 + v26 * v45);
          v6 = *(uint16x8_t *)(v72 - 2);
          v7 = *(uint16x8_t *)v72;
          v73 = *(uint16x8_t *)(v72 + 2);
          v74 = *v376 + 2 * (v42 + v370 * v45);
          v75 = *(uint16x8_t *)(v74 - 2);
          v76 = *(uint16x8_t *)(v74 + 2);
          v77 = vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(v69, v71), v4), v5), v6), *(uint16x8_t *)v72), v73), v75), *(uint16x8_t *)v74), v76);
          v78 = (int8x16_t)vcgtq_u16((uint16x8_t)v19, vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(v68, v71), v4), v5), v6), *(uint16x8_t *)v72), v73), v75), *(uint16x8_t *)v74), v76));
          v3.i64[0] = 0x1000100010001;
          v3.i64[1] = 0x1000100010001;
          v2 = (uint16x8_t)vandq_s8(v78, v3);
          v79 = (int16x8_t)vmaxq_u16((uint16x8_t)vandq_s8((int8x16_t)vcgtq_u16(v77, (uint16x8_t)v19), v3), v2);
          v19 = (int8x16_t)vtstq_s16(v79, v79);
          if ((vmaxvq_u16((uint16x8_t)v19) & 0x8000) != 0)
          {
            v372 = v79;
            if (v79.i16[0])
            {
              if (v24 >= v17)
              {
                v80 = 2 * v17;
                if (!v17)
                  v80 = 32;
                if (v80 <= v24)
                  v80 = v24 + 1;
                if (v80)
                {
                  v81 = v80;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v80, 0x8DA85DFuLL);
                  v79 = v372;
                  v36 = v32;
                  v17 = v81;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v82 = &v33[2 * v24];
              *v82 = v36 + v35;
              v82[1] = v26;
              ++v24;
            }
            if (v79.i16[1])
            {
              if (v24 >= v17)
              {
                v83 = 2 * v17;
                if (!v17)
                  v83 = 32;
                if (v83 <= v24)
                  v83 = v24 + 1;
                if (v83)
                {
                  v84 = v83;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v83, 0x8DA85DFuLL);
                  v79 = v372;
                  v36 = v32;
                  v17 = v84;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v85 = &v33[2 * v24];
              *v85 = v36 + v35 + 1;
              v85[1] = v26;
              ++v24;
            }
            if (v79.i16[2])
            {
              if (v24 >= v17)
              {
                v86 = 2 * v17;
                if (!v17)
                  v86 = 32;
                if (v86 <= v24)
                  v86 = v24 + 1;
                if (v86)
                {
                  v87 = v86;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v86, 0x8DA85DFuLL);
                  v79 = v372;
                  v36 = v32;
                  v17 = v87;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v88 = &v33[2 * v24];
              *v88 = v36 + v35 + 2;
              v88[1] = v26;
              ++v24;
            }
            if (v79.i16[3])
            {
              if (v24 >= v17)
              {
                v89 = 2 * v17;
                if (!v17)
                  v89 = 32;
                if (v89 <= v24)
                  v89 = v24 + 1;
                if (v89)
                {
                  v90 = v89;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v89, 0x8DA85DFuLL);
                  v79.i64[1] = v372.i64[1];
                  v36 = v32;
                  v17 = v90;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v91 = &v33[2 * v24];
              *v91 = v36 + v35 + 3;
              v91[1] = v26;
              ++v24;
            }
            if (v79.i16[4])
            {
              if (v24 >= v17)
              {
                v92 = 2 * v17;
                if (!v17)
                  v92 = 32;
                if (v92 <= v24)
                  v92 = v24 + 1;
                if (v92)
                {
                  v93 = v92;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v92, 0x8DA85DFuLL);
                  v79.i64[1] = v372.i64[1];
                  v36 = v32;
                  v17 = v93;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v94 = &v33[2 * v24];
              *v94 = v36 + v35 + 4;
              v94[1] = v26;
              ++v24;
            }
            if (v79.i16[5])
            {
              if (v24 >= v17)
              {
                v95 = 2 * v17;
                if (!v17)
                  v95 = 32;
                if (v95 <= v24)
                  v95 = v24 + 1;
                if (v95)
                {
                  v96 = v95;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v95, 0x8DA85DFuLL);
                  v79.i32[3] = v372.i32[3];
                  v36 = v32;
                  v17 = v96;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v97 = &v33[2 * v24];
              *v97 = v36 + v35 + 5;
              v97[1] = v26;
              ++v24;
            }
            if (v79.i16[6])
            {
              if (v24 >= v17)
              {
                v98 = 2 * v17;
                if (!v17)
                  v98 = 32;
                if (v98 <= v24)
                  v98 = v24 + 1;
                if (v98)
                {
                  v99 = v98;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v98, 0x8DA85DFuLL);
                  v79.i16[7] = v372.i16[7];
                  v36 = v32;
                  v17 = v99;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v100 = &v33[2 * v24];
              *v100 = v36 + v35 + 6;
              v100[1] = v26;
              ++v24;
            }
            if (v79.i16[7])
            {
              if (v24 >= v17)
              {
                v101 = 2 * v17;
                if (!v17)
                  v101 = 32;
                if (v101 <= v24)
                  v101 = v24 + 1;
                if (v101)
                {
                  v37 = v101;
                  v33 = (int *)malloc_type_realloc(v33, 8 * v101, 0x8DA85DFuLL);
                  v36 = v32;
                  v17 = v37;
                  v22 = v373;
                  v11 = (int *)v374;
                  v20.i64[0] = 0x8000800080008000;
                  v20.i64[1] = 0x8000800080008000;
                }
                else
                {
                  v17 = 0;
                }
              }
              v38 = &v33[2 * v24];
              *v38 = v36 + v35 + 7;
              v38[1] = v26;
              ++v24;
            }
          }
        }
        v28 = *v29;
        v39 = *v29 - v11[7];
        v35 += 8;
      }
      while (v32 + v35 + 9 <= v39);
      v34 = v32 + v35;
      v32 = v11[7];
      v18 = v367;
      v371 = v17;
      if (v34 < v39)
        goto LABEL_96;
LABEL_7:
      ++v26;
      v17 = v371;
      ++v369;
      ++v370;
    }
    while (v26 < *v366 - (uint64_t)v32);
    v15 = v381;
    if (v24 < 1)
    {
      v368 = v33;
      v0 = v362;
      v16 = v364;
    }
    else
    {
      v115 = v382;
      v116 = v383;
      v368 = v33;
      v117 = v33 + 1;
      v118 = v363;
      v16 = v364;
      do
      {
        v380 = 0;
        v126 = *(v117 - 1);
        v379 = 0;
        v380 = v126;
        v379 = *v117;
        *(float *)v19.i32 = (float)v126;
        memset(&v384[8], 0, 140);
        *(float *)v384 = (float)v126;
        *(float *)&v384[4] = (float)v379;
        v378 = 0;
        if (!sub_23963FC6C(v365, v374, v16, v118, (float *)v384, &v380, &v379, (int *)&v378, *(double *)v19.i64, COERCE_DOUBLE((unint64_t)COERCE_UNSIGNED_INT((float)v379)), *(double *)v2.i64, *(double *)v3.i64, *(double *)v4.i64, *(double *)v5.i64, *(float *)v6.i32, *(float *)v7.i32))
        {
          v128 = v379;
          v127 = v380;
          v392 = *(int8x16_t *)&v384[96];
          v393 = *(_OWORD *)&v384[112];
          v394 = *(uint16x8_t *)&v384[128];
          v395 = *(_DWORD *)&v384[144];
          v388 = *(_OWORD *)&v384[32];
          v389 = *(_OWORD *)&v384[48];
          v390 = *(_OWORD *)&v384[64];
          v391 = *(_OWORD *)&v384[80];
          v386 = *(_OWORD *)v384;
          v387 = *(_OWORD *)&v384[16];
          v129 = v15 + 1;
          v130 = v15;
          v131 = v378;
          if (v130 < v116)
          {
            v119 = v130;
          }
          else
          {
            v132 = 2 * v116;
            if (!v116)
              v132 = 1;
            v119 = v130;
            if (v132 <= v130)
              v116 = v129;
            else
              v116 = v132;
            if (v116)
              v115 = (char *)malloc_type_realloc(v115, 164 * v116, 0x1756D97AuLL);
          }
          v120 = &v115[164 * v119];
          *(_DWORD *)v120 = v127;
          *((_DWORD *)v120 + 1) = v128;
          v121 = v386;
          *(_OWORD *)(v120 + 24) = v387;
          *(_OWORD *)(v120 + 8) = v121;
          v122 = v388;
          v123 = v389;
          v124 = v390;
          v3.i64[0] = v391;
          *(_OWORD *)(v120 + 88) = v391;
          *(_OWORD *)(v120 + 72) = v124;
          *(_OWORD *)(v120 + 56) = v123;
          *(_OWORD *)(v120 + 40) = v122;
          v19 = v392;
          v125 = v393;
          v2 = v394;
          *((_DWORD *)v120 + 38) = v395;
          *(uint16x8_t *)(v120 + 136) = v2;
          *(_OWORD *)(v120 + 120) = v125;
          *(int8x16_t *)(v120 + 104) = v19;
          *(_QWORD *)(v120 + 156) = v131;
          v15 = v129;
          v118 = v363;
          v16 = v364;
          v18 = v367;
        }
        v20.i64[0] = 0x8000800080008000;
        v20.i64[1] = 0x8000800080008000;
        v17 = v371;
        v117 += 2;
        --v24;
      }
      while (v24);
      v382 = v115;
      v383 = v116;
      v11 = (int *)v374;
      v0 = v362;
    }
LABEL_4:
    v381 = v15;
    if (v16 < v11[1])
      continue;
    break;
  }
LABEL_130:
  if (v11[12] >= 1)
  {
    sub_239640228();
    v15 = v381;
  }
  v133 = (char *)malloc_type_malloc(0x200uLL, 0x994AA505uLL);
  v134 = (unsigned int *)v382;
  if (v15)
  {
    v135 = 0;
    v136 = 1;
    v137 = 32;
    v138 = 0uLL;
    v377 = v382;
    v139 = v382;
    while (1)
    {
      v140 = (unsigned int *)v382;
      v141 = v135;
      while (1)
      {
        if (!v136)
        {
          --v141;
          v142 = &v133[16 * v141];
          v15 = *((_QWORD *)v142 + 1);
          v139 = (char *)&v140[41 * *(_QWORD *)v142];
        }
        if ((uint64_t)v15 > 15)
          break;
        if ((uint64_t)v15 > 1)
        {
          v143 = v139 + 164;
          v144 = 2;
          for (i = 1; i != v15; ++i)
          {
            v146 = (__int128 *)v143;
            v147 = v144;
            do
            {
              v148 = &v139[164 * (v147 - 2)];
              v149 = *((_DWORD *)v146 + 40) - *((_DWORD *)v148 + 40);
              if (!v149)
              {
                v149 = *((_DWORD *)v146 + 1) - *(_DWORD *)&v139[164 * (v147 - 2) + 4];
                if (!v149)
                  v149 = *(_DWORD *)v146 - *(_DWORD *)v148;
              }
              if ((v149 & 0x80000000) == 0)
                break;
              v385 = 0;
              *(_OWORD *)&v384[128] = v138;
              *(_OWORD *)&v384[144] = v138;
              *(_OWORD *)&v384[96] = v138;
              *(_OWORD *)&v384[112] = v138;
              *(_OWORD *)&v384[64] = v138;
              *(_OWORD *)&v384[80] = v138;
              *(_OWORD *)&v384[32] = v138;
              *(_OWORD *)&v384[48] = v138;
              *(_OWORD *)v384 = v138;
              *(_OWORD *)&v384[16] = v138;
              v150 = *v146;
              v151 = v146[2];
              *(_OWORD *)&v384[16] = v146[1];
              *(_OWORD *)&v384[32] = v151;
              *(_OWORD *)v384 = v150;
              v152 = v146[3];
              v153 = v146[4];
              v154 = v146[5];
              *(_OWORD *)&v384[96] = v146[6];
              *(_OWORD *)&v384[64] = v153;
              *(_OWORD *)&v384[80] = v154;
              *(_OWORD *)&v384[48] = v152;
              v155 = v146[7];
              v156 = v146[8];
              v157 = v146[9];
              v385 = *((_DWORD *)v146 + 40);
              *(_OWORD *)&v384[128] = v156;
              *(_OWORD *)&v384[144] = v157;
              *(_OWORD *)&v384[112] = v155;
              v158 = *(_OWORD *)v148;
              v159 = *((_OWORD *)v148 + 2);
              v146[1] = *((_OWORD *)v148 + 1);
              v146[2] = v159;
              *v146 = v158;
              v160 = *((_OWORD *)v148 + 3);
              v161 = *((_OWORD *)v148 + 4);
              v162 = *((_OWORD *)v148 + 6);
              v146[5] = *((_OWORD *)v148 + 5);
              v146[6] = v162;
              v146[3] = v160;
              v146[4] = v161;
              v163 = *((_OWORD *)v148 + 7);
              v164 = *((_OWORD *)v148 + 8);
              v165 = *((_OWORD *)v148 + 9);
              *((_DWORD *)v146 + 40) = *((_DWORD *)v148 + 40);
              v146[8] = v164;
              v146[9] = v165;
              v146[7] = v163;
              v166 = *(_OWORD *)v384;
              v167 = *(_OWORD *)&v384[32];
              *((_OWORD *)v148 + 1) = *(_OWORD *)&v384[16];
              *((_OWORD *)v148 + 2) = v167;
              *(_OWORD *)v148 = v166;
              v168 = *(_OWORD *)&v384[48];
              v169 = *(_OWORD *)&v384[64];
              v170 = *(_OWORD *)&v384[96];
              *((_OWORD *)v148 + 5) = *(_OWORD *)&v384[80];
              *((_OWORD *)v148 + 6) = v170;
              *((_OWORD *)v148 + 3) = v168;
              *((_OWORD *)v148 + 4) = v169;
              v171 = *(_OWORD *)&v384[112];
              v172 = *(_OWORD *)&v384[128];
              v173 = *(_OWORD *)&v384[144];
              *((_DWORD *)v148 + 40) = v385;
              *((_OWORD *)v148 + 8) = v172;
              *((_OWORD *)v148 + 9) = v173;
              *((_OWORD *)v148 + 7) = v171;
              --v147;
              v146 = (__int128 *)((char *)v146 - 164);
            }
            while (v147 > 1);
            ++v144;
            v143 += 164;
          }
        }
        v136 = 0;
        v15 = 0;
        if (v141 < 1)
        {
          v134 = v140;
          goto LABEL_253;
        }
      }
      if (v15 > 0x27)
        break;
      v174 = v15 >> 1;
      v175 = &v139[164 * (v15 >> 1)];
      v176 = *((_DWORD *)v139 + 40);
      v177 = *((_DWORD *)v175 + 40);
      v178 = v176 - v177;
      if (v176 == v177)
      {
        v179 = *((_DWORD *)v139 + 1);
        v180 = *(_DWORD *)&v139[164 * v174 + 4];
        v178 = v179 - v180;
        if (v179 == v180)
          v178 = *(_DWORD *)v139 - *(_DWORD *)v175;
      }
      v181 = v15 - 1;
      v182 = &v139[164 * v15 - 164];
      v183 = *((_DWORD *)v182 + 40);
      if (v178 < 0)
      {
        v342 = v177 - v183;
        if (!v342)
        {
          v342 = *(_DWORD *)&v139[164 * v174 + 4] - *(_DWORD *)&v139[164 * v181 + 4];
          if (!v342)
            v342 = *(_DWORD *)v175 - *(_DWORD *)v182;
        }
        if ((v342 & 0x80000000) == 0)
        {
          v343 = v176 - v183;
          if (v176 == v183)
          {
            v343 = *((_DWORD *)v139 + 1) - *(_DWORD *)&v139[164 * v181 + 4];
            if (!v343)
              v343 = *(_DWORD *)v139 - *(_DWORD *)v182;
          }
          if (v343 >= 0)
            v174 = 0;
          else
            v174 = v15 - 1;
        }
      }
      else
      {
        v184 = v176 - v183;
        if (!v184)
        {
          v184 = *((_DWORD *)v139 + 1) - *(_DWORD *)&v139[164 * v181 + 4];
          if (!v184)
            v184 = *(_DWORD *)v139 - *(_DWORD *)v182;
        }
        if (v184 < 0)
        {
          v174 = 0;
        }
        else
        {
          v185 = v177 - v183;
          if (v177 == v183)
          {
            v185 = *(_DWORD *)&v139[164 * v174 + 4] - *(_DWORD *)&v139[164 * v181 + 4];
            if (!v185)
              v185 = *(_DWORD *)v175 - *(_DWORD *)v182;
          }
          if (v185 < 0)
            v174 = v15 - 1;
        }
      }
LABEL_223:
      v229 = 0;
      v230 = 0;
      v385 = 0;
      *(_OWORD *)&v384[128] = v138;
      *(_OWORD *)&v384[144] = v138;
      *(_OWORD *)&v384[96] = v138;
      *(_OWORD *)&v384[112] = v138;
      *(_OWORD *)&v384[64] = v138;
      *(_OWORD *)&v384[80] = v138;
      *(_OWORD *)&v384[32] = v138;
      *(_OWORD *)&v384[48] = v138;
      *(_OWORD *)v384 = v138;
      *(_OWORD *)&v384[16] = v138;
      v231 = *(_OWORD *)v139;
      v232 = *((_OWORD *)v139 + 2);
      *(_OWORD *)&v384[16] = *((_OWORD *)v139 + 1);
      *(_OWORD *)&v384[32] = v232;
      *(_OWORD *)v384 = v231;
      v233 = *((_OWORD *)v139 + 3);
      v234 = *((_OWORD *)v139 + 4);
      v235 = *((_OWORD *)v139 + 5);
      *(_OWORD *)&v384[96] = *((_OWORD *)v139 + 6);
      *(_OWORD *)&v384[64] = v234;
      *(_OWORD *)&v384[80] = v235;
      *(_OWORD *)&v384[48] = v233;
      v236 = *((_OWORD *)v139 + 7);
      v237 = *((_OWORD *)v139 + 8);
      v238 = *((_OWORD *)v139 + 9);
      v385 = *((_DWORD *)v139 + 40);
      *(_OWORD *)&v384[128] = v237;
      *(_OWORD *)&v384[144] = v238;
      *(_OWORD *)&v384[112] = v236;
      v239 = &v139[164 * v174];
      v240 = *(_OWORD *)v239;
      v241 = *((_OWORD *)v239 + 2);
      *((_OWORD *)v139 + 1) = *((_OWORD *)v239 + 1);
      *((_OWORD *)v139 + 2) = v241;
      *(_OWORD *)v139 = v240;
      v242 = *((_OWORD *)v239 + 3);
      v243 = *((_OWORD *)v239 + 4);
      v244 = *((_OWORD *)v239 + 6);
      *((_OWORD *)v139 + 5) = *((_OWORD *)v239 + 5);
      *((_OWORD *)v139 + 6) = v244;
      *((_OWORD *)v139 + 3) = v242;
      *((_OWORD *)v139 + 4) = v243;
      v245 = *((_OWORD *)v239 + 7);
      v246 = *((_OWORD *)v239 + 8);
      v247 = *((_OWORD *)v239 + 9);
      *((_DWORD *)v139 + 40) = *((_DWORD *)v239 + 40);
      *((_OWORD *)v139 + 8) = v246;
      *((_OWORD *)v139 + 9) = v247;
      *((_OWORD *)v139 + 7) = v245;
      v248 = *(_OWORD *)v384;
      v249 = *(_OWORD *)&v384[32];
      *((_OWORD *)v239 + 1) = *(_OWORD *)&v384[16];
      *((_OWORD *)v239 + 2) = v249;
      *(_OWORD *)v239 = v248;
      v250 = *(_OWORD *)&v384[48];
      v251 = *(_OWORD *)&v384[64];
      v252 = *(_OWORD *)&v384[96];
      *((_OWORD *)v239 + 5) = *(_OWORD *)&v384[80];
      *((_OWORD *)v239 + 6) = v252;
      *((_OWORD *)v239 + 3) = v250;
      *((_OWORD *)v239 + 4) = v251;
      v253 = *(_OWORD *)&v384[112];
      v254 = *(_OWORD *)&v384[128];
      v255 = *(_OWORD *)&v384[144];
      *((_DWORD *)v239 + 40) = v385;
      *((_OWORD *)v239 + 8) = v254;
      *((_OWORD *)v239 + 9) = v255;
      *((_OWORD *)v239 + 7) = v253;
      v256 = v15 - 1;
      v257 = v139 + 164;
      do
      {
        v258 = *((_DWORD *)v257 + 40) - *((_DWORD *)v139 + 40);
        if (!v258)
        {
          v258 = *((_DWORD *)v257 + 1) - *((_DWORD *)v139 + 1);
          if (!v258)
            v258 = *(_DWORD *)v257 - *(_DWORD *)v139;
        }
        if (v258 <= 0)
        {
          ++v230;
          v385 = 0;
          *(_OWORD *)&v384[128] = v138;
          *(_OWORD *)&v384[144] = v138;
          *(_OWORD *)&v384[96] = v138;
          *(_OWORD *)&v384[112] = v138;
          *(_OWORD *)&v384[64] = v138;
          *(_OWORD *)&v384[80] = v138;
          *(_OWORD *)&v384[32] = v138;
          *(_OWORD *)&v384[48] = v138;
          *(_OWORD *)v384 = v138;
          *(_OWORD *)&v384[16] = v138;
          v259 = *(_OWORD *)v257;
          v260 = *((_OWORD *)v257 + 2);
          *(_OWORD *)&v384[16] = *((_OWORD *)v257 + 1);
          *(_OWORD *)&v384[32] = v260;
          *(_OWORD *)v384 = v259;
          v261 = *((_OWORD *)v257 + 3);
          v262 = *((_OWORD *)v257 + 4);
          v263 = *((_OWORD *)v257 + 5);
          *(_OWORD *)&v384[96] = *((_OWORD *)v257 + 6);
          *(_OWORD *)&v384[64] = v262;
          *(_OWORD *)&v384[80] = v263;
          *(_OWORD *)&v384[48] = v261;
          v264 = *((_OWORD *)v257 + 7);
          v265 = *((_OWORD *)v257 + 8);
          v266 = *((_OWORD *)v257 + 9);
          v385 = *((_DWORD *)v257 + 40);
          *(_OWORD *)&v384[128] = v265;
          *(_OWORD *)&v384[144] = v266;
          *(_OWORD *)&v384[112] = v264;
          v267 = &v139[164 * v230];
          v268 = *(_OWORD *)v267;
          v269 = *((_OWORD *)v267 + 2);
          *((_OWORD *)v257 + 1) = *((_OWORD *)v267 + 1);
          *((_OWORD *)v257 + 2) = v269;
          *(_OWORD *)v257 = v268;
          v270 = *((_OWORD *)v267 + 3);
          v271 = *((_OWORD *)v267 + 4);
          v272 = *((_OWORD *)v267 + 6);
          *((_OWORD *)v257 + 5) = *((_OWORD *)v267 + 5);
          *((_OWORD *)v257 + 6) = v272;
          *((_OWORD *)v257 + 3) = v270;
          *((_OWORD *)v257 + 4) = v271;
          v273 = *((_OWORD *)v267 + 7);
          v274 = *((_OWORD *)v267 + 8);
          v275 = *((_OWORD *)v267 + 9);
          *((_DWORD *)v257 + 40) = *((_DWORD *)v267 + 40);
          *((_OWORD *)v257 + 8) = v274;
          *((_OWORD *)v257 + 9) = v275;
          *((_OWORD *)v257 + 7) = v273;
          v276 = *(_OWORD *)v384;
          v277 = *(_OWORD *)&v384[32];
          *((_OWORD *)v267 + 1) = *(_OWORD *)&v384[16];
          *((_OWORD *)v267 + 2) = v277;
          *(_OWORD *)v267 = v276;
          v278 = *(_OWORD *)&v384[48];
          v279 = *(_OWORD *)&v384[64];
          v280 = *(_OWORD *)&v384[96];
          *((_OWORD *)v267 + 5) = *(_OWORD *)&v384[80];
          *((_OWORD *)v267 + 6) = v280;
          *((_OWORD *)v267 + 3) = v278;
          *((_OWORD *)v267 + 4) = v279;
          v281 = *(_OWORD *)&v384[112];
          v282 = *(_OWORD *)&v384[128];
          v283 = *(_OWORD *)&v384[144];
          *((_DWORD *)v267 + 40) = v385;
          *((_OWORD *)v267 + 8) = v282;
          *((_OWORD *)v267 + 9) = v283;
          *((_OWORD *)v267 + 7) = v281;
          v284 = *((_DWORD *)v257 + 40) - *((_DWORD *)v139 + 40);
          if (!v284)
          {
            v284 = *((_DWORD *)v257 + 1) - *((_DWORD *)v139 + 1);
            if (!v284)
              v284 = *(_DWORD *)v257 - *(_DWORD *)v139;
          }
          if (!v284)
          {
            ++v229;
            v385 = 0;
            *(_OWORD *)&v384[128] = v138;
            *(_OWORD *)&v384[144] = v138;
            *(_OWORD *)&v384[96] = v138;
            *(_OWORD *)&v384[112] = v138;
            *(_OWORD *)&v384[64] = v138;
            *(_OWORD *)&v384[80] = v138;
            *(_OWORD *)&v384[32] = v138;
            *(_OWORD *)&v384[48] = v138;
            *(_OWORD *)v384 = v138;
            *(_OWORD *)&v384[16] = v138;
            v285 = *(_OWORD *)v267;
            v286 = *((_OWORD *)v267 + 2);
            *(_OWORD *)&v384[16] = *((_OWORD *)v267 + 1);
            *(_OWORD *)&v384[32] = v286;
            *(_OWORD *)v384 = v285;
            v287 = *((_OWORD *)v267 + 3);
            v288 = *((_OWORD *)v267 + 4);
            v289 = *((_OWORD *)v267 + 5);
            *(_OWORD *)&v384[96] = *((_OWORD *)v267 + 6);
            *(_OWORD *)&v384[64] = v288;
            *(_OWORD *)&v384[80] = v289;
            *(_OWORD *)&v384[48] = v287;
            v290 = *((_OWORD *)v267 + 7);
            v291 = *((_OWORD *)v267 + 8);
            v292 = *((_OWORD *)v267 + 9);
            v385 = *((_DWORD *)v267 + 40);
            *(_OWORD *)&v384[128] = v291;
            *(_OWORD *)&v384[144] = v292;
            *(_OWORD *)&v384[112] = v290;
            v293 = &v139[164 * v229];
            v294 = *(_OWORD *)v293;
            v295 = *((_OWORD *)v293 + 2);
            *((_OWORD *)v267 + 1) = *((_OWORD *)v293 + 1);
            *((_OWORD *)v267 + 2) = v295;
            *(_OWORD *)v267 = v294;
            v296 = *((_OWORD *)v293 + 3);
            v297 = *((_OWORD *)v293 + 4);
            v298 = *((_OWORD *)v293 + 6);
            *((_OWORD *)v267 + 5) = *((_OWORD *)v293 + 5);
            *((_OWORD *)v267 + 6) = v298;
            *((_OWORD *)v267 + 3) = v296;
            *((_OWORD *)v267 + 4) = v297;
            v299 = *((_OWORD *)v293 + 7);
            v300 = *((_OWORD *)v293 + 8);
            v301 = *((_OWORD *)v293 + 9);
            *((_DWORD *)v267 + 40) = *((_DWORD *)v293 + 40);
            *((_OWORD *)v267 + 8) = v300;
            *((_OWORD *)v267 + 9) = v301;
            *((_OWORD *)v267 + 7) = v299;
            v302 = *(_OWORD *)v384;
            v303 = *(_OWORD *)&v384[32];
            *((_OWORD *)v293 + 1) = *(_OWORD *)&v384[16];
            *((_OWORD *)v293 + 2) = v303;
            *(_OWORD *)v293 = v302;
            v304 = *(_OWORD *)&v384[48];
            v305 = *(_OWORD *)&v384[64];
            v306 = *(_OWORD *)&v384[96];
            *((_OWORD *)v293 + 5) = *(_OWORD *)&v384[80];
            *((_OWORD *)v293 + 6) = v306;
            *((_OWORD *)v293 + 3) = v304;
            *((_OWORD *)v293 + 4) = v305;
            v307 = *(_OWORD *)&v384[112];
            v308 = *(_OWORD *)&v384[128];
            v309 = *(_OWORD *)&v384[144];
            *((_DWORD *)v293 + 40) = v385;
            *((_OWORD *)v293 + 8) = v308;
            *((_OWORD *)v293 + 9) = v309;
            *((_OWORD *)v293 + 7) = v307;
          }
        }
        v257 += 164;
        --v256;
      }
      while (v256);
      v310 = v229 + 1;
      v311 = 164 * v229;
      v312 = 164 * v230 - 164 * v229;
      do
      {
        v385 = 0;
        *(_OWORD *)&v384[128] = v138;
        *(_OWORD *)&v384[144] = v138;
        *(_OWORD *)&v384[96] = v138;
        *(_OWORD *)&v384[112] = v138;
        *(_OWORD *)&v384[64] = v138;
        *(_OWORD *)&v384[80] = v138;
        *(_OWORD *)&v384[32] = v138;
        *(_OWORD *)&v384[48] = v138;
        *(_OWORD *)v384 = v138;
        *(_OWORD *)&v384[16] = v138;
        v313 = &v139[v312];
        v314 = *(_OWORD *)&v139[v312];
        v315 = *(_OWORD *)&v139[v312 + 32];
        *(_OWORD *)&v384[16] = *(_OWORD *)&v139[v312 + 16];
        *(_OWORD *)&v384[32] = v315;
        *(_OWORD *)v384 = v314;
        v316 = *(_OWORD *)&v139[v312 + 48];
        v317 = *(_OWORD *)&v139[v312 + 64];
        v318 = *(_OWORD *)&v139[v312 + 80];
        *(_OWORD *)&v384[96] = *(_OWORD *)&v139[v312 + 96];
        *(_OWORD *)&v384[64] = v317;
        *(_OWORD *)&v384[80] = v318;
        *(_OWORD *)&v384[48] = v316;
        v319 = *(_OWORD *)&v139[v312 + 112];
        v320 = *(_OWORD *)&v139[v312 + 128];
        v321 = *(_OWORD *)&v139[v312 + 144];
        v385 = *(_DWORD *)&v139[v312 + 160];
        *(_OWORD *)&v384[128] = v320;
        *(_OWORD *)&v384[144] = v321;
        v322 = &v139[v311];
        *(_OWORD *)&v384[112] = v319;
        v323 = *(_OWORD *)&v139[v311];
        v324 = *(_OWORD *)&v139[v311 + 32];
        *((_OWORD *)v313 + 1) = *(_OWORD *)&v139[v311 + 16];
        *((_OWORD *)v313 + 2) = v324;
        *(_OWORD *)v313 = v323;
        v325 = *(_OWORD *)&v139[v311 + 48];
        v326 = *(_OWORD *)&v139[v311 + 64];
        v327 = *(_OWORD *)&v139[v311 + 96];
        *((_OWORD *)v313 + 5) = *(_OWORD *)&v139[v311 + 80];
        *((_OWORD *)v313 + 6) = v327;
        *((_OWORD *)v313 + 3) = v325;
        *((_OWORD *)v313 + 4) = v326;
        v328 = *(_OWORD *)&v139[v311 + 112];
        v329 = *(_OWORD *)&v139[v311 + 128];
        v330 = *(_OWORD *)&v139[v311 + 144];
        *((_DWORD *)v313 + 40) = *(_DWORD *)&v139[v311 + 160];
        *((_OWORD *)v313 + 8) = v329;
        *((_OWORD *)v313 + 9) = v330;
        *((_OWORD *)v313 + 7) = v328;
        v331 = *(_OWORD *)v384;
        v332 = *(_OWORD *)&v384[32];
        *((_OWORD *)v322 + 1) = *(_OWORD *)&v384[16];
        *((_OWORD *)v322 + 2) = v332;
        *(_OWORD *)v322 = v331;
        v333 = *(_OWORD *)&v384[48];
        v334 = *(_OWORD *)&v384[64];
        v335 = *(_OWORD *)&v384[96];
        *((_OWORD *)v322 + 5) = *(_OWORD *)&v384[80];
        *((_OWORD *)v322 + 6) = v335;
        *((_OWORD *)v322 + 3) = v333;
        *((_OWORD *)v322 + 4) = v334;
        v336 = *(_OWORD *)&v384[112];
        v337 = *(_OWORD *)&v384[128];
        v338 = *(_OWORD *)&v384[144];
        *((_DWORD *)v322 + 40) = v385;
        *((_OWORD *)v322 + 8) = v337;
        *((_OWORD *)v322 + 9) = v338;
        *((_OWORD *)v322 + 7) = v336;
        --v310;
        v311 -= 164;
        v312 += 164;
      }
      while (v310 > 0);
      v135 = v141 + 1;
      if (v141 + 1 >= v137)
      {
        v339 = v15;
        v340 = 2 * v137;
        v133 = (char *)malloc_type_realloc(v133, 32 * v137, 0x531E5359uLL);
        v138 = 0uLL;
        v137 = v340;
        v15 = v339;
      }
      v341 = &v133[16 * v141];
      *(_QWORD *)v341 = v230 - 0x7063E7063E7063E7 * ((v139 - v377) >> 2) + 1;
      *((_QWORD *)v341 + 1) = v15 + ~v230;
      v15 = v230 - v229;
      v136 = v230 != v229;
      if (v141 < 0 && !v15)
      {
        v134 = (unsigned int *)v382;
        goto LABEL_253;
      }
    }
    v186 = 0;
    v187 = 0;
    v188 = 26;
    if (v15 <= 0x7D0)
      v188 = 8;
    v189 = 3;
    if (v15 > 0x7D0)
      v189 = 9;
    v190 = v15 - 1;
    v191 = 2 * v15 - 2;
    v192 = 3 * v15 - 3;
    while (2)
    {
      v193 = v15;
      v194 = v186 / v188;
      v195 = &v139[164 * (v186 / v188)];
      v196 = (uint64_t)(v190 + v186) / v188;
      v197 = &v139[164 * v196];
      v198 = *((_DWORD *)v195 + 40);
      v199 = *((_DWORD *)v197 + 40);
      v200 = v198 - v199;
      if (v198 == v199)
      {
        v201 = *(_DWORD *)&v139[164 * v194 + 4];
        v202 = *(_DWORD *)&v139[164 * v196 + 4];
        v200 = v201 - v202;
        if (v201 == v202)
          v200 = *(_DWORD *)v195 - *(_DWORD *)v197;
      }
      v203 = (v191 + v186) / v188;
      v204 = &v139[164 * v203];
      v205 = *((_DWORD *)v204 + 40);
      if (v200 < 0)
      {
        v208 = v199 - v205;
        if (!v208)
        {
          v208 = *(_DWORD *)&v139[164 * v196 + 4] - *(_DWORD *)&v139[164 * v203 + 4];
          if (!v208)
            v208 = *(_DWORD *)v197 - *(_DWORD *)v204;
        }
        v15 = v193;
        if (v208 < 0)
          goto LABEL_192;
        v209 = v198 - v205;
        if (v198 == v205)
        {
          v209 = *(_DWORD *)&v139[164 * v194 + 4] - *(_DWORD *)&v139[164 * v203 + 4];
          if (!v209)
            v209 = *(_DWORD *)v195 - *(_DWORD *)v204;
        }
        if (v209 < 0)
        {
LABEL_184:
          *(_QWORD *)&v384[8 * v187] = v203;
          goto LABEL_171;
        }
      }
      else
      {
        v206 = v198 - v205;
        if (!v206)
        {
          v206 = *(_DWORD *)&v139[164 * v194 + 4] - *(_DWORD *)&v139[164 * v203 + 4];
          if (!v206)
            v206 = *(_DWORD *)v195 - *(_DWORD *)v204;
        }
        v15 = v193;
        if ((v206 & 0x80000000) == 0)
        {
          v207 = v199 - v205;
          if (v199 == v205)
          {
            v207 = *(_DWORD *)&v139[164 * v196 + 4] - *(_DWORD *)&v139[164 * v203 + 4];
            if (!v207)
              v207 = *(_DWORD *)v197 - *(_DWORD *)v204;
          }
          if (v207 < 0)
            goto LABEL_184;
LABEL_192:
          *(_QWORD *)&v384[8 * v187] = v196;
LABEL_171:
          ++v187;
          v186 += v192;
          if (v189 == v187)
          {
            while (2)
            {
              if (v189 < 3)
              {
                v174 = *(_QWORD *)v384;
                goto LABEL_223;
              }
              v189 /= 3uLL;
              if (v189 <= 1)
                v210 = 1;
              else
                v210 = v189;
              v211 = v384;
              v212 = (uint64_t *)&v384[16];
LABEL_200:
              v213 = *(v212 - 2);
              v214 = *(v212 - 1);
              v215 = &v139[164 * v213];
              v216 = &v139[164 * v214];
              v217 = *((_DWORD *)v215 + 40);
              v218 = *((_DWORD *)v216 + 40);
              v219 = v217 - v218;
              if (v217 == v218)
              {
                v220 = *(_DWORD *)&v139[164 * v213 + 4];
                v221 = *(_DWORD *)&v139[164 * v214 + 4];
                v219 = v220 - v221;
                if (v220 == v221)
                  v219 = *(_DWORD *)v215 - *(_DWORD *)v216;
              }
              v222 = *v212;
              v223 = &v139[164 * *v212];
              v224 = *((_DWORD *)v223 + 40);
              if (v219 < 0)
              {
                v227 = v218 - v224;
                if (!v227)
                {
                  v227 = *(_DWORD *)&v139[164 * v214 + 4] - *(_DWORD *)&v139[164 * v222 + 4];
                  if (!v227)
                    v227 = *(_DWORD *)v216 - *(_DWORD *)v223;
                }
                if (v227 < 0)
                  goto LABEL_220;
                v228 = v217 - v224;
                if (v217 == v224)
                {
                  v228 = *(_DWORD *)&v139[164 * v213 + 4] - *(_DWORD *)&v139[164 * v222 + 4];
                  if (!v228)
                    v228 = *(_DWORD *)v215 - *(_DWORD *)v223;
                }
                if (v228 < 0)
                {
LABEL_212:
                  *v211 = v222;
                  goto LABEL_199;
                }
              }
              else
              {
                v225 = v217 - v224;
                if (!v225)
                {
                  v225 = *(_DWORD *)&v139[164 * v213 + 4] - *(_DWORD *)&v139[164 * v222 + 4];
                  if (!v225)
                    v225 = *(_DWORD *)v215 - *(_DWORD *)v223;
                }
                if ((v225 & 0x80000000) == 0)
                {
                  v226 = v218 - v224;
                  if (v218 == v224)
                  {
                    v226 = *(_DWORD *)&v139[164 * v214 + 4] - *(_DWORD *)&v139[164 * v222 + 4];
                    if (!v226)
                      v226 = *(_DWORD *)v216 - *(_DWORD *)v223;
                  }
                  if (v226 < 0)
                    goto LABEL_212;
LABEL_220:
                  *v211 = v214;
LABEL_199:
                  v212 += 3;
                  ++v211;
                  if (!--v210)
                    continue;
                  goto LABEL_200;
                }
              }
              break;
            }
            *v211 = v213;
            goto LABEL_199;
          }
          continue;
        }
      }
      break;
    }
    *(_QWORD *)&v384[8 * v187] = v194;
    goto LABEL_171;
  }
LABEL_253:
  free(v133);
  v350 = v381;
  if (v381 >= 1)
  {
    v351 = v134;
    do
    {
      *(_DWORD *)&v384[144] = v351[38];
      v352 = *(_QWORD *)(v351 + 39);
      v353 = (uint64_t *)(*(_QWORD *)(v362 + 8) + 24 * SHIDWORD(v352));
      v354 = *v351;
      v355 = v351[1];
      v356 = *(_OWORD *)(v351 + 30);
      *(_OWORD *)&v384[96] = *(_OWORD *)(v351 + 26);
      *(_OWORD *)&v384[112] = v356;
      *(_OWORD *)&v384[128] = *(_OWORD *)(v351 + 34);
      v357 = *(_OWORD *)(v351 + 14);
      *(_OWORD *)&v384[32] = *(_OWORD *)(v351 + 10);
      *(_OWORD *)&v384[48] = v357;
      v358 = *(_OWORD *)(v351 + 22);
      *(_OWORD *)&v384[64] = *(_OWORD *)(v351 + 18);
      *(_OWORD *)&v384[80] = v358;
      v359 = *(_OWORD *)(v351 + 6);
      *(_OWORD *)v384 = *(_OWORD *)(v351 + 2);
      *(_OWORD *)&v384[16] = v359;
      *(_QWORD *)&v386 = v352;
      sub_239640ED0(v354, v355, v353, (uint64_t)v384, v374, v360, v361, &v386, *(double *)v384, *(double *)&v359, v344, v345, v346, v347, v348, v349);
      v351 += 41;
      --v350;
    }
    while (v350);
  }
  free(v134);
  free(v368);
}

void sub_23963C41C(float *a1, int *a2, uint64_t a3)
{
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  int *v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  unsigned int v17;
  float *v18;
  float v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  _BOOL4 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int v46;
  float v47;
  int v48;
  float v49;
  int v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  float v70;
  float v71;
  float v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  float32x2_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float32x2_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  _BOOL4 v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115[5];
  float v116;
  float v117[5];
  float v118;
  __int128 v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v119 = xmmword_239EC6870;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  if (v6 >= v5)
  {
    if (vabds_f32(v6, v5) >= 0.001 || a1[2] >= v4)
    {
      v7 = 0;
      v8 = a1[5];
      if (v8 < v5)
        goto LABEL_3;
    }
    else
    {
      v7 = 1;
      v5 = a1[3];
      v4 = a1[2];
      v8 = a1[5];
      if (v8 < v6)
        goto LABEL_3;
    }
  }
  else
  {
    v7 = 1;
    v5 = a1[3];
    v8 = a1[5];
    if (v8 < v6)
    {
LABEL_3:
      v7 = 2;
      v5 = v8;
      goto LABEL_12;
    }
  }
  if (vabds_f32(v8, v5) < 0.001 && a1[4] < v4)
  {
    v7 = 2;
    v5 = v8;
    v4 = a1[4];
  }
LABEL_12:
  v9 = a1[7];
  if (v9 < v5 || vabds_f32(v9, v5) < 0.001 && a1[6] < v4)
    v7 = 3;
  v10 = (int *)((unint64_t)&v119 | (4 * v7));
  v11 = *v10;
  *v10 = 0;
  LODWORD(v119) = v11;
  v12 = &a1[2 * v11];
  v13 = *v12;
  v14 = v12[1];
  v15 = &a1[2 * SDWORD1(v119)];
  v16 = v15[1];
  if (v16 > v14)
  {
LABEL_20:
    v17 = 1;
    v18 = &a1[2 * SDWORD2(v119)];
    v19 = v18[1];
    if (v19 > v16)
      goto LABEL_26;
    goto LABEL_23;
  }
  if (vabds_f32(v6, v14) < 0.001 && a1[2] > v13)
  {
    v13 = *v15;
    goto LABEL_20;
  }
  v17 = 0;
  v16 = v14;
  v18 = &a1[2 * SDWORD2(v119)];
  v19 = v18[1];
  if (v19 > v14)
  {
LABEL_26:
    v17 = 2;
    v16 = v19;
    goto LABEL_27;
  }
LABEL_23:
  if (vabds_f32(v8, v16) < 0.001 && a1[4] > v13)
  {
    v13 = *v18;
    goto LABEL_26;
  }
LABEL_27:
  if (a1[2 * SHIDWORD(v119) + 1] > v16 || vabds_f32(v9, v16) < 0.001 && a1[6] > v13)
    v17 = 3;
  v20 = (int *)((unint64_t)&v119 | (4 * v17));
  v21 = *v20;
  *v20 = HIDWORD(v119);
  v22 = SDWORD1(v119);
  v23 = a1[2 * SDWORD1(v119)];
  v24 = a1[2 * SDWORD2(v119)];
  if (v23 > v24)
    v25 = SDWORD1(v119);
  else
    v25 = SDWORD2(v119);
  if (v23 <= v24)
  {
    v26 = a1[2 * SDWORD2(v119)];
  }
  else
  {
    v22 = SDWORD2(v119);
    v26 = a1[2 * SDWORD1(v119)];
  }
  if (v23 <= v24)
    v24 = a1[2 * SDWORD1(v119)];
  v27 = &a1[2 * (int)v119];
  v28 = *v27;
  v29 = v27[1];
  v30 = a1[2 * v22 + 1];
  v31 = a1[2 * v25 + 1];
  v32 = &a1[2 * v21];
  v33 = *v32;
  v34 = v32[1];
  v35 = roundf(v29);
  if ((float)(v29 - v35) < 0.0)
    v36 = 0.0;
  else
    v36 = 1.0;
  v37 = v30 <= v31;
  v38 = v31 - v29;
  v39 = v28 - v26;
  v115[0] = v31 - v29;
  v115[1] = v28 - v26;
  v40 = (float)(v29 * (float)(v28 - v26)) + (float)(v28 * (float)(v31 - v29));
  v41 = v34 - v31;
  v115[2] = v40;
  v115[3] = v34 - v31;
  v113 = v26 - v33;
  v115[4] = v26 - v33;
  v116 = (float)(v31 * (float)(v26 - v33)) + (float)(v26 * (float)(v34 - v31));
  v110 = v116;
  v111 = v33 - v24;
  v112 = v30 - v34;
  v117[4] = v33 - v24;
  v118 = (float)((float)(v33 - v24) * v34) + (float)(v33 * (float)(v30 - v34));
  v109 = v118;
  v42 = v29 - v30;
  v43 = v24 - v28;
  v117[0] = v29 - v30;
  v117[1] = v24 - v28;
  v44 = (float)((float)(v24 - v28) * v30) + (float)(v24 * (float)(v29 - v30));
  v117[2] = v44;
  v117[3] = v30 - v34;
  v45 = roundf(v34);
  v46 = (int)(float)(v35 + v36);
  if (v30 >= v31)
    v47 = v31;
  else
    v47 = v30;
  v48 = (int)(float)(v47 + 1.0);
  *a2 = v46;
  if (v30 <= v31)
    v49 = v31;
  else
    v49 = v30;
  v50 = (int)(float)(v49 + 1.0);
  if ((float)(v34 - v45) <= 0.0)
    v51 = 0.0;
  else
    v51 = 1.0;
  v52 = v45 + v51;
  v53 = (float)(int)(float)(v35 + v36);
  v54 = *(_QWORD *)a3;
  v55 = v48 - v46;
  v114 = v34 - v31;
  if (v48 <= v46)
  {
    v66 = 0;
    v67 = (int)v52;
    v68 = __OFSUB__(v50, v48);
    v69 = v50 - v48;
    if (!((v69 < 0) ^ v68 | (v69 == 0)))
      goto LABEL_82;
LABEL_66:
    v71 = v112;
    v70 = v113;
    v72 = v111;
    v68 = __OFSUB__(v67, v50);
    v73 = v67 - v50;
    if (!((v73 < 0) ^ v68 | (v73 == 0)))
      goto LABEL_67;
LABEL_102:
    v98 = v66;
    v99 = *(_QWORD *)(a3 + 16);
    if (v99 >= v98)
      goto LABEL_97;
LABEL_103:
    v101 = 2 * v99;
    v102 = v99 == 0;
    v103 = 32;
    if (!v102)
      v103 = v101;
    if (v103 <= v98)
      v104 = v98;
    else
      v104 = v103;
    if (v104)
      *(_QWORD *)(a3 + 8) = malloc_type_realloc(*(void **)(a3 + 8), 8 * v104, 0x8649A773uLL);
    *(_QWORD *)(a3 + 16) = v104;
    v100 = v98 - v54;
    if (v98 > v54)
      goto LABEL_98;
    goto LABEL_99;
  }
  v105 = v52;
  v106 = v30 <= v31;
  v107 = v31;
  v108 = v30;
  v56 = 0;
  v57 = -v44;
  v58 = -v40;
  v59 = 8;
  v60 = *(_QWORD *)a3;
  do
  {
    v54 = v56 + 1;
    v62 = *(_QWORD *)(a3 + 16);
    if (v62 <= v56)
    {
      if (v62)
        v63 = 2 * v62;
      else
        v63 = 32;
      if (v63 <= v54)
        v64 = v56 + 1;
      else
        v64 = v63;
      *(_QWORD *)(a3 + 8) = malloc_type_realloc(*(void **)(a3 + 8), 8 * v64, 0xC992D3E5uLL);
      *(_QWORD *)(a3 + 16) = v64;
    }
    v65 = *(_QWORD *)(a3 + 8);
    if (v60 <= v56)
    {
      bzero((void *)(v65 + 8 * *(_QWORD *)a3), v59 - 8 * v60);
      v65 = *(_QWORD *)(a3 + 8);
    }
    *(_QWORD *)a3 = v54;
    v61.f32[0] = ceilf((float)-(float)(v57 + (float)(v43 * v53)) / v42);
    v61.i32[1] = floorf((float)-(float)(v58 + (float)(v39 * v53)) / v38);
    *(int32x2_t *)(v65 + 8 * v56) = vcvt_s32_f32(v61);
    v53 = v53 + 1.0;
    v59 += 8;
    v60 = ++v56;
  }
  while (v55 != (_DWORD)v54);
  v66 = v54;
  v41 = v114;
  v31 = v107;
  v30 = v108;
  v37 = v106;
  v67 = (int)v105;
  v68 = __OFSUB__(v50, v48);
  v69 = v50 - v48;
  if ((v69 < 0) ^ v68 | (v69 == 0))
    goto LABEL_66;
LABEL_82:
  v82 = &v115[3 * (v30 > v31)];
  v83 = &v117[3 * v37];
  v84 = v83[1];
  v85 = -v83[2];
  v86 = *v83;
  v87 = v82[1];
  v88 = -v82[2];
  v89 = *v82;
  v90 = v66;
  v91 = 8 * v66 + 8;
  do
  {
    v93 = v90 + 1;
    v94 = *(_QWORD *)(a3 + 16);
    if (v94 <= v90)
    {
      if (v94)
        v95 = 2 * v94;
      else
        v95 = 32;
      if (v95 <= v93)
        v96 = v90 + 1;
      else
        v96 = v95;
      if (v96)
        *(_QWORD *)(a3 + 8) = malloc_type_realloc(*(void **)(a3 + 8), 8 * v96, 0xC992D3E5uLL);
      *(_QWORD *)(a3 + 16) = v96;
    }
    v97 = *(_QWORD *)(a3 + 8);
    if (v54 <= v90)
    {
      bzero((void *)(v97 + 8 * *(_QWORD *)a3), v91 - 8 * v54);
      v97 = *(_QWORD *)(a3 + 8);
    }
    *(_QWORD *)a3 = v93;
    v92.f32[0] = ceilf((float)-(float)(v85 + (float)(v84 * v53)) / v86);
    v92.i32[1] = floorf((float)-(float)(v88 + (float)(v87 * v53)) / v89);
    *(int32x2_t *)(v97 + 8 * v90) = vcvt_s32_f32(v92);
    v53 = v53 + 1.0;
    v54 = v90 + 1;
    v91 += 8;
    ++v90;
    --v69;
  }
  while (v69);
  v66 = v54;
  v41 = v114;
  v71 = v112;
  v70 = v113;
  v72 = v111;
  v68 = __OFSUB__(v67, v50);
  v73 = v67 - v50;
  if ((v73 < 0) ^ v68 | (v73 == 0))
    goto LABEL_102;
LABEL_67:
  v74 = v66;
  v75 = 8 * v66 + 8;
  do
  {
    v77 = v74 + 1;
    v78 = *(_QWORD *)(a3 + 16);
    if (v78 <= v74)
    {
      if (v78)
        v79 = 2 * v78;
      else
        v79 = 32;
      if (v79 <= v77)
        v80 = v74 + 1;
      else
        v80 = v79;
      if (v80)
        *(_QWORD *)(a3 + 8) = malloc_type_realloc(*(void **)(a3 + 8), 8 * v80, 0xC992D3E5uLL);
      *(_QWORD *)(a3 + 16) = v80;
    }
    v81 = *(_QWORD *)(a3 + 8);
    if (v54 <= v74)
    {
      bzero((void *)(v81 + 8 * *(_QWORD *)a3), v75 - 8 * v54);
      v81 = *(_QWORD *)(a3 + 8);
    }
    *(_QWORD *)a3 = v77;
    v76.f32[0] = ceilf((float)-(float)((float)(v72 * v53) - v109) / v71);
    v76.i32[1] = floorf((float)-(float)((float)(v70 * v53) - v110) / v41);
    *(int32x2_t *)(v81 + 8 * v74) = vcvt_s32_f32(v76);
    v53 = v53 + 1.0;
    v54 = v74 + 1;
    v75 += 8;
    ++v74;
    --v73;
  }
  while (v73);
  v98 = (int)v54;
  v99 = *(_QWORD *)(a3 + 16);
  if (v99 < (int)v54)
    goto LABEL_103;
LABEL_97:
  v100 = v98 - v54;
  if (v98 > v54)
LABEL_98:
    bzero((void *)(*(_QWORD *)(a3 + 8) + 8 * *(_QWORD *)a3), 8 * v100);
LABEL_99:
  *(_QWORD *)a3 = v98;
}

void sub_23963CB40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if (a1)
  {
    if (*(uint64_t *)a1 >= 1)
    {
      v2 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 8);
        v5 = v4 + 72 * v2;
        if (*(uint64_t *)v5 >= 1)
        {
          v6 = 0;
          v7 = 0;
          do
          {
            free((void *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + v6) - 16 * *(_QWORD *)(*(_QWORD *)(v5 + 8) + v6 + 16)));
            v8 = (_QWORD *)(*(_QWORD *)(v5 + 8) + v6);
            *v8 = 0;
            v8[1] = 0;
            v8[2] = 0;
            ++v7;
            v6 += 24;
          }
          while (v7 < *(_QWORD *)v5);
        }
        free(*(void **)(v5 + 8));
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        v9 = v4 + 72 * v2;
        v11 = *(_QWORD *)(v9 + 24);
        v10 = (_QWORD *)(v9 + 24);
        if (v11 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = (_QWORD *)(v4 + 72 * v2 + 32);
          do
          {
            free((void *)(*(_QWORD *)(*v14 + v12) - 16 * *(_QWORD *)(*v14 + v12 + 16)));
            v15 = (_QWORD *)(*v14 + v12);
            *v15 = 0;
            v15[1] = 0;
            v15[2] = 0;
            ++v13;
            v12 += 24;
          }
          while (v13 < *v10);
        }
        v3 = v4 + 72 * v2;
        free(*(void **)(v3 + 32));
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        free(*(void **)(v3 + 56));
        *(_QWORD *)(v3 + 48) = 0;
        *(_QWORD *)(v3 + 56) = 0;
        *(_QWORD *)(v3 + 64) = 0;
        ++v2;
      }
      while (v2 < *(_QWORD *)a1);
    }
    free(*(void **)(a1 + 8));
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

double sub_23963CC9C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1061997773;
  *(_QWORD *)(a1 + 4) = 0x700000003;
  *(_QWORD *)(a1 + 12) = 0x3D75C28F00000000;
  *(_QWORD *)(a1 + 20) = 0x3F0000000000000ALL;
  *(_DWORD *)(a1 + 28) = 5;
  result = 0.12500003;
  *(_QWORD *)(a1 + 32) = 0x3FC0000040900000;
  *(_QWORD *)(a1 + 40) = 0x3F4CCCCD00000024;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_23963CCF8(_QWORD *a1, unsigned int *a2, _QWORD *a3, char a4)
{
  uint64_t result;

  if (!a1)
    return 4294967294;
  if (!*a1)
    return 4294967294;
  result = 4294967294;
  if (a2)
  {
    if (a3)
    {
      sub_23963A318((uint64_t)a1, a2, a3, a4 & 1);
      return 0;
    }
  }
  return result;
}

uint64_t sub_23963CD48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  int v21;
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t *v49;
  int *v50;
  int v51;
  uint64_t v52;
  int v53;
  _QWORD context[8];
  uint64_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  void *v59;
  size_t v60;

  result = 4294967294;
  if (a1 && a2 && a3 && a4)
  {
    if ((a5 & 1) == 0)
    {
      sub_23963AD08(a1, a2, a3, a4);
      return 0;
    }
    v10 = *(_QWORD *)(a1[1] + 8);
    v11 = *(int *)(v10 + 12);
    v12 = 2 * *(int *)(a2 + 28);
    if ((int)v11 <= (int)v12)
      return 0;
    v13 = *(int *)(v10 + 8);
    v14 = v11 - v12;
    qos_class_self();
    v15 = pthread_qos_max_parallelism();
    v16 = v13 * v14 < 0x4000 || v15 == 1;
    if (v16)
    {
      v17 = 1;
    }
    else
    {
      v17 = v14;
      if (v15 <= v14)
      {
        v18 = (int)v15;
        if (v15 >= 2)
        {
          v18 = (int)v15;
          while (!((v14 / v18 * v13) >> 13))
          {
            if (--v18 <= 1)
            {
              v18 = 1;
              break;
            }
          }
        }
        v19 = 2;
        if (v15 != 8)
          v19 = v15 == 6;
        v20 = v18 << v19;
        if (v20 >= v14)
          v17 = v14;
        else
          v17 = v20;
      }
    }
    if ((int)v14 >= v17)
    {
      v25 = 0;
      v26 = *a1;
      if (*a1 <= 1)
        v26 = 1;
      v27 = 80;
      while (v26 - 1 != v25)
      {
        ++v25;
        v28 = *(_DWORD *)(*(_QWORD *)(a1[1] + v27) + 12) - 2 * *(_DWORD *)(a2 + 28);
        v27 += 72;
        if (v28 < v17)
          goto LABEL_35;
      }
      LODWORD(v25) = v26;
LABEL_35:
      v21 = v25;
      if (v17 < 1)
        goto LABEL_27;
    }
    else
    {
      v21 = 0;
      if (v17 < 1)
      {
LABEL_27:
        v22 = 0;
        v23 = 0;
        v24 = v17;
LABEL_37:
        v58 = 0;
        v59 = v22;
        v60 = v24;
        v55 = 0;
        v56 = v23;
        v57 = v24;
        if (v21 >= 1)
        {
          context[6] = v24;
          context[7] = 0;
          context[0] = sub_2396419E8;
          context[1] = a1;
          context[2] = a2;
          v53 = v21;
          context[3] = v21;
          context[4] = &v58;
          context[5] = &v55;
          dispatch_apply_f(v24, 0, context, (void (__cdecl *)(void *, size_t))sub_23963ACE8);
          if (v17 >= 1)
          {
            v29 = 0;
            do
            {
              v31 = *(_QWORD *)a3;
              v32 = (char *)v59;
              v33 = *(_QWORD *)((char *)v59 + v29);
              v34 = v33 + *(_QWORD *)a3;
              v35 = *(_QWORD *)(a3 + 16);
              if (v34 > v35)
              {
                if (v35)
                  v36 = 2 * v35;
                else
                  v36 = 1;
                if (v36 <= v34)
                  v37 = v33 + *(_QWORD *)a3;
                else
                  v37 = v36;
                if (v37)
                {
                  *(_QWORD *)(a3 + 8) = malloc_type_realloc(*(void **)(a3 + 8), 148 * v37, 0xC27A3929uLL);
                  v31 = *(_QWORD *)a3;
                  v32 = (char *)v59;
                  v33 = *(_QWORD *)((char *)v59 + v29);
                }
                *(_QWORD *)(a3 + 16) = v37;
              }
              memcpy((void *)(*(_QWORD *)(a3 + 8) + 148 * v31), *(const void **)&v32[v29 + 8], 148 * v33);
              *(_QWORD *)a3 += *(_QWORD *)((char *)v59 + v29);
              v38 = (char *)v56;
              v39 = *(_QWORD *)a4;
              v40 = *(_QWORD *)((char *)v56 + v29);
              v41 = v40 + *(_QWORD *)a4;
              v42 = *(_QWORD *)(a4 + 16);
              if (v41 > v42)
              {
                v43 = 2 * v42;
                v16 = v42 == 0;
                v44 = 32;
                if (!v16)
                  v44 = v43;
                if (v44 <= v41)
                  v45 = v40 + *(_QWORD *)a4;
                else
                  v45 = v44;
                if (v45)
                {
                  *(_QWORD *)(a4 + 8) = malloc_type_realloc(*(void **)(a4 + 8), 8 * v45, 0xE915AEE3uLL);
                  v39 = *(_QWORD *)a4;
                  v40 = *(_QWORD *)&v38[v29];
                }
                *(_QWORD *)(a4 + 16) = v45;
              }
              v30 = (const void **)&v38[v29];
              memcpy((void *)(*(_QWORD *)(a4 + 8) + 8 * v39), v30[1], 8 * v40);
              *(_QWORD *)a4 += *v30;
              v29 += 24;
            }
            while (24 * v17 != v29);
          }
          v21 = v53;
        }
        v46 = v21;
        if (*a1 > v21)
        {
          v47 = 72 * v21;
          do
          {
            sub_23963AE6C();
            ++v46;
            v47 += 72;
          }
          while (*a1 > v46);
        }
        v48 = *(_QWORD *)a3;
        if (*(_QWORD *)a3 >= *(_QWORD *)a4)
          v48 = *(_QWORD *)a4;
        if (v48 >= 1)
        {
          v49 = *(float32x2_t **)(a3 + 8);
          v50 = *(int **)(a4 + 8);
          do
          {
            v51 = *v50;
            v50 += 2;
            *v49 = vmul_n_f32(*v49, (float)(1 << v51));
            v49 = (float32x2_t *)((char *)v49 + 148);
            --v48;
          }
          while (v48);
        }
        if (v17 >= 1)
        {
          v52 = 0;
          do
          {
            free(*(void **)((char *)v59 + v52 + 8));
            free(*(void **)((char *)v56 + v52 + 8));
            v52 += 24;
          }
          while (24 * v17 != v52);
        }
        free(v59);
        free(v56);
        return 0;
      }
    }
    v22 = malloc_type_malloc(24 * v17, 0x1020040FBFA920DuLL);
    v24 = v17;
    v23 = malloc_type_malloc(24 * v17, 0x1020040FBFA920DuLL);
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_23963D1BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  __float2 v31;
  _OWORD *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  uint64_t v40;
  int64_t v41;
  BOOL v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x4_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  signed int v64;
  unint64_t v65;
  int32x4_t v66;
  float *v67;
  unint64_t v68;
  float *v69;
  signed int *v70;
  int v71;
  signed int v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  char v77;
  float32x4_t *v78;
  int32x2_t v79;
  int32x2_t v80;
  int32x2_t v81;
  int32x2_t v82;
  float32x4_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  int32x4_t v92;
  char *v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  uint64_t *v97;
  signed int *v98;
  signed int v99;
  signed int v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t *v116;
  uint16x4_t *v117;
  uint64_t v118;
  uint16x8_t *v119;
  uint16x8_t *v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  uint16x8_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t *v128;
  uint16x8_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  float32x4_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned __int16 *v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int32x2_t v143;
  uint64_t v144;
  float32x4_t *v145;
  uint64_t v146;
  int32x2_t v147;
  uint64_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  float32x4_t v167;
  uint64_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  float32x4_t v192;
  int8x16_t v193;
  int8x16_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  float v212;
  float v213;
  float32x4_t *v214;
  uint64_t v215;
  int8x16_t *v216;
  float32x4_t *v217;
  float32x4_t *v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  int8x16_t v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  int8x16_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  uint64_t v233;
  uint64_t v234;
  float *v235;
  float *v236;
  float *v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  uint64_t v250;
  float v251;
  float v252;
  char *v253;
  float32x4_t *v254;
  char *v255;
  __int8 *v256;
  float32x4_t v257;
  uint64_t v258;
  float32x4_t *v259;
  float32x4_t v260;
  int8x16_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  uint64_t v278;
  float v279;
  uint64_t (*v280)();
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  __int8 *v286;
  __int8 *v287;
  __int8 *v288;
  float32x4_t v289;
  uint64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t *v293;
  int8x16_t *v294;
  float32x4_t *v295;
  float32x4_t v296;
  float64x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  uint64_t v303;
  uint64_t v304;
  float *v305;
  float *v306;
  float *v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float *v316;
  float v317;
  float v318;
  float v319;
  float v320;
  unsigned int v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float32x4_t *v332;
  int8x16_t *v333;
  int8x16_t *v334;
  char *v335;
  float32x4_t *v336;
  char *v337;
  uint64_t v338;
  float32x4_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t *v344;
  double v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  char *v353;
  uint64_t v354;
  void *ptr;
  uint64_t v356;
  unsigned int v357;
  float v358[8];
  _DWORD v359[70];
  float32x2_t v360;
  __int32 v361;
  __int32 v362;
  __int32 v363;
  __int32 v364;
  __int32 v365;
  __int32 v366;
  float32x2_t v367;
  float32x2_t v368;
  __int32 v369;
  __int32 v370;
  __int32 v371;
  __int32 v372;
  __int32 v373;
  __int32 v374;
  float32x2_t v375;
  float32x2_t v376;
  __int32 v377;
  __int32 v378;
  __int32 v379;
  __int32 v380;
  __int32 v381;
  __int32 v382;
  float32x2_t v383;
  float32x2_t v384;
  __int32 v385;
  __int32 v386;
  __int32 v387;
  __int32 v388;
  __int32 v389;
  __int32 v390;
  float32x2_t v391;
  float32x2_t v392;
  __int32 v393;
  __int32 v394;
  __int32 v395;
  __int32 v396;
  __int32 v397;
  __int32 v398;
  float32x2_t v399;
  float32x2_t v400;
  __int32 v401;
  __int32 v402;
  __int32 v403;
  __int32 v404;
  __int32 v405;
  __int32 v406;
  float32x2_t v407;
  float32x2_t v408;
  __int32 v409;
  __int32 v410;
  __int32 v411;
  __int32 v412;
  __int32 v413;
  __int32 v414;
  float32x2_t v415;
  float32x2_t v416;
  __int32 v417;
  __int32 v418;
  __int32 v419;
  __int32 v420;
  __int32 v421;
  __int32 v422;
  float32x2_t v423;
  float32x2_t v424;
  __int32 v425;
  __int32 v426;
  __int32 v427;
  __int32 v428;
  __int32 v429;
  __int32 v430;
  float32x2_t v431;
  float32x2_t v432;
  __int32 v433;
  __int32 v434;
  __int32 v435;
  __int32 v436;
  __int32 v437;
  __int32 v438;
  float32x2_t v439;
  float32x2_t v440;
  __int32 v441;
  __int32 v442;
  __int32 v443;
  __int32 v444;
  __int32 v445;
  __int32 v446;
  float32x2_t v447;
  float32x2_t v448;
  __int32 v449;
  __int32 v450;
  __int32 v451;
  __int32 v452;
  __int32 v453;
  __int32 v454;
  float32x2_t v455;
  float32x2_t v456;
  __int32 v457;
  __int32 v458;
  __int32 v459;
  __int32 v460;
  __int32 v461;
  __int32 v462;
  float32x2_t v463;
  float32x2_t v464;
  __int32 v465;
  __int32 v466;
  __int32 v467;
  __int32 v468;
  __int32 v469;
  __int32 v470;
  float32x2_t v471;
  float32x2_t v472;
  __int32 v473;
  __int32 v474;
  __int32 v475;
  __int32 v476;
  __int32 v477;
  __int32 v478;
  float32x2_t v479;
  float32x2_t v480;
  __int32 v481;
  __int32 v482;
  __int32 v483;
  __int32 v484;
  __int32 v485;
  __int32 v486;
  float32x2_t v487;
  uint64_t v488;
  float32x4x2_t v489;
  float32x4x2_t v490;
  float32x4x2_t v491;

  v488 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294967294;
  v3 = a2;
  result = 4294967294;
  if (a2 && a3)
  {
    v5 = (float32x4_t *)malloc_type_calloc(0x80uLL, 4uLL, 0x100004052888210uLL);
    v6 = v5;
    if (*v3 >= 1)
    {
      v7 = 0;
      v343 = (unint64_t)&v5[32];
      v8 = 20;
      v9 = 1.0;
      v10 = -0.5;
      v11 = 0.5;
      v344 = v3;
      do
      {
        v17 = 148 * v7;
        v349 = v3[1];
        v350 = v8;
        v18 = (float *)(v349 + 148 * v7);
        v351 = v7;
        v19 = (int *)(*(_QWORD *)(a3 + 8) + 8 * v7);
        v20 = v19[1];
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72 * *v19 + 8);
        v22 = v21 + 24 * v20;
        v23 = v9 / (float)(1 << *v19);
        v24 = v18[1];
        if ((float)(v23 * *v18) <= 0.0)
          v25 = v10;
        else
          v25 = v11;
        v26 = v25 + (float)(*v18 * v23);
        if ((float)(v23 * v24) <= 0.0)
          v27 = v10;
        else
          v27 = v11;
        v28 = v27 + (float)(v24 * v23);
        v29 = v23 * (float)(v18[2] * 3.75);
        v30 = (float)(360.0 - v18[3]) * 3.14159265 / 180.0;
        *(float *)&v30 = v30;
        v347 = v30;
        v31 = __sincosf_stret(*(float *)&v30);
        bzero(v359, 0x5A0uLL);
        v357 = 0;
        v32 = malloc_type_realloc(0, 0x1E0uLL, 0x820C89EFuLL);
        v356 = 60;
        *v32 = 0u;
        v32[1] = 0u;
        v32[2] = 0u;
        v32[3] = 0u;
        v32[4] = 0u;
        v32[5] = 0u;
        v32[6] = 0u;
        v32[7] = 0u;
        v32[8] = 0u;
        v32[9] = 0u;
        v32[10] = 0u;
        v32[11] = 0u;
        v32[12] = 0u;
        v32[13] = 0u;
        v32[14] = 0u;
        v32[15] = 0u;
        v32[16] = 0u;
        v32[17] = 0u;
        v32[18] = 0u;
        v32[19] = 0u;
        v32[20] = 0u;
        v32[21] = 0u;
        v32[22] = 0u;
        v32[23] = 0u;
        v32[24] = 0u;
        v32[25] = 0u;
        v32[26] = 0u;
        v32[27] = 0u;
        v32[28] = 0u;
        v32[29] = 0u;
        v354 = 60;
        ptr = v32;
        v33 = (float)(int)v26;
        v34 = (float)(int)v28;
        v35 = v33 - (float)(v31.__cosval * v29);
        v36 = v34 + (float)(v31.__sinval * v29);
        v358[0] = v35 + (float)(v31.__sinval * v29);
        v358[1] = v36 + (float)(v31.__cosval * v29);
        v37 = v33 + (float)(v31.__cosval * v29);
        v38 = v34 - (float)(v31.__sinval * v29);
        v358[2] = v37 + (float)(v31.__sinval * v29);
        v358[3] = v38 + (float)(v31.__cosval * v29);
        v358[4] = v37 - (float)(v31.__sinval * v29);
        v358[5] = v38 - (float)(v31.__cosval * v29);
        v358[6] = v35 - (float)(v31.__sinval * v29);
        v358[7] = v36 - (float)(v31.__cosval * v29);
        sub_23963C41C(v358, (int *)&v357, (uint64_t)&v354);
        v352 = (uint64_t *)(v21 + 24 * v20);
        v40 = v22 + 8;
        v39 = *(_DWORD *)(v22 + 8);
        v41 = *(int *)(v40 + 4);
        v348 = v17;
        if ((float)(v29 * 1.4142) < v33)
        {
          v42 = (float)(v29 * 1.4142) >= v34 || (float)((float)(v39 - 1) + (float)(v29 * -1.4142)) <= v33;
          if (!v42 && (float)((float)(v41 - 1) + (float)(v29 * -1.4142)) > v34)
          {
            v44 = v354;
            v43 = (char *)ptr;
            v9 = 1.0;
            v10 = -0.5;
            goto LABEL_74;
          }
        }
        v45 = v354;
        if ((int)v357 > 0)
        {
          v46 = v354;
          v9 = 1.0;
          v10 = -0.5;
          v47.i64[0] = 0x100000001;
          v47.i64[1] = 0x100000001;
          v48 = v357;
          if (v354 + v357 >= v41)
            goto LABEL_44;
          goto LABEL_23;
        }
        v9 = 1.0;
        v10 = -0.5;
        v47.i64[0] = 0x100000001;
        v47.i64[1] = 0x100000001;
        if (v354 < 1)
        {
          v46 = 0;
        }
        else
        {
          v49 = ptr;
          if (!ptr)
          {
            v46 = 0;
            v52 = v356;
            if (v356 >= 0)
              goto LABEL_41;
            goto LABEL_33;
          }
          v46 = 0;
          v50 = 0;
          v51 = 1 - v357;
          do
          {
            if (v50 >= v51)
              v49[v46++] = v49[v50];
            ++v50;
          }
          while (v45 != v50);
        }
        v52 = v356;
        if (v46 <= v356)
          goto LABEL_41;
LABEL_33:
        v53 = 2 * v52;
        _ZF = v52 == 0;
        v55 = 32;
        if (!_ZF)
          v55 = v53;
        if (v55 <= v46)
          v56 = v46;
        else
          v56 = v55;
        if (v56)
        {
          v57 = malloc_type_realloc(ptr, 8 * v56, 0x8097091DuLL);
          v47.i64[0] = 0x100000001;
          v47.i64[1] = 0x100000001;
          ptr = v57;
        }
        v356 = v56;
LABEL_41:
        if (v46 > v45)
        {
          bzero((char *)ptr + 8 * v45, 8 * (v46 - v45));
          v47.i64[0] = 0x100000001;
          v47.i64[1] = 0x100000001;
        }
        v354 = v46;
        v357 = 1;
        v48 = 1;
        if (v46 + 1 >= v41)
        {
LABEL_44:
          if (v46 < 1)
          {
            v44 = 0;
          }
          else
          {
            v44 = 0;
            v58 = 0;
            v59 = ptr;
            v60 = ~v48 + v41;
            do
            {
              if (v58 < v60 && v59)
                v59[v44++] = v59[v58];
              ++v58;
            }
            while (v58 < v46);
          }
          if (v44 > v356)
          {
            v61 = 32;
            if (v356)
              v61 = 2 * v356;
            if (v61 <= v44)
              v62 = v44;
            else
              v62 = v61;
            if (v62)
            {
              v63 = malloc_type_realloc(ptr, 8 * v62, 0x533A41ACuLL);
              v47.i64[0] = 0x100000001;
              v47.i64[1] = 0x100000001;
              ptr = v63;
            }
            v356 = v62;
          }
          if (v44 > v46)
          {
            bzero((char *)ptr + 8 * v46, 8 * (v44 - v46));
            v47.i64[0] = 0x100000001;
            v47.i64[1] = 0x100000001;
          }
          v354 = v44;
          v43 = (char *)ptr;
          if (v44 < 1)
            goto LABEL_80;
          goto LABEL_63;
        }
LABEL_23:
        v44 = v46;
        v43 = (char *)ptr;
        if (v46 < 1)
          goto LABEL_80;
LABEL_63:
        v64 = v39 - 2;
        if ((unint64_t)v44 >= 8)
        {
          v65 = v44 & 0xFFFFFFFFFFFFFFF8;
          v66 = vdupq_n_s32(v64);
          v67 = (float *)(v43 + 32);
          v68 = v44 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v69 = v67 - 8;
            v489 = vld2q_f32(v69);
            v490 = vld2q_f32(v67);
            v491.val[0] = (float32x4_t)vmaxq_s32((int32x4_t)v489.val[0], v47);
            v491.val[1] = (float32x4_t)vminq_s32((int32x4_t)v489.val[1], v66);
            v489.val[0] = (float32x4_t)vmaxq_s32((int32x4_t)v490.val[0], v47);
            v489.val[1] = (float32x4_t)vminq_s32((int32x4_t)v490.val[1], v66);
            vst2q_f32(v69, v491);
            vst2q_f32(v67, v489);
            v67 += 16;
            v68 -= 8;
          }
          while (v68);
          if (v44 == v65)
            goto LABEL_74;
        }
        else
        {
          v65 = 0;
        }
        v70 = (signed int *)&v43[8 * v65 + 4];
        do
        {
          v71 = *(v70 - 1);
          if (v71 <= 1)
            v71 = 1;
          *(v70 - 1) = v71;
          v72 = *v70;
          if (*v70 >= v64)
            v72 = v39 - 2;
          *v70 = v72;
          v70 += 2;
          ++v65;
        }
        while (v44 != v65);
LABEL_74:
        if (v44 >= 1)
        {
          v73 = 0;
          v74 = v43 + 4;
          v75 = v44;
          do
          {
            v76 = *(v74 - 1);
            if (v76 <= *v74)
              v73 = v73 - v76 + *v74 + 1;
            v74 += 2;
            --v75;
          }
          while (v75);
          v77 = 1;
          goto LABEL_81;
        }
LABEL_80:
        v77 = 0;
        v73 = 0;
LABEL_81:
        v78 = (float32x4_t *)malloc_type_calloc(8 * v73, 4uLL, 0x100004052888210uLL);
        v83 = v78;
        if ((v77 & 1) == 0)
        {
          free(v43);
          v140 = v349;
          goto LABEL_105;
        }
        v84 = 0;
        LODWORD(v85) = 0;
        *(float *)v79.i32 = (float)(2.4997 / v29) * v31.__cosval;
        *(float *)v80.i32 = (float)(2.4997 / v29) * v31.__sinval;
        v337 = &v78->i8[4 * v73];
        v338 = 4 * v73;
        v336 = (float32x4_t *)((char *)v78 + 8 * v73);
        v86 = 3 * v73;
        v339 = (float32x4_t *)((char *)v78 + 12 * v73);
        v340 = 5 * v73;
        v334 = (int8x16_t *)&v78[v73];
        v335 = (char *)v78 + 20 * v73;
        v342 = 6 * v73;
        v341 = 7 * v73;
        v332 = (float32x4_t *)((char *)v78 + 28 * v73);
        v333 = (int8x16_t *)((char *)v78 + 24 * v73);
        v87 = (int)v357;
        v88 = (_QWORD *)(v21 + 24 * v20 + 16);
        v353 = (char *)v78 + v338;
        v89 = 8 * v73;
        v90 = (char *)v78 + v89;
        v91 = 4 * v86;
        v92 = vdupq_n_s32((int)v26);
        v93 = &v78->i8[4 * v86];
        v94 = (float32x4_t)vdupq_lane_s32(v79, 0);
        v95 = (float32x4_t)vdupq_lane_s32(v80, 0);
        v96.i64[0] = 0x800000008;
        v96.i64[1] = 0x800000008;
        v97 = v352;
        do
        {
          while (1)
          {
            while (1)
            {
              v98 = (signed int *)&v43[8 * v84];
              v99 = *v98;
              v100 = v98[1];
              if (v100 >= v99)
                break;
              ++v87;
              if (++v84 == v44)
                goto LABEL_101;
            }
            v101 = (float)(v87 - (int)v28);
            *(float *)v81.i32 = (float)-*(float *)v80.i32 * v101;
            *(float *)v82.i32 = *(float *)v79.i32 * v101;
            v102 = *v97;
            v103 = *v88 * v87;
            v104 = v87++ - 1;
            v85 = (int)v85;
            v105 = (v100 - v99);
            v106 = 2 * *v88;
            if (v105 < 7
              || (v107 = 4 * (int)v85, (unint64_t)((char *)v83 - v353) < 0x20)
              || (unint64_t)(v90 - v353) < 0x20
              || (unint64_t)(v93 - v353) < 0x20
              || v89 < 0x20
              || v91 < 0x20
              || (unint64_t)(v93 - v90) < 0x20)
            {
              v110 = v99;
              break;
            }
            v108 = v105 + 1;
            v109 = (v105 + 1) & 0x1FFFFFFF8;
            v110 = v109 + v99;
            v85 = v109 + (int)v85;
            v111 = vdupq_n_s32(v99);
            v112 = vaddq_s32(v111, (int32x4_t)xmmword_239EC8190);
            v113 = vaddq_s32(v111, (int32x4_t)xmmword_239EC6870);
            v114 = (float32x4_t)vdupq_lane_s32(v81, 0);
            v115 = (float32x4_t)vdupq_lane_s32(v82, 0);
            v116 = (float32x4_t *)((char *)v83 + v107);
            v117 = (uint16x4_t *)(v102 + 2 * (v103 + v99) + 2);
            v118 = 2 * v99;
            v119 = (uint16x8_t *)(v102 + v118 + v106 * v104);
            v120 = (uint16x8_t *)(v102 + v118 + v106 * v87);
            v121 = v109;
            do
            {
              v122 = vcvtq_f32_s32(vsubq_s32(v113, v92));
              v123 = vcvtq_f32_s32(vsubq_s32(v112, v92));
              v124 = (float32x4_t *)((char *)v116 + v338);
              *v124 = vmlaq_f32(v114, v94, v122);
              v124[1] = vmlaq_f32(v114, v94, v123);
              *v116 = vmlaq_f32(v115, v95, v122);
              v116[1] = vmlaq_f32(v115, v95, v123);
              v125 = *(uint16x8_t *)&v117[-1].u8[4];
              v126 = vcvtq_f32_s32((int32x4_t)vsubl_u16(*v117, *(uint16x4_t *)v125.i8));
              v127 = vcvtq_f32_s32((int32x4_t)vsubl_high_u16(*(uint16x8_t *)v117->i8, v125));
              v128 = (float32x4_t *)((char *)v116 + v89);
              *v128 = v126;
              v128[1] = v127;
              v129 = *v119++;
              v130 = v129;
              v131 = *v120++;
              v132 = (float32x4_t *)((char *)v116 + v91);
              *v132 = vcvtq_f32_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v130.i8, *(uint16x4_t *)v131.i8));
              v132[1] = vcvtq_f32_s32((int32x4_t)vsubl_high_u16(v130, v131));
              v113 = vaddq_s32(v113, v96);
              v112 = vaddq_s32(v112, v96);
              v116 += 2;
              v117 += 2;
              v121 -= 8;
            }
            while (v121);
            v97 = v352;
            if (v108 != v109)
              break;
            if (++v84 == v44)
              goto LABEL_101;
          }
          v133 = 0;
          v134 = v102 + 2 * v110 + v106 * v87;
          v135 = v102 + 2 * v110 + v106 * v104;
          v136 = v100 - v110 + 1;
          v137 = (unsigned __int16 *)(v102 + 2 * (v110 + v103) + 2);
          do
          {
            v138 = (float)(v110 - (int)v26 + v133);
            v139 = 4 * v133;
            *(float *)&v353[4 * v85 + v139] = *(float *)v81.i32 + (float)(v138 * *(float *)v79.i32);
            v83->f32[v85 + (unint64_t)v139 / 4] = *(float *)v82.i32 + (float)(v138 * *(float *)v80.i32);
            *(float *)&v90[4 * v85 + v139] = (float)(*v137 - *(v137 - 2));
            *(float *)&v93[4 * v85 + v139] = (float)(*(unsigned __int16 *)(v135 + 2 * v133)
                                                   - *(unsigned __int16 *)(v134 + 2 * v133));
            ++v133;
            ++v137;
          }
          while (v136 != (_DWORD)v133);
          LODWORD(v85) = v85 + v133;
          ++v84;
        }
        while (v84 != v44);
LABEL_101:
        v357 = v87;
        free(v43);
        v140 = v349;
        if ((int)v85 >= 1)
        {
          v141 = v85;
          if (v85 >= 4)
          {
            v142 = 0;
            v144 = v338;
            v214 = &v83[(unint64_t)v338 / 4];
            v143 = *(int32x2_t *)&v347;
            v145 = v336;
            if ((unint64_t)((char *)v214 - v93) < 0x10)
              goto LABEL_124;
            if ((unint64_t)((char *)v214 - v90) < 0x10)
              goto LABEL_124;
            v142 = v85 & 0x7FFFFFFC;
            v215 = v85 & 0xFFFFFFFC;
            v216 = v334;
            v217 = v336;
            v218 = v339;
            do
            {
              v219 = *v218++;
              v220 = v219;
              v221 = *v217++;
              v222 = (int8x16_t)vcltzq_f32(v221);
              v223 = (float32x4_t)vbslq_s8(v222, (int8x16_t)vnegq_f32(v221), (int8x16_t)v221);
              v224 = (int8x16_t)vcltzq_f32(v220);
              v225 = (float32x4_t)vbslq_s8(v224, (int8x16_t)vnegq_f32(v220), (int8x16_t)v220);
              v226 = (int8x16_t)vcgtq_f32(v225, v223);
              v227 = vdivq_f32((float32x4_t)vbslq_s8(v226, (int8x16_t)v223, (int8x16_t)v225), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v223, v225), (int8x16_t)v223, (int8x16_t)v225));
              v228 = vmulq_f32(v227, v227);
              v229 = vmlaq_f32(v227, v227, vmulq_f32(v228, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBEA7BE2C), v228, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3E232344u), (float32x4_t)vdupq_n_s32(0xBD3E7316), v228))));
              v230 = (float32x4_t)vbslq_s8(v226, (int8x16_t)vsubq_f32((float32x4_t)vdupq_n_s32(0x3FC90FDBu), v229), (int8x16_t)v229);
              v231 = (float32x4_t)vbslq_s8(v222, (int8x16_t)vsubq_f32((float32x4_t)vdupq_n_s32(0x40490FDBu), v230), (int8x16_t)v230);
              v232 = (float32x4_t)vbslq_s8(v224, (int8x16_t)vnegq_f32(v231), (int8x16_t)v231);
              *v216++ = vandq_s8((int8x16_t)v232, vorrq_s8((int8x16_t)vcltzq_f32(v232), (int8x16_t)vcgezq_f32(v232)));
              v215 -= 4;
            }
            while (v215);
            if (v142 != v85)
              goto LABEL_124;
          }
          else
          {
            v142 = 0;
            v143 = *(int32x2_t *)&v347;
            v144 = v338;
            v145 = v336;
LABEL_124:
            v233 = v85 - v142;
            v234 = v142;
            v235 = &v83->f32[v142 + v144];
            v236 = &v83->f32[v89 / 4 + v234];
            v237 = &v83->f32[v91 / 4 + v234];
            do
            {
              v238 = *v237++;
              v239 = v238;
              v240 = *v236++;
              v241 = v240;
              v242 = -v240;
              if (v240 >= 0.0)
                v242 = v241;
              v243 = -v239;
              if (v239 >= 0.0)
                v243 = v239;
              _NF = v242 < v243;
              if (v242 >= v243)
                v245 = v243;
              else
                v245 = v242;
              if (v242 <= v243)
                v242 = v243;
              v246 = v245 / v242;
              v247 = v246
                   + (float)((float)((float)(v246 * v246)
                                   * (float)((float)((float)((float)((float)(v246 * v246) * -0.046496) + 0.15931)
                                                   * (float)(v246 * v246))
                                           + -0.32762))
                           * v246);
              if (_NF)
                v247 = 1.5708 - v247;
              _NF = v241 < 0.0;
              v248 = 3.1416 - v247;
              if (!_NF)
                v248 = v247;
              _NF = v239 < 0.0;
              v249 = -v248;
              if (!_NF)
                v249 = v248;
              *v235++ = v249;
              --v233;
            }
            while (v233);
          }
          if (v85 < 8)
          {
            v250 = 0;
            v251 = -0.125;
            v252 = -23.0;
            goto LABEL_143;
          }
          v250 = 0;
          v256 = &v83->i8[4 * v340];
          v251 = -0.125;
          v252 = -23.0;
          v257.i64[0] = 0xBE000000BE000000;
          v257.i64[1] = 0xBE000000BE000000;
          if ((unint64_t)(v256 - v90) < 0x10)
          {
LABEL_143:
            v253 = v337;
            v254 = v339;
            v255 = v335;
          }
          else
          {
            v253 = v337;
            v254 = v339;
            v255 = v335;
            if ((unint64_t)(v256 - v93) >= 0x10
              && (unint64_t)(4 * v340) >= 0x10
              && (unint64_t)(v256 - v353) >= 0x10)
            {
              v250 = v85 & 0x7FFFFFFC;
              v258 = v85 & 0xFFFFFFFC;
              v259 = v83;
              do
              {
                v260 = vmulq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v259 + v338), *(float32x4_t *)((char *)v259 + v338)), *v259, *v259), v257);
                __asm { FMOV            V2.4S, #-23.0 }
                v264 = (int8x16_t)vcgtq_f32(_Q2, v260);
                v265 = vcvt_hight_f64_f32(v260);
                v266 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
                v267 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v260.f32), v266);
                v268 = vmulq_f64(v265, v266);
                __asm { FMOV            V4.2D, #1.0 }
                v270 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v267, _Q4)), vaddq_f64(v268, _Q4));
                v271 = vmulq_f32(v270, v270);
                v272 = vmulq_f32(v271, v271);
                v273 = vmulq_f32(v272, v272);
                v274 = vmulq_f32(v273, v273);
                v275 = vmulq_f32(v274, v274);
                v276 = vmulq_f32(v275, v275);
                v277 = vmulq_f32(v276, v276);
                *(float32x4_t *)((char *)v259 + 4 * v340) = vmulq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v259 + v91), *(float32x4_t *)((char *)v259 + v91)), *(float32x4_t *)((char *)v259 + v89), *(float32x4_t *)((char *)v259 + v89))), (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v277, v277), v264));
                ++v259;
                v258 -= 4;
              }
              while (v258);
              v251 = -0.125;
              v252 = -23.0;
              if (v250 == v85)
                goto LABEL_151;
            }
          }
          do
          {
            v281 = (float)((float)(*(float *)&v253[4 * v250] * *(float *)&v253[4 * v250])
                         + (float)(v83->f32[v250] * v83->f32[v250]))
                 * v251;
            v282 = 0.0;
            if (v281 >= v252)
            {
              v283 = v281 * 0.00390625 + 1.0;
              v284 = (float)((float)(v283 * v283) * (float)(v283 * v283))
                   * (float)((float)(v283 * v283) * (float)(v283 * v283));
              v285 = (float)((float)(v284 * v284) * (float)(v284 * v284))
                   * (float)((float)(v284 * v284) * (float)(v284 * v284));
              v282 = (float)(v285 * v285) * (float)(v285 * v285);
            }
            *(float *)&v255[4 * v250] = sqrtf((float)(v254->f32[v250] * v254->f32[v250])+ (float)(v145->f32[v250] * v145->f32[v250]))* v282;
            ++v250;
          }
          while (v85 != v250);
LABEL_151:
          if (v85 >= 8)
          {
            v278 = 0;
            v286 = &v83->i8[4 * v341];
            v287 = &v83->i8[4 * v342];
            v279 = -8.0;
            v280 = objc_release_x28;
            if ((unint64_t)(v286 - v287) < 0x10)
              goto LABEL_162;
            v288 = &v83->i8[4 * v144];
            if ((unint64_t)(v287 - v288) < 0x10)
              goto LABEL_162;
            if ((unint64_t)(v286 - v288) < 0x10)
              goto LABEL_162;
            v278 = v85 & 0x7FFFFFFC;
            v289 = (float32x4_t)vdupq_lane_s32(v143, 0);
            v290 = v85 & 0xFFFFFFFC;
            v291.i64[0] = 0x4100000041000000;
            v291.i64[1] = 0x4100000041000000;
            v292.i64[0] = 0xC1000000C1000000;
            v292.i64[1] = 0xC1000000C1000000;
            v294 = v333;
            v293 = (float32x4_t *)v334;
            v295 = v332;
            do
            {
              v296 = *v293++;
              v297 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
              v298 = vmulq_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v296), (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v296.f32), v297)), vaddq_f64(vcvt_hight_f64_f32(v296), v297)), (int8x16_t)v296), v289), (float32x4_t)vdupq_n_s32(0x3FA2F983u));
              v299 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v298), (int8x16_t)vaddq_f32(v298, v291), (int8x16_t)v298);
              v300 = vrndmq_f32(v299);
              v301 = vsubq_f32(v299, v300);
              v302 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v300), (int8x16_t)vaddq_f32(v300, v291), (int8x16_t)v300);
              *v294++ = vbslq_s8((int8x16_t)vcgeq_f32(v302, v291), (int8x16_t)vaddq_f32(v302, v292), (int8x16_t)v302);
              *v295++ = v301;
              v290 -= 4;
            }
            while (v290);
            v279 = -8.0;
            if (v278 != v85)
              goto LABEL_162;
          }
          else
          {
            v278 = 0;
            v279 = -8.0;
            v280 = objc_release_x28;
LABEL_162:
            v303 = v278;
            v304 = v85 - v278;
            v305 = &v83->f32[v341 + v303];
            v306 = &v83->f32[v342 + v303];
            v307 = &v83->f32[v144 + v303];
            do
            {
              v308 = *v307++;
              v309 = v308;
              v310 = v308 + *((double *)v280 + 237);
              if (v308 < 0.0)
                v309 = v310;
              v311 = (float)(v309 - *(float *)v143.i32) * 1.2732;
              if (v311 < 0.0)
                v311 = v311 + 8.0;
              v312 = floorf(v311);
              v313 = v312 + 8.0;
              if (v312 >= 0.0)
                v313 = v312;
              v314 = v311 - v312;
              if (v313 >= 8.0)
                v315 = v313 + v279;
              else
                v315 = v313;
              *v306++ = v315;
              *v305++ = v314;
              --v304;
            }
            while (v304);
          }
          v316 = (float *)v83;
          do
          {
            v317 = *v316 + 1.5;
            v318 = v316[(unint64_t)v338 / 4] + 1.5;
            v319 = floorf(v317);
            v320 = floorf(v318);
            v321 = (int)(float)((float)((float)((float)(v320 * 10.0) + (float)(v319 * 60.0)) + (float)(int)v316[v342])
                              + 70.0);
            if (v321 <= 0x120)
            {
              v322 = v316[v340];
              v323 = v316[v341];
              v324 = v317 - v319;
              v325 = v324 * (float)(v322 * v323);
              v326 = v318 - v320;
              v327 = v9 - v324;
              v328 = (float)(v9 - v324) * (float)(v322 * v323);
              v329 = v322 * (float)(v9 - v323);
              v330 = v324 * v329;
              v331 = v327 * v329;
              *(float *)&v359[v321] = *(float *)&v359[v321] + (float)((float)(v9 - v326) * v331);
              *(float *)&v359[v321 + 1] = (float)((float)(v9 - v326) * v328) + *(float *)&v359[v321 + 1];
              *(float *)&v359[v321 + 10] = (float)(v326 * v331) + *(float *)&v359[v321 + 10];
              *(float *)&v359[v321 + 11] = (float)(v326 * v328) + *(float *)&v359[v321 + 11];
              *(float *)&v359[v321 + 60] = (float)((float)(v9 - v326) * v330) + *(float *)&v359[v321 + 60];
              *(float *)&v359[v321 + 61] = (float)((float)(v9 - v326) * v325) + *(float *)&v359[v321 + 61];
              *(float *)&v359[v321 + 70] = (float)(v326 * v330) + *(float *)&v359[v321 + 70];
              *(float *)&v359[v321 + 71] = (float)(v326 * v325) + *(float *)&v359[v321 + 71];
            }
            ++v316;
            --v141;
          }
          while (v141);
        }
LABEL_105:
        free(v83);
        v146 = 0;
        v360 = vadd_f32(v367, v360);
        *(float32x2_t *)v6->f32 = v360;
        v6->i32[2] = v361;
        v6->i32[3] = v362;
        v6[1].i32[0] = v363;
        v6[1].i32[1] = v364;
        v6[1].i32[2] = v365;
        v6[1].i32[3] = v366;
        v368 = vadd_f32(v375, v368);
        *(float32x2_t *)v6[2].f32 = v368;
        v6[2].i32[2] = v369;
        v6[2].i32[3] = v370;
        v6[3].i32[0] = v371;
        v6[3].i32[1] = v372;
        v6[3].i32[2] = v373;
        v6[3].i32[3] = v374;
        v376 = vadd_f32(v383, v376);
        *(float32x2_t *)v6[4].f32 = v376;
        v6[4].i32[2] = v377;
        v6[4].i32[3] = v378;
        v6[5].i32[0] = v379;
        v6[5].i32[1] = v380;
        v6[5].i32[2] = v381;
        v6[5].i32[3] = v382;
        v384 = vadd_f32(v391, v384);
        *(float32x2_t *)v6[6].f32 = v384;
        v6[6].i32[2] = v385;
        v6[6].i32[3] = v386;
        v6[7].i32[0] = v387;
        v6[7].i32[1] = v388;
        v6[7].i32[2] = v389;
        v6[7].i32[3] = v390;
        v392 = vadd_f32(v399, v392);
        *(float32x2_t *)v6[8].f32 = v392;
        v6[8].i32[2] = v393;
        v6[8].i32[3] = v394;
        v6[9].i32[0] = v395;
        v6[9].i32[1] = v396;
        v6[9].i32[2] = v397;
        v6[9].i32[3] = v398;
        v400 = vadd_f32(v407, v400);
        *(float32x2_t *)v6[10].f32 = v400;
        v6[10].i32[2] = v401;
        v6[10].i32[3] = v402;
        v6[11].i32[0] = v403;
        v6[11].i32[1] = v404;
        v6[11].i32[2] = v405;
        v6[11].i32[3] = v406;
        v408 = vadd_f32(v415, v408);
        *(float32x2_t *)v6[12].f32 = v408;
        v6[12].i32[2] = v409;
        v6[12].i32[3] = v410;
        v6[13].i32[0] = v411;
        v6[13].i32[1] = v412;
        v6[13].i32[2] = v413;
        v6[13].i32[3] = v414;
        v416 = vadd_f32(v423, v416);
        *(float32x2_t *)v6[14].f32 = v416;
        v6[14].i32[2] = v417;
        v6[14].i32[3] = v418;
        v6[15].i32[0] = v419;
        v6[15].i32[1] = v420;
        v6[15].i32[2] = v421;
        v6[15].i32[3] = v422;
        v424 = vadd_f32(v431, v424);
        *(float32x2_t *)v6[16].f32 = v424;
        v6[16].i32[2] = v425;
        v6[16].i32[3] = v426;
        v6[17].i32[0] = v427;
        v6[17].i32[1] = v428;
        v6[17].i32[2] = v429;
        v6[17].i32[3] = v430;
        v432 = vadd_f32(v439, v432);
        *(float32x2_t *)v6[18].f32 = v432;
        v6[18].i32[2] = v433;
        v6[18].i32[3] = v434;
        v6[19].i32[0] = v435;
        v6[19].i32[1] = v436;
        v6[19].i32[2] = v437;
        v6[19].i32[3] = v438;
        v440 = vadd_f32(v447, v440);
        *(float32x2_t *)v6[20].f32 = v440;
        v6[20].i32[2] = v441;
        v6[20].i32[3] = v442;
        v6[21].i32[0] = v443;
        v6[21].i32[1] = v444;
        v6[21].i32[2] = v445;
        v6[21].i32[3] = v446;
        v448 = vadd_f32(v455, v448);
        *(float32x2_t *)v6[22].f32 = v448;
        v6[22].i32[2] = v449;
        v6[22].i32[3] = v450;
        v6[23].i32[0] = v451;
        v6[23].i32[1] = v452;
        v6[23].i32[2] = v453;
        v6[23].i32[3] = v454;
        v456 = vadd_f32(v463, v456);
        *(float32x2_t *)v6[24].f32 = v456;
        v6[24].i32[2] = v457;
        v6[24].i32[3] = v458;
        v6[25].i32[0] = v459;
        v6[25].i32[1] = v460;
        v6[25].i32[2] = v461;
        v6[25].i32[3] = v462;
        v464 = vadd_f32(v471, v464);
        *(float32x2_t *)v6[26].f32 = v464;
        v6[26].i32[2] = v465;
        v6[26].i32[3] = v466;
        v6[27].i32[0] = v467;
        v6[27].i32[1] = v468;
        v6[27].i32[2] = v469;
        v6[27].i32[3] = v470;
        v472 = vadd_f32(v479, v472);
        *(float32x2_t *)v6[28].f32 = v472;
        v6[28].i32[2] = v473;
        v6[28].i32[3] = v474;
        v6[29].i32[0] = v475;
        v6[29].i32[1] = v476;
        v6[29].i32[2] = v477;
        v6[29].i32[3] = v478;
        v147 = (int32x2_t)vadd_f32(v487, v480);
        v480 = (float32x2_t)v147;
        *(int32x2_t *)v6[30].f32 = v147;
        v6[30].i32[2] = v481;
        v6[30].i32[3] = v482;
        v6[31].i32[0] = v483;
        v6[31].i32[1] = v484;
        v6[31].i32[2] = v485;
        v6[31].i32[3] = v486;
        v147.i32[0] = 0;
        do
        {
          *(float *)v147.i32 = *(float *)v147.i32 + (float)(v6->f32[v146] * v6->f32[v146]);
          ++v146;
        }
        while (v146 != 128);
        v148 = 0;
        *(float *)v147.i32 = sqrtf(*(float *)v147.i32) * 0.2;
        v149 = (float32x4_t)vdupq_lane_s32(v147, 0);
        v150 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[1]), (int8x16_t)v6[1], (int8x16_t)v149);
        *(int8x16_t *)v6 = vbslq_s8((int8x16_t)vcgtq_f32(v149, *v6), *(int8x16_t *)v6, (int8x16_t)v149);
        v6[1] = (float32x4_t)v150;
        v151 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[3]), (int8x16_t)v6[3], (int8x16_t)v149);
        v6[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[2]), (int8x16_t)v6[2], (int8x16_t)v149);
        v6[3] = (float32x4_t)v151;
        v152 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[5]), (int8x16_t)v6[5], (int8x16_t)v149);
        v6[4] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[4]), (int8x16_t)v6[4], (int8x16_t)v149);
        v6[5] = (float32x4_t)v152;
        v153 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[7]), (int8x16_t)v6[7], (int8x16_t)v149);
        v6[6] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[6]), (int8x16_t)v6[6], (int8x16_t)v149);
        v6[7] = (float32x4_t)v153;
        v154 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[9]), (int8x16_t)v6[9], (int8x16_t)v149);
        v6[8] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[8]), (int8x16_t)v6[8], (int8x16_t)v149);
        v6[9] = (float32x4_t)v154;
        v155 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[11]), (int8x16_t)v6[11], (int8x16_t)v149);
        v6[10] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[10]), (int8x16_t)v6[10], (int8x16_t)v149);
        v6[11] = (float32x4_t)v155;
        v156 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[13]), (int8x16_t)v6[13], (int8x16_t)v149);
        v6[12] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[12]), (int8x16_t)v6[12], (int8x16_t)v149);
        v6[13] = (float32x4_t)v156;
        v157 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[15]), (int8x16_t)v6[15], (int8x16_t)v149);
        v6[14] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[14]), (int8x16_t)v6[14], (int8x16_t)v149);
        v6[15] = (float32x4_t)v157;
        v158 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[17]), (int8x16_t)v6[17], (int8x16_t)v149);
        v6[16] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[16]), (int8x16_t)v6[16], (int8x16_t)v149);
        v6[17] = (float32x4_t)v158;
        v159 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[19]), (int8x16_t)v6[19], (int8x16_t)v149);
        v6[18] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[18]), (int8x16_t)v6[18], (int8x16_t)v149);
        v6[19] = (float32x4_t)v159;
        v160 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[21]), (int8x16_t)v6[21], (int8x16_t)v149);
        v6[20] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[20]), (int8x16_t)v6[20], (int8x16_t)v149);
        v6[21] = (float32x4_t)v160;
        v161 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[23]), (int8x16_t)v6[23], (int8x16_t)v149);
        v6[22] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[22]), (int8x16_t)v6[22], (int8x16_t)v149);
        v6[23] = (float32x4_t)v161;
        v162 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[25]), (int8x16_t)v6[25], (int8x16_t)v149);
        v6[24] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[24]), (int8x16_t)v6[24], (int8x16_t)v149);
        v6[25] = (float32x4_t)v162;
        v163 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[27]), (int8x16_t)v6[27], (int8x16_t)v149);
        v6[26] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[26]), (int8x16_t)v6[26], (int8x16_t)v149);
        v6[27] = (float32x4_t)v163;
        v164 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[29]), (int8x16_t)v6[29], (int8x16_t)v149);
        v6[28] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[28]), (int8x16_t)v6[28], (int8x16_t)v149);
        v6[29] = (float32x4_t)v164;
        v165 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[30]), (int8x16_t)v6[30], (int8x16_t)v149);
        v166 = vbslq_s8((int8x16_t)vcgtq_f32(v149, v6[31]), (int8x16_t)v6[31], (int8x16_t)v149);
        v6[30] = (float32x4_t)v165;
        v6[31] = (float32x4_t)v166;
        v166.i32[0] = 0;
        v167.i64[0] = 0x4400000044000000;
        v167.i64[1] = 0x4400000044000000;
        do
        {
          *(float *)v166.i32 = *(float *)v166.i32 + (float)(v6->f32[v148] * v6->f32[v148]);
          ++v148;
        }
        while (v148 != 128);
        v168 = 0;
        *(float *)v166.i32 = sqrtf(*(float *)v166.i32);
        v169 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v166.i8, 0);
        v170 = vdivq_f32(v6[1], v169);
        *v6 = vdivq_f32(*v6, v169);
        v6[1] = v170;
        v171 = vdivq_f32(v6[3], v169);
        v6[2] = vdivq_f32(v6[2], v169);
        v6[3] = v171;
        v172 = vdivq_f32(v6[5], v169);
        v6[4] = vdivq_f32(v6[4], v169);
        v6[5] = v172;
        v173 = vdivq_f32(v6[7], v169);
        v6[6] = vdivq_f32(v6[6], v169);
        v6[7] = v173;
        v174 = vdivq_f32(v6[9], v169);
        v6[8] = vdivq_f32(v6[8], v169);
        v6[9] = v174;
        v175 = vdivq_f32(v6[11], v169);
        v6[10] = vdivq_f32(v6[10], v169);
        v6[11] = v175;
        v176 = vdivq_f32(v6[13], v169);
        v6[12] = vdivq_f32(v6[12], v169);
        v6[13] = v176;
        v177 = vdivq_f32(v6[15], v169);
        v6[14] = vdivq_f32(v6[14], v169);
        v6[15] = v177;
        v178 = vdivq_f32(v6[17], v169);
        v6[16] = vdivq_f32(v6[16], v169);
        v6[17] = v178;
        v179 = vdivq_f32(v6[19], v169);
        v6[18] = vdivq_f32(v6[18], v169);
        v6[19] = v179;
        v180 = vdivq_f32(v6[21], v169);
        v6[20] = vdivq_f32(v6[20], v169);
        v6[21] = v180;
        v181 = vdivq_f32(v6[23], v169);
        v6[22] = vdivq_f32(v6[22], v169);
        v6[23] = v181;
        v182 = vdivq_f32(v6[25], v169);
        v6[24] = vdivq_f32(v6[24], v169);
        v6[25] = v182;
        v183 = vdivq_f32(v6[27], v169);
        v6[26] = vdivq_f32(v6[26], v169);
        v6[27] = v183;
        v184 = vdivq_f32(v6[29], v169);
        v6[28] = vdivq_f32(v6[28], v169);
        v6[29] = v184;
        v185 = vdivq_f32(v6[30], v169);
        v186 = vdivq_f32(v6[31], v169);
        v6[30] = v185;
        v6[31] = v186;
        do
        {
          v187 = (int8x16_t *)&v6[v168];
          v188 = vmulq_f32(v6[v168], v167);
          v189 = vmulq_f32(v6[v168 + 1], v167);
          v190 = (int8x16_t)vcltzq_f32(v188);
          v191 = (int8x16_t)vcltzq_f32(v189);
          v192 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          v193 = (int8x16_t)vcgtq_f32(v188, v192);
          v194 = (int8x16_t)vcgtq_f32(v189, v192);
          *v187 = vbslq_s8(vbicq_s8(v193, v190), (int8x16_t)v192, vandq_s8((int8x16_t)v188, vbicq_s8(vmvnq_s8(v190), v193)));
          v187[1] = vbslq_s8(vbicq_s8(v194, v191), (int8x16_t)v192, vandq_s8((int8x16_t)v189, vbicq_s8(vmvnq_s8(v191), v194)));
          v168 += 2;
        }
        while (v168 != 32);
        v195 = vdivq_f32(v6[1], v192);
        *v6 = vdivq_f32(*v6, v192);
        v6[1] = v195;
        v196 = vdivq_f32(v6[3], v192);
        v6[2] = vdivq_f32(v6[2], v192);
        v6[3] = v196;
        v197 = vdivq_f32(v6[5], v192);
        v6[4] = vdivq_f32(v6[4], v192);
        v6[5] = v197;
        v198 = vdivq_f32(v6[7], v192);
        v6[6] = vdivq_f32(v6[6], v192);
        v6[7] = v198;
        v199 = vdivq_f32(v6[9], v192);
        v6[8] = vdivq_f32(v6[8], v192);
        v6[9] = v199;
        v200 = vdivq_f32(v6[11], v192);
        v6[10] = vdivq_f32(v6[10], v192);
        v6[11] = v200;
        v201 = vdivq_f32(v6[13], v192);
        v6[12] = vdivq_f32(v6[12], v192);
        v6[13] = v201;
        v202 = vdivq_f32(v6[15], v192);
        v6[14] = vdivq_f32(v6[14], v192);
        v6[15] = v202;
        v203 = vdivq_f32(v6[17], v192);
        v6[16] = vdivq_f32(v6[16], v192);
        v6[17] = v203;
        v204 = vdivq_f32(v6[19], v192);
        v6[18] = vdivq_f32(v6[18], v192);
        v6[19] = v204;
        v205 = vdivq_f32(v6[21], v192);
        v6[20] = vdivq_f32(v6[20], v192);
        v6[21] = v205;
        v206 = vdivq_f32(v6[23], v192);
        v6[22] = vdivq_f32(v6[22], v192);
        v6[23] = v206;
        v207 = vdivq_f32(v6[25], v192);
        v6[24] = vdivq_f32(v6[24], v192);
        v6[25] = v207;
        v208 = vdivq_f32(v6[27], v192);
        v6[26] = vdivq_f32(v6[26], v192);
        v6[27] = v208;
        v209 = vdivq_f32(v6[29], v192);
        v6[28] = vdivq_f32(v6[28], v192);
        v6[29] = v209;
        v210 = vdivq_f32(v6[31], v192);
        v6[30] = vdivq_f32(v6[30], v192);
        v6[31] = v210;
        if (v140 + v348 + 20 >= v343 || (unint64_t)v6 >= v140 + v348 + 148)
        {
          v12 = v351;
          v13 = v140 + 148 * v351;
          v14.i64[0] = 0xBF000000BF000000;
          v14.i64[1] = 0xBF000000BF000000;
          v15.i64[0] = 0x3F0000003F000000;
          v15.i64[1] = 0x3F0000003F000000;
          *(int8x16_t *)(v13 + 20) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(*v6, v192)), v15, v14), v192, *v6)), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[1], v192)), v15, v14), v192, v6[1]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                 vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[2], v192)), v15, v14), v192, v6[2])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[3], v192)), v15, v14), v192, v6[3]))));
          *(int8x16_t *)(v13 + 36) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[4], v192)), v15, v14), v192, v6[4])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[5], v192)), v15, v14), v192, v6[5]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                 vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[6], v192)), v15, v14), v192, v6[6])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[7], v192)), v15, v14), v192, v6[7]))));
          *(int8x16_t *)(v13 + 52) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[8], v192)), v15, v14), v192, v6[8])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[9], v192)), v15, v14), v192, v6[9]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                 vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[10], v192)), v15, v14), v192, v6[10])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[11], v192)), v15, v14), v192, v6[11]))));
          *(int8x16_t *)(v13 + 68) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[12], v192)), v15, v14), v192, v6[12])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[13], v192)), v15, v14), v192, v6[13]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                 vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[14], v192)), v15, v14), v192, v6[14])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[15], v192)), v15, v14), v192, v6[15]))));
          *(int8x16_t *)(v13 + 84) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[16], v192)), v15, v14), v192, v6[16])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[17], v192)), v15, v14), v192, v6[17]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                 vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[18], v192)), v15, v14), v192, v6[18])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[19], v192)), v15, v14), v192, v6[19]))));
          *(int8x16_t *)(v13 + 100) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[20], v192)), v15, v14), v192, v6[20])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[21], v192)), v15, v14), v192, v6[21]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                  vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[22], v192)), v15, v14), v192, v6[22])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[23], v192)), v15, v14), v192, v6[23]))));
          *(int8x16_t *)(v13 + 116) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[24], v192)), v15, v14), v192, v6[24])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[25], v192)), v15, v14), v192, v6[25]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                  vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[26], v192)), v15, v14), v192, v6[26])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[27], v192)), v15, v14), v192, v6[27]))));
          *(int8x16_t *)(v13 + 132) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[28], v192)), v15, v14), v192, v6[28])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[29], v192)), v15, v14), v192, v6[29]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(
                                                                  vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[30], v192)), v15, v14), v192, v6[30])), (int16x8_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_f32(v6[31], v192)), v15, v14), v192, v6[31]))));
          v3 = v344;
          v16 = v350;
          v11 = 0.5;
        }
        else
        {
          v211 = 0;
          v16 = v350;
          v12 = v351;
          v3 = v344;
          v11 = 0.5;
          do
          {
            v212 = v6->f32[v211];
            if ((float)(v212 * 255.0) <= 0.0)
              v213 = v10;
            else
              v213 = 0.5;
            *(_BYTE *)(v140 + v350 + v211++) = (int)(float)(v213 + (float)(v212 * 255.0));
          }
          while (v211 != 128);
        }
        v7 = v12 + 1;
        v8 = v16 + 148;
      }
      while (*v3 > v7);
    }
    free(v6);
    return 0;
  }
  return result;
}

void sub_23963EE40(uint64_t a1, uint64_t a2, int a3, float a4)
{
  float v8;
  double v9;
  BOOL v10;
  double v11;
  unsigned int v12;
  signed int kernelY_width;
  float *v14;
  __int128 v15;
  float *v16;
  uint64_t v17;
  int v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  vImage_Flags flags;
  vImagePixelCount v31;
  vImagePixelCount v32;
  size_t v33;
  vImagePixelCount v34;
  vImagePixelCount v35;
  size_t v36;
  __int128 v37;
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = (float)(a4 * 6.0) + 1.0;
  v9 = v8;
  v10 = v8 <= 0.0;
  v11 = -0.5;
  if (!v10)
    v11 = 0.5;
  v12 = (int)(v11 + v9);
  kernelY_width = v12 | 1;
  v14 = (float *)malloc_type_calloc((int)(v12 | 1), 4uLL, 0x100004052888210uLL);
  v16 = v14;
  if ((v12 & 0x80000000) == 0)
  {
    if (kernelY_width <= 1)
      v17 = 1;
    else
      v17 = kernelY_width;
    v18 = -(v12 >> 1);
    LODWORD(v15) = 0;
    v19 = v14;
    v20 = v17;
    v21 = -0.5 / (float)(a4 * a4);
    do
    {
      v37 = v15;
      v22 = expf((float)(v21 * (float)v18) * (float)v18);
      v15 = v37;
      *v19++ = v22;
      *(float *)&v15 = *(float *)&v37 + v22;
      ++v18;
      --v20;
    }
    while (v20);
    if (v17 >= 8)
    {
      v23 = v17 & 0x7FFFFFF8;
      v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v15, 0);
      v25 = (float32x4_t *)(v16 + 4);
      v26 = v23;
      do
      {
        v27 = vdivq_f32(*v25, v24);
        v25[-1] = vdivq_f32(v25[-1], v24);
        *v25 = v27;
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
    }
    else
    {
      v23 = 0;
    }
    v28 = v17 - v23;
    v29 = &v16[v23];
    do
    {
      *v29 = *v29 / *(float *)&v15;
      ++v29;
      --v28;
    }
    while (v28);
  }
  if (a3)
    flags = 8;
  else
    flags = 24;
  v32 = *(int *)(a1 + 8);
  v31 = *(int *)(a1 + 12);
  src.data = *(void **)a1;
  src.height = v31;
  v33 = *(_QWORD *)(a1 + 16);
  src.width = v32;
  src.rowBytes = v33;
  v35 = *(int *)(a2 + 8);
  v34 = *(int *)(a2 + 12);
  dest.data = *(void **)a2;
  dest.height = v34;
  v36 = 2 * *(_QWORD *)(a2 + 16);
  dest.width = v35;
  dest.rowBytes = v36;
  vImageSepConvolve_Planar8to16U(&src, &dest, 0, 0, 0, v16, kernelY_width, v16, kernelY_width, 256.0, 0.0, 0, flags);
  free(v16);
}

int16x8_t *sub_23963F010(int16x8_t *result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int8x16_t v36;
  int16x8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int16x8_t *v53;
  int16x8_t *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int16x8_t *v57;
  int16x8_t *v58;
  uint64_t v59;
  int8x16_t v60;
  int v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  int v66;

  if ((int)result >= -1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_DWORD *)(v6 + 8);
    v66 = *(_DWORD *)(v6 + 12);
    v8 = 2 * (v66 + 16) * v7;
    v9 = (_DWORD)result + 2;
    v65 = ((_DWORD)result + 2);
    if ((int)result + 2 <= 1)
      v9 = 1;
    v10 = 24 * v9;
    v11 = 4;
    do
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)a2 >= v16)
      {
        v17 = 2 * v16;
        v18 = v16 == 0;
        v19 = 10;
        if (!v18)
          v19 = v17;
        if (v19 <= v15)
          v20 = v15 + 1;
        else
          v20 = v19;
        if (v20)
        {
          *(_QWORD *)(a2 + 8) = malloc_type_realloc(*(void **)(a2 + 8), 24 * v20, 0xB56D8004uLL);
          v15 = *(_QWORD *)a2;
        }
        *(_QWORD *)(a2 + 16) = v20;
      }
      *(_QWORD *)a2 = v15 + 1;
      v12 = *(_QWORD *)(a2 + 8);
      v13 = v12 + 24 * v15;
      v14 = v12 + v5;
      *(_DWORD *)(v13 + 8) = v7;
      *(_DWORD *)(v13 + 12) = v66;
      *(_QWORD *)(v13 + 16) = v7;
      *(_QWORD *)v13 = (char *)malloc_type_malloc(v8, 0x1000040BDFB0063uLL) + 16 * *(_QWORD *)(v13 + 16);
      sub_23963F688(v14, v13, a3, *(float *)(*(_QWORD *)(a2 + 56) + v11));
      v5 += 24;
      v11 += 4;
    }
    while (v10 != v5);
    for (i = 0; ; ++i)
    {
      v22 = *(_QWORD *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 40);
      if (v22 >= v23)
      {
        if (v23)
          v24 = 2 * v23;
        else
          v24 = 10;
        if (v24 <= v22)
          v25 = v22 + 1;
        else
          v25 = v24;
        if (v25)
        {
          *(_QWORD *)(a2 + 32) = malloc_type_realloc(*(void **)(a2 + 32), 24 * v25, 0xFDD24429uLL);
          v22 = *(_QWORD *)(a2 + 24);
        }
        *(_QWORD *)(a2 + 40) = v25;
      }
      *(_QWORD *)(a2 + 24) = v22 + 1;
      v26 = *(_QWORD *)(a2 + 32) + 24 * v22;
      *(_DWORD *)(v26 + 8) = v7;
      *(_DWORD *)(v26 + 12) = v66;
      *(_QWORD *)(v26 + 16) = v7;
      result = (int16x8_t *)malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
      v29 = *(_QWORD *)(v26 + 16);
      v30 = (int8x16_t *)&result[v29];
      *(_QWORD *)v26 = v30;
      v31 = *(_QWORD *)(a2 + 8);
      v32 = v31 + 24 * i;
      v33 = *(unsigned int *)(v26 + 8);
      if ((_DWORD)v33 != *(_DWORD *)(v32 + 32))
        sub_239643114((uint64_t)result, v27, v28);
      v34 = i + 1;
      v35 = *(_DWORD *)(v26 + 12);
      if (v35 != *(_DWORD *)(v31 + 24 * (i + 1) + 12))
        sub_2396430F0((uint64_t)result, v27, v28);
      if ((_DWORD)v33 != *(_DWORD *)(v31 + 24 * i + 8))
        sub_2396430CC((uint64_t)result, v27, v28);
      if (v35 != *(_DWORD *)(v31 + 24 * i + 12))
        sub_2396430A8((uint64_t)result, v27, v28);
      v36.i64[0] = 0x8000800080008000;
      v36.i64[1] = 0x8000800080008000;
      if (v35 < 1 || (int)v33 < 1)
        goto LABEL_16;
      result = *(int16x8_t **)(v32 + 24);
      v37 = *(int16x8_t **)v32;
      v38 = *(_QWORD *)(v31 + 24 * v34 + 16);
      v39 = *(_QWORD *)(v31 + 24 * i + 16);
      if (v33 >= 0x10)
        break;
      v40 = 0;
      v41 = 2 * v39 - 2 * (int)v33;
      v42 = 2 * v38 - 2 * (int)v33;
      v43 = 2 * v29 - 2 * (int)v33;
      do
      {
        v44 = v33;
        do
        {
          v46 = result->i16[0];
          result = (int16x8_t *)((char *)result + 2);
          v45 = v46;
          v47 = v37->i16[0];
          v37 = (int16x8_t *)((char *)v37 + 2);
          v30->i16[0] = (v45 - v47) ^ 0x8000;
          v30 = (int8x16_t *)((char *)v30 + 2);
          --v44;
        }
        while (v44);
        v30 = (int8x16_t *)((char *)v30 + v43);
        result = (int16x8_t *)((char *)result + v42);
        v37 = (int16x8_t *)((char *)v37 + v41);
        ++v40;
      }
      while (v40 != v35);
LABEL_16:
      if (v34 == v65)
        return result;
    }
    v48 = 0;
    v49 = v29 - (int)v33;
    v50 = v39 - (int)v33;
    v51 = 2 * (v33 & 0xFFFFFFF0);
    while (1)
    {
      v52 = 0;
      if ((unint64_t)((char *)v30 - (char *)result) < 0x20
        || (unint64_t)((char *)v30 - (char *)v37) < 0x20)
      {
        v53 = v37;
        v54 = result;
        v55 = v30;
      }
      else
      {
        v53 = (int16x8_t *)((char *)v37 + v51);
        v54 = (int16x8_t *)((char *)result + v51);
        v55 = (int8x16_t *)((char *)v30 + v51);
        v56 = v30 + 1;
        v57 = result + 1;
        v58 = v37 + 1;
        v59 = v33 & 0xFFFFFFF0;
        do
        {
          v60 = veorq_s8((int8x16_t)vsubq_s16(*v57, *v58), v36);
          v56[-1] = veorq_s8((int8x16_t)vsubq_s16(v57[-1], v58[-1]), v36);
          *v56 = v60;
          v56 += 2;
          v57 += 2;
          v58 += 2;
          v59 -= 16;
        }
        while (v59);
        v52 = v33 & 0x7FFFFFF0;
        if ((v33 & 0xFFFFFFF0) == v33)
          goto LABEL_40;
      }
      v61 = v33 - v52;
      do
      {
        v63 = v54->i16[0];
        v54 = (int16x8_t *)((char *)v54 + 2);
        v62 = v63;
        v64 = v53->i16[0];
        v53 = (int16x8_t *)((char *)v53 + 2);
        v55->i16[0] = (v62 - v64) ^ 0x8000;
        v55 = (int8x16_t *)((char *)v55 + 2);
        --v61;
      }
      while (v61);
LABEL_40:
      v30 = (int8x16_t *)((char *)v55 + 2 * v49);
      result = (int16x8_t *)((char *)v54 + 2 * (v38 - (int)v33));
      ++v48;
      v37 = (int16x8_t *)((char *)v53 + 2 * v50);
      if (v48 == v35)
        goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_23963F3EC(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int16x8_t **v14;
  int16x8_t *v15;
  int8x16_t v16;
  int16x8_t *v17;
  uint64_t v18;
  int16x8_t **v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i64;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int16x8_t *v40;
  int v41;
  int16x8_t *v42;
  int16x8_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int16x8_t *v46;
  int16x8_t *v47;
  uint64_t v48;
  int8x16_t v49;
  int v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;

  if ((int)result >= -1)
  {
    v5 = 0;
    v6 = (result + 2);
    if ((int)v6 <= 1)
      v7 = 1;
    else
      v7 = result + 2;
    v8 = 24 * v7;
    v9 = 4;
    do
    {
      sub_23963F688(a2[1] + v5, a2[1] + v5 + 24, a3, *(float *)(a2[7] + v9));
      v9 += 4;
      v5 += 24;
    }
    while (v8 != v5);
    v12 = 0;
    v13 = a2[4];
    v14 = (int16x8_t **)a2[1];
    v15 = *v14;
    v16.i64[0] = 0x8000800080008000;
    v16.i64[1] = 0x8000800080008000;
    while (1)
    {
      v17 = v15;
      v18 = v13 + 24 * v12;
      v19 = &v14[3 * v12];
      v20 = *(unsigned int *)(v18 + 8);
      if ((_DWORD)v20 != *((_DWORD *)v19 + 8))
        sub_2396431A4(result, v10, v11);
      v21 = v12 + 1;
      v22 = *(_DWORD *)(v13 + 24 * v12 + 12);
      v23 = HIDWORD(v14[3 * v12 + 4]);
      if (v22 != (_DWORD)v23)
        sub_239643180(v23, v10, v11);
      v24 = LODWORD(v14[3 * v12 + 1]);
      if ((_DWORD)v20 != (_DWORD)v24)
        sub_23964315C(v24, v10, v11);
      result = HIDWORD(v14[3 * v12 + 1]);
      if (v22 != (_DWORD)result)
        sub_239643138(result, v10, v11);
      v15 = v19[3];
      if (v22 < 1 || (int)v20 < 1)
        goto LABEL_8;
      v25 = *(int8x16_t **)v18;
      v26 = 3 * v12;
      v27 = *(_QWORD *)(v13 + v26 * 8 + 16);
      i64 = v14[3 * v21 + 2]->i64;
      v29 = v14[v26 + 2]->i64;
      if (v20 >= 0x10)
        break;
      v30 = 0;
      v31 = 2 * (int)v20;
      v32 = 2 * (_QWORD)v29 - v31;
      result = 2 * (_QWORD)i64 - v31;
      v10 = 2 * v27 - v31;
      v11 = (uint64_t)v15;
      do
      {
        v33 = v20;
        do
        {
          v35 = *(_WORD *)v11;
          v11 += 2;
          v34 = v35;
          v36 = v17->i16[0];
          v17 = (int16x8_t *)((char *)v17 + 2);
          v25->i16[0] = (v34 - v36) ^ 0x8000;
          v25 = (int8x16_t *)((char *)v25 + 2);
          --v33;
        }
        while (v33);
        v25 = (int8x16_t *)((char *)v25 + v10);
        v11 += result;
        v17 = (int16x8_t *)((char *)v17 + v32);
        ++v30;
      }
      while (v30 != v22);
LABEL_8:
      v12 = v21;
      if (v21 == v6)
        return result;
    }
    v37 = 0;
    v38 = v27 - (int)v20;
    result = (uint64_t)i64 - (int)v20;
    v10 = (uint64_t)v29 - (int)v20;
    v11 = v20 & 0xFFFFFFF0;
    v39 = 2 * v11;
    v40 = v15;
    while (1)
    {
      v41 = 0;
      if ((unint64_t)((char *)v25 - (char *)v40) < 0x20 || (unint64_t)((char *)v25 - (char *)v17) < 0x20)
      {
        v42 = v17;
        v43 = v40;
        v44 = v25;
      }
      else
      {
        v42 = (int16x8_t *)((char *)v17 + v39);
        v43 = (int16x8_t *)((char *)v40 + v39);
        v44 = (int8x16_t *)((char *)v25 + v39);
        v45 = v25 + 1;
        v46 = v40 + 1;
        v47 = v17 + 1;
        v48 = v20 & 0xFFFFFFF0;
        do
        {
          v49 = veorq_s8((int8x16_t)vsubq_s16(*v46, *v47), v16);
          v45[-1] = veorq_s8((int8x16_t)vsubq_s16(v46[-1], v47[-1]), v16);
          *v45 = v49;
          v45 += 2;
          v46 += 2;
          v47 += 2;
          v48 -= 16;
        }
        while (v48);
        v41 = v20 & 0x7FFFFFF0;
        if (v11 == v20)
          goto LABEL_22;
      }
      v50 = v20 - v41;
      do
      {
        v52 = v43->i16[0];
        v43 = (int16x8_t *)((char *)v43 + 2);
        v51 = v52;
        v53 = v42->i16[0];
        v42 = (int16x8_t *)((char *)v42 + 2);
        v44->i16[0] = (v51 - v53) ^ 0x8000;
        v44 = (int8x16_t *)((char *)v44 + 2);
        --v50;
      }
      while (v50);
LABEL_22:
      v25 = (int8x16_t *)((char *)v44 + 2 * v38);
      v40 = (int16x8_t *)((char *)v43 + 2 * result);
      ++v37;
      v17 = (int16x8_t *)((char *)v42 + 2 * v10);
      if (v37 == v22)
        goto LABEL_8;
    }
  }
  return result;
}

void sub_23963F688(uint64_t a1, uint64_t a2, int a3, float a4)
{
  float v8;
  double v9;
  BOOL v10;
  double v11;
  unsigned int v12;
  signed int kernelY_width;
  float *v14;
  __int128 v15;
  float *v16;
  uint64_t v17;
  int v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  vImage_Flags flags;
  vImagePixelCount v31;
  vImagePixelCount v32;
  size_t v33;
  vImagePixelCount v34;
  vImagePixelCount v35;
  size_t v36;
  __int128 v37;
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = (float)(a4 * 6.0) + 1.0;
  v9 = v8;
  v10 = v8 <= 0.0;
  v11 = -0.5;
  if (!v10)
    v11 = 0.5;
  v12 = (int)(v11 + v9);
  kernelY_width = v12 | 1;
  v14 = (float *)malloc_type_calloc((int)(v12 | 1), 4uLL, 0x100004052888210uLL);
  v16 = v14;
  if ((v12 & 0x80000000) == 0)
  {
    if (kernelY_width <= 1)
      v17 = 1;
    else
      v17 = kernelY_width;
    v18 = -(v12 >> 1);
    LODWORD(v15) = 0;
    v19 = v14;
    v20 = v17;
    v21 = -0.5 / (float)(a4 * a4);
    do
    {
      v37 = v15;
      v22 = expf((float)(v21 * (float)v18) * (float)v18);
      v15 = v37;
      *v19++ = v22;
      *(float *)&v15 = *(float *)&v37 + v22;
      ++v18;
      --v20;
    }
    while (v20);
    if (v17 >= 8)
    {
      v23 = v17 & 0x7FFFFFF8;
      v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v15, 0);
      v25 = (float32x4_t *)(v16 + 4);
      v26 = v23;
      do
      {
        v27 = vdivq_f32(*v25, v24);
        v25[-1] = vdivq_f32(v25[-1], v24);
        *v25 = v27;
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
    }
    else
    {
      v23 = 0;
    }
    v28 = v17 - v23;
    v29 = &v16[v23];
    do
    {
      *v29 = *v29 / *(float *)&v15;
      ++v29;
      --v28;
    }
    while (v28);
  }
  if (a3)
    flags = 8;
  else
    flags = 24;
  v32 = *(int *)(a1 + 8);
  v31 = *(int *)(a1 + 12);
  src.data = *(void **)a1;
  src.height = v31;
  v33 = 2 * *(_QWORD *)(a1 + 16);
  src.width = v32;
  src.rowBytes = v33;
  v35 = *(int *)(a2 + 8);
  v34 = *(int *)(a2 + 12);
  dest.data = *(void **)a2;
  dest.height = v34;
  v36 = 2 * *(_QWORD *)(a2 + 16);
  dest.width = v35;
  dest.rowBytes = v36;
  vImageSepConvolve_Planar16U(&src, &dest, 0, 0, 0, v16, kernelY_width, v16, kernelY_width, 0.0, 0, flags);
  free(v16);
}

uint64_t sub_23963F854(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = a6 * a3;
  v7 = *(unsigned __int16 *)(a2 + 2 * (v6 + a5));
  if (v7 <= 0x8000)
  {
    if ((v7 & 0x8000) == 0)
    {
      v25 = *a1;
      v26 = a5 - 1;
      v27 = a6 - 1;
      v28 = a1[2];
      v29 = v28 * v27;
      if (v7 < *(unsigned __int16 *)(*a1 + 2 * (v28 * v27 + v26)) && v7 < *(unsigned __int16 *)(v25 + 2 * (v29 + a5)))
      {
        v30 = a5 + 1;
        if (v7 < *(unsigned __int16 *)(v25 + 2 * (v29 + v30)))
        {
          v31 = v28 * a6;
          if (v7 < *(unsigned __int16 *)(v25 + 2 * (v31 + v26))
            && v7 < *(unsigned __int16 *)(v25 + 2 * (v31 + a5))
            && v7 < *(unsigned __int16 *)(v25 + 2 * (v31 + v30)))
          {
            v32 = a6 + 1;
            v33 = v28 * v32;
            if (v7 < *(unsigned __int16 *)(v25 + 2 * (v33 + v26))
              && v7 < *(unsigned __int16 *)(v25 + 2 * (v33 + a5))
              && v7 < *(unsigned __int16 *)(v25 + 2 * (v33 + v30)))
            {
              v34 = v27 * a3;
              if (v7 < *(unsigned __int16 *)(a2 + 2 * (v27 * a3 + v26))
                && v7 < *(unsigned __int16 *)(a2 + 2 * (v34 + a5))
                && v7 < *(unsigned __int16 *)(a2 + 2 * (v34 + v30))
                && v7 < *(unsigned __int16 *)(a2 + 2 * (v6 + v26))
                && v7 < *(unsigned __int16 *)(a2 + 2 * (v6 + v30)))
              {
                v35 = v32 * a3;
                if (v7 < *(unsigned __int16 *)(a2 + 2 * (v32 * a3 + v26))
                  && v7 < *(unsigned __int16 *)(a2 + 2 * (v35 + a5))
                  && v7 < *(unsigned __int16 *)(a2 + 2 * (v35 + v30)))
                {
                  v36 = *a4;
                  v37 = a4[2];
                  v38 = v37 * v27;
                  if (v7 < *(unsigned __int16 *)(*a4 + 2 * (v38 + v26))
                    && v7 < *(unsigned __int16 *)(v36 + 2 * (v38 + a5))
                    && v7 < *(unsigned __int16 *)(v36 + 2 * (v38 + v30)))
                  {
                    v39 = v37 * a6;
                    if (v7 < *(unsigned __int16 *)(v36 + 2 * (v39 + v26))
                      && v7 < *(unsigned __int16 *)(v36 + 2 * (v39 + a5))
                      && v7 < *(unsigned __int16 *)(v36 + 2 * (v39 + v30)))
                    {
                      v40 = v37 * v32;
                      if (v7 < *(unsigned __int16 *)(v36 + 2 * (v37 * v32 + v26))
                        && v7 < *(unsigned __int16 *)(v36 + 2 * (v40 + a5))
                        && v7 < *(unsigned __int16 *)(v36 + 2 * (v40 + v30)))
                      {
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v8 = *a1;
    v9 = a5 - 1;
    v10 = a6 - 1;
    v11 = a1[2];
    v12 = v11 * v10;
    if (v7 > *(unsigned __int16 *)(*a1 + 2 * (v11 * v10 + v9)) && v7 > *(unsigned __int16 *)(v8 + 2 * (v12 + a5)))
    {
      v13 = a5 + 1;
      if (v7 > *(unsigned __int16 *)(v8 + 2 * (v12 + v13)))
      {
        v14 = v11 * a6;
        if (v7 > *(unsigned __int16 *)(v8 + 2 * (v14 + v9))
          && v7 > *(unsigned __int16 *)(v8 + 2 * (v14 + a5))
          && v7 > *(unsigned __int16 *)(v8 + 2 * (v14 + v13)))
        {
          v15 = a6 + 1;
          v16 = v11 * v15;
          if (v7 > *(unsigned __int16 *)(v8 + 2 * (v16 + v9))
            && v7 > *(unsigned __int16 *)(v8 + 2 * (v16 + a5))
            && v7 > *(unsigned __int16 *)(v8 + 2 * (v16 + v13)))
          {
            v17 = v10 * a3;
            if (v7 > *(unsigned __int16 *)(a2 + 2 * (v10 * a3 + v9))
              && v7 > *(unsigned __int16 *)(a2 + 2 * (v17 + a5))
              && v7 > *(unsigned __int16 *)(a2 + 2 * (v17 + v13))
              && v7 > *(unsigned __int16 *)(a2 + 2 * (v6 + v9))
              && v7 > *(unsigned __int16 *)(a2 + 2 * (v6 + v13)))
            {
              v18 = v15 * a3;
              if (v7 > *(unsigned __int16 *)(a2 + 2 * (v15 * a3 + v9))
                && v7 > *(unsigned __int16 *)(a2 + 2 * (v18 + a5))
                && v7 > *(unsigned __int16 *)(a2 + 2 * (v18 + v13)))
              {
                v19 = *a4;
                v20 = a4[2];
                v21 = v20 * v10;
                if (v7 > *(unsigned __int16 *)(*a4 + 2 * (v21 + v9))
                  && v7 > *(unsigned __int16 *)(v19 + 2 * (v21 + a5))
                  && v7 > *(unsigned __int16 *)(v19 + 2 * (v21 + v13)))
                {
                  v22 = v20 * a6;
                  if (v7 > *(unsigned __int16 *)(v19 + 2 * (v22 + v9))
                    && v7 > *(unsigned __int16 *)(v19 + 2 * (v22 + a5))
                    && v7 > *(unsigned __int16 *)(v19 + 2 * (v22 + v13)))
                  {
                    v23 = v20 * v15;
                    if (v7 > *(unsigned __int16 *)(v19 + 2 * (v20 * v15 + v9))
                      && v7 > *(unsigned __int16 *)(v19 + 2 * (v23 + a5))
                      && v7 > *(unsigned __int16 *)(v19 + 2 * (v23 + v13)))
                    {
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_23963FC6C(uint64_t a1, uint64_t a2, int a3, int a4, float *a5, int *a6, int *a7, int *a8, double a9, double a10, double a11, double a12, double a13, double a14, float a15, float a16)
{
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  double v82;
  int v83;
  double v84;
  double v85;
  double v86;
  int v87;
  int v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  float v105;
  int v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;

  v32 = *(_QWORD *)(a1 + 8);
  v33 = *a6;
  v34 = *a7;
  v35 = 5;
  while (1)
  {
    v36 = (uint64_t *)(v32 + 24 * a3);
    v37 = *(v36 - 3);
    v39 = v36[3];
    v38 = v36 + 3;
    v40 = *(v36 - 1);
    v41 = v36[2];
    v42 = v33 - 1;
    v43 = v34 - 1;
    v44 = v41 * v43;
    LOWORD(v21) = *(_WORD *)(*v36 + 2 * (v41 * v43 + v42));
    v45 = v36[5];
    v46 = (float)LODWORD(v21);
    LOWORD(v21) = *(_WORD *)(*v36 + 2 * (v41 * v43 + v33));
    *(float *)&v21 = (float)LODWORD(v21);
    LOWORD(v22) = *(_WORD *)(v37 + 2 * (v33 + v40 * v43));
    v47 = (float)LODWORD(v22);
    LOWORD(v22) = *(_WORD *)(v39 + 2 * (v33 + v45 * v43));
    v48 = (float)LODWORD(v22);
    v49 = v33 + 1;
    LOWORD(v22) = *(_WORD *)(*v36 + 2 * (v44 + v49));
    v50 = (float)LODWORD(v22);
    v51 = v41 * v34;
    v52 = v40 * v34;
    v53 = v45 * v34;
    LOWORD(v22) = *(_WORD *)(*v36 + 2 * (v51 + v42));
    *(float *)&v22 = (float)LODWORD(v22);
    LOWORD(v23) = *(_WORD *)(v37 + 2 * (v52 + v42));
    v54 = (float)LODWORD(v23);
    LOWORD(v23) = *(_WORD *)(v39 + 2 * (v53 + v42));
    v55 = (float)LODWORD(v23);
    LOWORD(v23) = *(_WORD *)(*v36 + 2 * (v51 + v33));
    v56 = (float)LODWORD(v23);
    LOWORD(v23) = *(_WORD *)(v37 + 2 * (v52 + v33));
    *(float *)&v23 = (float)LODWORD(v23);
    LOWORD(v24) = *(_WORD *)(v39 + 2 * (v53 + v33));
    v57 = (float)LODWORD(v24);
    LOWORD(v25) = *(_WORD *)(*v36 + 2 * (v51 + v49));
    v58 = (float)LODWORD(v25);
    LOWORD(v26) = *(_WORD *)(v37 + 2 * (v52 + v49));
    v59 = (float)LODWORD(v26);
    LOWORD(v26) = *(_WORD *)(v39 + 2 * (v53 + v49));
    v60 = v34 + 1;
    v61 = v41 * v60;
    LOWORD(v27) = *(_WORD *)(*v36 + 2 * (v61 + v42));
    v62 = (float)LODWORD(v26);
    v63 = (float)v27;
    LOWORD(v26) = *(_WORD *)(*v36 + 2 * (v61 + v33));
    v26 = (float)LODWORD(v26);
    LOWORD(v27) = *(_WORD *)(v37 + 2 * (v33 + v40 * v60));
    LOWORD(v16) = *(_WORD *)(v39 + 2 * (v33 + v45 * v60));
    v64 = (float)v27;
    v65 = (float)LODWORD(v16);
    LOWORD(v27) = *(_WORD *)(*v36 + 2 * (v61 + v49));
    v66 = (float)v27;
    HIWORD(v27) = 14208;
    v16 = (float)((float)(v58 + *(float *)&v22) + (float)(v56 * -2.0)) * 0.000015319;
    v67 = (float)((float)((float)((float)(v66 - v63) - v50) + v46) * 0.25) * 0.000015319;
    v68 = (float)((float)((float)((float)(v62 - v55) - v59) + v54) * 0.25) * 0.000015319;
    v69 = (float)((float)(v26 + *(float *)&v21) + (float)(v56 * -2.0)) * 0.000015319;
    v70 = (float)((float)((float)((float)(v65 - v48) - v64) + v47) * 0.25) * 0.000015319;
    v71 = (float)((float)(v57 + *(float *)&v23) + (float)(v56 * -2.0)) * 0.000015319;
    v72 = (float)((float)(v16 * (float)((float)(v71 * v69) - (float)(v70 * v70)))
                - (float)((float)((float)(v71 * v67) - (float)(v70 * v68)) * v67))
        + (float)(v68 * (float)((float)(v70 * v67) - (float)(v69 * v68)));
    v73 = 0.0;
    if (v72 != 0.0)
    {
      a15 = -(float)((float)(v71 * v67) - (float)(v70 * v68));
      a16 = (float)(v71 * v16) - (float)(v68 * v68);
      v17 = -(float)((float)(v70 * v16) - (float)(v67 * v68));
      v18 = (float)(v69 * v16) - (float)(v67 * v67);
      v19 = (float)(v71 * v69) - (float)(v70 * v70);
      v20 = (float)(v70 * v67) - (float)(v69 * v68);
      v73 = 1.0 / v72;
    }
    v74 = (float)((float)(v58 - *(float *)&v22) * 0.5) * 0.000015319;
    v75 = (float)((float)(v26 - *(float *)&v21) * 0.5) * 0.000015319;
    v76 = (float)((float)(v57 - *(float *)&v23) * 0.5) * 0.000015319;
    v77 = -(float)(v73 * (float)((float)((float)(v74 * v19) + (float)(a15 * v75)) + (float)(v20 * v76)));
    v78 = -(float)(v73 * (float)((float)((float)(v74 * a15) + (float)(a16 * v75)) + (float)(v17 * v76)));
    v79 = -(float)(v73 * (float)((float)((float)(v74 * v20) + (float)(v17 * v75)) + (float)(v18 * v76)));
    v24 = fabsf(v78);
    v25 = fabsf(v79);
    v80 = fabsf(v77) < 0.5 && v24 < 0.5;
    if (v80 && v25 < 0.5)
      break;
    v82 = v77;
    if (v77 <= 0.0)
      v23 = -0.5;
    else
      v23 = 0.5;
    v83 = v33 + (int)(v23 + v82);
    v84 = v78;
    if (v78 <= 0.0)
      v22 = -0.5;
    else
      v22 = 0.5;
    *a6 = v83;
    v34 = *a7 + (int)(v22 + v84);
    *a7 = v34;
    v85 = v79;
    if (v79 <= 0.0)
      v21 = -0.5;
    else
      v21 = 0.5;
    v86 = v21 + v85;
    v87 = a3 + (int)v86;
    if (v87 < 1)
      return 1;
    if (v87 > *(_DWORD *)(a2 + 4))
      return 1;
    v33 = *a6;
    v88 = *(_DWORD *)(a2 + 28);
    if (*a6 < v88)
      return 1;
    result = 1;
    if (v33 >= *(_DWORD *)(v32 + 24 * a3 + 8) - v88 || v34 < v88 || v34 >= *(_DWORD *)(v32 + 24 * a3 + 12) - v88)
      return result;
    a3 += (int)v86;
    if (!--v35)
      return 2;
  }
  v90 = *a6;
  v91 = *a7;
  v92 = *v36;
  v93 = v36[2];
  v94 = *(v36 - 3);
  v95 = *(v36 - 1);
  v96 = *v38;
  v97 = v93 * v91;
  v98 = *(unsigned __int16 *)(*v36 + 2 * (v93 * v91 + v90 + 1));
  v99 = v38[2];
  v100 = *(unsigned __int16 *)(v92 + 2 * (v93 * v91 + v90 - 1));
  v101 = v93 + v93 * v91;
  v102 = *(unsigned __int16 *)(v92 + 2 * (v101 + v90));
  v103 = v93 * (v91 - 1);
  v104 = *(unsigned __int16 *)(v92 + 2 * (v103 + v90));
  v105 = (float)(*(unsigned __int16 *)(v96 + 2 * (v90 + v99 * v91)) - *(unsigned __int16 *)(v94 + 2 * (v90 + v95 * v91)));
  v106 = *(unsigned __int16 *)(v92 + 2 * (v97 + v90));
  v107 = fabsf((float)((float)((float)((float)(v78 * (float)((float)(v102 - v104) * 0.0000076593))+ (float)((float)((float)(v98 - v100) * 0.0000076593) * v77))+ (float)((float)(v105 * 0.0000076593) * v79))* 0.5)+ (float)((float)(v106 - 0x8000) * 0.000015319));
  v108 = (float)*(int *)(a2 + 4);
  if ((float)(v107 * v108) < *(float *)(a2 + 16))
    return 3;
  v109 = (float)(v100 + v98 - 2 * v106) * 0.000015319;
  v110 = (float)(v104 + v102 - 2 * v106) * 0.000015319;
  v111 = (float)(*(unsigned __int16 *)(v92 + 2 * (v103 + v90 - 1))
               - *(unsigned __int16 *)(v92 + 2 * (v103 + v90 + 1))
               - *(unsigned __int16 *)(v92 + 2 * (v101 + v90 - 1))
               + *(unsigned __int16 *)(v92 + 2 * (v101 + v90 + 1)))
       * 0.25;
  v112 = (float)(v109 * v110) - (float)((float)(v111 * 0.000015319) * (float)(v111 * 0.000015319));
  if (v112 <= 0.0
    || (float)((float)((float)(v109 + v110) * (float)(v109 + v110)) * (float)*(int *)(a2 + 20)) >= (float)(v112 * (float)((*(_DWORD *)(a2 + 20) + 1) * (*(_DWORD *)(a2 + 20) + 1))))
  {
    return 4;
  }
  *a5 = v77 + (float)(int)v90;
  a5[1] = v78 + (float)(int)v91;
  v113 = *(float *)a2;
  v114 = exp2f((float)((float)(v79 + (float)a3) / v108) + (float)a4);
  result = 0;
  a5[2] = (float)(v114 * v113) + (float)(v114 * v113);
  a5[4] = v107;
  *a8 = a4;
  a8[1] = a3;
  return result;
}

void sub_239640228()
{
  uint64_t *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  char *v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int32x4_t *v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t *v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  char *v39;
  int32x4_t *v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL v43;
  uint64_t v44;
  char *v45;
  int32x4_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t i;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int32 v60;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int32 v87;
  uint64_t j;
  int v89;
  uint64_t v90;
  uint64_t v91;
  __int32 v92;
  int v93;
  uint64_t v94;
  __int32 v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  __int32 v100;
  BOOL v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  char *v109;
  int32x4_t *v110;
  int32x4_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  uint64_t k;
  int v117;
  uint64_t v118;
  uint64_t v119;
  __int32 v120;
  __int32 v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  size_t v125;
  __int32 v126;
  __int32 v127;
  size_t v128;
  __int32 v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int32 v136;
  __int32 v137;
  uint64_t v138;
  __int32 v139;
  uint64_t v140;
  unsigned int *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  __int32 v145;
  __int32 v146;
  __int32 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t m;
  __int32 v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  __int32 v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  __int32 v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  char *v166;
  int32x4_t *v167;
  int32x4_t *v168;
  int32x4_t *v169;
  uint64_t v170;
  unint64_t v171;
  int32x4_t v172;
  int32x4_t *v173;
  int32x4_t v174;
  int32x4_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  __int32 v179;
  uint64_t v180;
  uint64_t v181;
  int32x4_t *v182;
  int v183;
  int *v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 *v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  int v214;
  int v215;
  int v216;
  int v217;
  _DWORD *v218;
  uint64_t *v219;
  int v220;
  int v221;
  int32x4_t *v222;
  unsigned int v223[2];
  _QWORD v224[2187];

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v7 = v0;
  v224[2185] = *MEMORY[0x24BDAC8D0];
  v8 = *v0;
  v9 = (v5 + 11) / 12;
  v10 = (float)v1 / (float)v9;
  v11 = -0.5;
  if (v10 > 0.0)
    v11 = 0.5;
  v12 = (int)(float)(v10 + v11);
  if (v12 <= 1)
    v12 = 1;
  v13 = v1 - 1;
  v14 = (v1 - 1 + v12) / v12;
  v15 = (12 * v12);
  v16 = (char *)malloc_type_calloc(v15, 4uLL, 0x100004052888210uLL);
  v17 = malloc_type_calloc(v15, 4uLL, 0x100004052888210uLL);
  v18 = v9;
  v19 = v17;
  v220 = v8;
  if ((int)v8 >= 1)
  {
    v20 = v8;
    v21 = (int *)(v7[1] + 4);
    do
    {
      v22 = *(v21 - 1);
      if (v22 >= v6)
        v23 = v6 - 1;
      else
        v23 = *(v21 - 1);
      if (v22 >= 0)
        v24 = v23;
      else
        v24 = 0;
      v25 = v24 / v18;
      v27 = *v21;
      v21 += 41;
      v26 = v27;
      if (v27 >= v4)
        v28 = v13;
      else
        v28 = v26;
      if (v26 >= 0)
        v29 = v28;
      else
        v29 = 0;
      v30 = 4 * (v25 + 12 * (v29 / v14));
      ++*(_DWORD *)&v16[v30];
      --v20;
    }
    while (v20);
  }
  v214 = v14;
  v215 = v13;
  v216 = v18;
  v217 = v6;
  v31 = (int32x4_t *)malloc_type_malloc(4 * v15, 0x100004052888210uLL);
  if (v15 <= 1)
    v32 = 1;
  else
    v32 = v15;
  v218 = v19;
  v219 = v7;
  if (v32 >= 8)
  {
    v33 = v32 & 0x7FFFFFF8;
    v34 = (int32x4_t)xmmword_239EC6870;
    v35 = v31 + 1;
    v36.i64[0] = 0x400000004;
    v36.i64[1] = 0x400000004;
    v37.i64[0] = 0x800000008;
    v37.i64[1] = 0x800000008;
    v38 = v33;
    do
    {
      v35[-1] = v34;
      *v35 = vaddq_s32(v34, v36);
      v34 = vaddq_s32(v34, v37);
      v35 += 2;
      v38 -= 8;
    }
    while (v38);
    if (v33 == v32)
      goto LABEL_29;
  }
  else
  {
    v33 = 0;
  }
  do
  {
    v31->i32[v33] = v33;
    ++v33;
  }
  while (v32 != v33);
LABEL_29:
  v222 = v31;
  v39 = (char *)malloc_type_malloc(0x200uLL, 0xC6410985uLL);
  v40 = v222;
  v41 = 0;
  v42 = v224;
  v43 = 1;
  v44 = 32;
  v45 = v16;
  v46 = v222;
  v47 = v15;
  v221 = v4;
  do
  {
    v48 = v41;
    while (1)
    {
      if (!v43)
      {
        --v48;
        v49 = (uint64_t *)&v39[16 * v48];
        v47 = v49[1];
        v50 = 4 * *v49;
        v45 = &v16[v50];
        v46 = (int32x4_t *)((char *)v40 + v50);
      }
      if ((uint64_t)v47 > 15)
        break;
      if ((uint64_t)v47 > 1)
      {
        v51 = 2;
        for (i = 1; i != v47; ++i)
        {
          v53 = v51;
          do
          {
            v54 = (v53 - 1);
            v55 = (v53 - 2);
            v56 = *(_DWORD *)&v45[4 * v54];
            v57 = *(_DWORD *)&v45[4 * v55];
            if (v56 >= v57)
              break;
            v58 = v54;
            *(_DWORD *)&v45[v58 * 4] = v57;
            v59 = v55;
            *(_DWORD *)&v45[v59 * 4] = v56;
            v60 = v46->i32[v54];
            v46->i32[v58] = v46->i32[v59];
            v46->i32[v59] = v60;
            v53 = v54;
          }
          while ((int)v54 > 1);
          ++v51;
        }
      }
      v43 = 0;
      v47 = 0;
      if (v48 < 1)
        goto LABEL_98;
    }
    if (v47 > 0x27)
    {
      v67 = 0;
      v68 = 0;
      if (v47 <= 0x7D0)
        v69 = 8;
      else
        v69 = 26;
      v70 = 3;
      if (v47 > 0x7D0)
        v70 = 9;
      while (1)
      {
        v71 = (uint64_t)(v47 - 1 + v67) / v69;
        v72 = *(_DWORD *)&v45[4 * (v67 / v69)];
        v73 = *(_DWORD *)&v45[4 * v71];
        v74 = (uint64_t)(2 * v47 - 2 + v67) / v69;
        v75 = *(_DWORD *)&v45[4 * v74];
        if (v72 >= v73)
        {
          if (v72 < v75)
            goto LABEL_67;
          if (v73 < v75)
          {
LABEL_69:
            *(_QWORD *)&v223[2 * v68] = v74;
            goto LABEL_61;
          }
        }
        else if (v73 >= v75)
        {
          if (v72 < v75)
            goto LABEL_69;
LABEL_67:
          *(_QWORD *)&v223[2 * v68] = v67 / v69;
          goto LABEL_61;
        }
        *(_QWORD *)&v223[2 * v68] = v71;
LABEL_61:
        ++v68;
        v67 += 3 * v47 - 3;
        if (v70 == v68)
        {
          while (2)
          {
            if (v70 < 3)
            {
              v61 = *(_QWORD *)v223;
              v62 = *(_DWORD *)v45;
              goto LABEL_86;
            }
            v70 /= 3uLL;
            if (v70 <= 1)
              v76 = 1;
            else
              v76 = v70;
            v77 = v223;
            v78 = v42;
LABEL_76:
            v79 = *(v78 - 2);
            v80 = *(v78 - 1);
            v81 = *(_DWORD *)&v45[4 * v79];
            v82 = *(_DWORD *)&v45[4 * v80];
            v83 = *(_DWORD *)&v45[4 * *v78];
            if (v81 >= v82)
            {
              if (v81 < v83)
                goto LABEL_81;
              if (v82 < v83)
                goto LABEL_83;
            }
            else if (v82 >= v83)
            {
              if (v81 < v83)
              {
LABEL_83:
                *(_QWORD *)v77 = *v78;
LABEL_75:
                v78 += 3;
                v77 += 2;
                if (!--v76)
                  continue;
                goto LABEL_76;
              }
LABEL_81:
              *(_QWORD *)v77 = v79;
              goto LABEL_75;
            }
            break;
          }
          *(_QWORD *)v77 = v80;
          goto LABEL_75;
        }
      }
    }
    v61 = v47 >> 1;
    v62 = *(_DWORD *)v45;
    v63 = *(_DWORD *)&v45[4 * (v47 >> 1)];
    v64 = v47 - 1;
    v65 = *(_DWORD *)&v45[4 * v47 - 4];
    if (v63 >= v65)
      v66 = v47 >> 1;
    else
      v66 = v47 - 1;
    if (v62 >= v65)
      v64 = 0;
    else
      v66 = 0;
    if (v63 >= v65)
      v61 = v64;
    if (v62 >= v63)
      v61 = v66;
LABEL_86:
    v84 = 0;
    v85 = 0;
    v86 = v61;
    *(_DWORD *)v45 = *(_DWORD *)&v45[v86 * 4];
    *(_DWORD *)&v45[v86 * 4] = v62;
    v87 = v46->i32[0];
    v46->i32[0] = v46->i32[v86];
    v46->i32[v86] = v87;
    for (j = 1; j != v47; ++j)
    {
      v89 = *(_DWORD *)&v45[4 * j];
      if (v89 <= *(_DWORD *)v45)
      {
        v90 = ++v84;
        v91 = j;
        *(_DWORD *)&v45[v91 * 4] = *(_DWORD *)&v45[4 * v84];
        *(_DWORD *)&v45[v90 * 4] = v89;
        v92 = v46->i32[j];
        v46->i32[v91] = v46->i32[v84];
        v46->i32[v90] = v92;
        if (*(_DWORD *)&v45[4 * j] == *(_DWORD *)v45)
        {
          ++v85;
          v93 = *(_DWORD *)&v45[4 * v84];
          v94 = v85;
          *(_DWORD *)&v45[4 * v84] = *(_DWORD *)&v45[4 * v85];
          *(_DWORD *)&v45[v94 * 4] = v93;
          v95 = v46->i32[v84];
          v46->i32[v84] = v46->i32[v85];
          v46->i32[v94] = v95;
        }
      }
    }
    v96 = 4 * v84 - 4 * v85;
    v97 = v85;
    do
    {
      v98 = *(_DWORD *)&v45[v96];
      v99 = v97;
      *(_DWORD *)&v45[v96] = *(_DWORD *)&v45[4 * v97];
      *(_DWORD *)&v45[v99 * 4] = v98;
      v100 = *(__int32 *)((char *)v46->i32 + v96);
      *(__int32 *)((char *)v46->i32 + v96) = v46->i32[v97];
      v46->i32[v99] = v100;
      v96 += 4;
      v101 = v97-- <= 0;
    }
    while (!v101);
    v41 = v48 + 1;
    if (v48 + 1 >= v44)
    {
      v212 = 2 * v44;
      v213 = v42;
      v39 = (char *)malloc_type_realloc(v39, 32 * v44, 0xA290D6F8uLL);
      v41 = v48 + 1;
      v42 = v213;
      v40 = v222;
      v44 = v212;
    }
    v102 = &v39[16 * v48];
    *(_QWORD *)v102 = v84 + ((v45 - v16) >> 2) + 1;
    *((_QWORD *)v102 + 1) = v47 + ~v84;
    v47 = v84 - v85;
    v43 = v84 != v85;
    v4 = v221;
  }
  while ((v48 & 0x8000000000000000) == 0 || v47);
LABEL_98:
  free(v39);
  v103 = v16;
  do
  {
    v104 = *(int *)v103;
    if (v32 * v104 > v3)
    {
      v104 = v3 / v32;
      *(_DWORD *)v103 = v104;
    }
    v3 -= v104;
    v103 += 4;
    --v32;
  }
  while (v32);
  v105 = (char *)malloc_type_malloc(0x200uLL, 0xC6410985uLL);
  v106 = 0;
  v107 = 1;
  v108 = 32;
  v109 = v16;
  v110 = v222;
  v111 = v222;
  while (2)
  {
    v112 = v106;
    while (1)
    {
      if (!v107)
      {
        --v112;
        v113 = (uint64_t *)&v105[16 * v112];
        v15 = v113[1];
        v114 = 4 * *v113;
        v111 = (int32x4_t *)((char *)v110 + v114);
        v109 = &v16[v114];
      }
      if ((uint64_t)v15 > 15)
        break;
      if ((uint64_t)v15 > 1)
      {
        v115 = 2;
        for (k = 1; k != v15; ++k)
        {
          v117 = v115;
          do
          {
            v118 = (v117 - 1);
            v119 = (v117 - 2);
            v120 = v111->i32[v118];
            v121 = v111->i32[v119];
            if (v120 >= v121)
              break;
            v122 = v118;
            v111->i32[v122] = v121;
            v123 = 4 * v119;
            v111->i32[(unint64_t)v123 / 4] = v120;
            v124 = *(_DWORD *)&v109[4 * v118];
            *(_DWORD *)&v109[v122 * 4] = *(_DWORD *)&v109[v123];
            *(_DWORD *)&v109[v123] = v124;
            v117 = v118;
          }
          while ((int)v118 > 1);
          ++v115;
        }
      }
      v107 = 0;
      v15 = 0;
      if (v112 < 1)
        goto LABEL_171;
    }
    if (v15 > 0x27)
    {
      v131 = 0;
      v132 = 0;
      if (v15 <= 0x7D0)
        v133 = 8;
      else
        v133 = 26;
      v134 = 9;
      if (v15 <= 0x7D0)
        v134 = 3;
      while (1)
      {
        v135 = (uint64_t)(v15 - 1 + v131) / v133;
        v136 = v111->i32[v131 / v133];
        v137 = v111->i32[v135];
        v138 = (uint64_t)(2 * v15 - 2 + v131) / v133;
        v139 = v111->i32[v138];
        if (v136 >= v137)
        {
          if (v136 < v139)
            goto LABEL_140;
          if (v137 < v139)
          {
LABEL_142:
            *(_QWORD *)&v223[2 * v132] = v138;
            goto LABEL_134;
          }
        }
        else if (v137 >= v139)
        {
          if (v136 < v139)
            goto LABEL_142;
LABEL_140:
          *(_QWORD *)&v223[2 * v132] = v131 / v133;
          goto LABEL_134;
        }
        *(_QWORD *)&v223[2 * v132] = v135;
LABEL_134:
        ++v132;
        v131 += 3 * v15 - 3;
        if (v134 == v132)
        {
          while (2)
          {
            if (v134 < 3)
            {
              v125 = *(_QWORD *)v223;
              v126 = v111->i32[0];
              goto LABEL_159;
            }
            v134 /= 3uLL;
            if (v134 <= 1)
              v140 = 1;
            else
              v140 = v134;
            v141 = v223;
            v142 = v224;
LABEL_149:
            v143 = *(v142 - 2);
            v144 = *(v142 - 1);
            v145 = v111->i32[v143];
            v146 = v111->i32[v144];
            v147 = v111->i32[*v142];
            if (v145 >= v146)
            {
              if (v145 < v147)
                goto LABEL_154;
              if (v146 < v147)
                goto LABEL_156;
            }
            else if (v146 >= v147)
            {
              if (v145 < v147)
              {
LABEL_156:
                *(_QWORD *)v141 = *v142;
LABEL_148:
                v142 += 3;
                v141 += 2;
                if (!--v140)
                  continue;
                goto LABEL_149;
              }
LABEL_154:
              *(_QWORD *)v141 = v143;
              goto LABEL_148;
            }
            break;
          }
          *(_QWORD *)v141 = v144;
          goto LABEL_148;
        }
      }
    }
    v125 = v15 >> 1;
    v126 = v111->i32[0];
    v127 = v111->i32[v15 >> 1];
    v128 = v15 - 1;
    v129 = v111->i32[v15 - 1];
    if (v127 >= v129)
      v130 = v15 >> 1;
    else
      v130 = v15 - 1;
    if (v126 >= v129)
      v128 = 0;
    else
      v130 = 0;
    if (v127 >= v129)
      v125 = v128;
    if (v126 >= v127)
      v125 = v130;
LABEL_159:
    v148 = 0;
    v149 = 0;
    v150 = v125;
    v111->i32[0] = v111->i32[v150];
    v111->i32[v150] = v126;
    v151 = *(_DWORD *)v109;
    *(_DWORD *)v109 = *(_DWORD *)&v109[v150 * 4];
    *(_DWORD *)&v109[v150 * 4] = v151;
    for (m = 1; m != v15; ++m)
    {
      v153 = v111->i32[m];
      if (v153 <= v111->i32[0])
      {
        v154 = ++v149;
        v155 = m;
        v111->i32[v155] = v111->i32[v149];
        v111->i32[v154] = v153;
        v156 = *(_DWORD *)&v109[4 * m];
        *(_DWORD *)&v109[v155 * 4] = *(_DWORD *)&v109[4 * v149];
        *(_DWORD *)&v109[v154 * 4] = v156;
        if (v111->i32[m] == v111->i32[0])
        {
          ++v148;
          v157 = v111->i32[v149];
          v158 = v148;
          v111->i32[v149] = v111->i32[v148];
          v111->i32[v158] = v157;
          v159 = *(_DWORD *)&v109[4 * v149];
          *(_DWORD *)&v109[4 * v149] = *(_DWORD *)&v109[4 * v148];
          *(_DWORD *)&v109[v158 * 4] = v159;
        }
      }
    }
    v160 = 4 * v149 - 4 * v148;
    v161 = v148;
    do
    {
      v162 = *(__int32 *)((char *)v111->i32 + v160);
      v163 = v161;
      *(__int32 *)((char *)v111->i32 + v160) = v111->i32[v161];
      v111->i32[v163] = v162;
      v164 = *(_DWORD *)&v109[v160];
      *(_DWORD *)&v109[v160] = *(_DWORD *)&v109[4 * v161];
      *(_DWORD *)&v109[v163 * 4] = v164;
      v160 += 4;
      v101 = v161-- <= 0;
    }
    while (!v101);
    v106 = v112 + 1;
    if (v112 + 1 >= v108)
    {
      v165 = 2 * v108;
      v105 = (char *)malloc_type_realloc(v105, 32 * v108, 0xA290D6F8uLL);
      v110 = v222;
      v108 = v165;
    }
    v166 = &v105[16 * v112];
    *(_QWORD *)v166 = v149 + (((char *)v111 - (char *)v110) >> 2) + 1;
    *((_QWORD *)v166 + 1) = v15 + ~v149;
    v15 = v149 - v148;
    v107 = v149 != v148;
    v4 = v221;
    if ((v112 & 0x8000000000000000) == 0 || v15)
      continue;
    break;
  }
LABEL_171:
  v167 = v110;
  free(v105);
  free(v167);
  v168 = (int32x4_t *)malloc_type_malloc(4 * v220, 0x100004052888210uLL);
  v169 = v168;
  if (v220 >= 1)
  {
    v170 = v220;
    if (v220 < 8uLL)
    {
      v171 = 0;
      goto LABEL_177;
    }
    v171 = v220 - (unint64_t)(v220 & 7);
    v172 = (int32x4_t)xmmword_239EC6870;
    v173 = v168 + 1;
    v174.i64[0] = 0x400000004;
    v174.i64[1] = 0x400000004;
    v175.i64[0] = 0x800000008;
    v175.i64[1] = 0x800000008;
    v176 = v171;
    do
    {
      v173[-1] = v172;
      *v173 = vaddq_s32(v172, v174);
      v172 = vaddq_s32(v172, v175);
      v173 += 2;
      v176 -= 8;
    }
    while (v176);
    if ((v220 & 7) != 0)
    {
      do
      {
LABEL_177:
        v168->i32[v171] = v171;
        ++v171;
      }
      while (v220 != v171);
    }
    v223[0] = 1337;
    if (v220 >= 2)
    {
      v177 = 0;
      do
      {
        v178 = rand_r(v223);
        v179 = v169->i32[v177];
        v180 = (int)v177 + v178 % ((int)v177 - v220);
        v169->i32[v177] = v169->i32[v180];
        v169->i32[v180] = v179;
        ++v177;
      }
      while (v220 - 1 != v177);
    }
    v181 = v219[1];
    v182 = v169;
    do
    {
      while (1)
      {
        v183 = v182->i32[0];
        v182 = (int32x4_t *)((char *)v182 + 4);
        v184 = (int *)(v181 + 164 * v183);
        v185 = v184[1];
        v186 = *v184 >= v217 ? v217 - 1 : *v184;
        v187 = *v184 >= 0 ? v186 : 0;
        v188 = v187 / v216;
        v189 = v185 >= v4 ? v215 : v184[1];
        v190 = v185 >= 0 ? v189 : 0;
        v191 = v188 + 12 * (v190 / v214);
        v192 = v191;
        v193 = v218[v192];
        if (v193 < *(_DWORD *)&v16[v192 * 4])
          break;
        *v184 = -1337;
        if (!--v170)
          goto LABEL_197;
      }
      v218[v191] = v193 + 1;
      --v170;
    }
    while (v170);
  }
LABEL_197:
  v194 = *v219;
  if (*v219 < 1)
  {
    v196 = 0;
  }
  else
  {
    v195 = 0;
    v196 = 0;
    v197 = 0;
    do
    {
      v198 = v219[1];
      v199 = (__int128 *)(v198 + v195);
      if (*(_DWORD *)(v198 + v195) != -1337)
      {
        v200 = v198 + 164 * v196;
        v201 = *v199;
        v202 = v199[2];
        *(_OWORD *)(v200 + 16) = v199[1];
        *(_OWORD *)(v200 + 32) = v202;
        *(_OWORD *)v200 = v201;
        v203 = v199[3];
        v204 = v199[4];
        v205 = v199[6];
        *(_OWORD *)(v200 + 80) = v199[5];
        *(_OWORD *)(v200 + 96) = v205;
        *(_OWORD *)(v200 + 48) = v203;
        *(_OWORD *)(v200 + 64) = v204;
        v206 = v199[7];
        v207 = v199[8];
        v208 = v199[9];
        *(_DWORD *)(v200 + 160) = *((_DWORD *)v199 + 40);
        *(_OWORD *)(v200 + 128) = v207;
        *(_OWORD *)(v200 + 144) = v208;
        *(_OWORD *)(v200 + 112) = v206;
        ++v196;
        v194 = *v219;
      }
      ++v197;
      v195 += 164;
    }
    while (v197 < v194);
  }
  v209 = v219[2];
  if (v196 > v209)
  {
    if (v209)
      v210 = 2 * v209;
    else
      v210 = 1;
    if (v210 <= v196)
      v211 = v196;
    else
      v211 = v210;
    if (v211)
      v219[1] = (uint64_t)malloc_type_realloc((void *)v219[1], 164 * v211, 0x87E81EF4uLL);
    v219[2] = v211;
  }
  if (v196 > v194)
    bzero((void *)(v219[1] + 164 * *v219), 164 * (v196 - v194));
  *v219 = v196;
  free(v16);
  free(v218);
  free(v169);
}

uint64_t sub_239640ED0(uint64_t result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, float32x4_t a16)
{
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  double v20;
  unint64_t v21;
  double v22;
  int v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint16x4_t *v41;
  uint16x4_t *v42;
  uint16x4_t *v43;
  uint64_t v44;
  uint16x4_t v45;
  uint16x4_t v46;
  uint16x4_t v47;
  uint16x4_t v48;
  uint16x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v82;
  int v83;
  int v84;
  uint64_t v86;
  int v87;
  int v88;
  int v90;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v115;
  float v116;
  float v117;
  float v118;
  int v119;
  int v120;
  int v121;
  unint64_t v122;
  float *v123;
  float v124;
  float v125;
  float v126;
  float v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  float v134;
  float v135;
  int v136;
  float v137;
  unint64_t i;
  int v139;
  int v140;
  float v141;
  unint64_t v142;
  float *v143;
  float *v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float v205;
  _BYTE v206[140];
  _OWORD v207[9];
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v17 = (float)(*(float *)(a4 + 8) / (float)(1 << *a8)) * 0.5;
  v18 = *(float *)(a5 + 36);
  v19 = *(float *)(a5 + 32) * v17;
  v20 = -0.5;
  if (v19 > 0.0)
    v20 = 0.5;
  memset(v207, 0, sizeof(v207));
  memset(v206, 0, sizeof(v206));
  v21 = *(unsigned int *)(a5 + 40);
  v22 = v20 + v19;
  v23 = (int)v22;
  v24 = (float)(int)v21;
  LODWORD(v25) = a2 - (int)v22;
  if ((int)v25 <= 1)
    v25 = 1;
  else
    v25 = v25;
  if (v23 + a2 >= *((_DWORD *)a3 + 3) - 2)
    v26 = *((_DWORD *)a3 + 3) - 2;
  else
    v26 = v23 + a2;
  if ((int)v25 <= v26)
  {
    v27 = -1.0 / (float)((float)(v18 * v17) * (float)((float)(v18 * v17) + (float)(v18 * v17)));
    LODWORD(v28) = result - v23;
    if ((int)result - v23 <= 1)
      v28 = 1;
    else
      v28 = v28;
    v29 = v23 + result;
    if (v29 >= *((_DWORD *)a3 + 2) - 2)
      v30 = *((_DWORD *)a3 + 2) - 2;
    else
      v30 = v29;
    v31 = (v28 + 4);
    *(float *)&v22 = (float)(int)result;
    _S2 = v24 / 6.2832;
    v33 = v30;
    v34 = (v26 + 1);
    v202 = 2 * v28;
    v201 = v30 + 1;
    v200 = -(int)result;
    v35 = vsubq_f32((float32x4_t)xmmword_239EC81A0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v22, 0));
    result = 0x3F70000000000000;
    v203 = v28;
    v204 = v34;
    do
    {
      while (1)
      {
        v36 = (v25 - a2) * (v25 - a2);
        LODWORD(v37) = v28;
        if ((int)v31 <= (int)v33)
        {
          a16.f32[0] = (float)v36;
          a16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a16.f32, 0);
          v38 = *a3;
          v39 = a3[2];
          v40 = v39 * v25;
          v41 = (uint16x4_t *)(*a3 + v202 + 2 * v39 * (v25 - 1));
          v42 = (uint16x4_t *)(*a3 + 2 * (v28 + v39 * (v25 + 1)));
          v43 = (uint16x4_t *)(*a3 + 2 * (v28 + v39 * v25) + 2);
          v37 = v28;
          do
          {
            v44 = v37;
            v45 = *v43++;
            v46 = v45;
            v16.f32[0] = (float)(int)v37;
            v47 = *v42++;
            v48 = v47;
            v49 = *v41++;
            v50 = vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 0));
            v51 = vcvtq_f32_s32((int32x4_t)vsubl_u16(v49, v48));
            v52 = (float32x4_t)vdupq_n_s32(0x3B800000u);
            v53 = vmulq_f32(vcvtq_f32_s32((int32x4_t)vsubl_u16(v46, *(uint16x4_t *)(v38 + 2 * (v40 + (int)v37 - 1)))), v52);
            v54 = vmulq_f32(v51, v52);
            v55 = vmulq_n_f32(vmlaq_f32(a16, v50, v50), v27);
            __asm { FMOV            V18.4S, #1.0 }
            v60 = vmlaq_f32(_Q18, v52, v55);
            v61 = vmulq_f32(v60, v60);
            v62 = vabsq_f32(v53);
            v63 = vmulq_f32(v61, v61);
            v64 = vabsq_f32(v54);
            v65 = vminnmq_f32(v62, v64);
            v66 = vmaxnmq_f32(v62, v64);
            v67 = vrecpeq_f32(v66);
            v68 = vmulq_f32(v63, v63);
            v69 = vmulq_f32(v67, vrecpsq_f32(v66, v67));
            v70 = vmulq_f32(v68, v68);
            v71 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v65, vmulq_f32(v69, vrecpsq_f32(v66, v69))), (int8x16_t)vceqzq_f32(v66));
            v72 = vmulq_f32(v70, v70);
            v73 = vmulq_f32(v71, v71);
            v74 = vmulq_f32(v72, v72);
            v75 = vmlaq_f32(v71, v71, vmulq_f32(v73, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBEA7BE2C), v73, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3E232344u), (float32x4_t)vdupq_n_s32(0xBD3E7316), v73))));
            v76 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v54, v53), (int8x16_t)vsubq_f32((float32x4_t)vdupq_n_s32(0x3FC90FDBu), v75), (int8x16_t)v75);
            v77 = vmulq_f32(v74, v74);
            v78 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v53), (int8x16_t)vsubq_f32((float32x4_t)vdupq_n_s32(0x40490FDBu), v76), (int8x16_t)v76);
            v79 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v54), (int8x16_t)vnegq_f32(v78), (int8x16_t)v78);
            v80 = vmlaq_f32(vmulq_f32(v54, v54), v53, v53);
            _Q16 = vbslq_s8((int8x16_t)vcltzq_f32(v79), (int8x16_t)vaddq_f32(v79, (float32x4_t)vdupq_n_s32(0x40C90FDBu)), (int8x16_t)v79);
            v16 = vsqrtq_f32(v80);
            v82 = vmulq_f32(v16, vmulq_f32(v77, v77));
            v83 = (int)vmlas_n_f32(0.5, _S2, *(float *)_Q16.i32);
            if ((int)v21 <= v83)
              v84 = v21;
            else
              v84 = 0;
            __asm { FMLA            S18, S2, V16.S[1] }
            v86 = 4 * (v83 - v84);
            if ((int)v21 <= (int)_S18)
              v87 = v21;
            else
              v87 = 0;
            v88 = (int)_S18 - v87;
            __asm { FMLA            S18, S2, V16.S[2] }
            if ((int)v21 <= (int)_S18)
              v90 = v21;
            else
              v90 = 0;
            *(float *)((char *)v207 + v86) = *(float *)((char *)v207 + v86) + v82.f32[0];
            *((float *)v207 + v88) = *((float *)v207 + v88) + v82.f32[1];
            __asm { FMLA            S20, S2, V16.S[3] }
            *((float *)v207 + (int)_S18 - v90) = *((float *)v207 + (int)_S18 - v90) + v82.f32[2];
            if ((int)v21 <= (int)_S20)
              v92 = v21;
            else
              v92 = 0;
            *((float *)v207 + (int)_S20 - v92) = *((float *)v207 + (int)_S20 - v92) + v82.f32[3];
            v37 = v44 + 4;
          }
          while (v44 + 8 <= v33);
        }
        if ((int)v37 <= (int)v33)
          break;
        if (++v25 == v34)
          goto LABEL_59;
      }
      v93 = v31;
      v94 = *a3;
      v95 = a3[2];
      v96 = v95 * v25;
      v97 = v95 * (v25++ - 1);
      v98 = v95 * v25;
      v99 = (int)v37;
      v100 = *a3 + 2 * v96 - 2;
      v101 = v201 - v37;
      v102 = v200 + v37;
      do
      {
        v103 = *(unsigned __int16 *)(v94 + 2 * ((v99 + 1) + v96)) - *(unsigned __int16 *)(v100 + 2 * v99);
        v104 = *(unsigned __int16 *)(v94 + 2 * (v99 + v97))
             - *(unsigned __int16 *)(v94 + 2 * (v99 + v98));
        v105 = v27 * (float)(v36 + v102 * v102);
        v106 = (float)v103 * 0.0039062;
        v107 = v105 * 0.00390625 + 1.0;
        v108 = (float)(v107 * v107) * (float)(v107 * v107);
        v109 = (float)v104 * 0.0039062;
        v110 = (float)((float)(v108 * v108) * (float)(v108 * v108))
             * (float)((float)(v108 * v108) * (float)(v108 * v108));
        _NF = v105 < -23.0;
        v111 = (float)((float)(v110 * v110) * (float)(v110 * v110))
             * (float)((float)(v110 * v110) * (float)(v110 * v110));
        if (_NF)
          v111 = 0.0;
        v112 = -v106;
        v113 = -v109;
        if (v106 >= 0.0)
          v112 = (float)v103 * 0.0039062;
        if (v109 >= 0.0)
          v113 = (float)v104 * 0.0039062;
        _NF = v112 < v113;
        if (v112 >= v113)
          v115 = v113;
        else
          v115 = v112;
        if (v112 <= v113)
          v112 = v113;
        v116 = v115 / v112;
        v117 = v116
             + (float)((float)((float)(v116 * v116)
                             * (float)((float)((float)((float)((float)(v116 * v116) * -0.046496) + 0.15931)
                                             * (float)(v116 * v116))
                                     + -0.32762))
                     * v116);
        if (_NF)
          v117 = 1.5708 - v117;
        if (v106 < 0.0)
          v117 = 3.1416 - v117;
        if (v109 < 0.0)
          v117 = -v117;
        if (v117 < 0.0)
          v117 = v117 + 6.2832;
        v118 = sqrtf((float)(v109 * v109) + (float)(v106 * v106));
        v119 = (int)(float)((float)(_S2 * v117) + 0.5);
        if ((int)v21 <= v119)
          v120 = v21;
        else
          v120 = 0;
        *((float *)v207 + v119 - v120) = *((float *)v207 + v119 - v120) + (float)(v111 * v118);
        ++v102;
        ++v99;
        --v101;
      }
      while (v101);
      v31 = v93;
      v28 = v203;
      v34 = v204;
    }
    while (v25 != v204);
  }
LABEL_59:
  if ((int)v21 > 0)
  {
    v121 = 2 - v21;
    if (v21 > 2)
      v121 = 2;
    v122 = (v21 - 1);
    v123 = (float *)v207 + v21;
    v124 = *((float *)v207 + v121);
    v125 = *(v123 - 1);
    v126 = *(float *)v207;
    v127 = (float)((float)(*(float *)v207 * 6.0) * 0.0625)
         + (float)((float)((float)(*(v123 - 2) + v124) * 0.0625)
                 + (float)((float)((float)(v125 + *(float *)((unint64_t)v207 | (4 * ((_DWORD)v21 != 1)))) * 4.0)
                         * 0.0625));
    v205 = v127;
    if ((_DWORD)v21 == 1)
    {
      v129 = a7;
      v128 = a8;
      v130 = a6;
      v132 = a4;
      v131 = a5;
      v133 = v24;
      v134 = *(float *)&v206[4 * v122 - 4];
      v135 = v205;
      if (v134 >= v205)
      {
LABEL_109:
        if ((_DWORD)v21 != 1)
        {
          v170 = 0;
          v171 = 1;
          do
          {
            v172 = v171 + 1;
            v173 = *(float *)&v206[(v170 >> 30) - 4];
            v174 = *(float *)&v206[4 * v171 - 4];
            if (v173 < v174)
            {
              v175 = (v171 + 1);
              if (v122 == v171)
                v175 = 0;
              v176 = *(float *)&v206[4 * v175 - 4];
              if (v174 > v176 && v174 >= (float)(v127 * *(float *)(v131 + 44)))
              {
                v177 = (float)((float)(v173 - v176)
                             / (float)((float)((float)(v173 + v176) + (float)(v174 * -2.0))
                                     + (float)((float)(v173 + v176) + (float)(v174 * -2.0))))
                     + (float)(int)v171;
                v178 = v177 + v24;
                if (v177 >= 0.0)
                  v178 = v177;
                if (v177 >= v24)
                  v179 = v177 - v24;
                else
                  v179 = v178;
                v180 = 360.0 - v179 * 360.0 / v133;
                *(float *)(v132 + 12) = v180;
                v181 = *(_QWORD *)v130;
                v182 = *(_QWORD *)(v130 + 16);
                if (*(_QWORD *)v130 >= v182)
                {
                  if (v182)
                    v183 = 2 * v182;
                  else
                    v183 = 1;
                  if (v183 <= v181)
                    v184 = v181 + 1;
                  else
                    v184 = v183;
                  if (v184)
                  {
                    result = (uint64_t)malloc_type_realloc(*(void **)(v130 + 8), 148 * v184, 0x36D3A3B7uLL);
                    v132 = a4;
                    v131 = a5;
                    *(_QWORD *)(v130 + 8) = result;
                    v181 = *(_QWORD *)v130;
                  }
                  *(_QWORD *)(v130 + 16) = v184;
                }
                *(_QWORD *)v130 = v181 + 1;
                v185 = *(_QWORD *)(v130 + 8) + 148 * v181;
                v186 = *(_DWORD *)(v132 + 144);
                v187 = *(_OWORD *)(v132 + 96);
                v188 = *(_OWORD *)(v132 + 128);
                *(_OWORD *)(v185 + 112) = *(_OWORD *)(v132 + 112);
                *(_OWORD *)(v185 + 128) = v188;
                *(_OWORD *)(v185 + 96) = v187;
                v189 = *(_OWORD *)(v132 + 32);
                v190 = *(_OWORD *)(v132 + 48);
                v191 = *(_OWORD *)(v132 + 80);
                *(_OWORD *)(v185 + 64) = *(_OWORD *)(v132 + 64);
                *(_OWORD *)(v185 + 80) = v191;
                *(_OWORD *)(v185 + 32) = v189;
                *(_OWORD *)(v185 + 48) = v190;
                v192 = *(_OWORD *)(v132 + 16);
                *(_OWORD *)v185 = *(_OWORD *)v132;
                *(_OWORD *)(v185 + 16) = v192;
                *(_DWORD *)(v185 + 144) = v186;
                v193 = *(_QWORD *)v129;
                v194 = *(_QWORD *)(v129 + 16);
                if (*(_QWORD *)v129 >= v194)
                {
                  v195 = 2 * v194;
                  _ZF = v194 == 0;
                  v196 = 32;
                  if (!_ZF)
                    v196 = v195;
                  if (v196 <= v193)
                    v197 = v193 + 1;
                  else
                    v197 = v196;
                  if (v197)
                  {
                    result = (uint64_t)malloc_type_realloc(*(void **)(v129 + 8), 8 * v197, 0xD989B8B4uLL);
                    v132 = a4;
                    v131 = a5;
                    *(_QWORD *)(v129 + 8) = result;
                    v193 = *(_QWORD *)v129;
                  }
                  *(_QWORD *)(v129 + 16) = v197;
                }
                *(_QWORD *)v129 = v193 + 1;
                *(_QWORD *)(*(_QWORD *)(v129 + 8) + 8 * v193) = *v128;
              }
            }
            v170 += 0x100000000;
            v171 = v172;
          }
          while (v21 != v172);
        }
        return result;
      }
    }
    else
    {
      if (v21 <= 3)
        v136 = 3 - v21;
      else
        v136 = 3;
      v137 = *((float *)v207 + 1);
      *(float *)v206 = (float)((float)(*((float *)v207 + 1) * 6.0) * 0.0625)
                     + (float)((float)((float)((float)(v124 + *(float *)v207) * 4.0) * 0.0625)
                             + (float)((float)(v125 + *((float *)v207 + v136)) * 0.0625));
      v130 = a6;
      v129 = a7;
      v132 = a4;
      v131 = a5;
      if ((_DWORD)v21 != 2)
      {
        for (i = 2; i != v21; ++i)
        {
          if (i >= v122)
            v139 = v21;
          else
            v139 = 0;
          if (i + 2 >= v21)
            v140 = v21;
          else
            v140 = 0;
          v141 = (float)((float)(v126 + *((float *)v207 + (int)i - v140 + 2)) * 0.0625)
               + (float)((float)((float)(v137 + *((float *)v207 + (int)i - v139 + 1)) * 4.0) * 0.0625);
          v126 = v137;
          v137 = *((float *)v207 + i);
          *(float *)&v206[4 * i - 4] = (float)((float)(v137 * 6.0) * 0.0625) + v141;
        }
      }
      v142 = v21 - 1;
      v143 = &v205;
      v144 = (float *)v206;
      v145 = (float *)v206;
      v128 = a8;
      do
      {
        v146 = *v145++;
        v147 = v146;
        if (v127 < v146)
        {
          v127 = v147;
          v143 = v144;
        }
        v144 = v145;
        --v142;
      }
      while (v142);
      v127 = *v143;
      v133 = v24;
      v134 = *(float *)&v206[4 * v122 - 4];
      v135 = v205;
      if (v134 >= v205)
        goto LABEL_109;
    }
    v148 = *(float *)&v206[4 * ((_DWORD)v21 != 1) - 4];
    if (v135 > v148 && v135 >= (float)(v127 * *(float *)(v131 + 44)))
    {
      v149 = (float)((float)(v134 - v148)
                   / (float)((float)((float)(v134 + v148) + (float)(v135 * -2.0))
                           + (float)((float)(v134 + v148) + (float)(v135 * -2.0))))
           + 0.0;
      v150 = v149 + v24;
      if (v149 >= 0.0)
        v150 = v149;
      if (v149 >= v24)
        v151 = v149 - v24;
      else
        v151 = v150;
      v152 = 360.0 - v151 * 360.0 / v133;
      *(float *)(v132 + 12) = v152;
      v153 = *(_QWORD *)v130;
      v154 = *(_QWORD *)(v130 + 16);
      if (*(_QWORD *)v130 >= v154)
      {
        if (v154)
          v155 = 2 * v154;
        else
          v155 = 1;
        if (v155 <= v153)
          v156 = v153 + 1;
        else
          v156 = v155;
        if (v156)
        {
          result = (uint64_t)malloc_type_realloc(*(void **)(v130 + 8), 148 * v156, 0x36D3A3B7uLL);
          v132 = a4;
          v131 = a5;
          *(_QWORD *)(v130 + 8) = result;
          v153 = *(_QWORD *)v130;
        }
        *(_QWORD *)(v130 + 16) = v156;
      }
      *(_QWORD *)v130 = v153 + 1;
      v157 = *(_QWORD *)(v130 + 8) + 148 * v153;
      v158 = *(_DWORD *)(v132 + 144);
      v159 = *(_OWORD *)(v132 + 96);
      v160 = *(_OWORD *)(v132 + 128);
      *(_OWORD *)(v157 + 112) = *(_OWORD *)(v132 + 112);
      *(_OWORD *)(v157 + 128) = v160;
      *(_OWORD *)(v157 + 96) = v159;
      v161 = *(_OWORD *)(v132 + 32);
      v162 = *(_OWORD *)(v132 + 48);
      v163 = *(_OWORD *)(v132 + 80);
      *(_OWORD *)(v157 + 64) = *(_OWORD *)(v132 + 64);
      *(_OWORD *)(v157 + 80) = v163;
      *(_OWORD *)(v157 + 32) = v161;
      *(_OWORD *)(v157 + 48) = v162;
      v164 = *(_OWORD *)(v132 + 16);
      *(_OWORD *)v157 = *(_OWORD *)v132;
      *(_OWORD *)(v157 + 16) = v164;
      *(_DWORD *)(v157 + 144) = v158;
      v165 = *(_QWORD *)v129;
      v166 = *(_QWORD *)(v129 + 16);
      if (*(_QWORD *)v129 >= v166)
      {
        v167 = 2 * v166;
        _ZF = v166 == 0;
        v168 = 32;
        if (!_ZF)
          v168 = v167;
        if (v168 <= v165)
          v169 = v165 + 1;
        else
          v169 = v168;
        if (v169)
        {
          result = (uint64_t)malloc_type_realloc(*(void **)(v129 + 8), 8 * v169, 0xD989B8B4uLL);
          v132 = a4;
          v131 = a5;
          *(_QWORD *)(v129 + 8) = result;
          v165 = *(_QWORD *)v129;
        }
        *(_QWORD *)(v129 + 16) = v169;
      }
      *(_QWORD *)v129 = v165 + 1;
      *(_QWORD *)(*(_QWORD *)(v129 + 8) + 8 * v165) = *v128;
    }
    goto LABEL_109;
  }
  return result;
}

void sub_2396419E8()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  int16x8_t v12;
  uint16x8_t v13;
  int8x16_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v19;
  __int128 v20;
  int8x16_t v21;
  uint64_t v22;
  int *v23;
  float v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  signed int v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint64_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint64_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  int8x16_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  signed int v113;
  signed int v114;
  uint64_t *v115;
  uint64_t *v116;
  int *v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  int *v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  char *v143;
  __int128 v144;
  unsigned int *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t i;
  uint64_t v151;
  __int128 *v152;
  char *v153;
  int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  unint64_t v179;
  char *v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  char *v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  char *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  char *v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  char *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  char *v259;
  unint64_t v260;
  int v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  char *v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  int v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  char *v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  char *v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  char *v343;
  int v344;
  int v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  float32x4_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  int v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  unint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  signed int v375;
  int16x8_t v376;
  uint64_t v377;
  int16x8_t v378;
  uint64_t *v379;
  uint64_t *v380;
  int *ptr;
  char *ptra;
  int *ptrb;
  uint64_t v384;
  int v385;
  int v386;
  uint64_t v387;
  unsigned int *v388;
  uint64_t v389;
  _BYTE v390[160];
  int v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  int8x16_t v398;
  int16x8_t v399;
  uint16x8_t v400;
  int v401;
  uint64_t v402;

  v0 = MEMORY[0x24BDAC7A8]();
  v362 = v1;
  v3 = v2;
  v377 = v4;
  v367 = v0;
  v402 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)(*(_QWORD *)(v5 + 8) + 24 * v6);
  v363 = v6;
  v9 = (_QWORD *)(*(_QWORD *)(v8 + 8) + 24 * v6);
  v10 = malloc_type_malloc(0x12800uLL, 0x3E8B2D5AuLL);
  *v7 = 0;
  v7[1] = v10;
  v7[2] = 512;
  v11 = malloc_type_malloc(0x1000uLL, 0x7FE02685uLL);
  *v9 = 0;
  v9[1] = v11;
  v9[2] = 512;
  if (v3 >= 1)
  {
    v19 = 0;
    v20 = 0uLL;
    v21.i64[0] = 0x8000800080008000;
    v21.i64[1] = 0x8000800080008000;
    v364 = v3;
    v365 = (uint64_t)v9;
    v366 = (uint64_t)v7;
    while (1)
    {
      v22 = *(_QWORD *)(v367 + 8);
      v23 = (int *)v377;
      v24 = *(float *)(v377 + 16);
      v25 = *(_DWORD *)(v377 + 4);
      v387 = 0;
      v388 = 0;
      v389 = 0;
      v26 = v22 + 72 * v19;
      v27 = v26 + 32;
      v371 = v19;
      v368 = v22;
      if (v25 >= 1)
      {
        v28 = *(_DWORD *)(*(_QWORD *)v27 + 36);
        v29 = *(_DWORD *)(v377 + 28);
        v30 = (v28 - 2 * v29) / v362;
        v31 = v29 + v30 * v363;
        v32 = v31 + v30;
        v33 = v28 - v29;
        if (v363 + 1 < v362)
          v33 = v32;
        if (v31 < v33)
          break;
      }
      v120 = 0;
      v35 = 0;
LABEL_137:
      ptrb = v35;
      if (v23[12] >= 1)
      {
        sub_239640228();
        v120 = v387;
      }
      v137 = (char *)malloc_type_malloc(0x200uLL, 0x5A43BE87uLL);
      v138 = (char *)v388;
      if (v120)
      {
        v139 = v120;
        v140 = 0;
        v141 = 1;
        v142 = 32;
        v143 = (char *)v388;
        v144 = 0uLL;
        while (1)
        {
          v145 = v388;
          v146 = v140;
          while (1)
          {
            if (!v141)
            {
              --v146;
              v147 = &v137[16 * v146];
              v139 = *((_QWORD *)v147 + 1);
              v143 = (char *)&v145[41 * *(_QWORD *)v147];
            }
            if ((uint64_t)v139 > 15)
              break;
            if ((uint64_t)v139 > 1)
            {
              v148 = v143 + 164;
              v149 = 2;
              for (i = 1; i != v139; ++i)
              {
                v151 = v149;
                v152 = (__int128 *)v148;
                do
                {
                  v153 = &v143[164 * (v151 - 2)];
                  v154 = *((_DWORD *)v152 + 40) - *((_DWORD *)v153 + 40);
                  if (!v154)
                  {
                    v154 = *((_DWORD *)v152 + 1) - *(_DWORD *)&v143[164 * (v151 - 2) + 4];
                    if (!v154)
                      v154 = *(_DWORD *)v152 - *(_DWORD *)v153;
                  }
                  if ((v154 & 0x80000000) == 0)
                    break;
                  v391 = 0;
                  *(_OWORD *)&v390[128] = v144;
                  *(_OWORD *)&v390[144] = v144;
                  *(_OWORD *)&v390[96] = v144;
                  *(_OWORD *)&v390[112] = v144;
                  *(_OWORD *)&v390[64] = v144;
                  *(_OWORD *)&v390[80] = v144;
                  *(_OWORD *)&v390[32] = v144;
                  *(_OWORD *)&v390[48] = v144;
                  *(_OWORD *)v390 = v144;
                  *(_OWORD *)&v390[16] = v144;
                  v155 = *v152;
                  v156 = v152[2];
                  *(_OWORD *)&v390[16] = v152[1];
                  *(_OWORD *)&v390[32] = v156;
                  *(_OWORD *)v390 = v155;
                  v157 = v152[3];
                  v158 = v152[4];
                  v159 = v152[5];
                  *(_OWORD *)&v390[96] = v152[6];
                  *(_OWORD *)&v390[64] = v158;
                  *(_OWORD *)&v390[80] = v159;
                  *(_OWORD *)&v390[48] = v157;
                  v160 = v152[7];
                  v161 = v152[8];
                  v162 = v152[9];
                  v391 = *((_DWORD *)v152 + 40);
                  *(_OWORD *)&v390[128] = v161;
                  *(_OWORD *)&v390[144] = v162;
                  *(_OWORD *)&v390[112] = v160;
                  v163 = *(_OWORD *)v153;
                  v164 = *((_OWORD *)v153 + 2);
                  v152[1] = *((_OWORD *)v153 + 1);
                  v152[2] = v164;
                  *v152 = v163;
                  v165 = *((_OWORD *)v153 + 3);
                  v166 = *((_OWORD *)v153 + 4);
                  v167 = *((_OWORD *)v153 + 6);
                  v152[5] = *((_OWORD *)v153 + 5);
                  v152[6] = v167;
                  v152[3] = v165;
                  v152[4] = v166;
                  v168 = *((_OWORD *)v153 + 7);
                  v169 = *((_OWORD *)v153 + 8);
                  v170 = *((_OWORD *)v153 + 9);
                  *((_DWORD *)v152 + 40) = *((_DWORD *)v153 + 40);
                  v152[8] = v169;
                  v152[9] = v170;
                  v152[7] = v168;
                  v171 = *(_OWORD *)v390;
                  v172 = *(_OWORD *)&v390[32];
                  *((_OWORD *)v153 + 1) = *(_OWORD *)&v390[16];
                  *((_OWORD *)v153 + 2) = v172;
                  *(_OWORD *)v153 = v171;
                  v173 = *(_OWORD *)&v390[48];
                  v174 = *(_OWORD *)&v390[64];
                  v175 = *(_OWORD *)&v390[96];
                  *((_OWORD *)v153 + 5) = *(_OWORD *)&v390[80];
                  *((_OWORD *)v153 + 6) = v175;
                  *((_OWORD *)v153 + 3) = v173;
                  *((_OWORD *)v153 + 4) = v174;
                  v176 = *(_OWORD *)&v390[112];
                  v177 = *(_OWORD *)&v390[128];
                  v178 = *(_OWORD *)&v390[144];
                  *((_DWORD *)v153 + 40) = v391;
                  *((_OWORD *)v153 + 8) = v177;
                  *((_OWORD *)v153 + 9) = v178;
                  *((_OWORD *)v153 + 7) = v176;
                  v152 = (__int128 *)((char *)v152 - 164);
                  --v151;
                }
                while (v151 > 1);
                v148 += 164;
                ++v149;
              }
            }
            v141 = 0;
            v139 = 0;
            if (v146 < 1)
            {
              v138 = (char *)v145;
              goto LABEL_260;
            }
          }
          if (v139 > 0x27)
            break;
          v179 = v139 >> 1;
          v180 = &v143[164 * (v139 >> 1)];
          v181 = *((_DWORD *)v143 + 40);
          v182 = *((_DWORD *)v180 + 40);
          v183 = v181 - v182;
          if (v181 == v182)
          {
            v184 = *((_DWORD *)v143 + 1);
            v185 = *(_DWORD *)&v143[164 * v179 + 4];
            v183 = v184 - v185;
            if (v184 == v185)
              v183 = *(_DWORD *)v143 - *(_DWORD *)v180;
          }
          v186 = v139 - 1;
          v187 = &v143[164 * v139 - 164];
          v188 = *((_DWORD *)v187 + 40);
          if (v183 < 0)
          {
            v344 = v182 - v188;
            if (!v344)
            {
              v344 = *(_DWORD *)&v143[164 * v179 + 4] - *(_DWORD *)&v143[164 * v186 + 4];
              if (!v344)
                v344 = *(_DWORD *)v180 - *(_DWORD *)v187;
            }
            if ((v344 & 0x80000000) == 0)
            {
              v345 = v181 - v188;
              if (v181 == v188)
              {
                v345 = *((_DWORD *)v143 + 1) - *(_DWORD *)&v143[164 * v186 + 4];
                if (!v345)
                  v345 = *(_DWORD *)v143 - *(_DWORD *)v187;
              }
              if (v345 >= 0)
                v179 = 0;
              else
                v179 = v139 - 1;
            }
          }
          else
          {
            v189 = v181 - v188;
            if (!v189)
            {
              v189 = *((_DWORD *)v143 + 1) - *(_DWORD *)&v143[164 * v186 + 4];
              if (!v189)
                v189 = *(_DWORD *)v143 - *(_DWORD *)v187;
            }
            if (v189 < 0)
            {
              v179 = 0;
            }
            else
            {
              v190 = v182 - v188;
              if (v182 == v188)
              {
                v190 = *(_DWORD *)&v143[164 * v179 + 4] - *(_DWORD *)&v143[164 * v186 + 4];
                if (!v190)
                  v190 = *(_DWORD *)v180 - *(_DWORD *)v187;
              }
              if (v190 < 0)
                v179 = v139 - 1;
            }
          }
LABEL_230:
          v232 = 0;
          v233 = 0;
          v391 = 0;
          *(_OWORD *)&v390[128] = v144;
          *(_OWORD *)&v390[144] = v144;
          *(_OWORD *)&v390[96] = v144;
          *(_OWORD *)&v390[112] = v144;
          *(_OWORD *)&v390[64] = v144;
          *(_OWORD *)&v390[80] = v144;
          *(_OWORD *)&v390[32] = v144;
          *(_OWORD *)&v390[48] = v144;
          *(_OWORD *)v390 = v144;
          *(_OWORD *)&v390[16] = v144;
          v234 = *(_OWORD *)v143;
          v235 = *((_OWORD *)v143 + 2);
          *(_OWORD *)&v390[16] = *((_OWORD *)v143 + 1);
          *(_OWORD *)&v390[32] = v235;
          *(_OWORD *)v390 = v234;
          v236 = *((_OWORD *)v143 + 3);
          v237 = *((_OWORD *)v143 + 4);
          v238 = *((_OWORD *)v143 + 5);
          *(_OWORD *)&v390[96] = *((_OWORD *)v143 + 6);
          *(_OWORD *)&v390[64] = v237;
          *(_OWORD *)&v390[80] = v238;
          *(_OWORD *)&v390[48] = v236;
          v239 = *((_OWORD *)v143 + 7);
          v240 = *((_OWORD *)v143 + 8);
          v241 = *((_OWORD *)v143 + 9);
          v391 = *((_DWORD *)v143 + 40);
          *(_OWORD *)&v390[128] = v240;
          *(_OWORD *)&v390[144] = v241;
          *(_OWORD *)&v390[112] = v239;
          v242 = &v143[164 * v179];
          v243 = *(_OWORD *)v242;
          v244 = *((_OWORD *)v242 + 2);
          *((_OWORD *)v143 + 1) = *((_OWORD *)v242 + 1);
          *((_OWORD *)v143 + 2) = v244;
          *(_OWORD *)v143 = v243;
          v245 = *((_OWORD *)v242 + 3);
          v246 = *((_OWORD *)v242 + 4);
          v247 = *((_OWORD *)v242 + 6);
          *((_OWORD *)v143 + 5) = *((_OWORD *)v242 + 5);
          *((_OWORD *)v143 + 6) = v247;
          *((_OWORD *)v143 + 3) = v245;
          *((_OWORD *)v143 + 4) = v246;
          v248 = *((_OWORD *)v242 + 7);
          v249 = *((_OWORD *)v242 + 8);
          v250 = *((_OWORD *)v242 + 9);
          *((_DWORD *)v143 + 40) = *((_DWORD *)v242 + 40);
          *((_OWORD *)v143 + 8) = v249;
          *((_OWORD *)v143 + 9) = v250;
          *((_OWORD *)v143 + 7) = v248;
          v251 = *(_OWORD *)v390;
          v252 = *(_OWORD *)&v390[32];
          *((_OWORD *)v242 + 1) = *(_OWORD *)&v390[16];
          *((_OWORD *)v242 + 2) = v252;
          *(_OWORD *)v242 = v251;
          v253 = *(_OWORD *)&v390[48];
          v254 = *(_OWORD *)&v390[64];
          v255 = *(_OWORD *)&v390[96];
          *((_OWORD *)v242 + 5) = *(_OWORD *)&v390[80];
          *((_OWORD *)v242 + 6) = v255;
          *((_OWORD *)v242 + 3) = v253;
          *((_OWORD *)v242 + 4) = v254;
          v256 = *(_OWORD *)&v390[112];
          v257 = *(_OWORD *)&v390[128];
          v258 = *(_OWORD *)&v390[144];
          *((_DWORD *)v242 + 40) = v391;
          *((_OWORD *)v242 + 8) = v257;
          *((_OWORD *)v242 + 9) = v258;
          *((_OWORD *)v242 + 7) = v256;
          v259 = v143 + 164;
          v260 = v139 - 1;
          do
          {
            v261 = *((_DWORD *)v259 + 40) - *((_DWORD *)v143 + 40);
            if (!v261)
            {
              v261 = *((_DWORD *)v259 + 1) - *((_DWORD *)v143 + 1);
              if (!v261)
                v261 = *(_DWORD *)v259 - *(_DWORD *)v143;
            }
            if (v261 <= 0)
            {
              ++v233;
              v391 = 0;
              *(_OWORD *)&v390[128] = v144;
              *(_OWORD *)&v390[144] = v144;
              *(_OWORD *)&v390[96] = v144;
              *(_OWORD *)&v390[112] = v144;
              *(_OWORD *)&v390[64] = v144;
              *(_OWORD *)&v390[80] = v144;
              *(_OWORD *)&v390[32] = v144;
              *(_OWORD *)&v390[48] = v144;
              *(_OWORD *)v390 = v144;
              *(_OWORD *)&v390[16] = v144;
              v262 = *(_OWORD *)v259;
              v263 = *((_OWORD *)v259 + 2);
              *(_OWORD *)&v390[16] = *((_OWORD *)v259 + 1);
              *(_OWORD *)&v390[32] = v263;
              *(_OWORD *)v390 = v262;
              v264 = *((_OWORD *)v259 + 3);
              v265 = *((_OWORD *)v259 + 4);
              v266 = *((_OWORD *)v259 + 5);
              *(_OWORD *)&v390[96] = *((_OWORD *)v259 + 6);
              *(_OWORD *)&v390[64] = v265;
              *(_OWORD *)&v390[80] = v266;
              *(_OWORD *)&v390[48] = v264;
              v267 = *((_OWORD *)v259 + 7);
              v268 = *((_OWORD *)v259 + 8);
              v269 = *((_OWORD *)v259 + 9);
              v391 = *((_DWORD *)v259 + 40);
              *(_OWORD *)&v390[128] = v268;
              *(_OWORD *)&v390[144] = v269;
              *(_OWORD *)&v390[112] = v267;
              v270 = &v143[164 * v233];
              v271 = *(_OWORD *)v270;
              v272 = *((_OWORD *)v270 + 2);
              *((_OWORD *)v259 + 1) = *((_OWORD *)v270 + 1);
              *((_OWORD *)v259 + 2) = v272;
              *(_OWORD *)v259 = v271;
              v273 = *((_OWORD *)v270 + 3);
              v274 = *((_OWORD *)v270 + 4);
              v275 = *((_OWORD *)v270 + 6);
              *((_OWORD *)v259 + 5) = *((_OWORD *)v270 + 5);
              *((_OWORD *)v259 + 6) = v275;
              *((_OWORD *)v259 + 3) = v273;
              *((_OWORD *)v259 + 4) = v274;
              v276 = *((_OWORD *)v270 + 7);
              v277 = *((_OWORD *)v270 + 8);
              v278 = *((_OWORD *)v270 + 9);
              *((_DWORD *)v259 + 40) = *((_DWORD *)v270 + 40);
              *((_OWORD *)v259 + 8) = v277;
              *((_OWORD *)v259 + 9) = v278;
              *((_OWORD *)v259 + 7) = v276;
              v279 = *(_OWORD *)v390;
              v280 = *(_OWORD *)&v390[32];
              *((_OWORD *)v270 + 1) = *(_OWORD *)&v390[16];
              *((_OWORD *)v270 + 2) = v280;
              *(_OWORD *)v270 = v279;
              v281 = *(_OWORD *)&v390[48];
              v282 = *(_OWORD *)&v390[64];
              v283 = *(_OWORD *)&v390[96];
              *((_OWORD *)v270 + 5) = *(_OWORD *)&v390[80];
              *((_OWORD *)v270 + 6) = v283;
              *((_OWORD *)v270 + 3) = v281;
              *((_OWORD *)v270 + 4) = v282;
              v284 = *(_OWORD *)&v390[112];
              v285 = *(_OWORD *)&v390[128];
              v286 = *(_OWORD *)&v390[144];
              *((_DWORD *)v270 + 40) = v391;
              *((_OWORD *)v270 + 8) = v285;
              *((_OWORD *)v270 + 9) = v286;
              *((_OWORD *)v270 + 7) = v284;
              v287 = *((_DWORD *)v259 + 40) - *((_DWORD *)v143 + 40);
              if (!v287)
              {
                v287 = *((_DWORD *)v259 + 1) - *((_DWORD *)v143 + 1);
                if (!v287)
                  v287 = *(_DWORD *)v259 - *(_DWORD *)v143;
              }
              if (!v287)
              {
                ++v232;
                v391 = 0;
                *(_OWORD *)&v390[128] = v144;
                *(_OWORD *)&v390[144] = v144;
                *(_OWORD *)&v390[96] = v144;
                *(_OWORD *)&v390[112] = v144;
                *(_OWORD *)&v390[64] = v144;
                *(_OWORD *)&v390[80] = v144;
                *(_OWORD *)&v390[32] = v144;
                *(_OWORD *)&v390[48] = v144;
                *(_OWORD *)v390 = v144;
                *(_OWORD *)&v390[16] = v144;
                v288 = *(_OWORD *)v270;
                v289 = *((_OWORD *)v270 + 2);
                *(_OWORD *)&v390[16] = *((_OWORD *)v270 + 1);
                *(_OWORD *)&v390[32] = v289;
                *(_OWORD *)v390 = v288;
                v290 = *((_OWORD *)v270 + 3);
                v291 = *((_OWORD *)v270 + 4);
                v292 = *((_OWORD *)v270 + 5);
                *(_OWORD *)&v390[96] = *((_OWORD *)v270 + 6);
                *(_OWORD *)&v390[64] = v291;
                *(_OWORD *)&v390[80] = v292;
                *(_OWORD *)&v390[48] = v290;
                v293 = *((_OWORD *)v270 + 7);
                v294 = *((_OWORD *)v270 + 8);
                v295 = *((_OWORD *)v270 + 9);
                v391 = *((_DWORD *)v270 + 40);
                *(_OWORD *)&v390[128] = v294;
                *(_OWORD *)&v390[144] = v295;
                *(_OWORD *)&v390[112] = v293;
                v296 = &v143[164 * v232];
                v297 = *(_OWORD *)v296;
                v298 = *((_OWORD *)v296 + 2);
                *((_OWORD *)v270 + 1) = *((_OWORD *)v296 + 1);
                *((_OWORD *)v270 + 2) = v298;
                *(_OWORD *)v270 = v297;
                v299 = *((_OWORD *)v296 + 3);
                v300 = *((_OWORD *)v296 + 4);
                v301 = *((_OWORD *)v296 + 6);
                *((_OWORD *)v270 + 5) = *((_OWORD *)v296 + 5);
                *((_OWORD *)v270 + 6) = v301;
                *((_OWORD *)v270 + 3) = v299;
                *((_OWORD *)v270 + 4) = v300;
                v302 = *((_OWORD *)v296 + 7);
                v303 = *((_OWORD *)v296 + 8);
                v304 = *((_OWORD *)v296 + 9);
                *((_DWORD *)v270 + 40) = *((_DWORD *)v296 + 40);
                *((_OWORD *)v270 + 8) = v303;
                *((_OWORD *)v270 + 9) = v304;
                *((_OWORD *)v270 + 7) = v302;
                v305 = *(_OWORD *)v390;
                v306 = *(_OWORD *)&v390[32];
                *((_OWORD *)v296 + 1) = *(_OWORD *)&v390[16];
                *((_OWORD *)v296 + 2) = v306;
                *(_OWORD *)v296 = v305;
                v307 = *(_OWORD *)&v390[48];
                v308 = *(_OWORD *)&v390[64];
                v309 = *(_OWORD *)&v390[96];
                *((_OWORD *)v296 + 5) = *(_OWORD *)&v390[80];
                *((_OWORD *)v296 + 6) = v309;
                *((_OWORD *)v296 + 3) = v307;
                *((_OWORD *)v296 + 4) = v308;
                v310 = *(_OWORD *)&v390[112];
                v311 = *(_OWORD *)&v390[128];
                v312 = *(_OWORD *)&v390[144];
                *((_DWORD *)v296 + 40) = v391;
                *((_OWORD *)v296 + 8) = v311;
                *((_OWORD *)v296 + 9) = v312;
                *((_OWORD *)v296 + 7) = v310;
              }
            }
            v259 += 164;
            --v260;
          }
          while (v260);
          v313 = v232 + 1;
          v314 = 164 * v232;
          v315 = 164 * v233 - 164 * v232;
          do
          {
            v391 = 0;
            *(_OWORD *)&v390[128] = v144;
            *(_OWORD *)&v390[144] = v144;
            *(_OWORD *)&v390[96] = v144;
            *(_OWORD *)&v390[112] = v144;
            *(_OWORD *)&v390[64] = v144;
            *(_OWORD *)&v390[80] = v144;
            *(_OWORD *)&v390[32] = v144;
            *(_OWORD *)&v390[48] = v144;
            *(_OWORD *)v390 = v144;
            *(_OWORD *)&v390[16] = v144;
            v316 = &v143[v315];
            v317 = *(_OWORD *)&v143[v315];
            v318 = *(_OWORD *)&v143[v315 + 32];
            *(_OWORD *)&v390[16] = *(_OWORD *)&v143[v315 + 16];
            *(_OWORD *)&v390[32] = v318;
            *(_OWORD *)v390 = v317;
            v319 = *(_OWORD *)&v143[v315 + 48];
            v320 = *(_OWORD *)&v143[v315 + 64];
            v321 = *(_OWORD *)&v143[v315 + 80];
            *(_OWORD *)&v390[96] = *(_OWORD *)&v143[v315 + 96];
            *(_OWORD *)&v390[64] = v320;
            *(_OWORD *)&v390[80] = v321;
            *(_OWORD *)&v390[48] = v319;
            v322 = *(_OWORD *)&v143[v315 + 112];
            v323 = *(_OWORD *)&v143[v315 + 128];
            v324 = *(_OWORD *)&v143[v315 + 144];
            v391 = *(_DWORD *)&v143[v315 + 160];
            *(_OWORD *)&v390[128] = v323;
            *(_OWORD *)&v390[144] = v324;
            v325 = &v143[v314];
            *(_OWORD *)&v390[112] = v322;
            v326 = *(_OWORD *)&v143[v314];
            v327 = *(_OWORD *)&v143[v314 + 32];
            *((_OWORD *)v316 + 1) = *(_OWORD *)&v143[v314 + 16];
            *((_OWORD *)v316 + 2) = v327;
            *(_OWORD *)v316 = v326;
            v328 = *(_OWORD *)&v143[v314 + 48];
            v329 = *(_OWORD *)&v143[v314 + 64];
            v330 = *(_OWORD *)&v143[v314 + 96];
            *((_OWORD *)v316 + 5) = *(_OWORD *)&v143[v314 + 80];
            *((_OWORD *)v316 + 6) = v330;
            *((_OWORD *)v316 + 3) = v328;
            *((_OWORD *)v316 + 4) = v329;
            v331 = *(_OWORD *)&v143[v314 + 112];
            v332 = *(_OWORD *)&v143[v314 + 128];
            v333 = *(_OWORD *)&v143[v314 + 144];
            *((_DWORD *)v316 + 40) = *(_DWORD *)&v143[v314 + 160];
            *((_OWORD *)v316 + 8) = v332;
            *((_OWORD *)v316 + 9) = v333;
            *((_OWORD *)v316 + 7) = v331;
            v334 = *(_OWORD *)v390;
            v335 = *(_OWORD *)&v390[32];
            *((_OWORD *)v325 + 1) = *(_OWORD *)&v390[16];
            *((_OWORD *)v325 + 2) = v335;
            *(_OWORD *)v325 = v334;
            v336 = *(_OWORD *)&v390[48];
            v337 = *(_OWORD *)&v390[64];
            v338 = *(_OWORD *)&v390[96];
            *((_OWORD *)v325 + 5) = *(_OWORD *)&v390[80];
            *((_OWORD *)v325 + 6) = v338;
            *((_OWORD *)v325 + 3) = v336;
            *((_OWORD *)v325 + 4) = v337;
            v339 = *(_OWORD *)&v390[112];
            v340 = *(_OWORD *)&v390[128];
            v341 = *(_OWORD *)&v390[144];
            *((_DWORD *)v325 + 40) = v391;
            *((_OWORD *)v325 + 8) = v340;
            *((_OWORD *)v325 + 9) = v341;
            *((_OWORD *)v325 + 7) = v339;
            --v313;
            v314 -= 164;
            v315 += 164;
          }
          while (v313 > 0);
          v140 = v146 + 1;
          if (v146 + 1 >= v142)
          {
            v342 = 2 * v142;
            v137 = (char *)malloc_type_realloc(v137, 32 * v142, 0x45272CB7uLL);
            v144 = 0uLL;
            v142 = v342;
          }
          v343 = &v137[16 * v146];
          *(_QWORD *)v343 = v233 - 0x7063E7063E7063E7 * ((v143 - v138) >> 2) + 1;
          *((_QWORD *)v343 + 1) = v139 + ~v233;
          v139 = v233 - v232;
          v141 = v233 != v232;
          v19 = v371;
          if (v146 < 0 && !v139)
          {
            v138 = (char *)v388;
            goto LABEL_260;
          }
        }
        v191 = 0;
        v192 = 0;
        v193 = 26;
        if (v139 <= 0x7D0)
          v193 = 8;
        v194 = 3;
        if (v139 > 0x7D0)
          v194 = 9;
        while (2)
        {
          v195 = v191 / v193;
          v196 = &v143[164 * (v191 / v193)];
          v197 = (uint64_t)(v139 - 1 + v191) / v193;
          v198 = &v143[164 * v197];
          v199 = *((_DWORD *)v196 + 40);
          v200 = *((_DWORD *)v198 + 40);
          v201 = v199 - v200;
          if (v199 == v200)
          {
            v202 = *(_DWORD *)&v143[164 * v195 + 4];
            v203 = *(_DWORD *)&v143[164 * v197 + 4];
            v201 = v202 - v203;
            if (v202 == v203)
              v201 = *(_DWORD *)v196 - *(_DWORD *)v198;
          }
          v204 = (uint64_t)(2 * v139 - 2 + v191) / v193;
          v205 = &v143[164 * v204];
          v206 = *((_DWORD *)v205 + 40);
          if (v201 < 0)
          {
            v209 = v200 - v206;
            if (!v209)
            {
              v209 = *(_DWORD *)&v143[164 * v197 + 4] - *(_DWORD *)&v143[164 * v204 + 4];
              if (!v209)
                v209 = *(_DWORD *)v198 - *(_DWORD *)v205;
            }
            if (v209 < 0)
              goto LABEL_199;
            v210 = v199 - v206;
            if (v199 == v206)
            {
              v210 = *(_DWORD *)&v143[164 * v195 + 4] - *(_DWORD *)&v143[164 * v204 + 4];
              if (!v210)
                v210 = *(_DWORD *)v196 - *(_DWORD *)v205;
            }
            if (v210 < 0)
            {
LABEL_191:
              *(_QWORD *)&v390[8 * v192] = v204;
              goto LABEL_178;
            }
          }
          else
          {
            v207 = v199 - v206;
            if (!v207)
            {
              v207 = *(_DWORD *)&v143[164 * v195 + 4] - *(_DWORD *)&v143[164 * v204 + 4];
              if (!v207)
                v207 = *(_DWORD *)v196 - *(_DWORD *)v205;
            }
            if ((v207 & 0x80000000) == 0)
            {
              v208 = v200 - v206;
              if (v200 == v206)
              {
                v208 = *(_DWORD *)&v143[164 * v197 + 4] - *(_DWORD *)&v143[164 * v204 + 4];
                if (!v208)
                  v208 = *(_DWORD *)v198 - *(_DWORD *)v205;
              }
              if (v208 < 0)
                goto LABEL_191;
LABEL_199:
              *(_QWORD *)&v390[8 * v192] = v197;
LABEL_178:
              ++v192;
              v191 += 3 * v139 - 3;
              if (v194 != v192)
                continue;
              while (2)
              {
                v211 = 0;
                v212 = 0;
                v213 = v194;
                v194 /= 3uLL;
                if (v194 <= 1)
                  v214 = 1;
                else
                  v214 = v194;
                v215 = 8 * v214;
LABEL_208:
                v216 = *(_QWORD *)&v390[v211];
                v217 = *(_QWORD *)&v390[v211 + 8];
                v218 = *(_QWORD *)&v390[v211 + 16];
                v219 = &v143[164 * v216];
                v220 = &v143[164 * v217];
                v221 = *((_DWORD *)v219 + 40);
                v222 = *((_DWORD *)v220 + 40);
                v223 = v221 - v222;
                if (v221 == v222)
                {
                  v224 = *(_DWORD *)&v143[164 * v216 + 4];
                  v225 = *(_DWORD *)&v143[164 * v217 + 4];
                  v223 = v224 - v225;
                  if (v224 == v225)
                    v223 = *(_DWORD *)v219 - *(_DWORD *)v220;
                }
                v226 = &v143[164 * v218];
                v227 = *((_DWORD *)v226 + 40);
                if (v223 < 0)
                {
                  v230 = v222 - v227;
                  if (!v230)
                  {
                    v230 = *(_DWORD *)&v143[164 * v217 + 4] - *(_DWORD *)&v143[164 * v218 + 4];
                    if (!v230)
                      v230 = *(_DWORD *)v220 - *(_DWORD *)v226;
                  }
                  if (v230 < 0)
                    goto LABEL_228;
                  v231 = v221 - v227;
                  if (v221 == v227)
                  {
                    v231 = *(_DWORD *)&v143[164 * v216 + 4] - *(_DWORD *)&v143[164 * v218 + 4];
                    if (!v231)
                      v231 = *(_DWORD *)v219 - *(_DWORD *)v226;
                  }
                  if (v231 < 0)
                  {
LABEL_220:
                    *(_QWORD *)&v390[v212] = v218;
                    goto LABEL_207;
                  }
                }
                else
                {
                  v228 = v221 - v227;
                  if (!v228)
                  {
                    v228 = *(_DWORD *)&v143[164 * v216 + 4] - *(_DWORD *)&v143[164 * v218 + 4];
                    if (!v228)
                      v228 = *(_DWORD *)v219 - *(_DWORD *)v226;
                  }
                  if ((v228 & 0x80000000) == 0)
                  {
                    v229 = v222 - v227;
                    if (v222 == v227)
                    {
                      v229 = *(_DWORD *)&v143[164 * v217 + 4] - *(_DWORD *)&v143[164 * v218 + 4];
                      if (!v229)
                        v229 = *(_DWORD *)v220 - *(_DWORD *)v226;
                    }
                    if (v229 < 0)
                      goto LABEL_220;
LABEL_228:
                    *(_QWORD *)&v390[v212] = v217;
LABEL_207:
                    v212 += 8;
                    v211 += 24;
                    if (v215 == v212)
                    {
                      if (v213 < 9)
                      {
                        v179 = *(_QWORD *)v390;
                        goto LABEL_230;
                      }
                      continue;
                    }
                    goto LABEL_208;
                  }
                }
                break;
              }
              *(_QWORD *)&v390[v212] = v216;
              goto LABEL_207;
            }
          }
          break;
        }
        *(_QWORD *)&v390[8 * v192] = v195;
        goto LABEL_178;
      }
LABEL_260:
      free(v137);
      v352 = v387;
      if (v387 >= 1)
      {
        v353 = v138;
        do
        {
          *(_DWORD *)&v390[144] = *((_DWORD *)v353 + 38);
          v354 = *(_QWORD *)(v353 + 156);
          v355 = (uint64_t *)(*(_QWORD *)(v368 + 72 * v19 + 8) + 24 * SHIDWORD(v354));
          v356 = *(unsigned int *)v353;
          v357 = *((_DWORD *)v353 + 1);
          v358 = *(_OWORD *)(v353 + 120);
          *(_OWORD *)&v390[96] = *(_OWORD *)(v353 + 104);
          *(_OWORD *)&v390[112] = v358;
          *(_OWORD *)&v390[128] = *(_OWORD *)(v353 + 136);
          v359 = *(_OWORD *)(v353 + 56);
          *(_OWORD *)&v390[32] = *(_OWORD *)(v353 + 40);
          *(_OWORD *)&v390[48] = v359;
          v360 = *(_OWORD *)(v353 + 88);
          *(_OWORD *)&v390[64] = *(_OWORD *)(v353 + 72);
          *(_OWORD *)&v390[80] = v360;
          v361 = *(_OWORD *)(v353 + 24);
          *(_OWORD *)v390 = *(_OWORD *)(v353 + 8);
          *(_OWORD *)&v390[16] = v361;
          *(_QWORD *)&v392 = v354;
          sub_239640ED0(v356, v357, v355, (uint64_t)v390, v377, v366, v365, &v392, *(double *)v390, *(double *)&v361, v346, v347, v348, v349, v350, v351);
          v353 += 164;
          --v352;
        }
        while (v352);
      }
      free(v138);
      free(ptrb);
      ++v19;
      v20 = 0uLL;
      v21.i64[0] = 0x8000800080008000;
      v21.i64[1] = 0x8000800080008000;
      if (v19 == v364)
        return;
    }
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v372 = v26 + 24;
    v37 = vcvtms_s32_f32((float)((float)((float)(v24 * 0.5) / (float)v25) * 255.0) * 256.0);
    v38 = (int8x16_t)vdupq_n_s16(v37);
    v378 = (int16x8_t)v38;
    v374 = v33;
    v369 = v31;
    v370 = v26 + 32;
    v375 = v37;
LABEL_10:
    v39 = 0;
    v40 = *(_QWORD *)v27 + 24 * v34;
    v373 = v34 + 1;
    v41 = (uint64_t *)(v40 + 24);
    v379 = (uint64_t *)(v40 + 48);
    v380 = (uint64_t *)v40;
    v42 = (uint64_t *)(v40 + 40);
    v43 = *(_DWORD *)(v40 + 32);
    ptr = (int *)(v40 + 32);
    v44 = v23[7];
    v45 = v369;
    while (v44 + 9 > v43 - v44)
    {
      v46 = v44;
      if (v44 < v43 - v44)
        goto LABEL_101;
LABEL_11:
      if (++v45 == v374)
      {
        v120 = v387;
        if (v39 < 1)
        {
          v19 = v371;
          v34 = v373;
          v27 = v370;
          if (v373 >= v23[1])
            goto LABEL_137;
          goto LABEL_10;
        }
        v121 = v389;
        ptra = (char *)v388;
        v122 = v35 + 1;
        v19 = v371;
        do
        {
          while (1)
          {
            v123 = v35;
            v386 = 0;
            v124 = *(v122 - 1);
            v385 = 0;
            v386 = v124;
            v385 = *v122;
            *(float *)v38.i32 = (float)v124;
            *(_OWORD *)&v390[132] = v20;
            *(_OWORD *)&v390[104] = v20;
            *(_OWORD *)&v390[120] = v20;
            *(_OWORD *)&v390[72] = v20;
            *(_OWORD *)&v390[88] = v20;
            *(_OWORD *)&v390[40] = v20;
            *(_OWORD *)&v390[56] = v20;
            *(_OWORD *)&v390[8] = v20;
            *(_OWORD *)&v390[24] = v20;
            *(float *)v12.i32 = (float)v385;
            *(float *)v390 = (float)v124;
            *(float *)&v390[4] = (float)v385;
            v384 = 0;
            if (!sub_23963FC6C(v372, v377, v373, v19, (float *)v390, &v386, &v385, (int *)&v384, *(double *)v38.i64, *(double *)v12.i64, *(double *)v13.i64, *(double *)v14.i64, *(double *)v15.i64, *(double *)v16.i64, *(float *)v17.i32, *(float *)v18.i32))break;
            v20 = 0uLL;
            v35 = v123;
            v122 += 2;
            if (!--v39)
              goto LABEL_9;
          }
          v125 = v120;
          v127 = v385;
          v126 = v386;
          v398 = *(int8x16_t *)&v390[96];
          v399 = *(int16x8_t *)&v390[112];
          v400 = *(uint16x8_t *)&v390[128];
          v401 = *(_DWORD *)&v390[144];
          v394 = *(_OWORD *)&v390[32];
          v395 = *(_OWORD *)&v390[48];
          v396 = *(_OWORD *)&v390[64];
          v397 = *(_OWORD *)&v390[80];
          v392 = *(_OWORD *)v390;
          v393 = *(_OWORD *)&v390[16];
          v128 = v125 + 1;
          v129 = v384;
          if (v125 >= v121)
          {
            v131 = 2 * v121;
            if (!v121)
              v131 = 1;
            v130 = v125;
            if (v131 <= v125)
              v121 = v125 + 1;
            else
              v121 = v131;
            if (v121)
              ptra = (char *)malloc_type_realloc(ptra, 164 * v121, 0xA3F2D0A2uLL);
          }
          else
          {
            v130 = v125;
          }
          v132 = &ptra[164 * v130];
          *(_DWORD *)v132 = v126;
          *((_DWORD *)v132 + 1) = v127;
          v133 = v392;
          *(_OWORD *)(v132 + 24) = v393;
          *(_OWORD *)(v132 + 8) = v133;
          v134 = v394;
          v135 = v395;
          v136 = v396;
          v14.i64[0] = v397;
          *(_OWORD *)(v132 + 88) = v397;
          *(_OWORD *)(v132 + 72) = v136;
          *(_OWORD *)(v132 + 56) = v135;
          *(_OWORD *)(v132 + 40) = v134;
          v38 = v398;
          v12 = v399;
          v13 = v400;
          *((_DWORD *)v132 + 38) = v401;
          *(uint16x8_t *)(v132 + 136) = v13;
          *(int16x8_t *)(v132 + 120) = v12;
          *(int8x16_t *)(v132 + 104) = v38;
          *(_QWORD *)(v132 + 156) = v129;
          v120 = v128;
          v19 = v371;
          v20 = 0uLL;
          v35 = v123;
          v37 = v375;
          v122 += 2;
          --v39;
        }
        while (v39);
LABEL_9:
        v388 = (unsigned int *)ptra;
        v389 = v121;
        v23 = (int *)v377;
        v21.i64[0] = 0x8000800080008000;
        v21.i64[1] = 0x8000800080008000;
        v387 = v120;
        v34 = v373;
        v27 = v370;
        if (v373 >= *(int *)(v377 + 4))
          goto LABEL_137;
        goto LABEL_10;
      }
    }
    v47 = v45 - 1;
    v48 = v45 + 1;
    v49 = v44;
    do
    {
      v53 = *v41;
      v54 = *v42;
      v55 = *v42 * v45;
      v38 = *(int8x16_t *)(*v41 + 2 * (v55 + v49));
      v13.i64[0] = v378.i64[0];
      v12 = vcgtq_s16(vabsq_s16((int16x8_t)veorq_s8(v38, v21)), v378);
      if ((vmaxvq_u16((uint16x8_t)v12) & 0x8000) != 0)
      {
        v56 = *(uint16x8_t *)(v53 + 2 * (v54 * v47 + v49 - 1));
        v57 = *(uint16x8_t *)(v53 + 2 * (v54 * v47 + v49));
        v58 = *(uint16x8_t *)(v53 + 2 * (v54 * v47 + v49 + 1));
        v59 = v380[2];
        v60 = *(uint16x8_t *)(v53 + 2 * (v55 + v49 - 1));
        v61 = *(uint16x8_t *)(v53 + 2 * (v55 + v49 + 1));
        v62 = *(uint16x8_t *)(v53 + 2 * (v54 * v48 + v49 - 1));
        v63 = *(uint16x8_t *)(v53 + 2 * (v54 * v48 + v49));
        v64 = *(uint16x8_t *)(v53 + 2 * (v54 * v48 + v49 + 1));
        v65 = vmaxq_u16(v56, (uint16x8_t)v21);
        v66 = vminq_u16(vminq_u16(v56, (uint16x8_t)v21), v57);
        v67 = vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(v65, v57), v58), v60), v61), v62), v63);
        v68 = vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(v66, v58), v60), v61), v62), v63);
        v69 = *(uint16x8_t *)(*v380 + 2 * (v59 * v47 + v49 - 1));
        v70 = vmaxq_u16(v67, v64);
        v71 = *(uint16x8_t *)(*v380 + 2 * (v59 * v47 + v49));
        v72 = *(uint16x8_t *)(*v380 + 2 * (v59 * v47 + v49 + 1));
        v73 = *(uint16x8_t *)(*v380 + 2 * (v59 * v45 + v49 - 1));
        v74 = *(uint16x8_t *)(*v380 + 2 * (v59 * v45 + v49));
        v75 = vminq_u16(v68, v64);
        v76 = *(uint16x8_t *)(*v380 + 2 * (v59 * v45 + v49 + 1));
        v77 = *(uint16x8_t *)(*v380 + 2 * (v59 * v48 + v49 - 1));
        v78 = *(uint16x8_t *)(*v380 + 2 * (v59 * v48 + v49));
        v79 = *(uint16x8_t *)(*v380 + 2 * (v59 * v48 + v49 + 1));
        v80 = v379[2];
        v81 = vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(v70, v69), v71), v72), v73), v74), v76), v77), v78);
        v82 = vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(v75, v69), v71), v72), v73), v74), v76), v77), v78);
        v83 = *(uint16x8_t *)(*v379 + 2 * (v80 * v47 + v49 - 1));
        v15 = *(uint16x8_t *)(*v379 + 2 * (v80 * v47 + v49));
        v16 = *(uint16x8_t *)(*v379 + 2 * (v80 * v47 + v49 + 1));
        v84 = vmaxq_u16(v81, v79);
        v17 = *(uint16x8_t *)(*v379 + 2 * (v80 * v45 + v49 - 1));
        v85 = vminq_u16(v82, v79);
        v18 = *(uint16x8_t *)(*v379 + 2 * (v80 * v45 + v49));
        v86 = *(uint16x8_t *)(*v379 + 2 * (v80 * v45 + v49 + 1));
        v87 = v80 * v48;
        v88 = *(uint16x8_t *)(*v379 + 2 * (v87 + v49 - 1));
        v89 = *(uint16x8_t *)(*v379 + 2 * (v87 + v49));
        v90 = *(uint16x8_t *)(*v379 + 2 * (v87 + v49 + 1));
        v91 = vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(vminq_u16(v85, v83), v15), v16), v17), v18), v86), v88), v89), v90);
        v92 = (int8x16_t)vcgtq_u16((uint16x8_t)v38, vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(vmaxq_u16(v84, v83), v15), v16), v17), v18), v86), v88), v89), v90));
        v14.i64[0] = 0x1000100010001;
        v14.i64[1] = 0x1000100010001;
        v13 = (uint16x8_t)vandq_s8(v92, v14);
        v12 = (int16x8_t)vmaxq_u16((uint16x8_t)vandq_s8((int8x16_t)vcgtq_u16(v91, (uint16x8_t)v38), v14), v13);
        v38 = (int8x16_t)vtstq_s16(v12, v12);
        if ((vmaxvq_u16((uint16x8_t)v38) & 0x8000) != 0)
        {
          v376 = v12;
          if (v12.i16[0])
          {
            if (v39 >= v36)
            {
              v93 = 2 * v36;
              if (!v36)
                v93 = 32;
              if (v93 <= v39)
                v36 = v39 + 1;
              else
                v36 = v93;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v94 = &v35[2 * v39];
            *v94 = v49;
            v94[1] = v45;
            ++v39;
          }
          if (v12.i16[1])
          {
            if (v39 >= v36)
            {
              v95 = 2 * v36;
              if (!v36)
                v95 = 32;
              if (v95 <= v39)
                v36 = v39 + 1;
              else
                v36 = v95;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v96 = &v35[2 * v39];
            *v96 = v49 + 1;
            v96[1] = v45;
            ++v39;
          }
          if (v12.i16[2])
          {
            if (v39 >= v36)
            {
              v97 = 2 * v36;
              if (!v36)
                v97 = 32;
              if (v97 <= v39)
                v36 = v39 + 1;
              else
                v36 = v97;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v98 = &v35[2 * v39];
            *v98 = v49 + 2;
            v98[1] = v45;
            ++v39;
          }
          if (v12.i16[3])
          {
            if (v39 >= v36)
            {
              v99 = 2 * v36;
              if (!v36)
                v99 = 32;
              if (v99 <= v39)
                v36 = v39 + 1;
              else
                v36 = v99;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v100 = &v35[2 * v39];
            *v100 = v49 + 3;
            v100[1] = v45;
            ++v39;
          }
          if (v12.i16[4])
          {
            if (v39 >= v36)
            {
              v101 = 2 * v36;
              if (!v36)
                v101 = 32;
              if (v101 <= v39)
                v36 = v39 + 1;
              else
                v36 = v101;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v102 = &v35[2 * v39];
            *v102 = v49 + 4;
            v102[1] = v45;
            ++v39;
          }
          if (v12.i16[5])
          {
            if (v39 >= v36)
            {
              v103 = 2 * v36;
              if (!v36)
                v103 = 32;
              if (v103 <= v39)
                v36 = v39 + 1;
              else
                v36 = v103;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v104 = &v35[2 * v39];
            *v104 = v49 + 5;
            v104[1] = v45;
            ++v39;
          }
          if (v12.i16[6])
          {
            if (v39 >= v36)
            {
              v105 = 2 * v36;
              if (!v36)
                v105 = 32;
              if (v105 <= v39)
                v36 = v39 + 1;
              else
                v36 = v105;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v12 = v376;
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v106 = &v35[2 * v39];
            *v106 = v49 + 6;
            v106[1] = v45;
            ++v39;
          }
          if (v12.i16[7])
          {
            if (v39 >= v36)
            {
              v107 = 2 * v36;
              if (!v36)
                v107 = 32;
              if (v107 <= v39)
                v36 = v39 + 1;
              else
                v36 = v107;
              if (v36)
              {
                v35 = (int *)malloc_type_realloc(v35, 8 * v36, 0x9E2EFB17uLL);
                v21.i64[0] = 0x8000800080008000;
                v21.i64[1] = 0x8000800080008000;
                v20 = 0uLL;
                v23 = (int *)v377;
              }
            }
            v50 = &v35[2 * v39];
            *v50 = v49 + 7;
            v50[1] = v45;
            ++v39;
          }
        }
      }
      v46 = v49 + 8;
      v43 = *ptr;
      v44 = v23[7];
      v51 = *ptr - v44;
      v52 = v49 + 17 <= v51;
      v49 += 8;
    }
    while (v52);
    v37 = v375;
    if (v46 >= v51)
      goto LABEL_11;
LABEL_101:
    v108 = v46;
    do
    {
      v109 = *v41;
      v110 = *v42;
      v111 = *(unsigned __int16 *)(*v41 + 2 * (v108 + *v42 * v45));
      v112 = (__int16)v111;
      v113 = v111 - 0x8000;
      v114 = 0x8000 - v111;
      if (v112 < 0)
        v114 = v113;
      if (v114 >= v37)
      {
        v115 = v42;
        v116 = v41;
        v117 = v35;
        if (sub_23963F854(v380, v109, v110, v379, v108, v45))
        {
          if (v39 >= v36)
          {
            v118 = 2 * v36;
            if (!v36)
              v118 = 32;
            if (v118 <= v39)
              v36 = v39 + 1;
            else
              v36 = v118;
            v35 = v117;
            if (v36)
              v35 = (int *)malloc_type_realloc(v117, 8 * v36, 0x5492B0CEuLL);
          }
          else
          {
            v35 = v117;
          }
          v41 = v116;
          v119 = &v35[2 * v39];
          *v119 = v108;
          v119[1] = v45;
          v43 = *ptr;
          v23 = (int *)v377;
          v44 = *(_DWORD *)(v377 + 28);
          ++v39;
          v20 = 0uLL;
          v21.i64[0] = 0x8000800080008000;
          v21.i64[1] = 0x8000800080008000;
          v37 = v375;
        }
        else
        {
          v23 = (int *)v377;
          v20 = 0uLL;
          v21.i64[0] = 0x8000800080008000;
          v21.i64[1] = 0x8000800080008000;
          v35 = v117;
          v41 = v116;
        }
        v42 = v115;
      }
      ++v108;
    }
    while (v108 < v43 - v44);
    goto LABEL_11;
  }
}

void sub_239643098(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1138, a4);
}

void sub_2396430A0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1087, a4);
}

void sub_2396430A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2396430A0("create_pyr", "AccelerateCV.c", a3, "(dog)->y_size == ((&((&octave->gauss_pyr)->items[layer])))->y_size");
}

void sub_2396430CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2396430A0("create_pyr", "AccelerateCV.c", a3, "(dog)->x_size == ((&((&octave->gauss_pyr)->items[layer])))->x_size");
}

void sub_2396430F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2396430A0("create_pyr", "AccelerateCV.c", a3, "(dog)->y_size == ((&((&octave->gauss_pyr)->items[layer+1])))->y_size");
}

void sub_239643114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2396430A0("create_pyr", "AccelerateCV.c", a3, "(dog)->x_size == ((&((&octave->gauss_pyr)->items[layer+1])))->x_size");
}

void sub_239643138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_239643098("create_pyr2", "AccelerateCV.c", a3, "(dog)->y_size == ((&((&octave->gauss_pyr)->items[layer])))->y_size");
}

void sub_23964315C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_239643098("create_pyr2", "AccelerateCV.c", a3, "(dog)->x_size == ((&((&octave->gauss_pyr)->items[layer])))->x_size");
}

void sub_239643180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_239643098("create_pyr2", "AccelerateCV.c", a3, "(dog)->y_size == ((&((&octave->gauss_pyr)->items[layer+1])))->y_size");
}

void sub_2396431A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_239643098("create_pyr2", "AccelerateCV.c", a3, "(dog)->x_size == ((&((&octave->gauss_pyr)->items[layer+1])))->x_size");
}

void sub_2396431C8(__int128 *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, std::string *a4@<X8>)
{
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  size_t v13;
  const void *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int64x2_t v21;
  double v22;
  int8x16_t v23;
  const void *__dst[2];
  unint64_t v25;
  void *__p[2];
  char v27;
  char v28;

  sub_23962ECE8((uint64_t)__p);
  if (!v28)
  {
    a4->__r_.__value_.__s.__data_[0] = 0;
    a4[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if (v27 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  v9 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8));
  v10 = v9;
  if (!v9)
  {
    sub_239A444D4((uint64_t)"unknown file", 94, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (!objc_msgSend(v9, "bundlePath"))
  {
    sub_239A444D4((uint64_t)"unknown file", 96, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v11 = (void *)objc_msgSend(v10, "resourcePath");
  if (!v11)
  {
    sub_239A444D4((uint64_t)"unknown file", 98, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v12 = (const char *)objc_msgSend(v11, "UTF8String");
  v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v14 = (const void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (const void **)operator new(v16 + 1);
    __dst[1] = v14;
    v25 = v17 | 0x8000000000000000;
    __dst[0] = v15;
  }
  else
  {
    HIBYTE(v25) = v13;
    v15 = __dst;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v15, v12, (size_t)v14);
LABEL_17:
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  sub_239643418(__dst);
  sub_239643564(a4, (uint64_t)__dst, a1, a2, a3, v18, v19, v20, v21, v22, v23);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__dst[0]);
  if (v28)
  {
    if (v27 < 0)
      operator delete(__p[0]);
  }
}

void sub_2396433D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_239643418(const void **a1)
{
  int v1;
  size_t v2;
  unint64_t v3;
  std::__fs::filesystem::path *p_dst;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v10;

  v1 = *((char *)a1 + 23);
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (size_t)a1[1];
  v3 = v2 + 10;
  if (v2 + 10 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v6 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v2 + 10;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v2 + 10;
    if (!v2)
      goto LABEL_15;
  }
  if (v1 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  memmove(p_dst, v8, v2);
LABEL_15:
  strcpy((char *)p_dst + v2, "/.disabled");
  v10 = __dst;
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
}

void sub_239643548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_239643564(std::string *a1, uint64_t a2, __int128 *a3, _QWORD *a4, char a5, double a6, double a7, double a8, int64x2_t a9, double a10, int8x16_t a11)
{
  std::string::size_type size;
  std::string *v16;
  double result;
  unsigned __int8 v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  _QWORD *v23;
  void *__p;
  char v25;
  std::string v26;
  std::__fs::filesystem::path __dst;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    sub_23941A7F8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::__fs::filesystem::path *)a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_23941A7F8(&v28, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v28 = *a3;
    v29 = *((_QWORD *)a3 + 2);
  }
  v25 = 1;
  LOWORD(__p) = 47;
  sub_239583A20((uint64_t)&__dst, (uint64_t)v30, (uint64_t)&__p, &v26, a9, a11);
  if ((v25 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_19:
    operator delete((void *)v28);
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
  operator delete(__p);
  if (SHIBYTE(v29) < 0)
    goto LABEL_19;
LABEL_9:
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_20:
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
LABEL_10:
  memset(&__dst, 0, sizeof(__dst));
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v26;
  else
    v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  sub_23948900C(&__dst.__pn_, v16, (std::string *)((char *)v16 + size));
  std::__fs::filesystem::__status(&__dst, 0);
  v18 = __p;
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    v19 = v18;
    if (!v18)
      goto LABEL_23;
  }
  else
  {
    v19 = __p;
    if (!(_BYTE)__p)
      goto LABEL_23;
  }
  if (v19 != 255)
  {
    result = *(double *)&v26.__r_.__value_.__l.__data_;
    *a1 = v26;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    return result;
  }
LABEL_23:
  if (a5)
  {
    v20 = sub_239458500(a4, (uint64_t)"Resource at '", 13);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v26;
    else
      v21 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      v22 = v26.__r_.__value_.__l.__size_;
    v23 = sub_239458500(v20, (uint64_t)v21, v22);
    sub_239458500(v23, (uint64_t)"' does not exist.", 17);
  }
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return result;
}

void sub_23964377C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239643810(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  std::locale::__imp *p_dst;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  int64x2_t v30;
  double v31;
  int8x16_t v32;
  std::locale __dst;
  size_t v34;
  unint64_t v35;

  if (*(char *)(a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = *(_QWORD *)a1;
  v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", v11);
  if (v12)
  {
    v13 = (void *)objc_msgSend(v12, "resourcePath");
    if (!v13)
      sub_239EC1150();
    v14 = (const char *)objc_msgSend(v13, "UTF8String");
    v15 = strlen(v14);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v25 = v15 | 7;
      v26 = v25 + 1;
      p_dst = (std::locale::__imp *)operator new(v25 + 1);
      v34 = v16;
      v35 = v26 | 0x8000000000000000;
      __dst.__locale_ = p_dst;
    }
    else
    {
      HIBYTE(v35) = v15;
      p_dst = (std::locale::__imp *)&__dst;
      if (!v15)
      {
LABEL_23:
        *((_BYTE *)p_dst + v16) = 0;
        sub_239643418((const void **)&__dst.__locale_);
        sub_239643564(a5, (uint64_t)&__dst, a2, a3, a4, v27, v28, v29, v30, v31, v32);
        if (SHIBYTE(v35) < 0)
          operator delete(__dst.__locale_);
        return;
      }
    }
    memmove(p_dst, v14, v16);
    goto LABEL_23;
  }
  if (a4)
  {
    v18 = sub_239458500(a3, (uint64_t)"Could not find bundle '", 23);
    v19 = *(char *)(a1 + 23);
    if (v19 >= 0)
      v20 = a1;
    else
      v20 = *(_QWORD *)a1;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a1 + 23);
    else
      v21 = *(_QWORD *)(a1 + 8);
    v22 = sub_239458500(v18, v20, v21);
    v23 = sub_239458500(v22, (uint64_t)"'.", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
    v24 = std::locale::use_facet(&__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(&__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  a5->__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
}

void sub_2396439F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_239643A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_239643A24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239643A8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239643AF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_239643B5C(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _DWORD *a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((_BYTE *)a4 + 20))
  {
    v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    v9 = *(_DWORD *)a3;
    v10 = *((_DWORD *)a3 + 1);
    if (v10)
      v11 = *(_DWORD *)a3;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    v12 = v10 * v9;
    v13 = *((_DWORD *)a3 + 2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(_QWORD *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a6 + 56))
  {
    *(_QWORD *)(a1 + 56) = &off_250ADB1D0;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(std::__shared_weak_count **)(a6 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    else
    {
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
    }
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    v24 = *(_QWORD *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = v21;
    *(_WORD *)(a1 + 108) = v22;
    if (v17)
    {
      v25 = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

double sub_239643CCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239643D34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239643D9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_239643E04(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _DWORD *a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((_BYTE *)a4 + 20))
  {
    v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    v9 = *(_DWORD *)a3;
    v10 = *((_DWORD *)a3 + 1);
    if (v10)
      v11 = *(_DWORD *)a3;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    v12 = v10 * v9;
    v13 = *((_DWORD *)a3 + 2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(_QWORD *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a6 + 56))
  {
    *(_QWORD *)(a1 + 56) = &off_250ADB210;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(std::__shared_weak_count **)(a6 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    else
    {
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
    }
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    v24 = *(_QWORD *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = v21;
    *(_WORD *)(a1 + 108) = v22;
    if (v17)
    {
      v25 = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

double sub_239643F74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239643FDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239644044(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_2396440AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_239644114(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_23964417C(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, int *a5, uint64_t a6)
{
  char v10;
  unsigned int v12;
  char v13;
  unsigned int v15;
  __int128 v16;
  char v17;
  int v18;
  __int128 v19;
  int v20;

  v18 = 1;
  v19 = *a3;
  v20 = *a5;
  v10 = *((_BYTE *)a4 + 16);
  if (v10)
  {
    v12 = sub_23964FBE8(&v20) >> 2;
    if (!v13)
      v12 = 1;
    v15 = v12;
    v16 = *a4;
    v10 = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  v17 = v10;
  return sub_239643E04(a1, a2, (__int128 *)&v18, (__int128 *)&v15, a5, a6);
}

uint64_t sub_23964422C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  BOOL v36;
  unint64_t v37;
  unint64_t *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t *v41;
  BOOL v42;
  unint64_t v43;
  unint64_t *v44;
  BOOL v45;
  unint64_t v46;
  unint64_t *v47;
  BOOL v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t (**v52)();
  _BYTE v53[4];
  _QWORD v54[2];
  uint64_t v55;
  int v56;
  int v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v5 = a2;
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x10) != 0)
  {
    v19 = sub_23949BB44(a1, a2, (uint64_t)&v52);
    v21 = v54[0];
    if (LODWORD(v54[0]))
      v22 = HIDWORD(v54[0]) == 0;
    else
      v22 = 1;
    if (v22)
      v21 = 0;
    v58 = (char *)v52 + (v56 * v5 + v57 * a3);
    v59 = v21;
    v60 = v55;
    if (HIDWORD(v21) * HIDWORD(v55) == -1)
      sub_239EBFBC4(v19, v20);
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0x10:
      case 0x11:
        v62 = (uint64_t)v52 + (v56 * v5 + v57 * a3);
        v52 = &off_250ADB350;
        if (HIDWORD(v21))
          v23 = (_DWORD)v21 == 0;
        else
          v23 = 1;
        v24 = v55 & 0xFFFFFFFF00000000;
        if (v23)
          v24 = 0;
        v61 = v24 | ((_DWORD)v21 != 0);
        sub_239646100(&v62, &v59, (uint64_t *)&v61, (uint64_t)v53);
        *a4 = &off_250ADB210;
        sub_239417068((uint64_t)&v52, (uint64_t)(a4 + 1));
        v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
        if (!*(_QWORD *)((char *)v54 + 4))
          return nullsub_4(&v52);
        v25 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
        do
          v18 = __ldaxr(v25);
        while (__stlxr(v18 - 1, v25));
        break;
      case 0x12:
        v62 = (uint64_t)v52 + (v56 * v5 + v57 * a3);
        v52 = &off_250ADB390;
        if (HIDWORD(v21))
          v39 = (_DWORD)v21 == 0;
        else
          v39 = 1;
        v40 = v55 & 0xFFFFFFFF00000000;
        if (v39)
          v40 = 0;
        v61 = v40 | (2 * ((_DWORD)v21 != 0));
        sub_2396461F4(&v62, &v59, &v61, (uint64_t)v53);
        *a4 = &off_250ADB210;
        sub_23964634C((uint64_t)&v52, (uint64_t)(a4 + 1));
        v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
        if (!*(_QWORD *)((char *)v54 + 4))
          return nullsub_4(&v52);
        v41 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
        do
          v18 = __ldaxr(v41);
        while (__stlxr(v18 - 1, v41));
        break;
      case 0x14:
        v62 = (uint64_t)v52 + (v56 * v5 + v57 * a3);
        v52 = &off_250AE1B60;
        if (HIDWORD(v21))
          v42 = (_DWORD)v21 == 0;
        else
          v42 = 1;
        v43 = v55 & 0xFFFFFFFF00000000;
        if (v42)
          v43 = 0;
        v61 = v43 | (4 * ((_DWORD)v21 != 0));
        sub_239645C0C(&v62, &v59, &v61, (uint64_t)v53);
        *a4 = &off_250ADB210;
        sub_239645FA4((uint64_t)&v52, (uint64_t)(a4 + 1));
        v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
        if (!*(_QWORD *)((char *)v54 + 4))
          return nullsub_4(&v52);
        v44 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
        do
          v18 = __ldaxr(v44);
        while (__stlxr(v18 - 1, v44));
        break;
      case 0x18:
        v62 = (uint64_t)v52 + (v56 * v5 + v57 * a3);
        v52 = &off_250AE1A68;
        if (HIDWORD(v21))
          v45 = (_DWORD)v21 == 0;
        else
          v45 = 1;
        v46 = v55 & 0xFFFFFFFF00000000;
        if (v45)
          v46 = 0;
        v61 = v46 | (4 * ((_DWORD)v21 != 0));
        sub_239645718(&v62, &v59, &v61, (uint64_t)v53);
        *a4 = &off_250ADB210;
        sub_239645AB0((uint64_t)&v52, (uint64_t)(a4 + 1));
        v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
        if (!*(_QWORD *)((char *)v54 + 4))
          return nullsub_4(&v52);
        v47 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
        do
          v18 = __ldaxr(v47);
        while (__stlxr(v18 - 1, v47));
        break;
      default:
        sub_239EC1204(v19, (uint64_t)&v59);
    }
    goto LABEL_99;
  }
  if ((v8 & 0x20) != 0)
  {
    v26 = sub_23964792C(a1, a2, (uint64_t)&v52);
    if (LODWORD(v54[0]))
      v28 = HIDWORD(v54[0]) == 0;
    else
      v28 = 1;
    if (v28)
      v29 = 0;
    else
      v29 = v54[0];
    v30 = HIDWORD(v29);
    v58 = (char *)v52 + 2 * (v56 * v5 + v57 * a3);
    v59 = v29;
    v60 = v55;
    if (HIDWORD(v29) * HIDWORD(v55) == -1)
      sub_239EBFBC4(v26, v27);
    if ((*(_DWORD *)(a1 + 48) & 0xFFFFFFFE) != 0x20)
      sub_239EC11D8((uint64_t)&v58, v27);
    v62 = (uint64_t)v52 + 2 * (v56 * v5 + v57 * a3);
    v52 = &off_250AE1C58;
    v31 = v29;
    v32 = v29 != 0;
    if ((_DWORD)v30)
      v33 = v31 == 0;
    else
      v33 = 1;
    v34 = v55 & 0xFFFFFFFF00000000;
    if (v33)
      v34 = 0;
    v61 = v34 | v32;
    sub_2396464A8(&v62, &v59, (uint64_t *)&v61, (uint64_t)v53);
    *a4 = &off_250ADB210;
    sub_2396467DC((uint64_t)&v52, (uint64_t)(a4 + 1));
    v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
    if (!*(_QWORD *)((char *)v54 + 4))
      return nullsub_4(&v52);
    v35 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
    do
      v18 = __ldaxr(v35);
    while (__stlxr(v18 - 1, v35));
LABEL_99:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return nullsub_4(&v52);
  }
  if ((v8 & 0x40) == 0)
    sub_239EC1180(a1, a2);
  v9 = sub_239647A8C(a1, a2, (uint64_t)&v52);
  v11 = v54[0];
  if (LODWORD(v54[0]))
    v12 = HIDWORD(v54[0]) == 0;
  else
    v12 = 1;
  if (v12)
    v11 = 0;
  v58 = (char *)v52 + 4 * (v56 * v5 + v57 * a3);
  v59 = v11;
  v60 = v55;
  if (HIDWORD(v11) * HIDWORD(v55) == -1)
    sub_239EBFBC4(v9, v10);
  v13 = *(_DWORD *)(a1 + 48);
  if ((v13 - 64) < 2)
  {
    v62 = (uint64_t)v52 + 4 * (v56 * v5 + v57 * a3);
    v52 = &off_250ADED08;
    if (HIDWORD(v11))
      v36 = (_DWORD)v11 == 0;
    else
      v36 = 1;
    v37 = v55 & 0xFFFFFFFF00000000;
    if (v36)
      v37 = 0;
    v61 = v37 | ((_DWORD)v11 != 0);
    sub_239581874(&v62, &v59, (uint64_t *)&v61, (uint64_t)v53);
    *a4 = &off_250ADB210;
    sub_239581BA8((uint64_t)&v52, (uint64_t)(a4 + 1));
    v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
    if (!*(_QWORD *)((char *)v54 + 4))
      return nullsub_4(&v52);
    v38 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
    do
      v18 = __ldaxr(v38);
    while (__stlxr(v18 - 1, v38));
    goto LABEL_99;
  }
  if (v13 == 68)
  {
    v62 = (uint64_t)v52 + 4 * (v56 * v5 + v57 * a3);
    v52 = &off_250AE2130;
    if (HIDWORD(v11))
      v48 = (_DWORD)v11 == 0;
    else
      v48 = 1;
    v49 = v55 & 0xFFFFFFFF00000000;
    if (v48)
      v49 = 0;
    v61 = v49 | (4 * ((_DWORD)v11 != 0));
    sub_2396472DC(&v62, &v59, &v61, (uint64_t)v53);
    *a4 = &off_250ADB210;
    sub_239647674((uint64_t)&v52, (uint64_t)(a4 + 1));
    v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
    if (!*(_QWORD *)((char *)v54 + 4))
      return nullsub_4(&v52);
    v50 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
    do
      v18 = __ldaxr(v50);
    while (__stlxr(v18 - 1, v50));
    goto LABEL_99;
  }
  if (v13 != 72)
    sub_239EC11AC((uint64_t)&v58, (uint64_t)&v59);
  v62 = (uint64_t)v52 + 4 * (v56 * v5 + v57 * a3);
  v52 = &off_250AE2038;
  if (HIDWORD(v11))
    v14 = (_DWORD)v11 == 0;
  else
    v14 = 1;
  v15 = v55 & 0xFFFFFFFF00000000;
  if (v14)
    v15 = 0;
  v61 = v15 | (4 * ((_DWORD)v11 != 0));
  sub_239646DE8(&v62, &v59, &v61, (uint64_t)v53);
  *a4 = &off_250ADB210;
  sub_239647180((uint64_t)&v52, (uint64_t)(a4 + 1));
  v16 = *(std::__shared_weak_count **)((char *)v54 + 4);
  if (*(_QWORD *)((char *)v54 + 4))
  {
    v17 = (unint64_t *)(*(_QWORD *)((char *)v54 + 4) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    goto LABEL_99;
  }
  return nullsub_4(&v52);
}

void sub_239644804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239644114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239644820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239644834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_2396440AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239644850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239644864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239643CCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239644880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239644894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239643D34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396448B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_2396448C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239418EBC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396448E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_2396448F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_23957E154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239644910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239644924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_2394176A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239644940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239644954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239643D9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239644970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_239644984(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (*(_QWORD *)(a1 + 40))
    return *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 112))
    sub_239EBF008(a1, a2);
  sub_2398ADA6C(a1 + 56, v16);
  sub_23979D0F0((uint64_t)v16, &v17);
  v5 = v17;
  v4 = v18;
  if (!v18)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v5)
    {
LABEL_9:
      v8 = sub_2399108CC((uint64_t)v16, 0);
      sub_2399107E4(v16);
      return v8;
    }
  }
  sub_2399107E4(v16);
  v9 = sub_2398AD998(a1 + 56);
  if (v9)
    sub_239EC1230(v9, v10);
  if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
  {
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(std::__shared_weak_count **)(a1 + 72);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "unknown location");
  }
  return *(_QWORD *)(a1 + 96);
}

void sub_239644AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2399107E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_239644B14(_DWORD *result, int a2, int a3, int a4, int a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

_DWORD *sub_239644B20(_DWORD *result, int a2, int a3, int a4, int a5, int a6)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

BOOL sub_239644B30(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL4 v4;
  BOOL v5;
  int v6;
  int v7;
  _BOOL8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = a1[3];
  v2 = a1[4];
  v4 = v2 < 2 && v1 < 2;
  if (!v4)
  {
    v5 = 0;
    v6 = a1[6];
    if (v6)
      goto LABEL_9;
    return 0;
  }
  v5 = a1[2] < 2u;
  v6 = a1[6];
  if (!v6)
    return 0;
LABEL_9:
  v7 = a1[1];
  v8 = v7 != 0;
  if (!v7)
    v5 = 1;
  if (!v5)
  {
    v9 = a1[7];
    v8 = v9 >= v7 * v6;
    if (v9 < v7 * v6)
      LOBYTE(v4) = 1;
    if (!v4)
    {
      v10 = a1[2] * v9;
      v11 = a1[8];
      v8 = v11 >= v10;
      if (v2 >= 2 && v11 >= v10)
        return a1[9] >= v11 * v1;
    }
  }
  return v8;
}

BOOL sub_239644BD8(_DWORD *a1, int a2)
{
  int *v4;
  _BOOL8 result;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;

  v4 = a1 + 10;
  result = sub_23964FB60(a1 + 10);
  if (!result)
    return result;
  v6 = sub_23964FBB0(v4);
  v8 = v7;
  v9 = sub_23964FBE8(v4);
  if (a2 == 16)
  {
    if (v8)
      v11 = v6;
    else
      v11 = 1;
    if (v10)
      v12 = v9;
    else
      v12 = 1;
    v6 = v12 * v11;
  }
  else
  {
    if ((*v4 & 0x70) != 0)
    {
      result = 0;
      if ((*v4 & 0x10) != 0 || (*v4 & 0x70) != a2)
        return result;
    }
    if (!v8)
    {
      v13 = a1 + 6;
      v6 = 1;
      return v6 <= *v13;
    }
  }
  v13 = a1 + 6;
  if (v6 == 1)
    return v6 <= *v13;
  v14 = a1[4];
  v15 = a1[6] % v6;
  if (v14 > 1 || a1[3] > 1u)
  {
    if (!v15 && !(a1[7] % v6) && !(a1[8] % v6) && (v14 < 2 || !(a1[9] % v6)))
      return v6 <= *v13;
  }
  else if (!v15 && (a1[2] <= 1u || !(a1[7] % v6)))
  {
    return v6 <= *v13;
  }
  return 0;
}

void sub_239644D34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239644DA0()
{
  return 29;
}

uint64_t sub_239644DA8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239644DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_239644DCC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239644E50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239644EBC()
{
  return 25;
}

uint64_t sub_239644EC4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239644ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_239644EE8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239644F6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 2, a1 + 32, 2, a1 + 40, 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 1;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2396450B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396450C8(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 2;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239645220(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23964520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239645220(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_23964532C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239645344(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 5;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_23964548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396454A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int32x4_t v14;

  if ((*(_BYTE *)(result + 48) & 0x20) == 0)
    sub_239EC125C(result, a2);
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v5 + 88))(v5, 1, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = *(_DWORD *)(v4 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v13 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v13 = 0;
    v14 = 0uLL;
  }
  else
  {
    v14 = *(int32x4_t *)v4;
  }
  *(_OWORD *)(a3 + 28) = *(_OWORD *)(v4 + 20);
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 24) = v13;
  *(_DWORD *)(a3 + 44) = v12;
  if (v13 * v12 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

void sub_2396455FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239645668()
{
  return 3;
}

uint64_t sub_239645670(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_239645678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_239645694(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239645718(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23964598C(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23964585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239645870(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2396458DC()
{
  return 29;
}

uint64_t sub_2396458E4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2396458EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_239645908(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_23964598C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_239645A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239645AB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 29;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239645BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239645C0C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239645E80(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_239645D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239645D64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239645DD0()
{
  return 25;
}

uint64_t sub_239645DD8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239645DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_239645DFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_239645E80(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_239645F8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239645FA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 25;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2396460EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239646100(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  if (a2[1])
    v4 = *a2 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a2;
  if (v4)
    v5 = 0;
  v6 = *a3;
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  if (HIDWORD(v5) * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239418C7C(a4, &v12, &v10);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2396461E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396461F4(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 2;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239419040(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_239646338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964634C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 5;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239646494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396464A8(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  if (a2[1])
    v4 = *a2 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a2;
  if (v4)
    v5 = 0;
  v6 = *a3;
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  if (HIDWORD(v5) * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_2396466B8(a4, &v12, &v10);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_239646588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964659C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239646608()
{
  return 3;
}

uint64_t sub_239646610(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_239646618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_239646634(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2396466B8(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_2396467C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_2396467DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 2, a1 + 32, 2, a1 + 40, 2);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 3;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239646924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239646938@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int32x4_t v14;

  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
    sub_239EC1288(result, a2);
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v5 + 88))(v5, 1, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = *(_DWORD *)(v4 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v13 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v13 = 0;
    v14 = 0uLL;
  }
  else
  {
    v14 = *(int32x4_t *)v4;
  }
  *(_OWORD *)(a3 + 28) = *(_OWORD *)(v4 + 20);
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 24) = v13;
  *(_DWORD *)(a3 + 44) = v12;
  if (v13 * v12 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

void sub_239646A94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239646B00()
{
  return 32;
}

uint64_t sub_239646B08(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239646B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_239646B2C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239646BB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239646C1C()
{
  return 28;
}

uint64_t sub_239646C24(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239646C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_239646C48(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239646CCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239646D38()
{
  return 4;
}

uint64_t sub_239646D40(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_239646D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_239646D64(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239646DE8(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23964705C(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_239646F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239646F40(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239646FAC()
{
  return 32;
}

uint64_t sub_239646FB4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239646FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_239646FD8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_23964705C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_239647168(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239647180(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 4);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 32;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2396472C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396472DC(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 4;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239647550(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_239647420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239647434(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2396474A0()
{
  return 28;
}

uint64_t sub_2396474A8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2396474B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_2396474CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_239647550(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_23964765C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239647674(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 3, a1 + 32, 3, a1 + 44, 4);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 72);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 28;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2396477BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396477D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int32x4_t v14;

  if ((*(_BYTE *)(result + 48) & 0x10) == 0)
    sub_239EC12B4(result, a2);
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v5 + 88))(v5, 1, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = *(_DWORD *)(v4 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v13 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v13 = 0;
    v14 = 0uLL;
  }
  else
  {
    v14 = *(int32x4_t *)v4;
  }
  *(_OWORD *)(a3 + 28) = *(_OWORD *)(v4 + 20);
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 24) = v13;
  *(_DWORD *)(a3 + 44) = v12;
  if (v13 * v12 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

uint64_t sub_23964792C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint32x4_t v12;
  int v13;
  int v14;
  int32x4_t v15;

  if ((*(_BYTE *)(result + 48) & 0x20) == 0)
    sub_239EC125C(result, a2);
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v5 + 88))(v5, 0, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = vshrq_n_u32(*(uint32x4_t *)(v4 + 20), 1uLL);
  v13 = *(_DWORD *)(v4 + 36) >> 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v14 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v14 = 0;
    v15 = 0uLL;
  }
  else
  {
    v15 = *(int32x4_t *)v4;
  }
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v15;
  *(_DWORD *)(a3 + 24) = v14;
  *(uint32x4_t *)(a3 + 28) = v12;
  *(_DWORD *)(a3 + 44) = v13;
  if (v14 * v13 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

uint64_t sub_239647A8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint32x4_t v12;
  int v13;
  int v14;
  int32x4_t v15;

  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
    sub_239EC1288(result, a2);
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v5 + 88))(v5, 0, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = vshrq_n_u32(*(uint32x4_t *)(v4 + 20), 2uLL);
  v13 = *(_DWORD *)(v4 + 36) >> 2;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v14 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v14 = 0;
    v15 = 0uLL;
  }
  else
  {
    v15 = *(int32x4_t *)v4;
  }
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v15;
  *(_DWORD *)(a3 + 24) = v14;
  *(uint32x4_t *)(a3 + 28) = v12;
  *(_DWORD *)(a3 + 44) = v13;
  if (v14 * v13 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

void sub_239647BEC(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int64x2_t v4;
  int8x16_t v5;
  char *v6;
  void **v7;
  void *v8;
  void *__p;
  char *v10;
  uint64_t v11;
  std::string v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::to_string(&v12, *a1);
  v3 = sub_23941ACDC(&__p, (uint64_t)&v12);
  v10 = v3;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v3 = v10;
  }
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = (void **)v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_239647CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_239647D20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 730, a3, a4);
}

void sub_239647D28(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 179, a3, a4);
}

void sub_239647D30(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 138, a3, a4);
}

void sub_239647D38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 148, a3, a4);
}

void sub_239647D40(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 162, a3, a4);
}

void sub_239647D48(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 164, a3, a4);
}

void sub_239647D50(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 724, a3, a4);
}

void sub_239647D58(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 727, a3, a4);
}

void sub_239647D60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  std::__shared_weak_count *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int32x4_t v38;
  int v39;
  char v40;
  __int128 v41;
  int v42;
  __int128 v43;
  _BYTE v44[32];
  int v45;
  uint64_t (**v46)();
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  char v54;

  v2 = a1;
  v4 = *(_DWORD *)(a1 + 120);
  if (v4 == 2)
  {
    sub_2396480F0(a2, a1);
  }
  else if (v4 == 1)
  {
    v14 = *(_OWORD *)(a1 + 16);
    v43 = *(_OWORD *)a1;
    *(_OWORD *)v44 = v14;
    *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 32);
    v45 = *(_DWORD *)(a1 + 48);
    LOBYTE(v46) = 0;
    v54 = 0;
    if (*(_BYTE *)(a1 + 112))
    {
      v46 = &off_250ADB210;
      v15 = *(_QWORD *)(a1 + 64);
      v16 = *(std::__shared_weak_count **)(a1 + 72);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = *(_QWORD *)(a1 + 96);
        v20 = *(_DWORD *)(a1 + 104);
        v21 = *(_WORD *)(a1 + 108);
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 96);
        v20 = *(_DWORD *)(a1 + 104);
        v21 = *(_WORD *)(a1 + 108);
      }
      v47 = v15;
      v48 = v16;
      v49 = *(_QWORD *)(a1 + 80);
      v24 = *(_DWORD *)(a1 + 88);
      v23 = &v51;
      v51 = v19;
      v50 = v24;
      v52 = v20;
      v53 = v21;
      if (v16)
      {
        v25 = (unint64_t *)&v16->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, a1);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v54 = 1;
      if ((_BYTE)v53 && v51)
      {
        if (v48)
        {
          v27 = &v48->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
          do
            v29 = __ldaxr((unint64_t *)v27);
          while (__stlxr(v29 - 1, (unint64_t *)v27));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v48->__on_zero_shared)(v48, v2);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v47 + 88))(v47, 0, "unknown location");
      }
    }
    else
    {
      v23 = (uint64_t *)&v44[24];
    }
    v42 = *(_DWORD *)v44;
    v39 = 4 * *(_DWORD *)&v44[20];
    v40 = 1;
    v30 = *v23;
    v41 = v43;
    v38 = vshlq_n_s32(*(int32x4_t *)&v44[4], 2uLL);
    v37 = v45;
    sub_239643F70(a2, v30, &v41, &v38, &v37, &v46);
    if (v54)
    {
      v31 = nullsub_4(&v49);
      v32 = v48;
      if (v48)
      {
        v33 = &v48->__shared_owners_;
        do
          v34 = __ldaxr((unint64_t *)v33);
        while (__stlxr(v34 - 1, (unint64_t *)v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v32->__on_zero_shared)(v32, v31);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      nullsub_4(&v46);
    }
  }
  else
  {
    if (v4)
      sub_239EBFFB0();
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48);
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (*(_BYTE *)(a1 + 112))
    {
      *(_QWORD *)(a2 + 56) = &off_250ADB210;
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(std::__shared_weak_count **)(a1 + 72);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_DWORD *)(a1 + 104);
        v12 = *(_WORD *)(a1 + 108);
        do
          v13 = __ldxr(v8);
        while (__stxr(v13 + 1, v8));
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_DWORD *)(a1 + 104);
        v12 = *(_WORD *)(a1 + 108);
      }
      *(_QWORD *)(a2 + 64) = v6;
      *(_QWORD *)(a2 + 72) = v7;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 88);
      *(_QWORD *)(a2 + 96) = v10;
      *(_DWORD *)(a2 + 104) = v11;
      *(_WORD *)(a2 + 108) = v12;
      if (v7)
      {
        v35 = (unint64_t *)&v7->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, a1);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      *(_BYTE *)(a2 + 112) = 1;
    }
  }
}

void sub_2396480C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23948FBF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396480DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23948FBF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396480F0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t result;
  unint64_t *v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE v34[16];
  std::__shared_weak_count *v35;
  _BYTE v36[32];
  char v37;

  switch(*(_DWORD *)(a2 + 48))
  {
    case 1:
      v31 = &off_250ADB350;
      sub_2394949FC(a2, (uint64_t)&v32);
      sub_23964A7D4((uint64_t)&v31, a1);
      v3 = v33;
      if (!v33)
        goto LABEL_63;
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      goto LABEL_62;
    case 3:
      v28 = &off_250AE1C58;
      sub_23964D014(a2, (uint64_t)&v29);
      sub_23964A908((uint64_t)&v28, (uint64_t)&v31);
      sub_23964AA3C(a1, (uint64_t)&v31);
      if (v37)
      {
        nullsub_4(v36);
        v6 = v35;
        if (v35)
        {
          v7 = (unint64_t *)&v35->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        nullsub_4(v34);
      }
      v9 = v30;
      if (!v30)
        goto LABEL_58;
      v10 = (unint64_t *)&v30->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_57;
    case 4:
      v28 = &off_250ADED08;
      sub_23964D668(a2, (uint64_t)&v29);
      sub_23964AB44((uint64_t)&v28, (uint64_t)&v31);
      sub_23964B2C8(a1, (uint64_t)&v31);
      if (v37)
      {
        nullsub_4(v36);
        v12 = v35;
        if (v35)
        {
          v13 = (unint64_t *)&v35->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        nullsub_4(v34);
      }
      v9 = v30;
      if (!v30)
        goto LABEL_58;
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v11 = __ldaxr(v15);
      while (__stlxr(v11 - 1, v15));
      goto LABEL_57;
    case 5:
      v31 = &off_250ADB390;
      sub_23964B3D0(a2, (uint64_t)&v32);
      sub_23964B190((uint64_t)&v31, a1);
      v3 = v33;
      if (!v33)
        goto LABEL_63;
      v16 = (unint64_t *)&v33->__shared_owners_;
      do
        v5 = __ldaxr(v16);
      while (__stlxr(v5 - 1, v16));
      goto LABEL_62;
    case 0x19:
      v31 = &off_250AE1B60;
      sub_23964DC14(a2, (uint64_t)&v32);
      sub_23964AC78((uint64_t)&v31, a1);
      v3 = v33;
      if (!v33)
        goto LABEL_63;
      v17 = (unint64_t *)&v33->__shared_owners_;
      do
        v5 = __ldaxr(v17);
      while (__stlxr(v5 - 1, v17));
      goto LABEL_62;
    case 0x1C:
      v28 = &off_250AE2130;
      sub_23964E2D4(a2, (uint64_t)&v29);
      sub_23964ADB0((uint64_t)&v28, (uint64_t)&v31);
      sub_23964B2C8(a1, (uint64_t)&v31);
      if (v37)
      {
        nullsub_4(v36);
        v18 = v35;
        if (v35)
        {
          v19 = (unint64_t *)&v35->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        nullsub_4(v34);
      }
      v9 = v30;
      if (!v30)
        goto LABEL_58;
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v11 = __ldaxr(v21);
      while (__stlxr(v11 - 1, v21));
      goto LABEL_57;
    case 0x1D:
      v31 = &off_250AE1A68;
      sub_23964E998(a2, (uint64_t)&v32);
      sub_23964AEE8((uint64_t)&v31, a1);
      v3 = v33;
      if (!v33)
        goto LABEL_63;
      v27 = (unint64_t *)&v33->__shared_owners_;
      do
        v5 = __ldaxr(v27);
      while (__stlxr(v5 - 1, v27));
LABEL_62:
      if (v5)
      {
LABEL_63:
        result = nullsub_4(&v31);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        result = nullsub_4(&v31);
      }
      break;
    case 0x20:
      v28 = &off_250AE2038;
      sub_23964EFB0(a2, (uint64_t)&v29);
      sub_23964B020((uint64_t)&v28, (uint64_t)&v31);
      sub_23964B2C8(a1, (uint64_t)&v31);
      if (v37)
      {
        nullsub_4(v36);
        v22 = v35;
        if (v35)
        {
          v23 = (unint64_t *)&v35->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        nullsub_4(v34);
      }
      v9 = v30;
      if (!v30)
        goto LABEL_58;
      v25 = (unint64_t *)&v30->__shared_owners_;
      do
        v11 = __ldaxr(v25);
      while (__stlxr(v11 - 1, v25));
LABEL_57:
      if (v11)
      {
LABEL_58:
        result = nullsub_4(&v28);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        result = nullsub_4(&v28);
      }
      break;
    default:
      sub_239EC0010();
  }
  return result;
}

void sub_2396485A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239643CCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396485B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_2396485C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_23948FBF0((uint64_t)va1);
  sub_2396440AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396485E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396440AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396485F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23964860C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_23948FBF0((uint64_t)va1);
  sub_239644114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239648628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239644114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964863C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239648650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239643D34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239648664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239648678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239418EBC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964868C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_2396486A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_23948FBF0((uint64_t)va1);
  sub_23957E154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396486BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23957E154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396486D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_2396486E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_23948FBF0((uint64_t)va1);
  sub_239643D9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239648700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239643D9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239648714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239648728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2394176A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239648750(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  int v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  unint64_t v128;
  uint64_t (**v129)();
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  __int16 v135;
  unint64_t v136;
  unint64_t *p_shared_owners;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  int v147;
  const std::string::value_type *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::string *v176;
  __int128 v177;
  std::string *v178;
  __int128 v179;
  std::string *v180;
  std::string::size_type size;
  std::string *v182;
  __int128 v183;
  std::string *v184;
  __int128 v185;
  std::string *v186;
  std::string::size_type v187;
  std::string *v188;
  __int128 v189;
  std::string *v190;
  __int128 v191;
  int v192;
  const std::string::value_type *v193;
  std::string::size_type v194;
  std::string *v195;
  __int128 v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  char v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  int v217;
  char v218;
  uint64_t v219;
  std::string *v220;
  __int128 v221;
  std::string *v222;
  __int128 v223;
  const std::string::value_type *v224;
  std::string::size_type v225;
  std::string *v226;
  __int128 v227;
  void *v228;
  uint64_t v229;
  std::string::size_type v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  int v235;
  __int16 v236;
  uint64_t (**v237)();
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  int v240;
  uint64_t v241;
  int v242;
  __int16 v243;
  char v244;
  unsigned int v245;
  std::string v246;
  std::string v247;
  std::string v248;
  std::string v249;
  std::string v250;
  std::string v251;
  std::string v252;
  unint64_t v253;
  unint64_t v254;
  std::string v255;
  _BYTE v256[32];
  __int128 v257;
  int v258;
  __int16 v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int v265;
  __int16 v266;
  char v267;
  int v268;
  std::string v269;
  __int128 v270;
  __int128 v271;
  int v272;
  _QWORD v273[2];
  std::__shared_weak_count *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  __int16 v279;
  char v280;
  _BYTE v281[32];
  __int128 v282;
  int v283;
  _QWORD v284[2];
  std::__shared_weak_count *v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  __int16 v290;
  char v291;
  std::string v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  __int16 v297;
  std::string __p;
  _OWORD v299[2];
  int v300;
  _QWORD v301[2];
  std::__shared_weak_count *v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  __int16 v307;
  char v308;
  _BYTE v309[56];
  uint64_t (**v310)();
  uint64_t (**v311)();
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  __int16 v318;
  char v319;

  v5 = a2[1];
  v229 = (v5 - *a2) >> 7;
  v6 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
  if (v229 != v6)
  {
    v252.__r_.__value_.__s.__data_[0] = 3;
    v292.__r_.__value_.__r.__words[0] = v6;
    sub_23964A648((unint64_t *)&v292, (std::string *)v256);
    v220 = std::string::insert((std::string *)v256, 0, "Expected ");
    v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
    v269.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v221;
    v220->__r_.__value_.__l.__size_ = 0;
    v220->__r_.__value_.__r.__words[2] = 0;
    v220->__r_.__value_.__r.__words[0] = 0;
    v222 = std::string::append(&v269, " model inputs but received ");
    v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v223;
    v222->__r_.__value_.__l.__size_ = 0;
    v222->__r_.__value_.__r.__words[2] = 0;
    v222->__r_.__value_.__r.__words[0] = 0;
    v255.__r_.__value_.__r.__words[0] = (uint64_t)(a2[1] - *a2) >> 7;
    sub_23964A648((unint64_t *)&v255, (std::string *)v281);
    if (v281[23] >= 0)
      v224 = v281;
    else
      v224 = *(const std::string::value_type **)v281;
    if (v281[23] >= 0)
      v225 = v281[23];
    else
      v225 = *(_QWORD *)&v281[8];
    v226 = std::string::append(&__p, v224, v225);
    v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
    *(_QWORD *)&v309[16] = *((_QWORD *)&v226->__r_.__value_.__l + 2);
    *(_OWORD *)v309 = v227;
    v226->__r_.__value_.__l.__size_ = 0;
    v226->__r_.__value_.__r.__words[2] = 0;
    v226->__r_.__value_.__r.__words[0] = 0;
    sub_23957E1BC(a3, &v252, (uint64_t)v309);
    if ((v309[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v309);
      if ((v281[23] & 0x80000000) == 0)
      {
LABEL_368:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_369;
        goto LABEL_376;
      }
    }
    else if ((v281[23] & 0x80000000) == 0)
    {
      goto LABEL_368;
    }
    operator delete(*(void **)v281);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_369:
      if ((SHIBYTE(v269.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_370;
      goto LABEL_377;
    }
LABEL_376:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v269.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_370:
      if ((v256[23] & 0x80000000) == 0)
        return;
LABEL_378:
      v228 = *(void **)v256;
      goto LABEL_379;
    }
LABEL_377:
    operator delete(v269.__r_.__value_.__l.__data_);
    if ((v256[23] & 0x80000000) == 0)
      return;
    goto LABEL_378;
  }
  if (v5 != *a2)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *a2 + (v7 << 7);
      v231 = v7;
      LOBYTE(v232) = 0;
      v245 = -1;
      v10 = *(unsigned int *)(v9 + 120);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(std::string *, __int128 *))off_250AE2230[v10])(&__p, &v232);
        v245 = v10;
      }
      v11 = v8 + 168 * v7;
      if (*(_BYTE *)(v11 + 80))
        break;
LABEL_141:
      if (*(_BYTE *)(v8 + 168 * v7 + 120))
        v106 = (_DWORD)v10 == 0;
      else
        v106 = 0;
      if (v106)
      {
        v107 = *(_QWORD *)(v8 + 168 * v7 + 112);
        if (!v107)
          sub_2394172E0();
        (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v107 + 48))(v309, v107, &v232);
        if (v309[8])
        {
          sub_23964A648(&v231, &v292);
          v108 = std::string::insert(&v292, 0, "Failure verifying model input ");
          v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          *(_QWORD *)&v281[16] = *((_QWORD *)&v108->__r_.__value_.__l + 2);
          *(_OWORD *)v281 = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          v110 = std::string::append((std::string *)v281, ": ");
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v269.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          v112 = *(char *)(*(_QWORD *)&v309[16] + 23);
          if (v112 >= 0)
            v113 = *(const std::string::value_type **)&v309[16];
          else
            v113 = **(const std::string::value_type ***)&v309[16];
          if (v112 >= 0)
            v114 = *(unsigned __int8 *)(*(_QWORD *)&v309[16] + 23);
          else
            v114 = *(_QWORD *)(*(_QWORD *)&v309[16] + 8);
          v115 = std::string::append(&v269, v113, v114);
          v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v116;
          v115->__r_.__value_.__l.__size_ = 0;
          v115->__r_.__value_.__r.__words[2] = 0;
          v115->__r_.__value_.__r.__words[0] = 0;
          sub_23957E1BC(a3, &v309[8], (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_185;
LABEL_156:
            if ((v281[23] & 0x80000000) == 0)
              goto LABEL_157;
LABEL_186:
            operator delete(*(void **)v281);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_187;
LABEL_158:
            *(_QWORD *)v309 = &off_250ADC870;
            v117 = *(std::__shared_weak_count **)&v309[24];
            if (*(_QWORD *)&v309[24])
            {
LABEL_188:
              p_shared_owners = (unint64_t *)&v117->__shared_owners_;
              do
                v138 = __ldaxr(p_shared_owners);
              while (__stlxr(v138 - 1, p_shared_owners));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
          }
          else
          {
            if ((SHIBYTE(v269.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
LABEL_185:
            operator delete(v269.__r_.__value_.__l.__data_);
            if ((v281[23] & 0x80000000) != 0)
              goto LABEL_186;
LABEL_157:
            if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_158;
LABEL_187:
            operator delete(v292.__r_.__value_.__l.__data_);
            *(_QWORD *)v309 = &off_250ADC870;
            v117 = *(std::__shared_weak_count **)&v309[24];
            if (*(_QWORD *)&v309[24])
              goto LABEL_188;
          }
          nullsub_4(v309);
          v139 = v245;
          if (v245 == -1)
            goto LABEL_331;
          goto LABEL_330;
        }
        *(_QWORD *)v309 = &off_250ADC870;
        v118 = *(std::__shared_weak_count **)&v309[24];
        if (*(_QWORD *)&v309[24])
        {
          v119 = (unint64_t *)(*(_QWORD *)&v309[24] + 8);
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        nullsub_4(v309);
      }
      if (!*(_BYTE *)(v8 + 168 * v7 + 160))
        goto LABEL_328;
      if (v245)
      {
        if (v245 != 2)
        {
          if (v245 == 1)
          {
            sub_239A444D4((uint64_t)"unknown file", 286, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          goto LABEL_328;
        }
        *(_QWORD *)v309 = &off_250ADB210;
        v121 = *((_QWORD *)&v232 + 1);
        v122 = (std::__shared_weak_count *)v233;
        if ((_QWORD)v233)
        {
          v123 = (unint64_t *)(v233 + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
          v125 = *((_QWORD *)&v234 + 1);
          v126 = v235;
          v127 = v236;
          do
            v128 = __ldxr(v123);
          while (__stxr(v128 + 1, v123));
        }
        else
        {
          v125 = *((_QWORD *)&v234 + 1);
          v126 = v235;
          v127 = v236;
        }
        *(_QWORD *)&v309[8] = v121;
        *(_QWORD *)&v309[16] = v122;
        *(_QWORD *)&v309[24] = *((_QWORD *)&v233 + 1);
        *(_DWORD *)&v309[32] = v234;
        *(_QWORD *)&v309[40] = v125;
        *(_DWORD *)&v309[48] = v126;
        *(_WORD *)&v309[52] = v127;
        if (v122)
        {
          v140 = (unint64_t *)&v122->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v142 = *(_QWORD *)(v8 + 168 * v7 + 152);
        if (!v142)
          sub_2394172E0();
        (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v142 + 48))(&__p, v142, v309);
        if (!__p.__r_.__value_.__s.__data_[8])
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
          v153 = *(std::__shared_weak_count **)&v299[0];
          if (*(_QWORD *)&v299[0])
          {
            v154 = (unint64_t *)(*(_QWORD *)&v299[0] + 8);
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          nullsub_4(&__p);
          nullsub_4(&v309[24]);
          v156 = *(std::__shared_weak_count **)&v309[16];
          if (*(_QWORD *)&v309[16])
          {
            v157 = (unint64_t *)(*(_QWORD *)&v309[16] + 8);
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          nullsub_4(v309);
          goto LABEL_328;
        }
        sub_23964A648(&v231, &v255);
        v143 = std::string::insert(&v255, 0, "Failure verifying model input ");
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        v292.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        v145 = std::string::append(&v292, ", image: ");
        v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
        *(_QWORD *)&v281[16] = *((_QWORD *)&v145->__r_.__value_.__l + 2);
        *(_OWORD *)v281 = v146;
        v145->__r_.__value_.__l.__size_ = 0;
        v145->__r_.__value_.__r.__words[2] = 0;
        v145->__r_.__value_.__r.__words[0] = 0;
        v147 = *(char *)(__p.__r_.__value_.__r.__words[2] + 23);
        if (v147 >= 0)
          v148 = (const std::string::value_type *)__p.__r_.__value_.__r.__words[2];
        else
          v148 = *(const std::string::value_type **)__p.__r_.__value_.__r.__words[2];
        if (v147 >= 0)
          v149 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[2] + 23);
        else
          v149 = *(_QWORD *)(__p.__r_.__value_.__r.__words[2] + 8);
        v150 = std::string::append((std::string *)v281, v148, v149);
        v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
        v269.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v151;
        v150->__r_.__value_.__l.__size_ = 0;
        v150->__r_.__value_.__r.__words[2] = 0;
        v150->__r_.__value_.__r.__words[0] = 0;
        sub_23957E1BC(a3, &__p.__r_.__value_.__s.__data_[8], (uint64_t)&v269);
        if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v269.__r_.__value_.__l.__data_);
          if ((v281[23] & 0x80000000) != 0)
            goto LABEL_291;
LABEL_210:
          if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_211;
LABEL_292:
          operator delete(v292.__r_.__value_.__l.__data_);
          if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_293;
LABEL_212:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
          v152 = *(std::__shared_weak_count **)&v299[0];
          if (*(_QWORD *)&v299[0])
          {
LABEL_294:
            v198 = (unint64_t *)&v152->__shared_owners_;
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
        }
        else
        {
          if ((v281[23] & 0x80000000) == 0)
            goto LABEL_210;
LABEL_291:
          operator delete(*(void **)v281);
          if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_292;
LABEL_211:
          if ((SHIBYTE(v255.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_212;
LABEL_293:
          operator delete(v255.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
          v152 = *(std::__shared_weak_count **)&v299[0];
          if (*(_QWORD *)&v299[0])
            goto LABEL_294;
        }
        nullsub_4(&__p);
        nullsub_4(&v309[24]);
        v200 = *(std::__shared_weak_count **)&v309[16];
        if (*(_QWORD *)&v309[16])
        {
          v201 = (unint64_t *)(*(_QWORD *)&v309[16] + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        nullsub_4(v309);
        v139 = v245;
        if (v245 == -1)
          goto LABEL_331;
LABEL_330:
        ((void (*)(_BYTE *, __int128 *))off_250AE2218[v139])(v309, &v232);
        goto LABEL_331;
      }
      *(_OWORD *)v309 = v232;
      *(_OWORD *)&v309[16] = v233;
      *(_OWORD *)&v309[32] = v234;
      *(_DWORD *)&v309[48] = v235;
      LOBYTE(v310) = 0;
      LOBYTE(v317) = 0;
      if (v244)
      {
        v310 = &off_250ADB210;
        v129 = v237;
        v130 = v238;
        if (v238)
        {
          v131 = (unint64_t *)&v238->__shared_owners_;
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
          v133 = v241;
          v134 = v242;
          v135 = v243;
          do
            v136 = __ldxr(v131);
          while (__stxr(v136 + 1, v131));
        }
        else
        {
          v133 = v241;
          v134 = v242;
          v135 = v243;
        }
        v311 = v129;
        v312 = v130;
        v313 = v239;
        LODWORD(v314) = v240;
        v315 = v133;
        LODWORD(v316) = v134;
        WORD2(v316) = v135;
        if (v130)
        {
          v159 = (unint64_t *)&v130->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        LOBYTE(v317) = 1;
      }
      v161 = *(unsigned int *)&v309[12];
      if (!*(_DWORD *)&v309[12] || (v162 = *(unsigned int *)&v309[16], !*(_DWORD *)&v309[16]))
      {
LABEL_253:
        v172 = 1;
        if (!(_BYTE)v317)
          goto LABEL_327;
LABEL_254:
        nullsub_4(&v313);
        v173 = v312;
        if (!v312)
          goto LABEL_258;
        v174 = (unint64_t *)&v312->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
          nullsub_4(&v310);
          if ((v172 & 1) != 0)
            goto LABEL_328;
        }
        else
        {
LABEL_258:
          nullsub_4(&v310);
          if ((v172 & 1) != 0)
            goto LABEL_328;
        }
LABEL_329:
        v139 = v245;
        if (v245 == -1)
          goto LABEL_331;
        goto LABEL_330;
      }
      v163 = 0;
      v164 = (_QWORD *)(v8 + 168 * v7 + 152);
      v254 = 0;
LABEL_235:
      v165 = 0;
      while (1)
      {
        v253 = v165;
        sub_23964422C((uint64_t)v309, v254, v165, &__p);
        if (!*v164)
          sub_2394172E0();
        (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*v164 + 48))(&v269, *v164, &__p);
        if (v269.__r_.__value_.__s.__data_[8])
          break;
        v269.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
        v166 = (std::__shared_weak_count *)v270;
        if (!(_QWORD)v270)
          goto LABEL_243;
        v167 = (unint64_t *)(v270 + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
          nullsub_4(&v269);
          nullsub_4(v299);
          v169 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2])
          {
LABEL_244:
            v170 = (unint64_t *)&v169->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
        }
        else
        {
LABEL_243:
          nullsub_4(&v269);
          nullsub_4(v299);
          v169 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
          if (__p.__r_.__value_.__r.__words[2])
            goto LABEL_244;
        }
        nullsub_4(&__p);
        if (++v165 == v162)
        {
          while (++v163 != v161)
          {
            v162 = *(unsigned int *)&v309[16];
            v254 = v163;
            if (*(_DWORD *)&v309[16])
              goto LABEL_235;
          }
          goto LABEL_253;
        }
      }
      sub_23964A648(&v231, &v248);
      v176 = std::string::insert(&v248, 0, "Failure verifying model input ");
      v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
      v249.__r_.__value_.__r.__words[2] = v176->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v177;
      v176->__r_.__value_.__l.__size_ = 0;
      v176->__r_.__value_.__r.__words[2] = 0;
      v176->__r_.__value_.__r.__words[0] = 0;
      v178 = std::string::append(&v249, ", image ");
      v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
      v250.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v179;
      v178->__r_.__value_.__l.__size_ = 0;
      v178->__r_.__value_.__r.__words[2] = 0;
      v178->__r_.__value_.__r.__words[0] = 0;
      sub_23964A648(&v254, &v247);
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v180 = &v247;
      else
        v180 = (std::string *)v247.__r_.__value_.__r.__words[0];
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      else
        size = v247.__r_.__value_.__l.__size_;
      v182 = std::string::append(&v250, (const std::string::value_type *)v180, size);
      v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
      v251.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v183;
      v182->__r_.__value_.__l.__size_ = 0;
      v182->__r_.__value_.__r.__words[2] = 0;
      v182->__r_.__value_.__r.__words[0] = 0;
      v184 = std::string::append(&v251, " of batch ");
      v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
      v252.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v185;
      v184->__r_.__value_.__l.__size_ = 0;
      v184->__r_.__value_.__r.__words[2] = 0;
      v184->__r_.__value_.__r.__words[0] = 0;
      sub_23964A648(&v253, &v246);
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v186 = &v246;
      else
        v186 = (std::string *)v246.__r_.__value_.__r.__words[0];
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v187 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      else
        v187 = v246.__r_.__value_.__l.__size_;
      v188 = std::string::append(&v252, (const std::string::value_type *)v186, v187);
      v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
      v255.__r_.__value_.__r.__words[2] = v188->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v189;
      v188->__r_.__value_.__l.__size_ = 0;
      v188->__r_.__value_.__r.__words[2] = 0;
      v188->__r_.__value_.__r.__words[0] = 0;
      v190 = std::string::append(&v255, ": ");
      v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
      v292.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v191;
      v190->__r_.__value_.__l.__size_ = 0;
      v190->__r_.__value_.__r.__words[2] = 0;
      v190->__r_.__value_.__r.__words[0] = 0;
      v192 = *(char *)(v269.__r_.__value_.__r.__words[2] + 23);
      if (v192 >= 0)
        v193 = (const std::string::value_type *)v269.__r_.__value_.__r.__words[2];
      else
        v193 = *(const std::string::value_type **)v269.__r_.__value_.__r.__words[2];
      if (v192 >= 0)
        v194 = *(unsigned __int8 *)(v269.__r_.__value_.__r.__words[2] + 23);
      else
        v194 = *(_QWORD *)(v269.__r_.__value_.__r.__words[2] + 8);
      v195 = std::string::append(&v292, v193, v194);
      v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
      *(_QWORD *)&v281[16] = *((_QWORD *)&v195->__r_.__value_.__l + 2);
      *(_OWORD *)v281 = v196;
      v195->__r_.__value_.__l.__size_ = 0;
      v195->__r_.__value_.__r.__words[2] = 0;
      v195->__r_.__value_.__r.__words[0] = 0;
      sub_23957E1BC(a3, &v269.__r_.__value_.__s.__data_[8], (uint64_t)v281);
      if ((v281[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v281);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_308;
LABEL_280:
        if ((SHIBYTE(v255.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_281;
LABEL_309:
        operator delete(v255.__r_.__value_.__l.__data_);
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_310;
LABEL_282:
        if ((SHIBYTE(v252.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_283;
LABEL_311:
        operator delete(v252.__r_.__value_.__l.__data_);
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_312;
LABEL_284:
        if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_285;
LABEL_313:
        operator delete(v247.__r_.__value_.__l.__data_);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_314;
LABEL_286:
        if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_287;
LABEL_315:
        operator delete(v249.__r_.__value_.__l.__data_);
        if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_316;
LABEL_288:
        v269.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
        v197 = (std::__shared_weak_count *)v270;
        if ((_QWORD)v270)
        {
LABEL_317:
          v203 = (unint64_t *)&v197->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
      }
      else
      {
        if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_280;
LABEL_308:
        operator delete(v292.__r_.__value_.__l.__data_);
        if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_309;
LABEL_281:
        if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_282;
LABEL_310:
        operator delete(v246.__r_.__value_.__l.__data_);
        if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_311;
LABEL_283:
        if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_284;
LABEL_312:
        operator delete(v251.__r_.__value_.__l.__data_);
        if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_313;
LABEL_285:
        if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_286;
LABEL_314:
        operator delete(v250.__r_.__value_.__l.__data_);
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_315;
LABEL_287:
        if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_288;
LABEL_316:
        operator delete(v248.__r_.__value_.__l.__data_);
        v269.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
        v197 = (std::__shared_weak_count *)v270;
        if ((_QWORD)v270)
          goto LABEL_317;
      }
      nullsub_4(&v269);
      nullsub_4(v299);
      v205 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v206 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      nullsub_4(&__p);
      v172 = 0;
      if ((_BYTE)v317)
        goto LABEL_254;
LABEL_327:
      if ((v172 & 1) == 0)
        goto LABEL_329;
LABEL_328:
      __p.__r_.__value_.__s.__data_[0] = 0;
      v309[23] = 0;
      v309[0] = 0;
      sub_23957E1BC(a3, &__p, (uint64_t)v309);
      if ((v309[23] & 0x80000000) == 0)
        goto LABEL_329;
      operator delete(*(void **)v309);
      v139 = v245;
      if (v245 != -1)
        goto LABEL_330;
LABEL_331:
      v245 = -1;
      if (*(_BYTE *)(a3 + 8))
        return;
      *(_QWORD *)a3 = &off_250ADC870;
      v208 = *(std::__shared_weak_count **)(a3 + 24);
      if (v208)
      {
        v209 = (unint64_t *)&v208->__shared_owners_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      nullsub_4(a3);
      if (++v7 == v229)
        goto LABEL_372;
    }
    v12 = v231;
    v256[0] = 0;
    v268 = -1;
    if ((_DWORD)v10 == -1)
    {
LABEL_19:
      *(_QWORD *)a3 = &off_250ADC870;
      *(_BYTE *)(a3 + 8) = 0;
      v21 = (_BYTE *)operator new();
      v21[23] = 0;
      *v21 = 0;
      *(_QWORD *)(a3 + 16) = v21;
      v22 = (_QWORD *)operator new();
      *v22 = &unk_250ADEA78;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = v21;
      *(_QWORD *)(a3 + 24) = v22;
LABEL_132:
      if (v268 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_250AE2218[v268])(v309, v256);
      v268 = -1;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_329;
      *(_QWORD *)a3 = &off_250ADC870;
      v103 = *(std::__shared_weak_count **)(a3 + 24);
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      nullsub_4(a3);
      LODWORD(v10) = v245;
      goto LABEL_141;
    }
    ((void (*)(std::string *, _BYTE *, __int128 *))off_250AE2230[v10])(&__p, v256, &v232);
    v268 = v10;
    if ((_DWORD)v10 == 2)
    {
      v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
      v31 = *(_OWORD *)&v256[8];
      if (*(_QWORD *)&v256[16])
      {
        v32 = (unint64_t *)(*(_QWORD *)&v256[16] + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v34 = *((_QWORD *)&v257 + 1);
        v35 = v258;
        v36 = v259;
        do
          v37 = __ldxr(v32);
        while (__stxr(v37 + 1, v32));
      }
      else
      {
        v34 = *((_QWORD *)&v257 + 1);
        v35 = v258;
        v36 = v259;
      }
      *(_OWORD *)&v292.__r_.__value_.__r.__words[1] = v31;
      v293 = *(_QWORD *)&v256[24];
      v294 = v257;
      v295 = v34;
      v296 = v35;
      v297 = v36;
      if (*((_QWORD *)&v31 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
      }
      sub_2396480F0((uint64_t)v281, (uint64_t)&v292);
      v269.__r_.__value_.__r.__words[0] = v12;
      *(_OWORD *)&v269.__r_.__value_.__r.__words[1] = *(_OWORD *)v281;
      v270 = *(_OWORD *)&v281[16];
      v271 = v282;
      v272 = v283;
      LOBYTE(v273[0]) = 0;
      v280 = 0;
      if (v291)
      {
        v273[0] = &off_250ADB210;
        v40 = v284[1];
        v41 = v285;
        if (v285)
        {
          v42 = (unint64_t *)&v285->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
          v44 = v288;
          v45 = v289;
          v46 = v290;
          do
            v47 = __ldxr(v42);
          while (__stxr(v47 + 1, v42));
        }
        else
        {
          v44 = v288;
          v45 = v289;
          v46 = v290;
        }
        v273[1] = v40;
        v274 = v41;
        v275 = v286;
        v276 = v287;
        v277 = v44;
        v278 = v45;
        v279 = v46;
        if (v41)
        {
          v79 = (unint64_t *)&v41->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v280 = 1;
      }
      sub_23964B9E8(a3, v8 + 168 * v7, (uint64_t)&v269);
      if (v280)
      {
        nullsub_4(&v275);
        v81 = v274;
        if (v274)
        {
          v82 = (unint64_t *)&v274->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        nullsub_4(v273);
      }
      if (v291)
      {
        nullsub_4(&v286);
        v84 = v285;
        if (v285)
        {
          v85 = (unint64_t *)&v285->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        nullsub_4(v284);
      }
      nullsub_4(&v293);
      v87 = (std::__shared_weak_count *)v292.__r_.__value_.__r.__words[2];
      if (v292.__r_.__value_.__r.__words[2])
      {
        v88 = (unint64_t *)(v292.__r_.__value_.__r.__words[2] + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v78 = &v292;
      goto LABEL_131;
    }
    if ((_DWORD)v10 != 1)
    {
      if (!(_DWORD)v10)
      {
        *(_QWORD *)v309 = v12;
        *(_OWORD *)&v309[8] = *(_OWORD *)v256;
        *(_OWORD *)&v309[24] = *(_OWORD *)&v256[16];
        *(_OWORD *)&v309[40] = v257;
        LODWORD(v310) = v258;
        LOBYTE(v311) = 0;
        v319 = 0;
        if (v267)
        {
          v311 = &off_250ADB210;
          v13 = v260;
          v14 = v261;
          if (v261)
          {
            v15 = (unint64_t *)&v261->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
            v17 = v264;
            v18 = v265;
            v19 = v266;
            do
              v20 = __ldxr(v15);
            while (__stxr(v20 + 1, v15));
          }
          else
          {
            v17 = v264;
            v18 = v265;
            v19 = v266;
          }
          v312 = v13;
          v313 = v14;
          v314 = v262;
          LODWORD(v315) = v263;
          v316 = v17;
          v317 = v18;
          v318 = v19;
          if (v14)
          {
            v73 = (unint64_t *)&v14->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v319 = 1;
        }
        sub_23964B9E8(a3, v8 + 168 * v7, (uint64_t)v309);
        if (!v319)
          goto LABEL_132;
        nullsub_4(&v314);
        v75 = v313;
        if (v313)
        {
          v76 = (unint64_t *)&v313->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = (std::string *)&v311;
        goto LABEL_131;
      }
      goto LABEL_19;
    }
    __p.__r_.__value_.__r.__words[0] = v12;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v256;
    v299[0] = *(_OWORD *)&v256[16];
    v299[1] = v257;
    v300 = v258;
    LOBYTE(v301[0]) = 0;
    v308 = 0;
    if (v267)
    {
      v301[0] = &off_250ADB210;
      v23 = v260;
      v24 = v261;
      if (v261)
      {
        v25 = (unint64_t *)&v261->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v27 = v264;
        v28 = v265;
        v29 = v266;
        do
          v30 = __ldxr(v25);
        while (__stxr(v30 + 1, v25));
      }
      else
      {
        v27 = v264;
        v28 = v265;
        v29 = v266;
      }
      v301[1] = v23;
      v302 = v24;
      v303 = v262;
      v304 = v263;
      v305 = v27;
      v306 = v28;
      v307 = v29;
      if (v24)
      {
        v48 = (unint64_t *)&v24->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v308 = 1;
    }
    v50 = v8 + 168 * v7;
    v53 = *(unsigned __int8 *)(v50 + 36);
    v52 = (_BYTE *)(v50 + 36);
    v51 = v53;
    if (v52[40]
      && (v54 = v8 + 168 * v7,
          v56 = *(_DWORD *)(v54 + 72),
          v55 = (uint64_t *)(v54 + 72),
          v57 = v299[0],
          v56 != LODWORD(v299[0])))
    {
      v71 = " is expected to have a batch-size of ";
      v72 = " but has ";
    }
    else if (*(_BYTE *)(v8 + 168 * v7 + 68)
           && (v58 = v8 + 168 * v7,
               v59 = *(_DWORD *)(v58 + 64),
               v55 = (uint64_t *)(v58 + 64),
               v57 = HIDWORD(__p.__r_.__value_.__r.__words[2]),
               v59 != HIDWORD(__p.__r_.__value_.__r.__words[2])))
    {
      v71 = " is expected to have ";
      v72 = " planes but has ";
    }
    else
    {
      v60 = (int *)(v11 + 32);
      v61 = v8 + 168 * v7;
      if (*(_BYTE *)(v61 + 44))
      {
        v55 = (uint64_t *)(v61 + 40);
        if (v51)
        {
          sub_23964FC24((int *)(v11 + 32));
          if (v62)
          {
            v63 = sub_23964FC24((int *)(v11 + 32));
            if (v63 != 4 * DWORD2(v299[0]))
            {
              v64 = __p.__r_.__value_.__r.__words[0];
              v65 = *v55;
              v66 = sub_23964FC24(v60);
              v68 = v67;
              v69 = " is expected to have ";
              v70 = " bytes per pixel but has an incompatible pixel byte stride of ";
LABEL_349:
              sub_23964BF78(a3, v64, v69, v65, v66, v68, v70, 4 * DWORD2(v299[0]));
              goto LABEL_124;
            }
          }
          else
          {
            sub_23964FBE8((int *)(v11 + 32));
            if (v90)
            {
              v91 = sub_23964FBE8((int *)(v11 + 32));
              if (v91 != 4 * DWORD2(v299[0]))
              {
                v64 = __p.__r_.__value_.__r.__words[0];
                v65 = *v55;
                v66 = sub_23964FBE8(v60);
                v68 = v219;
                v69 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
                v70 = " bytes per value but has an incompatible pixel byte stride of ";
                goto LABEL_349;
              }
            }
          }
        }
        else
        {
          v57 = 4 * DWORD2(v299[0]);
          if (*(_DWORD *)v55 != 4 * DWORD2(v299[0]))
          {
            v71 = " of unspecified format (assumed to be Gray8) is expected to have ";
            v72 = " color components but has an incompatible pixel byte stride of ";
            goto LABEL_123;
          }
        }
      }
      if (*(_BYTE *)(v8 + 168 * v7 + 52)
        && (v92 = v8 + 168 * v7,
            v93 = *(_DWORD *)(v92 + 48),
            v55 = (uint64_t *)(v92 + 48),
            v57 = HIDWORD(__p.__r_.__value_.__r.__words[1]),
            v93 != HIDWORD(__p.__r_.__value_.__r.__words[1])))
      {
        v71 = " is expected to have a width of ";
        v72 = " but has width ";
      }
      else
      {
        if (!*(_BYTE *)(v8 + 168 * v7 + 60)
          || (v94 = v8 + 168 * v7,
              v95 = *(_DWORD *)(v94 + 56),
              v55 = (uint64_t *)(v94 + 56),
              v57 = __p.__r_.__value_.__r.__words[2],
              v95 == LODWORD(__p.__r_.__value_.__r.__words[2])))
        {
          if (!*v52)
            goto LABEL_356;
          v96 = *v60;
          if ((*v60 & 1) != 0)
          {
            if (v51)
            {
              v211 = sub_23964FC24((int *)(v11 + 32));
              v212 = DWORD2(v299[0]);
              if (v213)
              {
                v99 = v211;
                v214 = (4 * DWORD2(v299[0]));
                if (v211 == v214)
                  goto LABEL_356;
                goto LABEL_359;
              }
            }
            else
            {
              v212 = DWORD2(v299[0]);
            }
            LODWORD(v214) = 4 * v212;
            v99 = 1;
            goto LABEL_359;
          }
          if ((v96 & 2) == 0)
          {
            if ((v96 & 4) == 0
              || (!v51 ? (v99 = 4) : (v97 = sub_23964FC24((int *)(v11 + 32)), v98) ? (v99 = v97) : (v99 = 4),
                  v214 = (4 * DWORD2(v299[0])),
                  v99 == v214))
            {
LABEL_356:
              v292.__r_.__value_.__s.__data_[0] = 0;
              v281[23] = 0;
              v281[0] = 0;
              sub_23957E1BC(a3, &v292, (uint64_t)v281);
              if ((v281[23] & 0x80000000) != 0)
                operator delete(*(void **)v281);
              goto LABEL_124;
            }
LABEL_359:
            sub_23964C114(a3, __p.__r_.__value_.__r.__words[0], v215, v99, v214);
            goto LABEL_124;
          }
          if (v51)
          {
            v216 = sub_23964FC24((int *)(v11 + 32));
            v217 = DWORD2(v299[0]);
            if (v218)
            {
              v99 = v216;
              v214 = (4 * DWORD2(v299[0]));
              if (v216 == v214)
                goto LABEL_356;
              goto LABEL_359;
            }
          }
          else
          {
            v217 = DWORD2(v299[0]);
          }
          LODWORD(v214) = 4 * v217;
          v99 = 2;
          goto LABEL_359;
        }
        v71 = " is expected to have a height of ";
        v72 = " but has height ";
      }
    }
LABEL_123:
    sub_23964BDF4(a3, __p.__r_.__value_.__r.__words[0], v71, *v55, v72, v57);
LABEL_124:
    if (!v308)
      goto LABEL_132;
    nullsub_4(&v303);
    v100 = v302;
    if (v302)
    {
      v101 = (unint64_t *)&v302->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v78 = (std::string *)v301;
LABEL_131:
    nullsub_4(v78);
    goto LABEL_132;
  }
LABEL_372:
  __p.__r_.__value_.__s.__data_[0] = 0;
  v309[23] = 0;
  v309[0] = 0;
  sub_23957E1BC(a3, &__p, (uint64_t)v309);
  if ((v309[23] & 0x80000000) != 0)
  {
    v228 = *(void **)v309;
LABEL_379:
    operator delete(v228);
  }
}

void sub_23964A060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  sub_23964BD78((uint64_t)&STACK[0x400]);
  sub_23948FAF4((uint64_t)&STACK[0x240]);
  sub_23964A77C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_23964A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_23948FC6C((_QWORD *)(v33 - 224));
  sub_23964A77C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_23964A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (SLOBYTE(STACK[0x417]) < 0)
  {
    operator delete((void *)STACK[0x400]);
    if (SLOBYTE(STACK[0x2D7]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x2C0]);
      if (SLOBYTE(STACK[0x357]) < 0)
      {
LABEL_8:
        operator delete((void *)STACK[0x340]);
        if ((SLOBYTE(STACK[0x3D7]) & 0x80000000) == 0)
        {
LABEL_12:
          sub_23948FC6C((_QWORD *)(v33 - 224));
          sub_23964A77C((uint64_t)&a33);
          _Unwind_Resume(a1);
        }
LABEL_11:
        operator delete((void *)STACK[0x3C0]);
        goto LABEL_12;
      }
LABEL_10:
      if ((SLOBYTE(STACK[0x3D7]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (SLOBYTE(STACK[0x2D7]) < 0)
  {
    goto LABEL_5;
  }
  if (SLOBYTE(STACK[0x357]) < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_23964A4FC()
{
  if ((SLOBYTE(STACK[0x3D7]) & 0x80000000) == 0)
    JUMPOUT(0x23964A4E4);
  JUMPOUT(0x23964A4DCLL);
}

void sub_23964A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_23964A77C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_23964A520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 201) < 0)
  {
    operator delete(*(void **)(v33 - 224));
    sub_23964A77C((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x23964A638);
}

void sub_23964A544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 + 23) < 0)
    operator delete(*(void **)v34);
  MEMORY[0x23B83E31C](v34, 0x1012C40EC159624);
  nullsub_4(v33);
  sub_23948FAF4((uint64_t)&STACK[0x240]);
  sub_23964A77C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_23964A59C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = LODWORD(STACK[0x2B8]);
  if ((_DWORD)v1 != -1)
    ((void (*)(uint64_t, unint64_t *))off_250AE2218[v1])(v0 - 224, &STACK[0x240]);
  JUMPOUT(0x23964A638);
}

void sub_23964A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_23964A77C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_23964A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49)
{
  uint64_t v49;
  uint64_t v50;

  if (a49 != -1)
    ((void (*)(uint64_t, uint64_t))off_250AE2218[a49])(v50 - 224, v49);
  _Unwind_Resume(a1);
}

void sub_23964A618()
{
  JUMPOUT(0x23964A620);
}

void sub_23964A648(unint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int64x2_t v4;
  int8x16_t v5;
  char *v6;
  void **v7;
  void *v8;
  void *__p;
  char *v10;
  uint64_t v11;
  std::string v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::to_string(&v12, *a1);
  v3 = sub_23941ACDC(&__p, (uint64_t)&v12);
  v10 = v3;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v3 = v10;
  }
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = (void **)v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_23964A740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23964A77C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250AE2218[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 128) = -1;
  return a1;
}

uint64_t sub_23964A7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  _DWORD v21[5];

  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(_QWORD *)(a1 + 40);
  sub_239644B20(v21, 1, *(_DWORD *)(a1 + 32), v4, 1, 1);
  v16 = 1;
  v17 = v5;
  v18 = HIDWORD(v5) * v4;
  v19 = HIDWORD(v5) * v4;
  v20 = 1;
  v15 = 17;
  v10 = &off_250ADB210;
  sub_239417068(a1, (uint64_t)&v11);
  v14 = 1;
  result = sub_239643F70(a2, 0, v21, &v16, &v15, &v10);
  if (v14)
  {
    nullsub_4(&v13);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return nullsub_4(&v10);
  }
  return result;
}

void sub_23964A8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FA2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23964A8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23964A908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  _DWORD v21[5];

  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(_QWORD *)(a1 + 40);
  sub_239644B20(v21, 1, *(_DWORD *)(a1 + 32), v4, 1, 1);
  v16 = 1;
  v17 = v5;
  v18 = HIDWORD(v5) * v4;
  v19 = HIDWORD(v5) * v4;
  v20 = 1;
  v15 = 33;
  v10 = &off_250ADB210;
  sub_2396467DC(a1, (uint64_t)&v11);
  v14 = 1;
  result = sub_239643F70(a2, 0, v21, &v16, &v15, &v10);
  if (v14)
  {
    nullsub_4(&v13);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return nullsub_4(&v10);
  }
  return result;
}

void sub_23964AA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FA2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23964AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23964AA3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int32x4_t v15;
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 112))
  {
    v4 = (uint64_t *)(a2 + 96);
    if (*(_BYTE *)(a2 + 108))
      v5 = *(_QWORD *)(a2 + 96) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = *(_QWORD *)(a2 + 64);
      v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v6 + 88))(v6, 0, "unknown location");
    }
  }
  else
  {
    v4 = (uint64_t *)(a2 + 40);
  }
  v11 = *v4;
  v12 = 2 * *(_DWORD *)(a2 + 36);
  v15 = vaddq_s32(*(int32x4_t *)(a2 + 20), *(int32x4_t *)(a2 + 20));
  v16 = v12;
  v17 = 1;
  v14 = *(_DWORD *)(a2 + 48);
  return sub_239643F70(a1, v11, a2, &v15, &v14, a2 + 56);
}

uint64_t sub_23964AB44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  _DWORD v21[5];

  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(_QWORD *)(a1 + 40);
  sub_239644B20(v21, 1, *(_DWORD *)(a1 + 32), v4, 1, 1);
  v16 = 1;
  v17 = v5;
  v18 = HIDWORD(v5) * v4;
  v19 = HIDWORD(v5) * v4;
  v20 = 1;
  v15 = 65;
  v10 = &off_250ADB210;
  sub_239581BA8(a1, (uint64_t)&v11);
  v14 = 1;
  result = sub_239643F70(a2, 0, v21, &v16, &v15, &v10);
  if (v14)
  {
    nullsub_4(&v13);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return nullsub_4(&v10);
  }
  return result;
}

void sub_23964AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FA2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23964AC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23964AC78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  _DWORD v23[5];

  v4 = *(_DWORD *)(a1 + 60);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = v5 * v4;
  v7 = *(_QWORD *)(a1 + 44);
  sub_239644B20(v23, 4, *(_DWORD *)(a1 + 56), v4, 1, 1);
  v18 = v7;
  v19 = v5;
  v20 = v6;
  v21 = v6;
  v22 = 1;
  v17 = 20;
  v12 = &off_250ADB210;
  sub_239645FA4(a1, (uint64_t)&v13);
  v16 = 1;
  result = sub_239643F70(a2, 0, v23, &v18, &v17, &v12);
  if (v16)
  {
    nullsub_4(&v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return nullsub_4(&v12);
  }
  return result;
}

void sub_23964AD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23948FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964AD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_23964ADB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  _DWORD v23[5];

  v4 = *(_DWORD *)(a1 + 60);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = v5 * v4;
  v7 = *(_QWORD *)(a1 + 44);
  sub_239644B20(v23, 4, *(_DWORD *)(a1 + 56), v4, 1, 1);
  v18 = v7;
  v19 = v5;
  v20 = v6;
  v21 = v6;
  v22 = 1;
  v17 = 68;
  v12 = &off_250ADB210;
  sub_239647674(a1, (uint64_t)&v13);
  v16 = 1;
  result = sub_239643F70(a2, 0, v23, &v18, &v17, &v12);
  if (v16)
  {
    nullsub_4(&v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return nullsub_4(&v12);
  }
  return result;
}

void sub_23964AEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23948FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964AED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_23964AEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  _DWORD v23[5];

  v4 = *(_DWORD *)(a1 + 60);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = v5 * v4;
  v7 = *(_QWORD *)(a1 + 44);
  sub_239644B20(v23, 4, *(_DWORD *)(a1 + 56), v4, 1, 1);
  v18 = v7;
  v19 = v5;
  v20 = v6;
  v21 = v6;
  v22 = 1;
  v17 = 24;
  v12 = &off_250ADB210;
  sub_239645AB0(a1, (uint64_t)&v13);
  v16 = 1;
  result = sub_239643F70(a2, 0, v23, &v18, &v17, &v12);
  if (v16)
  {
    nullsub_4(&v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return nullsub_4(&v12);
  }
  return result;
}

void sub_23964AFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23948FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964B00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_23964B020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  _DWORD v23[5];

  v4 = *(_DWORD *)(a1 + 60);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = v5 * v4;
  v7 = *(_QWORD *)(a1 + 44);
  sub_239644B20(v23, 4, *(_DWORD *)(a1 + 56), v4, 1, 1);
  v18 = v7;
  v19 = v5;
  v20 = v6;
  v21 = v6;
  v22 = 1;
  v17 = 72;
  v12 = &off_250ADB210;
  sub_239647180(a1, (uint64_t)&v13);
  v16 = 1;
  result = sub_239643F70(a2, 0, v23, &v18, &v17, &v12);
  if (v16)
  {
    nullsub_4(&v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return nullsub_4(&v12);
  }
  return result;
}

void sub_23964B130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23948FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964B144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23964B158()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250AF00C0, (void (*)(void *))std::exception::~exception);
}

uint64_t sub_23964B190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  _DWORD v23[5];

  v4 = *(_DWORD *)(a1 + 60);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = v5 * v4;
  v7 = *(_QWORD *)(a1 + 44);
  sub_239644B20(v23, 2, *(_DWORD *)(a1 + 56), v4, 1, 1);
  v18 = v7;
  v19 = v5;
  v20 = v6;
  v21 = v6;
  v22 = 1;
  v17 = 18;
  v12 = &off_250ADB210;
  sub_23964634C(a1, (uint64_t)&v13);
  v16 = 1;
  result = sub_239643F70(a2, 0, v23, &v18, &v17, &v12);
  if (v16)
  {
    nullsub_4(&v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return nullsub_4(&v12);
  }
  return result;
}

void sub_23964B2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23948FA2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964B2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_23964B2C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int32x4_t v15;
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 112))
  {
    v4 = (uint64_t *)(a2 + 96);
    if (*(_BYTE *)(a2 + 108))
      v5 = *(_QWORD *)(a2 + 96) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = *(_QWORD *)(a2 + 64);
      v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v6 + 88))(v6, 0, "unknown location");
    }
  }
  else
  {
    v4 = (uint64_t *)(a2 + 40);
  }
  v11 = *v4;
  v12 = 4 * *(_DWORD *)(a2 + 36);
  v15 = vshlq_n_s32(*(int32x4_t *)(a2 + 20), 2uLL);
  v16 = v12;
  v17 = 1;
  v14 = *(_DWORD *)(a2 + 48);
  return sub_239643F70(a1, v11, a2, &v15, &v14, a2 + 56);
}

void sub_23964B3D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  std::string v28;
  _BYTE v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964B69C(a1, &v28);
    std::logic_error::logic_error(exception, &v28);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_QWORD *)&v29[4] = v17;
  *(_DWORD *)v29 = 2;
  v18 = *(_QWORD *)v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = v16;
  v19 = HIDWORD(v15);
  if (HIDWORD(v17) * (_DWORD)v19 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v20 = *(_QWORD *)v29;
  v21 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)a2 = v28.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v21;
  if (size)
  {
    v25 = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23964B650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_23964B69C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964B714();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964B714()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930F00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930F00))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23941C2E0();
    sub_23964B918((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964B918((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930EE8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930EE8, &dword_23940C000);
          __cxa_guard_release(&qword_256930F00);
          return &stru_256930EE8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930EE8;
}

void sub_23964B864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930F00);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930F00);
  _Unwind_Resume(a1);
}

void sub_23964B918(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964B9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23964B9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  int *v8;
  int *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  char v23;
  int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  const char *v34;
  void *__p;
  char v36;
  char v37;

  v6 = *(unsigned __int8 *)(a2 + 36);
  if (*(_BYTE *)(a2 + 76))
  {
    v7 = *(_DWORD *)(a3 + 24);
    if (*(_DWORD *)(a2 + 72) != v7)
    {
      v19 = *(_QWORD *)a3;
      v20 = *(_QWORD *)(a2 + 72);
      v21 = " is expected to have a batch-size of ";
      v22 = " but has ";
      goto LABEL_30;
    }
  }
  if (*(_BYTE *)(a2 + 68))
  {
    v7 = *(_DWORD *)(a3 + 20);
    if (*(_DWORD *)(a2 + 64) != v7)
    {
      v19 = *(_QWORD *)a3;
      v20 = *(_QWORD *)(a2 + 64);
      v21 = " is expected to have ";
      v22 = " planes but has ";
      goto LABEL_30;
    }
  }
  v8 = (int *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 44))
    goto LABEL_16;
  if (!*(_BYTE *)(a2 + 36))
  {
    v7 = *(_DWORD *)(a3 + 32);
    if (*(_DWORD *)(a2 + 40) == v7)
      goto LABEL_16;
    v19 = *(_QWORD *)a3;
    v20 = *(_QWORD *)(a2 + 40);
    v21 = " of unspecified format (assumed to be Gray8) is expected to have ";
    v22 = " color components but has an incompatible pixel byte stride of ";
LABEL_30:
    sub_23964BDF4(a1, v19, v21, v20, v22, v7);
    return;
  }
  sub_23964FC24((int *)(a2 + 32));
  v9 = (int *)(a2 + 32);
  if (v10)
  {
    if (sub_23964FC24(v9) != *(_DWORD *)(a3 + 32))
    {
      v11 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      v13 = sub_23964FC24(v8);
      v15 = v14;
      v16 = *(_DWORD *)(a3 + 32);
      v17 = " is expected to have ";
      v18 = " bytes per pixel but has an incompatible pixel byte stride of ";
LABEL_43:
      sub_23964BF78(a1, v11, v17, v12, v13, v15, v18, v16);
      return;
    }
  }
  else
  {
    sub_23964FBE8(v9);
    if (v23 && sub_23964FBE8((int *)(a2 + 32)) != *(_DWORD *)(a3 + 32))
    {
      v11 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      v13 = sub_23964FBE8(v8);
      v15 = v33;
      v16 = *(_DWORD *)(a3 + 32);
      v17 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      v18 = " bytes per value but has an incompatible pixel byte stride of ";
      goto LABEL_43;
    }
  }
LABEL_16:
  if (*(_BYTE *)(a2 + 52))
  {
    v7 = *(_DWORD *)(a3 + 12);
    if (*(_DWORD *)(a2 + 48) != v7)
    {
      v19 = *(_QWORD *)a3;
      v20 = *(_QWORD *)(a2 + 48);
      v21 = " is expected to have a width of ";
      v22 = " but has width ";
      goto LABEL_30;
    }
  }
  if (*(_BYTE *)(a2 + 60))
  {
    v7 = *(_DWORD *)(a3 + 16);
    if (*(_DWORD *)(a2 + 56) != v7)
    {
      v19 = *(_QWORD *)a3;
      v20 = *(_QWORD *)(a2 + 56);
      v21 = " is expected to have a height of ";
      v22 = " but has height ";
      goto LABEL_30;
    }
  }
  if (*(_BYTE *)(a2 + 36))
  {
    v24 = *v8;
    if ((*v8 & 1) == 0)
    {
      if ((v24 & 2) != 0)
      {
        if (v6)
        {
          v31 = sub_23964FC24((int *)(a2 + 32));
          if (v32)
            v27 = v31;
          else
            v27 = 2;
        }
        else
        {
          v27 = 2;
        }
        v30 = *(unsigned int *)(a3 + 32);
        if (v27 == v30)
          goto LABEL_51;
      }
      else
      {
        if ((v24 & 4) == 0)
          goto LABEL_51;
        if (v6)
        {
          v25 = sub_23964FC24((int *)(a2 + 32));
          v27 = v26 ? v25 : 4;
        }
        else
        {
          v27 = 4;
        }
        v30 = *(unsigned int *)(a3 + 32);
        if (v27 == v30)
          goto LABEL_51;
      }
LABEL_54:
      sub_23964C114(a1, *(_QWORD *)a3, v34, v27, v30);
      return;
    }
    if (v6)
    {
      v28 = sub_23964FC24((int *)(a2 + 32));
      if (v29)
        v27 = v28;
      else
        v27 = 1;
      v30 = *(unsigned int *)(a3 + 32);
      if (v27 == v30)
        goto LABEL_51;
      goto LABEL_45;
    }
    v27 = 1;
    v30 = *(unsigned int *)(a3 + 32);
    if (v30 != 1)
    {
LABEL_45:
      goto LABEL_54;
    }
  }
LABEL_51:
  v37 = 0;
  v36 = 0;
  LOBYTE(__p) = 0;
  sub_23957E1BC(a1, &v37, (uint64_t)&__p);
  if (v36 < 0)
    operator delete(__p);
}

void sub_23964BD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23964BD78(uint64_t a1)
{
  __n128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = nullsub_4(a1 + 88);
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v3->__on_zero_shared)(v3, v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_4(a1 + 64);
  }
  return a1;
}

void sub_23964BDF4(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, const char *a5, unsigned int a6)
{
  int64x2_t v7;
  int8x16_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  std::string __p;
  char v16;
  unsigned int v17;
  const char *v18;
  const char *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;

  v21 = "Input ";
  v22 = a4;
  v19 = a3;
  v20 = a2;
  v18 = a5;
  v17 = a6;
  v16 = 3;
  sub_23964C2A0(&v21, &v20, &v19, (uint64_t)&v22, &v18, &v17, &v13);
  v12 = 0;
  LOBYTE(v11) = 0;
  sub_23941AE44((uint64_t)v13, (uint64_t)v14, (uint64_t)&v11, &__p, v7, v8);
  sub_23957E1BC(a1, &v16, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v11);
    v9 = v13;
    if (!v13)
      return;
    goto LABEL_7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
    goto LABEL_6;
LABEL_3:
  v9 = v13;
  if (!v13)
    return;
LABEL_7:
  v10 = (uint64_t)v14;
  if (v14 == v9)
  {
    v14 = v9;
    operator delete(v9);
  }
  else
  {
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while ((void *)v10 != v9);
    v14 = v9;
    operator delete(v13);
  }
}

void sub_23964BF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      sub_23941B08C(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  sub_23941B08C(&a16);
  _Unwind_Resume(a1);
}

void sub_23964BF78(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, unsigned int a8)
{
  int64x2_t v9;
  int8x16_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  std::string __p;
  char v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  const char *v22;
  unint64_t v23;
  const char *v24;
  _QWORD v25[2];
  uint64_t v26;

  v25[1] = a6;
  v26 = a4;
  v24 = "Input ";
  v25[0] = a5;
  v22 = a3;
  v23 = a2;
  v21 = " color components with ";
  v20 = a7;
  v19 = a8;
  v18 = 3;
  sub_23964C96C(&v24, &v23, &v22, (uint64_t)&v26, &v21, (uint64_t)v25, &v20, &v19, &v15);
  v14 = 0;
  LOBYTE(v13) = 0;
  sub_23941AE44((uint64_t)v15, (uint64_t)v16, (uint64_t)&v13, &__p, v9, v10);
  sub_23957E1BC(a1, &v18, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v13);
    v11 = v15;
    if (!v15)
      return;
    goto LABEL_7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v14 < 0)
    goto LABEL_6;
LABEL_3:
  v11 = v15;
  if (!v15)
    return;
LABEL_7:
  v12 = (uint64_t)v16;
  if (v16 == v11)
  {
    v16 = v11;
    operator delete(v11);
  }
  else
  {
    do
    {
      if (*(char *)(v12 - 1) < 0)
        operator delete(*(void **)(v12 - 24));
      v12 -= 24;
    }
    while ((void *)v12 != v11);
    v16 = v11;
    operator delete(v15);
  }
}

void sub_23964C0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      sub_23941B08C(&a15);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  sub_23941B08C(&a15);
  _Unwind_Resume(a1);
}

void sub_23964C114(uint64_t a1, unint64_t a2, const char *a3, unint64_t a4, unsigned int a5)
{
  int64x2_t v6;
  int8x16_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  std::string __p;
  char v15;
  unsigned int v16;
  const char *v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  const char *v21;

  v20 = a2;
  v21 = "Input ";
  v18 = a4;
  v19 = a3;
  v17 = " bytes per pixel but has incompatible pixel byte stride of ";
  v16 = a5;
  v15 = 3;
  sub_23964CDB4(&v21, &v20, &v19, &v18, &v17, &v16, &v12);
  v11 = 0;
  LOBYTE(v10) = 0;
  sub_23941AE44((uint64_t)v12, (uint64_t)v13, (uint64_t)&v10, &__p, v6, v7);
  sub_23957E1BC(a1, &v15, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v10);
    v8 = v12;
    if (!v12)
      return;
    goto LABEL_7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
    goto LABEL_6;
LABEL_3:
  v8 = v12;
  if (!v12)
    return;
LABEL_7:
  v9 = (uint64_t)v13;
  if (v13 == v8)
  {
    v13 = v8;
    operator delete(v8);
  }
  else
  {
    do
    {
      if (*(char *)(v9 - 1) < 0)
        operator delete(*(void **)(v9 - 24));
      v9 -= 24;
    }
    while ((void *)v9 != v8);
    v13 = v8;
    operator delete(v12);
  }
}

void sub_23964C244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      sub_23941B08C(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  sub_23941B08C(&a16);
  _Unwind_Resume(a1);
}

void sub_23964C2A0(const char **a1@<X0>, unint64_t *a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, const char **a5@<X4>, unsigned int *a6@<X5>, _QWORD *a7@<X8>)
{
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string __p;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_23964C500(a1, &v13);
  sub_23964A648(a2, &v14);
  sub_23964C500(a3, &v15);
  sub_23964C5E8(a4, &v16);
  sub_23964C500(a5, &v17);
  sub_23957F964(a6, &__p);
  sub_23941B674(a7, (uint64_t)&v13, 6uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_12:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_23964C430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0)
LABEL_14:
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_23964C4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  void **v10;

  while (1)
  {
    if (*((char *)v10 - 1) < 0)
      operator delete(*(v10 - 3));
    v10 -= 3;
    if (v10 == (void **)&a10)
      JUMPOUT(0x23964C4CCLL);
  }
}

void sub_23964C500(const char **a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  void *__p;
  char v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v9 = sub_23964C73C(&v8, a1);
  v12 = 0;
  LOBYTE(__p) = 0;
  sub_23941AE44((uint64_t)v8, (uint64_t)v9, (uint64_t)&__p, a2, v3, v4);
  if (v12 < 0)
    operator delete(__p);
  v5 = (char *)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*(v6 - 1) < 0)
          operator delete(*((void **)v6 - 3));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_23964C5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_23964C5E8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int64x2_t v4;
  int8x16_t v5;
  char *v6;
  void **v7;
  void *v8;
  void *__p;
  char *v10;
  uint64_t v11;
  std::string v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  if (*(_BYTE *)(a1 + 4))
  {
    std::to_string(&v12, *(_DWORD *)a1);
    v3 = sub_23941ACDC(&__p, (uint64_t)&v12);
    v10 = v3;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      v3 = v10;
    }
  }
  else
  {
    v3 = sub_239628298(&__p, "nullopt");
    v10 = v3;
  }
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = (void **)v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_23964C700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

char *sub_23964C73C(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (char *)*a1;
      v15 = (char *)a1[1];
      if (v15 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 24);
    *((_QWORD *)v12 - 1) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    *((_QWORD *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 24;
    }
    while (v15 != v20);
    v15 = v20;
  }
LABEL_28:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_23964C958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23964C96C(const char **a1@<X0>, unint64_t *a2@<X1>, const char **a3@<X2>, uint64_t a4@<X3>, const char **a5@<X4>, uint64_t a6@<X5>, const char **a7@<X6>, unsigned int *a8@<X7>, _QWORD *a9@<X8>)
{
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string __p;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_23964C500(a1, &v17);
  sub_23964A648(a2, &v18);
  sub_23964C500(a3, &v19);
  sub_23964C5E8(a4, &v20);
  sub_23964C500(a5, &v21);
  sub_23964CC60(a6, &v22);
  sub_23964C500(a7, &v23);
  sub_23957F964(a8, &__p);
  sub_23941B674(a9, (uint64_t)&v17, 8uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_16:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
}

void sub_23964CB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0)
  {
    operator delete(__p);
    if ((a51 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a45 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a51 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a46);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a40);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a15 & 0x80000000) == 0)
LABEL_18:
      _Unwind_Resume(exception_object);
LABEL_17:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_16:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_18;
  goto LABEL_17;
}

void sub_23964CC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  void **v10;

  while (1)
  {
    if (*((char *)v10 - 1) < 0)
      operator delete(*(v10 - 3));
    v10 -= 3;
    if (v10 == (void **)&a10)
      JUMPOUT(0x23964CC2CLL);
  }
}

void sub_23964CC60(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int64x2_t v4;
  int8x16_t v5;
  char *v6;
  void **v7;
  void *v8;
  void *__p;
  char *v10;
  uint64_t v11;
  std::string v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    std::to_string(&v12, *(_QWORD *)a1);
    v3 = sub_23941ACDC(&__p, (uint64_t)&v12);
    v10 = v3;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      v3 = v10;
    }
  }
  else
  {
    v3 = sub_239628298(&__p, "nullopt");
    v10 = v3;
  }
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = (void **)v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_23964CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_23964CDB4(const char **a1@<X0>, unint64_t *a2@<X1>, const char **a3@<X2>, unint64_t *a4@<X3>, const char **a5@<X4>, unsigned int *a6@<X5>, _QWORD *a7@<X8>)
{
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string __p;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_23964C500(a1, &v13);
  sub_23964A648(a2, &v14);
  sub_23964C500(a3, &v15);
  sub_23964A648(a4, &v16);
  sub_23964C500(a5, &v17);
  sub_23957F964(a6, &__p);
  sub_23941B674(a7, (uint64_t)&v13, 6uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_12:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_23964CF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0)
LABEL_14:
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_23964CFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  void **v10;

  while (1)
  {
    if (*((char *)v10 - 1) < 0)
      operator delete(*(v10 - 3));
    v10 -= 3;
    if (v10 == (void **)&a10)
      JUMPOUT(0x23964CFE0);
  }
}

void sub_23964D014(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _BOOL8 v11;
  _BOOL4 v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::logic_error *exception;
  std::string v24;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964D274(a1, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v24.__r_.__value_.__r.__words[0] = v4;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_DWORD *)(a1 + 24);
  v11 = v10 != 0;
  v12 = v10 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v12 = 1;
  v13 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  v14 = !v12;
  if (v12)
    v13 = 0;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v15 = 0;
  if (HIDWORD(v15) * HIDWORD(v13) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = v13 | v11;
  v18 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
  }
}

void sub_23964D228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_23964D274(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964D2EC();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964D2EC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930F20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930F20))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23964D5C0();
    sub_23964D4F0((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964D4F0((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930F08, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930F08, &dword_23940C000);
          __cxa_guard_release(&qword_256930F20);
          return &stru_256930F08;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930F08;
}

void sub_23964D43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930F20);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930F20);
  _Unwind_Resume(a1);
}

void sub_23964D4F0(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964D584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23964D5C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930F40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930F40))
    return &xmmword_256930F28;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16f]", &xmmword_256930F28);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930F28, &dword_23940C000);
  __cxa_guard_release(&qword_256930F40);
  return &xmmword_256930F28;
}

void sub_23964D650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930F40);
  _Unwind_Resume(a1);
}

void sub_23964D668(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _BOOL8 v11;
  _BOOL4 v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::logic_error *exception;
  std::string v24;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964D8C8(a1, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v24.__r_.__value_.__r.__words[0] = v4;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_DWORD *)(a1 + 24);
  v11 = v10 != 0;
  v12 = v10 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v12 = 1;
  v13 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v14 = !v12;
  if (v12)
    v13 = 0;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v15 = 0;
  if (HIDWORD(v15) * HIDWORD(v13) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = v13 | v11;
  v18 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
  }
}

void sub_23964D87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_23964D8C8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964D940();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964D940()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930F60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930F60))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_239542650();
    sub_23964DB44((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964DB44((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930F48, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930F48, &dword_23940C000);
          __cxa_guard_release(&qword_256930F60);
          return &stru_256930F48;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930F48;
}

void sub_23964DA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930F60);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930F60);
  _Unwind_Resume(a1);
}

void sub_23964DB44(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964DBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23964DC14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  std::string v28;
  _BYTE v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964DEE0(a1, &v28);
    std::logic_error::logic_error(exception, &v28);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_QWORD *)&v29[4] = v17;
  *(_DWORD *)v29 = 4;
  v18 = *(_QWORD *)v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = v16;
  v19 = HIDWORD(v15);
  if (HIDWORD(v17) * (_DWORD)v19 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v20 = *(_QWORD *)v29;
  v21 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)a2 = v28.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v21;
  if (size)
  {
    v25 = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23964DE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_23964DEE0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964DF58();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964DF58()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930F80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930F80))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23964E22C();
    sub_23964E15C((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964E15C((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930F68, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930F68, &dword_23940C000);
          __cxa_guard_release(&qword_256930F80);
          return &stru_256930F68;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930F68;
}

void sub_23964E0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930F80);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930F80);
  _Unwind_Resume(a1);
}

void sub_23964E15C(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964E1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23964E22C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930FA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930FA0))
    return &xmmword_256930F88;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra8u]", &xmmword_256930F88);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930F88, &dword_23940C000);
  __cxa_guard_release(&qword_256930FA0);
  return &xmmword_256930F88;
}

void sub_23964E2BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930FA0);
  _Unwind_Resume(a1);
}

void sub_23964E2D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  std::string v28;
  _BYTE v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 28)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964E5A4(a1, &v28);
    std::logic_error::logic_error(exception, &v28);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_QWORD *)&v29[4] = v17;
  *(_DWORD *)v29 = 4;
  v18 = *(_QWORD *)v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = v16;
  v19 = HIDWORD(v15);
  if (HIDWORD(v17) * (_DWORD)v19 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v20 = *(_QWORD *)v29;
  v21 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)a2 = v28.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v21;
  if (size)
  {
    v25 = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23964E558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_23964E5A4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964E61C();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964E61C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930FC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930FC0))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23964E8F0();
    sub_23964E820((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964E820((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930FA8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930FA8, &dword_23940C000);
          __cxa_guard_release(&qword_256930FC0);
          return &stru_256930FA8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930FA8;
}

void sub_23964E76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930FC0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930FC0);
  _Unwind_Resume(a1);
}

void sub_23964E820(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964E8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23964E8F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930FE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930FE0))
    return &xmmword_256930FC8;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra32f]", &xmmword_256930FC8);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930FC8, &dword_23940C000);
  __cxa_guard_release(&qword_256930FE0);
  return &xmmword_256930FC8;
}

void sub_23964E980(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930FE0);
  _Unwind_Resume(a1);
}

void sub_23964E998(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  std::string v28;
  _BYTE v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 29)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964EC64(a1, &v28);
    std::logic_error::logic_error(exception, &v28);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_QWORD *)&v29[4] = v17;
  *(_DWORD *)v29 = 4;
  v18 = *(_QWORD *)v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = v16;
  v19 = HIDWORD(v15);
  if (HIDWORD(v17) * (_DWORD)v19 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v20 = *(_QWORD *)v29;
  v21 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)a2 = v28.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v21;
  if (size)
  {
    v25 = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23964EC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_23964EC64(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964ECDC();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964ECDC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256931000);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256931000))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23962144C();
    sub_23964EEE0((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964EEE0((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930FE8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930FE8, &dword_23940C000);
          __cxa_guard_release(&qword_256931000);
          return &stru_256930FE8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930FE8;
}

void sub_23964EE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256931000);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256931000);
  _Unwind_Resume(a1);
}

void sub_23964EEE0(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964EF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23964EFB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  std::string v28;
  _BYTE v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23964F280(a1, &v28);
    std::logic_error::logic_error(exception, &v28);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_QWORD *)&v29[4] = v17;
  *(_DWORD *)v29 = 4;
  v18 = *(_QWORD *)v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = v16;
  v19 = HIDWORD(v15);
  if (HIDWORD(v17) * (_DWORD)v19 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v20 = *(_QWORD *)v29;
  v21 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)a2 = v28.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v21;
  if (size)
  {
    v25 = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23964F234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_23964F280(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23964F2F8();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23964F2F8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256931020);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256931020))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23960A93C();
    sub_23964F4FC((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23964F4FC((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256931008, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256931008, &dword_23940C000);
          __cxa_guard_release(&qword_256931020);
          return &stru_256931008;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256931008;
}

void sub_23964F448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256931020);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256931020);
  _Unwind_Resume(a1);
}

void sub_23964F4FC(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23964F590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23964F5CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_239664D74(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_23964F5D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_239664E90(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

_QWORD *sub_23964F5DC(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *result = *a2;
  result[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a3;
  *a3 = 0;
  result[2] = v6;
  if (!*a2)
  {
    v7 = 38;
    goto LABEL_9;
  }
  if (!v6)
  {
    v7 = 39;
LABEL_9:
    sub_239A444D4((uint64_t)"unknown file", v7, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  return result;
}

void sub_23964F668(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23964F698(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_23964F718(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  *(_QWORD *)a1 = off_250AE2258;
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    a1 = v1;
  }
  return nullsub_4(a1);
}

void sub_23964F764(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AE2258;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23964F7B4(_QWORD *a1, int a2)
{
  return sub_239458500(a1, (uint64_t)(&off_250AE2268)[2 * a2], 3);
}

uint64_t sub_23964F7CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = sub_2396504B0((_QWORD *)a1, a2);
  *v5 = &off_250AE22B8;
  sub_23964FA74((uint64_t)(v5 + 16), a3);
  v6 = *(_QWORD *)(a3 + 32);
  *(_WORD *)(a1 + 168) = *(_WORD *)(a3 + 40);
  *(_QWORD *)(a1 + 160) = v6;
  return a1;
}

void sub_23964F818(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2396504E0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23964F82C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250AE22B8;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  return sub_2396504E0((_QWORD *)a1);
}

_QWORD *sub_23964F870(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250AE22B8;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  return sub_2396504E0((_QWORD *)a1);
}

void sub_23964F8B4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250AE22B8;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  sub_2396504E0((_QWORD *)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23964F90C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;
  uint64_t result;
  void *__p[3];
  char v14;
  uint64_t v15;
  __int16 v16;
  _BYTE v17[120];
  uint64_t v18;
  uint64_t (**v19)();
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  sub_23949021C((uint64_t)v17, (uint64_t *)(a1 + 8));
  sub_23964FA74((uint64_t)__p, a1 + 128);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_WORD *)(a1 + 168);
  sub_239651BAC((uint64_t)v17, (uint64_t)__p, &v18);
  if (v14 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_239496C54((uint64_t)v17);
  v4 = v18;
  v18 = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = &off_250ADC870;
  *(_BYTE *)(a2 + 16) = v20;
  v5 = v22;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v22;
    v19 = &off_250ADC870;
    if (v22)
    {
      v9 = (unint64_t *)&v22->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v19 = &off_250ADC870;
  }
  v11 = nullsub_4(&v19);
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v11);
  return result;
}

void sub_23964FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a12)
  {
    if (__p)
    {
      operator delete(__p);
      sub_239496C54((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  sub_239496C54((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_23964FA74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v5 >> 2)) >= 0x924924924924925)
        sub_2394189F8();
      v6 = (char *)operator new(v5);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[4 * (v5 >> 2)];
      *(_QWORD *)(a1 + 16) = v7;
      memcpy(v6, v4, v5 - 2);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_23964FB2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_23964FB60(_DWORD *a1)
{
  return ((*a1 >> 1) & 1) + (*a1 & 1) + ((*a1 >> 2) & 1) + ((*a1 >> 3) & 1u) <= 1
      && ((*a1 >> 4) & 1) + ((*a1 >> 5) & 1) + ((*a1 >> 6) & 1u) < 2;
}

uint64_t sub_23964FBB0(_DWORD *a1)
{
  if ((*a1 & 1) != 0)
    return 1;
  if ((*a1 & 2) != 0)
    return 2;
  return 4 * ((*a1 & 0xC) != 0);
}

unint64_t sub_23964FBE8(int *a1)
{
  int v1;

  v1 = *a1;
  if ((*a1 & 0x10) != 0)
    return 1;
  if ((v1 & 0x20) != 0)
    return 2;
  return (unint64_t)(v1 & 0x40) >> 4;
}

uint64_t sub_23964FC24(int *a1)
{
  int v1;
  unsigned int v2;
  unint64_t v3;

  v1 = *a1;
  if ((*a1 & 1) != 0)
  {
    v2 = 1;
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    return v2;
  }
  if ((v1 & 2) != 0)
  {
    v2 = 2;
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    return v2;
  }
  if ((v1 & 0xC) == 0)
    return 0;
  v2 = 4;
  if ((v1 & 0x10) != 0)
    return v2;
LABEL_7:
  if ((v1 & 0x20) != 0)
    return 2 * v2;
  v3 = v1 & 0x40;
  if ((_DWORD)v3)
    return (v3 >> 4) * (unint64_t)v2;
  return 0;
}

void sub_23964FC9C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v6;
  __int128 *v7;
  void *v8;
  int v9;
  __int128 v10;
  std::string v11;
  _OWORD __dst[2];
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(a1 + 48) - v4) >> 3) <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_23964A648(&v13, &v11);
  v6 = std::string::insert(&v11, 0, "input__");
  v7 = (__int128 *)(v4 + 168 * a2);
  v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((_BYTE *)v7 + 24))
  {
    *(_QWORD *)&__dst[0] = v8;
    *((_QWORD *)&__dst[0] + 1) = v14[0];
    *(_QWORD *)((char *)__dst + 15) = *(_QWORD *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  *(_BYTE *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_23964FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (v16 < 0)
    operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23964FE94(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v6;
  __int128 *v7;
  void *v8;
  int v9;
  __int128 v10;
  std::string v11;
  _OWORD __dst[2];
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = *(_QWORD *)(a1 + 64);
  if (a2 >= (*(_QWORD *)(a1 + 72) - v4) >> 5)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_23964A648(&v13, &v11);
  v6 = std::string::insert(&v11, 0, "output__");
  v7 = (__int128 *)(v4 + 32 * a2);
  v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((_BYTE *)v7 + 24))
  {
    *(_QWORD *)&__dst[0] = v8;
    *((_QWORD *)&__dst[0] + 1) = v14[0];
    *(_QWORD *)((char *)__dst + 15) = *(_QWORD *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  *(_BYTE *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_239650034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (v16 < 0)
    operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239650070()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v0, (uint64_t)".", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v1, (uint64_t)".", 1);
  return std::ostream::operator<<();
}

uint64_t sub_2396500C0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v5;
  __int128 v6;

  v5 = sub_2396504B0((_QWORD *)a1, a2);
  *v5 = off_250AE2310;
  *((_BYTE *)v5 + 128) = 0;
  *((_BYTE *)v5 + 152) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_23941A7F8((_BYTE *)v5 + 128, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v6 = *a3;
      v5[18] = *((_QWORD *)a3 + 2);
      *((_OWORD *)v5 + 8) = v6;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_OWORD *)(a1 + 160) = a3[2];
  return a1;
}

void sub_239650148(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 152))
  {
    if (*(char *)(v1 + 151) < 0)
      operator delete(*v2);
  }
  sub_2396504E0((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239650174(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v5;
  __int128 v6;

  v5 = sub_2396504B0((_QWORD *)a1, a2);
  *v5 = off_250AE2310;
  *((_BYTE *)v5 + 128) = 0;
  *((_BYTE *)v5 + 152) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_23941A7F8((_BYTE *)v5 + 128, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v6 = *a3;
      v5[18] = *((_QWORD *)a3 + 2);
      *((_OWORD *)v5 + 8) = v6;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_OWORD *)(a1 + 160) = a3[2];
  return a1;
}

void sub_2396501FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 152))
  {
    if (*(char *)(v1 + 151) < 0)
      operator delete(*v2);
  }
  sub_2396504E0((_QWORD *)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239650228(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AE2310;
  if (!*(_BYTE *)(a1 + 152) || (*(char *)(a1 + 151) & 0x80000000) == 0)
    return sub_2396504E0((_QWORD *)a1);
  operator delete(*(void **)(a1 + 128));
  return sub_2396504E0((_QWORD *)a1);
}

_QWORD *sub_23965027C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AE2310;
  if (!*(_BYTE *)(a1 + 152) || (*(char *)(a1 + 151) & 0x80000000) == 0)
    return sub_2396504E0((_QWORD *)a1);
  operator delete(*(void **)(a1 + 128));
  return sub_2396504E0((_QWORD *)a1);
}

void sub_2396502D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AE2310;
  if (*(_BYTE *)(a1 + 152) && *(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  sub_2396504E0((_QWORD *)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239650328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  void *__p[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  _BYTE v16[120];
  uint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  sub_23949021C((uint64_t)v16, (uint64_t *)(a1 + 8));
  LOBYTE(__p[0]) = 0;
  v14 = 0;
  if (*(_BYTE *)(a1 + 152))
  {
    if (*(char *)(a1 + 151) < 0)
    {
      sub_23941A7F8(__p, *(void **)(a1 + 128), *(_QWORD *)(a1 + 136));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 128);
      v13 = *(_QWORD *)(a1 + 144);
    }
    v14 = 1;
  }
  v15 = *(_OWORD *)(a1 + 160);
  sub_239665AA8((uint64_t)v16, &v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  sub_239496C54((uint64_t)v16);
  v4 = v17;
  v17 = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = &off_250ADC870;
  *(_BYTE *)(a2 + 16) = v19;
  v5 = v21;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v21;
    v18 = &off_250ADC870;
    if (v21)
    {
      v9 = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v18 = &off_250ADC870;
  }
  nullsub_4(&v18);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_239650480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  sub_239496C54((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396504B0(_QWORD *a1, uint64_t *a2)
{
  *a1 = off_250AE2350;
  sub_23949021C((uint64_t)(a1 + 1), a2);
  return a1;
}

_QWORD *sub_2396504E0(_QWORD *a1)
{
  *a1 = off_250AE2350;
  sub_239496C54((uint64_t)(a1 + 1));
  return a1;
}

_QWORD *sub_239650518(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_250AE2378;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_239650560(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__thread_struct *v15;
  char *v16;
  int v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::future<void> v33;
  void *v34[2];
  uint64_t v35;
  pthread_t v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  __int128 __p;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v37 = a1;
  v5 = v38;
  v6 = (_QWORD *)a3[3];
  if (!v6)
  {
    v39 = 0;
    v40 = a1;
    v7 = v41;
    goto LABEL_9;
  }
  if (v6 == a3)
  {
    v39 = v38;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v38);
    v6 = v39;
    v40 = v37;
    v7 = v41;
    if (v39)
      goto LABEL_7;
LABEL_9:
    v42 = v6;
    goto LABEL_10;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v39 = v6;
  v40 = a1;
  v7 = v41;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  if (v6 != v38)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_9;
  }
  v42 = v41;
  (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v41);
LABEL_10:
  sub_239651624(v34, a2);
  v43 = v40;
  v8 = &v43;
  v9 = v44;
  if (!v42)
  {
LABEL_13:
    v8[4] = 0;
    goto LABEL_15;
  }
  if (v42 != v41)
  {
    v8 = &v40;
    v45 = v42;
    goto LABEL_13;
  }
  v45 = v44;
  (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v44);
LABEL_15:
  __p = *(_OWORD *)v34;
  v47 = v35;
  v34[1] = 0;
  v35 = 0;
  v34[0] = 0;
  v10 = operator new();
  v11 = v10;
  *(_QWORD *)(v10 + 8) = 0;
  v12 = (unint64_t *)(v10 + 8);
  *(_QWORD *)v10 = &off_250AE2400;
  v13 = v45;
  *(_QWORD *)(v10 + 144) = v43;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 850045863;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 1018212795;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 124) = 0u;
  if (!v13)
  {
    v14 = (_QWORD *)(v10 + 176);
    goto LABEL_19;
  }
  if (v13 != v44)
  {
    v14 = &v45;
    *(_QWORD *)(v10 + 176) = v13;
LABEL_19:
    *v14 = 0;
    goto LABEL_21;
  }
  *(_QWORD *)(v10 + 176) = v10 + 152;
  (*(void (**)(_QWORD *))(v44[0] + 24))(v44);
LABEL_21:
  *(_OWORD *)(v11 + 184) = __p;
  *(_QWORD *)(v11 + 200) = v47;
  v47 = 0;
  __p = 0uLL;
  v15 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v15);
  v16 = (char *)operator new();
  *(_QWORD *)v16 = v15;
  *(_OWORD *)(v16 + 8) = xmmword_239EC93E0;
  *((_QWORD *)v16 + 3) = v11;
  v17 = pthread_create(&v36, 0, (void *(__cdecl *)(void *))sub_239651510, v16);
  if (v17)
  {
    std::__throw_system_error(v17, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x239650954);
  }
  std::thread::detach((std::thread *)&v36);
  std::thread::~thread((std::thread *)&v36);
  std::future<void>::future(&v33, (std::__assoc_sub_state *)v11);
  do
    v18 = __ldaxr(v12);
  while (__stlxr(v18 - 1, v12));
  if (v18)
  {
    v19 = (void *)__p;
    if ((_QWORD)__p)
      goto LABEL_26;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v19 = (void *)__p;
    if ((_QWORD)__p)
    {
LABEL_26:
      v20 = *((_QWORD *)&__p + 1);
      v21 = v19;
      if (*((void **)&__p + 1) != v19)
      {
        do
        {
          v22 = (void *)(v20 - 128);
          v23 = *(unsigned int *)(v20 - 8);
          if ((_DWORD)v23 != -1)
            ((void (*)(pthread_t *, uint64_t))off_250AE2438[v23])(&v36, v20 - 128);
          *(_DWORD *)(v20 - 8) = -1;
          v20 -= 128;
        }
        while (v22 != v19);
        v21 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v19;
      operator delete(v21);
      v24 = v45;
      if (v45 == v44)
        goto LABEL_33;
      goto LABEL_36;
    }
  }
  v24 = v45;
  if (v45 == v44)
  {
LABEL_33:
    v25 = 4;
    goto LABEL_38;
  }
LABEL_36:
  if (!v24)
    goto LABEL_39;
  v25 = 5;
  v9 = v24;
LABEL_38:
  (*(void (**)(_QWORD *))(*v9 + 8 * v25))(v9);
LABEL_39:
  v26 = (char *)v34[0];
  if (v34[0])
  {
    v27 = (char *)v34[1];
    v28 = v34[0];
    if (v34[1] != v34[0])
    {
      do
      {
        v29 = v27 - 128;
        v30 = *((unsigned int *)v27 - 2);
        if ((_DWORD)v30 != -1)
          ((void (*)(pthread_t *, char *))off_250AE2438[v30])(&v36, v27 - 128);
        *((_DWORD *)v27 - 2) = -1;
        v27 -= 128;
      }
      while (v29 != v26);
      v28 = v34[0];
    }
    v34[1] = v26;
    operator delete(v28);
  }
  if (v42 == v41)
  {
    v31 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_54;
    v31 = 5;
    v7 = v42;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v31))(v7);
LABEL_54:
  std::future<void>::~future(&v33);
  if (v39 == v38)
  {
    v32 = 4;
  }
  else
  {
    if (!v39)
      return;
    v32 = 5;
    v5 = v39;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v32))(v5);
}

void sub_239650EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, char *a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,char *__p,char *a32)
{
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  v38 = __p;
  if (__p)
  {
    v39 = a32;
    v40 = __p;
    if (a32 != __p)
    {
      do
      {
        v41 = v39 - 128;
        v42 = *((unsigned int *)v39 - 2);
        if ((_DWORD)v42 != -1)
          ((void (*)(char *, char *))off_250AE2438[v42])(&a15, v39 - 128);
        *((_DWORD *)v39 - 2) = -1;
        v39 -= 128;
      }
      while (v41 != v38);
      v40 = __p;
    }
    a32 = v38;
    operator delete(v40);
  }
  if (a30 == v34)
  {
    v43 = 4;
  }
  else
  {
    if (!a30)
      goto LABEL_17;
    v43 = 5;
    v34 = a30;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v43))(v34);
LABEL_17:
  if (a11)
  {
    v44 = a12;
    v45 = a11;
    if (a12 != a11)
    {
      do
      {
        v46 = v44 - 128;
        v47 = *((unsigned int *)v44 - 2);
        if ((_DWORD)v47 != -1)
          ((void (*)(char *, char *))off_250AE2438[v47])(&a15, v44 - 128);
        *((_DWORD *)v44 - 2) = -1;
        v44 -= 128;
      }
      while (v46 != a11);
      v45 = a11;
    }
    operator delete(v45);
  }
  if (a25 == v33)
  {
    v48 = 4;
  }
  else
  {
    if (!a25)
      goto LABEL_30;
    v48 = 5;
    v33 = a25;
  }
  (*(void (**)(_QWORD *))(*v33 + 8 * v48))(v33);
LABEL_30:
  if (a20 == v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    _Unwind_Resume(a1);
  }
  if (a20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 40))(a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2396510D4);
}

void sub_2396510C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2396510CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

uint64_t sub_2396510E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0, 0);
}

void sub_2396510F8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x23B83DB6C](exception, "Instance does not support view returns");
  __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_239651134(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239651148()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x23B83DB6C](exception, "Model does not support runtime configurations");
  __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_239651184(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239651198()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x23B83DB6C](exception, "Model does not support runtime configurations");
  __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_2396511D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396511E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_250AE2400;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_250AE2438[v6])(&v9, v3 - 128);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_13;
  }
  if (v7)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2396512F8(uint64_t a1)
{
  sub_2396511E8(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23965131C(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  std::__assoc_sub_state::__on_zero_shared(a1);
}

void sub_239651344(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[3];
  std::__shared_weak_count *v14;
  void *__p;
  char *v16;
  char v17;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(v13, *(_QWORD *)(a1 + 144), a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    sub_2394172E0();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v13);
  if (v17)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v16;
      v5 = __p;
      if (v16 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = nullsub_4(v4 - 40);
            v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v7)
            {
              p_shared_owners = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(p_shared_owners);
              while (__stlxr(v9 - 1, p_shared_owners));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            nullsub_4(v4 - 64);
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v16 = v3;
      operator delete(v5);
    }
  }
  v13[0] = &off_250ADC870;
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  nullsub_4(v13);
  std::__assoc_sub_state::set_value((std::__assoc_sub_state *)a1);
}

void sub_23965148C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::__assoc_sub_state *v24;
  std::exception_ptr v26;
  std::exception_ptr v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  if (v30)
    sub_239EC1358(&v29);
  sub_239EC1308(&v28);
  __cxa_begin_catch(a1);
  std::current_exception();
  v26.__ptr_ = &v27;
  std::__assoc_sub_state::set_exception(v24, v26);
  std::exception_ptr::~exception_ptr(&v27);
  __cxa_end_catch();
}

void sub_2396514F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239651510(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  void (*v4)(_QWORD *);
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  uint64_t v8;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(void (**)(_QWORD *))(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(void (**)(_QWORD *))(*v6 + v4);
  v4(v6);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    v8 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v8, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_2396515A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396515BC((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2396515BC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0xA0C40F20CD8FBLL);
  }
  return a1;
}

_QWORD *sub_239651624(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[128 * (v6 >> 7)];
    a1[1] = sub_239651744(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_2396516C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v20;

  v13[1] = v14;
  v16 = (char *)*v13;
  if (*v13)
  {
    v17 = (char *)v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        v19 = v17 - 128;
        v20 = *((unsigned int *)v17 - 2);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, char *))off_250AE2438[v20])(&a13, v17 - 128);
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 128;
      }
      while (v19 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239651744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[3];

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_BYTE *)v8 = 0;
      *(_DWORD *)(v8 + 120) = -1;
      v9 = *(unsigned int *)(a2 + v7 + 120);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(_BYTE *, uint64_t))off_250AE2450[v9])(v11, a4 + v7);
        *(_DWORD *)(v8 + 120) = v9;
      }
      v7 += 128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2396517F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = *(unsigned int *)(v13 + v14 + 120);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_250AE2438[v16])(&a12, v13 + v14);
  for (*(_DWORD *)(v13 + v14 + 120) = -1; v14; v14 -= 128)
  {
    v17 = v13 + v14;
    v18 = *(unsigned int *)(v13 + v14 - 8);
    if ((_DWORD)v18 != -1)
      ((void (*)(char *, uint64_t))off_250AE2438[v18])(&a13, v17 - 128);
    *(_DWORD *)(v17 - 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void sub_239651874(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_250AE2478;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_250AE2438[v6])(&v9, v3 - 128);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_13;
  }
  if (v7)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_239651984(uint64_t a1)
{
  sub_239651874(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396519A8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[3];
  std::__shared_weak_count *v14;
  void *__p;
  char *v16;
  char v17;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(v13, *(_QWORD *)(a1 + 144), a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    sub_2394172E0();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v13);
  if (v17)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v16;
      v5 = __p;
      if (v16 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = nullsub_4(v4 - 40);
            v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v7)
            {
              p_shared_owners = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(p_shared_owners);
              while (__stlxr(v9 - 1, p_shared_owners));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            nullsub_4(v4 - 64);
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v16 = v3;
      operator delete(v5);
    }
  }
  v13[0] = &off_250ADC870;
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  nullsub_4(v13);
  std::__assoc_sub_state::set_value((std::__assoc_sub_state *)a1);
}

void sub_239651AF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::__assoc_sub_state *v24;
  std::exception_ptr v26;
  std::exception_ptr v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  if (v30)
    sub_239EC1358(&v29);
  sub_239EC1308(&v28);
  __cxa_begin_catch(a1);
  std::current_exception();
  v26.__ptr_ = &v27;
  std::__assoc_sub_state::set_exception(v24, v26);
  std::exception_ptr::~exception_ptr(&v27);
  __cxa_end_catch();
}

void sub_239651B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239651B74()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

uint64_t sub_239651B84()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_239651B9C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_239651BAC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  uint64_t plan;
  uint64_t v25;
  unsigned int v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  std::string *v44;
  _QWORD *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string::size_type *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  float v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  std::string::size_type v97;
  std::string *v98;
  __int128 v99;
  int v100;
  _BYTE *v101;
  __int128 v102;
  std::string::size_type v103;
  _BYTE *v104;
  std::string::size_type v105;
  std::string::size_type v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  std::string::size_type v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  std::string::size_type v117;
  __int128 v118;
  std::string::size_type v119;
  char *v120;
  std::string::size_type v121;
  __int128 v122;
  unsigned int v123;
  std::string *v124;
  __int128 v125;
  void *v126;
  unsigned int blob_dimensions;
  std::string *v128;
  __int128 v129;
  std::string::size_type v130;
  std::string::size_type v131;
  std::string::size_type v132;
  std::string *v133;
  uint64_t v134;
  std::string *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  std::string v140;
  std::string v141;
  __int128 v142;
  int v143;
  unint64_t v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  __int128 v150;
  void *__dst[2];
  uint64_t v152;
  std::string v153;
  _BYTE __p[32];
  int v155;
  uint64_t v156[3];
  __int128 v157;
  std::string::size_type v158;
  _QWORD *v159;
  _QWORD v160[2];
  std::string v161;
  std::string v162;
  std::string *v163;
  std::string v164;
  std::string *v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 39) < 0)
  {
    sub_23941A7F8(__dst, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 16);
    v152 = *(_QWORD *)(a1 + 32);
  }
  sub_239653738(&v153);
  v6 = (int *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 32);
  v8 = *(unsigned __int8 *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 36);
  v10 = !sub_239664730();
  if (v7 > 1)
    LOBYTE(v10) = 1;
  if (v10 || v9 >= 2 && &__p[4] - __p == 4)
  {
    if (!v8)
    {
      if ((v7 | 2) == 2)
      {
        if (v9 < 2)
          goto LABEL_27;
        if (v9 == 2)
        {
          if (&__p[4] - __p != 8)
            goto LABEL_27;
        }
        else if (&__p[8] - __p != 8)
        {
          goto LABEL_27;
        }
      }
      if (v7 == 3 || !v7)
      {
        if (v9 < 2)
          goto LABEL_27;
        if (v9 == 2)
        {
          if (&__p[4] - __p != 8)
            goto LABEL_27;
        }
        else if (&__p[8] - __p != 8)
        {
          goto LABEL_27;
        }
      }
    }
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_239EC9590;
    strcpy(*(char **)__p, "Either requested device or storage type not supported");
    sub_23965381C(a3, (uint64_t)__dst, (uint64_t)__p);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_263;
    v11 = *(void **)__p;
    goto LABEL_87;
  }
LABEL_27:
  if (*v6)
  {
    v12 = sub_239664C0C(*v6);
    if (v12)
      goto LABEL_29;
LABEL_34:
    sub_239653A84((int *)(a2 + 32), &v161);
    v16 = std::string::insert(&v161, 0, "Could not create espresso context for ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v162, ": ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v164.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    sub_239653B68(&v140, 0);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v140;
    else
      v20 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    else
      size = v140.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v164, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    sub_23965381C(a3, (uint64_t)__dst, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_43;
        goto LABEL_84;
      }
    }
    else if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_42;
    }
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_85;
    }
LABEL_84:
    operator delete(v164.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_44:
      if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_263;
LABEL_86:
      v11 = (void *)v161.__r_.__value_.__r.__words[0];
LABEL_87:
      operator delete(v11);
      goto LABEL_263;
    }
LABEL_85:
    operator delete(v162.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_263;
    goto LABEL_86;
  }
  v12 = sub_239664C5C(v8 != 0);
  *v6 = v15;
  if (!v12)
    goto LABEL_34;
LABEL_29:
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE2A30;
  v164.__r_.__value_.__l.__size_ = (std::string::size_type)MEMORY[0x24BE2FB00];
  v164.__r_.__value_.__r.__words[2] = v12;
  v165 = &v164;
  v14 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  if (!v13)
  {
    v13 = sub_239664BD8(*(_DWORD *)(a2 + 32), v8 != 0);
    v14 = *v6;
    goto LABEL_47;
  }
  if (v13 == 2 && v14 == 1)
  {
    v13 = 1;
LABEL_47:
    *(_DWORD *)(a2 + 36) = v13;
  }
  if (v14 == 2 && v13 == 1 && *(_BYTE *)(a2 + 41) && espresso_context_set_low_precision_accumulation())
  {
    sub_239A444D4((uint64_t)"unknown file", 97, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  plan = espresso_create_plan();
  v25 = plan;
  if (!plan)
  {
    std::operator+<char>();
    v33 = std::string::append(&v161, ": ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    sub_239653B68(&v140, 0);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v140;
    else
      v35 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    else
      v36 = v140.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v162, (const std::string::value_type *)v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v37->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    sub_23965381C(a3, (uint64_t)__dst, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_73:
        if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_74;
        goto LABEL_94;
      }
    }
    else if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_73;
    }
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_257;
LABEL_95:
      operator delete(v161.__r_.__value_.__l.__data_);
      goto LABEL_257;
    }
LABEL_94:
    operator delete(v162.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_257;
    goto LABEL_95;
  }
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE2A30;
  v162.__r_.__value_.__l.__size_ = (std::string::size_type)MEMORY[0x24BE2FC90];
  v162.__r_.__value_.__r.__words[2] = plan;
  v163 = &v162;
  v26 = espresso_plan_add_network();
  if (v26)
  {
    std::operator+<char>();
    v27 = std::string::append(&v140, ". ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    sub_239653B68(&v149, v26 | 0x100000000);
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v149;
    else
      v29 = (std::string *)v149.__r_.__value_.__r.__words[0];
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
    else
      v30 = v149.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v161, (const std::string::value_type *)v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v31->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    sub_23965381C(a3, (uint64_t)__dst, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_62:
        if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_63;
        goto LABEL_90;
      }
    }
    else if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_62;
    }
    operator delete(v149.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_251;
LABEL_91:
      v43 = (void *)v140.__r_.__value_.__r.__words[0];
      goto LABEL_250;
    }
LABEL_90:
    operator delete(v161.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_251;
    goto LABEL_91;
  }
  v139 = a3;
  v39 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  if (!v39)
  {
    v137 = 119;
    goto LABEL_274;
  }
  v40 = 0;
  v41 = v39 / 168;
  do
  {
    v141.__r_.__value_.__r.__words[0] = v40;
    sub_23964FC9C(a1, v40, (uint64_t)__p);
    v161 = *(std::string *)__p;
    v42 = espresso_network_declare_input();
    if (v42)
    {
      sub_23964A648((unint64_t *)&v141, &v146);
      v44 = std::string::insert(&v146, 0, "Unable to declare input #");
      v45 = v139;
      v46 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v46;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v147, " with name '");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v161;
      else
        v49 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v50 = v161.__r_.__value_.__l.__size_;
      v51 = std::string::append(&v148, (const std::string::value_type *)v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v149, "'. An input with that name does not exist in the network. ");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      sub_239653B68(&v145, v42 | 0x100000000);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v145;
      else
        v55 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v56 = v145.__r_.__value_.__l.__size_;
LABEL_126:
      v71 = std::string::append(&v140, (const std::string::value_type *)v55, v56);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v71->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      sub_23965381C(v45, (uint64_t)__dst, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_128:
          if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_129;
          goto LABEL_137;
        }
      }
      else if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_128;
      }
      operator delete(v145.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_129:
        if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_130;
        goto LABEL_138;
      }
LABEL_137:
      operator delete(v140.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_130:
        if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_131;
        goto LABEL_139;
      }
LABEL_138:
      operator delete(v149.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_131:
        if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_132;
        goto LABEL_140;
      }
LABEL_139:
      operator delete(v148.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_132:
        if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_133;
        goto LABEL_141;
      }
LABEL_140:
      operator delete(v147.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_133:
        if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_251;
LABEL_142:
        v43 = (void *)v161.__r_.__value_.__r.__words[0];
        goto LABEL_250;
      }
LABEL_141:
      operator delete(v146.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_251;
      goto LABEL_142;
    }
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    ++v40;
  }
  while (v41 != v40);
  v57 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64);
  if (!v57)
  {
    v137 = 130;
LABEL_274:
    sub_239A444D4((uint64_t)"unknown file", v137, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v58 = 0;
  v59 = v57 >> 5;
  do
  {
    v141.__r_.__value_.__r.__words[0] = v58;
    sub_23964FE94(a1, v58, (uint64_t)__p);
    v161 = *(std::string *)__p;
    v60 = espresso_network_declare_output();
    if (v60)
    {
      sub_23964A648((unint64_t *)&v141, &v146);
      v61 = std::string::insert(&v146, 0, "Unable to declare output #");
      v45 = v139;
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      v63 = std::string::append(&v147, " with name '");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v161;
      else
        v65 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v66 = v161.__r_.__value_.__l.__size_;
      v67 = std::string::append(&v148, (const std::string::value_type *)v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      v69 = std::string::append(&v149, "'. An input with that name does not exist in the network. ");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      sub_239653B68(&v145, v60 | 0x100000000);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v145;
      else
        v55 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v56 = v145.__r_.__value_.__l.__size_;
      goto LABEL_126;
    }
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    ++v58;
  }
  while (v59 != v58);
  memset(&v149, 0, sizeof(v149));
  v73 = v139;
  if (*(_BYTE *)(a2 + 24))
  {
    v74 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (v74)
    {
      v75 = 0;
      v138 = 0x6DB6DB6DB6DB6DB7 * (v74 >> 2);
      do
      {
        v144 = v75;
        v76 = *(_QWORD *)a2;
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) <= v75)
          sub_23941D884();
        sub_23964FC9C(a1, v75, (uint64_t)__p);
        v77 = (uint64_t *)(v76 + 28 * v75);
        v161 = *(std::string *)__p;
        v78 = *((unsigned __int8 *)v77 + 24);
        if (*((_BYTE *)v77 + 12))
        {
          v79 = *((_DWORD *)v77 + 2);
          v80 = *v77;
          v81 = *(unsigned __int8 *)(v76 + 28 * v75 + 20);
          *(_QWORD *)&v142 = v80;
          DWORD2(v142) = v79;
          LOBYTE(v143) = v78;
          if (!v81)
            goto LABEL_156;
        }
        else
        {
          v83 = *(unsigned __int8 *)(v76 + 28 * v75 + 20);
          if (*(_BYTE *)(v76 + 28 * v75 + 20))
            v84 = 0;
          else
            v84 = v78 == 0;
          if (v84)
          {
            v104 = (_BYTE *)v149.__r_.__value_.__l.__size_;
            if (v149.__r_.__value_.__l.__size_ >= v149.__r_.__value_.__r.__words[2])
            {
              v111 = v149.__r_.__value_.__r.__words[0];
              v112 = 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v149.__r_.__value_.__l.__size_ - v149.__r_.__value_.__r.__words[0]) >> 3);
              v113 = v112 + 1;
              if (v112 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_2394189F8();
              if (0x5555555555555556
                 * ((uint64_t)(v149.__r_.__value_.__r.__words[2] - v149.__r_.__value_.__r.__words[0]) >> 3) > v113)
                v113 = 0x5555555555555556
                     * ((uint64_t)(v149.__r_.__value_.__r.__words[2] - v149.__r_.__value_.__r.__words[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v149.__r_.__value_.__r.__words[2] - v149.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                v114 = 0xAAAAAAAAAAAAAAALL;
              else
                v114 = v113;
              if (v114)
              {
                if (v114 > 0xAAAAAAAAAAAAAAALL)
                  sub_239418A80();
                v115 = (char *)operator new(24 * v114);
              }
              else
              {
                v115 = 0;
              }
              v120 = &v115[24 * v112];
              *v120 = 0;
              v120[20] = 0;
              v121 = (std::string::size_type)v120;
              if (v104 != (_BYTE *)v111)
              {
                do
                {
                  v122 = *(_OWORD *)(v104 - 24);
                  *(_QWORD *)(v121 - 11) = *(_QWORD *)(v104 - 11);
                  *(_OWORD *)(v121 - 24) = v122;
                  v121 -= 24;
                  v104 -= 24;
                }
                while (v104 != (_BYTE *)v111);
                v104 = (_BYTE *)v149.__r_.__value_.__r.__words[0];
              }
              v105 = (std::string::size_type)(v120 + 24);
              v149.__r_.__value_.__r.__words[0] = v121;
              v149.__r_.__value_.__l.__size_ = (std::string::size_type)(v120 + 24);
              v149.__r_.__value_.__r.__words[2] = (std::string::size_type)&v115[24 * v114];
              v73 = v139;
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_BYTE *)v149.__r_.__value_.__l.__size_ = 0;
              v104[20] = 0;
              v105 = (std::string::size_type)(v104 + 24);
            }
            v149.__r_.__value_.__l.__size_ = v105;
            v100 = 13;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_178;
            goto LABEL_179;
          }
          *(_QWORD *)&v142 = 0;
          DWORD2(v142) = 0;
          LOBYTE(v143) = v78;
          if (!v83)
          {
LABEL_156:
            v82 = 1.0;
            goto LABEL_157;
          }
        }
        v82 = *(float *)(v76 + 28 * v75 + 16);
LABEL_157:
        *((float *)&v142 + 3) = v82;
        v85 = espresso_set_image_preprocessing_params();
        if (v85)
        {
          sub_23964A648(&v144, &v145);
          v86 = std::string::insert(&v145, 0, "Unable to set preprocessing parameters to output #");
          v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          v88 = std::string::append(&v146, " with name '");
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = &v161;
          else
            v90 = (std::string *)v161.__r_.__value_.__r.__words[0];
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
          else
            v91 = v161.__r_.__value_.__l.__size_;
          v92 = std::string::append(&v147, (const std::string::value_type *)v90, v91);
          v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v93;
          v92->__r_.__value_.__l.__size_ = 0;
          v92->__r_.__value_.__r.__words[2] = 0;
          v92->__r_.__value_.__r.__words[0] = 0;
          v94 = std::string::append(&v148, "'. ");
          v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v95;
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          sub_239653B68(&v141, v85 | 0x100000000);
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = &v141;
          else
            v96 = (std::string *)v141.__r_.__value_.__r.__words[0];
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
          else
            v97 = v141.__r_.__value_.__l.__size_;
          v98 = std::string::append(&v140, (const std::string::value_type *)v96, v97);
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v98->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          sub_23965381C(v73, (uint64_t)__dst, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_185;
LABEL_172:
            if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_173;
LABEL_186:
            operator delete(v140.__r_.__value_.__l.__data_);
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_187;
LABEL_174:
            if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_175;
LABEL_188:
            operator delete(v147.__r_.__value_.__l.__data_);
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_189;
LABEL_176:
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_190;
          }
          else
          {
            if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_172;
LABEL_185:
            operator delete(v141.__r_.__value_.__l.__data_);
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_186;
LABEL_173:
            if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_174;
LABEL_187:
            operator delete(v148.__r_.__value_.__l.__data_);
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_188;
LABEL_175:
            if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_176;
LABEL_189:
            operator delete(v146.__r_.__value_.__l.__data_);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_190:
              operator delete(v145.__r_.__value_.__l.__data_);
              v100 = 1;
              if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_179;
LABEL_178:
              operator delete(v161.__r_.__value_.__l.__data_);
              goto LABEL_179;
            }
          }
          v100 = 1;
          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_178;
          goto LABEL_179;
        }
        v101 = (_BYTE *)v149.__r_.__value_.__l.__size_;
        if (v149.__r_.__value_.__l.__size_ >= v149.__r_.__value_.__r.__words[2])
        {
          v106 = v149.__r_.__value_.__r.__words[0];
          v107 = 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v149.__r_.__value_.__l.__size_ - v149.__r_.__value_.__r.__words[0]) >> 3);
          v108 = v107 + 1;
          if (v107 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_2394189F8();
          if (0x5555555555555556
             * ((uint64_t)(v149.__r_.__value_.__r.__words[2] - v149.__r_.__value_.__r.__words[0]) >> 3) > v108)
            v108 = 0x5555555555555556
                 * ((uint64_t)(v149.__r_.__value_.__r.__words[2] - v149.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v149.__r_.__value_.__r.__words[2] - v149.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v109 = 0xAAAAAAAAAAAAAAALL;
          else
            v109 = v108;
          if (v109)
          {
            if (v109 > 0xAAAAAAAAAAAAAAALL)
              sub_239418A80();
            v110 = (char *)operator new(24 * v109);
          }
          else
          {
            v110 = 0;
          }
          v116 = &v110[24 * v107];
          *(_OWORD *)v116 = v142;
          *((_DWORD *)v116 + 4) = v143;
          v116[20] = 1;
          v117 = (std::string::size_type)v116;
          if (v101 != (_BYTE *)v106)
          {
            do
            {
              v118 = *(_OWORD *)(v101 - 24);
              *(_QWORD *)(v117 - 11) = *(_QWORD *)(v101 - 11);
              *(_OWORD *)(v117 - 24) = v118;
              v117 -= 24;
              v101 -= 24;
            }
            while (v101 != (_BYTE *)v106);
            v101 = (_BYTE *)v149.__r_.__value_.__r.__words[0];
          }
          v119 = (std::string::size_type)&v110[24 * v109];
          v103 = (std::string::size_type)(v116 + 24);
          v149.__r_.__value_.__r.__words[0] = v117;
          v149.__r_.__value_.__l.__size_ = (std::string::size_type)(v116 + 24);
          v149.__r_.__value_.__r.__words[2] = v119;
          v73 = v139;
          if (v101)
            operator delete(v101);
        }
        else
        {
          v102 = v142;
          *(_DWORD *)(v149.__r_.__value_.__l.__size_ + 16) = v143;
          *(_OWORD *)v101 = v102;
          v101[20] = 1;
          v103 = (std::string::size_type)(v101 + 24);
        }
        v100 = 0;
        v149.__r_.__value_.__l.__size_ = v103;
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_178;
LABEL_179:
        if (v100 != 13 && v100)
          goto LABEL_248;
        ++v75;
      }
      while (v75 != v138);
    }
  }
  v123 = espresso_plan_build();
  if (v123)
  {
    sub_239653B68(&v161, v123 | 0x100000000);
    v124 = std::string::insert(&v161, 0, "Failed to build plan. ");
    v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v124->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    sub_23965381C(v73, (uint64_t)__dst, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    {
      v126 = (void *)v161.__r_.__value_.__r.__words[0];
      goto LABEL_247;
    }
  }
  else
  {
    blob_dimensions = espresso_network_query_blob_dimensions();
    if (blob_dimensions)
    {
      sub_239653B68(&v140, blob_dimensions | 0x100000000);
      v128 = std::string::insert(&v140, 0, "Unable to determine network data dimension. ");
      v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v128->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      sub_23965381C(v73, (uint64_t)__dst, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_248;
      v126 = (void *)v140.__r_.__value_.__r.__words[0];
    }
    else
    {
      sub_239653DB4(&v148, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5);
      sub_239653E84(a1, (uint64_t)&v140);
      if (v140.__r_.__value_.__s.__data_[8])
      {
        std::operator+<char>();
        sub_23965381C(v73, (uint64_t)__dst, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else
      {
        *(_QWORD *)__p = &unk_250AE2530;
        *(_QWORD *)&__p[8] = nullsub_217;
        *(_QWORD *)&__p[24] = __p;
        sub_239654470(&v164, __p);
        sub_239416834(__p);
        *(_QWORD *)__p = &unk_250AE2530;
        *(_QWORD *)&__p[8] = nullsub_217;
        *(_QWORD *)&__p[24] = __p;
        sub_239654470(&v162, __p);
        sub_239416834(__p);
        sub_239654768((uint64_t *)a1, a2, (uint64_t *)&v147);
        *(_QWORD *)__p = v12;
        *(_QWORD *)&__p[8] = v25;
        *(_OWORD *)&__p[16] = v150;
        v155 = *v6;
        sub_2396547D8(v156, (uint64_t)&v148);
        v157 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
        v130 = v149.__r_.__value_.__r.__words[2];
        memset(&v149, 0, sizeof(v149));
        v160[0] = 0;
        v160[1] = 0;
        v158 = v130;
        v159 = v160;
        sub_2396545B0(&v147, (uint64_t)__p, &v146);
        sub_239654894((uint64_t)__p);
        sub_239416DA0((uint64_t)&v147);
        v131 = v146.__r_.__value_.__r.__words[0];
        v146.__r_.__value_.__r.__words[0] = 0;
        *v73 = v131;
        v147.__r_.__value_.__s.__data_[0] = 0;
        sub_23941A4FC(__p, "");
        sub_23957E1BC((uint64_t)(v73 + 1), &v147, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v132 = v146.__r_.__value_.__r.__words[0];
        v146.__r_.__value_.__r.__words[0] = 0;
        if (v132)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v132 + 8))(v132);
      }
      sub_23948FC6C(&v140);
      v126 = (void *)v148.__r_.__value_.__r.__words[0];
      if (!v148.__r_.__value_.__r.__words[0])
        goto LABEL_248;
      v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    }
LABEL_247:
    operator delete(v126);
  }
LABEL_248:
  v43 = (void *)v149.__r_.__value_.__r.__words[0];
  if (!v149.__r_.__value_.__r.__words[0])
    goto LABEL_251;
  v149.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
LABEL_250:
  operator delete(v43);
LABEL_251:
  if (!v163)
    sub_2394172E0();
  (*(void (**)(std::string *))(v163->__r_.__value_.__r.__words[0] + 48))(v163);
  v133 = v163;
  if (v163 == &v162)
  {
    v134 = 4;
    v133 = &v162;
  }
  else
  {
    if (!v163)
      goto LABEL_257;
    v134 = 5;
  }
  (*(void (**)(void))(v133->__r_.__value_.__r.__words[0] + 8 * v134))();
LABEL_257:
  if (!v165)
    sub_2394172E0();
  (*(void (**)(std::string *))(v165->__r_.__value_.__r.__words[0] + 48))(v165);
  v135 = v165;
  if (v165 == &v164)
  {
    v136 = 4;
    v135 = &v164;
  }
  else
  {
    if (!v165)
      goto LABEL_263;
    v136 = 5;
  }
  (*(void (**)(void))(v135->__r_.__value_.__r.__words[0] + 8 * v136))();
LABEL_263:
  if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v152) & 0x80000000) == 0)
      return;
LABEL_267:
    operator delete(__dst[0]);
    return;
  }
  operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152) < 0)
    goto LABEL_267;
}

void sub_239652FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  uint64_t v56;
  void *v57;

  if (a54 < 0)
  {
    operator delete(__p);
    v56 = *a10;
    *a10 = 0;
    if (v56)
    {
LABEL_7:
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      v57 = a25;
      a25 = 0;
      if (!v57)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v56 = *a10;
    *a10 = 0;
    if (v56)
      goto LABEL_7;
  }
  v57 = a25;
  a25 = 0;
  if (!v57)
  {
LABEL_9:
    sub_23948FC6C(&a11);
    if (a33)
    {
      a34 = (uint64_t)a33;
      operator delete(a33);
    }
    if (a37)
    {
      a38 = (uint64_t)a37;
      operator delete(a37);
    }
    sub_239416834((_QWORD *)(v54 - 160));
    sub_239416834((_QWORD *)(v54 - 128));
    sub_2395080CC((uint64_t)&a43);
    _Unwind_Resume(a1);
  }
LABEL_8:
  (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  goto LABEL_9;
}

void sub_239653738(std::string *a1@<X8>)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_239662890((uint64_t)__p, (uint64_t)&v7);
  v11 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v7, (uint64_t)v8, (uint64_t)__p, a1, v2, v3);
  if (v11 < 0)
    operator delete(__p[0]);
  v4 = (void **)v7;
  if (v7)
  {
    v5 = v8;
    v6 = v7;
    if (v8 != v7)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = v7;
    }
    v8 = v4;
    operator delete(v6);
  }
}

void sub_2396537E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_23965381C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  std::operator+<char>();
  v6 = std::string::append(&v23, "', version: ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v10 = *(const std::string::value_type **)(a2 + 24);
  v9 = a2 + 24;
  v8 = v10;
  v11 = *(char *)(v9 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = *(_QWORD *)(v9 + 8);
  v14 = std::string::append(&v24, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v25, ". ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a3 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a3;
  else
    v19 = *(const std::string::value_type **)a3;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a3 + 23);
  else
    v20 = *(_QWORD *)(a3 + 8);
  v21 = std::string::append(&v26, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v28 = v21->__r_.__value_.__r.__words[2];
  v27 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
LABEL_21:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
LABEL_16:
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_17;
LABEL_22:
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_17:
  *a1 = 0;
  v26.__r_.__value_.__s.__data_[0] = 5;
  sub_23957E1BC((uint64_t)(a1 + 1), &v26, (uint64_t)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
}

void sub_2396539C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;

  v38 = *v35;
  *v35 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  _Unwind_Resume(exception_object);
}

void sub_239653A84(int *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_239662964((uint64_t)__p, (uint64_t)&v8, a1);
  v12 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v8, (uint64_t)v9, (uint64_t)__p, a2, v3, v4);
  if (v12 < 0)
    operator delete(__p[0]);
  v5 = (void **)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_239653B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_239653B68(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  const char *last_error;
  std::string __p;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  uint64_t v19;

  v19 = a2;
  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    sub_23965A62C((uint64_t)&v19, &v15);
    v4 = std::string::insert(&v15, 0, "Status code: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v16, ". ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    *((_BYTE *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
  }
  v8 = std::string::append(&v17, "Last Error: ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  sub_23964C500(&last_error, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_17:
      operator delete(v17.__r_.__value_.__l.__data_);
      if (!v3)
        return;
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_13:
  if (!v3)
    return;
LABEL_18:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
LABEL_22:
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    goto LABEL_22;
  }
}

void sub_239653D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239653DB4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x186186186186187)
      sub_2394189F8();
    v4 = (char *)operator new(168 * a2);
    *a1 = v4;
    a1[2] = &v4[168 * a2];
    v5 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_239653E68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239653E84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *p_p;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  const char *last_error;
  std::string __p;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  char v41;
  __int128 v43;
  std::string::size_type v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;

  v3 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64);
  if (!v3)
  {
LABEL_7:
    LOBYTE(v45) = 0;
    HIBYTE(v44) = 0;
    LOBYTE(v43) = 0;
    sub_23957E1BC(a2, &v45, (uint64_t)&v43);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      return;
    v7 = (void *)v43;
    goto LABEL_52;
  }
  v5 = 0;
  v6 = v3 >> 5;
  while (1)
  {
    v47 = v5;
    sub_23964FE94(a1, v5, (uint64_t)&v43);
    v45 = v43;
    v46 = v44;
    if (espresso_network_bind_buffer())
      break;
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
    if (v6 == ++v5)
      goto LABEL_7;
  }
  v41 = 5;
  sub_23964A648(&v47, &v33);
  v8 = std::string::insert(&v33, 0, "Unable to bind buffer #");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v34, " (named '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0)
    v12 = (const std::string::value_type *)&v45;
  else
    v12 = (const std::string::value_type *)v45;
  if (v46 >= 0)
    v13 = HIBYTE(v46);
  else
    v13 = *((_QWORD *)&v45 + 1);
  v14 = std::string::append(&v35, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v36, "'). ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v37, "Status code: ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_239655088(&v32);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v32;
  else
    v20 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  v22 = std::string::append(&v38, (const std::string::value_type *)v20, size);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v39, ". Last Error: ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  sub_23964C500(&last_error, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v27 = __p.__r_.__value_.__l.__size_;
  v28 = std::string::append(&v40, (const std::string::value_type *)p_p, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44 = v28->__r_.__value_.__r.__words[2];
  v43 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  sub_23957E1BC(a2, &v41, (uint64_t)&v43);
  if (SHIBYTE(v44) < 0)
  {
    operator delete((void *)v43);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v37.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v35.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_37:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_50:
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      return;
    goto LABEL_51;
  }
LABEL_49:
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_50;
LABEL_38:
  if ((SHIBYTE(v46) & 0x80000000) == 0)
    return;
LABEL_51:
  v7 = (void *)v45;
LABEL_52:
  operator delete(v7);
}

void sub_239654280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 121) < 0)
  {
    operator delete(*(void **)(v61 - 144));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v61 - 153) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v61 - 153) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v61 - 185) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v61 - 176));
  if ((*(char *)(v61 - 185) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v61 - 208));
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a61 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a61 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a54 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a56);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(v61 - 89) & 0x80000000) == 0)
LABEL_26:
      _Unwind_Resume(exception_object);
LABEL_25:
    operator delete(*(void **)(v61 - 112));
    goto LABEL_26;
  }
LABEL_24:
  operator delete(a22);
  if ((*(char *)(v61 - 89) & 0x80000000) == 0)
    goto LABEL_26;
  goto LABEL_25;
}

_QWORD *sub_239654470(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_23965A910(v10, a1);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v10[0] = &unk_250AE2530;
  v10[1] = nullsub_217;
  v11 = v10;
  sub_23965A910(v10, a2);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_15;
  }
  if (v11)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_2396545B0(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20[2];
  int v21;
  void *v22[2];
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v27[4];

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v9 = (_QWORD *)*a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v27[2] = *(_QWORD **)a1;
  v27[3] = &v8->__vftable;
  *a1 = 0;
  a1[1] = 0;
  v10 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v10;
  v21 = *(_DWORD *)(a2 + 32);
  *(_OWORD *)v22 = *(_OWORD *)(a2 + 40);
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD ***)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v25 = v11;
  v26 = v12;
  v14 = *(_QWORD **)(a2 + 96);
  v15 = *(_QWORD **)(a2 + 104);
  v13 = (_QWORD *)(a2 + 96);
  v27[0] = v14;
  v27[1] = v15;
  if (v15)
  {
    v14[2] = v27;
    *(_QWORD *)(a2 + 88) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 104) = 0;
  }
  else
  {
    v26 = v27;
  }
  *v6 = &off_250AE24C0;
  v6[1] = 0;
  sub_23965AB08((uint64_t)(v6 + 2), v20);
  v7[16] = v9;
  v7[17] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  *a3 = v7;
  sub_23965AAB0((uint64_t)&v26, v27[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v8)
  {
    v18 = (unint64_t *)&v8->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23965472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_239650518(v9);
  sub_239654894((uint64_t)&a9);
  sub_239416DA0(v10 - 64);
  MEMORY[0x23B83E31C](v9, 0x10E1C400ECEF657);
  _Unwind_Resume(a1);
}

uint64_t sub_239654768@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xC8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_250AE2AB0;
  result = sub_23964F7CC((uint64_t)(v6 + 3), a1, a2);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

void sub_2396547C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396547D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v5 >> 3) >= 0x186186186186187)
      sub_2394189F8();
    v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_239654878(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239654894(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_23965AAB0(a1 + 88, *(_QWORD **)(a1 + 96));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2396548E0(void *lpsrc@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  std::string::size_type v33;
  char v34;
  void *v35[2];
  std::string::size_type v36;
  uint64_t v37;
  __int128 v38;
  std::string v39;
  void *__p;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_250AE23C0, (const struct __class_type_info *)&unk_250AE22D0, 0);
  if (!v5)
    goto LABEL_65;
  v6 = (uint64_t)v5;
  v7 = *(const void **)(a2 + 8);
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_250AE23C0, (const struct __class_type_info *)&unk_250AE22D0, 0);
  if (!v8)
LABEL_65:
    __cxa_bad_cast();
  v9 = v8[31];
  if ((v9 & 0x80u) == 0)
    v10 = v8[31];
  else
    v10 = *((_QWORD *)v8 + 2);
  v11 = *(unsigned __int8 *)(v6 + 31);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v6 + 16);
  if (v10 != v11)
    goto LABEL_19;
  v13 = (const void **)(v8 + 8);
  if (v12 >= 0)
    v14 = (unsigned __int8 *)(v6 + 8);
  else
    v14 = *(unsigned __int8 **)(v6 + 8);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)v8 + 2)))
      goto LABEL_19;
  }
  else if (v8[31])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_41;
    }
LABEL_19:
    sub_23949021C((uint64_t)&__p, (uint64_t *)(*(_QWORD *)(a2 + 128) + 8));
    if (!v44)
      goto LABEL_46;
    v15 = v42;
    v16 = v43;
    if (v42 != v43)
    {
      v17 = *(_BYTE *)(v6 + 31);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(v6 + 31);
      else
        v18 = *(_QWORD *)(v6 + 16);
      if (v17 >= 0)
        v19 = (unsigned __int8 *)(v6 + 8);
      else
        v19 = *(unsigned __int8 **)(v6 + 8);
      while (1)
      {
        v20 = *(unsigned __int8 *)(v15 + 23);
        if ((v20 & 0x80u) == 0)
          v21 = *(unsigned __int8 *)(v15 + 23);
        else
          v21 = *(_QWORD *)(v15 + 8);
        if (v21 == v18)
        {
          if ((v20 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v15, v19, *(_QWORD *)(v15 + 8)))
              break;
          }
          else
          {
            if (!*(_BYTE *)(v15 + 23))
              break;
            v22 = 0;
            while (*(unsigned __int8 *)(v15 + v22) == v19[v22])
            {
              if (v20 == ++v22)
                goto LABEL_38;
            }
          }
        }
        v15 += 24;
        if (v15 == v16)
          goto LABEL_46;
      }
    }
LABEL_38:
    if (v15 == v16)
    {
LABEL_46:
      LOBYTE(v38) = 3;
      std::operator+<char>();
      v25 = std::string::append(&v39, "'.");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v36 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)v35 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      sub_23957E1BC(a3, &v38, (uint64_t)v35);
    }
    else
    {
      if (!espresso_plan_build_clean()
        && !espresso_network_select_configuration()
        && !espresso_plan_build())
      {
        sub_239662B78((uint64_t **)(a2 + 104), 0, 0);
        v38 = *(_OWORD *)(a2 + 32);
        sub_239653E84((uint64_t)&__p, (uint64_t)v35);
        v27 = (char)v35[1];
        if (LOBYTE(v35[1]))
        {
          *(_QWORD *)a3 = &off_250ADC870;
          *(_BYTE *)(a3 + 8) = v27;
          v28 = v37;
          *(_QWORD *)(a3 + 16) = v36;
          *(_QWORD *)(a3 + 24) = v28;
          if (v28)
          {
            v29 = (unint64_t *)(v28 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
        }
        else
        {
          sub_239654E84(v6, &v39);
          v31 = v39.__r_.__value_.__r.__words[0];
          v39.__r_.__value_.__r.__words[0] = 0;
          v32 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v31;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v33 = v39.__r_.__value_.__r.__words[0];
            v39.__r_.__value_.__r.__words[0] = 0;
            if (v33)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v33 + 8))(v33);
          }
          v34 = 0;
          sub_23941A4FC(&v39, "");
          sub_23957E1BC(a3, &v34, (uint64_t)&v39);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
        }
        sub_23948FC6C(v35);
        goto LABEL_52;
      }
      LOBYTE(v38) = 5;
      std::operator+<char>();
      v23 = std::string::append(&v39, "'.");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v36 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)v35 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      sub_23957E1BC(a3, &v38, (uint64_t)v35);
    }
    if (SHIBYTE(v36) < 0)
    {
      operator delete(v35[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
        operator delete(v39.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_51;
    }
LABEL_52:
    sub_239496C54((uint64_t)&__p);
    return;
  }
LABEL_41:
  LOBYTE(v35[0]) = 0;
  __p = operator new(0x38uLL);
  v41 = xmmword_239EC95A0;
  strcpy((char *)__p, "The model is already running in this configuration");
  sub_23957E1BC(a3, v35, (uint64_t)&__p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
}

void sub_239654DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  sub_23948FC6C(&a11);
  sub_239496C54((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_239654E7C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

_BYTE *sub_239654E84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_250AE2258;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_23941A7F8(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_239654F14(_Unwind_Exception *a1)
{
  uint64_t v1;
  __n128 v3;

  v3 = nullsub_4(v1);
  MEMORY[0x23B83E31C](v3);
  _Unwind_Resume(a1);
}

uint64_t sub_239654F3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_239654F4C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  *(_QWORD *)a1 = &off_250AE24C0;
  espresso_plan_destroy();
  espresso_context_destroy();
  v2 = *(_QWORD **)(a1 + 104);
  if (v2 != (_QWORD *)(a1 + 112))
  {
    do
    {
      if (*((_BYTE *)v2 + 112) && *((_BYTE *)v2 + 72))
        free((void *)v2[5]);
      v9 = (_QWORD *)v2[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v2[2];
          v11 = *v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != (_QWORD *)(a1 + 112));
  }
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_23965AAB0(a1 + 104, *(_QWORD **)(a1 + 112));
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  return sub_239650518((_QWORD *)a1);
}

void sub_239655064(uint64_t a1)
{
  sub_239654F4C(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239655088(std::string *a1@<X8>)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_23965A738((uint64_t)__p, (uint64_t)&v7);
  v11 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v7, (uint64_t)v8, (uint64_t)__p, a1, v2, v3);
  if (v11 < 0)
    operator delete(__p[0]);
  v4 = (void **)v7;
  if (v7)
  {
    v5 = v8;
    v6 = v7;
    if (v8 != v7)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = v7;
    }
    v8 = v4;
    operator delete(v6);
  }
}

void sub_239655134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

double sub_23965516C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  double result;
  const char *v21;
  std::string *v22;
  __int128 v23;
  unint64_t v24;
  std::string::size_type v25;
  uint64_t error_info;
  const char *v27;
  std::string v28;
  uint64_t (**v29)();
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t (**v33)();
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  std::string::size_type v38;

  sub_23965547C(*(_QWORD *)(a1 + 128) + 128, a2, (uint64_t)&v33);
  v6 = v34;
  if (v34)
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v6;
    v7 = v36;
    *(_QWORD *)(a3 + 16) = v35;
    *(_QWORD *)(a3 + 24) = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    v33 = &off_250ADC870;
    v10 = v36;
    if (!v36)
      goto LABEL_22;
LABEL_18:
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_22;
  }
  sub_239655788(a1, a2, (uint64_t)&v29);
  v11 = v30;
  if (v30)
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v11;
    v12 = v32;
    *(_QWORD *)(a3 + 16) = v31;
    *(_QWORD *)(a3 + 24) = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else if (espresso_plan_execute_sync())
  {
    error_info = espresso_plan_get_error_info();
    v27 = v21;
    sub_23964C500(&v27, &v28);
    v22 = std::string::insert(&v28, 0, "Inference failed with espresso error: ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v38 = v22->__r_.__value_.__r.__words[2];
    v37 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    v28.__r_.__value_.__s.__data_[0] = 6;
    sub_23957E1BC(a3, &v28, (uint64_t)&v37);
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
  }
  else
  {
    LOBYTE(error_info) = 0;
    *((_BYTE *)&v28.__r_.__value_.__s + 23) = 0;
    v28.__r_.__value_.__s.__data_[0] = 0;
    sub_23957E1BC(a3, &error_info, (uint64_t)&v28);
    v24 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
    v38 = 0;
    v37 = 0uLL;
    sub_23965AFE4((char **)&v37, v24);
    sub_23965B194(*(__int128 **)(a1 + 56), *(__int128 **)(a1 + 64), (uint64_t)&v37, (void (*)(_OWORD *__return_ptr, _OWORD *))sub_2396597C0);
    v25 = v38;
    *(_OWORD *)(a3 + 32) = v37;
    *(_QWORD *)(a3 + 48) = v25;
    *(_BYTE *)(a3 + 56) = 1;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  v29 = &off_250ADC870;
  v15 = v32;
  if (v32)
  {
    v16 = (unint64_t *)&v32->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  nullsub_4(&v29);
  v33 = &off_250ADC870;
  v10 = v36;
  if (v36)
    goto LABEL_18;
LABEL_22:
  *(_QWORD *)&result = nullsub_4(&v33).n128_u64[0];
  return result;
}

void sub_2396553F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;

  sub_239659924((void **)(v23 - 64));
  sub_23948FC6C(v22);
  if (a17 < 0)
    operator delete(__p);
  sub_23948FC6C(&a18);
  sub_23948FC6C(&a22);
  _Unwind_Resume(a1);
}

void sub_239655468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23948FC6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23965547C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _BYTE v14[120];
  int v15;
  char *v16;
  __int128 v17;
  _BYTE v18[9];

  if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(_BYTE **)a1;
    v5 = *(_BYTE **)(a1 + 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v5[-*(_QWORD *)a1] >> 2) == (uint64_t)(a2[1] - *a2) >> 7)
    {
      if (v6 == v5)
      {
LABEL_22:
        v18[0] = 0;
        HIBYTE(v17) = 0;
        LOBYTE(v16) = 0;
        sub_23957E1BC(a3, v18, (uint64_t)&v16);
      }
      else
      {
        v7 = 0;
        while (!v6[25] || !v6[12] && !v6[20] && !v6[24])
        {
          v8 = *a2 + (v7 << 7);
          v13 = v7;
          v14[0] = 0;
          v15 = -1;
          v9 = *(unsigned int *)(v8 + 120);
          if ((_DWORD)v9 != -1)
          {
            ((void (*)(_BYTE *, _BYTE *))off_250AE2A08[v9])(v18, v14);
            v15 = v9;
          }
          sub_23965A4B8(v6 + 25, (uint64_t)&v13, a3);
          if (v15 != -1)
            ((void (*)(char **, _BYTE *))off_250AE29F0[v15])(&v16, v14);
          v15 = -1;
          if (*(_BYTE *)(a3 + 8))
            return;
          *(_QWORD *)a3 = &off_250ADC870;
          v10 = *(std::__shared_weak_count **)(a3 + 24);
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          nullsub_4(a3);
          v6 += 28;
          ++v7;
          if (v6 == v5)
            goto LABEL_22;
        }
        v18[0] = 3;
        v16 = (char *)operator new(0x50uLL);
        v17 = xmmword_239EC95C0;
        strcpy(v16, "Espresso inputs cannot have pre processing arguments and use direct bind.");
        sub_23957E1BC(a3, v18, (uint64_t)&v16);
      }
    }
    else
    {
      v18[0] = 3;
      v16 = (char *)operator new(0x38uLL);
      v17 = xmmword_239EC95B0;
      strcpy(v16, "Num of Espresso inputs do not match data inputs.");
      sub_23957E1BC(a3, v18, (uint64_t)&v16);
    }
  }
  else
  {
    v18[0] = 0;
    HIBYTE(v17) = 0;
    LOBYTE(v16) = 0;
    sub_23957E1BC(a3, v18, (uint64_t)&v16);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(v16);
}

void sub_239655714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 97) < 0)
  {
    operator delete(*(void **)(v25 - 120));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239655774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23964A77C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239655788(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  std::string *v18;
  int64x2_t v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  std::string *v37;
  int64x2_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  int v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  __int16 v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  __int16 v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  __n128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  __int16 v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  __int16 v105;
  unint64_t v106;
  int v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t *v110;
  unint64_t v111;
  __n128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  __n128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  __int16 v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  __n128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  __n128 v175;
  int v176;
  unint64_t *v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  __int16 v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  __int16 v196;
  unint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  __int16 v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  __int16 v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  __n128 v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  __n128 v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  __n128 v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  char *v230;
  char *v231;
  __int128 v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  float v236;
  int32x4_t v237;
  int v238;
  uint64_t (**v239)();
  float *v240;
  int v241;
  int v242;
  float *v243;
  uint64_t (**v244)();
  int v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  float *v257;
  float *v258;
  float *v259;
  float *v260;
  int v261;
  float *v262;
  float *v263;
  float *v264;
  float *v265;
  float *v266;
  uint64_t (**v267)();
  int v268;
  float *v269;
  float *v270;
  float *v271;
  float *v272;
  float *v273;
  uint64_t (**v274)();
  float *v275;
  float *v276;
  int v277;
  uint64_t (**v278)();
  int v279;
  int v280;
  float *v281;
  float *v282;
  float *v283;
  int v284;
  uint64_t (**v285)();
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t (**v292)();
  float *v293;
  int v294;
  int v295;
  float *v296;
  int v297;
  uint64_t (**v298)();
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  float *v305;
  int v306;
  float *v307;
  float *v308;
  uint64_t (**v309)();
  float *v310;
  float *v311;
  int v312;
  uint64_t (**v313)();
  int v314;
  float *v315;
  int v316;
  float *v317;
  float *v318;
  uint64_t (**v319)();
  float *v320;
  float *v321;
  int v322;
  uint64_t (**v323)();
  int v324;
  int v325;
  uint64_t v326;
  float *v327;
  int v328;
  uint64_t (**v329)();
  unsigned int v330;
  float *v331;
  __n128 v332;
  std::__shared_weak_count *v333;
  __int128 *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t *v342;
  uint64_t v343;
  _QWORD *v344;
  void **v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  __n128 v354;
  __n128 v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t (***v359)();
  unint64_t *v360;
  unint64_t v361;
  __n128 v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  int v379;
  __int16 v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  __int128 *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  __int128 v394;
  __int128 v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t *v399;
  uint64_t *v400;
  unint64_t v401;
  uint64_t **v402;
  unint64_t v403;
  char *v404;
  uint64_t v405;
  uint64_t *v406;
  vImage_Buffer *v407;
  int v408;
  uint64_t *v409;
  unint64_t v410;
  uint64_t *v411;
  uint64_t **v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  uint64_t *v416;
  __int128 *v417;
  __int128 v418;
  int v419;
  __int128 v420;
  int v421;
  __int128 v422;
  _BYTE *v423;
  std::__shared_weak_count *v424;
  unint64_t v425;
  void *v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  int v434;
  __int16 v435;
  unint64_t v436;
  char v437;
  unint64_t *v438;
  unint64_t v439;
  uint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  unint64_t v448;
  __int128 v449;
  unint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  int v453;
  __int16 v454;
  unint64_t v455;
  unint64_t *v456;
  unint64_t v457;
  __n128 v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  uint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t *v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  int v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  unint64_t *v488;
  unint64_t v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  __n128 v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  char v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  __n128 v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  unint64_t *v508;
  unint64_t v509;
  __n128 v510;
  __n128 v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  uint64_t v515;
  __n128 v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  _BYTE *v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  __n128 v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  int v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  _QWORD *v558;
  _DWORD *v560;
  int v561;
  float *v562;
  uint64_t (**v563)();
  unint64_t v564;
  unint64_t v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  unsigned int v575;
  uint64_t (**v576)();
  uint64_t v577;
  std::__shared_weak_count *v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  int v582;
  __int16 v583;
  char v584;
  vImagePixelCount width[2];
  __int128 v586;
  __int128 v587;
  unsigned int v588;
  uint64_t (**v589)();
  uint64_t v590;
  std::__shared_weak_count *v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  int v595;
  __int16 v596;
  char v597;
  uint64_t (***v598)();
  size_t *v599;
  _BYTE *v600;
  std::__shared_weak_count *v601;
  _BYTE v602[48];
  unsigned int v603;
  uint64_t v604;
  uint64_t v605;
  std::__shared_weak_count *v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  int v610;
  __int16 v611;
  char v612;
  unint64_t v613;
  uint64_t (**v614)();
  uint64_t (***v615)();
  std::__shared_weak_count *v616;
  __int128 v617;
  uint64_t v618;
  uint64_t (**v619)();
  uint64_t v620;
  _BYTE v621[24];
  uint64_t v622;
  uint64_t (**v623)();
  _DWORD *v624;
  _QWORD *v625;
  void **v626;
  __int128 **v627;
  unint64_t ***v628;
  unint64_t **v629;
  unint64_t *v630;
  char v631;
  __int128 *v632;
  __int128 v633;
  uint64_t v634;
  void *v635[2];
  uint64_t v636;
  unint64_t v637;
  CVPixelBufferRef v638;
  std::__shared_weak_count *v639;
  __int128 pixelBuffer;
  __CVBuffer *v641;
  std::__shared_weak_count *v642;
  __int128 v643;
  _BYTE v644[32];
  unsigned int v645;
  _QWORD v646[2];
  std::__shared_weak_count *v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  int v651;
  __int16 v652;
  char v653;
  __int128 v654;
  _BYTE v655[40];
  __int128 v656;
  std::__shared_weak_count *v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  int v661;
  __int16 v662;
  char v663;
  __int128 v664;
  _BYTE v665[40];
  __int128 v666;
  std::__shared_weak_count *v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  int v671;
  __int16 v672;
  char v673;
  __int128 v674;
  _BYTE v675[40];
  __int128 v676;
  std::__shared_weak_count *v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  int v681;
  __int16 v682;
  char v683;
  void *v684[2];
  __int128 v685;
  __int128 v686;
  unsigned int v687;
  uint64_t (**v688)();
  uint64_t v689;
  std::__shared_weak_count *v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  int v694;
  __int16 v695;
  char v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  unsigned int v700;
  uint64_t (**v701)();
  uint64_t v702;
  std::__shared_weak_count *v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  int v707;
  __int16 v708;
  char v709;
  _BYTE v710[32];
  __int128 v711;
  unsigned int v712;
  _QWORD v713[2];
  std::__shared_weak_count *v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  int v718;
  __int16 v719;
  char v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  unsigned int v724;
  uint64_t (**v725)();
  uint64_t v726;
  std::__shared_weak_count *v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  int v731;
  __int16 v732;
  char v733;
  unsigned int v734;
  int64x2_t v735;
  _BYTE v736[32];
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  uint64_t v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  unsigned int v748;
  uint64_t (**v749)();
  uint64_t v750;
  std::__shared_weak_count *v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  int v755;
  __int16 v756;
  char v757;
  int v758;
  _BYTE __p[80];
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  uint64_t v765;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48);
  if (v4)
  {
    v5 = (_QWORD *)a1;
    v6 = 0;
    v564 = 0xCF3CF3CF3CF3CF3DLL * (v4 >> 3);
    v560 = (_DWORD *)(a1 + 48);
    v558 = (_QWORD *)(a1 + 112);
    v569 = a3;
    while (1)
    {
      v613 = v6;
      sub_239647D60(*a2 + (v6 << 7), (uint64_t)v602);
      *(_DWORD *)__p = v603;
      if (!sub_23964FB60(__p))
      {
        v555 = 652;
LABEL_843:
        sub_239A444D4((uint64_t)"unknown file", v555, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      *(_OWORD *)&__p[20] = *(_OWORD *)&v602[20];
      *(_DWORD *)&__p[36] = *(_DWORD *)&v602[36];
      *(_OWORD *)__p = *(_OWORD *)v602;
      *(_DWORD *)&__p[16] = *(_DWORD *)&v602[16];
      *(_DWORD *)&__p[40] = v603;
      if (!sub_239644B30(__p) || !sub_239644BD8(__p, 16))
      {
        v555 = 653;
        goto LABEL_843;
      }
      *(_DWORD *)__p = v603;
      sub_23964FC24((int *)__p);
      if (!v7)
        break;
      v566 = v6;
      *(_QWORD *)a3 = &off_250ADC870;
      *(_BYTE *)(a3 + 8) = 0;
      v8 = (_BYTE *)operator new();
      v8[23] = 0;
      *v8 = 0;
      *(_QWORD *)(a3 + 16) = v8;
      v9 = (_QWORD *)operator new();
      *v9 = &unk_250ADEA78;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = v8;
      *(_QWORD *)(a3 + 24) = v9;
      if (*(_QWORD *)&v602[12] == 0x100000001 && v603 <= 0x21 && ((1 << v603) & 0x201160000) != 0)
      {
        *(_OWORD *)width = *(_OWORD *)v602;
        v586 = *(_OWORD *)&v602[16];
        v587 = *(_OWORD *)&v602[32];
        v588 = v603;
        LOBYTE(v589) = 0;
        v597 = 0;
        if (v612)
        {
          v589 = &off_250ADB210;
          v10 = v605;
          v11 = v606;
          if (v606)
          {
            p_shared_owners = (unint64_t *)&v606->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
            v14 = v609;
            v15 = v610;
            v16 = v611;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
          }
          else
          {
            v14 = v609;
            v15 = v610;
            v16 = v611;
          }
          v590 = v10;
          v591 = v11;
          v592 = v607;
          v593 = v608;
          v594 = v14;
          v595 = v15;
          v596 = v16;
          if (v11)
          {
            v47 = (unint64_t *)&v11->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v597 = 1;
        }
        v637 = v613;
        if ((_DWORD)v586 == 1)
        {
          if (*v560)
          {
            v49 = v5[16];
            *(_DWORD *)__p = v588;
            v50 = sub_23964FBB0(__p);
            sub_23964FC9C(v49 + 8, v637, (uint64_t)__p);
            *(_OWORD *)v635 = *(_OWORD *)__p;
            v636 = *(_QWORD *)&__p[16];
            v51 = v5[10];
            if (0xAAAAAAAAAAAAAAABLL * ((v5[11] - v51) >> 3) <= v637)
            {
              v54 = 0;
              LOBYTE(v633) = 0;
              BYTE4(v634) = 0;
            }
            else
            {
              v52 = (__int128 *)(v51 + 24 * v637);
              v53 = *v52;
              v634 = *((_QWORD *)v52 + 2);
              v633 = v53;
              v54 = BYTE4(v634);
            }
            v55 = &v633;
            if (!v54)
              v55 = 0;
            v632 = v55;
            v56 = v5[16];
            v631 = 0;
            if (*(_BYTE *)(v56 + 152))
            {
              v58 = v56 + 128;
              v57 = *(_QWORD *)(v56 + 128);
              if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v58 + 8) - v57) >> 2) > v637)
              {
                v59 = *(unsigned __int8 *)(v57 + 28 * v637 + 25);
                v631 = *(_BYTE *)(v57 + 28 * v637 + 25);
                if (v54)
                {
                  if (v59)
                  {
                    sub_239A444D4((uint64_t)"unknown file", 499, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                }
              }
            }
            v630 = &v637;
            v629 = &v630;
            v623 = (uint64_t (**)())&v631;
            v624 = v560;
            v625 = v5;
            v626 = v635;
            v627 = &v632;
            v628 = &v629;
            if (v50 != 1)
            {
              if (v50 == 2)
              {
                if (HIDWORD(width[1]) != 1)
                {
                  v557 = 615;
                  goto LABEL_860;
                }
                *(_OWORD *)v684 = *(_OWORD *)width;
                v685 = v586;
                v686 = v587;
                v687 = v588;
                LOBYTE(v688) = 0;
                v696 = 0;
                if (v597)
                {
                  v688 = &off_250ADB210;
                  v68 = v590;
                  v69 = v591;
                  if (v591)
                  {
                    v70 = (unint64_t *)&v591->__shared_owners_;
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                    v72 = v594;
                    v73 = v595;
                    v74 = v596;
                    do
                      v75 = __ldxr(v70);
                    while (__stxr(v75 + 1, v70));
                  }
                  else
                  {
                    v72 = v594;
                    v73 = v595;
                    v74 = v596;
                  }
                  v689 = v68;
                  v690 = v69;
                  v691 = v592;
                  v692 = v593;
                  v693 = v72;
                  v694 = v73;
                  v695 = v74;
                  if (v69)
                  {
                    v110 = (unint64_t *)&v69->__shared_owners_;
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  v696 = 1;
                }
                sub_23965C1C8((uint64_t)v684, (uint64_t)__p);
                if (v696)
                {
                  v112 = nullsub_4(&v691);
                  v113 = v690;
                  if (v690)
                  {
                    v114 = (unint64_t *)&v690->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v112);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  nullsub_4(&v688);
                }
                if ((_BYTE)v760)
                {
                  *(_QWORD *)&v654 = &off_250AE2800;
                  v116 = *(_QWORD *)&__p[8];
                  v117 = *(std::__shared_weak_count **)&__p[16];
                  if (*(_QWORD *)&__p[16])
                  {
                    v118 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                    do
                      v119 = __ldxr(v118);
                    while (__stxr(v119 + 1, v118));
                    do
                      v120 = __ldxr(v118);
                    while (__stxr(v120 + 1, v118));
                    *(_OWORD *)&v655[8] = *(_OWORD *)&__p[24];
                    *(_OWORD *)&v655[24] = *(_OWORD *)&__p[40];
                    v656 = *(_OWORD *)&__p[56];
                    do
                      v121 = __ldxr(v118);
                    while (__stxr(v121 + 1, v118));
                    *((_QWORD *)&v654 + 1) = v116;
                    *(_QWORD *)v655 = v117;
                    do
                      v122 = __ldaxr(v118);
                    while (__stlxr(v122 - 1, v118));
                    if (!v122)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                    do
                      v123 = __ldaxr(v118);
                    while (__stlxr(v123 - 1, v118));
                    if (!v123)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  else
                  {
                    *((_QWORD *)&v654 + 1) = *(_QWORD *)&__p[8];
                    *(_QWORD *)v655 = 0;
                    *(_OWORD *)&v655[8] = *(_OWORD *)&__p[24];
                    *(_OWORD *)&v655[24] = *(_OWORD *)&__p[40];
                    v656 = *(_OWORD *)&__p[56];
                  }
                  sub_23965C52C((uint64_t)&v598, (uint64_t)&v623, *((uint64_t *)&v654 + 1), *(std::__shared_weak_count **)v655);
                  v156 = *(std::__shared_weak_count **)v655;
                  if (*(_QWORD *)v655)
                  {
                    v157 = (unint64_t *)(*(_QWORD *)v655 + 8);
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                      std::__shared_weak_count::__release_weak(v156);
                    }
                  }
                  v159 = nullsub_4(&v654);
                  if ((_BYTE)v760)
                  {
                    v160 = *(std::__shared_weak_count **)&__p[16];
                    if (*(_QWORD *)&__p[16])
                    {
                      v161 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                        goto LABEL_238;
                    }
LABEL_703:
                    nullsub_4(__p);
                  }
LABEL_704:
                  if ((SHIBYTE(v636) & 0x80000000) == 0)
                    goto LABEL_705;
                  goto LABEL_583;
                }
                v107 = 5;
                v108 = v558;
                v109 = (_QWORD *)*v558;
                if (*v558)
                  goto LABEL_173;
LABEL_536:
                __p[0] = 0;
                __p[32] = 0;
                __p[40] = 0;
                __p[64] = 0;
                v128 = v108;
                v124 = v637;
              }
              else
              {
                if (v50 != 4)
                {
                  v557 = 624;
                  goto LABEL_860;
                }
                if (HIDWORD(width[1]) != 1)
                {
                  v735.i8[0] = 6;
                  *(_QWORD *)__p = operator new(0x58uLL);
                  *(_OWORD *)&__p[8] = xmmword_239EC95D0;
                  strcpy(*(char **)__p, "Espresso execution with 4 non-float components but multiple channels not supported");
                  sub_23957E1BC((uint64_t)&v598, &v735, (uint64_t)__p);
                  if ((__p[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)__p);
                    if ((SHIBYTE(v636) & 0x80000000) == 0)
                      goto LABEL_705;
                    goto LABEL_583;
                  }
                  goto LABEL_704;
                }
                if ((v588 & 8) != 0)
                {
                  v107 = 29;
                  v108 = v558;
                  v109 = (_QWORD *)*v558;
                  if (!*v558)
                    goto LABEL_536;
                }
                else
                {
                  if ((v588 & 4) == 0)
                  {
                    v557 = 594;
                    goto LABEL_860;
                  }
                  *(_OWORD *)v710 = *(_OWORD *)width;
                  *(_OWORD *)&v710[16] = v586;
                  v711 = v587;
                  v712 = v588;
                  LOBYTE(v713[0]) = 0;
                  v720 = 0;
                  if (v597)
                  {
                    v713[0] = &off_250ADB210;
                    v60 = v590;
                    v61 = v591;
                    if (v591)
                    {
                      v62 = (unint64_t *)&v591->__shared_owners_;
                      do
                        v63 = __ldxr(v62);
                      while (__stxr(v63 + 1, v62));
                      v64 = v594;
                      v65 = v595;
                      v66 = v596;
                      do
                        v67 = __ldxr(v62);
                      while (__stxr(v67 + 1, v62));
                    }
                    else
                    {
                      v64 = v594;
                      v65 = v595;
                      v66 = v596;
                    }
                    v713[1] = v60;
                    v714 = v61;
                    v715 = v592;
                    v716 = v593;
                    v717 = v64;
                    v718 = v65;
                    v719 = v66;
                    if (v61)
                    {
                      v456 = (unint64_t *)&v61->__shared_owners_;
                      do
                        v457 = __ldaxr(v456);
                      while (__stlxr(v457 - 1, v456));
                      if (!v457)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                    v720 = 1;
                  }
                  sub_23965B9E8((uint64_t)v710, (uint64_t)__p);
                  if (v720)
                  {
                    v458 = nullsub_4(&v715);
                    v459 = v714;
                    if (v714)
                    {
                      v460 = (unint64_t *)&v714->__shared_owners_;
                      do
                        v461 = __ldaxr(v460);
                      while (__stlxr(v461 - 1, v460));
                      if (!v461)
                      {
                        ((void (*)(std::__shared_weak_count *, __n128))v459->__on_zero_shared)(v459, v458);
                        std::__shared_weak_count::__release_weak(v459);
                      }
                    }
                    nullsub_4(v713);
                  }
                  if ((_BYTE)v760)
                  {
                    *(_QWORD *)&v674 = &off_250AE2610;
                    v462 = *(_QWORD *)&__p[8];
                    v463 = *(std::__shared_weak_count **)&__p[16];
                    if (*(_QWORD *)&__p[16])
                    {
                      v464 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                      do
                        v465 = __ldxr(v464);
                      while (__stxr(v465 + 1, v464));
                      do
                        v466 = __ldxr(v464);
                      while (__stxr(v466 + 1, v464));
                      *(_OWORD *)&v675[8] = *(_OWORD *)&__p[24];
                      *(_OWORD *)&v675[24] = *(_OWORD *)&__p[40];
                      v676 = *(_OWORD *)&__p[56];
                      do
                        v467 = __ldxr(v464);
                      while (__stxr(v467 + 1, v464));
                      *((_QWORD *)&v674 + 1) = v462;
                      *(_QWORD *)v675 = v463;
                      do
                        v468 = __ldaxr(v464);
                      while (__stlxr(v468 - 1, v464));
                      if (!v468)
                      {
                        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                        std::__shared_weak_count::__release_weak(v463);
                      }
                      do
                        v469 = __ldaxr(v464);
                      while (__stlxr(v469 - 1, v464));
                      if (!v469)
                      {
                        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                        std::__shared_weak_count::__release_weak(v463);
                      }
                      v470 = *(std::__shared_weak_count **)v675;
                      v462 = *((_QWORD *)&v674 + 1);
                      if (*(_QWORD *)v675)
                      {
                        v471 = (unint64_t *)(*(_QWORD *)v675 + 8);
                        do
                          v472 = __ldxr(v471);
                        while (__stxr(v472 + 1, v471));
                        do
                          v473 = __ldaxr(v471);
                        while (__stlxr(v473 - 1, v471));
                        if (!v473)
                        {
                          ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
                          std::__shared_weak_count::__release_weak(v470);
                        }
                      }
                    }
                    else
                    {
                      *((_QWORD *)&v674 + 1) = *(_QWORD *)&__p[8];
                      *(_QWORD *)v675 = 0;
                      *(_OWORD *)&v675[8] = *(_OWORD *)&__p[24];
                      *(_OWORD *)&v675[24] = *(_OWORD *)&__p[40];
                      v676 = *(_OWORD *)&__p[56];
                    }
                    sub_23976D898(v462, &v735);
                    sub_23979D0F0((uint64_t)&v735, &v643);
                    pixelBuffer = v643;
                    if (*((_QWORD *)&v643 + 1))
                    {
                      v474 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                      do
                        v475 = __ldxr(v474);
                      while (__stxr(v475 + 1, v474));
                      v476 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                      if (*((_QWORD *)&v643 + 1))
                      {
                        v477 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                        do
                          v478 = __ldaxr(v477);
                        while (__stlxr(v478 - 1, v477));
                        if (!v478)
                        {
                          ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
                          std::__shared_weak_count::__release_weak(v476);
                        }
                      }
                    }
                    sub_23979BCF4(&v735);
                    if (!CVPixelBufferGetIOSurface((CVPixelBufferRef)pixelBuffer))
                    {
                      sub_239A444D4((uint64_t)"unknown file", 526, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                      sub_239A4475C();
                      abort();
                    }
                    if (*(_BYTE *)v623 && *v624 == 1)
                      v479 = espresso_network_bind_direct_cvpixelbuffer();
                    else
                      v479 = espresso_network_bind_input_cvpixelbuffer();
                    sub_23965CBD8((uint64_t)&v598, v628, v479);
                    v480 = (std::__shared_weak_count *)*((_QWORD *)&pixelBuffer + 1);
                    if (*((_QWORD *)&pixelBuffer + 1))
                    {
                      v481 = (unint64_t *)(*((_QWORD *)&pixelBuffer + 1) + 8);
                      do
                        v482 = __ldaxr(v481);
                      while (__stlxr(v482 - 1, v481));
                      if (!v482)
                      {
                        ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
                        std::__shared_weak_count::__release_weak(v480);
                      }
                    }
                    v483 = *(std::__shared_weak_count **)v675;
                    if (*(_QWORD *)v675)
                    {
                      v484 = (unint64_t *)(*(_QWORD *)v675 + 8);
                      do
                        v485 = __ldaxr(v484);
                      while (__stlxr(v485 - 1, v484));
                      if (!v485)
                      {
                        ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                        std::__shared_weak_count::__release_weak(v483);
                      }
                    }
                    v159 = nullsub_4(&v674);
                    if ((_BYTE)v760)
                    {
                      v160 = *(std::__shared_weak_count **)&__p[16];
                      if (!*(_QWORD *)&__p[16])
                        goto LABEL_703;
                      v486 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                      do
                        v487 = __ldaxr(v486);
                      while (__stlxr(v487 - 1, v486));
                      if (v487)
                        goto LABEL_703;
LABEL_238:
                      ((void (*)(std::__shared_weak_count *, __n128))v160->__on_zero_shared)(v160, v159);
                      std::__shared_weak_count::__release_weak(v160);
                      goto LABEL_703;
                    }
                    goto LABEL_704;
                  }
                  v107 = 25;
                  v108 = v558;
                  v109 = (_QWORD *)*v558;
                  if (!*v558)
                    goto LABEL_536;
                }
LABEL_173:
                v124 = v637;
                v125 = v109;
                do
                {
                  v126 = v125[4];
                  if (v637 >= v126)
                  {
                    if (v126 >= v637)
                    {
                      v127 = v108;
                      if (v109)
                        goto LABEL_588;
                      goto LABEL_592;
                    }
                    ++v125;
                  }
                  v125 = (_QWORD *)*v125;
                }
                while (v125);
                __p[0] = 0;
                __p[32] = 0;
                __p[40] = 0;
                __p[64] = 0;
                do
                {
                  while (1)
                  {
                    v128 = v109;
                    v129 = v109[4];
                    if (v637 < v129)
                      break;
                    if (v129 >= v637)
                    {
                      v230 = (char *)v128;
                      v231 = (char *)(v128 + 5);
                      if (!*((_BYTE *)v128 + 112))
                        goto LABEL_343;
LABEL_540:
                      v394 = *(_OWORD *)&__p[16];
                      *(_OWORD *)v231 = *(_OWORD *)__p;
                      *((_OWORD *)v231 + 1) = v394;
                      v231[32] = __p[32];
                      if (v230[104] == __p[64])
                      {
                        if (!v230[104])
                          goto LABEL_552;
                        v395 = *(_OWORD *)&__p[48];
                        *(_OWORD *)&__p[48] = 0uLL;
                        v396 = (std::__shared_weak_count *)*((_QWORD *)v230 + 12);
                        *(_OWORD *)(v230 + 88) = v395;
                        if (v396)
                        {
                          v397 = (unint64_t *)&v396->__shared_owners_;
                          do
                            v398 = __ldaxr(v397);
                          while (__stlxr(v398 - 1, v397));
                          if (!v398)
                          {
                            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                            std::__shared_weak_count::__release_weak(v396);
                            if (!__p[64])
                              goto LABEL_552;
LABEL_551:
                            sub_23979BCF4(&__p[40]);
LABEL_552:
                            v399 = (uint64_t *)*v108;
                            v400 = v108;
                            v401 = v637;
                            while (1)
                            {
                              v402 = (uint64_t **)v400;
                              if (!v399)
                                goto LABEL_559;
                              while (1)
                              {
                                v400 = v399;
                                v403 = v399[4];
                                if (v637 < v403)
                                  break;
                                if (v403 >= v637)
                                {
                                  v404 = (char *)v400;
                                  *(_OWORD *)(v400 + 5) = 0u;
                                  v407 = (vImage_Buffer *)(v400 + 5);
                                  v421 = *((unsigned __int8 *)v400 + 72);
                                  *(_OWORD *)(v400 + 7) = 0u;
                                  if (!v421)
                                    goto LABEL_562;
                                  goto LABEL_563;
                                }
                                v399 = (uint64_t *)v400[1];
                                if (!v399)
                                {
                                  v402 = (uint64_t **)(v400 + 1);
LABEL_559:
                                  v404 = (char *)operator new(0x78uLL);
                                  *((_QWORD *)v404 + 4) = v401;
                                  v404[40] = 0;
                                  v404[112] = 0;
                                  *(_QWORD *)v404 = 0;
                                  *((_QWORD *)v404 + 1) = 0;
                                  *((_QWORD *)v404 + 2) = v400;
                                  *v402 = (uint64_t *)v404;
                                  v405 = **(_QWORD **)(a1 + 104);
                                  v406 = (uint64_t *)v404;
                                  if (v405)
                                  {
                                    *(_QWORD *)(a1 + 104) = v405;
                                    v406 = *v402;
                                  }
                                  sub_2394213B8(*(uint64_t **)(a1 + 112), v406);
                                  ++*(_QWORD *)(a1 + 120);
                                  *(_OWORD *)(v404 + 40) = 0u;
                                  v407 = (vImage_Buffer *)(v404 + 40);
                                  v408 = v404[72];
                                  *(_OWORD *)(v404 + 56) = 0u;
                                  if (!v408)
LABEL_562:
                                    v404[72] = 1;
LABEL_563:
                                  vImageBuffer_Init(v407, LODWORD(width[1]), HIDWORD(width[0]), 8 * v50, 0x100u);
                                  v409 = *(uint64_t **)(a1 + 112);
                                  v410 = v637;
                                  v411 = v558;
LABEL_565:
                                  v412 = (uint64_t **)v411;
                                  if (!v409)
                                    goto LABEL_570;
                                  while (1)
                                  {
                                    v411 = v409;
                                    v413 = v409[4];
                                    if (v637 < v413)
                                    {
                                      v409 = (uint64_t *)*v411;
                                      goto LABEL_565;
                                    }
                                    if (v413 >= v637)
                                      break;
                                    v409 = (uint64_t *)v411[1];
                                    if (!v409)
                                    {
                                      v412 = (uint64_t **)(v411 + 1);
LABEL_570:
                                      v414 = (char *)operator new(0x78uLL);
                                      *((_QWORD *)v414 + 4) = v410;
                                      v414[40] = 0;
                                      v414[112] = 0;
                                      *(_QWORD *)v414 = 0;
                                      *((_QWORD *)v414 + 1) = 0;
                                      *((_QWORD *)v414 + 2) = v411;
                                      *v412 = (uint64_t *)v414;
                                      v415 = **(_QWORD **)(a1 + 104);
                                      v416 = (uint64_t *)v414;
                                      if (v415)
                                      {
                                        *(_QWORD *)(a1 + 104) = v415;
                                        v416 = *v412;
                                      }
                                      sub_2394213B8(*(uint64_t **)(a1 + 112), v416);
                                      ++*(_QWORD *)(a1 + 120);
                                      v417 = (__int128 *)(v414 + 40);
                                      if (v107 != 1)
                                      {
LABEL_573:
                                        if (v107 != 25)
                                        {
                                          if (v107 == 29)
                                          {
                                            v418 = v417[1];
                                            v643 = *v417;
                                            *(_OWORD *)v644 = v418;
                                            v419 = espresso_network_bind_input_vimagebuffer_rgba8();
                                            goto LABEL_581;
                                          }
                                          v557 = 566;
LABEL_860:
                                          sub_239A444D4((uint64_t)"unknown file", v557, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                          sub_239A4475C();
                                          abort();
                                        }
                                        v420 = v417[1];
                                        v643 = *v417;
                                        *(_OWORD *)v644 = v420;
                                        v419 = espresso_network_bind_input_vimagebuffer_bgra8();
LABEL_581:
                                        if (v419)
                                        {
                                          sub_23965CBD8((uint64_t)&v598, &v629, v419);
                                          v5 = (_QWORD *)a1;
                                          if (SHIBYTE(v636) < 0)
                                            goto LABEL_583;
LABEL_705:
                                          *(_BYTE *)(a3 + 8) = (_BYTE)v599;
                                          v423 = v600;
                                          v424 = v601;
                                          if (v601)
                                          {
LABEL_706:
                                            v488 = (unint64_t *)&v424->__shared_owners_;
                                            do
                                              v489 = __ldxr(v488);
                                            while (__stxr(v489 + 1, v488));
                                          }
LABEL_708:
                                          v490 = *(std::__shared_weak_count **)(a3 + 24);
                                          *(_QWORD *)(a3 + 16) = v423;
                                          *(_QWORD *)(a3 + 24) = v424;
                                          if (!v490)
                                            goto LABEL_712;
                                          v491 = (unint64_t *)&v490->__shared_owners_;
                                          do
                                            v492 = __ldaxr(v491);
                                          while (__stlxr(v492 - 1, v491));
                                          if (!v492)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
                                            std::__shared_weak_count::__release_weak(v490);
                                            v598 = (uint64_t (***)())&off_250ADC870;
                                            v493 = v601;
                                            if (v601)
                                            {
LABEL_713:
                                              v494 = (unint64_t *)&v493->__shared_owners_;
                                              do
                                                v495 = __ldaxr(v494);
                                              while (__stlxr(v495 - 1, v494));
                                              if (!v495)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
                                                std::__shared_weak_count::__release_weak(v493);
                                              }
                                            }
                                          }
                                          else
                                          {
LABEL_712:
                                            v598 = (uint64_t (***)())&off_250ADC870;
                                            v493 = v601;
                                            if (v601)
                                              goto LABEL_713;
                                          }
                                          v354 = nullsub_4(&v598);
                                          if (v597)
                                          {
                                            v496 = nullsub_4(&v592);
                                            v497 = v591;
                                            if (v591)
                                            {
                                              v498 = (unint64_t *)&v591->__shared_owners_;
                                              do
                                                v499 = __ldaxr(v498);
                                              while (__stlxr(v499 - 1, v498));
                                              if (!v499)
                                              {
                                                ((void (*)(std::__shared_weak_count *, __n128))v497->__on_zero_shared)(v497, v496);
                                                std::__shared_weak_count::__release_weak(v497);
                                              }
                                            }
                                            v359 = &v589;
                                            goto LABEL_725;
                                          }
                                          goto LABEL_726;
                                        }
                                        v108 = v558;
                                        v109 = (_QWORD *)*v558;
                                        v124 = v637;
                                        v127 = v558;
                                        if (*v558)
                                        {
                                          while (1)
                                          {
LABEL_588:
                                            while (1)
                                            {
                                              v127 = v109;
                                              v425 = v109[4];
                                              if (v124 >= v425)
                                                break;
                                              v109 = (_QWORD *)*v127;
                                              v108 = v127;
                                              if (!*v127)
                                                goto LABEL_592;
                                            }
                                            if (v425 >= v124)
                                              break;
                                            v109 = (_QWORD *)v127[1];
                                            if (!v109)
                                            {
                                              v108 = v127 + 1;
                                              goto LABEL_592;
                                            }
                                          }
                                          v426 = v127;
                                        }
                                        else
                                        {
LABEL_592:
                                          v426 = operator new(0x78uLL);
                                          *((_QWORD *)v426 + 4) = v124;
                                          *((_BYTE *)v426 + 40) = 0;
                                          *((_BYTE *)v426 + 112) = 0;
                                          *(_QWORD *)v426 = 0;
                                          *((_QWORD *)v426 + 1) = 0;
                                          *((_QWORD *)v426 + 2) = v127;
                                          *v108 = v426;
                                          v427 = **(_QWORD **)(a1 + 104);
                                          v428 = (uint64_t *)v426;
                                          if (v427)
                                          {
                                            *(_QWORD *)(a1 + 104) = v427;
                                            v428 = (uint64_t *)*v108;
                                          }
                                          sub_2394213B8(*(uint64_t **)(a1 + 112), v428);
                                          ++*(_QWORD *)(a1 + 120);
                                        }
                                        v735 = *(int64x2_t *)width;
                                        *(_OWORD *)v736 = v586;
                                        *(_OWORD *)&v736[16] = v587;
                                        LODWORD(v737) = v588;
                                        BYTE8(v737) = 0;
                                        LOBYTE(v741) = 0;
                                        if (v597)
                                        {
                                          *((_QWORD *)&v737 + 1) = &off_250ADB210;
                                          v429 = v590;
                                          v430 = v591;
                                          if (v591)
                                          {
                                            v431 = (unint64_t *)&v591->__shared_owners_;
                                            do
                                              v432 = __ldxr(v431);
                                            while (__stxr(v432 + 1, v431));
                                            v433 = v594;
                                            v434 = v595;
                                            v435 = v596;
                                            do
                                              v436 = __ldxr(v431);
                                            while (__stxr(v436 + 1, v431));
                                          }
                                          else
                                          {
                                            v433 = v594;
                                            v434 = v595;
                                            v435 = v596;
                                          }
                                          *(_QWORD *)&v738 = v429;
                                          *((_QWORD *)&v738 + 1) = v430;
                                          *(_QWORD *)&v739 = v592;
                                          DWORD2(v739) = v593;
                                          *(_QWORD *)&v740 = v433;
                                          DWORD2(v740) = v434;
                                          WORD6(v740) = v435;
                                          if (v430)
                                          {
                                            v438 = (unint64_t *)&v430->__shared_owners_;
                                            do
                                              v439 = __ldaxr(v438);
                                            while (__stlxr(v439 - 1, v438));
                                            if (!v439)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                                              std::__shared_weak_count::__release_weak(v430);
                                              LOBYTE(v741) = 1;
                                              if (*((_BYTE *)v426 + 72))
                                                goto LABEL_611;
                                              goto LABEL_763;
                                            }
                                          }
                                          LOBYTE(v741) = 1;
                                          if (!*((_BYTE *)v426 + 72))
                                            goto LABEL_763;
LABEL_611:
                                          v440 = v738;
                                          if (!(_QWORD)v738)
                                            goto LABEL_626;
                                          v441 = (std::__shared_weak_count *)*((_QWORD *)&v738 + 1);
                                          if (*((_QWORD *)&v738 + 1))
                                          {
                                            v442 = (unint64_t *)(*((_QWORD *)&v738 + 1) + 8);
                                            do
                                              v443 = __ldxr(v442);
                                            while (__stxr(v443 + 1, v442));
                                            do
                                              v444 = __ldaxr(v442);
                                            while (__stlxr(v444 - 1, v442));
                                            if (!v444)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                                              std::__shared_weak_count::__release_weak(v441);
                                            }
                                            v445 = (std::__shared_weak_count *)*((_QWORD *)&v738 + 1);
                                            v440 = v738;
                                            if (*((_QWORD *)&v738 + 1))
                                            {
                                              v446 = (unint64_t *)(*((_QWORD *)&v738 + 1) + 8);
                                              do
                                                v447 = __ldxr(v446);
                                              while (__stxr(v447 + 1, v446));
                                              do
                                                v448 = __ldaxr(v446);
                                              while (__stlxr(v448 - 1, v446));
                                              if (!v448)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                                                std::__shared_weak_count::__release_weak(v445);
                                              }
                                            }
                                          }
                                          if (BYTE13(v740))
                                            (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v440 + 96))(&pixelBuffer, v440, 0);
                                          else
LABEL_626:
                                            *(_QWORD *)&pixelBuffer = 0;
                                          *(int64x2_t *)__p = v735;
                                          *(_OWORD *)&__p[16] = *(_OWORD *)v736;
                                          *(_OWORD *)&__p[32] = *(_OWORD *)&v736[16];
                                          *(_DWORD *)&__p[48] = v737;
                                          __p[56] = 0;
                                          LOBYTE(v762) = 0;
                                          if ((_BYTE)v741)
                                          {
                                            *(_QWORD *)&__p[56] = &off_250ADB210;
                                            v449 = v738;
                                            if (*((_QWORD *)&v738 + 1))
                                            {
                                              v450 = (unint64_t *)(*((_QWORD *)&v738 + 1) + 8);
                                              do
                                                v451 = __ldxr(v450);
                                              while (__stxr(v451 + 1, v450));
                                              v452 = v740;
                                              v453 = DWORD2(v740);
                                              v454 = WORD6(v740);
                                              do
                                                v455 = __ldxr(v450);
                                              while (__stxr(v455 + 1, v450));
                                            }
                                            else
                                            {
                                              v452 = v740;
                                              v453 = DWORD2(v740);
                                              v454 = WORD6(v740);
                                            }
                                            *(_OWORD *)&__p[64] = v449;
                                            *(_QWORD *)&v760 = v739;
                                            DWORD2(v760) = DWORD2(v739);
                                            *(_QWORD *)&v761 = v452;
                                            DWORD2(v761) = v453;
                                            WORD6(v761) = v454;
                                            if (*((_QWORD *)&v449 + 1))
                                            {
                                              v508 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
                                              do
                                                v509 = __ldaxr(v508);
                                              while (__stlxr(v509 - 1, v508));
                                              if (!v509)
                                              {
                                                (*(void (**)(_QWORD))(**((_QWORD **)&v449 + 1) + 16))(*((_QWORD *)&v449 + 1));
                                                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v449
                                                                                         + 1));
                                              }
                                            }
                                            v437 = 1;
LABEL_752:
                                            LOBYTE(v762) = v437;
                                          }
                                          sub_239664330((char **)v426 + 5, (uint64_t)__p);
                                          if ((_BYTE)v762)
                                          {
                                            v511 = nullsub_4(&v760);
                                            v512 = *(std::__shared_weak_count **)&__p[72];
                                            if (*(_QWORD *)&__p[72])
                                            {
                                              v513 = (unint64_t *)(*(_QWORD *)&__p[72] + 8);
                                              do
                                                v514 = __ldaxr(v513);
                                              while (__stlxr(v514 - 1, v513));
                                              if (!v514)
                                              {
                                                ((void (*)(std::__shared_weak_count *, __n128))v512->__on_zero_shared)(v512, v511);
                                                std::__shared_weak_count::__release_weak(v512);
                                              }
                                            }
                                            v510 = nullsub_4(&__p[56]);
                                          }
                                          v515 = pixelBuffer;
                                          *(_QWORD *)&pixelBuffer = 0;
                                          if (v515)
                                            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v515 + 8))(v515, v510);
                                          if ((_BYTE)v741)
                                          {
LABEL_763:
                                            v516 = nullsub_4(&v739);
                                            v517 = (std::__shared_weak_count *)*((_QWORD *)&v738 + 1);
                                            if (*((_QWORD *)&v738 + 1))
                                            {
                                              v518 = (unint64_t *)(*((_QWORD *)&v738 + 1) + 8);
                                              do
                                                v519 = __ldaxr(v518);
                                              while (__stlxr(v519 - 1, v518));
                                              if (!v519)
                                              {
                                                ((void (*)(std::__shared_weak_count *, __n128))v517->__on_zero_shared)(v517, v516);
                                                std::__shared_weak_count::__release_weak(v517);
                                              }
                                            }
                                            nullsub_4((char *)&v737 + 8);
                                          }
                                        }
                                        else if (*((_BYTE *)v426 + 72))
                                        {
                                          v437 = 0;
                                          *(_QWORD *)&pixelBuffer = 0;
                                          *(_OWORD *)__p = *(_OWORD *)width;
                                          *(_OWORD *)&__p[16] = v586;
                                          *(_OWORD *)&__p[32] = v587;
                                          *(_DWORD *)&__p[48] = v588;
                                          __p[56] = 0;
                                          goto LABEL_752;
                                        }
                                        v598 = (uint64_t (***)())&off_250ADC870;
                                        LOBYTE(v599) = 0;
                                        v520 = (_BYTE *)operator new();
                                        v520[23] = 0;
                                        *v520 = 0;
                                        v600 = v520;
                                        v521 = (std::__shared_weak_count *)operator new();
                                        v521->__vftable = (std::__shared_weak_count_vtbl *)&unk_250ADEA78;
                                        v521->__shared_owners_ = 0;
                                        v521->__shared_weak_owners_ = 0;
                                        v521[1].__vftable = (std::__shared_weak_count_vtbl *)v520;
                                        v601 = v521;
                                        v5 = (_QWORD *)a1;
                                        if ((SHIBYTE(v636) & 0x80000000) == 0)
                                          goto LABEL_705;
LABEL_583:
                                        operator delete(v635[0]);
                                        *(_BYTE *)(a3 + 8) = (_BYTE)v599;
                                        v423 = v600;
                                        v424 = v601;
                                        if (v601)
                                          goto LABEL_706;
                                        goto LABEL_708;
                                      }
LABEL_580:
                                      v422 = v417[1];
                                      v643 = *v417;
                                      *(_OWORD *)v644 = v422;
                                      v419 = espresso_network_bind_input_vimagebuffer_planar8();
                                      goto LABEL_581;
                                    }
                                  }
                                  v417 = (__int128 *)(v411 + 5);
                                  if (v107 != 1)
                                    goto LABEL_573;
                                  goto LABEL_580;
                                }
                              }
                              v399 = (uint64_t *)*v400;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (!v230[104])
                        {
                          *((_QWORD *)v230 + 10) = &off_250AE94F0;
                          *(_OWORD *)(v230 + 88) = *(_OWORD *)&__p[48];
                          *(_OWORD *)&__p[48] = 0uLL;
                          v230[104] = 1;
                          if (!__p[64])
                            goto LABEL_552;
                          goto LABEL_551;
                        }
                        sub_23979BCF4((_QWORD *)v230 + 10);
                        v230[104] = 0;
                      }
                      if (__p[64])
                        goto LABEL_551;
                      goto LABEL_552;
                    }
                    v109 = (_QWORD *)v128[1];
                    if (!v109)
                    {
                      v108 = v128 + 1;
                      goto LABEL_537;
                    }
                  }
                  v109 = (_QWORD *)*v128;
                }
                while (*v128);
                v108 = v128;
              }
LABEL_537:
              v230 = (char *)operator new(0x78uLL);
              *((_QWORD *)v230 + 4) = v124;
              v230[40] = 0;
              v230[112] = 0;
              *(_QWORD *)v230 = 0;
              *((_QWORD *)v230 + 1) = 0;
              *((_QWORD *)v230 + 2) = v128;
              *v108 = v230;
              v392 = **(_QWORD **)(a1 + 104);
              v393 = (uint64_t *)v230;
              if (v392)
              {
                *(_QWORD *)(a1 + 104) = v392;
                v393 = (uint64_t *)*v108;
              }
              sub_2394213B8(*(uint64_t **)(a1 + 112), v393);
              ++*(_QWORD *)(a1 + 120);
              v108 = v558;
              v231 = v230 + 40;
              if (v230[112])
                goto LABEL_540;
LABEL_343:
              *((_QWORD *)v231 + 4) = *(_QWORD *)&__p[32];
              v232 = *(_OWORD *)&__p[16];
              *(_OWORD *)v231 = *(_OWORD *)__p;
              *((_OWORD *)v231 + 1) = v232;
              v230[80] = 0;
              v230[104] = 0;
              if (__p[64])
              {
                *((_QWORD *)v230 + 10) = &off_250AE94F0;
                *(_OWORD *)(v230 + 88) = *(_OWORD *)&__p[48];
                *(_OWORD *)&__p[48] = 0uLL;
                v230[104] = 1;
              }
              v230[112] = 1;
              if (__p[64])
                goto LABEL_551;
              goto LABEL_552;
            }
            if (HIDWORD(width[1]) != 1)
            {
              v557 = 599;
              goto LABEL_860;
            }
            v745 = *(_OWORD *)width;
            v746 = v586;
            v747 = v587;
            v748 = v588;
            LOBYTE(v749) = 0;
            v757 = 0;
            if (v597)
            {
              v749 = &off_250ADB210;
              v76 = v590;
              v77 = v591;
              if (v591)
              {
                v78 = (unint64_t *)&v591->__shared_owners_;
                do
                  v79 = __ldxr(v78);
                while (__stxr(v79 + 1, v78));
                v80 = v594;
                v81 = v595;
                v82 = v596;
                do
                  v83 = __ldxr(v78);
                while (__stxr(v83 + 1, v78));
              }
              else
              {
                v80 = v594;
                v81 = v595;
                v82 = v596;
              }
              v750 = v76;
              v751 = v77;
              v752 = v592;
              v753 = v593;
              v754 = v80;
              v755 = v81;
              v756 = v82;
              if (v77)
              {
                v130 = (unint64_t *)&v77->__shared_owners_;
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v757 = 1;
            }
            sub_23965BE1C((uint64_t)&v745, (uint64_t)&v735);
            if (v757)
            {
              v132 = nullsub_4(&v752);
              v133 = v751;
              if (v751)
              {
                v134 = (unint64_t *)&v751->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v133->__on_zero_shared)(v133, v132);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              nullsub_4(&v749);
            }
            if (BYTE8(v737))
            {
              v619 = &off_250AE2708;
              v137 = *(std::__shared_weak_count **)v736;
              v136 = v735.i64[1];
              if (*(_QWORD *)v736)
              {
                v138 = (unint64_t *)(*(_QWORD *)v736 + 8);
                do
                  v139 = __ldxr(v138);
                while (__stxr(v139 + 1, v138));
                do
                  v140 = __ldxr(v138);
                while (__stxr(v140 + 1, v138));
                *(_OWORD *)&v621[8] = *(_OWORD *)&v736[8];
                v622 = *(_QWORD *)&v736[24];
                do
                  v141 = __ldxr(v138);
                while (__stxr(v141 + 1, v138));
                v620 = v136;
                *(_QWORD *)v621 = v137;
                do
                  v142 = __ldaxr(v138);
                while (__stlxr(v142 - 1, v138));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
                do
                  v143 = __ldaxr(v138);
                while (__stlxr(v143 - 1, v138));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
                v144 = *(std::__shared_weak_count **)v621;
                v136 = v620;
                if (*(_QWORD *)v621)
                {
                  v145 = (unint64_t *)(*(_QWORD *)v621 + 8);
                  do
                    v146 = __ldxr(v145);
                  while (__stxr(v146 + 1, v145));
                  do
                    v147 = __ldaxr(v145);
                  while (__stlxr(v147 - 1, v145));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                  }
                }
              }
              else
              {
                v620 = v735.i64[1];
                *(_QWORD *)v621 = 0;
                *(_OWORD *)&v621[8] = *(_OWORD *)&v736[8];
                v622 = *(_QWORD *)&v736[24];
              }
              sub_23976A2E8(v136, __p);
              sub_23979D0F0((uint64_t)__p, &v643);
              pixelBuffer = v643;
              if (*((_QWORD *)&v643 + 1))
              {
                v163 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                do
                  v164 = __ldxr(v163);
                while (__stxr(v164 + 1, v163));
                v165 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
                if (*((_QWORD *)&v643 + 1))
                {
                  v166 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                  do
                    v167 = __ldaxr(v166);
                  while (__stlxr(v167 - 1, v166));
                  if (!v167)
                  {
                    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                    std::__shared_weak_count::__release_weak(v165);
                  }
                }
              }
              sub_23979BCF4(__p);
              if (!CVPixelBufferGetIOSurface((CVPixelBufferRef)pixelBuffer))
              {
                sub_239A444D4((uint64_t)"unknown file", 526, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              if (*(_BYTE *)v623 && *v624 == 1)
                v168 = espresso_network_bind_direct_cvpixelbuffer();
              else
                v168 = espresso_network_bind_input_cvpixelbuffer();
              sub_23965CBD8((uint64_t)&v598, v628, v168);
              v169 = (std::__shared_weak_count *)*((_QWORD *)&pixelBuffer + 1);
              if (*((_QWORD *)&pixelBuffer + 1))
              {
                v170 = (unint64_t *)(*((_QWORD *)&pixelBuffer + 1) + 8);
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
              v172 = *(std::__shared_weak_count **)v621;
              if (*(_QWORD *)v621)
              {
                v173 = (unint64_t *)(*(_QWORD *)v621 + 8);
                do
                  v174 = __ldaxr(v173);
                while (__stlxr(v174 - 1, v173));
                if (!v174)
                {
                  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                  std::__shared_weak_count::__release_weak(v172);
                }
              }
              v175 = nullsub_4(&v619);
              v176 = 1;
              goto LABEL_527;
            }
            v721 = *(_OWORD *)width;
            v722 = v586;
            v723 = v587;
            v724 = v588;
            LOBYTE(v725) = 0;
            v733 = 0;
            if (v597)
            {
              v725 = &off_250ADB210;
              v148 = v590;
              v149 = v591;
              if (v591)
              {
                v150 = (unint64_t *)&v591->__shared_owners_;
                do
                  v151 = __ldxr(v150);
                while (__stxr(v151 + 1, v150));
                v152 = v594;
                v153 = v595;
                v154 = v596;
                do
                  v155 = __ldxr(v150);
                while (__stxr(v155 + 1, v150));
              }
              else
              {
                v152 = v594;
                v153 = v595;
                v154 = v596;
              }
              v726 = v148;
              v727 = v149;
              v728 = v592;
              v729 = v593;
              v730 = v152;
              v731 = v153;
              v732 = v154;
              if (v149)
              {
                v360 = (unint64_t *)&v149->__shared_owners_;
                do
                  v361 = __ldaxr(v360);
                while (__stlxr(v361 - 1, v360));
                if (!v361)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
              v733 = 1;
            }
            sub_23965C1C8((uint64_t)&v721, (uint64_t)__p);
            if (v733)
            {
              v362 = nullsub_4(&v728);
              v363 = v727;
              if (v727)
              {
                v364 = (unint64_t *)&v727->__shared_owners_;
                do
                  v365 = __ldaxr(v364);
                while (__stlxr(v365 - 1, v364));
                if (!v365)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v363->__on_zero_shared)(v363, v362);
                  std::__shared_weak_count::__release_weak(v363);
                }
              }
              nullsub_4(&v725);
            }
            if ((_BYTE)v760)
            {
              *(_QWORD *)&v664 = &off_250AE2800;
              v366 = *(_QWORD *)&__p[8];
              v367 = *(std::__shared_weak_count **)&__p[16];
              if (*(_QWORD *)&__p[16])
              {
                v368 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                do
                  v369 = __ldxr(v368);
                while (__stxr(v369 + 1, v368));
                do
                  v370 = __ldxr(v368);
                while (__stxr(v370 + 1, v368));
                *(_OWORD *)&v665[8] = *(_OWORD *)&__p[24];
                *(_OWORD *)&v665[24] = *(_OWORD *)&__p[40];
                v666 = *(_OWORD *)&__p[56];
                do
                  v371 = __ldxr(v368);
                while (__stxr(v371 + 1, v368));
                *((_QWORD *)&v664 + 1) = v366;
                *(_QWORD *)v665 = v367;
                do
                  v372 = __ldaxr(v368);
                while (__stlxr(v372 - 1, v368));
                if (!v372)
                {
                  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                  std::__shared_weak_count::__release_weak(v367);
                }
                do
                  v373 = __ldaxr(v368);
                while (__stlxr(v373 - 1, v368));
                if (!v373)
                {
                  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                  std::__shared_weak_count::__release_weak(v367);
                }
              }
              else
              {
                *((_QWORD *)&v664 + 1) = *(_QWORD *)&__p[8];
                *(_QWORD *)v665 = 0;
                *(_OWORD *)&v665[8] = *(_OWORD *)&__p[24];
                *(_OWORD *)&v665[24] = *(_OWORD *)&__p[40];
                v666 = *(_OWORD *)&__p[56];
              }
              sub_23965C52C((uint64_t)&v598, (uint64_t)&v623, *((uint64_t *)&v664 + 1), *(std::__shared_weak_count **)v665);
              v382 = *(std::__shared_weak_count **)v665;
              if (*(_QWORD *)v665)
              {
                v383 = (unint64_t *)(*(_QWORD *)v665 + 8);
                do
                  v384 = __ldaxr(v383);
                while (__stlxr(v384 - 1, v383));
                if (!v384)
                {
                  ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                  std::__shared_weak_count::__release_weak(v382);
                }
              }
              v385 = &v664;
              goto LABEL_519;
            }
            v697 = *(_OWORD *)width;
            v698 = v586;
            v699 = v587;
            v700 = v588;
            LOBYTE(v701) = 0;
            v709 = 0;
            if (v597)
            {
              v701 = &off_250ADB210;
              v374 = v590;
              v375 = v591;
              if (v591)
              {
                v376 = (unint64_t *)&v591->__shared_owners_;
                do
                  v377 = __ldxr(v376);
                while (__stxr(v377 + 1, v376));
                v378 = v594;
                v379 = v595;
                v380 = v596;
                do
                  v381 = __ldxr(v376);
                while (__stxr(v381 + 1, v376));
              }
              else
              {
                v378 = v594;
                v379 = v595;
                v380 = v596;
              }
              v702 = v374;
              v703 = v375;
              v704 = v592;
              v705 = v593;
              v706 = v378;
              v707 = v379;
              v708 = v380;
              if (v375)
              {
                v522 = (unint64_t *)&v375->__shared_owners_;
                do
                  v523 = __ldaxr(v522);
                while (__stlxr(v523 - 1, v522));
                if (!v523)
                {
                  ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                  std::__shared_weak_count::__release_weak(v375);
                }
              }
              v709 = 1;
            }
            v175.n128_f64[0] = sub_23965C7C4((uint64_t)&v697, (uint64_t)&v643);
            if (v709)
            {
              v524 = nullsub_4(&v704);
              v525 = v703;
              if (v703)
              {
                v526 = (unint64_t *)&v703->__shared_owners_;
                do
                  v527 = __ldaxr(v526);
                while (__stlxr(v527 - 1, v526));
                if (!v527)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v525->__on_zero_shared)(v525, v524);
                  std::__shared_weak_count::__release_weak(v525);
                }
              }
              v175 = nullsub_4(&v701);
            }
            if (LOBYTE(v646[0]))
            {
              v614 = &off_250AE28F8;
              v528 = *((_QWORD *)&v643 + 1);
              v529 = *(std::__shared_weak_count **)v644;
              if (*(_QWORD *)v644)
              {
                v530 = (unint64_t *)(*(_QWORD *)v644 + 8);
                do
                  v531 = __ldxr(v530);
                while (__stxr(v531 + 1, v530));
                do
                  v532 = __ldxr(v530);
                while (__stxr(v532 + 1, v530));
                v617 = *(_OWORD *)&v644[8];
                v618 = *(_QWORD *)&v644[24];
                do
                  v533 = __ldxr(v530);
                while (__stxr(v533 + 1, v530));
                v615 = (uint64_t (***)())v528;
                v616 = v529;
                do
                  v534 = __ldaxr(v530);
                while (__stlxr(v534 - 1, v530));
                if (!v534)
                {
                  ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
                  std::__shared_weak_count::__release_weak(v529);
                }
                do
                  v535 = __ldaxr(v530);
                while (__stlxr(v535 - 1, v530));
                if (!v535)
                {
                  ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
                  std::__shared_weak_count::__release_weak(v529);
                }
                v536 = v616;
                v528 = (uint64_t)v615;
                if (v616)
                {
                  v537 = (unint64_t *)&v616->__shared_owners_;
                  do
                    v538 = __ldxr(v537);
                  while (__stxr(v538 + 1, v537));
                  do
                    v539 = __ldaxr(v537);
                  while (__stlxr(v539 - 1, v537));
                  if (!v539)
                  {
                    ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                    std::__shared_weak_count::__release_weak(v536);
                  }
                }
              }
              else
              {
                v615 = (uint64_t (***)())*((_QWORD *)&v643 + 1);
                v616 = 0;
                v617 = *(_OWORD *)&v644[8];
                v618 = *(_QWORD *)&v644[24];
              }
              sub_239772734(v528, &pixelBuffer);
              sub_23979D0F0((uint64_t)&pixelBuffer, &v641);
              v638 = v641;
              v639 = v642;
              if (v642)
              {
                v540 = (unint64_t *)&v642->__shared_owners_;
                do
                  v541 = __ldxr(v540);
                while (__stxr(v541 + 1, v540));
                v542 = v642;
                if (v642)
                {
                  v543 = (unint64_t *)&v642->__shared_owners_;
                  do
                    v544 = __ldaxr(v543);
                  while (__stlxr(v544 - 1, v543));
                  if (!v544)
                  {
                    ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                    std::__shared_weak_count::__release_weak(v542);
                  }
                }
              }
              sub_23979BCF4(&pixelBuffer);
              if (!CVPixelBufferGetIOSurface(v638))
              {
                sub_239A444D4((uint64_t)"unknown file", 526, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              if (*(_BYTE *)v623 && *v624 == 1)
                v545 = espresso_network_bind_direct_cvpixelbuffer();
              else
                v545 = espresso_network_bind_input_cvpixelbuffer();
              sub_23965CBD8((uint64_t)&v598, v628, v545);
              v546 = v639;
              if (v639)
              {
                v547 = (unint64_t *)&v639->__shared_owners_;
                do
                  v548 = __ldaxr(v547);
                while (__stlxr(v548 - 1, v547));
                if (!v548)
                {
                  ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                  std::__shared_weak_count::__release_weak(v546);
                }
              }
              v549 = v616;
              if (v616)
              {
                v550 = (unint64_t *)&v616->__shared_owners_;
                do
                  v551 = __ldaxr(v550);
                while (__stlxr(v551 - 1, v550));
                if (!v551)
                {
                  ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                  std::__shared_weak_count::__release_weak(v549);
                }
              }
              v175 = nullsub_4(&v614);
              if (LOBYTE(v646[0]))
              {
                v552 = *(std::__shared_weak_count **)v644;
                if (*(_QWORD *)v644)
                {
                  v553 = (unint64_t *)(*(_QWORD *)v644 + 8);
                  do
                    v554 = __ldaxr(v553);
                  while (__stlxr(v554 - 1, v553));
                  if (!v554)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v552->__on_zero_shared)(v552, v175);
                    std::__shared_weak_count::__release_weak(v552);
                  }
                }
                v385 = &v643;
LABEL_519:
                v175 = nullsub_4(v385);
              }
              v176 = 1;
              if (!(_BYTE)v760)
                goto LABEL_527;
            }
            else
            {
              v176 = 0;
              if (!(_BYTE)v760)
                goto LABEL_527;
            }
            v386 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v387 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v388 = __ldaxr(v387);
              while (__stlxr(v388 - 1, v387));
              if (!v388)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v386->__on_zero_shared)(v386, v175);
                std::__shared_weak_count::__release_weak(v386);
              }
            }
            v175 = nullsub_4(__p);
LABEL_527:
            if (BYTE8(v737))
            {
              v389 = *(std::__shared_weak_count **)v736;
              if (*(_QWORD *)v736)
              {
                v390 = (unint64_t *)(*(_QWORD *)v736 + 8);
                do
                  v391 = __ldaxr(v390);
                while (__stlxr(v391 - 1, v390));
                if (!v391)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v389->__on_zero_shared)(v389, v175);
                  std::__shared_weak_count::__release_weak(v389);
                }
              }
              nullsub_4(&v735);
            }
            if (v176)
              goto LABEL_704;
            v107 = 1;
            v108 = v558;
            v109 = (_QWORD *)*v558;
            if (!*v558)
              goto LABEL_536;
            goto LABEL_173;
          }
          v556 = 477;
        }
        else
        {
          v556 = 476;
        }
        sub_239A444D4((uint64_t)"unknown file", v556, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v22 = 4;
      if (v603 != 65)
        v22 = 1;
      if (v22 != *(unsigned int *)&v602[24])
      {
        sub_239A444D4((uint64_t)"unknown file", 669, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v572 = *(_OWORD *)v602;
      v573 = *(_OWORD *)&v602[16];
      v574 = *(_OWORD *)&v602[32];
      v575 = v603;
      LOBYTE(v576) = 0;
      v584 = 0;
      if (v612)
      {
        v576 = &off_250ADB210;
        v23 = v605;
        v24 = v606;
        if (v606)
        {
          v25 = (unint64_t *)&v606->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          v27 = v609;
          v28 = v610;
          v29 = v611;
          do
            v30 = __ldxr(v25);
          while (__stxr(v30 + 1, v25));
        }
        else
        {
          v27 = v609;
          v28 = v610;
          v29 = v611;
        }
        v577 = v23;
        v578 = v24;
        v579 = v607;
        v580 = v608;
        v581 = v27;
        v582 = v28;
        v583 = v29;
        if (v24)
        {
          v31 = (unint64_t *)&v24->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v584 = 1;
      }
      *(_QWORD *)&pixelBuffer = v613;
      v33 = v5[16];
      if (*(_BYTE *)(v33 + 152))
      {
        v34 = *(_QWORD *)(v33 + 128);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v33 + 136) - v34) >> 2) > v613)
        {
          v35 = (_BYTE *)(v34 + 28 * v613);
          if (v35[12] || v35[20] | v35[24])
          {
            sub_239A444D4((uint64_t)"unknown file", 406, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
        }
      }
      sub_23964FC9C(v33 + 8, v613, (uint64_t)&v735);
      v36 = espresso_network_bind_buffer();
      if (v736[8] && (v736[7] & 0x80000000) != 0)
        operator delete((void *)v735.i64[0]);
      if (!v36)
      {
        v742 = v763;
        v743 = v764;
        v744 = v765;
        v738 = *(_OWORD *)&__p[64];
        v739 = v760;
        v741 = v762;
        v740 = v761;
        v735 = *(int64x2_t *)__p;
        *(_OWORD *)v736 = *(_OWORD *)&__p[16];
        v737 = *(_OWORD *)&__p[48];
        *(_OWORD *)&v736[16] = *(_OWORD *)&__p[32];
        sub_239659E0C(&v735, (uint64_t)&v745);
        v697 = v572;
        v698 = v573;
        v699 = v574;
        v700 = v575;
        LOBYTE(v701) = 0;
        v709 = 0;
        if (v584)
        {
          v701 = &off_250ADB210;
          v39 = v577;
          v40 = v578;
          if (v578)
          {
            v41 = (unint64_t *)&v578->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            v43 = v581;
            v44 = v582;
            v45 = v583;
            do
              v46 = __ldxr(v41);
            while (__stxr(v46 + 1, v41));
          }
          else
          {
            v43 = v581;
            v44 = v582;
            v45 = v583;
          }
          v702 = v39;
          v703 = v40;
          v704 = v579;
          v705 = v580;
          v706 = v43;
          v707 = v44;
          v708 = v45;
          if (v40)
          {
            v84 = (unint64_t *)&v40->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v709 = 1;
        }
        sub_23965A380((uint64_t)&v697, (uint64_t)v710);
        sub_239659E0C((int64x2_t *)v710, (uint64_t)&v721);
        if (v709)
        {
          v87 = nullsub_4(&v704);
          v88 = v703;
          if (v703)
          {
            v89 = (unint64_t *)&v703->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v88->__on_zero_shared)(v88, v87);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          nullsub_4(&v701);
        }
        if (v734 == 1)
        {
          if (v758 != 1)
          {
            sub_239A444D4((uint64_t)"unknown file", 446, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          *(_OWORD *)v684 = v721;
          v685 = v722;
          v686 = v723;
          v687 = v724;
          LOBYTE(v688) = 0;
          v696 = 0;
          if (v733)
          {
            v688 = &off_250ADB1D0;
            v91 = v726;
            v92 = v727;
            if (v727)
            {
              v93 = (unint64_t *)&v727->__shared_owners_;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
              v95 = v730;
              v96 = v731;
              v97 = v732;
              do
                v98 = __ldxr(v93);
              while (__stxr(v98 + 1, v93));
            }
            else
            {
              v95 = v730;
              v96 = v731;
              v97 = v732;
            }
            v689 = v91;
            v690 = v92;
            v691 = v728;
            v692 = v729;
            v693 = v95;
            v694 = v96;
            v695 = v97;
            if (v92)
            {
              v177 = (unint64_t *)&v92->__shared_owners_;
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v696 = 1;
            if (v758 != 1)
              sub_23964B158();
          }
          v674 = v745;
          *(_OWORD *)v675 = v746;
          *(_OWORD *)&v675[16] = v747;
          *(_DWORD *)&v675[32] = v748;
          LOBYTE(v676) = 0;
          v683 = 0;
          v179 = v757;
          if (v757)
          {
            *(_QWORD *)&v676 = &off_250ADB1D0;
            v180 = v750;
            v181 = v751;
            if (v751)
            {
              v182 = (unint64_t *)&v751->__shared_owners_;
              do
                v183 = __ldxr(v182);
              while (__stxr(v183 + 1, v182));
              v184 = v754;
              v185 = v755;
              v186 = v756;
              do
                v187 = __ldxr(v182);
              while (__stxr(v187 + 1, v182));
            }
            else
            {
              v184 = v754;
              v185 = v755;
              v186 = v756;
            }
            *((_QWORD *)&v676 + 1) = v180;
            v677 = v181;
            v678 = v752;
            v679 = v753;
            v680 = v184;
            v681 = v185;
            v682 = v186;
            if (v181)
            {
              v206 = (unint64_t *)&v181->__shared_owners_;
              do
                v207 = __ldaxr(v206);
              while (__stlxr(v207 - 1, v206));
              if (!v207)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
              v181 = v677;
            }
            v683 = 1;
            v664 = v674;
            *(_OWORD *)v665 = *(_OWORD *)v675;
            *(_OWORD *)&v665[16] = *(_OWORD *)&v675[16];
            *(_DWORD *)&v665[32] = *(_DWORD *)&v675[32];
            v673 = 0;
            *(_QWORD *)&v666 = &off_250ADB1D0;
            v208 = *((_QWORD *)&v676 + 1);
            if (v181)
            {
              v209 = (unint64_t *)&v181->__shared_owners_;
              do
                v210 = __ldxr(v209);
              while (__stxr(v210 + 1, v209));
              v211 = v680;
              v212 = v681;
              v213 = v682;
              do
                v214 = __ldxr(v209);
              while (__stxr(v214 + 1, v209));
            }
            else
            {
              v211 = v680;
              v212 = v681;
              v213 = v682;
            }
            *((_QWORD *)&v666 + 1) = v208;
            v667 = v181;
            v668 = v678;
            v669 = v679;
            v670 = v211;
            v671 = v212;
            v672 = v213;
            if (v181)
            {
              v215 = (unint64_t *)&v181->__shared_owners_;
              do
                v216 = __ldaxr(v215);
              while (__stlxr(v216 - 1, v215));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            v179 = 1;
          }
          else
          {
            v664 = v745;
            *(_OWORD *)v665 = v746;
            *(_OWORD *)&v665[16] = v747;
            *(_DWORD *)&v665[32] = v748;
            LOBYTE(v666) = 0;
          }
          v673 = v179;
          sub_239646938((uint64_t)v684, v86, (uint64_t)&v619);
          sub_239646938((uint64_t)&v664, v217, (uint64_t)&v614);
          v598 = &v619;
          v599 = (size_t *)&v614;
          sub_239660078((uint64_t *)&v598);
          if (v673)
          {
            v218 = nullsub_4(&v668);
            v219 = v667;
            if (v667)
            {
              v220 = (unint64_t *)&v667->__shared_owners_;
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v219->__on_zero_shared)(v219, v218);
                std::__shared_weak_count::__release_weak(v219);
              }
            }
            nullsub_4(&v666);
          }
          if (v683)
          {
            v222 = nullsub_4(&v678);
            v223 = v677;
            if (v677)
            {
              v224 = (unint64_t *)&v677->__shared_owners_;
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v223->__on_zero_shared)(v223, v222);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            nullsub_4(&v676);
          }
          if (v696)
          {
            v226 = nullsub_4(&v691);
            v227 = v690;
            if (v690)
            {
              v228 = (unint64_t *)&v690->__shared_owners_;
              do
                v229 = __ldaxr(v228);
              while (__stlxr(v229 - 1, v228));
LABEL_447:
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v227->__on_zero_shared)(v227, v226);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            goto LABEL_449;
          }
          goto LABEL_450;
        }
        if (v734)
          sub_23964B158();
        *(_OWORD *)v684 = v721;
        v685 = v722;
        v686 = v723;
        v687 = v724;
        LOBYTE(v688) = 0;
        v696 = 0;
        if (v733)
        {
          v688 = &off_250ADB1D0;
          v99 = v726;
          v100 = v727;
          if (v727)
          {
            v101 = (unint64_t *)&v727->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            v103 = v730;
            v104 = v731;
            v105 = v732;
            do
              v106 = __ldxr(v101);
            while (__stxr(v106 + 1, v101));
          }
          else
          {
            v103 = v730;
            v104 = v731;
            v105 = v732;
          }
          v689 = v99;
          v690 = v100;
          v691 = v728;
          v692 = v729;
          v693 = v103;
          v694 = v104;
          v695 = v105;
          if (v100)
          {
            v188 = (unint64_t *)&v100->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          v696 = 1;
        }
        if (v758 != 1)
        {
          if (v758)
            sub_23964B158();
          v654 = v745;
          *(_OWORD *)v655 = v746;
          *(_OWORD *)&v655[16] = v747;
          *(_DWORD *)&v655[32] = v748;
          LOBYTE(v656) = 0;
          v663 = 0;
          if (v757)
          {
            *(_QWORD *)&v656 = &off_250ADB1D0;
            v190 = v750;
            v191 = v751;
            if (v751)
            {
              v192 = (unint64_t *)&v751->__shared_owners_;
              do
                v193 = __ldxr(v192);
              while (__stxr(v193 + 1, v192));
              v194 = v754;
              v195 = v755;
              v196 = v756;
              do
                v197 = __ldxr(v192);
              while (__stxr(v197 + 1, v192));
            }
            else
            {
              v194 = v754;
              v195 = v755;
              v196 = v756;
            }
            *((_QWORD *)&v656 + 1) = v190;
            v657 = v191;
            v658 = v752;
            v659 = v753;
            v660 = v194;
            v661 = v195;
            v662 = v196;
            if (v191)
            {
              v337 = (unint64_t *)&v191->__shared_owners_;
              do
                v338 = __ldaxr(v337);
              while (__stlxr(v338 - 1, v337));
              if (!v338)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            v663 = 1;
          }
          sub_2396477D0((uint64_t)v684, v86, (uint64_t)&v674);
          sub_2396477D0((uint64_t)&v654, v339, (uint64_t)&v619);
          v614 = (uint64_t (**)())&v674;
          v615 = &v619;
          sub_23966118C((size_t *)&v614);
          if (v663)
          {
            v332 = nullsub_4(&v658);
            v333 = v657;
            v334 = &v656;
            if (v657)
            {
              v340 = (unint64_t *)&v657->__shared_owners_;
              do
                v341 = __ldaxr(v340);
              while (__stlxr(v341 - 1, v340));
              v334 = &v656;
              if (!v341)
                goto LABEL_441;
            }
            goto LABEL_442;
          }
          goto LABEL_443;
        }
        v643 = v745;
        *(_OWORD *)v644 = v746;
        *(_OWORD *)&v644[16] = v747;
        v645 = v748;
        LOBYTE(v646[0]) = 0;
        v653 = 0;
        if (v757)
        {
          v646[0] = &off_250ADB1D0;
          v198 = v750;
          v199 = v751;
          if (v751)
          {
            v200 = (unint64_t *)&v751->__shared_owners_;
            do
              v201 = __ldxr(v200);
            while (__stxr(v201 + 1, v200));
            v202 = v754;
            v203 = v755;
            v204 = v756;
            do
              v205 = __ldxr(v200);
            while (__stxr(v205 + 1, v200));
          }
          else
          {
            v202 = v754;
            v203 = v755;
            v204 = v756;
          }
          v646[1] = v198;
          v647 = v199;
          v648 = v752;
          v649 = v753;
          v650 = v202;
          v651 = v203;
          v652 = v204;
          if (v199)
          {
            v233 = (unint64_t *)&v199->__shared_owners_;
            do
              v234 = __ldaxr(v233);
            while (__stlxr(v234 - 1, v233));
            if (!v234)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          v653 = 1;
        }
        sub_2396477D0((uint64_t)v684, v86, (uint64_t)&v619);
        sub_239646938((uint64_t)&v643, v235, (uint64_t)&v614);
        v236 = *(float *)&v621[4];
        v237.i64[0] = __PAIR64__(*(unsigned int *)v621, v620);
        v237.i64[1] = *(_QWORD *)&v621[4];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v237))) & 1) != 0 || !HIDWORD(v620))
        {
LABEL_423:
          if (v653)
          {
            v332 = nullsub_4(&v648);
            v333 = v647;
            v334 = (__int128 *)v646;
            if (v647)
            {
              v335 = (unint64_t *)&v647->__shared_owners_;
              do
                v336 = __ldaxr(v335);
              while (__stlxr(v336 - 1, v335));
              v334 = (__int128 *)v646;
              if (!v336)
              {
LABEL_441:
                ((void (*)(std::__shared_weak_count *, __n128))v333->__on_zero_shared)(v333, v332);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
LABEL_442:
            nullsub_4(v334);
          }
LABEL_443:
          if (v696)
          {
            v226 = nullsub_4(&v691);
            v227 = v690;
            if (v690)
            {
              v342 = (unint64_t *)&v690->__shared_owners_;
              do
                v229 = __ldaxr(v342);
              while (__stlxr(v229 - 1, v342));
              goto LABEL_447;
            }
LABEL_449:
            nullsub_4(&v688);
          }
LABEL_450:
          LOBYTE(v674) = 0;
          BYTE7(v685) = 0;
          LOBYTE(v684[0]) = 0;
          sub_23957E1BC((uint64_t)&v623, &v674, (uint64_t)v684);
          if (SBYTE7(v685) < 0)
          {
            operator delete(v684[0]);
            v343 = v734;
            if (v734 == -1)
              goto LABEL_455;
          }
          else
          {
            v343 = v734;
            if (v734 == -1)
            {
LABEL_455:
              if (v758 != -1)
                ((void (*)(__int128 *, __int128 *))off_250AE29E0[v758])(&v721, &v745);
              goto LABEL_457;
            }
          }
          ((void (*)(void **, __int128 *))off_250AE29E0[v343])(v684, &v721);
          goto LABEL_455;
        }
        BYTE12(v674) = v621[12];
        BYTE13(v674) = v621[13];
        BYTE14(v674) = v621[14];
        HIBYTE(v674) = v621[15];
        v675[0] = BYTE4(v617);
        v675[1] = BYTE5(v617);
        v675[2] = BYTE6(v617);
        v675[3] = BYTE7(v617);
        DWORD2(v674) = v620 - 1;
        *(_DWORD *)&v675[4] = HIDWORD(v620) - 1;
        v675[8] = v621[16];
        v675[9] = v621[17];
        v675[10] = v621[18];
        v675[11] = v621[19];
        v675[12] = BYTE8(v617);
        v675[13] = BYTE9(v617);
        v675[14] = BYTE10(v617);
        v675[15] = BYTE11(v617);
        *(_QWORD *)&v674 = 0;
        v675[20] = v621[20];
        v675[21] = v621[21];
        v675[22] = v621[22];
        v675[23] = v621[23];
        v675[24] = BYTE12(v617);
        v675[25] = BYTE13(v617);
        v675[26] = BYTE14(v617);
        v675[27] = HIBYTE(v617);
        v238 = *(_DWORD *)&v621[4] - 1;
        *(_DWORD *)&v675[16] = *(_DWORD *)v621 - 1;
        *(_DWORD *)&v675[28] = *(_DWORD *)&v621[4] - 1;
        v675[32] = v622;
        v675[33] = BYTE1(v622);
        v675[34] = BYTE2(v622);
        v675[35] = BYTE3(v622);
        v675[36] = v618;
        v675[37] = BYTE1(v618);
        v675[38] = BYTE2(v618);
        v675[39] = BYTE3(v618);
        *(_QWORD *)((char *)&v676 + 4) = HIDWORD(v622) | ((unint64_t)HIDWORD(v618) << 32);
        v239 = v619;
        v240 = (float *)v614;
        LODWORD(v676) = *(_DWORD *)&v621[8] - 1;
        if (*(_DWORD *)&v621[8] == 1)
        {
LABEL_419:
          if (v238)
          {
            v330 = 0;
            do
            {
              v331 = v240;
              v236 = sub_2396624F4(&v674, v239, v240, v236);
              v239 = (uint64_t (**)())((char *)v239 + *(unsigned int *)&v675[32]);
              v240 = &v331[*(unsigned int *)&v675[36]];
              ++v330;
            }
            while (v330 < *(_DWORD *)&v675[28]);
          }
          sub_2396624F4(&v674, v239, v240, v236);
          goto LABEL_423;
        }
        v241 = 0;
        while (2)
        {
          v561 = v241;
          v242 = *(_DWORD *)&v675[28];
          v562 = v240;
          v563 = v239;
          v243 = v240;
          v244 = v239;
          if (!*(_DWORD *)&v675[28])
          {
LABEL_358:
            v236 = sub_2396624F4(&v674, v244, v243, v236);
            v239 = (uint64_t (**)())((char *)v563 + DWORD1(v676));
            v240 = &v562[DWORD2(v676)];
            v241 = v561 + 1;
            if (v561 + 1 >= v676)
            {
              v238 = *(_DWORD *)&v675[28];
              v5 = (_QWORD *)a1;
              goto LABEL_419;
            }
            continue;
          }
          break;
        }
        v245 = *(_DWORD *)&v675[16];
        v246 = *(unsigned int *)&v675[32];
        v247 = *(_DWORD *)&v675[4];
        v248 = DWORD2(v674);
        if (*(_DWORD *)&v675[16])
        {
          v249 = *(unsigned int *)&v675[20];
          v250 = *(unsigned int *)&v675[24];
          if (*(_DWORD *)&v675[4])
          {
            v570 = 4 * *(unsigned int *)&v675[36];
            v251 = *(unsigned int *)&v675[8];
            v252 = *(unsigned int *)&v675[24];
            v253 = 4 * *(unsigned int *)&v675[12];
            v254 = 0;
            if (DWORD2(v674))
            {
              v255 = HIDWORD(v674);
              v256 = 4 * *(unsigned int *)v675;
              v244 = v563;
              v257 = &v240[(unint64_t)v253 / 4];
              v258 = &v240[v252];
              v259 = &v240[*(unsigned int *)&v675[24] + (unint64_t)*(unsigned int *)&v675[12]];
              v260 = &v240[(unint64_t)v253 / 4 + v252];
              v243 = v240;
              v568 = *(_DWORD *)&v675[28];
              v567 = *(unsigned int *)&v675[32];
              do
              {
                v571 = v254;
                v261 = 0;
                v262 = v260;
                v263 = v259;
                v264 = v258;
                v265 = v257;
                v266 = v243;
                v267 = v244;
                do
                {
                  v268 = 0;
                  v269 = v264;
                  v270 = v263;
                  v271 = v262;
                  v272 = v265;
                  v273 = v266;
                  v274 = v267;
                  do
                  {
                    v275 = v272;
                    v276 = v273;
                    v277 = v248;
                    v278 = v274;
                    do
                    {
                      LOBYTE(v236) = *(_BYTE *)v278;
                      v236 = (float)LODWORD(v236);
                      *v276 = v236;
                      v278 = (uint64_t (**)())((char *)v278 + v255);
                      v276 = (float *)((char *)v276 + v256);
                      --v277;
                    }
                    while (v277);
                    LOBYTE(v236) = *(_BYTE *)v278;
                    v236 = (float)LODWORD(v236);
                    *v276 = v236;
                    v274 = (uint64_t (**)())((char *)v274 + v251);
                    v273 = (float *)((char *)v273 + v253);
                    ++v268;
                    v272 = &v275[(unint64_t)v253 / 4];
                  }
                  while (v268 != v247);
                  v279 = v248;
                  do
                  {
                    LOBYTE(v236) = *(_BYTE *)v274;
                    v236 = (float)LODWORD(v236);
                    *v275 = v236;
                    v274 = (uint64_t (**)())((char *)v274 + v255);
                    v275 = (float *)((char *)v275 + v256);
                    --v279;
                  }
                  while (v279);
                  LOBYTE(v236) = *(_BYTE *)v274;
                  v267 = (uint64_t (**)())((char *)v267 + v249);
                  v266 = (float *)((char *)v266 + v252 * 4);
                  ++v261;
                  v265 = (float *)((char *)v265 + v252 * 4);
                  v236 = (float)LODWORD(v236);
                  *v275 = v236;
                  v264 = &v269[v252];
                  v263 = &v270[v252];
                  v262 = &v271[v252];
                }
                while (v261 != v245);
                v280 = 0;
                do
                {
                  v281 = v270;
                  v282 = v271;
                  v283 = v269;
                  v284 = v248;
                  v285 = v267;
                  do
                  {
                    LOBYTE(v236) = *(_BYTE *)v285;
                    v236 = (float)LODWORD(v236);
                    *v283 = v236;
                    v285 = (uint64_t (**)())((char *)v285 + v255);
                    v283 = (float *)((char *)v283 + v256);
                    --v284;
                  }
                  while (v284);
                  LOBYTE(v236) = *(_BYTE *)v285;
                  v236 = (float)LODWORD(v236);
                  *v283 = v236;
                  v267 = (uint64_t (**)())((char *)v267 + v251);
                  v269 = (float *)((char *)v269 + v253);
                  ++v280;
                  v270 = (float *)((char *)v270 + v253);
                  v271 = &v282[(unint64_t)v253 / 4];
                }
                while (v280 != v247);
                v286 = v248;
                a3 = v569;
                do
                {
                  LOBYTE(v236) = *(_BYTE *)v267;
                  v236 = (float)LODWORD(v236);
                  *v282 = v236;
                  v267 = (uint64_t (**)())((char *)v267 + v255);
                  v281 = (float *)((char *)v281 + v256);
                  v282 = (float *)((char *)v282 + v256);
                  --v286;
                }
                while (v286);
                LOBYTE(v236) = *(_BYTE *)v267;
                v244 = (uint64_t (**)())((char *)v244 + v567);
                v243 = (float *)((char *)v243 + v570);
                v254 = v571 + 1;
                v257 = (float *)((char *)v257 + v570);
                v236 = (float)LODWORD(v236);
                *v281 = v236;
                v258 = (float *)((char *)v258 + v570);
                v259 = (float *)((char *)v259 + v570);
                v260 = (float *)((char *)v260 + v570);
              }
              while (v571 + 1 != v568);
            }
            else
            {
              v243 = v240;
              v244 = v563;
              v315 = &v240[v252];
              do
              {
                v316 = 0;
                v317 = v315;
                v318 = v243;
                v319 = v244;
                do
                {
                  v320 = v317;
                  v321 = v318;
                  v322 = v247;
                  v323 = v319;
                  do
                  {
                    LOBYTE(v236) = *(_BYTE *)v323;
                    v236 = (float)LODWORD(v236);
                    *v321 = v236;
                    v323 = (uint64_t (**)())((char *)v323 + v251);
                    v321 = (float *)((char *)v321 + v253);
                    --v322;
                  }
                  while (v322);
                  LOBYTE(v236) = *(_BYTE *)v323;
                  v236 = (float)LODWORD(v236);
                  *v321 = v236;
                  v319 = (uint64_t (**)())((char *)v319 + v249);
                  v318 = (float *)((char *)v318 + v252 * 4);
                  ++v316;
                  v317 = &v320[v252];
                }
                while (v316 != v245);
                v324 = v247;
                do
                {
                  LOBYTE(v236) = *(_BYTE *)v319;
                  v236 = (float)LODWORD(v236);
                  *v320 = v236;
                  v319 = (uint64_t (**)())((char *)v319 + v251);
                  v320 = (float *)((char *)v320 + v253);
                  --v324;
                }
                while (v324);
                LOBYTE(v236) = *(_BYTE *)v319;
                v236 = (float)LODWORD(v236);
                *v320 = v236;
                v244 = (uint64_t (**)())((char *)v244 + v246);
                v243 = (float *)((char *)v243 + v570);
                ++v254;
                v315 = (float *)((char *)v315 + v570);
              }
              while (v254 != v242);
            }
          }
          else if (DWORD2(v674))
          {
            v300 = 0;
            v301 = 4 * *(unsigned int *)&v675[36];
            v302 = *(unsigned int *)&v675[24];
            v303 = HIDWORD(v674);
            v304 = 4 * *(unsigned int *)v675;
            v243 = v240;
            v244 = v563;
            v305 = &v240[v302];
            do
            {
              v306 = 0;
              v307 = v305;
              v308 = v243;
              v309 = v244;
              do
              {
                v310 = v307;
                v311 = v308;
                v312 = v248;
                v313 = v309;
                do
                {
                  LOBYTE(v236) = *(_BYTE *)v313;
                  v236 = (float)LODWORD(v236);
                  *v311 = v236;
                  v313 = (uint64_t (**)())((char *)v313 + v303);
                  v311 = (float *)((char *)v311 + v304);
                  --v312;
                }
                while (v312);
                LOBYTE(v236) = *(_BYTE *)v313;
                v236 = (float)LODWORD(v236);
                *v311 = v236;
                v309 = (uint64_t (**)())((char *)v309 + v249);
                v308 = (float *)((char *)v308 + v302 * 4);
                ++v306;
                v307 = &v310[v302];
              }
              while (v306 != v245);
              v314 = v248;
              do
              {
                LOBYTE(v236) = *(_BYTE *)v309;
                v236 = (float)LODWORD(v236);
                *v310 = v236;
                v309 = (uint64_t (**)())((char *)v309 + v303);
                v310 = (float *)((char *)v310 + v304);
                --v314;
              }
              while (v314);
              LOBYTE(v236) = *(_BYTE *)v309;
              v236 = (float)LODWORD(v236);
              *v310 = v236;
              v244 = (uint64_t (**)())((char *)v244 + v246);
              v243 = (float *)((char *)v243 + v301);
              ++v300;
              v305 = (float *)((char *)v305 + v301);
            }
            while (v300 != v242);
          }
          else
          {
            v325 = 0;
            v326 = 4 * *(unsigned int *)&v675[36];
            v243 = v240;
            v244 = v563;
            do
            {
              v327 = v243;
              v328 = v245;
              v329 = v244;
              do
              {
                LOBYTE(v236) = *(_BYTE *)v329;
                v236 = (float)LODWORD(v236);
                *v327 = v236;
                v329 = (uint64_t (**)())((char *)v329 + v249);
                v327 += v250;
                --v328;
              }
              while (v328);
              LOBYTE(v236) = *(_BYTE *)v329;
              v236 = (float)LODWORD(v236);
              *v327 = v236;
              v244 = (uint64_t (**)())((char *)v244 + v246);
              v243 = (float *)((char *)v243 + v326);
              ++v325;
            }
            while (v325 != v242);
          }
          goto LABEL_358;
        }
        v287 = *(unsigned int *)&v675[8];
        v288 = 4 * *(unsigned int *)&v675[36];
        v289 = HIDWORD(v674);
        v290 = 4 * *(unsigned int *)&v675[12];
        v291 = 4 * *(unsigned int *)v675;
        v243 = v240;
        v244 = v563;
        while (2)
        {
          v292 = v244;
          v293 = v243;
          if (v247)
          {
            v293 = v243;
            v294 = v247;
            v292 = v244;
            if (v248)
            {
              v295 = 0;
              v293 = v243;
              v292 = v244;
              do
              {
                v296 = v293;
                v297 = v248;
                v298 = v292;
                do
                {
                  LOBYTE(v236) = *(_BYTE *)v298;
                  v236 = (float)LODWORD(v236);
                  *v296 = v236;
                  v298 = (uint64_t (**)())((char *)v298 + v289);
                  v296 = (float *)((char *)v296 + v291);
                  --v297;
                }
                while (v297);
                LOBYTE(v236) = *(_BYTE *)v298;
                v236 = (float)LODWORD(v236);
                *v296 = v236;
                v292 = (uint64_t (**)())((char *)v292 + v287);
                v293 = (float *)((char *)v293 + v290);
                ++v295;
              }
              while (v295 != v247);
              goto LABEL_388;
            }
            do
            {
              LOBYTE(v236) = *(_BYTE *)v292;
              v236 = (float)LODWORD(v236);
              *v293 = v236;
              v292 = (uint64_t (**)())((char *)v292 + v287);
              v293 = (float *)((char *)v293 + v290);
              --v294;
            }
            while (v294);
          }
          else
          {
LABEL_388:
            if (v248)
            {
              v299 = v248;
              do
              {
                LOBYTE(v236) = *(_BYTE *)v292;
                v236 = (float)LODWORD(v236);
                *v293 = v236;
                v292 = (uint64_t (**)())((char *)v292 + v289);
                v293 = (float *)((char *)v293 + v291);
                --v299;
              }
              while (v299);
            }
          }
          LOBYTE(v236) = *(_BYTE *)v292;
          v236 = (float)LODWORD(v236);
          *v293 = v236;
          v244 = (uint64_t (**)())((char *)v244 + v246);
          v243 = (float *)((char *)v243 + v288);
          if (++v245 == v242)
            goto LABEL_358;
          continue;
        }
      }
      LOBYTE(v745) = 5;
      sub_23964A648((unint64_t *)&pixelBuffer, (std::string *)v710);
      v37 = std::string::insert((std::string *)v710, 0, "Failed to bind buffer created for Espresso Model input ");
      v38 = *(int64x2_t *)&v37->__r_.__value_.__l.__data_;
      *(_QWORD *)v736 = *((_QWORD *)&v37->__r_.__value_.__l + 2);
      v735 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      sub_23957E1BC((uint64_t)&v623, &v745, (uint64_t)&v735);
      if ((v736[7] & 0x80000000) != 0)
      {
        operator delete((void *)v735.i64[0]);
        if ((v710[23] & 0x80000000) == 0)
          goto LABEL_457;
      }
      else if ((v710[23] & 0x80000000) == 0)
      {
        goto LABEL_457;
      }
      operator delete(*(void **)v710);
LABEL_457:
      *(_BYTE *)(a3 + 8) = (_BYTE)v624;
      v344 = v625;
      v345 = v626;
      if (v626)
      {
        v346 = (unint64_t *)(v626 + 1);
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
      }
      v348 = *(std::__shared_weak_count **)(a3 + 24);
      *(_QWORD *)(a3 + 16) = v344;
      *(_QWORD *)(a3 + 24) = v345;
      if (!v348)
        goto LABEL_464;
      v349 = (unint64_t *)&v348->__shared_owners_;
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
        v623 = &off_250ADC870;
        v351 = (std::__shared_weak_count *)v626;
        if (!v626)
          goto LABEL_470;
      }
      else
      {
LABEL_464:
        v623 = &off_250ADC870;
        v351 = (std::__shared_weak_count *)v626;
        if (!v626)
          goto LABEL_470;
      }
      v352 = (unint64_t *)&v351->__shared_owners_;
      do
        v353 = __ldaxr(v352);
      while (__stlxr(v353 - 1, v352));
      if (!v353)
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
LABEL_470:
      v354 = nullsub_4(&v623);
      if (v584)
      {
        v355 = nullsub_4(&v579);
        v356 = v578;
        if (v578)
        {
          v357 = (unint64_t *)&v578->__shared_owners_;
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v356->__on_zero_shared)(v356, v355);
            std::__shared_weak_count::__release_weak(v356);
          }
        }
        v359 = &v576;
LABEL_725:
        v354 = nullsub_4(v359);
      }
LABEL_726:
      v6 = v566;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_727;
      *(_QWORD *)a3 = &off_250ADC870;
      v501 = *(std::__shared_weak_count **)(a3 + 24);
      if (!v501)
        goto LABEL_733;
      v502 = (unint64_t *)&v501->__shared_owners_;
      do
        v503 = __ldaxr(v502);
      while (__stlxr(v503 - 1, v502));
      if (!v503)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v501->__on_zero_shared)(v501, v354);
        std::__shared_weak_count::__release_weak(v501);
        nullsub_4(a3);
        v500 = 1;
        v6 = v566;
        if (v612)
        {
LABEL_734:
          v504 = nullsub_4(&v607);
          v505 = v606;
          if (v606)
          {
            v506 = (unint64_t *)&v606->__shared_owners_;
            do
              v507 = __ldaxr(v506);
            while (__stlxr(v507 - 1, v506));
            if (!v507)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v505->__on_zero_shared)(v505, v504);
              std::__shared_weak_count::__release_weak(v505);
            }
          }
          nullsub_4(&v604);
        }
      }
      else
      {
LABEL_733:
        nullsub_4(a3);
        v500 = 1;
        v6 = v566;
        if (v612)
          goto LABEL_734;
      }
LABEL_740:
      if ((v500 & 1) == 0)
        return;
      if (++v6 == v564)
        goto LABEL_838;
    }
    LOBYTE(v745) = 3;
    sub_23964A648(&v613, (std::string *)v710);
    v18 = std::string::insert((std::string *)v710, 0, "Invalid input: The given view for input ");
    v19 = *(int64x2_t *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)v736 = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    v735 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append((std::string *)&v735, " requires both a color format and type definition in its format flags.");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_23957E1BC(a3, &v745, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((v736[7] & 0x80000000) == 0)
      {
LABEL_19:
        if ((v710[23] & 0x80000000) == 0)
          goto LABEL_727;
LABEL_33:
        operator delete(*(void **)v710);
LABEL_727:
        v500 = 0;
        if (v612)
          goto LABEL_734;
        goto LABEL_740;
      }
    }
    else if ((v736[7] & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete((void *)v735.i64[0]);
    if ((v710[23] & 0x80000000) == 0)
      goto LABEL_727;
    goto LABEL_33;
  }
LABEL_838:
  v735.i8[0] = 0;
  __p[23] = 0;
  __p[0] = 0;
  sub_23957E1BC(a3, &v735, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_23965931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a66;

  sub_23948FBF0((uint64_t)&STACK[0x8F0]);
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  sub_23948FBF0((uint64_t)&STACK[0x260]);
  sub_23948FC6C(a66);
  sub_23948FBF0((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_239659770(_Unwind_Exception *a1)
{
  sub_23948FBF0((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_239659784(_Unwind_Exception *a1)
{
  sub_23948FBF0((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_239659798(_Unwind_Exception *a1)
{
  sub_23948FBF0((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_2396597AC(_Unwind_Exception *a1)
{
  sub_23948FBF0((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

double sub_2396597C0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double result;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *exception;
  _BYTE v16[16];
  std::__shared_weak_count *v17;
  uint64_t v18;
  char v19;
  int v20;
  int32x4_t v21;
  char v22;
  _DWORD v23[5];

  if (*((_DWORD *)a1 + 40) != 65568)
    sub_239EC13D8();
  v4 = a1[15];
  if (HIDWORD(v4)
    || (v5 = a1[10], HIDWORD(v5))
    || (v6 = a1[11], HIDWORD(v6))
    || (v7 = a1[12], HIDWORD(v7))
    || (v8 = a1[13], HIDWORD(v8)))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_250AF2150;
    __cxa_throw(exception, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
  }
  v9 = *a1;
  sub_239644B20(v23, v4, v5, v6, v7, v8);
  v20 = 1;
  v21 = vuzp1q_s32(*(int32x4_t *)(a1 + 15), *(int32x4_t *)(a1 + 17));
  v22 = 1;
  v16[0] = 0;
  v19 = 0;
  sub_239643F70(a2, v9, v23, &v20, &unk_239EC81C8, v16);
  if (v19)
  {
    v11 = nullsub_4(&v18);
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_QWORD *)&result = nullsub_4(v16).n128_u64[0];
  }
  return result;
}

void sub_239659910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FA2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_239659924(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          v5 = nullsub_4(v3 - 40);
          v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          nullsub_4(v3 - 64);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2396599D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  unint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 *v38;
  char v39;
  __int128 v40;
  unint64_t v41;
  _OWORD v42[3];
  int v43;
  uint64_t (**v44)();
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  char v52;
  int v53;
  _BYTE v54[9];

  sub_23965516C(a1, a2, (uint64_t)&v33);
  v4 = v34;
  if (v34 || !v39)
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v4;
    v5 = v36;
    *(_QWORD *)(a3 + 16) = v35;
    *(_QWORD *)(a3 + 24) = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  else
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = 0;
    v9 = v36;
    *(_QWORD *)(a3 + 16) = v35;
    *(_QWORD *)(a3 + 24) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      if (!v39)
        sub_2394875CC();
    }
    v41 = 0;
    v40 = 0uLL;
    sub_23965B584((char **)&v40, 0xEEEEEEEEEEEEEEEFLL * (((char *)v38 - v37) >> 3));
    v12 = (__int128 *)v37;
    v13 = v38;
    if (v37 != (char *)v38)
    {
      do
      {
        v14 = *v12;
        v15 = v12[1];
        v16 = v12[2];
        v43 = *((_DWORD *)v12 + 12);
        v42[1] = v15;
        v42[2] = v16;
        v42[0] = v14;
        LOBYTE(v44) = 0;
        v52 = 0;
        if (*((_BYTE *)v12 + 112))
        {
          v44 = &off_250ADB210;
          v17 = *((_QWORD *)v12 + 8);
          v18 = (std::__shared_weak_count *)*((_QWORD *)v12 + 9);
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
            v21 = *((_QWORD *)v12 + 12);
            v22 = *((_DWORD *)v12 + 26);
            v23 = *((_WORD *)v12 + 54);
            do
              v24 = __ldxr(p_shared_owners);
            while (__stxr(v24 + 1, p_shared_owners));
          }
          else
          {
            v21 = *((_QWORD *)v12 + 12);
            v22 = *((_DWORD *)v12 + 26);
            v23 = *((_WORD *)v12 + 54);
          }
          v45 = v17;
          v46 = v18;
          v25 = *((_DWORD *)v12 + 22);
          v47 = *((_QWORD *)v12 + 10);
          v48 = v25;
          v49 = v21;
          v50 = v22;
          v51 = v23;
          if (v18)
          {
            v26 = (unint64_t *)&v18->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v52 = 1;
        }
        v53 = 2;
        v28 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1) >= v41)
        {
          v30 = sub_23965B800((char **)&v40, (uint64_t)v42);
        }
        else
        {
          **((_BYTE **)&v40 + 1) = 0;
          *(_DWORD *)(v28 + 120) = -1;
          v29 = v53;
          if (v53 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, _OWORD *))off_250AE25E8[v53])(v54, v28, v42);
            *(_DWORD *)(v28 + 120) = v29;
          }
          v30 = (char *)(v28 + 128);
        }
        *((_QWORD *)&v40 + 1) = v30;
        if (v53 != -1)
          ((void (*)(_BYTE *, _OWORD *))off_250AE25D0[v53])(v54, v42);
        v12 = (__int128 *)((char *)v12 + 120);
      }
      while (v12 != v13);
    }
    v31 = v41;
    *(_OWORD *)(a3 + 32) = v40;
    *(_QWORD *)(a3 + 48) = v31;
    v8 = 1;
  }
  *(_BYTE *)(a3 + 56) = v8;
  return sub_23948FF04((uint64_t)&v33);
}

void sub_239659C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_23948FC6C(v9);
  sub_23948FF04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239659C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _QWORD *v17;

  sub_239659CE4(&a17);
  sub_23948FC6C(v17);
  sub_23948FF04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_239659CE4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_250AE25D0[v6])(&v8, v3 - 128);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239659D88()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, (struct type_info *)&unk_250ADB2E0, MEMORY[0x24BEDAAC0]);
}

void sub_239659DC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_239659DD8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1 && *(_DWORD *)(a1 + 12) == 1;
}

BOOL sub_239659DEC(uint64_t a1)
{
  uint64_t v1;

  v1 = 4;
  if (*(_DWORD *)(a1 + 48) != 65)
    v1 = 1;
  return v1 == *(unsigned int *)(a1 + 24);
}

void sub_239659E0C(int64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int32 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t *v38;
  uint64_t v39;
  _QWORD *exception;
  _QWORD *v41;
  int64x2_t v42;
  int64x2_t v43;
  __int128 v44;
  __int128 v45;
  __n128 v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[30];
  char v51;
  _OWORD v52[7];
  uint64_t v53;
  unsigned int v54;
  _BYTE v55[16];
  std::__shared_weak_count *v56;
  _BYTE v57[32];
  char v58;
  __int128 v59;
  int v60;
  char v61;
  __int128 v62;

  v53 = 0;
  memset(v52, 0, sizeof(v52));
  sub_239644B20(v52, 0, 0, 0, 0, 0);
  memset((char *)&v52[1] + 4, 0, 24);
  *(_QWORD *)((char *)&v52[2] + 12) = 0x1000000000;
  BYTE8(v52[3]) = 0;
  LOBYTE(v53) = 0;
  v54 = 0;
  v4 = a1[10].i32[0];
  if (v4 != 262152)
  {
    if (v4 != 65568)
    {
      sub_239A444D4((uint64_t)"unknown file", 724, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v5 = a1[7].u64[1];
    if (HIDWORD(v5)
      || (v6 = a1[5].u64[0], HIDWORD(v6))
      || (v7 = a1[5].u64[1], HIDWORD(v7))
      || (v8 = a1[6].u64[0], HIDWORD(v8))
      || (v9 = a1[6].u64[1], HIDWORD(v9)))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &unk_250AF2150;
      __cxa_throw(exception, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
    }
    v10 = a1->i64[0];
    v42 = a1[8];
    v11 = a1[9].i64[0];
    sub_239644B20(&v62, v5, v6, v7, v8, v9);
    LODWORD(v59) = 1;
    DWORD1(v59) = v5;
    *((int32x2_t *)&v59 + 1) = vmovn_s64(v42);
    v60 = v11;
    v61 = 1;
    v55[0] = 0;
    v58 = 0;
    sub_239643CC8((uint64_t)&v44, v10, &v62, &v59, &dword_239EC81C4, (uint64_t)v55);
    if (v58)
    {
      v12 = nullsub_4(v57);
      v13 = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      nullsub_4(v55);
    }
    v16 = v45;
    *(_OWORD *)a2 = v44;
    *(_OWORD *)(a2 + 16) = v16;
    v17 = v46;
    *(__n128 *)(a2 + 32) = v46;
    *(_DWORD *)(a2 + 48) = v47;
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (!v51)
    {
      *(_DWORD *)(a2 + 120) = 1;
      v39 = v54;
      if (v54 == -1)
        return;
      goto LABEL_44;
    }
    *(_QWORD *)(a2 + 56) = &off_250ADB1D0;
    v18 = v49;
    v19 = *(_OWORD *)v50;
    v49 = 0uLL;
    *(_OWORD *)(a2 + 64) = v18;
    *(_OWORD *)(a2 + 80) = v19;
    *(_OWORD *)(a2 + 94) = *(_OWORD *)&v50[14];
    *(_BYTE *)(a2 + 112) = 1;
    *(_DWORD *)(a2 + 120) = 1;
    v20 = nullsub_4(v50);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
    if (!*((_QWORD *)&v49 + 1))
      goto LABEL_37;
    v22 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    goto LABEL_36;
  }
  v24 = a1[7].u64[1];
  if (HIDWORD(v24)
    || (v25 = a1[5].u64[0], HIDWORD(v25))
    || (v26 = a1[5].u64[1], HIDWORD(v26))
    || (v27 = a1[6].u64[0], HIDWORD(v27))
    || (v28 = a1[6].u64[1], HIDWORD(v28)))
  {
    v41 = __cxa_allocate_exception(8uLL);
    *v41 = &unk_250AF2150;
    __cxa_throw(v41, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
  }
  v29 = a1->i64[0];
  v43 = a1[8];
  v30 = a1[9].i64[0];
  sub_239644B20(&v62, v24, v25, v26, v27, v28);
  LODWORD(v59) = 1;
  DWORD1(v59) = v24;
  *((int32x2_t *)&v59 + 1) = vmovn_s64(v43);
  v60 = v30;
  v61 = 1;
  v55[0] = 0;
  v58 = 0;
  sub_239643CC8((uint64_t)&v44, v29, &v62, &v59, &dword_239EC81CC, (uint64_t)v55);
  if (v58)
  {
    v31 = nullsub_4(v57);
    v32 = v56;
    if (v56)
    {
      v33 = (unint64_t *)&v56->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v32->__on_zero_shared)(v32, v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    nullsub_4(v55);
  }
  v35 = v45;
  *(_OWORD *)a2 = v44;
  *(_OWORD *)(a2 + 16) = v35;
  v17 = v46;
  *(__n128 *)(a2 + 32) = v46;
  *(_DWORD *)(a2 + 48) = v47;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v51)
  {
    *(_DWORD *)(a2 + 120) = 0;
    v39 = v54;
    if (v54 == -1)
      return;
    goto LABEL_44;
  }
  *(_QWORD *)(a2 + 56) = &off_250ADB1D0;
  v36 = v49;
  v37 = *(_OWORD *)v50;
  v49 = 0uLL;
  *(_OWORD *)(a2 + 64) = v36;
  *(_OWORD *)(a2 + 80) = v37;
  *(_OWORD *)(a2 + 94) = *(_OWORD *)&v50[14];
  *(_BYTE *)(a2 + 112) = 1;
  *(_DWORD *)(a2 + 120) = 0;
  v20 = nullsub_4(v50);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v23 = __ldaxr(v38);
    while (__stlxr(v23 - 1, v38));
LABEL_36:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
      std::__shared_weak_count::__release_weak(v21);
      v17 = nullsub_4(&v48);
      v39 = v54;
      if (v54 == -1)
        return;
      goto LABEL_44;
    }
  }
LABEL_37:
  v17 = nullsub_4(&v48);
  v39 = v54;
  if (v54 == -1)
    return;
LABEL_44:
  ((void (*)(__int128 *, _OWORD *, __n128))off_250AE29E0[v39])(&v44, v52, v17);
}

void sub_23965A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_23948FA2C(v27 - 160);
  sub_23965A328((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_23965A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_23965A328((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_23965A300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_23965A328((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_23965A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_23965A328((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_23965A328(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250AE29E0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

float sub_23965A380@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 0x40) != 0)
  {
    v5 = 4;
    *(_DWORD *)(a2 + 160) = 65568;
    if (!*(_BYTE *)(a1 + 112))
    {
LABEL_4:
      v6 = (uint64_t *)(a1 + 40);
      goto LABEL_16;
    }
  }
  else
  {
    if ((v4 & 0x10) == 0)
      sub_239EC1408();
    v5 = 1;
    *(_DWORD *)(a2 + 160) = 262152;
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_4;
  }
  if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v7 + 88))(v7, 0, "unknown location");
  }
  v6 = (uint64_t *)(a1 + 96);
LABEL_16:
  v12 = *v6;
  v13 = *(_QWORD *)(a1 + 4);
  *(_QWORD *)&v14 = v13;
  *((_QWORD *)&v14 + 1) = HIDWORD(v13);
  *(_OWORD *)(a2 + 80) = v14;
  v15 = *(_DWORD *)(a1 + 24) / v5;
  v16 = *(_DWORD *)(a1 + 36);
  v17 = *(_DWORD *)(a1 + 32) / v5;
  *(_QWORD *)(a2 + 128) = *(_DWORD *)(a1 + 28) / v5;
  *(_QWORD *)(a2 + 136) = v17;
  *(_QWORD *)(a2 + 112) = 1;
  *(_QWORD *)(a2 + 120) = v15;
  v18 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(a2 + 104) = v18;
  v19 = v16 / v5;
  *(_QWORD *)(a2 + 144) = v19;
  *(_QWORD *)(a2 + 152) = v18 * (unint64_t)v19;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = 0;
  return *(float *)&v13;
}

void sub_23965A4B8(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  void *__p;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[40];

  if (*a1)
  {
    sub_239647D60(a2 + 8, (uint64_t)&__p);
    if (v13[32])
    {
      v4 = nullsub_4(v13);
      v5 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      nullsub_4(&v11);
      v8 = 0;
      HIBYTE(v10) = 0;
      LOBYTE(__p) = 0;
      sub_23957E1BC(a3, &v8, (uint64_t)&__p);
    }
    else
    {
      v8 = 3;
      __p = operator new(0x40uLL);
      v10 = xmmword_239EC95E0;
      strcpy((char *)__p, "Use direct bind requires CVPixelBuffer backed image (CVImage).");
      sub_23957E1BC(a3, &v8, (uint64_t)&__p);
    }
  }
  else
  {
    v8 = 0;
    HIBYTE(v10) = 0;
    LOBYTE(__p) = 0;
    sub_23957E1BC(a3, &v8, (uint64_t)&__p);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_23965A608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23965A62C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  char *v5;
  char *v6;
  void **v7;
  void *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (*(_BYTE *)(a1 + 4))
  {
    sub_23965A738((uint64_t)__p, (uint64_t)&v9);
    v5 = v10;
  }
  else
  {
    v5 = sub_239628298(&v9, "nullopt");
    v10 = v5;
  }
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v9, (uint64_t)v5, (uint64_t)__p, a2, v3, v4);
  if (v13 < 0)
    operator delete(__p[0]);
  v6 = (char *)v9;
  if (v9)
  {
    v7 = (void **)v10;
    v8 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = v9;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_23965A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_23965A738(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  char *v5;
  int v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;

  sub_239A43D24(&v9);
  sub_239A43E64(&v9);
  std::ostream::operator<<();
  sub_239A43E70();
  sub_239A43DB8(&v9);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= *(_QWORD *)(a2 + 16))
  {
    v5 = sub_23941ACDC((void **)a2, (uint64_t)__p);
    v6 = SHIBYTE(v8);
    *(_QWORD *)(a2 + 8) = v5;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 16) = v8;
    *(_OWORD *)v3 = v4;
    *(_QWORD *)(a2 + 8) = v3 + 24;
  }
}

void sub_23965A7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23965A814()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23965A828(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250AE2530;
  result[1] = v3;
  return result;
}

uint64_t sub_23965A860(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_250AE2530;
  a2[1] = v2;
  return result;
}

uint64_t sub_23965A880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_23965A888(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000239EC9638)
    return a1 + 8;
  if (((v3 & 0x8000000239EC9638 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000239EC9638))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000239EC9638 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *sub_23965A904()
{
  return &unk_250AE25B0;
}

_QWORD *sub_23965A910(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23965AAA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_23965AAB0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_23965AAB0(a1, *a2);
    sub_23965AAB0(a1, a2[1]);
    if (*((_BYTE *)a2 + 112))
    {
      if (*((_BYTE *)a2 + 104))
        sub_23979BCF4(a2 + 10);
    }
    operator delete(a2);
  }
}

uint64_t sub_23965AB08(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;

  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v8 >> 3) >= 0x186186186186187)
      sub_2394189F8();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 48) = v10;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 8);
  v11 = (_BYTE *)*((_QWORD *)a2 + 9);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v14 = (char *)operator new(v13);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 80) = v15;
    memcpy(v14, v12, v13 - 3);
    *(_QWORD *)(a1 + 72) = v15;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  v16 = (_QWORD *)*((_QWORD *)a2 + 11);
  v17 = a2 + 6;
  if (v16 != v17)
  {
    do
    {
      sub_23965ACFC((_QWORD **)(a1 + 88), (_QWORD *)(a1 + 96), v16 + 4, (uint64_t)(v16 + 4));
      v19 = (_QWORD *)v16[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v16[2];
          v21 = *v20 == (_QWORD)v16;
          v16 = v20;
        }
        while (!v21);
      }
      v16 = v20;
    }
    while (v20 != v17);
  }
  return a1;
}

void sub_23965ACB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_23965ACFC(_QWORD **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t **v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (uint64_t **)sub_23965AE34(a1, a2, &v20, &v19, a3);
  if (*v6)
    return *v6;
  v8 = v6;
  v9 = (char *)operator new(0x78uLL);
  v10 = v9;
  *((_QWORD *)v9 + 4) = *(_QWORD *)a4;
  v9[40] = 0;
  v9[112] = 0;
  if (*(_BYTE *)(a4 + 80))
  {
    v11 = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(v9 + 56) = v11;
    *((_QWORD *)v9 + 9) = *(_QWORD *)(a4 + 40);
    v9[80] = 0;
    v9[104] = 0;
    if (*(_BYTE *)(a4 + 72))
    {
      v13 = *(_QWORD *)(a4 + 56);
      v12 = *(_QWORD *)(a4 + 64);
      *((_QWORD *)v9 + 10) = &off_250AE94F0;
      *((_QWORD *)v9 + 11) = v13;
      *((_QWORD *)v9 + 12) = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v9[104] = 1;
    }
    v9[112] = 1;
  }
  v16 = v20;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v16;
  *v8 = (uint64_t *)v9;
  v17 = (_QWORD *)**a1;
  v18 = (uint64_t *)v9;
  if (v17)
  {
    *a1 = v17;
    v18 = *v8;
  }
  sub_2394213B8(a1[1], v18);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return (uint64_t *)v10;
}

_QWORD *sub_23965AE34(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_23965AFE4(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_20:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_OWORD *)&v4[v9 - 120];
        v13 = *(_OWORD *)&v4[v9 - 104];
        v14 = *(_OWORD *)&v4[v9 - 88];
        *((_DWORD *)v10 - 18) = *(_DWORD *)&v4[v9 - 72];
        *(_OWORD *)(v10 - 88) = v14;
        *(_OWORD *)(v10 - 104) = v13;
        *(_OWORD *)(v10 - 120) = v12;
        *(v10 - 64) = 0;
        *(v10 - 8) = 0;
        if (v4[v9 - 8])
        {
          *((_QWORD *)v10 - 8) = &off_250ADB210;
          *(_OWORD *)(v10 - 56) = *(_OWORD *)(v11 - 56);
          *((_QWORD *)v11 - 7) = 0;
          *((_QWORD *)v11 - 6) = 0;
          v15 = *(_OWORD *)(v11 - 40);
          *(_OWORD *)(v10 - 26) = *(_OWORD *)(v11 - 26);
          *(_OWORD *)(v10 - 40) = v15;
          *(v10 - 8) = 1;
        }
        v9 -= 120;
      }
      while (&v4[v9] != v2);
      v16 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v16)
      {
        do
        {
          if (*(v2 - 8))
          {
            v17 = nullsub_4(v2 - 40);
            v18 = (std::__shared_weak_count *)*((_QWORD *)v2 - 6);
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            nullsub_4(v2 - 64);
          }
          v2 -= 120;
        }
        while (v2 != v16);
        v2 = v16;
      }
      if (v2)
        goto LABEL_20;
    }
  }
}

uint64_t sub_23965B194(__int128 *a1, __int128 *a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr, _OWORD *))
{
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  __n128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD v27[10];
  uint64_t v28;
  _OWORD v29[3];
  int v30;
  uint64_t v31;
  __int128 v32;
  _OWORD v33[2];
  char v34;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *v7;
      v9 = v7[2];
      v27[1] = v7[1];
      v27[2] = v9;
      v27[0] = v8;
      v10 = v7[3];
      v11 = v7[4];
      v12 = v7[6];
      v27[5] = v7[5];
      v27[6] = v12;
      v27[3] = v10;
      v27[4] = v11;
      v13 = v7[7];
      v14 = v7[8];
      v15 = v7[9];
      v28 = *((_QWORD *)v7 + 20);
      v27[8] = v14;
      v27[9] = v15;
      v27[7] = v13;
      a4(v29, v27);
      v16 = *(_QWORD *)(a3 + 8);
      if (v16 >= *(_QWORD *)(a3 + 16))
      {
        v21 = sub_23965B338((char **)a3, (uint64_t)v29);
      }
      else
      {
        v17 = v29[0];
        v18 = v29[1];
        v19 = v29[2];
        *(_DWORD *)(v16 + 48) = v30;
        *(_OWORD *)(v16 + 16) = v18;
        *(_OWORD *)(v16 + 32) = v19;
        *(_OWORD *)v16 = v17;
        *(_BYTE *)(v16 + 56) = 0;
        *(_BYTE *)(v16 + 112) = 0;
        if (v34)
        {
          *(_QWORD *)(v16 + 56) = &off_250ADB210;
          *(_OWORD *)(v16 + 64) = v32;
          v32 = 0uLL;
          v20 = *(_OWORD *)((char *)v33 + 14);
          *(_OWORD *)(v16 + 80) = v33[0];
          *(_OWORD *)(v16 + 94) = v20;
          *(_BYTE *)(v16 + 112) = 1;
        }
        v21 = (char *)(v16 + 120);
      }
      *(_QWORD *)(a3 + 8) = v21;
      if (v34)
      {
        v22 = nullsub_4(v33);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v22);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        nullsub_4(&v31);
      }
      v7 = (__int128 *)((char *)v7 + 168);
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_23965B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_23948FBF0((uint64_t)&a30);
  _Unwind_Resume(a1);
}

char *sub_23965B338(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222)
    sub_2394189F8();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3) >= 0x111111111111111)
    v8 = 0x222222222222222;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x222222222222222)
      sub_239418A80();
    v9 = (char *)operator new(120 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[120 * v5];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 + 48);
  v10[56] = 0;
  v10[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *((_QWORD *)v10 + 7) = &off_250ADB210;
    v12 = &v9[120 * v5];
    v13 = *(_OWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *((_OWORD *)v12 + 4) = v13;
    *((_OWORD *)v12 + 5) = v14;
    *(_OWORD *)(v12 + 94) = *(_OWORD *)(a2 + 94);
    v10[112] = 1;
    v3 = *a1;
    v4 = a1[1];
  }
  v15 = &v9[120 * v8];
  v16 = v10 + 120;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    if (!v3)
      return v16;
    goto LABEL_30;
  }
  v17 = 0;
  do
  {
    v18 = &v10[v17];
    v19 = &v4[v17];
    v20 = *(_OWORD *)&v4[v17 - 120];
    v21 = *(_OWORD *)&v4[v17 - 104];
    v22 = *(_OWORD *)&v4[v17 - 88];
    *((_DWORD *)v18 - 18) = *(_DWORD *)&v4[v17 - 72];
    *(_OWORD *)(v18 - 88) = v22;
    *(_OWORD *)(v18 - 104) = v21;
    *(_OWORD *)(v18 - 120) = v20;
    *(v18 - 64) = 0;
    *(v18 - 8) = 0;
    if (v4[v17 - 8])
    {
      *((_QWORD *)v18 - 8) = &off_250ADB210;
      *(_OWORD *)(v18 - 56) = *(_OWORD *)(v19 - 56);
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      v23 = *(_OWORD *)(v19 - 40);
      *(_OWORD *)(v18 - 26) = *(_OWORD *)(v19 - 26);
      *(_OWORD *)(v18 - 40) = v23;
      *(v18 - 8) = 1;
    }
    v17 -= 120;
  }
  while (&v4[v17] != v3);
  v24 = *a1;
  v3 = a1[1];
  *a1 = &v10[v17];
  a1[1] = v16;
  a1[2] = v15;
  if (v3 != v24)
  {
    do
    {
      if (*(v3 - 8))
      {
        v25 = nullsub_4(v3 - 40);
        v26 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v25);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        nullsub_4(v3 - 64);
      }
      v3 -= 120;
    }
    while (v3 != v24);
    v3 = v24;
  }
  if (v3)
LABEL_30:
    operator delete(v3);
  return v16;
}

void sub_23965B584(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;

  v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 7)
  {
    if (a2 >> 57)
      sub_2394189F8();
    v4 = a1[1];
    v5 = a2 << 7;
    v6 = (char *)operator new(a2 << 7);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_15:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v8[v9 - 128] = 0;
        *(_DWORD *)&v8[v9 - 8] = -1;
        v10 = *(unsigned int *)&v4[v9 - 8];
        if ((_DWORD)v10 != -1)
        {
          ((void (*)(char *, char *, char *))off_250AE25E8[v10])(&v14, &v8[v9 - 128], &v4[v9 - 128]);
          *(_DWORD *)&v8[v9 - 8] = v10;
        }
        v9 -= 128;
      }
      while (&v4[v9] != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = v2 - 128;
          v13 = *((unsigned int *)v2 - 2);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, char *))off_250AE25D0[v13])(&v15, v2 - 128);
          *((_DWORD *)v2 - 2) = -1;
          v2 -= 128;
        }
        while (v12 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_15;
    }
  }
}

__n128 sub_23965B6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_23965B748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_23965B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

char *sub_23965B800(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_2394189F8();
  v8 = a1[2] - v3;
  if (v8 >> 6 > v6)
    v6 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 57)
      sub_239418A80();
    v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[128 * v5];
  *v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_250AE25E8[v12])(&v21, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    v3 = *a1;
    v4 = a1[1];
  }
  v13 = &v10[128 * v9];
  v14 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_25;
  }
  v15 = 0;
  do
  {
    v11[v15 - 128] = 0;
    *(_DWORD *)&v11[v15 - 8] = -1;
    v16 = *(unsigned int *)&v4[v15 - 8];
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, char *, char *))off_250AE25E8[v16])(&v22, &v11[v15 - 128], &v4[v15 - 128]);
      *(_DWORD *)&v11[v15 - 8] = v16;
    }
    v15 -= 128;
  }
  while (&v4[v15] != v3);
  v17 = *a1;
  v3 = a1[1];
  v14 = v11 + 128;
  *a1 = &v11[v15];
  a1[1] = v11 + 128;
  a1[2] = v13;
  if (v3 != v17)
  {
    do
    {
      v18 = v3 - 128;
      v19 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, char *))off_250AE25D0[v19])(&v23, v3 - 128);
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 128;
    }
    while (v18 != v17);
    v3 = v17;
  }
  if (v3)
LABEL_25:
    operator delete(v3);
  return v14;
}

double sub_23965B9E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __CVBuffer *v8;
  IOSurfaceRef IOSurface;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  char v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  char v38;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 104) != 25)
  {
    LOBYTE(v32) = 0;
    v38 = 0;
    goto LABEL_29;
  }
  v25 = &off_250AE1B60;
  sub_23964DC14(a1 + 56, (uint64_t)&v26);
  v32 = &off_250AE1B60;
  v33 = v26;
  v26 = 0uLL;
  v34 = v27;
  v35 = v28;
  v36 = v29;
  v37 = v30;
  v38 = 1;
  *(_QWORD *)&result = nullsub_4(&v25).n128_u64[0];
  if (!v38)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    goto LABEL_30;
  }
  sub_23965CDAC((uint64_t)&v32, (uint64_t)&v25);
  if (v31)
  {
    v4 = v26;
    if (*((_QWORD *)&v26 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
      }
    }
    sub_23976D898(v4, v24);
    v8 = (__CVBuffer *)sub_23979C580((uint64_t)v24);
    IOSurface = CVPixelBufferGetIOSurface(v8);
    sub_23979BCF4(v24);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (IOSurface)
    {
      if (!v31)
        goto LABEL_30;
      *(_QWORD *)a2 = &off_250AE2610;
      v10 = v26;
      if (*((_QWORD *)&v26 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
        v14 = v28;
        *(_OWORD *)(a2 + 24) = v27;
        *(_OWORD *)(a2 + 40) = v14;
        result = *(double *)&v29;
        *(_OWORD *)(a2 + 56) = v29;
        do
          v15 = __ldxr(v11);
        while (__stxr(v15 + 1, v11));
        *(_OWORD *)(a2 + 8) = v10;
        do
          v16 = __ldaxr(v11);
        while (__stlxr(v16 - 1, v11));
        if (!v16)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
        do
          v17 = __ldaxr(v11);
        while (__stlxr(v17 - 1, v11));
        if (!v17)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v26;
        *(_OWORD *)(a2 + 24) = v27;
        *(_OWORD *)(a2 + 40) = v28;
        result = *(double *)&v29;
        *(_OWORD *)(a2 + 56) = v29;
      }
      *(_BYTE *)(a2 + 80) = 1;
      if (!v31)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  if (v31)
  {
LABEL_42:
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v25).n128_u64[0];
  }
LABEL_30:
  if (v38)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v32).n128_u64[0];
  }
  return result;
}

void sub_23965BCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_23965BDB4((uint64_t)va);
  sub_23965BDB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23965BD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_23965BDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23965BD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_23979BCF4((uint64_t *)va);
  sub_23965BDB4((uint64_t)va1);
  sub_23965BDB4((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_23965BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

double sub_23965BD4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_23965BDB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_4(a1);
  }
  return a1;
}

double sub_23965BE1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __CVBuffer *v8;
  IOSurfaceRef IOSurface;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[3];
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[26];
  char v27;
  uint64_t (**v28)();
  __int128 v29;
  _OWORD v30[2];
  char v31;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    LOBYTE(v28) = 0;
    v31 = 0;
    goto LABEL_29;
  }
  v24 = &off_250ADB350;
  sub_2394949FC(a1 + 56, (uint64_t)&v25);
  v28 = &off_250ADB350;
  v29 = v25;
  v25 = 0uLL;
  v30[0] = *(_OWORD *)v26;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v26[10];
  v31 = 1;
  *(_QWORD *)&result = nullsub_4(&v24).n128_u64[0];
  if (!v31)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_30;
  }
  sub_23965E1FC((uint64_t)&v28, (uint64_t)&v24);
  if (v27)
  {
    v4 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
      }
    }
    sub_23976A2E8(v4, v23);
    v8 = (__CVBuffer *)sub_23979C580((uint64_t)v23);
    IOSurface = CVPixelBufferGetIOSurface(v8);
    sub_23979BCF4(v23);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    if (IOSurface)
    {
      if (!v27)
        goto LABEL_30;
      *(_QWORD *)a2 = &off_250AE2708;
      v10 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
        result = *(double *)v26;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v26;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v26[16];
        do
          v14 = __ldxr(v11);
        while (__stxr(v14 + 1, v11));
        *(_OWORD *)(a2 + 8) = v10;
        do
          v15 = __ldaxr(v11);
        while (__stlxr(v15 - 1, v11));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
        do
          v16 = __ldaxr(v11);
        while (__stlxr(v16 - 1, v11));
        if (!v16)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v25;
        result = *(double *)v26;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v26;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v26[16];
      }
      *(_BYTE *)(a2 + 56) = 1;
      if (!v27)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
  if (v27)
  {
LABEL_42:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v24).n128_u64[0];
  }
LABEL_30:
  if (v31)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v28).n128_u64[0];
  }
  return result;
}

void sub_23965C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_23965CB70((uint64_t)va);
  sub_23965CB70((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23965C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_23965CB70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23965C128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_23979BCF4((uint64_t *)va);
  sub_23965CB70((uint64_t)va1);
  sub_23965CB70((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_23965C14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

double sub_23965C160(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_23965C1C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __CVBuffer *v8;
  IOSurfaceRef IOSurface;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  char v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  char v38;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 104) != 5)
  {
    LOBYTE(v32) = 0;
    v38 = 0;
    goto LABEL_29;
  }
  v25 = &off_250ADB390;
  sub_23964B3D0(a1 + 56, (uint64_t)&v26);
  v32 = &off_250ADB390;
  v33 = v26;
  v26 = 0uLL;
  v34 = v27;
  v35 = v28;
  v36 = v29;
  v37 = v30;
  v38 = 1;
  *(_QWORD *)&result = nullsub_4(&v25).n128_u64[0];
  if (!v38)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    goto LABEL_30;
  }
  sub_23965EC20((uint64_t)&v32, (uint64_t)&v25);
  if (v31)
  {
    v4 = v26;
    if (*((_QWORD *)&v26 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
      }
    }
    sub_23976B524(v4, v24);
    v8 = (__CVBuffer *)sub_23979C580((uint64_t)v24);
    IOSurface = CVPixelBufferGetIOSurface(v8);
    sub_23979BCF4(v24);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (IOSurface)
    {
      if (!v31)
        goto LABEL_30;
      *(_QWORD *)a2 = &off_250AE2800;
      v10 = v26;
      if (*((_QWORD *)&v26 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
        v14 = v28;
        *(_OWORD *)(a2 + 24) = v27;
        *(_OWORD *)(a2 + 40) = v14;
        result = *(double *)&v29;
        *(_OWORD *)(a2 + 56) = v29;
        do
          v15 = __ldxr(v11);
        while (__stxr(v15 + 1, v11));
        *(_OWORD *)(a2 + 8) = v10;
        do
          v16 = __ldaxr(v11);
        while (__stlxr(v16 - 1, v11));
        if (!v16)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
        do
          v17 = __ldaxr(v11);
        while (__stlxr(v17 - 1, v11));
        if (!v17)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v26;
        *(_OWORD *)(a2 + 24) = v27;
        *(_OWORD *)(a2 + 40) = v28;
        result = *(double *)&v29;
        *(_OWORD *)(a2 + 56) = v29;
      }
      *(_BYTE *)(a2 + 80) = 1;
      if (!v31)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  if (v31)
  {
LABEL_42:
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v25).n128_u64[0];
  }
LABEL_30:
  if (v38)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v32).n128_u64[0];
  }
  return result;
}

void sub_23965C4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_23965BDB4((uint64_t)va);
  sub_23965BDB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23965C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_23965BDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23965C4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_23979BCF4((uint64_t *)va);
  sub_23965BDB4((uint64_t)va1);
  sub_23965BDB4((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_23965C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23965C52C(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  __CVBuffer *pixelBuffer;
  std::__shared_weak_count *v20;
  _QWORD v21[3];
  __CVBuffer *v22;
  std::__shared_weak_count *v23;

  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  sub_23976B524(a3, v21);
  sub_23979D0F0((uint64_t)v21, &v22);
  pixelBuffer = v22;
  v20 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = v23;
    if (v23)
    {
      v14 = (unint64_t *)&v23->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  sub_23979BCF4(v21);
  if (!CVPixelBufferGetIOSurface(pixelBuffer))
  {
    sub_239A444D4((uint64_t)"unknown file", 526, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (**(_BYTE **)a2 && **(_DWORD **)(a2 + 8) == 1)
    v16 = espresso_network_bind_direct_cvpixelbuffer();
  else
    v16 = espresso_network_bind_input_cvpixelbuffer();
  sub_23965CBD8(a1, *(unint64_t ****)(a2 + 40), v16);
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_23965C720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23965C734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23965C748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_23965C75C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

double sub_23965C7C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __CVBuffer *v8;
  IOSurfaceRef IOSurface;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[3];
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[26];
  char v27;
  uint64_t (**v28)();
  __int128 v29;
  _OWORD v30[2];
  char v31;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 104) != 3)
  {
    LOBYTE(v28) = 0;
    v31 = 0;
    goto LABEL_29;
  }
  v24 = &off_250AE1C58;
  sub_23964D014(a1 + 56, (uint64_t)&v25);
  v28 = &off_250AE1C58;
  v29 = v25;
  v25 = 0uLL;
  v30[0] = *(_OWORD *)v26;
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v26[10];
  v31 = 1;
  *(_QWORD *)&result = nullsub_4(&v24).n128_u64[0];
  if (!v31)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_30;
  }
  sub_23965F654((uint64_t)&v28, (uint64_t)&v24);
  if (v27)
  {
    v4 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      if (!v7)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
      }
    }
    sub_239772734(v4, v23);
    v8 = (__CVBuffer *)sub_23979C580((uint64_t)v23);
    IOSurface = CVPixelBufferGetIOSurface(v8);
    sub_23979BCF4(v23);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    if (IOSurface)
    {
      if (!v27)
        goto LABEL_30;
      *(_QWORD *)a2 = &off_250AE28F8;
      v10 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
        result = *(double *)v26;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v26;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v26[16];
        do
          v14 = __ldxr(v11);
        while (__stxr(v14 + 1, v11));
        *(_OWORD *)(a2 + 8) = v10;
        do
          v15 = __ldaxr(v11);
        while (__stlxr(v15 - 1, v11));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
        do
          v16 = __ldaxr(v11);
        while (__stlxr(v16 - 1, v11));
        if (!v16)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v25;
        result = *(double *)v26;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v26;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v26[16];
      }
      *(_BYTE *)(a2 + 56) = 1;
      if (!v27)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
  if (v27)
  {
LABEL_42:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v24).n128_u64[0];
  }
LABEL_30:
  if (v31)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_QWORD *)&result = nullsub_4(&v28).n128_u64[0];
  }
  return result;
}

void sub_23965CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_23965CB70((uint64_t)va);
  sub_23965CB70((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23965CABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_23965CB70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23965CAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_23979BCF4((uint64_t *)va);
  sub_23965CB70((uint64_t)va1);
  sub_23965CB70((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_23965CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

double sub_23965CB08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_23965CB70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_4(a1);
  }
  return a1;
}

void sub_23965CBD8(uint64_t a1, unint64_t ***a2, int a3)
{
  unint64_t *v4;
  std::string *v5;
  __int128 v6;
  _BYTE *v7;
  _QWORD *v8;
  std::string v9;
  void *__p[2];
  std::string::size_type v11;
  char v12;

  if (!a3)
  {
    *(_QWORD *)a1 = &off_250ADC870;
    *(_BYTE *)(a1 + 8) = 0;
    v7 = (_BYTE *)operator new();
    v7[23] = 0;
    *v7 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = (_QWORD *)operator new();
    *v8 = &unk_250ADEA78;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    *(_QWORD *)(a1 + 24) = v8;
    return;
  }
  v4 = **a2;
  v12 = 5;
  sub_23964A648(v4, &v9);
  v5 = std::string::insert(&v9, 0, "Failed to bind buffer created for Espresso Model input ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_23957E1BC(a1, &v12, (uint64_t)__p);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_7;
}

void sub_23965CD04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  v5 = v3;
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  MEMORY[0x23B83E31C](v5, 0x1012C40EC159624);
  nullsub_4(v1);
  _Unwind_Resume(a1);
}

void sub_23965CD4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1);
  _Unwind_Resume(a1);
}

void sub_23965CD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_23965CDAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v3)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (**v13)();
  _OWORD v14[4];
  char v15;

  v3 = *(uint64_t (****)())(a1 + 8);
  if (v3)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      if (*v3 == off_250AE7A78)
      {
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v8 = v5;
      }
      else
      {
        v8 = 0;
        v3 = 0;
      }
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (!v8)
        goto LABEL_16;
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v3)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        if (v3)
        {
LABEL_17:
          v13 = &off_250AE2610;
          sub_23965D074(a1, (uint64_t)v14);
          *(_QWORD *)a2 = &off_250AE2610;
          *(_OWORD *)(a2 + 8) = v14[0];
          v14[0] = 0uLL;
          *(_OWORD *)(a2 + 24) = v14[1];
          *(_OWORD *)(a2 + 40) = v14[2];
          *(_OWORD *)(a2 + 56) = v14[3];
          *(_BYTE *)(a2 + 72) = v15;
          *(_BYTE *)(a2 + 80) = 1;
          nullsub_4(&v13);
          return;
        }
      }
    }
    else if (*v3 == off_250AE7A78)
    {
      goto LABEL_17;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
}

void sub_23965CF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

void sub_23965CF58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23965CFC4()
{
  return 25;
}

uint64_t sub_23965CFCC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_23965CFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_23965CFF0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_23965D074(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_23965D1BC(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_23965D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23965D1BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_250AE7A78)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23965D2C8(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_23965D288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_239416DA0(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_23965D2C8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_p;
  _QWORD v24[2];
  std::string __p;

  v4 = sub_23965D9D4();
  v5 = sub_23964DF58();
  sub_23965D50C("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, &__p);
  if (!*(_QWORD *)(a1 + 8))
  {
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = size + 46;
    if (size + 46 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    if (v18 > 0x16)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v19 = (std::string *)operator new(v21 + 1);
      a2->__r_.__value_.__l.__size_ = v18;
      a2->__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      a2 = v19;
      if (!size)
      {
LABEL_30:
        strcpy((char *)v19 + size, " but the other image does not contain a buffer");
        if ((v16 & 0x80) == 0)
          return;
LABEL_31:
        operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      a2->__r_.__value_.__r.__words[0] = 0;
      v19 = a2;
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v18;
    }
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, p_p, size);
    goto LABEL_30;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v12 = a1 + 8;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(v12 + 8);
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
  }
  v24[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  v24[1] = v20;
  sub_23965D7F8((uint64_t)&__p, " but the other image contains an incompatible buffer type ", (uint64_t)v24, a2);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_31;
}

void sub_23965D4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23965D50C(const char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  int8x16_t v15;
  __int128 v16;
  size_t v17;
  size_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void **v24;
  void *v25;
  void *v26;
  char *v27;
  unint64_t v28;
  void *__p;
  char v30;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v9 = sub_23941A2D0(&v26, a1);
  v10 = v9;
  v27 = v9;
  if ((unint64_t)v9 >= v28)
  {
    v12 = sub_23941A624((char **)&v26, a2);
    v27 = v12;
    if ((unint64_t)v12 < v28)
      goto LABEL_8;
  }
  else
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      v11 = *(_OWORD *)a2;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v9 = v11;
      v12 = v9 + 24;
      v27 = v9 + 24;
      if ((unint64_t)(v9 + 24) >= v28)
        goto LABEL_4;
LABEL_8:
      v17 = strlen(a3);
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        sub_23941A5AC();
      v18 = v17;
      if (v17 >= 0x17)
      {
        v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v21 = v17 | 7;
        v22 = v21 + 1;
        v19 = operator new(v21 + 1);
        *((_QWORD *)v12 + 1) = v18;
        *((_QWORD *)v12 + 2) = v22 | 0x8000000000000000;
        *(_QWORD *)v12 = v19;
      }
      else
      {
        v12[23] = v17;
        v19 = v12;
        if (!v17)
        {
          *v12 = 0;
          v13 = v12 + 24;
          v27 = v12 + 24;
          if ((unint64_t)(v12 + 24) < v28)
            goto LABEL_5;
LABEL_12:
          v20 = sub_23941A624((char **)&v26, a4);
          goto LABEL_22;
        }
      }
      memmove(v19, a3, v18);
      *((_BYTE *)v19 + v18) = 0;
      v13 = v12 + 24;
      v27 = v12 + 24;
      if ((unint64_t)(v12 + 24) < v28)
        goto LABEL_5;
      goto LABEL_12;
    }
    sub_23941A7F8(v9, *(void **)a2, *(_QWORD *)(a2 + 8));
    v12 = v10 + 24;
    v27 = v10 + 24;
    if ((unint64_t)(v10 + 24) < v28)
      goto LABEL_8;
  }
LABEL_4:
  v13 = sub_23941A884(&v26, a3);
  v27 = v13;
  if ((unint64_t)v13 >= v28)
    goto LABEL_12;
LABEL_5:
  if (*(char *)(a4 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a4;
    *((_QWORD *)v13 + 2) = *(_QWORD *)(a4 + 16);
    *(_OWORD *)v13 = v16;
  }
  v20 = v13 + 24;
LABEL_22:
  v27 = v20;
  v30 = 0;
  LOBYTE(__p) = 0;
  sub_23941AE44((uint64_t)v26, (uint64_t)v20, (uint64_t)&__p, a5, v14, v15);
  if (v30 < 0)
    operator delete(__p);
  v23 = (char *)v26;
  if (v26)
  {
    v24 = (void **)v27;
    v25 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v24 - 1) < 0)
          operator delete(*(v24 - 3));
        v24 -= 3;
      }
      while (v24 != (void **)v23);
      v25 = v26;
    }
    v27 = v23;
    operator delete(v25);
  }
}

void sub_23965D76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_23941A260(&a9);
  _Unwind_Resume(a1);
}

void sub_23965D784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_23941A260(&a9);
  _Unwind_Resume(a1);
}

void sub_23965D79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_23965D7F8(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  size_t v8;
  size_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  char *v16;
  void **v17;
  void *v18;
  void *v19;
  char *v20;
  unint64_t v21;
  void *__p[2];
  char v23;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v7 = sub_23941A624((char **)&v19, a1);
  v20 = v7;
  if ((unint64_t)v7 >= v21)
  {
    v11 = sub_23965DFD0(&v19, a2);
    goto LABEL_12;
  }
  v8 = strlen(a2);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v10 = operator new(v12 + 1);
    *((_QWORD *)v7 + 1) = v9;
    *((_QWORD *)v7 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)v7 = v10;
  }
  else
  {
    v7[23] = v8;
    v10 = v7;
    if (!v8)
      goto LABEL_11;
  }
  memmove(v10, a2, v9);
LABEL_11:
  *((_BYTE *)v10 + v9) = 0;
  v11 = v7 + 24;
LABEL_12:
  v20 = v11;
  sub_23965DEA4((uint64_t)__p, (uint64_t)&v19, a3);
  v23 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v19, (uint64_t)v20, (uint64_t)__p, a4, v14, v15);
  if (v23 < 0)
    operator delete(__p[0]);
  v16 = (char *)v19;
  if (v19)
  {
    v17 = (void **)v20;
    v18 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v17 - 1) < 0)
          operator delete(*(v17 - 3));
        v17 -= 3;
      }
      while (v17 != (void **)v16);
      v18 = v19;
    }
    v20 = v16;
    operator delete(v18);
  }
}

void sub_23965D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_23965D9D4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256931040);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256931040))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23964E22C();
    sub_23965DBD8((std::string::size_type)v2, &v9);
    v3 = sub_23965DCA8();
    sub_23965DBD8((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256931028, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256931028, &dword_23940C000);
          __cxa_guard_release(&qword_256931040);
          return &stru_256931028;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256931028;
}

void sub_23965DB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256931040);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256931040);
  _Unwind_Resume(a1);
}

void sub_23965DBD8(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23965DC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23965DCA8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256931060);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256931060))
    return &xmmword_256931048;
  v2 = sub_23965DD84();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256931048, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256931058 = v2->__r_.__value_.__r.__words[2];
    xmmword_256931048 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256931048, &dword_23940C000);
  __cxa_guard_release(&qword_256931060);
  return &xmmword_256931048;
}

void sub_23965DD6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256931060);
  _Unwind_Resume(a1);
}

std::string *sub_23965DD84()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_256931080);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256931080))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVBuffer]", qword_256931068);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256931068, &dword_23940C000);
    __cxa_guard_release(&qword_256931080);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2569310A0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2569310A0))
    return &stru_256931088;
  sub_239A44118((std::string::size_type)qword_256931068, &stru_256931088);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256931088, &dword_23940C000);
  __cxa_guard_release(&qword_2569310A0);
  return &stru_256931088;
}

void sub_23965DE74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569310A0);
  _Unwind_Resume(a1);
}

void sub_23965DE8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256931080);
  _Unwind_Resume(a1);
}

void sub_23965DEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  const void *v5;
  __int128 *p_dst;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  __int128 __dst;
  unint64_t v14;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v5 = *(const void **)a3;
  if (v3 >= 0x17)
  {
    v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v9 = v3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v14 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_10:
    memmove(p_dst, v5, v3);
    *((_BYTE *)p_dst + v3) = 0;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 < *(_QWORD *)(a2 + 16))
      goto LABEL_5;
    goto LABEL_11;
  }
  HIBYTE(v14) = *(_QWORD *)(a3 + 8);
  p_dst = &__dst;
  if (v3)
    goto LABEL_10;
  LOBYTE(__dst) = 0;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 < *(_QWORD *)(a2 + 16))
  {
LABEL_5:
    v8 = __dst;
    *(_QWORD *)(v7 + 16) = v14;
    *(_OWORD *)v7 = v8;
    *(_QWORD *)(a2 + 8) = v7 + 24;
    return;
  }
LABEL_11:
  v11 = sub_23941ACDC((void **)a2, (uint64_t)&__dst);
  v12 = SHIBYTE(v14);
  *(_QWORD *)(a2 + 8) = v11;
  if (v12 < 0)
    operator delete((void *)__dst);
}

void sub_23965DFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_23965DFD0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_23965E1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23965E1FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v3)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  _OWORD v15[2];

  v3 = *(uint64_t (****)())(a1 + 8);
  if (v3)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      if (*v3 == off_250AE7568)
      {
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v8 = v5;
      }
      else
      {
        v8 = 0;
        v3 = 0;
      }
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (!v8)
        goto LABEL_16;
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v3)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        if (v3)
        {
LABEL_17:
          v13 = &off_250AE2708;
          sub_23965E4B4(a1, (uint64_t)&v14);
          *(_QWORD *)a2 = &off_250AE2708;
          *(_OWORD *)(a2 + 8) = v14;
          v14 = 0uLL;
          *(_OWORD *)(a2 + 24) = v15[0];
          *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)v15 + 9);
          *(_BYTE *)(a2 + 56) = 1;
          nullsub_4(&v13);
          return;
        }
      }
    }
    else if (*v3 == off_250AE7568)
    {
      goto LABEL_17;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
}

void sub_23965E384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23965E398(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23965E404()
{
  return 1;
}

uint64_t sub_23965E40C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_23965E414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_23965E430(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_23965E4B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_23965E5FC(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23965E5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23965E5FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_250AE7568)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23965E708(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_23965E6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_239416DA0(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_23965E708(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_p;
  _QWORD v24[2];
  std::string __p;

  v4 = sub_23965E94C();
  v5 = sub_239494CD0();
  sub_23965D50C("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, &__p);
  if (!*(_QWORD *)(a1 + 8))
  {
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = size + 46;
    if (size + 46 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    if (v18 > 0x16)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v19 = (std::string *)operator new(v21 + 1);
      a2->__r_.__value_.__l.__size_ = v18;
      a2->__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      a2 = v19;
      if (!size)
      {
LABEL_30:
        strcpy((char *)v19 + size, " but the other image does not contain a buffer");
        if ((v16 & 0x80) == 0)
          return;
LABEL_31:
        operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      a2->__r_.__value_.__r.__words[0] = 0;
      v19 = a2;
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v18;
    }
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, p_p, size);
    goto LABEL_30;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v12 = a1 + 8;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(v12 + 8);
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
  }
  v24[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  v24[1] = v20;
  sub_23965D7F8((uint64_t)&__p, " but the other image contains an incompatible buffer type ", (uint64_t)v24, a2);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_31;
}

void sub_23965E92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_23965E94C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569310C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569310C0))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23941B3D0();
    sub_23965EB50((std::string::size_type)v2, &v9);
    v3 = sub_23965DCA8();
    sub_23965EB50((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569310A8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569310A8, &dword_23940C000);
          __cxa_guard_release(&qword_2569310C0);
          return &stru_2569310A8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569310A8;
}

void sub_23965EA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569310C0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569310C0);
  _Unwind_Resume(a1);
}

void sub_23965EB50(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23965EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23965EC20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v3)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (**v13)();
  _OWORD v14[4];
  char v15;

  v3 = *(uint64_t (****)())(a1 + 8);
  if (v3)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      if (*v3 == off_250AE77A8)
      {
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v8 = v5;
      }
      else
      {
        v8 = 0;
        v3 = 0;
      }
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (!v8)
        goto LABEL_16;
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v3)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        if (v3)
        {
LABEL_17:
          v13 = &off_250AE2800;
          sub_23965EEE8(a1, (uint64_t)v14);
          *(_QWORD *)a2 = &off_250AE2800;
          *(_OWORD *)(a2 + 8) = v14[0];
          v14[0] = 0uLL;
          *(_OWORD *)(a2 + 24) = v14[1];
          *(_OWORD *)(a2 + 40) = v14[2];
          *(_OWORD *)(a2 + 56) = v14[3];
          *(_BYTE *)(a2 + 72) = v15;
          *(_BYTE *)(a2 + 80) = 1;
          nullsub_4(&v13);
          return;
        }
      }
    }
    else if (*v3 == off_250AE77A8)
    {
      goto LABEL_17;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
}

void sub_23965EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

void sub_23965EDCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23965EE38()
{
  return 5;
}

uint64_t sub_23965EE40(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_23965EE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_23965EE64(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_23965EEE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_23965F030(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_23965F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23965F030@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_250AE77A8)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23965F13C(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_23965F0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_239416DA0(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_23965F13C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_p;
  _QWORD v24[2];
  std::string __p;

  v4 = sub_23965F380();
  v5 = sub_23964B714();
  sub_23965D50C("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, &__p);
  if (!*(_QWORD *)(a1 + 8))
  {
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = size + 46;
    if (size + 46 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    if (v18 > 0x16)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v19 = (std::string *)operator new(v21 + 1);
      a2->__r_.__value_.__l.__size_ = v18;
      a2->__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      a2 = v19;
      if (!size)
      {
LABEL_30:
        strcpy((char *)v19 + size, " but the other image does not contain a buffer");
        if ((v16 & 0x80) == 0)
          return;
LABEL_31:
        operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      a2->__r_.__value_.__r.__words[0] = 0;
      v19 = a2;
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v18;
    }
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, p_p, size);
    goto LABEL_30;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v12 = a1 + 8;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(v12 + 8);
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
  }
  v24[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  v24[1] = v20;
  sub_23965D7F8((uint64_t)&__p, " but the other image contains an incompatible buffer type ", (uint64_t)v24, a2);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_31;
}

void sub_23965F360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_23965F380()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569310E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569310E0))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23941C2E0();
    sub_23965F584((std::string::size_type)v2, &v9);
    v3 = sub_23965DCA8();
    sub_23965F584((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569310C8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569310C8, &dword_23940C000);
          __cxa_guard_release(&qword_2569310E0);
          return &stru_2569310C8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569310C8;
}

void sub_23965F4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569310E0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569310E0);
  _Unwind_Resume(a1);
}

void sub_23965F584(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23965F618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23965F654(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v3)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  _OWORD v15[2];

  v3 = *(uint64_t (****)())(a1 + 8);
  if (v3)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      if (*v3 == off_250AE7688)
      {
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v8 = v5;
      }
      else
      {
        v8 = 0;
        v3 = 0;
      }
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (!v8)
        goto LABEL_16;
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v3)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        if (v3)
        {
LABEL_17:
          v13 = &off_250AE28F8;
          sub_23965F90C(a1, (uint64_t)&v14);
          *(_QWORD *)a2 = &off_250AE28F8;
          *(_OWORD *)(a2 + 8) = v14;
          v14 = 0uLL;
          *(_OWORD *)(a2 + 24) = v15[0];
          *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)v15 + 9);
          *(_BYTE *)(a2 + 56) = 1;
          nullsub_4(&v13);
          return;
        }
      }
    }
    else if (*v3 == off_250AE7688)
    {
      goto LABEL_17;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
}

void sub_23965F7DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23965F7F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23965F85C()
{
  return 3;
}

uint64_t sub_23965F864(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_23965F86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_23965F888(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_23965F90C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_23965FA54(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23965FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23965FA54@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_250AE7688)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23965FB60(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_23965FB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_239416DA0(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_23965FB60(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_p;
  _QWORD v24[2];
  std::string __p;

  v4 = sub_23965FDA4();
  v5 = sub_23964D2EC();
  sub_23965D50C("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, &__p);
  if (!*(_QWORD *)(a1 + 8))
  {
    v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = size + 46;
    if (size + 46 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    if (v18 > 0x16)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v19 = (std::string *)operator new(v21 + 1);
      a2->__r_.__value_.__l.__size_ = v18;
      a2->__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      a2 = v19;
      if (!size)
      {
LABEL_30:
        strcpy((char *)v19 + size, " but the other image does not contain a buffer");
        if ((v16 & 0x80) == 0)
          return;
LABEL_31:
        operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      a2->__r_.__value_.__r.__words[0] = 0;
      v19 = a2;
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v18;
    }
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, p_p, size);
    goto LABEL_30;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v12 = a1 + 8;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(v12 + 8);
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
  }
  v24[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  v24[1] = v20;
  sub_23965D7F8((uint64_t)&__p, " but the other image contains an incompatible buffer type ", (uint64_t)v24, a2);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_31;
}

void sub_23965FD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_23965FDA4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256931100);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256931100))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23964D5C0();
    sub_23965FFA8((std::string::size_type)v2, &v9);
    v3 = sub_23965DCA8();
    sub_23965FFA8((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569310E8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569310E8, &dword_23940C000);
          __cxa_guard_release(&qword_256931100);
          return &stru_2569310E8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569310E8;
}

void sub_23965FEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256931100);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256931100);
  _Unwind_Resume(a1);
}

void sub_23965FFA8(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23966003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_239660078(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v10;
  char v11;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 28) == 1 && *(_DWORD *)(v2 + 28) == 1)
  {
    v4 = *(_DWORD *)(v1 + 32);
    if (v4 == *(_DWORD *)(v2 + 32))
    {
      v5 = *(_DWORD *)(v1 + 8);
      if (v4 == v5)
      {
        sub_239660138(a1);
        return;
      }
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 8);
    }
    v10 = v5;
    if (v5)
      v6 = *(_DWORD *)(v1 + 12) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      sub_2396608E8(&v10, v1, v2);
  }
  else if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 24))
      sub_239660A20((uint64_t)&v11, v1, v2);
  }
}

uint64_t *sub_239660138(uint64_t *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  uint64_t v14;

  v1 = (_DWORD *)*result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 36);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == v1[8] * v4)
  {
    v5 = v1[10];
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      v6 = v1[4];
      if (v5 == v6 * v3)
        return sub_239660228(result);
    }
    else
    {
      v6 = v1[4];
    }
    v9 = v1[2];
    v14 = v9 * v6 * v4;
    if (v9)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10 && v6 != 0 && v1[5] != 0 && v1[6] != 0)
      return sub_2396604E0(&v14, (uint64_t)v1, v2);
  }
  else
  {
    v7 = v1[2];
    v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *((_QWORD *)v1 + 2);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && v1[6])
      return sub_23966061C(&v14, (uint64_t)v1, v2);
  }
  return result;
}

uint64_t *sub_239660228(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  const void *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 44);
  v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    v6 = *(const void **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
      sub_239EBF50C((uint64_t)result, (uint64_t)v6);
    if ((_DWORD)v5)
      return (uint64_t *)memmove(*(void **)v2, v6, 4 * v5);
  }
  else
  {
    v8 = *(_DWORD *)(v1 + 8);
    v9 = *(_DWORD *)(v1 + 12);
    v10 = *(_DWORD *)(v1 + 16);
    v12 = v9 * v8 * v10 * v4;
    v11.i64[0] = __PAIR64__(v9, v8);
    v11.i64[1] = __PAIR64__(v4, v10);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24))
      return sub_2396602FC(&v12, v1, v2);
  }
  return result;
}

uint64_t *sub_2396602FC(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[3];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(char **)a3;
      memset(v24, 0, sizeof(v24));
      return (uint64_t *)sub_2396603E4(&v13, (uint64_t)v24, result, v11, v12);
    }
  }
  return result;
}

_DWORD *sub_2396603E4(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int i;
  uint64_t v20;
  uint64_t v21;

  v5 = __dst;
  v6 = __src;
  v9 = result[12];
  v10 = result[13];
  v11 = result[9];
  v12 = result[10];
  v13 = result[6];
  v14 = result[7];
  v15 = result[3];
  v16 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v13;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_DWORD *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 36) = v14;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v10;
  v17 = result[14];
  if (v17)
  {
    v18 = result;
    for (i = 0; i < v17; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v20 = *a3;
      if (!v6 && v20)
        sub_239EBF50C((uint64_t)result, a2);
      if (v20)
      {
        result = memmove(v5, v6, 4 * v20);
        v17 = v18[14];
      }
      v6 += 4 * v18[15];
      v5 += 4 * v18[16];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v21 = *a3;
  if (!v6 && v21)
    sub_239EBF50C((uint64_t)result, a2);
  if (v21)
    return memmove(v5, v6, 4 * v21);
  return result;
}

uint64_t *sub_2396604E0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[3];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_23948793C(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += 4 * v25;
          v13 += 4 * HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (uint64_t *)sub_23948793C(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

uint64_t *sub_23966061C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(char **)a3;
      memset(v24, 0, sizeof(v24));
      return (uint64_t *)sub_239660700((unsigned int *)&v13, (uint64_t)v24, result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_239660700(unsigned int *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  unsigned int *v9;
  int v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v23;
  char *__dsta;

  v9 = a1;
  if (a1[14])
  {
    v10 = 0;
    do
    {
      v23 = v10;
      __dsta = __dst;
      v11 = __src;
      if (v9[11])
      {
        v12 = 0;
        v11 = __src;
        do
        {
          v13 = v9[3] | ((unint64_t)v9[6] << 32);
          v14 = v9[4] | ((unint64_t)v9[7] << 32);
          *(_QWORD *)a2 = v11;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = __dst;
          *(_QWORD *)(a2 + 24) = v14;
          v15 = v9[8];
          v16 = __dst;
          v17 = v11;
          if (v15)
          {
            v18 = 0;
            v17 = v11;
            v16 = __dst;
            do
            {
              *(_QWORD *)a2 = v17;
              *(_QWORD *)(a2 + 16) = v16;
              v19 = *a3;
              if (!v17 && v19)
                sub_239EBF50C((uint64_t)a1, a2);
              if (v19)
              {
                a1 = (unsigned int *)memmove(v16, v17, 4 * v19);
                v15 = v9[8];
              }
              v17 += 4 * v9[9];
              v16 += 4 * v9[10];
              ++v18;
            }
            while (v18 < v15);
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17 && v20)
            sub_239EBF50C((uint64_t)a1, a2);
          if (v20)
            a1 = (unsigned int *)memmove(v16, v17, 4 * v20);
          v11 += 4 * v9[12];
          __dst += 4 * v9[13];
          ++v12;
        }
        while (v12 < v9[11]);
      }
      a1 = sub_239487B34(v9, (char **)a2, a3, v11, __dst);
      __src += 4 * v9[15];
      __dst = &__dsta[4 * v9[16]];
      v10 = v23 + 1;
    }
    while (v23 + 1 < v9[14]);
  }
  if (v9[11])
  {
    v21 = 0;
    do
    {
      sub_239487B34(v9, (char **)a2, a3, __src, __dst);
      __src += 4 * v9[12];
      __dst += 4 * v9[13];
      ++v21;
    }
    while (v21 < v9[11]);
  }
  return sub_239487B34(v9, (char **)a2, a3, __src, __dst);
}

uint64_t *sub_2396608E8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_239487CCC(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += 4 * v25;
          v13 += 4 * HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (uint64_t *)sub_239487CCC(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

float sub_239660A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  __int32 v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  char v25;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v15 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v16 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v14 = 0;
      v17 = v6 - 1;
      v18 = v7 | (v8 << 32);
      v19 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v20 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v21 = v4 - 1;
      v22 = v9 | (v10 << 32);
      v23 = HIDWORD(v4) - 1;
      v24 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(_DWORD **)a2;
      v12 = *(_DWORD **)a3;
      v25 = 0;
      *(float *)&v4 = sub_239660B00(&v14, (uint64_t)&v25, a1, v11, v12);
    }
  }
  return *(float *)&v4;
}

float sub_239660B00(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  int *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  int *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  int v103;
  int v104;
  int v105;
  _DWORD *v106;
  _DWORD *v107;
  int v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  int v123;
  unsigned int v124;
  int v128;
  _DWORD *v129;
  _DWORD *v130;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  int *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  int v143;
  _DWORD *v144;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v128 = v10;
      v11 = v9[11];
      v129 = a4;
      v130 = a5;
      if (v11)
        break;
LABEL_3:
      v8 = a2;
      v7 = a3;
      sub_239488094(v9, a2, a3, a4, a5);
      a4 = &v129[v9[15]];
      a5 = &v130[v9[16]];
      v10 = v128 + 1;
      if ((v128 + 1) >= v9[14])
        goto LABEL_64;
    }
    v12 = v9[8];
    v13 = v9[5];
    v14 = v9[12];
    v15 = v9[13];
    v16 = v9[2];
    if (v12)
    {
      v18 = v9[9];
      v17 = v9[10];
      if (v13)
      {
        v134 = v14;
        v19 = v9[6];
        v20 = v9[7];
        v21 = v18;
        v22 = 4 * v19;
        v133 = v15;
        v23 = v17;
        v24 = 4 * v20;
        if (v16)
        {
          v25 = 0;
          v26 = 4 * v9[3];
          v27 = 4 * v9[4];
          v28 = &a4[(unint64_t)v22 / 4];
          v29 = &a5[(unint64_t)v24 / 4];
          v30 = &a4[v21];
          v31 = &a5[v23];
          v32 = &a4[v18 + v19];
          v33 = &a4[(unint64_t)v22 / 4 + v21];
          v34 = &a5[v17 + v20];
          v35 = &a5[(unint64_t)v24 / 4 + v23];
          v132 = v9[11];
          do
          {
            v143 = v25;
            v36 = 0;
            v135 = v35;
            v136 = v34;
            v137 = v33;
            v138 = v32;
            v37 = v33;
            v139 = v31;
            v140 = v30;
            v38 = v31;
            v141 = v29;
            v142 = v28;
            v144 = a5;
            v39 = a5;
            v40 = a4;
            do
            {
              v41 = 0;
              v42 = v30;
              v43 = v38;
              v44 = v32;
              v45 = v37;
              v46 = v34;
              v47 = v35;
              v48 = v29;
              v49 = v28;
              v50 = v39;
              v51 = v40;
              do
              {
                v52 = v49;
                v53 = v48;
                v54 = v50;
                v55 = v51;
                v56 = v16;
                do
                {
                  *v54 = *v55;
                  v55 = (_DWORD *)((char *)v55 + v26);
                  v54 = (_DWORD *)((char *)v54 + v27);
                  --v56;
                }
                while (v56);
                *v54 = *v55;
                v51 = (_DWORD *)((char *)v51 + v22);
                v50 = (_DWORD *)((char *)v50 + v24);
                ++v41;
                v49 = &v52[(unint64_t)v22 / 4];
                v48 = &v53[(unint64_t)v24 / 4];
              }
              while (v41 != v13);
              v57 = v16;
              do
              {
                *v53 = *v52;
                v52 = (_DWORD *)((char *)v52 + v26);
                v53 = (_DWORD *)((char *)v53 + v27);
                --v57;
              }
              while (v57);
              v40 = (_DWORD *)((char *)v40 + v21 * 4);
              v39 = (_DWORD *)((char *)v39 + v23 * 4);
              ++v36;
              v28 = (_DWORD *)((char *)v28 + v21 * 4);
              *v53 = *v52;
              v29 = (_DWORD *)((char *)v29 + v23 * 4);
              v30 = &v42[v21];
              v38 = &v43[v23];
              v32 = &v44[v21];
              v37 = &v45[v21];
              v34 = &v46[v23];
              v35 = &v47[v23];
            }
            while (v36 != v12);
            v58 = 0;
            v9 = a1;
            do
            {
              v59 = v44;
              v60 = v45;
              v61 = v46;
              v62 = v47;
              v63 = v43;
              v64 = v42;
              v65 = v16;
              do
              {
                *v63 = *v64;
                v64 = (_DWORD *)((char *)v64 + v26);
                v63 = (_DWORD *)((char *)v63 + v27);
                --v65;
              }
              while (v65);
              v42 = (_DWORD *)((char *)v42 + v22);
              v43 = (_DWORD *)((char *)v43 + v24);
              ++v58;
              v44 = (int *)((char *)v44 + v22);
              *v63 = *v64;
              v45 = (_DWORD *)((char *)v45 + v22);
              v46 = &v61[(unint64_t)v24 / 4];
              v47 = (_DWORD *)((char *)v47 + v24);
            }
            while (v58 != v13);
            v66 = v16;
            do
            {
              v59 = (int *)((char *)v59 + v26);
              *v62 = *v60;
              v60 = (_DWORD *)((char *)v60 + v26);
              v61 = (_DWORD *)((char *)v61 + v27);
              v62 = (_DWORD *)((char *)v62 + v27);
              --v66;
            }
            while (v66);
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = &v144[v133];
            v67 = *v59;
            v25 = v143 + 1;
            v28 = &v142[v134];
            *v61 = v67;
            v29 = &v141[v133];
            v30 = &v140[v134];
            v31 = &v139[v133];
            v32 = &v138[v134];
            v33 = &v137[v134];
            v34 = &v136[v133];
            v35 = &v135[v133];
          }
          while (v143 + 1 != v132);
        }
        else
        {
          v105 = 0;
          v106 = &a4[v21];
          v107 = &a5[v23];
          do
          {
            v108 = 0;
            v109 = v107;
            v110 = v106;
            v111 = a5;
            v112 = a4;
            do
            {
              v113 = v110;
              v114 = v109;
              v115 = v111;
              v116 = v112;
              v117 = v13;
              do
              {
                *v115 = *v116;
                v116 = (_DWORD *)((char *)v116 + v22);
                v115 = (_DWORD *)((char *)v115 + v24);
                --v117;
              }
              while (v117);
              *v115 = *v116;
              v112 = (_DWORD *)((char *)v112 + v21 * 4);
              v111 = (_DWORD *)((char *)v111 + v23 * 4);
              ++v108;
              v110 = &v113[v21];
              v109 = &v114[v23];
            }
            while (v108 != v12);
            v118 = v13;
            do
            {
              *v114 = *v113;
              v113 = (_DWORD *)((char *)v113 + v22);
              v114 = (_DWORD *)((char *)v114 + v24);
              --v118;
            }
            while (v118);
            *v114 = *v113;
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = (_DWORD *)((char *)a5 + v133 * 4);
            ++v105;
            v106 = (_DWORD *)((char *)v106 + v134 * 4);
            v107 = (_DWORD *)((char *)v107 + v133 * 4);
          }
          while (v105 != v11);
        }
      }
      else
      {
        v85 = 0;
        if (v16)
        {
          v86 = 4 * v14;
          v87 = v18;
          v88 = 4 * v9[3];
          v89 = 4 * v15;
          v90 = v17;
          v91 = 4 * v9[4];
          v92 = &a4[v18];
          v93 = &a5[v90];
          do
          {
            v94 = 0;
            v95 = v93;
            v96 = v92;
            v97 = a5;
            v98 = a4;
            do
            {
              v99 = v96;
              v100 = v95;
              v101 = v97;
              v102 = v98;
              v103 = v16;
              do
              {
                *v101 = *v102;
                v102 = (_DWORD *)((char *)v102 + v88);
                v101 = (_DWORD *)((char *)v101 + v91);
                --v103;
              }
              while (v103);
              *v101 = *v102;
              v98 = (_DWORD *)((char *)v98 + v87 * 4);
              v97 = (_DWORD *)((char *)v97 + v90 * 4);
              ++v94;
              v96 = &v99[v87];
              v95 = &v100[v90];
            }
            while (v94 != v12);
            v104 = v16;
            do
            {
              *v100 = *v99;
              v99 = (_DWORD *)((char *)v99 + v88);
              v100 = (_DWORD *)((char *)v100 + v91);
              --v104;
            }
            while (v104);
            *v100 = *v99;
            a4 = (_DWORD *)((char *)a4 + v86);
            a5 = (_DWORD *)((char *)a5 + v89);
            ++v85;
            v92 = (_DWORD *)((char *)v92 + v86);
            v93 = (_DWORD *)((char *)v93 + v89);
          }
          while (v85 != v11);
        }
        else
        {
          v119 = 4 * v18;
          v120 = 4 * v15;
          do
          {
            v121 = a5;
            v122 = a4;
            v123 = v12;
            do
            {
              *v121 = *v122;
              v122 = (_DWORD *)((char *)v122 + v119);
              v121 += v17;
              --v123;
            }
            while (v123);
            *v121 = *v122;
            a4 += v14;
            a5 = (_DWORD *)((char *)a5 + v120);
            ++v85;
          }
          while (v85 != v11);
        }
      }
      goto LABEL_3;
    }
    v68 = 4 * v14;
    v69 = 4 * v15;
    while (1)
    {
      v70 = a5;
      v71 = a4;
      if (!v13)
        goto LABEL_33;
      v73 = v9[6];
      v72 = v9[7];
      if (v16)
        break;
      v83 = 4 * v73;
      v70 = a5;
      v71 = a4;
      v84 = v13;
      do
      {
        *v70 = *v71;
        v71 = (_DWORD *)((char *)v71 + v83);
        v70 += v72;
        --v84;
      }
      while (v84);
LABEL_26:
      *v70 = *v71;
      a4 = (_DWORD *)((char *)a4 + v68);
      a5 = (_DWORD *)((char *)a5 + v69);
      if (++v12 == v11)
        goto LABEL_3;
    }
    v74 = 0;
    v75 = 4 * v9[3];
    v76 = 4 * v9[4];
    v70 = a5;
    v71 = a4;
    do
    {
      v77 = v70;
      v78 = v71;
      v79 = v16;
      do
      {
        *v77 = *v78;
        v78 = (_DWORD *)((char *)v78 + v75);
        v77 = (_DWORD *)((char *)v77 + v76);
        --v79;
      }
      while (v79);
      *v77 = *v78;
      v71 += v73;
      v70 += v72;
      ++v74;
    }
    while (v74 != v13);
LABEL_33:
    if (v16)
    {
      v80 = v9[3];
      v81 = 4 * v9[4];
      v82 = v16;
      do
      {
        *v70 = *v71;
        v71 += v80;
        v70 = (_DWORD *)((char *)v70 + v81);
        --v82;
      }
      while (v82);
    }
    goto LABEL_26;
  }
LABEL_64:
  if (v9[11])
  {
    v124 = 0;
    do
    {
      sub_239488094(v9, v8, v7, a4, a5);
      a4 += v9[12];
      a5 += v9[13];
      ++v124;
    }
    while (v124 < v9[11]);
  }
  return sub_239488094(v9, v8, v7, a4, a5);
}

size_t *sub_23966118C(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  size_t v10;
  int var1;

  v1 = *result;
  v2 = result[1];
  if (*(_DWORD *)(*result + 28) == 1 && *(_DWORD *)(v2 + 28) == 1)
  {
    v4 = *(_DWORD *)(v1 + 32);
    if (v4 == *(_DWORD *)(v2 + 32))
    {
      v5 = *(_DWORD *)(v1 + 8);
      if (v4 == v5)
        return sub_23966124C(result);
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 8);
    }
    v10 = v5;
    if (v5)
      v6 = *(_DWORD *)(v1 + 12) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_239661BC0(&v10, v1, v2);
  }
  else if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 24))
      return (size_t *)sub_239661FB4(&var1, v1, v2);
  }
  return result;
}

size_t *sub_23966124C(size_t *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  size_t v14;

  v1 = (_DWORD *)*result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 36);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == v1[8] * v4)
  {
    v5 = v1[10];
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      v6 = v1[4];
      if (v5 == v6 * v3)
        return sub_23966133C(result);
    }
    else
    {
      v6 = v1[4];
    }
    v9 = v1[2];
    v14 = v9 * v6 * v4;
    if (v9)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10 && v6 != 0 && v1[5] != 0 && v1[6] != 0)
      return sub_2396615EC(&v14, (uint64_t)v1, v2);
  }
  else
  {
    v7 = v1[2];
    v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *((_QWORD *)v1 + 2);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && v1[6])
      return (size_t *)sub_239661818((unsigned int *)&v14, (uint64_t)v1, v2);
  }
  return result;
}

size_t *sub_23966133C(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  size_t v5;
  const void *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  size_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 44);
  v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    v6 = *(const void **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
      sub_239EBF50C((uint64_t)result, (uint64_t)v6);
    if ((_DWORD)v5)
      return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  else
  {
    v8 = *(_DWORD *)(v1 + 8);
    v9 = *(_DWORD *)(v1 + 12);
    v10 = *(_DWORD *)(v1 + 16);
    v12 = v9 * v8 * v10 * v4;
    v11.i64[0] = __PAIR64__(v9, v8);
    v11.i64[1] = __PAIR64__(v4, v10);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24))
      return sub_239661410(&v12, v1, v2);
  }
  return result;
}

size_t *sub_239661410(size_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[3];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(char **)a3;
      memset(v24, 0, sizeof(v24));
      return (size_t *)sub_2396614F8(&v13, (uint64_t)v24, result, v11, v12);
    }
  }
  return result;
}

_DWORD *sub_2396614F8(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int i;
  size_t v20;
  size_t v21;

  v5 = __dst;
  v6 = __src;
  v9 = result[12];
  v10 = result[13];
  v11 = result[9];
  v12 = result[10];
  v13 = result[6];
  v14 = result[7];
  v15 = result[3];
  v16 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v13;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_DWORD *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 36) = v14;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v10;
  v17 = result[14];
  if (v17)
  {
    v18 = result;
    for (i = 0; i < v17; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v20 = *a3;
      if (!v6 && v20)
        sub_239EBF50C((uint64_t)result, a2);
      if (v20)
      {
        result = memmove(v5, v6, v20);
        v17 = v18[14];
      }
      v6 += v18[15];
      v5 += v18[16];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v21 = *a3;
  if (!v6 && v21)
    sub_239EBF50C((uint64_t)result, a2);
  if (v21)
    return memmove(v5, v6, v21);
  return result;
}

size_t *sub_2396615EC(size_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[3];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_239661728(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += v25;
          v13 += HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (size_t *)sub_239661728(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_239661728(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int i;
  size_t v18;
  size_t v19;

  v5 = __dst;
  v6 = __src;
  v9 = result[9];
  v10 = result[10];
  v11 = result[6];
  v12 = result[7];
  v13 = result[3];
  v14 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v15 = result[11];
  if (v15)
  {
    v16 = result;
    for (i = 0; i < v15; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v18 = *a3;
      if (!v6 && v18)
        sub_239EBF50C((uint64_t)result, a2);
      if (v18)
      {
        result = memmove(v5, v6, v18);
        v15 = v16[11];
      }
      v6 += v16[12];
      v5 += v16[13];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v19 = *a3;
  if (!v6 && v19)
    sub_239EBF50C((uint64_t)result, a2);
  if (v19)
    return memmove(v5, v6, v19);
  return result;
}

unsigned int *sub_239661818(unsigned int *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(char **)a3;
      memset(v24, 0, sizeof(v24));
      return sub_2396618FC((unsigned int *)&v13, (uint64_t)v24, (size_t *)result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_2396618FC(unsigned int *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  unsigned int *v9;
  int v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  int v23;
  char *__dsta;

  v9 = a1;
  if (a1[14])
  {
    v10 = 0;
    do
    {
      v23 = v10;
      __dsta = __dst;
      v11 = __src;
      if (v9[11])
      {
        v12 = 0;
        v11 = __src;
        do
        {
          v13 = v9[3] | ((unint64_t)v9[6] << 32);
          v14 = v9[4] | ((unint64_t)v9[7] << 32);
          *(_QWORD *)a2 = v11;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = __dst;
          *(_QWORD *)(a2 + 24) = v14;
          v15 = v9[8];
          v16 = __dst;
          v17 = v11;
          if (v15)
          {
            v18 = 0;
            v17 = v11;
            v16 = __dst;
            do
            {
              *(_QWORD *)a2 = v17;
              *(_QWORD *)(a2 + 16) = v16;
              v19 = *a3;
              if (!v17 && v19)
                sub_239EBF50C((uint64_t)a1, a2);
              if (v19)
              {
                a1 = (unsigned int *)memmove(v16, v17, v19);
                v15 = v9[8];
              }
              v17 += v9[9];
              v16 += v9[10];
              ++v18;
            }
            while (v18 < v15);
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17 && v20)
            sub_239EBF50C((uint64_t)a1, a2);
          if (v20)
            a1 = (unsigned int *)memmove(v16, v17, v20);
          v11 += v9[12];
          __dst += v9[13];
          ++v12;
        }
        while (v12 < v9[11]);
      }
      a1 = sub_239661ADC(v9, (char **)a2, a3, v11, __dst);
      __src += v9[15];
      __dst = &__dsta[v9[16]];
      v10 = v23 + 1;
    }
    while (v23 + 1 < v9[14]);
  }
  if (v9[11])
  {
    v21 = 0;
    do
    {
      sub_239661ADC(v9, (char **)a2, a3, __src, __dst);
      __src += v9[12];
      __dst += v9[13];
      ++v21;
    }
    while (v21 < v9[11]);
  }
  return sub_239661ADC(v9, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_239661ADC(unsigned int *result, char **a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int i;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3] | ((unint64_t)result[6] << 32);
  v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = __dst;
  a2[3] = (char *)v10;
  v11 = result[8];
  if (v11)
  {
    v12 = result;
    for (i = 0; i < v11; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      v14 = *a3;
      if (!v6 && v14)
        sub_239EBF50C((uint64_t)result, (uint64_t)a2);
      if (v14)
      {
        result = (unsigned int *)memmove(v5, v6, v14);
        v11 = v12[8];
      }
      v6 += v12[9];
      v5 += v12[10];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  v15 = *a3;
  if (!v6 && v15)
    sub_239EBF50C((uint64_t)result, (uint64_t)a2);
  if (v15)
    return (unsigned int *)memmove(v5, v6, v15);
  return result;
}

size_t *sub_239661BC0(size_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_239661CF8(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += v25;
          v13 += HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (size_t *)sub_239661CF8(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_239661CF8(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  _DWORD *v9;
  int v10;
  char *v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  int v23;
  char *__dsta;

  v9 = a1;
  if (a1[11])
  {
    v10 = 0;
    do
    {
      v23 = v10;
      __dsta = __dst;
      v11 = __src;
      if (v9[8])
      {
        v12 = 0;
        v11 = __src;
        do
        {
          v13 = v9[3];
          v14 = v9[4];
          *(_QWORD *)a2 = v11;
          *(_DWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = __dst;
          *(_DWORD *)(a2 + 24) = v14;
          v15 = v9[5];
          v16 = __dst;
          v17 = v11;
          if (v15)
          {
            v18 = 0;
            v17 = v11;
            v16 = __dst;
            do
            {
              *(_QWORD *)a2 = v17;
              *(_QWORD *)(a2 + 16) = v16;
              v19 = *a3;
              if (!v17 && v19)
                sub_239EBF50C((uint64_t)a1, a2);
              if (v19)
              {
                a1 = memmove(v16, v17, v19);
                v15 = v9[5];
              }
              v17 += v9[6];
              v16 += v9[7];
              ++v18;
            }
            while (v18 < v15);
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17 && v20)
            sub_239EBF50C((uint64_t)a1, a2);
          if (v20)
            a1 = memmove(v16, v17, v20);
          v11 += v9[9];
          __dst += v9[10];
          ++v12;
        }
        while (v12 < v9[8]);
      }
      a1 = sub_239661ED4(v9, a2, a3, v11, __dst);
      __src += v9[12];
      __dst = &__dsta[v9[13]];
      v10 = v23 + 1;
    }
    while ((v23 + 1) < v9[11]);
  }
  if (v9[8])
  {
    v21 = 0;
    do
    {
      sub_239661ED4(v9, a2, a3, __src, __dst);
      __src += v9[9];
      __dst += v9[10];
      ++v21;
    }
    while (v21 < v9[8]);
  }
  return sub_239661ED4(v9, a2, a3, __src, __dst);
}

_DWORD *sub_239661ED4(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int i;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    for (i = 0; i < v11; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6 && v14)
        sub_239EBF50C((uint64_t)result, a2);
      if (v14)
      {
        result = memmove(v5, v6, v14);
        v11 = v12[5];
      }
      v6 += v12[6];
      v5 += v12[7];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
    sub_239EBF50C((uint64_t)result, a2);
  if (v15)
    return memmove(v5, v6, v15);
  return result;
}

_DWORD *sub_239661FB4(_DWORD *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char v24;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(_BYTE **)a2;
      v12 = *(_BYTE **)a3;
      v24 = 0;
      return sub_239662094(&v13, (uint64_t)&v24, (uint64_t)result, v11, v12);
    }
  }
  return result;
}

_DWORD *sub_239662094(_DWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  if (a1[14])
  {
    v10 = 0;
    do
    {
      v11 = a5;
      v12 = a4;
      if (a1[11])
      {
        v13 = 0;
        v12 = a4;
        v11 = a5;
        do
        {
          v14 = v12;
          v15 = v11;
          if (a1[8])
          {
            v16 = 0;
            v14 = v12;
            v15 = v11;
            do
            {
              v17 = v14;
              v18 = v15;
              if (a1[5])
              {
                v19 = 0;
                v17 = v14;
                v18 = v15;
                do
                {
                  v20 = v18;
                  v21 = v17;
                  if (a1[2])
                  {
                    v22 = 0;
                    v21 = v17;
                    v20 = v18;
                    do
                    {
                      *v20 = *v21;
                      v21 += a1[3];
                      v20 += a1[4];
                      ++v22;
                    }
                    while (v22 < a1[2]);
                  }
                  *v20 = *v21;
                  v17 += a1[6];
                  v18 += a1[7];
                  ++v19;
                }
                while (v19 < a1[5]);
              }
              if (a1[2])
              {
                v23 = 0;
                do
                {
                  *v18 = *v17;
                  v17 += a1[3];
                  v18 += a1[4];
                  ++v23;
                }
                while (v23 < a1[2]);
              }
              *v18 = *v17;
              v14 += a1[9];
              v15 += a1[10];
              ++v16;
            }
            while (v16 < a1[8]);
          }
          if (a1[5])
          {
            v24 = 0;
            do
            {
              v25 = v15;
              v26 = v14;
              if (a1[2])
              {
                v27 = 0;
                v26 = v14;
                v25 = v15;
                do
                {
                  *v25 = *v26;
                  v26 += a1[3];
                  v25 += a1[4];
                  ++v27;
                }
                while (v27 < a1[2]);
              }
              *v25 = *v26;
              v14 += a1[6];
              v15 += a1[7];
              ++v24;
            }
            while (v24 < a1[5]);
          }
          if (a1[2])
          {
            v28 = 0;
            do
            {
              *v15 = *v14;
              v14 += a1[3];
              v15 += a1[4];
              ++v28;
            }
            while (v28 < a1[2]);
          }
          *v15 = *v14;
          v12 += a1[12];
          v11 += a1[13];
          ++v13;
        }
        while (v13 < a1[11]);
      }
      sub_239662350(a1, a2, a3, v12, v11);
      a4 += a1[15];
      a5 += a1[16];
      ++v10;
    }
    while (v10 < a1[14]);
  }
  if (a1[11])
  {
    v29 = 0;
    do
    {
      sub_239662350(a1, a2, a3, a4, a5);
      a4 += a1[12];
      a5 += a1[13];
      ++v29;
    }
    while (v29 < a1[11]);
  }
  return sub_239662350(a1, a2, a3, a4, a5);
}

_DWORD *sub_239662350(_DWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;

  if (result[8])
  {
    v5 = 0;
    do
    {
      v6 = a4;
      v7 = a5;
      if (result[5])
      {
        v8 = 0;
        v6 = a4;
        v7 = a5;
        do
        {
          v9 = v7;
          v10 = v6;
          if (result[2])
          {
            v11 = 0;
            v10 = v6;
            v9 = v7;
            do
            {
              *v9 = *v10;
              v10 += result[3];
              v9 += result[4];
              ++v11;
            }
            while (v11 < result[2]);
          }
          *v9 = *v10;
          v6 += result[6];
          v7 += result[7];
          ++v8;
        }
        while (v8 < result[5]);
      }
      if (result[2])
      {
        v12 = 0;
        do
        {
          *v7 = *v6;
          v6 += result[3];
          v7 += result[4];
          ++v12;
        }
        while (v12 < result[2]);
      }
      *v7 = *v6;
      a4 += result[9];
      a5 += result[10];
      ++v5;
    }
    while (v5 < result[8]);
  }
  if (result[5])
  {
    v13 = 0;
    do
    {
      v14 = a5;
      v15 = a4;
      if (result[2])
      {
        v16 = 0;
        v15 = a4;
        v14 = a5;
        do
        {
          *v14 = *v15;
          v15 += result[3];
          v14 += result[4];
          ++v16;
        }
        while (v16 < result[2]);
      }
      *v14 = *v15;
      a4 += result[6];
      a5 += result[7];
      ++v13;
    }
    while (v13 < result[5]);
  }
  if (result[2])
  {
    v17 = 0;
    do
    {
      *a5 = *a4;
      a4 += result[3];
      a5 += result[4];
      ++v17;
    }
    while (v17 < result[2]);
  }
  *a5 = *a4;
  return result;
}

float sub_2396624F4(_DWORD *a1, _BYTE *a2, float *a3, float a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  float *v18;
  float *v19;
  _BYTE *v20;
  float *v21;
  float *v22;
  int v23;
  _BYTE *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  int v44;
  _BYTE *v45;
  float result;

  v4 = a1[8];
  v5 = a1[5];
  if (v4)
  {
    v6 = a1[2];
    v7 = a1[9];
    v8 = a1[10];
    if (v5)
    {
      v9 = a1[6];
      v10 = a1[7];
      if (!v6)
      {
        v42 = 4 * v8;
        do
        {
          v43 = a3;
          v44 = v5;
          v45 = a2;
          do
          {
            LOBYTE(a4) = *v45;
            a4 = (float)LODWORD(a4);
            *v43 = a4;
            v45 += v9;
            v43 += v10;
            --v44;
          }
          while (v44);
          LOBYTE(a4) = *v45;
          a4 = (float)LODWORD(a4);
          *v43 = a4;
          a2 += v7;
          a3 = (float *)((char *)a3 + v42);
          ++v6;
        }
        while (v6 != v4);
        goto LABEL_33;
      }
      v11 = 0;
      v12 = a1[3];
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[4];
      v16 = &a3[v14];
      do
      {
        v17 = 0;
        v18 = v16;
        v19 = a3;
        v20 = a2;
        do
        {
          v21 = v18;
          v22 = v19;
          v23 = v6;
          v24 = v20;
          do
          {
            LOBYTE(a4) = *v24;
            a4 = (float)LODWORD(a4);
            *v22 = a4;
            v24 += v12;
            v22 = (float *)((char *)v22 + v15);
            --v23;
          }
          while (v23);
          LOBYTE(a4) = *v24;
          a4 = (float)LODWORD(a4);
          *v22 = a4;
          v20 += v9;
          v19 = (float *)((char *)v19 + v14 * 4);
          ++v17;
          v18 = &v21[v14];
        }
        while (v17 != v5);
        v25 = v6;
        do
        {
          LOBYTE(a4) = *v20;
          a4 = (float)LODWORD(a4);
          *v21 = a4;
          v20 += v12;
          v21 = (float *)((char *)v21 + v15);
          --v25;
        }
        while (v25);
        LOBYTE(a4) = *v20;
        a4 = (float)LODWORD(a4);
        *v21 = a4;
        a2 += v7;
        a3 = (float *)((char *)a3 + v13);
        ++v11;
        v16 = (float *)((char *)v16 + v13);
      }
      while (v11 != v4);
LABEL_14:
      v9 = a1[6];
      v10 = a1[7];
      if (v6)
      {
        v26 = 0;
        v27 = a1[3];
        v28 = 4 * v10;
        v29 = 4 * a1[4];
        do
        {
          v30 = a3;
          v31 = v6;
          v32 = a2;
          do
          {
            LOBYTE(a4) = *v32;
            a4 = (float)LODWORD(a4);
            *v30 = a4;
            v32 += v27;
            v30 = (float *)((char *)v30 + v29);
            --v31;
          }
          while (v31);
          LOBYTE(a4) = *v32;
          a4 = (float)LODWORD(a4);
          *v30 = a4;
          a2 += v9;
          a3 = (float *)((char *)a3 + v28);
          ++v26;
        }
        while (v26 != v5);
        goto LABEL_25;
      }
      do
      {
LABEL_33:
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v9;
        a3 += v10;
        --v5;
      }
      while (v5);
      goto LABEL_36;
    }
    if (!v6)
    {
      do
      {
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v7;
        a3 += v8;
        --v4;
      }
      while (v4);
      goto LABEL_36;
    }
    v33 = 0;
    v34 = a1[3];
    v35 = 4 * v8;
    v36 = 4 * a1[4];
    do
    {
      v37 = a3;
      v38 = v6;
      v39 = a2;
      do
      {
        LOBYTE(a4) = *v39;
        a4 = (float)LODWORD(a4);
        *v37 = a4;
        v39 += v34;
        v37 = (float *)((char *)v37 + v36);
        --v38;
      }
      while (v38);
      LOBYTE(a4) = *v39;
      a4 = (float)LODWORD(a4);
      *v37 = a4;
      a2 += v7;
      a3 = (float *)((char *)a3 + v35);
      ++v33;
    }
    while (v33 != v4);
  }
  else
  {
    v6 = a1[2];
    if (v5)
      goto LABEL_14;
  }
LABEL_25:
  if (v6)
  {
    v40 = a1[3];
    v41 = 4 * a1[4];
    do
    {
      LOBYTE(a4) = *a2;
      a4 = (float)LODWORD(a4);
      *a3 = a4;
      a2 += v40;
      a3 = (float *)((char *)a3 + v41);
      --v6;
    }
    while (v6);
  }
LABEL_36:
  LOBYTE(a4) = *a2;
  result = (float)LODWORD(a4);
  *a3 = result;
  return result;
}

double sub_239662780(double result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a3 + 112))
  {
    v4 = a3 + 56;
    v5 = nullsub_4(a3 + 80);
    v6 = *(std::__shared_weak_count **)(a3 + 72);
    if (!v6)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
    else
    {
LABEL_6:
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
  }
  return result;
}

double sub_239662808(double result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a3 + 112))
  {
    v4 = a3 + 56;
    v5 = nullsub_4(a3 + 80);
    v6 = *(std::__shared_weak_count **)(a3 + 72);
    if (!v6)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
    else
    {
LABEL_6:
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
  }
  return result;
}

void sub_239662890(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  char *v5;
  int v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;

  sub_239A43D24(&v9);
  sub_239A43E64(&v9);
  sub_239650070();
  sub_239A43E70();
  sub_239A43DB8(&v9);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= *(_QWORD *)(a2 + 16))
  {
    v5 = sub_23941ACDC((void **)a2, (uint64_t)__p);
    v6 = SHIBYTE(v8);
    *(_QWORD *)(a2 + 8) = v5;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 16) = v8;
    *(_OWORD *)v3 = v4;
    *(_QWORD *)(a2 + 8) = v3 + 24;
  }
}

void sub_239662934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239662964(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v11;
  uint64_t v12;

  sub_239A43D24(&v12);
  v5 = (_QWORD *)sub_239A43E64(&v12);
  sub_23964F7B4(v5, *a3);
  sub_239A43E70();
  sub_239A43DB8(&v12);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= *(_QWORD *)(a2 + 16))
  {
    v8 = sub_23941ACDC((void **)a2, (uint64_t)__p);
    v9 = SHIBYTE(v11);
    *(_QWORD *)(a2 + 8) = v8;
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v11;
    *(_OWORD *)v6 = v7;
    *(_QWORD *)(a2 + 8) = v6 + 24;
  }
}

void sub_239662A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239662A3C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239662A50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239662A88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239662AA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_239662AB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239662B1C()
{
  return &unk_250AE2A90;
}

void sub_239662B28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE2AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239662B38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE2AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239662B68(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239662B78(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *i;
  uint64_t *v22;
  uint64_t *v24;

  v4 = a2;
  if (!a1[2])
    goto LABEL_44;
  v6 = *a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v6[1])
    v9 = (uint64_t *)v6[1];
  else
    v9 = v6;
  if (!v9)
  {
    sub_23965AAB0((uint64_t)a1, 0);
    goto LABEL_44;
  }
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v22 = (uint64_t *)v10[1];
        if (!v22)
          break;
        do
        {
          v10 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  v24 = v10;
  if (a2 == a3)
  {
    v20 = (uint64_t)a1;
    sub_23965AAB0((uint64_t)a1, v9);
    if (v10)
      goto LABEL_40;
    goto LABEL_44;
  }
  while (1)
  {
    v12 = *v8;
    v13 = *(_QWORD *)v4;
    v14 = a1 + 1;
    v15 = a1 + 1;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v12;
          v16 = v12[4];
          if (v13 >= v16)
            break;
          v12 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_19;
        }
        if (v16 >= v13)
          goto LABEL_28;
        v12 = v15[1];
        if (!v12)
        {
          v14 = v15 + 1;
          break;
        }
      }
    }
LABEL_19:
    v9[4] = v13;
    sub_239662E3C((uint64_t)(v9 + 5), (__int128 *)(v4 + 8));
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v15;
    *v14 = v9;
    v17 = (uint64_t *)**a1;
    if (v17)
    {
      *a1 = v17;
      v9 = *v14;
    }
    sub_2394213B8(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = v24;
    if (!v24)
      break;
    v10 = (uint64_t *)v24[2];
    if (v10)
    {
      v18 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v24)
      {
        *v10 = 0;
        while (1)
        {
          v19 = (uint64_t *)v10[1];
          if (!v19)
            break;
          do
          {
            v10 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
      }
      else
      {
        for (v10[1] = 0; v18; v18 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v18;
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
      }
    }
    v24 = v10;
LABEL_28:
    v4 += 88;
    if (!v9 || v4 == a3)
      goto LABEL_39;
  }
  v10 = 0;
  v4 += 88;
LABEL_39:
  v20 = (uint64_t)a1;
  sub_23965AAB0((uint64_t)a1, v9);
  if (v10)
  {
LABEL_40:
    for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
      v10 = i;
    sub_23965AAB0(v20, v10);
  }
LABEL_44:
  while (v4 != a3)
  {
    sub_239662FD4(a1, (unint64_t *)v4, v4);
    v4 += 88;
  }
}

void sub_239662DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239662DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239662DE8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_23965AAB0(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_23965AAB0(*(_QWORD *)a1, v2);
  }
  return a1;
}

void sub_239662E3C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (*(unsigned __int8 *)(a1 + 72) == *((unsigned __int8 *)a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *a2;
      v4 = a2[1];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)a1 = v3;
      *(_OWORD *)(a1 + 16) = v4;
      if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 64))
      {
        if (*(_BYTE *)(a1 + 64))
        {
          v6 = *((_QWORD *)a2 + 6);
          v5 = *((_QWORD *)a2 + 7);
          if (v5)
          {
            v7 = (unint64_t *)(v5 + 8);
            do
              v8 = __ldxr(v7);
            while (__stxr(v8 + 1, v7));
          }
          v9 = *(std::__shared_weak_count **)(a1 + 56);
          *(_QWORD *)(a1 + 48) = v6;
          *(_QWORD *)(a1 + 56) = v5;
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else if (*(_BYTE *)(a1 + 64))
      {
        sub_23979BCF4((_QWORD *)(a1 + 40));
        *(_BYTE *)(a1 + 64) = 0;
      }
      else
      {
        v19 = *((_QWORD *)a2 + 6);
        v18 = *((_QWORD *)a2 + 7);
        *(_QWORD *)(a1 + 40) = &off_250AE94F0;
        *(_QWORD *)(a1 + 48) = v19;
        *(_QWORD *)(a1 + 56) = v18;
        if (v18)
        {
          v20 = (unint64_t *)(v18 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        *(_BYTE *)(a1 + 64) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 64))
      sub_23979BCF4((_QWORD *)(a1 + 40));
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    v12 = *a2;
    v13 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v13;
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 64) = 0;
    if (*((_BYTE *)a2 + 64))
    {
      v15 = *((_QWORD *)a2 + 6);
      v14 = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 40) = &off_250AE94F0;
      *(_QWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 56) = v14;
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
}

uint64_t **sub_239662FD4(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= v7)
        return v8;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (char *)operator new(0x78uLL);
    v11 = v10;
    *((_QWORD *)v10 + 4) = *(_QWORD *)a3;
    v10[40] = 0;
    v10[112] = 0;
    if (*(_BYTE *)(a3 + 80))
    {
      v12 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v10 + 56) = v12;
      *((_QWORD *)v10 + 9) = *(_QWORD *)(a3 + 40);
      v10[80] = 0;
      v10[104] = 0;
      if (*(_BYTE *)(a3 + 72))
      {
        v14 = *(_QWORD *)(a3 + 56);
        v13 = *(_QWORD *)(a3 + 64);
        *((_QWORD *)v10 + 10) = &off_250AE94F0;
        *((_QWORD *)v10 + 11) = v14;
        *((_QWORD *)v10 + 12) = v13;
        if (v13)
        {
          v15 = (unint64_t *)(v13 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v10[104] = 1;
      }
      v10[112] = 1;
    }
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v6 = (uint64_t *)v10;
    v17 = (uint64_t *)**a1;
    v18 = (uint64_t *)v10;
    if (v17)
    {
      *a1 = v17;
      v18 = *v6;
    }
    sub_2394213B8(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v11;
  }
}

uint64_t sub_23966313C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (a2)
  {
    do
    {
      v18 = 0;
      if (e5rt_execution_stream_operation_create_precompiled_compute_operation())
        v7 = 1;
      else
        v7 = v18 == 0;
      if (v7)
      {
        sub_239A444D4((uint64_t)"unknown file", 37, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v17 = 0;
      if (e5rt_execution_stream_create() || !v17)
      {
        sub_239A444D4((uint64_t)"unknown file", 43, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v14 = v17;
      v15 = 1;
      v16 = v18;
      sub_23966359C(a1, &v14, (uint64_t)&v14);
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 48);
      if (v8 == v9)
        v10 = 0;
      else
        v10 = ((v8 - v9) << 6) - 1;
      v11 = *(_QWORD *)(a1 + 80);
      v12 = v11 + *(_QWORD *)(a1 + 72);
      if (v10 == v12)
      {
        sub_2396638FC(v3);
        v9 = *(_QWORD *)(a1 + 48);
        v11 = *(_QWORD *)(a1 + 80);
        v12 = *(_QWORD *)(a1 + 72) + v11;
      }
      *(_QWORD *)(*(_QWORD *)(v9 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = v17;
      v5 = v11 + 1;
      *(_QWORD *)(a1 + 80) = v11 + 1;
      v6 = *(_QWORD *)(a1 + 24);
    }
    while (v6 < a2);
    if (v6 != v5)
    {
      sub_239A444D4((uint64_t)"unknown file", 48, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  return a1;
}

void sub_239663320(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_2394D0C00(v2);
  sub_239420950(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239663354(uint64_t a1)
{
  _QWORD *i;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    if (i[2])
      e5rt_execution_stream_release();
    if (i[4])
      e5rt_execution_stream_operation_release();
  }
  sub_2394D0C00(a1 + 40);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_2396633EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;

  v1 = a1[10];
  if (!v1)
    return 0;
  v4 = a1[6];
  v3 = a1[7];
  v5 = ((v3 - v4) << 6) - 1;
  v6 = a1[9];
  if (v3 == v4)
    v5 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + (((unint64_t)(v6 + v1 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v6 + v1 - 1) & 0x1FF));
  a1[10] = v1 - 1;
  if ((unint64_t)(v5 - (v1 + v6) + 1) >= 0x400)
  {
    operator delete(*(void **)(v3 - 8));
    a1[7] -= 8;
  }
  v9 = &v8;
  *((_BYTE *)sub_239663EB8((uint64_t)a1, &v8, (uint64_t)&unk_239EC6E98, &v9) + 24) = 0;
  sub_23966421C(a1, &v8);
  return v8;
}

void sub_2396634D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = sub_23966421C(a1, &v10);
  if (v3)
  {
    v4 = v3;
    if (!*((_BYTE *)v3 + 24))
    {
      e5rt_execution_stream_reset();
      v5 = a1[7];
      v6 = a1[6];
      if (v5 == v6)
        v7 = 0;
      else
        v7 = ((v5 - v6) << 6) - 1;
      v8 = a1[10];
      v9 = v8 + a1[9];
      if (v7 == v9)
      {
        sub_2396638FC((uint64_t)(a1 + 5));
        v6 = a1[6];
        v8 = a1[10];
        v9 = a1[9] + v8;
      }
      *(_QWORD *)(*(_QWORD *)(v6 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = v10;
      a1[10] = v8 + 1;
      *((_BYTE *)v4 + 24) = 1;
    }
  }
}

_QWORD *sub_23966359C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x28uLL);
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  v17[4] = *(_QWORD *)(a3 + 16);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_2396638E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396638FC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239663E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239663E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239663E88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239663EA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239663EB8(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 1;
  v18[4] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_239664208(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23966421C(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_239664330(char **a1, uint64_t a2)
{
  char *v3;
  int v4;
  int v5;
  void *result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  __int32 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int32 v30;
  int i;
  int v32;
  char *v33;
  __int32 v34;
  __int32 v35;
  int v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int32 v41;
  void *__src;
  int32x4_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 4);
  result = (void *)sub_23949BB44(a2, a2, (uint64_t)&__src);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v43))) & 1) == 0 && v44)
  {
    v7 = (v5 * v4);
    v8 = (v43.i32[2] - 1);
    v9 = v45;
    v10 = v46;
    v11 = (char *)__src;
    v12 = v44 - 1;
    v41 = v43.i32[3] - 1;
    v34 = v43.i32[3];
    v35 = v43.i32[2];
    if (v44 != 1)
    {
      v40 = v47;
      v39 = v44 - 1;
      if (v43.i32[3] == 1)
      {
        if (v43.i32[2] == 1)
        {
          if (!(_DWORD)v7)
            return result;
          do
          {
            result = memmove(v3, v11, v7);
            v3 = &a1[3][(_QWORD)v3];
            v11 += v40;
            --v12;
          }
          while (v12);
        }
        else
        {
          if (!(_DWORD)v7)
            return result;
          v19 = 0;
          do
          {
            v20 = v8;
            v21 = v11;
            do
            {
              memmove(v3, v21, v7);
              v3 = &a1[3][(_QWORD)v3];
              v21 += v9;
              --v20;
            }
            while (v20);
            result = memmove(v3, v21, v7);
            v3 = &a1[3][(_QWORD)v3];
            v11 += v40;
            ++v19;
          }
          while (v19 != v39);
        }
      }
      else if (v43.i32[2] == 1)
      {
        v22 = 0;
        v38 = (v43.i32[3] - 2) + 1;
        do
        {
          if ((_DWORD)v7)
          {
            v24 = v41;
            v25 = v11;
            do
            {
              memmove(v3, v25, v7);
              v3 = &a1[3][(_QWORD)v3];
              v25 += v10;
              --v24;
            }
            while (v24);
            result = memmove(v3, v25, v7);
            v23 = a1[3];
            v12 = v39;
          }
          else
          {
            v23 = a1[3];
            v3 += v38 * (_QWORD)v23;
          }
          v3 = &v23[(_QWORD)v3];
          v11 += v40;
          ++v22;
        }
        while (v22 != v12);
      }
      else if ((_DWORD)v7)
      {
        v13 = 0;
        do
        {
          v36 = v13;
          v14 = 0;
          v37 = v11;
          v15 = v11;
          do
          {
            v16 = v8;
            v17 = v15;
            do
            {
              memmove(v3, v17, v7);
              v3 = &a1[3][(_QWORD)v3];
              v17 += v9;
              LODWORD(v8) = v8 - 1;
            }
            while ((_DWORD)v8);
            memmove(v3, v17, v7);
            v3 = &a1[3][(_QWORD)v3];
            v15 += v10;
            ++v14;
            v8 = v16;
          }
          while (v14 != v41);
          v18 = v16;
          do
          {
            memmove(v3, v15, v7);
            v3 = &a1[3][(_QWORD)v3];
            v15 += v9;
            --v18;
          }
          while (v18);
          result = memmove(v3, v15, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 = &v37[v40];
          v13 = v36 + 1;
        }
        while (v36 + 1 != v39);
      }
      else
      {
        v26 = (v43.i32[2] - 2);
        v27 = a1[3];
        v28 = (v26 + 2 + (v26 + 2) * (v43.i32[3] - 2)) * (_QWORD)v27;
        v29 = &v27[(_QWORD)v27 * v26 + (_QWORD)v27];
        do
        {
          v3 = &v3[v28 + (_QWORD)v29];
          v11 += v47;
          --v12;
        }
        while (v12);
      }
    }
    v30 = v41;
    if (v41)
    {
      if ((_DWORD)v8)
      {
        if (!(_DWORD)v7)
        {
          do
          {
            v3 = &a1[3][(_QWORD)a1[3] * (v35 - 2) + (_QWORD)v3 + (unint64_t)a1[3]];
            --v30;
          }
          while (v30);
          v11 += v10 + v10 * (unint64_t)(v34 - 2);
          goto LABEL_46;
        }
        for (i = 0; i != v41; ++i)
        {
          v32 = v8;
          v33 = v11;
          do
          {
            memmove(v3, v33, v7);
            v3 = &a1[3][(_QWORD)v3];
            v33 += v9;
            --v32;
          }
          while (v32);
          result = memmove(v3, v33, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v10;
        }
      }
      else
      {
        if (!(_DWORD)v7)
          return result;
        do
        {
          result = memmove(v3, v11, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v10;
          --v30;
        }
        while (v30);
      }
    }
    if (!(_DWORD)v8)
    {
LABEL_48:
      if ((_DWORD)v7)
        return memmove(v3, v11, v7);
      return result;
    }
LABEL_46:
    if (!(_DWORD)v7)
      return result;
    do
    {
      result = memmove(v3, v11, v7);
      v3 = &a1[3][(_QWORD)v3];
      v11 += v9;
      LODWORD(v8) = v8 - 1;
    }
    while ((_DWORD)v8);
    goto LABEL_48;
  }
  return result;
}

BOOL sub_239664730()
{
  _BOOL8 v0;
  void *v2;

  v2 = &unk_250AE1670;
  v0 = sub_23962ECB4((uint64_t)&v2);
  nullsub_214(&v2);
  return v0;
}

void sub_239664778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_214(va);
  _Unwind_Resume(a1);
}

void sub_23966478C(char a1@<W0>, char **a2@<X8>)
{
  _BOOL4 v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  void *v67;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v67 = &unk_250AE1670;
  v4 = sub_23962ECB4((uint64_t)&v67);
  nullsub_214(&v67);
  if (v4)
  {
    v6 = a2[1];
    v5 = (unint64_t)a2[2];
    if ((unint64_t)v6 >= v5)
    {
      v8 = *a2;
      v9 = v6 - *a2;
      v10 = v9 >> 2;
      v11 = (v9 >> 2) + 1;
      if (v11 >> 62)
        sub_2394189F8();
      v12 = v5 - (_QWORD)v8;
      if (v12 >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 62)
          sub_239418A80();
        v14 = operator new(4 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      v16 = &v14[4 * v13];
      *(_DWORD *)v15 = 1;
      v7 = v15 + 4;
      if (v6 != v8)
      {
        v17 = v6 - v8 - 4;
        if (v17 < 0x2C)
          goto LABEL_79;
        if ((unint64_t)(v6 - v14 - v9) < 0x20)
          goto LABEL_79;
        v18 = (v17 >> 2) + 1;
        v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
        v20 = &v6[-v19];
        v15 -= v19;
        v21 = &v14[4 * v10 - 16];
        v22 = v6 - 16;
        v23 = v18 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_79:
          do
          {
            v25 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v15 - 1) = v25;
            v15 -= 4;
          }
          while (v6 != v8);
        }
      }
      *a2 = v15;
      a2[1] = v7;
      a2[2] = v16;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_DWORD *)v6 = 1;
      v7 = v6 + 4;
    }
    a2[1] = v7;
  }
  v26 = a2[1];
  if ((a1 & 1) == 0)
  {
    v27 = (unint64_t)a2[2];
    if ((unint64_t)v26 >= v27)
    {
      v29 = *a2;
      v30 = v26 - *a2;
      v31 = v30 >> 2;
      v32 = (v30 >> 2) + 1;
      if (v32 >> 62)
        sub_2394189F8();
      v33 = v27 - (_QWORD)v29;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 62)
          sub_239418A80();
        v35 = operator new(4 * v34);
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[4 * v31];
      v37 = &v35[4 * v34];
      *(_DWORD *)v36 = 2;
      v28 = v36 + 4;
      if (v26 != v29)
      {
        v38 = v26 - v29 - 4;
        if (v38 < 0x2C)
          goto LABEL_80;
        if ((unint64_t)(v26 - &v35[v30]) < 0x20)
          goto LABEL_80;
        v39 = (v38 >> 2) + 1;
        v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
        v41 = &v26[-v40];
        v36 -= v40;
        v42 = &v35[4 * v31 - 16];
        v43 = v26 - 16;
        v44 = v39 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *v42 = v45;
          v42 -= 2;
          v43 -= 32;
          v44 -= 8;
        }
        while (v44);
        v26 = v41;
        if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_80:
          do
          {
            v46 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v36 - 1) = v46;
            v36 -= 4;
          }
          while (v26 != v29);
        }
      }
      *a2 = v36;
      a2[1] = v28;
      a2[2] = v37;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_DWORD *)v26 = 2;
      v28 = v26 + 4;
    }
    a2[1] = v28;
    v26 = v28;
  }
  v47 = (unint64_t)a2[2];
  if ((unint64_t)v26 < v47)
  {
    *(_DWORD *)v26 = 3;
    v48 = v26 + 4;
    goto LABEL_70;
  }
  v49 = *a2;
  v50 = v26 - *a2;
  v51 = v50 >> 2;
  v52 = (v50 >> 2) + 1;
  if (v52 >> 62)
    sub_2394189F8();
  v53 = v47 - (_QWORD)v49;
  if (v53 >> 1 > v52)
    v52 = v53 >> 1;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
    v54 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 62)
      sub_239418A80();
    v55 = operator new(4 * v54);
  }
  else
  {
    v55 = 0;
  }
  v56 = &v55[4 * v51];
  v57 = &v55[4 * v54];
  *(_DWORD *)v56 = 3;
  v48 = v56 + 4;
  if (v26 != v49)
  {
    v58 = v26 - v49 - 4;
    if (v58 < 0x2C)
    {
      v59 = v26;
      goto LABEL_67;
    }
    if ((unint64_t)(v26 - v55 - v50) < 0x20)
    {
      v59 = v26;
      do
      {
LABEL_67:
        v66 = *((_DWORD *)v59 - 1);
        v59 -= 4;
        *((_DWORD *)v56 - 1) = v66;
        v56 -= 4;
      }
      while (v59 != v49);
      goto LABEL_68;
    }
    v60 = (v58 >> 2) + 1;
    v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
    v59 = &v26[-v61];
    v56 -= v61;
    v62 = &v55[4 * v51 - 16];
    v63 = v26 - 16;
    v64 = v60 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v65 = *(_OWORD *)v63;
      *(v62 - 1) = *((_OWORD *)v63 - 1);
      *v62 = v65;
      v62 -= 2;
      v63 -= 32;
      v64 -= 8;
    }
    while (v64);
    if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_67;
  }
LABEL_68:
  *a2 = v56;
  a2[1] = v48;
  a2[2] = v57;
  if (v49)
    operator delete(v49);
LABEL_70:
  a2[1] = v48;
}

void sub_239664BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239664BD8(int a1, char a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = a1 - 1;
  result = 1;
  if (v3 >= 2 && (a2 & 1) == 0)
  {
    if (a1 != 3)
      sub_239EC1438();
    return 2;
  }
  return result;
}

uint64_t sub_239664C0C(int a1)
{
  if (a1 != 1 && a1 != 3 && a1 != 2)
    sub_239EC1468();
  return espresso_create_context();
}

uint64_t sub_239664C5C(char a1)
{
  _DWORD *v1;
  _DWORD *v2;
  int v3;
  uint64_t context;
  void *__p;
  _DWORD *v7;

  sub_23966478C(a1, (char **)&__p);
  v1 = __p;
  v2 = v7;
  if (__p == v7)
  {
    context = 0;
    if (!__p)
      return context;
    goto LABEL_8;
  }
  do
  {
    v3 = *v1;
    if (*v1 != 1 && v3 != 3 && v3 != 2)
    {
      sub_239A444D4((uint64_t)"unknown file", 81, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    context = espresso_create_context();
    if (context)
      break;
    ++v1;
  }
  while (v1 != v2);
  v1 = __p;
  if (__p)
  {
LABEL_8:
    v7 = v1;
    operator delete(v1);
  }
  return context;
}

void sub_239664D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239664D74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v19)();
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_239648750(v10 + 8, a2, (uint64_t)&v19);
  v11 = v20;
  if (v20)
  {
    *(_QWORD *)a5 = &off_250ADC870;
    *(_BYTE *)(a5 + 8) = v11;
    v12 = v22;
    *(_QWORD *)(a5 + 16) = v21;
    *(_QWORD *)(a5 + 24) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4);
  }
  v19 = &off_250ADC870;
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return nullsub_4(&v19);
}

void sub_239664E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FC6C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239664E90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v19)();
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_239648750(v10 + 8, a2, (uint64_t)&v19);
  v11 = v20;
  if (v20)
  {
    *(_QWORD *)a5 = &off_250ADC870;
    *(_BYTE *)(a5 + 8) = v11;
    v12 = v22;
    *(_QWORD *)(a5 + 16) = v21;
    *(_QWORD *)(a5 + 24) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4);
  }
  v19 = &off_250ADC870;
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return nullsub_4(&v19);
}

void sub_239664F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FC6C(&a9);
  _Unwind_Resume(a1);
}

double sub_239664FAC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double result;
  _QWORD *exception;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;

  v12 = 1;
  sub_239644B20(&v26, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_239644B20(&v24, a4, *a2, 1, 1, 1);
      v26 = v24;
      v27 = v25;
      if (!HIDWORD(*a2))
      {
        v13 = *a3;
        v14 = *a3 * *a2;
        v12 = a5;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_239644B20(&v24, a4, v20, *a2, 1, 1);
      v26 = v24;
      v27 = v25;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v14 = *a3;
        v15 = *a3 * v21;
        v13 = a3[2];
        v12 = a5;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_239644B20(&v24, a4, v17, v18, v19, *a2);
          v26 = v24;
          v27 = v25;
          v13 = a3[6];
          v14 = a3[4];
          v15 = a3[2];
          v16 = *a3;
          v12 = a5;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_250AF2150;
    __cxa_throw(exception, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v26;
  *(_OWORD *)a6 = v26;
  *(_DWORD *)(a6 + 16) = v27;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_2396651A0@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double result;
  _QWORD *exception;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;

  v12 = 1;
  sub_239644B20(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_239644B20(&v25, a4, *a2, 1, 1, 1);
      v27 = v25;
      v28 = v26;
      if (!HIDWORD(*a2))
      {
        v12 = a5 >> 1;
        v13 = *a3 >> 1;
        v14 = (*a3 * *a2) >> 1;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_239644B20(&v25, a4, v20, *a2, 1, 1);
      v27 = v25;
      v28 = v26;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v22 = *a3 * v21;
        v12 = a5 >> 1;
        v13 = a3[2] >> 1;
        v14 = *a3 >> 1;
        v15 = v22 >> 1;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_239644B20(&v25, a4, v17, v18, v19, *a2);
          v27 = v25;
          v28 = v26;
          v12 = a5 >> 1;
          v13 = a3[6] >> 1;
          v14 = a3[4] >> 1;
          v15 = a3[2] >> 1;
          v16 = *a3 >> 1;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_250AF2150;
    __cxa_throw(exception, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_2396653B8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double result;
  _QWORD *exception;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;

  v12 = 1;
  sub_239644B20(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_239644B20(&v25, a4, *a2, 1, 1, 1);
      v27 = v25;
      v28 = v26;
      if (!HIDWORD(*a2))
      {
        v12 = a5 >> 2;
        v13 = *a3 >> 2;
        v14 = (*a3 * *a2) >> 2;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_239644B20(&v25, a4, v20, *a2, 1, 1);
      v27 = v25;
      v28 = v26;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v22 = *a3 * v21;
        v12 = a5 >> 2;
        v13 = a3[2] >> 2;
        v14 = *a3 >> 2;
        v15 = v22 >> 2;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_239644B20(&v25, a4, v17, v18, v19, *a2);
          v27 = v25;
          v28 = v26;
          v12 = a5 >> 2;
          v13 = a3[6] >> 2;
          v14 = a3[4] >> 2;
          v15 = a3[2] >> 2;
          v16 = *a3 >> 2;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_250AF2150;
    __cxa_throw(exception, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

uint64_t sub_2396655D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t *v14;
  __int128 v15;
  unint64_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t (**v21)();
  __int128 v22;
  _OWORD v23[2];
  char v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[30];
  char v33;

  v3 = result;
  v5 = result + 24;
  if (*(_BYTE *)(result + 152))
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 120) = -1;
    v6 = *(unsigned int *)(result + 144);
    if ((_DWORD)v6 == -1)
      return result;
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_250AE2B78[v6])(&v26, a3, v5);
    goto LABEL_29;
  }
  v7 = *(_DWORD *)result;
  if (*(_DWORD *)result == 2)
  {
    sub_23966F574((_DWORD *)result, a2, (uint64_t)&v26);
    v17 = v26;
    v18 = v27;
    v19 = v28;
    v20 = v29;
    LOBYTE(v21) = 0;
    v24 = 0;
    if (!v33)
    {
      v25 = 2;
      goto LABEL_24;
    }
    v21 = &off_250ADB210;
    v13 = v31;
    v31 = 0uLL;
    v22 = v13;
    v23[0] = *(_OWORD *)v32;
    *(_OWORD *)((char *)v23 + 14) = *(_OWORD *)&v32[14];
    v24 = 1;
    v25 = 2;
    v9 = nullsub_4(v32);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (!*((_QWORD *)&v31 + 1))
      goto LABEL_23;
    v14 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldaxr(v14);
    while (__stlxr(v12 - 1, v14));
    goto LABEL_21;
  }
  if (v7 == 1)
  {
    sub_23966F2E0((_DWORD *)result, a2, (uint64_t)&v26);
    v17 = v26;
    v18 = v27;
    v19 = v28;
    v20 = v29;
    LOBYTE(v21) = 0;
    v24 = 0;
    if (!v33)
    {
      v25 = 1;
      goto LABEL_24;
    }
    v21 = &off_250ADB210;
    v15 = v31;
    v31 = 0uLL;
    v22 = v15;
    v23[0] = *(_OWORD *)v32;
    *(_OWORD *)((char *)v23 + 14) = *(_OWORD *)&v32[14];
    v24 = 1;
    v25 = 1;
    v9 = nullsub_4(v32);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (!*((_QWORD *)&v31 + 1))
      goto LABEL_23;
    v16 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
LABEL_21:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_23;
  }
  if (v7)
    sub_239EC0B6C();
  sub_23966F050((_DWORD *)result, a2, (uint64_t)&v26);
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  LOBYTE(v21) = 0;
  v24 = 0;
  if (v33)
  {
    v21 = &off_250ADB210;
    v8 = v31;
    v31 = 0uLL;
    v22 = v8;
    v23[0] = *(_OWORD *)v32;
    *(_OWORD *)((char *)v23 + 14) = *(_OWORD *)&v32[14];
    v24 = 1;
    v25 = 0;
    v9 = nullsub_4(v32);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_21;
    }
LABEL_23:
    nullsub_4(&v30);
    goto LABEL_24;
  }
  v25 = 0;
LABEL_24:
  result = sub_239665960(v5, (uint64_t)&v17);
  if (v25 != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_250AE2B60[v25])(&v26, &v17);
  if (!*(_BYTE *)(v3 + 152))
    sub_2394875CC();
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 120) = -1;
  v6 = *(unsigned int *)(v3 + 144);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_250AE2B78[v6])(&v26, a3, v5);
LABEL_29:
    *(_DWORD *)(a3 + 120) = v6;
  }
  return result;
}

void sub_2396658DC(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v3;
  va_list va;

  va_start(va, exception_object);
  v3 = *(unsigned int *)(v1 + 120);
  if ((_DWORD)v3 != -1)
    ((void (*)(uint64_t *, uint64_t))off_250AE2B60[v3])((uint64_t *)va, v1);
  *(_DWORD *)(v1 + 120) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_239665960(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(unsigned int *)(a1 + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_250AE2B60[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 120) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_250AE2E50[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  v6 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_250AE2C90[v6])(&v9, a1, a2);
    *(_DWORD *)(a1 + 120) = v6;
  }
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

uint64_t sub_239665A50(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_239665AA8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  std::string *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  std::string v12;
  _BYTE __dst[24];
  std::string v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 39) < 0)
  {
    sub_23941A7F8(v10, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 32);
  }
  sub_239653738(&v12);
  v9 = 0;
  v3 = e5rt_program_library_create();
  if (v3)
  {
    sub_23966746C(&v14, v3 | 0x100000000);
    v4 = std::string::insert(&v14, 0, "Unable to create program library: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *(_QWORD *)&__dst[16] = *((_QWORD *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)__dst = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    sub_239667204(a2, (uint64_t)v10, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    v15[0] = &off_250AE2E78;
    v15[1] = MEMORY[0x24BE2F998];
    v15[2] = &v9;
    v16 = v15;
    v8 = 0;
    e5rt_program_library_get_num_functions();
    *(_QWORD *)__dst = operator new(0x38uLL);
    *(_OWORD *)&__dst[8] = xmmword_239EC9F60;
    strcpy(*(char **)__dst, "Expect alteast one function for a model but got 0");
    sub_239667204(a2, (uint64_t)v10, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (!v16)
      sub_2394172E0();
    (*(void (**)(_QWORD *))(*v16 + 48))(v16);
    v6 = v16;
    if (v16 == v15)
    {
      v7 = 4;
      v6 = v15;
    }
    else
    {
      if (!v16)
        goto LABEL_19;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
LABEL_19:
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v10[0]);
    return;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11) < 0)
    goto LABEL_23;
}

void sub_239666BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *a72;
  uint64_t v72;
  uint64_t v74;
  void *v75;

  if (a18 < 0)
    operator delete(__p);
  v74 = *a10;
  *a10 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  sub_23948FC6C(&STACK[0x210]);
  v75 = a29;
  a29 = 0;
  if (v75)
    (*(void (**)(void *))(*(_QWORD *)v75 + 8))(v75);
  sub_23948FC6C(&a20);
  sub_23966917C(&a42);
  sub_23966917C(&a46);
  sub_23948FC6C(&a24);
  sub_239416834((_QWORD *)(v72 - 240));
  if (a55 < 0)
    operator delete(a50);
  if (a58)
    operator delete(a58);
  sub_239669B84((uint64_t)&a61);
  sub_23942823C((uint64_t)&a67);
  sub_239416834((_QWORD *)(v72 - 128));
  sub_2395080CC((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void sub_239667204(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  std::operator+<char>();
  v6 = std::string::append(&v23, "', version: ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v10 = *(const std::string::value_type **)(a2 + 24);
  v9 = a2 + 24;
  v8 = v10;
  v11 = *(char *)(v9 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = *(_QWORD *)(v9 + 8);
  v14 = std::string::append(&v24, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v25, ". ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a3 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a3;
  else
    v19 = *(const std::string::value_type **)a3;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a3 + 23);
  else
    v20 = *(_QWORD *)(a3 + 8);
  v21 = std::string::append(&v26, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v28 = v21->__r_.__value_.__r.__words[2];
  v27 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
LABEL_21:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
LABEL_16:
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_17;
LABEL_22:
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_17:
  *a1 = 0;
  v26.__r_.__value_.__s.__data_[0] = 5;
  sub_23957E1BC((uint64_t)(a1 + 1), &v26, (uint64_t)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
}

void sub_2396673A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;

  v38 = *v35;
  *v35 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  _Unwind_Resume(exception_object);
}

void sub_23966746C(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  const char *last_error_message;
  size_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p;
  std::string::size_type v26;
  int64_t v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  std::string v31;

  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_12;
  }
  v4 = (const char *)MEMORY[0x23B83E76C](a2);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = std::string::insert(&__dst, 0, "Status code: ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v29, ". ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
LABEL_12:
  v14 = std::string::append(&v30, "Last Error: ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  v17 = strlen(last_error_message);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    v26 = v18;
    v27 = v21 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v27) = v17;
  p_p = &__p;
  if (v17)
LABEL_19:
    memmove(p_p, last_error_message, v18);
  *((_BYTE *)p_p + v18) = 0;
  if (v27 >= 0)
    v22 = (const std::string::value_type *)&__p;
  else
    v22 = (const std::string::value_type *)__p;
  if (v27 >= 0)
    v23 = HIBYTE(v27);
  else
    v23 = v26;
  v24 = std::string::append(&v31, v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v3)
      return;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_34:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
}

void sub_2396676F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23966779C(uint64_t a1)
{
  sub_23966FAA0(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2396677E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::string::size_type *p_size;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::string::size_type *v44;
  uint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  std::string __p;
  std::string v50;
  std::string v51;
  std::string v52;
  void *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  std::string v58;
  std::string v59;
  std::string *v60;
  std::string *v61;
  _BYTE v62[24];
  _BYTE *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v58.__r_.__value_.__r.__words[0] = 0;
  v53 = 0;
  e5rt_execution_stream_operation_get_num_inputs();
  e5rt_execution_stream_operation_get_num_outputs();
  v4 = a1[5];
  v3 = a1[6];
  if (!(0xCF3CF3CF3CF3CF3DLL * ((v3 - v4) >> 3)) && v53 == (void *)((uint64_t)(a1[9] - a1[8]) >> 5))
  {
    if (v3 == v4)
      sub_239EC03F4();
    v5 = 0;
    while (1)
    {
      sub_23964FC9C((uint64_t)a1, v5, (uint64_t)&v59);
      v58 = v59;
      v57 = 0;
      v6 = e5rt_execution_stream_operation_retain_input_port();
      if (!v6)
      {
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE3018;
        v59.__r_.__value_.__l.__size_ = (std::string::size_type)MEMORY[0x24BE2F8E8];
        v59.__r_.__value_.__r.__words[2] = (std::string::size_type)&v57;
        v60 = &v59;
        e5rt_io_port_release();
        if (v60 == &v59)
        {
          (*(void (**)(void))(v59.__r_.__value_.__r.__words[0] + 32))();
          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_48;
LABEL_47:
          operator delete(v58.__r_.__value_.__l.__data_);
          goto LABEL_48;
        }
        if (v60)
        {
          (*(void (**)(std::string *))(v60->__r_.__value_.__r.__words[0] + 40))(v60);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_47;
          goto LABEL_48;
        }
        goto LABEL_46;
      }
      v56 = 0;
      e5rt_execution_stream_operation_get_num_inputs();
      v7 = v56;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      if (v56 >> 61)
        sub_2394189F8();
      v8 = 8 * v56;
      v9 = (char *)operator new(8 * v56);
      v53 = v9;
      v55 = &v9[8 * v7];
      bzero(v9, 8 * v7);
      v54 = &v9[v8];
      e5rt_execution_stream_operation_get_input_names();
      std::operator+<char>();
      v10 = std::string::append(&v50, ". Error: ");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_239669F08(&__p, v6 | 0x100000000);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v51, (const std::string::value_type *)p_p, size);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v59, ". Available ports are: ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v59.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_15:
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_26;
          goto LABEL_16;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_26:
        operator delete(v51.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_27;
      }
LABEL_16:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_27:
      operator delete(v50.__r_.__value_.__l.__data_);
LABEL_17:
      *((_BYTE *)&v50.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v50, ", ");
      v18 = sub_239670994(&v59, (uint64_t *)&v53);
      sub_23966FDA4((uint64_t)v18, (uint64_t)&v50, &v51);
      v19 = v63;
      if (v63 == v62)
      {
        v19 = v62;
        v20 = 4;
      }
      else
      {
        if (!v63)
          goto LABEL_30;
        v20 = 5;
      }
      (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_30:
      p_size = (std::string::size_type *)v61;
      if (v61 == (std::string *)&v59.__r_.__value_.__r.__words[1])
      {
        p_size = &v59.__r_.__value_.__l.__size_;
        v22 = 4;
      }
      else
      {
        if (!v61)
          goto LABEL_35;
        v22 = 5;
      }
      (*(void (**)(void))(*p_size + 8 * v22))();
LABEL_35:
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v51;
      else
        v23 = (std::string *)v51.__r_.__value_.__r.__words[0];
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      else
        v24 = v51.__r_.__value_.__l.__size_;
      std::string::append(&v52, (const std::string::value_type *)v23, v24);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
LABEL_52:
          operator delete(v50.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_52;
      }
      v59.__r_.__value_.__s.__data_[0] = 3;
      sub_23957E1BC(a2, &v59, (uint64_t)&v52);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v25 = (char *)v53;
        if (!v53)
          goto LABEL_46;
LABEL_45:
        v54 = v25;
        operator delete(v25);
        goto LABEL_46;
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      v25 = (char *)v53;
      if (v53)
        goto LABEL_45;
LABEL_46:
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
LABEL_48:
      if (v6)
        return;
      if (!++v5)
      {
        v26 = a1[9] - a1[8];
        if (!v26)
          sub_239EC1498();
        v27 = 0;
        v28 = v26 >> 5;
        while (1)
        {
          sub_23964FE94((uint64_t)a1, v27, (uint64_t)&v59);
          v58 = v59;
          v57 = 0;
          v29 = e5rt_execution_stream_operation_retain_output_port();
          if (v29)
            break;
          v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE3018;
          v59.__r_.__value_.__l.__size_ = (std::string::size_type)MEMORY[0x24BE2F8E8];
          v59.__r_.__value_.__r.__words[2] = (std::string::size_type)&v57;
          v60 = &v59;
          e5rt_io_port_release();
          if (v60 == &v59)
          {
            (*(void (**)(void))(v59.__r_.__value_.__r.__words[0] + 32))();
            if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_107;
LABEL_106:
            operator delete(v58.__r_.__value_.__l.__data_);
            goto LABEL_107;
          }
          if (v60)
          {
            (*(void (**)(std::string *))(v60->__r_.__value_.__r.__words[0] + 40))(v60);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_106;
            goto LABEL_107;
          }
LABEL_105:
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_106;
LABEL_107:
          if (v29)
            return;
          if (v28 == ++v27)
          {
            v58.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v59.__r_.__value_.__s + 23) = 0;
            v59.__r_.__value_.__s.__data_[0] = 0;
            sub_23957E1BC(a2, &v58, (uint64_t)&v59);
            goto LABEL_58;
          }
        }
        v56 = 0;
        e5rt_execution_stream_operation_get_num_outputs();
        v30 = v56;
        v54 = 0;
        v55 = 0;
        v53 = 0;
        if (v56 >> 61)
          sub_2394189F8();
        v31 = 8 * v56;
        v32 = (char *)operator new(8 * v56);
        v53 = v32;
        v55 = &v32[8 * v30];
        bzero(v32, 8 * v30);
        v54 = &v32[v31];
        e5rt_execution_stream_operation_get_output_names();
        std::operator+<char>();
        v33 = std::string::append(&v50, ". Error: ");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        sub_239669F08(&__p, v29 | 0x100000000);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &__p;
        else
          v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v36 = __p.__r_.__value_.__l.__size_;
        v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v39 = std::string::append(&v59, ". Available ports are: ");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_73;
LABEL_83:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_84;
LABEL_74:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_75;
LABEL_85:
          operator delete(v50.__r_.__value_.__l.__data_);
          goto LABEL_75;
        }
        operator delete(v59.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_83;
LABEL_73:
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_74;
LABEL_84:
        operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_85;
LABEL_75:
        *((_BYTE *)&v50.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v50, ", ");
        v41 = sub_239670994(&v59, (uint64_t *)&v53);
        sub_23966FDA4((uint64_t)v41, (uint64_t)&v50, &v51);
        v42 = v63;
        if (v63 == v62)
        {
          v42 = v62;
          v43 = 4;
LABEL_87:
          (*(void (**)(void))(*v42 + 8 * v43))();
        }
        else if (v63)
        {
          v43 = 5;
          goto LABEL_87;
        }
        v44 = (std::string::size_type *)v61;
        if (v61 == (std::string *)&v59.__r_.__value_.__r.__words[1])
        {
          v44 = &v59.__r_.__value_.__l.__size_;
          v45 = 4;
LABEL_92:
          (*(void (**)(void))(*v44 + 8 * v45))();
        }
        else if (v61)
        {
          v45 = 5;
          goto LABEL_92;
        }
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v51;
        else
          v46 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          v47 = v51.__r_.__value_.__l.__size_;
        std::string::append(&v52, (const std::string::value_type *)v46, v47);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v51.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_101;
        }
        else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_101:
          v59.__r_.__value_.__s.__data_[0] = 3;
          sub_23957E1BC(a2, &v59, (uint64_t)&v52);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52.__r_.__value_.__l.__data_);
          if (v53)
          {
            v54 = (char *)v53;
            operator delete(v53);
          }
          goto LABEL_105;
        }
        operator delete(v50.__r_.__value_.__l.__data_);
        goto LABEL_101;
      }
    }
  }
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = xmmword_239EC9F70;
  strcpy(v59.__r_.__value_.__l.__data_, "Input/output port counts doesn't match.");
  v52.__r_.__value_.__s.__data_[0] = 3;
  sub_23957E1BC(a2, &v52, (uint64_t)&v59);
LABEL_58:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
}

void sub_23966806C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 153) < 0)
  {
    operator delete(*(void **)(v46 - 176));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char **sub_2396682B8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL)
      sub_2394189F8();
    v4 = (char *)operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[160 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 8) = 0uLL;
      *((_OWORD *)v4 + 9) = 0uLL;
      *((_OWORD *)v4 + 6) = 0uLL;
      *((_OWORD *)v4 + 7) = 0uLL;
      *((_OWORD *)v4 + 4) = 0uLL;
      *((_OWORD *)v4 + 5) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
      *((_OWORD *)v4 + 3) = 0uLL;
      *(_DWORD *)v4 = 3;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      v4[24] = 0;
      v4 += 160;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_239668374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  _DWORD *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;

  v15 = *v13;
  if (*v13)
  {
    v16 = v13[1];
    v17 = *v13;
    if (v16 != v15)
    {
      do
      {
        if (*((_BYTE *)v16 - 8))
        {
          v18 = *(v16 - 4);
          if ((_DWORD)v18 != -1)
            ((void (*)(char *, _DWORD *))off_250AE2B60[v18])(&a13, v16 - 34);
          *(v16 - 4) = -1;
        }
        v16 -= 40;
      }
      while (v16 != v15);
      v17 = *v13;
    }
    v13[1] = v15;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_2396683F0(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::string *v43;
  uint64_t v44;
  std::string *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  void *__p[2];
  std::string::size_type v54;
  _BYTE v55[120];
  int v56;
  char v57;
  std::string v58;
  uint64_t v59;
  std::string::size_type v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[3];
  _QWORD *v69;
  std::string v70;
  std::string *v71;
  std::string v72;
  std::string *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  if (v5 != v6)
  {
    v9 = 0;
    while (1)
    {
      v59 = 0;
      e5rt_execution_stream_operation_retain_output_port();
      v68[0] = &off_250AE3018;
      v68[1] = MEMORY[0x24BE2F8E8];
      v68[2] = &v59;
      v69 = v68;
      if (!a2)
        goto LABEL_25;
      v10 = *a3;
      v11 = *a3 + 160 * v9;
      if (!*(_QWORD *)(v11 + 8))
        break;
      e5rt_tensor_desc_release();
      if (*(_QWORD *)(v10 + 160 * v9 + 16))
        goto LABEL_8;
LABEL_9:
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)v11 = 3;
      v12 = v10 + 160 * v9;
      v14 = *(unsigned __int8 *)(v12 + 152);
      v13 = (_BYTE *)(v12 + 152);
      if (v14)
      {
        v15 = v10 + 160 * v9;
        v18 = *(_DWORD *)(v15 + 144);
        v17 = (_DWORD *)(v15 + 144);
        v16 = v18;
        if (v18 != -1)
          ((void (*)(void **, _BYTE *))off_250AE2B60[v16])(__p, v13 - 128);
        *v17 = -1;
        *v13 = 0;
      }
LABEL_13:
      e5rt_io_port_retain_tensor_desc();
      v67 = 0;
      e5rt_tensor_desc_get_size();
      sub_23966DB44();
      *(_DWORD *)(*a3 + 160 * v9) = v19;
      if (e5rt_buffer_object_alloc())
      {
        LOBYTE(v66) = 5;
        std::operator+<char>();
        v20 = std::string::append(&v70, " of size ");
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        sub_23964A648(&v67, &v58);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v58;
        else
          v22 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        else
          size = v58.__r_.__value_.__l.__size_;
        v24 = std::string::append(&v72, (const std::string::value_type *)v22, size);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v54 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        sub_23957E1BC(a5, &v66, (uint64_t)__p);
        if (SHIBYTE(v54) < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_35;
LABEL_22:
          if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
LABEL_36:
          operator delete(v72.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_39;
        }
        else
        {
          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_22;
LABEL_35:
          operator delete(v58.__r_.__value_.__l.__data_);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_36;
LABEL_23:
          if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_39;
        }
        v26 = (void *)v70.__r_.__value_.__r.__words[0];
LABEL_38:
        operator delete(v26);
        goto LABEL_39;
      }
LABEL_25:
      if (e5rt_io_port_bind_buffer_object())
      {
        v72.__r_.__value_.__s.__data_[0] = 5;
        std::operator+<char>();
        sub_23957E1BC(a5, &v72, (uint64_t)__p);
        if (SHIBYTE(v54) < 0)
        {
          v26 = __p[0];
          goto LABEL_38;
        }
LABEL_39:
        v32 = 0;
        v33 = v69;
        if (!v69)
          goto LABEL_90;
        goto LABEL_77;
      }
      if (a2)
      {
        v27 = *a3;
        v28 = *a3 + 160 * v9;
        if (*(_DWORD *)v28 == 2)
        {
          v29 = *(_OWORD *)v28;
          v54 = *(_QWORD *)(v28 + 16);
          *(_OWORD *)__p = v29;
          v30 = v27 + 160 * v9;
          v55[0] = 0;
          v57 = 0;
          if (*(_BYTE *)(v30 + 152))
          {
            v56 = -1;
            v31 = *(unsigned int *)(v27 + 160 * v9 + 144);
            if ((_DWORD)v31 != -1)
            {
              ((void (*)(std::string *, _BYTE *, uint64_t))off_250AE2B78[v31])(&v70, v55, v30 + 24);
              v56 = v31;
            }
            v57 = 1;
          }
          goto LABEL_73;
        }
        v58.__r_.__value_.__r.__words[0] = 0;
        e5rt_tensor_desc_retain_dtype();
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE2BA0;
        v72.__r_.__value_.__l.__size_ = MEMORY[0x24BE2FA68];
        v72.__r_.__value_.__r.__words[2] = (std::string::size_type)&v58;
        v73 = &v72;
        v66 = 0;
        v67 = 0;
        e5rt_tensor_desc_get_shape();
        v65 = 0;
        e5rt_tensor_desc_dtype_get_num_components();
        v64 = 0;
        if (v65 != 1 && v65 != 4 && v65 != 2)
        {
          sub_239A444D4((uint64_t)"unknown file", 883, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (e5rt_tensor_desc_dtype_create())
        {
          sub_239A444D4((uint64_t)"unknown file", 915, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE2BA0;
        v70.__r_.__value_.__l.__size_ = MEMORY[0x24BE2FA68];
        v70.__r_.__value_.__r.__words[2] = (std::string::size_type)&v64;
        v71 = &v70;
        v63 = 0;
        if (e5rt_tensor_desc_create())
        {
          sub_239A444D4((uint64_t)"unknown file", 922, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v61 = 0;
        v62 = 0;
        e5rt_tensor_desc_get_size();
        e5rt_tensor_desc_get_size();
        if (*(_DWORD *)v28 == 1)
        {
          if (v67)
          {
            if (v67 == 4 && (*(_BYTE *)(v66 + 24) & 0x1F) == 0)
            {
              if (2 * v61 != v62)
              {
LABEL_86:
                sub_239A444D4((uint64_t)"unknown file", 930, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
            }
            else
            {
              if (v67 < 2)
              {
                v34 = 0;
                v35 = 1;
                goto LABEL_57;
              }
              v34 = v67 & 0xFFFFFFFFFFFFFFFELL;
              v36 = (_QWORD *)(v66 + 8);
              v37 = v67 & 0xFFFFFFFFFFFFFFFELL;
              v38 = 1;
              v39 = 1;
              do
              {
                v38 *= *(v36 - 1);
                v39 *= *v36;
                v36 += 2;
                v37 -= 2;
              }
              while (v37);
              v35 = v39 * v38;
              if (v67 != v34)
              {
LABEL_57:
                v40 = v67 - v34;
                v41 = (uint64_t *)(v66 + 8 * v34);
                do
                {
                  v42 = *v41++;
                  v35 *= v42;
                  --v40;
                }
                while (v40);
              }
              if (4 * v35 != v62)
                goto LABEL_86;
            }
          }
          else if (v62 != 4)
          {
            goto LABEL_86;
          }
        }
        v60 = 0;
        if (e5rt_buffer_object_alloc())
        {
          sub_239A444D4((uint64_t)"unknown file", 937, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        LODWORD(__p[0]) = 2;
        __p[1] = v63;
        v54 = v60;
        v55[0] = 0;
        v57 = 0;
        if (!v71)
          sub_2394172E0();
        (*(void (**)(std::string *))(v71->__r_.__value_.__r.__words[0] + 48))(v71);
        v43 = v71;
        if (v71 == &v70)
        {
          v43 = &v70;
          v44 = 4;
LABEL_66:
          (*(void (**)(void))(v43->__r_.__value_.__r.__words[0] + 8 * v44))();
        }
        else if (v71)
        {
          v44 = 5;
          goto LABEL_66;
        }
        if (!v73)
          sub_2394172E0();
        (*(void (**)(std::string *))(v73->__r_.__value_.__r.__words[0] + 48))(v73);
        v45 = v73;
        if (v73 == &v72)
        {
          v45 = &v72;
          v46 = 4;
LABEL_72:
          (*(void (**)(void))(v45->__r_.__value_.__r.__words[0] + 8 * v46))();
        }
        else if (v73)
        {
          v46 = 5;
          goto LABEL_72;
        }
LABEL_73:
        v47 = *a4 + 160 * v9;
        v48 = *(_OWORD *)__p;
        *(_QWORD *)(v47 + 16) = v54;
        *(_OWORD *)v47 = v48;
        sub_2396761B0(v47 + 24, (uint64_t)v55);
        if (v57 && v56 != -1)
          ((void (*)(std::string *, _BYTE *))off_250AE2B60[v56])(&v72, v55);
      }
      v32 = 1;
      v33 = v69;
      if (!v69)
LABEL_90:
        sub_2394172E0();
LABEL_77:
      (*(void (**)(_QWORD *))(*v33 + 48))(v33);
      v49 = v69;
      if (v69 == v68)
      {
        v49 = v68;
        v50 = 4;
        goto LABEL_81;
      }
      if (v69)
      {
        v50 = 5;
LABEL_81:
        (*(void (**)(void))(*v49 + 8 * v50))();
      }
      if (!v32)
        return;
      v5 += 32;
      ++v9;
      if (v5 == v6)
        goto LABEL_87;
    }
    if (!*(_QWORD *)(v10 + 160 * v9 + 16))
      goto LABEL_13;
LABEL_8:
    e5rt_buffer_object_release();
    goto LABEL_9;
  }
LABEL_87:
  v72.__r_.__value_.__s.__data_[0] = 0;
  HIBYTE(v54) = 0;
  LOBYTE(__p[0]) = 0;
  sub_23957E1BC(a5, &v72, (uint64_t)__p);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
}

void sub_239668BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 128));
  sub_239416834((_QWORD *)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_239668BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_250AE2B60[a34])(v41 - 128, a11);
  sub_239416834((_QWORD *)(v41 - 192));
  _Unwind_Resume(a1);
}

void sub_239668E14(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;

  if (a1[3])
  {
    v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        v5 = (void **)*v2;
        sub_23966FAA0((uint64_t)(v2 + 5));
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_239668EA0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v9 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v47 = *a1;
  v48 = v8;
  *a1 = 0;
  a1[1] = 0;
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v30[0] = v10;
  v30[1] = v11;
  v12 = a2[2];
  v13 = a2[3];
  v31[0] = v12;
  v31[1] = v13;
  v32 = *((_DWORD *)a2 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v14 >= v11)
        v14 %= v11;
    }
    else
    {
      v14 &= v11 - 1;
    }
    *(_QWORD *)(v10 + 8 * v14) = v31;
    a2[2] = 0;
    a2[3] = 0;
  }
  v15 = a2[8];
  v17 = a2[5];
  v16 = a2[6];
  v18 = a2[7];
  a2[6] = 0;
  a2[7] = 0;
  v33 = v17;
  v34 = v16;
  v35 = v18;
  v36 = v15;
  v37 = a2[9];
  v38 = *((_DWORD *)a2 + 20);
  if (v37)
  {
    v19 = *(_QWORD *)(v15 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v19 >= v18)
        v19 %= v18;
    }
    else
    {
      v19 &= v18 - 1;
    }
    *(_QWORD *)(v16 + 8 * v19) = &v36;
    a2[8] = 0;
    a2[9] = 0;
  }
  v39 = *(_OWORD *)(a2 + 11);
  v40 = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  v41 = *((_OWORD *)a2 + 7);
  a2[13] = 0;
  a2[14] = 0;
  v21 = a2[16];
  v20 = a2[17];
  a2[15] = 0;
  a2[16] = 0;
  v42 = v21;
  v43 = v20;
  v22 = a2[18];
  a2[17] = 0;
  a2[18] = 0;
  v24 = a2[19];
  v23 = a2[20];
  v25 = a2 + 19;
  v44 = v22;
  v45[0] = v24;
  v45[1] = v23;
  v46 = *((_DWORD *)v25 + 4);
  if (v23)
  {
    v26 = *(_QWORD *)(v24 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v26 >= v22)
        v26 %= v22;
    }
    else
    {
      v26 &= v22 - 1;
    }
    *(_QWORD *)(v20 + 8 * v26) = v45;
    *v25 = 0;
    v25[1] = 0;
  }
  *v6 = &off_250AE2B00;
  v6[1] = 0;
  sub_239670F98((uint64_t)(v6 + 2), (uint64_t)v30);
  v7[24] = v9;
  v7[25] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    *a3 = v7;
    sub_23966FBB4((uint64_t)v30);
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = v7;
    sub_23966FBB4((uint64_t)v30);
  }
}

void sub_2396690D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_239650518(v9);
  sub_23966FBB4((uint64_t)&a9);
  sub_239416DA0(v10 - 80);
  MEMORY[0x23B83E31C](v9, 0x10E1C40C03DF36ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_23966910C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xC8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_250AE2FC8;
  result = sub_239650174((uint64_t)(v6 + 3), a1, a2);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

void sub_239669164(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void **sub_23966917C(void **a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8))
        {
          v5 = *(v3 - 4);
          if ((_DWORD)v5 != -1)
            ((void (*)(char *, _DWORD *))off_250AE2B60[v5])(&v7, v3 - 34);
          *(v3 - 4) = -1;
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239669224(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v3 + 176))
    {
      v4 = *((unsigned int *)v3 + 42);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, _QWORD *))off_250AE2B60[v4])(&v7, v3 + 6);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_2396692B8(void *lpsrc@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  const char *last_error_message;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  _QWORD *v35;
  _BYTE *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 *v45;
  __int128 *v46;
  void *v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  void *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::string v57;
  char v58;
  void *v59[2];
  std::string::size_type v60;
  std::string v61;
  std::__shared_weak_count *v62;
  void *v63;
  __int128 *v64;
  void *v65;
  __int128 *v66;
  void *v67[2];
  std::string::size_type v68;
  std::__shared_weak_count *v69;
  void *__p;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;

  v5 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_250AE23C0, (const struct __class_type_info *)&unk_250AE22D0, 0);
  if (!v5)
    goto LABEL_114;
  v6 = v5;
  v7 = (const void *)a2[1];
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_250AE23C0, (const struct __class_type_info *)&unk_250AE22D0, 0);
  if (!v8)
LABEL_114:
    __cxa_bad_cast();
  v9 = v8[31];
  if ((v9 & 0x80u) == 0)
    v10 = v8[31];
  else
    v10 = *((_QWORD *)v8 + 2);
  v11 = v6[31];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 2);
  if (v10 != v11)
    goto LABEL_19;
  v13 = (const void **)(v8 + 8);
  if (v12 >= 0)
    v14 = v6 + 8;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)v8 + 2)))
      goto LABEL_19;
  }
  else if (v8[31])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_46;
    }
LABEL_19:
    sub_23949021C((uint64_t)&__p, (uint64_t *)(a2[24] + 8));
    if (v76)
    {
      v15 = v74;
      v16 = v75;
      if (v74 != v75)
      {
        v17 = v6[31];
        if ((v17 & 0x80u) == 0)
          v18 = v6[31];
        else
          v18 = *((_QWORD *)v6 + 2);
        if ((v17 & 0x80u) == 0)
          v19 = v6 + 8;
        else
          v19 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        while (1)
        {
          v20 = *(unsigned __int8 *)(v15 + 23);
          if ((v20 & 0x80u) == 0)
            v21 = *(unsigned __int8 *)(v15 + 23);
          else
            v21 = *(_QWORD *)(v15 + 8);
          if (v21 == v18)
          {
            if ((v20 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v15, v19, *(_QWORD *)(v15 + 8)))
                break;
            }
            else
            {
              if (!*(_BYTE *)(v15 + 23))
                break;
              v22 = 0;
              while (*(unsigned __int8 *)(v15 + v22) == v19[v22])
              {
                if (v20 == ++v22)
                  goto LABEL_38;
              }
            }
          }
          v15 += 24;
          if (v15 == v16)
            goto LABEL_57;
        }
      }
LABEL_38:
      if (v15 != v16)
      {
        v23 = sub_2396771F0(a2 + 2, (uint64_t)(v6 + 8));
        if (!v23)
          sub_23941D898("unordered_map::at: key not found");
        if (!v23[5])
        {
          sub_239A444D4((uint64_t)"unknown file", 287, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        sub_2396677E4(&__p, (uint64_t)v67);
        v24 = (char)v67[1];
        if (LOBYTE(v67[1]))
        {
          *(_QWORD *)a3 = &off_250ADC870;
          *(_BYTE *)(a3 + 8) = v24;
          v25 = v69;
          *(_QWORD *)(a3 + 16) = v68;
          *(_QWORD *)(a3 + 24) = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(p_shared_owners);
            while (__stxr(v27 + 1, p_shared_owners));
          }
LABEL_102:
          v67[0] = &off_250ADC870;
          v53 = v69;
          if (v69)
          {
            v54 = (unint64_t *)&v69->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          nullsub_4(v67);
          goto LABEL_108;
        }
        sub_239669BFC(a2);
        sub_2396682B8((char **)&v65, (v73 - v72) >> 5);
        sub_2396682B8((char **)&v63, (v73 - v72) >> 5);
        sub_2396683F0((uint64_t)&__p, 1, (uint64_t *)&v65, &v63, (uint64_t)&v61);
        if (v61.__r_.__value_.__s.__data_[8])
        {
          v57.__r_.__value_.__s.__data_[0] = 5;
          std::operator+<char>();
          sub_23957E1BC(a3, &v57, (uint64_t)v59);
LABEL_50:
          if ((SHIBYTE(v60) & 0x80000000) == 0)
            goto LABEL_77;
          v28 = v59[0];
LABEL_76:
          operator delete(v28);
LABEL_77:
          v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADC870;
          v42 = v62;
          if (v62)
          {
            v43 = (unint64_t *)&v62->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          nullsub_4(&v61);
          v45 = (__int128 *)v63;
          if (v63)
          {
            v46 = v64;
            v47 = v63;
            if (v64 != v63)
            {
              do
              {
                if (*((_BYTE *)v46 - 8))
                {
                  v48 = *((unsigned int *)v46 - 4);
                  if ((_DWORD)v48 != -1)
                    ((void (*)(std::string *, char *))off_250AE2B60[v48])(&v61, (char *)v46 - 136);
                  *((_DWORD *)v46 - 4) = -1;
                }
                v46 -= 10;
              }
              while (v46 != v45);
              v47 = v63;
            }
            v64 = v45;
            operator delete(v47);
          }
          v49 = (__int128 *)v65;
          if (v65)
          {
            v50 = v66;
            v51 = v65;
            if (v66 != v65)
            {
              do
              {
                if (*((_BYTE *)v50 - 8))
                {
                  v52 = *((unsigned int *)v50 - 4);
                  if ((_DWORD)v52 != -1)
                    ((void (*)(std::string *, char *))off_250AE2B60[v52])(&v61, (char *)v50 - 136);
                  *((_DWORD *)v50 - 4) = -1;
                }
                v50 -= 10;
              }
              while (v50 != v49);
              v51 = v65;
            }
            v66 = v49;
            operator delete(v51);
          }
          goto LABEL_102;
        }
        if (!e5rt_execution_stream_operation_prepare_op_for_encode())
        {
          if (a2 + 13 != &v65)
            sub_239677E1C(a2 + 13, (__int128 *)v65, v66, 0xCCCCCCCCCCCCCCCDLL * (((char *)v66 - (_BYTE *)v65) >> 5));
          if (a2 + 16 != &v63)
            sub_239677E1C(a2 + 16, (__int128 *)v63, v64, 0xCCCCCCCCCCCCCCCDLL * (((char *)v64 - (_BYTE *)v63) >> 5));
          v35 = (_QWORD *)operator new();
          *v35 = off_250AE2258;
          v36 = v35 + 1;
          if ((char)v6[31] < 0)
          {
            sub_23941A7F8(v36, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
          }
          else
          {
            v37 = *(_OWORD *)(v6 + 8);
            v35[3] = *((_QWORD *)v6 + 3);
            *(_OWORD *)v36 = v37;
          }
          v56 = a2[1];
          a2[1] = v35;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          v57.__r_.__value_.__s.__data_[0] = 0;
          HIBYTE(v60) = 0;
          LOBYTE(v59[0]) = 0;
          sub_23957E1BC(a3, &v57, (uint64_t)v59);
          goto LABEL_50;
        }
        v58 = 6;
        last_error_message = (const char *)e5rt_get_last_error_message();
        v30 = strlen(last_error_message);
        if (v30 >= 0x7FFFFFFFFFFFFFF8)
          sub_23941A5AC();
        v31 = v30;
        if (v30 >= 0x17)
        {
          v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v38 = v30 | 7;
          v39 = v38 + 1;
          v32 = (std::string *)operator new(v38 + 1);
          v57.__r_.__value_.__l.__size_ = v31;
          v57.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
          v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        }
        else
        {
          *((_BYTE *)&v57.__r_.__value_.__s + 23) = v30;
          v32 = &v57;
          if (!v30)
            goto LABEL_72;
        }
        memmove(v32, last_error_message, v31);
LABEL_72:
        v32->__r_.__value_.__s.__data_[v31] = 0;
        v40 = std::string::insert(&v57, 0, " Unable to load this espresso function for execution: ");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v60 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)v59 = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        sub_23957E1BC(a3, &v58, (uint64_t)v59);
        if (SHIBYTE(v60) < 0)
          operator delete(v59[0]);
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_77;
        v28 = (void *)v57.__r_.__value_.__r.__words[0];
        goto LABEL_76;
      }
    }
LABEL_57:
    LOBYTE(v65) = 3;
    std::operator+<char>();
    v33 = std::string::append(&v61, "'.");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v68 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)v67 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    sub_23957E1BC(a3, &v65, (uint64_t)v67);
    if (SHIBYTE(v68) < 0)
    {
      operator delete(v67[0]);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_61:
        operator delete(v61.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_61;
    }
LABEL_108:
    sub_239496C54((uint64_t)&__p);
    return;
  }
LABEL_46:
  LOBYTE(v67[0]) = 0;
  __p = operator new(0x38uLL);
  v71 = xmmword_239EC9F80;
  strcpy((char *)__p, "The model is already running in this configuration.");
  sub_23957E1BC(a3, v67, (uint64_t)&__p);
  if (SHIBYTE(v71) < 0)
    operator delete(__p);
}

void sub_2396699DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  __n128 v51;

  v51 = nullsub_4(v49);
  MEMORY[0x23B83E31C](v51);
  sub_23948FC6C(&a23);
  sub_23966917C(&a30);
  sub_23966917C(&a33);
  sub_23948FC6C(&a36);
  sub_239496C54((uint64_t)&a44);
  _Unwind_Resume(a1);
}

_QWORD *sub_239669B0C(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_250AE2258;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_239669B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239669B84(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_23966FAA0((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_239669BF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

void sub_239669BFC(_QWORD *a1)
{
  uint64_t *i;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *k;
  uint64_t *m;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  for (i = (uint64_t *)a1[10]; i; i = (uint64_t *)*i)
  {
    if (i[4])
      e5rt_tensor_desc_release();
    if (i[5])
      e5rt_buffer_object_release();
    i[4] = 0;
    i[5] = 0;
    *((_DWORD *)i + 6) = 3;
    if (*((_BYTE *)i + 176))
    {
      v3 = *((unsigned int *)i + 42);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t *))off_250AE2B60[v3])(&v23, i + 6);
      *((_DWORD *)i + 42) = -1;
      *((_BYTE *)i + 176) = 0;
    }
  }
  if (a1[11])
  {
    v4 = (_QWORD *)a1[10];
    while (v4)
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
      if (*((_BYTE *)v5 + 176))
      {
        v6 = *((unsigned int *)v5 + 42);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, _QWORD *))off_250AE2B60[v6])(&v22, v5 + 6);
      }
      operator delete(v5);
    }
    a1[10] = 0;
    v7 = a1[9];
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(a1[8] + 8 * j) = 0;
    }
    a1[11] = 0;
  }
  for (k = (_QWORD *)a1[21]; k; k = (_QWORD *)*k)
  {
    for (m = (uint64_t *)k[12]; m; m = (uint64_t *)*m)
    {
      if (m[4])
        e5rt_tensor_desc_release();
      if (m[5])
        e5rt_buffer_object_release();
      m[4] = 0;
      m[5] = 0;
      *((_DWORD *)m + 6) = 3;
      if (*((_BYTE *)m + 176))
      {
        v11 = *((unsigned int *)m + 42);
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, uint64_t *))off_250AE2B60[v11])(&v24, m + 6);
        *((_DWORD *)m + 42) = -1;
        *((_BYTE *)m + 176) = 0;
      }
    }
  }
  v12 = a1[13];
  v13 = a1[14];
  v14 = a1[16];
  v15 = a1[17];
  if (v12 != v13 || v14 != v15)
  {
    v17 = 0;
    do
    {
      if (*(_DWORD *)(v12 + v17) != 2)
      {
        if (*(_QWORD *)(v14 + v17 + 8))
          e5rt_tensor_desc_release();
        if (*(_QWORD *)(v14 + v17 + 16))
          e5rt_buffer_object_release();
        *(_QWORD *)(v14 + v17 + 8) = 0;
        *(_QWORD *)(v14 + v17 + 16) = 0;
        v18 = v14 + v17;
        *(_DWORD *)(v14 + v17) = 3;
        if (*(_BYTE *)(v14 + v17 + 152))
        {
          v19 = *(unsigned int *)(v18 + 144);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, uint64_t))off_250AE2B60[v19])(&v25, v18 + 24);
          *(_DWORD *)(v18 + 144) = -1;
          *(_BYTE *)(v18 + 152) = 0;
        }
      }
      if (*(_QWORD *)(v12 + v17 + 8))
        e5rt_tensor_desc_release();
      if (*(_QWORD *)(v12 + v17 + 16))
        e5rt_buffer_object_release();
      *(_QWORD *)(v12 + v17 + 8) = 0;
      *(_QWORD *)(v12 + v17 + 16) = 0;
      v20 = v12 + v17;
      *(_DWORD *)(v12 + v17) = 3;
      if (*(_BYTE *)(v12 + v17 + 152))
      {
        v21 = *(unsigned int *)(v20 + 144);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))off_250AE2B60[v21])(&v26, v20 + 24);
        *(_DWORD *)(v20 + 144) = -1;
        *(_BYTE *)(v20 + 152) = 0;
      }
      v17 += 160;
    }
    while (v17 + v12 != v13 || v17 + v14 != v15);
  }
}

uint64_t sub_239669EF8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_239669F08(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  const char *last_error_message;
  size_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p;
  std::string::size_type v26;
  int64_t v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  std::string v31;

  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_12;
  }
  v4 = (const char *)MEMORY[0x23B83E76C](a2);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = std::string::insert(&__dst, 0, "Status code: ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v29, ". ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
LABEL_12:
  v14 = std::string::append(&v30, "Last Error: ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  v17 = strlen(last_error_message);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    v26 = v18;
    v27 = v21 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v27) = v17;
  p_p = &__p;
  if (v17)
LABEL_19:
    memmove(p_p, last_error_message, v18);
  *((_BYTE *)p_p + v18) = 0;
  if (v27 >= 0)
    v22 = (const std::string::value_type *)&__p;
  else
    v22 = (const std::string::value_type *)__p;
  if (v27 >= 0)
    v23 = HIBYTE(v27);
  else
    v23 = v26;
  v24 = std::string::append(&v31, v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v3)
      return;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_34:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
}

void sub_23966A190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23966A238(_QWORD *a1)
{
  _QWORD *i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_250AE2B00;
  for (i = (_QWORD *)a1[4]; i; i = (_QWORD *)*i)
  {
    if (i[5])
      e5rt_execution_stream_operation_release();
  }
  if (a1[7])
    e5rt_execution_stream_release();
  sub_239669BFC(a1);
  v3 = (std::__shared_weak_count *)a1[25];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_23966FBB4((uint64_t)(a1 + 2));
  return sub_239650518(a1);
}

void sub_23966A2FC(_QWORD *a1)
{
  sub_23966A238(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23966A320(uint64_t a1)
{
  const void *v2;
  void *v3;
  uint64_t *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2)
    sub_239EC14C8();
  v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_250AE23C0, (const struct __class_type_info *)&unk_250AE22D0, 0);
  if (!v3)
    __cxa_bad_cast();
  v4 = sub_2396771F0((_QWORD *)(a1 + 16), (uint64_t)v3 + 8);
  if (!v4)
    sub_23941D898("unordered_map::at: key not found");
  return v4[5];
}

void sub_23966A38C(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  void *__p;
  __int128 v18;
  std::__shared_weak_count *v19;
  char v20;

  if (!a1[22])
  {
    sub_23966AF10((uint64_t)a1, a2, (uint64_t)&__p);
    v5 = v18;
    if ((_BYTE)v18)
    {
      *(_QWORD *)a3 = &off_250ADC870;
      *(_BYTE *)(a3 + 8) = v5;
      v6 = v19;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)&v18 + 1);
      *(_QWORD *)(a3 + 24) = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      __p = &off_250ADC870;
      v10 = v19;
      if (!v19)
        goto LABEL_21;
    }
    else
    {
      v9 = sub_23966A320((uint64_t)a1);
      __p = &off_250ADC870;
      v10 = v19;
      if (!v19)
        goto LABEL_21;
    }
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      nullsub_4(&__p);
      if (v5)
        return;
LABEL_24:
      if (v9 && e5rt_execution_stream_encode_operation())
      {
        __p = operator new(0x30uLL);
        v18 = xmmword_239EC9F90;
        strcpy((char *)__p, "Execution stream encode workload failed.");
        v16 = 6;
        sub_23957E1BC(a3, &v16, (uint64_t)&__p);
LABEL_29:
        *(_BYTE *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 56) = 0;
        if (SHIBYTE(v18) < 0)
          operator delete(__p);
        return;
      }
LABEL_3:
      if (e5rt_execution_stream_execute_sync())
      {
        __p = operator new(0x28uLL);
        v18 = xmmword_239EC9FA0;
        strcpy((char *)__p, "Execution stream execute failed.");
        v16 = 6;
        sub_23957E1BC(a3, &v16, (uint64_t)&__p);
      }
      else if (a1[22] || !e5rt_execution_stream_reset())
      {
        v16 = 0;
        HIBYTE(v18) = 0;
        LOBYTE(__p) = 0;
        sub_23957E1BC(a3, &v16, (uint64_t)&__p);
      }
      else
      {
        __p = operator new(0x20uLL);
        v18 = xmmword_239EC9FB0;
        strcpy((char *)__p, "Execution stream reset failed.");
        v16 = 6;
        sub_23957E1BC(a3, &v16, (uint64_t)&__p);
      }
      goto LABEL_29;
    }
LABEL_21:
    nullsub_4(&__p);
    if (v5)
      return;
    goto LABEL_24;
  }
  sub_23966A6C4(a1, a2, (uint64_t)&__p);
  if (v20)
    goto LABEL_3;
  *(_QWORD *)a3 = &off_250ADC870;
  *(_BYTE *)(a3 + 8) = v18;
  v11 = v19;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v18 + 1);
  *(_QWORD *)(a3 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  (*(void (**)(void **))__p)(&__p);
}

void sub_23966A688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23966A6C4(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v4;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  int **v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __n128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  __n128 v70;
  uint64_t *v71;
  _QWORD *v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  _QWORD v78[2];
  std::__shared_weak_count *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  char v85;
  void *__p;
  __int128 v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  _QWORD v93[2];
  std::__shared_weak_count *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  __int16 v99;
  char v100;

  v4 = (const void *)a1[1];
  if (!v4)
    sub_239EC14F8();
  v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_250AE23C0, (const struct __class_type_info *)&unk_250AE22D0, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = sub_239678720(a1 + 19, (uint64_t)v7 + 8);
  if (!v8)
    sub_23941D898("unordered_map::at: key not found");
  v9 = v8;
  v10 = v8 + 5;
  v11 = (_QWORD *)v8[15];
  sub_23966EBC0(a2);
  v12 = sub_23967894C(v10, (uint64_t)&v89);
  v13 = v12;
  if (SBYTE7(v90) < 0)
  {
    operator delete((void *)v89);
    v72 = v9 + 10;
    if (v13)
      goto LABEL_6;
  }
  else
  {
    v72 = v9 + 10;
    if (v12)
    {
LABEL_6:
      v71 = v13;
      v14 = a2[1];
      v15 = (v14 - *a2) >> 7;
      if (v15 == 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1[24] + 56) - *(_QWORD *)(a1[24] + 48)) >> 3))
      {
        if (v14 == *a2)
          goto LABEL_78;
        v16 = 0;
LABEL_11:
        sub_239647D60(*a2 + (v16 << 7), (uint64_t)&v89);
        if (sub_239659DD8((uint64_t)&v89) || !sub_239659DEC((uint64_t)&v89))
          goto LABEL_59;
        v17 = (int8x8_t)v9[11];
        if (!*(_QWORD *)&v17)
          goto LABEL_116;
        v18 = (uint8x8_t)vcnt_s8(v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          v19 = v16;
          if (v16 >= *(_QWORD *)&v17)
            v19 = v16 % *(_QWORD *)&v17;
        }
        else
        {
          v19 = (*(_QWORD *)&v17 - 1) & v16;
        }
        v20 = *(int ***)(*v72 + 8 * v19);
        if (!v20 || (v21 = *v20) == 0)
        {
LABEL_116:
          sub_239A444D4((uint64_t)"unknown file", 1243, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (v18.u32[0] < 2uLL)
        {
          v22 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v24 = *((_QWORD *)v21 + 1);
            if (v24 == v16)
            {
              if (*((_QWORD *)v21 + 2) == v16)
                goto LABEL_33;
            }
            else if ((v24 & v22) != v19)
            {
              goto LABEL_116;
            }
            v21 = *(int **)v21;
            if (!v21)
              goto LABEL_116;
          }
        }
        while (1)
        {
          v23 = *((_QWORD *)v21 + 1);
          if (v23 == v16)
          {
            if (*((_QWORD *)v21 + 2) == v16)
            {
LABEL_33:
              v74 = v89;
              v75 = v90;
              v76 = v91;
              v77 = v92;
              LOBYTE(v78[0]) = 0;
              v85 = 0;
              if (v100)
              {
                v78[0] = &off_250ADB210;
                v25 = v93[1];
                v26 = v94;
                if (v94)
                {
                  p_shared_owners = (unint64_t *)&v94->__shared_owners_;
                  do
                    v28 = __ldxr(p_shared_owners);
                  while (__stxr(v28 + 1, p_shared_owners));
                  v29 = v97;
                  v30 = v98;
                  v31 = v99;
                  do
                    v32 = __ldxr(p_shared_owners);
                  while (__stxr(v32 + 1, p_shared_owners));
                }
                else
                {
                  v29 = v97;
                  v30 = v98;
                  v31 = v99;
                }
                v78[1] = v25;
                v79 = v26;
                v80 = v95;
                v81 = v96;
                v82 = v29;
                v83 = v30;
                v84 = v31;
                if (v26)
                {
                  v33 = (unint64_t *)&v26->__shared_owners_;
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                }
                v85 = 1;
              }
              sub_239672750((uint64_t)&__p, (uint64_t)&v74, v21 + 6);
              __p = &off_250ADC870;
              v35 = v88;
              if (v88)
              {
                v36 = (unint64_t *)&v88->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              nullsub_4(&__p);
              if (v85)
              {
                v38 = nullsub_4(&v80);
                v39 = v79;
                if (v79)
                {
                  v40 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v38);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                nullsub_4(v78);
              }
LABEL_59:
              if (v100)
              {
                v42 = nullsub_4(&v95);
                v43 = v94;
                if (v94)
                {
                  v44 = (unint64_t *)&v94->__shared_owners_;
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 - 1, v44));
                  if (!v45)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v42);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                nullsub_4(v93);
              }
              if (++v16 != v15)
                goto LABEL_11;
LABEL_78:
              v46 = v71[5];
LABEL_79:
              *(_QWORD *)a3 = v46;
              *(_BYTE *)(a3 + 32) = 1;
              return;
            }
          }
          else
          {
            if (v23 >= *(_QWORD *)&v17)
              v23 %= *(_QWORD *)&v17;
            if (v23 != v19)
              goto LABEL_116;
          }
          v21 = *(int **)v21;
          if (!v21)
            goto LABEL_116;
        }
      }
      v73 = 6;
      __p = operator new(0x30uLL);
      v87 = xmmword_239EC9FC0;
      strcpy((char *)__p, "Input size provided is different from config.");
      sub_23957E1BC((uint64_t)&v74, &v73, (uint64_t)&__p);
      v47 = BYTE8(v74);
      BYTE8(v89) = BYTE8(v74);
      v48 = v75;
      v90 = v75;
      if (*((_QWORD *)&v75 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        *(_QWORD *)a3 = &off_250ADC870;
        *(_BYTE *)(a3 + 8) = v47;
        *(_OWORD *)(a3 + 16) = v48;
        do
          v51 = __ldxr(v49);
        while (__stxr(v51 + 1, v49));
        *(_BYTE *)(a3 + 32) = 0;
        *(_QWORD *)&v89 = &off_250ADC870;
        do
          v52 = __ldaxr(v49);
        while (__stlxr(v52 - 1, v49));
        if (!v52)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
        }
      }
      else
      {
        *(_QWORD *)a3 = &off_250ADC870;
        *(_BYTE *)(a3 + 8) = v47;
        *(_QWORD *)(a3 + 16) = v48;
        *(_QWORD *)(a3 + 24) = 0;
        *(_BYTE *)(a3 + 32) = 0;
        *(_QWORD *)&v89 = &off_250ADC870;
      }
      v59 = nullsub_4(&v89);
      *(_QWORD *)&v74 = &off_250ADC870;
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (!*((_QWORD *)&v75 + 1))
        goto LABEL_108;
      v61 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      goto LABEL_107;
    }
  }
  if (v9[8] >= (unint64_t)v9[17])
  {
    v73 = 7;
    __p = operator new(0x28uLL);
    v87 = xmmword_239EC9FA0;
    strcpy((char *)__p, "Prewire pool limit size reached.");
    sub_23957E1BC((uint64_t)&v74, &v73, (uint64_t)&__p);
    v53 = BYTE8(v74);
    BYTE8(v89) = BYTE8(v74);
    v54 = v75;
    v90 = v75;
    if (*((_QWORD *)&v75 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      *(_QWORD *)a3 = &off_250ADC870;
      *(_BYTE *)(a3 + 8) = v53;
      *(_OWORD *)(a3 + 16) = v54;
      do
        v57 = __ldxr(v55);
      while (__stxr(v57 + 1, v55));
      *(_BYTE *)(a3 + 32) = 0;
      *(_QWORD *)&v89 = &off_250ADC870;
      do
        v58 = __ldaxr(v55);
      while (__stlxr(v58 - 1, v55));
      if (!v58)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
      }
    }
    else
    {
      *(_QWORD *)a3 = &off_250ADC870;
      *(_BYTE *)(a3 + 8) = v53;
      *(_QWORD *)(a3 + 16) = v54;
      *(_QWORD *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_QWORD *)&v89 = &off_250ADC870;
    }
    v59 = nullsub_4(&v89);
    *(_QWORD *)&v74 = &off_250ADC870;
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (!*((_QWORD *)&v75 + 1))
      goto LABEL_108;
    v69 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v62 = __ldaxr(v69);
    while (__stlxr(v62 - 1, v69));
LABEL_107:
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, v59);
      std::__shared_weak_count::__release_weak(v60);
      nullsub_4(&v74);
      if ((SHIBYTE(v87) & 0x80000000) == 0)
        return;
LABEL_109:
      operator delete(__p);
      return;
    }
LABEL_108:
    nullsub_4(&v74);
    if ((SHIBYTE(v87) & 0x80000000) == 0)
      return;
    goto LABEL_109;
  }
  sub_23966DD44(a1, a2, v72, (uint64_t)v10, v11, (uint64_t)&v89);
  if ((_BYTE)v91)
  {
    v46 = v89;
    goto LABEL_79;
  }
  v63 = BYTE8(v89);
  BYTE8(v74) = BYTE8(v89);
  v64 = v90;
  v75 = v90;
  if (*((_QWORD *)&v90 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v63;
    *(_OWORD *)(a3 + 16) = v64;
    do
      v67 = __ldxr(v65);
    while (__stxr(v67 + 1, v65));
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)&v74 = &off_250ADC870;
    do
      v68 = __ldaxr(v65);
    while (__stlxr(v68 - 1, v65));
    if (!v68)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v64 + 1) + 16))(*((_QWORD *)&v64 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64 + 1));
    }
  }
  else
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v63;
    *(_QWORD *)(a3 + 16) = v64;
    *(_QWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)&v74 = &off_250ADC870;
  }
  v70 = nullsub_4(&v74);
  if (!(_BYTE)v91)
    (*(void (**)(__int128 *, __n128))v89)(&v89, v70);
}

void sub_23966AEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23966AF10(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  __n128 v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __n128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __n128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _OWORD v65[3];
  int v66;
  _QWORD v67[2];
  std::__shared_weak_count *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  __int16 v73;
  char v74;
  std::string v75;
  std::string v76;
  char v77;
  void *__p[2];
  _BYTE v79[20];
  int v80;
  int v81;
  __int128 v82;
  _BYTE v83[32];
  int v84;
  _QWORD v85[2];
  std::__shared_weak_count *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  __int16 v91;
  char v92;
  unint64_t v93;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 192) + 48);
  if (v4)
  {
    v7 = 0;
    v8 = 0xCF3CF3CF3CF3CF3DLL * (v4 >> 3);
    v64 = (_QWORD *)(a1 + 64);
    do
    {
      v93 = v7;
      sub_239647D60(*a2 + (v7 << 7), (uint64_t)&v82);
      LODWORD(__p[0]) = v84;
      if (!sub_23964FB60(__p))
      {
        v63 = 1143;
LABEL_91:
        sub_239A444D4((uint64_t)"unknown file", v63, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      *(_OWORD *)&v79[4] = *(_OWORD *)&v83[4];
      v80 = *(_DWORD *)&v83[20];
      *(_OWORD *)__p = v82;
      *(_DWORD *)v79 = *(_DWORD *)v83;
      v81 = v84;
      if (!sub_239644B30(__p) || !sub_239644BD8(__p, 16))
      {
        v63 = 1144;
        goto LABEL_91;
      }
      LODWORD(__p[0]) = v84;
      v9 = sub_23964FC24((int *)__p);
      if (!v10)
      {
        v77 = 3;
        sub_23964A648(&v93, &v75);
        v26 = std::string::insert(&v75, 0, "Invalid input: The given view for input ");
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v76, " requires both a color format and type definition in its format flags.");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        *(_QWORD *)v79 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_23957E1BC(a3, &v77, (uint64_t)__p);
        if ((v79[7] & 0x80000000) != 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_36;
LABEL_25:
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
LABEL_37:
            operator delete(v75.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_25;
LABEL_36:
          operator delete(v76.__r_.__value_.__l.__data_);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_37;
        }
LABEL_68:
        v55 = 0;
        if (v92)
          goto LABEL_75;
        goto LABEL_81;
      }
      v11 = v9;
      *(_QWORD *)a3 = &off_250ADC870;
      *(_BYTE *)(a3 + 8) = 0;
      v12 = (_BYTE *)operator new();
      v12[23] = 0;
      *v12 = 0;
      *(_QWORD *)(a3 + 16) = v12;
      v13 = (_QWORD *)operator new();
      *v13 = &unk_250ADEA78;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v12;
      *(_QWORD *)(a3 + 24) = v13;
      v14 = sub_239659DD8((uint64_t)&v82);
      if ((unint64_t)(v11 - 1) < 2 && v14)
      {
        sub_23966BEF8((uint64_t)__p, a1, (uint64_t)&v82, v93);
        *(_BYTE *)(a3 + 8) = __p[1];
        v17 = *(_QWORD *)v79;
        v16 = *(_QWORD *)&v79[8];
        if (*(_QWORD *)&v79[8])
        {
          v18 = (unint64_t *)(*(_QWORD *)&v79[8] + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(std::__shared_weak_count **)(a3 + 24);
        *(_QWORD *)(a3 + 16) = v17;
        *(_QWORD *)(a3 + 24) = v16;
        if (!v20)
          goto LABEL_18;
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          __p[0] = &off_250ADC870;
          v23 = *(std::__shared_weak_count **)&v79[8];
          if (*(_QWORD *)&v79[8])
          {
LABEL_19:
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        else
        {
LABEL_18:
          __p[0] = &off_250ADC870;
          v23 = *(std::__shared_weak_count **)&v79[8];
          if (*(_QWORD *)&v79[8])
            goto LABEL_19;
        }
        v38 = nullsub_4(__p);
        goto LABEL_67;
      }
      if (!sub_239659DEC((uint64_t)&v82))
      {
        sub_239A444D4((uint64_t)"unknown file", 1161, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v65[0] = v82;
      v65[1] = *(_OWORD *)v83;
      v65[2] = *(_OWORD *)&v83[16];
      v66 = v84;
      LOBYTE(v67[0]) = 0;
      v74 = 0;
      if (v92)
      {
        v67[0] = &off_250ADB210;
        v30 = v85[1];
        v31 = v86;
        if (v86)
        {
          v32 = (unint64_t *)&v86->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v34 = v89;
          v35 = v90;
          v36 = v91;
          do
            v37 = __ldxr(v32);
          while (__stxr(v37 + 1, v32));
        }
        else
        {
          v34 = v89;
          v35 = v90;
          v36 = v91;
        }
        v67[1] = v30;
        v68 = v31;
        v69 = v87;
        v70 = v88;
        v71 = v34;
        v72 = v35;
        v73 = v36;
        if (v31)
        {
          v39 = (unint64_t *)&v31->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v74 = 1;
      }
      sub_23966C908((uint64_t)__p, a1, v64, (uint64_t)v65, v93);
      *(_BYTE *)(a3 + 8) = __p[1];
      v42 = *(_QWORD *)v79;
      v41 = *(_QWORD *)&v79[8];
      if (*(_QWORD *)&v79[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&v79[8] + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = *(std::__shared_weak_count **)(a3 + 24);
      *(_QWORD *)(a3 + 16) = v42;
      *(_QWORD *)(a3 + 24) = v41;
      if (!v45)
        goto LABEL_54;
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        __p[0] = &off_250ADC870;
        v48 = *(std::__shared_weak_count **)&v79[8];
        if (*(_QWORD *)&v79[8])
        {
LABEL_55:
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      else
      {
LABEL_54:
        __p[0] = &off_250ADC870;
        v48 = *(std::__shared_weak_count **)&v79[8];
        if (*(_QWORD *)&v79[8])
          goto LABEL_55;
      }
      v38 = nullsub_4(__p);
      if (v74)
      {
        v51 = nullsub_4(&v69);
        v52 = v68;
        if (v68)
        {
          v53 = (unint64_t *)&v68->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v52->__on_zero_shared)(v52, v51);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v38 = nullsub_4(v67);
      }
LABEL_67:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_68;
      *(_QWORD *)a3 = &off_250ADC870;
      v56 = *(std::__shared_weak_count **)(a3 + 24);
      if (!v56)
        goto LABEL_74;
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v56->__on_zero_shared)(v56, v38);
        std::__shared_weak_count::__release_weak(v56);
        nullsub_4(a3);
        v55 = 1;
        if (v92)
        {
LABEL_75:
          v59 = nullsub_4(&v87);
          v60 = v86;
          if (v86)
          {
            v61 = (unint64_t *)&v86->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, v59);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          nullsub_4(v85);
        }
      }
      else
      {
LABEL_74:
        nullsub_4(a3);
        v55 = 1;
        if (v92)
          goto LABEL_75;
      }
LABEL_81:
      if ((v55 & 1) == 0)
        return;
      ++v7;
    }
    while (v7 != v8);
  }
  LOBYTE(__p[0]) = 0;
  v83[7] = 0;
  LOBYTE(v82) = 0;
  sub_23957E1BC(a3, __p, (uint64_t)&v82);
  if ((v83[7] & 0x80000000) != 0)
    operator delete((void *)v82);
}

void sub_23966B600(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  _Unwind_Resume(exception_object);
}

void sub_23966B61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  _QWORD *v48;
  uint64_t v49;

  sub_23948FC6C(v48);
  sub_23948FBF0(v49 - 216);
  _Unwind_Resume(a1);
}

void sub_23966B75C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23948FBF0(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_23966B770(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23948FBF0(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_23966B784(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23948FBF0(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_23966B798(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23948FBF0(v1 - 216);
  _Unwind_Resume(a1);
}

uint64_t sub_23966B7AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *i;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __n128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v42;
  char v43;
  char v44;
  uint64_t (**v45)();
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  char v49[8];
  char v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  unint64_t v57;
  _BYTE __p[32];
  __int128 v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  _OWORD v63[2];
  char v64;

  sub_23966A38C(a1, a2, (uint64_t)v49);
  v5 = v50;
  if (v50)
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v5;
    v6 = v52;
    *(_QWORD *)(a3 + 16) = v51;
    *(_QWORD *)(a3 + 24) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if (v55)
    {
      *(_OWORD *)(a3 + 32) = v53;
      *(_QWORD *)(a3 + 48) = v54;
      v54 = 0;
      v53 = 0uLL;
      *(_BYTE *)(a3 + 56) = 1;
    }
    return sub_23948FF04((uint64_t)v49);
  }
  v9 = a1[13];
  v10 = a1[14];
  v11 = a1[16];
  v12 = a1[17];
  v13 = v9 == v10 && v11 == v12;
  if (v13)
  {
LABEL_20:
    LOBYTE(v56) = 0;
    __p[23] = 0;
    __p[0] = 0;
    sub_23957E1BC((uint64_t)&v45, &v56, (uint64_t)__p);
    goto LABEL_21;
  }
  v14 = v11 + 160;
  v15 = v9 + 160;
  while (1)
  {
    v16 = v14;
    v17 = *(_DWORD *)(v15 - 160);
    if (!v17)
      break;
    if (v17 == 1 && e5rt_tensor_utils_cast_from_fp16_to_fp32())
    {
      LOBYTE(v56) = 6;
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_239EC9F80;
      strcpy(*(char **)__p, "Unable to convert Float16 to Float32 output buffer.");
      sub_23957E1BC((uint64_t)&v45, &v56, (uint64_t)__p);
      goto LABEL_21;
    }
LABEL_17:
    v14 = v16 + 160;
    v18 = v15 + 160;
    v13 = v15 == v10;
    v15 += 160;
    if (v13)
    {
      v15 = v18;
      if (v16 == v12)
        goto LABEL_20;
    }
  }
  if (!e5rt_tensor_utils_dequantize_from_u8_to_fp32())
    goto LABEL_17;
  LOBYTE(v56) = 6;
  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_239EC9F60;
  strcpy(*(char **)__p, "Unable to convert Uint8 to Float32 output buffer.");
  sub_23957E1BC((uint64_t)&v45, &v56, (uint64_t)__p);
LABEL_21:
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v19 = v46;
    if (!v46)
      goto LABEL_28;
LABEL_23:
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v19;
    v20 = v48;
    *(_QWORD *)(a3 + 16) = v47;
    *(_QWORD *)(a3 + 24) = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
    v19 = v46;
    if (v46)
      goto LABEL_23;
LABEL_28:
    v44 = 0;
    v43 = 0;
    LOBYTE(v42) = 0;
    sub_23957E1BC(a3, &v44, (uint64_t)&v42);
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((a1[17] - a1[16]) >> 5);
    v57 = 0;
    v56 = 0uLL;
    sub_23965AFE4((char **)&v56, v23);
    v25 = (_DWORD *)a1[16];
    for (i = (_DWORD *)a1[17]; v25 != i; v25 += 40)
    {
      sub_23966F574(v25, v24, (uint64_t)__p);
      v27 = *((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1) >= v57)
      {
        v32 = sub_23965B338((char **)&v56, (uint64_t)__p);
      }
      else
      {
        v28 = *(_OWORD *)__p;
        v29 = *(_OWORD *)&__p[16];
        v30 = v59;
        *(_DWORD *)(*((_QWORD *)&v56 + 1) + 48) = v60;
        *(_OWORD *)(v27 + 16) = v29;
        *(_OWORD *)(v27 + 32) = v30;
        *(_OWORD *)v27 = v28;
        *(_BYTE *)(v27 + 56) = 0;
        *(_BYTE *)(v27 + 112) = 0;
        if (v64)
        {
          *(_QWORD *)(v27 + 56) = &off_250ADB210;
          *(_OWORD *)(v27 + 64) = v62;
          v62 = 0uLL;
          v31 = *(_OWORD *)((char *)v63 + 14);
          *(_OWORD *)(v27 + 80) = v63[0];
          *(_OWORD *)(v27 + 94) = v31;
          *(_BYTE *)(v27 + 112) = 1;
        }
        v32 = (char *)(v27 + 120);
      }
      *((_QWORD *)&v56 + 1) = v32;
      if (v64)
      {
        v33 = nullsub_4(v63);
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        if (*((_QWORD *)&v62 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v33);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        nullsub_4(&v61);
      }
    }
    v37 = v57;
    *(_OWORD *)(a3 + 32) = v56;
    *(_QWORD *)(a3 + 48) = v37;
    *(_BYTE *)(a3 + 56) = 1;
    if (v43 < 0)
      operator delete(v42);
  }
  v45 = &off_250ADC870;
  v38 = v48;
  if (v48)
  {
    v39 = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  nullsub_4(&v45);
  return sub_23948FF04((uint64_t)v49);
}

void sub_23966BBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a36 < 0)
  {
    operator delete(__p);
    sub_23948FF04((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_23948FF04((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_23966BC84@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  void *__p;
  char v19;
  char v20;
  _BYTE v21[8];
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  _BYTE v27[120];
  int v28;
  char v29;

  sub_23966A38C(a1, a2, (uint64_t)v21);
  v5 = v22;
  if (v22)
  {
    *(_QWORD *)a3 = &off_250ADC870;
    *(_BYTE *)(a3 + 8) = v5;
    v6 = v24;
    *(_QWORD *)(a3 + 16) = v23;
    *(_QWORD *)(a3 + 24) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    LOBYTE(__p) = 0;
    sub_23957E1BC(a3, &v20, (uint64_t)&__p);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[14] - a1[13]) >> 5);
    v26 = 0;
    v25 = 0uLL;
    sub_23965B584((char **)&v25, v9);
    v11 = a1[13];
    for (i = a1[14]; v11 != i; v11 += 160)
    {
      sub_2396655D0(v11, v10, (uint64_t)v27);
      v13 = *((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1) >= v26)
      {
        v15 = sub_23965B800((char **)&v25, (uint64_t)v27);
      }
      else
      {
        **((_BYTE **)&v25 + 1) = 0;
        *(_DWORD *)(v13 + 120) = -1;
        v14 = v28;
        if (v28 != -1)
        {
          ((void (*)(char *, uint64_t, _BYTE *))off_250AE2C90[v28])(&v29, v13, v27);
          *(_DWORD *)(v13 + 120) = v14;
        }
        v15 = (char *)(v13 + 128);
      }
      *((_QWORD *)&v25 + 1) = v15;
      if (v28 != -1)
        ((void (*)(char *, _BYTE *))off_250AE2B60[v28])(&v29, v27);
    }
    v16 = v26;
    *(_OWORD *)(a3 + 32) = v25;
    *(_QWORD *)(a3 + 48) = v16;
    *(_BYTE *)(a3 + 56) = 1;
    if (v19 < 0)
      operator delete(__p);
  }
  return sub_23948FF04((uint64_t)v21);
}

void sub_23966BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  _QWORD *v42;

  sub_239659CE4(&a24);
  sub_23948FC6C(v42);
  if (a14 < 0)
    operator delete(__p);
  sub_23948FF04((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_23966BEA8()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, (struct type_info *)&unk_250ADB2E0, MEMORY[0x24BEDAAC0]);
}

void sub_23966BEE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23966BEF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __n128 v31;
  __n128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 v55;
  __n128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _OWORD v83[3];
  int v84;
  _QWORD v85[2];
  std::__shared_weak_count *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  __int16 v91;
  char v92;
  _BYTE __p[48];
  char v94;
  char v95;
  CVPixelBufferRef pixelBuffer;
  std::__shared_weak_count *v97;
  _OWORD v98[3];
  int v99;
  _QWORD v100[2];
  std::__shared_weak_count *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  char v107;
  uint64_t *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  __CVBuffer *v114;
  std::__shared_weak_count *v115;
  _QWORD v116[3];
  _QWORD *v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)__p = *(_DWORD *)(a3 + 48);
  v9 = sub_23964FBB0(__p);
  sub_23964FC9C(v8 + 8, a4, (uint64_t)__p);
  v110 = *(_OWORD *)__p;
  v111 = *(_QWORD *)&__p[16];
  sub_23966A320(a2);
  v109 = 0;
  if (e5rt_execution_stream_operation_retain_input_port())
    v10 = 1;
  else
    v10 = v109 == 0;
  if (v10)
  {
    LOBYTE(v116[0]) = 5;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_239EC9FE0;
    strcpy(*(char **)__p, "Unable to retain input port.");
    sub_23957E1BC(a1, v116, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_122;
  }
  v116[0] = &off_250AE3018;
  v116[1] = MEMORY[0x24BE2F8E8];
  v116[2] = &v109;
  v117 = v116;
  v108 = &v109;
  if (v9 == 2)
  {
    v20 = *(_OWORD *)(a3 + 16);
    v83[0] = *(_OWORD *)a3;
    v83[1] = v20;
    v83[2] = *(_OWORD *)(a3 + 32);
    v84 = *(_DWORD *)(a3 + 48);
    LOBYTE(v85[0]) = 0;
    v92 = 0;
    if (*(_BYTE *)(a3 + 112))
    {
      v85[0] = &off_250ADB210;
      v21 = *(_QWORD *)(a3 + 64);
      v22 = *(std::__shared_weak_count **)(a3 + 72);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v25 = *(_QWORD *)(a3 + 96);
        v26 = *(_DWORD *)(a3 + 104);
        v27 = *(_WORD *)(a3 + 108);
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      else
      {
        v25 = *(_QWORD *)(a3 + 96);
        v26 = *(_DWORD *)(a3 + 104);
        v27 = *(_WORD *)(a3 + 108);
      }
      v85[1] = v21;
      v86 = v22;
      v87 = *(_QWORD *)(a3 + 80);
      v88 = *(_DWORD *)(a3 + 88);
      v89 = v25;
      v90 = v26;
      v91 = v27;
      if (v22)
      {
        v29 = (unint64_t *)&v22->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v92 = 1;
    }
    v31.n128_f64[0] = sub_23965C1C8((uint64_t)v83, (uint64_t)__p);
    if (v92)
    {
      v32 = nullsub_4(&v87);
      v33 = v86;
      if (v86)
      {
        v34 = (unint64_t *)&v86->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v32);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v31 = nullsub_4(v85);
    }
    if (v95)
    {
      v36 = *(_QWORD *)&__p[8];
      v37 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v38 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v37->__on_zero_shared)(v37, v31);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      sub_23976B524(v36, &v112);
      sub_23979D0F0((uint64_t)&v112, &v114);
      pixelBuffer = v114;
      v97 = v115;
      if (v115)
      {
        v41 = (unint64_t *)&v115->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        v43 = v115;
        if (v115)
        {
          v44 = (unint64_t *)&v115->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      sub_23979BCF4(&v112);
      CVPixelBufferGetIOSurface(pixelBuffer);
      sub_239672368(a1);
      v47 = v97;
      if (v97)
      {
        v48 = (unint64_t *)&v97->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    else if (*(_BYTE *)(a3 + 112) && sub_2398AD998(a3 + 56))
    {
      if (!*(_BYTE *)(a3 + 112))
        sub_2394875CC();
      sub_2398ADA6C(a3 + 56, &v112);
      sub_23979C580((uint64_t)&v112);
      sub_239672368(a1);
      sub_2399107E4(&v112);
    }
    else
    {
      LOBYTE(v114) = 5;
      v112 = (char *)operator new(0x20uLL);
      v113 = xmmword_239EC9FD0;
      strcpy(v112, "Buffer is not IOSurface backed.");
      sub_23957E1BC(a1, &v114, (uint64_t)&v112);
      if (SHIBYTE(v113) < 0)
        operator delete(v112);
    }
    if (!v95)
      goto LABEL_116;
    v50 = *(std::__shared_weak_count **)&__p[16];
    if (!*(_QWORD *)&__p[16])
      goto LABEL_115;
    v51 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    goto LABEL_113;
  }
  if (v9 != 1)
  {
    sub_239A444D4((uint64_t)"unknown file", 1015, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v11 = *(_OWORD *)(a3 + 16);
  v98[0] = *(_OWORD *)a3;
  v98[1] = v11;
  v98[2] = *(_OWORD *)(a3 + 32);
  v99 = *(_DWORD *)(a3 + 48);
  LOBYTE(v100[0]) = 0;
  v107 = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    v100[0] = &off_250ADB210;
    v12 = *(_QWORD *)(a3 + 64);
    v13 = *(std::__shared_weak_count **)(a3 + 72);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = *(_QWORD *)(a3 + 96);
      v17 = *(_DWORD *)(a3 + 104);
      v18 = *(_WORD *)(a3 + 108);
      do
        v19 = __ldxr(v14);
      while (__stxr(v19 + 1, v14));
    }
    else
    {
      v16 = *(_QWORD *)(a3 + 96);
      v17 = *(_DWORD *)(a3 + 104);
      v18 = *(_WORD *)(a3 + 108);
    }
    v100[1] = v12;
    v101 = v13;
    v102 = *(_QWORD *)(a3 + 80);
    v103 = *(_DWORD *)(a3 + 88);
    v104 = v16;
    v105 = v17;
    v106 = v18;
    if (v13)
    {
      v53 = (unint64_t *)&v13->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v107 = 1;
  }
  v55.n128_f64[0] = sub_23965BE1C((uint64_t)v98, (uint64_t)__p);
  if (v107)
  {
    v56 = nullsub_4(&v102);
    v57 = v101;
    if (v101)
    {
      v58 = (unint64_t *)&v101->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v56);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v55 = nullsub_4(v100);
  }
  if (v94)
  {
    v60 = *(_QWORD *)&__p[8];
    v61 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v62 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, v55);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    sub_23976A2E8(v60, &v112);
    sub_23979D0F0((uint64_t)&v112, &v114);
    pixelBuffer = v114;
    v97 = v115;
    if (v115)
    {
      v65 = (unint64_t *)&v115->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
      v67 = v115;
      if (v115)
      {
        v68 = (unint64_t *)&v115->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
    sub_23979BCF4(&v112);
    CVPixelBufferGetIOSurface(pixelBuffer);
    sub_239672368(a1);
    v70 = v97;
    if (v97)
    {
      v71 = (unint64_t *)&v97->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  else if (*(_BYTE *)(a3 + 112) && sub_2398AD998(a3 + 56))
  {
    if (!*(_BYTE *)(a3 + 112))
      sub_2394875CC();
    sub_2398ADA6C(a3 + 56, &v112);
    sub_23979C580((uint64_t)&v112);
    sub_239672368(a1);
    sub_2399107E4(&v112);
  }
  else
  {
    LOBYTE(v114) = 5;
    v112 = (char *)operator new(0x20uLL);
    v113 = xmmword_239EC9FD0;
    strcpy(v112, "Buffer is not IOSurface backed.");
    sub_23957E1BC(a1, &v114, (uint64_t)&v112);
    if (SHIBYTE(v113) < 0)
      operator delete(v112);
  }
  if (!v94)
    goto LABEL_116;
  v50 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v73 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v52 = __ldaxr(v73);
    while (__stlxr(v52 - 1, v73));
LABEL_113:
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_115:
  v46 = nullsub_4(__p);
LABEL_116:
  if (!v117)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v117 + 48))(v117, v46);
  v81 = v117;
  if (v117 == v116)
  {
    v82 = 4;
    v81 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_122;
    v82 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*v81 + 8 * v82))(v81, v74, v75, v76, v77, v78, v79, v80, *(_QWORD *)&v83[0]);
LABEL_122:
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
}

void sub_23966C7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_2399107E4((_QWORD *)(v40 - 160));
  sub_23965CB70((uint64_t)&__p);
  sub_239416834((_QWORD *)(v40 - 120));
  if (*(char *)(v40 - 169) < 0)
  {
    operator delete(*(void **)(v40 - 192));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23966C908(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  __int128 v34;
  std::string *p_p;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __n128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __n128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __n128 v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __n128 v75;
  __n128 *v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  __n128 *v80;
  uint64_t v81;
  __n128 *v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v85;
  unsigned __int32 v86;
  char *v87;
  int v88;
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  uint64_t v101;
  int v102;
  __int16 v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __n128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _OWORD v114[3];
  int v115;
  _QWORD v116[2];
  std::__shared_weak_count *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  __int16 v122;
  char v123;
  __n128 v124;
  uint64_t *v125;
  _QWORD v126[15];
  int v127;
  char v128;
  char v129;
  std::string __p;
  std::string v131;
  std::string v132;
  char v133;
  unint64_t v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  void *v138[2];
  uint64_t *v139;
  unint64_t v140;
  __n128 v141;
  uint64_t *v142;
  _QWORD v143[15];
  int v144;
  char v145;
  __int128 v146;
  uint64_t *v147;
  std::__shared_weak_count *v148;
  uint64_t (**v149)();
  uint64_t (*v150)(void);
  uint64_t *v151;
  void **v152;
  uint64_t (**v153)();
  __int128 v154;
  void **v155;
  uint64_t (**v156)();
  uint64_t (*v157)(void);
  uint64_t *v158;
  uint64_t (***v159)();
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v140 = a5;
  v9 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_21;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a5;
    if (*(_QWORD *)&v9 <= a5)
      v11 = a5 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a5;
  }
  v12 = *(uint64_t ***)(*a3 + 8 * v11);
  if (!v12)
  {
LABEL_21:
    v17 = 0;
    v13 = 0;
    goto LABEL_23;
  }
  v13 = *v12;
  if (!*v12)
  {
LABEL_22:
    v17 = 0;
    goto LABEL_23;
  }
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a5)
      {
        if (v13[2] == a5)
          goto LABEL_95;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_21;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == a5)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_21;
LABEL_11:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_22;
  }
  if (v13[2] != a5)
    goto LABEL_11;
LABEL_95:
  if (!*(_QWORD *)(a2 + 176))
  {
    v124 = *(__n128 *)(v13 + 3);
    v125 = (uint64_t *)v13[5];
    LOBYTE(v126[0]) = 0;
    v128 = 0;
    if (*((_BYTE *)v13 + 176))
    {
      v127 = -1;
      v70 = *((unsigned int *)v13 + 42);
      if ((_DWORD)v70 != -1)
      {
        ((void (*)(uint64_t (***)(), _QWORD *, uint64_t *))off_250AE2B78[v70])(&v156, v126, v13 + 6);
        v127 = v70;
      }
      v128 = 1;
    }
    v129 = 1;
LABEL_195:
    v141 = v124;
    v142 = v125;
    LOBYTE(v143[0]) = 0;
    v145 = 0;
    if (v128)
    {
      v144 = -1;
      v95 = v127;
      if (v127 != -1)
      {
        ((void (*)(uint64_t (***)(), _QWORD *, _QWORD *))off_250AE2B78[v127])(&v153, v143, v126);
        v144 = v95;
      }
      v145 = 1;
    }
    v96 = *(_OWORD *)(a4 + 16);
    v114[0] = *(_OWORD *)a4;
    v114[1] = v96;
    v114[2] = *(_OWORD *)(a4 + 32);
    v115 = *(_DWORD *)(a4 + 48);
    LOBYTE(v116[0]) = 0;
    v123 = 0;
    if (*(_BYTE *)(a4 + 112))
    {
      v116[0] = &off_250ADB210;
      v97 = *(_QWORD *)(a4 + 64);
      v98 = *(std::__shared_weak_count **)(a4 + 72);
      if (v98)
      {
        p_shared_owners = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldxr(p_shared_owners);
        while (__stxr(v100 + 1, p_shared_owners));
        v101 = *(_QWORD *)(a4 + 96);
        v102 = *(_DWORD *)(a4 + 104);
        v103 = *(_WORD *)(a4 + 108);
        do
          v104 = __ldxr(p_shared_owners);
        while (__stxr(v104 + 1, p_shared_owners));
      }
      else
      {
        v101 = *(_QWORD *)(a4 + 96);
        v102 = *(_DWORD *)(a4 + 104);
        v103 = *(_WORD *)(a4 + 108);
      }
      v116[1] = v97;
      v117 = v98;
      v118 = *(_QWORD *)(a4 + 80);
      v119 = *(_DWORD *)(a4 + 88);
      v120 = v101;
      v121 = v102;
      v122 = v103;
      if (v98)
      {
        v108 = (unint64_t *)&v98->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v123 = 1;
    }
    sub_239672750(a1, (uint64_t)v114, (int *)&v141);
    if (v123)
    {
      v110 = nullsub_4(&v118);
      v111 = v117;
      if (v117)
      {
        v112 = (unint64_t *)&v117->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v111->__on_zero_shared)(v111, v110);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v50 = nullsub_4(v116);
    }
    if (v145 && v144 != -1)
      ((void (*)(uint64_t (***)(), _QWORD *, __n128))off_250AE2B60[v144])(&v156, v143, v50);
    goto LABEL_228;
  }
  v17 = 1;
LABEL_23:
  sub_23964FC9C(*(_QWORD *)(a2 + 192) + 8, a5, (uint64_t)&v141);
  *(__n128 *)v138 = v141;
  v139 = v142;
  sub_23966A320(a2);
  v137 = 0;
  if (e5rt_execution_stream_operation_retain_input_port())
    v18 = 1;
  else
    v18 = v137 == 0;
  if (v18)
  {
    LOBYTE(v149) = 5;
    v153 = (uint64_t (**)())operator new(0x20uLL);
    v154 = xmmword_239EC9FE0;
    strcpy((char *)v153, "Unable to retain input port.");
    sub_23957E1BC((uint64_t)&v156, &v149, (uint64_t)&v153);
    v19 = v157;
    v141.n128_u8[8] = v157;
    v20 = v158;
    v21 = (std::__shared_weak_count *)v159;
    v142 = v158;
    v143[0] = v159;
    if (v159)
    {
      v22 = (unint64_t *)(v159 + 1);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v124.n128_u64[0] = (unint64_t)&off_250ADC870;
      v124.n128_u8[8] = v19;
      v125 = v20;
      v126[0] = v21;
      do
        v24 = __ldxr(v22);
      while (__stxr(v24 + 1, v22));
      v129 = 0;
      v141.n128_u64[0] = (unint64_t)&off_250ADC870;
      do
        v25 = __ldaxr(v22);
      while (__stlxr(v25 - 1, v22));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      v124.n128_u64[0] = (unint64_t)&off_250ADC870;
      v124.n128_u8[8] = v157;
      v125 = v158;
      v126[0] = 0;
      v129 = 0;
      v141.n128_u64[0] = (unint64_t)&off_250ADC870;
    }
    v46 = nullsub_4(&v141);
    v156 = &off_250ADC870;
    v47 = (std::__shared_weak_count *)v159;
    if (!v159)
      goto LABEL_72;
    v48 = (unint64_t *)(v159 + 1);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v46);
      std::__shared_weak_count::__release_weak(v47);
      v50 = nullsub_4(&v156);
      if ((SHIBYTE(v154) & 0x80000000) == 0)
        goto LABEL_193;
    }
    else
    {
LABEL_72:
      v50 = nullsub_4(&v156);
      if ((SHIBYTE(v154) & 0x80000000) == 0)
        goto LABEL_193;
    }
    operator delete(v153);
    goto LABEL_193;
  }
  v156 = &off_250AE3018;
  v157 = MEMORY[0x24BE2F8E8];
  v158 = &v137;
  v159 = &v156;
  if (v17)
  {
    if (!v13[5])
    {
      sub_239A444D4((uint64_t)"unknown file", 1058, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (e5rt_io_port_bind_buffer_object())
    {
      LOBYTE(v146) = 5;
      std::operator+<char>();
      sub_23957E1BC((uint64_t)&v153, &v146, (uint64_t)&v149);
      v26 = v154;
      v141.n128_u8[8] = v154;
      v27 = (uint64_t *)*((_QWORD *)&v154 + 1);
      v28 = (std::__shared_weak_count *)v155;
      v142 = (uint64_t *)*((_QWORD *)&v154 + 1);
      v143[0] = v155;
      if (v155)
      {
        v29 = (unint64_t *)(v155 + 1);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v124.n128_u64[0] = (unint64_t)&off_250ADC870;
        v124.n128_u8[8] = v26;
        v125 = v27;
        v126[0] = v28;
        do
          v31 = __ldxr(v29);
        while (__stxr(v31 + 1, v29));
        v129 = 0;
        v141.n128_u64[0] = (unint64_t)&off_250ADC870;
        do
          v32 = __ldaxr(v29);
        while (__stlxr(v32 - 1, v29));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        v124.n128_u64[0] = (unint64_t)&off_250ADC870;
        v124.n128_u8[8] = v154;
        v125 = (uint64_t *)*((_QWORD *)&v154 + 1);
        v126[0] = 0;
        v129 = 0;
        v141.n128_u64[0] = (unint64_t)&off_250ADC870;
      }
      v59 = nullsub_4(&v141);
      v153 = &off_250ADC870;
      v60 = (std::__shared_weak_count *)v155;
      if (v155)
      {
        v61 = (unint64_t *)(v155 + 1);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, v59);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      nullsub_4(&v153);
      if (SHIBYTE(v151) < 0)
        operator delete(v149);
    }
    else
    {
      v124 = *(__n128 *)(v13 + 3);
      v125 = (uint64_t *)v13[5];
      LOBYTE(v126[0]) = 0;
      v128 = 0;
      if (*((_BYTE *)v13 + 176))
      {
        v127 = -1;
        v51 = *((unsigned int *)v13 + 42);
        if ((_DWORD)v51 != -1)
        {
          ((void (*)(uint64_t (***)(), _QWORD *, uint64_t *))off_250AE2B78[v51])(&v153, v126, v13 + 6);
          v127 = v51;
        }
        v128 = 1;
      }
      v129 = 1;
    }
    goto LABEL_187;
  }
  v135 = 0;
  v136 = 0;
  e5rt_io_port_retain_tensor_desc();
  v153 = &off_250AE2D38;
  *(_QWORD *)&v154 = MEMORY[0x24BE2FAA8];
  *((_QWORD *)&v154 + 1) = &v136;
  v155 = (void **)&v153;
  v134 = 0;
  e5rt_tensor_desc_get_size();
  if (!e5rt_buffer_object_alloc())
  {
    v149 = &off_250AE2DB8;
    v150 = MEMORY[0x24BE2F720];
    v151 = (uint64_t *)&v135;
    v152 = (void **)&v149;
    if (e5rt_io_port_bind_buffer_object())
    {
      if (v135)
        e5rt_buffer_object_release();
      v131.__r_.__value_.__s.__data_[0] = 5;
      std::operator+<char>();
      sub_23957E1BC((uint64_t)&v146, &v131, (uint64_t)&v132);
      v141.n128_u8[8] = BYTE8(v146);
      v142 = v147;
      v143[0] = v148;
      if (v148)
      {
        v52 = (unint64_t *)&v148->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
        v124.n128_u64[0] = (unint64_t)&off_250ADC870;
        v124.n128_u8[8] = v141.n128_u8[8];
        v125 = v142;
        v126[0] = v143[0];
        if (v143[0])
        {
          v54 = (unint64_t *)(v143[0] + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          v56 = (std::__shared_weak_count *)v143[0];
          v129 = 0;
          v141.n128_u64[0] = (unint64_t)&off_250ADC870;
          if (v143[0])
          {
            v57 = (unint64_t *)(v143[0] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          goto LABEL_131;
        }
      }
      else
      {
        v124.n128_u64[0] = (unint64_t)&off_250ADC870;
        v124.n128_u8[8] = BYTE8(v146);
        v125 = v147;
        v126[0] = 0;
      }
      v129 = 0;
      v141.n128_u64[0] = (unint64_t)&off_250ADC870;
LABEL_131:
      v71 = nullsub_4(&v141);
      *(_QWORD *)&v146 = &off_250ADC870;
      v72 = v148;
      if (v148)
      {
        v73 = (unint64_t *)&v148->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v72->__on_zero_shared)(v72, v71);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = nullsub_4(&v146);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      goto LABEL_175;
    }
    *(_QWORD *)&v146 = &unk_250AE2530;
    *((_QWORD *)&v146 + 1) = nullsub_217;
    v148 = (std::__shared_weak_count *)&v146;
    v143[0] = &v141;
    v141.n128_u64[0] = (unint64_t)&unk_250AE2530;
    v141.n128_u64[1] = (unint64_t)nullsub_217;
    sub_23965A910(&v141, &v153);
    v68 = (__n128 *)v143[0];
    if ((__n128 *)v143[0] == &v141)
    {
      v69 = 4;
      v68 = &v141;
    }
    else
    {
      if (!v143[0])
        goto LABEL_140;
      v69 = 5;
    }
    (*(void (**)(void))(v68->n128_u64[0] + 8 * v69))();
LABEL_140:
    v141.n128_u64[0] = (unint64_t)&unk_250AE2530;
    v141.n128_u64[1] = (unint64_t)nullsub_217;
    v143[0] = &v141;
    sub_23965A910(&v141, &v146);
    v76 = (__n128 *)v143[0];
    if ((__n128 *)v143[0] == &v141)
    {
      v77 = 4;
      v76 = &v141;
    }
    else
    {
      if (!v143[0])
        goto LABEL_145;
      v77 = 5;
    }
    (*(void (**)(void))(v76->n128_u64[0] + 8 * v77))();
LABEL_145:
    if (!v148)
      sub_2394172E0();
    ((void (*)(std::__shared_weak_count *))v148->__vftable[1].~__shared_weak_count_0)(v148);
    v78 = (__int128 *)v148;
    if (v148 == (std::__shared_weak_count *)&v146)
    {
      v79 = 4;
      v78 = &v146;
    }
    else
    {
      if (!v148)
        goto LABEL_151;
      v79 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v78 + 8 * v79))();
LABEL_151:
    *(_QWORD *)&v146 = &unk_250AE2530;
    *((_QWORD *)&v146 + 1) = nullsub_217;
    v148 = (std::__shared_weak_count *)&v146;
    v143[0] = &v141;
    v141.n128_u64[0] = (unint64_t)&unk_250AE2530;
    v141.n128_u64[1] = (unint64_t)nullsub_217;
    sub_23965A910(&v141, &v149);
    v80 = (__n128 *)v143[0];
    if ((__n128 *)v143[0] == &v141)
    {
      v81 = 4;
      v80 = &v141;
    }
    else
    {
      if (!v143[0])
        goto LABEL_156;
      v81 = 5;
    }
    (*(void (**)(void))(v80->n128_u64[0] + 8 * v81))();
LABEL_156:
    v141.n128_u64[0] = (unint64_t)&unk_250AE2530;
    v141.n128_u64[1] = (unint64_t)nullsub_217;
    v143[0] = &v141;
    sub_23965A910(&v141, &v146);
    v82 = (__n128 *)v143[0];
    if ((__n128 *)v143[0] == &v141)
    {
      v83 = 4;
      v82 = &v141;
    }
    else
    {
      if (!v143[0])
        goto LABEL_161;
      v83 = 5;
    }
    (*(void (**)(void))(v82->n128_u64[0] + 8 * v83))();
LABEL_161:
    if (!v148)
      sub_2394172E0();
    ((void (*)(std::__shared_weak_count *))v148->__vftable[1].~__shared_weak_count_0)(v148);
    v84 = (__int128 *)v148;
    if (v148 == (std::__shared_weak_count *)&v146)
    {
      v85 = 4;
      v84 = &v146;
    }
    else
    {
      if (!v148)
        goto LABEL_167;
      v85 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
LABEL_167:
    sub_23966DB44();
    v141.n128_u32[0] = v86;
    v141.n128_u64[1] = v136;
    v142 = v135;
    LOBYTE(v143[0]) = 0;
    v145 = 0;
    *(_QWORD *)&v146 = &v140;
    v87 = sub_239674748((uint64_t)a3, &v140, (uint64_t)&unk_239EC6E98, (_QWORD **)&v146);
    *(__n128 *)(v87 + 24) = v141;
    *((_QWORD *)v87 + 5) = v142;
    sub_239674AB0((uint64_t)(v87 + 48), (uint64_t)v143);
    v75 = v141;
    v124 = v141;
    v125 = v142;
    LOBYTE(v126[0]) = 0;
    v128 = 0;
    if (v145)
    {
      v127 = -1;
      v88 = v144;
      if (v144 != -1)
      {
        ((void (*)(__int128 *, _QWORD *, _QWORD *))off_250AE2C90[v144])(&v146, v126, v143);
        v127 = v88;
        v128 = 1;
        v129 = 1;
        if (v145 && v144 != -1)
          ((void (*)(__int128 *, _QWORD *))off_250AE2B60[v144])(&v146, v143);
LABEL_175:
        if (!v152)
          sub_2394172E0();
        (*((void (**)(void **, __n128))*v152 + 6))(v152, v75);
        v89 = (uint64_t (***)())v152;
        if (v152 == (void **)&v149)
        {
          v90 = 4;
          v89 = &v149;
        }
        else
        {
          if (!v152)
            goto LABEL_181;
          v90 = 5;
        }
        (*v89)[v90]();
        goto LABEL_181;
      }
      v128 = 1;
    }
    v129 = 1;
    goto LABEL_175;
  }
  v133 = 5;
  std::operator+<char>();
  v33 = std::string::append(&v131, " of size ");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  sub_23964A648(&v134, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v132, (const std::string::value_type *)p_p, size);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v147 = (uint64_t *)v37->__r_.__value_.__r.__words[2];
  v146 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  sub_23957E1BC((uint64_t)&v149, &v133, (uint64_t)&v146);
  v141.n128_u8[8] = v150;
  v142 = v151;
  v143[0] = v152;
  if (!v152)
  {
    v124.n128_u64[0] = (unint64_t)&off_250ADC870;
    v124.n128_u8[8] = v150;
    v125 = v151;
    v126[0] = 0;
LABEL_106:
    v129 = 0;
    v141.n128_u64[0] = (unint64_t)&off_250ADC870;
    goto LABEL_107;
  }
  v39 = (unint64_t *)(v152 + 1);
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
  v124.n128_u64[0] = (unint64_t)&off_250ADC870;
  v124.n128_u8[8] = v141.n128_u8[8];
  v125 = v142;
  v126[0] = v143[0];
  if (!v143[0])
    goto LABEL_106;
  v41 = (unint64_t *)(v143[0] + 8);
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  v43 = (std::__shared_weak_count *)v143[0];
  v129 = 0;
  v141.n128_u64[0] = (unint64_t)&off_250ADC870;
  if (v143[0])
  {
    v44 = (unint64_t *)(v143[0] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_107:
  v63 = nullsub_4(&v141);
  v149 = &off_250ADC870;
  v64 = (std::__shared_weak_count *)v152;
  if (v152)
  {
    v65 = (unint64_t *)(v152 + 1);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v64->__on_zero_shared)(v64, v63);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = nullsub_4(&v149);
  if (SHIBYTE(v147) < 0)
  {
    operator delete((void *)v146);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_118;
LABEL_114:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_115;
LABEL_119:
    operator delete(v132.__r_.__value_.__l.__data_);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
LABEL_120:
      operator delete(v131.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
LABEL_118:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_119;
LABEL_115:
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_120;
  }
LABEL_181:
  if (!v155)
    sub_2394172E0();
  (*((void (**)(void **, __n128))*v155 + 6))(v155, v67);
  v91 = (uint64_t (***)())v155;
  if (v155 == (void **)&v153)
  {
    v92 = 4;
    v91 = &v153;
  }
  else
  {
    if (!v155)
      goto LABEL_187;
    v92 = 5;
  }
  (*v91)[v92]();
LABEL_187:
  if (!v159)
    sub_2394172E0();
  ((void (*)(uint64_t (***)()))(*v159)[6])(v159);
  v93 = v159;
  if (v159 == &v156)
  {
    v94 = 4;
    v93 = &v156;
LABEL_192:
    (*v93)[v94]();
  }
  else if (v159)
  {
    v94 = 5;
    goto LABEL_192;
  }
LABEL_193:
  if (SHIBYTE(v139) < 0)
  {
    operator delete(v138[0]);
    if (!v129)
      goto LABEL_207;
    goto LABEL_195;
  }
  if (v129)
    goto LABEL_195;
LABEL_207:
  *(_QWORD *)a1 = &off_250ADC870;
  *(_BYTE *)(a1 + 8) = v124.n128_u8[8];
  v105 = v126[0];
  *(_QWORD *)(a1 + 16) = v125;
  *(_QWORD *)(a1 + 24) = v105;
  if (v105)
  {
    v106 = (unint64_t *)(v105 + 8);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
LABEL_228:
  if (v129)
  {
    if (v128)
    {
      if (v127 != -1)
        ((void (*)(__n128 *, _QWORD *, __n128))off_250AE2B60[v127])(&v141, v126, v50);
    }
  }
  else
  {
    (*(void (**)(__n128 *, __n128))v124.n128_u64[0])(&v124, v50);
  }
}

void sub_23966D8F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

void sub_23966DB44()
{
  uint64_t v0;
  _QWORD v1[5];

  v1[4] = *MEMORY[0x24BDAC8D0];
  v0 = 0;
  e5rt_tensor_desc_retain_dtype();
  v1[0] = &off_250AE2BA0;
  v1[1] = MEMORY[0x24BE2FA68];
  v1[2] = &v0;
  v1[3] = v1;
  e5rt_tensor_desc_dtype_get_component_size();
  e5rt_tensor_desc_dtype_get_component_dtype();
  sub_239A444D4((uint64_t)"unknown file", 862, (uint64_t)"", (void (*)(void *))sub_239A4463C);
  sub_239A4475C();
  abort();
}

void sub_23966DCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239416834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23966DCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239416834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23966DCCC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t sub_23966DCE4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_250AE2B60[v2])(&v4, a1 + 24);
    *(_DWORD *)(a1 + 144) = -1;
  }
  return a1;
}

_QWORD *sub_23966DD44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  std::__shared_weak_count *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  _BOOL4 v34;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  __n128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __n128 v73;
  int v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __n128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  char v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  __n128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __int128 *p_dst;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 *v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  char v118;
  char v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __n128 v123;
  _QWORD *result;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD v129[3];
  int v130;
  _QWORD v131[2];
  std::__shared_weak_count *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  __int16 v137;
  char v138;
  std::string v139;
  std::string v140;
  void *__p[2];
  std::string::size_type v142;
  char v143;
  void *v144;
  char v145;
  __int128 v146;
  unint64_t v147;
  uint64_t (**v148)();
  char v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  _BYTE v152[20];
  int v153;
  int v154;
  __int128 __dst;
  _BYTE v156[32];
  int v157;
  _QWORD v158[2];
  std::__shared_weak_count *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  __int16 v164;
  char v165;
  _QWORD v166[3];
  _QWORD *v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  v7 = a1[24];
  v9 = *(_QWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 56);
  v10 = 0xCF3CF3CF3CF3CF3DLL * ((v8 - v9) >> 3);
  if (v10 != (uint64_t)(a2[1] - *a2) >> 7)
    sub_239EC15B8();
  v15 = sub_2396633EC(a5);
  if (!v15 || (v17 = v16) == 0)
    sub_239EC1588();
  v18 = v15;
  v19 = operator new(0x20uLL);
  *v19 = &off_250AE3098;
  v19[1] = sub_23966EBB8;
  v19[2] = a5;
  v19[3] = v18;
  v167 = v19;
  sub_2396683F0(a1[24] + 8, 0, a1 + 13, a1 + 16, (uint64_t)&v148);
  if (!v149)
  {
    v127 = v18;
    if (v8 != v9)
    {
      v28 = 0;
      while (1)
      {
        v147 = v28;
        sub_239647D60(*a2 + (v28 << 7), (uint64_t)&__dst);
        LODWORD(v151[0]) = v157;
        if (!sub_23964FB60(v151))
        {
          v126 = 1292;
LABEL_182:
          sub_239A444D4((uint64_t)"unknown file", v126, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        *(_OWORD *)&v152[4] = *(_OWORD *)&v156[4];
        v153 = *(_DWORD *)&v156[20];
        *(_OWORD *)v151 = __dst;
        *(_DWORD *)v152 = *(_DWORD *)v156;
        v154 = v157;
        if (!sub_239644B30(v151) || !sub_239644BD8(v151, 16))
        {
          v126 = 1293;
          goto LABEL_182;
        }
        LODWORD(v151[0]) = v157;
        v29 = sub_23964FC24((int *)v151);
        if (!v30)
        {
          v143 = 3;
          sub_23964A648(&v147, &v139);
          v46 = std::string::insert(&v139, 0, "Invalid input: The given view for input ");
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v140, " requires both a color format and type definition in its format flags.");
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v142 = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          sub_23957E1BC((uint64_t)&v144, &v143, (uint64_t)__p);
          v50 = v145;
          LOBYTE(v151[1]) = v145;
          v51 = v146;
          *(_OWORD *)v152 = v146;
          if (*((_QWORD *)&v146 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
            v54 = (char)v151[1];
            v55 = *(_OWORD *)v152;
            *(_QWORD *)a6 = &off_250ADC870;
            *(_BYTE *)(a6 + 8) = v54;
            *(_OWORD *)(a6 + 16) = v55;
            if (*((_QWORD *)&v55 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
              v58 = *(std::__shared_weak_count **)&v152[8];
              *(_BYTE *)(a6 + 32) = 0;
              v151[0] = &off_250ADC870;
              if (v58)
              {
                p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(p_shared_owners);
                while (__stlxr(v60 - 1, p_shared_owners));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
LABEL_61:
              v69 = nullsub_4(v151);
              v144 = &off_250ADC870;
              v70 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
              if (!*((_QWORD *)&v146 + 1))
                goto LABEL_65;
              v71 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v69);
                std::__shared_weak_count::__release_weak(v70);
                v73 = nullsub_4(&v144);
                if (SHIBYTE(v142) < 0)
                  goto LABEL_71;
LABEL_66:
                if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_67;
LABEL_72:
                operator delete(v140.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_68:
                  v74 = 1;
                  if (v165)
                    goto LABEL_123;
                  goto LABEL_129;
                }
              }
              else
              {
LABEL_65:
                v73 = nullsub_4(&v144);
                if ((SHIBYTE(v142) & 0x80000000) == 0)
                  goto LABEL_66;
LABEL_71:
                operator delete(__p[0]);
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_72;
LABEL_67:
                if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_68;
              }
              operator delete(v139.__r_.__value_.__l.__data_);
              v74 = 1;
              if (v165)
                goto LABEL_123;
              goto LABEL_129;
            }
          }
          else
          {
            *(_QWORD *)a6 = &off_250ADC870;
            *(_BYTE *)(a6 + 8) = v50;
            *(_QWORD *)(a6 + 16) = v51;
            *(_QWORD *)(a6 + 24) = 0;
          }
          *(_BYTE *)(a6 + 32) = 0;
          v151[0] = &off_250ADC870;
          goto LABEL_61;
        }
        v31 = v29;
        v151[0] = &off_250ADC870;
        LOBYTE(v151[1]) = 0;
        v32 = (_BYTE *)operator new();
        v32[23] = 0;
        *v32 = 0;
        *(_QWORD *)v152 = v32;
        v33 = (_QWORD *)operator new();
        *v33 = &unk_250ADEA78;
        v33[1] = 0;
        v33[2] = 0;
        v33[3] = v32;
        *(_QWORD *)&v152[8] = v33;
        v34 = sub_239659DD8((uint64_t)&__dst);
        if ((unint64_t)(v31 - 1) < 2 && v34)
        {
          sub_23966BEF8((uint64_t)&v144, (uint64_t)a1, (uint64_t)&__dst, v147);
          LOBYTE(v151[1]) = v145;
          v36 = v146;
          if (*((_QWORD *)&v146 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v39 = *(std::__shared_weak_count **)&v152[8];
          *(_OWORD *)v152 = v36;
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v144 = &off_250ADC870;
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
          if (*((_QWORD *)&v146 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = nullsub_4(&v144);
        }
        else
        {
          if (!sub_239659DEC((uint64_t)&__dst))
          {
            sub_239A444D4((uint64_t)"unknown file", 1313, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v129[0] = __dst;
          v129[1] = *(_OWORD *)v156;
          v129[2] = *(_OWORD *)&v156[16];
          v130 = v157;
          LOBYTE(v131[0]) = 0;
          v138 = 0;
          if (v165)
          {
            v131[0] = &off_250ADB210;
            v61 = v158[1];
            v62 = v159;
            if (v159)
            {
              v63 = (unint64_t *)&v159->__shared_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
              v65 = v162;
              v66 = v163;
              v67 = v164;
              do
                v68 = __ldxr(v63);
              while (__stxr(v68 + 1, v63));
            }
            else
            {
              v65 = v162;
              v66 = v163;
              v67 = v164;
            }
            v131[1] = v61;
            v132 = v62;
            v133 = v160;
            v134 = v161;
            v135 = v65;
            v136 = v66;
            v137 = v67;
            if (v62)
            {
              v75 = (unint64_t *)&v62->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v138 = 1;
          }
          sub_23966C908((uint64_t)&v144, (uint64_t)a1, a3, (uint64_t)v129, v147);
          LOBYTE(v151[1]) = v145;
          v77 = v146;
          if (*((_QWORD *)&v146 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = *(std::__shared_weak_count **)&v152[8];
          *(_OWORD *)v152 = v77;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v144 = &off_250ADC870;
          v83 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
          if (*((_QWORD *)&v146 + 1))
          {
            v84 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          v45 = nullsub_4(&v144);
          if (v138)
          {
            v86 = nullsub_4(&v133);
            v87 = v132;
            if (v132)
            {
              v88 = (unint64_t *)&v132->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v86);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v45 = nullsub_4(v131);
          }
        }
        v90 = (char)v151[1];
        if (!LOBYTE(v151[1]))
        {
          v74 = 0;
          v151[0] = &off_250ADC870;
          v101 = *(std::__shared_weak_count **)&v152[8];
          if (!*(_QWORD *)&v152[8])
            goto LABEL_122;
          goto LABEL_119;
        }
        v145 = (char)v151[1];
        v91 = *(_QWORD *)v152;
        v146 = *(_OWORD *)v152;
        if (!*(_QWORD *)&v152[8])
          break;
        v92 = (unint64_t *)(*(_QWORD *)&v152[8] + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
        v94 = v145;
        v95 = v146;
        *(_QWORD *)a6 = &off_250ADC870;
        *(_BYTE *)(a6 + 8) = v94;
        *(_OWORD *)(a6 + 16) = v95;
        if (!*((_QWORD *)&v95 + 1))
          goto LABEL_117;
        v96 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
        *(_BYTE *)(a6 + 32) = 0;
        v144 = &off_250ADC870;
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v98->__on_zero_shared)(v98, v45);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
LABEL_118:
        v45 = nullsub_4(&v144);
        v74 = 1;
        v151[0] = &off_250ADC870;
        v101 = *(std::__shared_weak_count **)&v152[8];
        if (!*(_QWORD *)&v152[8])
          goto LABEL_122;
LABEL_119:
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (v103)
        {
LABEL_122:
          v73 = nullsub_4(v151);
          if (v165)
            goto LABEL_123;
          goto LABEL_129;
        }
        ((void (*)(std::__shared_weak_count *, __n128))v101->__on_zero_shared)(v101, v45);
        std::__shared_weak_count::__release_weak(v101);
        v73 = nullsub_4(v151);
        if (v165)
        {
LABEL_123:
          v104 = nullsub_4(&v160);
          v105 = v159;
          if (v159)
          {
            v106 = (unint64_t *)&v159->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v105->__on_zero_shared)(v105, v104);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          v73 = nullsub_4(v158);
        }
LABEL_129:
        if (v74)
          goto LABEL_165;
        if (++v28 == v10)
          goto LABEL_134;
      }
      *(_QWORD *)a6 = &off_250ADC870;
      *(_BYTE *)(a6 + 8) = v90;
      *(_QWORD *)(a6 + 16) = v91;
      *(_QWORD *)(a6 + 24) = 0;
LABEL_117:
      *(_BYTE *)(a6 + 32) = 0;
      v144 = &off_250ADC870;
      goto LABEL_118;
    }
LABEL_134:
    v151[0] = &unk_250AE2530;
    v151[1] = nullsub_217;
    *(_QWORD *)&v152[8] = v151;
    *(_QWORD *)&v156[8] = &__dst;
    *(_QWORD *)&__dst = &unk_250AE2530;
    *((_QWORD *)&__dst + 1) = nullsub_217;
    sub_23965A910(&__dst, v166);
    p_dst = *(__int128 **)&v156[8];
    if (*(__int128 **)&v156[8] == &__dst)
    {
      v111 = 4;
      p_dst = &__dst;
      v110 = a4;
      v109 = v127;
    }
    else
    {
      v110 = a4;
      v109 = v127;
      if (!*(_QWORD *)&v156[8])
        goto LABEL_147;
      v111 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v111))();
LABEL_147:
    *(_QWORD *)&__dst = &unk_250AE2530;
    *((_QWORD *)&__dst + 1) = nullsub_217;
    *(_QWORD *)&v156[8] = &__dst;
    sub_23965A910(&__dst, v151);
    v114 = *(__int128 **)&v156[8];
    if (*(__int128 **)&v156[8] == &__dst)
    {
      v115 = 4;
      v114 = &__dst;
    }
    else
    {
      if (!*(_QWORD *)&v156[8])
        goto LABEL_152;
      v115 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v114 + 8 * v115))();
LABEL_152:
    if (!*(_QWORD *)&v152[8])
      sub_2394172E0();
    (*(void (**)(_QWORD))(**(_QWORD **)&v152[8] + 48))(*(_QWORD *)&v152[8]);
    v116 = *(void ***)&v152[8];
    if (*(void ***)&v152[8] == v151)
    {
      v117 = 4;
      v116 = v151;
    }
    else
    {
      if (!*(_QWORD *)&v152[8])
        goto LABEL_158;
      v117 = 5;
    }
    (*((void (**)(void))*v116 + v117))();
LABEL_158:
    e5rt_execution_stream_encode_operation();
    e5rt_execution_stream_prewire_in_use_allocations();
    sub_23966EBC0(a2);
    if ((v152[7] & 0x80000000) != 0)
    {
      sub_23941A7F8(&__dst, v151[0], (unint64_t)v151[1]);
    }
    else
    {
      __dst = *(_OWORD *)v151;
      *(_QWORD *)v156 = *(_QWORD *)v152;
    }
    *(_QWORD *)&v156[8] = v109;
    *(_QWORD *)&v156[16] = v17;
    sub_2396782B0(v110, (uint64_t)&__dst, (uint64_t)&__dst);
    v119 = v118;
    if ((v156[7] & 0x80000000) != 0)
    {
      operator delete((void *)__dst);
      if ((v152[7] & 0x80000000) == 0)
      {
LABEL_163:
        if ((v119 & 1) != 0)
        {
LABEL_164:
          *(_QWORD *)a6 = v109;
          *(_BYTE *)(a6 + 32) = 1;
          goto LABEL_165;
        }
LABEL_179:
        sub_239A444D4((uint64_t)"unknown file", 1330, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
    }
    else if ((v152[7] & 0x80000000) == 0)
    {
      goto LABEL_163;
    }
    operator delete(v151[0]);
    if ((v119 & 1) != 0)
      goto LABEL_164;
    goto LABEL_179;
  }
  LOBYTE(__p[0]) = 5;
  std::operator+<char>();
  sub_23957E1BC((uint64_t)v151, __p, (uint64_t)&v144);
  v20 = (char)v151[1];
  BYTE8(__dst) = v151[1];
  v21 = *(_OWORD *)v152;
  *(_OWORD *)v156 = *(_OWORD *)v152;
  if (*(_QWORD *)&v152[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v152[8] + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)a6 = &off_250ADC870;
    *(_BYTE *)(a6 + 8) = v20;
    *(_OWORD *)(a6 + 16) = v21;
    do
      v24 = __ldxr(v22);
    while (__stxr(v24 + 1, v22));
    *(_BYTE *)(a6 + 32) = 0;
    *(_QWORD *)&__dst = &off_250ADC870;
    do
      v25 = __ldaxr(v22);
    while (__stlxr(v25 - 1, v22));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
    }
    v26 = nullsub_4(&__dst);
    v151[0] = &off_250ADC870;
    v27 = *(std::__shared_weak_count **)&v152[8];
    if (!*(_QWORD *)&v152[8])
      goto LABEL_141;
  }
  else
  {
    *(_QWORD *)a6 = &off_250ADC870;
    *(_BYTE *)(a6 + 8) = v20;
    *(_QWORD *)(a6 + 16) = v21;
    *(_QWORD *)(a6 + 24) = 0;
    *(_BYTE *)(a6 + 32) = 0;
    *(_QWORD *)&__dst = &off_250ADC870;
    v26 = nullsub_4(&__dst);
    v151[0] = &off_250ADC870;
    v27 = *(std::__shared_weak_count **)&v152[8];
    if (!*(_QWORD *)&v152[8])
      goto LABEL_141;
  }
  v112 = (unint64_t *)&v27->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v26);
    std::__shared_weak_count::__release_weak(v27);
    v73 = nullsub_4(v151);
    if ((SBYTE7(v146) & 0x80000000) == 0)
      goto LABEL_165;
    goto LABEL_142;
  }
LABEL_141:
  v73 = nullsub_4(v151);
  if (SBYTE7(v146) < 0)
LABEL_142:
    operator delete(v144);
LABEL_165:
  v148 = &off_250ADC870;
  v120 = v150;
  if (v150)
  {
    v121 = (unint64_t *)&v150->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v120->__on_zero_shared)(v120, v73);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = nullsub_4(&v148);
  if (!v167)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v167 + 48))(v167, v123);
  result = v167;
  if (v167 == v166)
  {
    v125 = 4;
    result = v166;
  }
  else
  {
    if (!v167)
      return result;
    v125 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v125))();
}

void sub_23966E9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (a60 < 0)
  {
    operator delete(__p);
    sub_23948FC6C(&a51);
    sub_239416834((_QWORD *)(v60 - 128));
    _Unwind_Resume(a1);
  }
  sub_23948FC6C(&a51);
  sub_239416834((_QWORD *)(v60 - 128));
  _Unwind_Resume(a1);
}

void sub_23966EBB8(_QWORD *a1, uint64_t *a2)
{
  sub_2396634D8(a1, *a2);
}

uint64_t sub_23966EBC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _BYTE v12[56];
  uint64_t v13;
  std::__shared_weak_count *v14;
  _BYTE v15[40];
  _QWORD v16[13];
  char v17;
  uint64_t v18;

  sub_2394988CC((uint64_t)v16);
  v2 = a1[1] - *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 7;
    do
    {
      sub_239647D60(*a1 + (v3 << 7), (uint64_t)v12);
      if (sub_239659DD8((uint64_t)v12))
      {
        sub_239644984((uint64_t)v12, v5);
        std::ostream::operator<<();
        std::ostream::operator<<();
      }
      if (v15[32])
      {
        v6 = nullsub_4(v15);
        v7 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        nullsub_4(&v13);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v16[2] = v10;
  v16[3] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B83E250](&v18);
}

void sub_23966ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23966ED58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_23948FBF0((uint64_t)&a9);
  sub_239498ABC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_23966ED74(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_23966EE68(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_23966EF5C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

_QWORD *sub_23966F050@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t data_ptr;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _BYTE v20[20];
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*a1)
    sub_239EC1614((uint64_t)a1, a2);
  v30 = 0;
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
    sub_239EC15E8(data_ptr, v5);
  v28 = 0;
  v29 = 0;
  e5rt_tensor_desc_get_shape();
  v27 = 0;
  e5rt_tensor_desc_get_strides();
  v26 = 0;
  e5rt_tensor_desc_retain_dtype();
  v31[0] = &off_250AE2BA0;
  v31[1] = MEMORY[0x24BE2FA68];
  v31[2] = &v26;
  v32 = v31;
  v25 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v24 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v23 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_239664FAC(v29, v28, v27, 0, 0, (uint64_t)v20);
  v17 = v21;
  v18 = v22;
  v19 = 1;
  v13[0] = 0;
  v16 = 0;
  sub_239643F70(a3, v30, v20, &v17, &unk_239EC81D0, v13);
  if (v16)
  {
    v7 = nullsub_4(&v15);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = nullsub_4(v13);
  }
  if (!v32)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v32 + 48))(v32, v6);
  result = v32;
  if (v32 == v31)
  {
    v12 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_23966F258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23948FA2C((uint64_t)&a9);
  sub_239416834((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F274(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F29C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F2C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23966F2E0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t data_ptr;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _BYTE v20[20];
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 1)
    sub_239EC1614((uint64_t)a1, a2);
  v30 = 0;
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
    sub_239EC15E8(data_ptr, v5);
  v28 = 0;
  v29 = 0;
  e5rt_tensor_desc_get_shape();
  v27 = 0;
  e5rt_tensor_desc_get_strides();
  v26 = 0;
  e5rt_tensor_desc_retain_dtype();
  v31[0] = &off_250AE2BA0;
  v31[1] = MEMORY[0x24BE2FA68];
  v31[2] = &v26;
  v32 = v31;
  v25 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v24 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v23 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2396651A0(v29, v28, v27, 0, 0, (uint64_t)v20);
  v17 = v21;
  v18 = v22;
  v19 = 1;
  v13[0] = 0;
  v16 = 0;
  sub_239643F70(a3, v30, v20, &v17, &unk_239EC81D8, v13);
  if (v16)
  {
    v7 = nullsub_4(&v15);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = nullsub_4(v13);
  }
  if (!v32)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v32 + 48))(v32, v6);
  result = v32;
  if (v32 == v31)
  {
    v12 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_23966F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23948FA2C((uint64_t)&a9);
  sub_239416834((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F508(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F51C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F530(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F544(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F558(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23966F574@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t data_ptr;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _BYTE v20[20];
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 2)
    sub_239EC1614((uint64_t)a1, a2);
  v30 = 0;
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
    sub_239EC15E8(data_ptr, v5);
  v28 = 0;
  v29 = 0;
  e5rt_tensor_desc_get_shape();
  v27 = 0;
  e5rt_tensor_desc_get_strides();
  v26 = 0;
  e5rt_tensor_desc_retain_dtype();
  v31[0] = &off_250AE2BA0;
  v31[1] = MEMORY[0x24BE2FA68];
  v31[2] = &v26;
  v32 = v31;
  v25 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v24 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v23 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2396653B8(v29, v28, v27, 0, 0, (uint64_t)v20);
  v17 = v21;
  v18 = v22;
  v19 = 1;
  v13[0] = 0;
  v16 = 0;
  sub_239643F70(a3, v30, v20, &v17, &unk_239EC81C8, v13);
  if (v16)
  {
    v7 = nullsub_4(&v15);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = nullsub_4(v13);
  }
  if (!v32)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v32 + 48))(v32, v6);
  result = v32;
  if (v32 == v31)
  {
    v12 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_23966F780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23948FA2C((uint64_t)&a9);
  sub_239416834((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F79C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23966F7EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_23966F80C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23966F820(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2BA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23966F858(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2BA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23966F878(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_23966F880(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23966F8EC()
{
  return &unk_250AE2C00;
}

uint64_t sub_23966F8F8(uint64_t a1, const char **a2, uint64_t *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = a3[1];
  a3[1] = 0;
  v12 = a3[2];
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a3[3];
  *(_QWORD *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a3 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(a1 + 32);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(v11 + 8 * v14) = a1 + 40;
    a3[2] = 0;
    a3[3] = 0;
  }
  v16 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = a3[6];
  a3[6] = 0;
  v17 = a3[7];
  *(_QWORD *)(a1 + 80) = v17;
  v18 = a3[8];
  *(_QWORD *)(a1 + 88) = v18;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a3 + 18);
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(a1 + 72);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20)
        v19 %= v20;
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(_QWORD *)(v16 + 8 * v19) = a1 + 80;
    a3[7] = 0;
    a3[8] = 0;
  }
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a3 + 5);
  a3[10] = 0;
  a3[11] = 0;
  *(_QWORD *)(a1 + 120) = a3[12];
  return a1;
}

uint64_t sub_23966FAA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void **v9;
  void *v10;
  void **v12;
  char v13;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD **)(a1 + 56);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD **)(a1 + 56);
    if (!v5)
      goto LABEL_12;
  }
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
    if (*((_BYTE *)v6 + 176))
    {
      v7 = *((unsigned int *)v6 + 42);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _QWORD *))off_250AE2B60[v7])(&v13, v6 + 6);
    }
    operator delete(v6);
  }
  while (v5);
LABEL_12:
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void ***)(a1 + 16);
  if (v9)
  {
    do
    {
      v12 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v12;
    }
    while (v12);
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

uint64_t sub_23966FBB4(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void **v15;
  void *v16;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v2 = *(void ***)(a1 + 152);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      sub_23966FAA0((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = *(void **)(a1 + 112);
    if (v5 != v4)
    {
      do
      {
        if (*(_BYTE *)(v5 - 8))
        {
          v8 = *(unsigned int *)(v5 - 16);
          if ((_DWORD)v8 != -1)
            ((void (*)(char *, uint64_t))off_250AE2B60[v8])(&v21, v5 - 136);
          *(_DWORD *)(v5 - 16) = -1;
        }
        v5 -= 160;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v4;
    operator delete(v6);
  }
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 96);
    v11 = *(void **)(a1 + 88);
    if (v10 != v9)
    {
      do
      {
        if (*(_BYTE *)(v10 - 8))
        {
          v12 = *(unsigned int *)(v10 - 16);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))off_250AE2B60[v12])(&v22, v10 - 136);
          *(_DWORD *)(v10 - 16) = -1;
        }
        v10 -= 160;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v9;
    operator delete(v11);
  }
  v13 = *(_QWORD **)(a1 + 64);
  while (v13)
  {
    v19 = v13;
    v13 = (_QWORD *)*v13;
    if (*((_BYTE *)v19 + 176))
    {
      v20 = *((unsigned int *)v19 + 42);
      if ((_DWORD)v20 != -1)
        ((void (*)(char *, _QWORD *))off_250AE2B60[v20])(&v23, v19 + 6);
    }
    operator delete(v19);
  }
  v14 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v14)
    operator delete(v14);
  v15 = *(void ***)(a1 + 16);
  if (v15)
  {
    do
    {
      v18 = (void **)*v15;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v18;
    }
    while (v18);
  }
  v16 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
    operator delete(v16);
  return a1;
}

void sub_23966FDA4(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::value_type *v12;
  _BYTE v13[24];
  _BYTE *v14;
  char *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15 = *(char **)a1;
  v6 = v16;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    if (v7 == a1 + 8)
    {
      v17 = v16;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v16);
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    v17 = 0;
  }
  v12 = *(std::string::value_type **)(a1 + 40);
  v8 = v13;
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9)
    goto LABEL_9;
  if (v9 != a1 + 48)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_9:
    v14 = (_BYTE *)v9;
    goto LABEL_11;
  }
  v14 = v13;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 24))(v9, v13);
LABEL_11:
  sub_239670034(&v15, &v12, a2, a3);
  if (v14 == v13)
  {
    v10 = 4;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v10 = 5;
    v8 = v14;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v10))(v8);
LABEL_16:
  if (v17 == v16)
  {
    v11 = 4;
  }
  else
  {
    if (!v17)
      return;
    v11 = 5;
    v6 = v17;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v11))(v6);
}

void sub_23966FF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19 == v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    _Unwind_Resume(exception_object);
  }
  if (!a19)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a19 + 40))(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23966FFB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_239670034(char **a1@<X0>, std::string::value_type **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  _QWORD *v8;
  char **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::string::value_type *v14;
  std::string::size_type *v15;
  std::string::size_type *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char **v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::value_type **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string::size_type *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  void **v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  std::string *v58;
  void *__p[2];
  unsigned __int8 v60;
  std::string::value_type *v61;
  _BYTE v62[24];
  _BYTE *v63;
  char *v64;
  _BYTE v65[24];
  _BYTE *v66;
  char *v67;
  _BYTE v68[24];
  _BYTE *v69;
  std::string::value_type *v70;
  _QWORD v71[3];
  _QWORD *v72;
  char *v73;
  _QWORD v74[3];
  _QWORD *v75;
  std::string::value_type *v76;
  std::string::size_type v77;
  unsigned __int8 v78;
  std::string::size_type *v79;
  char *v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v73 = *a1;
  v8 = v74;
  v9 = (char **)a1[4];
  if (v9)
  {
    if (v9 == a1 + 1)
    {
      v75 = v74;
      (*((void (**)(char **, _QWORD *))*v9 + 3))(v9, v74);
    }
    else
    {
      v75 = (_QWORD *)(*((uint64_t (**)(char **))*v9 + 2))(v9);
    }
  }
  else
  {
    v75 = 0;
  }
  v70 = *a2;
  v10 = v71;
  v11 = (uint64_t)a2[4];
  if (!v11)
    goto LABEL_9;
  if ((std::string::value_type **)v11 != a2 + 1)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_9:
    v72 = (_QWORD *)v11;
    goto LABEL_11;
  }
  v72 = v71;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, v71);
LABEL_11:
  v12 = (uint64_t)v75;
  v80 = v73;
  v13 = &v81;
  if (!v75)
  {
LABEL_14:
    v83 = (uint64_t *)v12;
    goto LABEL_16;
  }
  if (v75 != v74)
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*v75 + 16))(v75);
    goto LABEL_14;
  }
  v83 = &v81;
  (*(void (**)(_QWORD *, uint64_t *))(v74[0] + 24))(v74, &v81);
LABEL_16:
  v14 = v70;
  v76 = v70;
  if (!v72)
  {
    v79 = 0;
    v17 = v80;
    goto LABEL_22;
  }
  v15 = &v77;
  if (v72 != v71)
  {
    v16 = (std::string::size_type *)(*(uint64_t (**)(_QWORD *))(*v72 + 16))(v72);
    v79 = v16;
    v17 = v80;
    v14 = v76;
    if (v16 != &v77)
      goto LABEL_19;
LABEL_26:
    v18 = 4;
LABEL_27:
    (*(void (**)(std::string::size_type *))(*v15 + 8 * v18))(v15);
    v19 = v83;
    if (v83 == &v81)
      goto LABEL_28;
    goto LABEL_23;
  }
  v79 = &v77;
  (*(void (**)(_QWORD *, std::string::size_type *))(v71[0] + 24))(v71, &v77);
  v16 = v79;
  v17 = v80;
  v14 = v76;
  if (v79 == &v77)
    goto LABEL_26;
LABEL_19:
  if (v16)
  {
    v18 = 5;
    v15 = v16;
    goto LABEL_27;
  }
LABEL_22:
  v19 = v83;
  if (v83 == &v81)
  {
LABEL_28:
    v20 = 4;
    goto LABEL_29;
  }
LABEL_23:
  if (!v19)
    goto LABEL_30;
  v20 = 5;
  v13 = v19;
LABEL_29:
  (*(void (**)(uint64_t *))(*v13 + 8 * v20))(v13);
LABEL_30:
  if (v72 == v71)
  {
    v21 = 4;
  }
  else
  {
    if (!v72)
      goto LABEL_35;
    v21 = 5;
    v10 = v72;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v21))(v10);
LABEL_35:
  v57 = v17 - v14;
  v22 = (v17 - v14) >> 3;
  if (v75 == v74)
  {
    v23 = 4;
  }
  else
  {
    if (!v75)
      goto LABEL_40;
    v23 = 5;
    v8 = v75;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v23))(v8);
LABEL_40:
  if (v22 >= -1)
    v24 = -1;
  else
    v24 = (v17 - v14) >> 3;
  if (*(char *)(a3 + 23) >= 0)
    v25 = *(unsigned __int8 *)(a3 + 23);
  else
    v25 = *(_QWORD *)(a3 + 8);
  v67 = *a1;
  v26 = v68;
  v27 = (char **)a1[4];
  if (v27)
  {
    if (v27 == a1 + 1)
    {
      v69 = v68;
      (*((void (**)(char **, _BYTE *))a1[1] + 3))(a1 + 1, v68);
    }
    else
    {
      v69 = (_BYTE *)(*((uint64_t (**)(char **))*v27 + 2))(v27);
    }
  }
  else
  {
    v69 = 0;
  }
  v64 = *a2;
  v28 = v65;
  v29 = (uint64_t)a2[4];
  if (!v29)
    goto LABEL_54;
  if ((std::string::value_type **)v29 != a2 + 1)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
LABEL_54:
    v66 = (_BYTE *)v29;
    goto LABEL_56;
  }
  v66 = v65;
  (*((void (**)(std::string::value_type **, _BYTE *))a2[1] + 3))(a2 + 1, v65);
LABEL_56:
  v58 = a4;
  v30 = v25;
  v31 = v24;
  v32 = a2;
  v33 = v22;
  if (v67 == v64)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    do
    {
      if (!v69)
        sub_2394172E0();
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v69 + 48))(&v80);
      if ((v82 & 0x80u) == 0)
        v35 = v82;
      else
        v35 = v81;
      if ((char)v82 < 0)
        operator delete(v80);
      v34 += v35;
      v67 += 8;
    }
    while (v67 != v64);
  }
  v36 = v34 + v30 * ~v31;
  if (v66 == v65)
  {
    v39 = 4;
    v37 = v33;
    v38 = v58;
  }
  else
  {
    v37 = v33;
    v38 = v58;
    if (!v66)
      goto LABEL_71;
    v39 = 5;
    v28 = v66;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v39))(v28);
LABEL_71:
  if (v69 == v68)
  {
    v40 = 4;
  }
  else
  {
    if (!v69)
      goto LABEL_76;
    v40 = 5;
    v26 = v69;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v40))(v26);
LABEL_76:
  v38->__r_.__value_.__r.__words[0] = 0;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(v38, v36);
  v80 = *a1;
  v41 = &v81;
  v42 = (uint64_t)a1[4];
  if (!v42)
  {
LABEL_79:
    v83 = (uint64_t *)v42;
    goto LABEL_81;
  }
  if ((char **)v42 != a1 + 1)
  {
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
    goto LABEL_79;
  }
  v83 = &v81;
  (*((void (**)(char **, uint64_t *))a1[1] + 3))(a1 + 1, &v81);
LABEL_81:
  if ((v57 & 0x8000000000000000) == 0)
    goto LABEL_131;
  if (!v83)
    sub_2394172E0();
  (*(void (**)(std::string::value_type **__return_ptr, uint64_t *, char *))(*v83 + 48))(&v76, v83, v80);
  if ((v78 & 0x80u) == 0)
    v43 = (const std::string::value_type *)&v76;
  else
    v43 = v76;
  if ((v78 & 0x80u) == 0)
    v44 = v78;
  else
    v44 = v77;
  std::string::append(v38, v43, v44);
  if ((char)v78 < 0)
  {
    operator delete(v76);
    if ((unint64_t)(v37 + 1) < 2)
      goto LABEL_131;
  }
  else if ((unint64_t)(v37 + 1) < 2)
  {
    goto LABEL_131;
  }
  v45 = (uint64_t)v83;
  v80 += 8;
  v76 = v80;
  v46 = &v77;
  if (!v83)
    goto LABEL_96;
  if (v83 != &v81)
  {
    v45 = (*(uint64_t (**)(void))(*v83 + 16))();
LABEL_96:
    v79 = (std::string::size_type *)v45;
    goto LABEL_98;
  }
  v79 = &v77;
  (*(void (**)(uint64_t *, std::string::size_type *))(v81 + 24))(&v81, &v77);
LABEL_98:
  v61 = *v32;
  v47 = v62;
  v48 = (uint64_t)v32[4];
  if (!v48)
  {
LABEL_101:
    v63 = (_BYTE *)v48;
    goto LABEL_103;
  }
  if ((std::string::value_type **)v48 != v32 + 1)
  {
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    goto LABEL_101;
  }
  v63 = v62;
  (*((void (**)(std::string::value_type **, _BYTE *))v32[1] + 3))(v32 + 1, v62);
LABEL_103:
  while (v76 != v61)
  {
    v49 = *(char *)(a3 + 23);
    if (v49 >= 0)
      v50 = (const std::string::value_type *)a3;
    else
      v50 = *(const std::string::value_type **)a3;
    if (v49 >= 0)
      v51 = *(unsigned __int8 *)(a3 + 23);
    else
      v51 = *(_QWORD *)(a3 + 8);
    std::string::append(v38, v50, v51);
    if (!v79)
      sub_2394172E0();
    (*(void (**)(void **__return_ptr, std::string::size_type *, std::string::value_type *))(*v79 + 48))(__p, v79, v76);
    if ((v60 & 0x80u) == 0)
      v52 = __p;
    else
      v52 = (void **)__p[0];
    if ((v60 & 0x80u) == 0)
      v53 = v60;
    else
      v53 = (std::string::size_type)__p[1];
    std::string::append(v38, (const std::string::value_type *)v52, v53);
    if ((char)v60 < 0)
      operator delete(__p[0]);
    v76 += 8;
  }
  if (v63 == v62)
  {
    v54 = 4;
    goto LABEL_125;
  }
  if (v63)
  {
    v54 = 5;
    v47 = v63;
LABEL_125:
    (*(void (**)(_QWORD *))(*v47 + 8 * v54))(v47);
  }
  if (v79 == &v77)
  {
    v55 = 4;
  }
  else
  {
    if (!v79)
      goto LABEL_131;
    v55 = 5;
    v46 = v79;
  }
  (*(void (**)(std::string::size_type *))(*v46 + 8 * v55))(v46);
LABEL_131:
  if (v83 == &v81)
  {
    v56 = 4;
  }
  else
  {
    if (!v83)
      return;
    v56 = 5;
    v41 = v83;
  }
  (*(void (**)(uint64_t *))(*v41 + 8 * v56))(v41);
}

void sub_239670764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v45 = *(_QWORD **)(v43 - 144);
  if (v45 == v41)
  {
    v46 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_8;
    v46 = 5;
    v41 = *(_QWORD **)(v43 - 144);
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v46))(v41);
LABEL_8:
  v47 = *(_QWORD **)(v43 - 104);
  if (v47 == v42)
  {
    v48 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_13;
    v48 = 5;
    v42 = *(_QWORD **)(v43 - 104);
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v48))(v42);
LABEL_13:
  if (*(char *)(a10 + 23) < 0)
  {
    operator delete(*(void **)a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239670934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;

  if (a23 == v29)
  {
    v31 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v31 = 5;
    v29 = a23;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v31))(v29);
LABEL_6:
  if (a28 == v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x23967081CLL);
}

_QWORD *sub_239670994(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = a2[1];
  v24 = *a2;
  v25[0] = &off_250AE2C20;
  v26 = v25;
  v21 = v3;
  v22[0] = &off_250AE2C20;
  v23 = v22;
  sub_239670B94(&v24, &v21, &v15);
  v4 = v23;
  if (v23 == v22)
  {
    v5 = 4;
    v4 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v17;
  *a1 = v15;
  if (v8)
  {
    if (v8 == v16)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
    }
    else
    {
      a1[4] = v8;
      v17 = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  v9 = v20;
  a1[5] = v18;
  if (v9)
  {
    if (v9 == v19)
    {
      a1[9] = a1 + 6;
      (*(void (**)(_BYTE *))(*(_QWORD *)v9 + 24))(v9);
    }
    else
    {
      a1[9] = v9;
      v20 = 0;
    }
  }
  else
  {
    a1[9] = 0;
  }
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  v12 = v17;
  if (v17 == v16)
  {
    v13 = 4;
    v12 = v16;
    goto LABEL_30;
  }
  if (v17)
  {
    v13 = 5;
LABEL_30:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

void sub_239670B84(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_239670B94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = *a1;
  v6 = v20;
  v8 = a1 + 4;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (v7 == a1 + 1)
    {
      v21 = v20;
      (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v20);
    }
    else
    {
      v21 = v7;
      *v8 = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  v16 = *a2;
  v9 = v17;
  result = a2[4];
  if (result)
  {
    if ((uint64_t *)result == a2 + 1)
    {
      v18 = v17;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v17);
    }
    else
    {
      v18 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v11 = v21;
  *a3 = v19;
  v12 = a3 + 1;
  if (v11)
  {
    if (v11 == v20)
    {
      a3[4] = v12;
      result = (*(uint64_t (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      a3[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    a3[4] = 0;
  }
  v13 = v18;
  a3[5] = v16;
  if (v13)
  {
    if (v13 == v17)
    {
      a3[9] = a3 + 6;
      result = (*(uint64_t (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      a3[9] = v13;
      v18 = 0;
    }
  }
  else
  {
    a3[9] = 0;
  }
  if (v18 == v17)
  {
    v14 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_26;
    v14 = 5;
    v9 = v18;
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v9 + 8 * v14))(v9, v12);
LABEL_26:
  if (v21 == v20)
  {
    v15 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v15 = 5;
    v6 = v21;
  }
  return (*(uint64_t (**)(uint64_t *, _QWORD *))(*v6 + 8 * v15))(v6, v12);
}

void sub_239670D94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

void sub_239670DB8()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239670DCC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AE2C20;
  return result;
}

void sub_239670DF0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AE2C20;
}

void sub_239670E08(const char **a1@<X1>, std::string *a2@<X8>)
{
  sub_23964C500(a1, a2);
}

uint64_t sub_239670E10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn2op8ToStringMUlDpOT_E_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn2op8ToStringMUlDpOT_E_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn2op8ToStringMUlDpOT_E_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn2op8ToStringMUlDpOT_E_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239670E7C()
{
  return &unk_250AE1740;
}

_QWORD *sub_239670E88(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_23962C8FC(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_239670F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239670F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23967755C(a1, a2);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 40);
  sub_239671064(v4 + 48, a2 + 48);
  sub_239677B0C((_QWORD *)(a1 + 88), (__int128 **)(a2 + 88));
  sub_239677B0C((_QWORD *)(a1 + 112), (__int128 **)(a2 + 112));
  sub_2396716E4(a1 + 136, a2 + 136);
  return a1;
}

void sub_239671014(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  sub_23966917C(v4);
  sub_23966917C(v3);
  sub_239669224(v2);
  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

void sub_239671050(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239671064(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_239671238(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_23967117C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2396711A4(v1);
  _Unwind_Resume(a1);
}

void sub_239671190(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2396711A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396711A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v3 + 176))
    {
      v4 = *((unsigned int *)v3 + 42);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, _QWORD *))off_250AE2B60[v4])(&v7, v3 + 6);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

_QWORD *sub_239671238(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = (_QWORD *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5)
                return result;
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_239671560(a1, *a2, a3, (uint64_t)&v25);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v23 & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v5));
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      v24 = *(_QWORD *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6)
          v24 %= v6;
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *v25 = *v14;
  *v14 = v25;
LABEL_61:
  result = v25;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23967154C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239671670((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_239671560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *result;
  char *v9;
  uint64_t v10;
  _BYTE v11[2];

  v7 = a1 + 16;
  result = (char *)operator new(0xB8uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = a2;
  *((_QWORD *)result + 2) = *(_QWORD *)a3;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)result + 5) = *(_QWORD *)(a3 + 24);
  result[48] = 0;
  result[176] = 0;
  if (*(_BYTE *)(a3 + 160))
  {
    v9 = result;
    result[48] = 0;
    *((_DWORD *)result + 42) = -1;
    v10 = *(unsigned int *)(a3 + 152);
    if ((_DWORD)v10 != -1)
    {
      result = (char *)((uint64_t (*)(_BYTE *, char *, uint64_t))off_250AE2B78[v10])(v11, result + 48, a3 + 32);
      *((_DWORD *)v9 + 42) = v10;
    }
    v9[176] = 1;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23967162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 168);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v17])(&a13, v15);
  *(_DWORD *)(v14 + 168) = -1;
  sub_239671670(v13);
  _Unwind_Resume(a1);
}

uint64_t *sub_239671670(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 176))
      {
        v3 = *(unsigned int *)(v2 + 168);
        if ((_DWORD)v3 != -1)
          ((void (*)(char *, uint64_t))off_250AE2B60[v3])(&v5, v2 + 48);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2396716E4(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_239671824(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_2396717FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239669B84(v1);
  _Unwind_Resume(a1);
}

void sub_239671810(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239669B84(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239671824(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_239671CC8(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239671C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239671C74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239671C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239671C74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239671C74(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_23966FAA0(v2 + 40);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_239671CC8(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_239671DB8((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  sub_239671064((uint64_t)(__dst + 8), (uint64_t)(a2 + 4));
  v5 = *((_QWORD *)a2 + 14);
  __dst[13] = *((_QWORD *)a2 + 13);
  __dst[14] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  __dst[15] = *((_QWORD *)a2 + 15);
  return __dst;
}

void sub_239671D60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void *v5;

  v4 = *(void ***)(v1 + 40);
  if (v4)
    sub_239EC1640(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239671DB8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_239671EF8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_239671ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

void sub_239671EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239671EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_23967233C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239672350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239672368(uint64_t a1)
{
  void *__p[5];
  void *v3;
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  __p[4] = 0;
  e5rt_surface_object_create_from_iosurface();
  LOBYTE(__p[0]) = 5;
  v3 = operator new(0x30uLL);
  v4 = xmmword_239ECA000;
  strcpy((char *)v3, "Unable to create surface object from IOSurface");
  sub_23957E1BC(a1, __p, (uint64_t)&v3);
  if (SHIBYTE(v4) < 0)
    operator delete(v3);
}

void sub_239672594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;

  va_start(va, a8);
  v10 = v9;
  v12 = v10;
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  MEMORY[0x23B83E31C](v12, 0x1012C40EC159624);
  nullsub_4(v8);
  sub_239416834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396725EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_239416834(&a19);
    _Unwind_Resume(a1);
  }
  sub_239416834(&a19);
  _Unwind_Resume(a1);
}

void sub_239672644(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

void sub_239672664()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239672678(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2CB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396726B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2CB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2396726D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2396726D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239672744()
{
  return &unk_250AE2D18;
}

void sub_239672750(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  __int128 v7;
  __n128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __n128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  unint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  __int16 v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  unint64_t v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  __n128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __n128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  int32x4_t v105;
  unsigned int v106;
  int *v107;
  uint32x4_t *v108;
  unsigned int v109;
  uint32x4_t *v110;
  int *v111;
  unsigned int v112;
  int *v118;
  uint32x4_t *v119;
  unsigned int v120;
  int *v122;
  uint32x4_t *v123;
  unsigned int v124;
  __int32 v126;
  uint32x4_t *v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v132;
  unsigned int i;
  uint32x4_t *v136;
  int *v137;
  unsigned int v138;
  unsigned int v140;
  unsigned int v142;
  __n128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  __n128 v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  int32x4_t v156;
  unsigned int v157;
  int *v158;
  uint32x4_t *v159;
  unsigned int v160;
  uint32x4_t *v161;
  int *v162;
  unsigned int v163;
  int *v164;
  uint32x4_t *v165;
  unsigned int v166;
  int *v167;
  uint32x4_t *v168;
  unsigned int v169;
  __int32 v170;
  uint32x4_t *v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int j;
  uint32x4_t *v177;
  int *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  __n128 v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  __n128 v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  float v193;
  int32x4_t v194;
  unsigned int v195;
  int *v196;
  float *v197;
  int v198;
  unsigned int v199;
  float *v200;
  int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  __int32 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  float *v214;
  float *v215;
  float *v216;
  float *v217;
  int v218;
  float *v219;
  float *v220;
  float *v221;
  float *v222;
  float *v223;
  int *v224;
  int v225;
  float *v226;
  float *v227;
  float *v228;
  float *v229;
  float *v230;
  int *v231;
  float *v232;
  float *v233;
  int v234;
  int *v235;
  int v236;
  int v237;
  float *v238;
  float *v239;
  float *v240;
  int v241;
  int *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  float *v250;
  unsigned int v251;
  int v252;
  float *v253;
  int v254;
  int *v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  float *v262;
  int v263;
  float *v264;
  float *v265;
  int *v266;
  float *v267;
  float *v268;
  int v269;
  int *v270;
  int v271;
  float *v272;
  int v273;
  float *v274;
  float *v275;
  int *v276;
  float *v277;
  float *v278;
  unsigned int v279;
  int *v280;
  unsigned int v281;
  int v282;
  uint64_t v283;
  float *v284;
  unsigned int v285;
  int *v286;
  unsigned int v287;
  __n128 v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  __n128 v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  int v305;
  float *v306;
  int *v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  int v311;
  uint32x4_t v312;
  __int128 v313;
  __n128 v314;
  int v315;
  uint64_t (**v316)();
  __int128 v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  __int16 v322;
  char v323;
  uint32x4_t v324;
  __int128 v325;
  __n128 v326;
  int v327;
  uint64_t (**v328)();
  __int128 v329;
  _BYTE v330[30];
  char v331;
  unsigned int v332;
  void *__p[2];
  _OWORD v334[3];
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  unsigned int v339;
  uint32x4_t v340;
  __int128 v341;
  __n128 v342;
  int v343;
  uint64_t (**v344)();
  __int128 v345;
  _BYTE v346[30];
  char v347;
  uint32x4_t *v348;
  int **v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  uint32x4_t v355;
  unsigned int v356;
  unsigned int v357;
  unint64_t v358;
  unsigned int v359;
  unint64_t v360;
  unsigned int v361;
  unint64_t v362;
  unsigned int v363;
  unint64_t v364;
  int *v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  uint64_t v369;
  __int8 v370;
  __int8 v371;
  __int8 v372;
  __int8 v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;

  v338 = 0;
  v336 = 0u;
  v337 = 0u;
  v335 = 0u;
  memset(v334, 0, sizeof(v334));
  *(_OWORD *)__p = 0u;
  sub_239644B20(__p, 0, 0, 0, 0, 0);
  memset((char *)v334 + 4, 0, 24);
  *(_QWORD *)((char *)&v334[1] + 12) = 0x1000000000;
  BYTE8(v334[2]) = 0;
  LOBYTE(v338) = 0;
  v339 = 0;
  v6 = *(_DWORD *)(a2 + 48);
  if ((~v6 & 0x11) != 0)
  {
    if ((~v6 & 0x41) != 0)
    {
      sub_239A444D4((uint64_t)"unknown file", 657, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (*(_BYTE *)(a2 + 112))
    {
      v17 = (uint64_t *)(a2 + 96);
      if (*(_BYTE *)(a2 + 108) && *(_QWORD *)(a2 + 96))
      {
        v18 = *(_QWORD *)(a2 + 64);
        v19 = *(std::__shared_weak_count **)(a2 + 72);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v18 + 88))(v18, 0, "unknown location");
        v6 = *(_DWORD *)(a2 + 48);
      }
    }
    else
    {
      v17 = (uint64_t *)(a2 + 40);
    }
    v23 = *v17;
    v355 = *(uint32x4_t *)a2;
    v356 = *(_DWORD *)(a2 + 16);
    v24 = *(_DWORD *)(a2 + 36) >> 2;
    v312 = vshrq_n_u32(*(uint32x4_t *)(a2 + 20), 2uLL);
    LODWORD(v313) = v24;
    BYTE4(v313) = 1;
    LODWORD(v365) = v6;
    sub_239643F70(&v340, v23, &v355, &v312, &v365, a2 + 56);
    v324 = v340;
    v325 = v341;
    v8 = v342;
    v326 = v342;
    v327 = v343;
    LOBYTE(v328) = 0;
    v331 = 0;
    if (v347)
    {
      v328 = &off_250ADB210;
      v25 = v345;
      v345 = 0uLL;
      v329 = v25;
      *(_OWORD *)v330 = *(_OWORD *)v346;
      *(_OWORD *)&v330[14] = *(_OWORD *)&v346[14];
      v331 = 1;
      v332 = 1;
      v26 = nullsub_4(v346);
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
      if (*((_QWORD *)&v345 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v26);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v8 = nullsub_4(&v344);
      v30 = v339;
      if (v339 != -1)
        goto LABEL_39;
    }
    else
    {
      v332 = 1;
      v30 = v339;
      if (v339 != -1)
LABEL_39:
        ((void (*)(uint32x4_t *, void **, __n128))off_250AE2E40[v30])(&v340, __p, v8);
    }
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    v324 = *(uint32x4_t *)a2;
    v325 = v7;
    v8 = *(__n128 *)(a2 + 32);
    v326 = v8;
    v327 = *(_DWORD *)(a2 + 48);
    LOBYTE(v328) = 0;
    v331 = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v328 = &off_250ADB210;
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(std::__shared_weak_count **)(a2 + 72);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = *(_QWORD *)(a2 + 96);
        v14 = *(_DWORD *)(a2 + 104);
        v15 = *(_WORD *)(a2 + 108);
        do
          v16 = __ldxr(v11);
        while (__stxr(v16 + 1, v11));
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 96);
        v14 = *(_DWORD *)(a2 + 104);
        v15 = *(_WORD *)(a2 + 108);
      }
      *(_QWORD *)&v329 = v9;
      *((_QWORD *)&v329 + 1) = v10;
      *(_QWORD *)v330 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)&v330[8] = *(_DWORD *)(a2 + 88);
      *(_QWORD *)&v330[16] = v13;
      *(_DWORD *)&v330[24] = v14;
      *(_WORD *)&v330[28] = v15;
      if (v10)
      {
        v31 = (unint64_t *)&v10->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v331 = 1;
    }
    v332 = 0;
    v30 = v339;
    if (v339 != -1)
      goto LABEL_39;
  }
  if (v332 == 1)
  {
    v312 = v324;
    v313 = v325;
    v314 = v326;
    v315 = v327;
    LOBYTE(v316) = 0;
    v323 = 0;
    if (v331)
    {
      v316 = &off_250ADB210;
      v40 = v329;
      if (*((_QWORD *)&v329 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v329 + 1) + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        v43 = *(_QWORD *)&v330[16];
        v44 = *(_DWORD *)&v330[24];
        v45 = *(_WORD *)&v330[28];
        do
          v46 = __ldxr(v41);
        while (__stxr(v46 + 1, v41));
      }
      else
      {
        v43 = *(_QWORD *)&v330[16];
        v44 = *(_DWORD *)&v330[24];
        v45 = *(_WORD *)&v330[28];
      }
      v317 = v40;
      v318 = *(_QWORD *)v330;
      v319 = *(_DWORD *)&v330[8];
      v320 = v43;
      v321 = v44;
      v322 = v45;
      if (*((_QWORD *)&v40 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v40 + 1) + 16))(*((_QWORD *)&v40 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
        }
      }
      v323 = 1;
    }
    v76 = *a3;
    if (*a3)
    {
      if (v76 == 2)
      {
        sub_239675A64(a3, v5, (uint64_t)__p);
        v340 = *(uint32x4_t *)__p;
        v341 = v334[0];
        v342 = (__n128)v334[1];
        v343 = v334[2];
        LOBYTE(v344) = 0;
        v347 = 0;
        if ((_BYTE)v338)
        {
          v344 = &off_250ADB1D0;
          v84 = v335;
          if (*((_QWORD *)&v335 + 1))
          {
            v85 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
            v87 = v337;
            v88 = DWORD2(v337);
            v89 = WORD6(v337);
            do
              v90 = __ldxr(v85);
            while (__stxr(v90 + 1, v85));
          }
          else
          {
            v87 = v337;
            v88 = DWORD2(v337);
            v89 = WORD6(v337);
          }
          v345 = v84;
          *(_QWORD *)v346 = v336;
          *(_DWORD *)&v346[8] = DWORD2(v336);
          *(_QWORD *)&v346[16] = v87;
          *(_DWORD *)&v346[24] = v88;
          *(_WORD *)&v346[28] = v89;
          if (*((_QWORD *)&v84 + 1))
          {
            v91 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
            }
          }
          v347 = 1;
        }
        sub_239490E34((uint64_t)&v312, (uint64_t)&v355);
        sub_239646938((uint64_t)&v340, v93, (uint64_t)&v365);
        v348 = &v355;
        v349 = &v365;
        sub_239660078((uint64_t *)&v348);
        if (v347)
        {
          v94 = nullsub_4(v346);
          v95 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
          if (*((_QWORD *)&v345 + 1))
          {
            v96 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v95->__on_zero_shared)(v95, v94);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          nullsub_4(&v344);
        }
        if (!(_BYTE)v338)
          goto LABEL_189;
        v98 = nullsub_4(&v336);
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
        if (!*((_QWORD *)&v335 + 1))
          goto LABEL_188;
        v100 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        goto LABEL_186;
      }
      if (v76 == 1)
      {
        sub_2396757D0(a3, v5, (uint64_t)__p);
        v340 = *(uint32x4_t *)__p;
        v341 = v334[0];
        v342 = (__n128)v334[1];
        v343 = v334[2];
        LOBYTE(v344) = 0;
        v347 = 0;
        if ((_BYTE)v338)
        {
          v344 = &off_250ADB1D0;
          v77 = v335;
          if (*((_QWORD *)&v335 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
            v80 = v337;
            v81 = DWORD2(v337);
            v82 = WORD6(v337);
            do
              v83 = __ldxr(v78);
            while (__stxr(v83 + 1, v78));
          }
          else
          {
            v80 = v337;
            v81 = DWORD2(v337);
            v82 = WORD6(v337);
          }
          v345 = v77;
          *(_QWORD *)v346 = v336;
          *(_DWORD *)&v346[8] = DWORD2(v336);
          *(_QWORD *)&v346[16] = v80;
          *(_DWORD *)&v346[24] = v81;
          *(_WORD *)&v346[28] = v82;
          if (*((_QWORD *)&v77 + 1))
          {
            v102 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
            }
          }
          v347 = 1;
        }
        sub_239490E34((uint64_t)&v312, (uint64_t)&v365);
        sub_2396454A0((uint64_t)&v340, v104, (uint64_t)&v348);
        v105.i64[0] = __PAIR64__(v368, v366);
        v105.i64[1] = v369;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v105))) & 1) == 0 && v367)
        {
          v355.i8[12] = v370;
          v355.i8[13] = v371;
          v355.i8[14] = v372;
          v355.i8[15] = v373;
          v356 = v350;
          v355.i32[2] = v366 - 1;
          v357 = v367 - 1;
          v358 = v374 | ((unint64_t)v351 << 32);
          v355.i64[0] = 0;
          v360 = v375 | ((unint64_t)v352 << 32);
          v106 = v369 - 1;
          v359 = v368 - 1;
          v361 = v369 - 1;
          v362 = v376 | ((unint64_t)v353 << 32);
          v364 = v377 | ((unint64_t)v354 << 32);
          v107 = v365;
          v108 = v348;
          v363 = HIDWORD(v369) - 1;
          if (HIDWORD(v369) != 1)
          {
            v109 = 0;
            do
            {
              v110 = v108;
              v111 = v107;
              if (v361)
              {
                v112 = 0;
                v111 = v107;
                v110 = v108;
                do
                {
                  v118 = v111;
                  v119 = v110;
                  if (v359)
                  {
                    v120 = 0;
                    v118 = v111;
                    v119 = v110;
                    do
                    {
                      v122 = v118;
                      v123 = v119;
                      if (v357)
                      {
                        v124 = 0;
                        v122 = v118;
                        v123 = v119;
                        do
                        {
                          v126 = v355.i32[2];
                          v127 = v123;
                          v128 = v122;
                          if (v355.i32[2])
                          {
                            v129 = 4 * v355.u32[3];
                            v130 = 2 * v356;
                            v127 = v123;
                            v128 = v122;
                            do
                            {
                              _S0 = *v128;
                              __asm { FCVT            H0, S0 }
                              v127->i16[0] = _S0;
                              v128 = (int *)((char *)v128 + v129);
                              v127 = (uint32x4_t *)((char *)v127 + v130);
                              --v126;
                            }
                            while (v126);
                          }
                          _S0 = *v128;
                          __asm { FCVT            H0, S0 }
                          v127->i16[0] = _S0;
                          v122 += v358;
                          v123 = (uint32x4_t *)((char *)v123 + 2 * HIDWORD(v358));
                          ++v124;
                        }
                        while (v124 < v357);
                      }
                      if (v355.i32[2])
                      {
                        v132 = 0;
                        do
                        {
                          _S0 = *v122;
                          __asm { FCVT            H0, S0 }
                          v123->i16[0] = _S0;
                          v122 += v355.u32[3];
                          v123 = (uint32x4_t *)((char *)v123 + 2 * v356);
                          ++v132;
                        }
                        while (v132 < v355.i32[2]);
                      }
                      _S0 = *v122;
                      __asm { FCVT            H0, S0 }
                      v123->i16[0] = _S0;
                      v118 += v360;
                      v119 = (uint32x4_t *)((char *)v119 + 2 * HIDWORD(v360));
                      ++v120;
                    }
                    while (v120 < v359);
                  }
                  if (v357)
                  {
                    for (i = 0; i < v357; ++i)
                    {
                      v136 = v119;
                      v137 = v118;
                      if (v355.i32[2])
                      {
                        v138 = 0;
                        v137 = v118;
                        v136 = v119;
                        do
                        {
                          _S0 = *v137;
                          __asm { FCVT            H0, S0 }
                          v136->i16[0] = _S0;
                          v137 += v355.u32[3];
                          v136 = (uint32x4_t *)((char *)v136 + 2 * v356);
                          ++v138;
                        }
                        while (v138 < v355.i32[2]);
                      }
                      _S0 = *v137;
                      __asm { FCVT            H0, S0 }
                      v136->i16[0] = _S0;
                      v118 += v358;
                      v119 = (uint32x4_t *)((char *)v119 + 2 * HIDWORD(v358));
                    }
                  }
                  if (v355.i32[2])
                  {
                    v140 = 0;
                    do
                    {
                      _S0 = *v118;
                      __asm { FCVT            H0, S0 }
                      v119->i16[0] = _S0;
                      v118 += v355.u32[3];
                      v119 = (uint32x4_t *)((char *)v119 + 2 * v356);
                      ++v140;
                    }
                    while (v140 < v355.i32[2]);
                  }
                  _S0 = *v118;
                  __asm { FCVT            H0, S0 }
                  v119->i16[0] = _S0;
                  v111 += v362;
                  v110 = (uint32x4_t *)((char *)v110 + 2 * HIDWORD(v362));
                  ++v112;
                }
                while (v112 < v361);
              }
              sub_239675EDC(&v355, v111, v110);
              v107 += v364;
              v108 = (uint32x4_t *)((char *)v108 + 2 * HIDWORD(v364));
              ++v109;
            }
            while (v109 < v363);
            v106 = v361;
          }
          if (v106)
          {
            v142 = 0;
            do
            {
              sub_239675EDC(&v355, v107, v108);
              v107 += v362;
              v108 = (uint32x4_t *)((char *)v108 + 2 * HIDWORD(v362));
              ++v142;
            }
            while (v142 < v361);
          }
          sub_239675EDC(&v355, v107, v108);
        }
        if (v347)
        {
          v143 = nullsub_4(v346);
          v144 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
          if (*((_QWORD *)&v345 + 1))
          {
            v145 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v144->__on_zero_shared)(v144, v143);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          nullsub_4(&v344);
        }
        if (!(_BYTE)v338)
          goto LABEL_189;
        v98 = nullsub_4(&v336);
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
        if (!*((_QWORD *)&v335 + 1))
        {
LABEL_188:
          nullsub_4((char *)&v334[2] + 8);
LABEL_189:
          if (!v323)
            goto LABEL_367;
          v148 = nullsub_4(&v318);
          v149 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
          if (!*((_QWORD *)&v317 + 1))
            goto LABEL_366;
          v150 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          goto LABEL_364;
        }
        v147 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
        do
          v101 = __ldaxr(v147);
        while (__stlxr(v101 - 1, v147));
LABEL_186:
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v99->__on_zero_shared)(v99, v98);
          std::__shared_weak_count::__release_weak(v99);
        }
        goto LABEL_188;
      }
      v303 = 697;
    }
    else
    {
      v303 = 710;
    }
    sub_239A444D4((uint64_t)"unknown file", v303, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v332)
    goto LABEL_367;
  v312 = v324;
  v313 = v325;
  v314 = v326;
  v315 = v327;
  LOBYTE(v316) = 0;
  v323 = 0;
  if (v331)
  {
    v316 = &off_250ADB210;
    v33 = v329;
    if (*((_QWORD *)&v329 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v329 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = *(_QWORD *)&v330[16];
      v37 = *(_DWORD *)&v330[24];
      v38 = *(_WORD *)&v330[28];
      do
        v39 = __ldxr(v34);
      while (__stxr(v39 + 1, v34));
    }
    else
    {
      v36 = *(_QWORD *)&v330[16];
      v37 = *(_DWORD *)&v330[24];
      v38 = *(_WORD *)&v330[28];
    }
    v317 = v33;
    v318 = *(_QWORD *)v330;
    v319 = *(_DWORD *)&v330[8];
    v320 = v36;
    v321 = v37;
    v322 = v38;
    if (*((_QWORD *)&v33 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
      }
    }
    v323 = 1;
  }
  v49 = *a3;
  if (*a3 == 2)
  {
    sub_239675A64(a3, v5, (uint64_t)__p);
    v340 = *(uint32x4_t *)__p;
    v341 = v334[0];
    v342 = (__n128)v334[1];
    v343 = v334[2];
    LOBYTE(v344) = 0;
    v347 = 0;
    if ((_BYTE)v338)
    {
      v344 = &off_250ADB1D0;
      v67 = v335;
      if (*((_QWORD *)&v335 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
        v70 = v337;
        v71 = DWORD2(v337);
        v72 = WORD6(v337);
        do
          v73 = __ldxr(v68);
        while (__stxr(v73 + 1, v68));
      }
      else
      {
        v70 = v337;
        v71 = DWORD2(v337);
        v72 = WORD6(v337);
      }
      v345 = v67;
      *(_QWORD *)v346 = v336;
      *(_DWORD *)&v346[8] = DWORD2(v336);
      *(_QWORD *)&v346[16] = v70;
      *(_DWORD *)&v346[24] = v71;
      *(_WORD *)&v346[28] = v72;
      if (*((_QWORD *)&v67 + 1))
      {
        v190 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 16))(*((_QWORD *)&v67 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
        }
      }
      v347 = 1;
    }
    sub_23949BB44((uint64_t)&v312, v66, (uint64_t)&v365);
    sub_239646938((uint64_t)&v340, v192, (uint64_t)&v348);
    v193 = *(float *)&v369;
    v194.i64[0] = __PAIR64__(v368, v366);
    v194.i64[1] = v369;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v194))) & 1) != 0 || !v367)
      goto LABEL_327;
    v355.i8[12] = v370;
    v355.i8[13] = v371;
    v355.i8[14] = v372;
    v355.i8[15] = v373;
    v356 = v350;
    v355.i32[2] = v366 - 1;
    v357 = v367 - 1;
    v358 = v374 | ((unint64_t)v351 << 32);
    v355.i64[0] = 0;
    v360 = v375 | ((unint64_t)v352 << 32);
    v195 = v369 - 1;
    v359 = v368 - 1;
    v361 = v369 - 1;
    v362 = v376 | ((unint64_t)v353 << 32);
    v364 = v377 | ((unint64_t)v354 << 32);
    v196 = v365;
    v197 = (float *)v348;
    v363 = HIDWORD(v369) - 1;
    if (HIDWORD(v369) == 1)
    {
LABEL_323:
      if (v195)
      {
        v287 = 0;
        do
        {
          v193 = sub_2396624F4(&v355, v196, v197, v193);
          v196 = (int *)((char *)v196 + v362);
          v197 += HIDWORD(v362);
          ++v287;
        }
        while (v287 < v361);
      }
      sub_2396624F4(&v355, v196, v197, v193);
LABEL_327:
      if (v347)
      {
        v288 = nullsub_4(v346);
        v289 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
        if (*((_QWORD *)&v345 + 1))
        {
          v290 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
          do
            v291 = __ldaxr(v290);
          while (__stlxr(v291 - 1, v290));
          if (!v291)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v289->__on_zero_shared)(v289, v288);
            std::__shared_weak_count::__release_weak(v289);
          }
        }
        nullsub_4(&v344);
      }
      if (!(_BYTE)v338)
        goto LABEL_360;
      v186 = nullsub_4(&v336);
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
      if (!*((_QWORD *)&v335 + 1))
        goto LABEL_359;
      v292 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
      do
        v189 = __ldaxr(v292);
      while (__stlxr(v189 - 1, v292));
LABEL_357:
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v187->__on_zero_shared)(v187, v186);
        std::__shared_weak_count::__release_weak(v187);
      }
      goto LABEL_359;
    }
    v198 = 0;
    while (1)
    {
      v305 = v198;
      v199 = v361;
      v306 = v197;
      v307 = v196;
      v200 = v197;
      v201 = v196;
      if (v361)
        break;
LABEL_262:
      v193 = sub_2396624F4(&v355, v201, v200, v193);
      v196 = (int *)((char *)v307 + v364);
      v197 = &v306[HIDWORD(v364)];
      v198 = v305 + 1;
      if (v305 + 1 >= v363)
      {
        v195 = v361;
        goto LABEL_323;
      }
    }
    v202 = v359;
    v203 = v362;
    v204 = v357;
    v205 = v355.i32[2];
    if (v359)
    {
      v207 = v360;
      v206 = HIDWORD(v360);
      v201 = v307;
      if (v357)
      {
        v310 = 4 * HIDWORD(v362);
        v208 = v358;
        v209 = HIDWORD(v360);
        v210 = 4 * HIDWORD(v358);
        v211 = 0;
        if (v355.i32[2])
        {
          v212 = v355.u32[3];
          v213 = 4 * v356;
          v214 = &v197[(unint64_t)v210 / 4];
          v215 = &v197[v209];
          v216 = &v197[HIDWORD(v360) + (unint64_t)HIDWORD(v358)];
          v217 = &v197[(unint64_t)v210 / 4 + v209];
          v200 = v197;
          v309 = v361;
          v308 = v362;
          do
          {
            v311 = v211;
            v218 = 0;
            v219 = v217;
            v220 = v216;
            v221 = v215;
            v222 = v214;
            v223 = v200;
            v224 = v201;
            do
            {
              v225 = 0;
              v226 = v221;
              v227 = v220;
              v228 = v219;
              v229 = v222;
              v230 = v223;
              v231 = v224;
              do
              {
                v232 = v229;
                v233 = v230;
                v234 = v205;
                v235 = v231;
                do
                {
                  LOBYTE(v193) = *(_BYTE *)v235;
                  v193 = (float)LODWORD(v193);
                  *v233 = v193;
                  v235 = (int *)((char *)v235 + v212);
                  v233 = (float *)((char *)v233 + v213);
                  --v234;
                }
                while (v234);
                LOBYTE(v193) = *(_BYTE *)v235;
                v193 = (float)LODWORD(v193);
                *v233 = v193;
                v231 = (int *)((char *)v231 + v208);
                v230 = (float *)((char *)v230 + v210);
                ++v225;
                v229 = &v232[(unint64_t)v210 / 4];
              }
              while (v225 != v204);
              v236 = v205;
              do
              {
                LOBYTE(v193) = *(_BYTE *)v231;
                v193 = (float)LODWORD(v193);
                *v232 = v193;
                v231 = (int *)((char *)v231 + v212);
                v232 = (float *)((char *)v232 + v213);
                --v236;
              }
              while (v236);
              LOBYTE(v193) = *(_BYTE *)v231;
              v224 = (int *)((char *)v224 + v207);
              v223 = (float *)((char *)v223 + v209 * 4);
              ++v218;
              v222 = (float *)((char *)v222 + v209 * 4);
              v193 = (float)LODWORD(v193);
              *v232 = v193;
              v221 = &v226[v209];
              v220 = &v227[v209];
              v219 = &v228[v209];
            }
            while (v218 != v202);
            v237 = 0;
            do
            {
              v238 = v227;
              v239 = v228;
              v240 = v226;
              v241 = v205;
              v242 = v224;
              do
              {
                LOBYTE(v193) = *(_BYTE *)v242;
                v193 = (float)LODWORD(v193);
                *v240 = v193;
                v242 = (int *)((char *)v242 + v212);
                v240 = (float *)((char *)v240 + v213);
                --v241;
              }
              while (v241);
              LOBYTE(v193) = *(_BYTE *)v242;
              v193 = (float)LODWORD(v193);
              *v240 = v193;
              v224 = (int *)((char *)v224 + v208);
              v226 = (float *)((char *)v226 + v210);
              ++v237;
              v227 = (float *)((char *)v227 + v210);
              v228 = (float *)((char *)v228 + v210);
            }
            while (v237 != v204);
            v243 = v205;
            do
            {
              LOBYTE(v193) = *(_BYTE *)v224;
              v193 = (float)LODWORD(v193);
              *v239 = v193;
              v224 = (int *)((char *)v224 + v212);
              v238 = (float *)((char *)v238 + v213);
              v239 = (float *)((char *)v239 + v213);
              --v243;
            }
            while (v243);
            LOBYTE(v193) = *(_BYTE *)v224;
            v201 = (int *)((char *)v201 + v308);
            v200 = (float *)((char *)v200 + v310);
            v211 = v311 + 1;
            v214 = (float *)((char *)v214 + v310);
            v193 = (float)LODWORD(v193);
            *v238 = v193;
            v215 = (float *)((char *)v215 + v310);
            v216 = (float *)((char *)v216 + v310);
            v217 = (float *)((char *)v217 + v310);
          }
          while (v311 + 1 != v309);
        }
        else
        {
          v272 = &v197[v209];
          v200 = v197;
          do
          {
            v273 = 0;
            v274 = v272;
            v275 = v200;
            v276 = v201;
            do
            {
              v277 = v274;
              v278 = v275;
              v279 = v204;
              v280 = v276;
              do
              {
                LOBYTE(v193) = *(_BYTE *)v280;
                v193 = (float)LODWORD(v193);
                *v278 = v193;
                v280 = (int *)((char *)v280 + v208);
                v278 = (float *)((char *)v278 + v210);
                --v279;
              }
              while (v279);
              LOBYTE(v193) = *(_BYTE *)v280;
              v193 = (float)LODWORD(v193);
              *v278 = v193;
              v276 = (int *)((char *)v276 + v207);
              v275 = (float *)((char *)v275 + v209 * 4);
              ++v273;
              v274 = &v277[v209];
            }
            while (v273 != v202);
            v281 = v204;
            do
            {
              LOBYTE(v193) = *(_BYTE *)v276;
              v193 = (float)LODWORD(v193);
              *v277 = v193;
              v276 = (int *)((char *)v276 + v208);
              v277 = (float *)((char *)v277 + v210);
              --v281;
            }
            while (v281);
            LOBYTE(v193) = *(_BYTE *)v276;
            v193 = (float)LODWORD(v193);
            *v277 = v193;
            v201 = (int *)((char *)v201 + v203);
            v200 = (float *)((char *)v200 + v310);
            ++v211;
            v272 = (float *)((char *)v272 + v310);
          }
          while (v211 != v199);
        }
      }
      else if (v355.i32[2])
      {
        v257 = 0;
        v258 = 4 * HIDWORD(v362);
        v259 = HIDWORD(v360);
        v260 = v355.u32[3];
        v261 = 4 * v356;
        v262 = &v197[v259];
        v200 = v197;
        do
        {
          v263 = 0;
          v264 = v262;
          v265 = v200;
          v266 = v201;
          do
          {
            v267 = v264;
            v268 = v265;
            v269 = v205;
            v270 = v266;
            do
            {
              LOBYTE(v193) = *(_BYTE *)v270;
              v193 = (float)LODWORD(v193);
              *v268 = v193;
              v270 = (int *)((char *)v270 + v260);
              v268 = (float *)((char *)v268 + v261);
              --v269;
            }
            while (v269);
            LOBYTE(v193) = *(_BYTE *)v270;
            v193 = (float)LODWORD(v193);
            *v268 = v193;
            v266 = (int *)((char *)v266 + v207);
            v265 = (float *)((char *)v265 + v259 * 4);
            ++v263;
            v264 = &v267[v259];
          }
          while (v263 != v202);
          v271 = v205;
          do
          {
            LOBYTE(v193) = *(_BYTE *)v266;
            v193 = (float)LODWORD(v193);
            *v267 = v193;
            v266 = (int *)((char *)v266 + v260);
            v267 = (float *)((char *)v267 + v261);
            --v271;
          }
          while (v271);
          LOBYTE(v193) = *(_BYTE *)v266;
          v193 = (float)LODWORD(v193);
          *v267 = v193;
          v201 = (int *)((char *)v201 + v203);
          v200 = (float *)((char *)v200 + v258);
          ++v257;
          v262 = (float *)((char *)v262 + v258);
        }
        while (v257 != v199);
      }
      else
      {
        v282 = 0;
        v283 = 4 * HIDWORD(v362);
        v200 = v197;
        do
        {
          v284 = v200;
          v285 = v202;
          v286 = v201;
          do
          {
            LOBYTE(v193) = *(_BYTE *)v286;
            v193 = (float)LODWORD(v193);
            *v284 = v193;
            v286 = (int *)((char *)v286 + v207);
            v284 += v206;
            --v285;
          }
          while (v285);
          LOBYTE(v193) = *(_BYTE *)v286;
          v193 = (float)LODWORD(v193);
          *v284 = v193;
          v201 = (int *)((char *)v201 + v203);
          v200 = (float *)((char *)v200 + v283);
          ++v282;
        }
        while (v282 != v199);
      }
      goto LABEL_262;
    }
    v244 = v358;
    v245 = 4 * HIDWORD(v362);
    v246 = v355.u32[3];
    v247 = 4 * HIDWORD(v358);
    v248 = 4 * v356;
    v200 = v197;
    v201 = v307;
    while (1)
    {
      v249 = v201;
      v250 = v200;
      if (!v204)
        goto LABEL_292;
      v250 = v200;
      v251 = v204;
      v249 = v201;
      if (v205)
        break;
      do
      {
        LOBYTE(v193) = *(_BYTE *)v249;
        v193 = (float)LODWORD(v193);
        *v250 = v193;
        v249 = (int *)((char *)v249 + v244);
        v250 = (float *)((char *)v250 + v247);
        --v251;
      }
      while (v251);
LABEL_285:
      LOBYTE(v193) = *(_BYTE *)v249;
      v193 = (float)LODWORD(v193);
      *v250 = v193;
      v201 = (int *)((char *)v201 + v203);
      v200 = (float *)((char *)v200 + v245);
      if (++v202 == v199)
        goto LABEL_262;
    }
    v252 = 0;
    v250 = v200;
    v249 = v201;
    do
    {
      v253 = v250;
      v254 = v205;
      v255 = v249;
      do
      {
        LOBYTE(v193) = *(_BYTE *)v255;
        v193 = (float)LODWORD(v193);
        *v253 = v193;
        v255 = (int *)((char *)v255 + v246);
        v253 = (float *)((char *)v253 + v248);
        --v254;
      }
      while (v254);
      LOBYTE(v193) = *(_BYTE *)v255;
      v193 = (float)LODWORD(v193);
      *v253 = v193;
      v249 = (int *)((char *)v249 + v244);
      v250 = (float *)((char *)v250 + v247);
      ++v252;
    }
    while (v252 != v204);
LABEL_292:
    if (v205)
    {
      v256 = v205;
      do
      {
        LOBYTE(v193) = *(_BYTE *)v249;
        v193 = (float)LODWORD(v193);
        *v250 = v193;
        v249 = (int *)((char *)v249 + v246);
        v250 = (float *)((char *)v250 + v248);
        --v256;
      }
      while (v256);
    }
    goto LABEL_285;
  }
  if (v49 == 1)
  {
    sub_2396757D0(a3, v5, (uint64_t)__p);
    v340 = *(uint32x4_t *)__p;
    v341 = v334[0];
    v342 = (__n128)v334[1];
    v343 = v334[2];
    LOBYTE(v344) = 0;
    v347 = 0;
    if ((_BYTE)v338)
    {
      v344 = &off_250ADB1D0;
      v59 = v335;
      if (*((_QWORD *)&v335 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        v62 = v337;
        v63 = DWORD2(v337);
        v64 = WORD6(v337);
        do
          v65 = __ldxr(v60);
        while (__stxr(v65 + 1, v60));
      }
      else
      {
        v62 = v337;
        v63 = DWORD2(v337);
        v64 = WORD6(v337);
      }
      v345 = v59;
      *(_QWORD *)v346 = v336;
      *(_DWORD *)&v346[8] = DWORD2(v336);
      *(_QWORD *)&v346[16] = v62;
      *(_DWORD *)&v346[24] = v63;
      *(_WORD *)&v346[28] = v64;
      if (*((_QWORD *)&v59 + 1))
      {
        v152 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v59 + 1) + 16))(*((_QWORD *)&v59 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v59 + 1));
        }
      }
      v347 = 1;
    }
    sub_23949BB44((uint64_t)&v312, v58, (uint64_t)&v365);
    sub_2396454A0((uint64_t)&v340, v154, (uint64_t)&v348);
    _S0 = *(float *)&v369;
    v156.i64[0] = __PAIR64__(v368, v366);
    v156.i64[1] = v369;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v156))) & 1) == 0 && v367)
    {
      v355.i8[12] = v370;
      v355.i8[13] = v371;
      v355.i8[14] = v372;
      v355.i8[15] = v373;
      v356 = v350;
      v355.i32[2] = v366 - 1;
      v357 = v367 - 1;
      v358 = v374 | ((unint64_t)v351 << 32);
      v355.i64[0] = 0;
      v360 = v375 | ((unint64_t)v352 << 32);
      v157 = v369 - 1;
      v359 = v368 - 1;
      v361 = v369 - 1;
      v362 = v376 | ((unint64_t)v353 << 32);
      v364 = v377 | ((unint64_t)v354 << 32);
      v158 = v365;
      v159 = v348;
      v363 = HIDWORD(v369) - 1;
      if (HIDWORD(v369) != 1)
      {
        v160 = 0;
        do
        {
          v161 = v159;
          v162 = v158;
          if (v361)
          {
            v163 = 0;
            v162 = v158;
            v161 = v159;
            do
            {
              v164 = v162;
              v165 = v161;
              if (v359)
              {
                v166 = 0;
                v164 = v162;
                v165 = v161;
                do
                {
                  v167 = v164;
                  v168 = v165;
                  if (v357)
                  {
                    v169 = 0;
                    v167 = v164;
                    v168 = v165;
                    do
                    {
                      v170 = v355.i32[2];
                      v171 = v168;
                      v172 = v167;
                      if (v355.i32[2])
                      {
                        v173 = v355.u32[3];
                        v174 = 2 * v356;
                        v171 = v168;
                        v172 = v167;
                        do
                        {
                          LOBYTE(_S0) = *(_BYTE *)v172;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v171->i16[0] = LOWORD(_S0);
                          v172 = (int *)((char *)v172 + v173);
                          v171 = (uint32x4_t *)((char *)v171 + v174);
                          --v170;
                        }
                        while (v170);
                      }
                      LOBYTE(_S0) = *(_BYTE *)v172;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v171->i16[0] = LOWORD(_S0);
                      v167 = (int *)((char *)v167 + v358);
                      v168 = (uint32x4_t *)((char *)v168 + 2 * HIDWORD(v358));
                      ++v169;
                    }
                    while (v169 < v357);
                  }
                  if (v355.i32[2])
                  {
                    v175 = 0;
                    do
                    {
                      LOBYTE(_S0) = *(_BYTE *)v167;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v168->i16[0] = LOWORD(_S0);
                      v167 = (int *)((char *)v167 + v355.i32[3]);
                      v168 = (uint32x4_t *)((char *)v168 + 2 * v356);
                      ++v175;
                    }
                    while (v175 < v355.i32[2]);
                  }
                  LOBYTE(_S0) = *(_BYTE *)v167;
                  _S0 = (float)LODWORD(_S0);
                  __asm { FCVT            H0, S0 }
                  v168->i16[0] = LOWORD(_S0);
                  v164 = (int *)((char *)v164 + v360);
                  v165 = (uint32x4_t *)((char *)v165 + 2 * HIDWORD(v360));
                  ++v166;
                }
                while (v166 < v359);
              }
              if (v357)
              {
                for (j = 0; j < v357; ++j)
                {
                  v177 = v165;
                  v178 = v164;
                  if (v355.i32[2])
                  {
                    v179 = 0;
                    v178 = v164;
                    v177 = v165;
                    do
                    {
                      LOBYTE(_S0) = *(_BYTE *)v178;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v177->i16[0] = LOWORD(_S0);
                      v178 = (int *)((char *)v178 + v355.i32[3]);
                      v177 = (uint32x4_t *)((char *)v177 + 2 * v356);
                      ++v179;
                    }
                    while (v179 < v355.i32[2]);
                  }
                  LOBYTE(_S0) = *(_BYTE *)v178;
                  _S0 = (float)LODWORD(_S0);
                  __asm { FCVT            H0, S0 }
                  v177->i16[0] = LOWORD(_S0);
                  v164 = (int *)((char *)v164 + v358);
                  v165 = (uint32x4_t *)((char *)v165 + 2 * HIDWORD(v358));
                }
              }
              if (v355.i32[2])
              {
                v180 = 0;
                do
                {
                  LOBYTE(_S0) = *(_BYTE *)v164;
                  _S0 = (float)LODWORD(_S0);
                  __asm { FCVT            H0, S0 }
                  v165->i16[0] = LOWORD(_S0);
                  v164 = (int *)((char *)v164 + v355.i32[3]);
                  v165 = (uint32x4_t *)((char *)v165 + 2 * v356);
                  ++v180;
                }
                while (v180 < v355.i32[2]);
              }
              LOBYTE(_S0) = *(_BYTE *)v164;
              _S0 = (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              v165->i16[0] = LOWORD(_S0);
              v162 = (int *)((char *)v162 + v362);
              v161 = (uint32x4_t *)((char *)v161 + 2 * HIDWORD(v362));
              ++v163;
            }
            while (v163 < v361);
          }
          LODWORD(_S0) = sub_239675CF8(&v355, v162, v161, _S0);
          v158 = (int *)((char *)v158 + v364);
          v159 = (uint32x4_t *)((char *)v159 + 2 * HIDWORD(v364));
          ++v160;
        }
        while (v160 < v363);
        v157 = v361;
      }
      if (v157)
      {
        v181 = 0;
        do
        {
          LODWORD(_S0) = sub_239675CF8(&v355, v158, v159, _S0);
          v158 = (int *)((char *)v158 + v362);
          v159 = (uint32x4_t *)((char *)v159 + 2 * HIDWORD(v362));
          ++v181;
        }
        while (v181 < v361);
      }
      sub_239675CF8(&v355, v158, v159, _S0);
    }
    if (v347)
    {
      v182 = nullsub_4(v346);
      v183 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
      if (*((_QWORD *)&v345 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v183->__on_zero_shared)(v183, v182);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      nullsub_4(&v344);
    }
    if (!(_BYTE)v338)
      goto LABEL_360;
    v186 = nullsub_4(&v336);
    v187 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
    if (!*((_QWORD *)&v335 + 1))
      goto LABEL_359;
    v188 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    goto LABEL_357;
  }
  if (v49)
  {
    sub_239A444D4((uint64_t)"unknown file", 697, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239675540(a3, v5, (uint64_t)__p);
  v340 = *(uint32x4_t *)__p;
  v341 = v334[0];
  v342 = (__n128)v334[1];
  v343 = v334[2];
  LOBYTE(v344) = 0;
  v347 = 0;
  if ((_BYTE)v338)
  {
    v344 = &off_250ADB1D0;
    v51 = v335;
    if (*((_QWORD *)&v335 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v54 = v337;
      v55 = DWORD2(v337);
      v56 = WORD6(v337);
      do
        v57 = __ldxr(v52);
      while (__stxr(v57 + 1, v52));
    }
    else
    {
      v54 = v337;
      v55 = DWORD2(v337);
      v56 = WORD6(v337);
    }
    v345 = v51;
    *(_QWORD *)v346 = v336;
    *(_DWORD *)&v346[8] = DWORD2(v336);
    *(_QWORD *)&v346[16] = v54;
    *(_DWORD *)&v346[24] = v55;
    *(_WORD *)&v346[28] = v56;
    if (*((_QWORD *)&v51 + 1))
    {
      v293 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v294 = __ldaxr(v293);
      while (__stlxr(v294 - 1, v293));
      if (!v294)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
      }
    }
    v347 = 1;
  }
  sub_23949BB44((uint64_t)&v312, v50, (uint64_t)&v355);
  sub_2396477D0((uint64_t)&v340, v295, (uint64_t)&v365);
  v348 = &v355;
  v349 = &v365;
  sub_23966118C((size_t *)&v348);
  if (v347)
  {
    v296 = nullsub_4(v346);
    v297 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
    if (*((_QWORD *)&v345 + 1))
    {
      v298 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v297->__on_zero_shared)(v297, v296);
        std::__shared_weak_count::__release_weak(v297);
      }
    }
    nullsub_4(&v344);
  }
  if ((_BYTE)v338)
  {
    v186 = nullsub_4(&v336);
    v187 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
    if (*((_QWORD *)&v335 + 1))
    {
      v300 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
      do
        v189 = __ldaxr(v300);
      while (__stlxr(v189 - 1, v300));
      goto LABEL_357;
    }
LABEL_359:
    nullsub_4((char *)&v334[2] + 8);
  }
LABEL_360:
  if (!v323)
    goto LABEL_367;
  v148 = nullsub_4(&v318);
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v317 + 1);
  if (*((_QWORD *)&v317 + 1))
  {
    v301 = (unint64_t *)(*((_QWORD *)&v317 + 1) + 8);
    do
      v151 = __ldaxr(v301);
    while (__stlxr(v151 - 1, v301));
LABEL_364:
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v149->__on_zero_shared)(v149, v148);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
LABEL_366:
  nullsub_4(&v316);
LABEL_367:
  v340.i8[0] = 0;
  BYTE7(v334[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_23957E1BC(a1, &v340, (uint64_t)__p);
  if (SBYTE7(v334[0]) < 0)
  {
    operator delete(__p[0]);
    v302 = v332;
    if (v332 == -1)
      return;
  }
  else
  {
    v302 = v332;
    if (v332 == -1)
      return;
  }
  ((void (*)(void **, uint32x4_t *))off_250AE2E40[v302])(__p, &v324);
}

void sub_239674360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2396754E8((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_239674374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_23948FBF0((uint64_t)&a65);
  sub_23948FBF0((uint64_t)&a49);
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2396743A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_23948FBF0((uint64_t)&a65);
  sub_23948FBF0((uint64_t)&a49);
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2396743CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_23948FBF0((uint64_t)&a65);
  sub_23948FBF0((uint64_t)&a49);
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2396743F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_23948FBF0((uint64_t)&a65);
  sub_23948FBF0((uint64_t)&a49);
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_239674424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_239674440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_23948FBF0((uint64_t)&a65);
  sub_23948FBF0((uint64_t)&a49);
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_23967446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2396754E8((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_239674480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2396754E8((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_23967449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_23948FBF0((uint64_t)&a17);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2396744B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  sub_2396754E8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_2396744DC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      v2 = *(unsigned int *)(a1 + 144);
      if ((_DWORD)v2 != -1)
        ((void (*)(char *, uint64_t))off_250AE2B60[v2])(&v4, a1 + 24);
      *(_DWORD *)(a1 + 144) = -1;
    }
    return a1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
}

void sub_23967456C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239674580(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396745B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2396745D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2396745E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23967464C()
{
  return &unk_250AE2D98;
}

void sub_23967465C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239674670(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2DB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396746A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2DB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2396746C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2396746D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_23967473C()
{
  return &unk_250AE2E18;
}

char *sub_239674748(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_QWORD *)v11 + 2) == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_DWORD *)v11 + 6) = 3;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  v11[48] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*(_QWORD *)v11)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239674A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239671670((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239674AB0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v10[2];

  v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(result + 128))
      return result;
    v3 = *(unsigned int *)(result + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_250AE2B60[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_250AE2E28[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 128))
  {
    v5 = *(unsigned int *)(result + 120);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_250AE2B60[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 120) = -1;
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_250AE2B78[v6])(v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

void sub_239674BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v15])(&a13, v13);
  *(_DWORD *)(v13 + 120) = -1;
  _Unwind_Resume(exception_object);
}

__n128 sub_239674C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120))
  {
    v7[0] = *(_QWORD *)a1;
    v7[1] = a3;
    sub_239674D48(v7);
  }
  else
  {
    v4 = *(_OWORD *)a3;
    v5 = *(_OWORD *)(a3 + 16);
    v6 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v4;
    sub_239674F30(a2 + 56, a3 + 56);
  }
  return result;
}

void sub_239674C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 1)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_239674F30(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_23967510C(v6);
  }
}

void sub_239674CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 2)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_239674F30(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_2396752F8(v6);
  }
}

void sub_239674D48(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[30];
  char v27;
  char v28;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v23 = *((_DWORD *)v1 + 12);
  v21 = v1[1];
  v22 = v1[2];
  v20 = *v1;
  LOBYTE(v24) = 0;
  v27 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v24 = &off_250ADB210;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v26 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v26[8] = v12;
    *(_QWORD *)&v26[16] = v8;
    *(_DWORD *)&v26[24] = v9;
    *(_WORD *)&v26[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v27 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v15])(&v28, v2);
  *(_DWORD *)(v2 + 48) = v23;
  *(_OWORD *)(v2 + 16) = v21;
  *(_OWORD *)(v2 + 32) = v22;
  *(_OWORD *)v2 = v20;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = &off_250ADB210;
    *(_OWORD *)(v2 + 64) = v25;
    v25 = 0uLL;
    v16 = *(_OWORD *)&v26[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v26;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 0;
    v17 = nullsub_4(v26);
    if (*((_QWORD *)&v25 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1), v17);
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
      }
    }
    nullsub_4(&v24);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 0;
  }
}

void sub_239674F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v5 = *(_QWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v4;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(_OWORD *)(a1 + 24) = v11;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v12 = nullsub_4(a1 + 24);
    v13 = *(std::__shared_weak_count **)(a1 + 16);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    nullsub_4(a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = &off_250ADB210;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(std::__shared_weak_count **)(a2 + 16);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(_DWORD *)(a2 + 48);
      v22 = *(_WORD *)(a2 + 52);
      do
        v23 = __ldxr(v18);
      while (__stxr(v23 + 1, v18));
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(_DWORD *)(a2 + 48);
      v22 = *(_WORD *)(a2 + 52);
    }
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v17;
    v24 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 40) = v20;
    *(_DWORD *)(a1 + 48) = v21;
    *(_WORD *)(a1 + 52) = v22;
    if (!v17)
      goto LABEL_31;
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
LABEL_31:
      *(_BYTE *)(a1 + 56) = 1;
    }
  }
}

void sub_23967510C(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[30];
  char v27;
  char v28;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v23 = *((_DWORD *)v1 + 12);
  v21 = v1[1];
  v22 = v1[2];
  v20 = *v1;
  LOBYTE(v24) = 0;
  v27 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v24 = &off_250ADB210;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v26 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v26[8] = v12;
    *(_QWORD *)&v26[16] = v8;
    *(_DWORD *)&v26[24] = v9;
    *(_WORD *)&v26[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v27 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v15])(&v28, v2);
  *(_DWORD *)(v2 + 48) = v23;
  *(_OWORD *)(v2 + 16) = v21;
  *(_OWORD *)(v2 + 32) = v22;
  *(_OWORD *)v2 = v20;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = &off_250ADB210;
    *(_OWORD *)(v2 + 64) = v25;
    v25 = 0uLL;
    v16 = *(_OWORD *)&v26[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v26;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 1;
    v17 = nullsub_4(v26);
    if (*((_QWORD *)&v25 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1), v17);
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
      }
    }
    nullsub_4(&v24);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 1;
  }
}

void sub_2396752F8(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __n128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[30];
  char v27;
  char v28;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v23 = *((_DWORD *)v1 + 12);
  v21 = v1[1];
  v22 = v1[2];
  v20 = *v1;
  LOBYTE(v24) = 0;
  v27 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v24 = &off_250ADB210;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v25 = v4;
    *((_QWORD *)&v25 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v26 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v26[8] = v12;
    *(_QWORD *)&v26[16] = v8;
    *(_DWORD *)&v26[24] = v9;
    *(_WORD *)&v26[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v27 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v15])(&v28, v2);
  *(_DWORD *)(v2 + 48) = v23;
  *(_OWORD *)(v2 + 16) = v21;
  *(_OWORD *)(v2 + 32) = v22;
  *(_OWORD *)v2 = v20;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = &off_250ADB210;
    *(_OWORD *)(v2 + 64) = v25;
    v25 = 0uLL;
    v16 = *(_OWORD *)&v26[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v26;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 2;
    v17 = nullsub_4(v26);
    if (*((_QWORD *)&v25 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1), v17);
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
      }
    }
    nullsub_4(&v24);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 2;
  }
}

uint64_t sub_2396754E8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250AE2E40[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

_QWORD *sub_239675540@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t data_ptr;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _DWORD v20[10];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*a1)
    sub_239EC1614((uint64_t)a1, a2);
  v28 = 0;
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
    sub_239EC15E8(data_ptr, v5);
  v26 = 0;
  v27 = 0;
  e5rt_tensor_desc_get_shape();
  v25 = 0;
  e5rt_tensor_desc_get_strides();
  v24 = 0;
  e5rt_tensor_desc_retain_dtype();
  v29[0] = &off_250AE2BA0;
  v29[1] = MEMORY[0x24BE2FA68];
  v29[2] = &v24;
  v30 = v29;
  v23 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v22 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v21 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_239664FAC(v27, v26, v25, 0, 0, (uint64_t)v20);
  v17 = *(_OWORD *)&v20[5];
  v18 = v20[9];
  v19 = 1;
  v13[0] = 0;
  v16 = 0;
  sub_239643CC8(a3, v28, (__int128 *)v20, &v17, &dword_239EC81CC, (uint64_t)v13);
  if (v16)
  {
    v7 = nullsub_4(&v15);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = nullsub_4(v13);
  }
  if (!v30)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v30 + 48))(v30, v6);
  result = v30;
  if (v30 == v29)
  {
    v12 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_239675748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23948FA2C((uint64_t)&a9);
  sub_239416834((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_239675764(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675778(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_23967578C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2396757A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2396757B4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2396757D0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t data_ptr;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _DWORD v20[10];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _DWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 1)
    sub_239EC1614((uint64_t)a1, a2);
  v28 = 0;
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
    sub_239EC15E8(data_ptr, v5);
  v26 = 0;
  v27 = 0;
  e5rt_tensor_desc_get_shape();
  v25 = 0;
  e5rt_tensor_desc_get_strides();
  v24 = 0;
  e5rt_tensor_desc_retain_dtype();
  v29[0] = &off_250AE2BA0;
  v29[1] = MEMORY[0x24BE2FA68];
  v29[2] = &v24;
  v30 = v29;
  v23 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v22 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v21 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2396651A0(v27, v26, v25, 0, 0, (uint64_t)v20);
  v17 = *(_OWORD *)&v20[5];
  v18 = v20[9];
  v19 = 1;
  v13[0] = 0;
  v16 = 0;
  sub_239643CC8(a3, v28, (__int128 *)v20, &v17, &dword_239EC81D4, (uint64_t)v13);
  if (v16)
  {
    v7 = nullsub_4(&v15);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = nullsub_4(v13);
  }
  if (!v30)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v30 + 48))(v30, v6);
  result = v30;
  if (v30 == v29)
  {
    v12 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2396759DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23948FA2C((uint64_t)&a9);
  sub_239416834((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2396759F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675A48(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239675A64@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t data_ptr;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  int v18;
  char v19;
  _DWORD v20[10];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _DWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 2)
    sub_239EC1614((uint64_t)a1, a2);
  v28 = 0;
  data_ptr = e5rt_buffer_object_get_data_ptr();
  if ((_DWORD)data_ptr)
    sub_239EC15E8(data_ptr, v5);
  v26 = 0;
  v27 = 0;
  e5rt_tensor_desc_get_shape();
  v25 = 0;
  e5rt_tensor_desc_get_strides();
  v24 = 0;
  e5rt_tensor_desc_retain_dtype();
  v29[0] = &off_250AE2BA0;
  v29[1] = MEMORY[0x24BE2FA68];
  v29[2] = &v24;
  v30 = v29;
  v23 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v22 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v21 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2396653B8(v27, v26, v25, 0, 0, (uint64_t)v20);
  v17 = *(_OWORD *)&v20[5];
  v18 = v20[9];
  v19 = 1;
  v13[0] = 0;
  v16 = 0;
  sub_239643CC8(a3, v28, (__int128 *)v20, &v17, &dword_239EC81C4, (uint64_t)v13);
  if (v16)
  {
    v7 = nullsub_4(&v15);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = nullsub_4(v13);
  }
  if (!v30)
    sub_2394172E0();
  (*(void (**)(_QWORD *, __n128))(*v30 + 48))(v30, v6);
  result = v30;
  if (v30 == v29)
  {
    v12 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_239675C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_23948FA2C((uint64_t)&a9);
  sub_239416834((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_239675C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_239675CDC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

__int16 sub_239675CF8@<H0>(_DWORD *a1@<X0>, _BYTE *a2@<X1>, _WORD *a3@<X2>, float _S0@<S0>)
{
  unsigned int v4;
  _BYTE *v9;
  _WORD *v10;
  unsigned int v11;
  _WORD *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _WORD *v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  __int16 result;

  if (a1[8])
  {
    v4 = 0;
    do
    {
      v9 = a2;
      v10 = a3;
      if (a1[5])
      {
        v11 = 0;
        v9 = a2;
        v10 = a3;
        do
        {
          v12 = v10;
          v13 = v9;
          if (a1[2])
          {
            v14 = 0;
            v13 = v9;
            v12 = v10;
            do
            {
              LOBYTE(_S0) = *v13;
              _S0 = (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v12 = LOWORD(_S0);
              v13 += a1[3];
              v12 += a1[4];
              ++v14;
            }
            while (v14 < a1[2]);
          }
          LOBYTE(_S0) = *v13;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v12 = LOWORD(_S0);
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        v15 = 0;
        do
        {
          LOBYTE(_S0) = *v9;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v10 = LOWORD(_S0);
          v9 += a1[3];
          v10 += a1[4];
          ++v15;
        }
        while (v15 < a1[2]);
      }
      LOBYTE(_S0) = *v9;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *v10 = LOWORD(_S0);
      a2 += a1[9];
      a3 += a1[10];
      ++v4;
    }
    while (v4 < a1[8]);
  }
  if (a1[5])
  {
    v16 = 0;
    do
    {
      v17 = a3;
      v18 = a2;
      if (a1[2])
      {
        v19 = 0;
        v18 = a2;
        v17 = a3;
        do
        {
          LOBYTE(_S0) = *v18;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v17 = LOWORD(_S0);
          v18 += a1[3];
          v17 += a1[4];
          ++v19;
        }
        while (v19 < a1[2]);
      }
      LOBYTE(_S0) = *v18;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *v17 = LOWORD(_S0);
      a2 += a1[6];
      a3 += a1[7];
      ++v16;
    }
    while (v16 < a1[5]);
  }
  if (a1[2])
  {
    v20 = 0;
    do
    {
      LOBYTE(_S0) = *a2;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *a3 = LOWORD(_S0);
      a2 += a1[3];
      a3 += a1[4];
      ++v20;
    }
    while (v20 < a1[2]);
  }
  LOBYTE(_S0) = *a2;
  _S0 = (float)LODWORD(_S0);
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

__int16 sub_239675EDC@<H0>(_DWORD *a1@<X0>, int *a2@<X1>, _WORD *a3@<X2>)
{
  unsigned int v3;
  int *v9;
  _WORD *v10;
  unsigned int v11;
  _WORD *v13;
  int *v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v19;
  _WORD *v21;
  int *v22;
  unsigned int v23;
  unsigned int v25;
  __int16 result;

  if (a1[8])
  {
    v3 = 0;
    do
    {
      v9 = a2;
      v10 = a3;
      if (a1[5])
      {
        v11 = 0;
        v9 = a2;
        v10 = a3;
        do
        {
          v13 = v10;
          v14 = v9;
          if (a1[2])
          {
            v15 = 0;
            v14 = v9;
            v13 = v10;
            do
            {
              _S0 = *v14;
              __asm { FCVT            H0, S0 }
              *v13 = _S0;
              v14 += a1[3];
              v13 += a1[4];
              ++v15;
            }
            while (v15 < a1[2]);
          }
          _S0 = *v14;
          __asm { FCVT            H0, S0 }
          *v13 = _S0;
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        v17 = 0;
        do
        {
          _S0 = *v9;
          __asm { FCVT            H0, S0 }
          *v10 = _S0;
          v9 += a1[3];
          v10 += a1[4];
          ++v17;
        }
        while (v17 < a1[2]);
      }
      _S0 = *v9;
      __asm { FCVT            H0, S0 }
      *v10 = _S0;
      a2 += a1[9];
      a3 += a1[10];
      ++v3;
    }
    while (v3 < a1[8]);
  }
  if (a1[5])
  {
    v19 = 0;
    do
    {
      v21 = a3;
      v22 = a2;
      if (a1[2])
      {
        v23 = 0;
        v22 = a2;
        v21 = a3;
        do
        {
          _S0 = *v22;
          __asm { FCVT            H0, S0 }
          *v21 = _S0;
          v22 += a1[3];
          v21 += a1[4];
          ++v23;
        }
        while (v23 < a1[2]);
      }
      _S0 = *v22;
      __asm { FCVT            H0, S0 }
      *v21 = _S0;
      a2 += a1[6];
      a3 += a1[7];
      ++v19;
    }
    while (v19 < a1[5]);
  }
  if (a1[2])
  {
    v25 = 0;
    do
    {
      _S0 = *a2;
      __asm { FCVT            H0, S0 }
      *a3 = _S0;
      a2 += a1[3];
      a3 += a1[4];
      ++v25;
    }
    while (v25 < a1[2]);
  }
  _S0 = *a2;
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

double sub_2396760A0(double result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a3 + 112))
  {
    v4 = a3 + 56;
    v5 = nullsub_4(a3 + 80);
    v6 = *(std::__shared_weak_count **)(a3 + 72);
    if (!v6)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
    else
    {
LABEL_6:
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
  }
  return result;
}

double sub_239676128(double result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a3 + 112))
  {
    v4 = a3 + 56;
    v5 = nullsub_4(a3 + 80);
    v6 = *(std::__shared_weak_count **)(a3 + 72);
    if (!v6)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
    else
    {
LABEL_6:
      *(_QWORD *)&result = nullsub_4(v4).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_2396761B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(result + 128))
      return result;
    v3 = *(unsigned int *)(result + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_250AE2B60[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_250AE2E50[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 128))
  {
    v5 = *(unsigned int *)(result + 120);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_250AE2B60[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 120) = -1;
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_250AE2C90[v6])(&v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

void sub_2396762EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = v6;
      sub_2396765CC(a2 + 56, a3 + 56, v6);
      return;
    }
    ((void (*)(char *, uint64_t))off_250AE2B60[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *(__n128 *)a3;
  v10 = *(_OWORD *)(a3 + 16);
  v11 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(__n128 *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = &off_250ADB210;
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    v12 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v4 + 94) = *(_OWORD *)(a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 0;
}

void sub_2396763DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = v6;
      sub_2396765CC(a2 + 56, a3 + 56, v6);
      return;
    }
    ((void (*)(char *, uint64_t))off_250AE2B60[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *(__n128 *)a3;
  v10 = *(_OWORD *)(a3 + 16);
  v11 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(__n128 *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = &off_250ADB210;
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    v12 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v4 + 94) = *(_OWORD *)(a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 1;
}

void sub_2396764D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = v6;
      sub_2396765CC(a2 + 56, a3 + 56, v6);
      return;
    }
    ((void (*)(char *, uint64_t))off_250AE2B60[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *(__n128 *)a3;
  v10 = *(_OWORD *)(a3 + 16);
  v11 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(__n128 *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = &off_250ADB210;
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    v12 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v4 + 94) = *(_OWORD *)(a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 2;
}

__n128 sub_2396765CC(uint64_t a1, uint64_t a2, __n128 result)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v5 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v6 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v5;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = *(__n128 *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v9 = nullsub_4(a1 + 24);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    result.n128_u64[0] = nullsub_4(a1).n128_u64[0];
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = &off_250ADB210;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    result = *(__n128 *)(a2 + 24);
    *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

void sub_239676700()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239676714(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2E78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23967674C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2E78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23967676C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_239676774(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2396767E0()
{
  return &unk_250AE2ED8;
}

unsigned __int8 *sub_2396767EC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239428940((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_239427FE0(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239676BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239676C14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE2EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239676C24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE2EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239676C54(uint64_t a1)
{
  return sub_2396633E8(a1 + 24);
}

uint64_t *sub_239676C60(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  sub_2396770B0((char *)v25 + 16, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239677084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239671C74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239677098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239671C74((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2396770B0(char *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)__dst + 3) = v5;
  *((_QWORD *)__dst + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)__dst + 5) = v6;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)__dst + 6) = v7;
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *((_QWORD *)__dst + 4);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(_QWORD *)(v5 + 8 * v8) = __dst + 40;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  v10 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)__dst + 8) = v10;
  *((_QWORD *)__dst + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v11 = *((_QWORD *)a2 + 10);
  *((_QWORD *)__dst + 10) = v11;
  v12 = *((_QWORD *)a2 + 11);
  *((_QWORD *)__dst + 11) = v12;
  *((_DWORD *)__dst + 24) = *((_DWORD *)a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *((_QWORD *)__dst + 9);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(v10 + 8 * v13) = __dst + 80;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
  }
  *(_OWORD *)(__dst + 104) = *(__int128 *)((char *)a2 + 104);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)__dst + 15) = *((_QWORD *)a2 + 15);
  return __dst;
}

uint64_t *sub_2396771F0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_239677420()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239677434(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE2F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23967746C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE2F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23967748C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_239677494(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_239677500()
{
  return &unk_250AE2FA8;
}

void sub_23967750C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE2FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23967751C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE2FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23967754C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23967755C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_23967769C(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_239677674(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

void sub_239677688(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23967769C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v25[5] = *(_QWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239677AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239677AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239677B0C(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 5);
    if (v7 >= 0x19999999999999ALL)
      sub_2394189F8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[160 * v7];
    a1[1] = sub_239677C44(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_239677BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        if (*((_BYTE *)v17 - 8))
        {
          v19 = *(v17 - 4);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, _DWORD *))off_250AE2B60[v19])(&a13, v17 - 34);
          *(v17 - 4) = -1;
        }
        v17 -= 40;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239677C44(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[2];

  v4 = a4;
  v11 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
      *(_BYTE *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 152) = 0;
      if (*((_BYTE *)v6 + 152))
      {
        *(_BYTE *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 144) = -1;
        v8 = *((unsigned int *)v6 + 36);
        v9 = v4;
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(_BYTE *, uint64_t, char *))off_250AE2B78[v8])(v12, v4 + 24, (char *)v6 + 24);
          *(_DWORD *)(v4 + 144) = v8;
          v9 = v11;
        }
        *(_BYTE *)(v4 + 152) = 1;
        v4 = v9;
      }
      v4 += 160;
      v11 = v4;
      v6 += 10;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_239677D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = *(unsigned int *)(v19 + 144);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_250AE2B60[v22])(&a19, v20);
  *(_DWORD *)(v19 + 144) = -1;
  sub_239677D7C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_239677D7C(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 160)
    {
      if (*(_BYTE *)(v5 - 8))
      {
        v7 = *(unsigned int *)(v5 - 16);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_250AE2B60[v7])(&v8, v5 - 136);
        *(_DWORD *)(v5 - 16) = -1;
      }
    }
  }
  return a1;
}

uint64_t *sub_239677E1C(uint64_t *result, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;

  v6 = a2;
  v7 = (uint64_t)result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v10)
    {
      v11 = result[1];
      v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          if (*(_BYTE *)(v11 - 8))
          {
            v13 = *(unsigned int *)(v11 - 16);
            if ((_DWORD)v13 != -1)
              ((void (*)(char *, uint64_t))off_250AE2B60[v13])(&v26, v11 - 136);
            *(_DWORD *)(v11 - 16) = -1;
          }
          v11 -= 160;
        }
        while (v11 != v10);
        v12 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz > 0x199999999999999)
      goto LABEL_40;
    v19 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    v20 = 2 * v19;
    if (2 * v19 <= __sz)
      v20 = __sz;
    v21 = v19 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v20;
    if (v21 > 0x199999999999999)
LABEL_40:
      sub_2394189F8();
    v22 = 160 * v21;
    v23 = (char *)operator new(160 * v21);
    *(_QWORD *)v7 = v23;
    *(_QWORD *)(v7 + 8) = v23;
    *(_QWORD *)(v7 + 16) = &v23[v22];
    result = (uint64_t *)sub_239677C44(v9, v6, a3, (uint64_t)v23);
LABEL_30:
    *(_QWORD *)(v7 + 8) = result;
    return result;
  }
  v14 = result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 5) < __sz)
  {
    v15 = &a2[2 * ((v14 - v10) >> 5)];
    if (v14 != v10)
    {
      do
      {
        v16 = *v6;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v10 = v16;
        sub_239674AB0(v10 + 24, (uint64_t)v6 + 24);
        v6 += 10;
        v10 += 160;
      }
      while (v6 != v15);
      v10 = *(_QWORD *)(v7 + 8);
    }
    result = (uint64_t *)sub_239677C44(v9, v15, a3, v10);
    goto LABEL_30;
  }
  if (a2 != a3)
  {
    v17 = *result;
    do
    {
      v18 = *v6;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v10 = v18;
      result = (uint64_t *)sub_239674AB0(v10 + 24, (uint64_t)v6 + 24);
      v17 += 160;
      v6 += 10;
      v10 += 160;
    }
    while (v6 != a3);
    v14 = *(_QWORD *)(v7 + 8);
    if (v14 == v17)
      goto LABEL_38;
    do
    {
LABEL_35:
      if (*(_BYTE *)(v14 - 8))
      {
        v24 = *(unsigned int *)(v14 - 16);
        if ((_DWORD)v24 != -1)
          result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_250AE2B60[v24])(&v25, v14 - 136);
        *(_DWORD *)(v14 - 16) = -1;
      }
      v14 -= 160;
    }
    while (v14 != v17);
    goto LABEL_38;
  }
  v17 = *result;
  if (v14 != v10)
    goto LABEL_35;
LABEL_38:
  *(_QWORD *)(v7 + 8) = v17;
  return result;
}

void sub_2396780A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2396780AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2396780C0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396780D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE3018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23967810C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE3018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23967812C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_239678134(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2396781A0()
{
  return &unk_250AE3078;
}

void sub_2396781B0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396781C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AE3098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239678204(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE3098;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23967822C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a1 + 24);
}

uint64_t sub_239678238(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_executi"
                     "on_streamEJS8_SB_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e"
                                "5rt_execution_streamEJS8_SB_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2396782A4()
{
  return &unk_250AE30F8;
}

uint64_t *sub_2396782B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2396786F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239678708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239678720(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_23967894C(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_239678B78(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 52, a3, a4);
}

void sub_239678B80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 55, a3, a4);
}

uint64_t sub_239678B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v70;
  uint64_t v73;

  v15 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v16 = v15[8];
  v17 = v15[6];
  v18 = v15[4];
  v19 = v15[2];
  v20 = *v15;
  v21 = *(double **)(a2 + 16);
  v22 = *(_QWORD *)(a3 + 16);
  v70 = *(_QWORD *)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  v73 = a2;
  halide_copy_to_host();
  if ((int)v20 >= 1)
  {
    v23 = *(int *)(v70 + 4);
    if ((int)v23 >= 1)
    {
      v24 = 0;
      v25 = *(unsigned int *)(v70 + 4);
      v26 = 3 * v23 + 3;
      do
      {
        v27 = 0;
        v28 = 3 * v26 * v24;
        do
        {
          if (v24 == v27)
          {
            v29 = *v21;
            *(double *)(v22 + 24 * v26 * v24) = *(double *)(v22 + 24 * v26 * v24) + *v21;
            *(double *)(v22 + 8 * (v28 + 4)) = *(double *)(v22 + 8 * (v28 + 4)) + v29;
            *(double *)(v22 + 8 * (v28 + 8)) = *(double *)(v22 + 8 * (v28 + 8)) + v29;
          }
          ++v27;
        }
        while (v25 != v27);
        ++v24;
      }
      while (v24 != v20);
    }
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  v30 = *(double **)(a2 + 16);
  v31 = *(_QWORD *)(a5 + 16);
  v32 = *(_QWORD *)(a6 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v33 = *(int *)(v32 + 4);
    if ((int)v33 >= 1)
    {
      v34 = 0;
      v35 = *(unsigned int *)(v32 + 4);
      v36 = 4 * v33 + 4;
      do
      {
        v37 = 0;
        v38 = 4 * v36 * v34;
        do
        {
          if (v34 == v37)
          {
            v39 = *v30;
            *(double *)(v31 + 32 * v36 * v34) = *(double *)(v31 + 32 * v36 * v34) + *v30;
            *(double *)(v31 + 8 * (v38 | 5)) = *(double *)(v31 + 8 * (v38 | 5)) + v39;
            *(double *)(v31 + 8 * (v38 | 0xA)) = *(double *)(v31 + 8 * (v38 | 0xA)) + v39;
            *(double *)(v31 + 8 * (v38 | 0xF)) = *(double *)(v31 + 8 * (v38 | 0xF)) + v39;
          }
          ++v37;
        }
        while (v35 != v37);
        ++v34;
      }
      while (v34 != v19);
    }
  }
  *(_QWORD *)(a5 + 24) |= 1uLL;
  v40 = *(double **)(v73 + 16);
  v41 = *(_QWORD *)(a7 + 16);
  v42 = *(_QWORD *)(a8 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v43 = *(int *)(v42 + 4);
    if ((int)v43 >= 1)
    {
      v44 = 0;
      v45 = *(unsigned int *)(v42 + 4);
      v46 = 6 * v43 + 6;
      do
      {
        v47 = 0;
        v48 = 6 * v46 * v44;
        do
        {
          if (v44 == v47)
          {
            v49 = *v40;
            *(double *)(v41 + 48 * v46 * v44) = *(double *)(v41 + 48 * v46 * v44) + *v40;
            *(double *)(v41 + 8 * ((6 * ((v46 * v44) | 1)) | 1)) = *(double *)(v41 + 8 * ((6 * ((v46 * v44) | 1)) | 1))
                                                                 + v49;
            *(double *)(v41 + 8 * (v48 + 14)) = *(double *)(v41 + 8 * (v48 + 14)) + v49;
            *(double *)(v41 + 8 * (v48 + 21)) = *(double *)(v41 + 8 * (v48 + 21)) + v49;
            *(double *)(v41 + 8 * (v48 + 28)) = *(double *)(v41 + 8 * (v48 + 28)) + v49;
            *(double *)(v41 + 8 * (v48 + 35)) = *(double *)(v41 + 8 * (v48 + 35)) + v49;
          }
          ++v47;
        }
        while (v45 != v47);
        ++v44;
      }
      while (v44 != v18);
    }
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  v50 = *(double **)(v73 + 16);
  v51 = *(_QWORD *)(a9 + 16);
  v52 = *(_QWORD *)(a10 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v17 >= 1)
  {
    v53 = *(int *)(v52 + 4);
    if ((int)v53 >= 1)
    {
      v54 = 0;
      v55 = *(unsigned int *)(v52 + 4);
      v56 = 2 * v53 + 2;
      do
      {
        v57 = 0;
        do
        {
          if (v54 == v57)
          {
            v58 = *v50;
            *(double *)(v51 + 16 * v56 * v54) = *(double *)(v51 + 16 * v56 * v54) + *v50;
            *(double *)(v51 + 8 * ((2 * v56 * v54) | 3)) = *(double *)(v51 + 8 * ((2 * v56 * v54) | 3)) + v58;
          }
          ++v57;
        }
        while (v55 != v57);
        ++v54;
      }
      while (v54 != v17);
    }
  }
  *(_QWORD *)(a9 + 24) |= 1uLL;
  v59 = *(double **)(v73 + 16);
  v60 = *(_QWORD *)(a11 + 16);
  v61 = *(_QWORD *)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v16 >= 1)
  {
    v62 = *(int *)(v61 + 4);
    if ((int)v62 >= 1)
    {
      v63 = 0;
      v64 = *(unsigned int *)(v61 + 4);
      v65 = v62 + 1;
      do
      {
        v66 = 0;
        do
        {
          if (v63 == v66)
            *(double *)(v60 + 8 * v65 * v63) = *(double *)(v60 + 8 * v65 * v63) + *v59;
          ++v66;
        }
        while (v64 != v66);
        ++v63;
      }
      while (v63 != v16);
    }
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239679054(uint64_t *a1)
{
  sub_239678B88(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_239679094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float64_t *v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double *v25;
  float64x2_t *v26;
  float64x2_t v27;
  uint64_t *v28;
  float64x2_t *v29;
  uint64_t v30;
  double v31;
  float64x2_t v32;
  double *v33;
  float64x2_t *v34;
  float64x2_t v35;
  double *v36;
  float64x2_t *v37;
  uint64_t v38;
  double v39;
  float64x2_t *v40;
  double *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t *v47;
  float64x2_t *v48;
  double *v49;
  double v50;
  float64x2_t v51;
  double *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  uint64_t v70;

  v15 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v70 = v15[8];
  v16 = v15[6];
  v17 = v15[4];
  v18 = v15[2];
  v19 = *v15;
  v20 = *(float64_t **)(a2 + 16);
  v21 = *(float64x2_t **)(a3 + 16);
  v22 = *(_QWORD *)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v23.f64[0] = *v20;
    v25 = (double *)(v22 + 32);
    v26 = v21 + 1;
    v27.f64[0] = *v20;
    v27.f64[1] = *v20;
    do
    {
      v24.f64[0] = v26->f64[0];
      v24 = vaddq_f64(v24, v23);
      v26[-1] = vaddq_f64(v26[-1], v27);
      v26->f64[0] = v24.f64[0];
      v26 = (float64x2_t *)((char *)v26 + 24);
      *(v25 - 4) = v23.f64[0] + *(v25 - 4);
      *v25 = v23.f64[0] + *v25;
      v25[4] = v23.f64[0] + v25[4];
      v25 += 9;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  *(_QWORD *)(a3 + 24) |= 1uLL;
  v28 = *(uint64_t **)(a2 + 16);
  v29 = *(float64x2_t **)(a5 + 16);
  v30 = *(_QWORD *)(a6 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v31 = *(double *)v28;
    v32 = (float64x2_t)vdupq_lane_s64(*v28, 0);
    v33 = (double *)(v30 + 80);
    v34 = v29 + 1;
    do
    {
      v35 = vaddq_f64(*v34, v32);
      v34[-1] = vaddq_f64(v34[-1], v32);
      *v34 = v35;
      *(v33 - 10) = v31 + *(v33 - 10);
      *(v33 - 5) = v31 + *(v33 - 5);
      *v33 = v31 + *v33;
      v33[5] = v31 + v33[5];
      v33 += 16;
      v34 += 2;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  *(_QWORD *)(a5 + 24) |= 1uLL;
  v36 = *(double **)(a2 + 16);
  v37 = *(float64x2_t **)(a7 + 16);
  v38 = *(_QWORD *)(a8 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v17 >= 1)
  {
    v39 = *v36;
    v40 = v37 + 2;
    v41 = (double *)(v38 + 168);
    v42.f64[0] = *v36;
    v42.f64[1] = *v36;
    v43.f64[0] = *v36;
    v43.f64[1] = *v36;
    v44.f64[0] = *v36;
    v44.f64[1] = *v36;
    do
    {
      v45 = vaddq_f64(*v40, v42);
      v46 = vaddq_f64(v40[-1], v43);
      v40[-2] = vaddq_f64(v40[-2], v44);
      v40[-1] = v46;
      *v40 = v45;
      v40 += 3;
      *(v41 - 21) = v39 + *(v41 - 21);
      *(v41 - 14) = v39 + *(v41 - 14);
      *(v41 - 7) = v39 + *(v41 - 7);
      *v41 = v39 + *v41;
      v41[7] = v39 + v41[7];
      v41[14] = v39 + v41[14];
      v41 += 36;
      --v17;
    }
    while (v17);
  }
  *(_QWORD *)(a8 + 24) |= 1uLL;
  *(_QWORD *)(a7 + 24) |= 1uLL;
  v47 = *(uint64_t **)(a2 + 16);
  v48 = *(float64x2_t **)(a9 + 16);
  v49 = *(double **)(a10 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v16 >= 1)
  {
    v50 = *(double *)v47;
    v51 = (float64x2_t)vdupq_lane_s64(*v47, 0);
    do
    {
      *v48 = vaddq_f64(*v48, v51);
      ++v48;
      *v49 = v50 + *v49;
      v49[3] = v50 + v49[3];
      v49 += 4;
      --v16;
    }
    while (v16);
  }
  *(_QWORD *)(a10 + 24) |= 1uLL;
  *(_QWORD *)(a9 + 24) |= 1uLL;
  v52 = *(double **)(a2 + 16);
  v53 = *(float64x2_t **)(a11 + 16);
  v54 = *(float64x2_t **)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v70 >= 1)
  {
    v55 = *(uint64_t *)v52;
    if (v70 < 4)
    {
      v56 = 0;
LABEL_19:
      v63 = v70 - v56;
      v64 = v56;
      v65 = &v54->f64[v56];
      v66 = &v53->f64[v64];
      do
      {
        *v66 = *v66 + *(double *)&v55;
        ++v66;
        *v65 = *(double *)&v55 + *v65;
        ++v65;
        --v63;
      }
      while (v63);
      goto LABEL_21;
    }
    v56 = v70 & 0x7FFFFFFC;
    v57 = (float64x2_t)vdupq_lane_s64(v55, 0);
    v58 = v54 + 1;
    v59 = v53 + 1;
    v60 = v70 & 0xFFFFFFFC;
    do
    {
      v61 = vaddq_f64(*v59, v57);
      v59[-1] = vaddq_f64(v59[-1], v57);
      *v59 = v61;
      v62 = vaddq_f64(v57, *v58);
      v58[-1] = vaddq_f64(v57, v58[-1]);
      *v58 = v62;
      v58 += 2;
      v59 += 2;
      v60 -= 4;
    }
    while (v60);
    if (v56 != v70)
      goto LABEL_19;
  }
LABEL_21:
  *(_QWORD *)(a12 + 24) |= 1uLL;
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396794C4(uint64_t *a1)
{
  sub_239679094(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_239679504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double *v25;
  float64x2_t *v26;
  float64x2_t v27;
  double *v28;
  float64x2_t *v29;
  uint64_t v30;
  double v31;
  float64x2_t v32;
  double *v33;
  float64x2_t *v34;
  float64x2_t v35;
  double *v36;
  float64x2_t *v37;
  uint64_t v38;
  double v39;
  float64x2_t *v40;
  double *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double *v47;
  float64x2_t *v48;
  double *v49;
  double v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  double v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  double *v65;
  uint64_t v69;

  v15 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v69 = v15[8];
  v16 = v15[6];
  v17 = v15[4];
  v18 = v15[2];
  v19 = *v15;
  v20 = *(double **)(a2 + 16);
  v21 = *(float64x2_t **)(a3 + 16);
  v22 = *(_QWORD *)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v23.f64[0] = *v20 + 1.0;
    v25 = (double *)(v22 + 32);
    v26 = v21 + 1;
    v27.f64[0] = v23.f64[0];
    v27.f64[1] = v23.f64[0];
    do
    {
      v24.f64[0] = v26->f64[0];
      v24 = vmulq_f64(v24, v23);
      v26[-1] = vmulq_f64(v26[-1], v27);
      v26->f64[0] = v24.f64[0];
      v26 = (float64x2_t *)((char *)v26 + 24);
      *(v25 - 4) = v23.f64[0] * *(v25 - 4);
      *v25 = v23.f64[0] * *v25;
      v25[4] = v23.f64[0] * v25[4];
      v25 += 9;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  *(_QWORD *)(a3 + 24) |= 1uLL;
  v28 = *(double **)(a2 + 16);
  v29 = *(float64x2_t **)(a5 + 16);
  v30 = *(_QWORD *)(a6 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v31 = *v28 + 1.0;
    v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v31, 0);
    v33 = (double *)(v30 + 80);
    v34 = v29 + 1;
    do
    {
      v35 = vmulq_n_f64(*v34, v31);
      v34[-1] = vmulq_f64(v34[-1], v32);
      *v34 = v35;
      *(v33 - 10) = v31 * *(v33 - 10);
      *(v33 - 5) = v31 * *(v33 - 5);
      *v33 = v31 * *v33;
      v33[5] = v31 * v33[5];
      v33 += 16;
      v34 += 2;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  *(_QWORD *)(a5 + 24) |= 1uLL;
  v36 = *(double **)(a2 + 16);
  v37 = *(float64x2_t **)(a7 + 16);
  v38 = *(_QWORD *)(a8 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v17 >= 1)
  {
    v39 = *v36 + 1.0;
    v40 = v37 + 2;
    v41 = (double *)(v38 + 168);
    v42.f64[0] = v39;
    v42.f64[1] = v39;
    v43.f64[0] = v39;
    v43.f64[1] = v39;
    v44.f64[0] = v39;
    v44.f64[1] = v39;
    do
    {
      v45 = vmulq_f64(*v40, v42);
      v46 = vmulq_f64(v40[-1], v43);
      v40[-2] = vmulq_f64(v40[-2], v44);
      v40[-1] = v46;
      *v40 = v45;
      v40 += 3;
      *(v41 - 21) = v39 * *(v41 - 21);
      *(v41 - 14) = v39 * *(v41 - 14);
      *(v41 - 7) = v39 * *(v41 - 7);
      *v41 = v39 * *v41;
      v41[7] = v39 * v41[7];
      v41[14] = v39 * v41[14];
      v41 += 36;
      --v17;
    }
    while (v17);
  }
  *(_QWORD *)(a8 + 24) |= 1uLL;
  *(_QWORD *)(a7 + 24) |= 1uLL;
  v47 = *(double **)(a2 + 16);
  v48 = *(float64x2_t **)(a9 + 16);
  v49 = *(double **)(a10 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v16 >= 1)
  {
    v50 = *v47 + 1.0;
    do
    {
      *v48 = vmulq_n_f64(*v48, v50);
      ++v48;
      *v49 = v50 * *v49;
      v49[3] = v50 * v49[3];
      v49 += 4;
      --v16;
    }
    while (v16);
  }
  *(_QWORD *)(a10 + 24) |= 1uLL;
  *(_QWORD *)(a9 + 24) |= 1uLL;
  v51 = *(double **)(a2 + 16);
  v52 = *(float64x2_t **)(a11 + 16);
  v53 = *(float64x2_t **)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v69 >= 1)
  {
    v54 = *v51 + 1.0;
    if (v69 < 4)
    {
      v55 = 0;
LABEL_19:
      v62 = v69 - v55;
      v63 = v55;
      v64 = &v53->f64[v55];
      v65 = &v52->f64[v63];
      do
      {
        *v65 = *v65 * v54;
        ++v65;
        *v64 = v54 * *v64;
        ++v64;
        --v62;
      }
      while (v62);
      goto LABEL_21;
    }
    v55 = v69 & 0x7FFFFFFC;
    v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0);
    v57 = v53 + 1;
    v58 = v52 + 1;
    v59 = v69 & 0xFFFFFFFC;
    do
    {
      v60 = vmulq_n_f64(*v58, v54);
      v58[-1] = vmulq_f64(v58[-1], v56);
      *v58 = v60;
      v61 = vmulq_n_f64(*v57, v54);
      v57[-1] = vmulq_f64(v56, v57[-1]);
      *v57 = v61;
      v57 += 2;
      v58 += 2;
      v59 -= 4;
    }
    while (v59);
    if (v55 != v69)
      goto LABEL_19;
  }
LABEL_21:
  *(_QWORD *)(a12 + 24) |= 1uLL;
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239679958(uint64_t *a1)
{
  sub_239679504(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_239679998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v70;
  uint64_t v73;

  v15 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v16 = v15[8];
  v17 = v15[6];
  v18 = v15[4];
  v19 = v15[2];
  v20 = *v15;
  v21 = *(double **)(a2 + 16);
  v22 = *(_QWORD *)(a3 + 16);
  v70 = *(_QWORD *)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  v73 = a2;
  halide_copy_to_host();
  if ((int)v20 >= 1)
  {
    v23 = *(int *)(v70 + 4);
    if ((int)v23 >= 1)
    {
      v24 = 0;
      v25 = *(unsigned int *)(v70 + 4);
      v26 = 3 * v23 + 3;
      do
      {
        v27 = 0;
        v28 = 3 * v26 * v24;
        do
        {
          if (v24 == v27)
          {
            v29 = *v21 + 1.0;
            *(double *)(v22 + 24 * v26 * v24) = *(double *)(v22 + 24 * v26 * v24) * v29;
            *(double *)(v22 + 8 * (v28 + 4)) = *(double *)(v22 + 8 * (v28 + 4)) * v29;
            *(double *)(v22 + 8 * (v28 + 8)) = *(double *)(v22 + 8 * (v28 + 8)) * v29;
          }
          ++v27;
        }
        while (v25 != v27);
        ++v24;
      }
      while (v24 != v20);
    }
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  v30 = *(double **)(a2 + 16);
  v31 = *(_QWORD *)(a5 + 16);
  v32 = *(_QWORD *)(a6 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v33 = *(int *)(v32 + 4);
    if ((int)v33 >= 1)
    {
      v34 = 0;
      v35 = *(unsigned int *)(v32 + 4);
      v36 = 4 * v33 + 4;
      do
      {
        v37 = 0;
        v38 = 4 * v36 * v34;
        do
        {
          if (v34 == v37)
          {
            v39 = *v30 + 1.0;
            *(double *)(v31 + 32 * v36 * v34) = *(double *)(v31 + 32 * v36 * v34) * v39;
            *(double *)(v31 + 8 * (v38 | 5)) = *(double *)(v31 + 8 * (v38 | 5)) * v39;
            *(double *)(v31 + 8 * (v38 | 0xA)) = *(double *)(v31 + 8 * (v38 | 0xA)) * v39;
            *(double *)(v31 + 8 * (v38 | 0xF)) = *(double *)(v31 + 8 * (v38 | 0xF)) * v39;
          }
          ++v37;
        }
        while (v35 != v37);
        ++v34;
      }
      while (v34 != v19);
    }
  }
  *(_QWORD *)(a5 + 24) |= 1uLL;
  v40 = *(double **)(v73 + 16);
  v41 = *(_QWORD *)(a7 + 16);
  v42 = *(_QWORD *)(a8 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v43 = *(int *)(v42 + 4);
    if ((int)v43 >= 1)
    {
      v44 = 0;
      v45 = *(unsigned int *)(v42 + 4);
      v46 = 6 * v43 + 6;
      do
      {
        v47 = 0;
        v48 = 6 * v46 * v44;
        do
        {
          if (v44 == v47)
          {
            v49 = *v40 + 1.0;
            *(double *)(v41 + 48 * v46 * v44) = *(double *)(v41 + 48 * v46 * v44) * v49;
            *(double *)(v41 + 8 * ((6 * ((v46 * v44) | 1)) | 1)) = *(double *)(v41 + 8 * ((6 * ((v46 * v44) | 1)) | 1))
                                                                 * v49;
            *(double *)(v41 + 8 * (v48 + 14)) = *(double *)(v41 + 8 * (v48 + 14)) * v49;
            *(double *)(v41 + 8 * (v48 + 21)) = *(double *)(v41 + 8 * (v48 + 21)) * v49;
            *(double *)(v41 + 8 * (v48 + 28)) = *(double *)(v41 + 8 * (v48 + 28)) * v49;
            *(double *)(v41 + 8 * (v48 + 35)) = *(double *)(v41 + 8 * (v48 + 35)) * v49;
          }
          ++v47;
        }
        while (v45 != v47);
        ++v44;
      }
      while (v44 != v18);
    }
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  v50 = *(double **)(v73 + 16);
  v51 = *(_QWORD *)(a9 + 16);
  v52 = *(_QWORD *)(a10 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v17 >= 1)
  {
    v53 = *(int *)(v52 + 4);
    if ((int)v53 >= 1)
    {
      v54 = 0;
      v55 = *(unsigned int *)(v52 + 4);
      v56 = 2 * v53 + 2;
      do
      {
        v57 = 0;
        do
        {
          if (v54 == v57)
          {
            v58 = *v50 + 1.0;
            *(double *)(v51 + 16 * v56 * v54) = *(double *)(v51 + 16 * v56 * v54) * v58;
            *(double *)(v51 + 8 * ((2 * v56 * v54) | 3)) = *(double *)(v51 + 8 * ((2 * v56 * v54) | 3)) * v58;
          }
          ++v57;
        }
        while (v55 != v57);
        ++v54;
      }
      while (v54 != v17);
    }
  }
  *(_QWORD *)(a9 + 24) |= 1uLL;
  v59 = *(double **)(v73 + 16);
  v60 = *(_QWORD *)(a11 + 16);
  v61 = *(_QWORD *)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v16 >= 1)
  {
    v62 = *(int *)(v61 + 4);
    if ((int)v62 >= 1)
    {
      v63 = 0;
      v64 = *(unsigned int *)(v61 + 4);
      v65 = v62 + 1;
      do
      {
        v66 = 0;
        do
        {
          if (v63 == v66)
            *(double *)(v60 + 8 * v65 * v63) = *(double *)(v60 + 8 * v65 * v63)
                                             + *v59 * *(double *)(v60 + 8 * v65 * v63);
          ++v66;
        }
        while (v64 != v66);
        ++v63;
      }
      while (v63 != v16);
    }
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239679E84(uint64_t *a1)
{
  sub_239679998(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_239679EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  uint64_t v13;
  int extent;
  int v15;
  int v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  double *v23;
  double v24;
  int *v25;
  int v26;
  unsigned int v27;
  double v28;
  unsigned int v29;
  double v30;
  double *v32;
  uint64_t v33;

  v12 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v13 = *v12;
  v33 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v15 = _gc_buffer_get_extent();
  v16 = _gc_buffer_get_extent();
  if (extent != 1 || v15 != v16)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a6 + 24) |= 1uLL;
  }
  v17 = *(double **)(a6 + 16);
  v32 = *(double **)(a3 + 16);
  v18 = *(_QWORD *)(a4 + 16);
  v19 = *(_QWORD *)(a5 + 16);
  v20 = _gc_buffer_get_extent();
  v21 = _gc_buffer_get_extent();
  v22 = _gc_buffer_get_extent();
  if (v20 != 2 || v21 != v22)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a7 + 24) |= 1uLL;
  }
  v23 = *(double **)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v13 >= 1)
  {
    v24 = *v32;
    v25 = (int *)(v33 + 4);
    do
    {
      v27 = *(v25 - 1);
      v26 = *v25;
      if (*v25 >> 30 == 3)
        v26 = *v25 + 0x40000000;
      v28 = *(double *)(v19 + 8 * v26);
      v29 = v27 + 0x40000000;
      if (v27 >> 30 != 3)
        v29 = *(v25 - 1);
      v30 = v24 * (v28 - *(double *)(v18 + 8 * (int)v29));
      *v17++ = v30;
      *v23 = v30 * v30;
      v23 += 2;
      v25 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967A10C(uint64_t *a1)
{
  sub_239679EC4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23967A134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  uint64_t v13;
  int extent;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  double *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  int *v27;
  float64x2_t v28;
  int v29;
  unsigned int v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  double v35;
  float64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v12 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v13 = *v12;
  v39 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v15 = _gc_buffer_get_extent();
  v16 = _gc_buffer_get_extent();
  if (extent != 3 || v15 != v16)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a6 + 24) |= 1uLL;
  }
  v37 = *(float64_t **)(a3 + 16);
  v38 = *(_QWORD *)(a6 + 16);
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(a5 + 16);
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  v21 = _gc_buffer_get_extent();
  if (v19 != 2 || v20 != v21)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a7 + 24) |= 1uLL;
  }
  v22 = *(double **)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v13 >= 1)
  {
    v23.f64[0] = *v37;
    v26 = (double *)(v38 + 8);
    v27 = (int *)(v39 + 4);
    v28.f64[0] = *v37;
    v28.f64[1] = *v37;
    do
    {
      v30 = *(v27 - 1);
      v29 = *v27;
      if (*v27 >> 30 == 3)
        v29 = *v27 + 0x40000000;
      v31 = (float64x2_t *)(v18 + 24 * v29);
      v32 = *v31;
      if (v30 >> 30 == 3)
        v30 += 0x40000000;
      v24.f64[0] = v31[1].f64[0];
      v33 = (float64x2_t *)(v17 + 24 * (int)v30);
      v25.f64[0] = v33[1].f64[0];
      v34 = vmulq_f64(vsubq_f64(v32, *v33), v28);
      v24 = vmulq_f64(vsubq_f64(v24, v25), v23);
      *(float64x2_t *)(v26 - 1) = v34;
      v35 = vmlad_n_f64(*v26 * *v26, v34.f64[0], v34.f64[0]);
      v26[1] = v24.f64[0];
      *v22 = vmlad_n_f64(v35, v24.f64[0], v24.f64[0]);
      v22 += 2;
      v26 += 3;
      v27 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967A3BC(uint64_t *a1)
{
  sub_23967A134(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23967A3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v17;
  int extent;
  int v19;
  int v20;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  float64x2_t *v37;
  float64x2_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  float64x2_t v44;
  float64x2_t *v46;
  float64x2_t v47;
  double v48;
  float64x2_t *v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  float64x2_t v63;
  unsigned int v64;
  float64x2_t v65;
  unsigned int v66;
  uint64_t v68;
  int v69;
  double *v70;
  uint64_t v71;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v71 = *v17;
  v68 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if (extent != 2 || v19 != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a11 + 16);
  v70 = *(double **)(a3 + 16);
  v23 = *(_QWORD *)(a4 + 16);
  v24 = *(_QWORD *)(a5 + 16);
  v25 = *(_QWORD *)(a6 + 16);
  v26 = *(_QWORD *)(a7 + 16);
  v27 = *(_QWORD *)(a8 + 16);
  v28 = *(_QWORD *)(a9 + 16);
  v29 = *(_QWORD *)(a10 + 16);
  v69 = _gc_buffer_get_extent();
  v30 = _gc_buffer_get_extent();
  v31 = _gc_buffer_get_extent();
  if (v69 != 2 || v30 != v31)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v32 = *(_QWORD *)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v71 >= 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = (unsigned int *)(v68 + 12);
    v37 = v22;
    do
    {
      v40 = *v36;
      v41 = v36[1];
      v42 = v41 + 0x40000000;
      if (v41 >> 30 != 3)
        v42 = v36[1];
      v43 = v28 + 72 * (int)v42;
      v44 = *(float64x2_t *)(v43 + 16);
      _Q1 = *(int8x16_t *)(v43 + 32);
      if (v40 >> 30 == 3)
        v40 += 0x40000000;
      v46 = (float64x2_t *)(v26 + 24 * (int)v40);
      v47 = *v46;
      v48 = v46[1].f64[0];
      _Q4 = vmulq_f64(v44, *v46);
      _Q5.f64[0] = v46->f64[1];
      __asm { FMLA            D4, D5, V1.D[1] }
      _Q4.f64[0] = _Q4.f64[0] + *(double *)(v43 + 64) * v48;
      v53 = (float64x2_t *)(v29 + 24 * (int)v42);
      _Q5.f64[0] = v53[1].f64[0];
      v54 = *(_OWORD *)&vaddq_f64(_Q4, _Q5);
      if (fabs(*(double *)&v54) <= 2.22044605e-16)
      {
        v37->f64[0] = 0.0;
        v37->f64[1] = 0.0;
        v38.f64[0] = 0.0;
        v39 = v34;
      }
      else
      {
        _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v43, v47.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v44, _Q1, 8uLL), v47, 1), *(float64x2_t *)(v43 + 48), v48);
        v55 = vdivq_f64(vaddq_f64(_Q5, *v53), (float64x2_t)vdupq_lane_s64(v54, 0));
        v56 = vmulq_f64(v55, v55);
        v57 = vaddq_f64(v56, (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1));
        v58 = vaddvq_f64(v56);
        v59 = *(v36 - 2);
        v60 = *(v36 - 1);
        v61 = v36[2];
        v62 = *(v36 - 3);
        if (v59 >> 30 == 3)
          v59 += 0x40000000;
        if (v60 >> 30 == 3)
          v60 += 0x40000000;
        v63 = *(float64x2_t *)(v25 + 16 * (int)v60);
        v64 = v61 + 0x40000000;
        if (v61 >> 30 != 3)
          v64 = v36[2];
        v65 = *(float64x2_t *)(v27 + 16 * (int)v64);
        v66 = v62 + 0x40000000;
        if (v62 >> 30 != 3)
          v66 = *(v36 - 3);
        v38 = vmulq_n_f64(vsubq_f64(v63, vmlaq_n_f64(v65, v55, *(double *)(v23 + 8 * (int)v66)+ v58* vmlad_n_f64(*(double *)(v24 + 24 * (int)v59) + v58 * *(double *)(v24 + 24 * (int)v59 + 8), *(double *)(v24 + 24 * (int)v59 + 16), vmulq_f64(v57, v57).f64[0])* *(double *)(v23 + 8 * (int)v66))), *v70);
        v39 = 2 * v35;
        *v37 = v38;
      }
      *(double *)(v32 + 8 * v39) = *(double *)((char *)v22->f64 + ((8 * v39) | 8))
                                 * *(double *)((char *)v22->f64 + ((8 * v39) | 8))
                                 + v38.f64[0] * v38.f64[0];
      ++v35;
      v34 += 2;
      ++v37;
      v36 += 6;
    }
    while (2 * v71 != v34);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967A804(uint64_t *a1)
{
  sub_23967A3E4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23967A844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v17;
  int extent;
  int v19;
  int v20;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  float64x2_t *v37;
  float64x2_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  float64x2_t v44;
  float64x2_t *v46;
  float64x2_t v47;
  double v48;
  float64x2_t *v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  float64x2_t v63;
  unsigned int v64;
  float64x2_t v65;
  unsigned int v66;
  uint64_t v68;
  int v69;
  double *v70;
  uint64_t v71;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v71 = *v17;
  v68 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if (extent != 2 || v19 != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a11 + 16);
  v70 = *(double **)(a3 + 16);
  v23 = *(_QWORD *)(a4 + 16);
  v24 = *(_QWORD *)(a5 + 16);
  v25 = *(_QWORD *)(a6 + 16);
  v26 = *(_QWORD *)(a7 + 16);
  v27 = *(_QWORD *)(a8 + 16);
  v28 = *(_QWORD *)(a9 + 16);
  v29 = *(_QWORD *)(a10 + 16);
  v69 = _gc_buffer_get_extent();
  v30 = _gc_buffer_get_extent();
  v31 = _gc_buffer_get_extent();
  if (v69 != 2 || v30 != v31)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v32 = *(_QWORD *)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v71 >= 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = (unsigned int *)(v68 + 12);
    v37 = v22;
    do
    {
      v40 = *v36;
      v41 = v36[1];
      v42 = v41 + 0x40000000;
      if (v41 >> 30 != 3)
        v42 = v36[1];
      v43 = v28 + 72 * (int)v42;
      v44 = *(float64x2_t *)(v43 + 16);
      _Q1 = *(int8x16_t *)(v43 + 32);
      if (v40 >> 30 == 3)
        v40 += 0x40000000;
      v46 = (float64x2_t *)(v26 + 24 * (int)v40);
      v47 = *v46;
      v48 = v46[1].f64[0];
      _Q4 = vmulq_f64(v44, *v46);
      _Q5.f64[0] = v46->f64[1];
      __asm { FMLA            D4, D5, V1.D[1] }
      _Q4.f64[0] = _Q4.f64[0] + *(double *)(v43 + 64) * v48;
      v53 = (float64x2_t *)(v29 + 24 * (int)v42);
      _Q5.f64[0] = v53[1].f64[0];
      v54 = *(_OWORD *)&vaddq_f64(_Q4, _Q5);
      if (fabs(*(double *)&v54) <= 2.22044605e-16)
      {
        v37->f64[0] = 0.0;
        v37->f64[1] = 0.0;
        v38.f64[0] = 0.0;
        v39 = v34;
      }
      else
      {
        _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v43, v47.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v44, _Q1, 8uLL), v47, 1), *(float64x2_t *)(v43 + 48), v48);
        v55 = vdivq_f64(vaddq_f64(_Q5, *v53), (float64x2_t)vdupq_lane_s64(v54, 0));
        v56 = vmulq_f64(v55, v55);
        v57 = vaddq_f64(v56, (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1));
        v58 = vaddvq_f64(v56);
        v59 = *(v36 - 2);
        v60 = *(v36 - 1);
        v61 = v36[2];
        v62 = *(v36 - 3);
        if (v59 >> 30 == 3)
          v59 += 0x40000000;
        if (v60 >> 30 == 3)
          v60 += 0x40000000;
        v63 = *(float64x2_t *)(v25 + 16 * (int)v60);
        v64 = v61 + 0x40000000;
        if (v61 >> 30 != 3)
          v64 = v36[2];
        v65 = *(float64x2_t *)(v27 + 16 * (int)v64);
        v66 = v62 + 0x40000000;
        if (v62 >> 30 != 3)
          v66 = *(v36 - 3);
        v38 = vmulq_n_f64(vsubq_f64(v63, vmlaq_n_f64(v65, v55, *(double *)(v23 + 8 * (int)v66)+ v58* vmlad_n_f64(*(double *)(v24 + 24 * (int)v59) + v58 * *(double *)(v24 + 24 * (int)v59 + 8), *(double *)(v24 + 24 * (int)v59 + 16), vmulq_f64(v57, v57).f64[0])* *(double *)(v23 + 8 * (int)v66))), *v70);
        v39 = 2 * v35;
        *v37 = v38;
      }
      *(double *)(v32 + 8 * v39) = *(double *)((char *)v22->f64 + ((8 * v39) | 8))
                                 * *(double *)((char *)v22->f64 + ((8 * v39) | 8))
                                 + v38.f64[0] * v38.f64[0];
      ++v35;
      v34 += 2;
      ++v37;
      v36 += 6;
    }
    while (2 * v71 != v34);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967AC64(uint64_t *a1)
{
  sub_23967A844(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23967ACA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  uint64_t v13;
  int extent;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  double *v22;
  const double *v23;
  float64x2_t v24;
  float64x2_t *v25;
  int *v26;
  int v27;
  unsigned int v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  const double *v34;
  float64x2_t *v35;
  uint64_t v36;

  v12 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v13 = *v12;
  v36 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v15 = _gc_buffer_get_extent();
  v16 = _gc_buffer_get_extent();
  if (extent != 4 || v15 != v16)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a6 + 24) |= 1uLL;
  }
  v34 = *(const double **)(a3 + 16);
  v35 = *(float64x2_t **)(a6 + 16);
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(a5 + 16);
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  v21 = _gc_buffer_get_extent();
  if (v19 != 2 || v20 != v21)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a7 + 24) |= 1uLL;
  }
  v22 = *(double **)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v13 >= 1)
  {
    v23 = v34;
    v24 = vld1q_dup_f64(v23);
    v25 = v35 + 1;
    v26 = (int *)(v36 + 4);
    do
    {
      v28 = *(v26 - 1);
      v27 = *v26;
      if (*v26 >> 30 == 3)
        v27 = *v26 + 0x40000000;
      v29 = (float64x2_t *)(v18 + 32 * v27);
      if (v28 >> 30 == 3)
        v28 += 0x40000000;
      v30 = (float64x2_t *)(v17 + 32 * (int)v28);
      v31 = vmulq_f64(vsubq_f64(*v29, *v30), v24);
      v32 = vmulq_f64(vsubq_f64(v29[1], v30[1]), v24);
      v25[-1] = v31;
      *v25 = v32;
      *v22 = vmlad_n_f64(vmlad_n_f64(v25[-1].f64[1] * v25[-1].f64[1], v31.f64[0], v31.f64[0]), v32.f64[0], v32.f64[0])
           + v25->f64[1] * v25->f64[1];
      v22 += 2;
      v25 += 2;
      v26 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967AF24(uint64_t *a1)
{
  sub_23967ACA4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23967AF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v17;
  int extent;
  int v19;
  int v20;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  float64x2_t *v32;
  float64x2_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t *v41;
  double v42;
  float64x2_t v43;
  float64x2_t *v48;
  float64x2_t v49;
  long double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  BOOL v55;
  uint64_t v56;
  float64x2_t *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  double v62;
  double v63;
  unsigned int v64;
  float64x2_t v65;
  unsigned int v66;
  float64x2_t v67;
  unsigned int v68;
  double v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  double v80;
  unsigned int v82;
  float64x2_t v84;
  uint64_t v85;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v72 = *v17;
  v71 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if (extent != 2 || v19 != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a11 + 16);
  v78 = *(_QWORD *)(a4 + 16);
  v79 = *(double **)(a3 + 16);
  v76 = *(_QWORD *)(a6 + 16);
  v77 = *(_QWORD *)(a5 + 16);
  v23 = *(_QWORD *)(a7 + 16);
  v75 = *(_QWORD *)(a8 + 16);
  v24 = *(_QWORD *)(a9 + 16);
  v85 = *(_QWORD *)(a10 + 16);
  v25 = _gc_buffer_get_extent();
  v26 = _gc_buffer_get_extent();
  v27 = _gc_buffer_get_extent();
  if (v25 != 2 || v26 != v27)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v28 = *(_QWORD *)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v72 >= 1)
  {
    v29 = 0;
    v30 = 0;
    v31 = (unsigned int *)(v71 + 12);
    v32 = v22;
    v73 = v28;
    v74 = v24;
    do
    {
      v36 = *v31;
      v35 = v31[1];
      if (v35 >> 30 == 3)
        v35 += 0x40000000;
      v37 = v24 + 72 * (int)v35;
      v38 = *(float64x2_t *)(v37 + 16);
      _Q2 = *(int8x16_t *)(v37 + 32);
      _Q3 = *(float64x2_t *)(v37 + 48);
      if (v36 >> 30 == 3)
        v36 += 0x40000000;
      v41 = (float64x2_t *)(v23 + 24 * (int)v36);
      v42 = v41[1].f64[0];
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v37, v41->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v38, _Q2, 8uLL), *v41, 1), _Q3, v42);
      _Q1 = vmulq_f64(v38, *v41);
      _Q3.f64[0] = v41->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v37 + 64) * v42;
      v48 = (float64x2_t *)(v85 + 24 * (int)v35);
      _Q3.f64[0] = v48[1].f64[0];
      v49 = vaddq_f64(v43, *v48);
      *(_QWORD *)&v50 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v51 = fabs(v50);
      v52 = vmlad_n_f64(vmuld_lane_f64(v49.f64[1], v49, 1), v49.f64[0], v49.f64[0]);
      v53 = sqrt(v52);
      v54 = fabs(v53);
      v55 = v54 <= 2.22044605e-16 || v51 <= 2.22044605e-16;
      if (v55 || v52 <= 0.0 || fmin(v54, v51) <= 2.22044605e-16)
      {
        v32->f64[0] = 0.0;
        v32->f64[1] = 0.0;
        v33.f64[0] = 0.0;
        v34 = v29;
      }
      else
      {
        *(_QWORD *)&v49.f64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
        v84 = v49;
        v56 = v23;
        v57 = v22;
        v58 = *(v31 - 2);
        v59 = *(v31 - 1);
        v60 = v31[2];
        v61 = *(v31 - 3);
        if (v58 >> 30 == 3)
          v58 += 0x40000000;
        v82 = v58;
        v80 = v50;
        v62 = atan2(v53, v50);
        v64 = v59 + 0x40000000;
        if (v59 >> 30 != 3)
          v64 = v59;
        v22 = v57;
        v23 = v56;
        v65 = *(float64x2_t *)(v76 + 16 * (int)v64);
        v66 = v60 + 0x40000000;
        if (v60 >> 30 != 3)
          v66 = v60;
        v67 = *(float64x2_t *)(v75 + 16 * (int)v66);
        v68 = v61 + 0x40000000;
        if (v61 >> 30 != 3)
          v68 = v61;
        v28 = v73;
        v24 = v74;
        v63 = v62 * (v62 * v62);
        v69 = (v62
             + v63 * *(double *)(v77 + 32 * (int)v82)
             + v62 * v62 * v63 * *(double *)(v77 + 32 * (int)v82 + 8)
             + v62 * v62 * (v62 * v62 * v63) * *(double *)(v77 + 32 * (int)v82 + 16)
             + *(double *)(v77 + 32 * (int)v82 + 24) * (v62 * v62 * (v62 * v62 * (v62 * v62 * v63))))
            / v53;
        if (v52 < 0.0000000149011612)
          v69 = 1.0 / v80;
        v33 = vmulq_n_f64(vsubq_f64(v65, vmlaq_n_f64(v67, v84, *(double *)(v78 + 8 * (int)v68) * v69)), *v79);
        v34 = 2 * v30;
        *v32 = v33;
      }
      *(double *)(v28 + 8 * v34) = *(double *)((char *)v22->f64 + ((8 * v34) | 8))
                                 * *(double *)((char *)v22->f64 + ((8 * v34) | 8))
                                 + v33.f64[0] * v33.f64[0];
      ++v30;
      v29 += 2;
      ++v32;
      v31 += 6;
    }
    while (2 * v72 != v29);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967B434(uint64_t *a1)
{
  sub_23967AF4C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23967B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v17;
  int extent;
  int v19;
  int v20;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  float64x2_t *v32;
  float64x2_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t *v41;
  double v42;
  float64x2_t v43;
  float64x2_t *v48;
  float64x2_t v49;
  long double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  BOOL v55;
  uint64_t v56;
  float64x2_t *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  double v62;
  double v63;
  unsigned int v64;
  float64x2_t v65;
  unsigned int v66;
  float64x2_t v67;
  unsigned int v68;
  double v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  double v80;
  unsigned int v82;
  float64x2_t v84;
  uint64_t v85;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v72 = *v17;
  v71 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if (extent != 2 || v19 != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a11 + 16);
  v78 = *(_QWORD *)(a4 + 16);
  v79 = *(double **)(a3 + 16);
  v76 = *(_QWORD *)(a6 + 16);
  v77 = *(_QWORD *)(a5 + 16);
  v23 = *(_QWORD *)(a7 + 16);
  v75 = *(_QWORD *)(a8 + 16);
  v24 = *(_QWORD *)(a9 + 16);
  v85 = *(_QWORD *)(a10 + 16);
  v25 = _gc_buffer_get_extent();
  v26 = _gc_buffer_get_extent();
  v27 = _gc_buffer_get_extent();
  if (v25 != 2 || v26 != v27)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v28 = *(_QWORD *)(a12 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v72 >= 1)
  {
    v29 = 0;
    v30 = 0;
    v31 = (unsigned int *)(v71 + 12);
    v32 = v22;
    v73 = v28;
    v74 = v24;
    do
    {
      v36 = *v31;
      v35 = v31[1];
      if (v35 >> 30 == 3)
        v35 += 0x40000000;
      v37 = v24 + 72 * (int)v35;
      v38 = *(float64x2_t *)(v37 + 16);
      _Q2 = *(int8x16_t *)(v37 + 32);
      _Q3 = *(float64x2_t *)(v37 + 48);
      if (v36 >> 30 == 3)
        v36 += 0x40000000;
      v41 = (float64x2_t *)(v23 + 24 * (int)v36);
      v42 = v41[1].f64[0];
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v37, v41->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v38, _Q2, 8uLL), *v41, 1), _Q3, v42);
      _Q1 = vmulq_f64(v38, *v41);
      _Q3.f64[0] = v41->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v37 + 64) * v42;
      v48 = (float64x2_t *)(v85 + 24 * (int)v35);
      _Q3.f64[0] = v48[1].f64[0];
      v49 = vaddq_f64(v43, *v48);
      *(_QWORD *)&v50 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v51 = fabs(v50);
      v52 = vmlad_n_f64(vmuld_lane_f64(v49.f64[1], v49, 1), v49.f64[0], v49.f64[0]);
      v53 = sqrt(v52);
      v54 = fabs(v53);
      v55 = v54 <= 2.22044605e-16 || v51 <= 2.22044605e-16;
      if (v55 || v52 <= 0.0 || fmin(v54, v51) <= 2.22044605e-16)
      {
        v32->f64[0] = 0.0;
        v32->f64[1] = 0.0;
        v33.f64[0] = 0.0;
        v34 = v29;
      }
      else
      {
        *(_QWORD *)&v49.f64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
        v84 = v49;
        v56 = v23;
        v57 = v22;
        v58 = *(v31 - 2);
        v59 = *(v31 - 1);
        v60 = v31[2];
        v61 = *(v31 - 3);
        if (v58 >> 30 == 3)
          v58 += 0x40000000;
        v82 = v58;
        v80 = v50;
        v62 = atan2(v53, v50);
        v64 = v59 + 0x40000000;
        if (v59 >> 30 != 3)
          v64 = v59;
        v22 = v57;
        v23 = v56;
        v65 = *(float64x2_t *)(v76 + 16 * (int)v64);
        v66 = v60 + 0x40000000;
        if (v60 >> 30 != 3)
          v66 = v60;
        v67 = *(float64x2_t *)(v75 + 16 * (int)v66);
        v68 = v61 + 0x40000000;
        if (v61 >> 30 != 3)
          v68 = v61;
        v28 = v73;
        v24 = v74;
        v63 = v62 * (v62 * v62);
        v69 = (v62
             + v63 * *(double *)(v77 + 32 * (int)v82)
             + v62 * v62 * v63 * *(double *)(v77 + 32 * (int)v82 + 8)
             + v62 * v62 * (v62 * v62 * v63) * *(double *)(v77 + 32 * (int)v82 + 16)
             + *(double *)(v77 + 32 * (int)v82 + 24) * (v62 * v62 * (v62 * v62 * (v62 * v62 * v63))))
            / v53;
        if (v52 < 0.0000000149011612)
          v69 = 1.0 / v80;
        v33 = vmulq_n_f64(vsubq_f64(v65, vmlaq_n_f64(v67, v84, *(double *)(v78 + 8 * (int)v68) * v69)), *v79);
        v34 = 2 * v30;
        *v32 = v33;
      }
      *(double *)(v28 + 8 * v34) = *(double *)((char *)v22->f64 + ((8 * v34) | 8))
                                 * *(double *)((char *)v22->f64 + ((8 * v34) | 8))
                                 + v33.f64[0] * v33.f64[0];
      ++v30;
      v29 += 2;
      ++v32;
      v31 += 6;
    }
    while (2 * v72 != v29);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967B960(uint64_t *a1)
{
  sub_23967B474(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23967B9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  uint64_t v13;
  int extent;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  double *v22;
  const double *v23;
  float64x2_t v24;
  double *v25;
  int *v26;
  int v27;
  unsigned int v28;
  float64x2_t v29;
  unsigned int v30;
  float64x2_t v31;
  double v32;
  const double *v34;
  uint64_t v35;
  uint64_t v36;

  v12 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v13 = *v12;
  v36 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v15 = _gc_buffer_get_extent();
  v16 = _gc_buffer_get_extent();
  if (extent != 2 || v15 != v16)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a6 + 24) |= 1uLL;
  }
  v34 = *(const double **)(a3 + 16);
  v35 = *(_QWORD *)(a6 + 16);
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(a5 + 16);
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  v21 = _gc_buffer_get_extent();
  if (v19 != 2 || v20 != v21)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a7 + 24) |= 1uLL;
  }
  v22 = *(double **)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v13 >= 1)
  {
    v23 = v34;
    v24 = vld1q_dup_f64(v23);
    v25 = (double *)(v35 + 8);
    v26 = (int *)(v36 + 4);
    do
    {
      v28 = *(v26 - 1);
      v27 = *v26;
      if (*v26 >> 30 == 3)
        v27 = *v26 + 0x40000000;
      v29 = *(float64x2_t *)(v18 + 16 * v27);
      v30 = v28 + 0x40000000;
      if (v28 >> 30 != 3)
        v30 = *(v26 - 1);
      v31 = vmulq_f64(vsubq_f64(v29, *(float64x2_t *)(v17 + 16 * (int)v30)), v24);
      *(float64x2_t *)(v25 - 1) = v31;
      v32 = *v25;
      v25 += 2;
      *v22 = vmulq_f64(v31, v31).f64[0] + v32 * v32;
      v22 += 2;
      v26 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23967BBF8(uint64_t *a1)
{
  sub_23967B9A0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23967BC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float64x2_t *v78;
  uint64_t v79;
  float64x2_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float64x2_t *v86;
  double v87;
  uint64_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t i;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  int *v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double *v127;
  uint64_t v128;
  double v129;
  double *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t j;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  int *v148;
  uint64_t v149;
  uint64_t v152;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 *v164;
  uint64_t v165;
  double v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t k;
  uint64_t v183;
  uint64_t v184;
  __int128 *v185;
  int *v186;
  uint64_t v187;
  _QWORD *v191;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 *v204;
  uint64_t v205;
  double v206;
  __int128 *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v212;
  __int128 v215;
  __int128 v216;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t m;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  int *v231;
  uint64_t v232;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  double v246;
  uint64_t *v247;
  __int128 *v248;
  uint64_t v249;
  __int128 v250;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  uint64_t v265;
  uint64_t n;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float64x2_t *v270;
  uint64_t v271;
  int *v272;
  int *v273;
  uint64_t v274;
  uint64_t v275;
  float64x2_t *v276;
  uint64_t v277;
  uint64_t v278;
  int *v279;
  double *v280;
  uint64_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int *v290;
  double *v291;
  uint64_t v292;
  uint64_t v293;
  float64x2_t *v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t ii;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  float64x2_t *v306;
  uint64_t v307;
  uint64_t v308;
  int *v309;
  uint64_t v310;
  float64x2_t v311;
  uint64_t v313;
  double v314;
  float64x2_t v315;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  float64x2_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  float64x2_t *v326;
  uint64_t v327;
  float64x2_t v328;
  uint64_t v329;
  double *v330;
  uint64_t v331;
  float64x2_t v332;
  float64x2_t v334;
  double v335;
  float64x2_t v336;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t jj;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  float64x2_t *v349;
  uint64_t v350;
  uint64_t v351;
  int *v352;
  uint64_t v353;
  float64x2_t v354;
  uint64_t v357;
  float64x2_t v358;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  float64x2_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  float64x2_t *v371;
  uint64_t v372;
  float64x2_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  float64x2_t v377;
  float64x2_t v380;
  float64x2_t v381;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t kk;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  float64x2_t *v395;
  uint64_t v396;
  uint64_t v397;
  int *v398;
  uint64_t v399;
  float64x2_t v400;
  uint64_t v404;
  float64x2_t v405;
  uint64_t v408;
  uint64_t v409;
  float64x2_t *v410;
  uint64_t v411;
  float64x2_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  float64x2_t *v416;
  uint64_t v417;
  float64x2_t v418;
  float64x2_t *v419;
  uint64_t v420;
  uint64_t v421;
  float64x2_t v422;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t mm;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  float64x2_t *v443;
  uint64_t v444;
  int8x16_t *v445;
  int *v446;
  uint64_t v447;
  float64x2_t v448;
  float64x2_t v451;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  float64x2_t *v456;
  uint64_t v457;
  float64x2_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  float64x2_t *v464;
  uint64_t v465;
  float64x2_t v466;
  uint64_t v467;
  float64x2_t *v468;
  uint64_t v469;
  float64x2_t v471;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t nn;
  uint64_t v483;
  uint64_t v484;
  float64x2_t *v485;
  float64x2_t *v486;
  int *v487;
  int *v488;
  uint64_t v489;
  uint64_t v490;
  float64x2_t *v491;
  double v492;
  float64x2_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int *v497;
  double *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  float64x2_t *v504;
  float64x2_t *v505;
  int *v506;
  double *v507;
  uint64_t v508;
  uint64_t v509;
  float64x2_t *v510;
  float64x2_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  int *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t i1;
  uint64_t v521;
  uint64_t v522;
  float64x2_t *v523;
  float64x2_t *v524;
  int *v525;
  int *v526;
  uint64_t v527;
  uint64_t v528;
  float64x2_t *v529;
  float64x2_t *v530;
  double v531;
  float64x2_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  float64x2_t *v541;
  float64x2_t *v542;
  int *v543;
  double *v544;
  uint64_t v545;
  uint64_t v546;
  float64x2_t *v547;
  float64x2_t v548;
  float64x2_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t i2;
  uint64_t v557;
  uint64_t v558;
  float64x2_t *v559;
  float64x2_t *v560;
  float64x2_t *v561;
  int *v562;
  uint64_t v563;
  float64x2_t *v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t *v567;
  uint64_t v568;
  float64x2_t *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  float64x2_t *v573;
  float64x2_t *v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t *v577;
  float64x2_t *v578;
  uint64_t v579;
  float64x2_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t i3;
  uint64_t v589;
  uint64_t v590;
  float64x2_t *v591;
  float64x2_t *v592;
  float64x2_t *v593;
  int *v594;
  uint64_t v595;
  float64x2_t *v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  uint64_t v600;
  float64x2_t *v601;
  uint64_t v602;
  float64x2_t *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  float64x2_t *v607;
  float64x2_t *v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t *v611;
  float64x2_t *v612;
  uint64_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t i4;
  uint64_t v624;
  uint64_t v625;
  float64x2_t *v626;
  float64x2_t *v627;
  float64x2_t *v628;
  int *v629;
  uint64_t v630;
  float64x2_t v631;
  float64x2_t v632;
  unint64_t v633;
  float64x2_t *v634;
  uint64_t v635;
  float64x2_t *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  float64x2_t *v640;
  float64x2_t *v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t *v644;
  float64x2_t *v645;
  uint64_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t i5;
  uint64_t v661;
  uint64_t v662;
  float64x2_t *v663;
  float64x2_t *v664;
  float64x2_t *v665;
  int *v666;
  int *v667;
  uint64_t v668;
  uint64_t v669;
  float64x2_t *v670;
  double v671;
  float64x2_t v672;
  float64x2_t v673;
  unint64_t v674;
  uint64_t v675;
  int *v676;
  double *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  float64x2_t *v681;
  float64x2_t *v682;
  float64x2_t *v683;
  int *v684;
  double *v685;
  uint64_t v686;
  uint64_t v687;
  float64x2_t *v688;
  float64x2_t v689;
  float64x2_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t i6;
  uint64_t v700;
  uint64_t v701;
  float64x2_t *v702;
  float64x2_t *v703;
  float64x2_t *v704;
  int *v705;
  int *v706;
  uint64_t v707;
  uint64_t v708;
  float64x2_t *v709;
  float64x2_t *v710;
  double v711;
  float64x2_t v712;
  float64x2_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  float64x2_t *v722;
  float64x2_t *v723;
  float64x2_t *v724;
  int *v725;
  double *v726;
  uint64_t v727;
  uint64_t v728;
  float64x2_t *v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t i7;
  uint64_t v742;
  uint64_t v743;
  float64x2_t *v744;
  float64x2_t *v745;
  float64x2_t *v746;
  int *v747;
  int *v748;
  uint64_t v749;
  uint64_t v750;
  float64x2_t *v751;
  float64x2_t *v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  int *v759;
  float64x2_t *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  float64x2_t *v764;
  float64x2_t *v765;
  float64x2_t *v766;
  int *v767;
  float64x2_t *v768;
  uint64_t v769;
  uint64_t v770;
  float64x2_t *v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  int *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t i8;
  uint64_t v783;
  uint64_t v784;
  float64x2_t *v785;
  float64x2_t *v786;
  float64x2_t *v787;
  float64x2_t *v788;
  int *v789;
  uint64_t v790;
  float64x2_t *v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t *v796;
  uint64_t v797;
  float64x2_t *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  float64x2_t *v802;
  float64x2_t *v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t *v807;
  float64x2_t *v808;
  uint64_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  int *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t i9;
  uint64_t v820;
  uint64_t v821;
  float64x2_t *v822;
  float64x2_t *v823;
  float64x2_t *v824;
  float64x2_t *v825;
  int *v826;
  uint64_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  uint64_t v831;
  uint64_t v832;
  float64x2_t *v833;
  uint64_t v834;
  float64x2_t *v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  float64x2_t *v839;
  float64x2_t *v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t *v844;
  float64x2_t *v845;
  uint64_t v846;
  float64x2_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  int *v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t i10;
  uint64_t v857;
  uint64_t v858;
  float64x2_t *v859;
  int *v860;
  int *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int *v866;
  double *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  int *v873;
  double *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t i11;
  uint64_t v886;
  uint64_t v887;
  float64x2_t *v888;
  int *v889;
  int *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int *v901;
  double *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t i12;
  uint64_t v914;
  uint64_t v915;
  float64x2_t *v916;
  int *v917;
  int *v918;
  uint64_t v919;
  uint64_t v920;
  float64x2_t *v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  int *v925;
  float64x2_t *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int *v932;
  float64x2_t *v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  int *v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t i13;
  uint64_t v945;
  uint64_t v946;
  float64x2_t *v947;
  int *v948;
  int *v949;
  uint64_t v950;
  uint64_t v951;
  float64x2_t *v952;
  float64x2_t *v953;
  unint64_t v954;
  unint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  int *v959;
  float64x2_t *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int *v964;
  float64x2_t *v965;
  uint64_t v966;
  uint64_t v967;
  float64x2_t *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t i14;
  uint64_t v976;
  uint64_t v977;
  float64x2_t *v978;
  float64x2_t *v979;
  int *v980;
  uint64_t v981;
  float64x2_t *v982;
  uint64_t v983;
  float64x2_t *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  float64x2_t *v989;
  uint64_t v990;
  float64x2_t *v991;
  float64x2_t v992;
  float64x2_t *v993;
  float64x2_t *v994;
  uint64_t v995;
  float64x2_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int *v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t i15;
  uint64_t v1004;
  uint64_t v1005;
  double *v1006;
  int *v1007;
  uint64_t v1008;
  unint64_t v1010;
  unint64_t v1011;
  unint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  uint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  unint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  unint64_t v1040;
  uint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  unint64_t v1054;
  unint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  unint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1067;
  unint64_t v1068;
  unint64_t v1069;
  unint64_t v1071;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  unint64_t v1079;
  unint64_t v1080;
  uint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;

  v1073 = STACK[0x3F0];
  v72 = STACK[0x3E8];
  v73 = STACK[0x3E0];
  v74 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v1097 = v74[48];
  v1098 = v74[46];
  v1092 = v74[42];
  v1094 = v74[44];
  v1062 = v74[38];
  v1063 = v74[40];
  v1057 = v74[34];
  v1060 = v74[36];
  v1049 = v74[30];
  v1052 = v74[32];
  v1043 = v74[26];
  v1045 = v74[28];
  v1038 = v74[22];
  v1041 = v74[24];
  v1031 = v74[18];
  v1035 = v74[20];
  v1027 = v74[14];
  v1030 = v74[16];
  v1086 = v74[12];
  v1021 = v74[8];
  v1025 = v74[10];
  v75 = v74[6];
  v76 = v74[4];
  v77 = v74[2];
  v1067 = *v74;
  if ((**(_BYTE **)(v73 + 16) & 1) != 0)
  {
    v1075 = v72;
    v78 = *(float64x2_t **)(a2 + 16);
    v79 = *(_QWORD *)(a3 + 16);
    v80 = *(float64x2_t **)(a4 + 16);
    v81 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1067 >= 1)
    {
      v82 = *(int *)(v79 + 4);
      if ((int)v82 >= 1)
      {
        v83 = 0;
        v84 = 0;
        v85 = *(unsigned int *)(v79 + 4);
        v86 = v78 + 1;
        do
        {
          v87 = *(double *)(v81 + 8 * v84);
          if (v82 >= 4)
          {
            v89 = 0uLL;
            v90 = (float64x2_t)*(unint64_t *)(v81 + 8 * v84);
            v91 = v86;
            v92 = v80 + 1;
            v93 = v82 & 0xFFFFFFFC;
            do
            {
              v90 = vmlaq_f64(v90, v91[-1], v92[-1]);
              v89 = vmlaq_f64(v89, *v91, *v92);
              v92 += 2;
              v91 += 2;
              v93 -= 4;
            }
            while (v93);
            v87 = vaddvq_f64(vaddq_f64(v89, v90));
            v88 = v82 & 0xFFFFFFFC;
            if (v88 == v85)
              goto LABEL_5;
          }
          else
          {
            v88 = 0;
          }
          v94 = v85 - v88;
          v95 = &v80->f64[v88];
          v96 = &v78->f64[v88 + v83];
          do
          {
            v97 = *v96++;
            v98 = v97;
            v99 = *v95++;
            v87 = v87 + v98 * v99;
            --v94;
          }
          while (v94);
LABEL_5:
          *(double *)(v81 + 8 * v84++) = v87;
          v86 = (float64x2_t *)((char *)v86 + 8 * v82);
          v83 += v82;
        }
        while (v84 != v1067);
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
    v72 = v1075;
  }
  v1069 = STACK[0x3F8];
  if ((**(_BYTE **)(v72 + 16) & 1) != 0)
  {
    v1076 = *(_QWORD *)(a6 + 16);
    v100 = *(_QWORD *)(a7 + 16);
    v101 = *(_QWORD *)(a8 + 16);
    v102 = *(_QWORD *)(a9 + 16);
    v103 = *(int **)(a10 + 16);
    v104 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v77 >= 1)
    {
      v105 = 0;
      for (i = 0; i != v77; ++i)
      {
        v107 = *(int *)(v102 + 4 * i);
        if (v107 >> 30 != 3)
        {
          v108 = *(unsigned int *)(v100 + 4);
          if ((int)v108 >= 1)
          {
            v109 = (double *)(v1076 + 16 + v105 * v108);
            v110 = v103;
            do
            {
              v111 = *v110;
              if (v111 >> 30 != 3)
              {
                _Q0 = *((_OWORD *)v109 - 1);
                v113 = v101 + 24 * v111;
                _D1 = *(_QWORD *)(v113 + 8);
                __asm { FMLA            D2, D1, V0.D[1] }
                *(double *)(v104 + 8 * v107) = *(double *)(v104 + 8 * v107) + _D2 + *v109 * *(double *)(v113 + 16);
              }
              v109 += 3;
              ++v110;
              --v108;
            }
            while (v108);
          }
        }
        v105 += 24;
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v1013 = STACK[0x400];
  if ((**(_BYTE **)(v1073 + 16) & 1) != 0)
  {
    v120 = *(_QWORD *)(a6 + 16);
    v121 = *(_QWORD *)(a7 + 16);
    v122 = *(_QWORD *)(a8 + 16);
    v123 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v77 >= 1)
    {
      v124 = *(int *)(v121 + 4);
      if ((int)v124 >= 1)
      {
        v125 = 0;
        v126 = *(unsigned int *)(v121 + 4);
        v127 = (double *)(v120 + 16);
        v128 = 24 * v124;
        do
        {
          v129 = *(double *)(v123 + 8 * v125);
          v130 = v127;
          v131 = (uint64_t *)(v122 + 16);
          v132 = v126;
          do
          {
            _Q1 = *((_OWORD *)v130 - 1);
            _D2 = *(v131 - 1);
            __asm { FMLA            D3, D2, V1.D[1] }
            v136 = *v131;
            v131 += 3;
            *(_QWORD *)&_Q1 = v136;
            v137 = *v130;
            v130 += 3;
            v129 = v129 + _D3 + v137 * *(double *)&_Q1;
            --v132;
          }
          while (v132);
          *(double *)(v123 + 8 * v125++) = v129;
          v127 = (double *)((char *)v127 + v128);
        }
        while (v125 != v77);
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v1074 = STACK[0x408];
  if ((**(_BYTE **)(v1069 + 16) & 1) != 0)
  {
    v1083 = *(_QWORD *)(a11 + 16);
    v138 = *(_QWORD *)(a12 + 16);
    v139 = *(_QWORD *)(a13 + 16);
    v140 = *(_QWORD *)(a9 + 16);
    v141 = *(int **)(a14 + 16);
    v142 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v76 >= 1)
    {
      v143 = 0;
      for (j = 0; j != v76; ++j)
      {
        v145 = *(int *)(v140 + 4 * j);
        if (v145 >> 30 != 3)
        {
          v146 = *(unsigned int *)(v138 + 4);
          if ((int)v146 >= 1)
          {
            v147 = (__int128 *)(v1083 + 16 + v143 * v146);
            v148 = v141;
            do
            {
              v149 = *v148;
              if (v149 >> 30 != 3)
              {
                _Q0 = *(v147 - 1);
                _Q1 = *v147;
                v152 = v139 + 32 * v149;
                _D2 = *(_QWORD *)(v152 + 8);
                __asm { FMLA            D4, D2, V0.D[1] }
                *(_QWORD *)&_Q0 = *(_QWORD *)(v152 + 24);
                __asm { FMLA            D4, D0, V1.D[1] }
                *(double *)(v142 + 8 * v145) = *(double *)(v142 + 8 * v145) + _D4;
              }
              v147 += 2;
              ++v148;
              --v146;
            }
            while (v146);
          }
        }
        v143 += 32;
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v1014 = STACK[0x410];
  v156 = a16;
  if ((**(_BYTE **)(v1013 + 16) & 1) != 0)
  {
    v157 = *(_QWORD *)(a11 + 16);
    v158 = *(_QWORD *)(a12 + 16);
    v159 = *(_QWORD *)(a13 + 16);
    v160 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v76 >= 1)
    {
      v161 = *(int *)(v158 + 4);
      if ((int)v161 >= 1)
      {
        v162 = 0;
        v163 = *(unsigned int *)(v158 + 4);
        v164 = (__int128 *)(v157 + 16);
        v165 = 32 * v161;
        do
        {
          v166 = *(double *)(v160 + 8 * v162);
          v167 = v164;
          v168 = v159 + 16;
          v169 = v163;
          do
          {
            _Q1 = *(v167 - 1);
            _Q2 = *v167;
            _D3 = *(_QWORD *)(v168 - 8);
            __asm { FMLA            D5, D3, V1.D[1] }
            *(_QWORD *)&_Q1 = *(_QWORD *)(v168 + 8);
            __asm { FMLA            D5, D1, V2.D[1] }
            v166 = v166 + _D5;
            v168 += 32;
            v167 += 2;
            --v169;
          }
          while (v169);
          *(double *)(v160 + 8 * v162++) = v166;
          v164 = (__int128 *)((char *)v164 + v165);
        }
        while (v162 != v76);
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v175 = STACK[0x418];
  if ((**(_BYTE **)(v1074 + 16) & 1) != 0)
  {
    v1068 = STACK[0x418];
    v1017 = *(_QWORD *)(a15 + 16);
    v176 = *(_QWORD *)(a16 + 16);
    v177 = *(_QWORD *)(a17 + 16);
    v178 = *(_QWORD *)(a9 + 16);
    v179 = *(int **)(a18 + 16);
    v180 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v75 >= 1)
    {
      v181 = 0;
      for (k = 0; k != v75; ++k)
      {
        v183 = *(int *)(v178 + 4 * k);
        if (v183 >> 30 != 3)
        {
          v184 = *(unsigned int *)(v176 + 4);
          if ((int)v184 >= 1)
          {
            v185 = (__int128 *)(v1017 + 32 + v181 * v184);
            v186 = v179;
            do
            {
              v187 = *v186;
              if (v187 >> 30 != 3)
              {
                _Q0 = *(v185 - 2);
                _Q1 = *(v185 - 1);
                _Q2 = *v185;
                v191 = (_QWORD *)(v177 + 48 * v187);
                _D3 = v191[1];
                __asm { FMLA            D6, D3, V0.D[1] }
                *(_QWORD *)&_Q0 = v191[3];
                __asm { FMLA            D6, D0, V1.D[1] }
                *(_QWORD *)&_Q0 = v191[5];
                __asm { FMLA            D6, D0, V2.D[1] }
                *(double *)(v180 + 8 * v183) = *(double *)(v180 + 8 * v183) + _D6;
              }
              v185 += 3;
              ++v186;
              --v184;
            }
            while (v184);
          }
        }
        v181 += 48;
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
    v156 = a16;
    v175 = v1068;
  }
  v1010 = STACK[0x420];
  v196 = v1086;
  if ((**(_BYTE **)(v1014 + 16) & 1) != 0)
  {
    v197 = *(_QWORD *)(a15 + 16);
    v198 = *(_QWORD *)(v156 + 16);
    v199 = *(_QWORD *)(a17 + 16);
    v200 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v75 >= 1)
    {
      v201 = *(int *)(v198 + 4);
      if ((int)v201 >= 1)
      {
        v202 = 0;
        v203 = *(unsigned int *)(v198 + 4);
        v204 = (__int128 *)(v197 + 32);
        v205 = 48 * v201;
        do
        {
          v206 = *(double *)(v200 + 8 * v202);
          v207 = (__int128 *)(v199 + 32);
          v208 = v204;
          v209 = v203;
          do
          {
            _Q1 = *(v208 - 2);
            _Q2 = *(v208 - 1);
            v212 = *v208;
            v208 += 3;
            _V3.D[1] = *((_QWORD *)&v212 + 1);
            _Q4 = *(v207 - 2);
            v215 = *(v207 - 1);
            v216 = *v207;
            v207 += 3;
            *(_QWORD *)&_Q4 = *((_QWORD *)&_Q4 + 1);
            __asm { FMLA            D7, D4, V1.D[1] }
            *(_QWORD *)&_Q1 = *((_QWORD *)&v215 + 1);
            __asm { FMLA            D7, D1, V2.D[1] }
            *(_QWORD *)&_Q1 = *((_QWORD *)&v216 + 1);
            __asm { FMLA            D7, D1, V3.D[1] }
            v206 = v206 + _D7;
            --v209;
          }
          while (v209);
          *(double *)(v200 + 8 * v202++) = v206;
          v204 = (__int128 *)((char *)v204 + v205);
        }
        while (v202 != v75);
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v220 = STACK[0x428];
  if ((**(_BYTE **)(v175 + 16) & 1) != 0)
  {
    v1084 = STACK[0x428];
    v1015 = *(_QWORD *)(a19 + 16);
    v221 = *(_QWORD *)(a20 + 16);
    v222 = *(_QWORD *)(a21 + 16);
    v223 = *(_QWORD *)(a9 + 16);
    v224 = *(int **)(a22 + 16);
    v225 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1021 >= 1)
    {
      v226 = 0;
      for (m = 0; m != v1021; ++m)
      {
        v228 = *(int *)(v223 + 4 * m);
        if (v228 >> 30 != 3)
        {
          v229 = *(unsigned int *)(v221 + 4);
          if ((int)v229 >= 1)
          {
            v230 = (uint64_t *)(v1015 + 8 + v226 * v229);
            v231 = v224;
            do
            {
              v232 = *v231;
              if (v232 >> 30 != 3)
              {
                _Q0 = *(_OWORD *)(v222 + 16 * v232);
                _D2 = *v230;
                __asm { FMLA            D1, D2, V0.D[1] }
                *(double *)(v225 + 8 * v228) = *(double *)(v225 + 8 * v228) + _D1;
              }
              v230 += 2;
              ++v231;
              --v229;
            }
            while (v229);
          }
        }
        v226 += 16;
      }
    }
    v220 = v1084;
    *(_QWORD *)(a5 + 24) |= 1uLL;
    v196 = v1086;
  }
  v236 = a26;
  v1011 = STACK[0x430];
  if ((**(_BYTE **)(v1010 + 16) & 1) != 0)
  {
    v237 = *(_QWORD *)(a19 + 16);
    v238 = *(_QWORD *)(a20 + 16);
    v239 = *(__int128 **)(a21 + 16);
    v240 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1021 >= 1)
    {
      v241 = *(int *)(v238 + 4);
      if ((int)v241 >= 1)
      {
        v242 = 0;
        v243 = *(unsigned int *)(v238 + 4);
        v244 = (uint64_t *)(v237 + 8);
        v245 = 16 * v241;
        do
        {
          v246 = *(double *)(v240 + 8 * v242);
          v247 = v244;
          v248 = v239;
          v249 = v243;
          do
          {
            v250 = *v248++;
            _V1.D[1] = *((_QWORD *)&v250 + 1);
            _D3 = *v247;
            __asm { FMLA            D2, D3, V1.D[1] }
            v246 = v246 + _D2;
            v247 += 2;
            --v249;
          }
          while (v249);
          *(double *)(v240 + 8 * v242++) = v246;
          v244 = (uint64_t *)((char *)v244 + v245);
        }
        while (v242 != v1021);
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v254 = STACK[0x438];
  v1018 = STACK[0x438];
  if ((**(_BYTE **)(v220 + 16) & 1) != 0)
  {
    v255 = *(_QWORD *)(a23 + 16);
    v256 = *(_QWORD *)(a24 + 16);
    v257 = *(_QWORD *)(a25 + 16);
    v258 = *(_QWORD *)(a4 + 16);
    v259 = *(_QWORD *)(a10 + 16);
    v260 = *(int **)(a9 + 16);
    v261 = *(_QWORD *)(a26 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1025 >= 1)
    {
      v265 = 0;
      for (n = 0; n != v1025; ++n)
      {
        v267 = *(int *)(v259 + 4 * n);
        if (v267 >> 30 != 3)
        {
          v268 = *(unsigned int *)(v256 + 4);
          if ((int)v268 >= 1)
          {
            v269 = 3 * v267;
            v270 = (float64x2_t *)(v261 + 24 * v267);
            v271 = v269 + 2;
            v272 = (int *)(v257 + v265 * v268);
            v273 = v260;
            do
            {
              v274 = *v272;
              if ((_DWORD)v274 != -1)
              {
                v275 = *v273;
                if (v275 >> 30 != 3)
                {
                  v262.f64[0] = *(float64_t *)(v261 + 8 * v271);
                  v276 = (float64x2_t *)(v255 + 24 * v274);
                  v263.f64[0] = *(float64_t *)(v258 + 8 * v275);
                  v264.f64[0] = v276[1].f64[0];
                  v262 = vmlaq_f64(v262, v264, v263);
                  *v270 = vmlaq_n_f64(*v270, *v276, v263.f64[0]);
                  *(float64_t *)(v261 + 8 * v271) = v262.f64[0];
                }
              }
              ++v273;
              ++v272;
              --v268;
            }
            while (v268);
          }
        }
        v265 += 4;
      }
    }
    v236 = a26;
    v196 = v1086;
    *(_QWORD *)(a26 + 24) |= 1uLL;
    v254 = v1018;
  }
  v1012 = STACK[0x440];
  v277 = a27;
  if ((**(_BYTE **)(v1011 + 16) & 1) != 0)
  {
    v278 = *(_QWORD *)(a23 + 16);
    v1087 = *(_QWORD *)(a24 + 16);
    v279 = *(int **)(a25 + 16);
    v280 = *(double **)(a4 + 16);
    v281 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1025 >= 1)
    {
      v285 = *(int *)(v1087 + 4);
      if ((int)v285 >= 1)
      {
        v286 = 0;
        v287 = *(unsigned int *)(v1087 + 4);
        v288 = 4 * v285;
        do
        {
          v289 = 3 * v286 + 2;
          v290 = v279;
          v291 = v280;
          v292 = v287;
          do
          {
            v293 = *v290;
            if ((_DWORD)v293 != -1)
            {
              v282.f64[0] = *(float64_t *)(v281 + 8 * v289);
              v294 = (float64x2_t *)(v278 + 24 * v293);
              v283.f64[0] = v294[1].f64[0];
              v284.f64[0] = *v291;
              v282 = vmlaq_f64(v282, v283, v284);
              *(float64x2_t *)(v281 + 24 * v286) = vmlaq_n_f64(*(float64x2_t *)(v281 + 24 * v286), *v294, *v291);
              *(float64_t *)(v281 + 8 * v289) = v282.f64[0];
            }
            ++v291;
            ++v290;
            --v292;
          }
          while (v292);
          ++v286;
          v279 = (int *)((char *)v279 + v288);
        }
        while (v286 != v1025);
      }
    }
    *(_QWORD *)(v236 + 24) |= 1uLL;
    v254 = v1018;
  }
  v295 = STACK[0x448];
  if ((**(_BYTE **)(v254 + 16) & 1) != 0)
  {
    v1088 = STACK[0x448];
    v296 = *(_QWORD *)(a27 + 16);
    v297 = *(_QWORD *)(a28 + 16);
    v298 = *(_QWORD *)(a8 + 16);
    v299 = *(int **)(a10 + 16);
    v300 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v196 >= 1)
    {
      v301 = 0;
      for (ii = 0; ii != v196; ++ii)
      {
        v303 = v299[ii];
        if (v303 >> 30 != 3)
        {
          v304 = *(unsigned int *)(v297 + 4);
          if ((int)v304 >= 1)
          {
            v305 = 3 * v303;
            v306 = (float64x2_t *)(v300 + 24 * v303);
            v307 = v305 + 2;
            v308 = v296 + 32 + v301 * v304;
            v309 = v299;
            do
            {
              v310 = *v309;
              if (v310 >> 30 != 3)
              {
                v311 = *(float64x2_t *)(v308 - 16);
                _Q2 = *(float64x2_t *)v308;
                v313 = v298 + 24 * v310;
                v314 = *(double *)(v313 + 16);
                v315 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v308 - 32), *(double *)v313), (float64x2_t)vextq_s8((int8x16_t)v311, *(int8x16_t *)v308, 8uLL), *(float64x2_t *)v313, 1), *(float64x2_t *)(v308 + 16), v314);
                _Q1 = vmulq_f64(v311, *(float64x2_t *)v313);
                _D3 = *(_QWORD *)(v313 + 8);
                __asm { FMLA            D1, D3, V2.D[1] }
                _Q1.f64[0] = _Q1.f64[0] + *(double *)(v308 + 32) * v314;
                _Q2.f64[0] = *(float64_t *)(v300 + 8 * v307);
                *v306 = vaddq_f64(v315, *v306);
                *(_QWORD *)(v300 + 8 * v307) = *(_OWORD *)&vaddq_f64(_Q1, _Q2);
              }
              v308 += 72;
              ++v309;
              --v304;
            }
            while (v304);
          }
        }
        v301 += 72;
      }
    }
    *(_QWORD *)(v236 + 24) |= 1uLL;
    v295 = v1088;
    v277 = a27;
  }
  v1019 = STACK[0x450];
  if ((**(_BYTE **)(v1012 + 16) & 1) != 0)
  {
    v318 = *(_QWORD *)(v277 + 16);
    v319 = *(_QWORD *)(a28 + 16);
    v320 = *(_QWORD *)(a8 + 16);
    v321 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v196 >= 1)
    {
      v323 = 0;
      v324 = *(unsigned int *)(v319 + 4);
      v325 = v318 + 32;
      do
      {
        if ((int)v324 >= 1)
        {
          v326 = (float64x2_t *)(v321 + 24 * v323);
          v327 = 3 * v323 + 2;
          v328 = *v326;
          v322.f64[0] = *(float64_t *)(v321 + 8 * v327);
          v329 = v325;
          v330 = (double *)(v320 + 16);
          v331 = v324;
          do
          {
            v332 = *(float64x2_t *)(v329 - 16);
            _Q4 = *(int8x16_t *)v329;
            v334 = *(float64x2_t *)(v330 - 2);
            v335 = *v330;
            v330 += 3;
            v336 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v329 - 32), v334.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v332, *(int8x16_t *)v329, 8uLL), v334, 1), *(float64x2_t *)(v329 + 16), v335);
            _Q3 = vmulq_f64(v332, v334);
            _D5 = v334.f64[1];
            __asm { FMLA            D3, D5, V4.D[1] }
            _Q3.f64[0] = _Q3.f64[0] + *(double *)(v329 + 32) * v335;
            v328 = vaddq_f64(v336, v328);
            v322 = vaddq_f64(_Q3, v322);
            v329 += 72;
            --v331;
          }
          while (v331);
          *v326 = v328;
          *(float64_t *)(v321 + 8 * v327) = v322.f64[0];
        }
        ++v323;
        v325 += 72 * (int)v324;
      }
      while (v323 != v196);
    }
    *(_QWORD *)(v236 + 24) |= 1uLL;
  }
  v1022 = STACK[0x458];
  if ((**(_BYTE **)(v295 + 16) & 1) != 0)
  {
    v1016 = *(_QWORD *)(a29 + 16);
    v339 = *(_QWORD *)(a30 + 16);
    v340 = *(_QWORD *)(a13 + 16);
    v341 = *(_QWORD *)(a10 + 16);
    v342 = *(int **)(a14 + 16);
    v343 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1027 >= 1)
    {
      v344 = 0;
      for (jj = 0; jj != v1027; ++jj)
      {
        v346 = *(int *)(v341 + 4 * jj);
        if (v346 >> 30 != 3)
        {
          v347 = *(unsigned int *)(v339 + 4);
          if ((int)v347 >= 1)
          {
            v348 = 3 * v346;
            v349 = (float64x2_t *)(v343 + 24 * v346);
            v350 = v348 + 2;
            v351 = v1016 + 48 + v344 * v347;
            v352 = v342;
            do
            {
              v353 = *v352;
              if (v353 >> 30 != 3)
              {
                v354 = *(float64x2_t *)(v351 - 32);
                _Q2 = *(float64x2_t *)(v351 - 16);
                _Q5 = *(int8x16_t *)(v351 + 32);
                v357 = v340 + 32 * v353;
                v358 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v351 - 48), *(double *)v357), (float64x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)_Q2, 8uLL), *(float64x2_t *)v357, 1), *(float64x2_t *)v351, *(double *)(v357 + 16)), (float64x2_t)vextq_s8(*(int8x16_t *)(v351 + 16), _Q5, 8uLL), *(float64x2_t *)(v357 + 16), 1);
                _Q1 = vmulq_f64(v354, *(float64x2_t *)v357);
                _D3 = *(_QWORD *)(v357 + 8);
                __asm { FMLA            D1, D3, V2.D[1] }
                _Q2.f64[0] = *(float64_t *)(v357 + 24);
                __asm { FMLA            D1, D2, V5.D[1] }
                _Q2.f64[0] = *(float64_t *)(v343 + 8 * v350);
                *v349 = vaddq_f64(v358, *v349);
                *(_QWORD *)(v343 + 8 * v350) = *(_OWORD *)&vaddq_f64(_Q1, _Q2);
              }
              ++v352;
              v351 += 96;
              --v347;
            }
            while (v347);
          }
        }
        v344 += 96;
      }
    }
    v236 = a26;
    *(_QWORD *)(a26 + 24) |= 1uLL;
  }
  v361 = STACK[0x460];
  v362 = a31;
  if ((**(_BYTE **)(v1019 + 16) & 1) != 0)
  {
    v363 = *(_QWORD *)(a29 + 16);
    v364 = *(_QWORD *)(a30 + 16);
    v365 = *(_QWORD *)(a13 + 16);
    v366 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1027 >= 1)
    {
      v368 = 0;
      v369 = *(unsigned int *)(v364 + 4);
      v370 = v363 + 48;
      do
      {
        if ((int)v369 >= 1)
        {
          v371 = (float64x2_t *)(v366 + 24 * v368);
          v372 = 3 * v368 + 2;
          v373 = *v371;
          v367.f64[0] = *(float64_t *)(v366 + 8 * v372);
          v374 = v365 + 16;
          v375 = v370;
          v376 = v369;
          do
          {
            v377 = *(float64x2_t *)(v375 - 32);
            _Q4 = *(int8x16_t *)(v375 - 16);
            _Q7 = *(int8x16_t *)(v375 + 32);
            v380 = *(float64x2_t *)(v374 - 16);
            v381 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v375 - 48), v380.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v377, _Q4, 8uLL), v380, 1), *(float64x2_t *)v375, *(double *)v374), (float64x2_t)vextq_s8(*(int8x16_t *)(v375 + 16), _Q7, 8uLL), *(float64x2_t *)v374, 1);
            _Q3 = vmulq_f64(v377, v380);
            _D5 = *(_QWORD *)(v374 - 8);
            __asm { FMLA            D3, D5, V4.D[1] }
            _Q4.i64[0] = *(_QWORD *)(v374 + 8);
            __asm { FMLA            D3, D4, V7.D[1] }
            v373 = vaddq_f64(v381, v373);
            v367 = vaddq_f64(_Q3, v367);
            v375 += 96;
            v374 += 32;
            --v376;
          }
          while (v376);
          *v371 = v373;
          *(float64_t *)(v366 + 8 * v372) = v367.f64[0];
        }
        ++v368;
        v370 += 96 * (int)v369;
      }
      while (v368 != v1027);
    }
    *(_QWORD *)(v236 + 24) |= 1uLL;
  }
  v384 = STACK[0x468];
  if ((**(_BYTE **)(v1022 + 16) & 1) != 0)
  {
    v1028 = STACK[0x468];
    v1020 = *(_QWORD *)(a31 + 16);
    v1023 = v361;
    v385 = *(_QWORD *)(a32 + 16);
    v386 = *(_QWORD *)(a17 + 16);
    v387 = *(_QWORD *)(a10 + 16);
    v388 = *(int **)(a18 + 16);
    v389 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1030 >= 1)
    {
      v390 = 0;
      for (kk = 0; kk != v1030; ++kk)
      {
        v392 = *(int *)(v387 + 4 * kk);
        if (v392 >> 30 != 3)
        {
          v393 = *(unsigned int *)(v385 + 4);
          if ((int)v393 >= 1)
          {
            v394 = 3 * v392;
            v395 = (float64x2_t *)(v389 + 24 * v392);
            v396 = v394 + 2;
            v397 = v1020 + 64 + v390 * v393;
            v398 = v388;
            do
            {
              v399 = *v398;
              if (v399 >> 30 != 3)
              {
                v400 = *(float64x2_t *)(v397 - 48);
                _Q2 = *(float64x2_t *)(v397 - 32);
                _Q5 = *(int8x16_t *)(v397 + 16);
                _Q16 = *(int8x16_t *)(v397 + 64);
                v404 = v386 + 48 * v399;
                v405 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v397 - 64), *(double *)v404), (float64x2_t)vextq_s8((int8x16_t)v400, (int8x16_t)_Q2, 8uLL), *(float64x2_t *)v404, 1), *(float64x2_t *)(v397 - 16), *(double *)(v404 + 16)), (float64x2_t)vextq_s8(*(int8x16_t *)v397, _Q5, 8uLL), *(float64x2_t *)(v404 + 16), 1), *(float64x2_t *)(v397 + 32), *(double *)(v404 + 32)), (float64x2_t)vextq_s8(*(int8x16_t *)(v397 + 48), _Q16, 8uLL), *(float64x2_t *)(v404 + 32), 1);
                _Q1 = vmulq_f64(v400, *(float64x2_t *)v404);
                _D3 = *(_QWORD *)(v404 + 8);
                __asm { FMLA            D1, D3, V2.D[1] }
                _Q2.f64[0] = *(float64_t *)(v404 + 24);
                __asm { FMLA            D1, D2, V5.D[1] }
                _Q2.f64[0] = *(float64_t *)(v404 + 40);
                __asm { FMLA            D1, D2, V16.D[1] }
                _Q2.f64[0] = *(float64_t *)(v389 + 8 * v396);
                *v395 = vaddq_f64(v405, *v395);
                *(_QWORD *)(v389 + 8 * v396) = *(_OWORD *)&vaddq_f64(_Q1, _Q2);
              }
              ++v398;
              v397 += 144;
              --v393;
            }
            while (v393);
          }
        }
        v390 += 144;
      }
    }
    v236 = a26;
    *(_QWORD *)(a26 + 24) |= 1uLL;
    v362 = a31;
    v384 = v1028;
    v361 = v1023;
  }
  v1024 = STACK[0x470];
  if ((**(_BYTE **)(v361 + 16) & 1) != 0)
  {
    v408 = *(_QWORD *)(v362 + 16);
    v409 = *(_QWORD *)(a32 + 16);
    v410 = *(float64x2_t **)(a17 + 16);
    v411 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1030 >= 1)
    {
      v413 = 0;
      v414 = *(unsigned int *)(v409 + 4);
      v415 = v408 + 64;
      do
      {
        if ((int)v414 >= 1)
        {
          v416 = (float64x2_t *)(v411 + 24 * v413);
          v417 = 3 * v413 + 2;
          v418 = *v416;
          v412.f64[0] = *(float64_t *)(v411 + 8 * v417);
          v419 = v410 + 2;
          v420 = v415;
          v421 = v414;
          do
          {
            v422 = *(float64x2_t *)(v420 - 48);
            _Q4 = *(int8x16_t *)(v420 - 32);
            _Q7 = *(int8x16_t *)(v420 + 16);
            _Q18 = *(int8x16_t *)(v420 + 64);
            _Q19 = v419[-2];
            v427 = v419[-1];
            v428 = *v419;
            v419 += 3;
            v429 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v420 - 64), _Q19.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v422, _Q4, 8uLL), _Q19, 1), *(float64x2_t *)(v420 - 16), v427.f64[0]), (float64x2_t)vextq_s8(*(int8x16_t *)v420, _Q7, 8uLL), v427, 1);
            _Q3 = vmulq_f64(v422, _Q19);
            _Q19.f64[0] = _Q19.f64[1];
            __asm { FMLA            D3, D19, V4.D[1] }
            _Q4.i64[0] = *(_QWORD *)&v427.f64[1];
            __asm { FMLA            D3, D4, V7.D[1] }
            _Q4.i64[0] = *(_QWORD *)&v428.f64[1];
            __asm { FMLA            D3, D4, V18.D[1] }
            v418 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(v429, *(float64x2_t *)(v420 + 32), v428.f64[0]), (float64x2_t)vextq_s8(*(int8x16_t *)(v420 + 48), _Q18, 8uLL), v428, 1), v418);
            v412 = vaddq_f64(_Q3, v412);
            v420 += 144;
            --v421;
          }
          while (v421);
          *v416 = v418;
          *(float64_t *)(v411 + 8 * v417) = v412.f64[0];
        }
        ++v413;
        v415 += 144 * (int)v414;
      }
      while (v413 != v1030);
    }
    *(_QWORD *)(v236 + 24) |= 1uLL;
  }
  v431 = STACK[0x478];
  if ((**(_BYTE **)(v384 + 16) & 1) != 0)
  {
    v1089 = STACK[0x478];
    v432 = *(_QWORD *)(a33 + 16);
    v433 = *(_QWORD *)(a34 + 16);
    v434 = *(_QWORD *)(a21 + 16);
    v435 = *(_QWORD *)(a10 + 16);
    v436 = *(int **)(a22 + 16);
    v437 = *(_QWORD *)(a26 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    v236 = a26;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1031 >= 1)
    {
      v438 = 0;
      for (mm = 0; mm != v1031; ++mm)
      {
        v440 = *(int *)(v435 + 4 * mm);
        if (v440 >> 30 != 3)
        {
          v441 = *(unsigned int *)(v433 + 4);
          if ((int)v441 >= 1)
          {
            v442 = 3 * v440;
            v443 = (float64x2_t *)(v437 + 24 * v440);
            v444 = v442 + 2;
            v445 = (int8x16_t *)(v432 + 32 + v438 * v441);
            v446 = v436;
            do
            {
              v447 = *v446;
              if (v447 >> 30 != 3)
              {
                v448 = (float64x2_t)v445[-1];
                _Q2 = *(float64x2_t *)v445;
                _Q3 = *(float64x2_t *)(v434 + 16 * v447);
                v451 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v445[-2], _Q3.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v448, *v445, 8uLL), _Q3, 1);
                _Q1 = vmulq_f64(v448, _Q3);
                _Q3.f64[0] = *(float64_t *)(v434 + 16 * v447 + 8);
                __asm { FMLA            D1, D3, V2.D[1] }
                _Q2.f64[0] = *(float64_t *)(v437 + 8 * v444);
                *v443 = vaddq_f64(v451, *v443);
                *(_QWORD *)(v437 + 8 * v444) = *(_OWORD *)&vaddq_f64(_Q1, _Q2);
              }
              v445 += 3;
              ++v446;
              --v441;
            }
            while (v441);
          }
        }
        v438 += 48;
      }
    }
    *(_QWORD *)(a26 + 24) |= 1uLL;
    v431 = v1089;
  }
  v453 = STACK[0x480];
  if ((**(_BYTE **)(v1024 + 16) & 1) != 0)
  {
    v454 = *(_QWORD *)(a33 + 16);
    v455 = *(_QWORD *)(a34 + 16);
    v456 = *(float64x2_t **)(a21 + 16);
    v457 = *(_QWORD *)(v236 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1031 >= 1)
    {
      v459 = *(int *)(v455 + 4);
      if ((int)v459 >= 1)
      {
        v460 = 0;
        v461 = *(unsigned int *)(v455 + 4);
        v462 = v454 + 16;
        v463 = 48 * v459;
        do
        {
          v464 = (float64x2_t *)(v457 + 24 * v460);
          v465 = 3 * v460 + 2;
          v466 = *v464;
          v458.f64[0] = *(float64_t *)(v457 + 8 * v465);
          v467 = v462;
          v468 = v456;
          v469 = v461;
          do
          {
            _Q4 = *(int8x16_t *)(v467 + 16);
            v471 = *v468++;
            _Q3 = vmulq_f64(*(float64x2_t *)v467, v471);
            _D5 = v471.f64[1];
            __asm { FMLA            D3, D5, V4.D[1] }
            v466 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v467 - 16), v471.f64[0]), (float64x2_t)vextq_s8(*(int8x16_t *)v467, _Q4, 8uLL), v471, 1), v466);
            v458 = vaddq_f64(_Q3, v458);
            v467 += 48;
            --v469;
          }
          while (v469);
          *v464 = v466;
          *(float64_t *)(v457 + 8 * v465) = v458.f64[0];
          ++v460;
          v462 += v463;
        }
        while (v460 != v1031);
      }
    }
    *(_QWORD *)(v236 + 24) |= 1uLL;
  }
  v1026 = STACK[0x488];
  if ((**(_BYTE **)(v431 + 16) & 1) != 0)
  {
    v1032 = v453;
    v474 = *(_QWORD *)(a35 + 16);
    v475 = *(_QWORD *)(a36 + 16);
    v476 = *(_QWORD *)(a37 + 16);
    v477 = *(_QWORD *)(a4 + 16);
    v478 = *(_QWORD *)(a14 + 16);
    v479 = *(int **)(a9 + 16);
    v480 = *(_QWORD *)(a38 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1035 >= 1)
    {
      v481 = 0;
      for (nn = 0; nn != v1035; ++nn)
      {
        v483 = *(int *)(v478 + 4 * nn);
        if (v483 >> 30 != 3)
        {
          v484 = *(unsigned int *)(v475 + 4);
          if ((int)v484 >= 1)
          {
            v485 = (float64x2_t *)(v480 + 32 * v483);
            v486 = v485 + 1;
            v487 = (int *)(v476 + v481 * v484);
            v488 = v479;
            do
            {
              v489 = *v487;
              if ((_DWORD)v489 != -1)
              {
                v490 = *v488;
                if (v490 >> 30 != 3)
                {
                  v491 = (float64x2_t *)(v474 + 32 * v489);
                  v492 = *(double *)(v477 + 8 * v490);
                  v493 = vmlaq_n_f64(*v486, v491[1], v492);
                  *v485 = vmlaq_n_f64(*v485, *v491, v492);
                  *v486 = v493;
                }
              }
              ++v488;
              ++v487;
              --v484;
            }
            while (v484);
          }
        }
        v481 += 4;
      }
    }
    *(_QWORD *)(a38 + 24) |= 1uLL;
    v453 = v1032;
  }
  v1029 = STACK[0x490];
  v494 = a38;
  if ((**(_BYTE **)(v453 + 16) & 1) != 0)
  {
    v495 = *(_QWORD *)(a35 + 16);
    v496 = *(_QWORD *)(a36 + 16);
    v497 = *(int **)(a37 + 16);
    v498 = *(double **)(a4 + 16);
    v499 = *(_QWORD *)(a38 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1035 >= 1)
    {
      v500 = *(int *)(v496 + 4);
      if ((int)v500 >= 1)
      {
        v501 = 0;
        v502 = *(unsigned int *)(v496 + 4);
        v503 = 4 * v500;
        do
        {
          v504 = (float64x2_t *)(v499 + 32 * v501);
          v505 = v504 + 1;
          v506 = v497;
          v507 = v498;
          v508 = v502;
          do
          {
            v509 = *v506;
            if ((_DWORD)v509 != -1)
            {
              v510 = (float64x2_t *)(v495 + 32 * v509);
              v511 = vmlaq_n_f64(*v505, v510[1], *v507);
              *v504 = vmlaq_n_f64(*v504, *v510, *v507);
              *v505 = v511;
            }
            ++v507;
            ++v506;
            --v508;
          }
          while (v508);
          ++v501;
          v497 = (int *)((char *)v497 + v503);
        }
        while (v501 != v1035);
      }
    }
    *(_QWORD *)(a38 + 24) |= 1uLL;
  }
  v1085 = STACK[0x498];
  if ((**(_BYTE **)(v1026 + 16) & 1) != 0)
  {
    v512 = *(_QWORD *)(a39 + 16);
    v513 = *(_QWORD *)(a40 + 16);
    v514 = *(_QWORD *)(a41 + 16);
    v515 = *(_QWORD *)(a8 + 16);
    v516 = *(_QWORD *)(a14 + 16);
    v517 = *(int **)(a10 + 16);
    v518 = *(_QWORD *)(a38 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1038 >= 1)
    {
      v519 = 0;
      for (i1 = 0; i1 != v1038; ++i1)
      {
        v521 = *(int *)(v516 + 4 * i1);
        if (v521 >> 30 != 3)
        {
          v522 = *(unsigned int *)(v513 + 4);
          if ((int)v522 >= 1)
          {
            v523 = (float64x2_t *)(v518 + 32 * v521);
            v524 = v523 + 1;
            v525 = (int *)(v514 + v519 * v522);
            v526 = v517;
            do
            {
              v527 = *v525;
              if ((_DWORD)v527 != -1)
              {
                v528 = *v526;
                if (v528 >> 30 != 3)
                {
                  v529 = (float64x2_t *)(v512 + 96 * v527);
                  v530 = (float64x2_t *)(v515 + 24 * v528);
                  v531 = v530[1].f64[0];
                  v532 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v529[1], v530->f64[0]), v529[3], *v530, 1), v529[5], v531), *v524);
                  *v523 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v529, v530->f64[0]), v529[2], *v530, 1), v529[4], v531), *v523);
                  *v524 = v532;
                }
              }
              ++v526;
              ++v525;
              --v522;
            }
            while (v522);
          }
        }
        v519 += 4;
      }
    }
    v494 = a38;
    *(_QWORD *)(a38 + 24) |= 1uLL;
  }
  v1036 = STACK[0x4A0];
  v533 = a43;
  if ((**(_BYTE **)(v1029 + 16) & 1) != 0)
  {
    v534 = *(_QWORD *)(a39 + 16);
    v535 = *(_QWORD *)(a40 + 16);
    v536 = *(int **)(a41 + 16);
    v537 = *(_QWORD *)(a8 + 16);
    v538 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1038 >= 1)
    {
      v539 = 0;
      v540 = *(unsigned int *)(v535 + 4);
      do
      {
        if ((int)v540 >= 1)
        {
          v541 = (float64x2_t *)(v538 + 32 * v539);
          v542 = v541 + 1;
          v543 = v536;
          v544 = (double *)(v537 + 16);
          v545 = v540;
          do
          {
            v546 = *v543;
            if ((_DWORD)v546 != -1)
            {
              v547 = (float64x2_t *)(v534 + 96 * v546);
              v548 = *(float64x2_t *)(v544 - 2);
              v549 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v547[1], v548.f64[0]), v547[3], v548, 1), v547[5], *v544), *v542);
              *v541 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v547, v548.f64[0]), v547[2], v548, 1), v547[4], *v544), *v541);
              *v542 = v549;
            }
            v544 += 3;
            ++v543;
            --v545;
          }
          while (v545);
        }
        ++v539;
        v536 += (int)v540;
      }
      while (v539 != v1038);
    }
    *(_QWORD *)(v494 + 24) |= 1uLL;
    v533 = a43;
  }
  v1033 = STACK[0x4A8];
  if ((**(_BYTE **)(v1085 + 16) & 1) != 0)
  {
    v550 = *(_QWORD *)(a42 + 16);
    v551 = *(_QWORD *)(v533 + 16);
    v552 = *(_QWORD *)(a13 + 16);
    v553 = *(int **)(a14 + 16);
    v554 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1041 >= 1)
    {
      v555 = 0;
      for (i2 = 0; i2 != v1041; ++i2)
      {
        v557 = v553[i2];
        if (v557 >> 30 != 3)
        {
          v558 = *(unsigned int *)(v551 + 4);
          if ((int)v558 >= 1)
          {
            v559 = (float64x2_t *)(v554 + 32 * v557);
            v560 = v559 + 1;
            v561 = (float64x2_t *)(v550 + 64 + v555 * v558);
            v562 = v553;
            do
            {
              v563 = *v562;
              if (v563 >> 30 != 3)
              {
                v564 = (float64x2_t *)(v552 + 32 * v563);
                v565 = v564[1];
                v566 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v561[-3], v564->f64[0]), v561[-1], *v564, 1), v561[1], v565.f64[0]), v561[3], v565, 1), *v560);
                *v559 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v561[-4], v564->f64[0]), v561[-2], *v564, 1), *v561, v565.f64[0]), v561[2], v565, 1), *v559);
                *v560 = v566;
              }
              ++v562;
              v561 += 8;
              --v558;
            }
            while (v558);
          }
        }
        v555 += 128;
      }
    }
    *(_QWORD *)(v494 + 24) |= 1uLL;
  }
  v1039 = STACK[0x4B0];
  if ((**(_BYTE **)(v1036 + 16) & 1) != 0)
  {
    v567 = *(float64x2_t **)(a42 + 16);
    v568 = *(_QWORD *)(v533 + 16);
    v569 = *(float64x2_t **)(a13 + 16);
    v570 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1041 >= 1)
    {
      v571 = 0;
      v572 = *(unsigned int *)(v568 + 4);
      v573 = v567 + 4;
      do
      {
        if ((int)v572 >= 1)
        {
          v574 = (float64x2_t *)(v570 + 32 * v571);
          v575 = v574[1];
          v576 = *v574;
          v577 = v569 + 1;
          v578 = v573;
          v579 = v572;
          do
          {
            v580 = v577[-1];
            v576 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v578[-4], v580.f64[0]), v578[-2], v580, 1), *v578, v577->f64[0]), v578[2], *v577, 1), v576);
            v575 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v578[-3], v580.f64[0]), v578[-1], v580, 1), v578[1], v577->f64[0]), v578[3], *v577, 1), v575);
            v578 += 8;
            v577 += 2;
            --v579;
          }
          while (v579);
          *v574 = v576;
          v574[1] = v575;
        }
        ++v571;
        v573 += 8 * (uint64_t)(int)v572;
      }
      while (v571 != v1041);
    }
    *(_QWORD *)(v494 + 24) |= 1uLL;
  }
  v581 = STACK[0x4B8];
  if ((**(_BYTE **)(v1033 + 16) & 1) != 0)
  {
    v1034 = *(_QWORD *)(a44 + 16);
    v582 = *(_QWORD *)(a45 + 16);
    v583 = *(_QWORD *)(a17 + 16);
    v584 = *(_QWORD *)(a14 + 16);
    v585 = *(int **)(a18 + 16);
    v586 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1043 >= 1)
    {
      v587 = 0;
      for (i3 = 0; i3 != v1043; ++i3)
      {
        v589 = *(int *)(v584 + 4 * i3);
        if (v589 >> 30 != 3)
        {
          v590 = *(unsigned int *)(v582 + 4);
          if ((int)v590 >= 1)
          {
            v591 = (float64x2_t *)(v586 + 32 * v589);
            v592 = v591 + 1;
            v593 = (float64x2_t *)(v1034 + 96 + v587 * v590);
            v594 = v585;
            do
            {
              v595 = *v594;
              if (v595 >> 30 != 3)
              {
                v596 = (float64x2_t *)(v583 + 48 * v595);
                v597 = v596[1];
                v598 = v596[2];
                v599 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v593[-5], v596->f64[0]), v593[-3], *v596, 1), v593[-1], v597.f64[0]), v593[1], v597, 1), v593[3], v598.f64[0]), v593[5], v598, 1), *v592);
                *v591 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v593[-6], v596->f64[0]), v593[-4], *v596, 1), v593[-2], v597.f64[0]), *v593, v597, 1), v593[2], v598.f64[0]), v593[4], v598, 1), *v591);
                *v592 = v599;
              }
              ++v594;
              v593 += 12;
              --v590;
            }
            while (v590);
          }
        }
        v587 += 192;
      }
    }
    v494 = a38;
    *(_QWORD *)(a38 + 24) |= 1uLL;
  }
  v1042 = STACK[0x4C0];
  v600 = a46;
  if ((**(_BYTE **)(v1039 + 16) & 1) != 0)
  {
    v601 = *(float64x2_t **)(a44 + 16);
    v602 = *(_QWORD *)(a45 + 16);
    v603 = *(float64x2_t **)(a17 + 16);
    v604 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1043 >= 1)
    {
      v605 = 0;
      v606 = *(unsigned int *)(v602 + 4);
      v607 = v601 + 6;
      do
      {
        if ((int)v606 >= 1)
        {
          v608 = (float64x2_t *)(v604 + 32 * v605);
          v609 = v608[1];
          v610 = *v608;
          v611 = v603 + 2;
          v612 = v607;
          v613 = v606;
          do
          {
            v614 = v611[-2];
            v615 = v611[-1];
            v616 = *v611;
            v611 += 3;
            v610 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v612[-6], v614.f64[0]), v612[-4], v614, 1), v612[-2], v615.f64[0]), *v612, v615, 1), v612[2], v616.f64[0]), v612[4], v616, 1), v610);
            v609 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v612[-5], v614.f64[0]), v612[-3], v614, 1), v612[-1], v615.f64[0]), v612[1], v615, 1), v612[3], v616.f64[0]), v612[5], v616, 1), v609);
            v612 += 12;
            --v613;
          }
          while (v613);
          *v608 = v610;
          v608[1] = v609;
        }
        ++v605;
        v607 += 12 * (int)v606;
      }
      while (v605 != v1043);
    }
    *(_QWORD *)(v494 + 24) |= 1uLL;
  }
  v1040 = STACK[0x4C8];
  if ((**(_BYTE **)(v581 + 16) & 1) != 0)
  {
    v1037 = *(_QWORD *)(a46 + 16);
    v617 = *(_QWORD *)(a47 + 16);
    v618 = *(_QWORD *)(a21 + 16);
    v619 = *(_QWORD *)(a14 + 16);
    v620 = *(int **)(a22 + 16);
    v621 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1045 >= 1)
    {
      v622 = 0;
      for (i4 = 0; i4 != v1045; ++i4)
      {
        v624 = *(int *)(v619 + 4 * i4);
        if (v624 >> 30 != 3)
        {
          v625 = *(unsigned int *)(v617 + 4);
          if ((int)v625 >= 1)
          {
            v626 = (float64x2_t *)(v621 + 32 * v624);
            v627 = v626 + 1;
            v628 = (float64x2_t *)(v1037 + 32 + v622 * v625);
            v629 = v620;
            do
            {
              v630 = *v629;
              if (v630 >> 30 != 3)
              {
                v631 = *(float64x2_t *)(v618 + 16 * v630);
                v632 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v628[-1], v631.f64[0]), v628[1], v631, 1), *v627);
                *v626 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v628[-2], v631.f64[0]), *v628, v631, 1), *v626);
                *v627 = v632;
              }
              ++v629;
              v628 += 4;
              --v625;
            }
            while (v625);
          }
        }
        v622 += 64;
      }
    }
    v494 = a38;
    *(_QWORD *)(a38 + 24) |= 1uLL;
    v600 = a46;
  }
  v633 = STACK[0x4D0];
  if ((**(_BYTE **)(v1042 + 16) & 1) != 0)
  {
    v634 = *(float64x2_t **)(v600 + 16);
    v635 = *(_QWORD *)(a47 + 16);
    v636 = *(float64x2_t **)(a21 + 16);
    v637 = *(_QWORD *)(v494 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1045 >= 1)
    {
      v638 = 0;
      v639 = *(unsigned int *)(v635 + 4);
      v640 = v634 + 2;
      do
      {
        if ((int)v639 >= 1)
        {
          v641 = (float64x2_t *)(v637 + 32 * v638);
          v642 = v641[1];
          v643 = *v641;
          v644 = v640;
          v645 = v636;
          v646 = v639;
          do
          {
            v647 = v644[-2];
            v648 = v644[-1];
            v649 = *v644;
            v650 = v644[1];
            v644 += 4;
            v651 = *v645++;
            v643 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v647, v651.f64[0]), v649, v651, 1), v643);
            v642 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v648, v651.f64[0]), v650, v651, 1), v642);
            --v646;
          }
          while (v646);
          *v641 = v643;
          v641[1] = v642;
        }
        ++v638;
        v640 += 4 * (uint64_t)(int)v639;
      }
      while (v638 != v1045);
    }
    *(_QWORD *)(v494 + 24) |= 1uLL;
  }
  v1090 = STACK[0x4D8];
  if ((**(_BYTE **)(v1040 + 16) & 1) != 0)
  {
    v652 = *(_QWORD *)(a48 + 16);
    v653 = *(_QWORD *)(a49 + 16);
    v654 = *(_QWORD *)(a50 + 16);
    v655 = *(_QWORD *)(a4 + 16);
    v656 = *(_QWORD *)(a18 + 16);
    v657 = *(int **)(a9 + 16);
    v658 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1049 >= 1)
    {
      v659 = 0;
      for (i5 = 0; i5 != v1049; ++i5)
      {
        v661 = *(int *)(v656 + 4 * i5);
        if (v661 >> 30 != 3)
        {
          v662 = *(unsigned int *)(v653 + 4);
          if ((int)v662 >= 1)
          {
            v663 = (float64x2_t *)(v658 + 48 * v661);
            v664 = v663 + 1;
            v665 = v663 + 2;
            v666 = (int *)(v654 + v659 * v662);
            v667 = v657;
            do
            {
              v668 = *v666;
              if ((_DWORD)v668 != -1)
              {
                v669 = *v667;
                if (v669 >> 30 != 3)
                {
                  v670 = (float64x2_t *)(v652 + 48 * v668);
                  v671 = *(double *)(v655 + 8 * v669);
                  v672 = vmlaq_n_f64(*v665, v670[2], v671);
                  v673 = vmlaq_n_f64(*v664, v670[1], v671);
                  *v663 = vmlaq_n_f64(*v663, *v670, v671);
                  *v664 = v673;
                  *v665 = v672;
                }
              }
              ++v667;
              ++v666;
              --v662;
            }
            while (v662);
          }
        }
        v659 += 4;
      }
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v674 = STACK[0x4E0];
  if ((**(_BYTE **)(v633 + 16) & 1) != 0)
  {
    v675 = *(_QWORD *)(a48 + 16);
    v1046 = *(_QWORD *)(a49 + 16);
    v676 = *(int **)(a50 + 16);
    v677 = *(double **)(a4 + 16);
    v678 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1049 >= 1)
    {
      v679 = 0;
      v680 = *(unsigned int *)(v1046 + 4);
      do
      {
        if ((int)v680 >= 1)
        {
          v681 = (float64x2_t *)(v678 + 48 * v679);
          v682 = v681 + 1;
          v683 = v681 + 2;
          v684 = v676;
          v685 = v677;
          v686 = v680;
          do
          {
            v687 = *v684;
            if ((_DWORD)v687 != -1)
            {
              v688 = (float64x2_t *)(v675 + 48 * v687);
              v689 = vmlaq_n_f64(*v683, v688[2], *v685);
              v690 = vmlaq_n_f64(*v682, v688[1], *v685);
              *v681 = vmlaq_n_f64(*v681, *v688, *v685);
              *v682 = v690;
              *v683 = v689;
            }
            ++v685;
            ++v684;
            --v686;
          }
          while (v686);
        }
        ++v679;
        v676 += (int)v680;
      }
      while (v679 != v1049);
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v1047 = STACK[0x4E8];
  if ((**(_BYTE **)(v1090 + 16) & 1) != 0)
  {
    v691 = *(_QWORD *)(a52 + 16);
    v692 = *(_QWORD *)(a53 + 16);
    v693 = *(_QWORD *)(a54 + 16);
    v694 = *(_QWORD *)(a8 + 16);
    v695 = *(_QWORD *)(a18 + 16);
    v696 = *(int **)(a10 + 16);
    v697 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1052 >= 1)
    {
      v698 = 0;
      for (i6 = 0; i6 != v1052; ++i6)
      {
        v700 = *(int *)(v695 + 4 * i6);
        if (v700 >> 30 != 3)
        {
          v701 = *(unsigned int *)(v692 + 4);
          if ((int)v701 >= 1)
          {
            v702 = (float64x2_t *)(v697 + 48 * v700);
            v703 = v702 + 1;
            v704 = v702 + 2;
            v705 = (int *)(v693 + v698 * v701);
            v706 = v696;
            do
            {
              v707 = *v705;
              if ((_DWORD)v707 != -1)
              {
                v708 = *v706;
                if (v708 >> 30 != 3)
                {
                  v709 = (float64x2_t *)(v691 + 144 * v707);
                  v710 = (float64x2_t *)(v694 + 24 * v708);
                  v711 = v710[1].f64[0];
                  v712 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v709[2], v710->f64[0]), v709[5], *v710, 1), v709[8], v711), *v704);
                  v713 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v709[1], v710->f64[0]), v709[4], *v710, 1), v709[7], v711), *v703);
                  *v702 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v709, v710->f64[0]), v709[3], *v710, 1), v709[6], v711), *v702);
                  *v703 = v713;
                  *v704 = v712;
                }
              }
              ++v706;
              ++v705;
              --v701;
            }
            while (v701);
          }
        }
        v698 += 4;
      }
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v714 = STACK[0x4F0];
  v1044 = STACK[0x4F0];
  if ((**(_BYTE **)(v674 + 16) & 1) != 0)
  {
    v715 = *(_QWORD *)(a52 + 16);
    v716 = *(_QWORD *)(a53 + 16);
    v717 = *(int **)(a54 + 16);
    v718 = *(_QWORD *)(a8 + 16);
    v719 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1052 >= 1)
    {
      v720 = 0;
      v721 = *(unsigned int *)(v716 + 4);
      do
      {
        if ((int)v721 >= 1)
        {
          v722 = (float64x2_t *)(v719 + 48 * v720);
          v723 = v722 + 1;
          v724 = v722 + 2;
          v725 = v717;
          v726 = (double *)(v718 + 16);
          v727 = v721;
          do
          {
            v728 = *v725;
            if ((_DWORD)v728 != -1)
            {
              v729 = (float64x2_t *)(v715 + 144 * v728);
              v730 = *(float64x2_t *)(v726 - 2);
              v731 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v729[2], v730.f64[0]), v729[5], v730, 1), v729[8], *v726), *v724);
              v732 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v729[1], v730.f64[0]), v729[4], v730, 1), v729[7], *v726), *v723);
              *v722 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v729, v730.f64[0]), v729[3], v730, 1), v729[6], *v726), *v722);
              *v723 = v732;
              *v724 = v731;
            }
            v726 += 3;
            ++v725;
            --v727;
          }
          while (v727);
        }
        ++v720;
        v717 += (int)v721;
      }
      while (v720 != v1052);
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
    v714 = v1044;
  }
  v1053 = STACK[0x4F8];
  if ((**(_BYTE **)(v1047 + 16) & 1) != 0)
  {
    v733 = *(_QWORD *)(a55 + 16);
    v734 = *(_QWORD *)(a56 + 16);
    v735 = *(_QWORD *)(a57 + 16);
    v736 = *(_QWORD *)(a13 + 16);
    v737 = *(_QWORD *)(a18 + 16);
    v738 = *(int **)(a14 + 16);
    v739 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1057 >= 1)
    {
      v740 = 0;
      for (i7 = 0; i7 != v1057; ++i7)
      {
        v742 = *(int *)(v737 + 4 * i7);
        if (v742 >> 30 != 3)
        {
          v743 = *(unsigned int *)(v734 + 4);
          if ((int)v743 >= 1)
          {
            v744 = (float64x2_t *)(v739 + 48 * v742);
            v745 = v744 + 1;
            v746 = v744 + 2;
            v747 = (int *)(v735 + v740 * v743);
            v748 = v738;
            do
            {
              v749 = *v747;
              if ((_DWORD)v749 != -1)
              {
                v750 = *v748;
                if (v750 >> 30 != 3)
                {
                  v751 = (float64x2_t *)(v733 + 192 * v749);
                  v752 = (float64x2_t *)(v736 + 32 * v750);
                  v753 = v752[1];
                  v754 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v751[2], v752->f64[0]), v751[5], *v752, 1), v751[8], v753.f64[0]), v751[11], v753, 1), *v746);
                  v755 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v751[1], v752->f64[0]), v751[4], *v752, 1), v751[7], v753.f64[0]), v751[10], v753, 1), *v745);
                  *v744 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v751, v752->f64[0]), v751[3], *v752, 1), v751[6], v753.f64[0]), v751[9], v753, 1), *v744);
                  *v745 = v755;
                  *v746 = v754;
                }
              }
              ++v748;
              ++v747;
              --v743;
            }
            while (v743);
          }
        }
        v740 += 4;
      }
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
    v714 = v1044;
  }
  v1048 = STACK[0x500];
  v756 = a59;
  if ((**(_BYTE **)(v714 + 16) & 1) != 0)
  {
    v757 = *(_QWORD *)(a55 + 16);
    v758 = *(_QWORD *)(a56 + 16);
    v759 = *(int **)(a57 + 16);
    v760 = *(float64x2_t **)(a13 + 16);
    v761 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1057 >= 1)
    {
      v762 = 0;
      v763 = *(unsigned int *)(v758 + 4);
      do
      {
        if ((int)v763 >= 1)
        {
          v764 = (float64x2_t *)(v761 + 48 * v762);
          v765 = v764 + 1;
          v766 = v764 + 2;
          v767 = v759;
          v768 = v760 + 1;
          v769 = v763;
          do
          {
            v770 = *v767;
            if ((_DWORD)v770 != -1)
            {
              v771 = (float64x2_t *)(v757 + 192 * v770);
              v772 = v768[-1];
              v773 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v771[2], v772.f64[0]), v771[5], v772, 1), v771[8], v768->f64[0]), v771[11], *v768, 1), *v766);
              v774 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v771[1], v772.f64[0]), v771[4], v772, 1), v771[7], v768->f64[0]), v771[10], *v768, 1), *v765);
              *v764 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v771, v772.f64[0]), v771[3], v772, 1), v771[6], v768->f64[0]), v771[9], *v768, 1), *v764);
              *v765 = v774;
              *v766 = v773;
            }
            v768 += 2;
            ++v767;
            --v769;
          }
          while (v769);
        }
        ++v762;
        v759 += (int)v763;
      }
      while (v762 != v1057);
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
    v756 = a59;
  }
  v775 = STACK[0x508];
  if ((**(_BYTE **)(v1053 + 16) & 1) != 0)
  {
    v1091 = STACK[0x508];
    v776 = *(_QWORD *)(a58 + 16);
    v777 = *(_QWORD *)(v756 + 16);
    v778 = *(_QWORD *)(a17 + 16);
    v779 = *(int **)(a18 + 16);
    v780 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1060 >= 1)
    {
      v781 = 0;
      for (i8 = 0; i8 != v1060; ++i8)
      {
        v783 = v779[i8];
        if (v783 >> 30 != 3)
        {
          v784 = *(unsigned int *)(v777 + 4);
          if ((int)v784 >= 1)
          {
            v785 = (float64x2_t *)(v780 + 48 * v783);
            v786 = v785 + 1;
            v787 = v785 + 2;
            v788 = (float64x2_t *)(v776 + 144 + v781 * v784);
            v789 = v779;
            do
            {
              v790 = *v789;
              if (v790 >> 30 != 3)
              {
                v791 = (float64x2_t *)(v778 + 48 * v790);
                v792 = v791[1];
                v793 = v791[2];
                v794 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v788[-7], v791->f64[0]), v788[-4], *v791, 1), v788[-1], v792.f64[0]), v788[2], v792, 1), v788[5], v793.f64[0]), v788[8], v793, 1), *v787);
                v795 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v788[-8], v791->f64[0]), v788[-5], *v791, 1), v788[-2], v792.f64[0]), v788[1], v792, 1), v788[4], v793.f64[0]), v788[7], v793, 1), *v786);
                *v785 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v788[-9], v791->f64[0]), v788[-6], *v791, 1), v788[-3], v792.f64[0]), *v788, v792, 1), v788[3], v793.f64[0]), v788[6], v793, 1), *v785);
                *v786 = v795;
                *v787 = v794;
              }
              ++v789;
              v788 += 18;
              --v784;
            }
            while (v784);
          }
        }
        v781 += 288;
      }
    }
    v775 = v1091;
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v1054 = STACK[0x510];
  if ((**(_BYTE **)(v1048 + 16) & 1) != 0)
  {
    v796 = *(float64x2_t **)(a58 + 16);
    v797 = *(_QWORD *)(v756 + 16);
    v798 = *(float64x2_t **)(a17 + 16);
    v799 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1060 >= 1)
    {
      v800 = 0;
      v801 = *(unsigned int *)(v797 + 4);
      v802 = v796 + 9;
      do
      {
        if ((int)v801 >= 1)
        {
          v803 = (float64x2_t *)(v799 + 48 * v800);
          v804 = v803[1];
          v805 = v803[2];
          v806 = *v803;
          v807 = v798 + 2;
          v808 = v802;
          v809 = v801;
          do
          {
            v810 = v807[-2];
            v811 = v807[-1];
            v812 = *v807;
            v807 += 3;
            v806 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v808[-9], v810.f64[0]), v808[-6], v810, 1), v808[-3], v811.f64[0]), *v808, v811, 1), v808[3], v812.f64[0]), v808[6], v812, 1), v806);
            v804 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v808[-8], v810.f64[0]), v808[-5], v810, 1), v808[-2], v811.f64[0]), v808[1], v811, 1), v808[4], v812.f64[0]), v808[7], v812, 1), v804);
            v805 = vaddq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v808[-7], v810.f64[0]), v808[-4], v810, 1), v808[-1], v811.f64[0]), v808[2], v811, 1), v808[5], v812.f64[0]), v808[8], v812, 1), v805);
            v808 += 18;
            --v809;
          }
          while (v809);
          *v803 = v806;
          v803[1] = v804;
          v803[2] = v805;
        }
        ++v800;
        v802 += 18 * (int)v801;
      }
      while (v800 != v1060);
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v1061 = STACK[0x518];
  if ((**(_BYTE **)(v775 + 16) & 1) != 0)
  {
    v1050 = *(_QWORD *)(a60 + 16);
    v813 = *(_QWORD *)(a61 + 16);
    v814 = *(_QWORD *)(a21 + 16);
    v815 = *(_QWORD *)(a18 + 16);
    v816 = *(int **)(a22 + 16);
    v817 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1062 >= 1)
    {
      v818 = 0;
      for (i9 = 0; i9 != v1062; ++i9)
      {
        v820 = *(int *)(v815 + 4 * i9);
        if (v820 >> 30 != 3)
        {
          v821 = *(unsigned int *)(v813 + 4);
          if ((int)v821 >= 1)
          {
            v822 = (float64x2_t *)(v817 + 48 * v820);
            v823 = v822 + 1;
            v824 = v822 + 2;
            v825 = (float64x2_t *)(v1050 + 48 + v818 * v821);
            v826 = v816;
            do
            {
              v827 = *v826;
              if (v827 >> 30 != 3)
              {
                v828 = *(float64x2_t *)(v814 + 16 * v827);
                v829 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v825[-1], v828.f64[0]), v825[2], v828, 1), *v824);
                v830 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v825[-2], v828.f64[0]), v825[1], v828, 1), *v823);
                *v822 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v825[-3], v828.f64[0]), *v825, v828, 1), *v822);
                *v823 = v830;
                *v824 = v829;
              }
              ++v826;
              v825 += 6;
              --v821;
            }
            while (v821);
          }
        }
        v818 += 96;
      }
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v1051 = STACK[0x520];
  v831 = a63;
  v832 = a62;
  if ((**(_BYTE **)(v1054 + 16) & 1) != 0)
  {
    v833 = *(float64x2_t **)(a60 + 16);
    v834 = *(_QWORD *)(a61 + 16);
    v835 = *(float64x2_t **)(a21 + 16);
    v836 = *(_QWORD *)(a51 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1062 >= 1)
    {
      v837 = 0;
      v838 = *(unsigned int *)(v834 + 4);
      v839 = v833 + 3;
      do
      {
        if ((int)v838 >= 1)
        {
          v840 = (float64x2_t *)(v836 + 48 * v837);
          v841 = v840[1];
          v842 = v840[2];
          v843 = *v840;
          v844 = v839;
          v845 = v835;
          v846 = v838;
          do
          {
            v847 = *v845++;
            v843 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v844[-3], v847.f64[0]), *v844, v847, 1), v843);
            v841 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v844[-2], v847.f64[0]), v844[1], v847, 1), v841);
            v842 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v844[-1], v847.f64[0]), v844[2], v847, 1), v842);
            v844 += 6;
            --v846;
          }
          while (v846);
          *v840 = v843;
          v840[1] = v841;
          v840[2] = v842;
        }
        ++v837;
        v839 += 6 * (int)v838;
      }
      while (v837 != v1062);
    }
    *(_QWORD *)(a51 + 24) |= 1uLL;
  }
  v1058 = STACK[0x528];
  if ((**(_BYTE **)(v1061 + 16) & 1) != 0)
  {
    v848 = *(_QWORD *)(a62 + 16);
    v849 = *(_QWORD *)(a63 + 16);
    v850 = *(_QWORD *)(a64 + 16);
    v851 = *(_QWORD *)(a4 + 16);
    v852 = *(_QWORD *)(a22 + 16);
    v853 = *(int **)(a9 + 16);
    v854 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1063 >= 1)
    {
      v855 = 0;
      for (i10 = 0; i10 != v1063; ++i10)
      {
        v857 = *(int *)(v852 + 4 * i10);
        if (v857 >> 30 != 3)
        {
          v858 = *(unsigned int *)(v849 + 4);
          if ((int)v858 >= 1)
          {
            v859 = (float64x2_t *)(v854 + 16 * v857);
            v860 = (int *)(v850 + v855 * v858);
            v861 = v853;
            do
            {
              v862 = *v860;
              if ((_DWORD)v862 != -1)
              {
                v863 = *v861;
                if (v863 >> 30 != 3)
                  *v859 = vmlaq_n_f64(*v859, *(float64x2_t *)(v848 + 16 * v862), *(double *)(v851 + 8 * v863));
              }
              ++v861;
              ++v860;
              --v858;
            }
            while (v858);
          }
        }
        v855 += 4;
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
    v832 = a62;
    v831 = a63;
  }
  v1055 = STACK[0x530];
  if ((**(_BYTE **)(v1051 + 16) & 1) != 0)
  {
    v864 = *(_QWORD *)(v832 + 16);
    v865 = *(_QWORD *)(v831 + 16);
    v866 = *(int **)(a64 + 16);
    v867 = *(double **)(a4 + 16);
    v868 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1063 >= 1)
    {
      v869 = *(int *)(v865 + 4);
      if ((int)v869 >= 1)
      {
        v870 = 0;
        v871 = *(unsigned int *)(v865 + 4);
        v872 = 4 * v869;
        do
        {
          v873 = v866;
          v874 = v867;
          v875 = v871;
          do
          {
            v876 = *v873;
            if ((_DWORD)v876 != -1)
              *(float64x2_t *)(v868 + 16 * v870) = vmlaq_n_f64(*(float64x2_t *)(v868 + 16 * v870), *(float64x2_t *)(v864 + 16 * v876), *v874);
            ++v874;
            ++v873;
            --v875;
          }
          while (v875);
          ++v870;
          v866 = (int *)((char *)v866 + v872);
        }
        while (v870 != v1063);
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
  }
  v1064 = STACK[0x538];
  if ((**(_BYTE **)(v1058 + 16) & 1) != 0)
  {
    v877 = *(_QWORD *)(a66 + 16);
    v878 = *(_QWORD *)(a67 + 16);
    v879 = *(_QWORD *)(a68 + 16);
    v880 = *(_QWORD *)(a8 + 16);
    v881 = *(_QWORD *)(a22 + 16);
    v882 = *(int **)(a10 + 16);
    v883 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1092 >= 1)
    {
      v884 = 0;
      for (i11 = 0; i11 != v1092; ++i11)
      {
        v886 = *(int *)(v881 + 4 * i11);
        if (v886 >> 30 != 3)
        {
          v887 = *(unsigned int *)(v878 + 4);
          if ((int)v887 >= 1)
          {
            v888 = (float64x2_t *)(v883 + 16 * v886);
            v889 = (int *)(v879 + v884 * v887);
            v890 = v882;
            do
            {
              v891 = *v889;
              if ((_DWORD)v891 != -1)
              {
                v892 = *v890;
                if (v892 >> 30 != 3)
                  *v888 = vaddq_f64(*v888, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v877 + 48 * v891), *(double *)(v880 + 24 * v892)), *(float64x2_t *)(v877 + 48 * v891 + 16), *(float64x2_t *)(v880 + 24 * v892), 1), *(float64x2_t *)(v877 + 48 * v891 + 32), *(double *)(v880 + 24 * v892 + 16)));
              }
              ++v890;
              ++v889;
              --v887;
            }
            while (v887);
          }
        }
        v884 += 4;
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
  }
  v1059 = STACK[0x540];
  if ((**(_BYTE **)(v1055 + 16) & 1) != 0)
  {
    v893 = *(_QWORD *)(a66 + 16);
    v894 = *(_QWORD *)(a67 + 16);
    v895 = *(int **)(a68 + 16);
    v1056 = *(_QWORD *)(a8 + 16);
    v896 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1092 >= 1)
    {
      v897 = *(int *)(v894 + 4);
      if ((int)v897 >= 1)
      {
        v898 = 0;
        v899 = *(unsigned int *)(v894 + 4);
        v900 = 4 * v897;
        do
        {
          v901 = v895;
          v902 = (double *)(v1056 + 16);
          v903 = v899;
          do
          {
            v904 = *v901;
            if ((_DWORD)v904 != -1)
              *(float64x2_t *)(v896 + 16 * v898) = vaddq_f64(*(float64x2_t *)(v896 + 16 * v898), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v893 + 48 * v904), *(v902 - 2)), *(float64x2_t *)(v893 + 48 * v904 + 16), *(float64x2_t *)(v902 - 2), 1), *(float64x2_t *)(v893 + 48 * v904 + 32), *v902));
            v902 += 3;
            ++v901;
            --v903;
          }
          while (v903);
          ++v898;
          v895 = (int *)((char *)v895 + v900);
        }
        while (v898 != v1092);
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
  }
  v1071 = STACK[0x548];
  if ((**(_BYTE **)(v1064 + 16) & 1) != 0)
  {
    v905 = *(_QWORD *)(a69 + 16);
    v906 = *(_QWORD *)(a70 + 16);
    v907 = *(_QWORD *)(a71 + 16);
    v908 = *(_QWORD *)(a13 + 16);
    v909 = *(_QWORD *)(a22 + 16);
    v910 = *(int **)(a14 + 16);
    v911 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1094 >= 1)
    {
      v912 = 0;
      for (i12 = 0; i12 != v1094; ++i12)
      {
        v914 = *(int *)(v909 + 4 * i12);
        if (v914 >> 30 != 3)
        {
          v915 = *(unsigned int *)(v906 + 4);
          if ((int)v915 >= 1)
          {
            v916 = (float64x2_t *)(v911 + 16 * v914);
            v917 = (int *)(v907 + v912 * v915);
            v918 = v910;
            do
            {
              v919 = *v917;
              if ((_DWORD)v919 != -1)
              {
                v920 = *v918;
                if (v920 >> 30 != 3)
                {
                  v921 = (float64x2_t *)(v905 + (v919 << 6));
                  *v916 = vaddq_f64(*v916, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v921, *(double *)(v908 + 32 * v920)), v921[1], *(float64x2_t *)(v908 + 32 * v920), 1), v921[2], *(double *)(v908 + 32 * v920 + 16)), v921[3], *(float64x2_t *)(v908 + 32 * v920 + 16), 1));
                }
              }
              ++v918;
              ++v917;
              --v915;
            }
            while (v915);
          }
        }
        v912 += 4;
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
  }
  v1077 = STACK[0x550];
  v922 = STACK[0x3C8];
  v1093 = STACK[0x3C0];
  if ((**(_BYTE **)(v1059 + 16) & 1) != 0)
  {
    v923 = *(_QWORD *)(a69 + 16);
    v924 = *(_QWORD *)(a70 + 16);
    v925 = *(int **)(a71 + 16);
    v926 = *(float64x2_t **)(a13 + 16);
    v927 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1094 >= 1)
    {
      v928 = *(int *)(v924 + 4);
      if ((int)v928 >= 1)
      {
        v929 = 0;
        v930 = *(unsigned int *)(v924 + 4);
        v931 = 4 * v928;
        do
        {
          v932 = v925;
          v933 = v926 + 1;
          v934 = v930;
          do
          {
            v935 = *v932;
            if ((_DWORD)v935 != -1)
              *(float64x2_t *)(v927 + 16 * v929) = vaddq_f64(*(float64x2_t *)(v927 + 16 * v929), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v923 + (v935 << 6)), v933[-1].f64[0]), *(float64x2_t *)(v923 + (v935 << 6) + 16), v933[-1], 1), *(float64x2_t *)(v923 + (v935 << 6) + 32), v933->f64[0]), *(float64x2_t *)(v923 + (v935 << 6) + 48), *v933, 1));
            v933 += 2;
            ++v932;
            --v934;
          }
          while (v934);
          ++v929;
          v925 = (int *)((char *)v925 + v931);
        }
        while (v929 != v1094);
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
  }
  v1095 = STACK[0x558];
  if ((**(_BYTE **)(v1071 + 16) & 1) != 0)
  {
    v936 = *(_QWORD *)(a72 + 16);
    v937 = *(_QWORD *)(v1093 + 16);
    v938 = *(_QWORD *)(v922 + 16);
    v939 = *(_QWORD *)(a17 + 16);
    v940 = *(_QWORD *)(a22 + 16);
    v941 = *(int **)(a18 + 16);
    v942 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1098 >= 1)
    {
      v943 = 0;
      for (i13 = 0; i13 != v1098; ++i13)
      {
        v945 = *(int *)(v940 + 4 * i13);
        if (v945 >> 30 != 3)
        {
          v946 = *(unsigned int *)(v937 + 4);
          if ((int)v946 >= 1)
          {
            v947 = (float64x2_t *)(v942 + 16 * v945);
            v948 = (int *)(v938 + v943 * v946);
            v949 = v941;
            do
            {
              v950 = *v948;
              if ((_DWORD)v950 != -1)
              {
                v951 = *v949;
                if (v951 >> 30 != 3)
                {
                  v952 = (float64x2_t *)(v936 + 96 * v950);
                  v953 = (float64x2_t *)(v939 + 48 * v951);
                  *v947 = vaddq_f64(*v947, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v952, v953->f64[0]), v952[1], *v953, 1), v952[2], v953[1].f64[0]), v952[3], v953[1], 1), v952[4], v953[2].f64[0]), v952[5], v953[2], 1));
                }
              }
              ++v949;
              ++v948;
              --v946;
            }
            while (v946);
          }
        }
        v943 += 4;
      }
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
  }
  v954 = STACK[0x560];
  v1079 = STACK[0x3D0];
  v1080 = STACK[0x3D8];
  if ((**(_BYTE **)(v1077 + 16) & 1) != 0)
  {
    v957 = *(_QWORD *)(a72 + 16);
    v958 = *(_QWORD *)(v1093 + 16);
    v959 = *(int **)(v922 + 16);
    v960 = *(float64x2_t **)(a17 + 16);
    v961 = *(_QWORD *)(a65 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1098 >= 1)
    {
      v962 = 0;
      v963 = *(unsigned int *)(v958 + 4);
      do
      {
        if ((int)v963 >= 1)
        {
          v964 = v959;
          v965 = v960 + 2;
          v966 = v963;
          do
          {
            v967 = *v964;
            if ((_DWORD)v967 != -1)
            {
              v968 = (float64x2_t *)(v957 + 96 * v967);
              *(float64x2_t *)(v961 + 16 * v962) = vaddq_f64(*(float64x2_t *)(v961 + 16 * v962), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v968, v965[-2].f64[0]), v968[1], v965[-2], 1), v968[2], v965[-1].f64[0]), v968[3], v965[-1], 1), v968[4], v965->f64[0]), v968[5], *v965,
                                                       1));
            }
            v965 += 3;
            ++v964;
            --v966;
          }
          while (v966);
        }
        ++v962;
        v959 += (int)v963;
      }
      while (v962 != v1098);
    }
    *(_QWORD *)(a65 + 24) |= 1uLL;
    v955 = STACK[0x568];
    v956 = v1067;
    if ((**(_BYTE **)(v1095 + 16) & 1) == 0)
    {
LABEL_482:
      if ((**(_BYTE **)(v954 + 16) & 1) == 0)
        goto LABEL_483;
      goto LABEL_504;
    }
  }
  else
  {
    v955 = STACK[0x568];
    v956 = v1067;
    if ((**(_BYTE **)(v1095 + 16) & 1) == 0)
      goto LABEL_482;
  }
  v1096 = v955;
  v969 = *(_QWORD *)(v1079 + 16);
  v970 = *(_QWORD *)(v1080 + 16);
  v971 = *(_QWORD *)(a21 + 16);
  v972 = *(int **)(a22 + 16);
  v973 = *(_QWORD *)(a65 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v1097 >= 1)
  {
    v974 = 0;
    for (i14 = 0; i14 != v1097; ++i14)
    {
      v976 = v972[i14];
      if (v976 >> 30 != 3)
      {
        v977 = *(unsigned int *)(v970 + 4);
        if ((int)v977 >= 1)
        {
          v978 = (float64x2_t *)(v973 + 16 * v976);
          v979 = (float64x2_t *)(v969 + 16 + v974 * v977);
          v980 = v972;
          do
          {
            v981 = *v980;
            if (v981 >> 30 != 3)
              *v978 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v979[-1], *(double *)(v971 + 16 * v981)), *v979, *(float64x2_t *)(v971 + 16 * v981), 1), *v978);
            v979 += 2;
            ++v980;
            --v977;
          }
          while (v977);
        }
      }
      v974 += 32;
    }
  }
  *(_QWORD *)(a65 + 24) |= 1uLL;
  v955 = v1096;
  if ((**(_BYTE **)(v954 + 16) & 1) == 0)
  {
LABEL_483:
    if ((**(_BYTE **)(v955 + 16) & 1) == 0)
      return 0;
    goto LABEL_511;
  }
LABEL_504:
  v982 = *(float64x2_t **)(v1079 + 16);
  v983 = *(_QWORD *)(v1080 + 16);
  v984 = *(float64x2_t **)(a21 + 16);
  v985 = *(_QWORD *)(a65 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v1097 >= 1)
  {
    v986 = *(int *)(v983 + 4);
    if ((int)v986 >= 1)
    {
      v987 = 0;
      v988 = *(unsigned int *)(v983 + 4);
      v989 = v982 + 1;
      v990 = 32 * v986;
      do
      {
        v991 = (float64x2_t *)(v985 + 16 * v987);
        v992 = *v991;
        v993 = v989;
        v994 = v984;
        v995 = v988;
        do
        {
          v996 = *v994++;
          v992 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v993[-1], v996.f64[0]), *v993, v996, 1), v992);
          v993 += 2;
          --v995;
        }
        while (v995);
        *v991 = v992;
        ++v987;
        v989 = (float64x2_t *)((char *)v989 + v990);
      }
      while (v987 != v1097);
    }
  }
  *(_QWORD *)(a65 + 24) |= 1uLL;
  v956 = v1067;
  if ((**(_BYTE **)(v955 + 16) & 1) != 0)
  {
LABEL_511:
    v997 = *(_QWORD *)(a2 + 16);
    v998 = *(_QWORD *)(a3 + 16);
    v999 = *(_QWORD *)(a4 + 16);
    v1000 = *(int **)(a9 + 16);
    v1001 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v956 >= 1)
    {
      v1002 = 0;
      for (i15 = 0; i15 != v956; ++i15)
      {
        v1004 = v1000[i15];
        if (v1004 >> 30 != 3)
        {
          v1005 = *(unsigned int *)(v998 + 4);
          if ((int)v1005 >= 1)
          {
            v1006 = (double *)(v997 + v1002 * v1005);
            v1007 = v1000;
            do
            {
              v1008 = *v1007;
              if (v1008 >> 30 != 3)
                *(double *)(v1001 + 8 * v1004) = *(double *)(v1001 + 8 * v1004) + *v1006 * *(double *)(v999 + 8 * v1008);
              ++v1006;
              ++v1007;
              --v1005;
            }
            while (v1005);
          }
        }
        v1002 += 8;
      }
    }
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  return 0;
}

uint64_t sub_23967FEB0(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v17 = *(_OWORD *)(a1 + 480);
  v16 = *(_OWORD *)(a1 + 464);
  v15 = *(_OWORD *)(a1 + 448);
  v14 = *(_OWORD *)(a1 + 432);
  v13 = *(_OWORD *)(a1 + 416);
  v12 = *(_OWORD *)(a1 + 400);
  v11 = *(_OWORD *)(a1 + 384);
  v10 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 352);
  v8 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 256);
  v2 = *(_OWORD *)(a1 + 240);
  sub_23967BC20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    *(_QWORD *)(a1 + 496));
  return 0;
}

uint64_t sub_239680104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  double *v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int *v18;
  int v19;
  unsigned int v20;
  double v21;
  unsigned int v22;
  uint64_t v24;

  v11 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v12 = *v11;
  v24 = *(_QWORD *)(a2 + 16);
  v13 = *(double **)(a6 + 16);
  v14 = *(double **)(a3 + 16);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v12 >= 1)
  {
    v17 = *v14;
    v18 = (int *)(v24 + 4);
    do
    {
      v20 = *(v18 - 1);
      v19 = *v18;
      if (*v18 >> 30 == 3)
        v19 = *v18 + 0x40000000;
      v21 = *(double *)(v16 + 8 * v19);
      v22 = v20 + 0x40000000;
      if (v20 >> 30 != 3)
        v22 = *(v18 - 1);
      *v13++ = v17 * (v21 - *(double *)(v15 + 8 * (int)v22)) * (v17 * (v21 - *(double *)(v15 + 8 * (int)v22)));
      v18 += 2;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968022C(uint64_t *a1)
{
  sub_239680104(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_239680250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  double *v13;
  float64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int *v20;
  float64x2_t v21;
  int v22;
  unsigned int v23;
  float64x2_t *v24;
  float64x2_t v25;
  unsigned int v26;
  float64x2_t *v27;
  float64x2_t v28;
  uint64_t v30;

  v11 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v12 = *v11;
  v30 = *(_QWORD *)(a2 + 16);
  v13 = *(double **)(a6 + 16);
  v14 = *(float64_t **)(a3 + 16);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v12 >= 1)
  {
    v17.f64[0] = *v14;
    v20 = (int *)(v30 + 4);
    v21.f64[0] = *v14;
    v21.f64[1] = *v14;
    do
    {
      v23 = *(v20 - 1);
      v22 = *v20;
      if (*v20 >> 30 == 3)
        v22 = *v20 + 0x40000000;
      v24 = (float64x2_t *)(v16 + 24 * v22);
      v25 = *v24;
      v18.f64[0] = v24[1].f64[0];
      if (v23 >> 30 == 3)
        v26 = v23 + 0x40000000;
      else
        v26 = *(v20 - 1);
      v27 = (float64x2_t *)(v15 + 24 * (int)v26);
      v19.f64[0] = v27[1].f64[0];
      v28 = vmulq_f64(vsubq_f64(v25, *v27), v21);
      v18 = vmulq_f64(vsubq_f64(v18, v19), v17);
      *v13++ = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v28.f64[1], v28, 1), v28.f64[0], v28.f64[0]), v18.f64[0], v18.f64[0]);
      v20 += 2;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396803A8(uint64_t *a1)
{
  sub_239680250(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_2396803CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const double *v29;
  unsigned int *v30;
  float64x2_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t *v38;
  float64x2_t v39;
  double v40;
  float64x2_t *v46;
  uint64_t v47;
  double v48;
  unsigned int v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  float64x2_t v59;
  unsigned int v60;
  float64x2_t v61;
  unsigned int v62;
  float64x2_t v63;
  const double *v65;
  uint64_t v66;
  uint64_t v67;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v19 = *v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(double **)(a11 + 16);
  v65 = *(const double **)(a3 + 16);
  v66 = v20;
  v67 = *(_QWORD *)(a4 + 16);
  v22 = *(_QWORD *)(a5 + 16);
  v23 = *(_QWORD *)(a6 + 16);
  v24 = *(_QWORD *)(a7 + 16);
  v25 = *(_QWORD *)(a8 + 16);
  v26 = *(_QWORD *)(a9 + 16);
  v27 = *(_QWORD *)(a10 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v29 = v65;
    v30 = (unsigned int *)(v66 + 12);
    v31 = vld1q_dup_f64(v29);
    do
    {
      v33 = *v30;
      v32 = v30[1];
      v34 = v32 + 0x40000000;
      if (v32 >> 30 != 3)
        v34 = v30[1];
      v35 = v26 + 72 * (int)v34;
      v36 = *(float64x2_t *)(v35 + 16);
      _Q2 = *(int8x16_t *)(v35 + 32);
      if (v33 >> 30 == 3)
        v33 += 0x40000000;
      v38 = (float64x2_t *)(v24 + 24 * (int)v33);
      v39 = *v38;
      v40 = v38[1].f64[0];
      _Q5 = vmulq_f64(v36, *v38);
      _Q6.f64[0] = v38->f64[1];
      __asm { FMLA            D5, D6, V2.D[1] }
      _Q5.f64[0] = _Q5.f64[0] + *(double *)(v35 + 64) * v40;
      v46 = (float64x2_t *)(v27 + 24 * (int)v34);
      _Q6.f64[0] = v46[1].f64[0];
      v47 = *(_OWORD *)&vaddq_f64(_Q5, _Q6);
      v48 = fabs(*(double *)&v47);
      v49 = *(v30 - 2);
      if (v49 >> 30 == 3)
        v49 += 0x40000000;
      v50 = 0.0;
      if (v48 > 2.22044605e-16)
      {
        _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v35, v39.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v36, _Q2, 8uLL), v39, 1), *(float64x2_t *)(v35 + 48), v40);
        v51 = vdivq_f64(vaddq_f64(_Q6, *v46), (float64x2_t)vdupq_lane_s64(v47, 0));
        v52 = vmulq_f64(v51, v51);
        v53 = vaddq_f64(v52, (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1));
        v54 = vaddvq_f64(v52);
        v55 = *(v30 - 1);
        v56 = v30[2];
        v57 = *(v30 - 3);
        v58 = 3 * (int)v49;
        if (v55 >> 30 == 3)
          v55 += 0x40000000;
        v59 = *(float64x2_t *)(v23 + 16 * (int)v55);
        v60 = v56 + 0x40000000;
        if (v56 >> 30 != 3)
          v60 = v30[2];
        v61 = *(float64x2_t *)(v25 + 16 * (int)v60);
        v62 = v57 + 0x40000000;
        if (v57 >> 30 != 3)
          v62 = *(v30 - 3);
        v63 = vmulq_f64(v31, vsubq_f64(v59, vmlaq_n_f64(v61, v51, *(double *)(v67 + 8 * (int)v62)+ v54* vmlad_n_f64(*(double *)(v22 + 8 * v58) + v54 * *(double *)(v22 + 8 * v58 + 8), *(double *)(v22 + 8 * v58 + 16), vmulq_f64(v53, v53).f64[0])* *(double *)(v67 + 8 * (int)v62))));
        v50 = vaddvq_f64(vmulq_f64(v63, v63));
      }
      *v21++ = v50;
      v30 += 6;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396806A0(uint64_t *a1)
{
  sub_2396803CC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396806E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const double *v29;
  unsigned int *v30;
  float64x2_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t *v38;
  float64x2_t v39;
  double v40;
  float64x2_t *v46;
  uint64_t v47;
  double v48;
  unsigned int v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  float64x2_t v59;
  unsigned int v60;
  float64x2_t v61;
  unsigned int v62;
  float64x2_t v63;
  const double *v65;
  uint64_t v66;
  uint64_t v67;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v19 = *v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(double **)(a11 + 16);
  v65 = *(const double **)(a3 + 16);
  v66 = v20;
  v67 = *(_QWORD *)(a4 + 16);
  v22 = *(_QWORD *)(a5 + 16);
  v23 = *(_QWORD *)(a6 + 16);
  v24 = *(_QWORD *)(a7 + 16);
  v25 = *(_QWORD *)(a8 + 16);
  v26 = *(_QWORD *)(a9 + 16);
  v27 = *(_QWORD *)(a10 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v29 = v65;
    v30 = (unsigned int *)(v66 + 12);
    v31 = vld1q_dup_f64(v29);
    do
    {
      v33 = *v30;
      v32 = v30[1];
      v34 = v32 + 0x40000000;
      if (v32 >> 30 != 3)
        v34 = v30[1];
      v35 = v26 + 72 * (int)v34;
      v36 = *(float64x2_t *)(v35 + 16);
      _Q2 = *(int8x16_t *)(v35 + 32);
      if (v33 >> 30 == 3)
        v33 += 0x40000000;
      v38 = (float64x2_t *)(v24 + 24 * (int)v33);
      v39 = *v38;
      v40 = v38[1].f64[0];
      _Q5 = vmulq_f64(v36, *v38);
      _Q6.f64[0] = v38->f64[1];
      __asm { FMLA            D5, D6, V2.D[1] }
      _Q5.f64[0] = _Q5.f64[0] + *(double *)(v35 + 64) * v40;
      v46 = (float64x2_t *)(v27 + 24 * (int)v34);
      _Q6.f64[0] = v46[1].f64[0];
      v47 = *(_OWORD *)&vaddq_f64(_Q5, _Q6);
      v48 = fabs(*(double *)&v47);
      v49 = *(v30 - 2);
      if (v49 >> 30 == 3)
        v49 += 0x40000000;
      v50 = 0.0;
      if (v48 > 2.22044605e-16)
      {
        _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v35, v39.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v36, _Q2, 8uLL), v39, 1), *(float64x2_t *)(v35 + 48), v40);
        v51 = vdivq_f64(vaddq_f64(_Q6, *v46), (float64x2_t)vdupq_lane_s64(v47, 0));
        v52 = vmulq_f64(v51, v51);
        v53 = vaddq_f64(v52, (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1));
        v54 = vaddvq_f64(v52);
        v55 = *(v30 - 1);
        v56 = v30[2];
        v57 = *(v30 - 3);
        v58 = 3 * (int)v49;
        if (v55 >> 30 == 3)
          v55 += 0x40000000;
        v59 = *(float64x2_t *)(v23 + 16 * (int)v55);
        v60 = v56 + 0x40000000;
        if (v56 >> 30 != 3)
          v60 = v30[2];
        v61 = *(float64x2_t *)(v25 + 16 * (int)v60);
        v62 = v57 + 0x40000000;
        if (v57 >> 30 != 3)
          v62 = *(v30 - 3);
        v63 = vmulq_f64(v31, vsubq_f64(v59, vmlaq_n_f64(v61, v51, *(double *)(v67 + 8 * (int)v62)+ v54* vmlad_n_f64(*(double *)(v22 + 8 * v58) + v54 * *(double *)(v22 + 8 * v58 + 8), *(double *)(v22 + 8 * v58 + 16), vmulq_f64(v53, v53).f64[0])* *(double *)(v67 + 8 * (int)v62))));
        v50 = vaddvq_f64(vmulq_f64(v63, v63));
      }
      *v21++ = v50;
      v30 += 6;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396809B0(uint64_t *a1)
{
  sub_2396806E0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396809F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  double *v13;
  const double *v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  int *v18;
  int v19;
  unsigned int v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  unsigned int v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v29;

  v11 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v12 = *v11;
  v29 = *(_QWORD *)(a2 + 16);
  v13 = *(double **)(a6 + 16);
  v14 = *(const double **)(a3 + 16);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v12 >= 1)
  {
    v17 = vld1q_dup_f64(v14);
    v18 = (int *)(v29 + 4);
    do
    {
      v20 = *(v18 - 1);
      v19 = *v18;
      if (*v18 >> 30 == 3)
        v19 = *v18 + 0x40000000;
      v21 = (float64x2_t *)(v16 + 32 * v19);
      v22 = *v21;
      v23 = v21[1];
      if (v20 >> 30 == 3)
        v24 = v20 + 0x40000000;
      else
        v24 = *(v18 - 1);
      v25 = (float64x2_t *)(v15 + 32 * (int)v24);
      v26 = vmulq_f64(vsubq_f64(v22, *v25), v17);
      v27 = vmulq_f64(vsubq_f64(v23, v25[1]), v17);
      *v13++ = v26.f64[1] * v26.f64[1] + v26.f64[0] * v26.f64[0] + v27.f64[0] * v27.f64[0] + v27.f64[1] * v27.f64[1];
      v18 += 2;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239680B4C(uint64_t *a1)
{
  sub_2396809F0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_239680B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  const double *v23;
  float64x2_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t *v32;
  double v33;
  float64x2_t v34;
  float64x2_t *v40;
  long double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  double v51;
  double v52;
  BOOL v53;
  float64x2_t v54;
  unint64_t v55;
  double v56;
  unsigned int v57;
  float64x2_t v58;
  unsigned int v59;
  float64x2_t v60;
  unsigned int v61;
  uint64_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const double *v73;
  double v74;
  uint64_t v75;
  float64x2_t v76;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v19 = *v18;
  v75 = *(_QWORD *)(a2 + 16);
  v20 = *(double **)(a11 + 16);
  v21 = *(_QWORD *)(a4 + 16);
  v22 = *(_QWORD *)(a5 + 16);
  v68 = *(_QWORD *)(a6 + 16);
  v69 = v21;
  v72 = *(_QWORD *)(a7 + 16);
  v73 = *(const double **)(a3 + 16);
  v67 = *(_QWORD *)(a8 + 16);
  v70 = *(_QWORD *)(a10 + 16);
  v71 = *(_QWORD *)(a9 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v23 = v73;
    v24 = vld1q_dup_f64(v23);
    v66 = v24;
    v25 = (unsigned int *)(v75 + 12);
    do
    {
      v27 = *v25;
      v26 = v25[1];
      if (v26 >> 30 == 3)
        v26 += 0x40000000;
      v28 = v71 + 72 * (int)v26;
      v29 = *(float64x2_t *)(v28 + 16);
      _Q2 = *(int8x16_t *)(v28 + 32);
      _Q3 = *(float64x2_t *)(v28 + 48);
      if (v27 >> 30 == 3)
        v27 += 0x40000000;
      v32 = (float64x2_t *)(v72 + 24 * (int)v27);
      v33 = v32[1].f64[0];
      v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v28, v32->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v29, _Q2, 8uLL), *v32, 1), _Q3, v33);
      _Q1 = vmulq_f64(v29, *v32);
      _Q3.f64[0] = v32->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v28 + 64) * v33;
      v40 = (float64x2_t *)(v70 + 24 * (int)v26);
      _Q3.f64[0] = v40[1].f64[0];
      *(_QWORD *)&v41 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v42 = fabs(v41);
      v74 = v41;
      v76 = vaddq_f64(v34, *v40);
      v43 = vmlad_n_f64(vmuld_lane_f64(v76.f64[1], v76, 1), v76.f64[0], v76.f64[0]);
      v44 = sqrt(v43);
      v45 = fabs(v44);
      v46 = *(v25 - 2);
      v47 = *(v25 - 1);
      v48 = v25[2];
      v49 = *(v25 - 3);
      if (v46 >> 30 == 3)
        v50 = v46 + 0x40000000;
      else
        v50 = *(v25 - 2);
      v51 = atan2(v44, v41);
      v52 = 0.0;
      v53 = v45 <= 2.22044605e-16 || v42 <= 2.22044605e-16;
      if (!v53 && v43 > 0.0 && fmin(v45, v42) > 2.22044605e-16)
      {
        v54 = v76;
        v55 = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
        v57 = v47 + 0x40000000;
        if (v47 >> 30 != 3)
          v57 = v47;
        v58 = *(float64x2_t *)(v68 + 16 * (int)v57);
        v59 = v48 + 0x40000000;
        if (v48 >> 30 != 3)
          v59 = v48;
        v60 = *(float64x2_t *)(v67 + 16 * (int)v59);
        *(_QWORD *)&v54.f64[1] = v55;
        v61 = v49 + 0x40000000;
        if (v49 >> 30 != 3)
          v61 = v49;
        v62 = 32 * (int)v50;
        v56 = v51 * (v51 * v51);
        v63 = (v51
             + v56 * *(double *)(v22 + v62)
             + v51 * v51 * v56 * *(double *)(v22 + (v62 | 8))
             + v51 * v51 * (v51 * v51 * v56) * *(double *)(v22 + (v62 | 0x10))
             + *(double *)(v22 + (v62 | 0x18)) * (v51 * v51 * (v51 * v51 * (v51 * v51 * v56))))
            / v44;
        if (v43 < 0.0000000149011612)
          v63 = 1.0 / v74;
        v64 = vmulq_f64(v66, vsubq_f64(v58, vmlaq_n_f64(v60, v54, *(double *)(v69 + 8 * (int)v61) * v63)));
        v52 = vaddvq_f64(vmulq_f64(v64, v64));
      }
      *v20++ = v52;
      v25 += 6;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239680EE8(uint64_t *a1)
{
  sub_239680B70(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return 0;
}

uint64_t sub_239680F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  const double *v23;
  float64x2_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t *v32;
  double v33;
  float64x2_t v34;
  float64x2_t *v40;
  long double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  double v51;
  double v52;
  BOOL v53;
  float64x2_t v54;
  unint64_t v55;
  double v56;
  unsigned int v57;
  float64x2_t v58;
  unsigned int v59;
  float64x2_t v60;
  unsigned int v61;
  uint64_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const double *v73;
  double v74;
  uint64_t v75;
  float64x2_t v76;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v19 = *v18;
  v75 = *(_QWORD *)(a2 + 16);
  v20 = *(double **)(a11 + 16);
  v21 = *(_QWORD *)(a4 + 16);
  v22 = *(_QWORD *)(a5 + 16);
  v68 = *(_QWORD *)(a6 + 16);
  v69 = v21;
  v72 = *(_QWORD *)(a7 + 16);
  v73 = *(const double **)(a3 + 16);
  v67 = *(_QWORD *)(a8 + 16);
  v70 = *(_QWORD *)(a10 + 16);
  v71 = *(_QWORD *)(a9 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v23 = v73;
    v24 = vld1q_dup_f64(v23);
    v66 = v24;
    v25 = (unsigned int *)(v75 + 12);
    do
    {
      v27 = *v25;
      v26 = v25[1];
      if (v26 >> 30 == 3)
        v26 += 0x40000000;
      v28 = v71 + 72 * (int)v26;
      v29 = *(float64x2_t *)(v28 + 16);
      _Q2 = *(int8x16_t *)(v28 + 32);
      _Q3 = *(float64x2_t *)(v28 + 48);
      if (v27 >> 30 == 3)
        v27 += 0x40000000;
      v32 = (float64x2_t *)(v72 + 24 * (int)v27);
      v33 = v32[1].f64[0];
      v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v28, v32->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v29, _Q2, 8uLL), *v32, 1), _Q3, v33);
      _Q1 = vmulq_f64(v29, *v32);
      _Q3.f64[0] = v32->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v28 + 64) * v33;
      v40 = (float64x2_t *)(v70 + 24 * (int)v26);
      _Q3.f64[0] = v40[1].f64[0];
      *(_QWORD *)&v41 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v42 = fabs(v41);
      v74 = v41;
      v76 = vaddq_f64(v34, *v40);
      v43 = vmlad_n_f64(vmuld_lane_f64(v76.f64[1], v76, 1), v76.f64[0], v76.f64[0]);
      v44 = sqrt(v43);
      v45 = fabs(v44);
      v46 = *(v25 - 2);
      v47 = *(v25 - 1);
      v48 = v25[2];
      v49 = *(v25 - 3);
      if (v46 >> 30 == 3)
        v50 = v46 + 0x40000000;
      else
        v50 = *(v25 - 2);
      v51 = atan2(v44, v41);
      v52 = 0.0;
      v53 = v45 <= 2.22044605e-16 || v42 <= 2.22044605e-16;
      if (!v53 && v43 > 0.0 && fmin(v45, v42) > 2.22044605e-16)
      {
        v54 = v76;
        v55 = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
        v57 = v47 + 0x40000000;
        if (v47 >> 30 != 3)
          v57 = v47;
        v58 = *(float64x2_t *)(v68 + 16 * (int)v57);
        v59 = v48 + 0x40000000;
        if (v48 >> 30 != 3)
          v59 = v48;
        v60 = *(float64x2_t *)(v67 + 16 * (int)v59);
        *(_QWORD *)&v54.f64[1] = v55;
        v61 = v49 + 0x40000000;
        if (v49 >> 30 != 3)
          v61 = v49;
        v62 = 32 * (int)v50;
        v56 = v51 * (v51 * v51);
        v63 = (v51
             + v56 * *(double *)(v22 + v62)
             + v51 * v51 * v56 * *(double *)(v22 + (v62 | 8))
             + v51 * v51 * (v51 * v51 * v56) * *(double *)(v22 + (v62 | 0x10))
             + *(double *)(v22 + (v62 | 0x18)) * (v51 * v51 * (v51 * v51 * (v51 * v51 * v56))))
            / v44;
        if (v43 < 0.0000000149011612)
          v63 = 1.0 / v74;
        v64 = vmulq_f64(v66, vsubq_f64(v58, vmlaq_n_f64(v60, v54, *(double *)(v69 + 8 * (int)v61) * v63)));
        v52 = vaddvq_f64(vmulq_f64(v64, v64));
      }
      *v20++ = v52;
      v25 += 6;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396812A0(uint64_t *a1)
{
  sub_239680F28(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396812E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  double *v13;
  const double *v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  int *v18;
  int v19;
  unsigned int v20;
  float64x2_t v21;
  unsigned int v22;
  float64x2_t v23;
  uint64_t v25;

  v11 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v12 = *v11;
  v25 = *(_QWORD *)(a2 + 16);
  v13 = *(double **)(a6 + 16);
  v14 = *(const double **)(a3 + 16);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v12 >= 1)
  {
    v17 = vld1q_dup_f64(v14);
    v18 = (int *)(v25 + 4);
    do
    {
      v20 = *(v18 - 1);
      v19 = *v18;
      if (*v18 >> 30 == 3)
        v19 = *v18 + 0x40000000;
      v21 = *(float64x2_t *)(v16 + 16 * v19);
      if (v20 >> 30 == 3)
        v22 = v20 + 0x40000000;
      else
        v22 = *(v18 - 1);
      v23 = vmulq_f64(vsubq_f64(v21, *(float64x2_t *)(v15 + 16 * (int)v22)), v17);
      *v13++ = vaddvq_f64(vmulq_f64(v23, v23));
      v18 += 2;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968140C(uint64_t *a1)
{
  sub_2396812E0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_239681430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t *v61;
  uint64_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t *v68;
  int64x2_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t *v81;
  int64x2_t *v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  __int128 *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  uint64_t v133;
  __int128 *v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD *v156;
  _OWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  uint64_t v168;
  __int128 *v169;
  __int128 *v170;
  _OWORD *v171;
  _OWORD *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 *v214;
  __int128 *v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v232;
  uint64_t v235;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v246;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;

  v37 = a9;
  v36 = a10;
  v38 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v232 = v38[8];
  v241 = v38[6];
  v39 = v38[4];
  v40 = v38[2];
  v235 = *v38;
  if ((**(_BYTE **)(a27 + 16) & 1) != 0)
  {
    v41 = *(_QWORD *)(a2 + 16);
    v42 = *(_QWORD *)(a3 + 16);
    v43 = *(_QWORD *)(a4 + 16);
    v44 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v235 >= 1)
    {
      v45 = *(int *)(v42 + 4);
      if ((int)v45 >= 1)
      {
        v46 = 0;
        v47 = *(unsigned int *)(v42 + 4);
        v48 = v45 + 1;
        do
        {
          v49 = 0;
          do
          {
            if (v46 == v49)
            {
              v50 = *(_QWORD *)(v41 + 8 * v48 * v46);
              v51 = 8 * v46;
              *(_QWORD *)(v43 + v51) = v50;
              *(_QWORD *)(v44 + v51) = v50;
            }
            ++v49;
          }
          while (v47 != v49);
          ++v46;
        }
        while (v46 != v235);
      }
    }
    *(_QWORD *)(a4 + 24) |= 1uLL;
    *(_QWORD *)(a5 + 24) |= 1uLL;
    v37 = a9;
    v36 = a10;
  }
  if ((**(_BYTE **)(a28 + 16) & 1) != 0)
  {
    v52 = *(_QWORD *)(a6 + 16);
    v243 = *(_QWORD *)(a7 + 16);
    v53 = *(_QWORD *)(a8 + 16);
    v54 = *(_QWORD *)(v37 + 16);
    v55 = *(_QWORD *)(v36 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v40 >= 1)
    {
      v56 = *(int *)(v243 + 4);
      if ((int)v56 >= 1)
      {
        v57 = 0;
        v58 = *(unsigned int *)(v243 + 4);
        v59 = v56 + 1;
        do
        {
          v60 = 0;
          v61 = (int64x2_t *)(v52 + 72 * v59 * v57);
          do
          {
            if (v57 == v60)
            {
              v62 = *(int *)(v53 + 4 * v57);
              if (v62 >> 30 != 3)
              {
                v63 = *v61;
                v64 = v61[1];
                v65 = v61[2];
                v66 = *(_QWORD *)(v52 + 8 * (9 * v59 * v57 + 8));
                v67 = v61[3];
                v68 = (int64x2_t *)(v54 + 72 * v62);
                *v68 = *v61;
                v68[1] = v64;
                v68[2] = v65;
                v68[3] = v67;
                v68[4].i64[0] = v66;
                v69 = (int64x2_t *)(v55 + 24 * v62);
                *v69 = vzip1q_s64(v63, v65);
                v69[1].i64[0] = v66;
              }
            }
            ++v60;
          }
          while (v58 != v60);
          ++v57;
        }
        while (v57 != v40);
      }
    }
    *(_QWORD *)(v37 + 24) |= 1uLL;
    *(_QWORD *)(v36 + 24) |= 1uLL;
  }
  v70 = a15;
  v71 = a12;
  if ((**(_BYTE **)(a29 + 16) & 1) != 0)
  {
    v72 = *(_QWORD *)(a6 + 16);
    v73 = *(_QWORD *)(a7 + 16);
    v74 = *(_QWORD *)(v37 + 16);
    v75 = *(_QWORD *)(v36 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v40 >= 1)
    {
      v76 = *(int *)(v73 + 4);
      if ((int)v76 >= 1)
      {
        v77 = 0;
        v78 = *(unsigned int *)(v73 + 4);
        v79 = v76 + 1;
        do
        {
          v80 = 0;
          v81 = (int64x2_t *)(v72 + 72 * v79 * v77);
          v82 = (int64x2_t *)(v74 + 72 * v77);
          do
          {
            if (v77 == v80)
            {
              v83 = *v81;
              v84 = v81[1];
              v85 = v81[2];
              v86 = *(_QWORD *)(v72 + 8 * (9 * v79 * v77 + 8));
              v87 = v81[3];
              *v82 = *v81;
              v82[1] = v84;
              v82[2] = v85;
              *(_QWORD *)(v74 + 8 * (9 * v77 + 8)) = v86;
              v82[3] = v87;
              *(int64x2_t *)(v75 + 24 * v77) = vzip1q_s64(v83, v85);
              *(_QWORD *)(v75 + 8 * (3 * v77 + 2)) = v86;
            }
            ++v80;
          }
          while (v78 != v80);
          ++v77;
        }
        while (v77 != v40);
      }
    }
    *(_QWORD *)(v37 + 24) |= 1uLL;
    *(_QWORD *)(v36 + 24) |= 1uLL;
    v70 = a15;
    v71 = a12;
  }
  if ((**(_BYTE **)(a30 + 16) & 1) != 0)
  {
    v88 = *(_QWORD *)(a11 + 16);
    v89 = *(_QWORD *)(v71 + 16);
    v90 = *(_QWORD *)(a13 + 16);
    v91 = *(_QWORD *)(a14 + 16);
    v92 = *(_QWORD *)(v70 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v39 >= 1)
    {
      v93 = 0;
      v94 = *(unsigned int *)(v89 + 4);
      do
      {
        if ((int)v94 >= 1)
        {
          v95 = 0;
          v96 = (__int128 *)(v88 + ((((int)v94 + 1) * v93) << 7));
          do
          {
            if (v93 == v95)
            {
              v97 = *(int *)(v90 + 4 * v93);
              if (v97 >> 30 != 3)
              {
                v98 = *v96;
                v99 = v96[1];
                v100 = v96[2];
                v101 = v96[3];
                v102 = v96[4];
                v103 = v96[5];
                v104 = v96[6];
                v105 = v96[7];
                v106 = (__int128 *)(v91 + (v97 << 7));
                *v106 = *v96;
                v106[1] = v99;
                v106[2] = v100;
                v106[3] = v101;
                v106[4] = v102;
                v106[5] = v103;
                *((_QWORD *)&v98 + 1) = *((_QWORD *)&v100 + 1);
                v106[6] = v104;
                v106[7] = v105;
                *((_QWORD *)&v103 + 1) = *((_QWORD *)&v105 + 1);
                v107 = (_OWORD *)(v92 + 32 * v97);
                *v107 = v98;
                v107[1] = v103;
              }
            }
            ++v95;
          }
          while (v94 != v95);
        }
        ++v93;
      }
      while (v93 != v39);
    }
    *(_QWORD *)(a14 + 24) |= 1uLL;
    *(_QWORD *)(v70 + 24) |= 1uLL;
  }
  if ((**(_BYTE **)(a31 + 16) & 1) != 0)
  {
    v108 = *(_QWORD *)(a11 + 16);
    v109 = *(_QWORD *)(v71 + 16);
    v110 = *(_QWORD *)(a14 + 16);
    v111 = *(_QWORD *)(v70 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v39 >= 1)
    {
      v112 = 0;
      v113 = *(unsigned int *)(v109 + 4);
      do
      {
        if ((int)v113 >= 1)
        {
          v114 = 0;
          v115 = (__int128 *)(v108 + ((((int)v113 + 1) * v112) << 7));
          v116 = (__int128 *)(v110 + (v112 << 7));
          v117 = (_OWORD *)(v111 + 32 * v112);
          do
          {
            if (v112 == v114)
            {
              v118 = *v115;
              v119 = v115[1];
              v120 = v115[2];
              v121 = v115[3];
              v122 = v115[4];
              v123 = v115[5];
              v124 = v115[6];
              v125 = v115[7];
              *v116 = *v115;
              v116[1] = v119;
              v116[2] = v120;
              v116[3] = v121;
              v116[4] = v122;
              v116[5] = v123;
              v116[6] = v124;
              v116[7] = v125;
              *((_QWORD *)&v118 + 1) = *((_QWORD *)&v120 + 1);
              *((_QWORD *)&v123 + 1) = *((_QWORD *)&v125 + 1);
              *v117 = v118;
              v117[1] = v123;
            }
            ++v114;
          }
          while (v113 != v114);
        }
        ++v112;
      }
      while (v112 != v39);
    }
    *(_QWORD *)(a14 + 24) |= 1uLL;
    *(_QWORD *)(v70 + 24) |= 1uLL;
  }
  if ((**(_BYTE **)(a32 + 16) & 1) != 0)
  {
    v126 = *(_QWORD *)(a16 + 16);
    v127 = *(_QWORD *)(a17 + 16);
    v128 = *(_QWORD *)(a18 + 16);
    v246 = *(_QWORD *)(a20 + 16);
    v248 = *(_QWORD *)(a19 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v241 >= 1)
    {
      v129 = 0;
      v130 = *(unsigned int *)(v127 + 4);
      v244 = (int)v130 + 1;
      do
      {
        if ((int)v130 >= 1)
        {
          v131 = 0;
          v132 = (_OWORD *)(v126 + 288 * v244 * v129);
          v133 = 36 * v244 * v129;
          v134 = v132 + 7;
          v135 = v132 + 14;
          v136 = v133 + 21;
          v137 = v133 + 35;
          do
          {
            if (v129 == v131)
            {
              v138 = *(int *)(v128 + 4 * v129);
              if (v138 >> 30 != 3)
              {
                v139 = v132[1];
                v140 = v132[2];
                v141 = v132[3];
                v142 = v132[4];
                v143 = v132[5];
                v144 = v132[6];
                v145 = *v134;
                v146 = v132[8];
                v147 = v132[9];
                v148 = v132[10];
                v149 = v132[11];
                v150 = v132[12];
                v151 = v132[13];
                v152 = *v135;
                v153 = v132[15];
                v154 = v132[16];
                v155 = v132[17];
                v156 = (_OWORD *)(v248 + 288 * v138);
                *v156 = *v132;
                v156[1] = v139;
                v156[2] = v140;
                v156[3] = v141;
                v156[4] = v142;
                v156[5] = v143;
                v156[6] = v144;
                v156[7] = v145;
                v156[8] = v146;
                v156[9] = v147;
                v156[10] = v148;
                v156[11] = v149;
                v156[12] = v150;
                v156[13] = v151;
                v156[14] = v152;
                v156[15] = v153;
                v156[16] = v154;
                v156[17] = v155;
                *(_QWORD *)&v250 = *(_QWORD *)v132;
                *((_QWORD *)&v250 + 1) = *(_QWORD *)(v126 + 8 * ((6 * ((6 * v244 * v129) | 1)) | 1));
                *(_QWORD *)&v252 = *(_QWORD *)v134;
                *((_QWORD *)&v252 + 1) = *(_QWORD *)(v126 + 8 * v136);
                *(_QWORD *)&v254 = *(_QWORD *)v135;
                *((_QWORD *)&v254 + 1) = *(_QWORD *)(v126 + 8 * v137);
                v157 = (_OWORD *)(v246 + 48 * v138);
                *v157 = v250;
                v157[1] = v252;
                v157[2] = v254;
              }
            }
            ++v131;
          }
          while (v130 != v131);
        }
        ++v129;
      }
      while (v129 != v241);
    }
    *(_QWORD *)(a19 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
  }
  v158 = a25;
  v159 = a24;
  if ((**(_BYTE **)(a33 + 16) & 1) != 0)
  {
    v162 = *(_QWORD *)(a16 + 16);
    v163 = *(_QWORD *)(a17 + 16);
    v239 = *(_QWORD *)(a20 + 16);
    v240 = *(_QWORD *)(a19 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v241 >= 1)
    {
      v164 = 0;
      v165 = *(unsigned int *)(v163 + 4);
      v238 = (int)v165 + 1;
      do
      {
        if ((int)v165 >= 1)
        {
          v166 = 0;
          v167 = (_OWORD *)(v162 + 288 * v238 * v164);
          v168 = 36 * v238 * v164;
          v169 = v167 + 7;
          v170 = v167 + 14;
          v171 = (_OWORD *)(v240 + 288 * v164);
          v172 = (_OWORD *)(v239 + 48 * v164);
          do
          {
            if (v164 == v166)
            {
              v173 = v167[1];
              v174 = v167[2];
              v175 = v167[3];
              v176 = v167[4];
              v177 = v167[5];
              v178 = v167[6];
              v179 = *v169;
              v180 = v167[8];
              v181 = v167[9];
              v182 = v167[10];
              v183 = v167[11];
              v184 = v167[12];
              v185 = v167[13];
              v186 = *v170;
              v187 = v167[15];
              v188 = v167[16];
              v189 = v167[17];
              *v171 = *v167;
              v171[1] = v173;
              v171[2] = v174;
              v171[3] = v175;
              v171[4] = v176;
              v171[5] = v177;
              v171[6] = v178;
              v171[7] = v179;
              v171[8] = v180;
              v171[9] = v181;
              v171[10] = v182;
              v171[11] = v183;
              v171[12] = v184;
              v171[13] = v185;
              v171[14] = v186;
              v171[15] = v187;
              v171[16] = v188;
              v171[17] = v189;
              *(_QWORD *)&v251 = *(_QWORD *)v167;
              *((_QWORD *)&v251 + 1) = *(_QWORD *)(v162 + 8 * ((6 * ((6 * v238 * v164) | 1)) | 1));
              *(_QWORD *)&v253 = *(_QWORD *)v169;
              *((_QWORD *)&v253 + 1) = *(_QWORD *)(v162 + 8 * (v168 + 21));
              *(_QWORD *)&v255 = *(_QWORD *)v170;
              *((_QWORD *)&v255 + 1) = *(_QWORD *)(v162 + 8 * (v168 + 35));
              *v172 = v251;
              v172[1] = v253;
              v172[2] = v255;
            }
            ++v166;
          }
          while (v165 != v166);
        }
        ++v164;
      }
      while (v164 != v241);
    }
    *(_QWORD *)(a19 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    v159 = a24;
    v158 = a25;
    v160 = a36;
    v161 = v232;
    if ((**(_BYTE **)(a34 + 16) & 1) == 0)
    {
LABEL_66:
      if ((**(_BYTE **)(a35 + 16) & 1) == 0)
        goto LABEL_67;
      goto LABEL_88;
    }
  }
  else
  {
    v160 = a36;
    v161 = v232;
    if ((**(_BYTE **)(a34 + 16) & 1) == 0)
      goto LABEL_66;
  }
  v249 = v160;
  v190 = *(_QWORD *)(a21 + 16);
  v191 = *(_QWORD *)(a22 + 16);
  v192 = *(_QWORD *)(a23 + 16);
  v193 = *(_QWORD *)(v159 + 16);
  v194 = *(_QWORD *)(v158 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v161 >= 1)
  {
    v195 = *(int *)(v191 + 4);
    if ((int)v195 >= 1)
    {
      v196 = 0;
      v197 = *(unsigned int *)(v191 + 4);
      v198 = v195 + 1;
      do
      {
        v199 = 0;
        v200 = (__int128 *)(v190 + 32 * v198 * v196);
        do
        {
          if (v196 == v199)
          {
            v201 = *(int *)(v192 + 4 * v196);
            if (v201 >> 30 != 3)
            {
              v202 = *v200;
              v203 = v200[1];
              v204 = (__int128 *)(v193 + 32 * v201);
              *v204 = *v200;
              v204[1] = v203;
              *((_QWORD *)&v202 + 1) = *((_QWORD *)&v203 + 1);
              *(_OWORD *)(v194 + 16 * v201) = v202;
            }
          }
          ++v199;
        }
        while (v197 != v199);
        ++v196;
      }
      while (v196 != v161);
    }
  }
  *(_QWORD *)(v159 + 24) |= 1uLL;
  *(_QWORD *)(v158 + 24) |= 1uLL;
  v160 = v249;
  if ((**(_BYTE **)(a35 + 16) & 1) == 0)
  {
LABEL_67:
    if ((**(_BYTE **)(v160 + 16) & 1) == 0)
      return 0;
    goto LABEL_97;
  }
LABEL_88:
  v205 = *(_QWORD *)(a21 + 16);
  v206 = *(_QWORD *)(a22 + 16);
  v207 = *(_QWORD *)(v159 + 16);
  v208 = *(_QWORD *)(v158 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v161 >= 1)
  {
    v209 = *(int *)(v206 + 4);
    if ((int)v209 >= 1)
    {
      v210 = 0;
      v211 = *(unsigned int *)(v206 + 4);
      v212 = v209 + 1;
      do
      {
        v213 = 0;
        v214 = (__int128 *)(v205 + 32 * v212 * v210);
        v215 = (__int128 *)(v207 + 32 * v210);
        do
        {
          if (v210 == v213)
          {
            v216 = *v214;
            v217 = v214[1];
            *v215 = *v214;
            v215[1] = v217;
            *((_QWORD *)&v216 + 1) = *((_QWORD *)&v217 + 1);
            *(_OWORD *)(v208 + 16 * v210) = v216;
          }
          ++v213;
        }
        while (v211 != v213);
        ++v210;
      }
      while (v210 != v161);
    }
  }
  *(_QWORD *)(v159 + 24) |= 1uLL;
  *(_QWORD *)(v158 + 24) |= 1uLL;
  if ((**(_BYTE **)(v160 + 16) & 1) != 0)
  {
LABEL_97:
    v218 = *(_QWORD *)(a2 + 16);
    v219 = *(_QWORD *)(a3 + 16);
    v220 = *(_QWORD *)(a26 + 16);
    v221 = *(_QWORD *)(a4 + 16);
    v222 = *(_QWORD *)(a5 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v235 >= 1)
    {
      v223 = *(int *)(v219 + 4);
      if ((int)v223 >= 1)
      {
        v224 = 0;
        v225 = *(unsigned int *)(v219 + 4);
        v226 = v223 + 1;
        do
        {
          v227 = 0;
          do
          {
            if (v224 == v227)
            {
              v228 = *(int *)(v220 + 4 * v224);
              if (v228 >> 30 != 3)
              {
                v229 = *(_QWORD *)(v218 + 8 * v226 * v224);
                v230 = 8 * v228;
                *(_QWORD *)(v221 + v230) = v229;
                *(_QWORD *)(v222 + v230) = v229;
              }
            }
            ++v227;
          }
          while (v225 != v227);
          ++v224;
        }
        while (v224 != v235);
      }
    }
    *(_QWORD *)(a4 + 24) |= 1uLL;
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  return 0;
}

uint64_t sub_239682374(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  v2 = *(_OWORD *)(a1 + 208);
  sub_239681430(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
  return 0;
}

uint64_t sub_2396823E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double v18;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(float64x2_t **)(a2 + 16);
  v8 = *(float64x2_t **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    if (v6 < 4)
    {
      v9 = 0;
LABEL_7:
      v14 = v6 - v9;
      v15 = v9;
      v16 = &v7->f64[v9];
      v17 = &v8->f64[v15];
      do
      {
        v18 = *v16++;
        *v17 = *v17 + v18;
        ++v17;
        --v14;
      }
      while (v14);
      goto LABEL_9;
    }
    v9 = v6 & 0x7FFFFFFC;
    v10 = v7 + 1;
    v11 = v8 + 1;
    v12 = v6 & 0xFFFFFFFC;
    do
    {
      v13 = vaddq_f64(*v11, *v10);
      v11[-1] = vaddq_f64(v11[-1], v10[-1]);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v9 != v6)
      goto LABEL_7;
  }
LABEL_9:
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396824D0(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396824F0(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682510(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  double *v11;
  uint64_t v13;

  v7 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v8 = *v7;
  v9 = *(int **)(a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(double **)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v8 >= 1)
  {
    do
    {
      v13 = *v9;
      if (v13 >> 30 != 3)
        *v11 = *v11 + *(double *)(v10 + 8 * v13);
      ++v11;
      ++v9;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396825F8(uint64_t *a1)
{
  sub_239682530(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239682618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64_t v14;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(float64x2_t **)(a2 + 16);
  v8 = *(float64x2_t **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v11 = v7 + 1;
    v12 = v8 + 1;
    do
    {
      v9.f64[0] = v12->f64[0];
      v13 = v11[-1];
      v14 = v11->f64[0];
      v11 = (float64x2_t *)((char *)v11 + 24);
      v10.f64[0] = v14;
      v9 = vaddq_f64(v9, v10);
      v12[-1] = vaddq_f64(v12[-1], v13);
      v12->f64[0] = v9.f64[0];
      v12 = (float64x2_t *)((char *)v12 + 24);
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396826C0(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396826E0(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682700(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t *v14;
  uint64_t v15;
  float64x2_t *v16;

  v7 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v8 = *v7;
  v9 = *(int **)(a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(float64x2_t **)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v8 >= 1)
  {
    v14 = v11 + 1;
    do
    {
      v15 = *v9;
      if (v15 >> 30 != 3)
      {
        v12.f64[0] = v14->f64[0];
        v16 = (float64x2_t *)(v10 + 24 * v15);
        v13.f64[0] = v16[1].f64[0];
        v12 = vaddq_f64(v12, v13);
        v14[-1] = vaddq_f64(v14[-1], *v16);
        v14->f64[0] = v12.f64[0];
      }
      v14 = (float64x2_t *)((char *)v14 + 24);
      ++v9;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239682808(uint64_t *a1)
{
  sub_239682720(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239682828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v11;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(float64x2_t **)(a2 + 16);
  v8 = *(float64x2_t **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = v7 + 1;
    v10 = v8 + 1;
    do
    {
      v11 = vaddq_f64(*v10, *v9);
      v10[-1] = vaddq_f64(v10[-1], v9[-1]);
      *v10 = v11;
      v9 += 2;
      v10 += 2;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396828CC(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396828EC(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968290C(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968292C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;

  v7 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v8 = *v7;
  v9 = *(int **)(a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(float64x2_t **)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v8 >= 1)
  {
    v12 = v11 + 1;
    do
    {
      v13 = *v9;
      if (v13 >> 30 != 3)
      {
        v14 = (float64x2_t *)(v10 + 32 * v13);
        v15 = vaddq_f64(*v12, v14[1]);
        v12[-1] = vaddq_f64(v12[-1], *v14);
        *v12 = v15;
      }
      v12 += 2;
      ++v9;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239682A04(uint64_t *a1)
{
  sub_23968292C(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239682A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(float64x2_t **)(a2 + 16);
  v8 = *(float64x2_t **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    do
    {
      v9 = *v7++;
      *v8 = vaddq_f64(*v8, v9);
      ++v8;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239682AB4(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682AD4(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682AF4(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682B14(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682B34(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239682B54(uint64_t *a1)
{
  sub_239682720(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239682B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  __int128 v20;
  float64x2_t v21;
  long double v27;
  float64x2_t v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  int8x16_t v55;
  double v56;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  __int128 v61;
  float64x2_t v62;
  __int128 v63;
  double v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  int8x16_t v70;

  v7 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v8 = *v7;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(float64x2_t **)(a3 + 16);
  v11 = *(float64x2_t **)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v8 >= 1)
  {
    v17 = 0;
    v18 = v11 + 1;
    v19 = v10 + 2;
    v20 = xmmword_239EC6850;
    v21 = (float64x2_t)xmmword_239EC6840;
    __asm { FMOV            V23.2D, #1.0 }
    v58 = _Q23;
    do
    {
      v31 = *(double *)(v9 + v17 + 8);
      v13.f64[0] = *(float64_t *)(v9 + v17 + 16);
      v30 = -v13.f64[0];
      *(_QWORD *)&v15 = *(_QWORD *)(v9 + v17);
      v29 = -v31;
      v35.f64[0] = -v31;
      v35.f64[1] = -v13.f64[0];
      *(double *)&v14 = -*(double *)&v15;
      v56 = v31 * v31 + *(double *)&v15 * *(double *)&v15 + v13.f64[0] * v13.f64[0];
      v32.f64[0] = 0.0;
      v32.f64[1] = v13.f64[0];
      v34.f64[0] = 0.0;
      *(_QWORD *)&v34.f64[1] = v15;
      v33.f64[0] = v31;
      v33.f64[1] = -*(double *)&v15;
      if (v56 >= 0.000000263391344)
      {
        v27 = sqrt(v56);
        v68 = v33;
        v69 = v35;
        v66 = v32;
        v67 = v34;
        v64 = -v13.f64[0];
        v65 = *(double *)(v9 + v17 + 8);
        v62 = v13;
        v63 = v14;
        v60 = -v31;
        v61 = v15;
        v28.f64[0] = sin(v27) / v27;
        v59 = v28;
        v12.f64[0] = cos(v27);
        v16 = v59;
        v29 = v60;
        v15 = v61;
        v13 = v62;
        v14 = v63;
        v30 = v64;
        v31 = v65;
        v32 = v66;
        v34 = v67;
        v33 = v68;
        v35 = v69;
        _Q23 = v58;
        v21 = (float64x2_t)xmmword_239EC6840;
        v20 = xmmword_239EC6850;
        v12.f64[0] = (1.0 - v12.f64[0]) / v56;
      }
      else
      {
        v12.f64[0] = v56 * (v56 * 0.00138888889 + -0.0416666667) + 0.5;
        v16.f64[0] = v56 * (v56 * (v56 * -0.000198412698 + 0.00833333333) + -0.166666667) + 1.0;
      }
      v70.i64[0] = 0;
      v70.i64[1] = v20;
      v36 = (float64x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v34, 8uLL);
      v37 = vmulq_f64(v35, v12);
      v38 = vmulq_n_f64(v32, v12.f64[0]);
      v39 = vmulq_n_f64(v36, v12.f64[0]);
      *(_QWORD *)&v40 = *(_OWORD *)&vmulq_laneq_f64(v12, v34, 1);
      v41 = vmulq_n_f64(v33, v12.f64[0]);
      v42 = vmlaq_n_f64(vmulq_n_f64(v39, v13.f64[0]), v41, v29);
      v13.f64[0] = vmuld_n_f64(v13.f64[0], v40);
      v43 = vmlaq_n_f64(vmulq_n_f64(v38, v30), v41, *(double *)&v15);
      v41.f64[0] = vmuld_n_f64(v30, v37.f64[0]);
      v44 = vmlaq_n_f64(vmulq_n_f64(v38, v31), v39, *(double *)&v14);
      v37.f64[0] = vmlad_n_f64(vmuld_n_f64(v31, v37.f64[0]), *(double *)&v14, v40);
      v45 = vmlaq_n_f64((float64x2_t)vextq_s8(v70, (int8x16_t)*((unint64_t *)&v20 + 1), 8uLL), v36, v16.f64[0]);
      v46 = vaddq_f64(v13, vmlaq_f64((float64x2_t)v70, v35, v16));
      v47 = vaddq_f64(v42, vmlaq_n_f64(v21, v32, v16.f64[0]));
      v48 = vaddq_f64(v43, v45);
      *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vaddq_f64(v41, vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)*((unint64_t *)&v20 + 1), 1), v16, v34, 1));
      *(_QWORD *)&v37.f64[0] = *(_OWORD *)&vaddq_f64(v37, _Q23);
      v49 = vmlaq_n_f64(v44, v33, v16.f64[0]);
      v50 = v19[-2];
      v13 = v19[-1];
      v51 = v19[1];
      v52 = v19[2].f64[0];
      v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v50.f64[0]), v48, v50, 1), v49, v13.f64[0]);
      v54.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v46.f64[0], v50.f64[0]), v19[-2].f64[1], v41.f64[0]), v13.f64[0], v37.f64[0]);
      v55 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v47, v13, 1), v48, v19->f64[0]), v49, *v19, 1);
      v13.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v46.f64[0], v13, 1), v19->f64[0], v41.f64[0]), v19->f64[1], v37.f64[0]);
      v46.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v46.f64[0], v51.f64[0]), v19[1].f64[1], v41.f64[0]), v52, v37.f64[0]);
      *(_QWORD *)&v54.f64[1] = v55.i64[0];
      v19[-2] = v53;
      v19[-1] = v54;
      *(int8x16_t *)v19 = vextq_s8(v55, (int8x16_t)v13, 8uLL);
      v19[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v51.f64[0]), v48, v51, 1), v49, v52);
      v19[2].f64[0] = v46.f64[0];
      v46.f64[0] = v18->f64[0];
      v49.f64[0] = *(float64_t *)(v9 + v17 + 40);
      v12 = vaddq_f64(v18[-1], *(float64x2_t *)(v9 + v17 + 24));
      v18[-1] = v12;
      *(_QWORD *)&v18->f64[0] = *(_OWORD *)&vaddq_f64(v46, v49);
      v18 = (float64x2_t *)((char *)v18 + 24);
      v17 += 48;
      v19 = (float64x2_t *)((char *)v19 + 72);
    }
    while (48 * v8 != v17);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239682ED0(uint64_t *a1)
{
  sub_239682B74(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239682EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  __int128 v18;
  float64x2_t v19;
  float64x2_t *v20;
  float64x2_t *v21;
  __int128 v22;
  float64x2_t v23;
  long double v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  __int128 v68;
  float64x2_t v69;
  __int128 v70;
  double v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  int8x16_t v77;

  v9 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v10 = *v9;
  v11 = *(int **)(a2 + 16);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(float64x2_t **)(a4 + 16);
  v14 = *(float64x2_t **)(a5 + 16);
  v64 = a4;
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v10 >= 1)
  {
    v20 = v14 + 1;
    v21 = v13 + 2;
    v22 = xmmword_239EC6850;
    v23 = (float64x2_t)xmmword_239EC6840;
    __asm { FMOV            V23.2D, #1.0 }
    v65 = _Q23;
    do
    {
      v59 = *v11;
      if (v59 >> 30 != 3)
      {
        v60 = 3 * v59;
        v61 = v12 + 48 * v59;
        v33 = *(double *)(v61 + 8);
        v16.f64[0] = *(float64_t *)(v61 + 16);
        v32 = -v16.f64[0];
        *(_QWORD *)&v18 = *(_QWORD *)v61;
        v31 = -v33;
        v37.f64[0] = -v33;
        v37.f64[1] = -v16.f64[0];
        *(double *)&v17 = -*(double *)v61;
        v62 = v33 * v33 + *(double *)&v18 * *(double *)&v18 + v16.f64[0] * v16.f64[0];
        v34.f64[0] = 0.0;
        v34.f64[1] = v16.f64[0];
        v36.f64[0] = 0.0;
        v36.f64[1] = *(float64_t *)v61;
        v35.f64[0] = v33;
        v35.f64[1] = *(double *)&v17;
        if (v62 >= 0.000000263391344)
        {
          v29 = sqrt(v62);
          v75 = v35;
          v76 = v37;
          v73 = v34;
          v74 = v36;
          v71 = -v16.f64[0];
          v72 = *(double *)(v61 + 8);
          v69 = v16;
          v70 = v17;
          v67 = -v33;
          v68 = v18;
          v30.f64[0] = sin(v29) / v29;
          v66 = v30;
          v15.f64[0] = cos(v29);
          v19 = v66;
          v31 = v67;
          v18 = v68;
          v16 = v69;
          v17 = v70;
          v32 = v71;
          v33 = v72;
          v34 = v73;
          v36 = v74;
          v35 = v75;
          v37 = v76;
          _Q23 = v65;
          v23 = (float64x2_t)xmmword_239EC6840;
          v22 = xmmword_239EC6850;
          v15.f64[0] = (1.0 - v15.f64[0]) / v62;
        }
        else
        {
          v15.f64[0] = v62 * (v62 * 0.00138888889 + -0.0416666667) + 0.5;
          v19.f64[0] = v62 * (v62 * (v62 * -0.000198412698 + 0.00833333333) + -0.166666667) + 1.0;
        }
        v77.i64[0] = 0;
        v77.i64[1] = v22;
        v38 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v36, 8uLL);
        v39 = vmulq_f64(v37, v15);
        v40 = vmulq_n_f64(v34, v15.f64[0]);
        v41 = vmulq_n_f64(v38, v15.f64[0]);
        *(_QWORD *)&v42 = *(_OWORD *)&vmulq_laneq_f64(v15, v36, 1);
        v43 = vmulq_n_f64(v35, v15.f64[0]);
        v44 = vmlaq_n_f64(vmulq_n_f64(v41, v16.f64[0]), v43, v31);
        v16.f64[0] = vmuld_n_f64(v16.f64[0], v42);
        v45 = vmlaq_n_f64(vmulq_n_f64(v40, v32), v43, *(double *)&v18);
        v43.f64[0] = vmuld_n_f64(v32, v39.f64[0]);
        v46 = vmlaq_n_f64(vmulq_n_f64(v40, v33), v41, *(double *)&v17);
        v39.f64[0] = vmlad_n_f64(vmuld_n_f64(v33, v39.f64[0]), *(double *)&v17, v42);
        v47 = vmlaq_n_f64((float64x2_t)vextq_s8(v77, (int8x16_t)*((unint64_t *)&v22 + 1), 8uLL), v38, v19.f64[0]);
        v48 = vaddq_f64(v16, vmlaq_f64((float64x2_t)v77, v37, v19));
        v49 = vaddq_f64(v44, vmlaq_n_f64(v23, v34, v19.f64[0]));
        v50 = vaddq_f64(v45, v47);
        *(_QWORD *)&v43.f64[0] = *(_OWORD *)&vaddq_f64(v43, vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)*((unint64_t *)&v22 + 1), 1), v19, v36, 1));
        *(_QWORD *)&v39.f64[0] = *(_OWORD *)&vaddq_f64(v39, _Q23);
        v51 = vmlaq_n_f64(v46, v35, v19.f64[0]);
        v52 = v21[-2];
        v16 = v21[-1];
        v53 = v21[1];
        v54 = v21[2].f64[0];
        v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v52.f64[0]), v50, v52, 1), v51, v16.f64[0]);
        v56.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v48.f64[0], v52.f64[0]), v21[-2].f64[1], v43.f64[0]), v16.f64[0], v39.f64[0]);
        v57 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v49, v16, 1), v50, v21->f64[0]), v51, *v21, 1);
        v16.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v48.f64[0], v16, 1), v21->f64[0], v43.f64[0]), v21->f64[1], v39.f64[0]);
        v48.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v48.f64[0], v53.f64[0]), v21[1].f64[1], v43.f64[0]), v54, v39.f64[0]);
        *(_QWORD *)&v56.f64[1] = v57.i64[0];
        v21[-2] = v55;
        v21[-1] = v56;
        *(int8x16_t *)v21 = vextq_s8(v57, (int8x16_t)v16, 8uLL);
        v21[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v53.f64[0]), v50, v53, 1), v51, v54);
        v21[2].f64[0] = v48.f64[0];
        v48.f64[0] = v20->f64[0];
        v58 = v12 + 16 * v60;
        v51.f64[0] = *(float64_t *)(v58 + 40);
        v15 = vaddq_f64(v20[-1], *(float64x2_t *)(v58 + 24));
        v20[-1] = v15;
        *(_QWORD *)&v20->f64[0] = *(_OWORD *)&vaddq_f64(v48, v51);
      }
      v20 = (float64x2_t *)((char *)v20 + 24);
      v21 = (float64x2_t *)((char *)v21 + 72);
      ++v11;
      --v10;
    }
    while (v10);
  }
  *(_QWORD *)(a5 + 24) |= 1uLL;
  *(_QWORD *)(v64 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239683284(uint64_t *a1)
{
  sub_239682EF0(*a1, a1[1], a1[2], a1[3], a1[4]);
  return 0;
}

uint64_t sub_2396832A8(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396832C8(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396832E8(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239683308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  float64x2_t *v11;
  uint64_t v13;

  v7 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v8 = *v7;
  v9 = *(int **)(a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(float64x2_t **)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v8 >= 1)
  {
    do
    {
      v13 = *v9;
      if (v13 >> 30 != 3)
        *v11 = vaddq_f64(*v11, *(float64x2_t *)(v10 + 16 * v13));
      ++v11;
      ++v9;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396833D0(uint64_t *a1)
{
  sub_239683308(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_2396833F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t *v14;
  double *v15;
  __int128 v16;
  float64x2_t v17;
  long double v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  int8x16_t v50;
  double v51;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  __int128 v56;
  float64x2_t v57;
  __int128 v58;
  double v59;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  int8x16_t v65;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(float64x2_t **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v14 = v8 + 2;
    v15 = (double *)(v7 + 16);
    v16 = xmmword_239EC6850;
    v17 = (float64x2_t)xmmword_239EC6840;
    __asm { FMOV            V23.2D, #1.0 }
    v53 = _Q23;
    do
    {
      v27 = *(v15 - 1);
      v10.f64[0] = *v15;
      v26 = -*v15;
      *(double *)&v12 = *(v15 - 2);
      v25 = -v27;
      v31.f64[0] = -v27;
      v31.f64[1] = v26;
      *(double *)&v11 = -*(double *)&v12;
      v51 = v27 * v27 + *(double *)&v12 * *(double *)&v12 + v10.f64[0] * v10.f64[0];
      v28.f64[0] = 0.0;
      v28.f64[1] = *v15;
      v30.f64[0] = 0.0;
      *(_QWORD *)&v30.f64[1] = v12;
      v29.f64[0] = v27;
      v29.f64[1] = -*(double *)&v12;
      if (v51 >= 0.000000263391344)
      {
        v23 = sqrt(v51);
        v63 = v29;
        v64 = v31;
        v61 = v28;
        v62 = v30;
        v59 = -*v15;
        v60 = *(v15 - 1);
        v57 = v10;
        v58 = v11;
        v55 = -v27;
        v56 = v12;
        v24.f64[0] = sin(v23) / v23;
        v54 = v24;
        v9.f64[0] = cos(v23);
        v13 = v54;
        v25 = v55;
        v12 = v56;
        v10 = v57;
        v11 = v58;
        v26 = v59;
        v27 = v60;
        v28 = v61;
        v30 = v62;
        v29 = v63;
        v31 = v64;
        _Q23 = v53;
        v17 = (float64x2_t)xmmword_239EC6840;
        v16 = xmmword_239EC6850;
        v9.f64[0] = (1.0 - v9.f64[0]) / v51;
      }
      else
      {
        v9.f64[0] = v51 * (v51 * 0.00138888889 + -0.0416666667) + 0.5;
        v13.f64[0] = v51 * (v51 * (v51 * -0.000198412698 + 0.00833333333) + -0.166666667) + 1.0;
      }
      v65.i64[0] = 0;
      v65.i64[1] = v16;
      v32 = (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v30, 8uLL);
      v33 = vmulq_f64(v31, v9);
      v34 = vmulq_n_f64(v28, v9.f64[0]);
      v35 = vmulq_n_f64(v32, v9.f64[0]);
      *(_QWORD *)&v36 = *(_OWORD *)&vmulq_laneq_f64(v9, v30, 1);
      v37 = vmulq_n_f64(v29, v9.f64[0]);
      v38 = vmlaq_n_f64(vmulq_n_f64(v35, v10.f64[0]), v37, v25);
      v10.f64[0] = vmuld_n_f64(v10.f64[0], v36);
      v39 = vmlaq_n_f64(vmulq_n_f64(v34, v26), v37, *(double *)&v12);
      v37.f64[0] = vmuld_n_f64(v26, v33.f64[0]);
      v40 = vmlaq_n_f64(vmulq_n_f64(v34, v27), v35, *(double *)&v11);
      v33.f64[0] = vmlad_n_f64(vmuld_n_f64(v27, v33.f64[0]), *(double *)&v11, v36);
      v41 = vmlaq_n_f64((float64x2_t)vextq_s8(v65, (int8x16_t)*((unint64_t *)&v16 + 1), 8uLL), v32, v13.f64[0]);
      *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vaddq_f64(v10, vmlaq_f64((float64x2_t)v65, v31, v13));
      v42 = vaddq_f64(v38, vmlaq_n_f64(v17, v28, v13.f64[0]));
      v43 = vaddq_f64(v39, v41);
      *(_QWORD *)&v37.f64[0] = *(_OWORD *)&vaddq_f64(v37, vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)*((unint64_t *)&v16 + 1), 1), v13, v30, 1));
      *(_QWORD *)&v33.f64[0] = *(_OWORD *)&vaddq_f64(v33, _Q23);
      v44 = vmlaq_n_f64(v40, v29, v13.f64[0]);
      v45 = v14[-2];
      v10 = v14[-1];
      v46 = v14[1];
      v47 = v14[2].f64[0];
      v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v45.f64[0]), v43, v45, 1), v44, v10.f64[0]);
      v49.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v32.f64[0], v45.f64[0]), v14[-2].f64[1], v37.f64[0]), v10.f64[0], v33.f64[0]);
      v50 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v42, v10, 1), v43, v14->f64[0]), v44, *v14, 1);
      v10.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v32.f64[0], v10, 1), v14->f64[0], v37.f64[0]), v14->f64[1], v33.f64[0]);
      v32.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v32.f64[0], v46.f64[0]), v14[1].f64[1], v37.f64[0]), v47, v33.f64[0]);
      *(_QWORD *)&v49.f64[1] = v50.i64[0];
      v14[-2] = v48;
      v14[-1] = v49;
      v9 = (float64x2_t)vextq_s8(v50, (int8x16_t)v10, 8uLL);
      *v14 = v9;
      v14[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, v46.f64[0]), v43, v46, 1), v44, v47);
      v14[2].f64[0] = v32.f64[0];
      v14 = (float64x2_t *)((char *)v14 + 72);
      v15 += 3;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396836EC(uint64_t *a1)
{
  sub_2396833F0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968370C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  float64x2_t *v17;
  __int128 v18;
  float64x2_t v19;
  long double v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  __int128 v60;
  float64x2_t v61;
  __int128 v62;
  double v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  int8x16_t v69;

  v7 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v8 = *v7;
  v9 = *(int **)(a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(float64x2_t **)(a4 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v8 >= 1)
  {
    v17 = v11 + 2;
    v18 = xmmword_239EC6850;
    v19 = (float64x2_t)xmmword_239EC6840;
    __asm { FMOV            V23.2D, #1.0 }
    v57 = _Q23;
    do
    {
      v53 = *v9;
      if (v53 >> 30 != 3)
      {
        v54 = v10 + 24 * v53;
        v29 = *(double *)(v54 + 8);
        v13.f64[0] = *(float64_t *)(v54 + 16);
        v28 = -v13.f64[0];
        *(_QWORD *)&v15 = *(_QWORD *)v54;
        v27 = -v29;
        v33.f64[0] = -v29;
        v33.f64[1] = -v13.f64[0];
        *(double *)&v14 = -*(double *)v54;
        v55 = v29 * v29 + *(double *)&v15 * *(double *)&v15 + v13.f64[0] * v13.f64[0];
        v30.f64[0] = 0.0;
        v30.f64[1] = v13.f64[0];
        v32.f64[0] = 0.0;
        v32.f64[1] = *(float64_t *)v54;
        v31.f64[0] = v29;
        v31.f64[1] = *(double *)&v14;
        if (v55 >= 0.000000263391344)
        {
          v25 = sqrt(v55);
          v67 = v31;
          v68 = v33;
          v65 = v30;
          v66 = v32;
          v63 = -v13.f64[0];
          v64 = *(double *)(v54 + 8);
          v61 = v13;
          v62 = v14;
          v59 = -v29;
          v60 = v15;
          v26.f64[0] = sin(v25) / v25;
          v58 = v26;
          v12.f64[0] = cos(v25);
          v16 = v58;
          v27 = v59;
          v15 = v60;
          v13 = v61;
          v14 = v62;
          v28 = v63;
          v29 = v64;
          v30 = v65;
          v32 = v66;
          v31 = v67;
          v33 = v68;
          _Q23 = v57;
          v19 = (float64x2_t)xmmword_239EC6840;
          v18 = xmmword_239EC6850;
          v12.f64[0] = (1.0 - v12.f64[0]) / v55;
        }
        else
        {
          v12.f64[0] = v55 * (v55 * 0.00138888889 + -0.0416666667) + 0.5;
          v16.f64[0] = v55 * (v55 * (v55 * -0.000198412698 + 0.00833333333) + -0.166666667) + 1.0;
        }
        v69.i64[0] = 0;
        v69.i64[1] = v18;
        v34 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v32, 8uLL);
        v35 = vmulq_f64(v33, v12);
        v36 = vmulq_n_f64(v30, v12.f64[0]);
        v37 = vmulq_n_f64(v34, v12.f64[0]);
        *(_QWORD *)&v38 = *(_OWORD *)&vmulq_laneq_f64(v12, v32, 1);
        v39 = vmulq_n_f64(v31, v12.f64[0]);
        v40 = vmlaq_n_f64(vmulq_n_f64(v37, v13.f64[0]), v39, v27);
        v13.f64[0] = vmuld_n_f64(v13.f64[0], v38);
        v41 = vmlaq_n_f64(vmulq_n_f64(v36, v28), v39, *(double *)&v15);
        v39.f64[0] = vmuld_n_f64(v28, v35.f64[0]);
        v42 = vmlaq_n_f64(vmulq_n_f64(v36, v29), v37, *(double *)&v14);
        v35.f64[0] = vmlad_n_f64(vmuld_n_f64(v29, v35.f64[0]), *(double *)&v14, v38);
        v43 = vmlaq_n_f64((float64x2_t)vextq_s8(v69, (int8x16_t)*((unint64_t *)&v18 + 1), 8uLL), v34, v16.f64[0]);
        *(_QWORD *)&v34.f64[0] = *(_OWORD *)&vaddq_f64(v13, vmlaq_f64((float64x2_t)v69, v33, v16));
        v44 = vaddq_f64(v40, vmlaq_n_f64(v19, v30, v16.f64[0]));
        v45 = vaddq_f64(v41, v43);
        *(_QWORD *)&v39.f64[0] = *(_OWORD *)&vaddq_f64(v39, vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)*((unint64_t *)&v18 + 1), 1), v16, v32, 1));
        *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vaddq_f64(v35, _Q23);
        v46 = vmlaq_n_f64(v42, v31, v16.f64[0]);
        v47 = v17[-2];
        v13 = v17[-1];
        v48 = v17[1];
        v49 = v17[2].f64[0];
        v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v47.f64[0]), v45, v47, 1), v46, v13.f64[0]);
        v51.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v34.f64[0], v47.f64[0]), v17[-2].f64[1], v39.f64[0]), v13.f64[0], v35.f64[0]);
        v52 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v44, v13, 1), v45, v17->f64[0]), v46, *v17, 1);
        v13.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v34.f64[0], v13, 1), v17->f64[0], v39.f64[0]), v17->f64[1], v35.f64[0]);
        v34.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v34.f64[0], v48.f64[0]), v17[1].f64[1], v39.f64[0]), v49, v35.f64[0]);
        *(_QWORD *)&v51.f64[1] = v52.i64[0];
        v17[-2] = v50;
        v17[-1] = v51;
        v12 = (float64x2_t)vextq_s8(v52, (int8x16_t)v13, 8uLL);
        *v17 = v12;
        v17[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v48.f64[0]), v45, v48, 1), v46, v49);
        v17[2].f64[0] = v34.f64[0];
      }
      v17 = (float64x2_t *)((char *)v17 + 72);
      ++v9;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239683A40(uint64_t *a1)
{
  sub_23968370C(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239683A60(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239683A80(uint64_t *a1)
{
  sub_239682720(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_239683AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v14;
  uint64_t v15;
  double *v16;
  int extent;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double *v30;
  uint64_t v32;
  double v33;

  v14 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v15 = *v14;
  v16 = *(double **)(a3 + 16);
  extent = _gc_buffer_get_extent();
  v18 = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  if (extent != 2 || v18 != v19)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v20 = *(int **)(a6 + 16);
  v21 = _gc_buffer_get_extent();
  v22 = _gc_buffer_get_extent();
  v23 = _gc_buffer_get_extent();
  v24 = _gc_buffer_get_extent();
  if (v21 != 1 || v22 != 1 || v23 != v24)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a10 + 24) |= 1uLL;
  }
  v25 = *(_QWORD *)(a10 + 16);
  v26 = _gc_buffer_get_extent();
  v27 = _gc_buffer_get_extent();
  v28 = _gc_buffer_get_extent();
  v29 = _gc_buffer_get_extent();
  if (v26 != 1 || v27 != 1 || v28 != v29)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v30 = *(double **)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v15 >= 1)
  {
    do
    {
      v32 = *v20;
      if ((_DWORD)v32 != -1)
      {
        v33 = -*v16;
        *(double *)(v25 + 8 * v32) = v33;
        *v30 = v33;
      }
      ++v30;
      ++v20;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  *(_QWORD *)(a10 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239683D48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_239683AA0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_239683D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v14;
  uint64_t v15;
  double *v16;
  int extent;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int64x2_t *v30;
  float64x2_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t *v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  uint64_t v41;
  _BYTE v43[32];

  v14 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v15 = *v14;
  v16 = *(double **)(a3 + 16);
  extent = _gc_buffer_get_extent();
  v18 = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  if (extent != 2 || v18 != v19)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v20 = *(int **)(a6 + 16);
  v21 = _gc_buffer_get_extent();
  v22 = _gc_buffer_get_extent();
  v23 = _gc_buffer_get_extent();
  v24 = _gc_buffer_get_extent();
  if (v21 != 3 || v22 != 3 || v23 != v24)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a10 + 24) |= 1uLL;
  }
  v25 = *(_QWORD *)(a10 + 16);
  v26 = _gc_buffer_get_extent();
  v27 = _gc_buffer_get_extent();
  v28 = _gc_buffer_get_extent();
  v29 = _gc_buffer_get_extent();
  if (v26 != 3 || v27 != 3 || v28 != v29)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v30 = *(int64x2_t **)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v15 >= 1)
  {
    v32 = v30 + 2;
    do
    {
      *(_QWORD *)v43 = 0;
      *(_OWORD *)&v43[8] = xmmword_239EC6850;
      *(_QWORD *)&v43[24] = 0;
      v33 = *v20;
      if ((_DWORD)v33 != -1)
      {
        v31.f64[0] = *v16;
        v34 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v16);
        v35 = (int64x2_t)vmulq_n_f64(vnegq_f64((float64x2_t)vextq_s8(*(int8x16_t *)v43, *(int8x16_t *)&v43[16], 8uLL)), *v16);
        v36 = vzip1q_s64(v34, v35);
        v37 = (int64x2_t *)(v25 + 72 * v33);
        v38.i64[0] = 0;
        v38.i64[1] = v34.i64[1];
        *v37 = v36;
        v37[1] = v38;
        v39 = vzip2q_s64(v35, (int64x2_t)0);
        v40 = vzip1q_s64((int64x2_t)vmulq_f64(v31, vnegq_f64(*(float64x2_t *)v43)), (int64x2_t)vmulq_f64(v31, vnegq_f64((float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v43[16], 1))));
        v37[2] = v39;
        v37[3] = v40;
        v41 = *(_OWORD *)&vnegq_f64(v31);
        v37[4].i64[0] = v41;
        v32[-2] = v36;
        v32[-1] = v38;
        *v32 = v39;
        v32[1] = v40;
        v32[2].i64[0] = v41;
      }
      v32 = (int64x2_t *)((char *)v32 + 72);
      ++v20;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  *(_QWORD *)(a10 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396840C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_239683D7C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396840FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  float64x2_t v32;
  unsigned int *v36;
  uint64_t v37;
  int extent;
  int v39;
  int v40;
  int *v41;
  int *v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  _OWORD *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  unsigned int *v80;
  int64x2_t *v81;
  _OWORD *v82;
  _OWORD *v83;
  uint64_t v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  float64x2_t *v96;
  double v97;
  float64x2_t v98;
  float64x2_t v104;
  float64x2_t *v105;
  float64x2_t v106;
  uint64_t v107;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  BOOL v113;
  unsigned int v114;
  unsigned int v115;
  double v116;
  double *v117;
  float64x2_t v118;
  double v119;
  double v120;
  int64x2_t v121;
  int64x2_t v122;
  float64x2_t v126;
  float64_t v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  float64x2_t v131;
  int v132;
  float64x2_t v133;
  int64x2_t v134;
  double v135;
  float64x2_t v136;
  float64x2_t v137;
  double v139;
  float64x2_t v140;
  float64x2_t v145;
  float64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  int8x16_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  __int128 v156;
  __int128 v157;
  _OWORD *v158;
  __int128 *v159;
  __int128 v160;
  float64x2_t v161;
  uint64_t v162;
  unint64_t v163;
  float64x2_t v164;
  int64x2_t v166;
  int64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  int64x2_t v171;
  int64x2_t v174;
  int64x2_t v177;
  uint64_t v178;
  __int128 *v179;
  __int128 *v180;
  __int128 *v181;
  __int128 *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  double *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int8x16_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  int8x16_t v211;
  uint64_t v212;
  float64x2_t v213;
  uint64_t v214;
  uint64_t v215;
  float64x2_t v216;
  uint64_t v217;
  uint64_t v218;
  int8x16_t v219;
  uint64_t v220;

  v36 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v37 = *v36;
  v195 = *(_QWORD *)(a2 + 16);
  v202 = *(double **)(a3 + 16);
  extent = _gc_buffer_get_extent();
  v39 = _gc_buffer_get_extent();
  v40 = _gc_buffer_get_extent();
  if (extent != 2 || v39 != v40)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v41 = *(int **)(a6 + 16);
  v42 = *(int **)(a9 + 16);
  v43 = *(int **)(a12 + 16);
  v44 = *(int **)(a15 + 16);
  v200 = *(_QWORD *)(a18 + 16);
  v201 = *(_QWORD *)(a17 + 16);
  v198 = *(_QWORD *)(a22 + 16);
  v199 = *(_QWORD *)(a20 + 16);
  v197 = *(_QWORD *)(a23 + 16);
  v45 = _gc_buffer_get_extent();
  v46 = _gc_buffer_get_extent();
  v47 = _gc_buffer_get_extent();
  v48 = _gc_buffer_get_extent();
  if (v45 != 2 || v46 != 1 || v47 != v48)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a24 + 24) |= 1uLL;
  }
  v206 = *(_QWORD *)(a24 + 16);
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  if (v49 != 2 || v50 != 3 || v51 != v52)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a25 + 24) |= 1uLL;
  }
  v205 = *(_QWORD *)(a25 + 16);
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  if (v53 != 2 || v54 != 6 || v55 != v56)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a26 + 24) |= 1uLL;
  }
  v204 = *(_QWORD *)(a26 + 16);
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  v59 = _gc_buffer_get_extent();
  v60 = _gc_buffer_get_extent();
  if (v57 != 2 || v58 != 2 || v59 != v60)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a27 + 24) |= 1uLL;
  }
  v203 = *(_QWORD *)(a27 + 16);
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  v63 = _gc_buffer_get_extent();
  v64 = _gc_buffer_get_extent();
  v65 = v199;
  if (v61 != 2 || v62 != 1 || v63 != v64)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v66 = *(_OWORD **)(a28 + 16);
  v67 = _gc_buffer_get_extent();
  v193 = _gc_buffer_get_extent();
  v68 = _gc_buffer_get_extent();
  v69 = _gc_buffer_get_extent();
  if (v67 != 2 || v193 != 3 || v68 != v69)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v194 = *(_QWORD *)(a29 + 16);
  v70 = _gc_buffer_get_extent();
  v191 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  v72 = _gc_buffer_get_extent();
  if (v70 != 2 || v191 != 6 || v71 != v72)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v192 = *(_QWORD *)(a30 + 16);
  v73 = _gc_buffer_get_extent();
  v190 = _gc_buffer_get_extent();
  v74 = _gc_buffer_get_extent();
  v75 = _gc_buffer_get_extent();
  if (v73 != 2 || v190 != 2 || v74 != v75)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v76 = *(int64x2_t **)(a31 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v37 >= 1)
  {
    v80 = (unsigned int *)(v195 + 12);
    v81 = v76 + 1;
    v82 = (_OWORD *)(v194 + 16);
    v83 = (_OWORD *)(v192 + 48);
    v84 = v201;
    v85 = v202;
    v86 = v200;
    v88 = v197;
    v87 = v198;
    do
    {
      v92 = *v80;
      v91 = v80[1];
      if (v91 >> 30 == 3)
        v91 += 0x40000000;
      v93 = v87 + 72 * (int)v91;
      _Q5 = *(float64x2_t *)(v93 + 16);
      _Q7 = *(int8x16_t *)(v93 + 32);
      if (v92 >> 30 == 3)
        v92 += 0x40000000;
      v96 = (float64x2_t *)(v65 + 24 * (int)v92);
      v104 = *v96;
      v97 = v96[1].f64[0];
      v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v93, v96->f64[0]), (float64x2_t)vextq_s8((int8x16_t)_Q5, _Q7, 8uLL), *v96, 1), *(float64x2_t *)(v93 + 48), v97);
      _Q5.f64[0] = v96->f64[1];
      __asm { FMLA            D4, D5, V7.D[1] }
      v104.f64[0] = _D4 + *(double *)(v93 + 64) * v97;
      v105 = (float64x2_t *)(v88 + 24 * (int)v91);
      _Q5.f64[0] = v105[1].f64[0];
      v106 = vaddq_f64(v98, *v105);
      v107 = *(_OWORD *)&vaddq_f64(v104, _Q5);
      _Q18 = vdivq_f64(v106, (float64x2_t)vdupq_lane_s64(v107, 0));
      v109 = vmuld_n_f64(*(double *)&v107, *(double *)&v107);
      v110 = vmulq_f64(_Q18, _Q18);
      v111 = vaddq_f64(v110, (float64x2_t)vdupq_laneq_s64((int64x2_t)v110, 1));
      v112 = vaddvq_f64(v110);
      v113 = fabs(*(double *)&v107) > 2.22044605e-16;
      v114 = *(v80 - 3);
      v115 = *(v80 - 2);
      if (v115 >> 30 == 3)
        v115 += 0x40000000;
      v116 = *v85;
      if (v114 >> 30 == 3)
        v114 += 0x40000000;
      v77.f64[0] = *(float64_t *)(v84 + 8 * (int)v114);
      v117 = (double *)(v86 + 24 * (int)v115);
      v79.f64[0] = v117[1];
      v78.f64[0] = v117[2];
      v118 = vmulq_f64(v111, v111);
      v119 = v112 * vmlad_n_f64(*v117 + v112 * v79.f64[0], v78.f64[0], v118.f64[0]) + 1.0;
      v120 = v116 * (v77.f64[0] * v119);
      v121 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, v116);
      v122 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, v116);
      _D26 = v121.i64[1];
      __asm { FMLA            D25, D26, V18.D[1] }
      *(_QWORD *)&_Q8.f64[0] = v122.i64[1];
      __asm { FMLA            D26, D8, V18.D[1] }
      _Q8.f64[0] = v112 * v78.f64[0];
      v32.f64[0] = v112 * (v112 * v78.f64[0]);
      v126 = vmlaq_n_f64(v32, _Q8, v111.f64[0]);
      v118.f64[0] = vmuld_n_f64(v77.f64[0], v118.f64[0]);
      v127 = v118.f64[0] * _D25;
      *(double *)&v128 = v118.f64[0] * _D26;
      *(double *)&v129 = v112 * (v118.f64[0] * _D25);
      v130 = v112 * (v118.f64[0] * _D26);
      v78.f64[0] = v78.f64[0] * v118.f64[0];
      v118.f64[0] = v77.f64[0] * (v112 * v79.f64[0]);
      v131 = vmlaq_f64(vaddq_f64(v118, vmlaq_f64(v78, v77, v126)), vmulq_f64(v111, v77), v79);
      v118.f64[0] = v77.f64[0] * *v117;
      *(_QWORD *)&v131.f64[0] = *(_OWORD *)&vaddq_f64(v118, v131);
      v207.i64[0] = 0;
      *(double *)&v207.i64[1] = v130;
      v208.f64[0] = 0.0;
      v209.f64[1] = 0.0;
      v208.f64[1] = v127;
      v132 = v113 && v109 > 2.22044605e-16;
      v32 = (float64x2_t)vdupq_lane_s64(v128, 0);
      v32.f64[0] = 0.0;
      v133 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v129, v207, 8uLL), v32);
      v134 = (int64x2_t)vaddq_f64((float64x2_t)v207, (float64x2_t)v128);
      v210.f64[0] = 0.0;
      v209.f64[0] = v112 * (v77.f64[0] * _D25);
      v210.f64[1] = v112 * (v77.f64[0] * _D26);
      v135 = vmuld_n_f64(_D25, v131.f64[0]);
      v32.f64[0] = vmuld_n_f64(_D26, v131.f64[0]);
      v78 = vaddq_f64((float64x2_t)v129, v210);
      v79 = vaddq_f64(v133, (float64x2_t)vdupq_laneq_s64((int64x2_t)v210, 1).u64[0]);
      v136 = vaddq_f64(_Q18, _Q18);
      v137 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6820, v120), v136, v135);
      _Q22 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6830, v120), v136, v32.f64[0]);
      v139 = 1.0 / *(double *)&v107;
      v140 = vmulq_n_f64(_Q22, 1.0 / *(double *)&v107);
      _Q16 = vdivq_f64(vnegq_f64(v106), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v109, 0));
      _D21 = v137.f64[1];
      __asm { FMLA            D20, D21, V16.D[1] }
      _Q22.f64[0] = _Q22.f64[1];
      __asm { FMLA            D21, D22, V16.D[1] }
      v211.i64[0] = 0;
      v211.i64[1] = _D21;
      v214 = 0;
      v212 = 0;
      v213 = v140;
      _Q8 = (float64x2_t)vextq_s8(*(int8x16_t *)&v212, *(int8x16_t *)(&v214 - 1), 8uLL);
      v77 = vaddq_f64((float64x2_t)_D20, *(float64x2_t *)&v212);
      v145 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)_D20, v211, 8uLL), _Q8);
      v146 = vaddq_f64((float64x2_t)v211, *(float64x2_t *)(&v214 - 1));
      v147 = vzip1q_s64((int64x2_t)v77, (int64x2_t)v145);
      v148 = vzip2q_s64((int64x2_t)v145, (int64x2_t)v146);
      v149 = *v41;
      if ((_DWORD)v149 != -1)
      {
        if ((v132 & 1) != 0)
        {
          *(double *)&v150 = _D25 * v119;
          *((double *)&v150 + 1) = _D26 * v119;
          v151 = v206 + 16 * v149;
          *(_OWORD *)v151 = v150;
        }
        else
        {
          v151 = v206 + 16 * v149;
          *(_QWORD *)v151 = 0;
          *(_QWORD *)(v151 + 8) = 0;
        }
        *v66 = *(_OWORD *)v151;
      }
      v152 = (int8x16_t)vaddq_f64(v208, v209);
      v153 = vextq_s8(v152, v152, 8uLL).u64[0];
      v154 = *v42;
      if ((_DWORD)v154 != -1)
      {
        if ((v132 & 1) != 0)
        {
          v155 = vdupq_laneq_s64(v134, 1).u64[0];
          *(_QWORD *)&v156 = v152.i64[0];
          *((_QWORD *)&v156 + 1) = *(_QWORD *)&v79.f64[0];
          *(_QWORD *)&v157 = v153;
          *((_QWORD *)&v157 + 1) = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
          *(_QWORD *)&v78.f64[1] = v155;
          v158 = (_OWORD *)(v205 + 48 * v154);
          *v158 = v156;
          v158[1] = v157;
          v159 = v158 + 1;
          v158[2] = v78;
        }
        else
        {
          v158 = (_OWORD *)(v205 + 48 * v154);
          *v158 = 0uLL;
          v158[1] = 0uLL;
          v159 = v158 + 1;
          v158[2] = 0uLL;
        }
        v160 = *v159;
        v78 = *((float64x2_t *)v158 + 2);
        *(v82 - 1) = *v158;
        *v82 = v160;
        v82[1] = v78;
      }
      v161 = vmulq_n_f64(v137, v139);
      v162 = *v43;
      if ((_DWORD)v162 != -1)
      {
        if (v132)
        {
          v163 = vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v104, 8uLL)), 1).u64[0];
          v164.f64[0] = 0.0;
          v164.f64[1] = v104.f64[0];
          *(_QWORD *)&_Q17.f64[0] = vdupq_laneq_s64((int64x2_t)v98, 1).u64[0];
          _Q17.f64[1] = -v98.f64[0];
          v166 = (int64x2_t)vnegq_f64(v164);
          v167 = (int64x2_t)vnegq_f64((float64x2_t)v163);
          v78 = vnegq_f64(_Q17);
          v168 = (float64x2_t)vzip1q_s64(v166, v167);
          v169 = (float64x2_t)vzip2q_s64(v166, v167);
          v170 = (float64x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)vnegq_f64(v98), 8uLL);
          v171 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v161.f64[0]), v169, v161, 1), v170, v77.f64[0]);
          _Q23 = (int64x2_t)vmulq_f64(v161, v78);
          _D26 = v161.f64[1];
          __asm { FMLS            D23, D26, V17.D[1] }
          v174 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v145.f64[0]), v169, v145, 1), v170, v146, 1);
          _Q6 = (int8x16_t)vmulq_f64(v145, v78);
          _D21 = v145.f64[1];
          __asm { FMLS            D6, D21, V17.D[1] }
          v177 = vzip1q_s64(_Q23, v174);
          v218 = v177.i64[1];
          v219 = vextq_s8((int8x16_t)v174, _Q6, 8uLL);
          v215 = v177.i64[0];
          v216 = v161;
          v88 = v197;
          v217 = v147.i64[0];
          v84 = v201;
          v85 = v202;
          v87 = v198;
          v65 = v199;
          v220 = v147.i64[1];
          v86 = v200;
          v77 = (float64x2_t)vzip1q_s64(v171, *(int64x2_t *)&v218);
          v178 = v204 + 96 * v162;
          *(float64x2_t *)v178 = v77;
          *(int64x2_t *)(v178 + 16) = vzip2q_s64(v171, *(int64x2_t *)&v218);
          v179 = (__int128 *)(v178 + 16);
          *(int64x2_t *)(v178 + 32) = vzip1q_s64(*(int64x2_t *)&v215, *(int64x2_t *)((char *)&v219 + 8));
          v180 = (__int128 *)(v178 + 32);
          *(int64x2_t *)(v178 + 48) = vzip2q_s64(*(int64x2_t *)&v215, *(int64x2_t *)((char *)&v219 + 8));
          v181 = (__int128 *)(v178 + 48);
          *(int64x2_t *)(v178 + 64) = vzip1q_s64(*(int64x2_t *)((char *)&v216 + 8), v148);
          v182 = (__int128 *)(v178 + 64);
          *(int64x2_t *)(v178 + 80) = vzip2q_s64(*(int64x2_t *)((char *)&v216 + 8), v148);
        }
        else
        {
          v178 = v204 + 96 * v162;
          *(_OWORD *)v178 = 0uLL;
          *(_OWORD *)(v178 + 16) = 0uLL;
          v179 = (__int128 *)(v178 + 16);
          *(_OWORD *)(v178 + 32) = 0uLL;
          v180 = (__int128 *)(v178 + 32);
          *(_OWORD *)(v178 + 48) = 0uLL;
          v181 = (__int128 *)(v178 + 48);
          *(_OWORD *)(v178 + 64) = 0uLL;
          v182 = (__int128 *)(v178 + 64);
          *(_OWORD *)(v178 + 80) = 0uLL;
        }
        v183 = *v179;
        v184 = *v180;
        v185 = *v181;
        v186 = *v182;
        v187 = *(_OWORD *)(v178 + 80);
        *(v83 - 3) = *(_OWORD *)v178;
        *(v83 - 2) = v183;
        *(v83 - 1) = v184;
        *v83 = v185;
        v83[1] = v186;
        v83[2] = v187;
      }
      v188 = *v44;
      if ((_DWORD)v188 != -1)
      {
        if ((v132 & 1) != 0)
        {
          v89 = (int64x2_t *)(v203 + 32 * v188);
          *v89 = vzip1q_s64(v121, v122);
          v89[1] = vzip2q_s64(v121, v122);
        }
        else
        {
          v89 = (int64x2_t *)(v203 + 32 * v188);
          *v89 = 0uLL;
          v89[1] = 0uLL;
        }
        v90 = v89[1];
        v81[-1] = *v89;
        *v81 = v90;
      }
      v80 += 6;
      v81 += 2;
      v82 += 3;
      ++v41;
      ++v42;
      ++v66;
      ++v43;
      v83 += 6;
      ++v44;
      --v37;
    }
    while (v37);
  }
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  *(_QWORD *)(a27 + 24) |= 1uLL;
  *(_QWORD *)(a26 + 24) |= 1uLL;
  *(_QWORD *)(a25 + 24) |= 1uLL;
  *(_QWORD *)(a24 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239684F70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_2396840FC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a1[7], a1[8], v8, a1[10], a1[11], v9, a1[13], a1[14], v10, a1[16], a1[17], v11,
    a1[19],
    v12,
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30]);
  return 0;
}

uint64_t sub_239684FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  float64x2_t v36;
  float64x2_t v37;
  unsigned int *v42;
  uint64_t v43;
  int extent;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  uint64_t v95;
  unsigned int *v96;
  int64x2_t *v97;
  _OWORD *v98;
  _OWORD *v99;
  int64x2_t *v100;
  uint64_t v101;
  int64x2_t *v102;
  int64x2_t v103;
  unsigned int v104;
  unsigned int v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  double v111;
  uint64_t v112;
  float64x2_t v113;
  float64x2_t *v120;
  uint64_t v121;
  float64x2_t v122;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  BOOL v128;
  unsigned int v129;
  unsigned int v130;
  double v131;
  double *v132;
  float64x2_t v133;
  double v134;
  double v135;
  float64x2_t v140;
  unint64_t v141;
  unint64_t v142;
  double v143;
  float64x2_t v144;
  double v145;
  int v146;
  double v147;
  double v148;
  int8x16_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double v153;
  float64x2_t v154;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  int8x16_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  __int128 v170;
  __int128 v171;
  _OWORD *v172;
  __int128 *v173;
  __int128 v174;
  float64x2_t v175;
  unint64_t v176;
  uint64_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t *v180;
  __int128 *v181;
  __int128 v182;
  float64x2_t v183;
  uint64_t v184;
  unint64_t v185;
  float64x2_t v186;
  int64x2_t v188;
  int64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v193;
  int64x2_t v194;
  int64x2_t v197;
  int64x2_t v199;
  int64x2_t *v200;
  int64x2_t *v201;
  int64x2_t *v202;
  int64x2_t *v203;
  int64x2_t *v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  uint64_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  int8x16_t v239;
  uint64_t v240;
  float64x2_t v241;
  uint64_t v242;
  uint64_t v243;
  float64x2_t v244;
  uint64_t v245;
  uint64_t v246;
  int8x16_t v247;
  uint64_t v248;

  v42 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v43 = *v42;
  v217 = *(_QWORD *)(a2 + 16);
  v218 = *(double **)(a3 + 16);
  LODWORD(a3) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v45 = _gc_buffer_get_extent();
  if ((_DWORD)a3 != 2 || extent != v45)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v224 = *(_QWORD *)(a6 + 16);
  v46 = *(_QWORD *)(a9 + 16);
  v221 = *(_QWORD *)(a15 + 16);
  v222 = *(_QWORD *)(a12 + 16);
  v219 = *(_QWORD *)(a20 + 16);
  v220 = *(_QWORD *)(a18 + 16);
  v233 = *(_QWORD *)(a23 + 16);
  v234 = *(_QWORD *)(a21 + 16);
  v231 = *(_QWORD *)(a26 + 16);
  v232 = *(_QWORD *)(a25 + 16);
  v47 = _gc_buffer_get_extent();
  v48 = _gc_buffer_get_extent();
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  if (v47 != 2 || v48 != 1 || v49 != v50)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a27 + 24) |= 1uLL;
  }
  v223 = v46;
  v229 = *(_QWORD *)(a27 + 16);
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  if (v51 != 2 || v52 != 3 || v53 != v54)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v228 = *(_QWORD *)(a28 + 16);
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  v59 = v222;
  if (v55 != 2 || v56 != 3 || v57 != v58)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v227 = *(_QWORD *)(a29 + 16);
  v60 = _gc_buffer_get_extent();
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  v63 = _gc_buffer_get_extent();
  v64 = v221;
  if (v60 != 2 || v61 != 6 || v62 != v63)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v226 = *(_QWORD *)(a30 + 16);
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  v67 = _gc_buffer_get_extent();
  v68 = _gc_buffer_get_extent();
  if (v65 != 2 || v66 != 2 || v67 != v68)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v225 = *(_QWORD *)(a31 + 16);
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  v72 = _gc_buffer_get_extent();
  if (v69 != 2 || v70 != 1 || v71 != v72)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a32 + 24) |= 1uLL;
  }
  v230 = *(_QWORD *)(a32 + 16);
  v73 = _gc_buffer_get_extent();
  v74 = _gc_buffer_get_extent();
  v75 = _gc_buffer_get_extent();
  v76 = _gc_buffer_get_extent();
  if (v73 != 2 || v74 != 3 || v75 != v76)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a33 + 24) |= 1uLL;
  }
  v216 = *(_QWORD *)(a33 + 16);
  v77 = _gc_buffer_get_extent();
  v78 = _gc_buffer_get_extent();
  v79 = _gc_buffer_get_extent();
  v80 = _gc_buffer_get_extent();
  v81 = v220;
  if (v77 != 2 || v78 != 3 || v79 != v80)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a34 + 24) |= 1uLL;
  }
  v215 = *(_QWORD *)(a34 + 16);
  v82 = _gc_buffer_get_extent();
  v83 = _gc_buffer_get_extent();
  v84 = _gc_buffer_get_extent();
  v85 = _gc_buffer_get_extent();
  v86 = v219;
  if (v82 != 2 || v83 != 6 || v84 != v85)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a35 + 24) |= 1uLL;
  }
  v214 = *(int64x2_t **)(a35 + 16);
  v87 = _gc_buffer_get_extent();
  v88 = _gc_buffer_get_extent();
  v89 = _gc_buffer_get_extent();
  v90 = _gc_buffer_get_extent();
  if (v87 != 2 || v88 != 2 || v89 != v90)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a36 + 24) |= 1uLL;
  }
  v91 = *(int64x2_t **)(a36 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v43 >= 1)
  {
    v95 = 0;
    v96 = (unsigned int *)(v217 + 12);
    v97 = v91 + 1;
    v98 = (_OWORD *)(v216 + 16);
    v99 = (_OWORD *)(v215 + 16);
    v100 = v214 + 3;
    v101 = v224;
    do
    {
      v105 = *v96;
      v104 = v96[1];
      if (v104 >> 30 == 3)
        v104 += 0x40000000;
      v106 = (float64x2_t *)(v232 + 72 * (int)v104);
      v108 = *v106;
      v107 = v106[1];
      _Q18 = v106[2];
      v109 = v106[3];
      v111 = v106[4].f64[0];
      if (v105 >> 30 == 3)
        v105 += 0x40000000;
      v112 = v233 + 24 * (int)v105;
      v92.f64[0] = *(float64_t *)(v112 + 16);
      v113 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v108, *(double *)v112), (float64x2_t)vextq_s8((int8x16_t)v107, (int8x16_t)_Q18, 8uLL), *(float64x2_t *)v112, 1), v109, v92.f64[0]);
      _Q7 = vmulq_f64(v107, *(float64x2_t *)v112);
      _D5 = *(_QWORD *)(v112 + 8);
      __asm { FMLA            D7, D5, V18.D[1] }
      _Q7.f64[0] = _Q7.f64[0] + v111 * v92.f64[0];
      v120 = (float64x2_t *)(v231 + 24 * (int)v104);
      v92.f64[0] = v120[1].f64[0];
      v121 = *(_OWORD *)&vaddq_f64(_Q7, v92);
      v122 = vaddq_f64(v113, *v120);
      _Q21 = vdivq_f64(v122, (float64x2_t)vdupq_lane_s64(v121, 0));
      v124 = vmuld_n_f64(*(double *)&v121, *(double *)&v121);
      v125 = vmulq_f64(_Q21, _Q21);
      v126 = vaddq_f64(v125, (float64x2_t)vdupq_laneq_s64((int64x2_t)v125, 1));
      v127 = vaddvq_f64(v125);
      v128 = fabs(*(double *)&v121) > 2.22044605e-16;
      v129 = *(v96 - 3);
      v130 = *(v96 - 2);
      if (v130 >> 30 == 3)
        v130 += 0x40000000;
      v131 = *v218;
      if (v129 >> 30 == 3)
        v129 += 0x40000000;
      v93.f64[0] = *(float64_t *)(v86 + 8 * (int)v129);
      v132 = (double *)(v234 + 24 * (int)v130);
      v36.f64[0] = v132[1];
      v94.f64[0] = v132[2];
      v133 = vmulq_f64(v126, v126);
      v134 = v127 * vmlad_n_f64(*v132 + v127 * v36.f64[0], v94.f64[0], v133.f64[0]) + 1.0;
      v135 = v131 * (v93.f64[0] * v134);
      _Q11 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v131);
      _D28 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v131).f64[1];
      __asm { FMLA            D6, D28, V21.D[1] }
      _Q11.f64[0] = _Q11.f64[1];
      __asm { FMLA            D28, D11, V21.D[1] }
      _Q11.f64[0] = v127 * v94.f64[0];
      v37.f64[0] = v127 * (v127 * v94.f64[0]);
      v140 = vmlaq_n_f64(v37, _Q11, v126.f64[0]);
      v133.f64[0] = vmuld_n_f64(v93.f64[0], v133.f64[0]);
      _Q11.f64[0] = v133.f64[0] * _D6;
      *(double *)&v141 = v133.f64[0] * _D28;
      *(double *)&v142 = v127 * (v133.f64[0] * _D6);
      v143 = v127 * (v133.f64[0] * _D28);
      v94.f64[0] = v94.f64[0] * v133.f64[0];
      v133.f64[0] = v93.f64[0] * (v127 * v36.f64[0]);
      v144 = vmlaq_f64(vaddq_f64(v133, vmlaq_f64(v94, v93, v140)), vmulq_f64(v126, v93), v36);
      v133.f64[0] = v93.f64[0] * *v132;
      *(_QWORD *)&v145 = *(_OWORD *)&vaddq_f64(v133, v144);
      v235.f64[0] = 0.0;
      v235.f64[1] = v143;
      v236.f64[0] = 0.0;
      v237.f64[1] = 0.0;
      v236.f64[1] = _Q11.f64[0];
      v146 = v128 && v124 > 2.22044605e-16;
      v37 = (float64x2_t)vdupq_lane_s64(v141, 0);
      v37.f64[0] = 0.0;
      v94 = vaddq_f64(v235, (float64x2_t)v141);
      v238.f64[0] = 0.0;
      v237.f64[0] = v127 * (v93.f64[0] * _D6);
      v238.f64[1] = v127 * (v93.f64[0] * _D28);
      v147 = vmuld_n_f64(_D6, v145);
      v148 = vmuld_n_f64(_D28, v145);
      v36.f64[1] = 0.0;
      *(_QWORD *)&v126.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)v142, v238);
      v149 = (int8x16_t)vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v142, (int8x16_t)v235, 8uLL), v37), (float64x2_t)vdupq_laneq_s64((int64x2_t)v238, 1).u64[0]);
      v150 = vaddq_f64(_Q21, _Q21);
      v151 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6820, v135), v150, v147);
      _Q26 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6830, v135), v150, v148);
      v153 = 1.0 / *(double *)&v121;
      v154 = vmulq_n_f64(_Q26, v153);
      _Q23 = vdivq_f64(vnegq_f64(v122), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v124, 0));
      _D27 = v151.f64[1];
      __asm { FMLA            D24, D27, V23.D[1] }
      _Q26.f64[0] = _Q26.f64[1];
      __asm { FMLA            D27, D26, V23.D[1] }
      v239.i64[0] = 0;
      v239.i64[1] = _D27;
      v242 = 0;
      v240 = 0;
      v241 = v154;
      v93 = vaddq_f64((float64x2_t)_D24, *(float64x2_t *)&v240);
      v159 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)_D24, v239, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)&v240, *(int8x16_t *)(&v242 - 1), 8uLL));
      v160 = vaddq_f64((float64x2_t)v239, *(float64x2_t *)(&v242 - 1));
      v161 = vzip1q_s64((int64x2_t)v93, (int64x2_t)v159);
      v162 = vzip2q_s64((int64x2_t)v159, (int64x2_t)v160);
      v163 = *(int *)(v101 + 4 * v95);
      if ((_DWORD)v163 != -1)
      {
        if ((v146 & 1) != 0)
        {
          *(double *)&v164 = _D6 * v134;
          *((double *)&v164 + 1) = _D28 * v134;
          v165 = v229 + 16 * v163;
          *(_OWORD *)v165 = v164;
        }
        else
        {
          v165 = v229 + 16 * v163;
          *(_QWORD *)v165 = 0;
          *(_QWORD *)(v165 + 8) = 0;
        }
        *(_OWORD *)(v230 + 16 * v95) = *(_OWORD *)v165;
      }
      v166 = (int8x16_t)vaddq_f64(v236, v237);
      v92 = (float64x2_t)vextq_s8(v166, v166, 8uLL);
      v167 = *(int *)(v46 + 4 * v95);
      if ((_DWORD)v167 != -1)
      {
        if ((v146 & 1) != 0)
        {
          v168 = vdupq_laneq_s64((int64x2_t)v94, 1).u64[0];
          v169 = vextq_s8(v149, v149, 8uLL).u64[0];
          *(_QWORD *)&v170 = v166.i64[0];
          *((_QWORD *)&v170 + 1) = v149.i64[0];
          *(float64_t *)&v171 = v92.f64[0];
          *((_QWORD *)&v171 + 1) = v169;
          *(_QWORD *)&v126.f64[1] = v168;
          v172 = (_OWORD *)(v228 + 48 * v167);
          *v172 = v170;
          v172[1] = v171;
          v173 = v172 + 1;
          v172[2] = v126;
        }
        else
        {
          v172 = (_OWORD *)(v228 + 48 * v167);
          *v172 = 0uLL;
          v172[1] = 0uLL;
          v173 = v172 + 1;
          v172[2] = 0uLL;
        }
        v174 = *v173;
        v94 = *((float64x2_t *)v172 + 2);
        *(v98 - 1) = *v172;
        *v98 = v174;
        v98[1] = v94;
      }
      v175 = vmulq_n_f64(v151, v153);
      v176 = vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u64[0];
      v177 = *(int *)(v59 + 4 * v95);
      if ((_DWORD)v177 != -1)
      {
        if ((v146 & 1) != 0)
        {
          v94.f64[0] = v175.f64[0];
          v94.f64[1] = v159.f64[0];
          *(_QWORD *)&v178.f64[0] = v176;
          *(_QWORD *)&v178.f64[1] = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
          v179.f64[0] = v93.f64[0];
          *(_QWORD *)&v179.f64[1] = vdupq_laneq_s64((int64x2_t)v160, 1).u64[0];
          v180 = (float64x2_t *)(v227 + 48 * v177);
          *v180 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94, v108.f64[0]), v178, v108, 1), v179, v107.f64[0]);
          v180[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v94, v107, 1), v178, _Q18.f64[0]), v179, _Q18, 1);
          v181 = (__int128 *)&v180[1];
          v180[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94, v109.f64[0]), v178, v109, 1), v179, v111);
        }
        else
        {
          v180 = (float64x2_t *)(v227 + 48 * v177);
          *v180 = 0uLL;
          v180[1] = 0uLL;
          v181 = (__int128 *)&v180[1];
          v180[2] = 0uLL;
        }
        v182 = *v181;
        v183 = v180[2];
        *(v99 - 1) = *v180;
        *v99 = v182;
        v99[1] = v183;
      }
      v184 = *(int *)(v64 + 4 * v95);
      if ((_DWORD)v184 != -1)
      {
        if (v146)
        {
          v185 = vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v113, (int8x16_t)_Q7, 8uLL)), 1).u64[0];
          v186.f64[0] = 0.0;
          v186.f64[1] = _Q7.f64[0];
          *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)v113, 1).u64[0];
          _Q7.f64[1] = -v113.f64[0];
          v188 = (int64x2_t)vnegq_f64(v186);
          v189 = (int64x2_t)vnegq_f64((float64x2_t)v185);
          v190 = vnegq_f64(_Q7);
          v191 = (float64x2_t)vzip1q_s64(v188, v189);
          _Q16 = (float64x2_t)vzip2q_s64(v188, v189);
          v193 = (float64x2_t)vextq_s8((int8x16_t)v113, (int8x16_t)vnegq_f64(v113), 8uLL);
          v194 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v191, v175.f64[0]), _Q16, v175, 1), v193, v93.f64[0]);
          _Q18 = (int64x2_t)vmulq_f64(v175, v190);
          _D27 = v175.f64[1];
          __asm { FMLS            D18, D27, V7.D[1] }
          v197 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v191, v159.f64[0]), _Q16, v159, 1), v193, v160, 1);
          _Q4 = (int8x16_t)vmulq_f64(v159, v190);
          _Q16.f64[0] = v159.f64[1];
          __asm { FMLS            D4, D16, V7.D[1] }
          v199 = vzip1q_s64(_Q18, v197);
          v246 = v199.i64[1];
          v247 = vextq_s8((int8x16_t)v197, _Q4, 8uLL);
          v243 = v199.i64[0];
          v244 = v175;
          v46 = v223;
          v101 = v224;
          v245 = v161.i64[0];
          v81 = v220;
          v64 = v221;
          v86 = v219;
          v248 = v161.i64[1];
          v59 = v222;
          v200 = (int64x2_t *)(v226 + 96 * v184);
          *v200 = vzip1q_s64(v194, *(int64x2_t *)&v246);
          v200[1] = vzip2q_s64(v194, *(int64x2_t *)&v246);
          v201 = v200 + 1;
          v200[2] = vzip1q_s64(*(int64x2_t *)&v243, *(int64x2_t *)((char *)&v247 + 8));
          v202 = v200 + 2;
          v200[3] = vzip2q_s64(*(int64x2_t *)&v243, *(int64x2_t *)((char *)&v247 + 8));
          v203 = v200 + 3;
          v200[4] = vzip1q_s64(*(int64x2_t *)((char *)&v244 + 8), v162);
          v204 = v200 + 4;
          v200[5] = vzip2q_s64(*(int64x2_t *)((char *)&v244 + 8), v162);
        }
        else
        {
          v200 = (int64x2_t *)(v226 + 96 * v184);
          *v200 = 0uLL;
          v200[1] = 0uLL;
          v201 = v200 + 1;
          v200[2] = 0uLL;
          v202 = v200 + 2;
          v200[3] = 0uLL;
          v203 = v200 + 3;
          v200[4] = 0uLL;
          v204 = v200 + 4;
          v200[5] = 0uLL;
        }
        v205 = *v201;
        v206 = *v202;
        v207 = *v203;
        v208 = *v204;
        v209 = v200[5];
        v100[-3] = *v200;
        v100[-2] = v205;
        v100[-1] = v206;
        *v100 = v207;
        v100[1] = v208;
        v100[2] = v209;
      }
      v210 = *(int *)(v81 + 4 * v95);
      if ((_DWORD)v210 != -1)
      {
        if ((v146 & 1) != 0)
        {
          v211 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v218);
          v212 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v218);
          v102 = (int64x2_t *)(v225 + 32 * v210);
          *v102 = vzip1q_s64(v211, v212);
          v102[1] = vzip2q_s64(v211, v212);
        }
        else
        {
          v102 = (int64x2_t *)(v225 + 32 * v210);
          *v102 = 0uLL;
          v102[1] = 0uLL;
        }
        v103 = v102[1];
        v97[-1] = *v102;
        *v97 = v103;
      }
      ++v95;
      v96 += 6;
      v97 += 2;
      v98 += 3;
      v99 += 3;
      v100 += 6;
    }
    while (v43 != v95);
  }
  *(_QWORD *)(a36 + 24) |= 1uLL;
  *(_QWORD *)(a35 + 24) |= 1uLL;
  *(_QWORD *)(a34 + 24) |= 1uLL;
  *(_QWORD *)(a33 + 24) |= 1uLL;
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  *(_QWORD *)(a27 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396860FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_239684FEC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[22], a1[7], a1[8], v2, a1[10], a1[11], v3, a1[13], a1[14], v4, a1[16], a1[17], v5,
    a1[19],
    a1[20],
    v6,
    a1[22],
    v7,
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31],
    a1[32],
    a1[33],
    a1[34],
    a1[35]);
  return 0;
}

uint64_t sub_239686180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v14;
  uint64_t v15;
  double *v16;
  int extent;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t *v37;
  int64x2_t v38;

  v14 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v15 = *v14;
  v16 = *(double **)(a3 + 16);
  extent = _gc_buffer_get_extent();
  v18 = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  if (extent != 2 || v18 != v19)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v20 = *(int **)(a6 + 16);
  v21 = _gc_buffer_get_extent();
  v22 = _gc_buffer_get_extent();
  v23 = _gc_buffer_get_extent();
  v24 = _gc_buffer_get_extent();
  if (v21 != 4 || v22 != 4 || v23 != v24)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a10 + 24) |= 1uLL;
  }
  v25 = *(_QWORD *)(a10 + 16);
  v26 = _gc_buffer_get_extent();
  v27 = _gc_buffer_get_extent();
  v28 = _gc_buffer_get_extent();
  v29 = _gc_buffer_get_extent();
  if (v26 != 4 || v27 != 4 || v28 != v29)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v30 = *(_QWORD *)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v15 >= 1)
  {
    v31 = (_OWORD *)(v30 + 64);
    do
    {
      v32 = *v20;
      if ((_DWORD)v32 != -1)
      {
        v33 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v16);
        v34 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v16);
        v35.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
        v35.i64[1] = v34.i64[1];
        v36 = vzip1q_s64(v33, v34);
        v37 = (int64x2_t *)(v25 + (v32 << 7));
        *v37 = v36;
        v37[1] = 0uLL;
        v38 = vzip2q_s64(v33, v34);
        v37[2] = v38;
        v37[3] = 0uLL;
        v37[4] = 0uLL;
        v37[5] = v36;
        v37[6] = 0uLL;
        v37[7] = v35;
        *(v31 - 4) = v36;
        *(v31 - 3) = 0uLL;
        *(v31 - 2) = v38;
        *(v31 - 1) = 0uLL;
        *v31 = 0uLL;
        v31[1] = v36;
        v31[2] = 0uLL;
        v31[3] = v35;
      }
      ++v20;
      v31 += 8;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  *(_QWORD *)(a10 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239686474(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_239686180(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396864A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  unsigned int *v34;
  int extent;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int64x2_t *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int64x2_t *v72;
  uint64_t v73;
  unsigned int *v74;
  int64x2_t *v75;
  _OWORD *v76;
  int64x2_t *v77;
  int64x2_t *v78;
  int64x2_t v79;
  int64x2_t v80;
  unsigned int v81;
  unsigned int v82;
  float64x2_t *v83;
  float64x2_t *v86;
  double v87;
  float64x2_t v88;
  float64x2_t *v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unsigned __int8 v100;
  unsigned int v101;
  unsigned int v102;
  double v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  unsigned int v110;
  double v111;
  double v112;
  double *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  double v120;
  float64x2_t v128;
  double v129;
  double v130;
  float64x2_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  float64_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  float64x2_t v149;
  double v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  uint64_t v158;
  uint64_t v163;
  int64x2_t v164;
  int64x2_t v165;
  uint64_t v166;
  int64x2_t v167;
  int64x2_t v168;
  uint64_t v169;
  __int128 *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  int64x2_t v178;
  int64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  int64x2_t v184;
  int64x2_t v187;
  int64x2_t v189;
  int64x2_t *v190;
  int64x2_t *v191;
  int64x2_t *v192;
  int64x2_t *v193;
  int64x2_t *v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  uint64_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int8x16_t v221;
  float64x2_t v222;
  double *v223;
  double v224;
  float64x2_t v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  _BYTE v235[32];
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  int8x16_t v241;
  uint64_t v242;
  float64x2_t v243;
  uint64_t v244;
  uint64_t v245;
  int8x16_t v246;
  uint64_t v247;

  v34 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v220 = *v34;
  v205 = *(_QWORD *)(a2 + 16);
  v223 = *(double **)(a3 + 16);
  extent = _gc_buffer_get_extent();
  v36 = _gc_buffer_get_extent();
  v37 = _gc_buffer_get_extent();
  if (extent != 2 || v36 != v37)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v218 = *(_QWORD *)(a9 + 16);
  v219 = *(_QWORD *)(a6 + 16);
  v216 = *(_QWORD *)(a15 + 16);
  v217 = *(_QWORD *)(a12 + 16);
  v214 = *(_QWORD *)(a18 + 16);
  v215 = *(_QWORD *)(a17 + 16);
  v212 = *(_QWORD *)(a22 + 16);
  v213 = *(_QWORD *)(a20 + 16);
  v211 = *(_QWORD *)(a23 + 16);
  v38 = _gc_buffer_get_extent();
  v39 = _gc_buffer_get_extent();
  v40 = _gc_buffer_get_extent();
  v41 = _gc_buffer_get_extent();
  if (v38 != 2 || v39 != 1 || v40 != v41)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a24 + 24) |= 1uLL;
  }
  v209 = *(_QWORD *)(a24 + 16);
  v42 = _gc_buffer_get_extent();
  v43 = _gc_buffer_get_extent();
  v44 = _gc_buffer_get_extent();
  v45 = _gc_buffer_get_extent();
  if (v42 != 2 || v43 != 4 || v44 != v45)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a25 + 24) |= 1uLL;
  }
  v208 = *(_QWORD *)(a25 + 16);
  v46 = _gc_buffer_get_extent();
  v47 = _gc_buffer_get_extent();
  v48 = _gc_buffer_get_extent();
  v49 = _gc_buffer_get_extent();
  if (v46 != 2 || v47 != 6 || v48 != v49)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a26 + 24) |= 1uLL;
  }
  v207 = *(_QWORD *)(a26 + 16);
  v50 = _gc_buffer_get_extent();
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  v53 = _gc_buffer_get_extent();
  if (v50 != 2 || v51 != 2 || v52 != v53)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a27 + 24) |= 1uLL;
  }
  v206 = *(_QWORD *)(a27 + 16);
  v54 = _gc_buffer_get_extent();
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  v57 = _gc_buffer_get_extent();
  if (v54 != 2 || v55 != 1 || v56 != v57)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v210 = *(_QWORD *)(a28 + 16);
  v58 = _gc_buffer_get_extent();
  v59 = _gc_buffer_get_extent();
  v60 = _gc_buffer_get_extent();
  v61 = _gc_buffer_get_extent();
  if (v58 != 2 || v59 != 4 || v60 != v61)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v62 = *(_QWORD *)(a29 + 16);
  v63 = _gc_buffer_get_extent();
  v64 = _gc_buffer_get_extent();
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  if (v63 != 2 || v64 != 6 || v65 != v66)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v67 = *(int64x2_t **)(a30 + 16);
  v68 = _gc_buffer_get_extent();
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  if (v68 != 2 || v69 != 2 || v70 != v71)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v72 = *(int64x2_t **)(a31 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v220 >= 1)
  {
    v73 = 0;
    v74 = (unsigned int *)(v205 + 12);
    v75 = v72 + 1;
    v76 = (_OWORD *)(v62 + 32);
    v77 = v67 + 3;
    do
    {
      v82 = *v74;
      v81 = v74[1];
      if (v81 >> 30 == 3)
        v81 += 0x40000000;
      v83 = (float64x2_t *)(v212 + 72 * (int)v81);
      _Q1 = v83[1];
      _Q2 = v83[2];
      if (v82 >> 30 == 3)
        v82 += 0x40000000;
      v86 = (float64x2_t *)(v213 + 24 * (int)v82);
      v87 = v86[1].f64[0];
      v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v83, v86->f64[0]), (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q2, 8uLL), *v86, 1), v83[3], v87);
      _Q1.f64[0] = v86->f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      _Q2.f64[0] = _D0 + v83[4].f64[0] * v87;
      v92 = (float64x2_t *)(v211 + 24 * (int)v81);
      _Q1.f64[0] = v92[1].f64[0];
      v221 = (int8x16_t)_Q2;
      v222 = v88;
      *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q2, _Q1);
      v93 = fabs(_Q1.f64[0]);
      v94 = vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]);
      v224 = _Q1.f64[0];
      v226 = vaddq_f64(v88, *v92);
      v95 = vmlad_n_f64(vmuld_lane_f64(v226.f64[1], v226, 1), v226.f64[0], v226.f64[0]);
      v96 = sqrt(v95);
      v97 = fabs(v96);
      v98 = v95 + v94;
      v99 = -v96;
      v100 = (v97 > 2.22044605e-16) & (v95 + v94 > 2.22044605e-16) & (v93 > 2.22044605e-16
                                                                   && v94 > 2.22044605e-16
                                                                   && v95 > 0.0
                                                                   && v96 > 2.22044605e-16) & (fmin(v97, v93) > 2.22044605e-16);
      v101 = *(v74 - 2);
      if (v101 >> 30 == 3)
        v102 = v101 + 0x40000000;
      else
        v102 = *(v74 - 2);
      v103 = atan2(v96, _Q1.f64[0]);
      v107.f64[0] = v103 * v103;
      v108.f64[0] = v103 * (v103 * v103);
      v109 = v103 * v103 * v108.f64[0];
      v110 = *(v74 - 3);
      v111 = *v223;
      v112 = 1.0 / v224;
      v113 = (double *)(v214 + 32 * (int)v102);
      v114.f64[0] = v103 * v103 * v109;
      v116.f64[0] = v113[2];
      v115.f64[0] = v113[3];
      v117.f64[0] = v113[1];
      v118.f64[0] = v103
                  + v108.f64[0] * *v113
                  + v109 * v117.f64[0]
                  + v114.f64[0] * v116.f64[0]
                  + v115.f64[0] * (v103 * v103 * v114.f64[0]);
      if (v110 >> 30 == 3)
        v110 += 0x40000000;
      if (v95 >= 0.0000000149011612)
        v112 = v118.f64[0] / v96;
      v119 = v111 * v112;
      v120 = *(double *)(v215 + 8 * (int)v110);
      _D18 = vmuld_lane_f64(v120, v226, 1);
      _Q21 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v111);
      _Q24 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v111);
      __asm
      {
        FMLA            D2, D18, V21.D[1]
        FMLA            D5, D18, V24.D[1]
      }
      if (_NF != _VF)
        v104.f64[0] = 0.0;
      else
        v104.f64[0] = 1.0;
      v118.f64[0] = -v118.f64[0] / v95;
      _Q21.f64[0] = 1.0 / v96;
      v106.f64[0] = v103 * (v107.f64[0] * v107.f64[0]);
      _Q24.f64[0] = v107.f64[0] * v107.f64[0] * v106.f64[0];
      v128 = vmulq_f64(v104, vmulq_f64(_Q21, _Q24));
      v227 = vmuld_n_f64(_D2, v128.f64[0]);
      v228 = vmuld_n_f64(_D5, v128.f64[0]);
      v128.f64[0] = v107.f64[0] * v106.f64[0];
      *(_QWORD *)&v128.f64[0] = *(_OWORD *)&vmulq_f64(v104, vmulq_f64(_Q21, v128));
      v229 = vmuld_n_f64(_D2, v128.f64[0]);
      v230 = vmuld_n_f64(_D5, v128.f64[0]);
      *(_QWORD *)&v128.f64[0] = *(_OWORD *)&vmulq_f64(v104, vmulq_f64(_Q21, v106));
      v231 = vmuld_n_f64(_D2, v128.f64[0]);
      v232 = vmuld_n_f64(_D5, v128.f64[0]);
      *(_QWORD *)&v129 = *(_OWORD *)&vmulq_f64(v104, vmulq_f64(_Q21, v117));
      v105.f64[0] = *v113;
      *(_QWORD *)&v130 = *(_OWORD *)&vmulq_f64(v104, vmulq_f64(_Q21, v105));
      v131 = vmulq_n_f64(vmulq_n_f64(v115, 1.0 / v96), v104.f64[0]);
      *(_QWORD *)&v132 = *(_OWORD *)&vmlaq_f64(vmulq_f64(v107, v131), v104, vmulq_f64(_Q21, v116));
      v133 = vmuld_n_f64(_D2, v132);
      v134 = vmuld_n_f64(_D5, v132);
      v135 = vmlad_n_f64(v107.f64[0] * v133, _D2, v129);
      v136 = vmlad_n_f64(v107.f64[0] * v134, _D5, v129);
      v137 = vmlad_n_f64(v107.f64[0] * v135, _D2, v130);
      v138 = vmlad_n_f64(v107.f64[0] * v136, _D5, v130);
      v139 = v107.f64[0] * v137 + 1.0 / v96 * (v104.f64[0] * _D2);
      v128.f64[0] = v107.f64[0] * v138 + 1.0 / v96 * (v104.f64[0] * _D5);
      *(_QWORD *)&v140 = *(_OWORD *)&vmulq_f64(v104, v118);
      *(_QWORD *)&v141 = *(_OWORD *)&vmulq_f64(v104, vmulq_f64(_Q21, v108));
      v233 = vmuld_n_f64(_D2, v141);
      v234 = vmuld_n_f64(_D5, v141);
      *(_QWORD *)&v142 = *(_OWORD *)&vmulq_f64(v114, v131);
      v131.f64[0] = vmlad_n_f64(v109 * v133, _D2, v142);
      v143 = vmlad_n_f64(v109 * v134, _D5, v142);
      v144 = v120 * v119;
      v145 = v103 * (v131.f64[0] + v108.f64[0] * v135 + v103 * v137);
      v146 = v103 * (v143 + v108.f64[0] * v136 + v103 * v138);
      v147 = v145 + v139 + v145;
      v148 = v146 + v128.f64[0] + v146;
      v149 = vaddq_f64(v226, v226);
      *(_QWORD *)v235 = 0;
      *(_OWORD *)&v235[16] = 0u;
      *(float64x2_t *)&v235[8] = vmlaq_n_f64(vmulq_n_f64(v149, 0.5 / v96 * vmlad_n_f64(v224 / v98 * v148, _D5, v140)), (float64x2_t)xmmword_239EC6830, v144);
      v150 = -1.0 / v94;
      if (_NF == _VF)
        v150 = 0.0;
      v236.f64[0] = 0.0;
      v237.f64[0] = 0.0;
      v236.f64[1] = v227;
      v237.f64[1] = v228;
      v238.f64[0] = 0.0;
      v151 = (int64x2_t)vaddq_f64(v236, (float64x2_t)*(unint64_t *)&v229);
      v152 = (int64x2_t)vaddq_f64(v237, (float64x2_t)*(unint64_t *)&v230);
      v239.f64[0] = 0.0;
      v238.f64[1] = v231;
      v239.f64[1] = v232;
      v240.f64[1] = 0.0;
      v241.i64[0] = 0;
      v240.f64[0] = v99 / v98 * v147 + v150 * _D2;
      *(double *)&v241.i64[1] = v99 / v98 * v148 + v150 * _D5;
      v153 = (int64x2_t)vaddq_f64(*(float64x2_t *)v235, v240);
      v154 = vaddq_f64((float64x2_t)vextq_s8(*(int8x16_t *)v235, *(int8x16_t *)&v235[16], 8uLL), (float64x2_t)vextq_s8((int8x16_t)v240, v241, 8uLL));
      v155 = vaddq_f64(*(float64x2_t *)&v235[16], (float64x2_t)v241);
      v156 = vzip1q_s64(v153, (int64x2_t)v154);
      v157 = vzip2q_s64((int64x2_t)v154, (int64x2_t)v155);
      v158 = *(int *)(v219 + 4 * v73);
      if ((_DWORD)v158 != -1)
      {
        if (((v95 > 2.22044605e-16) & v100) != 0)
        {
          _D27 = vextq_s8((int8x16_t)v226, (int8x16_t)v226, 8uLL).u64[0];
          _Q28 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v119);
          _Q1 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v119);
          __asm
          {
            FMLA            D29, D27, V28.D[1]
            FMLA            D28, D27, V1.D[1]
          }
          *((_QWORD *)&_Q29 + 1) = *(_QWORD *)&_Q28.f64[0];
          v163 = v209 + 16 * v158;
          *(_OWORD *)v163 = _Q29;
        }
        else
        {
          v163 = v209 + 16 * v158;
          *(_QWORD *)v163 = 0;
          *(_QWORD *)(v163 + 8) = 0;
        }
        *(_OWORD *)(v210 + 16 * v73) = *(_OWORD *)v163;
      }
      v164 = (int64x2_t)vaddq_f64(v238, (float64x2_t)*(unint64_t *)&v233);
      v165 = (int64x2_t)vaddq_f64(v239, (float64x2_t)*(unint64_t *)&v234);
      v166 = *(int *)(v218 + 4 * v73);
      if ((_DWORD)v166 != -1)
      {
        if (((v95 > 2.22044605e-16) & v100) != 0)
        {
          v167 = vzip1q_s64(v151, v152);
          v168 = vzip2q_s64(v151, v152);
          v169 = v208 + (v166 << 6);
          *(int64x2_t *)v169 = vzip1q_s64(v164, v165);
          *(int64x2_t *)(v169 + 16) = vzip2q_s64(v164, v165);
          v170 = (__int128 *)(v169 + 16);
          *(int64x2_t *)(v169 + 32) = v167;
        }
        else
        {
          v169 = v208 + (v166 << 6);
          v168 = 0uLL;
          *(_OWORD *)v169 = 0u;
          *(_OWORD *)(v169 + 16) = 0u;
          v170 = (__int128 *)(v169 + 16);
          *(_OWORD *)(v169 + 32) = 0u;
        }
        *(int64x2_t *)(v169 + 48) = v168;
        v171 = *v170;
        v172 = *(_OWORD *)(v169 + 32);
        v173 = *(_OWORD *)(v169 + 48);
        *(v76 - 2) = *(_OWORD *)v169;
        *(v76 - 1) = v171;
        *v76 = v172;
        v76[1] = v173;
      }
      v174 = vmlaq_n_f64(vmulq_n_f64(v149, 0.5 / v96 * vmlad_n_f64(v224 / v98 * v147, _D2, v140)), (float64x2_t)xmmword_239EC6820, v144);
      v175 = *(int *)(v217 + 4 * v73);
      if ((_DWORD)v175 != -1)
      {
        if (((v95 > 2.22044605e-16) & v100) != 0)
        {
          v176.f64[0] = 0.0;
          *(_QWORD *)&v176.f64[1] = v221.i64[0];
          *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)v222, 1).u64[0];
          _Q7.f64[1] = -v222.f64[0];
          v178 = (int64x2_t)vnegq_f64(v176);
          v179 = (int64x2_t)vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v222, v221, 8uLL)), 1).u64[0]);
          v180 = vnegq_f64(_Q7);
          v181 = (float64x2_t)vzip1q_s64(v178, v179);
          v182 = (float64x2_t)vzip2q_s64(v178, v179);
          _Q16 = (float64x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)vnegq_f64(v222), 8uLL);
          v184 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v181, v174.f64[0]), v182, v174, 1), _Q16, *(double *)v153.i64);
          _Q21 = (int64x2_t)vmulq_f64(v174, v180);
          _D22 = v174.f64[1];
          __asm { FMLS            D21, D22, V7.D[1] }
          v187 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v181, v154.f64[0]), v182, v154, 1), _Q16, v155, 1);
          _Q3 = (int8x16_t)vmulq_f64(v154, v180);
          _Q16.f64[0] = v154.f64[1];
          __asm { FMLS            D3, D16, V7.D[1] }
          v189 = vzip1q_s64(_Q21, v187);
          v245 = v189.i64[1];
          v246 = vextq_s8((int8x16_t)v187, _Q3, 8uLL);
          v242 = v189.i64[0];
          v243 = v174;
          v247 = v156.i64[1];
          v244 = v156.i64[0];
          v190 = (int64x2_t *)(v207 + 96 * v175);
          *v190 = vzip1q_s64(v184, *(int64x2_t *)&v245);
          v190[1] = vzip2q_s64(v184, *(int64x2_t *)&v245);
          v191 = v190 + 1;
          v190[2] = vzip1q_s64(*(int64x2_t *)&v242, *(int64x2_t *)((char *)&v246 + 8));
          v192 = v190 + 2;
          v190[3] = vzip2q_s64(*(int64x2_t *)&v242, *(int64x2_t *)((char *)&v246 + 8));
          v193 = v190 + 3;
          v190[4] = vzip1q_s64(*(int64x2_t *)((char *)&v243 + 8), v157);
          v194 = v190 + 4;
          v190[5] = vzip2q_s64(*(int64x2_t *)((char *)&v243 + 8), v157);
        }
        else
        {
          v190 = (int64x2_t *)(v207 + 96 * v175);
          *v190 = 0u;
          v190[1] = 0u;
          v191 = v190 + 1;
          v190[2] = 0u;
          v192 = v190 + 2;
          v190[3] = 0u;
          v193 = v190 + 3;
          v190[4] = 0u;
          v194 = v190 + 4;
          v190[5] = 0u;
        }
        v195 = *v191;
        v196 = *v192;
        v197 = *v193;
        v198 = *v194;
        v199 = v190[5];
        v77[-3] = *v190;
        v77[-2] = v195;
        v77[-1] = v196;
        *v77 = v197;
        v77[1] = v198;
        v77[2] = v199;
      }
      v200 = *(int *)(v216 + 4 * v73);
      if ((_DWORD)v200 != -1)
      {
        if (((v95 > 2.22044605e-16) & v100) != 0)
        {
          v201 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v223);
          v202 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v223);
          v203 = vzip1q_s64(v201, v202);
          v79 = vzip2q_s64(v201, v202);
          v78 = (int64x2_t *)(v206 + 32 * v200);
          *v78 = v203;
        }
        else
        {
          v78 = (int64x2_t *)(v206 + 32 * v200);
          v79 = 0uLL;
          *v78 = 0u;
        }
        v78[1] = v79;
        v80 = v78[1];
        v75[-1] = *v78;
        *v75 = v80;
      }
      ++v73;
      v74 += 6;
      v75 += 2;
      v76 += 4;
      v77 += 6;
    }
    while (v220 != v73);
  }
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  *(_QWORD *)(a27 + 24) |= 1uLL;
  *(_QWORD *)(a26 + 24) |= 1uLL;
  *(_QWORD *)(a25 + 24) |= 1uLL;
  *(_QWORD *)(a24 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396874D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_2396864A8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a1[7], a1[8], v8, a1[10], a1[11], v9, a1[13], a1[14], v10, a1[16], a1[17], v11,
    a1[19],
    v12,
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30]);
  return 0;
}

uint64_t sub_239687554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  unsigned int *v40;
  int extent;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int64x2_t *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int64x2_t *v85;
  uint64_t v86;
  int *v87;
  int64x2_t *v88;
  _OWORD *v89;
  int64x2_t *v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t v93;
  int v94;
  unsigned int v95;
  float64x2_t *v96;
  float64x2_t *v99;
  double v100;
  float64x2_t v101;
  float64x2_t *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  unsigned __int8 v113;
  unsigned int v114;
  unsigned int v115;
  double v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  unsigned int v123;
  double v124;
  double v125;
  double *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  double v132;
  double v133;
  float64x2_t v141;
  double v142;
  double v143;
  float64x2_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  float64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  float64_t v157;
  double v158;
  double v159;
  double v160;
  float64x2_t v161;
  double v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  uint64_t v170;
  uint64_t v175;
  int64x2_t v176;
  int64x2_t v177;
  uint64_t v178;
  int64x2_t *v179;
  int64x2_t *v180;
  int64x2_t *v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  float64x2_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  float64x2_t *v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t *v199;
  __int128 *v200;
  __int128 *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  float64x2_t v205;
  int64x2_t v207;
  int64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  int64x2_t v213;
  int64x2_t v216;
  int64x2_t v219;
  int64x2_t *v220;
  int64x2_t *v221;
  int64x2_t *v222;
  int64x2_t *v223;
  int64x2_t *v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  uint64_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int8x16_t v252;
  float64x2_t v253;
  uint64_t v254;
  double *v255;
  double v256;
  float64x2_t v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  _BYTE v266[32];
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  int8x16_t v272;
  uint64_t v273;
  float64x2_t v274;
  uint64_t v275;
  uint64_t v276;
  int8x16_t v277;
  uint64_t v278;

  v40 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v251 = *v40;
  v235 = *(_QWORD *)(a2 + 16);
  v255 = *(double **)(a3 + 16);
  LODWORD(a3) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v42 = _gc_buffer_get_extent();
  if ((_DWORD)a3 != 2 || extent != v42)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v249 = *(_QWORD *)(a9 + 16);
  v250 = *(_QWORD *)(a6 + 16);
  v247 = *(_QWORD *)(a15 + 16);
  v248 = *(_QWORD *)(a12 + 16);
  v245 = *(_QWORD *)(a20 + 16);
  v246 = *(_QWORD *)(a18 + 16);
  v243 = *(_QWORD *)(a23 + 16);
  v244 = *(_QWORD *)(a21 + 16);
  v254 = *(_QWORD *)(a25 + 16);
  v242 = *(_QWORD *)(a26 + 16);
  v43 = _gc_buffer_get_extent();
  v44 = _gc_buffer_get_extent();
  v45 = _gc_buffer_get_extent();
  v46 = _gc_buffer_get_extent();
  if (v43 != 2 || v44 != 1 || v45 != v46)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a27 + 24) |= 1uLL;
  }
  v240 = *(_QWORD *)(a27 + 16);
  v47 = _gc_buffer_get_extent();
  v48 = _gc_buffer_get_extent();
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  if (v47 != 2 || v48 != 4 || v49 != v50)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v239 = *(_QWORD *)(a28 + 16);
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  if (v51 != 2 || v52 != 3 || v53 != v54)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v238 = *(_QWORD *)(a29 + 16);
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  if (v55 != 2 || v56 != 6 || v57 != v58)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v237 = *(_QWORD *)(a30 + 16);
  v59 = _gc_buffer_get_extent();
  v60 = _gc_buffer_get_extent();
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  if (v59 != 2 || v60 != 2 || v61 != v62)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v236 = *(_QWORD *)(a31 + 16);
  v63 = _gc_buffer_get_extent();
  v64 = _gc_buffer_get_extent();
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  if (v63 != 2 || v64 != 1 || v65 != v66)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a32 + 24) |= 1uLL;
  }
  v241 = *(_QWORD *)(a32 + 16);
  v67 = _gc_buffer_get_extent();
  v68 = _gc_buffer_get_extent();
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  if (v67 != 2 || v68 != 4 || v69 != v70)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a33 + 24) |= 1uLL;
  }
  v234 = *(int64x2_t **)(a33 + 16);
  v71 = _gc_buffer_get_extent();
  v72 = _gc_buffer_get_extent();
  v73 = _gc_buffer_get_extent();
  v74 = _gc_buffer_get_extent();
  if (v71 != 2 || v72 != 3 || v73 != v74)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a34 + 24) |= 1uLL;
  }
  v75 = *(_QWORD *)(a34 + 16);
  v76 = _gc_buffer_get_extent();
  v77 = _gc_buffer_get_extent();
  v78 = _gc_buffer_get_extent();
  v79 = _gc_buffer_get_extent();
  if (v76 != 2 || v77 != 6 || v78 != v79)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a35 + 24) |= 1uLL;
  }
  v80 = *(int64x2_t **)(a35 + 16);
  v81 = _gc_buffer_get_extent();
  v82 = _gc_buffer_get_extent();
  v83 = _gc_buffer_get_extent();
  v84 = _gc_buffer_get_extent();
  if (v81 != 2 || v82 != 2 || v83 != v84)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a36 + 24) |= 1uLL;
  }
  v85 = *(int64x2_t **)(a36 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v251 >= 1)
  {
    v86 = 0;
    v87 = (int *)(v235 + 16);
    v88 = v85 + 1;
    v89 = (_OWORD *)(v75 + 16);
    v90 = v80 + 3;
    v91 = v234 + 2;
    do
    {
      v95 = *(v87 - 1);
      v94 = *v87;
      if (*v87 >> 30 == 3)
        v94 = *v87 + 0x40000000;
      v96 = (float64x2_t *)(v254 + 72 * v94);
      _Q1 = v96[1];
      _Q2 = v96[2];
      if (v95 >> 30 == 3)
        v95 += 0x40000000;
      v99 = (float64x2_t *)(v243 + 24 * (int)v95);
      v100 = v99[1].f64[0];
      v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v96, v99->f64[0]), (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q2, 8uLL), *v99, 1), v96[3], v100);
      _Q1.f64[0] = v99->f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      _Q2.f64[0] = _D0 + v96[4].f64[0] * v100;
      v105 = (float64x2_t *)(v242 + 24 * v94);
      _Q1.f64[0] = v105[1].f64[0];
      v252 = (int8x16_t)_Q2;
      v253 = v101;
      *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q2, _Q1);
      v106 = fabs(_Q1.f64[0]);
      v107 = vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]);
      v256 = _Q1.f64[0];
      v257 = vaddq_f64(v101, *v105);
      v108 = vmlad_n_f64(vmuld_lane_f64(v257.f64[1], v257, 1), v257.f64[0], v257.f64[0]);
      v109 = sqrt(v108);
      v110 = fabs(v109);
      v111 = v108 + v107;
      v112 = -v109;
      v113 = (v110 > 2.22044605e-16) & (v108 + v107 > 2.22044605e-16) & (v106 > 2.22044605e-16
                                                                      && v107 > 2.22044605e-16
                                                                      && v108 > 0.0
                                                                      && v109 > 2.22044605e-16) & (fmin(v110, v106) > 2.22044605e-16);
      v114 = *(v87 - 3);
      if (v114 >> 30 == 3)
        v115 = v114 + 0x40000000;
      else
        v115 = *(v87 - 3);
      v116 = atan2(v109, _Q1.f64[0]);
      v120.f64[0] = v116 * v116;
      v121.f64[0] = v116 * (v116 * v116);
      v122 = v116 * v116 * v121.f64[0];
      v123 = *(v87 - 4);
      v124 = *v255;
      v125 = 1.0 / v256;
      v126 = (double *)(v244 + 32 * (int)v115);
      v127.f64[0] = v116 * v116 * v122;
      v129.f64[0] = v126[2];
      v128.f64[0] = v126[3];
      v130.f64[0] = v126[1];
      v131.f64[0] = v116
                  + v121.f64[0] * *v126
                  + v122 * v130.f64[0]
                  + v127.f64[0] * v129.f64[0]
                  + v128.f64[0] * (v116 * v116 * v127.f64[0]);
      if (v123 >> 30 == 3)
        v123 += 0x40000000;
      if (v108 >= 0.0000000149011612)
        v125 = v131.f64[0] / v109;
      v132 = v124 * v125;
      v133 = *(double *)(v245 + 8 * (int)v123);
      _D18 = vmuld_lane_f64(v133, v257, 1);
      _Q21 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v124);
      _Q24 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v124);
      __asm
      {
        FMLA            D2, D18, V21.D[1]
        FMLA            D4, D18, V24.D[1]
      }
      if (_NF != _VF)
        v117.f64[0] = 0.0;
      else
        v117.f64[0] = 1.0;
      v131.f64[0] = -v131.f64[0] / v108;
      _Q21.f64[0] = 1.0 / v109;
      v119.f64[0] = v116 * (v120.f64[0] * v120.f64[0]);
      _Q24.f64[0] = v120.f64[0] * v120.f64[0] * v119.f64[0];
      v141 = vmulq_f64(v117, vmulq_f64(_Q21, _Q24));
      v258 = vmuld_n_f64(_D2, v141.f64[0]);
      v259 = vmuld_n_f64(_D4, v141.f64[0]);
      v141.f64[0] = v120.f64[0] * v119.f64[0];
      *(_QWORD *)&v141.f64[0] = *(_OWORD *)&vmulq_f64(v117, vmulq_f64(_Q21, v141));
      v260 = vmuld_n_f64(_D2, v141.f64[0]);
      v261 = vmuld_n_f64(_D4, v141.f64[0]);
      *(_QWORD *)&v141.f64[0] = *(_OWORD *)&vmulq_f64(v117, vmulq_f64(_Q21, v119));
      v262 = vmuld_n_f64(_D2, v141.f64[0]);
      v263 = vmuld_n_f64(_D4, v141.f64[0]);
      *(_QWORD *)&v142 = *(_OWORD *)&vmulq_f64(v117, vmulq_f64(_Q21, v130));
      v118.f64[0] = *v126;
      *(_QWORD *)&v143 = *(_OWORD *)&vmulq_f64(v117, vmulq_f64(_Q21, v118));
      v144 = vmulq_n_f64(vmulq_n_f64(v128, 1.0 / v109), v117.f64[0]);
      *(_QWORD *)&v145 = *(_OWORD *)&vmlaq_f64(vmulq_f64(v120, v144), v117, vmulq_f64(_Q21, v129));
      v146 = vmuld_n_f64(_D2, v145);
      v147 = vmuld_n_f64(_D4, v145);
      v148 = vmlad_n_f64(v120.f64[0] * v146, _D2, v142);
      v149 = vmlad_n_f64(v120.f64[0] * v147, _D4, v142);
      v150 = vmlad_n_f64(v120.f64[0] * v148, _D2, v143);
      v151 = vmlad_n_f64(v120.f64[0] * v149, _D4, v143);
      v152 = v120.f64[0] * v150 + 1.0 / v109 * (v117.f64[0] * _D2);
      v141.f64[0] = v120.f64[0] * v151 + 1.0 / v109 * (v117.f64[0] * _D4);
      *(_QWORD *)&v153 = *(_OWORD *)&vmulq_f64(v117, v131);
      *(_QWORD *)&v154 = *(_OWORD *)&vmulq_f64(v117, vmulq_f64(_Q21, v121));
      v264 = vmuld_n_f64(_D2, v154);
      v265 = vmuld_n_f64(_D4, v154);
      *(_QWORD *)&v155 = *(_OWORD *)&vmulq_f64(v127, v144);
      v144.f64[0] = vmlad_n_f64(v122 * v146, _D2, v155);
      v156 = vmlad_n_f64(v122 * v147, _D4, v155);
      v157 = v144.f64[0] + v121.f64[0] * v148;
      v158 = v133 * v132;
      v159 = v116 * (v157 + v116 * v150) + v152 + v116 * (v157 + v116 * v150);
      v160 = v116 * (v156 + v121.f64[0] * v149 + v116 * v151)
           + v141.f64[0]
           + v116 * (v156 + v121.f64[0] * v149 + v116 * v151);
      v161 = vaddq_f64(v257, v257);
      *(_QWORD *)v266 = 0;
      *(_OWORD *)&v266[16] = 0u;
      *(float64x2_t *)&v266[8] = vmlaq_n_f64(vmulq_n_f64(v161, 0.5 / v109 * vmlad_n_f64(v256 / v111 * v160, _D4, v153)), (float64x2_t)xmmword_239EC6830, v133 * v132);
      v162 = -1.0 / v107;
      if (_NF == _VF)
        v162 = 0.0;
      v267.f64[0] = 0.0;
      v268.f64[0] = 0.0;
      v267.f64[1] = v258;
      v268.f64[1] = v259;
      v269.f64[0] = 0.0;
      v163 = (int64x2_t)vaddq_f64(v267, (float64x2_t)*(unint64_t *)&v260);
      v164 = (int64x2_t)vaddq_f64(v268, (float64x2_t)*(unint64_t *)&v261);
      v270.f64[0] = 0.0;
      v269.f64[1] = v262;
      v270.f64[1] = v263;
      v271.f64[1] = 0.0;
      v272.i64[0] = 0;
      v271.f64[0] = v112 / v111 * v159 + v162 * _D2;
      *(double *)&v272.i64[1] = v112 / v111 * v160 + v162 * _D4;
      v165 = (int64x2_t)vaddq_f64(*(float64x2_t *)v266, v271);
      v166 = vaddq_f64((float64x2_t)vextq_s8(*(int8x16_t *)v266, *(int8x16_t *)&v266[16], 8uLL), (float64x2_t)vextq_s8((int8x16_t)v271, v272, 8uLL));
      v167 = vaddq_f64(*(float64x2_t *)&v266[16], (float64x2_t)v272);
      v168 = vzip1q_s64(v165, (int64x2_t)v166);
      v169 = vzip2q_s64((int64x2_t)v166, (int64x2_t)v167);
      v170 = *(int *)(v250 + 4 * v86);
      if ((_DWORD)v170 != -1)
      {
        if (((v108 > 2.22044605e-16) & v113) != 0)
        {
          _D27 = vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL).u64[0];
          _Q28 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v132);
          _Q1 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v132);
          __asm
          {
            FMLA            D29, D27, V28.D[1]
            FMLA            D28, D27, V1.D[1]
          }
          *((_QWORD *)&_Q29 + 1) = *(_QWORD *)&_Q28.f64[0];
          v175 = v240 + 16 * v170;
          *(_OWORD *)v175 = _Q29;
        }
        else
        {
          v175 = v240 + 16 * v170;
          *(_QWORD *)v175 = 0;
          *(_QWORD *)(v175 + 8) = 0;
        }
        *(_OWORD *)(v241 + 16 * v86) = *(_OWORD *)v175;
      }
      v176 = (int64x2_t)vaddq_f64(v269, (float64x2_t)*(unint64_t *)&v264);
      v177 = (int64x2_t)vaddq_f64(v270, (float64x2_t)*(unint64_t *)&v265);
      v178 = *(int *)(v249 + 4 * v86);
      if ((_DWORD)v178 != -1)
      {
        v179 = (int64x2_t *)(v239 + (v178 << 6));
        if (((v108 > 2.22044605e-16) & v113) != 0)
        {
          *v179 = vzip1q_s64(v176, v177);
          v179[1] = vzip2q_s64(v176, v177);
          v180 = v179 + 1;
          v179[2] = vzip1q_s64(v163, v164);
          v181 = v179 + 2;
          v179[3] = vzip2q_s64(v163, v164);
        }
        else
        {
          *v179 = 0uLL;
          v179[1] = 0uLL;
          v180 = v179 + 1;
          v179[2] = 0uLL;
          v181 = v179 + 2;
          v179[3] = 0uLL;
        }
        v182 = *v180;
        v183 = *v181;
        v184 = v179[3];
        v91[-2] = *v179;
        v91[-1] = v182;
        *v91 = v183;
        v91[1] = v184;
      }
      v185 = vmlaq_n_f64(vmulq_n_f64(v161, 0.5 / v109 * vmlad_n_f64(v256 / v111 * v159, _D2, v153)), (float64x2_t)xmmword_239EC6820, v158);
      v186 = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
      v187 = *(int *)(v248 + 4 * v86);
      if ((_DWORD)v187 != -1)
      {
        if (((v108 > 2.22044605e-16) & v113) != 0)
        {
          v188 = vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
          v189 = vdupq_laneq_s64((int64x2_t)v167, 1).u64[0];
          v190 = *v87;
          if (*v87 >> 30 == 3)
            v190 = *v87 + 0x40000000;
          v191 = (float64x2_t *)(v254 + 72 * v190);
          v192 = v191[1];
          v193.f64[0] = v185.f64[0];
          v193.f64[1] = v166.f64[0];
          *(_QWORD *)&v194.f64[0] = v186;
          *(_QWORD *)&v194.f64[1] = v188;
          *(_QWORD *)&v195.f64[0] = v165.i64[0];
          *(_QWORD *)&v195.f64[1] = v189;
          v196 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v193, v191->f64[0]), v194, *v191, 1), v195, v192.f64[0]);
          v197 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v193, v192, 1), v194, v191[2].f64[0]), v195, v191[2], 1);
          v198 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v193, v191[3].f64[0]), v194, v191[3], 1), v195, v191[4].f64[0]);
          v199 = (float64x2_t *)(v238 + 48 * v187);
          *v199 = v196;
          v199[1] = v197;
          v200 = (__int128 *)&v199[1];
          v199[2] = v198;
          v201 = (__int128 *)&v199[2];
        }
        else
        {
          v199 = (float64x2_t *)(v238 + 48 * v187);
          *v199 = 0uLL;
          v199[1] = 0uLL;
          v200 = (__int128 *)&v199[1];
          v199[2] = 0uLL;
          v201 = (__int128 *)&v199[2];
        }
        v202 = *v200;
        v203 = *v201;
        *(v89 - 1) = *v199;
        *v89 = v202;
        v89[1] = v203;
      }
      v204 = *(int *)(v247 + 4 * v86);
      if ((_DWORD)v204 != -1)
      {
        if (((v108 > 2.22044605e-16) & v113) != 0)
        {
          v205.f64[0] = 0.0;
          *(_QWORD *)&v205.f64[1] = v252.i64[0];
          *(_QWORD *)&_Q19.f64[0] = vdupq_laneq_s64((int64x2_t)v253, 1).u64[0];
          _Q19.f64[1] = -v253.f64[0];
          v207 = (int64x2_t)vnegq_f64(v205);
          v208 = (int64x2_t)vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v253, v252, 8uLL)), 1).u64[0]);
          v209 = vnegq_f64(_Q19);
          v210 = (float64x2_t)vzip1q_s64(v207, v208);
          v211 = (float64x2_t)vzip2q_s64(v207, v208);
          v212 = (float64x2_t)vextq_s8((int8x16_t)v253, (int8x16_t)vnegq_f64(v253), 8uLL);
          v213 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v210, v185.f64[0]), v211, v185, 1), v212, *(double *)v165.i64);
          _Q16 = (int64x2_t)vmulq_f64(v185, v209);
          _D23 = v185.f64[1];
          __asm { FMLS            D16, D23, V19.D[1] }
          v216 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v210, v166.f64[0]), v211, v166, 1), v212, v167, 1);
          _Q7 = (int8x16_t)vmulq_f64(v166, v209);
          _D6 = v166.f64[1];
          __asm { FMLS            D7, D6, V19.D[1] }
          v219 = vzip1q_s64(_Q16, v216);
          v276 = v219.i64[1];
          v277 = vextq_s8((int8x16_t)v216, _Q7, 8uLL);
          v273 = v219.i64[0];
          v274 = v185;
          v278 = v168.i64[1];
          v275 = v168.i64[0];
          v220 = (int64x2_t *)(v237 + 96 * v204);
          *v220 = vzip1q_s64(v213, *(int64x2_t *)&v276);
          v220[1] = vzip2q_s64(v213, *(int64x2_t *)&v276);
          v221 = v220 + 1;
          v220[2] = vzip1q_s64(*(int64x2_t *)&v273, *(int64x2_t *)((char *)&v277 + 8));
          v222 = v220 + 2;
          v220[3] = vzip2q_s64(*(int64x2_t *)&v273, *(int64x2_t *)((char *)&v277 + 8));
          v223 = v220 + 3;
          v220[4] = vzip1q_s64(*(int64x2_t *)((char *)&v274 + 8), v169);
          v224 = v220 + 4;
          v220[5] = vzip2q_s64(*(int64x2_t *)((char *)&v274 + 8), v169);
        }
        else
        {
          v220 = (int64x2_t *)(v237 + 96 * v204);
          *v220 = 0uLL;
          v220[1] = 0uLL;
          v221 = v220 + 1;
          v220[2] = 0uLL;
          v222 = v220 + 2;
          v220[3] = 0uLL;
          v223 = v220 + 3;
          v220[4] = 0uLL;
          v224 = v220 + 4;
          v220[5] = 0uLL;
        }
        v225 = *v221;
        v226 = *v222;
        v227 = *v223;
        v228 = *v224;
        v229 = v220[5];
        v90[-3] = *v220;
        v90[-2] = v225;
        v90[-1] = v226;
        *v90 = v227;
        v90[1] = v228;
        v90[2] = v229;
      }
      v230 = *(int *)(v246 + 4 * v86);
      if ((_DWORD)v230 != -1)
      {
        if (((v108 > 2.22044605e-16) & v113) != 0)
        {
          v231 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v255);
          v232 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v255);
          v92 = (int64x2_t *)(v236 + 32 * v230);
          *v92 = vzip1q_s64(v231, v232);
          v92[1] = vzip2q_s64(v231, v232);
        }
        else
        {
          v92 = (int64x2_t *)(v236 + 32 * v230);
          *v92 = 0uLL;
          v92[1] = 0uLL;
        }
        v93 = v92[1];
        v88[-1] = *v92;
        *v88 = v93;
      }
      ++v86;
      v87 += 6;
      v88 += 2;
      v89 += 3;
      v90 += 6;
      v91 += 4;
    }
    while (v251 != v86);
  }
  *(_QWORD *)(a36 + 24) |= 1uLL;
  *(_QWORD *)(a35 + 24) |= 1uLL;
  *(_QWORD *)(a34 + 24) |= 1uLL;
  *(_QWORD *)(a33 + 24) |= 1uLL;
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  *(_QWORD *)(a27 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239688830(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_239687554(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[22], a1[7], a1[8], v2, a1[10], a1[11], v3, a1[13], a1[14], v4, a1[16], a1[17], v5,
    a1[19],
    a1[20],
    v6,
    a1[22],
    v7,
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31],
    a1[32],
    a1[33],
    a1[34],
    a1[35]);
  return 0;
}

uint64_t sub_2396888B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v14;
  uint64_t v15;
  double *v16;
  int extent;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int64x2_t *v30;
  int64x2_t *v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t *v37;

  v14 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v15 = *v14;
  v16 = *(double **)(a3 + 16);
  extent = _gc_buffer_get_extent();
  v18 = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  if (extent != 2 || v18 != v19)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a4 + 24) |= 1uLL;
  }
  v20 = *(int **)(a6 + 16);
  v21 = _gc_buffer_get_extent();
  v22 = _gc_buffer_get_extent();
  v23 = _gc_buffer_get_extent();
  v24 = _gc_buffer_get_extent();
  if (v21 != 2 || v22 != 2 || v23 != v24)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a10 + 24) |= 1uLL;
  }
  v25 = *(_QWORD *)(a10 + 16);
  v26 = _gc_buffer_get_extent();
  v27 = _gc_buffer_get_extent();
  v28 = _gc_buffer_get_extent();
  v29 = _gc_buffer_get_extent();
  if (v26 != 2 || v27 != 2 || v28 != v29)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a11 + 24) |= 1uLL;
  }
  v30 = *(int64x2_t **)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v15 >= 1)
  {
    v31 = v30 + 1;
    do
    {
      v32 = *v20;
      if ((_DWORD)v32 != -1)
      {
        v33 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v16);
        v34 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v16);
        v35 = vzip1q_s64(v33, v34);
        v36 = vzip2q_s64(v33, v34);
        v37 = (int64x2_t *)(v25 + 32 * v32);
        *v37 = v35;
        v37[1] = v36;
        v31[-1] = v35;
        *v31 = v36;
      }
      v31 += 2;
      ++v20;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a11 + 24) |= 1uLL;
  *(_QWORD *)(a10 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239688B84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_2396888B4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_239688BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  float64x2_t *v7;
  double *v8;
  double v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(float64x2_t **)(a2 + 16);
  v8 = *(double **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = *v8;
    if (v6 >= 4)
    {
      v10 = v6 & 0x7FFFFFFC;
      v11 = 0uLL;
      v12 = (float64x2_t)*(unint64_t *)v8;
      v13 = v7 + 1;
      v14 = v6 & 0xFFFFFFFC;
      do
      {
        v12 = vmlaq_f64(v12, v13[-1], v13[-1]);
        v11 = vmlaq_f64(v11, *v13, *v13);
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      v9 = vaddvq_f64(vaddq_f64(v11, v12));
      if (v10 == v6)
        goto LABEL_9;
    }
    else
    {
      v10 = 0;
    }
    v15 = v6 - v10;
    v16 = &v7->f64[v10];
    do
    {
      v17 = *v16++;
      v9 = v9 + v17 * v17;
      --v15;
    }
    while (v15);
LABEL_9:
    *v8 = v9;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239688CA0(uint64_t *a1)
{
  sub_239688BB8(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239688CC0(uint64_t *a1)
{
  sub_239688BB8(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239688CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  const double *v7;
  double *v8;
  double v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  const double *v13;
  uint64_t v14;
  const double *v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  float64x2x3_t v21;
  float64x2x3_t v22;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(const double **)(a2 + 16);
  v8 = *(double **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = *v8;
    if (v6 >= 4)
    {
      v10 = v6 & 0x7FFFFFFC;
      v11 = 0uLL;
      v12 = (float64x2_t)*(unint64_t *)v8;
      v13 = v7;
      v14 = v6 & 0xFFFFFFFC;
      do
      {
        v15 = v13;
        v13 += 12;
        v21 = vld3q_f64(v15);
        v15 += 6;
        v12 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v21.val[1], v21.val[1]), v21.val[0], v21.val[0]), v21.val[2], v21.val[2]), v12);
        v22 = vld3q_f64(v15);
        v11 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[1], v22.val[1]), v22.val[0], v22.val[0]), v22.val[2], v22.val[2]), v11);
        v14 -= 4;
      }
      while (v14);
      v9 = vaddvq_f64(vaddq_f64(v11, v12));
      if (v10 == v6)
        goto LABEL_9;
    }
    else
    {
      v10 = 0;
    }
    v16 = v6 - v10;
    v17 = (double *)&v7[3 * v10 + 2];
    do
    {
      v18 = *(v17 - 1) * *(v17 - 1) + *(v17 - 2) * *(v17 - 2);
      v19 = *v17;
      v17 += 3;
      v9 = v18 + v19 * v19 + v9;
      --v16;
    }
    while (v16);
LABEL_9:
    *v8 = v9;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239688E00(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239688E20(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239688E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  const double *v13;
  uint64_t v14;
  const double *v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2x4_t v21;
  float64x2x4_t v22;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(double **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = *v8;
    if (v6 >= 4)
    {
      v10 = v6 & 0x7FFFFFFC;
      v11 = 0uLL;
      v12 = (float64x2_t)*(unint64_t *)v8;
      v13 = (const double *)(v7 + 64);
      v14 = v6 & 0xFFFFFFFC;
      do
      {
        v15 = v13 - 8;
        v21 = vld4q_f64(v13);
        v22 = vld4q_f64(v15);
        v12 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[1], v22.val[1]), v22.val[0], v22.val[0]), v22.val[2], v22.val[2]), v22.val[3], v22.val[3]), v12);
        v11 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v21.val[1], v21.val[1]), v21.val[0], v21.val[0]), v21.val[2], v21.val[2]), v21.val[3], v21.val[3]), v11);
        v13 += 16;
        v14 -= 4;
      }
      while (v14);
      v9 = vaddvq_f64(vaddq_f64(v11, v12));
      if (v10 == v6)
        goto LABEL_9;
    }
    else
    {
      v10 = 0;
    }
    v16 = v6 - v10;
    v17 = (float64x2_t *)(v7 + 32 * v10);
    do
    {
      v18 = *v17;
      v19 = v17[1];
      v17 += 2;
      v9 = v9 + vaddvq_f64(vmlaq_f64(vmulq_f64(v19, v19), v18, v18));
      --v16;
    }
    while (v16);
LABEL_9:
    *v8 = v9;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239688F5C(uint64_t *a1)
{
  sub_239688E40(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239688F7C(uint64_t *a1)
{
  sub_239688E40(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239688F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  const double *v13;
  uint64_t v14;
  const double *v15;
  uint64_t v16;
  double *v17;
  float64x2x2_t v19;
  float64x2x2_t v20;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(double **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = *v8;
    if (v6 >= 4)
    {
      v10 = v6 & 0x7FFFFFFC;
      v11 = 0uLL;
      v12 = (float64x2_t)*(unint64_t *)v8;
      v13 = (const double *)(v7 + 32);
      v14 = v6 & 0xFFFFFFFC;
      do
      {
        v15 = v13 - 4;
        v19 = vld2q_f64(v15);
        v20 = vld2q_f64(v13);
        v12 = vaddq_f64(vmlaq_f64(vmulq_f64(v19.val[1], v19.val[1]), v19.val[0], v19.val[0]), v12);
        v11 = vaddq_f64(vmlaq_f64(vmulq_f64(v20.val[1], v20.val[1]), v20.val[0], v20.val[0]), v11);
        v13 += 8;
        v14 -= 4;
      }
      while (v14);
      v9 = vaddvq_f64(vaddq_f64(v11, v12));
      if (v10 == v6)
        goto LABEL_9;
    }
    else
    {
      v10 = 0;
    }
    v16 = v6 - v10;
    v17 = (double *)(v7 + 16 * v10 + 8);
    do
    {
      v9 = *v17 * *v17 + *(v17 - 1) * *(v17 - 1) + v9;
      v17 += 2;
      --v16;
    }
    while (v16);
LABEL_9:
    *v8 = v9;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396890AC(uint64_t *a1)
{
  sub_239688F9C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396890CC(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396890EC(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968910C(uint64_t *a1)
{
  sub_239688F9C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968912C(uint64_t *a1)
{
  sub_239688F9C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968914C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  float64x2_t *v7;
  double *v8;
  double v9;
  float64x2_t *v10;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  double v25;
  double v26;
  double v29;
  long double v30;
  float64x2_t v31;
  long double v32;
  float64x2_t v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(float64x2_t **)(a2 + 16);
  v8 = *(double **)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = *v8;
    v10 = v7 + 2;
    __asm { FMOV            V4.2D, #0.5 }
    v49 = _Q4;
    while (1)
    {
      v20 = v10[-2];
      v19 = v10[-1];
      v21 = v10[1];
      v22 = v10[2].f64[0];
      v23 = vsubq_f64(v21, v19);
      _Q17 = vmulq_f64(vsubq_f64(v20, v19), _Q4);
      v25 = vmuld_lane_f64(0.5, vsubq_f64(*v10, v21), 1);
      v26 = vmuld_n_f64(0.5, v23.f64[0]);
      v50.f64[0] = v25;
      v50.f64[1] = v26;
      _D14 = _Q17.f64[1];
      __asm { FMLA            D13, D14, V17.D[1] }
      v29 = vaddq_f64(v20, *v10).f64[0] + v22;
      if (v29 > 2.999712)
        break;
      if (v29 > -0.98)
      {
        v46 = _Q17;
        v30 = acos(v29 * 0.5 + -0.5);
        _Q4 = v49;
        v31.f64[0] = v30 / sqrt(_D13);
        *(_QWORD *)&v16 = *(_OWORD *)&vmulq_laneq_f64(v31, v46, 1);
        v17 = vmulq_n_f64(v50, v31.f64[0]);
        goto LABEL_4;
      }
      v44 = v10[-1];
      v45 = v10[1];
      v47 = v10[-2];
      v48 = *v10;
      v32 = asin(sqrt(_D13));
      v33.f64[0] = (3.14159265 - v32) * (3.14159265 - v32) / (1.5 - v29 * 0.5);
      v34 = (v48.f64[0] - v29 * 0.5 + 0.5) * v33.f64[0];
      v35 = v33.f64[0] * (v47.f64[0] - v29 * 0.5 + 0.5);
      v36.f64[0] = v33.f64[0] * (v22 - v29 * 0.5 + 0.5);
      if (v34 >= v35)
      {
        if (v36.f64[0] >= v34)
        {
          v16 = sqrt(v36.f64[0]);
          if (_D14 < 0.0)
            v16 = -v16;
          v36.f64[0] = 1.0 / v16;
          v41.f64[0] = v44.f64[0];
          v41.f64[1] = v48.f64[1];
          goto LABEL_26;
        }
        v40 = sqrt(v34);
        if (v26 >= 0.0)
          v18 = v40;
        else
          v18 = -v40;
        v38 = 1.0 / v18;
        v17.f64[0] = 1.0 / v18 * vmuld_lane_f64(v33.f64[0], vaddq_f64(v44, v47), 1) * 0.5;
        v39 = vmuld_lane_f64(v33.f64[0], vaddq_f64(v45, v48), 1);
      }
      else
      {
        if (v36.f64[0] >= v35)
        {
          v16 = sqrt(v36.f64[0]);
          if (_D14 < 0.0)
            v16 = -v16;
          v36.f64[0] = 1.0 / v16;
          v41.f64[0] = v44.f64[0];
          v41.f64[1] = v10->f64[1];
LABEL_26:
          v42 = vmulq_n_f64(vaddq_f64(v45, v41), vmulq_f64(v36, v33).f64[0]);
          _Q4 = v49;
          v17 = vmulq_f64(v42, v49);
          v18 = v17.f64[1];
          goto LABEL_5;
        }
        v37 = sqrt(v35);
        v17.f64[0] = -v37;
        if (v25 >= 0.0)
          v17.f64[0] = v37;
        v38 = 1.0 / v17.f64[0];
        v18 = 1.0 / v17.f64[0] * (v33.f64[0] * (v10[-1].f64[1] + v10[-2].f64[1])) * 0.5;
        v39 = vmuld_n_f64(v33.f64[0], vaddq_f64(v45, v44).f64[0]);
      }
      v16 = v38 * v39 * 0.5;
      _Q4 = v49;
LABEL_5:
      v9 = v18 * v18 + v17.f64[0] * v17.f64[0] + v16 * v16 + v9;
      v10 = (float64x2_t *)((char *)v10 + 72);
      if (!--v6)
      {
        *v8 = v9;
        goto LABEL_28;
      }
    }
    v23.f64[0] = _D13 * (_D13 * (_D13 * 0.0446428571 + 0.075) + 0.166666667) + 1.0;
    *(_QWORD *)&v16 = *(_OWORD *)&vmulq_laneq_f64(v23, _Q17, 1);
    v17 = vmulq_n_f64(v50, v23.f64[0]);
LABEL_4:
    v18 = v17.f64[1];
    goto LABEL_5;
  }
LABEL_28:
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396894A0(uint64_t *a1)
{
  sub_23968914C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396894C0(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396894E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  double *v15;
  __int128 v16;
  float64x2_t v17;
  long double v23;
  float64x2_t v24;
  double v25;
  int8x16_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int64x2_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  int8x16_t v46;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v14 = v8 + 32;
    v15 = (double *)(v7 + 16);
    v16 = xmmword_239EC6850;
    v17 = (float64x2_t)xmmword_239EC6840;
    __asm { FMOV            V25.2D, #1.0 }
    v41 = _Q25;
    do
    {
      *(double *)&v12 = *(v15 - 1);
      v25 = *v15;
      *(double *)&v13 = *(v15 - 2);
      v39 = *(double *)&v12 * *(double *)&v12 + *(double *)&v13 * *(double *)&v13 + v25 * v25;
      if (v39 >= 0.000000263391344)
      {
        v23 = sqrt(v39);
        v44 = v13;
        v45 = v12;
        v43 = *v15;
        v24.f64[0] = sin(v23) / v23;
        v42 = v24;
        v9.f64[0] = cos(v23);
        v25 = v43;
        v13 = v44;
        v12 = v45;
        v16 = xmmword_239EC6850;
        v11 = v42;
        _Q25 = v41;
        v17 = (float64x2_t)xmmword_239EC6840;
        v9.f64[0] = (1.0 - v9.f64[0]) / v39;
      }
      else
      {
        v9.f64[0] = v39 * (v39 * 0.00138888889 + -0.0416666667) + 0.5;
        v11.f64[0] = v39 * (v39 * (v39 * -0.000198412698 + 0.00833333333) + -0.166666667) + 1.0;
      }
      *(double *)v26.i64 = -*(double *)&v12;
      *(double *)&v26.i64[1] = -v25;
      v27.f64[0] = 0.0;
      v27.f64[1] = v25;
      v28.i64[0] = 0;
      v28.i64[1] = v13;
      *(_QWORD *)&v29.f64[0] = v12;
      v29.f64[1] = -*(double *)&v13;
      v46.i64[0] = 0;
      v46.i64[1] = v16;
      v30 = (float64x2_t)vextq_s8(v26, v28, 8uLL);
      v31 = vmulq_f64((float64x2_t)v26, v9);
      v32 = vmulq_n_f64(v27, v9.f64[0]);
      v33 = vmulq_n_f64(v30, v9.f64[0]);
      *(_QWORD *)&v34 = *(_OWORD *)&vmulq_laneq_f64(v9, (float64x2_t)v28, 1);
      v35 = vmulq_n_f64(v29, v9.f64[0]);
      v36 = vmlaq_n_f64(vmulq_n_f64(v33, v25), v35, -*(double *)&v12);
      v10.f64[0] = vmuld_n_f64(v25, v34);
      v37 = vmlaq_n_f64(vmulq_n_f64(v32, -v25), v35, *(double *)&v13);
      v35.f64[0] = vmuld_n_f64(*(double *)&v26.i64[1], v31.f64[0]);
      v31.f64[0] = vmlad_n_f64(vmuld_n_f64(*(double *)&v12, v31.f64[0]), -*(double *)&v13, v34);
      v38 = (int64x2_t)vaddq_f64(v37, vmlaq_n_f64((float64x2_t)vextq_s8(v46, (int8x16_t)*((unint64_t *)&v16 + 1), 8uLL), v30, v11.f64[0]));
      v10 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(v10, vmlaq_f64((float64x2_t)v46, (float64x2_t)v26, v11)), v38);
      *(float64x2_t *)(v14 - 32) = vaddq_f64(v36, vmlaq_n_f64(v17, v27, v11.f64[0]));
      *(float64x2_t *)(v14 - 16) = v10;
      v9 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)vaddq_f64(v35, vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)*((unint64_t *)&v16 + 1), 1), v11, (float64x2_t)v28, 1)), 8uLL);
      *(float64x2_t *)v14 = v9;
      *(float64x2_t *)(v14 + 16) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v32, *(double *)&v12), v33, -*(double *)&v13), v29, v11.f64[0]);
      *(_QWORD *)(v14 + 32) = *(_OWORD *)&vaddq_f64(v31, _Q25);
      v14 += 72;
      v15 += 3;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_239689760(uint64_t *a1)
{
  sub_2396894E0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_239689780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t i;
  int v50;
  uint64_t v51;
  float64x2_t *v52;
  uint64_t v53;
  float64x2_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  int *v60;
  const double *v61;
  uint64_t v63;
  double v64;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  const double *v89;
  uint64_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float64x2_t v106;
  float64x2_t v107;
  uint64_t v110;
  int v111;
  uint64_t v112;
  float64x2_t *v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  float64x2_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t *v128;
  float64x2_t v129;
  _OWORD *v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  float64x2_t *v139;
  float64x2_t v140;
  const double *v142;
  uint64_t v143;
  float64x2_t v144;
  float64x2_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float64x2_t v156;
  float64x2_t v157;
  uint64_t v159;
  int v160;
  uint64_t v161;
  float64x2_t *v162;
  uint64_t v163;
  float64x2_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  float64x2_t *v168;
  float64x2_t v169;
  int *v170;
  uint64_t v171;
  int64x2_t v172;
  int64x2_t v173;
  uint64_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  uint64_t v186;
  int64x2_t v188;
  uint64_t v189;
  uint64_t v190;
  float64x2_t v193;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v200;
  const double *v203;
  float64x2_t v204;
  uint64_t v206;
  float64x2_t v207;
  float64x2_t v208;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float64x2_t v220;
  float64x2_t v221;
  uint64_t v224;
  int v225;
  uint64_t v226;
  float64x2_t *v227;
  uint64_t v228;
  uint64_t v229;
  int *v230;
  uint64_t v231;
  uint64_t v232;
  float64x2_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  float64x2_t *v239;
  float64x2_t *v241;
  double v242;
  float64x2_t v243;
  float64x2_t v244;
  _OWORD *v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  float64x2_t *v254;
  float64x2_t v255;
  const double *v257;
  uint64_t v258;
  float64x2_t v259;
  float64x2_t v260;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int *v279;
  int *v280;
  uint64_t v281;
  uint64_t v282;
  int *v283;
  uint64_t v284;
  int *v285;
  uint64_t v286;
  float64x2x2_t v287;
  float64x2x2_t v288;
  float64x2x2_t v289;
  float64x2x3_t v290;

  v35 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v269 = v35[2];
  v271 = *v35;
  if ((**(_BYTE **)(a32 + 16) & 1) == 0)
  {
    v267 = a35;
    if ((**(_BYTE **)(a33 + 16) & 1) == 0)
      goto LABEL_3;
    goto LABEL_17;
  }
  v36 = *(_QWORD *)(a8 + 16);
  v37 = *(_QWORD *)(a9 + 16);
  v38 = *(_QWORD *)(a11 + 16);
  v39 = *(_QWORD *)(a12 + 16);
  v40 = *(_QWORD *)(a13 + 16);
  v268 = *(_QWORD *)(a15 + 16);
  v283 = *(int **)(a17 + 16);
  v41 = *(_QWORD *)(a18 + 16);
  v42 = *(_QWORD *)(a19 + 16);
  v43 = *(_QWORD *)(a20 + 16);
  v44 = *(_QWORD *)(a21 + 16);
  v45 = *(_QWORD *)(a22 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v271 >= 1)
  {
    for (i = 0; i != v271; ++i)
    {
      if (i)
      {
        v50 = v283[i - 1];
        v51 = v283[i];
        if (v50 < (int)v51)
          goto LABEL_12;
      }
      else
      {
        v50 = 0;
        v51 = *v283;
        if ((int)v51 > 0)
        {
LABEL_12:
          v52 = (float64x2_t *)(v45 + 24 * i);
          v53 = 3 * i + 2;
          v54 = *v52;
          v46.f64[0] = *(float64_t *)(v45 + 8 * v53);
          v55 = v51 - v50;
          v56 = (int *)(v268 + 4 * v50);
          do
          {
            v57 = *v56++;
            v58 = (float64x2_t *)(v41 + 24 * v57);
            v59 = *v58;
            v60 = (int *)(v40 + 24 * v57);
            v47.f64[0] = v58[1].f64[0];
            _Q4.f64[0] = *(float64_t *)(v36 + 8 * *v60);
            v61 = (const double *)(v42 + 72 * v57);
            v290 = vld3q_f64(v61);
            v61 += 6;
            _Q6 = *(_OWORD *)v61;
            v63 = v37 + 24 * v60[1];
            v64 = *(double *)(v63 + 16);
            _D21 = *(_QWORD *)(v63 + 8);
            v66 = v43 + 144 * v57;
            v67 = *(int64x2_t *)(v66 + 32);
            v68 = *(int64x2_t *)(v66 + 48);
            __asm { FMLA            D20, D21, V6.D[1] }
            v74 = *(int64x2_t *)(v66 + 80);
            v75 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v66, v68);
            v76 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v66, v68);
            v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v290.val[0], *(double *)v63), v290.val[1], *(float64x2_t *)v63, 1), v290.val[2], v64);
            _Q25 = *(float64x2_t *)(v66 + 96);
            v290.val[0] = *(float64x2_t *)(v66 + 112);
            v79 = 6 * v57 + 4;
            v80 = v38 + 48 * *(int *)(v40 + 4 * v79);
            v290.val[1].f64[0] = _D20 + *(double *)(v42 + 72 * v57 + 64) * v64;
            v81 = vmlaq_laneq_f64(vmulq_n_f64(v75, *(double *)v80), v76, *(float64x2_t *)v80, 1);
            _Q7 = *(_OWORD *)(v66 + 128);
            v83 = vmlaq_n_f64(v77, v59, _Q4.f64[0]);
            v84 = (float64x2_t)vzip1q_s64(v67, v74);
            v85 = (float64x2_t)vzip2q_s64(v67, v74);
            _Q21 = vmulq_f64(_Q25, *(float64x2_t *)v80);
            v290.val[2].f64[0] = *(float64_t *)(v80 + 8);
            __asm { FMLA            D21, D18, V25.D[1] }
            v290.val[1] = vmlaq_f64(v290.val[1], v47, _Q4);
            _D3 = *(_QWORD *)(v80 + 24);
            __asm { FMLA            D21, D3, V16.D[1] }
            _D3 = *(_QWORD *)(v80 + 40);
            v89 = (const double *)(v44 + 48 * v57);
            *(float64x2x2_t *)v290.val[2].f64 = vld2q_f64(v89);
            __asm { FMLA            D21, D3, V7.D[1] }
            _Q3 = *(float64x2_t *)(v44 + 8 * v79);
            v91 = v60[5];
            _Q4 = *(float64x2_t *)(v39 + 16 * v91);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v81, (float64x2_t)vzip1q_s64(*(int64x2_t *)(v66 + 16), *(int64x2_t *)(v66 + 64)), *(double *)(v80 + 16)), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v66 + 16), *(int64x2_t *)(v66 + 64)), *(float64x2_t *)(v80 + 16), 1), v84, *(double *)(v80 + 32)), v85, *(float64x2_t *)(v80 + 32), 1);
            v94 = vmlaq_laneq_f64(vmulq_n_f64(v290.val[2], _Q4.f64[0]), v93, _Q4, 1);
            _Q7 = vmulq_f64(_Q3, _Q4);
            _Q4.f64[0] = *(float64_t *)(v39 + 16 * v91 + 8);
            __asm { FMLA            D7, D4, V3.D[1] }
            v47 = vaddq_f64(vaddq_f64(v290.val[1], _Q21), _Q7);
            v54 = vsubq_f64(v54, vaddq_f64(vaddq_f64(v83, v92), v94));
            v46 = vsubq_f64(v46, v47);
            --v55;
          }
          while (v55);
          *v52 = v54;
          *(float64_t *)(v45 + 8 * v53) = v46.f64[0];
        }
      }
    }
  }
  *(_QWORD *)(a22 + 24) |= 1uLL;
  v267 = a35;
  if ((**(_BYTE **)(a33 + 16) & 1) == 0)
  {
LABEL_3:
    if ((**(_BYTE **)(a34 + 16) & 1) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
LABEL_17:
  v264 = *(_QWORD *)(a5 + 16);
  v265 = *(_QWORD *)(a3 + 16);
  v262 = *(_QWORD *)(a7 + 16);
  v263 = *(_QWORD *)(a6 + 16);
  v96 = *(_QWORD *)(a8 + 16);
  v97 = *(_QWORD *)(a10 + 16);
  v98 = *(_QWORD *)(a11 + 16);
  v99 = *(_QWORD *)(a12 + 16);
  v100 = *(_QWORD *)(a23 + 16);
  v280 = *(int **)(a27 + 16);
  v284 = *(_QWORD *)(a25 + 16);
  v101 = *(_QWORD *)(a28 + 16);
  v102 = *(_QWORD *)(a29 + 16);
  v103 = *(_QWORD *)(a30 + 16);
  v104 = *(_QWORD *)(a31 + 16);
  v105 = *(_QWORD *)(a22 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v269 >= 1)
  {
    v110 = 0;
    while (v110)
    {
      v111 = v280[v110 - 1];
      v112 = v280[v110];
      if (v111 < (int)v112)
        goto LABEL_24;
LABEL_19:
      if (++v110 == v269)
        goto LABEL_35;
    }
    v111 = 0;
    v112 = *v280;
    if ((int)v112 <= 0)
      goto LABEL_19;
LABEL_24:
    v113 = (float64x2_t *)(v105 + 24 * v110);
    v114 = 3 * v110 + 2;
    v115 = v112 - v111;
    v116 = (int *)(v284 + 4 * v111);
    while (1)
    {
      v117 = *v116;
      v118 = *(int *)(v100 + 24 * v117);
      if (v118 >> 30 != 3)
      {
        v107.f64[0] = *(float64_t *)(v105 + 8 * v114);
        v119 = (float64x2_t *)(v101 + 24 * v117);
        _Q3.f64[0] = *(float64_t *)(v96 + 8 * *(int *)(v265 + 4 * v118));
        _Q4.f64[0] = v119[1].f64[0];
        v107 = vmlsq_f64(v107, _Q4, _Q3);
        v106 = vmlsq_lane_f64(*v113, *v119, _Q3.f64[0], 0);
        *v113 = v106;
        *(float64_t *)(v105 + 8 * v114) = v107.f64[0];
      }
      v120 = 6 * v117;
      v121 = *(int *)(v100 + ((24 * v117) | 4));
      if (v121 >> 30 == 3)
      {
        v122 = v120 + 4;
        v123 = *(int *)(v100 + 4 * (v120 + 4));
        if (v123 >> 30 == 3)
          goto LABEL_30;
      }
      else
      {
        v107.f64[0] = *(float64_t *)(v105 + 8 * v114);
        v125 = v102 + 96 * v117;
        _Q3 = *(float64x2_t *)(v125 + 16);
        _Q4 = *(float64x2_t *)(v125 + 32);
        _Q6 = *(float64x2_t *)(v125 + 64);
        _Q7 = *(_OWORD *)(v125 + 80);
        v128 = (float64x2_t *)(v97 + 32 * *(int *)(v264 + 4 * v121));
        v129 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v125, (int64x2_t)_Q4), v128->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v125, (int64x2_t)_Q4), *v128, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q3, *(int64x2_t *)(v125 + 48)), v128[1].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, *(int64x2_t *)(v125 + 48)), v128[1], 1);
        _Q2 = vmulq_f64(_Q6, *v128);
        _Q3.f64[0] = v128->f64[1];
        __asm { FMLA            D2, D3, V6.D[1] }
        _Q3.f64[0] = v128[1].f64[1];
        __asm { FMLA            D2, D3, V7.D[1] }
        v106 = vsubq_f64(*v113, v129);
        v107 = vsubq_f64(v107, _Q2);
        *v113 = v106;
        *(float64_t *)(v105 + 8 * v114) = v107.f64[0];
        v122 = v120 + 4;
        v123 = *(int *)(v100 + 4 * (v120 + 4));
        if (v123 >> 30 == 3)
        {
LABEL_30:
          v124 = *(int *)(v100 + 24 * v117 + 20);
          if (v124 >> 30 != 3)
            goto LABEL_34;
          goto LABEL_25;
        }
      }
      v107.f64[0] = *(float64_t *)(v105 + 8 * v114);
      v131 = (_OWORD *)(v103 + 144 * v117);
      v132 = *(int64x2_t *)v131;
      _Q3 = *((float64x2_t *)v131 + 1);
      _Q4 = *((float64x2_t *)v131 + 2);
      v133 = *((int64x2_t *)v131 + 3);
      v134 = *((int64x2_t *)v131 + 4);
      v135 = *((int64x2_t *)v131 + 5);
      _Q16 = *((float64x2_t *)v131 + 6);
      _Q17 = v131[7];
      _Q18 = v131[8];
      v139 = (float64x2_t *)(v98 + 48 * *(int *)(v263 + 4 * v123));
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v132, v133), v139->f64[0]), (float64x2_t)vzip2q_s64(v132, v133), *v139, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q3, v134), v139[1].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, v134), v139[1], 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q4, v135), v139[2].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q4, v135), v139[2], 1);
      _Q2 = vmulq_f64(_Q16, *v139);
      _Q3.f64[0] = v139->f64[1];
      __asm { FMLA            D2, D3, V16.D[1] }
      _Q3.f64[0] = v139[1].f64[1];
      __asm { FMLA            D2, D3, V17.D[1] }
      _Q3.f64[0] = v139[2].f64[1];
      __asm { FMLA            D2, D3, V18.D[1] }
      v106 = vsubq_f64(*v113, v140);
      v107 = vsubq_f64(v107, _Q2);
      *v113 = v106;
      *(float64_t *)(v105 + 8 * v114) = v107.f64[0];
      v124 = *(int *)(v100 + 4 * v120 + 20);
      if (v124 >> 30 != 3)
      {
LABEL_34:
        v106.f64[0] = *(float64_t *)(v105 + 8 * v114);
        v142 = (const double *)(v104 + 8 * v120);
        v287 = vld2q_f64(v142);
        _Q3 = *v113;
        _Q4 = *(float64x2_t *)(v104 + 8 * v122);
        v143 = *(int *)(v262 + 4 * v124);
        v144 = *(float64x2_t *)(v99 + 16 * v143);
        v145 = vmlaq_laneq_f64(vmulq_n_f64(v287.val[0], v144.f64[0]), v287.val[1], v144, 1);
        v287.val[0] = vmulq_f64(_Q4, v144);
        v287.val[1].f64[0] = *(float64_t *)(v99 + 16 * v143 + 8);
        __asm { FMLA            D1, D2, V4.D[1] }
        v106 = vsubq_f64(v106, v287.val[0]);
        v107 = vsubq_f64(*v113, v145);
        *v113 = v107;
        *(float64_t *)(v105 + 8 * v114) = v106.f64[0];
      }
LABEL_25:
      ++v116;
      if (!--v115)
        goto LABEL_19;
    }
  }
LABEL_35:
  *(_QWORD *)(a22 + 24) |= 1uLL;
  if ((**(_BYTE **)(a34 + 16) & 1) != 0)
  {
LABEL_36:
    v146 = *(_QWORD *)(a8 + 16);
    v147 = *(_QWORD *)(a10 + 16);
    v148 = *(_QWORD *)(a11 + 16);
    v149 = *(_QWORD *)(a12 + 16);
    v150 = *(_QWORD *)(a23 + 16);
    v281 = *(_QWORD *)(a25 + 16);
    v285 = *(int **)(a27 + 16);
    v151 = *(_QWORD *)(a28 + 16);
    v152 = *(_QWORD *)(a29 + 16);
    v153 = *(_QWORD *)(a30 + 16);
    v154 = *(_QWORD *)(a31 + 16);
    v155 = *(_QWORD *)(a22 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v269 < 1)
    {
LABEL_46:
      *(_QWORD *)(a22 + 24) |= 1uLL;
      if ((**(_BYTE **)(v267 + 16) & 1) == 0)
        return 0;
      goto LABEL_47;
    }
    v159 = 0;
    while (1)
    {
      if (v159)
      {
        v160 = v285[v159 - 1];
        v161 = v285[v159];
        if (v160 < (int)v161)
          goto LABEL_42;
      }
      else
      {
        v160 = 0;
        v161 = *v285;
        if ((int)v161 > 0)
        {
LABEL_42:
          v162 = (float64x2_t *)(v155 + 24 * v159);
          v163 = 3 * v159 + 2;
          v164 = *v162;
          v156.f64[0] = *(float64_t *)(v155 + 8 * v163);
          v165 = v161 - v160;
          v166 = (int *)(v281 + 4 * v160);
          do
          {
            v167 = *v166++;
            v168 = (float64x2_t *)(v151 + 24 * v167);
            v169 = *v168;
            v157.f64[0] = v168[1].f64[0];
            v170 = (int *)(v150 + 24 * v167);
            v171 = v152 + 96 * v167;
            v172 = *(int64x2_t *)(v171 + 16);
            v173 = *(int64x2_t *)(v171 + 32);
            _Q17 = *(int64x2_t *)(v171 + 48);
            _Q6.f64[0] = *(float64_t *)(v146 + 8 * *v170);
            _Q18 = *(float64x2_t *)(v171 + 64);
            _Q19 = *(_OWORD *)(v171 + 80);
            v177 = v147 + 32 * v170[1];
            v178 = *(float64x2_t *)(v177 + 16);
            v179 = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v171, v173), *(double *)v177);
            v180 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v171, v173);
            v181 = (float64x2_t)vzip1q_s64(v172, _Q17);
            v182 = vmlaq_laneq_f64(v179, v180, *(float64x2_t *)v177, 1);
            v183 = (float64x2_t)vzip2q_s64(v172, _Q17);
            _Q4 = vmulq_f64(_Q18, *(float64x2_t *)v177);
            _Q17.i64[0] = *(_QWORD *)(v177 + 8);
            _D20 = *(_QWORD *)(v177 + 24);
            v186 = v153 + 144 * v167;
            __asm { FMLA            D4, D17, V18.D[1] }
            _Q22 = *(int64x2_t *)(v186 + 32);
            v188 = *(int64x2_t *)(v186 + 80);
            v189 = 6 * v167 + 4;
            v190 = v148 + 48 * *(int *)(v150 + 4 * v189);
            __asm { FMLA            D4, D20, V19.D[1] }
            _Q17 = *(float64x2_t *)(v186 + 96);
            _Q19 = *(_OWORD *)(v186 + 112);
            v193 = vmlaq_laneq_f64(vmlaq_n_f64(v182, v181, v178.f64[0]), v183, v178, 1);
            _Q7 = *(_OWORD *)(v186 + 128);
            v195 = *(float64x2_t *)(v190 + 32);
            v196 = (float64x2_t)vzip1q_s64(_Q22, v188);
            v197 = vmlaq_n_f64(v193, v169, _Q6.f64[0]);
            v198 = (float64x2_t)vzip2q_s64(_Q22, v188);
            _Q21 = vmulq_f64(_Q17, *(float64x2_t *)v190);
            _Q22.i64[0] = *(_QWORD *)(v190 + 8);
            __asm { FMLA            D21, D22, V17.D[1] }
            v200 = vmlaq_f64(_Q4, v157, _Q6);
            _D3 = *(_QWORD *)(v190 + 24);
            __asm { FMLA            D21, D3, V19.D[1] }
            _D3 = *(_QWORD *)(v190 + 40);
            v203 = (const double *)(v154 + 48 * v167);
            v204 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v186, *(int64x2_t *)(v186 + 48)), *(double *)v190), (float64x2_t)vzip2q_s64(*(int64x2_t *)v186, *(int64x2_t *)(v186 + 48)), *(float64x2_t *)v190, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(v186 + 16), *(int64x2_t *)(v186 + 64)), *(double *)(v190 + 16)), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v186 + 16), *(int64x2_t *)(v186 + 64)), *(float64x2_t *)(v190 + 16), 1), v196, v195.f64[0]);
            v289 = vld2q_f64(v203);
            __asm { FMLA            D21, D3, V7.D[1] }
            _Q3 = *(float64x2_t *)(v154 + 8 * v189);
            v206 = v170[5];
            _Q6 = *(float64x2_t *)(v149 + 16 * v206);
            v207 = vmlaq_laneq_f64(v204, v198, v195, 1);
            v208 = vmlaq_laneq_f64(vmulq_n_f64(v289.val[0], _Q6.f64[0]), v289.val[1], _Q6, 1);
            _Q7 = vmulq_f64(_Q3, _Q6);
            _Q6.f64[0] = *(float64_t *)(v149 + 16 * v206 + 8);
            __asm { FMLA            D7, D6, V3.D[1] }
            v157 = vaddq_f64(vaddq_f64(v200, _Q21), _Q7);
            v164 = vsubq_f64(v164, vaddq_f64(vaddq_f64(v197, v207), v208));
            v156 = vsubq_f64(v156, v157);
            --v165;
          }
          while (v165);
          *v162 = v164;
          *(float64_t *)(v155 + 8 * v163) = v156.f64[0];
        }
      }
      if (++v159 == v269)
        goto LABEL_46;
    }
  }
LABEL_4:
  if ((**(_BYTE **)(v267 + 16) & 1) == 0)
    return 0;
LABEL_47:
  v273 = *(_QWORD *)(a4 + 16);
  v274 = *(_QWORD *)(a3 + 16);
  v272 = *(_QWORD *)(a6 + 16);
  v210 = *(_QWORD *)(a8 + 16);
  v211 = *(_QWORD *)(a9 + 16);
  v212 = *(_QWORD *)(a11 + 16);
  v213 = *(_QWORD *)(a12 + 16);
  v214 = *(_QWORD *)(a13 + 16);
  v282 = *(_QWORD *)(a15 + 16);
  v286 = *(_QWORD *)(a7 + 16);
  v279 = *(int **)(a17 + 16);
  v215 = *(_QWORD *)(a18 + 16);
  v216 = *(_QWORD *)(a19 + 16);
  v217 = *(_QWORD *)(a20 + 16);
  v218 = *(_QWORD *)(a21 + 16);
  v219 = *(_QWORD *)(a22 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v271 >= 1)
  {
    v224 = 0;
    while (v224)
    {
      v225 = v279[v224 - 1];
      v226 = v279[v224];
      if (v225 < (int)v226)
        goto LABEL_54;
LABEL_49:
      if (++v224 == v271)
        goto LABEL_65;
    }
    v225 = 0;
    v226 = *v279;
    if ((int)v226 <= 0)
      goto LABEL_49;
LABEL_54:
    v227 = (float64x2_t *)(v219 + 24 * v224);
    v228 = 3 * v224 + 2;
    v229 = v226 - v225;
    v230 = (int *)(v282 + 4 * v225);
    while (1)
    {
      v231 = *v230;
      v232 = *(int *)(v214 + 24 * v231);
      if (v232 >> 30 != 3)
      {
        v221.f64[0] = *(float64_t *)(v219 + 8 * v228);
        v233 = (float64x2_t *)(v215 + 24 * v231);
        _Q3.f64[0] = *(float64_t *)(v210 + 8 * *(int *)(v274 + 4 * v232));
        _Q4.f64[0] = v233[1].f64[0];
        v221 = vmlsq_f64(v221, _Q4, _Q3);
        v220 = vmlsq_lane_f64(*v227, *v233, _Q3.f64[0], 0);
        *v227 = v220;
        *(float64_t *)(v219 + 8 * v228) = v221.f64[0];
      }
      v234 = 6 * v231;
      v235 = *(int *)(v214 + ((24 * v231) | 4));
      if (v235 >> 30 == 3)
      {
        v236 = v234 + 4;
        v237 = *(int *)(v214 + 4 * (v234 + 4));
        if (v237 >> 30 == 3)
          goto LABEL_60;
      }
      else
      {
        v221.f64[0] = *(float64_t *)(v219 + 8 * v228);
        v239 = (float64x2_t *)(v216 + 72 * v231);
        *(float64x2x3_t *)(&_Q3 - 1) = vld3q_f64(v239->f64);
        v239 += 3;
        _Q5 = *v239;
        v241 = (float64x2_t *)(v211 + 24 * *(int *)(v273 + 4 * v235));
        v242 = v241[1].f64[0];
        v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v243, v241->f64[0]), _Q3, *v241, 1), _Q4, v242);
        _Q2 = vmulq_f64(*v239, *v241);
        _Q3.f64[0] = v241->f64[1];
        __asm { FMLA            D2, D3, V5.D[1] }
        _Q2.f64[0] = _Q2.f64[0] + *(double *)(v216 + 72 * v231 + 64) * v242;
        v221 = vsubq_f64(v221, _Q2);
        v220 = vsubq_f64(*v227, v244);
        *v227 = v220;
        *(float64_t *)(v219 + 8 * v228) = v221.f64[0];
        v236 = v234 + 4;
        v237 = *(int *)(v214 + 4 * (v234 + 4));
        if (v237 >> 30 == 3)
        {
LABEL_60:
          v238 = *(int *)(v214 + 24 * v231 + 20);
          if (v238 >> 30 != 3)
            goto LABEL_64;
          goto LABEL_55;
        }
      }
      v221.f64[0] = *(float64_t *)(v219 + 8 * v228);
      v246 = (_OWORD *)(v217 + 144 * v231);
      v247 = *(int64x2_t *)v246;
      _Q3 = *((float64x2_t *)v246 + 1);
      _Q4 = *((float64x2_t *)v246 + 2);
      v248 = *((int64x2_t *)v246 + 3);
      v249 = *((int64x2_t *)v246 + 4);
      v250 = *((int64x2_t *)v246 + 5);
      _Q16 = *((float64x2_t *)v246 + 6);
      _Q17 = v246[7];
      _Q18 = v246[8];
      v254 = (float64x2_t *)(v212 + 48 * *(int *)(v272 + 4 * v237));
      v255 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v247, v248), v254->f64[0]), (float64x2_t)vzip2q_s64(v247, v248), *v254, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q3, v249), v254[1].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, v249), v254[1], 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q4, v250), v254[2].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q4, v250), v254[2], 1);
      _Q2 = vmulq_f64(_Q16, *v254);
      _Q3.f64[0] = v254->f64[1];
      __asm { FMLA            D2, D3, V16.D[1] }
      _Q3.f64[0] = v254[1].f64[1];
      __asm { FMLA            D2, D3, V17.D[1] }
      _Q3.f64[0] = v254[2].f64[1];
      __asm { FMLA            D2, D3, V18.D[1] }
      v220 = vsubq_f64(*v227, v255);
      v221 = vsubq_f64(v221, _Q2);
      *v227 = v220;
      *(float64_t *)(v219 + 8 * v228) = v221.f64[0];
      v238 = *(int *)(v214 + 4 * v234 + 20);
      if (v238 >> 30 != 3)
      {
LABEL_64:
        v220.f64[0] = *(float64_t *)(v219 + 8 * v228);
        v257 = (const double *)(v218 + 8 * v234);
        v288 = vld2q_f64(v257);
        _Q3 = *v227;
        _Q4 = *(float64x2_t *)(v218 + 8 * v236);
        v258 = *(int *)(v286 + 4 * v238);
        v259 = *(float64x2_t *)(v213 + 16 * v258);
        v260 = vmlaq_laneq_f64(vmulq_n_f64(v288.val[0], v259.f64[0]), v288.val[1], v259, 1);
        v288.val[0] = vmulq_f64(_Q4, v259);
        v288.val[1].f64[0] = *(float64_t *)(v213 + 16 * v258 + 8);
        __asm { FMLA            D1, D2, V4.D[1] }
        v220 = vsubq_f64(v220, v288.val[0]);
        v221 = vsubq_f64(*v227, v260);
        *v227 = v221;
        *(float64_t *)(v219 + 8 * v228) = v220.f64[0];
      }
LABEL_55:
      ++v230;
      if (!--v229)
        goto LABEL_49;
    }
  }
LABEL_65:
  *(_QWORD *)(a22 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968A670(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_239689780(*a1, a2, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], v3, a1[14], v4, a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    v5,
    a1[24],
    v6,
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31],
    a1[32],
    a1[33],
    a1[34]);
  return 0;
}

uint64_t sub_23968A6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v18;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v9 = (double *)(v8 + 16);
    v10 = v7 + 32;
    do
    {
      _Q2 = *(int8x16_t *)v10;
      _D3 = *((_QWORD *)v9 - 1);
      __asm { FMLA            D1, D3, V2.D[1] }
      v18 = _D1 + *(double *)(v10 + 32) * *v9;
      *((float64x2_t *)v9 - 1) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v10 - 32), *(v9 - 2)), (float64x2_t)vextq_s8(*(int8x16_t *)(v10 - 16), *(int8x16_t *)v10, 8uLL), *(float64x2_t *)(v9 - 2), 1), *(float64x2_t *)(v10 + 16), *v9);
      *v9 = v18;
      v9 += 3;
      v10 += 72;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968A7B8(uint64_t *a1)
{
  sub_23968A6F0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968A7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  __int128 v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v44;
  float64x2_t v46;
  __int128 v48;
  int8x16_t v49;
  float64x2_t v50;
  uint64_t v51;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int8x16_t v61;
  float64x2_t v62;
  int8x16_t v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  _BYTE v70[24];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(double **)(a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v10 = 0;
    v11 = *v7;
    v12 = v68;
    v13 = v69;
    v14 = v74;
    do
    {
      v15 = (double *)(v8 + 72 * v10);
      v16 = v15[1];
      v17 = *v15 + v11;
      *v15 = v17;
      v18 = v15[4] + v11;
      v15[4] = v18;
      v19 = 9 * v10 + 8;
      v20 = *(double *)(v8 + 8 * v19) + v11;
      *(double *)(v8 + 8 * v19) = v20;
      v54 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v57 = 0.0;
      v58 = v17;
      v21 = fmax(v17, 0.0);
      if (v17 == 0.0)
      {
        v22 = v17;
      }
      else
      {
        v16 = v16 / v17;
        v9 = v18 - v16 * v16 * v58;
        v59 = v9;
        v21 = fmax(v9, v21);
        v22 = fmin(v9, v17);
        *(_QWORD *)&v55 = 0x3FF0000000000000;
      }
      v23 = 0;
      v24 = v17 != 0.0;
      do
      {
        while (1)
        {
          if (v24)
          {
            v25 = 3 * v23 + 2;
            v53[v25] = *(_QWORD *)(v8 + 24 * (3 * v10 + v23) + 16);
            if (v23)
              *((double *)&v55 + 1) = *((double *)&v55 + 1) - v17 * (*(double *)&v54 * v16);
            v26 = *(&v58 + v23);
            if (v26 != 0.0)
              break;
          }
          v24 = 0;
          if (++v23 == 2)
            goto LABEL_3;
        }
        *(double *)&v53[v25] = *(double *)&v53[v25] / v26;
        ++v23;
        v24 = 1;
      }
      while (v23 != 2);
      v27 = v20 - *(double *)&v54 * *(double *)&v54 * v58 - *((double *)&v55 + 1) * *((double *)&v55 + 1) * v59;
      v60 = v27;
      v28 = fmin(v27, v22);
      v57 = 1.0;
      if (v28 > 0.0 && fmax(v27, v21) / v28 < 100000000.0)
      {
        v62.f64[1] = 0.0;
        v64 = 0uLL;
        v61.i64[0] = 0x3FF0000000000000;
        *(double *)&v61.i64[1] = 0.0 - v16;
        v62.f64[0] = 0.0 - *(double *)&v54 - *((double *)&v55 + 1) * (0.0 - v16);
        v66 = 1.0 / v17;
        v67 = 1.0 / v9;
        *(double *)v63.i64 = 1.0 / *(double *)&v55;
        *(double *)&v63.i64[1] = 0.0 - *((double *)&v55 + 1) * (1.0 / *(double *)&v55) / *(double *)&v55;
        v14 = 1.0 / v27;
        _D17 = 1.0 / v57;
        v65 = 1.0 / v57;
        *(double *)&v13 = 1.0 / v17;
        *((double *)&_Q18 + 1) = 1.0 / v9;
        _V19.D[1] = 0.0 - v16;
        _Q20.i64[1] = 0;
        _V21.D[1] = *(double *)&v63.i64[1];
        _V22.D[1] = 0;
        v35 = vmulq_n_f64((float64x2_t)0x3FF0000000000000uLL, 1.0 / v17);
        *((_QWORD *)&v13 + 1) = 0;
        *(_QWORD *)v70 = 0;
        *(_QWORD *)&_Q18 = 0;
        *(_OWORD *)&v70[8] = _Q18;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        _Q26 = (float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v9);
        v37.f64[0] = v62.f64[0];
        v37.f64[1] = *(double *)&v63.i64[1];
        v38 = vmlaq_n_f64(v35, v37, 0.0);
        _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)0x3FF0000000000000uLL, *(float64x2_t *)v70, 1), (float64x2_t)vextq_s8(v61, v63, 8uLL), 1.0 / v9), v37, _Q26, 1);
        __asm
        {
          FMLA            D18, D26, V22.D[1]
          FMLA            D18, D17, V26.D[1]
        }
        v44 = vmulq_n_f64(v37, 1.0 / v27);
        _D27 = 1.0 / v57 * (1.0 / v27);
        v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, 1.0), _Q23, (float64x2_t)v61, 1), v44, v62.f64[0]);
        __asm { FMLA            D29, D18, V19.D[1] }
        *(double *)&v48 = vmlad_n_f64(_D29, _D27, v62.f64[0]);
        v49 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v38, v62, 1), _Q23, 1.0 / *(double *)&v55), v44, (float64x2_t)v63, 1);
        __asm { FMLA            D20, D27, V21.D[1] }
        v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, 0.0), _Q23, (float64x2_t)0, 1), v44, 1.0 / v57);
        __asm { FMLA            D23, D18, V22.D[1] }
        *(float64x2_t *)v15 = v46;
        *((_QWORD *)&v48 + 1) = v49.i64[0];
        v51 = v8 + 72 * v10;
        *(_OWORD *)(v51 + 16) = v48;
        *((int8x16_t *)v15 + 2) = vextq_s8(v49, _Q20, 8uLL);
        *(float64x2_t *)(v51 + 48) = v50;
        *(double *)(v8 + 8 * v19) = _Q23.f64[0] + _D17 * v14 * _D17;
        v12 = v14;
      }
LABEL_3:
      ++v10;
    }
    while (v10 != v6);
    *(double *)&v53[1] = v16;
    v53[0] = 0x3FF0000000000000;
    v68 = v12;
    v69 = v13;
    v74 = v14;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968AB50(uint64_t *a1)
{
  sub_23968A7D8(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968AB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  __int128 v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v44;
  float64x2_t v46;
  __int128 v48;
  int8x16_t v49;
  float64x2_t v50;
  uint64_t v51;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int8x16_t v61;
  float64x2_t v62;
  int8x16_t v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  _BYTE v70[24];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;

  v5 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v6 = *v5;
  v7 = *(double **)(a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v6 >= 1)
  {
    v10 = 0;
    v11 = *v7 + 1.0;
    v12 = v68;
    v13 = v69;
    v14 = v74;
    do
    {
      v15 = (double *)(v8 + 72 * v10);
      v16 = v15[1];
      v17 = *v15 * v11;
      *v15 = v17;
      v18 = v15[4] * v11;
      v15[4] = v18;
      v19 = 9 * v10 + 8;
      v20 = *(double *)(v8 + 8 * v19) * v11;
      *(double *)(v8 + 8 * v19) = v20;
      v54 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v57 = 0.0;
      v58 = v17;
      v21 = fmax(v17, 0.0);
      if (v17 == 0.0)
      {
        v22 = v17;
      }
      else
      {
        v16 = v16 / v17;
        v9 = v18 - v16 * v16 * v58;
        v59 = v9;
        v21 = fmax(v9, v21);
        v22 = fmin(v9, v17);
        *(_QWORD *)&v55 = 0x3FF0000000000000;
      }
      v23 = 0;
      v24 = v17 != 0.0;
      do
      {
        while (1)
        {
          if (v24)
          {
            v25 = 3 * v23 + 2;
            v53[v25] = *(_QWORD *)(v8 + 24 * (3 * v10 + v23) + 16);
            if (v23)
              *((double *)&v55 + 1) = *((double *)&v55 + 1) - v17 * (*(double *)&v54 * v16);
            v26 = *(&v58 + v23);
            if (v26 != 0.0)
              break;
          }
          v24 = 0;
          if (++v23 == 2)
            goto LABEL_3;
        }
        *(double *)&v53[v25] = *(double *)&v53[v25] / v26;
        ++v23;
        v24 = 1;
      }
      while (v23 != 2);
      v27 = v20 - *(double *)&v54 * *(double *)&v54 * v58 - *((double *)&v55 + 1) * *((double *)&v55 + 1) * v59;
      v60 = v27;
      v28 = fmin(v27, v22);
      v57 = 1.0;
      if (v28 > 0.0 && fmax(v27, v21) / v28 < 100000000.0)
      {
        v62.f64[1] = 0.0;
        v64 = 0uLL;
        v61.i64[0] = 0x3FF0000000000000;
        *(double *)&v61.i64[1] = 0.0 - v16;
        v62.f64[0] = 0.0 - *(double *)&v54 - *((double *)&v55 + 1) * (0.0 - v16);
        v66 = 1.0 / v17;
        v67 = 1.0 / v9;
        *(double *)v63.i64 = 1.0 / *(double *)&v55;
        *(double *)&v63.i64[1] = 0.0 - *((double *)&v55 + 1) * (1.0 / *(double *)&v55) / *(double *)&v55;
        v14 = 1.0 / v27;
        _D17 = 1.0 / v57;
        v65 = 1.0 / v57;
        *(double *)&v13 = 1.0 / v17;
        *((double *)&_Q18 + 1) = 1.0 / v9;
        _V19.D[1] = 0.0 - v16;
        _Q20.i64[1] = 0;
        _V21.D[1] = *(double *)&v63.i64[1];
        _V22.D[1] = 0;
        v35 = vmulq_n_f64((float64x2_t)0x3FF0000000000000uLL, 1.0 / v17);
        *((_QWORD *)&v13 + 1) = 0;
        *(_QWORD *)v70 = 0;
        *(_QWORD *)&_Q18 = 0;
        *(_OWORD *)&v70[8] = _Q18;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        _Q26 = (float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v9);
        v37.f64[0] = v62.f64[0];
        v37.f64[1] = *(double *)&v63.i64[1];
        v38 = vmlaq_n_f64(v35, v37, 0.0);
        _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)0x3FF0000000000000uLL, *(float64x2_t *)v70, 1), (float64x2_t)vextq_s8(v61, v63, 8uLL), 1.0 / v9), v37, _Q26, 1);
        __asm
        {
          FMLA            D18, D26, V22.D[1]
          FMLA            D18, D17, V26.D[1]
        }
        v44 = vmulq_n_f64(v37, 1.0 / v27);
        _D27 = 1.0 / v57 * (1.0 / v27);
        v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, 1.0), _Q23, (float64x2_t)v61, 1), v44, v62.f64[0]);
        __asm { FMLA            D29, D18, V19.D[1] }
        *(double *)&v48 = vmlad_n_f64(_D29, _D27, v62.f64[0]);
        v49 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v38, v62, 1), _Q23, 1.0 / *(double *)&v55), v44, (float64x2_t)v63, 1);
        __asm { FMLA            D20, D27, V21.D[1] }
        v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, 0.0), _Q23, (float64x2_t)0, 1), v44, 1.0 / v57);
        __asm { FMLA            D23, D18, V22.D[1] }
        *(float64x2_t *)v15 = v46;
        *((_QWORD *)&v48 + 1) = v49.i64[0];
        v51 = v8 + 72 * v10;
        *(_OWORD *)(v51 + 16) = v48;
        *((int8x16_t *)v15 + 2) = vextq_s8(v49, _Q20, 8uLL);
        *(float64x2_t *)(v51 + 48) = v50;
        *(double *)(v8 + 8 * v19) = _Q23.f64[0] + _D17 * v14 * _D17;
        v12 = v14;
      }
LABEL_3:
      ++v10;
    }
    while (v10 != v6);
    *(double *)&v53[1] = v16;
    v53[0] = 0x3FF0000000000000;
    v68 = v12;
    v69 = v13;
    v74 = v14;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968AEEC(uint64_t *a1)
{
  sub_23968AB70(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23968AF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  double v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  float64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v40;
  float64x2_t v42;
  __int128 v44;
  int8x16_t v45;
  float64x2_t v46;
  uint64_t v47;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int8x16_t v57;
  float64x2_t v58;
  int8x16_t v59;
  __int128 v60;
  double v61;
  double v62;
  double v63;
  double v64;
  __int128 v65;
  _BYTE v66[24];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;

  v4 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v5 = *v4;
  v6 = *(_QWORD *)(a3 + 16);
  halide_copy_to_host();
  if ((int)v5 >= 1)
  {
    v8 = 0;
    v9 = v64;
    v10 = v65;
    v11 = v70;
    do
    {
      v12 = 9 * v8;
      v13 = (double *)(v6 + 72 * v8);
      v53 = 0.0;
      v51 = 0uLL;
      v52 = 0uLL;
      v50 = 0uLL;
      v15 = *v13;
      v14 = v13[1];
      v54 = v15;
      v16 = fmax(v15, 0.0);
      if (v15 == 0.0)
      {
        v17 = v15;
      }
      else
      {
        v14 = v14 / v15;
        v7 = v13[4] - v14 * v14 * v54;
        v55 = v7;
        v16 = fmax(v7, v16);
        v17 = fmin(v7, v15);
        *(_QWORD *)&v51 = 0x3FF0000000000000;
      }
      v18 = 0;
      v19 = v15 != 0.0;
      do
      {
        while (1)
        {
          if (v19)
          {
            v20 = 3 * v18 + 2;
            v49[v20] = *(_QWORD *)(v6 + 24 * (3 * v8 + v18) + 16);
            if (v18)
              *((double *)&v51 + 1) = *((double *)&v51 + 1) - v15 * (*(double *)&v50 * v14);
            v21 = *(&v54 + v18);
            if (v21 != 0.0)
              break;
          }
          v19 = 0;
          if (++v18 == 2)
            goto LABEL_3;
        }
        *(double *)&v49[v20] = *(double *)&v49[v20] / v21;
        ++v18;
        v19 = 1;
      }
      while (v18 != 2);
      v22 = v12 + 8;
      v23 = *(double *)(v6 + 8 * (v12 + 8))
          - *(double *)&v50 * *(double *)&v50 * v54
          - *((double *)&v51 + 1) * *((double *)&v51 + 1) * v55;
      v56 = v23;
      v24 = fmin(v23, v17);
      v53 = 1.0;
      if (v24 > 0.0 && fmax(v23, v16) / v24 < 100000000.0)
      {
        v58.f64[1] = 0.0;
        v60 = 0uLL;
        v57.i64[0] = 0x3FF0000000000000;
        *(double *)&v57.i64[1] = 0.0 - v14;
        v58.f64[0] = 0.0 - *(double *)&v50 - *((double *)&v51 + 1) * (0.0 - v14);
        v62 = 1.0 / v15;
        v63 = 1.0 / v7;
        *(double *)v59.i64 = 1.0 / *(double *)&v51;
        *(double *)&v59.i64[1] = 0.0 - *((double *)&v51 + 1) * (1.0 / *(double *)&v51) / *(double *)&v51;
        v11 = 1.0 / v23;
        _D16 = 1.0 / v53;
        v61 = 1.0 / v53;
        *(double *)&v10 = 1.0 / v15;
        *((double *)&_Q17 + 1) = 1.0 / v7;
        _V18.D[1] = 0.0 - v14;
        _Q19.i64[1] = 0;
        _V20.D[1] = *(double *)&v59.i64[1];
        _V21.D[1] = 0;
        v31 = vmulq_n_f64((float64x2_t)0x3FF0000000000000uLL, 1.0 / v15);
        *((_QWORD *)&v10 + 1) = 0;
        *(_QWORD *)v66 = 0;
        *(_QWORD *)&_Q17 = 0;
        *(_OWORD *)&v66[8] = _Q17;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        _Q25 = (float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v7);
        v33.f64[0] = v58.f64[0];
        v33.f64[1] = *(double *)&v59.i64[1];
        v34 = vmlaq_n_f64(v31, v33, 0.0);
        _Q22 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)0x3FF0000000000000uLL, *(float64x2_t *)v66, 1), (float64x2_t)vextq_s8(v57, v59, 8uLL), 1.0 / v7), v33, _Q25, 1);
        __asm
        {
          FMLA            D17, D25, V21.D[1]
          FMLA            D17, D16, V25.D[1]
        }
        v40 = vmulq_n_f64(v33, 1.0 / v23);
        _D26 = 1.0 / v53 * (1.0 / v23);
        v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, 1.0), _Q22, (float64x2_t)v57, 1), v40, v58.f64[0]);
        __asm { FMLA            D28, D17, V18.D[1] }
        *(double *)&v44 = vmlad_n_f64(_D28, _D26, v58.f64[0]);
        v45 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v34, v58, 1), _Q22, 1.0 / *(double *)&v51), v40, (float64x2_t)v59, 1);
        __asm { FMLA            D19, D26, V20.D[1] }
        v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, 0.0), _Q22, (float64x2_t)0, 1), v40, 1.0 / v53);
        __asm { FMLA            D22, D17, V21.D[1] }
        *(float64x2_t *)v13 = v42;
        *((_QWORD *)&v44 + 1) = v45.i64[0];
        v47 = v6 + 72 * v8;
        *(_OWORD *)(v47 + 16) = v44;
        *(int8x16_t *)(v47 + 32) = vextq_s8(v45, _Q19, 8uLL);
        *(float64x2_t *)(v47 + 48) = v46;
        *(double *)(v6 + 8 * v22) = _Q22.f64[0] + _D16 * v11 * _D16;
        v9 = v11;
      }
LABEL_3:
      ++v8;
    }
    while (v8 != v5);
    *(double *)&v49[1] = v14;
    v49[0] = 0x3FF0000000000000;
    v64 = v9;
    v65 = v10;
    v70 = v11;
  }
  *(_QWORD *)(a3 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23968B240(uint64_t *a1, uint64_t a2)
{
  sub_23968AF0C(*a1, a2, a1[2]);
  return 0;
}

uint64_t sub_23968B260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  float64x2_t v66;
  float64x2_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int extent;
  int v78;
  int v79;
  double *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  unint64_t v94;
  int *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float64x2_t v109;
  double *v110;
  uint64_t v111;
  uint64_t v112;
  float64x2_t *v113;
  float64x2_t *v114;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  uint64_t v134;
  float64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  float64x2_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float64x2_t v156;
  double *v157;
  uint64_t v158;
  float64x2_t *v159;
  float64x2_t *v160;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v174;
  float64x2_t v175;
  uint64_t v177;
  float64x2_t v178;
  int64x2_t v179;
  int8x16_t v180;
  int64x2_t v181;
  float64x2_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int *v205;
  int *v206;
  int *v207;
  int *v208;
  float64x2_t v209;
  float64x2_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  float64x2_t *v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t *v220;
  float64x2_t v221;
  float64x2_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  float64x2_t *v238;
  float64x2_t *v239;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v248;
  float64x2_t v250;
  uint64_t v253;
  float64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  float64x2_t v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  float64x2_t *v262;
  float64x2_t *v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t *v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  int v311;
  float64x2_t *v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t *v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  __int128 *v325;
  double *v330;
  __int128 *v331;
  double *v339;
  __int128 v340;
  __int128 *v341;
  double *v346;
  double v347;
  float64x2_t *v348;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v360;
  float64x2_t v362;
  float64x2_t v364;
  uint64_t v366;
  float64x2_t v367;
  int64x2_t v368;
  float64x2_t v369;
  int64x2_t v370;
  float64x2_t v371;
  int64x2_t v372;
  float64x2_t v373;
  int64x2_t v374;
  int8x16_t v375;
  int64x2_t v376;
  float64x2_t v377;
  int64x2_t v378;
  int8x16_t v379;
  float64x2_t v380;
  int64x2_t v381;
  float64x2_t *v382;
  float64x2_t v385;
  float64x2_t v387;
  uint64_t v389;
  float64x2_t v390;
  int64x2_t v391;
  int64x2_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  int v397;
  int v398;
  int v399;
  uint64_t v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  int v414;
  int v415;
  int v416;
  int v417;
  uint64_t v418;
  int *v419;
  int *v420;
  int *v421;
  int *v422;
  uint64_t v423;
  uint64_t v424;
  float64x2_t v425;
  float64x2_t v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  float64x2_t v432;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int v438;
  uint64_t v439;
  unsigned int v440;
  __int128 *v441;
  double *v446;
  double v447;
  float64x2_t *v449;
  float64x2_t *v450;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t *v458;
  float64x2_t v461;
  uint64_t v464;
  float64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  float64x2_t v468;
  float64x2_t *v469;
  float64x2_t *v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t *v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  uint64_t v518;
  uint64_t v519;
  float64x2_t v520;
  uint64_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t *v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  uint64_t v535;
  __int128 *v536;
  double *v541;
  __int128 v542;
  __int128 *v543;
  double *v551;
  float64x2_t v552;
  uint64_t v556;
  float64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  float64x2_t v560;
  float64x2_t *v561;
  float64x2_t v568;
  uint64_t v575;
  float64x2_t v576;
  int64x2_t v577;
  float64x2_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  float64x2_t v582;
  int64x2_t v583;
  float64x2_t v584;
  int64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t *v590;
  float64x2_t v591;
  unint64_t v592;
  uint64_t v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  uint64_t v613;
  int v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  float64x2_t v623;
  uint64_t v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  float64x2_t *v632;
  int8x16_t *v633;
  int8x16_t *v634;
  float64x2_t *v635;
  uint64_t v636;
  uint64_t v637;
  float64x2_t *v638;
  int *v639;
  float64x2_t v640;
  float64x2_t v641;
  uint64_t v643;
  uint64_t v644;
  float64x2_t v646;
  float64x2_t v652;
  float64x2_t v655;
  float64x2_t v657;
  int64x2_t v660;
  int64x2_t v661;
  float64x2_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v669;
  double v671;
  uint64_t v673;
  uint64_t v675;
  uint64_t v676;
  unsigned int v677;
  uint64_t v678;
  unsigned int v679;
  unsigned int v680;
  __int128 *v681;
  double *v686;
  float64x2_t *v687;
  float64x2_t *v695;
  float64x2_t v696;
  __int128 *v697;
  double *v702;
  double v703;
  float64x2_t v704;
  float64x2_t v705;
  uint64_t v706;
  float64x2_t *v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v711;
  float64x2_t v713;
  uint64_t v715;
  float64x2_t *v716;
  float64x2_t v718;
  float64x2_t v721;
  float64x2_t v723;
  uint64_t v725;
  int64x2_t v726;
  int64x2_t v727;
  uint64_t v728;
  unsigned int v729;
  unsigned int v730;
  float64x2_t *v731;
  uint64_t v733;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v742;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v747;
  float64x2_t v749;
  uint64_t v750;
  float64x2_t v751;
  int64x2_t v752;
  float64x2_t v753;
  int64x2_t v754;
  float64x2_t v755;
  int64x2_t v756;
  int64x2_t v757;
  int64x2_t v758;
  float64x2_t v759;
  int64x2_t v760;
  uint64_t v761;
  const double *v762;
  uint64_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v769;
  uint64_t v770;
  float64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  uint64_t v774;
  uint64_t v775;
  int64x2_t v776;
  int64x2_t v777;
  const double *v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t *v781;
  uint64_t v782;
  float64x2_t *v783;
  float64x2_t v784;
  float64x2_t v785;
  uint64_t v786;
  float64x2_t *v787;
  uint64_t v788;
  uint64_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t *v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t *v821;
  unsigned int v822;
  uint64_t v823;
  const double *v824;
  int64x2_t v825;
  int64x2_t v826;
  float64x2_t *v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t *v835;
  float64x2_t v836;
  float64x2_t v837;
  uint64_t v838;
  uint64_t v839;
  float64x2_t *v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t *v847;
  uint64_t v848;
  float64x2_t *v849;
  float64x2_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  uint64_t v854;
  int v855;
  int v856;
  int v857;
  uint64_t v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  uint64_t v871;
  int v872;
  int v873;
  int v874;
  int v875;
  uint64_t v876;
  int v877;
  int v878;
  int v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  float64x2_t v887;
  float64x2_t v888;
  uint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  int64x2_t v893;
  int8x16_t v894;
  float64x2_t *v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  uint64_t v899;
  float64x2_t *v900;
  int *v901;
  float64x2_t v902;
  float64x2_t v903;
  uint64_t v904;
  uint64_t v912;
  int *v914;
  int v915;
  uint64_t v916;
  double v918;
  uint64_t v920;
  double v921;
  uint64_t v923;
  int64x2_t v924;
  int64x2_t v925;
  double *v934;
  __int128 v935;
  double v936;
  double v937;
  double v938;
  float64x2_t *v939;
  double v942;
  float64x2_t v944;
  uint64_t v951;
  float64x2_t *v952;
  float64x2_t v953;
  float64x2_t v954;
  float64_t v955;
  uint64_t v956;
  int8x16_t *v957;
  double *v961;
  float64x2_t v963;
  float64x2_t v964;
  int8x16_t v965;
  float64x2_t v966;
  uint64_t v967;
  uint64_t v969;
  float64x2_t *v970;
  uint64_t v971;
  float64x2_t v972;
  float64x2_t v975;
  float64x2_t v980;
  float64x2_t v982;
  float64x2_t v984;
  uint64_t v985;
  float64x2_t v986;
  int64x2_t v987;
  float64x2_t v988;
  int64x2_t v989;
  float64x2_t *v990;
  int8x16_t v992;
  float64x2_t v995;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1003;
  int64x2_t v1004;
  float64x2_t v1006;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1011;
  uint64_t v1013;
  float64x2_t v1014;
  int64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  int64x2_t v1019;
  int64x2_t v1020;
  int64x2_t v1021;
  int8x16_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  int64x2_t v1026;
  int64x2_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  uint64_t v1030;
  const double *v1031;
  float64x2_t *v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1037;
  uint64_t v1038;
  float64x2_t v1039;
  int64x2_t v1040;
  int64x2_t v1041;
  int8x16_t v1042;
  uint64_t v1043;
  int64x2_t v1044;
  const double *v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t *v1048;
  float64x2_t v1049;
  uint64_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  uint64_t v1071;
  float64x2_t *v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t *v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2x2_t *v1086;
  float64x2_t v1087;
  uint64_t v1088;
  const double *v1089;
  int64x2_t v1090;
  int64x2_t v1091;
  float64x2_t *v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  uint64_t v1095;
  float64x2_t v1096;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t *v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  int64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t *v1109;
  float64x2_t *v1110;
  unint64_t v1111;
  int *v1112;
  int v1113;
  int v1114;
  int v1115;
  int v1116;
  int v1117;
  int v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  int *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  float64x2_t *v1127;
  uint64_t v1128;
  float64x2_t *v1129;
  float64x2_t *v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t *v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  unint64_t v1165;
  unint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  unint64_t v1170;
  int *v1171;
  int v1172;
  int v1173;
  int v1174;
  int v1175;
  int v1176;
  int v1177;
  int v1178;
  uint64_t v1179;
  int *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  float64x2_t *v1185;
  uint64_t v1186;
  float64x2_t *v1187;
  float64x2_t *v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t *v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  unint64_t v1223;
  uint64_t v1224;
  int v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  int v1229;
  int v1230;
  int v1231;
  int v1232;
  int v1233;
  int v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  int v1239;
  int v1240;
  int v1241;
  int v1242;
  int v1243;
  int v1244;
  int *v1245;
  int *v1246;
  int *v1247;
  int *v1248;
  uint64_t v1249;
  uint64_t v1250;
  int *v1251;
  uint64_t v1252;
  float64x2_t *v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t *v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1270;
  unsigned int v1271;
  unsigned int v1272;
  uint64_t v1273;
  int v1274;
  uint64_t v1275;
  float64x2_t *v1276;
  float64x2_t *v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t *v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  unsigned int v1303;
  uint64_t v1304;
  int v1305;
  uint64_t v1306;
  float64x2_t *v1307;
  float64x2_t *v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t *v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  int v1358;
  float64x2_t *v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t *v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  __int128 *v1372;
  double *v1378;
  __int128 v1379;
  __int128 *v1380;
  double *v1388;
  __int128 v1389;
  __int128 *v1390;
  double *v1395;
  double v1396;
  float64x2_t *v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  float64x2_t *v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t *v1424;
  float64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t *v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  unint64_t v1432;
  unint64_t v1433;
  unint64_t v1434;
  int v1435;
  int v1436;
  int v1437;
  uint64_t v1438;
  int v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  int v1444;
  int v1445;
  int v1446;
  int v1447;
  int v1448;
  int v1449;
  int v1450;
  uint64_t v1451;
  int v1452;
  int v1453;
  int v1454;
  int v1455;
  uint64_t v1456;
  int *v1457;
  int *v1458;
  int *v1459;
  int *v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  int *v1464;
  uint64_t v1465;
  float64x2_t v1468;
  uint64_t v1471;
  unsigned int v1472;
  uint64_t v1473;
  unsigned int v1474;
  uint64_t v1475;
  unsigned int v1476;
  __int128 *v1477;
  double *v1482;
  double v1483;
  float64x2_t *v1484;
  float64x2_t *v1485;
  float64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t *v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t *v1499;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t *v1504;
  float64x2_t *v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t *v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  float64x2_t v1557;
  uint64_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t *v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  uint64_t v1573;
  __int128 *v1574;
  double *v1580;
  __int128 v1581;
  __int128 *v1582;
  double *v1590;
  __int128 v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t *v1600;
  float64x2_t v1601;
  float64x2_t v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  float64x2_t v1608;
  float64x2_t *v1609;
  float64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t v1625;
  float64x2_t *v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1629;
  float64x2_t v1630;
  float64x2_t v1631;
  float64x2_t v1632;
  float64x2_t v1633;
  float64x2_t v1634;
  float64x2_t v1635;
  float64x2_t v1636;
  float64x2_t v1637;
  float64x2_t v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t *v1642;
  float64x2_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  int v1646;
  int v1647;
  int v1648;
  uint64_t v1649;
  int v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  int v1657;
  int v1658;
  int v1659;
  int v1660;
  int v1661;
  int v1662;
  int v1663;
  int v1664;
  int v1665;
  uint64_t v1666;
  int v1667;
  int v1668;
  int v1669;
  int v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  float64x2_t v1680;
  uint64_t v1681;
  int v1682;
  uint64_t v1683;
  float64x2_t *v1684;
  int64x2_t v1685;
  float64x2_t v1686;
  float64x2_t v1687;
  float64x2_t v1688;
  uint64_t v1689;
  float64x2_t *v1690;
  int *v1691;
  float64x2_t v1692;
  float64x2_t v1695;
  float64x2_t v1697;
  float64x2_t v1699;
  int64x2_t v1701;
  float64x2_t v1702;
  float64x2_t v1703;
  uint64_t v1705;
  float64x2_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1723;
  uint64_t v1724;
  unsigned int v1725;
  uint64_t v1726;
  unsigned int v1727;
  unsigned int v1728;
  __int128 *v1729;
  double *v1735;
  __int128 v1736;
  __int128 *v1737;
  double *v1745;
  __int128 v1746;
  __int128 *v1747;
  double *v1752;
  double v1753;
  float64x2_t v1754;
  float64x2_t v1755;
  float64x2_t v1756;
  float64x2_t v1757;
  uint64_t v1758;
  float64x2_t *v1759;
  float64x2_t v1760;
  float64x2_t v1761;
  float64x2_t v1762;
  float64x2_t v1763;
  float64x2_t v1764;
  float64x2_t v1765;
  float64x2_t v1766;
  float64x2_t v1767;
  float64x2_t *v1768;
  float64x2_t *v1769;
  float64x2_t v1770;
  float64x2_t v1771;
  float64x2_t v1772;
  float64x2_t v1773;
  float64x2_t v1774;
  float64x2_t v1775;
  float64x2_t v1776;
  float64x2_t v1777;
  float64x2_t v1778;
  float64x2_t *v1779;
  float64x2_t v1780;
  float64x2_t v1781;
  float64x2_t v1782;
  float64x2_t v1783;
  float64x2_t v1784;
  float64x2_t v1785;
  float64x2_t v1786;
  uint64_t v1787;
  unsigned int v1788;
  float64x2_t *v1789;
  float64x2_t v1790;
  float64x2_t v1791;
  float64x2_t v1792;
  float64x2_t v1793;
  float64x2_t v1794;
  float64x2_t v1795;
  float64x2_t v1796;
  float64x2_t *v1797;
  float64x2_t v1798;
  float64x2_t v1799;
  float64x2_t v1800;
  float64x2_t v1801;
  float64x2_t v1802;
  float64x2_t v1803;
  float64x2_t v1804;
  float64x2_t v1805;
  unsigned int v1806;
  float64x2_t *v1807;
  float64x2_t v1808;
  float64x2_t v1809;
  float64x2_t v1810;
  float64x2_t v1811;
  float64x2_t v1812;
  float64x2_t *v1813;
  float64x2_t v1814;
  float64x2_t v1815;
  float64x2_t v1816;
  uint64_t v1817;
  float64x2_t *v1818;
  float64x2_t v1819;
  float64x2_t v1820;
  float64x2_t v1821;
  float64x2_t v1822;
  float64x2_t v1823;
  float64x2_t v1824;
  float64x2_t v1825;
  float64x2_t v1826;
  float64x2_t v1827;
  float64x2_t v1828;
  float64x2_t v1829;
  float64x2_t v1830;
  float64x2_t *v1831;
  uint64_t v1832;
  float64x2_t *v1833;
  float64x2_t v1834;
  float64x2_t v1835;
  float64x2_t v1836;
  float64x2_t v1837;
  float64x2_t v1838;
  float64x2_t v1839;
  float64x2_t v1840;
  float64x2_t v1841;
  float64x2_t v1842;
  float64x2_t v1843;
  float64x2_t v1844;
  float64x2_t v1845;
  float64x2_t v1846;
  float64x2_t v1847;
  float64x2_t v1848;
  float64x2_t v1849;
  float64x2_t v1850;
  float64x2_t v1851;
  float64x2_t v1852;
  float64x2_t v1853;
  float64x2_t *v1854;
  float64x2_t v1855;
  float64x2_t v1856;
  float64x2_t v1857;
  float64x2_t v1858;
  float64x2_t v1859;
  float64x2_t v1860;
  float64x2_t v1861;
  float64x2_t v1862;
  float64x2_t v1863;
  float64x2_t v1864;
  float64x2_t v1865;
  float64x2_t v1866;
  float64x2_t v1867;
  float64x2_t v1868;
  float64x2_t v1869;
  float64x2_t v1870;
  unsigned int v1871;
  float64x2_t *v1872;
  float64x2_t v1873;
  float64x2_t *v1874;
  float64x2_t v1875;
  float64x2_t v1876;
  float64x2_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  float64x2_t *v1880;
  float64x2_t v1881;
  float64x2_t v1882;
  float64x2_t v1883;
  float64x2_t v1884;
  float64x2_t v1885;
  float64x2_t *v1886;
  uint64_t v1887;
  float64x2_t v1888;
  float64x2_t *v1889;
  float64x2_t v1890;
  unint64_t v1891;
  unint64_t v1892;
  unint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  int v1896;
  int v1897;
  int v1898;
  uint64_t v1899;
  int v1900;
  int v1901;
  int v1902;
  int v1903;
  int v1904;
  int v1905;
  int v1906;
  int v1907;
  uint64_t v1908;
  int v1909;
  int v1910;
  int v1911;
  int v1912;
  int v1913;
  int v1914;
  int v1915;
  int v1916;
  uint64_t v1917;
  int v1918;
  int v1919;
  int v1920;
  int v1921;
  uint64_t v1922;
  int *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  float64x2_t v1931;
  uint64_t v1932;
  int v1933;
  uint64_t v1934;
  uint64_t v1935;
  float64x2_t v1936;
  int64x2_t v1937;
  float64x2_t *v1938;
  float64x2_t v1939;
  float64x2_t v1940;
  uint64_t v1941;
  float64x2_t *v1942;
  int *v1943;
  float64x2_t v1944;
  float64x2_t v1945;
  uint64_t v1948;
  float64x2_t v1950;
  int *v1955;
  uint64_t v1957;
  uint64_t v1958;
  double v1959;
  uint64_t v1961;
  float64x2_t *v1963;
  float64x2_t v1965;
  float64x2_t v1966;
  float64x2_t v1967;
  float64x2_t v1968;
  uint64_t v1969;
  double v1970;
  double v1975;
  float64x2_t *v1980;
  double v1981;
  float64x2_t v1983;
  double v1984;
  double v1985;
  uint64_t v1986;
  float64x2_t v1987;
  float64x2_t v1988;
  float64x2_t v1989;
  float64x2_t v1990;
  float64x2_t v1991;
  float64x2_t v1992;
  uint64_t v2002;
  uint64_t v2003;
  double *v2004;
  float64_t v2005;
  uint64_t v2006;
  float64x2_t *v2007;
  float64x2_t v2008;
  float64x2_t v2009;
  float64x2_t v2010;
  float64x2_t v2013;
  float64x2_t v2015;
  uint64_t v2016;
  double *v2017;
  float64x2_t v2018;
  float64x2_t v2019;
  float64x2_t v2020;
  float64x2_t v2021;
  float64x2_t *v2022;
  float64x2_t *v2023;
  float64x2_t v2024;
  float64x2_t *v2025;
  float64x2_t v2026;
  float64x2_t v2027;
  float64x2_t v2028;
  float64x2_t v2029;
  float64x2_t v2030;
  float64x2_t v2031;
  float64x2_t v2032;
  float64x2_t v2033;
  float64x2_t v2034;
  float64x2_t v2035;
  float64x2_t v2036;
  float64x2_t v2037;
  float64x2_t v2038;
  float64x2_t v2039;
  float64x2_t v2040;
  float64x2_t v2041;
  float64x2_t v2042;
  float64x2_t *v2043;
  float64x2_t v2044;
  float64x2_t v2045;
  float64x2_t v2046;
  float64x2_t v2047;
  float64x2_t *v2048;
  float64x2_t v2049;
  float64x2_t *v2050;
  float64x2_t v2051;
  float64x2_t v2052;
  float64x2_t v2053;
  float64x2_t v2054;
  float64x2_t *v2055;
  float64x2_t v2056;
  float64x2_t v2057;
  float64x2_t v2058;
  float64x2_t v2059;
  float64x2_t v2060;
  float64x2_t v2061;
  float64x2_t v2062;
  float64x2_t v2063;
  float64x2_t v2064;
  float64x2_t v2065;
  float64x2_t v2066;
  float64x2_t v2067;
  float64x2_t v2068;
  float64x2_t v2069;
  float64x2_t v2070;
  float64x2_t v2071;
  float64x2_t v2072;
  float64x2_t v2073;
  float64x2_t v2074;
  float64x2_t v2075;
  float64x2_t v2076;
  float64x2_t v2077;
  float64x2_t v2078;
  float64x2_t v2079;
  float64x2_t v2080;
  float64x2_t v2081;
  float64x2_t v2082;
  float64x2_t v2083;
  float64x2_t v2084;
  float64x2_t *v2085;
  float64x2_t v2086;
  float64x2_t v2087;
  float64x2_t v2088;
  float64x2_t v2089;
  float64x2_t v2090;
  float64x2_t v2091;
  float64x2_t v2092;
  float64x2_t v2093;
  float64x2_t v2094;
  float64x2_t v2095;
  float64x2_t v2096;
  float64x2_t v2097;
  float64x2_t v2098;
  float64x2_t v2099;
  float64x2_t v2100;
  float64x2_t v2101;
  float64x2_t v2102;
  float64x2_t *v2103;
  float64x2_t v2104;
  float64x2_t v2105;
  float64x2_t v2106;
  float64x2_t v2107;
  float64x2_t v2108;
  float64x2_t v2109;
  float64x2_t v2110;
  float64x2_t *v2111;
  float64x2_t *v2112;
  float64x2_t v2113;
  int *v2114;
  int v2115;
  int v2116;
  int v2117;
  float64x2_t *v2118;
  int v2119;
  int v2120;
  int v2121;
  int v2122;
  uint64_t v2123;
  uint64_t v2124;
  int *v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  float64x2_t *v2132;
  float64x2_t v2133;
  float64x2_t v2134;
  float64x2_t v2135;
  float64x2_t v2136;
  float64x2_t *v2137;
  float64x2_t v2138;
  float64x2_t v2139;
  int *v2140;
  int v2141;
  int v2142;
  int v2143;
  float64x2_t *v2144;
  int v2145;
  int v2146;
  int v2147;
  int v2148;
  uint64_t v2149;
  int *v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  int *v2154;
  int v2155;
  int v2156;
  int v2157;
  double *v2158;
  int v2159;
  int v2160;
  int v2161;
  int v2162;
  uint64_t v2163;
  uint64_t v2164;
  int *v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2171;
  float64x2_t *v2172;
  float64x2_t v2173;
  float64x2_t v2174;
  float64x2_t v2175;
  float64x2_t v2176;
  float64x2_t v2177;
  float64x2_t *v2178;
  float64x2_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  double v2182;
  uint64_t v2183;
  unint64_t v2184;
  unint64_t v2185;
  unint64_t v2186;
  uint64_t v2187;
  unint64_t v2188;
  uint64_t v2189;
  unint64_t v2190;
  unint64_t v2191;
  unint64_t v2192;
  unint64_t v2193;
  unint64_t v2194;
  unint64_t v2195;
  unint64_t v2196;
  unint64_t v2197;
  uint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  unint64_t v2203;
  unint64_t v2204;
  unint64_t v2205;
  unint64_t v2206;
  unint64_t v2207;
  unint64_t v2208;
  unint64_t v2210;
  unint64_t v2211;
  unint64_t v2212;
  unint64_t v2213;
  unint64_t v2214;
  unint64_t v2215;
  unint64_t v2216;
  unint64_t v2217;
  unint64_t v2218;
  unint64_t v2219;
  unint64_t v2220;
  unint64_t v2221;
  unint64_t v2222;
  unint64_t v2223;
  unint64_t v2224;
  unint64_t v2225;
  unint64_t v2227;
  unint64_t v2228;
  unint64_t v2229;
  unint64_t v2231;
  unint64_t v2232;
  unint64_t v2233;
  uint64_t v2234;
  unint64_t v2235;
  unint64_t v2236;
  unint64_t v2237;
  unint64_t v2238;
  unint64_t v2239;
  unint64_t v2240;
  unint64_t v2241;
  uint64_t v2242;
  unint64_t v2243;
  uint64_t v2244;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  unint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  int *v2254;
  uint64_t v2255;
  unint64_t v2256;
  uint64_t v2257;
  unint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  unint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  int *v2268;
  uint64_t v2269;
  uint64_t v2270;
  int *v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  uint64_t v2280;
  unint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  float64x2_t *v2284;
  uint64_t v2285;
  unint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  int64x2_t *v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  float64x2_t *v2293;
  float64x2_t *v2294;
  uint64_t v2295;
  float64x2_t *v2296;
  float64x2_t *v2297;
  uint64_t v2298;
  uint64_t v2299;
  float64x2_t *v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  unint64_t v2304;
  int *v2305;
  float64x2_t *v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  float64x2_t *v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  unint64_t v2316;
  uint64_t v2317;
  unint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  unint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  unint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  unint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  uint64_t v2341;
  unint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  unint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  unint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  unint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  unint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  unint64_t v2368;
  float64x2_t v2369;
  uint64_t v2370;
  unint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  unint64_t v2374;
  float64x2_t v2375;
  uint64_t v2376;
  unint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  unint64_t v2380;
  uint64_t v2381;
  unint64_t v2382;
  uint64_t v2383;
  unint64_t v2384;
  float64x2_t v2385;
  unint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  unint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  int v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  int v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  int v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  int v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  float64x2_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  float64x2_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  float64x2_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  int v2494;
  uint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  float64x2_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  int v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  float64x2_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  int v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  float64x2_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  int v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  float64x2_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  int64x2_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  float64x2_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  float64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  int64x2_t v2539;
  unint64_t v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  float64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  int8x16_t v2548;
  unint64_t v2549;
  unint64_t v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  float64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  int64x2_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  float64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  float64x2_t v2564;
  float64x2_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  float64x2_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  float64x2_t v2572;
  float64x2_t v2573;
  unint64_t v2574;
  uint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  float64x2_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  float64x2_t v2581;
  float64x2_t v2582;
  unint64_t v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  float64x2_t v2587;
  float64x2_t *v2588;
  float64x2_t *v2589;
  uint64_t v2590;
  uint64_t v2591;
  int64x2_t v2592;
  float64_t v2593;
  float64x2_t v2594;
  unint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  float64x2_t v2600;
  unint64_t v2601;
  uint64_t v2602;
  uint64_t v2603;
  uint64_t v2604;
  float64x2_t v2605;
  unint64_t v2606;
  uint64_t v2607;
  float64x2_t v2608;
  float64x2x2_t v2609;
  float64x2x2_t v2610;
  float64x2x2_t v2611;
  float64x2x2_t v2612;
  float64x2x2_t v2613;
  float64x2x2_t v2614;
  float64x2x2_t v2615;
  float64x2x2_t v2616;
  float64x2x2_t v2617;
  float64x2x2_t v2618;
  float64x2x2_t v2619;
  float64x2x2_t v2620;
  float64x2x2_t v2621;

  v68 = STACK[0xB18];
  v2574 = STACK[0x798];
  v69 = STACK[0x788];
  v2595 = STACK[0x778];
  v70 = STACK[0x770];
  v2251 = STACK[0x750];
  v2240 = STACK[0x748];
  v71 = STACK[0xB10];
  v72 = STACK[0xB08];
  v73 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v74 = v73[14];
  v2303 = v73[12];
  v2189 = v73[10];
  v2198 = v73[8];
  v2321 = v73[6];
  v2310 = v73[4];
  v75 = v73[2];
  v2187 = *v73;
  v2234 = v74;
  v2583 = v70;
  v2540 = v68;
  if ((**(_BYTE **)(v72 + 16) & 1) != 0)
  {
    v2549 = v71;
    v76 = *(int **)(a3 + 16);
    extent = _gc_buffer_get_extent();
    v78 = _gc_buffer_get_extent();
    v79 = _gc_buffer_get_extent();
    if (extent != 1 || v78 != v79)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(a2 + 24) |= 1uLL;
    }
    v80 = *(double **)(a2 + 16);
    v81 = _gc_buffer_get_extent();
    v82 = _gc_buffer_get_extent();
    v83 = _gc_buffer_get_extent();
    v84 = _gc_buffer_get_extent();
    if (v81 != 1 || v82 != 1 || v83 != v84)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(a5 + 24) |= 1uLL;
    }
    v85 = *(_QWORD *)(a5 + 16);
    v86 = *(int **)(a12 + 16);
    v87 = *(_QWORD *)(a14 + 16);
    v88 = *(_QWORD *)(a15 + 16);
    v89 = *(_QWORD *)(v2240 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2187 >= 1)
    {
      v90 = v2187;
      do
      {
        v91 = *v76;
        v92 = *(double *)(v85 + 8 * *v86);
        *(double *)(v89 + 8 * v91) = *(double *)(v89 + 8 * v91) - v92 * *v80;
        if (v91 >> 30 != 3)
        {
          v93 = 8 * ((int)v91 + *(_DWORD *)(v88 + 4) * (int)v91);
          *(double *)(v87 + v93) = *(double *)(v87 + v93) + v92 * v92;
        }
        ++v80;
        ++v86;
        v76 += 2;
        --v90;
      }
      while (v90);
    }
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v70 = v2583;
    v68 = v2540;
    v71 = v2549;
  }
  v94 = STACK[0xB20];
  v2550 = STACK[0xB20];
  if ((**(_BYTE **)(v71 + 16) & 1) != 0)
  {
    v95 = *(int **)(v2595 + 16);
    v96 = _gc_buffer_get_extent();
    v97 = _gc_buffer_get_extent();
    v98 = _gc_buffer_get_extent();
    if (v96 != 3 || v97 != v98)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v70 + 24) |= 1uLL;
    }
    v2531 = *(_QWORD *)(v70 + 16);
    v99 = _gc_buffer_get_extent();
    v100 = _gc_buffer_get_extent();
    v101 = _gc_buffer_get_extent();
    v102 = _gc_buffer_get_extent();
    if (v99 != 3 || v100 != 3 || v101 != v102)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v69 + 24) |= 1uLL;
    }
    v103 = *(_QWORD *)(v69 + 16);
    v104 = *(_QWORD *)(a7 + 16);
    v105 = *(int **)(v2574 + 16);
    v106 = *(_QWORD *)(a27 + 16);
    v107 = *(_QWORD *)(a28 + 16);
    v108 = *(_QWORD *)(v2251 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v75 >= 1)
    {
      v110 = (double *)(v2531 + 16);
      v111 = v75;
      do
      {
        v112 = *v95;
        if (v112 >> 30 != 3)
        {
          v113 = (float64x2_t *)(v108 + 24 * *(int *)(v104 + 4 * v112));
          v109.f64[0] = v113[1].f64[0];
          v114 = (float64x2_t *)(v103 + 72 * *v105);
          _Q2 = *v114;
          _Q3 = v114[1];
          _Q4 = v114[2];
          _Q5 = v114[3];
          _D6 = v114[4].f64[0];
          _Q7 = *(float64x2_t *)(v110 - 2);
          _Q16.f64[0] = v114->f64[0];
          _Q16.f64[1] = v114[1].f64[1];
          v122 = (float64x2_t)vextq_s8(*(int8x16_t *)v114, (int8x16_t)_Q4, 8uLL);
          v123.f64[0] = _Q3.f64[0];
          v123.f64[1] = v114[2].f64[1];
          v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q7.f64[0]), v122, _Q7, 1), v123, *v110);
          _Q7.f64[0] = *(v110 - 1);
          __asm { FMLA            D21, D7, V5.D[1] }
          _Q7.f64[0] = _D21 + _D6 * *v110;
          *v113 = vsubq_f64(*v113, v124);
          *(_QWORD *)&v113[1].f64[0] = *(_OWORD *)&vsubq_f64(v109, _Q7);
          v130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q2.f64[0]), v122, _Q2, 1), v123, _Q3.f64[0]);
          _Q1 = vmulq_f64(_Q5, _Q2);
          _Q2.f64[0] = _Q2.f64[1];
          __asm { FMLA            D1, D2, V5.D[1] }
          _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], _D6, _Q3.f64[0]);
          v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(_Q16, _Q3, 1), v122, _Q4.f64[0]), v123, _Q4, 1);
          __asm
          {
            FMLA            D3, D4, V5.D[1]
            FMLA            D3, D6, V4.D[1]
          }
          v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q5.f64[0]), v122, _Q5, 1), v123, _D6);
          _Q16.f64[0] = _Q5.f64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _Q5.f64[0] = _Q7.f64[0] + _D6 * _D6;
          v134 = v106 + 72 * ((int)v112 + *(_DWORD *)(v107 + 4) * (int)v112);
          v135 = *(float64x2_t *)(v134 + 16);
          v136 = *(int64x2_t *)(v134 + 32);
          v124.f64[0] = *(float64_t *)(v134 + 64);
          v137 = (int64x2_t)vaddq_f64(v132, (float64x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v136, 8uLL));
          v138 = vaddq_f64(v133, *(float64x2_t *)(v134 + 48));
          v109 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q1, v135), v137);
          *(float64x2_t *)v134 = vaddq_f64(v130, *(float64x2_t *)v134);
          *(float64x2_t *)(v134 + 16) = v109;
          *(int8x16_t *)(v134 + 32) = vextq_s8((int8x16_t)v137, (int8x16_t)vaddq_f64(_Q3, (float64x2_t)vdupq_laneq_s64(v136, 1)), 8uLL);
          *(float64x2_t *)(v134 + 48) = v138;
          *(_QWORD *)(v134 + 64) = *(_OWORD *)&vaddq_f64(_Q5, v124);
        }
        v110 += 3;
        ++v105;
        v95 += 2;
        --v111;
      }
      while (v111);
    }
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    v74 = v2234;
    v70 = v2583;
    v94 = v2550;
    v68 = v2540;
  }
  v139 = STACK[0xB28];
  v2377 = STACK[0x830];
  v2371 = STACK[0x818];
  v2365 = STACK[0x800];
  v2359 = STACK[0x7E8];
  v140 = STACK[0x7D8];
  v141 = STACK[0x7D0];
  v142 = STACK[0x7C8];
  v2386 = STACK[0x7C0];
  v2382 = STACK[0x7B0];
  v2349 = STACK[0x7A8];
  v2241 = STACK[0x768];
  v2239 = STACK[0x760];
  v2238 = STACK[0x740];
  v2330 = STACK[0x7D8];
  v2316 = STACK[0x7D0];
  v2354 = STACK[0x7C8];
  v2262 = STACK[0xB28];
  if ((**(_BYTE **)(v68 + 16) & 1) != 0)
  {
    v143 = *(int **)(v2595 + 16);
    v144 = _gc_buffer_get_extent();
    v145 = _gc_buffer_get_extent();
    v146 = _gc_buffer_get_extent();
    if (v144 != 3 || v145 != v146)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v70 + 24) |= 1uLL;
    }
    v2541 = *(_QWORD *)(v70 + 16);
    v147 = _gc_buffer_get_extent();
    v148 = _gc_buffer_get_extent();
    v149 = _gc_buffer_get_extent();
    v150 = _gc_buffer_get_extent();
    if (v147 != 3 || v148 != 3 || v149 != v150)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v69 + 24) |= 1uLL;
    }
    v151 = *(_QWORD *)(v69 + 16);
    v152 = *(int **)(v2574 + 16);
    v153 = *(_QWORD *)(a27 + 16);
    v154 = *(_QWORD *)(a28 + 16);
    v155 = *(_QWORD *)(v2251 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v74 = v2234;
    v140 = v2330;
    if ((int)v75 >= 1)
    {
      v157 = (double *)(v2541 + 16);
      do
      {
        v158 = *v143;
        v159 = (float64x2_t *)(v155 + 24 * v158);
        v156.f64[0] = v159[1].f64[0];
        v160 = (float64x2_t *)(v151 + 72 * *v152);
        _Q7 = *v160;
        _Q3 = v160[1];
        _Q2 = v160[2];
        _Q0 = v160[3];
        _D1 = v160[4].f64[0];
        _Q18 = *(float64x2_t *)(v157 - 2);
        v167.f64[0] = v160->f64[0];
        v167.f64[1] = v160[1].f64[1];
        v168 = (float64x2_t)vextq_s8(*(int8x16_t *)v160, (int8x16_t)_Q2, 8uLL);
        v169.f64[0] = v160[1].f64[0];
        v169.f64[1] = v160[2].f64[1];
        v170 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, _Q18.f64[0]), v168, _Q18, 1), v169, *v157);
        _Q18.f64[0] = *(v157 - 1);
        __asm { FMLA            D21, D18, V0.D[1] }
        _Q18.f64[0] = _D21 + _D1 * *v157;
        v156 = vsubq_f64(v156, _Q18);
        *v159 = vsubq_f64(*v159, v170);
        v159[1].f64[0] = v156.f64[0];
        if (v158 >> 30 != 3)
        {
          _Q16 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
          v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, _Q7.f64[0]), v168, _Q7, 1), v169, _Q3.f64[0]);
          _Q18 = vmulq_f64(_Q0, _Q7);
          __asm { FMLA            D18, D16, V7.D[1] }
          _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _D1, _Q3.f64[0]);
          v174 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v167, _Q3, 1), v168, _Q2.f64[0]), v169, _Q2, 1);
          __asm { FMLA            D3, D1, V2.D[1] }
          v175 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, _Q0.f64[0]), v168, _Q0, 1), v169, _D1);
          __asm { FMLA            D4, D16, V0.D[1] }
          _Q0.f64[0] = _D4 + _D1 * _D1;
          v177 = v153 + 72 * ((int)v158 + *(_DWORD *)(v154 + 4) * (int)v158);
          v178 = *(float64x2_t *)(v177 + 16);
          v179 = *(int64x2_t *)(v177 + 32);
          _Q16.f64[0] = *(float64_t *)(v177 + 64);
          v180 = (int8x16_t)vaddq_f64(_Q3, (float64x2_t)vdupq_laneq_s64(v179, 1));
          v181 = (int64x2_t)vaddq_f64(v174, (float64x2_t)vextq_s8((int8x16_t)v178, (int8x16_t)v179, 8uLL));
          v182 = vaddq_f64(v175, *(float64x2_t *)(v177 + 48));
          *(float64x2_t *)v177 = vaddq_f64(v156, *(float64x2_t *)v177);
          *(int64x2_t *)(v177 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q18, v178), v181);
          *(int8x16_t *)(v177 + 32) = vextq_s8((int8x16_t)v181, v180, 8uLL);
          *(float64x2_t *)(v177 + 48) = v182;
          *(_QWORD *)(v177 + 64) = *(_OWORD *)&vaddq_f64(_Q0, _Q16);
        }
        v157 += 3;
        ++v152;
        v143 += 2;
        --v75;
      }
      while (v75);
    }
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    v141 = v2316;
    v142 = v2354;
    v139 = v2262;
    v94 = v2550;
  }
  v183 = STACK[0xB30];
  v2304 = STACK[0xB30];
  if ((**(_BYTE **)(v94 + 16) & 1) != 0)
  {
    v184 = *(_QWORD *)(v2382 + 16);
    v185 = _gc_buffer_get_extent();
    v186 = _gc_buffer_get_extent();
    v187 = _gc_buffer_get_extent();
    if (v185 != 2 || v186 != v187)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v2349 + 24) |= 1uLL;
    }
    v188 = *(_QWORD *)(v2349 + 16);
    v189 = _gc_buffer_get_extent();
    v190 = _gc_buffer_get_extent();
    v191 = _gc_buffer_get_extent();
    v192 = _gc_buffer_get_extent();
    if (v189 != 2 || v190 != 1 || v191 != v192)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2386 + 24) |= 1uLL;
    }
    v2285 = *(_QWORD *)(v2386 + 16);
    v193 = _gc_buffer_get_extent();
    v194 = _gc_buffer_get_extent();
    v195 = _gc_buffer_get_extent();
    v196 = _gc_buffer_get_extent();
    if (v193 != 2 || v194 != 3 || v195 != v196)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v142 + 24) |= 1uLL;
    }
    v2280 = *(_QWORD *)(v142 + 16);
    v197 = _gc_buffer_get_extent();
    v198 = _gc_buffer_get_extent();
    v199 = _gc_buffer_get_extent();
    v200 = _gc_buffer_get_extent();
    if (v197 != 2 || v198 != 6 || v199 != v200)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v141 + 24) |= 1uLL;
    }
    v2277 = *(_QWORD *)(v141 + 16);
    v201 = _gc_buffer_get_extent();
    v202 = _gc_buffer_get_extent();
    v203 = _gc_buffer_get_extent();
    v204 = _gc_buffer_get_extent();
    if (v201 != 2 || v202 != 2 || v203 != v204)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v140 + 24) |= 1uLL;
    }
    v2266 = *(_QWORD *)(v140 + 16);
    v2596 = *(_QWORD *)(a6 + 16);
    v2584 = *(_QWORD *)(a7 + 16);
    v2575 = *(_QWORD *)(a9 + 16);
    v2269 = *(_QWORD *)(a10 + 16);
    v205 = *(int **)(v2359 + 16);
    v206 = *(int **)(v2365 + 16);
    v207 = *(int **)(v2371 + 16);
    v208 = *(int **)(v2377 + 16);
    v2566 = *(_QWORD *)(a14 + 16);
    v2558 = *(_QWORD *)(a15 + 16);
    v2467 = *(_QWORD *)(a16 + 16);
    v2459 = *(_QWORD *)(a17 + 16);
    v2451 = *(_QWORD *)(a20 + 16);
    v2443 = *(_QWORD *)(a21 + 16);
    v2435 = *(_QWORD *)(a22 + 16);
    v2427 = *(_QWORD *)(a23 + 16);
    v2551 = *(_QWORD *)(a27 + 16);
    v2542 = *(_QWORD *)(a28 + 16);
    v2419 = *(_QWORD *)(a31 + 16);
    v2411 = *(_QWORD *)(a32 + 16);
    v2273 = *(_QWORD *)(a33 + 16);
    v2404 = *(_QWORD *)(a34 + 16);
    v2532 = *(_QWORD *)(a56 + 16);
    v2523 = *(_QWORD *)(a57 + 16);
    v2396 = *(_QWORD *)(a58 + 16);
    v2391 = *(_QWORD *)(a59 + 16);
    v2515 = *(_QWORD *)(a66 + 16);
    v2507 = *(_QWORD *)(v2238 + 16);
    v2499 = *(_QWORD *)(v2240 + 16);
    v2491 = *(_QWORD *)(v2251 + 16);
    v2483 = *(_QWORD *)(v2239 + 16);
    v2475 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v140 = v2330;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v141 = v2316;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2310 >= 1)
    {
      v211 = 0;
      v212 = 0;
      v213 = (int *)(v184 + 20);
      do
      {
        v223 = 6 * v212;
        v224 = *(v213 - 5);
        if (v224 >> 30 == 3)
        {
          v237 = *(int *)(v184 + 4 * (v223 | 1));
          if (v237 >> 30 == 3)
            goto LABEL_78;
          goto LABEL_72;
        }
        v225 = 8 * *(int *)(v2596 + 4 * v224);
        _Q1 = *(int8x16_t *)(v2285 + 16 * *v205);
        _D0 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        _D3 = *(_QWORD *)(v188 + 8);
        __asm { FMLA            D4, D3, V1.D[1] }
        *(double *)(v2499 + v225) = *(double *)(v2499 + v225) - _D4;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v232 = 8 * ((int)v224 + *(_DWORD *)(v2558 + 4) * (int)v224);
        *(double *)(v2566 + v232) = _D2 + *(double *)(v2566 + v232);
        v233 = *(v213 - 4);
        if (v233 >> 30 == 3)
        {
          v234 = *(v213 - 1);
          if (v234 >> 30 != 3)
            goto LABEL_82;
        }
        else
        {
          v325 = (__int128 *)(v2280 + 48 * *v206);
          _Q2 = *v325;
          _Q3 = v325[1];
          _Q4 = v325[2];
          __asm
          {
            FMLA            D5, D0, V2.D[1]
            FMLA            D2, D0, V3.D[1]
            FMLA            D3, D0, V4.D[1]
          }
          v330 = (double *)(v2467 + 24 * (int)(v233 + *(_DWORD *)(v2459 + 4) * v224));
          v209.f64[0] = _D5 + *v330;
          *(double *)&_Q3 = *(double *)&_Q3 + v330[2];
          v209.f64[1] = *(double *)&_Q2 + v330[1];
          *(float64x2_t *)v330 = v209;
          *((_QWORD *)v330 + 2) = _Q3;
          v234 = *(v213 - 1);
          if (v234 >> 30 != 3)
          {
LABEL_82:
            v331 = (__int128 *)(v2277 + 96 * *v207);
            _Q2 = *v331;
            _Q3 = v331[1];
            _Q4 = v331[2];
            _Q5 = v331[3];
            _Q6 = v331[4];
            _Q7 = v331[5];
            __asm
            {
              FMLA            D16, D0, V2.D[1]
              FMLA            D2, D0, V3.D[1]
              FMLA            D3, D0, V4.D[1]
              FMLA            D4, D0, V5.D[1]
              FMLA            D5, D0, V6.D[1]
              FMLA            D6, D0, V7.D[1]
            }
            v339 = (double *)(v2451 + 48 * (int)(v234 + *(_DWORD *)(v2443 + 4) * v224));
            *(double *)&v340 = _D16 + *v339;
            *(double *)&_Q3 = *(double *)&_Q3 + v339[2];
            v209.f64[0] = *(double *)&_Q5 + v339[4];
            *((double *)&v340 + 1) = *(double *)&_Q2 + v339[1];
            *((double *)&_Q3 + 1) = *(double *)&_Q4 + v339[3];
            v209.f64[1] = *(double *)&_Q6 + v339[5];
            *(_OWORD *)v339 = v340;
            *((_OWORD *)v339 + 1) = _Q3;
            *((float64x2_t *)v339 + 2) = v209;
            v235 = v211 + 1;
            v236 = *v213;
            if (*v213 >> 30 == 3)
            {
LABEL_71:
              v237 = *(int *)(v184 + 4 * v235);
              if (v237 >> 30 == 3)
                goto LABEL_78;
              goto LABEL_72;
            }
            goto LABEL_83;
          }
        }
        v235 = v211 + 1;
        v236 = *v213;
        if (*v213 >> 30 == 3)
          goto LABEL_71;
LABEL_83:
        v341 = (__int128 *)(v2266 + 32 * *v208);
        _Q2 = *v341;
        _Q3 = v341[1];
        __asm
        {
          FMLA            D4, D0, V2.D[1]
          FMLA            D1, D0, V3.D[1]
        }
        v346 = (double *)(v2435 + 16 * (v236 + *(_DWORD *)(v2427 + 4) * (int)v224));
        v347 = _D1 + v346[1];
        *v346 = _D4 + *v346;
        v346[1] = v347;
        v237 = *(int *)(v184 + 4 * v235);
        if (v237 >> 30 == 3)
        {
LABEL_78:
          v261 = *(int *)(v184 + 4 * (v223 + 4));
          if (v261 >> 30 == 3)
            goto LABEL_79;
          goto LABEL_75;
        }
LABEL_72:
        v238 = (float64x2_t *)(v2491 + 24 * *(int *)(v2584 + 4 * v237));
        v209.f64[0] = v238[1].f64[0];
        v239 = (float64x2_t *)(v2280 + 48 * *v206);
        _Q6 = *v239;
        _Q7 = v239[1];
        _Q0 = v239[2];
        v243 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v239, (int64x2_t)_Q7);
        v244 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v239, (int64x2_t)_Q7);
        _Q18 = vmulq_f64(_Q0, *(float64x2_t *)v188);
        _D3 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
        _D16 = *(_QWORD *)(v188 + 8);
        __asm { FMLA            D18, D16, V0.D[1] }
        *v238 = vsubq_f64(*v238, vmlaq_laneq_f64(vmulq_n_f64(v243, *(double *)v188), v244, *(float64x2_t *)v188, 1));
        *(_QWORD *)&v238[1].f64[0] = *(_OWORD *)&vsubq_f64(v209, _Q18);
        v248 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q6.f64[0]), v244, _Q6, 1);
        _Q5 = vmulq_f64(_Q0, _Q6);
        _Q6.f64[0] = _Q6.f64[1];
        __asm { FMLA            D5, D6, V0.D[1] }
        v250 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q7.f64[0]), v244, _Q7, 1);
        _Q16 = vmulq_f64(_Q0, _Q7);
        _Q7.f64[0] = _Q7.f64[1];
        __asm { FMLA            D16, D7, V0.D[1] }
        _Q17 = vmulq_f64(_Q0, _Q0);
        _Q18.f64[0] = _Q0.f64[1];
        __asm { FMLA            D17, D18, V0.D[1] }
        v253 = v2551 + 72 * ((int)v237 + *(_DWORD *)(v2542 + 4) * (int)v237);
        v254 = *(float64x2_t *)(v253 + 16);
        v255 = *(int64x2_t *)(v253 + 32);
        v210.f64[0] = *(float64_t *)(v253 + 64);
        v256 = (int64x2_t)vaddq_f64(v250, (float64x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v255, 8uLL));
        v257 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v243, _Q0.f64[0]), v244, _Q0, 1), *(float64x2_t *)(v253 + 48));
        v209 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q5, v254), v256);
        *(float64x2_t *)v253 = vaddq_f64(v248, *(float64x2_t *)v253);
        *(float64x2_t *)(v253 + 16) = v209;
        *(int8x16_t *)(v253 + 32) = vextq_s8((int8x16_t)v256, (int8x16_t)vaddq_f64(_Q16, (float64x2_t)vdupq_laneq_s64(v255, 1)), 8uLL);
        *(float64x2_t *)(v253 + 48) = v257;
        *(_QWORD *)(v253 + 64) = *(_OWORD *)&vaddq_f64(_Q17, v210);
        v258 = *(v213 - 1);
        if (v258 >> 30 == 3)
        {
          v259 = v211 + 4;
          v260 = *v213;
          if (*v213 >> 30 == 3)
            goto LABEL_74;
        }
        else
        {
          v348 = (float64x2_t *)(v2277 + 96 * *v207);
          _Q5 = *v348;
          _Q6 = v348[1];
          _Q7 = v348[2];
          _Q16 = v348[3];
          _Q17 = v348[4];
          _Q18 = v348[5];
          _Q19 = vmulq_f64(_Q0, *v348);
          __asm { FMLA            D19, D3, V5.D[1] }
          v356 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q6.f64[0]), v244, _Q6, 1);
          _Q20 = vmulq_f64(_Q0, _Q6);
          __asm { FMLA            D20, D3, V6.D[1] }
          v358 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q7.f64[0]), v244, _Q7, 1);
          _Q21 = vmulq_f64(_Q0, _Q7);
          __asm { FMLA            D21, D3, V7.D[1] }
          v360 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q16.f64[0]), v244, _Q16, 1);
          _Q22 = vmulq_f64(_Q0, _Q16);
          __asm { FMLA            D22, D3, V16.D[1] }
          v362 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q17.f64[0]), v244, _Q17, 1);
          _Q23 = vmulq_f64(_Q0, _Q17);
          __asm { FMLA            D23, D3, V17.D[1] }
          v364 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q18.f64[0]), v244, _Q18, 1);
          _Q24 = vmulq_f64(_Q0, _Q18);
          __asm { FMLA            D24, D3, V18.D[1] }
          v366 = v2419 + 144 * (int)(v258 + *(_DWORD *)(v2411 + 4) * v237);
          v367 = *(float64x2_t *)(v366 + 16);
          v368 = *(int64x2_t *)(v366 + 32);
          v369 = *(float64x2_t *)(v366 + 64);
          v370 = *(int64x2_t *)(v366 + 80);
          v371 = *(float64x2_t *)(v366 + 112);
          v372 = *(int64x2_t *)(v366 + 128);
          v373 = (float64x2_t)vextq_s8((int8x16_t)v371, (int8x16_t)v372, 8uLL);
          v66 = (float64x2_t)vdupq_laneq_s64(v372, 1);
          v374 = (int64x2_t)vaddq_f64(v356, (float64x2_t)vextq_s8((int8x16_t)v367, (int8x16_t)v368, 8uLL));
          v375 = (int8x16_t)vaddq_f64(_Q20, (float64x2_t)vdupq_laneq_s64(v368, 1));
          v376 = (int64x2_t)vaddq_f64(_Q21, v369);
          v377 = vaddq_f64(v358, *(float64x2_t *)(v366 + 48));
          v378 = (int64x2_t)vaddq_f64(v360, (float64x2_t)vextq_s8((int8x16_t)v369, (int8x16_t)v370, 8uLL));
          v379 = (int8x16_t)vaddq_f64(_Q22, (float64x2_t)vdupq_laneq_s64(v370, 1));
          v210 = vaddq_f64(_Q23, v371);
          v380 = vaddq_f64(v362, *(float64x2_t *)(v366 + 96));
          v381 = (int64x2_t)vaddq_f64(v364, v373);
          *(float64x2_t *)v366 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v243, v348->f64[0]), v244, *v348, 1), *(float64x2_t *)v366);
          *(int64x2_t *)(v366 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q19, v367), v374);
          *(int8x16_t *)(v366 + 32) = vextq_s8((int8x16_t)v374, v375, 8uLL);
          *(float64x2_t *)(v366 + 48) = v377;
          *(int64x2_t *)(v366 + 64) = vzip1q_s64(v376, v378);
          *(int8x16_t *)(v366 + 80) = vextq_s8((int8x16_t)v378, v379, 8uLL);
          v209 = (float64x2_t)vzip1q_s64((int64x2_t)v210, v381);
          *(float64x2_t *)(v366 + 96) = v380;
          *(float64x2_t *)(v366 + 112) = v209;
          *(int8x16_t *)(v366 + 128) = vextq_s8((int8x16_t)v381, (int8x16_t)vaddq_f64(_Q24, v66), 8uLL);
          v259 = v211 + 4;
          v260 = *v213;
          if (*v213 >> 30 == 3)
          {
LABEL_74:
            v261 = *(int *)(v184 + 4 * v259);
            if (v261 >> 30 == 3)
              goto LABEL_79;
            goto LABEL_75;
          }
        }
        v382 = (float64x2_t *)(v2266 + 32 * *v208);
        _Q4 = *v382;
        _Q5 = v382[1];
        v385 = vmlaq_laneq_f64(vmulq_n_f64(v243, v382->f64[0]), v244, *v382, 1);
        _Q7 = vmulq_f64(_Q0, *v382);
        __asm { FMLA            D7, D3, V4.D[1] }
        v387 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q5.f64[0]), v244, _Q5, 1);
        _Q0 = vmulq_f64(_Q0, _Q5);
        __asm { FMLA            D0, D3, V5.D[1] }
        v389 = v2273 + 48 * (v260 + *(_DWORD *)(v2404 + 4) * (int)v237);
        v390 = *(float64x2_t *)(v389 + 16);
        v391 = *(int64x2_t *)(v389 + 32);
        v209 = (float64x2_t)vextq_s8((int8x16_t)v390, (int8x16_t)v391, 8uLL);
        v392 = (int64x2_t)vaddq_f64(v387, v209);
        *(float64x2_t *)v389 = vaddq_f64(v385, *(float64x2_t *)v389);
        *(int64x2_t *)(v389 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q7, v390), v392);
        *(int8x16_t *)(v389 + 32) = vextq_s8((int8x16_t)v392, (int8x16_t)vaddq_f64(_Q0, (float64x2_t)vdupq_laneq_s64(v391, 1)), 8uLL);
        v261 = *(int *)(v184 + 4 * v259);
        if (v261 >> 30 == 3)
        {
LABEL_79:
          v311 = *v213;
          if (*v213 >> 30 == 3)
            goto LABEL_66;
          goto LABEL_65;
        }
LABEL_75:
        v262 = (float64x2_t *)(v2483 + 48 * *(int *)(v2575 + 4 * v261));
        v263 = (float64x2_t *)(v2277 + 96 * *v207);
        v264 = *v263;
        v265 = v263[1];
        v266 = v263[2];
        v267 = v263[3];
        v269 = v263[4];
        v268 = v263[5];
        v270 = (float64x2_t)vzip1q_s64((int64x2_t)v266, (int64x2_t)v267);
        *(_QWORD *)&v271.f64[0] = vdupq_laneq_s64((int64x2_t)v266, 1).u64[0];
        v271.f64[1] = v263[3].f64[1];
        *(_QWORD *)&v273.f64[0] = vdupq_laneq_s64((int64x2_t)v269, 1).u64[0];
        v272 = (float64x2_t)vzip1q_s64((int64x2_t)v269, (int64x2_t)v268);
        v273.f64[1] = v263[5].f64[1];
        v274 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v263, (int64x2_t)v265);
        v209 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v263, (int64x2_t)v265);
        v275 = vsubq_f64(v262[2], vmlaq_laneq_f64(vmulq_n_f64(v272, *(double *)v188), v273, *(float64x2_t *)v188, 1));
        v276 = vsubq_f64(v262[1], vmlaq_laneq_f64(vmulq_n_f64(v270, *(double *)v188), v271, *(float64x2_t *)v188, 1));
        *v262 = vsubq_f64(*v262, vmlaq_laneq_f64(vmulq_n_f64(v274, *(double *)v188), v209, *(float64x2_t *)v188, 1));
        v262[1] = v276;
        v262[2] = v275;
        v277 = vmlaq_laneq_f64(vmulq_n_f64(v274, v264.f64[0]), v209, v264, 1);
        v278 = vmlaq_laneq_f64(vmulq_n_f64(v270, v264.f64[0]), v271, v264, 1);
        v279 = vmlaq_laneq_f64(vmulq_n_f64(v272, v264.f64[0]), v273, v264, 1);
        v280 = vmlaq_laneq_f64(vmulq_n_f64(v274, v265.f64[0]), v209, v265, 1);
        v281 = vmlaq_laneq_f64(vmulq_n_f64(v270, v265.f64[0]), v271, v265, 1);
        v282 = vmlaq_laneq_f64(vmulq_n_f64(v272, v265.f64[0]), v273, v265, 1);
        v283 = vmlaq_laneq_f64(vmulq_n_f64(v274, v266.f64[0]), v209, v266, 1);
        v284 = vmlaq_laneq_f64(vmulq_n_f64(v270, v266.f64[0]), v271, v266, 1);
        v285 = vmlaq_laneq_f64(vmulq_n_f64(v272, v266.f64[0]), v273, v266, 1);
        v286 = vmlaq_laneq_f64(vmulq_n_f64(v274, v267.f64[0]), v209, v267, 1);
        v287 = vmlaq_laneq_f64(vmulq_n_f64(v270, v267.f64[0]), v271, v267, 1);
        v288 = vmlaq_laneq_f64(vmulq_n_f64(v272, v267.f64[0]), v273, v267, 1);
        v289 = vmlaq_laneq_f64(vmulq_n_f64(v274, v269.f64[0]), v209, v269, 1);
        v290 = vmlaq_laneq_f64(vmulq_n_f64(v270, v269.f64[0]), v271, v269, 1);
        v291 = vmlaq_laneq_f64(vmulq_n_f64(v272, v269.f64[0]), v273, v269, 1);
        v292 = vmlaq_laneq_f64(vmulq_n_f64(v274, v268.f64[0]), v209, v268, 1);
        v293 = vmlaq_laneq_f64(vmulq_n_f64(v270, v268.f64[0]), v271, v268, 1);
        v66 = vmlaq_laneq_f64(vmulq_n_f64(v272, v268.f64[0]), v273, v268, 1);
        v294 = (float64x2_t *)(v2532 + 288 * ((int)v261 + *(_DWORD *)(v2523 + 4) * (int)v261));
        v295 = vaddq_f64(v279, v294[2]);
        v296 = vaddq_f64(v278, v294[1]);
        v297 = vaddq_f64(v282, v294[5]);
        v298 = vaddq_f64(v281, v294[4]);
        v299 = vaddq_f64(v280, v294[3]);
        v300 = vaddq_f64(v285, v294[8]);
        v301 = vaddq_f64(v284, v294[7]);
        v302 = vaddq_f64(v283, v294[6]);
        v303 = vaddq_f64(v288, v294[11]);
        v304 = vaddq_f64(v287, v294[10]);
        v210 = vaddq_f64(v286, v294[9]);
        v305 = v294[15];
        v306 = vaddq_f64(v291, v294[14]);
        v307 = vaddq_f64(v290, v294[13]);
        v308 = vaddq_f64(v289, v294[12]);
        v309 = vaddq_f64(v66, v294[17]);
        *v294 = vaddq_f64(v277, *v294);
        v294[1] = v296;
        v294[2] = v295;
        v294[3] = v299;
        v294[4] = v298;
        v294[5] = v297;
        v310 = vaddq_f64(v293, v294[16]);
        v294[6] = v302;
        v294[7] = v301;
        v294[8] = v300;
        v294[9] = v210;
        v294[10] = v304;
        v294[11] = v303;
        v294[12] = v308;
        v294[13] = v307;
        v294[14] = v306;
        v294[15] = vaddq_f64(v292, v305);
        v294[16] = v310;
        v294[17] = v309;
        v311 = *v213;
        if (*v213 >> 30 == 3)
          goto LABEL_66;
        v312 = (float64x2_t *)(v2266 + 32 * *v208);
        v313 = v312[1];
        v314 = vmlaq_laneq_f64(vmulq_n_f64(v274, v312->f64[0]), v209, *v312, 1);
        v315 = vmlaq_laneq_f64(vmulq_n_f64(v270, v312->f64[0]), v271, *v312, 1);
        v316 = vmlaq_laneq_f64(vmulq_n_f64(v274, v313.f64[0]), v209, v313, 1);
        v317 = vmlaq_laneq_f64(vmulq_n_f64(v270, v313.f64[0]), v271, v313, 1);
        v318 = vmlaq_laneq_f64(vmulq_n_f64(v272, v313.f64[0]), v273, v313, 1);
        v319 = (float64x2_t *)(v2396 + 96 * (v311 + *(_DWORD *)(v2391 + 4) * (int)v261));
        v320 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v312->f64[0]), v273, *v312, 1), v319[2]);
        v321 = vaddq_f64(v315, v319[1]);
        v322 = vaddq_f64(v318, v319[5]);
        v323 = vaddq_f64(v317, v319[4]);
        v324 = vaddq_f64(v316, v319[3]);
        *v319 = vaddq_f64(v314, *v319);
        v319[1] = v321;
        v319[2] = v320;
        v319[3] = v324;
        v319[4] = v323;
        v319[5] = v322;
LABEL_65:
        v214 = 16 * *(int *)(v2269 + 4 * v311);
        v215 = (float64x2_t *)(v2266 + 32 * *v208);
        v216 = *v215;
        v217 = v215[1];
        v218 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v215, (int64x2_t)v217);
        v219 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v215, (int64x2_t)v217);
        v209 = *(float64x2_t *)v188;
        *(float64x2_t *)(v2475 + v214) = vsubq_f64(*(float64x2_t *)(v2475 + v214), vmlaq_laneq_f64(vmulq_n_f64(v218, *(double *)v188), v219, *(float64x2_t *)v188, 1));
        v220 = (float64x2_t *)(v2515 + 32 * (v311 + *(_DWORD *)(v2507 + 4) * v311));
        v221 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v218, v216.f64[0]), v219, v216, 1), *v220);
        v222 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v218, v217.f64[0]), v219, v217, 1), v220[1]);
        *v220 = v221;
        v220[1] = v222;
LABEL_66:
        ++v212;
        v211 += 6;
        v188 += 16;
        ++v208;
        ++v207;
        ++v206;
        ++v205;
        v213 += 6;
      }
      while (6 * v2310 != v211);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v183 = v2304;
    v142 = v2354;
    v139 = v2262;
  }
  v393 = STACK[0xB38];
  v2236 = STACK[0x918];
  v2231 = STACK[0x910];
  v2232 = STACK[0x908];
  v2233 = STACK[0x920];
  v2235 = STACK[0x900];
  v2243 = STACK[0x8F8];
  v2228 = STACK[0x8D0];
  v2229 = STACK[0x8E8];
  v2227 = STACK[0x8B8];
  v2220 = STACK[0x890];
  v2222 = STACK[0x8A0];
  v2286 = STACK[0x880];
  v394 = STACK[0x870];
  v2212 = STACK[0x868];
  v2210 = STACK[0x860];
  v395 = STACK[0x858];
  v2256 = STACK[0x848];
  v396 = STACK[0x840];
  v2216 = STACK[0x870];
  v2218 = STACK[0x878];
  v2214 = STACK[0x858];
  v2207 = STACK[0x840];
  v2281 = STACK[0xB38];
  if ((**(_BYTE **)(v139 + 16) & 1) != 0)
  {
    v2412 = *(_QWORD *)(v2382 + 16);
    v397 = _gc_buffer_get_extent();
    v398 = _gc_buffer_get_extent();
    v399 = _gc_buffer_get_extent();
    if (v397 != 2 || v398 != v399)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v2349 + 24) |= 1uLL;
    }
    v400 = *(_QWORD *)(v2349 + 16);
    v401 = _gc_buffer_get_extent();
    v402 = _gc_buffer_get_extent();
    v403 = _gc_buffer_get_extent();
    v404 = _gc_buffer_get_extent();
    if (v401 != 2 || v402 != 1 || v403 != v404)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2386 + 24) |= 1uLL;
    }
    v2428 = *(_QWORD *)(v2386 + 16);
    v405 = _gc_buffer_get_extent();
    v406 = _gc_buffer_get_extent();
    v407 = _gc_buffer_get_extent();
    v408 = _gc_buffer_get_extent();
    if (v405 != 2 || v406 != 3 || v407 != v408)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v142 + 24) |= 1uLL;
    }
    v2420 = *(_QWORD *)(v142 + 16);
    v409 = _gc_buffer_get_extent();
    v410 = _gc_buffer_get_extent();
    v411 = _gc_buffer_get_extent();
    v412 = _gc_buffer_get_extent();
    if (v409 != 2 || v410 != 6 || v411 != v412)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v141 + 24) |= 1uLL;
    }
    v413 = *(_QWORD *)(v141 + 16);
    v414 = _gc_buffer_get_extent();
    v415 = _gc_buffer_get_extent();
    v416 = _gc_buffer_get_extent();
    v417 = _gc_buffer_get_extent();
    if (v414 != 2 || v415 != 2 || v416 != v417)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v140 + 24) |= 1uLL;
    }
    v418 = *(_QWORD *)(v140 + 16);
    v419 = *(int **)(v2359 + 16);
    v420 = *(int **)(v2365 + 16);
    v421 = *(int **)(v2371 + 16);
    v422 = *(int **)(v2377 + 16);
    v2397 = *(_QWORD *)(a14 + 16);
    v2405 = *(_QWORD *)(a15 + 16);
    v2576 = *(_QWORD *)(a16 + 16);
    v2567 = *(_QWORD *)(a17 + 16);
    v2559 = *(_QWORD *)(a20 + 16);
    v2552 = *(_QWORD *)(a21 + 16);
    v2543 = *(_QWORD *)(a22 + 16);
    v2533 = *(_QWORD *)(a23 + 16);
    v2524 = *(_QWORD *)(a27 + 16);
    v2516 = *(_QWORD *)(a28 + 16);
    v2508 = *(_QWORD *)(a31 + 16);
    v2500 = *(_QWORD *)(a32 + 16);
    v2492 = *(_QWORD *)(a33 + 16);
    v2484 = *(_QWORD *)(a34 + 16);
    v2476 = *(_QWORD *)(a56 + 16);
    v2468 = *(_QWORD *)(a57 + 16);
    v2460 = *(_QWORD *)(a58 + 16);
    v2452 = *(_QWORD *)(a59 + 16);
    v2444 = *(_QWORD *)(a66 + 16);
    v2436 = *(_QWORD *)(v2238 + 16);
    v423 = *(_QWORD *)(v2240 + 16);
    v2597 = *(_QWORD *)(v2251 + 16);
    v2585 = *(_QWORD *)(v2239 + 16);
    v424 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v427 = v2310;
    if ((int)v2310 >= 1)
    {
      v428 = (int *)(v2412 + 16);
      do
      {
        v429 = *(v428 - 4);
        _Q2 = *(int8x16_t *)(v2428 + 16 * *v419);
        _D1 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
        v432 = *(float64x2_t *)v400;
        _D5 = *(_QWORD *)(v400 + 8);
        __asm { FMLA            D4, D5, V2.D[1] }
        *(double *)(v423 + 8 * v429) = *(double *)(v423 + 8 * v429) - _D4;
        if (v429 >> 30 == 3)
        {
          v435 = *(v428 - 3);
          v436 = v435 >> 30;
          if (v435 >> 30 == 3)
            goto LABEL_114;
        }
        else
        {
          __asm { FMLA            D3, D1, V2.D[1] }
          v535 = 8 * ((int)v429 + *(_DWORD *)(v2405 + 4) * (int)v429);
          *(double *)(v2397 + v535) = _D3 + *(double *)(v2397 + v535);
          v435 = *(v428 - 3);
          v436 = v435 >> 30;
          if (v435 >> 30 == 3)
          {
LABEL_114:
            v437 = *v428;
            v438 = v437 >> 30;
            if (v437 >> 30 == 3)
              goto LABEL_115;
            goto LABEL_127;
          }
        }
        v536 = (__int128 *)(v2420 + 48 * *v420);
        _Q3 = *v536;
        _Q4 = v536[1];
        _Q5 = v536[2];
        __asm
        {
          FMLA            D6, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
        }
        v541 = (double *)(v2576 + 24 * ((int)v435 + *(_DWORD *)(v2567 + 4) * (int)v429));
        *(double *)&v542 = _D6 + *v541;
        *(double *)&_Q4 = *(double *)&_Q4 + v541[2];
        *((double *)&v542 + 1) = *(double *)&_Q3 + v541[1];
        *(_OWORD *)v541 = v542;
        *((_QWORD *)v541 + 2) = _Q4;
        v437 = *v428;
        v438 = v437 >> 30;
        if (v437 >> 30 == 3)
        {
LABEL_115:
          v439 = v428[1];
          v440 = v439 >> 30;
          if (v439 >> 30 == 3)
            goto LABEL_117;
LABEL_116:
          v441 = (__int128 *)(v418 + 32 * *v422);
          _Q3 = *v441;
          _Q4 = v441[1];
          __asm
          {
            FMLA            D5, D1, V3.D[1]
            FMLA            D2, D1, V4.D[1]
          }
          v446 = (double *)(v2543 + 16 * ((int)v439 + *(_DWORD *)(v2533 + 4) * (int)v429));
          v447 = _D2 + v446[1];
          *v446 = _D5 + *v446;
          v446[1] = v447;
          goto LABEL_117;
        }
LABEL_127:
        v543 = (__int128 *)(v413 + 96 * *v421);
        _Q3 = *v543;
        _Q4 = v543[1];
        _Q5 = v543[2];
        _Q6 = v543[3];
        _Q7 = v543[4];
        _Q16 = v543[5];
        __asm
        {
          FMLA            D17, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
          FMLA            D5, D1, V6.D[1]
          FMLA            D6, D1, V7.D[1]
          FMLA            D7, D1, V16.D[1]
        }
        v551 = (double *)(v2559 + 48 * ((int)v437 + *(_DWORD *)(v2552 + 4) * (int)v429));
        v425.f64[0] = _D17 + *v551;
        *(double *)&_Q4 = *(double *)&_Q4 + v551[2];
        *(double *)&_Q6 = *(double *)&_Q6 + v551[4];
        v425.f64[1] = *(double *)&_Q3 + v551[1];
        *((double *)&_Q4 + 1) = *(double *)&_Q5 + v551[3];
        *((double *)&_Q6 + 1) = *(double *)&_Q7 + v551[5];
        *(float64x2_t *)v551 = v425;
        *((_OWORD *)v551 + 1) = _Q4;
        *((_OWORD *)v551 + 2) = _Q6;
        v439 = v428[1];
        v440 = v439 >> 30;
        if (v439 >> 30 != 3)
          goto LABEL_116;
LABEL_117:
        _D7 = vextq_s8((int8x16_t)v432, (int8x16_t)v432, 8uLL).u64[0];
        v449 = (float64x2_t *)(v2597 + 24 * v435);
        v425.f64[0] = v449[1].f64[0];
        v450 = (float64x2_t *)(v2420 + 48 * *v420);
        _Q6 = *v450;
        _Q5 = v450[1];
        _Q1 = v450[2];
        v454 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v450, (int64x2_t)_Q5);
        v455 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v450, (int64x2_t)_Q5);
        _Q19 = vmulq_f64(_Q1, v432);
        _D4 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
        __asm { FMLA            D19, D7, V1.D[1] }
        *v449 = vsubq_f64(*v449, vmlaq_laneq_f64(vmulq_n_f64(v454, v432.f64[0]), v455, v432, 1));
        *(_QWORD *)&v449[1].f64[0] = *(_OWORD *)&vsubq_f64(v425, _Q19);
        if (v436 <= 2)
        {
          v552 = vmlaq_laneq_f64(vmulq_n_f64(v454, _Q6.f64[0]), v455, _Q6, 1);
          _Q16 = vmulq_f64(_Q1, _Q6);
          __asm { FMLA            D16, D4, V6.D[1] }
          _Q17 = vmulq_f64(_Q1, _Q5);
          __asm { FMLA            D17, D4, V5.D[1] }
          _Q18 = vmulq_f64(_Q1, _Q1);
          __asm { FMLA            D18, D4, V1.D[1] }
          v556 = v2524 + 72 * ((int)v435 + *(_DWORD *)(v2516 + 4) * (int)v435);
          v557 = *(float64x2_t *)(v556 + 16);
          v558 = *(int64x2_t *)(v556 + 32);
          v426.f64[0] = *(float64_t *)(v556 + 64);
          v559 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q5.f64[0]), v455, _Q5, 1), (float64x2_t)vextq_s8((int8x16_t)v557, (int8x16_t)v558, 8uLL));
          v560 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q1.f64[0]), v455, _Q1, 1), *(float64x2_t *)(v556 + 48));
          *(float64x2_t *)v556 = vaddq_f64(v552, *(float64x2_t *)v556);
          *(int64x2_t *)(v556 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q16, v557), v559);
          *(int8x16_t *)(v556 + 32) = vextq_s8((int8x16_t)v559, (int8x16_t)vaddq_f64(_Q17, (float64x2_t)vdupq_laneq_s64(v558, 1)), 8uLL);
          *(float64x2_t *)(v556 + 48) = v560;
          *(_QWORD *)(v556 + 64) = *(_OWORD *)&vaddq_f64(_Q18, v426);
          if (v438 <= 2)
          {
LABEL_130:
            v561 = (float64x2_t *)(v413 + 96 * *v421);
            _Q6 = *v561;
            _Q7 = v561[1];
            _Q16 = v561[2];
            _Q17 = v561[3];
            _Q18 = v561[4];
            _Q19 = v561[5];
            v568 = vmlaq_laneq_f64(vmulq_n_f64(v454, v561->f64[0]), v455, *v561, 1);
            _Q20 = vmulq_f64(_Q1, *v561);
            __asm { FMLA            D20, D4, V6.D[1] }
            _Q21 = vmulq_f64(_Q1, _Q7);
            __asm { FMLA            D21, D4, V7.D[1] }
            _Q22 = vmulq_f64(_Q1, _Q16);
            __asm { FMLA            D22, D4, V16.D[1] }
            _Q23 = vmulq_f64(_Q1, _Q17);
            __asm { FMLA            D23, D4, V17.D[1] }
            _Q24 = vmulq_f64(_Q1, _Q18);
            __asm { FMLA            D24, D4, V18.D[1] }
            _Q25 = vmulq_f64(_Q1, _Q19);
            __asm { FMLA            D25, D4, V19.D[1] }
            v575 = v2508 + 144 * ((int)v437 + *(_DWORD *)(v2500 + 4) * (int)v435);
            v576 = *(float64x2_t *)(v575 + 16);
            v577 = *(int64x2_t *)(v575 + 32);
            v578 = *(float64x2_t *)(v575 + 64);
            v579 = *(int64x2_t *)(v575 + 80);
            v66 = *(float64x2_t *)(v575 + 112);
            v580 = *(int64x2_t *)(v575 + 128);
            v581 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q7.f64[0]), v455, _Q7, 1), (float64x2_t)vextq_s8((int8x16_t)v576, (int8x16_t)v577, 8uLL));
            v582 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q16.f64[0]), v455, _Q16, 1), *(float64x2_t *)(v575 + 48));
            v583 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q17.f64[0]), v455, _Q17, 1), (float64x2_t)vextq_s8((int8x16_t)v578, (int8x16_t)v579, 8uLL));
            v584 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q18.f64[0]), v455, _Q18, 1), *(float64x2_t *)(v575 + 96));
            v585 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q19.f64[0]), v455, _Q19, 1), (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v580, 8uLL));
            *(float64x2_t *)v575 = vaddq_f64(v568, *(float64x2_t *)v575);
            *(int64x2_t *)(v575 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q20, v576), v581);
            *(int8x16_t *)(v575 + 32) = vextq_s8((int8x16_t)v581, (int8x16_t)vaddq_f64(_Q21, (float64x2_t)vdupq_laneq_s64(v577, 1)), 8uLL);
            *(float64x2_t *)(v575 + 48) = v582;
            *(int64x2_t *)(v575 + 64) = vzip1q_s64((int64x2_t)vaddq_f64(_Q22, v578), v583);
            *(int8x16_t *)(v575 + 80) = vextq_s8((int8x16_t)v583, (int8x16_t)vaddq_f64(_Q23, (float64x2_t)vdupq_laneq_s64(v579, 1)), 8uLL);
            *(float64x2_t *)(v575 + 96) = v584;
            *(int64x2_t *)(v575 + 112) = vzip1q_s64((int64x2_t)vaddq_f64(_Q24, v66), v585);
            *(int8x16_t *)(v575 + 128) = vextq_s8((int8x16_t)v585, (int8x16_t)vaddq_f64(_Q25, (float64x2_t)vdupq_laneq_s64(v580, 1)), 8uLL);
            if (v440 > 2)
              goto LABEL_121;
LABEL_120:
            v458 = (float64x2_t *)(v418 + 32 * *v422);
            _Q5 = *v458;
            _Q6 = v458[1];
            v461 = vmlaq_laneq_f64(vmulq_n_f64(v454, v458->f64[0]), v455, *v458, 1);
            _Q16 = vmulq_f64(_Q1, *v458);
            __asm { FMLA            D16, D4, V5.D[1] }
            _Q1 = vmulq_f64(_Q1, _Q6);
            __asm { FMLA            D1, D4, V6.D[1] }
            v464 = v2492 + 48 * ((int)v439 + *(_DWORD *)(v2484 + 4) * (int)v435);
            v465 = *(float64x2_t *)(v464 + 16);
            v466 = *(int64x2_t *)(v464 + 32);
            v467 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q6.f64[0]), v455, _Q6, 1), (float64x2_t)vextq_s8((int8x16_t)v465, (int8x16_t)v466, 8uLL));
            *(float64x2_t *)v464 = vaddq_f64(v461, *(float64x2_t *)v464);
            *(int64x2_t *)(v464 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q16, v465), v467);
            *(int8x16_t *)(v464 + 32) = vextq_s8((int8x16_t)v467, (int8x16_t)vaddq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(v466, 1)), 8uLL);
            goto LABEL_121;
          }
        }
        else if (v438 <= 2)
        {
          goto LABEL_130;
        }
        if (v440 <= 2)
          goto LABEL_120;
LABEL_121:
        v468 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v432, 1);
        v469 = (float64x2_t *)(v2585 + 48 * v437);
        v470 = (float64x2_t *)(v413 + 96 * *v421);
        v471 = *v470;
        v472 = v470[1];
        v474 = v470[2];
        v473 = v470[3];
        v476 = v470[4];
        v475 = v470[5];
        v477 = (float64x2_t)vzip1q_s64((int64x2_t)v474, (int64x2_t)v473);
        *(_QWORD *)&v478.f64[0] = vdupq_laneq_s64((int64x2_t)v474, 1).u64[0];
        v478.f64[1] = v470[3].f64[1];
        *(_QWORD *)&v480.f64[0] = vdupq_laneq_s64((int64x2_t)v476, 1).u64[0];
        v479 = (float64x2_t)vzip1q_s64((int64x2_t)v476, (int64x2_t)v475);
        v480.f64[1] = v470[5].f64[1];
        v481 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v470, (int64x2_t)v472);
        v482 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v470, (int64x2_t)v472);
        v426 = vmlaq_f64(vmulq_n_f64(v481, v432.f64[0]), v468, v482);
        v483 = vsubq_f64(v469[2], vmlaq_f64(vmulq_n_f64(v479, v432.f64[0]), v468, v480));
        v484 = vsubq_f64(v469[1], vmlaq_f64(vmulq_n_f64(v477, v432.f64[0]), v468, v478));
        v425 = vsubq_f64(*v469, v426);
        *v469 = v425;
        v469[1] = v484;
        v469[2] = v483;
        if (v438 <= 2)
        {
          v485 = vmlaq_laneq_f64(vmulq_n_f64(v481, v471.f64[0]), v482, v471, 1);
          v486 = vmlaq_laneq_f64(vmulq_n_f64(v477, v471.f64[0]), v478, v471, 1);
          v487 = vmlaq_laneq_f64(vmulq_n_f64(v479, v471.f64[0]), v480, v471, 1);
          v488 = vmlaq_laneq_f64(vmulq_n_f64(v481, v472.f64[0]), v482, v472, 1);
          v489 = vmlaq_laneq_f64(vmulq_n_f64(v477, v472.f64[0]), v478, v472, 1);
          v490 = vmlaq_laneq_f64(vmulq_n_f64(v479, v472.f64[0]), v480, v472, 1);
          v491 = vmlaq_laneq_f64(vmulq_n_f64(v481, v474.f64[0]), v482, v474, 1);
          v492 = vmlaq_laneq_f64(vmulq_n_f64(v477, v474.f64[0]), v478, v474, 1);
          v493 = vmlaq_laneq_f64(vmulq_n_f64(v479, v474.f64[0]), v480, v474, 1);
          v494 = vmlaq_laneq_f64(vmulq_n_f64(v481, v473.f64[0]), v482, v473, 1);
          v495 = vmlaq_laneq_f64(vmulq_n_f64(v477, v473.f64[0]), v478, v473, 1);
          v496 = vmlaq_laneq_f64(vmulq_n_f64(v479, v473.f64[0]), v480, v473, 1);
          v497 = vmlaq_laneq_f64(vmulq_n_f64(v481, v476.f64[0]), v482, v476, 1);
          v498 = vmlaq_laneq_f64(vmulq_n_f64(v477, v476.f64[0]), v478, v476, 1);
          v499 = vmlaq_laneq_f64(vmulq_n_f64(v479, v476.f64[0]), v480, v476, 1);
          v500 = vmlaq_laneq_f64(vmulq_n_f64(v481, v475.f64[0]), v482, v475, 1);
          v501 = (float64x2_t *)(v2476 + 288 * ((int)v437 + *(_DWORD *)(v2468 + 4) * (int)v437));
          v502 = vmlaq_laneq_f64(vmulq_n_f64(v477, v475.f64[0]), v478, v475, 1);
          v503 = vaddq_f64(v487, v501[2]);
          v504 = vaddq_f64(v486, v501[1]);
          v505 = vmlaq_laneq_f64(vmulq_n_f64(v479, v475.f64[0]), v480, v475, 1);
          v506 = vaddq_f64(v485, *v501);
          v425 = vaddq_f64(v490, v501[5]);
          v426 = vaddq_f64(v489, v501[4]);
          v507 = vaddq_f64(v488, v501[3]);
          v508 = vaddq_f64(v493, v501[8]);
          v509 = vaddq_f64(v492, v501[7]);
          v510 = vaddq_f64(v491, v501[6]);
          v511 = vaddq_f64(v496, v501[11]);
          v512 = vaddq_f64(v495, v501[10]);
          v513 = vaddq_f64(v494, v501[9]);
          v514 = v501[15];
          v515 = vaddq_f64(v499, v501[14]);
          v516 = vaddq_f64(v498, v501[13]);
          v517 = vaddq_f64(v497, v501[12]);
          v66 = vaddq_f64(v505, v501[17]);
          *v501 = v506;
          v501[1] = v504;
          v501[2] = v503;
          v501[3] = v507;
          v501[4] = v426;
          v501[5] = v425;
          v501[6] = v510;
          v501[7] = v509;
          v501[8] = v508;
          v501[9] = v513;
          v501[10] = v512;
          v501[11] = v511;
          v501[12] = v517;
          v501[13] = v516;
          v501[14] = v515;
          v501[15] = vaddq_f64(v500, v514);
          v501[16] = vaddq_f64(v502, v501[16]);
          v501[17] = v66;
        }
        v518 = 4 * *v422;
        v519 = 32 * *v422;
        if (v440 >= 3)
        {
          v521 = v518 | 2;
        }
        else
        {
          v520 = *(float64x2_t *)(v418 + 32 * *v422);
          v521 = v518 | 2;
          v522 = *(float64x2_t *)(v418 + 8 * v521);
          v523 = vmlaq_laneq_f64(vmulq_n_f64(v481, v520.f64[0]), v482, v520, 1);
          v524 = vmlaq_laneq_f64(vmulq_n_f64(v477, v520.f64[0]), v478, v520, 1);
          v525 = vmlaq_laneq_f64(vmulq_n_f64(v479, v520.f64[0]), v480, v520, 1);
          v526 = vmlaq_laneq_f64(vmulq_n_f64(v481, v522.f64[0]), v482, v522, 1);
          v527 = vmlaq_laneq_f64(vmulq_n_f64(v477, v522.f64[0]), v478, v522, 1);
          v528 = vmlaq_laneq_f64(vmulq_n_f64(v479, v522.f64[0]), v480, v522, 1);
          v529 = (float64x2_t *)(v2460 + 96 * ((int)v439 + *(_DWORD *)(v2452 + 4) * (int)v437));
          v530 = v529[3];
          v425 = v529[4];
          v531 = vaddq_f64(v525, v529[2]);
          v532 = vaddq_f64(v524, v529[1]);
          v533 = vaddq_f64(v528, v529[5]);
          *v529 = vaddq_f64(v523, *v529);
          v529[1] = v532;
          v529[2] = v531;
          v529[3] = vaddq_f64(v526, v530);
          v529[4] = vaddq_f64(v527, v425);
          v529[5] = v533;
        }
        v586 = *(float64x2_t *)(v418 + v519);
        v587 = *(float64x2_t *)(v418 + 8 * v521);
        v588 = (float64x2_t)vzip1q_s64((int64x2_t)v586, (int64x2_t)v587);
        v589 = (float64x2_t)vzip2q_s64((int64x2_t)v586, (int64x2_t)v587);
        *(float64x2_t *)(v424 + 16 * v439) = vsubq_f64(*(float64x2_t *)(v424 + 16 * v439), vmlaq_f64(vmulq_n_f64(v588, v432.f64[0]), v468, v589));
        if (v440 <= 2)
        {
          v590 = (float64x2_t *)(v2444 + 32 * ((int)v439 + *(_DWORD *)(v2436 + 4) * (int)v439));
          v591 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v588, v587.f64[0]), v589, v587, 1), v590[1]);
          *v590 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v588, v586.f64[0]), v589, v586, 1), *v590);
          v590[1] = v591;
        }
        ++v422;
        ++v421;
        ++v420;
        v400 += 16;
        ++v419;
        v428 += 6;
        --v427;
      }
      while (v427);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v395 = v2214;
    v394 = v2216;
    v396 = v2207;
    v393 = v2281;
    v183 = v2304;
  }
  v592 = STACK[0xB40];
  v2196 = STACK[0xB40];
  if ((**(_BYTE **)(v183 + 16) & 1) != 0)
  {
    v593 = *(_QWORD *)(v2256 + 16);
    v594 = _gc_buffer_get_extent();
    v595 = _gc_buffer_get_extent();
    v596 = _gc_buffer_get_extent();
    if (v594 != 2 || v595 != v596)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v396 + 24) |= 1uLL;
    }
    v2392 = *(_QWORD *)(v396 + 16);
    v2317 = *(_QWORD *)(v2286 + 16);
    v597 = _gc_buffer_get_extent();
    v598 = _gc_buffer_get_extent();
    v599 = _gc_buffer_get_extent();
    v600 = _gc_buffer_get_extent();
    if (v597 != 2 || v598 != 3 || v599 != v600)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v395 + 24) |= 1uLL;
    }
    v2398 = *(_QWORD *)(v395 + 16);
    v601 = _gc_buffer_get_extent();
    v602 = _gc_buffer_get_extent();
    v603 = _gc_buffer_get_extent();
    v604 = _gc_buffer_get_extent();
    if (v601 != 2 || v602 != 1 || v603 != v604)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2210 + 24) |= 1uLL;
    }
    v2577 = *(_QWORD *)(v2210 + 16);
    v605 = _gc_buffer_get_extent();
    v606 = _gc_buffer_get_extent();
    v607 = _gc_buffer_get_extent();
    v608 = _gc_buffer_get_extent();
    if (v605 != 2 || v606 != 3 || v607 != v608)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2212 + 24) |= 1uLL;
    }
    v2598 = *(_QWORD *)(v2212 + 16);
    v609 = _gc_buffer_get_extent();
    v610 = _gc_buffer_get_extent();
    v611 = _gc_buffer_get_extent();
    v612 = _gc_buffer_get_extent();
    if (v609 != 2 || v610 != 6 || v611 != v612)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v394 + 24) |= 1uLL;
    }
    v613 = *(_QWORD *)(v394 + 16);
    v614 = _gc_buffer_get_extent();
    v615 = _gc_buffer_get_extent();
    v616 = _gc_buffer_get_extent();
    v617 = _gc_buffer_get_extent();
    if (v614 != 2 || v615 != 2 || v616 != v617)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2218 + 24) |= 1uLL;
    }
    v618 = *(_QWORD *)(v2218 + 16);
    v2305 = *(int **)(v2220 + 16);
    v2568 = *(_QWORD *)(a6 + 16);
    v2560 = *(_QWORD *)(a7 + 16);
    v2553 = *(_QWORD *)(a9 + 16);
    v2544 = *(_QWORD *)(a10 + 16);
    v2534 = *(_QWORD *)(v2222 + 16);
    v2586 = *(_QWORD *)(v2227 + 16);
    v619 = *(_QWORD *)(v2228 + 16);
    v620 = *(_QWORD *)(v2229 + 16);
    v2525 = *(_QWORD *)(a14 + 16);
    v2517 = *(_QWORD *)(a15 + 16);
    v2387 = *(_QWORD *)(a16 + 16);
    v2383 = *(_QWORD *)(a17 + 16);
    v2378 = *(_QWORD *)(a20 + 16);
    v2372 = *(_QWORD *)(a21 + 16);
    v2366 = *(_QWORD *)(a22 + 16);
    v2360 = *(_QWORD *)(a23 + 16);
    v2509 = *(_QWORD *)(a27 + 16);
    v2501 = *(_QWORD *)(a28 + 16);
    v2355 = *(_QWORD *)(a31 + 16);
    v2350 = *(_QWORD *)(a32 + 16);
    v2345 = *(_QWORD *)(a33 + 16);
    v2341 = *(_QWORD *)(a34 + 16);
    v2493 = *(_QWORD *)(a56 + 16);
    v2485 = *(_QWORD *)(a57 + 16);
    v2336 = *(_QWORD *)(a58 + 16);
    v2331 = *(_QWORD *)(a59 + 16);
    v2477 = *(_QWORD *)(a66 + 16);
    v2469 = *(_QWORD *)(v2238 + 16);
    v2461 = *(_QWORD *)(v2243 + 16);
    v2453 = *(_QWORD *)(v2235 + 16);
    v2445 = *(_QWORD *)(v2232 + 16);
    v2437 = *(_QWORD *)(v2231 + 16);
    v2429 = *(_QWORD *)(v2240 + 16);
    v2421 = *(_QWORD *)(v2251 + 16);
    v2413 = *(_QWORD *)(v2239 + 16);
    v2406 = *(_QWORD *)(v2241 + 16);
    v621 = *(_QWORD *)(v2236 + 16);
    v622 = *(_QWORD *)(v2233 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v627 = v2392;
    if ((int)v2321 >= 1)
    {
      v628 = 0;
      v2311 = v2398 + 32;
      v2399 = v618;
      while (v628)
      {
        v629 = v2305[v628 - 1];
        v2325 = v628;
        v630 = v2305[v628];
        if (v629 < (int)v630)
          goto LABEL_167;
LABEL_162:
        v628 = v2325 + 1;
        if (v2325 + 1 == v2321)
          goto LABEL_191;
      }
      v629 = 0;
      v2325 = 0;
      v630 = *v2305;
      if ((int)v630 <= 0)
        goto LABEL_162;
LABEL_167:
      v631 = 3 * v2325 + 2;
      v632 = (float64x2_t *)(v621 + 72 * v2325);
      v633 = (int8x16_t *)&v632[1];
      v634 = (int8x16_t *)&v632[2];
      v635 = v632 + 3;
      v636 = 9 * v2325 + 8;
      v637 = v630 - v629;
      v638 = (float64x2_t *)(v2311 + 48 * v629);
      v639 = (int *)(v2317 + 4 * v629);
      while (1)
      {
        v623.f64[0] = *(float64_t *)(v622 + 8 * v631);
        v641 = v638[-2];
        v640 = v638[-1];
        _Q0 = *v638;
        v643 = *v639;
        v644 = v627 + 16 * v643;
        _Q6 = *(float64x2_t *)v644;
        v646 = (float64x2_t)vzip1q_s64((int64x2_t)v641, (int64x2_t)v640);
        _Q19 = (float64x2_t)vzip2q_s64((int64x2_t)v641, (int64x2_t)v640);
        _D16 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
        _D7 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        _D20 = *(_QWORD *)(v644 + 8);
        __asm { FMLA            D18, D20, V0.D[1] }
        _Q4 = vsubq_f64(v623, _Q18);
        *(float64x2_t *)(v622 + 24 * v2325) = vsubq_f64(*(float64x2_t *)(v622 + 24 * v2325), vmlaq_laneq_f64(vmulq_n_f64(v646, *(double *)v644), _Q19, *(float64x2_t *)v644, 1));
        *(float64_t *)(v622 + 8 * v631) = _Q4.f64[0];
        v652 = vmlaq_laneq_f64(vmulq_n_f64(v646, v641.f64[0]), _Q19, v641, 1);
        _D17 = vextq_s8((int8x16_t)v641, (int8x16_t)v641, 8uLL).u64[0];
        _D18 = v641.f64[1];
        __asm { FMLA            D4, D18, V0.D[1] }
        v655 = vmlaq_laneq_f64(vmulq_n_f64(v646, v640.f64[0]), _Q19, v640, 1);
        _Q18 = (float64x2_t)vextq_s8((int8x16_t)v640, (int8x16_t)v640, 8uLL);
        _D22 = v640.f64[1];
        __asm { FMLA            D21, D22, V0.D[1] }
        v657 = vmlaq_laneq_f64(vmulq_n_f64(v646, _Q0.f64[0]), _Q19, _Q0, 1);
        _D22 = _Q0.f64[1];
        __asm { FMLA            D19, D22, V0.D[1] }
        _Q26.f64[0] = *(float64_t *)(v621 + 8 * v636);
        _Q27 = (float64x2_t)vextq_s8(*v633, *v634, 8uLL);
        v660 = (int64x2_t)vaddq_f64(_Q4, *(float64x2_t *)v633);
        v661 = (int64x2_t)vaddq_f64(v655, _Q27);
        _Q21 = vaddq_f64(_Q21, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v634, 1));
        v662 = vaddq_f64(v657, *v635);
        *v632 = vaddq_f64(v652, *v632);
        *(int64x2_t *)v633 = vzip1q_s64(v660, v661);
        *v634 = vextq_s8((int8x16_t)v661, (int8x16_t)_Q21, 8uLL);
        *v635 = v662;
        *(_QWORD *)(v621 + 8 * v636) = *(_OWORD *)&vaddq_f64(_Q19, _Q26);
        v663 = 6 * v643;
        v664 = *(int *)(v593 + 24 * v643);
        if (v664 >> 30 == 3)
        {
          v676 = v663 | 1;
          goto LABEL_178;
        }
        _Q3 = *(int8x16_t *)(v2577 + 16 * *(int *)(v2534 + 4 * v643));
        __asm
        {
          FMLA            D5, D17, V3.D[1]
          FMLA            D4, D18, V3.D[1]
        }
        *((_QWORD *)&_Q5 + 1) = _D4;
        _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
        v669 = 8 * *(int *)(v2568 + 4 * v664);
        __asm { FMLA            D20, D7, V3.D[1] }
        v671 = *(double *)(v2429 + v669) - _D20;
        __asm { FMLA            D20, D16, V3.D[1] }
        v673 = v2461 + 24 * v643;
        *(double *)(v2429 + v669) = v671;
        *(_OWORD *)v673 = _Q5;
        _D19 = _Q3.i64[1];
        __asm { FMLA            D5, D19, V3.D[1] }
        v675 = 8 * ((int)v664 + *(_DWORD *)(v2517 + 4) * (int)v664);
        *(double *)(v2525 + v675) = *(double *)&_Q5 + *(double *)(v2525 + v675);
        *(_QWORD *)(v673 + 16) = _D20;
        v676 = v663 | 1;
        v677 = *(_DWORD *)(v593 + 4 * (v663 | 1));
        if (v677 >> 30 == 3)
        {
          v678 = v593 + 24 * v643;
          v679 = *(_DWORD *)(v678 + 16);
          if (v679 >> 30 != 3)
            goto LABEL_176;
        }
        else
        {
          v681 = (__int128 *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
          _Q5 = *v681;
          _Q19 = v681[1];
          _Q20 = v681[2];
          __asm
          {
            FMLA            D21, D4, V5.D[1]
            FMLA            D5, D4, V19.D[1]
            FMLA            D19, D4, V20.D[1]
          }
          v686 = (double *)(v2387 + 24 * (int)(v677 + *(_DWORD *)(v2383 + 4) * v664));
          _Q21.f64[0] = _D21 + *v686;
          *(double *)&_Q19 = *(double *)&_Q19 + v686[2];
          _Q21.f64[1] = *(double *)&_Q5 + v686[1];
          *(float64x2_t *)v686 = _Q21;
          *((_QWORD *)v686 + 2) = _Q19;
          v678 = v593 + 24 * v643;
          v679 = *(_DWORD *)(v678 + 16);
          if (v679 >> 30 != 3)
          {
LABEL_176:
            v687 = (float64x2_t *)(v613 + 96 * *(int *)(v619 + 4 * v643));
            _Q5 = *v687;
            _Q19 = v687[1];
            _Q20 = v687[2];
            _Q21 = v687[3];
            _Q22 = v687[4];
            _Q23 = v687[5];
            __asm
            {
              FMLA            D24, D4, V5.D[1]
              FMLA            D5, D4, V19.D[1]
              FMLA            D19, D4, V20.D[1]
              FMLA            D20, D4, V21.D[1]
              FMLA            D21, D4, V22.D[1]
              FMLA            D22, D4, V23.D[1]
            }
            v695 = (float64x2_t *)(v2378 + 48 * (int)(v679 + *(_DWORD *)(v2372 + 4) * v664));
            _Q26 = v695[2];
            v696.f64[0] = _D24 + v695->f64[0];
            _Q19.f64[0] = _Q19.f64[0] + v695[1].f64[0];
            _Q21.f64[0] = _Q21.f64[0] + _Q26.f64[0];
            v696.f64[1] = _Q5.f64[0] + v695->f64[1];
            _Q19.f64[1] = _Q20.f64[0] + v695[1].f64[1];
            _Q21.f64[1] = _Q22.f64[0] + v695[2].f64[1];
            *v695 = v696;
            v695[1] = _Q19;
            v695[2] = _Q21;
            v680 = *(_DWORD *)(v678 + 20);
            if (v680 >> 30 == 3)
              goto LABEL_178;
LABEL_177:
            v697 = (__int128 *)(v618 + 32 * *(int *)(v620 + 4 * v643));
            _Q5 = *v697;
            _Q19 = v697[1];
            __asm
            {
              FMLA            D20, D4, V5.D[1]
              FMLA            D3, D4, V19.D[1]
            }
            v702 = (double *)(v2366 + 16 * (int)(v680 + *(_DWORD *)(v2360 + 4) * v664));
            v703 = _D3 + v702[1];
            *v702 = _D20 + *v702;
            v702[1] = v703;
            goto LABEL_178;
          }
        }
        v680 = *(_DWORD *)(v678 + 20);
        if (v680 >> 30 != 3)
          goto LABEL_177;
LABEL_178:
        v704 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v641, 1);
        v623 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v640, 1);
        v705 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
        v706 = *(int *)(v593 + 4 * v676);
        if (v706 >> 30 == 3)
        {
          v728 = v663 + 4;
          v729 = *(_DWORD *)(v593 + 4 * (v663 + 4));
          if (v729 >> 30 != 3)
            goto LABEL_187;
        }
        else
        {
          v707 = (float64x2_t *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
          v709 = *v707;
          v708 = v707[1];
          _Q19 = v707[2];
          v711 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v707, (int64x2_t)v708);
          _Q21 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v707, (int64x2_t)v708);
          __asm { FMLA            D26, D17, V19.D[1] }
          v713 = vmlaq_f64(vmulq_n_f64(v711, v640.f64[0]), v623, _Q21);
          __asm
          {
            FMLA            D27, D18, V19.D[1]
            FMLA            D28, D16, V19.D[1]
          }
          v715 = v2453 + 72 * v643;
          _Q26.f64[1] = v713.f64[0];
          *(float64x2_t *)v715 = vmlaq_f64(vmulq_n_f64(v711, v641.f64[0]), v704, _Q21);
          *(float64x2_t *)(v715 + 16) = _Q26;
          *(int8x16_t *)(v715 + 32) = vextq_s8((int8x16_t)v713, (int8x16_t)_Q27, 8uLL);
          *(float64x2_t *)(v715 + 48) = vmlaq_f64(vmulq_n_f64(v711, _Q0.f64[0]), v705, _Q21);
          *(_QWORD *)(v715 + 64) = _D28;
          v716 = (float64x2_t *)(v2421 + 24 * *(int *)(v2560 + 4 * v706));
          v713.f64[0] = v716[1].f64[0];
          _Q18 = vmlaq_f64(vmulq_n_f64(v711, _Q6.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), _Q21);
          __asm { FMLA            D6, D7, V19.D[1] }
          *v716 = vsubq_f64(*v716, _Q18);
          *(_QWORD *)&v716[1].f64[0] = *(_OWORD *)&vsubq_f64(v713, _Q6);
          v718 = vmlaq_laneq_f64(vmulq_n_f64(v711, v709.f64[0]), _Q21, v709, 1);
          _Q7 = vmulq_f64(_Q19, v709);
          _D16 = v709.f64[1];
          __asm { FMLA            D7, D16, V19.D[1] }
          v721 = vmlaq_laneq_f64(vmulq_n_f64(v711, v708.f64[0]), _Q21, v708, 1);
          _Q17 = vmulq_f64(_Q19, v708);
          _Q18.f64[0] = v708.f64[1];
          __asm { FMLA            D17, D18, V19.D[1] }
          v723 = vmlaq_laneq_f64(vmulq_n_f64(v711, _Q19.f64[0]), _Q21, _Q19, 1);
          _Q20 = vmulq_f64(_Q19, _Q19);
          _Q21.f64[0] = _Q19.f64[1];
          __asm { FMLA            D20, D21, V19.D[1] }
          v725 = v2509 + 72 * ((int)v706 + *(_DWORD *)(v2501 + 4) * (int)v706);
          _Q21 = *(float64x2_t *)(v725 + 16);
          v726 = *(int64x2_t *)(v725 + 32);
          v709.f64[0] = *(float64_t *)(v725 + 64);
          v727 = (int64x2_t)vaddq_f64(v721, (float64x2_t)vextq_s8((int8x16_t)_Q21, (int8x16_t)v726, 8uLL));
          _Q18 = vaddq_f64(v723, *(float64x2_t *)(v725 + 48));
          *(float64x2_t *)v725 = vaddq_f64(v718, *(float64x2_t *)v725);
          *(int64x2_t *)(v725 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q7, _Q21), v727);
          *(int8x16_t *)(v725 + 32) = vextq_s8((int8x16_t)v727, (int8x16_t)vaddq_f64(_Q17, (float64x2_t)vdupq_laneq_s64(v726, 1)), 8uLL);
          *(float64x2_t *)(v725 + 48) = _Q18;
          *(_QWORD *)(v725 + 64) = *(_OWORD *)&vaddq_f64(_Q20, v709);
          v728 = v663 + 4;
          v729 = *(_DWORD *)(v593 + 4 * (v663 + 4));
          if (v729 >> 30 == 3)
          {
            v730 = *(_DWORD *)(v593 + 24 * v643 + 20);
            if (v730 >> 30 == 3)
              goto LABEL_181;
          }
          else
          {
            v731 = (float64x2_t *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
            v618 = v2399;
            v2615 = vld2q_f64(v731->f64);
            v731 += 2;
            _Q20 = *v731;
            v733 = v613 + 96 * *(int *)(v619 + 4 * v643);
            _Q21 = *(float64x2_t *)(v733 + 16);
            _Q22 = *(float64x2_t *)(v733 + 32);
            _Q23 = *(float64x2_t *)(v733 + 48);
            _Q24 = *(float64x2_t *)(v733 + 64);
            v738 = *(float64x2_t *)(v733 + 80);
            v739 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], *(double *)v733), v2615.val[1], *(float64x2_t *)v733, 1);
            _Q7 = vmulq_f64(*v731, *(float64x2_t *)v733);
            _D16 = *(_QWORD *)(v733 + 8);
            __asm { FMLA            D7, D16, V20.D[1] }
            v742 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q21.f64[0]), v2615.val[1], _Q21, 1);
            _Q17 = vmulq_f64(*v731, _Q21);
            _Q21.f64[0] = *(float64_t *)(v733 + 24);
            __asm { FMLA            D17, D21, V20.D[1] }
            v744 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q22.f64[0]), v2615.val[1], _Q22, 1);
            _Q26 = vmulq_f64(*v731, _Q22);
            _Q22.f64[0] = *(float64_t *)(v733 + 40);
            __asm { FMLA            D26, D22, V20.D[1] }
            v745 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q23.f64[0]), v2615.val[1], _Q23, 1);
            _Q27 = vmulq_f64(*v731, _Q23);
            _Q23.f64[0] = *(float64_t *)(v733 + 56);
            __asm { FMLA            D27, D23, V20.D[1] }
            v747 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q24.f64[0]), v2615.val[1], _Q24, 1);
            _Q28 = vmulq_f64(*v731, _Q24);
            _Q24.f64[0] = *(float64_t *)(v733 + 72);
            __asm { FMLA            D28, D24, V20.D[1] }
            v749 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], v738.f64[0]), v2615.val[1], v738, 1);
            _Q18 = vmulq_f64(*v731, v738);
            v2615.val[1].f64[0] = *(float64_t *)(v733 + 88);
            __asm { FMLA            D18, D19, V20.D[1] }
            LODWORD(v733) = *(_DWORD *)(v2350 + 4) * *(_DWORD *)(v593 + 4 * v676);
            v750 = v2355 + 144 * (int)(v733 + v729);
            v751 = *(float64x2_t *)(v750 + 16);
            v752 = *(int64x2_t *)(v750 + 32);
            v753 = *(float64x2_t *)(v750 + 64);
            v754 = *(int64x2_t *)(v750 + 80);
            v66 = *(float64x2_t *)(v750 + 96);
            v755 = *(float64x2_t *)(v750 + 112);
            v756 = *(int64x2_t *)(v750 + 128);
            v757 = (int64x2_t)vaddq_f64(_Q7, v751);
            v758 = (int64x2_t)vaddq_f64(v742, (float64x2_t)vextq_s8((int8x16_t)v751, (int8x16_t)v752, 8uLL));
            v759 = vaddq_f64(v744, *(float64x2_t *)(v750 + 48));
            _Q21 = vaddq_f64(v745, (float64x2_t)vextq_s8((int8x16_t)v753, (int8x16_t)v754, 8uLL));
            v760 = (int64x2_t)vaddq_f64(v749, (float64x2_t)vextq_s8((int8x16_t)v755, (int8x16_t)v756, 8uLL));
            *(float64x2_t *)v750 = vaddq_f64(v739, *(float64x2_t *)v750);
            v729 = *(_DWORD *)(v593 + 4 * v728);
            v761 = v2355 + 144 * (int)(v733 + v729);
            *(int64x2_t *)(v761 + 16) = vzip1q_s64(v757, v758);
            *(int8x16_t *)(v761 + 32) = vextq_s8((int8x16_t)v758, (int8x16_t)vaddq_f64(_Q17, (float64x2_t)vdupq_laneq_s64(v752, 1)), 8uLL);
            *(float64x2_t *)(v761 + 48) = v759;
            *(int64x2_t *)(v761 + 64) = vzip1q_s64((int64x2_t)vaddq_f64(_Q26, v753), (int64x2_t)_Q21);
            *(int8x16_t *)(v761 + 80) = vextq_s8((int8x16_t)_Q21, (int8x16_t)vaddq_f64(_Q27, (float64x2_t)vdupq_laneq_s64(v754, 1)), 8uLL);
            *(float64x2_t *)(v761 + 96) = vaddq_f64(v747, v66);
            *(int64x2_t *)(v761 + 112) = vzip1q_s64((int64x2_t)vaddq_f64(_Q28, v755), v760);
            *(int8x16_t *)(v761 + 128) = vextq_s8((int8x16_t)v760, (int8x16_t)vaddq_f64(_Q18, (float64x2_t)vdupq_laneq_s64(v756, 1)), 8uLL);
            v730 = *(_DWORD *)(v593 + 24 * v643 + 20);
            if (v730 >> 30 == 3)
            {
LABEL_181:
              if (v729 >> 30 != 3)
                goto LABEL_187;
              goto LABEL_189;
            }
          }
          v762 = (const double *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
          v618 = v2399;
          v2612 = vld2q_f64(v762);
          v762 += 4;
          _Q16 = *(float64x2_t *)v762;
          v627 = v2392;
          v764 = v2399 + 32 * *(int *)(v620 + 4 * v643);
          v765 = *(float64x2_t *)(v764 + 16);
          v766 = vmlaq_laneq_f64(vmulq_n_f64(v2612.val[0], *(double *)v764), v2612.val[1], *(float64x2_t *)v764, 1);
          _Q20 = vmulq_f64(_Q16, *(float64x2_t *)v764);
          _D17 = *(_QWORD *)(v764 + 8);
          __asm { FMLA            D20, D17, V16.D[1] }
          v769 = vmlaq_laneq_f64(vmulq_n_f64(v2612.val[0], v765.f64[0]), v2612.val[1], v765, 1);
          v2612.val[0] = vmulq_f64(_Q16, v765);
          v2612.val[1].f64[0] = *(float64_t *)(v764 + 24);
          __asm { FMLA            D6, D7, V16.D[1] }
          v770 = v2345 + 48 * (int)(v730 + *(_DWORD *)(v2341 + 4) * *(_DWORD *)(v593 + 4 * v676));
          v771 = *(float64x2_t *)(v770 + 16);
          v772 = *(int64x2_t *)(v770 + 32);
          _Q21 = (float64x2_t)vextq_s8((int8x16_t)v771, (int8x16_t)v772, 8uLL);
          _Q18 = (float64x2_t)vdupq_laneq_s64(v772, 1);
          v773 = (int64x2_t)vaddq_f64(v769, _Q21);
          *(float64x2_t *)v770 = vaddq_f64(v766, *(float64x2_t *)v770);
          *(int64x2_t *)(v770 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q20, v771), v773);
          *(int8x16_t *)(v770 + 32) = vextq_s8((int8x16_t)v773, (int8x16_t)vaddq_f64(v2612.val[0], _Q18), 8uLL);
          if (v729 >> 30 != 3)
          {
LABEL_187:
            v774 = 4 * v643;
            v775 = v613 + 96 * *(int *)(v619 + 4 * v643);
            v776 = *(int64x2_t *)v775;
            v777 = *(int64x2_t *)(v775 + 16);
            v778 = (const double *)(v775 + 32);
            v2613 = vld2q_f64(v778);
            v775 += 64;
            v2616 = vld2q_f64((const double *)v775);
            v779 = (float64x2_t)vzip1q_s64(v776, v777);
            v780 = (float64x2_t)vzip2q_s64(v776, v777);
            v781 = (float64x2_t *)(v2445 + 144 * v643);
            *v781 = vmlaq_f64(vmulq_n_f64(v779, v641.f64[0]), v704, v780);
            v781[1] = vmlaq_f64(vmulq_n_f64(v2613.val[0], v641.f64[0]), v704, v2613.val[1]);
            v781[2] = vmlaq_f64(vmulq_n_f64(v2616.val[0], v641.f64[0]), v704, v2616.val[1]);
            v781[3] = vmlaq_f64(vmulq_n_f64(v779, v640.f64[0]), v623, v780);
            v781[4] = vmlaq_f64(vmulq_n_f64(v2613.val[0], v640.f64[0]), v623, v2613.val[1]);
            v781[5] = vmlaq_f64(vmulq_n_f64(v2616.val[0], v640.f64[0]), v623, v2616.val[1]);
            v781[6] = vmlaq_f64(vmulq_n_f64(v779, _Q0.f64[0]), v705, v780);
            v781[7] = vmlaq_f64(vmulq_n_f64(v2613.val[0], _Q0.f64[0]), v705, v2613.val[1]);
            v782 = *(int *)(v2553 + 4 * (int)v729);
            v781[8] = vmlaq_f64(vmulq_n_f64(v2616.val[0], _Q0.f64[0]), v705, v2616.val[1]);
            v783 = (float64x2_t *)(v2413 + 48 * v782);
            v784 = vsubq_f64(v783[2], vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], *(double *)v644), v2616.val[1], *(float64x2_t *)v644, 1));
            v785 = vsubq_f64(v783[1], vmlaq_laneq_f64(vmulq_n_f64(v2613.val[0], *(double *)v644), v2613.val[1], *(float64x2_t *)v644, 1));
            *v783 = vsubq_f64(*v783, vmlaq_laneq_f64(vmulq_n_f64(v779, *(double *)v644), v780, *(float64x2_t *)v644, 1));
            v786 = *(int *)(v593 + 4 * v728);
            v787 = (float64x2_t *)(v2413 + 48 * *(int *)(v2553 + 4 * v786));
            v788 = *(int *)(v619 + v774);
            v787[1] = v785;
            v787[2] = v784;
            v789 = v613 + 96 * v788;
            v790 = *(float64x2_t *)(v789 + 16);
            v791 = *(float64x2_t *)(v789 + 32);
            v2614 = *(float64x2x2_t *)(v789 + 48);
            v792 = *(float64x2_t *)(v789 + 80);
            v2616.val[0] = (float64x2_t)vzip1q_s64((int64x2_t)v791, (int64x2_t)v2614.val[0]);
            v2616.val[1] = (float64x2_t)vzip1q_s64((int64x2_t)v2614.val[1], (int64x2_t)v792);
            *(_QWORD *)&v779.f64[0] = vdupq_laneq_s64((int64x2_t)v791, 1).u64[0];
            v779.f64[1] = *(float64_t *)(v789 + 56);
            *(_QWORD *)&v793.f64[0] = vdupq_laneq_s64((int64x2_t)v2614.val[1], 1).u64[0];
            v793.f64[1] = *(float64_t *)(v789 + 88);
            v794 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v789, (int64x2_t)v790);
            v795 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v789, (int64x2_t)v790);
            v796 = vmlaq_laneq_f64(vmulq_n_f64(v794, *(double *)v789), v795, *(float64x2_t *)v789, 1);
            v797 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], *(double *)v789), v779, *(float64x2_t *)v789, 1);
            v798 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], *(double *)v789), v793, *(float64x2_t *)v789, 1);
            v799 = vmlaq_laneq_f64(vmulq_n_f64(v794, v790.f64[0]), v795, v790, 1);
            v800 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v790.f64[0]), v779, v790, 1);
            v801 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v790.f64[0]), v793, v790, 1);
            v802 = vmlaq_laneq_f64(vmulq_n_f64(v794, v791.f64[0]), v795, v791, 1);
            v803 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v791.f64[0]), v779, v791, 1);
            v804 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v791.f64[0]), v793, v791, 1);
            v805 = vmlaq_laneq_f64(vmulq_n_f64(v794, v2614.val[0].f64[0]), v795, v2614.val[0], 1);
            v806 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v2614.val[0].f64[0]), v779, v2614.val[0], 1);
            v807 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v2614.val[0].f64[0]), v793, v2614.val[0], 1);
            v2614.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v794, v2614.val[1].f64[0]), v795, v2614.val[1], 1);
            v808 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v2614.val[1].f64[0]), v779, v2614.val[1], 1);
            v809 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v2614.val[1].f64[0]), v793, v2614.val[1], 1);
            v2614.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v794, v792.f64[0]), v795, v792, 1);
            v2616.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v792.f64[0]), v779, v792, 1);
            v2616.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v792.f64[0]), v793, v792, 1);
            v810 = (float64x2_t *)(v2493 + 288 * ((int)v786 + *(_DWORD *)(v2485 + 4) * (int)v786));
            v811 = vaddq_f64(v798, v810[2]);
            v812 = vaddq_f64(v797, v810[1]);
            v813 = vaddq_f64(v801, v810[5]);
            v623 = vaddq_f64(v800, v810[4]);
            v814 = vaddq_f64(v799, v810[3]);
            v815 = vaddq_f64(v804, v810[8]);
            v816 = vaddq_f64(v803, v810[7]);
            v817 = vaddq_f64(v802, v810[6]);
            v818 = vaddq_f64(v807, v810[11]);
            v819 = vaddq_f64(v806, v810[10]);
            v820 = vaddq_f64(v805, v810[9]);
            _Q21 = vaddq_f64(v809, v810[14]);
            _Q26 = vaddq_f64(v808, v810[13]);
            v2614.val[0] = vaddq_f64(v2614.val[0], v810[12]);
            v2616.val[1] = vaddq_f64(v2616.val[1], v810[17]);
            _Q18 = vaddq_f64(v2616.val[0], v810[16]);
            v2614.val[1] = vaddq_f64(v2614.val[1], v810[15]);
            *v810 = vaddq_f64(v796, *v810);
            v810[1] = v812;
            v810[2] = v811;
            v821 = (float64x2_t *)(v2493 + 288 * ((int)v786 + *(_DWORD *)(v2485 + 4) * (int)v786));
            v821[3] = v814;
            v821[4] = v623;
            v821[5] = v813;
            v821[6] = v817;
            v821[7] = v816;
            v821[8] = v815;
            v821[9] = v820;
            v821[10] = v819;
            v821[11] = v818;
            v821[12] = v2614.val[0];
            v821[13] = _Q26;
            v821[14] = _Q21;
            v821[15] = v2614.val[1];
            v821[16] = _Q18;
            v821[17] = v2616.val[1];
            v822 = *(_DWORD *)(v593 + 4 * v663 + 20);
            if (v822 >> 30 != 3)
            {
              v823 = v613 + 96 * *(int *)(v619 + v774);
              v824 = (const double *)(v823 + 32);
              v2609 = vld2q_f64(v824);
              v825 = *(int64x2_t *)v823;
              v826 = *(int64x2_t *)(v823 + 16);
              v823 += 64;
              v2611 = vld2q_f64((const double *)v823);
              v827 = (float64x2_t *)(v618 + 32 * *(int *)(v620 + v774));
              v828 = v827[1];
              v829 = (float64x2_t)vzip1q_s64(v825, v826);
              v830 = (float64x2_t)vzip2q_s64(v825, v826);
              v831 = vmlaq_laneq_f64(vmulq_n_f64(v829, v827->f64[0]), v830, *v827, 1);
              v832 = vmlaq_laneq_f64(vmulq_n_f64(v2609.val[0], v827->f64[0]), v2609.val[1], *v827, 1);
              _Q18 = vmlaq_laneq_f64(vmulq_n_f64(v2611.val[0], v827->f64[0]), v2611.val[1], *v827, 1);
              v833 = vmlaq_laneq_f64(vmulq_n_f64(v829, v828.f64[0]), v830, v828, 1);
              v834 = vmlaq_laneq_f64(vmulq_n_f64(v2609.val[0], v828.f64[0]), v2609.val[1], v828, 1);
              v2609.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v2611.val[0], v828.f64[0]), v2611.val[1], v828, 1);
              v835 = (float64x2_t *)(v2336 + 96 * (int)(v822 + *(_DWORD *)(v2331 + 4) * *(_DWORD *)(v593 + 4 * v728)));
              v2611.val[1] = vaddq_f64(_Q18, v835[2]);
              v836 = vaddq_f64(v832, v835[1]);
              v623 = vaddq_f64(v833, v835[3]);
              v2609.val[0] = vaddq_f64(v2609.val[0], v835[5]);
              v837 = vaddq_f64(v834, v835[4]);
              *v835 = vaddq_f64(v831, *v835);
              v835[1] = v836;
              v835[2] = v2611.val[1];
              v835[3] = v623;
              v835[4] = v837;
              v835[5] = v2609.val[0];
            }
          }
        }
LABEL_189:
        v838 = *v639;
        v839 = *(int *)(v593 + 24 * v838 + 20);
        if (v839 >> 30 != 3)
        {
          v840 = (float64x2_t *)(v618 + 32 * *(int *)(v620 + 4 * v838));
          v841 = *v840;
          v842 = v840[1];
          v843 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v840, (int64x2_t)v842);
          v844 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v840, (int64x2_t)v842);
          v845 = vmlaq_laneq_f64(vmulq_n_f64(v843, v638[-1].f64[0]), v844, v638[-1], 1);
          v846 = vmlaq_laneq_f64(vmulq_n_f64(v843, v638->f64[0]), v844, *v638, 1);
          v847 = (float64x2_t *)(v2437 + 48 * v838);
          *v847 = vmlaq_laneq_f64(vmulq_n_f64(v843, v638[-2].f64[0]), v844, v638[-2], 1);
          v847[1] = v845;
          v847[2] = v846;
          v848 = 16 * *(int *)(v2544 + 4 * v839);
          *(float64x2_t *)(v2406 + v848) = vsubq_f64(*(float64x2_t *)(v2406 + v848), vmlaq_laneq_f64(vmulq_n_f64(v843, *(double *)(v627 + 16 * v838)), v844, *(float64x2_t *)(v627 + 16 * v838), 1));
          v623 = vmlaq_laneq_f64(vmulq_n_f64(v843, v841.f64[0]), v844, v841, 1);
          v849 = (float64x2_t *)(v2477 + 32 * ((int)v839 + *(_DWORD *)(v2469 + 4) * (int)v839));
          v850 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v843, v842.f64[0]), v844, v842, 1), v849[1]);
          *v849 = vaddq_f64(v623, *v849);
          v849[1] = v850;
        }
        ++v639;
        v638 += 3;
        if (!--v637)
          goto LABEL_162;
      }
    }
LABEL_191:
    *(_QWORD *)(v2236 + 24) |= 1uLL;
    *(_QWORD *)(v2233 + 24) |= 1uLL;
    *(_QWORD *)(v2231 + 24) |= 1uLL;
    *(_QWORD *)(v2232 + 24) |= 1uLL;
    *(_QWORD *)(v2235 + 24) |= 1uLL;
    *(_QWORD *)(v2243 + 24) |= 1uLL;
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v395 = v2214;
    v394 = v2216;
    v396 = v2207;
    v592 = v2196;
    v393 = v2281;
  }
  v851 = STACK[0xB48];
  v2205 = STACK[0x950];
  v2193 = STACK[0xB48];
  v852 = STACK[0x940];
  v2224 = STACK[0x930];
  v853 = STACK[0x928];
  v2237 = STACK[0x758];
  v2203 = STACK[0x940];
  v2200 = STACK[0x928];
  if ((**(_BYTE **)(v393 + 16) & 1) != 0)
  {
    v854 = *(_QWORD *)(v2256 + 16);
    v855 = _gc_buffer_get_extent();
    v856 = _gc_buffer_get_extent();
    v857 = _gc_buffer_get_extent();
    if (v855 != 2 || v856 != v857)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v396 + 24) |= 1uLL;
    }
    v858 = *(_QWORD *)(v396 + 16);
    v2282 = *(_QWORD *)(v2286 + 16);
    v859 = _gc_buffer_get_extent();
    v860 = _gc_buffer_get_extent();
    v861 = _gc_buffer_get_extent();
    v862 = _gc_buffer_get_extent();
    if (v859 != 2 || v860 != 3 || v861 != v862)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v395 + 24) |= 1uLL;
    }
    v2599 = *(_QWORD *)(v395 + 16);
    v863 = _gc_buffer_get_extent();
    v864 = _gc_buffer_get_extent();
    v865 = _gc_buffer_get_extent();
    v866 = _gc_buffer_get_extent();
    if (v863 != 2 || v864 != 1 || v865 != v866)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2210 + 24) |= 1uLL;
    }
    v2486 = *(_QWORD *)(v2210 + 16);
    v867 = _gc_buffer_get_extent();
    v868 = _gc_buffer_get_extent();
    v869 = _gc_buffer_get_extent();
    v870 = _gc_buffer_get_extent();
    if (v867 != 2 || v868 != 3 || v869 != v870)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2212 + 24) |= 1uLL;
    }
    v871 = *(_QWORD *)(v2212 + 16);
    v872 = _gc_buffer_get_extent();
    v873 = _gc_buffer_get_extent();
    v874 = _gc_buffer_get_extent();
    v875 = _gc_buffer_get_extent();
    if (v872 != 2 || v873 != 6 || v874 != v875)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v394 + 24) |= 1uLL;
    }
    v876 = *(_QWORD *)(v394 + 16);
    v877 = _gc_buffer_get_extent();
    v878 = _gc_buffer_get_extent();
    v879 = _gc_buffer_get_extent();
    v880 = _gc_buffer_get_extent();
    if (v877 != 2 || v878 != 2 || v879 != v880)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2218 + 24) |= 1uLL;
    }
    v881 = *(_QWORD *)(v2218 + 16);
    v2254 = *(int **)(v2220 + 16);
    v2478 = *(_QWORD *)(v2222 + 16);
    v882 = *(_QWORD *)(v2227 + 16);
    v883 = *(_QWORD *)(v2228 + 16);
    v884 = *(_QWORD *)(v2229 + 16);
    v2470 = *(_QWORD *)(a14 + 16);
    v2278 = *(_QWORD *)(a15 + 16);
    v2462 = *(_QWORD *)(a16 + 16);
    v2274 = *(_QWORD *)(a17 + 16);
    v2454 = *(_QWORD *)(a20 + 16);
    v2270 = *(_QWORD *)(a21 + 16);
    v2446 = *(_QWORD *)(a22 + 16);
    v2267 = *(_QWORD *)(a23 + 16);
    v2438 = *(_QWORD *)(a27 + 16);
    v2430 = *(_QWORD *)(a28 + 16);
    v2422 = *(_QWORD *)(a31 + 16);
    v2414 = *(_QWORD *)(a32 + 16);
    v2407 = *(_QWORD *)(a33 + 16);
    v2400 = *(_QWORD *)(a34 + 16);
    v2393 = *(_QWORD *)(a56 + 16);
    v2388 = *(_QWORD *)(a57 + 16);
    v885 = *(_QWORD *)(a58 + 16);
    v2379 = *(_QWORD *)(a59 + 16);
    v2373 = *(_QWORD *)(a66 + 16);
    v2367 = *(_QWORD *)(v2238 + 16);
    v2361 = *(_QWORD *)(v2243 + 16);
    v2356 = *(_QWORD *)(v2235 + 16);
    v2351 = *(_QWORD *)(v2232 + 16);
    v2346 = *(_QWORD *)(v2231 + 16);
    v2264 = *(_QWORD *)(v2240 + 16);
    v886 = *(_QWORD *)(v2251 + 16);
    v2337 = *(_QWORD *)(v2239 + 16);
    v2260 = *(_QWORD *)(v2241 + 16);
    v2332 = *(_QWORD *)(v2236 + 16);
    v2326 = *(_QWORD *)(v2233 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2321 >= 1)
    {
      v889 = 0;
      v2257 = v2599 + 32;
      do
      {
        if (v889)
        {
          v890 = v2254[v889 - 1];
          v891 = v2254[v889];
          if (v890 < (int)v891)
            goto LABEL_222;
        }
        else
        {
          v890 = 0;
          v891 = *v2254;
          if ((int)v891 > 0)
          {
LABEL_222:
            v892 = v2332 + 72 * v889;
            v893 = *(int64x2_t *)(v892 + 16);
            v894 = *(int8x16_t *)(v892 + 32);
            v895 = (float64x2_t *)v892;
            v896 = v895[3];
            v2294 = v895 + 3;
            v2518 = *(_DWORD *)(v2278 + 4);
            v2510 = *(_DWORD *)(v2274 + 4);
            v2502 = *(_DWORD *)(v2270 + 4);
            v2494 = *(_DWORD *)(v2267 + 4);
            v2312 = (float64x2_t *)(v2326 + 24 * v889);
            v897 = *v2312;
            v2287 = 3 * v889 + 2;
            v888.f64[0] = *(float64_t *)(v2326 + 8 * v2287);
            v2306 = v895;
            v898 = *v895;
            v2290 = 9 * v889 + 8;
            v887.f64[0] = *(float64_t *)(v2332 + 8 * v2290);
            v899 = v891 - v890;
            v900 = (float64x2_t *)(v2257 + 48 * v890);
            v901 = (int *)(v2282 + 4 * v890);
            do
            {
              v2526 = (int64x2_t)v894;
              v2569 = (float64x2_t)v893;
              v2578 = v888;
              v2587 = v887;
              v2600 = v896;
              v903 = v900[-2];
              v902 = v900[-1];
              v904 = *v901++;
              _Q17 = *v900;
              _Q18 = *(float64x2_t *)(v858 + 16 * v904);
              _D0 = v900[-2].f64[1];
              _D1 = v900[-1].f64[1];
              v2561 = *(double *)(v858 + 16 * v904 + 8);
              _D3 = v900->f64[1];
              _Q23 = *(_OWORD *)(v2486 + 16 * *(int *)(v2478 + 4 * v904));
              __asm { FMLA            D27, D0, V23.D[1] }
              v2554 = _D0;
              v912 = v2361 + 24 * v904;
              __asm { FMLA            D29, D1, V23.D[1] }
              v2545 = _D1;
              v914 = (int *)(v854 + 24 * v904);
              v915 = v914[1];
              v916 = *v914;
              __asm { FMLA            D28, D3, V23.D[1] }
              v2535 = _D3;
              v918 = *(double *)(v2264 + 8 * v916);
              __asm { FMLA            D31, D2, V23.D[1] }
              v920 = 8 * ((int)v916 + v2518 * (int)v916);
              v921 = *(double *)(v2470 + v920);
              _D10 = *(_QWORD *)(v2486 + 16 * *(int *)(v2478 + 4 * v904) + 8);
              v923 = v871 + 48 * *(int *)(v882 + 4 * v904);
              v924 = *(int64x2_t *)v923;
              v925 = *(int64x2_t *)(v923 + 16);
              _Q24 = *(_OWORD *)(v923 + 32);
              __asm { FMLA            D8, D10, V23.D[1] }
              _D11 = *(_QWORD *)(v923 + 8);
              __asm { FMLA            D10, D11, V23.D[1] }
              _Q27.f64[1] = _D29;
              _D29 = *(_QWORD *)(v923 + 24);
              __asm { FMLA            D11, D29, V23.D[1] }
              _D12 = *(_QWORD *)(v923 + 40);
              __asm { FMLA            D29, D12, V23.D[1] }
              *(_QWORD *)(v912 + 16) = _D28;
              v934 = (double *)(v2462 + 24 * (v915 + v2510 * (int)v916));
              v935 = *(_OWORD *)v934;
              v936 = v934[1];
              v937 = v934[2];
              v938 = v918 - _D31;
              v939 = (float64x2_t *)(v876 + 96 * *(int *)(v883 + 4 * v904));
              _Q31 = *v939;
              _Q14 = v939[1];
              v942 = _D8 + v921;
              _Q9 = v939[2];
              v944 = v939[3];
              _Q2 = v939[4];
              _Q21 = v939[5];
              *(double *)(v2264 + 8 * v916) = v938;
              _Q31.f64[0] = _Q31.f64[1];
              __asm { FMLA            D30, D31, V23.D[1] }
              _Q14.f64[0] = _Q14.f64[1];
              *(float64x2_t *)v912 = _Q27;
              __asm { FMLA            D31, D14, V23.D[1] }
              _Q9.f64[0] = _Q9.f64[1];
              __asm { FMLA            D27, D9, V23.D[1] }
              *(double *)&v935 = _D10 + *(double *)&v935;
              _D10 = v944.f64[1];
              __asm { FMLA            D9, D10, V23.D[1] }
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FMLA            D10, D2, V23.D[1] }
              _Q2.f64[0] = _D11 + v936;
              _Q21.f64[0] = _Q21.f64[1];
              __asm { FMLA            D11, D21, V23.D[1] }
              v951 = 6 * v904 + 4;
              _Q21.f64[0] = _D29 + v937;
              v952 = (float64x2_t *)(v2454 + 48 * (*(_DWORD *)(v854 + 4 * v951) + v2502 * (int)v916));
              *(double *)(v2470 + v920) = v942;
              v953 = v952[2];
              v954.f64[0] = _D30 + v952->f64[0];
              *((_QWORD *)&v935 + 1) = *(_QWORD *)&_Q2.f64[0];
              _Q2.f64[0] = _Q31.f64[0] + v952->f64[1];
              _Q27.f64[0] = _Q27.f64[0] + v952[1].f64[0];
              v955 = _Q9.f64[0] + v952[1].f64[1];
              v934[2] = _Q21.f64[0];
              _Q21.f64[0] = _D10 + v953.f64[0];
              v954.f64[1] = _Q2.f64[0];
              _Q27.f64[1] = v955;
              _Q21.f64[1] = _D11 + v953.f64[1];
              v956 = *(int *)(v884 + 4 * v904);
              *(_OWORD *)v934 = v935;
              v957 = (int8x16_t *)(v881 + 32 * v956);
              _Q2 = *v957;
              _Q28 = v957[1];
              *v952 = v954;
              v952[1] = _Q27;
              _Q2.i64[0] = _Q2.i64[1];
              __asm { FMLA            D29, D2, V23.D[1] }
              *(_QWORD *)&_Q27.f64[0] = _Q28.i64[1];
              __asm { FMLA            D2, D27, V23.D[1] }
              v952[2] = _Q21;
              v961 = (double *)(v2446 + 16 * (v914[5] + v2494 * (int)v916));
              *(double *)_Q2.i64 = *(double *)_Q2.i64 + v961[1];
              _Q23 = (float64x2_t)vzip1q_s64(v924, v925);
              v963 = (float64x2_t)vzip2q_s64(v924, v925);
              v964 = vmlaq_laneq_f64(vmulq_n_f64(_Q23, v903.f64[0]), v963, v903, 1);
              *v961 = _D29 + *v961;
              __asm { FMLA            D21, D0, V24.D[1] }
              v965 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(_Q23, v902.f64[0]), v963, v902, 1);
              v961[1] = *(double *)_Q2.i64;
              __asm { FMLA            D28, D1, V24.D[1] }
              v966 = vmulq_n_f64(_Q23, _Q17.f64[0]);
              __asm { FMLA            D23, D3, V24.D[1] }
              v967 = v2356 + 72 * v904;
              _Q2 = vmlaq_laneq_f64(v966, v963, _Q17, 1);
              *(_QWORD *)&_Q21.f64[1] = v965.i64[0];
              *(float64x2_t *)v967 = v964;
              *(float64x2_t *)(v967 + 16) = _Q21;
              *(int8x16_t *)(v967 + 32) = vextq_s8(v965, _Q28, 8uLL);
              *(float64x2_t *)(v967 + 48) = _Q2;
              *(float64_t *)(v967 + 64) = _Q23.f64[0];
              v969 = v914[1];
              v970 = (float64x2_t *)(v886 + 24 * v969);
              _Q2.f64[0] = v970[1].f64[0];
              v971 = v871 + 48 * *(int *)(v882 + 4 * v904);
              v972 = *(float64x2_t *)(v971 + 16);
              _Q23 = *(float64x2_t *)(v971 + 32);
              _Q28 = *(float64x2_t *)(v858 + 16 * v904);
              v975 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v971, (int64x2_t)v972);
              _Q25 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v971, (int64x2_t)v972);
              _Q30 = vmulq_f64(_Q23, _Q28);
              _Q31.f64[0] = *(float64_t *)(v858 + 16 * v904 + 8);
              __asm { FMLA            D30, D31, V23.D[1] }
              _D10 = *(_QWORD *)(v971 + 40);
              _Q11 = vmulq_f64(_Q23, *(float64x2_t *)v971);
              v980 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q28.f64[0]), _Q25, _Q28, 1);
              _Q28.f64[0] = *(float64_t *)(v971 + 8);
              __asm { FMLA            D11, D28, V23.D[1] }
              _Q28 = vmulq_f64(_Q23, v972);
              _Q9.f64[0] = *(float64_t *)(v971 + 24);
              v982 = vmlaq_laneq_f64(vmulq_n_f64(v975, *(double *)v971), _Q25, *(float64x2_t *)v971, 1);
              __asm { FMLA            D28, D9, V23.D[1] }
              _Q21 = vmulq_f64(_Q23, _Q23);
              __asm { FMLA            D21, D10, V23.D[1] }
              v984 = vmlaq_laneq_f64(vmulq_n_f64(v975, v972.f64[0]), _Q25, v972, 1);
              v985 = v2438 + 72 * ((int)v969 + *(_DWORD *)(v2430 + 4) * (int)v969);
              v986 = *(float64x2_t *)(v985 + 16);
              v987 = *(int64x2_t *)(v985 + 32);
              v953.f64[0] = *(float64_t *)(v985 + 64);
              v988 = (float64x2_t)vextq_s8((int8x16_t)v986, (int8x16_t)v987, 8uLL);
              *(_QWORD *)&_Q30.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q30);
              v989 = (int64x2_t)vaddq_f64(_Q11, v986);
              v990 = (float64x2_t *)(v876 + 96 * *(int *)(v883 + 4 * v904));
              _Q19 = v990[1];
              v992 = (int8x16_t)vaddq_f64(_Q28, (float64x2_t)vdupq_laneq_s64(v987, 1));
              _Q20 = v990[2];
              _Q22 = v990[3];
              v995 = vmlaq_laneq_f64(vmulq_n_f64(v975, v990->f64[0]), _Q25, *v990, 1);
              *(_QWORD *)&_Q21.f64[0] = *(_OWORD *)&vaddq_f64(_Q21, v953);
              _Q11 = vmulq_f64(_Q23, *v990);
              _Q2.f64[0] = v990->f64[1];
              __asm { FMLA            D11, D2, V23.D[1] }
              v997 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q19.f64[0]), _Q25, _Q19, 1);
              v998 = vsubq_f64(*v970, v980);
              _Q27 = vmulq_f64(_Q23, _Q19);
              _Q19.f64[0] = v990[1].f64[1];
              __asm { FMLA            D27, D19, V23.D[1] }
              v1000 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q20.f64[0]), _Q25, _Q20, 1);
              v1001 = vaddq_f64(v982, *(float64x2_t *)v985);
              _Q31 = vmulq_f64(_Q23, _Q20);
              _Q20.f64[0] = v990[2].f64[1];
              __asm { FMLA            D31, D20, V23.D[1] }
              v1003 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q22.f64[0]), _Q25, _Q22, 1);
              v1004 = (int64x2_t)vaddq_f64(v984, v988);
              _Q13 = vmulq_f64(_Q23, _Q22);
              _Q22.f64[0] = v990[3].f64[1];
              __asm { FMLA            D13, D22, V23.D[1] }
              _Q22 = v990[4];
              v1006 = v990[5];
              v1008 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v975, _Q23.f64[0]), _Q25, _Q23, 1), *(float64x2_t *)(v985 + 48));
              v1009 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q22.f64[0]), _Q25, _Q22, 1);
              _Q6 = vmulq_f64(_Q23, _Q22);
              _Q22.f64[0] = v990[4].f64[1];
              __asm { FMLA            D6, D22, V23.D[1] }
              LODWORD(v990) = *(_DWORD *)(v854 + 4 * v951) + *(_DWORD *)(v2414 + 4) * v914[1];
              v970[1].f64[0] = _Q30.f64[0];
              v1011 = vmlaq_laneq_f64(vmulq_n_f64(v975, v1006.f64[0]), _Q25, v1006, 1);
              _Q24 = vmulq_f64(_Q23, v1006);
              _Q25.f64[0] = v1006.f64[1];
              __asm { FMLA            D24, D25, V23.D[1] }
              v1013 = v2422 + 144 * (int)v990;
              *(float64_t *)(v985 + 64) = _Q21.f64[0];
              v1014 = *(float64x2_t *)(v1013 + 16);
              v1015 = *(int64x2_t *)(v1013 + 32);
              v1016 = *(float64x2_t *)(v1013 + 48);
              v1017 = vaddq_f64(v995, *(float64x2_t *)v1013);
              *v970 = v998;
              v1018 = *(float64x2_t *)(v1013 + 64);
              v1019 = *(int64x2_t *)(v1013 + 80);
              v1020 = (int64x2_t)vaddq_f64(_Q11, v1014);
              v1021 = (int64x2_t)vaddq_f64(v997, (float64x2_t)vextq_s8((int8x16_t)v1014, (int8x16_t)v1015, 8uLL));
              v1022 = (int8x16_t)vaddq_f64(_Q27, (float64x2_t)vdupq_laneq_s64(v1015, 1));
              v1024 = *(float64x2_t *)(v1013 + 96);
              v1023 = *(float64x2_t *)(v1013 + 112);
              v1025 = vaddq_f64(v1000, v1016);
              v1026 = *(int64x2_t *)(v1013 + 128);
              v1027 = (int64x2_t)vaddq_f64(_Q31, v1018);
              v1028 = (int64x2_t)vaddq_f64(v1003, (float64x2_t)vextq_s8((int8x16_t)v1018, (int8x16_t)v1019, 8uLL));
              *(float64x2_t *)v985 = v1001;
              *(int64x2_t *)(v985 + 16) = vzip1q_s64(v989, v1004);
              v1029 = (int64x2_t)vaddq_f64(v1011, (float64x2_t)vextq_s8((int8x16_t)v1023, (int8x16_t)v1026, 8uLL));
              *(int8x16_t *)(v985 + 32) = vextq_s8((int8x16_t)v1004, v992, 8uLL);
              *(float64x2_t *)(v985 + 48) = v1008;
              *(float64x2_t *)v1013 = v1017;
              *(int64x2_t *)(v1013 + 16) = vzip1q_s64(v1020, v1021);
              *(int8x16_t *)(v1013 + 32) = vextq_s8((int8x16_t)v1021, v1022, 8uLL);
              *(float64x2_t *)(v1013 + 48) = v1025;
              *(int64x2_t *)(v1013 + 64) = vzip1q_s64(v1027, v1028);
              *(int8x16_t *)(v1013 + 80) = vextq_s8((int8x16_t)v1028, (int8x16_t)vaddq_f64(_Q13, (float64x2_t)vdupq_laneq_s64(v1019, 1)), 8uLL);
              *(float64x2_t *)(v1013 + 96) = vaddq_f64(v1009, v1024);
              *(int64x2_t *)(v1013 + 112) = vzip1q_s64((int64x2_t)vaddq_f64(_Q6, v1023), v1029);
              v1030 = *(int *)(v882 + 4 * v904);
              *(int8x16_t *)(v1013 + 128) = vextq_s8((int8x16_t)v1029, (int8x16_t)vaddq_f64(_Q24, (float64x2_t)vdupq_laneq_s64(v1026, 1)), 8uLL);
              v1031 = (const double *)(v871 + 48 * v1030);
              v2617 = vld2q_f64(v1031);
              v1031 += 4;
              _Q2 = *(float64x2_t *)v1031;
              v1033 = (float64x2_t *)(v881 + 32 * *(int *)(v884 + 4 * v904));
              v1034 = v1033[1];
              v1035 = vmlaq_laneq_f64(vmulq_n_f64(v2617.val[0], v1033->f64[0]), v2617.val[1], *v1033, 1);
              _Q23 = vmulq_f64(_Q2, *v1033);
              _Q6.f64[0] = v1033->f64[1];
              __asm { FMLA            D23, D6, V2.D[1] }
              v1037 = vmlaq_laneq_f64(vmulq_n_f64(v2617.val[0], v1034.f64[0]), v2617.val[1], v1034, 1);
              v2617.val[0] = vmulq_f64(_Q2, v1034);
              v2617.val[1].f64[0] = v1033[1].f64[1];
              v1038 = v2407 + 48 * (v914[5] + *(_DWORD *)(v2400 + 4) * v914[1]);
              v1039 = *(float64x2_t *)(v1038 + 16);
              __asm { FMLA            D19, D20, V2.D[1] }
              v1040 = *(int64x2_t *)(v1038 + 32);
              v1041 = (int64x2_t)vaddq_f64(v1037, (float64x2_t)vextq_s8((int8x16_t)v1039, (int8x16_t)v1040, 8uLL));
              v1042 = vextq_s8((int8x16_t)v1041, (int8x16_t)vaddq_f64(v2617.val[0], (float64x2_t)vdupq_laneq_s64(v1040, 1)), 8uLL);
              *(float64x2_t *)v1038 = vaddq_f64(v1035, *(float64x2_t *)v1038);
              *(int64x2_t *)(v1038 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q23, v1039), v1041);
              v1043 = v876 + 96 * *(int *)(v883 + 4 * v904);
              v1044 = *(int64x2_t *)v1043;
              v2617.val[0] = *(float64x2_t *)(v1043 + 16);
              *(int8x16_t *)(v1038 + 32) = v1042;
              v1045 = (const double *)(v1043 + 32);
              v1043 += 64;
              v2621 = vld2q_f64(v1045);
              v2620 = vld2q_f64((const double *)v1043);
              v1046 = (float64x2_t)vzip1q_s64(v1044, (int64x2_t)v2617.val[0]);
              v1047 = (float64x2_t)vzip2q_s64(v1044, (int64x2_t)v2617.val[0]);
              v1048 = (float64x2_t *)(v2351 + 144 * v904);
              *v1048 = vmlaq_laneq_f64(vmulq_n_f64(v1046, v903.f64[0]), v1047, v903, 1);
              v1048[1] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], v903.f64[0]), v2621.val[1], v903, 1);
              v1048[2] = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], v903.f64[0]), v2620.val[1], v903, 1);
              v1048[3] = vmlaq_laneq_f64(vmulq_n_f64(v1046, v902.f64[0]), v1047, v902, 1);
              v1048[4] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], v902.f64[0]), v2621.val[1], v902, 1);
              v1048[5] = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], v902.f64[0]), v2620.val[1], v902, 1);
              v1048[6] = vmlaq_laneq_f64(vmulq_n_f64(v1046, _Q17.f64[0]), v1047, _Q17, 1);
              v1048[7] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], _Q17.f64[0]), v2621.val[1], _Q17, 1);
              v1048[8] = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], _Q17.f64[0]), v2620.val[1], _Q17, 1);
              v1049 = *(float64x2_t *)(v858 + 16 * v904);
              v1050 = v876 + 96 * *(int *)(v883 + 4 * v904);
              v2618 = *(float64x2x2_t *)(v1050 + 16);
              v1051 = *(float64x2_t *)(v1050 + 48);
              v1053 = *(float64x2_t *)(v1050 + 64);
              v1052 = *(float64x2_t *)(v1050 + 80);
              v1054 = (float64x2_t)vzip1q_s64((int64x2_t)v2618.val[1], (int64x2_t)v1051);
              v1055 = (float64x2_t)vzip1q_s64((int64x2_t)v1053, (int64x2_t)v1052);
              *(_QWORD *)&v1023.f64[0] = vdupq_laneq_s64((int64x2_t)v2618.val[1], 1).u64[0];
              v1023.f64[1] = *(float64_t *)(v1050 + 56);
              *(_QWORD *)&_Q13.f64[0] = vdupq_laneq_s64((int64x2_t)v1053, 1).u64[0];
              _Q13.f64[1] = *(float64_t *)(v1050 + 88);
              v1056 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1050, (int64x2_t)v2618.val[0]);
              v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1046, v1049.f64[0]), v1047, v1049, 1);
              v67 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1050, (int64x2_t)v2618.val[0]);
              v1058 = vmlaq_laneq_f64(vmulq_n_f64(v1056, *(double *)v1050), v67, *(float64x2_t *)v1050, 1);
              v1059 = vmlaq_laneq_f64(vmulq_n_f64(v1054, *(double *)v1050), v1023, *(float64x2_t *)v1050, 1);
              v1060 = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], v1049.f64[0]), v2621.val[1], v1049, 1);
              v2621.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1055, *(double *)v1050), _Q13, *(float64x2_t *)v1050, 1);
              v2621.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1056, v2618.val[0].f64[0]), v67, v2618.val[0], 1);
              _Q25 = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], v1049.f64[0]), v2620.val[1], v1049, 1);
              v1062 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v2618.val[0].f64[0]), v1023, v2618.val[0], 1);
              v2620.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1056, v2618.val[1].f64[0]), v67, v2618.val[1], 1);
              v1063 = vmlaq_laneq_f64(vmulq_n_f64(v1055, v2618.val[0].f64[0]), _Q13, v2618.val[0], 1);
              v1064 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v2618.val[1].f64[0]), v1023, v2618.val[1], 1);
              v2618.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1055, v2618.val[1].f64[0]), _Q13, v2618.val[1], 1);
              v2618.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1056, v1051.f64[0]), v67, v1051, 1);
              v2620.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1054, v1051.f64[0]), v1023, v1051, 1);
              v1065 = vmlaq_laneq_f64(vmulq_n_f64(v1055, v1051.f64[0]), _Q13, v1051, 1);
              v1066 = vmlaq_laneq_f64(vmulq_n_f64(v1056, v1053.f64[0]), v67, v1053, 1);
              v1067 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v1053.f64[0]), v1023, v1053, 1);
              v1068 = vmlaq_laneq_f64(vmulq_n_f64(v1055, v1053.f64[0]), _Q13, v1053, 1);
              v1069 = vmlaq_laneq_f64(vmulq_n_f64(v1056, v1052.f64[0]), v67, v1052, 1);
              v1070 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v1052.f64[0]), v1023, v1052, 1);
              v1071 = *(int *)(v854 + 4 * v951);
              v1072 = (float64x2_t *)(v2393 + 288 * ((int)v1071 + *(_DWORD *)(v2388 + 4) * (int)v1071));
              v2621.val[1] = vaddq_f64(v2621.val[1], v1072[2]);
              v1073 = vaddq_f64(v1059, v1072[1]);
              v1074 = vaddq_f64(v1063, v1072[5]);
              v66 = vaddq_f64(v1062, v1072[4]);
              v2621.val[0] = vaddq_f64(v2621.val[0], v1072[3]);
              v2618.val[0] = vaddq_f64(v2618.val[0], v1072[8]);
              v1075 = vaddq_f64(v1064, v1072[7]);
              v2620.val[0] = vaddq_f64(v2620.val[0], v1072[6]);
              v1076 = vaddq_f64(v1065, v1072[11]);
              v2620.val[1] = vaddq_f64(v2620.val[1], v1072[10]);
              v2618.val[1] = vaddq_f64(v2618.val[1], v1072[9]);
              v1077 = vaddq_f64(v1068, v1072[14]);
              v1078 = vaddq_f64(v1067, v1072[13]);
              v1079 = vaddq_f64(v1066, v1072[12]);
              v1080 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1055, v1052.f64[0]), _Q13, v1052, 1), v1072[17]);
              v1081 = vaddq_f64(v1070, v1072[16]);
              v1082 = (float64x2_t *)(v2337 + 48 * v1071);
              v1083 = vaddq_f64(v1069, v1072[15]);
              v1084 = v1082[1];
              v1085 = vsubq_f64(*v1082, v1057);
              *v1072 = vaddq_f64(v1058, *v1072);
              v1072[1] = v1073;
              v1072[2] = v2621.val[1];
              v1086 = (float64x2x2_t *)(v2393 + 288 * ((int)v1071 + *(_DWORD *)(v2388 + 4) * (int)v1071));
              v1086[1].val[1] = v2621.val[0];
              v1086[2].val[0] = v66;
              v1086[2].val[1] = v1074;
              v1086[3].val[0] = v2620.val[0];
              v1087 = vsubq_f64(v1082[2], _Q25);
              v1086[3].val[1] = v1075;
              v1086[4] = v2618;
              v1086[5].val[0] = v2620.val[1];
              v1086[5].val[1] = v1076;
              v1086[6].val[0] = v1079;
              v1086[6].val[1] = v1078;
              v1086[7].val[0] = v1077;
              v1086[7].val[1] = v1083;
              *v1082 = v1085;
              v1082[1] = vsubq_f64(v1084, v1060);
              v1086[8].val[0] = v1081;
              v1086[8].val[1] = v1080;
              v1088 = v876 + 96 * *(int *)(v883 + 4 * v904);
              v1082[2] = v1087;
              v1089 = (const double *)(v1088 + 32);
              v2610 = vld2q_f64(v1089);
              v1090 = *(int64x2_t *)v1088;
              v1091 = *(int64x2_t *)(v1088 + 16);
              v1088 += 64;
              v2619 = vld2q_f64((const double *)v1088);
              v1092 = (float64x2_t *)(v881 + 32 * *(int *)(v884 + 4 * v904));
              v1094 = *v1092;
              v1093 = v1092[1];
              v1095 = v914[5];
              v1096 = (float64x2_t)vzip1q_s64((int64x2_t)v903, (int64x2_t)v902);
              _Q22 = (float64x2_t)vzip2q_s64((int64x2_t)v903, (int64x2_t)v902);
              v2620.val[0].f64[0] = v2561;
              __asm { FMLA            D25, D26, V17.D[1] }
              v2620.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1096, v903.f64[0]), _Q22, v903, 1);
              v1098 = vmlaq_laneq_f64(vmulq_n_f64(v1096, _Q18.f64[0]), _Q22, _Q18, 1);
              v2620.val[1].f64[0] = v2554;
              __asm { FMLA            D18, D27, V17.D[1] }
              v2621.val[0].f64[0] = v2545;
              __asm { FMLA            D27, D28, V17.D[1] }
              v2621.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1096, v902.f64[0]), _Q22, v902, 1);
              v1099 = vmlaq_laneq_f64(vmulq_n_f64(v1096, _Q17.f64[0]), _Q22, _Q17, 1);
              v2621.val[1].f64[0] = v2535;
              __asm { FMLA            D22, D29, V17.D[1] }
              v2621.val[1] = (float64x2_t)vzip1q_s64(v1090, v1091);
              v888 = vsubq_f64(v2578, _Q25);
              v1100 = (float64x2_t)vzip2q_s64(v1090, v1091);
              v1101 = vmlaq_laneq_f64(vmulq_n_f64(v2610.val[0], v1094.f64[0]), v2610.val[1], v1094, 1);
              v1102 = vmlaq_laneq_f64(vmulq_n_f64(v2610.val[0], v1093.f64[0]), v2610.val[1], v1093, 1);
              v2610.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[1], v1094.f64[0]), v1100, v1094, 1);
              v2621.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[1], v1093.f64[0]), v1100, v1093, 1);
              v1103 = (float64x2_t *)(v885 + 96 * ((int)v1095 + *(_DWORD *)(v2379 + 4) * *(_DWORD *)(v854 + 4 * v951)));
              v2610.val[1] = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2619.val[0], v1094.f64[0]), v2619.val[1], v1094, 1), v1103[2]);
              v1104 = vaddq_f64(v1101, v1103[1]);
              v1105 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2619.val[0], v1093.f64[0]), v2619.val[1], v1093, 1), v1103[5]);
              v2619.val[0] = vaddq_f64(v1102, v1103[4]);
              v2619.val[1] = vaddq_f64(v2621.val[1], v1103[3]);
              *v1103 = vaddq_f64(v2610.val[0], *v1103);
              v1103[1] = v1104;
              v1103[2] = v2610.val[1];
              v1103[3] = v2619.val[1];
              v1103[4] = v2619.val[0];
              v1103[5] = v1105;
              v898 = vaddq_f64(v2620.val[0], v898);
              v1106 = (int64x2_t)vaddq_f64(_Q18, v2569);
              v2610.val[0] = vaddq_f64(v2621.val[0], (float64x2_t)vextq_s8((int8x16_t)v2569, (int8x16_t)v2526, 8uLL));
              v1107 = (float64x2_t)vzip1q_s64((int64x2_t)v1094, (int64x2_t)v1093);
              v1108 = (float64x2_t)vzip2q_s64((int64x2_t)v1094, (int64x2_t)v1093);
              v1109 = (float64x2_t *)(v2346 + 48 * v904);
              *v1109 = vmlaq_laneq_f64(vmulq_n_f64(v1107, v903.f64[0]), v1108, v903, 1);
              v1109[1] = vmlaq_laneq_f64(vmulq_n_f64(v1107, v902.f64[0]), v1108, v902, 1);
              *(float64x2_t *)(v2346 + 8 * v951) = vmlaq_laneq_f64(vmulq_n_f64(v1107, _Q17.f64[0]), v1108, _Q17, 1);
              v897 = vsubq_f64(v897, v1098);
              v896 = vaddq_f64(v1099, v2600);
              v887 = vaddq_f64(_Q22, v2587);
              v893 = vzip1q_s64(v1106, (int64x2_t)v2610.val[0]);
              v894 = vextq_s8((int8x16_t)v2610.val[0], (int8x16_t)vaddq_f64(v2620.val[1], (float64x2_t)vdupq_laneq_s64(v2526, 1)), 8uLL);
              *(float64x2_t *)(v2260 + 16 * v1095) = vsubq_f64(*(float64x2_t *)(v2260 + 16 * v1095), vmlaq_laneq_f64(vmulq_n_f64(v1107, *(double *)(v858 + 16 * v904)), v1108, *(float64x2_t *)(v858 + 16 * v904), 1));
              v1110 = (float64x2_t *)(v2373 + 32 * ((int)v1095 + *(_DWORD *)(v2367 + 4) * (int)v1095));
              v2610.val[1] = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1107, v1093.f64[0]), v1108, v1093, 1), v1110[1]);
              *v1110 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1107, v1094.f64[0]), v1108, v1094, 1), *v1110);
              v1110[1] = v2610.val[1];
              v900 += 3;
              --v899;
            }
            while (v899);
            *v2312 = v897;
            *(float64_t *)(v2326 + 8 * v2287) = v888.f64[0];
            *v2306 = v898;
            *(int64x2_t *)(v892 + 16) = v893;
            *(int8x16_t *)(v892 + 32) = v894;
            *v2294 = v896;
            *(float64_t *)(v2332 + 8 * v2290) = v887.f64[0];
          }
        }
        ++v889;
      }
      while (v889 != v2321);
    }
    *(_QWORD *)(v2236 + 24) |= 1uLL;
    *(_QWORD *)(v2233 + 24) |= 1uLL;
    *(_QWORD *)(v2231 + 24) |= 1uLL;
    *(_QWORD *)(v2232 + 24) |= 1uLL;
    *(_QWORD *)(v2235 + 24) |= 1uLL;
    *(_QWORD *)(v2243 + 24) |= 1uLL;
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v592 = v2196;
    v852 = v2203;
    v853 = v2200;
    v851 = v2193;
  }
  v1111 = STACK[0xB50];
  v2601 = STACK[0xB50];
  if ((**(_BYTE **)(v592 + 16) & 1) != 0)
  {
    v1112 = *(int **)(v2224 + 16);
    v1113 = _gc_buffer_get_extent();
    v1114 = _gc_buffer_get_extent();
    v1115 = _gc_buffer_get_extent();
    if (v1113 != 4 || v1114 != v1115)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v853 + 24) |= 1uLL;
    }
    v2588 = *(float64x2_t **)(v853 + 16);
    v1116 = _gc_buffer_get_extent();
    v1117 = _gc_buffer_get_extent();
    v1118 = _gc_buffer_get_extent();
    v1119 = _gc_buffer_get_extent();
    if (v1116 != 4 || v1117 != 4 || v1118 != v1119)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v852 + 24) |= 1uLL;
    }
    v1120 = *(_QWORD *)(v852 + 16);
    v1121 = *(_QWORD *)(a8 + 16);
    v1122 = *(int **)(v2205 + 16);
    v1123 = *(_QWORD *)(a41 + 16);
    v1124 = *(_QWORD *)(a42 + 16);
    v1125 = *(_QWORD *)(v2237 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v853 = v2200;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1126 = v2198;
    if ((int)v2198 >= 1)
    {
      v1127 = v2588 + 1;
      do
      {
        v1128 = *v1112;
        if (v1128 >> 30 != 3)
        {
          v1129 = (float64x2_t *)(v1125 + 32 * *(int *)(v1121 + 4 * v1128));
          v1130 = (float64x2_t *)(v1120 + ((uint64_t)*v1122 << 7));
          v1131 = *v1130;
          v1132 = v1130[1];
          v1133 = v1130[2];
          v1134 = v1130[3];
          v1136 = v1130[4];
          v1135 = v1130[5];
          v1138 = v1130[6];
          v1137 = v1130[7];
          *(_QWORD *)&v1139.f64[0] = vdupq_laneq_s64((int64x2_t)v1136, 1).u64[0];
          v1139.f64[1] = v1130[6].f64[1];
          v1140 = (float64x2_t)vzip1q_s64((int64x2_t)v1136, (int64x2_t)v1138);
          v1141 = (float64x2_t)vzip1q_s64((int64x2_t)v1135, (int64x2_t)v1137);
          *(_QWORD *)&v1142.f64[0] = vdupq_laneq_s64((int64x2_t)v1135, 1).u64[0];
          v1142.f64[1] = v1130[7].f64[1];
          v1143 = v1127[-1];
          v1144 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1130, (int64x2_t)v1133);
          v1145 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1130, (int64x2_t)v1133);
          v1146 = (float64x2_t)vzip1q_s64((int64x2_t)v1132, (int64x2_t)v1134);
          v1147 = (float64x2_t)vzip2q_s64((int64x2_t)v1132, (int64x2_t)v1134);
          v1148 = vsubq_f64(v1129[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1143.f64[0]), v1139, v1143, 1), v1141, v1127->f64[0]), v1142, *v1127, 1));
          *v1129 = vsubq_f64(*v1129, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1143.f64[0]), v1145, v1143, 1), v1146, v1127->f64[0]), v1147, *v1127, 1));
          v1129[1] = v1148;
          v1149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1131.f64[0]), v1145, v1131, 1), v1146, v1132.f64[0]), v1147, v1132, 1);
          v1150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1131.f64[0]), v1139, v1131, 1), v1141, v1132.f64[0]), v1142, v1132, 1);
          v1151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1133.f64[0]), v1145, v1133, 1), v1146, v1134.f64[0]), v1147, v1134, 1);
          v1152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1133.f64[0]), v1139, v1133, 1), v1141, v1134.f64[0]), v1142, v1134, 1);
          v1153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1136.f64[0]), v1145, v1136, 1), v1146, v1135.f64[0]), v1147, v1135, 1);
          v1154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1136.f64[0]), v1139, v1136, 1), v1141, v1135.f64[0]), v1142, v1135, 1);
          v1155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1138.f64[0]), v1145, v1138, 1), v1146, v1137.f64[0]), v1147, v1137, 1);
          v1156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1138.f64[0]), v1139, v1138, 1), v1141, v1137.f64[0]), v1142, v1137, 1);
          v1157 = (float64x2_t *)(v1123 + ((uint64_t)((int)v1128 + *(_DWORD *)(v1124 + 4) * (int)v1128) << 7));
          v1158 = v1157[6];
          v1159 = vaddq_f64(v1150, v1157[1]);
          v1160 = vaddq_f64(v1151, v1157[2]);
          v1161 = vaddq_f64(v1152, v1157[3]);
          v1162 = vaddq_f64(v1153, v1157[4]);
          v1163 = vaddq_f64(v1154, v1157[5]);
          v1164 = vaddq_f64(v1156, v1157[7]);
          *v1157 = vaddq_f64(v1149, *v1157);
          v1157[1] = v1159;
          v1157[2] = v1160;
          v1157[3] = v1161;
          v1157[4] = v1162;
          v1157[5] = v1163;
          v1157[6] = vaddq_f64(v1155, v1158);
          v1157[7] = v1164;
        }
        v1127 += 2;
        ++v1122;
        v1112 += 2;
        --v1126;
      }
      while (v1126);
    }
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    v852 = v2203;
    v851 = v2193;
    v1111 = v2601;
  }
  v1165 = STACK[0xB58];
  v2389 = STACK[0x9E8];
  v2384 = STACK[0x9D0];
  v2380 = STACK[0x9B8];
  v2374 = STACK[0x9A0];
  v1166 = STACK[0x990];
  v1167 = STACK[0x988];
  v1168 = STACK[0x980];
  v1169 = STACK[0x978];
  v2394 = STACK[0x968];
  v1170 = STACK[0x960];
  v2342 = STACK[0x990];
  v2338 = STACK[0x988];
  v2333 = STACK[0x980];
  v2368 = STACK[0x978];
  v2362 = STACK[0x960];
  v2318 = STACK[0xB58];
  if ((**(_BYTE **)(v851 + 16) & 1) != 0)
  {
    v1171 = *(int **)(v2224 + 16);
    v1172 = _gc_buffer_get_extent();
    v1173 = _gc_buffer_get_extent();
    v1174 = _gc_buffer_get_extent();
    if (v1172 != 4 || v1173 != v1174)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v853 + 24) |= 1uLL;
    }
    v2589 = *(float64x2_t **)(v853 + 16);
    v1175 = _gc_buffer_get_extent();
    v1176 = _gc_buffer_get_extent();
    v1177 = _gc_buffer_get_extent();
    v1178 = _gc_buffer_get_extent();
    if (v1175 != 4 || v1176 != 4 || v1177 != v1178)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v852 + 24) |= 1uLL;
    }
    v1179 = *(_QWORD *)(v852 + 16);
    v1180 = *(int **)(v2205 + 16);
    v1181 = *(_QWORD *)(a41 + 16);
    v1182 = *(_QWORD *)(a42 + 16);
    v1183 = *(_QWORD *)(v2237 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1184 = v2198;
    v1166 = v2342;
    if ((int)v2198 >= 1)
    {
      v1185 = v2589 + 1;
      do
      {
        v1186 = *v1171;
        v1187 = (float64x2_t *)(v1183 + 32 * v1186);
        v1188 = (float64x2_t *)(v1179 + ((uint64_t)*v1180 << 7));
        v1190 = *v1188;
        v1189 = v1188[1];
        v1192 = v1188[2];
        v1191 = v1188[3];
        v1194 = v1188[4];
        v1193 = v1188[5];
        v1196 = v1188[6];
        v1195 = v1188[7];
        v1197 = (float64x2_t)vzip1q_s64((int64x2_t)v1194, (int64x2_t)v1196);
        *(_QWORD *)&v1198.f64[0] = vdupq_laneq_s64((int64x2_t)v1194, 1).u64[0];
        v1198.f64[1] = v1188[6].f64[1];
        v1199 = (float64x2_t)vzip1q_s64((int64x2_t)v1193, (int64x2_t)v1195);
        *(_QWORD *)&v1200.f64[0] = vdupq_laneq_s64((int64x2_t)v1193, 1).u64[0];
        v1200.f64[1] = v1188[7].f64[1];
        v1201 = v1185[-1];
        v1202 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1188, (int64x2_t)v1192);
        v1203 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1188, (int64x2_t)v1192);
        v1204 = (float64x2_t)vzip1q_s64((int64x2_t)v1189, (int64x2_t)v1191);
        v1205 = (float64x2_t)vzip2q_s64((int64x2_t)v1189, (int64x2_t)v1191);
        v1206 = vsubq_f64(v1187[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1201.f64[0]), v1198, v1201, 1), v1199, v1185->f64[0]), v1200, *v1185, 1));
        *v1187 = vsubq_f64(*v1187, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1201.f64[0]), v1203, v1201, 1), v1204, v1185->f64[0]), v1205, *v1185, 1));
        v1187[1] = v1206;
        if (v1186 >> 30 != 3)
        {
          v1207 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1190.f64[0]), v1203, v1190, 1), v1204, v1189.f64[0]), v1205, v1189, 1);
          v1208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1190.f64[0]), v1198, v1190, 1), v1199, v1189.f64[0]), v1200, v1189, 1);
          v1209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1192.f64[0]), v1203, v1192, 1), v1204, v1191.f64[0]), v1205, v1191, 1);
          v1210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1192.f64[0]), v1198, v1192, 1), v1199, v1191.f64[0]), v1200, v1191, 1);
          v1211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1194.f64[0]), v1203, v1194, 1), v1204, v1193.f64[0]), v1205, v1193, 1);
          v1212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1194.f64[0]), v1198, v1194, 1), v1199, v1193.f64[0]), v1200, v1193, 1);
          v1213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1196.f64[0]), v1203, v1196, 1), v1204, v1195.f64[0]), v1205, v1195, 1);
          v1214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1196.f64[0]), v1198, v1196, 1), v1199, v1195.f64[0]), v1200, v1195, 1);
          v1215 = (float64x2_t *)(v1181 + ((uint64_t)((int)v1186 + *(_DWORD *)(v1182 + 4) * (int)v1186) << 7));
          v1216 = v1215[6];
          v1217 = vaddq_f64(v1208, v1215[1]);
          v1218 = vaddq_f64(v1209, v1215[2]);
          v1219 = vaddq_f64(v1210, v1215[3]);
          v1220 = vaddq_f64(v1211, v1215[4]);
          v1221 = vaddq_f64(v1212, v1215[5]);
          v1222 = vaddq_f64(v1214, v1215[7]);
          *v1215 = vaddq_f64(v1207, *v1215);
          v1215[1] = v1217;
          v1215[2] = v1218;
          v1215[3] = v1219;
          v1215[4] = v1220;
          v1215[5] = v1221;
          v1215[6] = vaddq_f64(v1213, v1216);
          v1215[7] = v1222;
        }
        v1185 += 2;
        ++v1180;
        v1171 += 2;
        --v1184;
      }
      while (v1184);
    }
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    v1167 = v2338;
    v1168 = v2333;
    v1169 = v2368;
    v1170 = v2362;
    v1165 = v2318;
    v1111 = v2601;
  }
  v1223 = STACK[0xB60];
  v2327 = STACK[0xB60];
  if ((**(_BYTE **)(v1111 + 16) & 1) != 0)
  {
    v1224 = *(_QWORD *)(v2394 + 16);
    v1225 = _gc_buffer_get_extent();
    v1226 = _gc_buffer_get_extent();
    v1227 = _gc_buffer_get_extent();
    if (v1225 != 2 || v1226 != v1227)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v1170 + 24) |= 1uLL;
    }
    v1228 = *(_QWORD *)(v1170 + 16);
    v1229 = _gc_buffer_get_extent();
    v1230 = _gc_buffer_get_extent();
    v1231 = _gc_buffer_get_extent();
    v1232 = _gc_buffer_get_extent();
    if (v1229 != 2 || v1230 != 1 || v1231 != v1232)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1169 + 24) |= 1uLL;
    }
    v2313 = *(_QWORD *)(v1169 + 16);
    v1233 = _gc_buffer_get_extent();
    v1234 = _gc_buffer_get_extent();
    v1235 = _gc_buffer_get_extent();
    v1236 = _gc_buffer_get_extent();
    if (v1233 != 2 || v1234 != 4 || v1235 != v1236)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1168 + 24) |= 1uLL;
    }
    v2307 = *(_QWORD *)(v1168 + 16);
    v1237 = _gc_buffer_get_extent();
    v1238 = _gc_buffer_get_extent();
    v1239 = _gc_buffer_get_extent();
    v1240 = _gc_buffer_get_extent();
    if (v1237 != 2 || v1238 != 6 || v1239 != v1240)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1167 + 24) |= 1uLL;
    }
    v2301 = *(_QWORD *)(v1167 + 16);
    v1241 = _gc_buffer_get_extent();
    v1242 = _gc_buffer_get_extent();
    v1243 = _gc_buffer_get_extent();
    v1244 = _gc_buffer_get_extent();
    if (v1241 != 2 || v1242 != 2 || v1243 != v1244)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1166 + 24) |= 1uLL;
    }
    v2298 = *(_QWORD *)(v1166 + 16);
    v2602 = *(_QWORD *)(a6 + 16);
    v2590 = *(_QWORD *)(a8 + 16);
    v2579 = *(_QWORD *)(a9 + 16);
    v2295 = *(_QWORD *)(a10 + 16);
    v1245 = *(int **)(v2374 + 16);
    v1246 = *(int **)(v2380 + 16);
    v1247 = *(int **)(v2384 + 16);
    v1248 = *(int **)(v2389 + 16);
    v2570 = *(_QWORD *)(a14 + 16);
    v2562 = *(_QWORD *)(a15 + 16);
    v2471 = *(_QWORD *)(a18 + 16);
    v2463 = *(_QWORD *)(a19 + 16);
    v2455 = *(_QWORD *)(a20 + 16);
    v2447 = *(_QWORD *)(a21 + 16);
    v2439 = *(_QWORD *)(a22 + 16);
    v2431 = *(_QWORD *)(a23 + 16);
    v2555 = *(_QWORD *)(a41 + 16);
    v2546 = *(_QWORD *)(a42 + 16);
    v2423 = *(_QWORD *)(a43 + 16);
    v2415 = *(_QWORD *)(a44 + 16);
    v2288 = *(_QWORD *)(a45 + 16);
    v2291 = *(_QWORD *)(a46 + 16);
    v2536 = *(_QWORD *)(a56 + 16);
    v2527 = *(_QWORD *)(a57 + 16);
    v2408 = *(_QWORD *)(a58 + 16);
    v2401 = *(_QWORD *)(a59 + 16);
    v2519 = *(_QWORD *)(a66 + 16);
    v2511 = *(_QWORD *)(v2238 + 16);
    v2503 = *(_QWORD *)(v2240 + 16);
    v2495 = *(_QWORD *)(v2237 + 16);
    v2487 = *(_QWORD *)(v2239 + 16);
    v2479 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    v1166 = v2342;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1168 = v2333;
    halide_copy_to_host();
    v1167 = v2338;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2189 >= 1)
    {
      v1249 = 0;
      v1250 = 0;
      v1251 = (int *)(v1224 + 20);
      do
      {
        v1261 = 6 * v1250;
        v1262 = *(v1251 - 5);
        if (v1262 >> 30 == 3)
        {
          v1275 = *(int *)(v1224 + 4 * (v1261 | 1));
          if (v1275 >> 30 == 3)
            goto LABEL_290;
          goto LABEL_284;
        }
        v1263 = 8 * *(int *)(v2602 + 4 * v1262);
        _Q1 = *(int8x16_t *)(v2313 + 16 * *v1245);
        _D0 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        _D3 = *(_QWORD *)(v1228 + 8);
        __asm { FMLA            D4, D3, V1.D[1] }
        *(double *)(v2503 + v1263) = *(double *)(v2503 + v1263) - _D4;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v1270 = 8 * ((int)v1262 + *(_DWORD *)(v2562 + 4) * (int)v1262);
        *(double *)(v2570 + v1270) = _D2 + *(double *)(v2570 + v1270);
        v1271 = *(v1251 - 4);
        if (v1271 >> 30 == 3)
        {
          v1272 = *(v1251 - 1);
          if (v1272 >> 30 != 3)
            goto LABEL_294;
        }
        else
        {
          v1372 = (__int128 *)(v2307 + ((uint64_t)*v1246 << 6));
          _Q2 = *v1372;
          _Q3 = v1372[1];
          _Q4 = v1372[2];
          _Q5 = v1372[3];
          __asm
          {
            FMLA            D6, D0, V2.D[1]
            FMLA            D2, D0, V3.D[1]
            FMLA            D3, D0, V4.D[1]
            FMLA            D4, D0, V5.D[1]
          }
          v1378 = (double *)(v2471 + 32 * (int)(v1271 + *(_DWORD *)(v2463 + 4) * v1262));
          *(double *)&v1379 = _D6 + *v1378;
          *(double *)&_Q3 = *(double *)&_Q3 + v1378[2];
          *((double *)&v1379 + 1) = *(double *)&_Q2 + v1378[1];
          *((double *)&_Q3 + 1) = *(double *)&_Q4 + v1378[3];
          *(_OWORD *)v1378 = v1379;
          *((_OWORD *)v1378 + 1) = _Q3;
          v1272 = *(v1251 - 1);
          if (v1272 >> 30 != 3)
          {
LABEL_294:
            v1380 = (__int128 *)(v2301 + 96 * *v1247);
            _Q2 = *v1380;
            _Q3 = v1380[1];
            _Q4 = v1380[2];
            _Q5 = v1380[3];
            _Q6 = v1380[4];
            _Q7 = v1380[5];
            __asm
            {
              FMLA            D16, D0, V2.D[1]
              FMLA            D2, D0, V3.D[1]
              FMLA            D3, D0, V4.D[1]
              FMLA            D4, D0, V5.D[1]
              FMLA            D5, D0, V6.D[1]
              FMLA            D6, D0, V7.D[1]
            }
            v1388 = (double *)(v2455 + 48 * (int)(v1272 + *(_DWORD *)(v2447 + 4) * v1262));
            *(double *)&v1389 = _D16 + *v1388;
            *(double *)&_Q3 = *(double *)&_Q3 + v1388[2];
            *(double *)&_Q5 = *(double *)&_Q5 + v1388[4];
            *((double *)&v1389 + 1) = *(double *)&_Q2 + v1388[1];
            *((double *)&_Q3 + 1) = *(double *)&_Q4 + v1388[3];
            *((double *)&_Q5 + 1) = *(double *)&_Q6 + v1388[5];
            *(_OWORD *)v1388 = v1389;
            *((_OWORD *)v1388 + 1) = _Q3;
            *((_OWORD *)v1388 + 2) = _Q5;
            v1273 = v1249 + 1;
            v1274 = *v1251;
            if (*v1251 >> 30 == 3)
            {
LABEL_283:
              v1275 = *(int *)(v1224 + 4 * v1273);
              if (v1275 >> 30 == 3)
                goto LABEL_290;
              goto LABEL_284;
            }
            goto LABEL_295;
          }
        }
        v1273 = v1249 + 1;
        v1274 = *v1251;
        if (*v1251 >> 30 == 3)
          goto LABEL_283;
LABEL_295:
        v1390 = (__int128 *)(v2298 + 32 * *v1248);
        _Q2 = *v1390;
        _Q3 = v1390[1];
        __asm
        {
          FMLA            D4, D0, V2.D[1]
          FMLA            D1, D0, V3.D[1]
        }
        v1395 = (double *)(v2439 + 16 * (v1274 + *(_DWORD *)(v2431 + 4) * (int)v1262));
        v1396 = _D1 + v1395[1];
        *v1395 = _D4 + *v1395;
        v1395[1] = v1396;
        v1275 = *(int *)(v1224 + 4 * v1273);
        if (v1275 >> 30 == 3)
        {
LABEL_290:
          v1306 = *(int *)(v1224 + 4 * (v1261 + 4));
          if (v1306 >> 30 == 3)
            goto LABEL_291;
          goto LABEL_287;
        }
LABEL_284:
        v1276 = (float64x2_t *)(v2495 + 32 * *(int *)(v2590 + 4 * v1275));
        v1277 = (float64x2_t *)(v2307 + ((uint64_t)*v1246 << 6));
        v1278 = *v1277;
        v1279 = v1277[1];
        v1280 = v1277[2];
        v1281 = v1277[3];
        v1282 = (float64x2_t)vzip1q_s64((int64x2_t)v1280, (int64x2_t)v1281);
        *(_QWORD *)&v1283.f64[0] = vdupq_laneq_s64((int64x2_t)v1280, 1).u64[0];
        v1283.f64[1] = v1277[3].f64[1];
        v1284 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1277, (int64x2_t)v1279);
        v1285 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1277, (int64x2_t)v1279);
        v1286 = vsubq_f64(v1276[1], vmlaq_laneq_f64(vmulq_n_f64(v1282, *(double *)v1228), v1283, *(float64x2_t *)v1228, 1));
        *v1276 = vsubq_f64(*v1276, vmlaq_laneq_f64(vmulq_n_f64(v1284, *(double *)v1228), v1285, *(float64x2_t *)v1228, 1));
        v1276[1] = v1286;
        v1287 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1278.f64[0]), v1285, v1278, 1);
        v1288 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1278.f64[0]), v1283, v1278, 1);
        v1289 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1279.f64[0]), v1285, v1279, 1);
        v1290 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1279.f64[0]), v1283, v1279, 1);
        v1291 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1280.f64[0]), v1285, v1280, 1);
        v1292 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1280.f64[0]), v1283, v1280, 1);
        v1293 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1281.f64[0]), v1285, v1281, 1);
        v1294 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1281.f64[0]), v1283, v1281, 1);
        v1295 = (float64x2_t *)(v2555 + ((uint64_t)((int)v1275 + *(_DWORD *)(v2546 + 4) * (int)v1275) << 7));
        v1296 = vaddq_f64(v1288, v1295[1]);
        v1297 = vaddq_f64(v1289, v1295[2]);
        v1298 = vaddq_f64(v1290, v1295[3]);
        v1299 = vaddq_f64(v1291, v1295[4]);
        v1300 = vaddq_f64(v1292, v1295[5]);
        v1301 = vaddq_f64(v1294, v1295[7]);
        v1302 = vaddq_f64(v1293, v1295[6]);
        *v1295 = vaddq_f64(v1287, *v1295);
        v1295[1] = v1296;
        v1295[2] = v1297;
        v1295[3] = v1298;
        v1295[4] = v1299;
        v1295[5] = v1300;
        v1295[6] = v1302;
        v1295[7] = v1301;
        v1303 = *(v1251 - 1);
        if (v1303 >> 30 == 3)
        {
          v1304 = v1249 + 4;
          v1305 = *v1251;
          if (*v1251 >> 30 == 3)
            goto LABEL_286;
        }
        else
        {
          v1397 = (float64x2_t *)(v2301 + 96 * *v1247);
          v1398 = v1397[1];
          v1399 = v1397[2];
          v1400 = v1397[3];
          v1401 = v1397[4];
          v1402 = v1397[5];
          v1403 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1398.f64[0]), v1285, v1398, 1);
          v1404 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1398.f64[0]), v1283, v1398, 1);
          v1405 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1399.f64[0]), v1285, v1399, 1);
          v1406 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1399.f64[0]), v1283, v1399, 1);
          v1407 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1400.f64[0]), v1285, v1400, 1);
          v1408 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1400.f64[0]), v1283, v1400, 1);
          v1409 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1401.f64[0]), v1285, v1401, 1);
          v1410 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1401.f64[0]), v1283, v1401, 1);
          v1411 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1402.f64[0]), v1285, v1402, 1);
          v1412 = (float64x2_t *)(v2423 + 192 * (int)(v1303 + *(_DWORD *)(v2415 + 4) * v1275));
          v1413 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1402.f64[0]), v1283, v1402, 1);
          v66 = v1412[8];
          v1414 = v1412[9];
          v1415 = v1412[10];
          v1416 = v1412[11];
          v1417 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1282, v1397->f64[0]), v1283, *v1397, 1), v1412[1]);
          v1418 = vaddq_f64(v1403, v1412[2]);
          v1419 = vaddq_f64(v1404, v1412[3]);
          v1420 = vaddq_f64(v1405, v1412[4]);
          v1421 = vaddq_f64(v1406, v1412[5]);
          v1422 = vaddq_f64(v1407, v1412[6]);
          v1423 = vaddq_f64(v1408, v1412[7]);
          *v1412 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1284, v1397->f64[0]), v1285, *v1397, 1), *v1412);
          v1412[1] = v1417;
          v1412[2] = v1418;
          v1412[3] = v1419;
          v1412[4] = v1420;
          v1412[5] = v1421;
          v1412[6] = v1422;
          v1412[7] = v1423;
          v1412[8] = vaddq_f64(v1409, v66);
          v1412[9] = vaddq_f64(v1410, v1414);
          v1412[10] = vaddq_f64(v1411, v1415);
          v1412[11] = vaddq_f64(v1413, v1416);
          v1304 = v1249 + 4;
          v1305 = *v1251;
          if (*v1251 >> 30 == 3)
          {
LABEL_286:
            v1306 = *(int *)(v1224 + 4 * v1304);
            if (v1306 >> 30 == 3)
              goto LABEL_291;
            goto LABEL_287;
          }
        }
        v1424 = (float64x2_t *)(v2298 + 32 * *v1248);
        v1425 = v1424[1];
        v1426 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1424->f64[0]), v1285, *v1424, 1);
        v1427 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1425.f64[0]), v1285, v1425, 1);
        v1428 = (float64x2_t *)(v2288 + ((uint64_t)(v1305 + *(_DWORD *)(v2291 + 4) * (int)v1275) << 6));
        v1429 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1282, v1424->f64[0]), v1283, *v1424, 1), v1428[1]);
        v1430 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1282, v1425.f64[0]), v1283, v1425, 1), v1428[3]);
        v1431 = vaddq_f64(v1427, v1428[2]);
        *v1428 = vaddq_f64(v1426, *v1428);
        v1428[1] = v1429;
        v1428[2] = v1431;
        v1428[3] = v1430;
        v1306 = *(int *)(v1224 + 4 * v1304);
        if (v1306 >> 30 == 3)
        {
LABEL_291:
          v1358 = *v1251;
          if (*v1251 >> 30 == 3)
            goto LABEL_278;
          goto LABEL_277;
        }
LABEL_287:
        v1307 = (float64x2_t *)(v2487 + 48 * *(int *)(v2579 + 4 * v1306));
        v1308 = (float64x2_t *)(v2301 + 96 * *v1247);
        v1309 = *v1308;
        v1310 = v1308[1];
        v1311 = v1308[2];
        v1312 = v1308[3];
        v1314 = v1308[4];
        v1313 = v1308[5];
        v1315 = (float64x2_t)vzip1q_s64((int64x2_t)v1311, (int64x2_t)v1312);
        *(_QWORD *)&v1316.f64[0] = vdupq_laneq_s64((int64x2_t)v1311, 1).u64[0];
        v1316.f64[1] = v1308[3].f64[1];
        *(_QWORD *)&v1318.f64[0] = vdupq_laneq_s64((int64x2_t)v1314, 1).u64[0];
        v1317 = (float64x2_t)vzip1q_s64((int64x2_t)v1314, (int64x2_t)v1313);
        v1318.f64[1] = v1308[5].f64[1];
        v1319 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1308, (int64x2_t)v1310);
        v1320 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1308, (int64x2_t)v1310);
        v1321 = vsubq_f64(v1307[2], vmlaq_laneq_f64(vmulq_n_f64(v1317, *(double *)v1228), v1318, *(float64x2_t *)v1228, 1));
        v1322 = vsubq_f64(v1307[1], vmlaq_laneq_f64(vmulq_n_f64(v1315, *(double *)v1228), v1316, *(float64x2_t *)v1228, 1));
        *v1307 = vsubq_f64(*v1307, vmlaq_laneq_f64(vmulq_n_f64(v1319, *(double *)v1228), v1320, *(float64x2_t *)v1228, 1));
        v1307[1] = v1322;
        v1307[2] = v1321;
        v1323 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1309.f64[0]), v1320, v1309, 1);
        v1324 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1309.f64[0]), v1316, v1309, 1);
        v1325 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1309.f64[0]), v1318, v1309, 1);
        v1326 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1310.f64[0]), v1320, v1310, 1);
        v1327 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1310.f64[0]), v1316, v1310, 1);
        v1328 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1310.f64[0]), v1318, v1310, 1);
        v1329 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1311.f64[0]), v1320, v1311, 1);
        v1330 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1311.f64[0]), v1316, v1311, 1);
        v1331 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1311.f64[0]), v1318, v1311, 1);
        v1332 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1312.f64[0]), v1320, v1312, 1);
        v1333 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1312.f64[0]), v1316, v1312, 1);
        v1334 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1312.f64[0]), v1318, v1312, 1);
        v1335 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1314.f64[0]), v1320, v1314, 1);
        v1336 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1314.f64[0]), v1316, v1314, 1);
        v1337 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1314.f64[0]), v1318, v1314, 1);
        v1338 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1313.f64[0]), v1320, v1313, 1);
        v1339 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1313.f64[0]), v1316, v1313, 1);
        v66 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1313.f64[0]), v1318, v1313, 1);
        v1340 = (float64x2_t *)(v2536 + 288 * ((int)v1306 + *(_DWORD *)(v2527 + 4) * (int)v1306));
        v1341 = vaddq_f64(v1325, v1340[2]);
        v1342 = vaddq_f64(v1324, v1340[1]);
        v1343 = vaddq_f64(v1328, v1340[5]);
        v1344 = vaddq_f64(v1327, v1340[4]);
        v1345 = vaddq_f64(v1326, v1340[3]);
        v1346 = vaddq_f64(v1331, v1340[8]);
        v1347 = vaddq_f64(v1330, v1340[7]);
        v1348 = vaddq_f64(v1329, v1340[6]);
        v1349 = vaddq_f64(v1334, v1340[11]);
        v1350 = vaddq_f64(v1333, v1340[10]);
        v1351 = vaddq_f64(v1332, v1340[9]);
        v1352 = v1340[15];
        v1353 = vaddq_f64(v1337, v1340[14]);
        v1354 = vaddq_f64(v1336, v1340[13]);
        v1355 = vaddq_f64(v1335, v1340[12]);
        v1356 = vaddq_f64(v66, v1340[17]);
        *v1340 = vaddq_f64(v1323, *v1340);
        v1340[1] = v1342;
        v1340[2] = v1341;
        v1340[3] = v1345;
        v1340[4] = v1344;
        v1340[5] = v1343;
        v1357 = vaddq_f64(v1339, v1340[16]);
        v1340[6] = v1348;
        v1340[7] = v1347;
        v1340[8] = v1346;
        v1340[9] = v1351;
        v1340[10] = v1350;
        v1340[11] = v1349;
        v1340[12] = v1355;
        v1340[13] = v1354;
        v1340[14] = v1353;
        v1340[15] = vaddq_f64(v1338, v1352);
        v1340[16] = v1357;
        v1340[17] = v1356;
        v1358 = *v1251;
        if (*v1251 >> 30 == 3)
          goto LABEL_278;
        v1359 = (float64x2_t *)(v2298 + 32 * *v1248);
        v1360 = v1359[1];
        v1361 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1359->f64[0]), v1320, *v1359, 1);
        v1362 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1359->f64[0]), v1316, *v1359, 1);
        v1363 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1360.f64[0]), v1320, v1360, 1);
        v1364 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1360.f64[0]), v1316, v1360, 1);
        v1365 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1360.f64[0]), v1318, v1360, 1);
        v1366 = (float64x2_t *)(v2408 + 96 * (v1358 + *(_DWORD *)(v2401 + 4) * (int)v1306));
        v1367 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1317, v1359->f64[0]), v1318, *v1359, 1), v1366[2]);
        v1368 = vaddq_f64(v1362, v1366[1]);
        v1369 = vaddq_f64(v1365, v1366[5]);
        v1370 = vaddq_f64(v1364, v1366[4]);
        v1371 = vaddq_f64(v1363, v1366[3]);
        *v1366 = vaddq_f64(v1361, *v1366);
        v1366[1] = v1368;
        v1366[2] = v1367;
        v1366[3] = v1371;
        v1366[4] = v1370;
        v1366[5] = v1369;
LABEL_277:
        v1252 = 16 * *(int *)(v2295 + 4 * v1358);
        v1253 = (float64x2_t *)(v2298 + 32 * *v1248);
        v1254 = *v1253;
        v1255 = v1253[1];
        v1256 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1253, (int64x2_t)v1255);
        v1257 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1253, (int64x2_t)v1255);
        *(float64x2_t *)(v2479 + v1252) = vsubq_f64(*(float64x2_t *)(v2479 + v1252), vmlaq_laneq_f64(vmulq_n_f64(v1256, *(double *)v1228), v1257, *(float64x2_t *)v1228, 1));
        v1258 = (float64x2_t *)(v2519 + 32 * (v1358 + *(_DWORD *)(v2511 + 4) * v1358));
        v1259 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1256, v1254.f64[0]), v1257, v1254, 1), *v1258);
        v1260 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1256, v1255.f64[0]), v1257, v1255, 1), v1258[1]);
        *v1258 = v1259;
        v1258[1] = v1260;
LABEL_278:
        ++v1250;
        v1249 += 6;
        v1228 += 16;
        ++v1248;
        ++v1247;
        ++v1246;
        ++v1245;
        v1251 += 6;
      }
      while (6 * v2189 != v1249);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a18 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a45 + 24) |= 1uLL;
    *(_QWORD *)(a43 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v1223 = v2327;
    v1169 = v2368;
    v1170 = v2362;
    v1165 = v2318;
  }
  v1432 = STACK[0xB68];
  v2211 = STACK[0xAC8];
  v2213 = STACK[0xAC0];
  v2215 = STACK[0xAB8];
  v2217 = STACK[0xAB0];
  v2201 = STACK[0xAA0];
  v2199 = STACK[0xA88];
  v2197 = STACK[0xA70];
  v2195 = STACK[0xA58];
  v2194 = STACK[0xA48];
  v2208 = STACK[0xA38];
  v1433 = STACK[0xA30];
  v2225 = STACK[0xA28];
  v2221 = STACK[0xA20];
  v2219 = STACK[0xA18];
  v2223 = STACK[0xA10];
  v2206 = STACK[0xA00];
  v1434 = STACK[0x9F8];
  v2191 = STACK[0x9F8];
  v2192 = STACK[0xA30];
  v2258 = STACK[0xB68];
  if ((**(_BYTE **)(v1165 + 16) & 1) != 0)
  {
    v2432 = *(_QWORD *)(v2394 + 16);
    v1435 = _gc_buffer_get_extent();
    v1436 = _gc_buffer_get_extent();
    v1437 = _gc_buffer_get_extent();
    if (v1435 != 2 || v1436 != v1437)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v1170 + 24) |= 1uLL;
    }
    v1438 = *(_QWORD *)(v1170 + 16);
    v1439 = _gc_buffer_get_extent();
    v1440 = _gc_buffer_get_extent();
    v1441 = _gc_buffer_get_extent();
    v1442 = _gc_buffer_get_extent();
    if (v1439 != 2 || v1440 != 1 || v1441 != v1442)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1169 + 24) |= 1uLL;
    }
    v2448 = *(_QWORD *)(v1169 + 16);
    v1443 = _gc_buffer_get_extent();
    v1444 = _gc_buffer_get_extent();
    v1445 = _gc_buffer_get_extent();
    v1446 = _gc_buffer_get_extent();
    if (v1443 != 2 || v1444 != 4 || v1445 != v1446)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1168 + 24) |= 1uLL;
    }
    v2440 = *(_QWORD *)(v1168 + 16);
    v1447 = _gc_buffer_get_extent();
    v1448 = _gc_buffer_get_extent();
    v1449 = _gc_buffer_get_extent();
    v1450 = _gc_buffer_get_extent();
    if (v1447 != 2 || v1448 != 6 || v1449 != v1450)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1167 + 24) |= 1uLL;
    }
    v1451 = *(_QWORD *)(v1167 + 16);
    v1452 = _gc_buffer_get_extent();
    v1453 = _gc_buffer_get_extent();
    v1454 = _gc_buffer_get_extent();
    v1455 = _gc_buffer_get_extent();
    if (v1452 != 2 || v1453 != 2 || v1454 != v1455)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1166 + 24) |= 1uLL;
    }
    v1456 = *(_QWORD *)(v1166 + 16);
    v1457 = *(int **)(v2374 + 16);
    v1458 = *(int **)(v2380 + 16);
    v1459 = *(int **)(v2384 + 16);
    v1460 = *(int **)(v2389 + 16);
    v2424 = *(_QWORD *)(a14 + 16);
    v2416 = *(_QWORD *)(a15 + 16);
    v2402 = *(_QWORD *)(a18 + 16);
    v2409 = *(_QWORD *)(a19 + 16);
    v2580 = *(_QWORD *)(a20 + 16);
    v2571 = *(_QWORD *)(a21 + 16);
    v2563 = *(_QWORD *)(a22 + 16);
    v2556 = *(_QWORD *)(a23 + 16);
    v2547 = *(_QWORD *)(a41 + 16);
    v2537 = *(_QWORD *)(a42 + 16);
    v2528 = *(_QWORD *)(a43 + 16);
    v2520 = *(_QWORD *)(a44 + 16);
    v2512 = *(_QWORD *)(a45 + 16);
    v2504 = *(_QWORD *)(a46 + 16);
    v2496 = *(_QWORD *)(a56 + 16);
    v2488 = *(_QWORD *)(a57 + 16);
    v2480 = *(_QWORD *)(a58 + 16);
    v2472 = *(_QWORD *)(a59 + 16);
    v2464 = *(_QWORD *)(a66 + 16);
    v2456 = *(_QWORD *)(v2238 + 16);
    v1461 = *(_QWORD *)(v2240 + 16);
    v2603 = *(_QWORD *)(v2237 + 16);
    v2591 = *(_QWORD *)(v2239 + 16);
    v1462 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1463 = v2189;
    if ((int)v2189 >= 1)
    {
      v1464 = (int *)(v2432 + 16);
      do
      {
        v1465 = *(v1464 - 4);
        _Q2 = *(int8x16_t *)(v2448 + 16 * *v1457);
        _D1 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
        v1468 = *(float64x2_t *)v1438;
        _D5 = *(_QWORD *)(v1438 + 8);
        __asm { FMLA            D4, D5, V2.D[1] }
        *(double *)(v1461 + 8 * v1465) = *(double *)(v1461 + 8 * v1465) - _D4;
        if (v1465 >> 30 == 3)
        {
          v1471 = *(v1464 - 3);
          v1472 = v1471 >> 30;
          if (v1471 >> 30 == 3)
            goto LABEL_326;
        }
        else
        {
          __asm { FMLA            D3, D1, V2.D[1] }
          v1573 = 8 * ((int)v1465 + *(_DWORD *)(v2416 + 4) * (int)v1465);
          *(double *)(v2424 + v1573) = _D3 + *(double *)(v2424 + v1573);
          v1471 = *(v1464 - 3);
          v1472 = v1471 >> 30;
          if (v1471 >> 30 == 3)
          {
LABEL_326:
            v1473 = *v1464;
            v1474 = v1473 >> 30;
            if (v1473 >> 30 == 3)
              goto LABEL_327;
            goto LABEL_339;
          }
        }
        v1574 = (__int128 *)(v2440 + ((uint64_t)*v1458 << 6));
        _Q3 = *v1574;
        _Q4 = v1574[1];
        _Q5 = v1574[2];
        _Q6 = v1574[3];
        __asm
        {
          FMLA            D7, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
          FMLA            D5, D1, V6.D[1]
        }
        v1580 = (double *)(v2402 + 32 * ((int)v1471 + *(_DWORD *)(v2409 + 4) * (int)v1465));
        *(double *)&v1581 = _D7 + *v1580;
        *(double *)&_Q4 = *(double *)&_Q4 + v1580[2];
        *((double *)&v1581 + 1) = *(double *)&_Q3 + v1580[1];
        *((double *)&_Q4 + 1) = *(double *)&_Q5 + v1580[3];
        *(_OWORD *)v1580 = v1581;
        *((_OWORD *)v1580 + 1) = _Q4;
        v1473 = *v1464;
        v1474 = v1473 >> 30;
        if (v1473 >> 30 == 3)
        {
LABEL_327:
          v1475 = v1464[1];
          v1476 = v1475 >> 30;
          if (v1475 >> 30 == 3)
            goto LABEL_329;
LABEL_328:
          v1477 = (__int128 *)(v1456 + 32 * *v1460);
          _Q3 = *v1477;
          _Q4 = v1477[1];
          __asm
          {
            FMLA            D5, D1, V3.D[1]
            FMLA            D2, D1, V4.D[1]
          }
          v1482 = (double *)(v2563 + 16 * ((int)v1475 + *(_DWORD *)(v2556 + 4) * (int)v1465));
          v1483 = _D2 + v1482[1];
          *v1482 = _D5 + *v1482;
          v1482[1] = v1483;
          goto LABEL_329;
        }
LABEL_339:
        v1582 = (__int128 *)(v1451 + 96 * *v1459);
        _Q3 = *v1582;
        _Q4 = v1582[1];
        _Q5 = v1582[2];
        _Q6 = v1582[3];
        _Q7 = v1582[4];
        _Q16 = v1582[5];
        __asm
        {
          FMLA            D17, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
          FMLA            D5, D1, V6.D[1]
          FMLA            D6, D1, V7.D[1]
          FMLA            D7, D1, V16.D[1]
        }
        v1590 = (double *)(v2580 + 48 * ((int)v1473 + *(_DWORD *)(v2571 + 4) * (int)v1465));
        *(double *)&v1591 = _D17 + *v1590;
        *(double *)&_Q4 = *(double *)&_Q4 + v1590[2];
        *(double *)&_Q6 = *(double *)&_Q6 + v1590[4];
        *((double *)&v1591 + 1) = *(double *)&_Q3 + v1590[1];
        *((double *)&_Q4 + 1) = *(double *)&_Q5 + v1590[3];
        *((double *)&_Q6 + 1) = *(double *)&_Q7 + v1590[5];
        *(_OWORD *)v1590 = v1591;
        *((_OWORD *)v1590 + 1) = _Q4;
        *((_OWORD *)v1590 + 2) = _Q6;
        v1475 = v1464[1];
        v1476 = v1475 >> 30;
        if (v1475 >> 30 != 3)
          goto LABEL_328;
LABEL_329:
        v1484 = (float64x2_t *)(v2603 + 32 * v1471);
        v1485 = (float64x2_t *)(v2440 + ((uint64_t)*v1458 << 6));
        v1487 = *v1485;
        v1486 = v1485[1];
        v1489 = v1485[2];
        v1488 = v1485[3];
        *(_QWORD *)&v1490.f64[0] = vdupq_laneq_s64((int64x2_t)v1489, 1).u64[0];
        v1490.f64[1] = v1485[3].f64[1];
        v1491 = (float64x2_t)vzip1q_s64((int64x2_t)v1489, (int64x2_t)v1488);
        v1492 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1485, (int64x2_t)v1486);
        v1493 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1485, (int64x2_t)v1486);
        v1494 = vsubq_f64(v1484[1], vmlaq_laneq_f64(vmulq_n_f64(v1491, v1468.f64[0]), v1490, v1468, 1));
        *v1484 = vsubq_f64(*v1484, vmlaq_laneq_f64(vmulq_n_f64(v1492, v1468.f64[0]), v1493, v1468, 1));
        v1484[1] = v1494;
        if (v1472 <= 2)
        {
          v1592 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1487.f64[0]), v1493, v1487, 1);
          v1593 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1487.f64[0]), v1490, v1487, 1);
          v1594 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1486.f64[0]), v1493, v1486, 1);
          v1595 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1486.f64[0]), v1490, v1486, 1);
          v1596 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1489.f64[0]), v1493, v1489, 1);
          v1597 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1489.f64[0]), v1490, v1489, 1);
          v1598 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1488.f64[0]), v1493, v1488, 1);
          v1599 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1488.f64[0]), v1490, v1488, 1);
          v1600 = (float64x2_t *)(v2547 + ((uint64_t)((int)v1471 + *(_DWORD *)(v2537 + 4) * (int)v1471) << 7));
          v1601 = v1600[6];
          v1602 = vaddq_f64(v1592, *v1600);
          v1603 = vaddq_f64(v1593, v1600[1]);
          v1604 = vaddq_f64(v1594, v1600[2]);
          v1605 = vaddq_f64(v1595, v1600[3]);
          v1606 = vaddq_f64(v1596, v1600[4]);
          v1607 = vaddq_f64(v1597, v1600[5]);
          v1608 = vaddq_f64(v1599, v1600[7]);
          *v1600 = v1602;
          v1600[1] = v1603;
          v1600[2] = v1604;
          v1600[3] = v1605;
          v1600[4] = v1606;
          v1600[5] = v1607;
          v1600[6] = vaddq_f64(v1598, v1601);
          v1600[7] = v1608;
          if (v1474 <= 2)
          {
LABEL_342:
            v1609 = (float64x2_t *)(v1451 + 96 * *v1459);
            v1610 = v1609[1];
            v1611 = v1609[2];
            v1612 = v1609[3];
            v1613 = v1609[4];
            v1614 = v1609[5];
            v1615 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1609->f64[0]), v1493, *v1609, 1);
            v1616 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1609->f64[0]), v1490, *v1609, 1);
            v1617 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1610.f64[0]), v1493, v1610, 1);
            v1618 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1610.f64[0]), v1490, v1610, 1);
            v1619 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1611.f64[0]), v1493, v1611, 1);
            v1620 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1611.f64[0]), v1490, v1611, 1);
            v1621 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1612.f64[0]), v1493, v1612, 1);
            v1622 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1612.f64[0]), v1490, v1612, 1);
            v1623 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1613.f64[0]), v1493, v1613, 1);
            v1624 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1613.f64[0]), v1490, v1613, 1);
            v1625 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1614.f64[0]), v1493, v1614, 1);
            v1626 = (float64x2_t *)(v2528 + 192 * ((int)v1473 + *(_DWORD *)(v2520 + 4) * (int)v1471));
            v1627 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1614.f64[0]), v1490, v1614, 1);
            v66 = v1626[7];
            v1628 = v1626[8];
            v1629 = v1626[9];
            v1630 = v1626[10];
            v1631 = v1626[11];
            v1632 = vaddq_f64(v1616, v1626[1]);
            v1633 = vaddq_f64(v1617, v1626[2]);
            v1634 = vaddq_f64(v1618, v1626[3]);
            v1635 = vaddq_f64(v1619, v1626[4]);
            v1636 = vaddq_f64(v1620, v1626[5]);
            v1637 = vaddq_f64(v1621, v1626[6]);
            *v1626 = vaddq_f64(v1615, *v1626);
            v1626[1] = v1632;
            v1626[2] = v1633;
            v1626[3] = v1634;
            v1626[4] = v1635;
            v1626[5] = v1636;
            v1626[6] = v1637;
            v1626[7] = vaddq_f64(v1622, v66);
            v1626[8] = vaddq_f64(v1623, v1628);
            v1626[9] = vaddq_f64(v1624, v1629);
            v1626[10] = vaddq_f64(v1625, v1630);
            v1626[11] = vaddq_f64(v1627, v1631);
            if (v1476 > 2)
              goto LABEL_333;
LABEL_332:
            v1495 = (float64x2_t *)(v1456 + 32 * *v1460);
            v1496 = v1495[1];
            v1497 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1495->f64[0]), v1493, *v1495, 1);
            v1498 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1496.f64[0]), v1493, v1496, 1);
            v1499 = (float64x2_t *)(v2512 + ((uint64_t)((int)v1475 + *(_DWORD *)(v2504 + 4) * (int)v1471) << 6));
            v1500 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1491, v1495->f64[0]), v1490, *v1495, 1), v1499[1]);
            v1501 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1491, v1496.f64[0]), v1490, v1496, 1), v1499[3]);
            v1502 = vaddq_f64(v1498, v1499[2]);
            *v1499 = vaddq_f64(v1497, *v1499);
            v1499[1] = v1500;
            v1499[2] = v1502;
            v1499[3] = v1501;
            goto LABEL_333;
          }
        }
        else if (v1474 <= 2)
        {
          goto LABEL_342;
        }
        if (v1476 <= 2)
          goto LABEL_332;
LABEL_333:
        v1503 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1468, 1);
        v1504 = (float64x2_t *)(v2591 + 48 * v1473);
        v1505 = (float64x2_t *)(v1451 + 96 * *v1459);
        v1506 = *v1505;
        v1507 = v1505[1];
        v1509 = v1505[2];
        v1508 = v1505[3];
        v1511 = v1505[4];
        v1510 = v1505[5];
        v1512 = (float64x2_t)vzip1q_s64((int64x2_t)v1509, (int64x2_t)v1508);
        *(_QWORD *)&v1513.f64[0] = vdupq_laneq_s64((int64x2_t)v1509, 1).u64[0];
        v1513.f64[1] = v1505[3].f64[1];
        *(_QWORD *)&v1515.f64[0] = vdupq_laneq_s64((int64x2_t)v1511, 1).u64[0];
        v1514 = (float64x2_t)vzip1q_s64((int64x2_t)v1511, (int64x2_t)v1510);
        v1515.f64[1] = v1505[5].f64[1];
        v1516 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1505, (int64x2_t)v1507);
        v1517 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1505, (int64x2_t)v1507);
        v1518 = vsubq_f64(v1504[2], vmlaq_f64(vmulq_n_f64(v1514, v1468.f64[0]), v1503, v1515));
        v1519 = vsubq_f64(v1504[1], vmlaq_f64(vmulq_n_f64(v1512, v1468.f64[0]), v1503, v1513));
        *v1504 = vsubq_f64(*v1504, vmlaq_f64(vmulq_n_f64(v1516, v1468.f64[0]), v1503, v1517));
        v1504[1] = v1519;
        v1504[2] = v1518;
        if (v1474 <= 2)
        {
          v1520 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1506.f64[0]), v1517, v1506, 1);
          v1521 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1506.f64[0]), v1513, v1506, 1);
          v1522 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1506.f64[0]), v1515, v1506, 1);
          v1523 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1507.f64[0]), v1517, v1507, 1);
          v1524 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1507.f64[0]), v1513, v1507, 1);
          v1525 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1507.f64[0]), v1515, v1507, 1);
          v1526 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1509.f64[0]), v1517, v1509, 1);
          v1527 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1509.f64[0]), v1513, v1509, 1);
          v1528 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1509.f64[0]), v1515, v1509, 1);
          v1529 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1508.f64[0]), v1517, v1508, 1);
          v1530 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1508.f64[0]), v1513, v1508, 1);
          v1531 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1508.f64[0]), v1515, v1508, 1);
          v1532 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1511.f64[0]), v1517, v1511, 1);
          v1533 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1511.f64[0]), v1513, v1511, 1);
          v1534 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1511.f64[0]), v1515, v1511, 1);
          v1535 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1510.f64[0]), v1517, v1510, 1);
          v1536 = (float64x2_t *)(v2496 + 288 * ((int)v1473 + *(_DWORD *)(v2488 + 4) * (int)v1473));
          v1537 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1510.f64[0]), v1513, v1510, 1);
          v1538 = vaddq_f64(v1522, v1536[2]);
          v1539 = vaddq_f64(v1521, v1536[1]);
          v1540 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1510.f64[0]), v1515, v1510, 1);
          v1541 = vaddq_f64(v1520, *v1536);
          v1542 = vaddq_f64(v1525, v1536[5]);
          v1543 = vaddq_f64(v1524, v1536[4]);
          v1544 = vaddq_f64(v1523, v1536[3]);
          v1545 = vaddq_f64(v1528, v1536[8]);
          v1546 = vaddq_f64(v1527, v1536[7]);
          v1547 = vaddq_f64(v1526, v1536[6]);
          v1548 = vaddq_f64(v1531, v1536[11]);
          v1549 = vaddq_f64(v1530, v1536[10]);
          v1550 = vaddq_f64(v1529, v1536[9]);
          v1551 = v1536[15];
          v1552 = vaddq_f64(v1534, v1536[14]);
          v1553 = vaddq_f64(v1533, v1536[13]);
          v1554 = vaddq_f64(v1532, v1536[12]);
          v66 = vaddq_f64(v1540, v1536[17]);
          *v1536 = v1541;
          v1536[1] = v1539;
          v1536[2] = v1538;
          v1536[3] = v1544;
          v1536[4] = v1543;
          v1536[5] = v1542;
          v1536[6] = v1547;
          v1536[7] = v1546;
          v1536[8] = v1545;
          v1536[9] = v1550;
          v1536[10] = v1549;
          v1536[11] = v1548;
          v1536[12] = v1554;
          v1536[13] = v1553;
          v1536[14] = v1552;
          v1536[15] = vaddq_f64(v1535, v1551);
          v1536[16] = vaddq_f64(v1537, v1536[16]);
          v1536[17] = v66;
        }
        v1555 = 4 * *v1460;
        v1556 = 32 * *v1460;
        if (v1476 >= 3)
        {
          v1558 = v1555 | 2;
        }
        else
        {
          v1557 = *(float64x2_t *)(v1456 + 32 * *v1460);
          v1558 = v1555 | 2;
          v1559 = *(float64x2_t *)(v1456 + 8 * v1558);
          v1560 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1557.f64[0]), v1517, v1557, 1);
          v1561 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1557.f64[0]), v1513, v1557, 1);
          v1562 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1557.f64[0]), v1515, v1557, 1);
          v1563 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1559.f64[0]), v1517, v1559, 1);
          v1564 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1559.f64[0]), v1513, v1559, 1);
          v1565 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1559.f64[0]), v1515, v1559, 1);
          v1566 = (float64x2_t *)(v2480 + 96 * ((int)v1475 + *(_DWORD *)(v2472 + 4) * (int)v1473));
          v1567 = v1566[3];
          v1568 = vaddq_f64(v1562, v1566[2]);
          v1569 = vaddq_f64(v1561, v1566[1]);
          v1570 = vaddq_f64(v1565, v1566[5]);
          v1571 = vaddq_f64(v1564, v1566[4]);
          *v1566 = vaddq_f64(v1560, *v1566);
          v1566[1] = v1569;
          v1566[2] = v1568;
          v1566[3] = vaddq_f64(v1563, v1567);
          v1566[4] = v1571;
          v1566[5] = v1570;
        }
        v1638 = *(float64x2_t *)(v1456 + v1556);
        v1639 = *(float64x2_t *)(v1456 + 8 * v1558);
        v1640 = (float64x2_t)vzip1q_s64((int64x2_t)v1638, (int64x2_t)v1639);
        v1641 = (float64x2_t)vzip2q_s64((int64x2_t)v1638, (int64x2_t)v1639);
        *(float64x2_t *)(v1462 + 16 * v1475) = vsubq_f64(*(float64x2_t *)(v1462 + 16 * v1475), vmlaq_f64(vmulq_n_f64(v1640, v1468.f64[0]), v1503, v1641));
        if (v1476 <= 2)
        {
          v1642 = (float64x2_t *)(v2464 + 32 * ((int)v1475 + *(_DWORD *)(v2456 + 4) * (int)v1475));
          v1643 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1640, v1639.f64[0]), v1641, v1639, 1), v1642[1]);
          *v1642 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1640, v1638.f64[0]), v1641, v1638, 1), *v1642);
          v1642[1] = v1643;
        }
        ++v1460;
        ++v1459;
        ++v1458;
        v1438 += 16;
        ++v1457;
        v1464 += 6;
        --v1463;
      }
      while (v1463);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a18 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a45 + 24) |= 1uLL;
    *(_QWORD *)(a43 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v1434 = v2191;
    v1433 = v2192;
    v1432 = v2258;
    v1223 = v2327;
  }
  v1644 = STACK[0xB70];
  v2185 = STACK[0xB70];
  if ((**(_BYTE **)(v1223 + 16) & 1) != 0)
  {
    v1645 = *(_QWORD *)(v2206 + 16);
    v1646 = _gc_buffer_get_extent();
    v1647 = _gc_buffer_get_extent();
    v1648 = _gc_buffer_get_extent();
    if (v1646 != 2 || v1647 != v1648)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v1434 + 24) |= 1uLL;
    }
    v1649 = *(_QWORD *)(v1434 + 16);
    v2279 = *(_QWORD *)(v2208 + 16);
    v1650 = _gc_buffer_get_extent();
    v1651 = _gc_buffer_get_extent();
    v1652 = _gc_buffer_get_extent();
    v1653 = _gc_buffer_get_extent();
    if (v1650 != 2 || v1651 != 3 || v1652 != v1653)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2223 + 24) |= 1uLL;
    }
    v2604 = *(_QWORD *)(v2223 + 16);
    v1654 = _gc_buffer_get_extent();
    v1655 = _gc_buffer_get_extent();
    v1656 = _gc_buffer_get_extent();
    v1657 = _gc_buffer_get_extent();
    if (v1654 != 2 || v1655 != 1 || v1656 != v1657)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2219 + 24) |= 1uLL;
    }
    v2529 = *(_QWORD *)(v2219 + 16);
    v1658 = _gc_buffer_get_extent();
    v1659 = _gc_buffer_get_extent();
    v1660 = _gc_buffer_get_extent();
    v1661 = _gc_buffer_get_extent();
    if (v1658 != 2 || v1659 != 4 || v1660 != v1661)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2221 + 24) |= 1uLL;
    }
    v2538 = *(_QWORD *)(v2221 + 16);
    v1662 = _gc_buffer_get_extent();
    v1663 = _gc_buffer_get_extent();
    v1664 = _gc_buffer_get_extent();
    v1665 = _gc_buffer_get_extent();
    if (v1662 != 2 || v1663 != 6 || v1664 != v1665)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2225 + 24) |= 1uLL;
    }
    v1666 = *(_QWORD *)(v2225 + 16);
    v1667 = _gc_buffer_get_extent();
    v1668 = _gc_buffer_get_extent();
    v1669 = _gc_buffer_get_extent();
    v1670 = _gc_buffer_get_extent();
    if (v1667 != 2 || v1668 != 2 || v1669 != v1670)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1433 + 24) |= 1uLL;
    }
    v1671 = *(_QWORD *)(v1433 + 16);
    v2271 = *(int **)(v2194 + 16);
    v2521 = *(_QWORD *)(a6 + 16);
    v2513 = *(_QWORD *)(a8 + 16);
    v2505 = *(_QWORD *)(a9 + 16);
    v2497 = *(_QWORD *)(a10 + 16);
    v2489 = *(_QWORD *)(v2195 + 16);
    v1672 = *(_QWORD *)(v2197 + 16);
    v1673 = *(_QWORD *)(v2199 + 16);
    v1674 = *(_QWORD *)(v2201 + 16);
    v1675 = *(_QWORD *)(a14 + 16);
    v2481 = *(_QWORD *)(a15 + 16);
    v2363 = *(_QWORD *)(a18 + 16);
    v2357 = *(_QWORD *)(a19 + 16);
    v2352 = *(_QWORD *)(a20 + 16);
    v2347 = *(_QWORD *)(a21 + 16);
    v2343 = *(_QWORD *)(a22 + 16);
    v2339 = *(_QWORD *)(a23 + 16);
    v2473 = *(_QWORD *)(a41 + 16);
    v2465 = *(_QWORD *)(a42 + 16);
    v2334 = *(_QWORD *)(a43 + 16);
    v2328 = *(_QWORD *)(a44 + 16);
    v2322 = *(_QWORD *)(a45 + 16);
    v2319 = *(_QWORD *)(a46 + 16);
    v2457 = *(_QWORD *)(a56 + 16);
    v2449 = *(_QWORD *)(a57 + 16);
    v2314 = *(_QWORD *)(a58 + 16);
    v2308 = *(_QWORD *)(a59 + 16);
    v2441 = *(_QWORD *)(a66 + 16);
    v2433 = *(_QWORD *)(v2238 + 16);
    v2425 = *(_QWORD *)(v2217 + 16);
    v2417 = *(_QWORD *)(v2215 + 16);
    v2410 = *(_QWORD *)(v2213 + 16);
    v2403 = *(_QWORD *)(v2211 + 16);
    v1676 = *(_QWORD *)(v2240 + 16);
    v2395 = *(_QWORD *)(v2237 + 16);
    v2390 = *(_QWORD *)(v2239 + 16);
    v1677 = *(_QWORD *)(v2241 + 16);
    v2302 = *(_QWORD *)(v2236 + 16);
    v2299 = *(_QWORD *)(v2233 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2303 >= 1)
    {
      v1681 = 0;
      v2275 = v2604 + 32;
      while (v1681)
      {
        v1682 = v2271[v1681 - 1];
        v1683 = v2271[v1681];
        if (v1682 < (int)v1683)
          goto LABEL_378;
LABEL_401:
        if (++v1681 == v2303)
          goto LABEL_402;
      }
      v1682 = 0;
      v1683 = *v2271;
      if ((int)v1683 <= 0)
        goto LABEL_401;
LABEL_378:
      v1684 = (float64x2_t *)(v2302 + 72 * v1681);
      v67 = v1684[1];
      v1685 = (int64x2_t)v1684[2];
      v1686 = v1684[3];
      v2296 = (float64x2_t *)(v2299 + 24 * v1681);
      v1687 = *v2296;
      v2292 = 3 * v1681 + 2;
      v66.f64[0] = *(float64_t *)(v2299 + 8 * v2292);
      v1688 = *v1684;
      v2283 = 9 * v1681 + 8;
      v1680.f64[0] = *(float64_t *)(v2302 + 8 * v2283);
      v1689 = v1683 - v1682;
      v1690 = (float64x2_t *)(v2275 + 48 * v1682);
      v1691 = (int *)(v2279 + 4 * v1682);
      while (1)
      {
        v1703 = v1690[-2];
        v1702 = v1690[-1];
        _Q7 = *v1690;
        v1705 = *v1691;
        v1706 = *(float64x2_t *)(v1649 + 16 * v1705);
        v1707 = 6 * v1705;
        v1708 = *(int *)(v1645 + 24 * v1705);
        if (v1708 >> 30 == 3)
        {
          v1724 = v1707 | 1;
        }
        else
        {
          _D21 = vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL).u64[0];
          _D22 = vextq_s8((int8x16_t)v1706, (int8x16_t)v1706, 8uLL).u64[0];
          _D23 = vextq_s8((int8x16_t)v1703, (int8x16_t)v1703, 8uLL).u64[0];
          _D24 = vextq_s8((int8x16_t)v1702, (int8x16_t)v1702, 8uLL).u64[0];
          _Q20 = *(int8x16_t *)(v2529 + 16 * *(int *)(v2489 + 4 * v1705));
          _D19 = vextq_s8(_Q20, _Q20, 8uLL).u64[0];
          __asm
          {
            FMLA            D25, D23, V20.D[1]
            FMLA            D23, D24, V20.D[1]
          }
          *((_QWORD *)&_Q25 + 1) = _D23;
          __asm { FMLA            D24, D21, V20.D[1] }
          v1718 = 8 * *(int *)(v2521 + 4 * v1708);
          v1719 = v2425 + 24 * v1705;
          __asm { FMLA            D23, D22, V20.D[1] }
          *(double *)(v1676 + v1718) = *(double *)(v1676 + v1718) - _D23;
          *(_OWORD *)v1719 = _Q25;
          _D22 = _Q20.i64[1];
          __asm { FMLA            D21, D22, V20.D[1] }
          v1723 = 8 * ((int)v1708 + *(_DWORD *)(v2481 + 4) * (int)v1708);
          *(double *)(v1675 + v1723) = _D21 + *(double *)(v1675 + v1723);
          *(_QWORD *)(v1719 + 16) = _D24;
          v1724 = v1707 | 1;
          v1725 = *(_DWORD *)(v1645 + 4 * (v1707 | 1));
          if (v1725 >> 30 == 3)
          {
            v1726 = v1645 + 24 * v1705;
            v1727 = *(_DWORD *)(v1726 + 16);
            if (v1727 >> 30 == 3)
              goto LABEL_383;
          }
          else
          {
            v1729 = (__int128 *)(v2538 + ((uint64_t)*(int *)(v1672 + 4 * v1705) << 6));
            _Q21 = *v1729;
            _Q22 = v1729[1];
            _Q23 = v1729[2];
            _Q24 = v1729[3];
            __asm
            {
              FMLA            D25, D19, V21.D[1]
              FMLA            D21, D19, V22.D[1]
              FMLA            D22, D19, V23.D[1]
              FMLA            D23, D19, V24.D[1]
            }
            v1735 = (double *)(v2363 + 32 * (int)(v1725 + *(_DWORD *)(v2357 + 4) * v1708));
            *(double *)&v1736 = _D25 + *v1735;
            *(double *)&_Q22 = *(double *)&_Q22 + v1735[2];
            *((double *)&v1736 + 1) = *(double *)&_Q21 + v1735[1];
            *((double *)&_Q22 + 1) = *(double *)&_Q23 + v1735[3];
            *(_OWORD *)v1735 = v1736;
            *((_OWORD *)v1735 + 1) = _Q22;
            v1726 = v1645 + 24 * v1705;
            v1727 = *(_DWORD *)(v1726 + 16);
            if (v1727 >> 30 == 3)
            {
LABEL_383:
              v1728 = *(_DWORD *)(v1726 + 20);
              if (v1728 >> 30 == 3)
                goto LABEL_389;
LABEL_388:
              v1747 = (__int128 *)(v1671 + 32 * *(int *)(v1674 + 4 * v1705));
              _Q21 = *v1747;
              _Q22 = v1747[1];
              __asm
              {
                FMLA            D23, D19, V21.D[1]
                FMLA            D20, D19, V22.D[1]
              }
              v1752 = (double *)(v2343 + 16 * (int)(v1728 + *(_DWORD *)(v2339 + 4) * v1708));
              v1753 = _D20 + v1752[1];
              *v1752 = _D23 + *v1752;
              v1752[1] = v1753;
              goto LABEL_389;
            }
          }
          v1737 = (__int128 *)(v1666 + 96 * *(int *)(v1673 + 4 * v1705));
          _Q21 = *v1737;
          _Q22 = v1737[1];
          _Q23 = v1737[2];
          _Q24 = v1737[3];
          _Q25 = v1737[4];
          _Q26 = v1737[5];
          __asm
          {
            FMLA            D27, D19, V21.D[1]
            FMLA            D21, D19, V22.D[1]
            FMLA            D22, D19, V23.D[1]
            FMLA            D23, D19, V24.D[1]
            FMLA            D24, D19, V25.D[1]
            FMLA            D25, D19, V26.D[1]
          }
          v1745 = (double *)(v2352 + 48 * (int)(v1727 + *(_DWORD *)(v2347 + 4) * v1708));
          *(double *)&v1746 = _D27 + *v1745;
          *(double *)&_Q22 = *(double *)&_Q22 + v1745[2];
          *(double *)&_Q24 = *(double *)&_Q24 + v1745[4];
          *((double *)&v1746 + 1) = *(double *)&_Q21 + v1745[1];
          *((double *)&_Q22 + 1) = *(double *)&_Q23 + v1745[3];
          *((double *)&_Q24 + 1) = *(double *)&_Q25 + v1745[5];
          *(_OWORD *)v1745 = v1746;
          *((_OWORD *)v1745 + 1) = _Q22;
          *((_OWORD *)v1745 + 2) = _Q24;
          v1728 = *(_DWORD *)(v1726 + 20);
          if (v1728 >> 30 != 3)
            goto LABEL_388;
        }
LABEL_389:
        v1754 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1706, 1);
        v1755 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1703, 1);
        v1756 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1702, 1);
        v1757 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q7, 1);
        v1758 = *(int *)(v1645 + 4 * v1724);
        v2605 = v1680;
        v2592 = v1685;
        v2581 = v66;
        v2572 = v1688;
        v2564 = v1687;
        if (v1758 >> 30 == 3)
        {
          v1787 = v1707 + 4;
        }
        else
        {
          v1759 = (float64x2_t *)(v2538 + ((uint64_t)*(int *)(v1672 + 4 * v1705) << 6));
          v1760 = *v1759;
          v1761 = v1759[1];
          v1763 = v1759[2];
          v1762 = v1759[3];
          *(_QWORD *)&v1764.f64[0] = vdupq_laneq_s64((int64x2_t)v1763, 1).u64[0];
          v1764.f64[1] = v1759[3].f64[1];
          v1765 = (float64x2_t)vzip1q_s64((int64x2_t)v1763, (int64x2_t)v1762);
          v1766 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1759, (int64x2_t)v1761);
          v1767 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1759, (int64x2_t)v1761);
          v1768 = (float64x2_t *)(v2417 + 96 * v1705);
          *v1768 = vmlaq_f64(vmulq_n_f64(v1766, v1703.f64[0]), v1755, v1767);
          v1768[1] = vmlaq_f64(vmulq_n_f64(v1765, v1703.f64[0]), v1755, v1764);
          v1768[2] = vmlaq_f64(vmulq_n_f64(v1766, v1702.f64[0]), v1756, v1767);
          v1768[3] = vmlaq_f64(vmulq_n_f64(v1765, v1702.f64[0]), v1756, v1764);
          v1768[4] = vmlaq_f64(vmulq_n_f64(v1766, _Q7.f64[0]), v1757, v1767);
          v1768[5] = vmlaq_f64(vmulq_n_f64(v1765, _Q7.f64[0]), v1757, v1764);
          v1769 = (float64x2_t *)(v2395 + 32 * *(int *)(v2513 + 4 * v1758));
          v1770 = vsubq_f64(v1769[1], vmlaq_f64(vmulq_n_f64(v1765, v1706.f64[0]), v1754, v1764));
          *v1769 = vsubq_f64(*v1769, vmlaq_f64(vmulq_n_f64(v1766, v1706.f64[0]), v1754, v1767));
          v1769[1] = v1770;
          v1771 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1760.f64[0]), v1767, v1760, 1);
          v1772 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1760.f64[0]), v1764, v1760, 1);
          v1773 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1761.f64[0]), v1767, v1761, 1);
          v1774 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1761.f64[0]), v1764, v1761, 1);
          v1775 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1763.f64[0]), v1767, v1763, 1);
          v1776 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1763.f64[0]), v1764, v1763, 1);
          v1777 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1762.f64[0]), v1767, v1762, 1);
          v1778 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1762.f64[0]), v1764, v1762, 1);
          v1779 = (float64x2_t *)(v2473 + ((uint64_t)((int)v1758 + *(_DWORD *)(v2465 + 4) * (int)v1758) << 7));
          v1780 = v1779[2];
          v1781 = vaddq_f64(v1771, *v1779);
          v1782 = vaddq_f64(v1772, v1779[1]);
          v1783 = vaddq_f64(v1774, v1779[3]);
          v1784 = vaddq_f64(v1775, v1779[4]);
          v1785 = vaddq_f64(v1776, v1779[5]);
          v1786 = vaddq_f64(v1778, v1779[7]);
          _Q3 = vaddq_f64(v1777, v1779[6]);
          *v1779 = v1781;
          v1779[1] = v1782;
          v1779[2] = vaddq_f64(v1773, v1780);
          v1779[3] = v1783;
          v1779[4] = v1784;
          v1779[5] = v1785;
          v1779[6] = _Q3;
          v1779[7] = v1786;
          v1787 = v1707 + 4;
          v1788 = *(_DWORD *)(v1645 + 4 * (v1707 + 4));
          if (v1788 >> 30 != 3)
          {
            v1789 = (float64x2_t *)(v1666 + 96 * *(int *)(v1673 + 4 * v1705));
            v1790 = v1789[1];
            v1791 = v1789[2];
            v1792 = v1789[3];
            v1793 = v1789[4];
            v1794 = v1789[5];
            v1795 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1789->f64[0]), v1767, *v1789, 1);
            v1796 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1789->f64[0]), v1764, *v1789, 1);
            v1797 = (float64x2_t *)(v2334 + 192 * (int)(v1788 + *(_DWORD *)(v2328 + 4) * v1758));
            v2375 = v1755;
            v2385 = v1754;
            v2369 = v1797[10];
            v1798 = vaddq_f64(v1796, v1797[1]);
            v1799 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1790.f64[0]), v1767, v1790, 1), v1797[2]);
            v1800 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1790.f64[0]), v1764, v1790, 1), v1797[3]);
            v1801 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1791.f64[0]), v1767, v1791, 1), v1797[4]);
            v1802 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1791.f64[0]), v1764, v1791, 1), v1797[5]);
            _Q3 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1792.f64[0]), v1767, v1792, 1), v1797[6]);
            _Q5 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1792.f64[0]), v1764, v1792, 1), v1797[7]);
            v1803 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1793.f64[0]), v1767, v1793, 1), v1797[8]);
            v1804 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1793.f64[0]), v1764, v1793, 1), v1797[9]);
            v1805 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1794.f64[0]), v1764, v1794, 1), v1797[11]);
            *v1797 = vaddq_f64(v1795, *v1797);
            v1797[1] = v1798;
            v1797[2] = v1799;
            v1797[3] = v1800;
            v1797[4] = v1801;
            v1797[5] = v1802;
            v1797[6] = _Q3;
            v1797[7] = _Q5;
            v1797[8] = v1803;
            v1797[9] = v1804;
            v1797[10] = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1794.f64[0]), v1767, v1794, 1), v2369);
            v1797[11] = v1805;
            v1755 = v2375;
            v1754 = v2385;
          }
          v1806 = *(_DWORD *)(v1645 + 24 * v1705 + 20);
          v1680 = v2605;
          v1685 = v2592;
          v66 = v2581;
          v1688 = v2572;
          v1687 = v2564;
          if (v1806 >> 30 != 3)
          {
            v1807 = (float64x2_t *)(v1671 + 32 * *(int *)(v1674 + 4 * v1705));
            v1808 = v1807[1];
            v1809 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1807->f64[0]), v1767, *v1807, 1);
            v1810 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1808.f64[0]), v1767, v1808, 1);
            v1811 = v1755;
            v1812 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1808.f64[0]), v1764, v1808, 1);
            v1813 = (float64x2_t *)(v2322 + ((uint64_t)(int)(v1806 + *(_DWORD *)(v2319 + 4) * v1758) << 6));
            _Q5 = v1813[1];
            v1814 = vaddq_f64(v1809, *v1813);
            v1815 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1807->f64[0]), v1764, *v1807, 1), _Q5);
            _Q3 = vaddq_f64(v1812, v1813[3]);
            v1755 = v1811;
            v1816 = vaddq_f64(v1810, v1813[2]);
            *v1813 = v1814;
            v1813[1] = v1815;
            v1813[2] = v1816;
            v1813[3] = _Q3;
          }
        }
        v1817 = *(int *)(v1645 + 4 * v1787);
        if (v1817 >> 30 != 3)
        {
          v1818 = (float64x2_t *)(v1666 + 96 * *(int *)(v1673 + 4 * v1705));
          v1820 = *v1818;
          v1819 = v1818[1];
          v1821 = v1818[2];
          v1822 = v1818[3];
          v1824 = v1818[4];
          v1823 = v1818[5];
          v1825 = (float64x2_t)vzip1q_s64((int64x2_t)v1821, (int64x2_t)v1822);
          *(_QWORD *)&v1826.f64[0] = vdupq_laneq_s64((int64x2_t)v1821, 1).u64[0];
          v1826.f64[1] = v1818[3].f64[1];
          v1827 = (float64x2_t)vzip1q_s64((int64x2_t)v1824, (int64x2_t)v1823);
          v1828 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1818, (int64x2_t)v1819);
          v1829 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1818, (int64x2_t)v1819);
          *(_QWORD *)&v1830.f64[0] = vdupq_laneq_s64((int64x2_t)v1824, 1).u64[0];
          v1830.f64[1] = v1818[5].f64[1];
          v1831 = (float64x2_t *)(v2410 + 144 * v1705);
          *v1831 = vmlaq_f64(vmulq_n_f64(v1828, v1703.f64[0]), v1755, v1829);
          v1831[1] = vmlaq_f64(vmulq_n_f64(v1825, v1703.f64[0]), v1755, v1826);
          v1831[2] = vmlaq_f64(vmulq_n_f64(v1827, v1703.f64[0]), v1755, v1830);
          v1831[3] = vmlaq_f64(vmulq_n_f64(v1828, v1702.f64[0]), v1756, v1829);
          v1831[4] = vmlaq_f64(vmulq_n_f64(v1825, v1702.f64[0]), v1756, v1826);
          v1831[5] = vmlaq_f64(vmulq_n_f64(v1827, v1702.f64[0]), v1756, v1830);
          v1831[6] = vmlaq_f64(vmulq_n_f64(v1828, _Q7.f64[0]), v1757, v1829);
          v1831[7] = vmlaq_f64(vmulq_n_f64(v1825, _Q7.f64[0]), v1757, v1826);
          v1832 = *(int *)(v2505 + 4 * v1817);
          v1831[8] = vmlaq_f64(vmulq_n_f64(v1827, _Q7.f64[0]), v1757, v1830);
          v1833 = (float64x2_t *)(v2390 + 48 * v1832);
          v1834 = vsubq_f64(v1833[2], vmlaq_f64(vmulq_n_f64(v1827, v1706.f64[0]), v1754, v1830));
          v1835 = vsubq_f64(v1833[1], vmlaq_f64(vmulq_n_f64(v1825, v1706.f64[0]), v1754, v1826));
          *v1833 = vsubq_f64(*v1833, vmlaq_f64(vmulq_n_f64(v1828, v1706.f64[0]), v1754, v1829));
          v1833[1] = v1835;
          v1833[2] = v1834;
          v1836 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1820.f64[0]), v1829, v1820, 1);
          v1837 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1820.f64[0]), v1826, v1820, 1);
          v1838 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1820.f64[0]), v1830, v1820, 1);
          v1839 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1819.f64[0]), v1829, v1819, 1);
          v1840 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1819.f64[0]), v1826, v1819, 1);
          v1841 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1819.f64[0]), v1830, v1819, 1);
          v1842 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1821.f64[0]), v1829, v1821, 1);
          v1843 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1821.f64[0]), v1826, v1821, 1);
          v1844 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1821.f64[0]), v1830, v1821, 1);
          v1845 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1822.f64[0]), v1829, v1822, 1);
          v1846 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1822.f64[0]), v1826, v1822, 1);
          v1847 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1822.f64[0]), v1830, v1822, 1);
          v1848 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1824.f64[0]), v1829, v1824, 1);
          v1849 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1824.f64[0]), v1826, v1824, 1);
          v1850 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1824.f64[0]), v1830, v1824, 1);
          v1851 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1823.f64[0]), v1829, v1823, 1);
          v1852 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1823.f64[0]), v1826, v1823, 1);
          v1853 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1823.f64[0]), v1830, v1823, 1);
          v1854 = (float64x2_t *)(v2457 + 288 * ((int)v1817 + *(_DWORD *)(v2449 + 4) * (int)v1817));
          v1855 = vaddq_f64(v1838, v1854[2]);
          v1856 = vaddq_f64(v1837, v1854[1]);
          v1857 = vaddq_f64(v1841, v1854[5]);
          v1858 = vaddq_f64(v1840, v1854[4]);
          v1859 = vaddq_f64(v1839, v1854[3]);
          v1860 = vaddq_f64(v1844, v1854[8]);
          v1861 = vaddq_f64(v1843, v1854[7]);
          v1862 = vaddq_f64(v1842, v1854[6]);
          _Q5 = vaddq_f64(v1847, v1854[11]);
          v1863 = vaddq_f64(v1846, v1854[10]);
          _Q3 = vaddq_f64(v1845, v1854[9]);
          v1864 = v1854[15];
          v1865 = vaddq_f64(v1850, v1854[14]);
          v1866 = vaddq_f64(v1849, v1854[13]);
          v1867 = vaddq_f64(v1848, v1854[12]);
          v1868 = vaddq_f64(v1853, v1854[17]);
          *v1854 = vaddq_f64(v1836, *v1854);
          v1854[1] = v1856;
          v1869 = vaddq_f64(v1852, v1854[16]);
          v1870 = vaddq_f64(v1851, v1864);
          v1680 = v2605;
          v1854[2] = v1855;
          v1854[3] = v1859;
          v1854[4] = v1858;
          v1854[5] = v1857;
          v1854[6] = v1862;
          v1854[7] = v1861;
          v1688 = v2572;
          v1854[8] = v1860;
          v1854[9] = _Q3;
          v1854[10] = v1863;
          v1854[11] = _Q5;
          v1854[12] = v1867;
          v1854[13] = v1866;
          v1685 = v2592;
          v1854[14] = v1865;
          v1854[15] = v1870;
          v66 = v2581;
          v1854[16] = v1869;
          v1854[17] = v1868;
          v1687 = v2564;
          v1871 = *(_DWORD *)(v1645 + 24 * v1705 + 20);
          if (v1871 >> 30 != 3)
          {
            v1872 = (float64x2_t *)(v1671 + 32 * *(int *)(v1674 + 4 * v1705));
            v1873 = v1872[1];
            v1874 = (float64x2_t *)(v2314 + 96 * (int)(v1871 + *(_DWORD *)(v2308 + 4) * v1817));
            v1875 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1827, v1872->f64[0]), v1830, *v1872, 1), v1874[2]);
            _Q3 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1825, v1872->f64[0]), v1826, *v1872, 1), v1874[1]);
            v1876 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1827, v1873.f64[0]), v1830, v1873, 1), v1874[5]);
            _Q5 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1825, v1873.f64[0]), v1826, v1873, 1), v1874[4]);
            v1877 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1828, v1873.f64[0]), v1829, v1873, 1), v1874[3]);
            *v1874 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1828, v1872->f64[0]), v1829, *v1872, 1), *v1874);
            v1874[1] = _Q3;
            v1874[2] = v1875;
            v1874[3] = v1877;
            v1874[4] = _Q5;
            v1874[5] = v1876;
          }
        }
        v1878 = *v1691;
        v1879 = *(int *)(v1645 + 24 * v1878 + 20);
        if (v1879 >> 30 != 3)
        {
          v1880 = (float64x2_t *)(v1671 + 32 * *(int *)(v1674 + 4 * v1878));
          v1881 = *v1880;
          v1882 = v1880[1];
          v1883 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1880, (int64x2_t)v1882);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1880, (int64x2_t)v1882);
          v1884 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1690[-1].f64[0]), _Q3, v1690[-1], 1);
          v1885 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1690->f64[0]), _Q3, *v1690, 1);
          v1886 = (float64x2_t *)(v2403 + 48 * v1878);
          *v1886 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1690[-2].f64[0]), _Q3, v1690[-2], 1);
          v1886[1] = v1884;
          v1886[2] = v1885;
          v1887 = 16 * *(int *)(v2497 + 4 * v1879);
          _Q5 = *(float64x2_t *)(v1649 + 16 * v1878);
          *(float64x2_t *)(v1677 + v1887) = vsubq_f64(*(float64x2_t *)(v1677 + v1887), vmlaq_laneq_f64(vmulq_n_f64(v1883, _Q5.f64[0]), _Q3, _Q5, 1));
          v1888 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1881.f64[0]), _Q3, v1881, 1);
          v1889 = (float64x2_t *)(v2441 + 32 * ((int)v1879 + *(_DWORD *)(v2433 + 4) * (int)v1879));
          v1890 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1883, v1882.f64[0]), _Q3, v1882, 1), v1889[1]);
          *v1889 = vaddq_f64(v1888, *v1889);
          v1889[1] = v1890;
        }
        v1692 = (float64x2_t)vzip1q_s64((int64x2_t)v1703, (int64x2_t)v1702);
        _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v1703, (int64x2_t)v1702);
        _D4 = v1706.f64[1];
        __asm { FMLA            D3, D4, V7.D[1] }
        v1687 = vsubq_f64(v1687, vmlaq_laneq_f64(vmulq_n_f64(v1692, v1706.f64[0]), _Q2, v1706, 1));
        v66 = vsubq_f64(v66, _Q3);
        v1695 = vmlaq_laneq_f64(vmulq_n_f64(v1692, v1703.f64[0]), _Q2, v1703, 1);
        _D4 = v1703.f64[1];
        __asm { FMLA            D3, D4, V7.D[1] }
        v1697 = vmlaq_laneq_f64(vmulq_n_f64(v1692, v1702.f64[0]), _Q2, v1702, 1);
        _D6 = v1702.f64[1];
        __asm { FMLA            D5, D6, V7.D[1] }
        v1699 = vmlaq_laneq_f64(vmulq_n_f64(v1692, _Q7.f64[0]), _Q2, _Q7, 1);
        _D6 = _Q7.f64[1];
        __asm { FMLA            D2, D6, V7.D[1] }
        v1688 = vaddq_f64(v1695, v1688);
        v1701 = (int64x2_t)vaddq_f64(_Q3, v67);
        _Q3 = vaddq_f64(v1697, (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v1685, 8uLL));
        v1686 = vaddq_f64(v1699, v1686);
        v1680 = vaddq_f64(_Q2, v1680);
        v67 = (float64x2_t)vzip1q_s64(v1701, (int64x2_t)_Q3);
        v1685 = (int64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)vaddq_f64(_Q5, (float64x2_t)vdupq_laneq_s64(v1685, 1)), 8uLL);
        ++v1691;
        v1690 += 3;
        if (!--v1689)
        {
          *v2296 = v1687;
          *(float64_t *)(v2299 + 8 * v2292) = v66.f64[0];
          *v1684 = v1688;
          v1684[1] = v67;
          v1684[2] = (float64x2_t)v1685;
          v1684[3] = v1686;
          *(float64_t *)(v2302 + 8 * v2283) = v1680.f64[0];
          goto LABEL_401;
        }
      }
    }
LABEL_402:
    *(_QWORD *)(v2236 + 24) |= 1uLL;
    *(_QWORD *)(v2233 + 24) |= 1uLL;
    *(_QWORD *)(v2211 + 24) |= 1uLL;
    *(_QWORD *)(v2213 + 24) |= 1uLL;
    *(_QWORD *)(v2215 + 24) |= 1uLL;
    *(_QWORD *)(v2217 + 24) |= 1uLL;
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a18 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a45 + 24) |= 1uLL;
    *(_QWORD *)(a43 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v1434 = v2191;
    v1433 = v2192;
    v1644 = v2185;
    v1432 = v2258;
  }
  v1891 = STACK[0xB78];
  v1892 = STACK[0xAE8];
  v2204 = STACK[0xAD8];
  v1893 = STACK[0xAD0];
  v2186 = STACK[0xAE8];
  v2188 = STACK[0xAD0];
  v2190 = STACK[0xAF8];
  v2184 = STACK[0xB78];
  if ((**(_BYTE **)(v1432 + 16) & 1) == 0)
  {
    v1894 = STACK[0xB80];
    v2606 = STACK[0xB80];
    if ((**(_BYTE **)(v1644 + 16) & 1) == 0)
      goto LABEL_405;
    goto LABEL_442;
  }
  v1895 = *(_QWORD *)(v2206 + 16);
  v1896 = _gc_buffer_get_extent();
  v1897 = _gc_buffer_get_extent();
  v1898 = _gc_buffer_get_extent();
  if (v1896 != 2 || v1897 != v1898)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(v1434 + 24) |= 1uLL;
  }
  v1899 = *(_QWORD *)(v1434 + 16);
  v2272 = *(_QWORD *)(v2208 + 16);
  v1900 = _gc_buffer_get_extent();
  v1901 = _gc_buffer_get_extent();
  v1902 = _gc_buffer_get_extent();
  v1903 = _gc_buffer_get_extent();
  if (v1900 != 2 || v1901 != 3 || v1902 != v1903)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2223 + 24) |= 1uLL;
  }
  v2607 = *(_QWORD *)(v2223 + 16);
  v1904 = _gc_buffer_get_extent();
  v1905 = _gc_buffer_get_extent();
  v1906 = _gc_buffer_get_extent();
  v1907 = _gc_buffer_get_extent();
  if (v1904 != 2 || v1905 != 1 || v1906 != v1907)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2219 + 24) |= 1uLL;
  }
  v1908 = *(_QWORD *)(v2219 + 16);
  v1909 = _gc_buffer_get_extent();
  v1910 = _gc_buffer_get_extent();
  v1911 = _gc_buffer_get_extent();
  v1912 = _gc_buffer_get_extent();
  if (v1909 != 2 || v1910 != 4 || v1911 != v1912)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2221 + 24) |= 1uLL;
  }
  v2418 = *(_QWORD *)(v2221 + 16);
  v1913 = _gc_buffer_get_extent();
  v1914 = _gc_buffer_get_extent();
  v1915 = _gc_buffer_get_extent();
  v1916 = _gc_buffer_get_extent();
  if (v1913 != 2 || v1914 != 6 || v1915 != v1916)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2225 + 24) |= 1uLL;
  }
  v2265 = v1895;
  v2426 = v1908;
  v2434 = v1899;
  v1917 = *(_QWORD *)(v2225 + 16);
  v1918 = _gc_buffer_get_extent();
  v1919 = _gc_buffer_get_extent();
  v1920 = _gc_buffer_get_extent();
  v1921 = _gc_buffer_get_extent();
  if (v1918 != 2 || v1919 != 2 || v1920 != v1921)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v1433 + 24) |= 1uLL;
  }
  v1922 = *(_QWORD *)(v1433 + 16);
  v1923 = *(int **)(v2194 + 16);
  v1924 = *(_QWORD *)(v2195 + 16);
  v1925 = *(_QWORD *)(v2197 + 16);
  v1926 = *(_QWORD *)(v2199 + 16);
  v2381 = *(_QWORD *)(v2201 + 16);
  v1927 = *(_QWORD *)(a14 + 16);
  v2263 = *(_QWORD *)(a15 + 16);
  v2376 = *(_QWORD *)(a18 + 16);
  v2261 = *(_QWORD *)(a19 + 16);
  v2370 = *(_QWORD *)(a20 + 16);
  v2259 = *(_QWORD *)(a21 + 16);
  v2364 = *(_QWORD *)(a22 + 16);
  v2255 = *(_QWORD *)(a23 + 16);
  v2358 = *(_QWORD *)(a41 + 16);
  v2353 = *(_QWORD *)(a42 + 16);
  v2348 = *(_QWORD *)(a43 + 16);
  v2344 = *(_QWORD *)(a44 + 16);
  v2340 = *(_QWORD *)(a45 + 16);
  v2335 = *(_QWORD *)(a46 + 16);
  v2329 = *(_QWORD *)(a56 + 16);
  v2323 = *(_QWORD *)(a57 + 16);
  v2320 = *(_QWORD *)(a58 + 16);
  v2253 = *(_QWORD *)(a59 + 16);
  v2252 = *(_QWORD *)(a66 + 16);
  v2250 = *(_QWORD *)(v2238 + 16);
  v2248 = *(_QWORD *)(v2215 + 16);
  v2249 = *(_QWORD *)(v2217 + 16);
  v1928 = *(_QWORD *)(v2211 + 16);
  v1929 = *(_QWORD *)(v2240 + 16);
  v2246 = *(_QWORD *)(v2237 + 16);
  v2247 = *(_QWORD *)(v2213 + 16);
  v2244 = *(_QWORD *)(v2239 + 16);
  v1930 = *(_QWORD *)(v2241 + 16);
  v2315 = *(_QWORD *)(v2236 + 16);
  v2309 = *(_QWORD *)(v2233 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v2303 >= 1)
  {
    v1932 = 0;
    v2242 = v2607 + 32;
    v2268 = v1923;
    do
    {
      if (v1932)
      {
        v1933 = v1923[v1932 - 1];
        v1934 = v1923[v1932];
        if (v1933 < (int)v1934)
          goto LABEL_437;
      }
      else
      {
        v1933 = 0;
        v1934 = *v1923;
        if ((int)v1934 > 0)
        {
LABEL_437:
          v1935 = v2315 + 72 * v1932;
          v1936 = *(float64x2_t *)(v1935 + 16);
          v2293 = (float64x2_t *)(v1935 + 16);
          v1937 = *(int64x2_t *)(v1935 + 32);
          v2289 = (int64x2_t *)(v1935 + 32);
          v1938 = (float64x2_t *)v1935;
          v1939 = v1938[3];
          v2284 = v1938 + 3;
          v2300 = (float64x2_t *)(v2309 + 24 * v1932);
          v1940 = *v2300;
          v2276 = 3 * v1932 + 2;
          v67.f64[0] = *(float64_t *)(v2309 + 8 * v2276);
          v2297 = v1938;
          v2608 = *v1938;
          v1931.f64[0] = *(float64_t *)(v2315 + 8 * (9 * v1932 + 8));
          v2466 = *(_DWORD *)(v2263 + 4);
          v2458 = *(_DWORD *)(v2261 + 4);
          v2450 = *(_DWORD *)(v2259 + 4);
          v2442 = *(_DWORD *)(v2255 + 4);
          v1941 = v1934 - v1933;
          v1942 = (float64x2_t *)(v2242 + 48 * v1933);
          v1943 = (int *)(v2272 + 4 * v1933);
          do
          {
            v2565 = v1940;
            v2582 = v1931;
            v1944 = v1942[-2];
            v1945 = v1942[-1];
            _Q5 = *v1942;
            _D21 = v1942[-2].f64[1];
            v2593 = v1942[-1].f64[1];
            v1948 = *v1943++;
            _D23 = _Q5.f64[1];
            v1950 = *(float64x2_t *)(v2434 + 16 * v1948);
            _D11 = *(_QWORD *)(v2434 + 16 * v1948 + 8);
            _Q8 = *(float64x2_t *)(v2426 + 16 * *(int *)(v1924 + 4 * v1948));
            __asm
            {
              FMLA            D0, D21, V8.D[1]
              FMLA            D1, D2, V8.D[1]
            }
            v1955 = (int *)(v2265 + 24 * v1948);
            __asm { FMLA            D2, D23, V8.D[1] }
            v1958 = *v1955;
            v1957 = v1955[1];
            v1959 = *(double *)(v1929 + 8 * v1958);
            __asm { FMLA            D3, D11, V8.D[1] }
            v1961 = v2249 + 24 * v1948;
            _D18 = *(_QWORD *)(v2426 + 16 * *(int *)(v1924 + 4 * v1948) + 8);
            v1963 = (float64x2_t *)(v2418 + ((uint64_t)*(int *)(v1925 + 4 * v1948) << 6));
            __asm { FMLA            D4, D18, V8.D[1] }
            v1966 = *v1963;
            v1965 = v1963[1];
            v1967 = v1963[2];
            v1968 = v1963[3];
            *((_QWORD *)&_Q0 + 1) = _D1;
            v1969 = 8 * ((int)v1958 + v2466 * (int)v1958);
            v1970 = *(double *)(v1927 + v1969);
            *(_QWORD *)(v1961 + 16) = _D2;
            _D2 = v1966.f64[1];
            __asm { FMLA            D18, D2, V8.D[1] }
            _D22 = v1965.f64[1];
            __asm { FMLA            D2, D22, V8.D[1] }
            v1975 = v1959 - _D3;
            _D22 = v1967.f64[1];
            __asm { FMLA            D17, D22, V8.D[1] }
            _Q22 = vmulq_f64(_Q8, v1968);
            *(double *)(v1929 + 8 * v1958) = v1975;
            _D3 = v1968.f64[1];
            __asm { FMLA            D22, D3, V8.D[1] }
            v1980 = (float64x2_t *)(v2376 + 32 * ((int)v1957 + v2458 * (int)v1958));
            v1981 = _D4 + v1970;
            _Q4 = v1980[1];
            v1983.f64[0] = _D18 + v1980->f64[0];
            v1984 = v1980->f64[1];
            v1985 = v1980[1].f64[1];
            *(_OWORD *)v1961 = _Q0;
            v1986 = v1917 + 96 * *(int *)(v1926 + 4 * v1948);
            v1988 = *(float64x2_t *)v1986;
            v1987 = *(float64x2_t *)(v1986 + 16);
            *(double *)&_Q0 = _D2 + v1984;
            v1990 = *(float64x2_t *)(v1986 + 32);
            v1989 = *(float64x2_t *)(v1986 + 48);
            v1992 = *(float64x2_t *)(v1986 + 64);
            v1991 = *(float64x2_t *)(v1986 + 80);
            _Q2.f64[0] = _D17 + _Q4.f64[0];
            _Q4.f64[0] = *(float64_t *)(v1986 + 8);
            __asm { FMLA            D3, D4, V8.D[1] }
            _D17 = *(_QWORD *)(v1986 + 24);
            _Q22.f64[0] = _Q22.f64[0] + v1985;
            __asm { FMLA            D4, D17, V8.D[1] }
            _D13 = *(_QWORD *)(v1986 + 40);
            __asm { FMLA            D17, D13, V8.D[1] }
            *(double *)(v1927 + v1969) = v1981;
            _D13 = v1989.f64[1];
            __asm { FMLA            D1, D13, V8.D[1] }
            *(_QWORD *)&v1983.f64[1] = _Q0;
            *(float64_t *)&_Q0 = v1992.f64[1];
            __asm { FMLA            D13, D0, V8.D[1] }
            _D14 = v1991.f64[1];
            _Q2.f64[1] = _Q22.f64[0];
            __asm { FMLA            D0, D14, V8.D[1] }
            v2002 = 6 * v1948 + 4;
            v2003 = *(int *)(v2265 + 4 * v2002);
            *v1980 = v1983;
            v1980[1] = _Q2;
            v2004 = (double *)(v2370 + 48 * ((int)v2003 + v2450 * (int)v1958));
            _Q2.f64[0] = _D3 + *v2004;
            v2005 = _Q4.f64[0] + v2004[1];
            _Q4.f64[0] = _D17 + v2004[2];
            v1983.f64[0] = _D13 + v2004[4];
            _Q2.f64[1] = v2005;
            _Q4.f64[1] = _D1 + v2004[3];
            v1983.f64[1] = *(double *)&_Q0 + v2004[5];
            v2006 = *(int *)(v2381 + 4 * v1948);
            *(float64x2_t *)v2004 = _Q2;
            *((float64x2_t *)v2004 + 1) = _Q4;
            *((float64x2_t *)v2004 + 2) = v1983;
            v2007 = (float64x2_t *)(v1922 + 32 * v2006);
            v2009 = *v2007;
            v2008 = v2007[1];
            v2010 = (float64x2_t)vzip1q_s64((int64x2_t)v1944, (int64x2_t)v1945);
            _Q1 = (float64x2_t)vzip2q_s64((int64x2_t)v1944, (int64x2_t)v1945);
            __asm { FMLA            D2, D11, V5.D[1] }
            _Q3 = vmlaq_laneq_f64(vmulq_n_f64(v2010, v1944.f64[0]), _Q1, v1944, 1);
            __asm { FMLA            D4, D21, V5.D[1] }
            v2013 = vmlaq_laneq_f64(vmulq_n_f64(v2010, v1945.f64[0]), _Q1, v1945, 1);
            _D11 = v2593;
            __asm { FMLA            D22, D11, V5.D[1] }
            v2530 = vmlaq_laneq_f64(vmulq_n_f64(v2010, v1950.f64[0]), _Q1, v1950, 1);
            v2015 = vmlaq_laneq_f64(vmulq_n_f64(v2010, _Q5.f64[0]), _Q1, _Q5, 1);
            __asm { FMLA            D1, D23, V5.D[1] }
            v2522 = _Q1;
            v2573 = vsubq_f64(v67, _Q2);
            v2608 = vaddq_f64(_Q3, v2608);
            v2557 = (int64x2_t)vaddq_f64(_Q4, v1936);
            v2548 = (int8x16_t)vaddq_f64(_Q22, (float64x2_t)vdupq_laneq_s64(v1937, 1));
            v2539 = (int64x2_t)vaddq_f64(v2013, (float64x2_t)vextq_s8((int8x16_t)v1936, (int8x16_t)v1937, 8uLL));
            _Q2.f64[0] = v2007->f64[1];
            __asm { FMLA            D1, D2, V8.D[1] }
            _Q3.f64[0] = v2007[1].f64[1];
            __asm { FMLA            D2, D3, V8.D[1] }
            v2016 = v1955[5];
            v2017 = (double *)(v2364 + 16 * ((int)v2016 + v2442 * (int)v1958));
            *(_QWORD *)&v2018.f64[0] = vdupq_laneq_s64((int64x2_t)v1967, 1).u64[0];
            v2594 = vaddq_f64(v2015, v1939);
            v2019 = (float64x2_t)vzip1q_s64((int64x2_t)v1967, (int64x2_t)v1968);
            v2020 = (float64x2_t)vzip1q_s64((int64x2_t)v1966, (int64x2_t)v1965);
            v2021 = (float64x2_t)vzip2q_s64((int64x2_t)v1966, (int64x2_t)v1965);
            v2018.f64[1] = v1968.f64[1];
            _Q2.f64[0] = _Q2.f64[0] + v2017[1];
            *v2017 = _Q1.f64[0] + *v2017;
            v2017[1] = _Q2.f64[0];
            v2022 = (float64x2_t *)(v2248 + 96 * v1948);
            *v2022 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1944.f64[0]), v2021, v1944, 1);
            v2022[1] = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1944.f64[0]), v2018, v1944, 1);
            v2022[2] = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1945.f64[0]), v2021, v1945, 1);
            v2022[3] = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1945.f64[0]), v2018, v1945, 1);
            v2022[4] = vmlaq_laneq_f64(vmulq_n_f64(v2020, _Q5.f64[0]), v2021, _Q5, 1);
            v2022[5] = vmlaq_laneq_f64(vmulq_n_f64(v2019, _Q5.f64[0]), v2018, _Q5, 1);
            v2023 = (float64x2_t *)(v2246 + 32 * v1957);
            v2024 = vsubq_f64(v2023[1], vmlaq_laneq_f64(vmulq_n_f64(v2019, v1950.f64[0]), v2018, v1950, 1));
            *v2023 = vsubq_f64(*v2023, vmlaq_laneq_f64(vmulq_n_f64(v2020, v1950.f64[0]), v2021, v1950, 1));
            v2023[1] = v2024;
            v2025 = (float64x2_t *)(v2358 + ((uint64_t)((int)v1957 + *(_DWORD *)(v2353 + 4) * (int)v1957) << 7));
            v2026 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1966.f64[0]), v2018, v1966, 1), v2025[1]);
            v2027 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1965.f64[0]), v2021, v1965, 1), v2025[2]);
            v2028 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1965.f64[0]), v2018, v1965, 1), v2025[3]);
            v2029 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1967.f64[0]), v2021, v1967, 1), v2025[4]);
            v2030 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1967.f64[0]), v2018, v1967, 1), v2025[5]);
            v2031 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1968.f64[0]), v2018, v1968, 1), v2025[7]);
            v2032 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1968.f64[0]), v2021, v1968, 1), v2025[6]);
            v2506 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1988.f64[0]), v2018, v1988, 1);
            v2514 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1988.f64[0]), v2021, v1988, 1);
            *v2025 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1966.f64[0]), v2021, v1966, 1), *v2025);
            v2025[1] = v2026;
            v2498 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1987.f64[0]), v2021, v1987, 1);
            v2033 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1987.f64[0]), v2018, v1987, 1);
            v2025[2] = v2027;
            v2025[3] = v2028;
            v2034 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1990.f64[0]), v2021, v1990, 1);
            v2035 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1990.f64[0]), v2018, v1990, 1);
            v2025[4] = v2029;
            v2025[5] = v2030;
            v2036 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1989.f64[0]), v2021, v1989, 1);
            v2037 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1992.f64[0]), v2021, v1992, 1);
            v2025[6] = v2032;
            v2025[7] = v2031;
            v2038 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1991.f64[0]), v2021, v1991, 1);
            v2039 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1989.f64[0]), v2018, v1989, 1);
            v2040 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v2008.f64[0]), v2021, v2008, 1);
            v2041 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1992.f64[0]), v2018, v1992, 1);
            v2042 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1991.f64[0]), v2018, v1991, 1);
            v2043 = (float64x2_t *)(v2340 + ((uint64_t)((int)v2016 + *(_DWORD *)(v2335 + 4) * (int)v1957) << 6));
            v2474 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v2009.f64[0]), v2021, v2009, 1), *v2043);
            v2044 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v2009.f64[0]), v2018, v2009, 1), v2043[1]);
            v2482 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v2008.f64[0]), v2018, v2008, 1), v2043[3]);
            *(_QWORD *)&v2018.f64[0] = vdupq_laneq_s64((int64x2_t)v1990, 1).u64[0];
            v2018.f64[1] = v1989.f64[1];
            v2045 = (float64x2_t)vzip1q_s64((int64x2_t)v1988, (int64x2_t)v1987);
            v2046 = (float64x2_t)vzip2q_s64((int64x2_t)v1988, (int64x2_t)v1987);
            v2047 = (float64x2_t)vzip1q_s64((int64x2_t)v1990, (int64x2_t)v1989);
            v2048 = (float64x2_t *)(v2247 + 144 * v1948);
            *v2048 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1944.f64[0]), v2046, v1944, 1);
            v2048[1] = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1944.f64[0]), v2018, v1944, 1);
            *(_QWORD *)&v2021.f64[0] = vdupq_laneq_s64((int64x2_t)v1992, 1).u64[0];
            v2021.f64[1] = v1991.f64[1];
            v2049 = (float64x2_t)vzip1q_s64((int64x2_t)v1992, (int64x2_t)v1991);
            v2048[2] = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1944.f64[0]), v2021, v1944, 1);
            v2048[3] = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1945.f64[0]), v2046, v1945, 1);
            v2048[4] = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1945.f64[0]), v2018, v1945, 1);
            v2048[5] = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1945.f64[0]), v2021, v1945, 1);
            v2048[6] = vmlaq_laneq_f64(vmulq_n_f64(v2045, _Q5.f64[0]), v2046, _Q5, 1);
            v2048[7] = vmlaq_laneq_f64(vmulq_n_f64(v2047, _Q5.f64[0]), v2018, _Q5, 1);
            v2048[8] = vmlaq_laneq_f64(vmulq_n_f64(v2049, _Q5.f64[0]), v2021, _Q5, 1);
            v2050 = (float64x2_t *)(v2244 + 48 * v2003);
            v2490 = v1950;
            v2051 = vsubq_f64(v2050[2], vmlaq_laneq_f64(vmulq_n_f64(v2049, v1950.f64[0]), v2021, v1950, 1));
            v2052 = vaddq_f64(v2040, v2043[2]);
            v2053 = vsubq_f64(v2050[1], vmlaq_laneq_f64(vmulq_n_f64(v2047, v1950.f64[0]), v2018, v1950, 1));
            *v2043 = v2474;
            v2043[1] = v2044;
            v2054 = vsubq_f64(*v2050, vmlaq_laneq_f64(vmulq_n_f64(v2045, v1950.f64[0]), v2046, v1950, 1));
            v2043[2] = v2052;
            v2043[3] = v2482;
            *v2050 = v2054;
            v2050[1] = v2053;
            v2050[2] = v2051;
            v2055 = (float64x2_t *)(v2348 + 192 * ((int)v2003 + *(_DWORD *)(v2344 + 4) * (int)v1957));
            v2056 = vaddq_f64(v2506, v2055[1]);
            v2057 = vaddq_f64(v2498, v2055[2]);
            v2058 = vaddq_f64(v2033, v2055[3]);
            v2059 = vaddq_f64(v2034, v2055[4]);
            v2060 = vaddq_f64(v2035, v2055[5]);
            v2061 = vaddq_f64(v2036, v2055[6]);
            v2062 = vaddq_f64(v2039, v2055[7]);
            v2063 = vaddq_f64(v2037, v2055[8]);
            v2064 = vaddq_f64(v2041, v2055[9]);
            v2065 = vaddq_f64(v2042, v2055[11]);
            v2066 = vaddq_f64(v2038, v2055[10]);
            *v2055 = vaddq_f64(v2514, *v2055);
            v2055[1] = v2056;
            v2055[2] = v2057;
            v2055[3] = v2058;
            v2067 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1988.f64[0]), v2046, v1988, 1);
            v2068 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1988.f64[0]), v2018, v1988, 1);
            v2069 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1988.f64[0]), v2021, v1988, 1);
            v2055[4] = v2059;
            v2055[5] = v2060;
            v2070 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1987.f64[0]), v2046, v1987, 1);
            v2055[6] = v2061;
            v2055[7] = v2062;
            v2071 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1987.f64[0]), v2018, v1987, 1);
            v2072 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1987.f64[0]), v2021, v1987, 1);
            v2073 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1990.f64[0]), v2046, v1990, 1);
            v2055[8] = v2063;
            v2055[9] = v2064;
            v2074 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1990.f64[0]), v2018, v1990, 1);
            v2075 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1990.f64[0]), v2021, v1990, 1);
            v2076 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1989.f64[0]), v2046, v1989, 1);
            v2077 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1989.f64[0]), v2018, v1989, 1);
            v2078 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1989.f64[0]), v2021, v1989, 1);
            v2079 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1992.f64[0]), v2046, v1992, 1);
            v2080 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1992.f64[0]), v2018, v1992, 1);
            v2081 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1992.f64[0]), v2021, v1992, 1);
            v2082 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1991.f64[0]), v2046, v1991, 1);
            v2083 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1991.f64[0]), v2018, v1991, 1);
            v2084 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1991.f64[0]), v2021, v1991, 1);
            v2055[10] = v2066;
            v2055[11] = v2065;
            v2085 = (float64x2_t *)(v2329 + 288 * ((int)v2003 + *(_DWORD *)(v2323 + 4) * (int)v2003));
            v2086 = vaddq_f64(v2069, v2085[2]);
            v2087 = vaddq_f64(v2068, v2085[1]);
            v2088 = vaddq_f64(v2072, v2085[5]);
            v2089 = vaddq_f64(v2071, v2085[4]);
            v2090 = vaddq_f64(v2070, v2085[3]);
            v2091 = vaddq_f64(v2075, v2085[8]);
            v2092 = vaddq_f64(v2074, v2085[7]);
            v2093 = vaddq_f64(v2073, v2085[6]);
            v2094 = vaddq_f64(v2078, v2085[11]);
            v2095 = vaddq_f64(v2077, v2085[10]);
            v2096 = vaddq_f64(v2076, v2085[9]);
            v2097 = v2085[15];
            v2098 = vaddq_f64(v2081, v2085[14]);
            v2099 = vaddq_f64(v2080, v2085[13]);
            v2100 = v2085[12];
            *v2085 = vaddq_f64(v2067, *v2085);
            v2085[1] = v2087;
            v2101 = vaddq_f64(v2084, v2085[17]);
            v2102 = vaddq_f64(v2083, v2085[16]);
            v67 = v2573;
            v2085[2] = v2086;
            v2085[3] = v2090;
            v2085[4] = v2089;
            v2085[5] = v2088;
            v2085[6] = v2093;
            v2085[7] = v2092;
            v2085[8] = v2091;
            v2085[9] = v2096;
            v2085[10] = v2095;
            v2085[11] = v2094;
            v2085[12] = vaddq_f64(v2079, v2100);
            v2085[13] = v2099;
            v2085[14] = v2098;
            v2085[15] = vaddq_f64(v2082, v2097);
            v2085[16] = v2102;
            v2085[17] = v2101;
            v1940 = vsubq_f64(v2565, v2530);
            v1931 = vaddq_f64(v2522, v2582);
            v2103 = (float64x2_t *)(v2320 + 96 * ((int)v2016 + *(_DWORD *)(v2253 + 4) * (int)v2003));
            v2104 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2049, v2009.f64[0]), v2021, v2009, 1), v2103[2]);
            v2105 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2047, v2009.f64[0]), v2018, v2009, 1), v2103[1]);
            v2106 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2049, v2008.f64[0]), v2021, v2008, 1), v2103[5]);
            v2107 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2047, v2008.f64[0]), v2018, v2008, 1), v2103[4]);
            v2108 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2045, v2008.f64[0]), v2046, v2008, 1), v2103[3]);
            v2109 = (float64x2_t)vzip1q_s64((int64x2_t)v2009, (int64x2_t)v2008);
            *v2103 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2045, v2009.f64[0]), v2046, v2009, 1), *v2103);
            v2103[1] = v2105;
            v2110 = (float64x2_t)vzip2q_s64((int64x2_t)v2009, (int64x2_t)v2008);
            v2103[2] = v2104;
            v2103[3] = v2108;
            v2111 = (float64x2_t *)(v1928 + 48 * v1948);
            *v2111 = vmlaq_laneq_f64(vmulq_n_f64(v2109, v1944.f64[0]), v2110, v1944, 1);
            v2103[4] = v2107;
            v2103[5] = v2106;
            v1939 = v2594;
            v2111[1] = vmlaq_laneq_f64(vmulq_n_f64(v2109, v1945.f64[0]), v2110, v1945, 1);
            *(float64x2_t *)(v1928 + 8 * v2002) = vmlaq_laneq_f64(vmulq_n_f64(v2109, _Q5.f64[0]), v2110, _Q5, 1);
            v1936 = (float64x2_t)vzip1q_s64(v2557, v2539);
            v1937 = (int64x2_t)vextq_s8((int8x16_t)v2539, v2548, 8uLL);
            *(float64x2_t *)(v1930 + 16 * v2016) = vsubq_f64(*(float64x2_t *)(v1930 + 16 * v2016), vmlaq_laneq_f64(vmulq_n_f64(v2109, v2490.f64[0]), v2110, v2490, 1));
            v2112 = (float64x2_t *)(v2252 + 32 * ((int)v2016 + *(_DWORD *)(v2250 + 4) * (int)v2016));
            v2113 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2109, v2008.f64[0]), v2110, v2008, 1), v2112[1]);
            *v2112 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2109, v2009.f64[0]), v2110, v2009, 1), *v2112);
            v2112[1] = v2113;
            v1942 += 3;
            --v1941;
          }
          while (v1941);
          *v2300 = v1940;
          *(float64_t *)(v2309 + 8 * v2276) = v2573.f64[0];
          *v2297 = v2608;
          *v2293 = v1936;
          *v2289 = v1937;
          *v2284 = v2594;
          *(float64_t *)(v2315 + 8 * (9 * v1932 + 8)) = v1931.f64[0];
        }
      }
      ++v1932;
      v1923 = v2268;
    }
    while (v1932 != v2303);
  }
  *(_QWORD *)(v2236 + 24) |= 1uLL;
  *(_QWORD *)(v2233 + 24) |= 1uLL;
  *(_QWORD *)(v2211 + 24) |= 1uLL;
  *(_QWORD *)(v2213 + 24) |= 1uLL;
  *(_QWORD *)(v2215 + 24) |= 1uLL;
  *(_QWORD *)(v2217 + 24) |= 1uLL;
  *(_QWORD *)(v2241 + 24) |= 1uLL;
  *(_QWORD *)(v2239 + 24) |= 1uLL;
  *(_QWORD *)(v2237 + 24) |= 1uLL;
  *(_QWORD *)(v2240 + 24) |= 1uLL;
  *(_QWORD *)(a22 + 24) |= 1uLL;
  *(_QWORD *)(a20 + 24) |= 1uLL;
  *(_QWORD *)(a66 + 24) |= 1uLL;
  *(_QWORD *)(a18 + 24) |= 1uLL;
  *(_QWORD *)(a58 + 24) |= 1uLL;
  *(_QWORD *)(a56 + 24) |= 1uLL;
  *(_QWORD *)(a45 + 24) |= 1uLL;
  *(_QWORD *)(a43 + 24) |= 1uLL;
  *(_QWORD *)(a41 + 24) |= 1uLL;
  *(_QWORD *)(a14 + 24) |= 1uLL;
  v74 = v2234;
  v1892 = v2186;
  v1893 = v2188;
  v1891 = v2184;
  v1894 = STACK[0xB80];
  v2606 = STACK[0xB80];
  if ((**(_BYTE **)(v2185 + 16) & 1) == 0)
  {
LABEL_405:
    if ((**(_BYTE **)(v1891 + 16) & 1) == 0)
      goto LABEL_406;
    goto LABEL_455;
  }
LABEL_442:
  v2114 = *(int **)(v2204 + 16);
  v2115 = _gc_buffer_get_extent();
  v2116 = _gc_buffer_get_extent();
  v2117 = _gc_buffer_get_extent();
  if (v2115 != 2 || v2116 != v2117)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(v1893 + 24) |= 1uLL;
  }
  v2118 = *(float64x2_t **)(v1893 + 16);
  v2119 = _gc_buffer_get_extent();
  v2120 = _gc_buffer_get_extent();
  v2121 = _gc_buffer_get_extent();
  v2122 = _gc_buffer_get_extent();
  if (v2119 != 2 || v2120 != 2 || v2121 != v2122)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v1892 + 24) |= 1uLL;
  }
  v2123 = *(_QWORD *)(v1892 + 16);
  v2124 = *(_QWORD *)(a10 + 16);
  v2125 = *(int **)(v2190 + 16);
  v2126 = *(_QWORD *)(a66 + 16);
  v2127 = *(_QWORD *)(v2238 + 16);
  v2128 = *(_QWORD *)(v2241 + 16);
  halide_copy_to_host();
  v1892 = v2186;
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v74 >= 1)
  {
    v2129 = v74;
    do
    {
      v2130 = *v2114;
      if (v2130 >> 30 != 3)
      {
        v2131 = 16 * *(int *)(v2124 + 4 * v2130);
        v2132 = (float64x2_t *)(v2123 + 32 * *v2125);
        v2133 = *v2132;
        v2134 = v2132[1];
        v2135 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2132, (int64x2_t)v2134);
        v2136 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2132, (int64x2_t)v2134);
        *(float64x2_t *)(v2128 + v2131) = vsubq_f64(*(float64x2_t *)(v2128 + v2131), vmlaq_laneq_f64(vmulq_n_f64(v2135, v2118->f64[0]), v2136, *v2118, 1));
        v2137 = (float64x2_t *)(v2126 + 32 * ((int)v2130 + *(_DWORD *)(v2127 + 4) * (int)v2130));
        v2138 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2135, v2133.f64[0]), v2136, v2133, 1), *v2137);
        v2139 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2135, v2134.f64[0]), v2136, v2134, 1), v2137[1]);
        *v2137 = v2138;
        v2137[1] = v2139;
      }
      ++v2125;
      ++v2118;
      v2114 += 2;
      --v2129;
    }
    while (v2129);
  }
  *(_QWORD *)(v2241 + 24) |= 1uLL;
  *(_QWORD *)(a66 + 24) |= 1uLL;
  v1893 = v2188;
  v1894 = v2606;
  if ((**(_BYTE **)(v2184 + 16) & 1) == 0)
  {
LABEL_406:
    if ((**(_BYTE **)(v1894 + 16) & 1) == 0)
      return 0;
    goto LABEL_464;
  }
LABEL_455:
  v2140 = *(int **)(v2204 + 16);
  v2141 = _gc_buffer_get_extent();
  v2142 = _gc_buffer_get_extent();
  v2143 = _gc_buffer_get_extent();
  if (v2141 != 2 || v2142 != v2143)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(v1893 + 24) |= 1uLL;
  }
  v2144 = *(float64x2_t **)(v1893 + 16);
  v2145 = _gc_buffer_get_extent();
  v2146 = _gc_buffer_get_extent();
  v2147 = _gc_buffer_get_extent();
  v2148 = _gc_buffer_get_extent();
  if (v2145 != 2 || v2146 != 2 || v2147 != v2148)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v1892 + 24) |= 1uLL;
  }
  v2149 = *(_QWORD *)(v1892 + 16);
  v2150 = *(int **)(v2190 + 16);
  v2151 = *(_QWORD *)(a66 + 16);
  v2152 = *(_QWORD *)(v2238 + 16);
  v2153 = *(_QWORD *)(v2241 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v74 >= 1)
  {
    do
    {
      v2171 = *v2140;
      v2172 = (float64x2_t *)(v2149 + 32 * *v2150);
      v2174 = *v2172;
      v2173 = v2172[1];
      v2175 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2172, (int64x2_t)v2173);
      v2176 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2172, (int64x2_t)v2173);
      *(float64x2_t *)(v2153 + 16 * v2171) = vsubq_f64(*(float64x2_t *)(v2153 + 16 * v2171), vmlaq_laneq_f64(vmulq_n_f64(v2175, v2144->f64[0]), v2176, *v2144, 1));
      if (v2171 >> 30 != 3)
      {
        v2177 = vmlaq_laneq_f64(vmulq_n_f64(v2175, v2174.f64[0]), v2176, v2174, 1);
        v2178 = (float64x2_t *)(v2151 + 32 * ((int)v2171 + *(_DWORD *)(v2152 + 4) * (int)v2171));
        v2179 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2175, v2173.f64[0]), v2176, v2173, 1), v2178[1]);
        *v2178 = vaddq_f64(v2177, *v2178);
        v2178[1] = v2179;
      }
      ++v2150;
      ++v2144;
      v2140 += 2;
      --v74;
    }
    while (v74);
  }
  *(_QWORD *)(v2241 + 24) |= 1uLL;
  *(_QWORD *)(a66 + 24) |= 1uLL;
  if ((**(_BYTE **)(v2606 + 16) & 1) != 0)
  {
LABEL_464:
    v2154 = *(int **)(a3 + 16);
    v2155 = _gc_buffer_get_extent();
    v2156 = _gc_buffer_get_extent();
    v2157 = _gc_buffer_get_extent();
    if (v2155 != 1 || v2156 != v2157)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(a2 + 24) |= 1uLL;
    }
    v2158 = *(double **)(a2 + 16);
    v2159 = _gc_buffer_get_extent();
    v2160 = _gc_buffer_get_extent();
    v2161 = _gc_buffer_get_extent();
    v2162 = _gc_buffer_get_extent();
    if (v2159 != 1 || v2160 != 1 || v2161 != v2162)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(a5 + 24) |= 1uLL;
    }
    v2163 = *(_QWORD *)(a5 + 16);
    v2164 = *(_QWORD *)(a6 + 16);
    v2165 = *(int **)(a12 + 16);
    v2166 = *(_QWORD *)(a14 + 16);
    v2167 = *(_QWORD *)(a15 + 16);
    v2168 = *(_QWORD *)(v2240 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v2169 = v2187;
    if ((int)v2187 >= 1)
    {
      do
      {
        v2180 = *v2154;
        if (v2180 >> 30 != 3)
        {
          v2181 = 8 * *(int *)(v2164 + 4 * v2180);
          v2182 = *(double *)(v2163 + 8 * *v2165);
          *(double *)(v2168 + v2181) = *(double *)(v2168 + v2181) - v2182 * *v2158;
          v2183 = 8 * ((int)v2180 + *(_DWORD *)(v2167 + 4) * (int)v2180);
          *(double *)(v2166 + v2183) = *(double *)(v2166 + v2183) + v2182 * v2182;
        }
        ++v2158;
        ++v2165;
        v2154 += 2;
        --v2169;
      }
      while (v2169);
    }
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
  }
  return 0;
}

uint64_t sub_2396959E8(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_OWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 104);
  v3 = *(_OWORD *)(a1 + 120);
  sub_23968B260(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 1416), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v1, *((uint64_t *)&v1 + 1), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v5, v2, *((uint64_t *)&v2 + 1), v3, *((uint64_t *)&v3 + 1), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    v6,
    v7,
    v8,
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v9,
    v10,
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    v11,
    v12,
    v13,
    v14,
    v15,
    v16,
    *(_QWORD *)(a1 + 320),
    *(_QWORD *)(a1 + 328),
    *(_QWORD *)(a1 + 336),
    *(_QWORD *)(a1 + 344),
    *(_QWORD *)(a1 + 352),
    *(_QWORD *)(a1 + 360),
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    *(_QWORD *)(a1 + 440),
    *(_QWORD *)(a1 + 448),
    *(_QWORD *)(a1 + 456),
    *(_QWORD *)(a1 + 464),
    v26,
    v27,
    v28,
    v29);
  return 0;
}

uint64_t sub_239695FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  int64x2_t *v91;
  int8x16_t v92;
  uint64_t v93;
  double v95;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double v107;
  double v108;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  double v123;
  double v124;
  uint64_t v125;
  double *v126;
  uint64_t v127;
  double v134;
  double v137;
  double v138;
  double *v139;
  float64x2_t *v140;
  double v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  double *v149;
  uint64_t v152;
  float64x2_t *v153;
  float64x2_t *v154;
  float64x2_t v155;
  float64x2_t v157;
  float64x2_t v159;
  double v161;
  double v162;
  float64x2_t v163;
  float64x2_t v166;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  float64x2_t v176;
  int64x2_t v177;
  float64x2_t *v178;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  int64x2_t v194;
  float64x2_t v195;
  int64x2_t v196;
  float64x2_t v197;
  int64x2_t v198;
  uint64_t v199;
  float64x2_t v200;
  int64x2_t v201;
  float64x2_t *v202;
  float64x2_t v206;
  int64x2_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  float64x2_t v211;
  int64x2_t v212;
  float64x2_t *v213;
  double v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  int64x2_t v221;
  float64x2_t v222;
  uint64_t v223;
  float64x2_t *v224;
  float64x2_t *v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  int *v245;
  uint64_t v246;
  float64x2_t *v247;
  float64x2_t v248;
  float64x2_t *v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  float64x2_t *v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t *v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  uint64_t v305;
  float64x2_t *v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  int *v312;
  uint64_t v313;
  unsigned int v314;
  float64x2_t *v315;
  float64x2_t *v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  double *v338;
  double v344;
  int *v350;
  uint64_t i;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  double *v355;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  double *v363;
  uint64_t v364;
  double v369;
  double v374;
  __int128 v375;
  double *v376;
  uint64_t v377;
  double v384;
  double v391;
  __int128 v392;
  double v393;
  __int128 v394;
  double *v395;
  uint64_t v396;
  double v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  float64x2_t *v405;
  float64x2_t *v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  double v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  int *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  float64x2_t *v424;
  float64x2_t v425;
  float64x2_t *v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  float64x2_t *v442;
  float64x2_t v443;
  float64x2_t *v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t *v463;
  float64x2_t v464;
  float64x2_t *v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  uint64_t v471;
  uint64_t v472;
  float64x2_t *v473;
  float64x2_t *v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  double v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  int *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  float64x2_t *v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t *v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  unsigned int v544;
  float64x2_t *v545;
  float64x2_t v546;
  float64x2_t *v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  uint64_t v555;
  uint64_t v556;
  float64x2_t *v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  int *v563;
  uint64_t v564;
  uint64_t v565;
  float64x2_t *v566;
  float64x2_t *v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  int64x2_t v584;
  float64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  uint64_t v588;
  int8x16_t *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  double *v593;
  double v597;
  double v598;
  int *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  double *v609;
  uint64_t v610;
  double v615;
  double v620;
  __int128 v621;
  double *v622;
  uint64_t v623;
  double v630;
  double v633;
  __int128 v634;
  double v635;
  double *v636;
  uint64_t v637;
  double v642;
  uint64_t v643;
  unsigned int v644;
  uint64_t v645;
  double *v646;
  uint64_t v649;
  float64x2_t *v650;
  float64x2_t *v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  int v664;
  int v665;
  int *v666;
  uint64_t v667;
  uint64_t v668;
  float64x2_t *v669;
  float64x2_t *v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t *v702;
  float64x2_t v703;
  float64x2_t *v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  uint64_t v710;
  unsigned int v711;
  float64x2_t *v712;
  float64x2_t v713;
  float64x2_t *v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  uint64_t v726;
  float64x2_t *v727;
  float64x2_t *v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  int v748;
  int *v749;
  uint64_t v750;
  float64x2_t *v751;
  float64x2_t v752;
  float64x2_t *v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unsigned int v764;
  float64x2_t *v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t *v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  uint64_t v809;
  float64x2_t *v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  int *v816;
  uint64_t v817;
  unsigned int v818;
  float64x2_t *v819;
  float64x2_t *v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  int v839;
  float64x2_t *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  double *v845;
  double v851;
  int *v857;
  uint64_t j;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  double *v862;
  uint64_t v865;
  unsigned int v866;
  uint64_t v867;
  unsigned int v868;
  unsigned int v869;
  double *v870;
  uint64_t v871;
  double v876;
  double *v877;
  uint64_t v878;
  double v885;
  double v892;
  __int128 v893;
  double v894;
  double *v895;
  uint64_t v896;
  double v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  float64x2_t *v905;
  uint64_t v906;
  double v910;
  float64x2_t v911;
  float64x2_t v912;
  double v916;
  float64x2_t v917;
  float64x2_t v920;
  float64x2_t v924;
  int *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  float64x2_t v931;
  int64x2_t v932;
  float64x2_t *v933;
  double v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  uint64_t v943;
  unsigned int v944;
  unsigned int v945;
  uint64_t v946;
  float64x2_t v947;
  int64x2_t v948;
  float64x2_t v949;
  int64x2_t v950;
  float64x2_t v951;
  int64x2_t v952;
  float64x2_t *v953;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  int64x2_t v970;
  float64x2_t v971;
  int64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  int64x2_t v975;
  int64x2_t v976;
  uint64_t v977;
  float64x2_t v978;
  int64x2_t v979;
  float64x2_t *v980;
  float64x2_t v984;
  uint64_t v985;
  uint64_t v986;
  float64x2_t *v987;
  float64x2_t *v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  double v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  int *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  float64x2_t *v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t *v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  unsigned int v1055;
  float64x2_t *v1056;
  float64x2_t v1057;
  float64x2_t *v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  float64x2_t *v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  int *v1073;
  uint64_t v1074;
  uint64_t v1075;
  float64x2_t *v1076;
  float64x2_t *v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  unint64_t v1098;
  unint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  unint64_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  unint64_t v1105;
  int *v1106;
  uint64_t v1107;
  int *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  int *v1140;
  uint64_t v1141;
  int *v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  float64x2_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  double v1153;
  uint64_t v1154;
  double v1155;
  uint64_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  double v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  int v1169;
  int *v1170;
  int v1171;
  int *v1172;
  int v1173;
  uint64_t v1174;
  int v1175;
  uint64_t v1176;
  int v1177;
  uint64_t v1178;
  int v1179;
  uint64_t v1180;
  int v1181;
  float64x2_t *v1182;
  uint64_t v1183;
  float64x2_t *v1184;
  int v1185;
  uint64_t v1186;
  double v1187;
  uint64_t v1188;
  __int128 v1189;
  float64x2_t *v1190;
  uint64_t v1191;
  float64x2_t *v1192;
  __int128 v1193;
  float64x2_t *v1194;
  uint64_t v1195;
  float64x2_t *v1196;
  uint64_t v1197;
  uint64_t v1198;
  float64x2_t *v1199;
  uint64_t v1200;
  uint64_t v1201;
  float64x2_t *v1202;
  uint64_t v1203;
  uint64_t v1204;
  double v1205;
  uint64_t v1206;
  float64x2_t *v1207;
  uint64_t v1208;
  uint64_t v1209;
  float64x2_t v1210;
  uint64_t v1211;
  float64x2_t v1212;
  uint64_t v1213;
  double v1214;
  uint64_t v1215;
  double v1216;
  uint64_t v1217;
  float64x2_t v1218;
  uint64_t v1219;
  float64x2_t v1220;
  uint64_t v1221;
  float64x2_t v1222;
  uint64_t v1223;
  float64x2_t v1224;
  uint64_t v1225;
  float64x2_t v1226;
  uint64_t v1227;
  float64x2_t v1228;
  uint64_t v1229;
  float64x2_t v1230;
  uint64_t v1231;
  float64x2_t v1232;
  uint64_t v1233;
  float64x2_t v1234;
  uint64_t v1235;
  float64x2_t v1236;
  uint64_t v1237;
  float64x2_t v1238;
  uint64_t v1239;
  float64x2_t v1240;
  uint64_t v1241;
  float64x2_t v1242;
  uint64_t v1243;
  float64x2_t v1244;
  uint64_t v1245;
  float64x2_t v1246;
  uint64_t v1247;
  float64x2_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int *v1254;
  uint64_t v1255;
  int *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  int8x16_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;

  v1082 = STACK[0x788];
  v69 = STACK[0x780];
  v1087 = STACK[0x760];
  v1088 = STACK[0x768];
  v1089 = STACK[0x750];
  v1090 = STACK[0x740];
  v1085 = STACK[0x730];
  v1086 = STACK[0x758];
  v1100 = STACK[0x728];
  v1101 = STACK[0x720];
  v1102 = STACK[0x718];
  v1103 = STACK[0x710];
  v1098 = STACK[0x708];
  v1099 = STACK[0x700];
  v1093 = STACK[0x6E8];
  v1094 = STACK[0x6F0];
  v1092 = STACK[0x6E0];
  v1104 = STACK[0x6F8];
  v1084 = STACK[0x770];
  v70 = STACK[0x778];
  v71 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v1119 = v71[2];
  v1120 = *v71;
  if ((**(_BYTE **)(v70 + 16) & 1) == 0)
  {
    v1105 = STACK[0x790];
    if ((**(_BYTE **)(v69 + 16) & 1) == 0)
      goto LABEL_3;
    goto LABEL_32;
  }
  v1081 = v69;
  v72 = *(_QWORD *)(a2 + 16);
  v1203 = *(_QWORD *)(a4 + 16);
  v1106 = *(int **)(a6 + 16);
  v1276 = *(_QWORD *)(a12 + 16);
  v1272 = *(_QWORD *)(a13 + 16);
  v73 = *(_QWORD *)(a14 + 16);
  v1123 = *(_QWORD *)(a15 + 16);
  v74 = *(_QWORD *)(a18 + 16);
  v1121 = *(_QWORD *)(a19 + 16);
  v75 = *(_QWORD *)(a20 + 16);
  v1143 = *(_QWORD *)(a25 + 16);
  v1268 = *(_QWORD *)(a26 + 16);
  v76 = *(_QWORD *)(a29 + 16);
  v1115 = *(_QWORD *)(a30 + 16);
  v1117 = *(_QWORD *)(a21 + 16);
  v77 = *(_QWORD *)(a31 + 16);
  v1139 = *(_QWORD *)(a54 + 16);
  v1264 = *(_QWORD *)(a55 + 16);
  v78 = *(_QWORD *)(a56 + 16);
  v1111 = *(_QWORD *)(a57 + 16);
  v1113 = *(_QWORD *)(a32 + 16);
  v1137 = *(_QWORD *)(a67 + 16);
  v1135 = *(_QWORD *)(a68 + 16);
  v1280 = *(_QWORD *)(a69 + 16);
  v79 = *(_QWORD *)(v1092 + 16);
  v80 = *(_QWORD *)(v1093 + 16);
  v81 = *(_QWORD *)(v1094 + 16);
  v1133 = *(_QWORD *)(v1104 + 16);
  v1131 = *(_QWORD *)(v1099 + 16);
  v1129 = *(_QWORD *)(v1103 + 16);
  v1127 = *(_QWORD *)(v1102 + 16);
  v1107 = *(_QWORD *)(v1100 + 16);
  v1109 = *(_QWORD *)(v1101 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v1120 >= 1)
  {
    v84 = 0;
    do
    {
      if (v84)
      {
        v85 = v1106[v84 - 1];
        v1125 = v84;
        v1208 = v1106[v84];
        if (v85 < (int)v1208)
          goto LABEL_13;
      }
      else
      {
        v85 = 0;
        v1125 = 0;
        v1208 = *v1106;
        if ((int)v1208 > 0)
        {
LABEL_13:
          v86 = v1109 + 72 * v1125;
          v87 = *(int64x2_t *)v86;
          v88 = *(float64x2_t *)(v86 + 16);
          _Q22 = *(int64x2_t *)(v86 + 32);
          v89 = *(int64x2_t *)(v86 + 48);
          *(_QWORD *)&v82 = *(_QWORD *)(v86 + 64);
          v91 = (int64x2_t *)(v1107 + 24 * v1125);
          v92 = *(int8x16_t *)v91;
          *(_QWORD *)&v83 = v91[1].i64[0];
          v93 = v85;
          v1185 = *(_DWORD *)(v1123 + 4);
          v1181 = *(_DWORD *)(v1121 + 4);
          v1177 = *(_DWORD *)(v1117 + 4);
          v1173 = *(_DWORD *)(v1115 + 4);
          v1169 = *(_DWORD *)(v1113 + 4);
          v1165 = *(_DWORD *)(v1111 + 4);
          _D25 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
          *(_QWORD *)&v95 = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL).u64[0];
          _D12 = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
          _Q13 = (float64x2_t)vextq_s8(v92, v92, 8uLL);
          v1244 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88.f64[0], 0);
          v1248 = (float64x2_t)vdupq_laneq_s64(v87, 1);
          v1236 = (float64x2_t)vdupq_laneq_s64(_Q22, 1);
          v1240 = (float64x2_t)vdupq_lane_s64(_Q22.i64[0], 0);
          v1228 = (float64x2_t)vdupq_lane_s64(v82, 0);
          v1232 = (float64x2_t)vdupq_laneq_s64(v89, 1);
          v1260 = v1208 - v85;
          v1256 = (int *)(v1203 + 4 * v85);
          v1220 = (float64x2_t)vdupq_lane_s64(v83, 0);
          v1224 = (float64x2_t)vdupq_laneq_s64(*v91, 1);
          v1212 = v88;
          v1216 = *(double *)v87.i64;
          v1193 = v82;
          v1197 = _Q22.i64[0];
          v1189 = v83;
          v1162 = _D25;
          v1151 = _D12;
          v1155 = v95;
          v1147 = _Q13;
          do
          {
            v98 = *(int *)(v1203 + 4 * v93);
            v99 = *(int *)(v72 + 24 * v98);
            v100 = (double *)(v1280 + 24 * v98);
            _Q4 = *(_OWORD *)v100;
            __asm { FMLA            D6, D25, V4.D[1] }
            v107 = v100[2];
            v108 = _D6 + v107 * v88.f64[0];
            __asm { FMLA            D6, D22, V4.D[1] }
            _D29 = _D6 + v107 * v95;
            __asm { FMLA            D6, D12, V4.D[1] }
            _D30 = _D6 + v107 * *(double *)&v82;
            *(double *)(v1133 + 8 * v99) = *(double *)(v1133 + 8 * v99)
                                         - (v108 * *(double *)v92.i64
                                          + _D29 * _Q13.f64[0]
                                          + _D30 * *(double *)&v83);
            v1252 = 6 * v98;
            v113 = v1256;
            v114 = v1260;
            do
            {
              v146 = *v113;
              v147 = *(_DWORD *)(v72 + 24 * v146);
              if (v99 <= v147)
              {
                v148 = 8 * (int)(v147 + *(_DWORD *)(v1272 + 4) * v99);
                v149 = (double *)(v1280 + 24 * v146);
                _Q4 = *(_OWORD *)v149;
                __asm { FMLA            D6, D29, V4.D[1] }
                *(double *)(v1276 + v148) = *(double *)(v1276 + v148) - (_D6 + _D30 * v149[2]);
              }
              v115 = 6 * v146;
              v116 = (double *)(v73 + 24 * (v1185 * (int)v99 + *(_DWORD *)(v72 + ((24 * v146) | 4))));
              v117 = v79 + 72 * v146;
              _Q6 = *(_OWORD *)(v117 + 16);
              _Q7 = *(_OWORD *)(v117 + 32);
              _Q16 = *(_OWORD *)(v117 + 48);
              __asm
              {
                FMLA            D17, D29, V6.D[1]
                FMLA            D4, D30, V16.D[1]
                FMLA            D6, D29, V7.D[1]
              }
              *(double *)&_Q7 = *v116 - vmlad_n_f64(_D17, _D30, *(double *)&_Q16);
              v123 = v116[1] - _D4;
              v124 = v116[2] - (*(double *)&_Q6 + _D30 * *(double *)(v117 + 64));
              *((double *)&_Q7 + 1) = v123;
              *(_OWORD *)v116 = _Q7;
              v116[2] = v124;
              v125 = 6 * v146 + 4;
              v126 = (double *)(v74 + 48 * (v1181 * (int)v99 + *(_DWORD *)(v72 + 4 * v125)));
              v127 = v80 + 144 * v146;
              _Q18 = *(_OWORD *)(v127 + 48);
              _Q19 = *(_OWORD *)(v127 + 64);
              _Q31 = *(_OWORD *)(v127 + 80);
              _Q8 = *(_OWORD *)(v127 + 96);
              _Q9 = *(_OWORD *)(v127 + 112);
              _Q10 = *(_OWORD *)(v127 + 128);
              v134 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, *(double *)v127), _D29, *(double *)&_Q18), _D30, *(double *)&_Q8);
              __asm
              {
                FMLA            D7, D29, V18.D[1]
                FMLA            D7, D30, V8.D[1]
              }
              *(double *)&_Q18 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, *(double *)(v127 + 16)), _D29, *(double *)&_Q19), _D30, *(double *)&_Q9);
              __asm
              {
                FMLA            D16, D29, V19.D[1]
                FMLA            D16, D30, V9.D[1]
              }
              *(double *)&_Q19 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, *(double *)(v127 + 32)), _D29, *(double *)&_Q31), _D30, *(double *)&_Q10);
              __asm
              {
                FMLA            D17, D29, V31.D[1]
                FMLA            D17, D30, V10.D[1]
              }
              *(double *)&_Q31 = *v126 - v134;
              v137 = v126[1] - *(double *)&_Q7;
              *(double *)&_Q7 = v126[2] - *(double *)&_Q18;
              v138 = v126[3] - *(double *)&_Q16;
              *(double *)&_Q16 = v126[4] - *(double *)&_Q19;
              *((double *)&_Q31 + 1) = v137;
              *((double *)&_Q7 + 1) = v138;
              *((double *)&_Q16 + 1) = v126[5] - _D17;
              *(_OWORD *)v126 = _Q31;
              *((_OWORD *)v126 + 1) = _Q7;
              *((_OWORD *)v126 + 2) = _Q16;
              v139 = (double *)(v75 + 16 * (v1177 * (int)v99 + *(_DWORD *)(4 * v115 + v72 + 20)));
              v140 = (float64x2_t *)(v81 + 8 * v115);
              _Q4 = v140[1];
              _Q6 = *(_OWORD *)(v81 + 8 * v125);
              __asm
              {
                FMLA            D2, D29, V4.D[1]
                FMLA            D2, D30, V6.D[1]
              }
              v145 = v139[1] - _D2;
              *v139 = *v139
                    - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, v140->f64[0]), _D29, _Q4.f64[0]), _D30, *(double *)&_Q6);
              v139[1] = v145;
              ++v113;
              --v114;
            }
            while (v114);
            v152 = *(int *)(v72 + ((24 * v98) | 4));
            v153 = (float64x2_t *)(v1131 + 24 * v152);
            _Q4.f64[0] = v153[1].f64[0];
            v154 = (float64x2_t *)(v79 + 72 * v98);
            v155 = v154[1];
            _Q16 = v154[2];
            v157 = v154[3];
            _Q18 = (float64x2_t)vextq_s8((int8x16_t)v155, (int8x16_t)_Q16, 8uLL);
            v159 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v154, *(double *)v87.i64), v1248, _Q18), v1244, v157);
            __asm { FMLA            D19, D25, V16.D[1] }
            v161 = v154[4].f64[0];
            v162 = _D19 + v161 * v88.f64[0];
            v163 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v154, v88, 1), v1240, _Q18), v1236, v157);
            __asm { FMLA            D19, D22, V16.D[1] }
            _D31 = _D19 + v161 * v95;
            v166 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v154, *(double *)v89.i64), v1232, _Q18), v1228, v157);
            __asm { FMLA            D6, D12, V16.D[1] }
            _D9 = _D6 + v161 * *(double *)&v82;
            v155.f64[0] = v162 * *(double *)v92.i64 + _D31 * _Q13.f64[0] + _D9 * *(double *)&v83;
            *v153 = vsubq_f64(*v153, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v159, *(double *)v92.i64), v1224, v163), v1220, v166));
            *(_QWORD *)&v153[1].f64[0] = *(_OWORD *)&vsubq_f64(_Q4, v155);
            v169 = v1256;
            v170 = v1260;
            do
            {
              v208 = *v169;
              v209 = *(_DWORD *)(v72 + 24 * v208 + 4);
              if (v152 <= v209)
              {
                v210 = v1143 + 72 * (int)(v209 + *(_DWORD *)(v1268 + 4) * v152);
                v211 = *(float64x2_t *)(v210 + 16);
                v212 = *(int64x2_t *)(v210 + 32);
                _Q16.f64[0] = *(float64_t *)(v210 + 64);
                v213 = (float64x2_t *)(v79 + 72 * v208);
                _Q17 = *v213;
                _Q18 = v213[1];
                _Q19 = v213[2];
                _Q10 = v213[3];
                v217 = v213[4].f64[0];
                v218 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159, v213->f64[0]), v163, _Q18, 1), v166, _Q10.f64[0]);
                __asm { FMLA            D13, D31, V18.D[1] }
                _Q13.f64[0] = vmlad_n_f64(_Q13.f64[0], _D9, _Q10.f64[0]);
                v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v159, *v213, 1), v163, _Q19.f64[0]), v166, _Q10, 1);
                __asm { FMLA            D17, D9, V10.D[1] }
                v220 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159, _Q18.f64[0]), v163, _Q19, 1), v166, v217);
                __asm { FMLA            D18, D31, V19.D[1] }
                _Q18.f64[0] = _Q18.f64[0] + _D9 * v217;
                v221 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v212, 8uLL), v219);
                v222 = vsubq_f64(*(float64x2_t *)(v210 + 48), v220);
                *(float64x2_t *)v210 = vsubq_f64(*(float64x2_t *)v210, v218);
                *(int64x2_t *)(v210 + 16) = vzip1q_s64((int64x2_t)vsubq_f64(v211, _Q13), v221);
                *(int8x16_t *)(v210 + 32) = vextq_s8((int8x16_t)v221, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v212, 1), _Q17), 8uLL);
                *(float64x2_t *)(v210 + 48) = v222;
                *(_QWORD *)(v210 + 64) = *(_OWORD *)&vsubq_f64(_Q16, _Q18);
              }
              v171 = 6 * v208 + 4;
              v172 = v76 + 144 * (v1173 * (int)v152 + *(_DWORD *)(v72 + 4 * v171));
              v173 = *(float64x2_t *)(v172 + 16);
              v174 = *(int64x2_t *)(v172 + 32);
              v176 = *(float64x2_t *)(v172 + 64);
              v175 = *(int64x2_t *)(v172 + 80);
              _Q13 = *(float64x2_t *)(v172 + 112);
              v177 = *(int64x2_t *)(v172 + 128);
              v178 = (float64x2_t *)(v80 + 144 * v208);
              _Q20 = *v178;
              _Q21 = v178[1];
              _Q17 = v178[2];
              _Q22 = v178[3];
              _Q23 = v178[4];
              _Q19 = v178[5];
              _Q24 = v178[6];
              _Q25 = v178[7];
              _Q2 = v178[8];
              v188 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v178->f64[0]), v163, _Q22.f64[0]), v166, _Q24.f64[0]);
              _Q18.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, v178->f64[0]), _D31, _Q22.f64[0]), _D9, _Q24.f64[0]);
              v189 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, *v178, 1), v163, _Q22, 1), v166, _Q24, 1);
              __asm
              {
                FMLA            D20, D31, V22.D[1]
                FMLA            D20, D9, V24.D[1]
              }
              v190 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, _Q21.f64[0]), v163, _Q23.f64[0]), v166, _Q25.f64[0]);
              _Q24.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, _Q21.f64[0]), _D31, _Q23.f64[0]), _D9, _Q25.f64[0]);
              v191 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, _Q21, 1), v163, _Q23, 1), v166, _Q25, 1);
              __asm
              {
                FMLA            D21, D31, V23.D[1]
                FMLA            D21, D9, V25.D[1]
              }
              v192 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, _Q17.f64[0]), v163, _Q19.f64[0]), v166, _Q2.f64[0]);
              _Q25.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, _Q17.f64[0]), _D31, _Q19.f64[0]), _D9, _Q2.f64[0]);
              v193 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, _Q17, 1), v163, _Q19, 1), v166, _Q2, 1);
              __asm
              {
                FMLA            D17, D31, V19.D[1]
                FMLA            D17, D9, V2.D[1]
              }
              v194 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v173, (int8x16_t)v174, 8uLL), v189);
              v195 = vsubq_f64(*(float64x2_t *)(v172 + 48), v190);
              v196 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v176, (int8x16_t)v175, 8uLL), v191);
              v197 = vsubq_f64(*(float64x2_t *)(v172 + 96), v192);
              v198 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)_Q13, (int8x16_t)v177, 8uLL), v193);
              *(float64x2_t *)v172 = vsubq_f64(*(float64x2_t *)v172, v188);
              *(int64x2_t *)(v172 + 16) = vzip1q_s64((int64x2_t)vsubq_f64(v173, _Q18), v194);
              *(int8x16_t *)(v172 + 32) = vextq_s8((int8x16_t)v194, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v174, 1), _Q20), 8uLL);
              *(float64x2_t *)(v172 + 48) = v195;
              *(int64x2_t *)(v172 + 64) = vzip1q_s64((int64x2_t)vsubq_f64(v176, _Q24), v196);
              *(int8x16_t *)(v172 + 80) = vextq_s8((int8x16_t)v196, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v175, 1), _Q21), 8uLL);
              *(float64x2_t *)(v172 + 96) = v197;
              *(int64x2_t *)(v172 + 112) = vzip1q_s64((int64x2_t)vsubq_f64(_Q13, _Q25), v198);
              *(int8x16_t *)(v172 + 128) = vextq_s8((int8x16_t)v198, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v177, 1), _Q17), 8uLL);
              v199 = v77 + 48 * (v1169 * (int)v152 + *(_DWORD *)(v72 + 24 * v208 + 20));
              v200 = *(float64x2_t *)(v199 + 16);
              v201 = *(int64x2_t *)(v199 + 32);
              v202 = (float64x2_t *)(v81 + 48 * v208);
              _Q4 = *v202;
              _Q6 = v202[1];
              _Q7 = *(float64x2_t *)(v81 + 8 * v171);
              _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v202->f64[0]), v163, _Q6.f64[0]), v166, _Q7.f64[0]);
              _Q17.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, v202->f64[0]), _D31, _Q6.f64[0]), _D9, _Q7.f64[0]);
              _Q18 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, *v202, 1), v163, _Q6, 1), v166, _Q7, 1);
              __asm
              {
                FMLA            D4, D31, V6.D[1]
                FMLA            D4, D9, V7.D[1]
              }
              v206 = (float64x2_t)vdupq_laneq_s64(v201, 1);
              v207 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v201, 8uLL), _Q18);
              *(float64x2_t *)v199 = vsubq_f64(*(float64x2_t *)v199, _Q16);
              *(int64x2_t *)(v199 + 16) = vzip1q_s64((int64x2_t)vsubq_f64(v200, _Q17), v207);
              *(int8x16_t *)(v199 + 32) = vextq_s8((int8x16_t)v207, (int8x16_t)vsubq_f64(v206, _Q4), 8uLL);
              ++v169;
              --v170;
            }
            while (v170);
            v223 = *(int *)(v72 + 4 * (v1252 + 4));
            v224 = (float64x2_t *)(v1129 + 48 * v223);
            v225 = (float64x2_t *)(v80 + 144 * v98);
            v226 = v225[1];
            v227 = v225[2];
            v228 = v225[3];
            v230 = v225[4];
            v229 = v225[5];
            v231 = v225[6];
            v232 = v225[7];
            v233 = v225[8];
            v234 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v225, v1216), v1248, v228), v1244, v231);
            v235 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, v1216), v1248, v230), v1244, v232);
            v236 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v227, v1216), v1248, v229), v1244, v233);
            v237 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v225, v1212, 1), v1240, v228), v1236, v231);
            v238 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v226, v1212, 1), v1240, v230), v1236, v232);
            v239 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v227, v1212, 1), v1240, v229), v1236, v233);
            v240 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v225, *(double *)v89.i64), v1232, v228), v1228, v231);
            v241 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, *(double *)v89.i64), v1232, v230), v1228, v232);
            v242 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v227, *(double *)v89.i64), v1232, v229), v1228, v233);
            v243 = vsubq_f64(v224[2], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v236, *(double *)v92.i64), v1224, v239), v1220, v242));
            v244 = vsubq_f64(v224[1], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v235, *(double *)v92.i64), v1224, v238), v1220, v241));
            *v224 = vsubq_f64(*v224, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v234, *(double *)v92.i64), v1224, v237), v1220, v240));
            v224[1] = v244;
            v224[2] = v243;
            v245 = v1256;
            v246 = v1260;
            do
            {
              v257 = *v245;
              v258 = 6 * v257;
              v259 = 6 * v257 + 4;
              v260 = *(_DWORD *)(v72 + 4 * v259);
              if (v223 <= v260)
              {
                v261 = (float64x2_t *)(v80 + 144 * v257);
                v262 = v261[1];
                v264 = v261[2];
                v263 = v261[3];
                v265 = (float64x2_t *)(v1139 + 288 * (int)(v260 + *(_DWORD *)(v1264 + 4) * v223));
                v267 = v261[4];
                v266 = v261[5];
                v268 = v261[6];
                v269 = v261[7];
                v270 = v261[8];
                v271 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v261->f64[0]), v237, v263.f64[0]), v240, v268.f64[0]);
                v272 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v261->f64[0]), v238, v263.f64[0]), v241, v268.f64[0]);
                v273 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v261->f64[0]), v239, v263.f64[0]), v242, v268.f64[0]);
                v274 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, *v261, 1), v237, v263, 1), v240, v268, 1);
                v275 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, *v261, 1), v238, v263, 1), v241, v268, 1);
                v276 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, *v261, 1), v239, v263, 1), v242, v268, 1);
                v277 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v262.f64[0]), v237, v267.f64[0]), v240, v269.f64[0]);
                v278 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v262.f64[0]), v238, v267.f64[0]), v241, v269.f64[0]);
                v279 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v262.f64[0]), v239, v267.f64[0]), v242, v269.f64[0]);
                v280 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, v262, 1), v237, v267, 1), v240, v269, 1);
                v281 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, v262, 1), v238, v267, 1), v241, v269, 1);
                v282 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, v262, 1), v239, v267, 1), v242, v269, 1);
                v283 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v264.f64[0]), v237, v266.f64[0]), v240, v270.f64[0]);
                v284 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v264.f64[0]), v238, v266.f64[0]), v241, v270.f64[0]);
                v285 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v264.f64[0]), v239, v266.f64[0]), v242, v270.f64[0]);
                v286 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, v264, 1), v237, v266, 1), v240, v270, 1);
                v287 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, v264, 1), v238, v266, 1), v241, v270, 1);
                v288 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, v264, 1), v239, v266, 1), v242, v270, 1);
                v289 = vsubq_f64(v265[2], v273);
                v290 = vsubq_f64(v265[1], v272);
                v291 = vsubq_f64(v265[5], v276);
                v292 = vsubq_f64(v265[4], v275);
                v293 = vsubq_f64(v265[3], v274);
                v294 = vsubq_f64(v265[8], v279);
                v295 = vsubq_f64(v265[7], v278);
                v296 = vsubq_f64(v265[6], v277);
                v297 = vsubq_f64(v265[11], v282);
                v298 = vsubq_f64(v265[10], v281);
                v299 = vsubq_f64(v265[9], v280);
                v300 = v265[15];
                v301 = vsubq_f64(v265[14], v285);
                v302 = vsubq_f64(v265[13], v284);
                v303 = vsubq_f64(v265[12], v283);
                v304 = vsubq_f64(v265[17], v288);
                *v265 = vsubq_f64(*v265, v271);
                v265[1] = v290;
                v265[2] = v289;
                v265[3] = v293;
                v265[4] = v292;
                v265[5] = v291;
                v265[6] = v296;
                v265[7] = v295;
                v265[8] = v294;
                v265[9] = v299;
                v265[10] = v298;
                v265[11] = v297;
                v265[12] = v303;
                v265[13] = v302;
                v265[14] = v301;
                v265[15] = vsubq_f64(v300, v286);
                v265[16] = vsubq_f64(v265[16], v287);
                v265[17] = v304;
              }
              v247 = (float64x2_t *)(v78 + 96 * (v1165 * (int)v223 + *(_DWORD *)(v72 + 4 * v258 + 20)));
              v248 = v247[4];
              v249 = (float64x2_t *)(v81 + 8 * v258);
              v250 = *v249;
              v251 = v249[1];
              v252 = *(float64x2_t *)(v81 + 8 * v259);
              v253 = vsubq_f64(v247[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v249->f64[0]), v239, v251.f64[0]), v242, v252.f64[0]));
              v254 = vsubq_f64(v247[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v249->f64[0]), v238, v251.f64[0]), v241, v252.f64[0]));
              v255 = vsubq_f64(v247[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, *v249, 1), v239, v251, 1), v242, v252, 1));
              v256 = vsubq_f64(v247[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, *v249, 1), v237, v251, 1), v240, v252, 1));
              *v247 = vsubq_f64(*v247, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v249->f64[0]), v237, v251.f64[0]), v240, v252.f64[0]));
              v247[1] = v254;
              v247[2] = v253;
              v247[3] = v256;
              v247[4] = vsubq_f64(v248, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, v250, 1), v238, v251, 1), v241, v252, 1));
              v247[5] = v255;
              ++v245;
              --v246;
            }
            while (v246);
            v305 = *(int *)(v72 + 4 * v1252 + 20);
            v306 = (float64x2_t *)(v81 + 8 * v1252);
            v307 = *(float64x2_t *)(v81 + 8 * (v1252 + 4));
            v308 = v306[1];
            v88 = v1212;
            *(double *)v87.i64 = v1216;
            v309 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v306, v1216), v1248, v308), v1244, v307);
            v310 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v306, v1212, 1), v1240, v308), v1236, v307);
            v311 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v306, *(double *)v89.i64), v1232, v308), v1228, v307);
            *(float64x2_t *)(v1127 + 16 * v305) = vsubq_f64(*(float64x2_t *)(v1127 + 16 * v305), vmlaq_f64(vmlaq_f64(vmulq_n_f64(v309, *(double *)v92.i64), v1224, v310), v1220, v311));
            v312 = v1256;
            v313 = v1260;
            v82 = v1193;
            _Q22.i64[0] = v1197;
            v83 = v1189;
            _D25 = v1162;
            _D12 = v1151;
            v95 = v1155;
            _Q13 = v1147;
            do
            {
              v314 = *(_DWORD *)(v72 + 24 * *v312 + 20);
              if (v305 <= v314)
              {
                v315 = (float64x2_t *)(v1137 + 32 * (int)(v314 + *(_DWORD *)(v1135 + 4) * v305));
                v316 = (float64x2_t *)(v81 + 48 * *v312);
                v317 = v316[1];
                v318 = v316[2];
                v319 = vsubq_f64(v315[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v309, *v316, 1), v310, v317, 1), v311, v318, 1));
                *v315 = vsubq_f64(*v315, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v309, v316->f64[0]), v310, v317.f64[0]), v311, v318.f64[0]));
                v315[1] = v319;
              }
              ++v312;
              --v313;
            }
            while (v313);
            ++v93;
          }
          while (v93 != v1208);
        }
      }
      v84 = v1125 + 1;
    }
    while (v1125 + 1 != v1120);
  }
  *(_QWORD *)(v1102 + 24) |= 1uLL;
  *(_QWORD *)(v1103 + 24) |= 1uLL;
  *(_QWORD *)(v1099 + 24) |= 1uLL;
  *(_QWORD *)(v1104 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a25 + 24) |= 1uLL;
  *(_QWORD *)(a20 + 24) |= 1uLL;
  *(_QWORD *)(a18 + 24) |= 1uLL;
  *(_QWORD *)(a67 + 24) |= 1uLL;
  *(_QWORD *)(a56 + 24) |= 1uLL;
  *(_QWORD *)(a54 + 24) |= 1uLL;
  *(_QWORD *)(a14 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  v1105 = STACK[0x790];
  if ((**(_BYTE **)(v1081 + 16) & 1) == 0)
  {
LABEL_3:
    if ((**(_BYTE **)(v1082 + 16) & 1) == 0)
      goto LABEL_4;
    goto LABEL_80;
  }
LABEL_32:
  v320 = *(_QWORD *)(v1085 + 16);
  v1163 = *(_QWORD *)(v1090 + 16);
  v1140 = *(int **)(v1089 + 16);
  v321 = *(_QWORD *)(a7 + 16);
  v322 = *(_QWORD *)(a9 + 16);
  v323 = *(_QWORD *)(a10 + 16);
  v324 = *(_QWORD *)(a11 + 16);
  v1237 = *(_QWORD *)(a12 + 16);
  v1233 = *(_QWORD *)(a13 + 16);
  v1281 = *(_QWORD *)(a16 + 16);
  v1277 = *(_QWORD *)(a17 + 16);
  v1273 = *(_QWORD *)(a18 + 16);
  v1269 = *(_QWORD *)(a19 + 16);
  v1265 = *(_QWORD *)(a20 + 16);
  v1261 = *(_QWORD *)(a21 + 16);
  v1229 = *(_QWORD *)(a39 + 16);
  v1225 = *(_QWORD *)(a40 + 16);
  v1257 = *(_QWORD *)(a41 + 16);
  v1253 = *(_QWORD *)(a42 + 16);
  v1249 = *(_QWORD *)(a43 + 16);
  v1245 = *(_QWORD *)(a44 + 16);
  v1221 = *(_QWORD *)(a54 + 16);
  v1217 = *(_QWORD *)(a55 + 16);
  v325 = *(_QWORD *)(a56 + 16);
  v326 = *(_QWORD *)(a57 + 16);
  v1204 = *(_QWORD *)(a67 + 16);
  v1198 = *(_QWORD *)(a68 + 16);
  v1241 = *(_QWORD *)(v1086 + 16);
  v327 = *(_QWORD *)(v1087 + 16);
  v328 = *(_QWORD *)(v1088 + 16);
  v329 = *(_QWORD *)(v1084 + 16);
  v1159 = *(_QWORD *)(v1104 + 16);
  v1156 = *(_QWORD *)(v1098 + 16);
  v1152 = *(_QWORD *)(v1103 + 16);
  v1148 = *(_QWORD *)(v1102 + 16);
  v1213 = *(_QWORD *)(v1101 + 16);
  v1209 = *(_QWORD *)(v1100 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  v330 = v1198;
  if ((int)v1119 >= 1)
  {
    v331 = 0;
    while (v331)
    {
      v332 = v1140[v331 - 1];
      v1144 = v331;
      v1166 = v1140[v331];
      if (v332 < (int)v1166)
        goto LABEL_39;
LABEL_34:
      v331 = v1144 + 1;
      if (v1144 + 1 == v1119)
        goto LABEL_79;
    }
    v332 = 0;
    v1144 = 0;
    v1166 = *v1140;
    if ((int)v1166 <= 0)
      goto LABEL_34;
LABEL_39:
    v333 = v1213 + 72 * v1144;
    v1199 = (float64x2_t *)(v333 + 16);
    v1194 = (float64x2_t *)(v333 + 32);
    v1190 = (float64x2_t *)(v333 + 48);
    v1186 = 9 * v1144 + 8;
    v1182 = (float64x2_t *)(v1209 + 24 * v1144);
    v1178 = 3 * v1144 + 2;
    v334 = v332;
    v1174 = v1166 - v332;
    v1170 = (int *)(v1163 + 4 * v332);
    while (1)
    {
      v335 = *(int *)(v1163 + 4 * v334);
      v336 = *(int *)(v320 + 24 * v335);
      if (v336 >> 30 != 3)
      {
        v337 = *(int *)(v321 + 4 * v336);
        v338 = (double *)(v1241 + 24 * v335);
        _Q2 = *(_OWORD *)v338;
        _Q5 = *v1194;
        _D1 = *(_QWORD *)(v333 + 8);
        __asm { FMLA            D0, D1, V2.D[1] }
        _D7 = v338[2];
        v344 = vmlad_n_f64(_D0, _D7, v1199->f64[0]);
        __asm
        {
          FMLA            D1, D5, V2.D[1]
          FMLA            D1, D7, V5.D[1]
        }
        _Q5.f64[0] = *(float64_t *)(v333 + 56);
        __asm { FMLA            D4, D5, V2.D[1] }
        _D2 = _D4 + _D7 * *(double *)(v1213 + 8 * v1186);
        _Q4 = *v1182;
        __asm { FMLA            D5, D1, V4.D[1] }
        *(double *)(v1159 + 8 * v337) = *(double *)(v1159 + 8 * v337)
                                      - (_Q5.f64[0]
                                       + _D2 * *(double *)(v1209 + 8 * v1178));
        v350 = v1170;
        for (i = v1174; i; --i)
        {
          v352 = *v350;
          v353 = *(int *)(v320 + 24 * v352);
          if (v353 >> 30 != 3 && v337 <= *(_DWORD *)(v321 + 4 * v353))
          {
            v354 = 8 * ((int)v353 + *(_DWORD *)(v1233 + 4) * (int)v336);
            v355 = (double *)(v1241 + 24 * v352);
            _Q4 = *(_OWORD *)v355;
            __asm { FMLA            D5, D1, V4.D[1] }
            *(double *)(v1237 + v354) = *(double *)(v1237 + v354) - (_D5 + _D2 * v355[2]);
          }
          v358 = 6 * v352;
          v359 = *(_DWORD *)(v320 + ((24 * v352) | 4));
          if (v359 >> 30 == 3)
          {
            v360 = v358 + 4;
            v361 = *(_DWORD *)(v320 + 4 * (v358 + 4));
            if (v361 >> 30 == 3)
              goto LABEL_49;
          }
          else
          {
            v363 = (double *)(v1281 + 32 * (int)(v359 + *(_DWORD *)(v1277 + 4) * v336));
            v364 = v327 + 96 * v352;
            _Q7 = *(_OWORD *)(v364 + 32);
            _Q16 = *(_OWORD *)(v364 + 48);
            _Q17 = *(_OWORD *)(v364 + 64);
            _Q18 = *(_OWORD *)(v364 + 80);
            v369 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)v364), _D1, *(double *)&_Q7), _D2, *(double *)&_Q17);
            __asm
            {
              FMLA            D5, D1, V7.D[1]
              FMLA            D5, D2, V17.D[1]
            }
            *(double *)&_Q7 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)(v364 + 16)), _D1, *(double *)&_Q16), _D2, *(double *)&_Q18);
            __asm
            {
              FMLA            D6, D1, V16.D[1]
              FMLA            D6, D2, V18.D[1]
            }
            *(double *)&_Q16 = *v363 - v369;
            v374 = v363[1] - _D5;
            *(double *)&v375 = v363[2] - *(double *)&_Q7;
            *((double *)&_Q16 + 1) = v374;
            *((double *)&v375 + 1) = v363[3] - _D6;
            *(_OWORD *)v363 = _Q16;
            *((_OWORD *)v363 + 1) = v375;
            v360 = v358 + 4;
            v361 = *(_DWORD *)(v320 + 4 * (v358 + 4));
            if (v361 >> 30 == 3)
            {
LABEL_49:
              v362 = *(_DWORD *)(v320 + 24 * v352 + 20);
              if (v362 >> 30 != 3)
                goto LABEL_53;
              goto LABEL_43;
            }
          }
          v376 = (double *)(v1273 + 48 * (int)(v361 + *(_DWORD *)(v1269 + 4) * v336));
          v377 = v328 + 144 * v352;
          _Q17 = *(_OWORD *)(v377 + 48);
          _Q18 = *(_OWORD *)(v377 + 64);
          _Q19 = *(_OWORD *)(v377 + 80);
          _Q20 = *(_OWORD *)(v377 + 96);
          _Q21 = *(_OWORD *)(v377 + 112);
          _Q22 = *(_OWORD *)(v377 + 128);
          v384 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)v377), _D1, *(double *)&_Q17), _D2, *(double *)&_Q20);
          __asm
          {
            FMLA            D6, D1, V17.D[1]
            FMLA            D6, D2, V20.D[1]
          }
          *(double *)&_Q17 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)(v377 + 16)), _D1, *(double *)&_Q18), _D2, *(double *)&_Q21);
          __asm
          {
            FMLA            D7, D1, V18.D[1]
            FMLA            D7, D2, V21.D[1]
          }
          *(double *)&_Q18 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)(v377 + 32)), _D1, *(double *)&_Q19), _D2, *(double *)&_Q22);
          __asm
          {
            FMLA            D16, D1, V19.D[1]
            FMLA            D16, D2, V22.D[1]
          }
          *(double *)&_Q19 = *v376 - v384;
          v391 = v376[1] - _D6;
          *(double *)&v392 = v376[2] - *(double *)&_Q17;
          v393 = v376[3] - _D7;
          *(double *)&v394 = v376[4] - *(double *)&_Q18;
          *((double *)&_Q19 + 1) = v391;
          *((double *)&v392 + 1) = v393;
          *((double *)&v394 + 1) = v376[5] - _D16;
          *(_OWORD *)v376 = _Q19;
          *((_OWORD *)v376 + 1) = v392;
          *((_OWORD *)v376 + 2) = v394;
          v362 = *(_DWORD *)(v320 + 24 * v352 + 20);
          if (v362 >> 30 != 3)
          {
LABEL_53:
            v395 = (double *)(v1265 + 16 * (int)(v362 + *(_DWORD *)(v1261 + 4) * v336));
            v396 = v329 + 8 * v358;
            _Q4 = *(_OWORD *)(v396 + 16);
            _Q5 = *(_OWORD *)(v329 + 8 * v360);
            __asm
            {
              FMLA            D3, D1, V4.D[1]
              FMLA            D3, D2, V5.D[1]
            }
            v401 = v395[1] - _D3;
            *v395 = *v395
                  - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)v396), _D1, *(double *)&_Q4), _D2, *(double *)&_Q5);
            v395[1] = v401;
          }
LABEL_43:
          ++v350;
        }
      }
      v402 = 6 * v335;
      v403 = *(int *)(v320 + ((24 * v335) | 4));
      if (v403 >> 30 != 3)
        break;
LABEL_65:
      v471 = *(int *)(v320 + 4 * (v402 + 4));
      if (v471 >> 30 != 3)
      {
        v472 = *(int *)(v323 + 4 * v471);
        v473 = (float64x2_t *)(v1152 + 48 * v472);
        v474 = (float64x2_t *)(v328 + 144 * v335);
        v475 = v474[1];
        v476 = v474[2];
        v477 = v474[3];
        v478 = v474[4];
        v479 = v474[5];
        v480 = v474[6];
        v481 = v474[7];
        v482 = v474[8];
        v483 = *(double *)(v1213 + 8 * v1186);
        v484 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v474, *(double *)v333), v477, *(float64x2_t *)v333, 1), v480, v1199->f64[0]);
        v485 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v475, *(double *)v333), v478, *(float64x2_t *)v333, 1), v481, v1199->f64[0]);
        v486 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v476, *(double *)v333), v479, *(float64x2_t *)v333, 1), v482, v1199->f64[0]);
        v487 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v474, *v1199, 1), v477, v1194->f64[0]), v480, *v1194, 1);
        v488 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v475, *v1199, 1), v478, v1194->f64[0]), v481, *v1194, 1);
        v489 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v476, *v1199, 1), v479, v1194->f64[0]), v482, *v1194, 1);
        v490 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v474, v1190->f64[0]), v477, *v1190, 1), v480, v483);
        v491 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v475, v1190->f64[0]), v478, *v1190, 1), v481, v483);
        v492 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v476, v1190->f64[0]), v479, *v1190, 1), v482, v483);
        v477.f64[0] = *(float64_t *)(v1209 + 8 * v1178);
        v493 = vsubq_f64(v473[2], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v486, v1182->f64[0]), v489, *v1182, 1), v492, v477.f64[0]));
        v494 = vsubq_f64(v473[1], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v485, v1182->f64[0]), v488, *v1182, 1), v491, v477.f64[0]));
        *v473 = vsubq_f64(*v473, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v484, v1182->f64[0]), v487, *v1182, 1), v490, v477.f64[0]));
        v473[1] = v494;
        v473[2] = v493;
        v495 = v1170;
        v496 = v1174;
        do
        {
          v497 = *v495;
          v498 = 6 * v497 + 4;
          v499 = *(int *)(v320 + 4 * v498);
          if (v499 >> 30 != 3 && v472 <= *(_DWORD *)(v323 + 4 * v499))
          {
            v500 = (float64x2_t *)(v328 + 144 * v497);
            v501 = v500[1];
            v502 = v500[2];
            v503 = v500[3];
            v504 = (float64x2_t *)(v1221 + 288 * ((int)v499 + *(_DWORD *)(v1217 + 4) * (int)v471));
            v506 = v500[4];
            v505 = v500[5];
            v507 = v500[6];
            v508 = v500[7];
            v509 = v500[8];
            v510 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v500->f64[0]), v487, v503.f64[0]), v490, v507.f64[0]);
            v511 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v500->f64[0]), v488, v503.f64[0]), v491, v507.f64[0]);
            v512 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v500->f64[0]), v489, v503.f64[0]), v492, v507.f64[0]);
            v513 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, *v500, 1), v487, v503, 1), v490, v507, 1);
            v514 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, *v500, 1), v488, v503, 1), v491, v507, 1);
            v515 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, *v500, 1), v489, v503, 1), v492, v507, 1);
            v516 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v501.f64[0]), v487, v506.f64[0]), v490, v508.f64[0]);
            v517 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v501.f64[0]), v488, v506.f64[0]), v491, v508.f64[0]);
            v518 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v501.f64[0]), v489, v506.f64[0]), v492, v508.f64[0]);
            v519 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, v501, 1), v487, v506, 1), v490, v508, 1);
            v520 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, v501, 1), v488, v506, 1), v491, v508, 1);
            v521 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, v501, 1), v489, v506, 1), v492, v508, 1);
            v522 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v502.f64[0]), v487, v505.f64[0]), v490, v509.f64[0]);
            v523 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v502.f64[0]), v488, v505.f64[0]), v491, v509.f64[0]);
            v524 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v502.f64[0]), v489, v505.f64[0]), v492, v509.f64[0]);
            v525 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, v502, 1), v487, v505, 1), v490, v509, 1);
            v526 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, v502, 1), v488, v505, 1), v491, v509, 1);
            v527 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, v502, 1), v489, v505, 1), v492, v509, 1);
            v528 = vsubq_f64(v504[2], v512);
            v529 = vsubq_f64(v504[1], v511);
            v530 = vsubq_f64(v504[5], v515);
            v531 = vsubq_f64(v504[4], v514);
            v532 = vsubq_f64(v504[3], v513);
            v533 = vsubq_f64(v504[8], v518);
            v534 = vsubq_f64(v504[7], v517);
            v535 = vsubq_f64(v504[6], v516);
            v536 = vsubq_f64(v504[11], v521);
            v537 = vsubq_f64(v504[10], v520);
            v538 = vsubq_f64(v504[9], v519);
            v539 = vsubq_f64(v504[14], v524);
            v540 = vsubq_f64(v504[13], v523);
            v541 = vsubq_f64(v504[12], v522);
            v542 = v504[17];
            v543 = vsubq_f64(v504[15], v525);
            *v504 = vsubq_f64(*v504, v510);
            v504[1] = v529;
            v504[2] = v528;
            v504[3] = v532;
            v504[4] = v531;
            v504[5] = v530;
            v504[6] = v535;
            v504[7] = v534;
            v504[8] = v533;
            v504[9] = v538;
            v504[10] = v537;
            v504[11] = v536;
            v504[12] = v541;
            v504[13] = v540;
            v504[14] = v539;
            v504[15] = v543;
            v504[16] = vsubq_f64(v504[16], v526);
            v504[17] = vsubq_f64(v542, v527);
          }
          v544 = *(_DWORD *)(v320 + 24 * v497 + 20);
          if (v544 >> 30 != 3)
          {
            v545 = (float64x2_t *)(v325 + 96 * (int)(v544 + *(_DWORD *)(v326 + 4) * v471));
            v546 = v545[4];
            v547 = (float64x2_t *)(v329 + 48 * v497);
            v548 = v547[1];
            v549 = *(float64x2_t *)(v329 + 8 * v498);
            v550 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, *v547, 1), v488, v548, 1), v491, v549, 1);
            v551 = vsubq_f64(v545[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v547->f64[0]), v489, v548.f64[0]), v492, v549.f64[0]));
            v552 = vsubq_f64(v545[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v547->f64[0]), v488, v548.f64[0]), v491, v549.f64[0]));
            v553 = vsubq_f64(v545[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, *v547, 1), v489, v548, 1), v492, v549, 1));
            v554 = vsubq_f64(v545[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, *v547, 1), v487, v548, 1), v490, v549, 1));
            *v545 = vsubq_f64(*v545, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v547->f64[0]), v487, v548.f64[0]), v490, v549.f64[0]));
            v545[1] = v552;
            v545[2] = v551;
            v545[3] = v554;
            v545[4] = vsubq_f64(v546, v550);
            v545[5] = v553;
          }
          ++v495;
          --v496;
        }
        while (v496);
      }
      v555 = *(int *)(v320 + 4 * v402 + 20);
      if (v555 >> 30 != 3)
      {
        v556 = *(int *)(v324 + 4 * v555);
        v557 = (float64x2_t *)(v329 + 8 * v402);
        v558 = v557[1];
        v559 = *(float64x2_t *)(v329 + 8 * (v402 + 4));
        v560 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v557, *(double *)v333), v558, *(float64x2_t *)v333, 1), v559, v1199->f64[0]);
        v561 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v557, *v1199, 1), v558, v1194->f64[0]), v559, *v1194, 1);
        v562 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v557, v1190->f64[0]), v558, *v1190, 1), v559, *(double *)(v1213 + 8 * v1186));
        *(float64x2_t *)(v1148 + 16 * v556) = vsubq_f64(*(float64x2_t *)(v1148 + 16 * v556), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v560, v1182->f64[0]), v561, *v1182, 1), v562, *(double *)(v1209 + 8 * v1178)));
        v563 = v1170;
        v564 = v1174;
        do
        {
          v565 = *(int *)(v320 + 24 * *v563 + 20);
          if (v565 >> 30 != 3 && v556 <= *(_DWORD *)(v324 + 4 * v565))
          {
            v566 = (float64x2_t *)(v1204 + 32 * ((int)v565 + *(_DWORD *)(v330 + 4) * (int)v555));
            v567 = (float64x2_t *)(v329 + 48 * *v563);
            v568 = v567[1];
            v569 = v567[2];
            v570 = vsubq_f64(v566[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v560, *v567, 1), v561, v568, 1), v562, v569, 1));
            *v566 = vsubq_f64(*v566, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v560, v567->f64[0]), v561, v568.f64[0]), v562, v569.f64[0]));
            v566[1] = v570;
          }
          ++v563;
          --v564;
        }
        while (v564);
      }
      if (++v334 == v1166)
        goto LABEL_34;
    }
    v404 = *(int *)(v322 + 4 * v403);
    v405 = (float64x2_t *)(v1156 + 32 * v404);
    v406 = (float64x2_t *)(v327 + 96 * v335);
    v407 = v406[1];
    v408 = v406[2];
    v409 = v406[3];
    v410 = v406[4];
    v411 = v406[5];
    v412 = *(double *)(v1213 + 8 * v1186);
    v413 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v406, *(double *)v333), v408, *(float64x2_t *)v333, 1), v410, v1199->f64[0]);
    v414 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, *(double *)v333), v409, *(float64x2_t *)v333, 1), v411, v1199->f64[0]);
    v415 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v406, *v1199, 1), v408, v1194->f64[0]), v410, *v1194, 1);
    v416 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v407, *v1199, 1), v409, v1194->f64[0]), v411, *v1194, 1);
    v417 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v406, v1190->f64[0]), v408, *v1190, 1), v410, v412);
    v418 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, v1190->f64[0]), v409, *v1190, 1), v411, v412);
    v409.f64[0] = *(float64_t *)(v1209 + 8 * v1178);
    v419 = vsubq_f64(v405[1], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v414, v1182->f64[0]), v416, *v1182, 1), v418, v409.f64[0]));
    *v405 = vsubq_f64(*v405, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v413, v1182->f64[0]), v415, *v1182, 1), v417, v409.f64[0]));
    v405[1] = v419;
    v420 = v1170;
    v421 = v1174;
    while (1)
    {
      v422 = *v420;
      v423 = *(int *)(v320 + 24 * v422 + 4);
      if (v423 >> 30 != 3 && v404 <= *(_DWORD *)(v322 + 4 * v423))
      {
        v424 = (float64x2_t *)(v1229 + ((uint64_t)((int)v423 + *(_DWORD *)(v1225 + 4) * (int)v403) << 7));
        v425 = v424[6];
        v426 = (float64x2_t *)(v327 + 96 * v422);
        v427 = v426[1];
        v428 = v426[2];
        v429 = v426[3];
        v430 = v426[4];
        v431 = v426[5];
        v432 = vsubq_f64(v424[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v426->f64[0]), v416, v428.f64[0]), v418, v430.f64[0]));
        v433 = vsubq_f64(v424[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, *v426, 1), v415, v428, 1), v417, v430, 1));
        v434 = vsubq_f64(v424[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, *v426, 1), v416, v428, 1), v418, v430, 1));
        v435 = vsubq_f64(v424[4], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v427.f64[0]), v415, v429.f64[0]), v417, v431.f64[0]));
        v436 = vsubq_f64(v424[5], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v427.f64[0]), v416, v429.f64[0]), v418, v431.f64[0]));
        v437 = vsubq_f64(v424[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, v427, 1), v416, v429, 1), v418, v431, 1));
        *v424 = vsubq_f64(*v424, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v426->f64[0]), v415, v428.f64[0]), v417, v430.f64[0]));
        v424[1] = v432;
        v424[2] = v433;
        v424[3] = v434;
        v424[4] = v435;
        v424[5] = v436;
        v424[6] = vsubq_f64(v425, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, v427, 1), v415, v429, 1), v417, v431, 1));
        v424[7] = v437;
      }
      v438 = 6 * v422;
      v439 = 6 * v422 + 4;
      v440 = *(_DWORD *)(v320 + 4 * v439);
      if (v440 >> 30 == 3)
      {
        v441 = *(_DWORD *)(v320 + 24 * v422 + 20);
        if (v441 >> 30 != 3)
          goto LABEL_64;
      }
      else
      {
        v442 = (float64x2_t *)(v1257 + 192 * (int)(v440 + *(_DWORD *)(v1253 + 4) * v403));
        v443 = v442[10];
        v444 = (float64x2_t *)(v328 + 144 * v422);
        v445 = v444[1];
        v446 = v444[2];
        v447 = v444[3];
        v448 = v444[4];
        v449 = v444[5];
        v450 = v444[6];
        v451 = v444[7];
        v452 = v444[8];
        v453 = vsubq_f64(v442[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v444->f64[0]), v416, v447.f64[0]), v418, v450.f64[0]));
        v454 = vsubq_f64(v442[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, *v444, 1), v415, v447, 1), v417, v450, 1));
        v455 = vsubq_f64(v442[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, *v444, 1), v416, v447, 1), v418, v450, 1));
        v456 = vsubq_f64(v442[4], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v445.f64[0]), v415, v448.f64[0]), v417, v451.f64[0]));
        v457 = vsubq_f64(v442[5], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v445.f64[0]), v416, v448.f64[0]), v418, v451.f64[0]));
        v458 = vsubq_f64(v442[6], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, v445, 1), v415, v448, 1), v417, v451, 1));
        v459 = vsubq_f64(v442[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, v445, 1), v416, v448, 1), v418, v451, 1));
        v460 = vsubq_f64(v442[8], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v446.f64[0]), v415, v449.f64[0]), v417, v452.f64[0]));
        v461 = vsubq_f64(v442[9], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v446.f64[0]), v416, v449.f64[0]), v418, v452.f64[0]));
        v462 = vsubq_f64(v442[11], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, v446, 1), v416, v449, 1), v418, v452, 1));
        *v442 = vsubq_f64(*v442, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v444->f64[0]), v415, v447.f64[0]), v417, v450.f64[0]));
        v442[1] = v453;
        v442[2] = v454;
        v442[3] = v455;
        v442[4] = v456;
        v442[5] = v457;
        v442[6] = v458;
        v442[7] = v459;
        v442[8] = v460;
        v442[9] = v461;
        v442[10] = vsubq_f64(v443, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, v446, 1), v415, v449, 1), v417, v452, 1));
        v442[11] = v462;
        v441 = *(_DWORD *)(v320 + 24 * v422 + 20);
        if (v441 >> 30 != 3)
        {
LABEL_64:
          v463 = (float64x2_t *)(v1249 + ((uint64_t)(int)(v441 + *(_DWORD *)(v1245 + 4) * v403) << 6));
          v464 = v463[2];
          v465 = (float64x2_t *)(v329 + 8 * v438);
          v466 = v465[1];
          v467 = *(float64x2_t *)(v329 + 8 * v439);
          v468 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, *v465, 1), v415, v466, 1), v417, v467, 1);
          v469 = vsubq_f64(v463[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v465->f64[0]), v416, v466.f64[0]), v418, v467.f64[0]));
          v470 = vsubq_f64(v463[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, *v465, 1), v416, v466, 1), v418, v467, 1));
          *v463 = vsubq_f64(*v463, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v465->f64[0]), v415, v466.f64[0]), v417, v467.f64[0]));
          v463[1] = v469;
          v463[2] = vsubq_f64(v464, v468);
          v463[3] = v470;
        }
      }
      ++v420;
      if (!--v421)
        goto LABEL_65;
    }
  }
LABEL_79:
  *(_QWORD *)(v1102 + 24) |= 1uLL;
  *(_QWORD *)(v1103 + 24) |= 1uLL;
  *(_QWORD *)(v1098 + 24) |= 1uLL;
  *(_QWORD *)(v1104 + 24) |= 1uLL;
  *(_QWORD *)(a20 + 24) |= 1uLL;
  *(_QWORD *)(a18 + 24) |= 1uLL;
  *(_QWORD *)(a67 + 24) |= 1uLL;
  *(_QWORD *)(a16 + 24) |= 1uLL;
  *(_QWORD *)(a56 + 24) |= 1uLL;
  *(_QWORD *)(a54 + 24) |= 1uLL;
  *(_QWORD *)(a43 + 24) |= 1uLL;
  *(_QWORD *)(a41 + 24) |= 1uLL;
  *(_QWORD *)(a39 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  if ((**(_BYTE **)(v1082 + 16) & 1) != 0)
  {
LABEL_80:
    v571 = *(_QWORD *)(v1085 + 16);
    v1195 = *(_QWORD *)(v1090 + 16);
    v1108 = *(int **)(v1089 + 16);
    v1278 = *(_QWORD *)(a12 + 16);
    v1274 = *(_QWORD *)(a13 + 16);
    v572 = *(_QWORD *)(a16 + 16);
    v573 = *(_QWORD *)(a18 + 16);
    v1116 = *(_QWORD *)(a19 + 16);
    v1118 = *(_QWORD *)(a17 + 16);
    v574 = *(_QWORD *)(a20 + 16);
    v1114 = *(_QWORD *)(a21 + 16);
    v1149 = *(_QWORD *)(a39 + 16);
    v1270 = *(_QWORD *)(a40 + 16);
    v575 = *(_QWORD *)(a41 + 16);
    v1145 = *(_QWORD *)(a42 + 16);
    v576 = *(_QWORD *)(a43 + 16);
    v1141 = *(_QWORD *)(a44 + 16);
    v1138 = *(_QWORD *)(a54 + 16);
    v1266 = *(_QWORD *)(a55 + 16);
    v577 = *(_QWORD *)(a56 + 16);
    v1136 = *(_QWORD *)(a57 + 16);
    v1134 = *(_QWORD *)(a67 + 16);
    v1132 = *(_QWORD *)(a68 + 16);
    v1282 = *(_QWORD *)(v1086 + 16);
    v578 = *(_QWORD *)(v1087 + 16);
    v579 = *(_QWORD *)(v1088 + 16);
    v580 = *(_QWORD *)(v1084 + 16);
    v1130 = *(_QWORD *)(v1104 + 16);
    v1128 = *(_QWORD *)(v1098 + 16);
    v1126 = *(_QWORD *)(v1103 + 16);
    v1124 = *(_QWORD *)(v1102 + 16);
    v1110 = *(_QWORD *)(v1100 + 16);
    v1112 = *(_QWORD *)(v1101 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1119 < 1)
    {
LABEL_105:
      *(_QWORD *)(v1102 + 24) |= 1uLL;
      *(_QWORD *)(v1103 + 24) |= 1uLL;
      *(_QWORD *)(v1098 + 24) |= 1uLL;
      *(_QWORD *)(v1104 + 24) |= 1uLL;
      *(_QWORD *)(a20 + 24) |= 1uLL;
      *(_QWORD *)(a18 + 24) |= 1uLL;
      *(_QWORD *)(a67 + 24) |= 1uLL;
      *(_QWORD *)(a16 + 24) |= 1uLL;
      *(_QWORD *)(a56 + 24) |= 1uLL;
      *(_QWORD *)(a54 + 24) |= 1uLL;
      *(_QWORD *)(a43 + 24) |= 1uLL;
      *(_QWORD *)(a41 + 24) |= 1uLL;
      *(_QWORD *)(a39 + 24) |= 1uLL;
      *(_QWORD *)(a12 + 24) |= 1uLL;
      if ((**(_BYTE **)(v1105 + 16) & 1) == 0)
        return 0;
      goto LABEL_106;
    }
    v581 = 0;
    while (1)
    {
      if (v581)
      {
        v582 = v1108[v581 - 1];
        v1122 = v581;
        v1200 = v1108[v581];
        if (v582 < (int)v1200)
          goto LABEL_87;
      }
      else
      {
        v582 = 0;
        v1122 = 0;
        v1200 = *v1108;
        if ((int)v1200 > 0)
        {
LABEL_87:
          v583 = v1112 + 72 * v1122;
          v584 = *(int64x2_t *)v583;
          v585 = *(float64x2_t *)(v583 + 16);
          v586 = *(int64x2_t *)(v583 + 32);
          v587 = *(int64x2_t *)(v583 + 48);
          v588 = *(uint64_t *)(v583 + 64);
          v589 = (int8x16_t *)(v1110 + 24 * v1122);
          v590 = v582;
          v1179 = *(_DWORD *)(v1118 + 4);
          v1175 = *(_DWORD *)(v1116 + 4);
          v1171 = *(_DWORD *)(v1114 + 4);
          v1167 = vextq_s8((int8x16_t)v584, (int8x16_t)v584, 8uLL).u64[0];
          v1157 = vextq_s8((int8x16_t)v587, (int8x16_t)v587, 8uLL).u64[0];
          *(_QWORD *)&v1160 = vextq_s8((int8x16_t)v586, (int8x16_t)v586, 8uLL).u64[0];
          *(_QWORD *)&v1153 = vextq_s8(*v589, *v589, 8uLL).u64[0];
          v1242 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v585.f64[0], 0);
          v1246 = (float64x2_t)vdupq_laneq_s64(v584, 1);
          v1187 = *(double *)&v588;
          v1191 = v586.i64[0];
          v1234 = (float64x2_t)vdupq_laneq_s64(v586, 1);
          v1238 = (float64x2_t)vdupq_lane_s64(v586.i64[0], 0);
          v1226 = (float64x2_t)vdupq_lane_s64(v588, 0);
          v1230 = (float64x2_t)vdupq_laneq_s64(v587, 1);
          v1262 = *v589;
          v1183 = v589[1].i64[0];
          v1218 = (float64x2_t)vdupq_lane_s64(v1183, 0);
          v1222 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v589, 1);
          v1258 = v1200 - v582;
          v1254 = (int *)(v1195 + 4 * v582);
          v1210 = v585;
          v1214 = *(double *)v584.i64;
          v1205 = *(double *)v587.i64;
          do
          {
            v591 = *(int *)(v1195 + 4 * v590);
            v592 = *(int *)(v571 + 24 * v591);
            v593 = (double *)(v1282 + 24 * v591);
            _Q6 = *(_OWORD *)v593;
            _D0 = v1167;
            __asm { FMLA            D7, D0, V6.D[1] }
            v597 = v593[2];
            v598 = _D7 + v597 * v585.f64[0];
            _D0 = v1191;
            __asm { FMLA            D7, D0, V6.D[1] }
            _D29 = _D7 + v597 * v1160;
            _D0 = v1157;
            __asm { FMLA            D7, D0, V6.D[1] }
            _D30 = _D7 + v597 * v1187;
            *(double *)(v1130 + 8 * v592) = *(double *)(v1130 + 8 * v592)
                                          - (v598 * *(double *)v1262.i64
                                           + _D29 * v1153
                                           + _D30 * *(double *)&v1183);
            v1250 = 6 * v591;
            v605 = v1254;
            v606 = v1258;
            do
            {
              v643 = *v605;
              v644 = *(_DWORD *)(v571 + 24 * v643);
              if (v592 <= v644)
              {
                v645 = 8 * (int)(v644 + *(_DWORD *)(v1274 + 4) * v592);
                v646 = (double *)(v1282 + 24 * v643);
                _Q6 = *(_OWORD *)v646;
                __asm { FMLA            D7, D29, V6.D[1] }
                *(double *)(v1278 + v645) = *(double *)(v1278 + v645) - (_D7 + _D30 * v646[2]);
              }
              v607 = 6 * v643;
              v608 = 24 * v643;
              v609 = (double *)(v572 + 32 * (v1179 * (int)v592 + *(_DWORD *)(v571 + ((24 * v643) | 4))));
              v610 = v578 + 96 * v643;
              _Q17 = *(_OWORD *)(v610 + 32);
              _Q18 = *(_OWORD *)(v610 + 48);
              _Q19 = *(_OWORD *)(v610 + 64);
              _Q31 = *(_OWORD *)(v610 + 80);
              v615 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)v610), _D29, *(double *)&_Q17), _D30, *(double *)&_Q19);
              __asm
              {
                FMLA            D7, D29, V17.D[1]
                FMLA            D7, D30, V19.D[1]
              }
              *(double *)&_Q17 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)(v610 + 16)), _D29, *(double *)&_Q18), _D30, *(double *)&_Q31);
              __asm
              {
                FMLA            D16, D29, V18.D[1]
                FMLA            D16, D30, V31.D[1]
              }
              *(double *)&_Q18 = *v609 - v615;
              v620 = v609[1] - _D7;
              *(double *)&v621 = v609[2] - *(double *)&_Q17;
              *((double *)&_Q18 + 1) = v620;
              *((double *)&v621 + 1) = v609[3] - _D16;
              *(_OWORD *)v609 = _Q18;
              *((_OWORD *)v609 + 1) = v621;
              v622 = (double *)(v573 + 48 * (v1175 * (int)v592 + *(_DWORD *)(v571 + 4 * (6 * v643 + 4))));
              v623 = v579 + 144 * v643;
              _Q19 = *(_OWORD *)(v623 + 48);
              _Q31 = *(_OWORD *)(v623 + 64);
              _Q8 = *(_OWORD *)(v623 + 80);
              _Q9 = *(_OWORD *)(v623 + 96);
              _Q10 = *(_OWORD *)(v623 + 112);
              _Q11 = *(_OWORD *)(v623 + 128);
              v630 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)v623), _D29, *(double *)&_Q19), _D30, *(double *)&_Q9);
              __asm
              {
                FMLA            D16, D29, V19.D[1]
                FMLA            D16, D30, V9.D[1]
              }
              *(double *)&_Q19 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)(v623 + 16)), _D29, *(double *)&_Q31), _D30, *(double *)&_Q10);
              __asm
              {
                FMLA            D17, D29, V31.D[1]
                FMLA            D17, D30, V10.D[1]
              }
              *(double *)&_Q31 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)(v623 + 32)), _D29, *(double *)&_Q8), _D30, *(double *)&_Q11);
              __asm
              {
                FMLA            D18, D29, V8.D[1]
                FMLA            D18, D30, V11.D[1]
              }
              *(double *)&_Q8 = *v622 - v630;
              v633 = v622[1] - _D16;
              *(double *)&v634 = v622[2] - *(double *)&_Q19;
              v635 = v622[3] - *(double *)&_Q17;
              *(double *)&_Q17 = v622[4] - *(double *)&_Q31;
              *((double *)&_Q8 + 1) = v633;
              *((double *)&v634 + 1) = v635;
              *((double *)&_Q17 + 1) = v622[5] - *(double *)&_Q18;
              *(_OWORD *)v622 = _Q8;
              *((_OWORD *)v622 + 1) = v634;
              *((_OWORD *)v622 + 2) = _Q17;
              v636 = (double *)(v574 + 16 * (v1171 * (int)v592 + *(_DWORD *)(v608 + v571 + 20)));
              v637 = v580 + 8 * v607;
              _Q6 = *(_OWORD *)(v637 + 16);
              _Q7 = *(_OWORD *)(v580 + 8 * (v607 + 4));
              __asm
              {
                FMLA            D4, D29, V6.D[1]
                FMLA            D4, D30, V7.D[1]
              }
              v642 = v636[1] - _D4;
              *v636 = *v636
                    - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)v637), _D29, *(double *)&_Q6), _D30, *(double *)&_Q7);
              v636[1] = v642;
              ++v605;
              --v606;
            }
            while (v606);
            v649 = *(int *)(v571 + ((24 * v591) | 4));
            v650 = (float64x2_t *)(v1128 + 32 * v649);
            v651 = (float64x2_t *)(v578 + 96 * v591);
            v652 = v651[1];
            v653 = v651[2];
            v654 = v651[3];
            v656 = v651[4];
            v655 = v651[5];
            v657 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v651, *(double *)v584.i64), v1246, v653), v1242, v656);
            v658 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v652, *(double *)v584.i64), v1246, v654), v1242, v655);
            v659 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v651, v585, 1), v1238, v653), v1234, v656);
            v660 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v652, v585, 1), v1238, v654), v1234, v655);
            v661 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v651, *(double *)v587.i64), v1230, v653), v1226, v656);
            v662 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v652, *(double *)v587.i64), v1230, v654), v1226, v655);
            v663 = vsubq_f64(v650[1], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v658, *(double *)v1262.i64), v1222, v660), v1218, v662));
            *v650 = vsubq_f64(*v650, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v657, *(double *)v1262.i64), v1222, v659), v1218, v661));
            v650[1] = v663;
            v664 = *(_DWORD *)(v1145 + 4) * v649;
            v665 = *(_DWORD *)(v1141 + 4) * v649;
            v666 = v1254;
            v667 = v1258;
            do
            {
              v710 = *v666;
              v711 = *(_DWORD *)(v571 + 24 * v710 + 4);
              if (v649 <= v711)
              {
                v712 = (float64x2_t *)(v1149 + ((uint64_t)(int)(v711 + *(_DWORD *)(v1270 + 4) * v649) << 7));
                v713 = v712[6];
                v714 = (float64x2_t *)(v578 + 96 * v710);
                v715 = v714[1];
                v716 = v714[2];
                v717 = v714[3];
                v719 = v714[4];
                v718 = v714[5];
                v720 = vsubq_f64(v712[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v714->f64[0]), v660, v716.f64[0]), v662, v719.f64[0]));
                v721 = vsubq_f64(v712[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, *v714, 1), v659, v716, 1), v661, v719, 1));
                v722 = vsubq_f64(v712[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, *v714, 1), v660, v716, 1), v662, v719, 1));
                v723 = vsubq_f64(v712[4], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v715.f64[0]), v659, v717.f64[0]), v661, v718.f64[0]));
                v724 = vsubq_f64(v712[5], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v715.f64[0]), v660, v717.f64[0]), v662, v718.f64[0]));
                v725 = vsubq_f64(v712[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, v715, 1), v660, v717, 1), v662, v718, 1));
                *v712 = vsubq_f64(*v712, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v714->f64[0]), v659, v716.f64[0]), v661, v719.f64[0]));
                v712[1] = v720;
                v712[2] = v721;
                v712[3] = v722;
                v712[4] = v723;
                v712[5] = v724;
                v712[6] = vsubq_f64(v713, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, v715, 1), v659, v717, 1), v661, v718, 1));
                v712[7] = v725;
              }
              v668 = 6 * v710 + 4;
              v669 = (float64x2_t *)(v575 + 192 * (v664 + *(_DWORD *)(v571 + 4 * v668)));
              v670 = (float64x2_t *)(v579 + 144 * v710);
              v671 = v670[1];
              v672 = v670[2];
              v673 = v670[3];
              v674 = v670[4];
              v675 = v670[5];
              v676 = v670[6];
              v677 = v670[7];
              v678 = v670[8];
              v679 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v670->f64[0]), v659, v673.f64[0]), v661, v676.f64[0]);
              v680 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v670->f64[0]), v660, v673.f64[0]), v662, v676.f64[0]);
              v681 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, *v670, 1), v659, v673, 1), v661, v676, 1);
              v682 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, *v670, 1), v660, v673, 1), v662, v676, 1);
              v683 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v671.f64[0]), v659, v674.f64[0]), v661, v677.f64[0]);
              v684 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v671.f64[0]), v660, v674.f64[0]), v662, v677.f64[0]);
              v685 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, v671, 1), v659, v674, 1), v661, v677, 1);
              v686 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, v671, 1), v660, v674, 1), v662, v677, 1);
              v687 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v672.f64[0]), v659, v675.f64[0]), v661, v678.f64[0]);
              v688 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v672.f64[0]), v660, v675.f64[0]), v662, v678.f64[0]);
              v689 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, v672, 1), v659, v675, 1), v661, v678, 1);
              v690 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, v672, 1), v660, v675, 1), v662, v678, 1);
              v691 = vsubq_f64(v669[1], v680);
              v692 = vsubq_f64(v669[2], v681);
              v693 = vsubq_f64(v669[3], v682);
              v694 = vsubq_f64(v669[4], v683);
              v695 = vsubq_f64(v669[5], v684);
              v696 = vsubq_f64(v669[6], v685);
              v697 = vsubq_f64(v669[7], v686);
              v698 = vsubq_f64(v669[8], v687);
              v699 = vsubq_f64(v669[9], v688);
              v700 = vsubq_f64(v669[11], v690);
              v701 = vsubq_f64(v669[10], v689);
              *v669 = vsubq_f64(*v669, v679);
              v669[1] = v691;
              v669[2] = v692;
              v669[3] = v693;
              v669[4] = v694;
              v669[5] = v695;
              v669[6] = v696;
              v669[7] = v697;
              v669[8] = v698;
              v669[9] = v699;
              v669[10] = v701;
              v669[11] = v700;
              v702 = (float64x2_t *)(v576 + ((uint64_t)(v665 + *(_DWORD *)(v571 + 24 * v710 + 20)) << 6));
              v703 = v702[2];
              v704 = (float64x2_t *)(v580 + 48 * v710);
              v705 = v704[1];
              v706 = *(float64x2_t *)(v580 + 8 * v668);
              v707 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, *v704, 1), v659, v705, 1), v661, v706, 1);
              v708 = vsubq_f64(v702[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v704->f64[0]), v660, v705.f64[0]), v662, v706.f64[0]));
              v709 = vsubq_f64(v702[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, *v704, 1), v660, v705, 1), v662, v706, 1));
              *v702 = vsubq_f64(*v702, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v704->f64[0]), v659, v705.f64[0]), v661, v706.f64[0]));
              v702[1] = v708;
              v702[2] = vsubq_f64(v703, v707);
              v702[3] = v709;
              ++v666;
              --v667;
            }
            while (v667);
            v726 = *(int *)(v571 + 4 * (v1250 + 4));
            v727 = (float64x2_t *)(v1126 + 48 * v726);
            v728 = (float64x2_t *)(v579 + 144 * v591);
            v729 = v728[1];
            v730 = v728[2];
            v731 = v728[3];
            v732 = v728[4];
            v733 = v728[5];
            v734 = v728[6];
            v735 = v728[7];
            v736 = v728[8];
            v737 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v728, v1214), v1246, v731), v1242, v734);
            v738 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v729, v1214), v1246, v732), v1242, v735);
            v739 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v730, v1214), v1246, v733), v1242, v736);
            v740 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v728, v1210, 1), v1238, v731), v1234, v734);
            v741 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v729, v1210, 1), v1238, v732), v1234, v735);
            v742 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v730, v1210, 1), v1238, v733), v1234, v736);
            v743 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v728, v1205), v1230, v731), v1226, v734);
            v744 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v729, v1205), v1230, v732), v1226, v735);
            v745 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v730, v1205), v1230, v733), v1226, v736);
            v746 = vsubq_f64(v727[2], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v739, *(double *)v1262.i64), v1222, v742), v1218, v745));
            v747 = vsubq_f64(v727[1], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v738, *(double *)v1262.i64), v1222, v741), v1218, v744));
            *v727 = vsubq_f64(*v727, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v737, *(double *)v1262.i64), v1222, v740), v1218, v743));
            v727[1] = v747;
            v727[2] = v746;
            v748 = *(_DWORD *)(v1136 + 4) * v726;
            v749 = v1254;
            v750 = v1258;
            do
            {
              v761 = *v749;
              v762 = 6 * v761;
              v763 = 6 * v761 + 4;
              v764 = *(_DWORD *)(v571 + 4 * v763);
              if (v726 <= v764)
              {
                v765 = (float64x2_t *)(v579 + 144 * v761);
                v766 = v765[1];
                v768 = v765[2];
                v767 = v765[3];
                v769 = (float64x2_t *)(v1138 + 288 * (int)(v764 + *(_DWORD *)(v1266 + 4) * v726));
                v770 = v765[4];
                v771 = v765[5];
                v772 = v765[6];
                v773 = v765[7];
                v774 = v765[8];
                v775 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v765->f64[0]), v740, v767.f64[0]), v743, v772.f64[0]);
                v776 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v765->f64[0]), v741, v767.f64[0]), v744, v772.f64[0]);
                v777 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v765->f64[0]), v742, v767.f64[0]), v745, v772.f64[0]);
                v778 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, *v765, 1), v740, v767, 1), v743, v772, 1);
                v779 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, *v765, 1), v741, v767, 1), v744, v772, 1);
                v780 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, *v765, 1), v742, v767, 1), v745, v772, 1);
                v781 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v766.f64[0]), v740, v770.f64[0]), v743, v773.f64[0]);
                v782 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v766.f64[0]), v741, v770.f64[0]), v744, v773.f64[0]);
                v783 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v766.f64[0]), v742, v770.f64[0]), v745, v773.f64[0]);
                v784 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v766, 1), v740, v770, 1), v743, v773, 1);
                v785 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, v766, 1), v741, v770, 1), v744, v773, 1);
                v786 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, v766, 1), v742, v770, 1), v745, v773, 1);
                v787 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v768.f64[0]), v740, v771.f64[0]), v743, v774.f64[0]);
                v788 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v768.f64[0]), v741, v771.f64[0]), v744, v774.f64[0]);
                v789 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v768.f64[0]), v742, v771.f64[0]), v745, v774.f64[0]);
                v790 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v768, 1), v740, v771, 1), v743, v774, 1);
                v791 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, v768, 1), v741, v771, 1), v744, v774, 1);
                v792 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, v768, 1), v742, v771, 1), v745, v774, 1);
                v793 = vsubq_f64(v769[2], v777);
                v794 = vsubq_f64(v769[1], v776);
                v795 = vsubq_f64(v769[5], v780);
                v796 = vsubq_f64(v769[4], v779);
                v797 = vsubq_f64(v769[3], v778);
                v798 = vsubq_f64(v769[8], v783);
                v799 = vsubq_f64(v769[7], v782);
                v800 = vsubq_f64(v769[6], v781);
                v801 = vsubq_f64(v769[11], v786);
                v802 = vsubq_f64(v769[10], v785);
                v803 = vsubq_f64(v769[9], v784);
                v804 = vsubq_f64(v769[14], v789);
                v805 = vsubq_f64(v769[13], v788);
                v806 = vsubq_f64(v769[12], v787);
                v807 = vsubq_f64(v769[17], v792);
                v808 = vsubq_f64(v769[15], v790);
                *v769 = vsubq_f64(*v769, v775);
                v769[1] = v794;
                v769[2] = v793;
                v769[3] = v797;
                v769[4] = v796;
                v769[5] = v795;
                v769[6] = v800;
                v769[7] = v799;
                v769[8] = v798;
                v769[9] = v803;
                v769[10] = v802;
                v769[11] = v801;
                v769[12] = v806;
                v769[13] = v805;
                v769[14] = v804;
                v769[15] = v808;
                v769[16] = vsubq_f64(v769[16], v791);
                v769[17] = v807;
              }
              v751 = (float64x2_t *)(v577 + 96 * (v748 + *(_DWORD *)(v571 + 4 * v762 + 20)));
              v752 = v751[4];
              v753 = (float64x2_t *)(v580 + 8 * v762);
              v754 = *v753;
              v755 = v753[1];
              v756 = *(float64x2_t *)(v580 + 8 * v763);
              v757 = vsubq_f64(v751[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v753->f64[0]), v742, v755.f64[0]), v745, v756.f64[0]));
              v758 = vsubq_f64(v751[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v753->f64[0]), v741, v755.f64[0]), v744, v756.f64[0]));
              v759 = vsubq_f64(v751[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, *v753, 1), v742, v755, 1), v745, v756, 1));
              v760 = vsubq_f64(v751[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, *v753, 1), v740, v755, 1), v743, v756, 1));
              *v751 = vsubq_f64(*v751, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v753->f64[0]), v740, v755.f64[0]), v743, v756.f64[0]));
              v751[1] = v758;
              v751[2] = v757;
              v751[3] = v760;
              v751[4] = vsubq_f64(v752, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, v754, 1), v741, v755, 1), v744, v756, 1));
              v751[5] = v759;
              ++v749;
              --v750;
            }
            while (v750);
            v809 = *(int *)(v571 + 4 * v1250 + 20);
            v810 = (float64x2_t *)(v580 + 8 * v1250);
            v811 = *(float64x2_t *)(v580 + 8 * (v1250 + 4));
            v812 = v810[1];
            v585 = v1210;
            *(double *)v584.i64 = v1214;
            v813 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v810, v1214), v1246, v812), v1242, v811);
            v814 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v810, v1210, 1), v1238, v812), v1234, v811);
            *(double *)v587.i64 = v1205;
            v815 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v810, v1205), v1230, v812), v1226, v811);
            *(float64x2_t *)(v1124 + 16 * v809) = vsubq_f64(*(float64x2_t *)(v1124 + 16 * v809), vmlaq_f64(vmlaq_f64(vmulq_n_f64(v813, *(double *)v1262.i64), v1222, v814), v1218, v815));
            v816 = v1254;
            v817 = v1258;
            do
            {
              v818 = *(_DWORD *)(v571 + 24 * *v816 + 20);
              if (v809 <= v818)
              {
                v819 = (float64x2_t *)(v1134 + 32 * (int)(v818 + *(_DWORD *)(v1132 + 4) * v809));
                v820 = (float64x2_t *)(v580 + 48 * *v816);
                v821 = v820[1];
                v822 = v820[2];
                v823 = vsubq_f64(v819[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v813, *v820, 1), v814, v821, 1), v815, v822, 1));
                *v819 = vsubq_f64(*v819, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v813, v820->f64[0]), v814, v821.f64[0]), v815, v822.f64[0]));
                v819[1] = v823;
              }
              ++v816;
              --v817;
            }
            while (v817);
            ++v590;
          }
          while (v590 != v1200);
        }
      }
      v581 = v1122 + 1;
      if (v1122 + 1 == v1119)
        goto LABEL_105;
    }
  }
LABEL_4:
  if ((**(_BYTE **)(v1105 + 16) & 1) == 0)
    return 0;
LABEL_106:
  v824 = *(_QWORD *)(a2 + 16);
  v1164 = *(_QWORD *)(a4 + 16);
  v1142 = *(int **)(a6 + 16);
  v825 = *(_QWORD *)(a7 + 16);
  v826 = *(_QWORD *)(a8 + 16);
  v827 = *(_QWORD *)(a10 + 16);
  v828 = *(_QWORD *)(a11 + 16);
  v1239 = *(_QWORD *)(a12 + 16);
  v1235 = *(_QWORD *)(a13 + 16);
  v1283 = *(_QWORD *)(a14 + 16);
  v1279 = *(_QWORD *)(a15 + 16);
  v1275 = *(_QWORD *)(a18 + 16);
  v1271 = *(_QWORD *)(a19 + 16);
  v1267 = *(_QWORD *)(a20 + 16);
  v1263 = *(_QWORD *)(a21 + 16);
  v1231 = *(_QWORD *)(a25 + 16);
  v1227 = *(_QWORD *)(a26 + 16);
  v1259 = *(_QWORD *)(a29 + 16);
  v1255 = *(_QWORD *)(a30 + 16);
  v1251 = *(_QWORD *)(a31 + 16);
  v1247 = *(_QWORD *)(a32 + 16);
  v1223 = *(_QWORD *)(a54 + 16);
  v1219 = *(_QWORD *)(a55 + 16);
  v829 = *(_QWORD *)(a56 + 16);
  v830 = *(_QWORD *)(a57 + 16);
  v1206 = *(_QWORD *)(a67 + 16);
  v1201 = *(_QWORD *)(a68 + 16);
  v1243 = *(_QWORD *)(a69 + 16);
  v831 = *(_QWORD *)(v1092 + 16);
  v832 = *(_QWORD *)(v1093 + 16);
  v833 = *(_QWORD *)(v1094 + 16);
  v1161 = *(_QWORD *)(v1104 + 16);
  v1158 = *(_QWORD *)(v1099 + 16);
  v1154 = *(_QWORD *)(v1103 + 16);
  v1150 = *(_QWORD *)(v1102 + 16);
  v1215 = *(_QWORD *)(v1101 + 16);
  v1211 = *(_QWORD *)(v1100 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  v836 = v1201;
  v837 = v1206;
  if ((int)v1120 >= 1)
  {
    v838 = 0;
    while (v838)
    {
      v839 = v1142[v838 - 1];
      v1146 = v838;
      v1168 = v1142[v838];
      if (v839 < (int)v1168)
        goto LABEL_113;
LABEL_108:
      v838 = v1146 + 1;
      if (v1146 + 1 == v1120)
        goto LABEL_153;
    }
    v839 = 0;
    v1146 = 0;
    v1168 = *v1142;
    if ((int)v1168 <= 0)
      goto LABEL_108;
LABEL_113:
    v840 = (float64x2_t *)(v1215 + 72 * v1146);
    v1202 = v840 + 1;
    v1196 = v840 + 2;
    v1207 = v840;
    v1192 = v840 + 3;
    v1188 = 9 * v1146 + 8;
    v1184 = (float64x2_t *)(v1211 + 24 * v1146);
    v1180 = 3 * v1146 + 2;
    v841 = v839;
    v1176 = v1168 - v839;
    v1172 = (int *)(v1164 + 4 * v839);
    while (1)
    {
      v842 = *(int *)(v1164 + 4 * v841);
      v843 = *(int *)(v824 + 24 * v842);
      if (v843 >> 30 != 3)
      {
        v844 = *(int *)(v825 + 4 * v843);
        v845 = (double *)(v1243 + 24 * v842);
        _Q2 = *(_OWORD *)v845;
        _Q5 = *v1196;
        _D1 = v1207->f64[1];
        __asm { FMLA            D0, D1, V2.D[1] }
        _D7 = v845[2];
        v851 = vmlad_n_f64(_D0, _D7, v1202->f64[0]);
        __asm
        {
          FMLA            D1, D5, V2.D[1]
          FMLA            D1, D7, V5.D[1]
        }
        _Q5.f64[0] = v1192->f64[1];
        __asm { FMLA            D4, D5, V2.D[1] }
        _D2 = _D4 + _D7 * *(double *)(v1215 + 8 * v1188);
        _Q4 = *v1184;
        __asm { FMLA            D5, D1, V4.D[1] }
        *(double *)(v1161 + 8 * v844) = *(double *)(v1161 + 8 * v844)
                                      - (_Q5.f64[0]
                                       + _D2 * *(double *)(v1211 + 8 * v1180));
        v857 = v1172;
        for (j = v1176; j; --j)
        {
          v859 = *v857;
          v860 = *(int *)(v824 + 24 * v859);
          if (v860 >> 30 != 3 && v844 <= *(_DWORD *)(v825 + 4 * v860))
          {
            v861 = 8 * ((int)v860 + *(_DWORD *)(v1235 + 4) * (int)v843);
            v862 = (double *)(v1243 + 24 * v859);
            _Q4 = *(_OWORD *)v862;
            __asm { FMLA            D5, D1, V4.D[1] }
            *(double *)(v1239 + v861) = *(double *)(v1239 + v861) - (_D5 + _D2 * v862[2]);
          }
          v865 = 6 * v859;
          v866 = *(_DWORD *)(v824 + ((24 * v859) | 4));
          if (v866 >> 30 == 3)
          {
            v867 = v865 + 4;
            v868 = *(_DWORD *)(v824 + 4 * (v865 + 4));
            if (v868 >> 30 == 3)
              goto LABEL_123;
          }
          else
          {
            v870 = (double *)(v1283 + 24 * (int)(v866 + *(_DWORD *)(v1279 + 4) * v843));
            v871 = v831 + 72 * v859;
            _Q5 = *(_OWORD *)(v871 + 16);
            _Q6 = *(_OWORD *)(v871 + 32);
            _Q7 = *(float64x2_t *)(v871 + 48);
            __asm
            {
              FMLA            D16, D1, V5.D[1]
              FMLA            D4, D2, V7.D[1]
              FMLA            D5, D1, V6.D[1]
            }
            *(double *)&_Q6 = *v870 - vmlad_n_f64(_D16, _D2, _Q7.f64[0]);
            *((double *)&_Q6 + 1) = v870[1] - _D4;
            v876 = v870[2] - (*(double *)&_Q5 + _D2 * *(double *)(v871 + 64));
            *(_OWORD *)v870 = _Q6;
            v870[2] = v876;
            v867 = v865 + 4;
            v868 = *(_DWORD *)(v824 + 4 * (v865 + 4));
            if (v868 >> 30 == 3)
            {
LABEL_123:
              v869 = *(_DWORD *)(v824 + 24 * v859 + 20);
              if (v869 >> 30 != 3)
                goto LABEL_127;
              goto LABEL_117;
            }
          }
          v877 = (double *)(v1275 + 48 * (int)(v868 + *(_DWORD *)(v1271 + 4) * v843));
          v878 = v832 + 144 * v859;
          _Q17 = *(_OWORD *)(v878 + 48);
          _Q18 = *(_OWORD *)(v878 + 64);
          _Q19 = *(_OWORD *)(v878 + 80);
          _Q20 = *(_OWORD *)(v878 + 96);
          _Q21 = *(_OWORD *)(v878 + 112);
          _Q22 = *(_OWORD *)(v878 + 128);
          v885 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)v878), _D1, *(double *)&_Q17), _D2, *(double *)&_Q20);
          __asm
          {
            FMLA            D6, D1, V17.D[1]
            FMLA            D6, D2, V20.D[1]
          }
          *(double *)&_Q17 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)(v878 + 16)), _D1, *(double *)&_Q18), _D2, *(double *)&_Q21);
          __asm
          {
            FMLA            D7, D1, V18.D[1]
            FMLA            D7, D2, V21.D[1]
          }
          *(double *)&_Q18 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)(v878 + 32)), _D1, *(double *)&_Q19), _D2, *(double *)&_Q22);
          __asm
          {
            FMLA            D16, D1, V19.D[1]
            FMLA            D16, D2, V22.D[1]
          }
          *(double *)&_Q19 = *v877 - v885;
          v892 = v877[1] - _D6;
          *(double *)&v893 = v877[2] - *(double *)&_Q17;
          v894 = v877[3] - _D7;
          _Q7.f64[0] = v877[4] - *(double *)&_Q18;
          *((double *)&_Q19 + 1) = v892;
          *((double *)&v893 + 1) = v894;
          _Q7.f64[1] = v877[5] - _D16;
          *(_OWORD *)v877 = _Q19;
          *((_OWORD *)v877 + 1) = v893;
          *((float64x2_t *)v877 + 2) = _Q7;
          v869 = *(_DWORD *)(v824 + 24 * v859 + 20);
          if (v869 >> 30 != 3)
          {
LABEL_127:
            v895 = (double *)(v1267 + 16 * (int)(v869 + *(_DWORD *)(v1263 + 4) * v843));
            v896 = v833 + 8 * v865;
            _Q4 = *(_OWORD *)(v896 + 16);
            _Q5 = *(_OWORD *)(v833 + 8 * v867);
            __asm
            {
              FMLA            D3, D1, V4.D[1]
              FMLA            D3, D2, V5.D[1]
            }
            v901 = v895[1] - _D3;
            *v895 = *v895
                  - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)v896), _D1, *(double *)&_Q4), _D2, *(double *)&_Q5);
            v895[1] = v901;
          }
LABEL_117:
          ++v857;
        }
      }
      v902 = 6 * v842;
      v903 = *(int *)(v824 + ((24 * v842) | 4));
      if (v903 >> 30 != 3)
        break;
LABEL_139:
      v985 = *(int *)(v824 + 4 * (v902 + 4));
      if (v985 >> 30 != 3)
      {
        v986 = *(int *)(v827 + 4 * v985);
        v987 = (float64x2_t *)(v1154 + 48 * v986);
        v988 = (float64x2_t *)(v832 + 144 * v842);
        v989 = v988[1];
        v990 = v988[2];
        v991 = v988[3];
        v992 = v988[4];
        v993 = v988[5];
        v994 = v988[6];
        v995 = v988[7];
        _Q25 = v988[8];
        v996 = *(double *)(v1215 + 8 * v1188);
        v997 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v988, v1207->f64[0]), v991, *v1207, 1), v994, v1202->f64[0]);
        v998 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v989, v1207->f64[0]), v992, *v1207, 1), v995, v1202->f64[0]);
        v999 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, v1207->f64[0]), v993, *v1207, 1), _Q25, v1202->f64[0]);
        v1000 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v988, *v1202, 1), v991, v1196->f64[0]), v994, *v1196, 1);
        v1001 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v989, *v1202, 1), v992, v1196->f64[0]), v995, *v1196, 1);
        v1002 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v990, *v1202, 1), v993, v1196->f64[0]), _Q25, *v1196, 1);
        v1003 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v988, v1192->f64[0]), v991, *v1192, 1), v994, v996);
        _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v989, v1192->f64[0]), v992, *v1192, 1), v995, v996);
        v1004 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, v1192->f64[0]), v993, *v1192, 1), _Q25, v996);
        v991.f64[0] = *(float64_t *)(v1211 + 8 * v1180);
        v1005 = vsubq_f64(v987[2], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v999, v1184->f64[0]), v1002, *v1184, 1), v1004, v991.f64[0]));
        v1006 = vsubq_f64(v987[1], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v998, v1184->f64[0]), v1001, *v1184, 1), _Q7, v991.f64[0]));
        *v987 = vsubq_f64(*v987, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v997, v1184->f64[0]), v1000, *v1184, 1), v1003, v991.f64[0]));
        v987[1] = v1006;
        v987[2] = v1005;
        v1007 = v1172;
        v1008 = v1176;
        do
        {
          v1009 = *v1007;
          v1010 = 6 * v1009 + 4;
          v1011 = *(int *)(v824 + 4 * v1010);
          if (v1011 >> 30 != 3 && v986 <= *(_DWORD *)(v827 + 4 * v1011))
          {
            v1012 = (float64x2_t *)(v832 + 144 * v1009);
            v1013 = v1012[1];
            v1014 = v1012[2];
            v1015 = v1012[3];
            v1016 = (float64x2_t *)(v1223 + 288 * ((int)v1011 + *(_DWORD *)(v1219 + 4) * (int)v985));
            v1018 = v1012[4];
            v1017 = v1012[5];
            v1019 = v1012[6];
            v1020 = v1012[7];
            v1021 = v1012[8];
            v1022 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1012->f64[0]), v1000, v1015.f64[0]), v1003, v1019.f64[0]);
            v1023 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1012->f64[0]), v1001, v1015.f64[0]), _Q7, v1019.f64[0]);
            v1024 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1012->f64[0]), v1002, v1015.f64[0]), v1004, v1019.f64[0]);
            v1025 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, *v1012, 1), v1000, v1015, 1), v1003, v1019, 1);
            v1026 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, *v1012, 1), v1001, v1015, 1), _Q7, v1019, 1);
            v1027 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, *v1012, 1), v1002, v1015, 1), v1004, v1019, 1);
            v1028 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1013.f64[0]), v1000, v1018.f64[0]), v1003, v1020.f64[0]);
            v1029 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1013.f64[0]), v1001, v1018.f64[0]), _Q7, v1020.f64[0]);
            v1030 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1013.f64[0]), v1002, v1018.f64[0]), v1004, v1020.f64[0]);
            v1031 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, v1013, 1), v1000, v1018, 1), v1003, v1020, 1);
            v1032 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, v1013, 1), v1001, v1018, 1), _Q7, v1020, 1);
            v1033 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, v1013, 1), v1002, v1018, 1), v1004, v1020, 1);
            v1034 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1014.f64[0]), v1000, v1017.f64[0]), v1003, v1021.f64[0]);
            v1035 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1014.f64[0]), v1001, v1017.f64[0]), _Q7, v1021.f64[0]);
            v1036 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1014.f64[0]), v1002, v1017.f64[0]), v1004, v1021.f64[0]);
            v1037 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, v1014, 1), v1000, v1017, 1), v1003, v1021, 1);
            v1038 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, v1014, 1), v1001, v1017, 1), _Q7, v1021, 1);
            v1039 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, v1014, 1), v1002, v1017, 1), v1004, v1021, 1);
            v1040 = vsubq_f64(v1016[2], v1024);
            v1041 = vsubq_f64(v1016[1], v1023);
            v1042 = vsubq_f64(v1016[5], v1027);
            v1043 = vsubq_f64(v1016[4], v1026);
            v1044 = vsubq_f64(v1016[3], v1025);
            v1045 = vsubq_f64(v1016[8], v1030);
            v1046 = vsubq_f64(v1016[7], v1029);
            v1047 = vsubq_f64(v1016[6], v1028);
            v1048 = vsubq_f64(v1016[11], v1033);
            v1049 = vsubq_f64(v1016[10], v1032);
            _Q25 = vsubq_f64(v1016[9], v1031);
            v1050 = vsubq_f64(v1016[14], v1036);
            v1051 = vsubq_f64(v1016[13], v1035);
            v1052 = vsubq_f64(v1016[12], v1034);
            v1053 = v1016[17];
            v1054 = vsubq_f64(v1016[15], v1037);
            *v1016 = vsubq_f64(*v1016, v1022);
            v1016[1] = v1041;
            v1016[2] = v1040;
            v1016[3] = v1044;
            v1016[4] = v1043;
            v1016[5] = v1042;
            v1016[6] = v1047;
            v1016[7] = v1046;
            v1016[8] = v1045;
            v1016[9] = _Q25;
            v1016[10] = v1049;
            v1016[11] = v1048;
            v1016[12] = v1052;
            v1016[13] = v1051;
            v1016[14] = v1050;
            v1016[15] = v1054;
            v1016[16] = vsubq_f64(v1016[16], v1038);
            v1016[17] = vsubq_f64(v1053, v1039);
          }
          v1055 = *(_DWORD *)(v824 + 24 * v1009 + 20);
          if (v1055 >> 30 != 3)
          {
            v1056 = (float64x2_t *)(v829 + 96 * (int)(v1055 + *(_DWORD *)(v830 + 4) * v985));
            v1057 = v1056[4];
            v1058 = (float64x2_t *)(v833 + 48 * v1009);
            v1059 = v1058[1];
            _Q25 = *(float64x2_t *)(v833 + 8 * v1010);
            v1060 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, *v1058, 1), v1001, v1059, 1), _Q7, _Q25, 1);
            v1061 = vsubq_f64(v1056[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1058->f64[0]), v1002, v1059.f64[0]), v1004, _Q25.f64[0]));
            v1062 = vsubq_f64(v1056[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1058->f64[0]), v1001, v1059.f64[0]), _Q7, _Q25.f64[0]));
            v1063 = vsubq_f64(v1056[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, *v1058, 1), v1002, v1059, 1), v1004, _Q25, 1));
            v1064 = vsubq_f64(v1056[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, *v1058, 1), v1000, v1059, 1), v1003, _Q25, 1));
            *v1056 = vsubq_f64(*v1056, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1058->f64[0]), v1000, v1059.f64[0]), v1003, _Q25.f64[0]));
            v1056[1] = v1062;
            v1056[2] = v1061;
            v1056[3] = v1064;
            v1056[4] = vsubq_f64(v1057, v1060);
            v1056[5] = v1063;
          }
          ++v1007;
          --v1008;
        }
        while (v1008);
      }
      v1065 = *(int *)(v824 + 4 * v902 + 20);
      if (v1065 >> 30 != 3)
      {
        v1066 = *(int *)(v828 + 4 * v1065);
        v1067 = (float64x2_t *)(v833 + 8 * v902);
        v1068 = v1067[1];
        v1069 = *(float64x2_t *)(v833 + 8 * (v902 + 4));
        _Q7 = *v1196;
        v1070 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1067, v1207->f64[0]), v1068, *v1207, 1), v1069, v1202->f64[0]);
        v1071 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v1067, *v1202, 1), v1068, v1196->f64[0]), v1069, *v1196, 1);
        v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1067, v1192->f64[0]), v1068, *v1192, 1), v1069, *(double *)(v1215 + 8 * v1188));
        *(float64x2_t *)(v1150 + 16 * v1066) = vsubq_f64(*(float64x2_t *)(v1150 + 16 * v1066), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1070, v1184->f64[0]), v1071, *v1184, 1), v1072, *(double *)(v1211 + 8 * v1180)));
        v1073 = v1172;
        v1074 = v1176;
        do
        {
          v1075 = *(int *)(v824 + 24 * *v1073 + 20);
          if (v1075 >> 30 != 3 && v1066 <= *(_DWORD *)(v828 + 4 * v1075))
          {
            v1076 = (float64x2_t *)(v837 + 32 * ((int)v1075 + *(_DWORD *)(v836 + 4) * (int)v1065));
            v1077 = (float64x2_t *)(v833 + 48 * *v1073);
            v1078 = v1077[1];
            _Q7 = v1077[2];
            v1079 = vsubq_f64(v1076[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v1070, *v1077, 1), v1071, v1078, 1), v1072, _Q7, 1));
            *v1076 = vsubq_f64(*v1076, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1070, v1077->f64[0]), v1071, v1078.f64[0]), v1072, _Q7.f64[0]));
            v1076[1] = v1079;
          }
          ++v1073;
          --v1074;
        }
        while (v1074);
      }
      if (++v841 == v1168)
        goto LABEL_108;
    }
    v904 = *(int *)(v826 + 4 * v903);
    v905 = (float64x2_t *)(v1158 + 24 * v904);
    _Q7.f64[0] = v905[1].f64[0];
    v906 = v831 + 72 * v842;
    _Q16 = *(int8x16_t *)(v906 + 32);
    _Q17 = *(float64x2_t *)(v906 + 48);
    _Q18 = *v1196;
    v910 = *(double *)(v1215 + 8 * v1188);
    v911 = (float64x2_t)vextq_s8(*(int8x16_t *)(v906 + 16), _Q16, 8uLL);
    v912 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v906, v1207->f64[0]), v911, *v1207, 1), _Q17, v1202->f64[0]);
    _D2 = v1207->f64[1];
    __asm { FMLA            D1, D2, V16.D[1] }
    _D22 = *(double *)(v906 + 64);
    v916 = vmlad_n_f64(_D1, _D22, v1202->f64[0]);
    v917 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*(float64x2_t *)v906, *v1202, 1), v911, v1196->f64[0]), _Q17, *v1196, 1);
    __asm
    {
      FMLA            D3, D18, V16.D[1]
      FMLA            D3, D22, V18.D[1]
    }
    v920 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v906, v1192->f64[0]), v911, *v1192, 1), _Q17, v910);
    _Q17.f64[0] = v1192->f64[1];
    __asm { FMLA            D5, D17, V16.D[1] }
    _D5 = _D5 + _D22 * v910;
    _Q16 = *v1184;
    _Q17.f64[0] = *(float64_t *)(v1211 + 8 * v1180);
    v924 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, v1184->f64[0]), v917, *v1184, 1), v920, _Q17.f64[0]);
    __asm { FMLA            D19, D3, V16.D[1] }
    _Q16.f64[0] = _D19 + _D5 * _Q17.f64[0];
    _Q7 = vsubq_f64(_Q7, _Q16);
    *v905 = vsubq_f64(*v905, v924);
    v905[1].f64[0] = _Q7.f64[0];
    v926 = v1172;
    v927 = v1176;
    while (1)
    {
      v928 = *v926;
      v929 = *(int *)(v824 + 24 * v928 + 4);
      if (v929 >> 30 != 3 && v904 <= *(_DWORD *)(v826 + 4 * v929))
      {
        v930 = v1231 + 72 * ((int)v929 + *(_DWORD *)(v1227 + 4) * (int)v903);
        v931 = *(float64x2_t *)(v930 + 16);
        v932 = *(int64x2_t *)(v930 + 32);
        v924.f64[0] = *(float64_t *)(v930 + 64);
        v933 = (float64x2_t *)(v831 + 72 * v928);
        _Q19 = *v933;
        _Q20 = v933[1];
        _Q21 = v933[2];
        _Q22 = v933[3];
        v938 = v933[4].f64[0];
        v939 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, v933->f64[0]), v917, _Q20, 1), v920, _Q22.f64[0]);
        __asm { FMLA            D25, D3, V20.D[1] }
        _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], _D5, _Q22.f64[0]);
        v940 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v912, *v933, 1), v917, _Q21.f64[0]), v920, _Q22, 1);
        __asm { FMLA            D19, D5, V22.D[1] }
        v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, _Q20.f64[0]), v917, _Q21, 1), v920, v938);
        __asm { FMLA            D20, D3, V21.D[1] }
        _Q20.f64[0] = _Q20.f64[0] + _D5 * v938;
        v911 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v931, (int8x16_t)v932, 8uLL), v940);
        v924 = vsubq_f64(v924, _Q20);
        v942 = vsubq_f64(*(float64x2_t *)(v930 + 48), v941);
        _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v931, _Q25), (int64x2_t)v911);
        *(float64x2_t *)v930 = vsubq_f64(*(float64x2_t *)v930, v939);
        *(float64x2_t *)(v930 + 16) = _Q7;
        *(int8x16_t *)(v930 + 32) = vextq_s8((int8x16_t)v911, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v932, 1), _Q19), 8uLL);
        *(float64x2_t *)(v930 + 48) = v942;
        *(float64_t *)(v930 + 64) = v924.f64[0];
      }
      v943 = 6 * v928 + 4;
      v944 = *(_DWORD *)(v824 + 4 * v943);
      if (v944 >> 30 == 3)
      {
        v945 = *(_DWORD *)(v824 + 24 * v928 + 20);
        if (v945 >> 30 != 3)
          goto LABEL_138;
      }
      else
      {
        v946 = v1259 + 144 * (int)(v944 + *(_DWORD *)(v1255 + 4) * v903);
        v947 = *(float64x2_t *)(v946 + 16);
        v948 = *(int64x2_t *)(v946 + 32);
        v949 = *(float64x2_t *)(v946 + 64);
        v950 = *(int64x2_t *)(v946 + 80);
        v951 = *(float64x2_t *)(v946 + 112);
        v952 = *(int64x2_t *)(v946 + 128);
        v953 = (float64x2_t *)(v832 + 144 * v928);
        _Q28 = *v953;
        _Q29 = v953[1];
        _Q24 = v953[2];
        _Q30 = v953[3];
        _Q31 = v953[4];
        _Q26 = v953[5];
        _Q8 = v953[6];
        _Q9 = v953[7];
        _Q27 = v953[8];
        v963 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, v953->f64[0]), v917, _Q30.f64[0]), v920, _Q8.f64[0]);
        _Q25.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, v953->f64[0]), _D3, _Q30.f64[0]), _D5, _Q8.f64[0]);
        v964 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, *v953, 1), v917, _Q30, 1), v920, _Q8, 1);
        __asm
        {
          FMLA            D28, D3, V30.D[1]
          FMLA            D28, D5, V8.D[1]
        }
        v965 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, _Q29.f64[0]), v917, _Q31.f64[0]), v920, _Q9.f64[0]);
        _Q8.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, _Q29.f64[0]), _D3, _Q31.f64[0]), _D5, _Q9.f64[0]);
        v966 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, _Q29, 1), v917, _Q31, 1), v920, _Q9, 1);
        __asm
        {
          FMLA            D29, D3, V31.D[1]
          FMLA            D29, D5, V9.D[1]
        }
        v967 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, _Q24.f64[0]), v917, _Q26.f64[0]), v920, _Q27.f64[0]);
        _Q9.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, _Q24.f64[0]), _D3, _Q26.f64[0]), _D5, _Q27.f64[0]);
        v968 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, _Q24, 1), v917, _Q26, 1), v920, _Q27, 1);
        __asm
        {
          FMLA            D24, D3, V26.D[1]
          FMLA            D24, D5, V27.D[1]
        }
        v969 = (float64x2_t)vextq_s8((int8x16_t)v947, (int8x16_t)v948, 8uLL);
        v970 = (int64x2_t)vsubq_f64(v947, _Q25);
        v971 = vsubq_f64(*(float64x2_t *)v946, v963);
        v972 = (int64x2_t)vsubq_f64(v969, v964);
        v973 = vsubq_f64(*(float64x2_t *)(v946 + 48), v965);
        _Q25 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v949, (int8x16_t)v950, 8uLL), v966);
        v911 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v950, 1), _Q29);
        v974 = vsubq_f64(*(float64x2_t *)(v946 + 96), v967);
        v975 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v951, (int8x16_t)v952, 8uLL), v968);
        *(float64x2_t *)v946 = v971;
        *(int64x2_t *)(v946 + 16) = vzip1q_s64(v970, v972);
        *(int8x16_t *)(v946 + 32) = vextq_s8((int8x16_t)v972, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v948, 1), _Q28), 8uLL);
        *(float64x2_t *)(v946 + 48) = v973;
        v976 = vzip1q_s64((int64x2_t)vsubq_f64(v949, _Q8), (int64x2_t)_Q25);
        v924 = (float64x2_t)vextq_s8((int8x16_t)_Q25, (int8x16_t)v911, 8uLL);
        *(int64x2_t *)(v946 + 64) = v976;
        *(float64x2_t *)(v946 + 80) = v924;
        _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v951, _Q9), v975);
        *(float64x2_t *)(v946 + 96) = v974;
        *(float64x2_t *)(v946 + 112) = _Q7;
        *(int8x16_t *)(v946 + 128) = vextq_s8((int8x16_t)v975, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v952, 1), _Q24), 8uLL);
        v945 = *(_DWORD *)(v824 + 24 * v928 + 20);
        if (v945 >> 30 != 3)
        {
LABEL_138:
          v977 = v1251 + 48 * (int)(v945 + *(_DWORD *)(v1247 + 4) * v903);
          v978 = *(float64x2_t *)(v977 + 16);
          v979 = *(int64x2_t *)(v977 + 32);
          v980 = (float64x2_t *)(v833 + 48 * v928);
          _Q17 = *v980;
          _Q18 = v980[1];
          _Q19 = *(float64x2_t *)(v833 + 8 * v943);
          v984 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, v980->f64[0]), v917, _Q18.f64[0]), v920, _Q19.f64[0]);
          v911.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, v980->f64[0]), _D3, _Q18.f64[0]), _D5, _Q19.f64[0]);
          __asm
          {
            FMLA            D17, D3, V18.D[1]
            FMLA            D17, D5, V19.D[1]
          }
          v924 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v978, (int8x16_t)v979, 8uLL), vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, *v980, 1), v917, _Q18, 1), v920, _Q19, 1));
          _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v978, v911), (int64x2_t)v924);
          *(float64x2_t *)v977 = vsubq_f64(*(float64x2_t *)v977, v984);
          *(float64x2_t *)(v977 + 16) = _Q7;
          *(int8x16_t *)(v977 + 32) = vextq_s8((int8x16_t)v924, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v979, 1), _Q17), 8uLL);
        }
      }
      ++v926;
      if (!--v927)
        goto LABEL_139;
    }
  }
LABEL_153:
  *(_QWORD *)(v1102 + 24) |= 1uLL;
  *(_QWORD *)(v1103 + 24) |= 1uLL;
  *(_QWORD *)(v1099 + 24) |= 1uLL;
  *(_QWORD *)(v1104 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a25 + 24) |= 1uLL;
  *(_QWORD *)(a20 + 24) |= 1uLL;
  *(_QWORD *)(a18 + 24) |= 1uLL;
  *(_QWORD *)(a67 + 24) |= 1uLL;
  *(_QWORD *)(a56 + 24) |= 1uLL;
  *(_QWORD *)(a54 + 24) |= 1uLL;
  *(_QWORD *)(a14 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

