void sub_2399E02B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  v43 = *(void **)v40;
  if (*(_QWORD *)v40)
  {
    *(_QWORD *)(v40 + 8) = v43;
    operator delete(v43);
  }
  *(_QWORD *)(a14 + 8) = v40;
  if (__p)
  {
    operator delete(__p);
    v44 = a39;
    if (!a39)
    {
LABEL_5:
      v45 = *(void **)(v41 - 248);
      if (!v45)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v44 = a39;
    if (!a39)
      goto LABEL_5;
  }
  operator delete(v44);
  v45 = *(void **)(v41 - 248);
  if (!v45)
  {
LABEL_6:
    v46 = *(void **)(v41 - 224);
    if (!v46)
    {
LABEL_12:
      v47 = *(void **)(v41 - 192);
      if (v47)
      {
        operator delete(v47);
        if (!a35)
        {
LABEL_14:
          v48 = *(void **)(v41 - 160);
          if (!v48)
            goto LABEL_15;
          goto LABEL_18;
        }
      }
      else if (!a35)
      {
        goto LABEL_14;
      }
      operator delete(a35);
      v48 = *(void **)(v41 - 160);
      if (!v48)
      {
LABEL_15:
        sub_239416DA0(v41 - 136);
        _Unwind_Resume(a1);
      }
LABEL_18:
      operator delete(v48);
      sub_239416DA0(v41 - 136);
      _Unwind_Resume(a1);
    }
LABEL_11:
    *(_QWORD *)(v41 - 216) = v46;
    operator delete(v46);
    goto LABEL_12;
  }
LABEL_10:
  *(_QWORD *)(v41 - 240) = v45;
  operator delete(v45);
  v46 = *(void **)(v41 - 224);
  if (!v46)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_2399E0540(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v14 = 0;
  *a2 = sub_2399E2F18((uint64_t)(a1 + 1), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v5 = (uint64_t *)a1[1];
  v6 = (uint64_t *)a1[2];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_2399E061C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_239EBEB78();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399E0634(uint64_t *a1, uint64_t a2, char **a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  size_t v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  _QWORD *v32;
  void **v33;
  void **v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  int8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  void ***v68;
  void **v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void **v73;
  void **v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  void *v79;
  void *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  void **v87;
  void **v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  size_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int v104;
  char **v105;
  unsigned int v106;
  void *v107;
  int8x8_t v108;
  void *__p;
  void *v110[2];
  __int128 v111;
  __int128 v112;
  void *v113;
  int8x8_t v114;
  void *v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  unsigned int *v123;

  v121 = 0;
  v122 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v8 = *a1;
  v7 = a1[1];
  v9 = sub_2399E12AC(a1, v6 >> 4, &v120, &v117);
  if ((v9 & 1) == 0)
    goto LABEL_184;
  v102 = v6 >> 4;
  v10 = v7 - v8;
  v11 = (v10 >> 4);
  sub_2399E4034((uint64_t)&v113, v11);
  v12 = v10 >> 4;
  for (LODWORD(v110[0]) = 0; LODWORD(v110[0]) < v12; ++LODWORD(v110[0]))
    sub_239456168((uint64_t)&v113, (unsigned int *)v110, v110);
  v105 = a3;
  v111 = 0u;
  v112 = 0u;
  *(_OWORD *)v110 = 0u;
  v13 = (v6 >> 4);
  sub_2399E413C((uint64_t)&v107, v13);
  if (v11)
  {
    v14 = (char *)operator new(16 * v11);
    v15 = &v14[16 * v11];
    v16 = v14;
    bzero(v14, 16 * v11);
    v17 = v16;
    v18 = &v16[16 * v11];
    v103 = (uint64_t)v17;
    if (v13)
      goto LABEL_6;
LABEL_146:
    v97 = 0;
    v98 = 0;
    v20 = 0;
    v99 = (uint64_t)v18;
    v100 = (uint64_t)v15;
    v101 = v9;
    if (v116)
      goto LABEL_7;
LABEL_147:
    v21 = 0;
    goto LABEL_148;
  }
  v15 = 0;
  v18 = 0;
  v103 = 0;
  if (!v13)
    goto LABEL_146;
LABEL_6:
  v19 = 16 * v13;
  v13 = (size_t)operator new(16 * v13);
  bzero((void *)v13, v19);
  v20 = (char *)operator new(v19);
  v97 = v13 + v19;
  v98 = &v20[v19];
  bzero(v20, v19);
  v99 = (uint64_t)v18;
  v100 = (uint64_t)v15;
  v101 = v9;
  if (!v116)
    goto LABEL_147;
LABEL_7:
  v21 = 0;
  v22 = 0;
  v23 = *((_QWORD *)&v112 + 1);
  do
  {
    if (v23)
      goto LABEL_44;
    v24 = (char *)v110[1];
    v25 = (((_QWORD)v111 - (unint64_t)v110[1]) << 7) - 1;
    v26 = (void **)v115;
    if ((void *)v111 == v110[1])
      v25 = 0;
    v27 = v112;
    if (v25 == (_QWORD)v112)
    {
      sub_2394F0374((uint64_t)v110);
      v28 = *((_QWORD *)&v112 + 1);
      v24 = (char *)v110[1];
      v27 = v112 + *((_QWORD *)&v112 + 1);
    }
    else
    {
      v28 = 0;
    }
    *(_DWORD *)(*(_QWORD *)&v24[(v27 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v27 & 0x3FF)) = *((_DWORD *)v26 + 4);
    *((_QWORD *)&v112 + 1) = v28 + 1;
    v29 = v114;
    v30 = (unint64_t)v26[1];
    v31 = (uint8x8_t)vcnt_s8(v114);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      if (v30 >= *(_QWORD *)&v114)
        v30 %= *(_QWORD *)&v114;
    }
    else
    {
      v30 &= *(_QWORD *)&v114 - 1;
    }
    v32 = *v26;
    v33 = (void **)*((_QWORD *)v113 + v30);
    do
    {
      v34 = v33;
      v33 = (void **)*v33;
    }
    while (v33 != v26);
    if (v34 != &v115)
    {
      v35 = (unint64_t)v34[1];
      if (v31.u32[0] > 1uLL)
      {
        if (v35 >= *(_QWORD *)&v114)
          v35 %= *(_QWORD *)&v114;
      }
      else
      {
        v35 &= *(_QWORD *)&v114 - 1;
      }
      if (v35 == v30)
        goto LABEL_34;
    }
    if (!v32)
      goto LABEL_33;
    v36 = v32[1];
    if (v31.u32[0] > 1uLL)
    {
      if (v36 >= *(_QWORD *)&v114)
        v36 %= *(_QWORD *)&v114;
    }
    else
    {
      v36 &= *(_QWORD *)&v114 - 1;
    }
    if (v36 != v30)
    {
LABEL_33:
      *((_QWORD *)v113 + v30) = 0;
      v32 = *v26;
LABEL_34:
      if (!v32)
        goto LABEL_41;
    }
    v37 = v32[1];
    if (v31.u32[0] > 1uLL)
    {
      if (v37 >= *(_QWORD *)&v29)
        v37 %= *(_QWORD *)&v29;
    }
    else
    {
      v37 &= *(_QWORD *)&v29 - 1;
    }
    if (v37 != v30)
    {
      *((_QWORD *)v113 + v37) = v34;
      v32 = *v26;
    }
LABEL_41:
    *v34 = v32;
    *v26 = 0;
    --v116;
    operator delete(v26);
    v23 = *((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      while (1)
      {
LABEL_44:
        v39 = *(unsigned int *)(*(_QWORD *)((char *)v110[1] + (((unint64_t)v112 >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * (v112 & 0x3FF));
        *(_QWORD *)&v112 = v112 + 1;
        *((_QWORD *)&v112 + 1) = v23 - 1;
        if ((unint64_t)v112 >= 0x800)
        {
          operator delete(*(void **)v110[1]);
          v110[1] = (char *)v110[1] + 8;
          *(_QWORD *)&v112 = v112 - 1024;
        }
        v40 = 0;
        v104 = v22 + 1;
        v41 = (4 * v39);
        v42 = v103 + 16 * v22;
        do
        {
          v106 = 0;
          v43 = *(unsigned int *)(*a1 + 16 * v39 + 4 * v40);
          v106 = *(_DWORD *)(*a1 + 16 * v39 + 4 * v40);
          if (!*(_QWORD *)&v108)
            goto LABEL_69;
          v44 = (uint8x8_t)vcnt_s8(v108);
          v44.i16[0] = vaddlv_u8(v44);
          if (v44.u32[0] > 1uLL)
          {
            v45 = v43;
            if (*(_QWORD *)&v108 <= v43)
              v45 = v43 % *(_QWORD *)&v108;
          }
          else
          {
            v45 = (v108.i32[0] - 1) & v43;
          }
          v46 = (uint64_t **)*((_QWORD *)v107 + v45);
          if (!v46 || (v47 = *v46) == 0)
          {
LABEL_69:
            v123 = &v106;
            *((_DWORD *)sub_2394F126C((uint64_t)&v107, &v106, (uint64_t)&unk_239EC6E98, &v123) + 5) = v21;
            v50 = 16 * v21;
            v51 = v21;
            v52 = 16 * v106;
            *(_OWORD *)(v13 + v50) = *(_OWORD *)(*(_QWORD *)a2 + v52);
            *(_OWORD *)&v20[v50] = *(_OWORD *)&(*v105)[v52];
            ++v21;
            *(_DWORD *)(v42 + 4 * v40) = v51;
            v53 = v117[v40 + v41];
            if ((_DWORD)v53 == -1)
              goto LABEL_48;
            goto LABEL_70;
          }
          if (v44.u32[0] < 2uLL)
          {
            while (1)
            {
              v49 = v47[1];
              if (v49 == v43)
              {
                if (*((_DWORD *)v47 + 4) == (_DWORD)v43)
                  goto LABEL_91;
              }
              else if ((v49 & (*(_QWORD *)&v108 - 1)) != v45)
              {
                goto LABEL_69;
              }
              v47 = (uint64_t *)*v47;
              if (!v47)
                goto LABEL_69;
            }
          }
          while (1)
          {
            v48 = v47[1];
            if (v48 == v43)
              break;
            if (v48 >= *(_QWORD *)&v108)
              v48 %= *(_QWORD *)&v108;
            if (v48 != v45)
              goto LABEL_69;
LABEL_59:
            v47 = (uint64_t *)*v47;
            if (!v47)
              goto LABEL_69;
          }
          if (*((_DWORD *)v47 + 4) != (_DWORD)v43)
            goto LABEL_59;
LABEL_91:
          *(_DWORD *)(v42 + 4 * v40) = *((_DWORD *)v47 + 5);
          v53 = v117[v40 + v41];
          if ((_DWORD)v53 == -1)
            goto LABEL_48;
LABEL_70:
          v54 = v114;
          if (!*(_QWORD *)&v114)
            goto LABEL_48;
          v55 = v53 >> 2;
          v56 = (uint8x8_t)vcnt_s8(v114);
          v56.i16[0] = vaddlv_u8(v56);
          if (v56.u32[0] > 1uLL)
          {
            v57 = v53 >> 2;
            if (*(_QWORD *)&v114 <= v55)
              v57 = v55 % *(_QWORD *)&v114;
          }
          else
          {
            v57 = (v114.i32[0] - 1) & v55;
          }
          v58 = (uint64_t **)*((_QWORD *)v113 + v57);
          if (!v58)
            goto LABEL_48;
          v59 = *v58;
          if (!v59)
            goto LABEL_48;
          if (v56.u32[0] < 2uLL)
          {
            while (1)
            {
              v61 = v59[1];
              if (v61 == v55)
              {
                if (*((_DWORD *)v59 + 4) == (_DWORD)v55)
                  goto LABEL_93;
              }
              else if ((v61 & (*(_QWORD *)&v114 - 1)) != v57)
              {
                goto LABEL_48;
              }
              v59 = (uint64_t *)*v59;
              if (!v59)
                goto LABEL_48;
            }
          }
          while (2)
          {
            v60 = v59[1];
            if (v60 != v55)
            {
              if (v60 >= *(_QWORD *)&v114)
                v60 %= *(_QWORD *)&v114;
              if (v60 != v57)
                goto LABEL_48;
              goto LABEL_80;
            }
            if (*((_DWORD *)v59 + 4) != (_DWORD)v55)
            {
LABEL_80:
              v59 = (uint64_t *)*v59;
              if (!v59)
                goto LABEL_48;
              continue;
            }
            break;
          }
LABEL_93:
          v62 = (char *)v110[1];
          if ((void *)v111 == v110[1])
            v63 = 0;
          else
            v63 = (((_QWORD)v111 - (unint64_t)v110[1]) << 7) - 1;
          v64 = *((_QWORD *)&v112 + 1);
          v65 = *((_QWORD *)&v112 + 1) + v112;
          if (v63 == *((_QWORD *)&v112 + 1) + (_QWORD)v112)
          {
            sub_2394F0374((uint64_t)v110);
            v64 = *((_QWORD *)&v112 + 1);
            v62 = (char *)v110[1];
            v65 = v112 + *((_QWORD *)&v112 + 1);
            v54 = v114;
          }
          *(_DWORD *)(*(_QWORD *)&v62[(v65 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v65 & 0x3FF)) = v55;
          *((_QWORD *)&v112 + 1) = v64 + 1;
          if (v54)
          {
            v66 = (uint8x8_t)vcnt_s8(v54);
            v66.i16[0] = vaddlv_u8(v66);
            if (v66.u32[0] > 1uLL)
            {
              v67 = v55;
              if (*(_QWORD *)&v54 <= v55)
                v67 = v55 % *(_QWORD *)&v54;
            }
            else
            {
              v67 = (v54.i32[0] - 1) & v55;
            }
            v68 = (void ***)*((_QWORD *)v113 + v67);
            if (v68)
            {
              v69 = *v68;
              if (*v68)
              {
                v70 = *(_QWORD *)&v54 - 1;
                if (v66.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v71 = (unint64_t)v69[1];
                    if (v71 == v55)
                    {
                      if (*((_DWORD *)v69 + 4) == (_DWORD)v55)
                        goto LABEL_119;
                    }
                    else if ((v71 & v70) != v67)
                    {
                      goto LABEL_48;
                    }
                    v69 = (void **)*v69;
                    if (!v69)
                      goto LABEL_48;
                  }
                }
                do
                {
                  v72 = (unint64_t)v69[1];
                  if (v72 == v55)
                  {
                    if (*((_DWORD *)v69 + 4) == (_DWORD)v55)
                    {
LABEL_119:
                      if (v66.u32[0] > 1uLL)
                      {
                        if (*(_QWORD *)&v54 <= v55)
                          v55 %= *(_QWORD *)&v54;
                      }
                      else
                      {
                        v55 &= v70;
                      }
                      v73 = (void **)*((_QWORD *)v113 + v55);
                      do
                      {
                        v74 = v73;
                        v73 = (void **)*v73;
                      }
                      while (v73 != v69);
                      if (v74 == &v115)
                        goto LABEL_136;
                      v75 = (unint64_t)v74[1];
                      if (v66.u32[0] > 1uLL)
                      {
                        if (v75 >= *(_QWORD *)&v54)
                          v75 %= *(_QWORD *)&v54;
                      }
                      else
                      {
                        v75 &= v70;
                      }
                      if (v75 != v55)
                      {
LABEL_136:
                        if (!*v69)
                          goto LABEL_137;
                        v76 = *((_QWORD *)*v69 + 1);
                        if (v66.u32[0] > 1uLL)
                        {
                          if (v76 >= *(_QWORD *)&v54)
                            v76 %= *(_QWORD *)&v54;
                        }
                        else
                        {
                          v76 &= v70;
                        }
                        if (v76 != v55)
LABEL_137:
                          *((_QWORD *)v113 + v55) = 0;
                      }
                      v77 = *v69;
                      if (*v69)
                      {
                        v78 = v77[1];
                        if (v66.u32[0] > 1uLL)
                        {
                          if (v78 >= *(_QWORD *)&v54)
                            v78 %= *(_QWORD *)&v54;
                        }
                        else
                        {
                          v78 &= v70;
                        }
                        if (v78 != v55)
                        {
                          *((_QWORD *)v113 + v78) = v74;
                          v77 = *v69;
                        }
                      }
                      *v74 = v77;
                      *v69 = 0;
                      --v116;
                      operator delete(v69);
                      break;
                    }
                  }
                  else
                  {
                    if (v72 >= *(_QWORD *)&v54)
                      v72 %= *(_QWORD *)&v54;
                    if (v72 != v67)
                      break;
                  }
                  v69 = (void **)*v69;
                }
                while (v69);
              }
            }
          }
LABEL_48:
          ++v40;
        }
        while (v40 != 4);
        v23 = *((_QWORD *)&v112 + 1);
        v38 = v104;
        LODWORD(v22) = v104;
        if (!*((_QWORD *)&v112 + 1))
          goto LABEL_8;
      }
    }
    v38 = v22;
LABEL_8:
    v23 = 0;
    v22 = v38;
  }
  while (v116);
LABEL_148:
  v79 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v79;
    operator delete(v79);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *a1 = v103;
  a1[1] = v99;
  a1[2] = v100;
  v80 = *(void **)a2;
  v9 = v101;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v80;
    operator delete(v80);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v97;
  *(_QWORD *)(a2 + 16) = v97;
  v81 = *v105;
  if (*v105)
  {
    v105[1] = v81;
    operator delete(v81);
    *v105 = 0;
    v105[1] = 0;
    v105[2] = 0;
  }
  *v105 = v20;
  v105[1] = v98;
  v105[2] = v98;
  if (v21 != (_DWORD)v102)
  {
    v82 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
    if (v21 <= v82)
    {
      if (v21 < v82)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16 * v21;
    }
    else
    {
      sub_239932734((char **)a2, v21 - v82);
      v20 = *v105;
    }
    v83 = (v105[1] - v20) >> 4;
    if (v21 <= v83)
    {
      if (v21 < v83)
        v105[1] = &v20[16 * v21];
    }
    else
    {
      sub_239932734(v105, v21 - v83);
    }
  }
  v84 = __p;
  if (__p)
  {
    do
    {
      v85 = (_QWORD *)*v84;
      operator delete(v84);
      v84 = v85;
    }
    while (v85);
  }
  v86 = v107;
  v107 = 0;
  if (v86)
    operator delete(v86);
  v87 = (void **)v110[1];
  v88 = (void **)v111;
  *((_QWORD *)&v112 + 1) = 0;
  v89 = v111 - (unint64_t)v110[1];
  if ((unint64_t)v111 - (unint64_t)v110[1] >= 0x11)
  {
    do
    {
      operator delete(*v87);
      v88 = (void **)v111;
      v87 = (void **)((char *)v110[1] + 8);
      v110[1] = v87;
      v89 = v111 - (_QWORD)v87;
    }
    while ((_QWORD)v111 - (_QWORD)v87 > 0x10uLL);
  }
  v90 = v89 >> 3;
  if (v90 == 1)
  {
    v91 = 512;
  }
  else
  {
    if (v90 != 2)
      goto LABEL_174;
    v91 = 1024;
  }
  *(_QWORD *)&v112 = v91;
LABEL_174:
  if (v87 != v88)
  {
    do
    {
      v92 = *v87++;
      operator delete(v92);
    }
    while (v87 != v88);
    if ((void *)v111 != v110[1])
      *(_QWORD *)&v111 = v111 + (((unint64_t)v110[1] - v111 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v110[0])
    operator delete(v110[0]);
  v93 = v115;
  if (v115)
  {
    do
    {
      v94 = (_QWORD *)*v93;
      operator delete(v93);
      v93 = v94;
    }
    while (v94);
  }
  v95 = v113;
  v113 = 0;
  if (v95)
    operator delete(v95);
LABEL_184:
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  return v9;
}

void sub_2399E10C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,_QWORD *__p,uint64_t a25,uint64_t a26,void *a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,_QWORD *a36)
{
  uint64_t v36;
  void **v38;
  _QWORD *v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  void *v47;

  v38 = (void **)(v36 - 160);
  v39 = __p;
  if (__p)
  {
    do
    {
      v40 = (_QWORD *)*v39;
      operator delete(v39);
      v39 = v40;
    }
    while (v40);
  }
  if (a22)
    operator delete(a22);
  v41 = a28;
  v42 = a29;
  if ((unint64_t)(a29 - (_QWORD)a28) >= 0x11)
  {
    do
    {
      operator delete(*v41);
      v42 = a29;
      v41 = a28 + 1;
      a28 = v41;
    }
    while ((unint64_t)(a29 - (_QWORD)v41) > 0x10);
  }
  while (v41 != (void **)v42)
  {
    v43 = *v41++;
    operator delete(v43);
  }
  if (a27)
    operator delete(a27);
  v44 = a36;
  if (a36)
  {
    do
    {
      v45 = (_QWORD *)*v44;
      operator delete(v44);
      v44 = v45;
    }
    while (v45);
  }
  if (a34)
  {
    operator delete(a34);
    v46 = *v38;
    if (!*v38)
    {
LABEL_15:
      v47 = *(void **)(v36 - 136);
      if (!v47)
        goto LABEL_16;
      goto LABEL_19;
    }
  }
  else
  {
    v46 = *v38;
    if (!*v38)
      goto LABEL_15;
  }
  *(_QWORD *)(v36 - 152) = v46;
  operator delete(v46);
  v47 = *(void **)(v36 - 136);
  if (!v47)
LABEL_16:
    _Unwind_Resume(exception_object);
LABEL_19:
  *(_QWORD *)(v36 - 128) = v47;
  operator delete(v47);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399E12AC(uint64_t *a1, unsigned int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v31;
  _DWORD *v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v39;
  _DWORD *v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v47;
  unsigned int *v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;

  a3[1] = *a3;
  if (a2)
    sub_2394DE27C((uint64_t)a3, a2, &flt_239F03914);
  v9 = *a1;
  v8 = a1[1];
  v10 = v8 - *a1;
  if (v8 == *a1)
  {
    a4[1] = *a4;
    return 1;
  }
  else
  {
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_2394189F8();
    v11 = 2 * v10;
    v12 = (char *)operator new(2 * v10);
    v13 = v10 >> 4;
    v14 = v10 >> 2;
    bzero(v12, v11);
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = (unsigned int *)(v9 + 16 * v15);
      v18 = *v17;
      v19 = v17[1];
      if (v18 >= a2 || v19 >= a2)
        goto LABEL_40;
      v21 = 4 * v16;
      v22 = *a3;
      if ((_DWORD)v18 != v19)
      {
        v23 = (unsigned int *)&v12[8 * v21];
        *v23 = v19;
        v23[1] = -1;
        v24 = (_DWORD *)(v22 + 4 * v18);
        v25 = *v24;
        if ((_DWORD)v25 != -1)
        {
          do
          {
            v26 = &v12[8 * v25];
            v27 = *((_DWORD *)v26 + 1);
            v24 = v26 + 4;
            v25 = v27;
          }
          while (v27 != -1);
        }
        *v24 = v21;
      }
      v28 = v17[1];
      v29 = v17[2];
      if (v28 >= a2 || v29 >= a2)
        goto LABEL_40;
      if ((_DWORD)v28 != v29)
      {
        v31 = (unsigned int *)&v12[8 * (v21 | 1)];
        *v31 = v29;
        v31[1] = -1;
        v32 = (_DWORD *)(v22 + 4 * v28);
        v33 = *v32;
        if ((_DWORD)v33 != -1)
        {
          do
          {
            v34 = &v12[8 * v33];
            v35 = *((_DWORD *)v34 + 1);
            v32 = v34 + 4;
            v33 = v35;
          }
          while (v35 != -1);
        }
        *v32 = v21 | 1;
      }
      v36 = v17[2];
      v37 = v17[3];
      if (v36 >= a2 || v37 >= a2)
        goto LABEL_40;
      if ((_DWORD)v36 != v37)
      {
        v39 = (unsigned int *)&v12[8 * (v21 | 2)];
        *v39 = v37;
        v39[1] = -1;
        v40 = (_DWORD *)(v22 + 4 * v36);
        v41 = *v40;
        if ((_DWORD)v41 != -1)
        {
          do
          {
            v42 = &v12[8 * v41];
            v43 = *((_DWORD *)v42 + 1);
            v40 = v42 + 4;
            v41 = v43;
          }
          while (v43 != -1);
        }
        *v40 = v21 | 2;
      }
      v44 = v17[3];
      v45 = *v17;
      if (v44 >= a2 || v45 >= a2)
      {
LABEL_40:
        v53 = 0;
        goto LABEL_41;
      }
      if ((_DWORD)v44 != v45)
      {
        v47 = v21 | 3;
        v48 = (unsigned int *)&v12[8 * v47];
        *v48 = v45;
        v48[1] = -1;
        v49 = (_DWORD *)(v22 + 4 * v44);
        v50 = *v49;
        if ((_DWORD)v50 != -1)
        {
          do
          {
            v51 = &v12[8 * v50];
            v52 = *((_DWORD *)v51 + 1);
            v49 = v51 + 4;
            v50 = v52;
          }
          while (v52 != -1);
        }
        *v49 = v47;
      }
      v15 = ++v16;
    }
    while (v13 > v16);
    a4[1] = *a4;
    sub_2394DE27C((uint64_t)a4, v14, &flt_239F03914);
    v55 = *a1;
    v56 = a1[1];
    v57 = v56 - *a1;
    if (v56 != *a1)
    {
      v58 = 0;
      v59 = v57 >> 4;
      do
      {
        v60 = (unsigned int *)(v55 + 16 * v58);
        v61 = (4 * v58);
        v62 = *a3;
        v63 = *a4;
        v64 = *v60;
        v65 = v60[1];
        if (*v60 == (_DWORD)v65)
        {
LABEL_48:
          v66 = v60[2];
          if (v64 != (_DWORD)v66)
            goto LABEL_56;
        }
        else
        {
          v67 = *(_DWORD *)(v62 + 4 * v65);
          if (v67 != -1)
          {
            v68 = -1;
            while (1)
            {
              if (*(_DWORD *)&v12[8 * v67] == v64)
              {
                v69 = v68 == -1;
                v68 = v67;
                if (!v69)
                  break;
              }
              v67 = *(_DWORD *)&v12[8 * v67 + 4];
              if (v67 == -1)
              {
                v64 = v60[1];
                if (v68 != -1 && v61 < v68)
                {
                  *(_DWORD *)(v63 + 4 * v61) = v68;
                  *(_DWORD *)(v63 + 4 * v68) = v61;
                  v64 = v60[1];
                }
                goto LABEL_48;
              }
            }
          }
          v64 = v60[1];
          v66 = v60[2];
          if (v64 != (_DWORD)v66)
          {
LABEL_56:
            v70 = *(unsigned int *)(v62 + 4 * v66);
            if ((_DWORD)v70 != -1)
            {
              v71 = v61 | 1;
              v72 = 0xFFFFFFFFLL;
              while (1)
              {
                if (*(_DWORD *)&v12[8 * v70] == v64)
                {
                  v69 = v72 == 0xFFFFFFFF;
                  v72 = v70;
                  if (!v69)
                    break;
                }
                v70 = *(unsigned int *)&v12[8 * v70 + 4];
                if ((_DWORD)v70 == -1)
                {
                  if (v72 != 0xFFFFFFFF && v71 < v72)
                  {
                    *(_DWORD *)(v63 + 4 * v71) = v72;
                    *(_DWORD *)(v63 + 4 * v72) = v71;
                    LODWORD(v66) = v60[2];
                  }
                  goto LABEL_68;
                }
              }
            }
            goto LABEL_68;
          }
        }
        LODWORD(v66) = v64;
LABEL_68:
        v73 = v60[3];
        if ((_DWORD)v66 == (_DWORD)v73)
        {
          LODWORD(v73) = v66;
        }
        else
        {
          v74 = *(unsigned int *)(v62 + 4 * v73);
          if ((_DWORD)v74 != -1)
          {
            v75 = v61 | 2;
            v76 = 0xFFFFFFFFLL;
            while (1)
            {
              if (*(_DWORD *)&v12[8 * v74] == (_DWORD)v66)
              {
                v69 = v76 == 0xFFFFFFFF;
                v76 = v74;
                if (!v69)
                  break;
              }
              v74 = *(unsigned int *)&v12[8 * v74 + 4];
              if ((_DWORD)v74 == -1)
              {
                if (v76 != 0xFFFFFFFF && v75 < v76)
                {
                  *(_DWORD *)(v63 + 4 * v75) = v76;
                  *(_DWORD *)(v63 + 4 * v76) = v75;
                  LODWORD(v73) = v60[3];
                }
                break;
              }
            }
          }
        }
        v77 = *v60;
        if ((_DWORD)v73 != (_DWORD)v77)
        {
          v78 = *(unsigned int *)(v62 + 4 * v77);
          if ((_DWORD)v78 != -1)
          {
            v79 = v61 | 3;
            v80 = 0xFFFFFFFFLL;
            while (1)
            {
              if (*(_DWORD *)&v12[8 * v78] == (_DWORD)v73)
              {
                v69 = v80 == 0xFFFFFFFF;
                v80 = v78;
                if (!v69)
                  break;
              }
              v78 = *(unsigned int *)&v12[8 * v78 + 4];
              if ((_DWORD)v78 == -1)
              {
                if (v80 != 0xFFFFFFFF && v79 < v80)
                {
                  *(_DWORD *)(v63 + 4 * v79) = v80;
                  *(_DWORD *)(v63 + 4 * v80) = v79;
                }
                break;
              }
            }
          }
        }
        ++v58;
      }
      while (v59 > v58);
    }
    v53 = 1;
LABEL_41:
    operator delete(v12);
  }
  return v53;
}

void sub_2399E171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_2399E1744(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  float32x4_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = xmmword_239F02850;
    while (1)
    {
      v6 = *(_DWORD **)v2;
      v7 = (*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2;
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = *a1;
        v11 = 3.4028e38;
        do
        {
          if (v7 - 1 == v8)
            v15 = 0;
          else
            v15 = v8 + 1;
          v16 = *(float32x4_t *)(v10 + 16 * v6[v8]);
          v17 = vsubq_f32(*(float32x4_t *)(v10 + 16 * v6[((int)v7 - 1 + (int)v8) % v7]), v16);
          v18 = vmulq_f32(v17, v17);
          v18.i32[3] = 0;
          v19 = vpaddq_f32(v18, v18);
          v20 = vpaddq_f32(v19, v19);
          v21 = (float32x4_t)v5;
          if (v20.f32[0] > 0.0)
            v21 = vdivq_f32(v17, vsqrtq_f32(v20));
          v22 = vsubq_f32(*(float32x4_t *)(v10 + 16 * v6[v15]), v16);
          v23 = vmulq_f32(v22, v22);
          v23.i32[3] = 0;
          v24 = vpaddq_f32(v23, v23);
          v25 = vpaddq_f32(v24, v24);
          v26 = (float32x4_t)v5;
          if (v25.f32[0] > 0.0)
            v26 = vdivq_f32(v22, vsqrtq_f32(v25));
          v12 = vmulq_f32(v21, v26);
          v12.i32[3] = 0;
          v13 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12));
          if (v11 > v13)
            v9 = v8;
          v14 = v8 + 1;
          if (v11 > v13)
            v11 = v13;
          ++v8;
        }
        while (v7 != v14);
      }
      else
      {
        v9 = 0;
      }
      if ((_DWORD)v7)
        break;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      if (v6)
        goto LABEL_4;
LABEL_5:
      v2 += 24;
      if (v2 == v3)
        return 1;
    }
    v27 = (char *)operator new(4 * v7);
    v28 = &v27[4 * v7];
    bzero(v27, 4 * v7);
    v29 = 0;
    do
    {
      *(_DWORD *)&v27[4 * v29] = v6[(v9 + (int)v29) % v7];
      ++v29;
    }
    while (v7 != v29);
    *(_QWORD *)v2 = v27;
    *(_QWORD *)(v2 + 8) = v28;
    *(_QWORD *)(v2 + 16) = v28;
LABEL_4:
    operator delete(v6);
    v5 = xmmword_239F02850;
    goto LABEL_5;
  }
  return 1;
}

BOOL sub_2399E191C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unsigned int v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t *v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  unsigned int *v48;
  void *v49;
  unint64_t v50;
  char *v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  _BOOL8 v63;
  void *v64;
  uint64_t *v65;
  uint64_t **v66;
  BOOL v67;
  _QWORD *v68;
  char *v69;
  int v70;
  _QWORD *v72;
  int v73;
  unsigned int v74;
  void *__p[2];
  char *v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;

  v3 = a3;
  a2[1] = *a2;
  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v8 = a3[1];
    do
    {
      v10 = *(void **)(v8 - 24);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *(_QWORD *)(v6 - 16) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
  }
  v3[1] = v7;
  v78 = 0;
  v79 = 0;
  v77 = &v78;
  v11 = *a1;
  if (a1[1] == *a1)
  {
    v70 = 0;
    goto LABEL_97;
  }
  v12 = 0;
  v73 = 0;
  v13 = 0;
  do
  {
    v14 = (_DWORD *)(v11 + 16 * v12);
    v15 = v14[2];
    if (v15 != v14[3])
    {
      sub_2399E1EE0((uint64_t)a2, v14);
      goto LABEL_9;
    }
    v16 = v78;
    v17 = &v78;
LABEL_13:
    v18 = v17;
    if (v16)
    {
      while (1)
      {
        v17 = (uint64_t **)v16;
        v19 = *((_DWORD *)v16 + 8);
        if (v15 < v19)
        {
          v16 = *v17;
          goto LABEL_13;
        }
        if (v19 >= v15)
          break;
        v16 = v17[1];
        if (!v16)
        {
          v18 = v17 + 1;
          goto LABEL_18;
        }
      }
      v20 = (char *)v17;
      v24 = (uint64_t *)(v17 + 7);
      v23 = v17[7];
      *((_DWORD *)v17 + 10) = v13;
      v28 = (unsigned int *)(v11 + 16 * v12);
      v26 = *v28;
      v27 = v28[1];
      if (v23)
        goto LABEL_25;
    }
    else
    {
LABEL_18:
      v20 = (char *)operator new(0x48uLL);
      *((_DWORD *)v20 + 8) = v15;
      *((_DWORD *)v20 + 10) = 0;
      *((_QWORD *)v20 + 8) = 0;
      *((_QWORD *)v20 + 7) = 0;
      *((_QWORD *)v20 + 6) = v20 + 56;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = v17;
      *v18 = (uint64_t *)v20;
      v21 = (uint64_t *)v20;
      if (*v77)
      {
        v77 = (uint64_t **)*v77;
        v21 = *v18;
      }
      sub_2394213B8(v78, v21);
      ++v79;
      v22 = *a1;
      v24 = (uint64_t *)(v20 + 56);
      v23 = (uint64_t *)*((_QWORD *)v20 + 7);
      *((_DWORD *)v20 + 10) = v13;
      v25 = (unsigned int *)(v22 + 16 * v12);
      v26 = *v25;
      v27 = v25[1];
      if (v23)
      {
        while (1)
        {
LABEL_25:
          while (1)
          {
            v29 = v23;
            v30 = *((_DWORD *)v23 + 7);
            if (v26 >= v30)
              break;
            v23 = (uint64_t *)*v23;
            v24 = v29;
            if (!*v29)
              goto LABEL_29;
          }
          if (v30 >= v26)
            break;
          v23 = (uint64_t *)v23[1];
          if (!v23)
          {
            v24 = v29 + 1;
            goto LABEL_29;
          }
        }
        v31 = v23;
        goto LABEL_33;
      }
    }
    v29 = v24;
LABEL_29:
    v31 = operator new(0x28uLL);
    v31[7] = v26;
    v31[8] = 0;
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = v29;
    *v24 = (uint64_t)v31;
    v32 = **((_QWORD **)v20 + 6);
    v33 = (uint64_t *)v31;
    if (v32)
    {
      *((_QWORD *)v20 + 6) = v32;
      v33 = (uint64_t *)*v24;
    }
    sub_2394213B8(*((uint64_t **)v20 + 7), v33);
    ++*((_QWORD *)v20 + 8);
LABEL_33:
    ++v73;
    v31[8] = v27;
LABEL_9:
    v11 = *a1;
    v12 = ++v13;
  }
  while (v13 < (unint64_t)((a1[1] - *a1) >> 4));
  v34 = (uint64_t *)v77;
  if (v77 != &v78)
  {
    v72 = v3;
    do
    {
      v35 = 0;
      LODWORD(v36) = 0;
      v37 = *(_DWORD *)(v34[6] + 28);
      __p[0] = 0;
      __p[1] = 0;
      v76 = 0;
      v38 = v34 + 7;
      v39 = v37;
      v74 = v37;
      do
      {
        if (v35 < v76)
        {
          *(_DWORD *)v35 = v39;
          v35 += 4;
          __p[1] = v35;
          v40 = *v38;
          if (!*v38)
            goto LABEL_81;
          goto LABEL_58;
        }
        v41 = (char *)__p[0];
        v42 = v35 - (char *)__p[0];
        v43 = (v35 - (char *)__p[0]) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          sub_2394189F8();
        v45 = v76 - (char *)__p[0];
        if ((v76 - (char *)__p[0]) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          if (v46 >> 62)
            sub_239418A80();
          v47 = operator new(4 * v46);
          v48 = (unsigned int *)&v47[4 * v43];
          *v48 = v39;
          v49 = v48 + 1;
          if (v35 == v41)
            goto LABEL_55;
        }
        else
        {
          v47 = 0;
          v48 = (unsigned int *)(4 * v43);
          *(_DWORD *)(4 * v43) = v39;
          v49 = (void *)(4 * v43 + 4);
          if (v35 == v41)
            goto LABEL_55;
        }
        v50 = v35 - 4 - v41;
        if (v50 < 0xBC)
        {
          v51 = v35;
          goto LABEL_54;
        }
        if (&v47[v42 - 4 - (v50 & 0xFFFFFFFFFFFFFFFCLL)] > &v47[v42 - 4])
        {
          v51 = v35;
          do
          {
LABEL_54:
            v52 = *((_DWORD *)v51 - 1);
            v51 -= 4;
            *--v48 = v52;
          }
          while (v51 != v41);
          goto LABEL_55;
        }
        if (&v35[-(v50 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v35 - 4)
        {
          v51 = v35;
          goto LABEL_54;
        }
        if ((unint64_t)(v35 - v47 - v42) < 0x20)
        {
          v51 = v35;
          goto LABEL_54;
        }
        v57 = (v50 >> 2) + 1;
        v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        v51 = &v35[-v58];
        v48 = (unsigned int *)((char *)v48 - v58);
        v59 = &v47[4 * v43 - 16];
        v60 = (__int128 *)(v35 - 16);
        v61 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v62 = *v60;
          *(v59 - 1) = *(v60 - 1);
          *v59 = v62;
          v59 -= 2;
          v60 -= 2;
          v61 -= 8;
        }
        while (v61);
        if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_54;
LABEL_55:
        __p[0] = v48;
        __p[1] = v49;
        v76 = &v47[4 * v46];
        if (v41)
          operator delete(v41);
        v35 = (char *)v49;
        v37 = v74;
        __p[1] = v49;
        v40 = *v38;
        if (!*v38)
        {
LABEL_81:
          v63 = 0;
          v3 = v72;
          v64 = __p[0];
          if (!__p[0])
            goto LABEL_83;
LABEL_82:
          __p[1] = v64;
          operator delete(v64);
          goto LABEL_83;
        }
LABEL_58:
        v53 = v34 + 7;
        do
        {
          v54 = *(_DWORD *)(v40 + 28);
          v55 = v54 >= v39;
          if (v54 >= v39)
            v56 = (uint64_t *)v40;
          else
            v56 = (uint64_t *)(v40 + 8);
          if (v55)
            v53 = (uint64_t *)v40;
          v40 = *v56;
        }
        while (*v56);
        if (v53 == v38 || v39 < *((_DWORD *)v53 + 7))
          goto LABEL_81;
        v39 = *((_DWORD *)v53 + 8);
        if (v39 == v37)
          break;
        v36 = (v36 + 1);
      }
      while (v34[8] != v36);
      v3 = v72;
      v68 = (_QWORD *)v72[1];
      if ((unint64_t)v68 >= v72[2])
      {
        v69 = sub_2396C8920((char **)v72, (uint64_t)__p);
      }
      else
      {
        *v68 = 0;
        v68[1] = 0;
        v68[2] = 0;
        *(_OWORD *)v68 = *(_OWORD *)__p;
        v68[2] = v76;
        __p[0] = 0;
        __p[1] = 0;
        v76 = 0;
        v69 = (char *)(v68 + 3);
      }
      v72[1] = v69;
      v63 = 1;
      v64 = __p[0];
      if (__p[0])
        goto LABEL_82;
LABEL_83:
      if (!v63)
        goto LABEL_98;
      v65 = (uint64_t *)v34[1];
      if (v65)
      {
        do
        {
          v66 = (uint64_t **)v65;
          v65 = (uint64_t *)*v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          v66 = (uint64_t **)v34[2];
          v67 = *v66 == v34;
          v34 = (uint64_t *)v66;
        }
        while (!v67);
      }
      v34 = (uint64_t *)v66;
    }
    while (v66 != &v78);
  }
  v70 = v73;
LABEL_97:
  v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3) == v70;
LABEL_98:
  sub_2399E4244((uint64_t)&v77, v78);
  return v63;
}

void sub_2399E1E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  if (__p)
    operator delete(__p);
  sub_2399E4244((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_2399E1EE0(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  float32x4x4_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)v5 = *a2;
    *((_DWORD *)v5 + 1) = a2[1];
    *((_DWORD *)v5 + 2) = a2[2];
    *((_DWORD *)v5 + 3) = a2[3];
    v7 = v5 + 16;
    goto LABEL_24;
  }
  v8 = *(char **)a1;
  v9 = (uint64_t)&v5[-*(_QWORD *)a1];
  v10 = (v9 >> 4) + 1;
  if (v10 >> 60)
    sub_2394189F8();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_239418A80();
    v13 = (char *)operator new(16 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[16 * (v9 >> 4)];
  v15 = &v13[16 * v12];
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v7 = v14 + 16;
  if (v5 == v8)
  {
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v8)
      goto LABEL_24;
    goto LABEL_23;
  }
  v16 = v5 - v8 - 16;
  if (v16 < 0x70 || &v13[v9 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v5 && &v5[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v14)
    goto LABEL_20;
  v17 = (v16 >> 4) + 1;
  v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v18];
  v19 = &v14[-v18];
  v20 = (const float *)(v5 - 64);
  v21 = (float *)(v14 - 64);
  v22 = v17 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = vld4q_f32(v20);
    vst4q_f32(v21, v24);
    v21 -= 16;
    v20 -= 16;
    v22 -= 4;
  }
  while (v22);
  v14 = v19;
  if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_20:
    v19 = v14;
    do
    {
      v23 = *((_DWORD *)v6 - 4);
      v6 -= 16;
      *((_DWORD *)v19 - 4) = v23;
      v19 -= 16;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v6 + 1);
      *((_DWORD *)v19 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v19 + 3) = *((_DWORD *)v6 + 3);
    }
    while (v6 != v8);
  }
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v15;
  if (v8)
LABEL_23:
    operator delete(v8);
LABEL_24:
  *(_QWORD *)(a1 + 8) = v7;
}

float sub_2399E20A0(float *a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  float v53;
  uint64_t *v54;
  float v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  unint64_t v64;
  float v65;
  uint64_t *v66;
  uint64_t *v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  _DWORD *v84;
  float v85;
  int v86;
  uint64_t v87;
  float v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  float v112;
  int v113;
  float *v114;
  uint64_t v115;

BOOL sub_2399E2AFC(float *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  int v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((float *)a2 - 1) > a1[1])
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      v7 = a1[3];
      v8 = *((float *)a2 - 1);
      if (v7 <= a1[1])
      {
        if (v8 > v7)
        {
          v19 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *(a2 - 1);
          *(a2 - 1) = v19;
          if (a1[3] > a1[1])
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      else
      {
        v9 = *(_QWORD *)a1;
        if (v8 <= v7)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v9;
          if (*((float *)a2 - 1) > *((float *)&v9 + 1))
          {
            *((_QWORD *)a1 + 1) = *(a2 - 1);
            *(a2 - 1) = v9;
          }
        }
        else
        {
          *(_QWORD *)a1 = *(a2 - 1);
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 4:
      sub_2399E2E0C(a1, a1 + 2, a1 + 4, (float *)a2 - 2);
      return 1;
    case 5:
      sub_2399E2E0C(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*((float *)a2 - 1) <= a1[7])
        return 1;
      v14 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = *(a2 - 1);
      *(a2 - 1) = v14;
      if (a1[7] <= a1[5])
        return 1;
      v16 = *((_QWORD *)a1 + 2);
      v15 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) = v15;
      *((_QWORD *)a1 + 3) = v16;
      if (a1[3] >= *((float *)&v15 + 1))
        return 1;
      v17 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v15;
      *((_QWORD *)a1 + 2) = v17;
      if (a1[1] >= *((float *)&v15 + 1))
        return 1;
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v15;
      *((_QWORD *)a1 + 1) = v18;
      return 1;
    default:
      v10 = a1[3];
      v11 = a1[1];
      v12 = a1[5];
      if (v10 <= v11)
      {
        if (v12 > v10)
        {
          v21 = *((_QWORD *)a1 + 1);
          v20 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 1) = v20;
          *((_QWORD *)a1 + 2) = v21;
          if (v11 < *((float *)&v20 + 1))
          {
            v22 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v20;
            *((_QWORD *)a1 + 1) = v22;
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)a1;
        if (v12 <= v10)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v13;
          if (v12 <= *((float *)&v13 + 1))
            goto LABEL_29;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a1 + 2);
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
        }
        *((_QWORD *)a1 + 2) = v13;
      }
LABEL_29:
      v23 = a1 + 6;
      if (a1 + 6 == (float *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      v26 = a1 + 4;
      break;
  }
  while (1)
  {
    v27 = v23[1];
    if (v27 > v26[1])
      break;
LABEL_38:
    v26 = v23;
    v24 += 8;
    v23 += 2;
    if (v23 == (float *)a2)
      return 1;
  }
  v28 = *v23;
  v29 = v24;
  do
  {
    *(_QWORD *)((char *)a1 + v29 + 24) = *(_QWORD *)((char *)a1 + v29 + 16);
    if (v29 == -16)
    {
      *a1 = v28;
      a1[1] = v27;
      if (++v25 != 8)
        goto LABEL_38;
      return v23 + 2 == (float *)a2;
    }
    v30 = *(float *)((char *)a1 + v29 + 12);
    v29 -= 8;
  }
  while (v30 < v27);
  v31 = (uint64_t)a1 + v29;
  *(float *)(v31 + 24) = v28;
  *(float *)(v31 + 28) = v27;
  if (++v25 != 8)
    goto LABEL_38;
  return v23 + 2 == (float *)a2;
}

float *sub_2399E2E0C(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a3[1];
  if (v4 <= result[1])
  {
    if (v5 > v4)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] <= result[1])
        goto LABEL_7;
      v7 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
      v5 = a3[1];
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    if (v5 > v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
LABEL_7:
      v5 = *((float *)&v6 + 1);
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v6;
    v5 = a3[1];
    if (v5 > *((float *)&v6 + 1))
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      v5 = *((float *)&v6 + 1);
    }
  }
LABEL_10:
  if (a4[1] > v5)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v8;
    if (a3[1] > a2[1])
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (a2[1] > result[1])
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  return result;
}

uint64_t sub_2399E2F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250AF1330;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250AF1368;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_2399E3968;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2399E30A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2399E30B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2399E30D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399E30E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399E3110(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2399E3120(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF1368;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2399E315C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF1368;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399E31AC(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

void sub_2399E31BC(_QWORD *a1, unint64_t a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const float *v15;
  float *v16;
  uint64_t v17;
  int v18;
  float32x4x2_t v19;

  v3 = (void *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 3)
  {
    if (a2 >> 61)
      sub_2394189F8();
    v4 = a1[6];
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = v4 - (_QWORD)v3;
    v8 = (unint64_t)&v6[(v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF8];
    v9 = (char *)v8;
    if ((void *)v4 == v3)
      goto LABEL_15;
    v10 = v7 - 8;
    if (v7 - 8 >= 0x78)
    {
      v11 = (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
         || v4 - (v10 & 0xFFFFFFFFFFFFFFF8) - 8 >= v8;
      v9 = &v6[(v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF8];
      if (v11)
      {
        v12 = (v10 >> 3) + 1;
        v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        v14 = v4 - v13;
        v9 = (char *)(v8 - v13);
        v15 = (const float *)(v4 - 32);
        v16 = (float *)(v8 - 32);
        v17 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = vld2q_f32(v15);
          v15 -= 8;
          vst2q_f32(v16, v19);
          v16 -= 8;
          v17 -= 4;
        }
        while (v17);
        v4 = v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_15;
      }
    }
    else
    {
      v9 = &v6[(v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v18 = *(_DWORD *)(v4 - 8);
      v4 -= 8;
      *((_DWORD *)v9 - 2) = v18;
      v9 -= 8;
      *((_DWORD *)v9 + 1) = *(_DWORD *)(v4 + 4);
    }
    while ((void *)v4 != v3);
LABEL_15:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_2399E32E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 3;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2399E35D4((char **)(a1 + 40), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 8 * a2;
  }
}

void sub_2399E331C(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_2399E3338(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  float32x4x2_t v24;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 < v2)
  {
    *(_QWORD *)v3 = 0;
    v5 = (uint64_t)(v3 + 8);
    goto LABEL_25;
  }
  v6 = (char *)a1[5];
  v7 = (v3 - v6) >> 3;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    sub_2394189F8();
  v9 = v2 - (_QWORD)v6;
  if (v9 >> 2 > v8)
    v8 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (!v10)
  {
    v11 = 0;
    v12 = (char *)(8 * v7);
    v13 = 0;
    *(_QWORD *)(8 * v7) = 0;
    v5 = 8 * v7 + 8;
    v14 = v3 - v6;
    if (v3 != v6)
      goto LABEL_12;
LABEL_27:
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (!v6)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v10 >> 61)
    sub_239418A80();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v7];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = 0;
  v5 = (uint64_t)(v12 + 8);
  v14 = v3 - v6;
  if (v3 == v6)
    goto LABEL_27;
LABEL_12:
  v15 = v14 - 8;
  if (v15 < 0x78)
    goto LABEL_21;
  if (&v11[v3 - v6 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3 && &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
    goto LABEL_21;
  v17 = (v15 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v4 = &v3[-v18];
  v19 = &v12[-v18];
  v20 = (const float *)(v3 - 32);
  v21 = (float *)(v12 - 32);
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = vld2q_f32(v20);
    v20 -= 8;
    vst2q_f32(v21, v24);
    v21 -= 8;
    v22 -= 4;
  }
  while (v22);
  v12 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_21:
    v19 = v12;
    do
    {
      v23 = *((_DWORD *)v4 - 2);
      v4 -= 8;
      *((_DWORD *)v19 - 2) = v23;
      v19 -= 8;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v4 + 1);
    }
    while (v4 != v6);
  }
  a1[5] = v19;
  a1[6] = v5;
  a1[7] = v13;
  if (v6)
LABEL_24:
    operator delete(v6);
LABEL_25:
  a1[6] = v5;
}

double sub_2399E34D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = *(_QWORD *)(v3 + 8 * a3);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

double sub_2399E34F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

_QWORD *sub_2399E3508@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_2399E37A4(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250AF13D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_2399E3584(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2399E35A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399E35C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void sub_2399E35D4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  int v24;
  float32x4x2_t v25;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = (v8 >> 3) + a2;
    if (v9 >> 61)
      sub_2394189F8();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_239418A80();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * (v8 >> 3)];
    v14 = 8 * a2;
    v15 = &v12[8 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v7)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (v7)
LABEL_25:
        operator delete(v7);
    }
    else
    {
      v17 = v5 - v7 - 8;
      if (v17 < 0x78
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
      {
        goto LABEL_22;
      }
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v19];
      v20 = &v13[-v19];
      v21 = (const float *)(v5 - 32);
      v22 = (float *)(v13 - 32);
      v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = vld2q_f32(v21);
        v21 -= 8;
        vst2q_f32(v22, v25);
        v22 -= 8;
        v23 -= 4;
      }
      while (v23);
      v13 = v20;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v20 = v13;
        do
        {
          v24 = *((_DWORD *)v6 - 2);
          v6 -= 8;
          *((_DWORD *)v20 - 2) = v24;
          v20 -= 8;
          *((_DWORD *)v20 + 1) = *((_DWORD *)v6 + 1);
        }
        while (v6 != v7);
      }
      *a1 = v20;
      a1[1] = v16;
      a1[2] = v15;
      if (v7)
        goto LABEL_25;
    }
  }
}

_QWORD *sub_2399E37A4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250AF1368;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(char **)(a2 + 40);
  v6 = *(char **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    a1[7] = &v9[8 * (v8 >> 3)];
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) < 0x58)
      goto LABEL_22;
    v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v9 < &v7[v11] && v7 < &v9[v11])
      goto LABEL_22;
    v13 = (v10 >> 3) + 1;
    v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFF8);
    v15 = &v7[v14];
    v16 = &v9[v14];
    v17 = v9 + 32;
    v18 = (__int128 *)(v7 + 32);
    v19 = v13 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v21 = *(v18 - 2);
      v20 = *(v18 - 1);
      v23 = *v18;
      v22 = v18[1];
      v18 += 4;
      *(v17 - 2) = v21;
      *(v17 - 1) = v20;
      *v17 = v23;
      v17[1] = v22;
      v17 += 4;
      v19 -= 8;
    }
    while (v19);
    v7 = v15;
    v9 = v16;
    if (v13 != (v13 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_22:
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v7;
        *((_DWORD *)v9 + 1) = *((_DWORD *)v7 + 1);
        v9 += 8;
        v7 += 8;
      }
      while (v7 != v6);
      v16 = v9;
    }
    a1[6] = v16;
  }
  return a1;
}

void sub_2399E3900(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_2399E3928(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399E394C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_2399E3968())()
{
  return sub_2399E3968;
}

char *sub_2399E3974(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_2399E3B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2399E3B80(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  const void *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = v10 + 8;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    *((_QWORD *)v10 + 2) = &v15[16 * (v14 >> 4)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, v13, v16);
    *v12 = &v15[v16];
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_2399E3D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2399E3D98(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  int64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  void *v35;
  void *v36;
  char *v38;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = v10 + 8;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v14 = *(_DWORD **)a2;
  v13 = *(_DWORD **)(a2 + 8);
  v15 = (int64_t)v13 - *(_QWORD *)a2;
  if (v15)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = operator new(v15);
    *(_QWORD *)v10 = v16;
    *v12 = v16;
    *((_QWORD *)v10 + 2) = &v16[2 * (v15 >> 3)];
    v17 = v15 - 8;
    if ((unint64_t)(v15 - 8) < 0x58)
      goto LABEL_40;
    v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v16 < (_DWORD *)((char *)v14 + v18) && v14 < (_DWORD *)((char *)v16 + v18))
      goto LABEL_40;
    v19 = (v17 >> 3) + 1;
    v20 = 2 * (v19 & 0x3FFFFFFFFFFFFFF8);
    v21 = &v14[v20];
    v22 = &v16[v20];
    v23 = v16 + 8;
    v24 = (__int128 *)(v14 + 8);
    v25 = v19 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(v24 - 2);
      v26 = *(v24 - 1);
      v29 = *v24;
      v28 = v24[1];
      v24 += 4;
      *(v23 - 2) = v27;
      *(v23 - 1) = v26;
      *v23 = v29;
      v23[1] = v28;
      v23 += 4;
      v25 -= 8;
    }
    while (v25);
    v14 = v21;
    v16 = v22;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        *v16 = *v14;
        v16[1] = v14[1];
        v16 += 2;
        v14 += 2;
      }
      while (v14 != v13);
      v22 = v16;
    }
    *v12 = v22;
  }
  v30 = v10 + 24;
  v38 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v30;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v31 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v32 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v32;
      v10 -= 24;
      *((_QWORD *)v31 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v33 = *a1;
    v3 = a1[1];
    v30 = v38;
    *a1 = v10;
    a1[1] = v38;
    a1[2] = v11;
    if (v3 != v33)
    {
      v34 = v3;
      do
      {
        v36 = (void *)*((_QWORD *)v34 - 3);
        v34 -= 24;
        v35 = v36;
        if (v36)
        {
          *((_QWORD *)v3 - 2) = v35;
          operator delete(v35);
        }
        v3 = v34;
      }
      while (v34 != v33);
      v3 = v33;
    }
  }
  if (v3)
    operator delete(v3);
  return v30;
}

void sub_2399E4010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2399E4034(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  BOOL v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (__n == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    return a1;
  }
  prime = __n;
  if ((__n & (__n - 1)) != 0)
  {
    prime = std::__next_prime(__n);
    v4 = *(int8x8_t *)(a1 + 8);
    v5 = prime >= *(_QWORD *)&v4;
    if (prime > *(_QWORD *)&v4)
      goto LABEL_17;
  }
  else
  {
    v4 = 0;
    v5 = 1;
    if (__n)
      goto LABEL_17;
  }
  if (!v5)
  {
    v6 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v7 = (uint8x8_t)vcnt_s8(v4), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      v6 = std::__next_prime(v6);
    }
    else
    {
      v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2)
        v6 = v8;
    }
    if (prime <= v6)
      prime = v6;
    if (prime < *(_QWORD *)&v4)
      goto LABEL_17;
  }
  return a1;
}

void sub_2399E4128(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399E413C(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  BOOL v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (__n == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    return a1;
  }
  prime = __n;
  if ((__n & (__n - 1)) != 0)
  {
    prime = std::__next_prime(__n);
    v4 = *(int8x8_t *)(a1 + 8);
    v5 = prime >= *(_QWORD *)&v4;
    if (prime > *(_QWORD *)&v4)
      goto LABEL_17;
  }
  else
  {
    v4 = 0;
    v5 = 1;
    if (__n)
      goto LABEL_17;
  }
  if (!v5)
  {
    v6 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v7 = (uint8x8_t)vcnt_s8(v4), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      v6 = std::__next_prime(v6);
    }
    else
    {
      v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2)
        v6 = v8;
    }
    if (prime <= v6)
      prime = v6;
    if (prime < *(_QWORD *)&v4)
      goto LABEL_17;
  }
  return a1;
}

void sub_2399E4230(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_2399E4244(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_2399E4244(a1, *a2);
    sub_2399E4244(a1, a2[1]);
    sub_239421038((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

uint64_t sub_2399E4290(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, float *a5, unsigned int *a6, _QWORD *a7, uint64_t a8, __n128 a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int32 v39;
  __n128 *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t v56;
  __n128 *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  float32x4_t *v68;
  unsigned __int32 v69;
  int32x2_t v70;
  unsigned __int32 v71;
  unsigned __int32 v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  _QWORD *v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  __int16 v107;
  uint64_t *v108;
  _QWORD *v109;
  char *v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  __n128 *v124;
  __n128 *v125;
  _QWORD *v126;
  int v127;
  __int16 v128;
  unint64_t v129;
  uint64_t v130;
  __n128 *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  size_t v137;
  int32x4_t *v138;
  unint64_t v139;
  uint64_t v140;
  int32x4_t v141;
  int32x4_t *v142;
  int32x4_t v143;
  int32x4_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  char *v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int *i;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  unint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  _BYTE *v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int *v195;
  unsigned int **v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  unint64_t v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  uint64_t v207;
  _BYTE *v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char **v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  int v228;
  __int16 v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  int v237;
  int v238;
  BOOL v239;
  unint64_t v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  _WORD *v244;
  _QWORD *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t *v248;
  uint64_t *v249;
  _WORD *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  int v259;
  __int16 v260;
  uint64_t *v261;
  BOOL v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  size_t v267;
  void *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  float v272;
  unsigned int v273;
  _QWORD *v274;
  uint64_t v275;
  __int128 *v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  void *v284;
  float32x4_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  unsigned int v295;
  _QWORD *v296;
  _QWORD **v297;
  unsigned int v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _BYTE *v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  char *v313;
  int32x2_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  _QWORD *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  char *v327;
  _QWORD *v328;
  int v329;
  __int16 v330;
  _QWORD **v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  double v336;
  double v337;
  unsigned int *v338;
  unsigned int **v339;
  unsigned int *v340;
  uint64_t *v341;
  uint64_t v342;
  int *v343;
  int **v344;
  int *v345;
  int *v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  char *v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  std::__shared_weak_count *v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float v376;
  float *v377;
  float *v378;
  unsigned int ***v379;
  void *v380;
  uint64_t *v381;
  uint64_t j;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  _DWORD *v387;
  int v388;
  char v389;
  float v390;
  unsigned int **v391;
  unsigned int **v392;
  char *v393;
  uint64_t v394;
  unsigned int v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unsigned int **v404;
  unsigned int *v405;
  uint64_t *v406;
  unsigned int *v407;
  uint64_t v408;
  unsigned int v409;
  uint64_t v410;
  void *v411;
  uint64_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float v418;
  float32x4_t v419;
  float32x4_t v420;
  float v421;
  float32x4_t v422;
  float32x4_t v423;
  float v424;
  float v425;
  float v426;
  float v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  unint64_t v439;
  uint64_t v440;
  unsigned int *v441;
  uint64_t v442;
  unint64_t v443;
  unsigned int **v444;
  uint64_t v445;
  _DWORD *v446;
  _DWORD *v447;
  uint64_t v448;
  unsigned int **v449;
  unsigned int *v450;
  unsigned int *v451;
  unsigned int **v452;
  unsigned int *v453;
  unsigned int *v454;
  uint64_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float v460;
  float32x4_t v461;
  float v462;
  float32x4_t v463;
  float32x4_t v464;
  float v465;
  float32x4_t v466;
  float32x4_t v467;
  float v468;
  float v469;
  unsigned int v471;
  uint64_t v472;
  float32x4_t v473;
  float32x4_t v474;
  uint64_t v475;
  unsigned int **v476;
  uint64_t v477;
  _DWORD *v478;
  _DWORD *v479;
  uint64_t v480;
  unint64_t v481;
  void **v482;
  void **v483;
  void **v484;
  unint64_t v485;
  _DWORD *v486;
  _BYTE *v487;
  uint64_t v488;
  _BYTE *v489;
  uint64_t v490;
  _BYTE *v491;
  int v492;
  uint64_t v493;
  int v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  _DWORD *v498;
  unsigned int **v499;
  unsigned int *v500;
  unsigned int *v501;
  uint64_t v502;
  char *v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  unsigned int **v511;
  uint64_t v512;
  char *v513;
  char *v514;
  const void **v515;
  char *v516;
  unsigned int **v517;
  unsigned int *v518;
  unsigned int *v519;
  void **v520;
  unsigned int v521;
  void **v522;
  void **v523;
  unsigned int v524;
  _DWORD *v525;
  _BYTE *v526;
  uint64_t v527;
  _BYTE *v528;
  uint64_t v529;
  _BYTE *v530;
  int v531;
  uint64_t v532;
  int v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  _DWORD *v537;
  uint64_t v538;
  uint64_t *v539;
  void **v540;
  void **v541;
  void **v542;
  void **v543;
  unint64_t v544;
  void ***v545;
  void ***v546;
  void **v547;
  void **v548;
  void **v549;
  void **v550;
  uint64_t *v551;
  _DWORD *v552;
  void **v553;
  unsigned int v554;
  void ***v555;
  void ***v556;
  void **v557;
  void **v558;
  void **v559;
  unsigned int **v560;
  void **v561;
  uint64_t v562;
  uint64_t *v563;
  _QWORD *v564;
  char *v565;
  unint64_t v566;
  _QWORD *v567;
  void **v568;
  char *v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  char *v574;
  uint64_t v575;
  _QWORD *v576;
  int v577;
  __int16 v578;
  void **v579;
  _QWORD *v580;
  char *v581;
  int v582;
  uint64_t v583;
  unsigned int **v584;
  char *v585;
  char *v586;
  const void **v587;
  char *v588;
  char *v589;
  int v590;
  uint64_t v591;
  uint64_t *v592;
  _QWORD *v593;
  char *v594;
  unint64_t v595;
  _QWORD *v596;
  _QWORD *v597;
  char *v598;
  uint64_t v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  char *v603;
  uint64_t v604;
  _QWORD *v605;
  int v606;
  __int16 v607;
  uint64_t *v608;
  _QWORD *v609;
  char *v610;
  unint64_t v611;
  _QWORD *v612;
  _QWORD *v613;
  char *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  char *v619;
  uint64_t v620;
  unint64_t *v621;
  int v622;
  __int16 v623;
  unsigned int **v624;
  unsigned int **v625;
  char *v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  unsigned int v633;
  uint64_t v634;
  unint64_t v635;
  void *v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  char *v640;
  unsigned int **v641;
  unsigned int **v642;
  float v643;
  uint64_t v644;
  unsigned int *v645;
  unsigned int *v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float v652;
  float32x4_t v653;
  float32x4_t v654;
  float v655;
  float v656;
  float v657;
  char *v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  char *v662;
  char *v663;
  char *v664;
  uint64_t v665;
  int v666;
  char *v667;
  unint64_t v668;
  uint64_t v669;
  _DWORD *v670;
  unsigned int v671;
  unsigned int **v672;
  _QWORD *v673;
  char *v674;
  const void **v675;
  unsigned int v676;
  unsigned int **v677;
  unsigned int *v678;
  unsigned int *v679;
  uint64_t v680;
  int v681;
  unsigned int *v682;
  char *v683;
  char *v684;
  int v685;
  _WORD *v686;
  int64_t v687;
  unsigned int **v688;
  char *v689;
  char *v690;
  const void **v691;
  char *v692;
  char *v693;
  int v694;
  uint64_t v695;
  unsigned int **v696;
  unsigned int *v697;
  unsigned int *v698;
  uint64_t v699;
  void *v700;
  void **v701;
  unsigned int v702;
  void **v703;
  void **v704;
  unsigned int v705;
  _DWORD *v706;
  _WORD *v707;
  _WORD *v708;
  int64_t v709;
  unint64_t v710;
  uint64_t v711;
  unint64_t v712;
  char *v713;
  char *v714;
  _QWORD *v715;
  int v716;
  __int16 v717;
  unsigned int *v718;
  char *v719;
  _QWORD *v720;
  uint64_t v721;
  uint64_t v722;
  float v723;
  __int32 v724;
  float v725;
  int32x4_t v726;
  unsigned int **v727;
  unsigned int *v728;
  unsigned int *v729;
  unint64_t v730;
  uint64_t v731;
  float *v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  unsigned int v738;
  unint64_t v740;
  __n128 *__p;
  int v742;
  int v744;
  char v745;
  int v747;
  uint64_t *v748;
  uint64_t *v749;
  uint64_t *v750;
  _QWORD *v751;
  __n128 *v752;
  void *v753;
  unint64_t v755;
  uint64_t v756;
  unsigned int v758;
  uint64_t v759;
  uint64_t v761;
  unsigned int *v762;
  char *v764;
  uint64_t *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unsigned int **v769;
  unsigned int *v770;
  uint64_t v771;
  unsigned int *v772;
  float32x4_t v773;
  int v774;
  unsigned int *v775;
  unsigned int **v776;
  float32x4_t *v777[4];
  __int128 v778;
  void *v779[2];
  char *v780;
  void *v781[2];
  char *v782;
  void *v783;
  char *v784;
  char *v785;
  _QWORD **v786;
  _QWORD *v787;
  uint64_t v788;
  int32x4_t v789;
  uint64_t v790;
  int32x4_t v791;
  char *v792;
  __n128 v793;
  __int8 *v794;
  char *v795;
  char *v796;
  char *v797;
  _QWORD *v798;
  unint64_t v799;
  unint64_t v800;
  float v801[3];

  *a11 = 0;
  *a12 = 0;
  v801 = 1.0;
  if (*a5 > 0.00000001)
    v801 = 1.0 / *a5;
  v15 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a1 + 136);
  v799 = 0;
  v800 = 0;
  v798 = 0;
  v16 = v14 - v15;
  if (v16)
  {
    if (v16 < 0)
      sub_2394189F8();
    v17 = 0xCCCCCCCCCCCCCCCDLL * (v16 >> 2);
    v18 = (v17 - 1) >> 6;
    v19 = operator new(8 * (v18 + 1));
    v20 = v19;
    v799 = v17;
    v800 = v18 + 1;
    v798 = v19;
    if (v17 >= 0x41)
      v21 = (v17 - 1) >> 6;
    else
      v21 = 0;
    v19[v21] = 0;
    if (v17 >= 0x40)
      bzero(v19, 8 * (v17 >> 6));
    if ((v17 & 0x3F) != 0)
      v20[v17 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v17 & 0x3F));
  }
  v22 = a1 + 104;
  v23 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
  a9.n128_f32[0] = (float)v23 * 2.5;
  v24 = a9.n128_f32[0];
  if ((_DWORD)v24)
  {
    v25 = (__n128 *)operator new(20 * v24);
    v752 = (__n128 *)((char *)v25 + 20 * v24);
    __p = v25;
    v27 = *a7;
    v26 = a7[1];
    if (v26 == *a7)
      goto LABEL_21;
  }
  else
  {
    v752 = 0;
    __p = 0;
    v27 = *a7;
    v26 = a7[1];
    if (v26 == *a7)
      goto LABEL_21;
  }
  v28 = v26;
  do
  {
    v30 = *(void **)(v28 - 24);
    v28 -= 24;
    v29 = v30;
    if (v30)
    {
      *(_QWORD *)(v26 - 16) = v29;
      operator delete(v29);
    }
    v26 = v28;
  }
  while (v28 != v27);
  v26 = *a7;
  v23 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
LABEL_21:
  a7[1] = v27;
  v31 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3);
  if (v23 <= v31)
  {
    if (v23 < v31)
    {
      v32 = v26 + 24 * v23;
      if (v27 != v32)
      {
        v33 = v27;
        do
        {
          v35 = *(void **)(v33 - 24);
          v33 -= 24;
          v34 = v35;
          if (v35)
          {
            *(_QWORD *)(v27 - 16) = v34;
            operator delete(v34);
          }
          v27 = v33;
        }
        while (v33 != v32);
      }
      a7[1] = v32;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)a7, v23 - v31);
  }
  v37 = *(_QWORD *)(a1 + 128);
  v36 = *(_QWORD *)(a1 + 136);
  v751 = a7;
  if (v36 != v37)
  {
    v38 = 0;
    v39 = 0;
    v40 = __p;
    while (1)
    {
      v41 = v798;
      v42 = v38 >> 6;
      v43 = 1 << v38;
      v44 = v798[v38 >> 6];
      if ((v44 & v43) != 0)
        goto LABEL_34;
      v798[v42] = v44 | v43;
      v793.n128_u32[0] = v39;
      v45 = (_DWORD *)sub_239962518(v22, (unsigned int *)&v793);
      *(_QWORD *)((char *)v41 + (((unint64_t)*v45 >> 3) & 0x1FFFFFF8)) |= 1 << *v45;
      v793.n128_u32[0] = v39;
      v46 = *(_DWORD *)(sub_239962518(v22, (unsigned int *)&v793) + 12);
      v793.n128_u32[0] = v39;
      v47 = (unsigned int *)sub_239962518(v22, (unsigned int *)&v793);
      v48 = *(_DWORD *)(sub_239962518(v22, v47) + 12);
      if (v46 <= v48)
        v49 = v48;
      else
        v49 = v46;
      if (v46 >= v48)
        v50 = v48;
      else
        v50 = v46;
      v791 = 0u;
      v789 = 0u;
      v786 = 0;
      v783 = 0;
      v766 = v50;
      v771 = v49;
      sub_2399F0588((float *)(*a3 + 16 * v50), (float *)(*a2 + 16 * v50), (float *)(*a3 + 16 * v49), (float *)(*a2 + 16 * v49), &v791, &v789, (int8x16_t)0);
      LODWORD(v781[0]) = 0;
      v51 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v53 = *v51;
      v52 = (std::__shared_weak_count *)v51[1];
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v55 = __ldxr(p_shared_owners);
        while (__stxr(v55 + 1, p_shared_owners));
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v57 = v40;
      v58 = *(_QWORD *)(v53 + 40);
      v59 = a2;
      v60 = *a2;
      v61 = *a4;
      v62 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v64 = *v62;
      v63 = (std::__shared_weak_count *)v62[1];
      if (v63)
      {
        v65 = (unint64_t *)&v63->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        do
          v67 = __ldaxr(v65);
        while (__stlxr(v67 - 1, v65));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v68 = (float32x4_t *)(*(_QWORD *)(v64 + 40) + 16 * v771);
      a2 = v59;
      sub_2399F0758((float32x4_t *)(v58 + 16 * v766), (int32x4_t *)(v60 + 16 * v766), &v791, (float32x4_t *)(v61 + 16 * v766), v68, (int32x4_t *)(*v59 + 16 * v771), &v789, (float32x4_t *)(*a4 + 16 * v771), a5, &v801, (float *)v781, &v786, &v783);
      a9.n128_u64[0] = (unint64_t)vabd_s32((int32x2_t)v786, (int32x2_t)v783);
      v69 = a9.n128_u32[1];
      v70 = vceq_s32((int32x2_t)a9.n128_u64[0], (int32x2_t)0x100000001);
      v71 = a9.n128_u32[0];
      if (a9.n128_u32[0] <= a9.n128_u32[1])
        v72 = a9.n128_u32[1];
      else
        v72 = a9.n128_u32[0];
      a9.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)v70, (int8x8_t)vdup_lane_s32(v70, 1));
      a7 = v751;
      v40 = v57;
      if (v72 <= 1)
      {
        v22 = a1 + 104;
        if ((a9.n128_u8[0] & 1) != 0)
        {
LABEL_61:
          v73 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *a6);
          v75 = *v73;
          v74 = (std::__shared_weak_count *)v73[1];
          if (v74)
          {
            v76 = (unint64_t *)&v74->__shared_owners_;
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            do
              v78 = __ldaxr(v76);
            while (__stlxr(v78 - 1, v76));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          *(_QWORD *)(*(_QWORD *)(v75 + 40) + 8 * v42) |= v43;
          v79 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *a6);
          v81 = *v79;
          v80 = (std::__shared_weak_count *)v79[1];
          if (v80)
          {
            v82 = (unint64_t *)&v80->__shared_owners_;
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
            do
              v84 = __ldaxr(v82);
            while (__stlxr(v84 - 1, v82));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v793.n128_u32[0] = v39;
          v85 = (_DWORD *)sub_239962518(v22, (unsigned int *)&v793);
          *(_QWORD *)(*(_QWORD *)(v81 + 40) + (((unint64_t)*v85 >> 3) & 0x1FFFFFF8)) |= 1 << *v85;
          goto LABEL_33;
        }
        if (v71 + v69)
        {
          v90 = (uint64_t *)(*v751 + 24 * v766);
          v91 = v90 + 1;
          v92 = (char *)v90[1];
          v94 = v90 + 2;
          v93 = v90[2];
          if ((unint64_t)v92 < v93)
          {
            *(_QWORD *)v92 = v771;
            v95 = v771;
            v96 = v92 + 8;
            goto LABEL_103;
          }
          v97 = (char *)*v90;
          v98 = (uint64_t)&v92[-*v90] >> 3;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 61)
            sub_2394189F8();
          v100 = v93 - (_QWORD)v97;
          if (v100 >> 2 > v99)
            v99 = v100 >> 2;
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
            v101 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v101 = v99;
          if (v101)
          {
            if (v101 >> 61)
              sub_239418A80();
            v102 = v101;
            v103 = (char *)operator new(8 * v101);
            v101 = v102;
            v94 = v90 + 2;
            v104 = (uint64_t)&v103[8 * v98];
            *(_QWORD *)v104 = v771;
            v96 = (_QWORD *)(v104 + 8);
            if (v92 == v97)
              goto LABEL_100;
            do
            {
LABEL_98:
              v106 = *((_DWORD *)v92 - 2);
              v92 -= 8;
              v107 = *((_WORD *)v92 + 2);
              *(_DWORD *)(v104 - 8) = v106;
              v104 -= 8;
              *(_WORD *)(v104 + 4) = v107;
            }
            while (v92 != v97);
            v92 = (char *)*v90;
          }
          else
          {
            v103 = 0;
            v104 = 8 * v98;
            v105 = (_QWORD *)(8 * v98);
            *v105 = v771;
            v96 = v105 + 1;
            if (v92 != v97)
              goto LABEL_98;
          }
LABEL_100:
          *v90 = v104;
          *v91 = v96;
          *v94 = &v103[8 * v101];
          if (v92)
            operator delete(v92);
          v95 = v771;
LABEL_103:
          *v91 = v96;
          v108 = (uint64_t *)(*v751 + 24 * v95);
          v109 = v108 + 1;
          v110 = (char *)v108[1];
          v112 = v108 + 2;
          v111 = v108[2];
          if ((unint64_t)v110 < v111)
          {
            *(_QWORD *)v110 = v766;
            v113 = v110 + 8;
LABEL_127:
            *v109 = v113;
            v22 = a1 + 104;
            goto LABEL_33;
          }
          v114 = (char *)*v108;
          v115 = (uint64_t)&v110[-*v108] >> 3;
          v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 61)
            sub_2394189F8();
          v117 = v111 - (_QWORD)v114;
          if (v117 >> 2 > v116)
            v116 = v117 >> 2;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
            v118 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v118 = v116;
          if (v118)
          {
            if (v118 >> 61)
              sub_239418A80();
            v119 = v118;
            v120 = (char *)operator new(8 * v118);
            v118 = v119;
            v112 = v108 + 2;
            v121 = (uint64_t)&v120[8 * v115];
            *(_QWORD *)v121 = v766;
            v113 = (_QWORD *)(v121 + 8);
            if (v110 == v114)
              goto LABEL_125;
            do
            {
LABEL_123:
              v127 = *((_DWORD *)v110 - 2);
              v110 -= 8;
              v128 = *((_WORD *)v110 + 2);
              *(_DWORD *)(v121 - 8) = v127;
              v121 -= 8;
              *(_WORD *)(v121 + 4) = v128;
            }
            while (v110 != v114);
            v110 = (char *)*v108;
          }
          else
          {
            v120 = 0;
            v121 = 8 * v115;
            v126 = (_QWORD *)(8 * v115);
            *v126 = v766;
            v113 = v126 + 1;
            if (v110 != v114)
              goto LABEL_123;
          }
LABEL_125:
          *v108 = v121;
          *v109 = v113;
          *v112 = &v120[8 * v118];
          if (v110)
            operator delete(v110);
          goto LABEL_127;
        }
        v793.n128_u64[0] = v39 | 0xFFFFFFFF00000000;
        v86 = *(_DWORD *)sub_239962518(a1 + 104, (unsigned int *)&v793);
        LODWORD(v794) = v781[0];
        *(unint64_t *)((char *)v793.n128_u64 + 4) = __PAIR64__(v766, v86);
        v793.n128_u32[3] = v771;
        if (v57 >= v752)
        {
          v87 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v57 - (char *)__p) >> 2) + 1;
          if (v87 > 0xCCCCCCCCCCCCCCCLL)
            sub_2394189F8();
          if (0x999999999999999ALL * (((char *)v752 - (char *)__p) >> 2) > v87)
            v87 = 0x999999999999999ALL * (((char *)v752 - (char *)__p) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v752 - (char *)__p) >> 2) >= 0x666666666666666)
            v88 = 0xCCCCCCCCCCCCCCCLL;
          else
            v88 = v87;
          if (v88)
          {
            if (v88 > 0xCCCCCCCCCCCCCCCLL)
              sub_239418A80();
            v89 = (char *)operator new(20 * v88);
          }
          else
          {
            v89 = 0;
          }
          v122 = &v89[4 * (((char *)v57 - (char *)__p) >> 2)];
          a9 = v793;
          *(__n128 *)v122 = v793;
          *((_DWORD *)v122 + 4) = (_DWORD)v794;
          if (v57 == __p)
          {
            v125 = (__n128 *)&v89[4 * (((char *)v57 - (char *)__p) >> 2)];
            v124 = __p;
            v752 = (__n128 *)&v89[20 * v88];
            v40 = (__n128 *)(v122 + 20);
            if (__p)
              goto LABEL_120;
          }
          else
          {
            v123 = &v89[4 * (((char *)v57 - (char *)__p) >> 2)];
            v124 = __p;
            do
            {
              a9 = *(__n128 *)((char *)v40 - 20);
              v125 = (__n128 *)(v123 - 20);
              *((_DWORD *)v123 - 1) = v40[-1].n128_u32[3];
              *(__n128 *)(v123 - 20) = a9;
              v40 = (__n128 *)((char *)v40 - 20);
              v123 -= 20;
            }
            while (v40 != __p);
            v752 = (__n128 *)&v89[20 * v88];
            v40 = (__n128 *)(v122 + 20);
            if (__p)
LABEL_120:
              operator delete(v124);
          }
          __p = v125;
          goto LABEL_33;
        }
        a9 = v793;
        v57[1].n128_u32[0] = v794;
        *v57 = a9;
        v40 = (__n128 *)((char *)v57 + 20);
      }
      else
      {
        v22 = a1 + 104;
        if ((a9.n128_u8[0] & 1) != 0)
          goto LABEL_61;
      }
LABEL_33:
      v37 = *(_QWORD *)(a1 + 128);
      v36 = *(_QWORD *)(a1 + 136);
LABEL_34:
      v38 = ++v39;
      if (0xCCCCCCCCCCCCCCCDLL * ((v36 - v37) >> 2) <= v39)
        goto LABEL_131;
    }
  }
  v40 = __p;
LABEL_131:
  v749 = a2;
  v755 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v40 - (char *)__p) >> 2);
  v129 = 126 - 2 * __clz(v755);
  if (v40 == __p)
    v130 = 0;
  else
    v130 = v129;
  v131 = v40;
  sub_2399EA744((uint64_t)__p, v40, v130, 1, a9);
  v133 = *(_QWORD *)(a1 + 104);
  v132 = *(_QWORD *)(a1 + 112);
  v134 = v132 - v133;
  v135 = (v132 - v133) >> 2;
  v794 = 0;
  v793 = 0uLL;
  if (((v132 - v133) & 0x3FFFFFFFCLL) == 0)
  {
    v138 = 0;
    v795 = 0;
    v796 = 0;
    v797 = 0;
    goto LABEL_142;
  }
  v136 = ((v132 - v133) >> 2);
  v137 = 4 * v136;
  v138 = (int32x4_t *)operator new(v137);
  v793.n128_u64[0] = (unint64_t)v138;
  v794 = &v138->i8[v137];
  bzero(v138, v137);
  v793.n128_u64[1] = (unint64_t)v138->u64 + v137;
  v795 = (char *)operator new(v137);
  v796 = &v795[v137];
  v797 = &v795[v137];
  bzero(v795, v137);
  if (v136 < 8)
  {
    v139 = 0;
    do
    {
LABEL_141:
      v138->i32[v139] = v139;
      ++v139;
    }
    while (v136 != v139);
    goto LABEL_142;
  }
  v140 = (v134 >> 2) & 7;
  v139 = v136 - v140;
  v141 = (int32x4_t)xmmword_239EC6870;
  v142 = v138 + 1;
  v143.i64[0] = 0x400000004;
  v143.i64[1] = 0x400000004;
  v144.i64[0] = 0x800000008;
  v144.i64[1] = 0x800000008;
  v145 = v136 - v140;
  do
  {
    v142[-1] = v141;
    *v142 = vaddq_s32(v141, v143);
    v141 = vaddq_s32(v141, v144);
    v142 += 2;
    v145 -= 8;
  }
  while (v145);
  if (v140)
    goto LABEL_141;
LABEL_142:
  v791 = 0uLL;
  v792 = 0;
  if (v132 == v133)
  {
    v146 = 0;
  }
  else
  {
    if ((v134 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v146 = (char *)operator new(v132 - v133);
    v791.i64[0] = (uint64_t)v146;
    v792 = &v146[4 * v135];
    bzero(v146, v134 & 0xFFFFFFFFFFFFFFFCLL);
    v791.i64[1] = (uint64_t)&v146[4 * v135];
  }
  v789.i64[1] = 0;
  v790 = 0;
  v147 = &v789.i64[1];
  v789.i64[0] = (uint64_t)&v789.i64[1];
  v148 = v755;
  if (v131 != __p)
  {
    v149 = 0;
    v150 = 0;
    while (1)
    {
      v151 = (char *)__p + 20 * v149;
      v154 = *((_DWORD *)v151 + 2);
      v153 = (unsigned int *)(v151 + 8);
      v152 = v154;
      v155 = v154;
      do
      {
        v156 = v155;
        v155 = v138->u32[v155];
      }
      while (v156 != v155);
      v138->i32[v152] = v156;
      *v153 = v156;
      v157 = (char *)__p + 20 * v149;
      v158 = *((unsigned int *)v157 + 3);
      v772 = (unsigned int *)(v157 + 12);
      v159 = v158;
      do
      {
        v160 = v159;
        v159 = v138->u32[v159];
      }
      while (v160 != v159);
      v138->i32[v158] = v160;
      *v772 = v160;
      v161 = *v153;
      if (v161 != v160)
        break;
LABEL_148:
      v149 = ++v150;
      if (v148 <= v150)
      {
        v263 = (_QWORD *)v789.i64[1];
        goto LABEL_302;
      }
    }
    v162 = *a7 + 24 * v161;
    v163 = *(unsigned int **)v162;
    for (i = *(unsigned int **)(v162 + 8); v163 != i; v163 += 2)
    {
      v165 = *v163;
      do
      {
        v166 = v165;
        v165 = v138->u32[v165];
      }
      while (v166 != v165);
      v138->i32[*v163] = v166;
      if (v166 == *v772)
        goto LABEL_148;
    }
    sub_239421038((uint64_t)&v789, (_QWORD *)v789.i64[1]);
    v790 = 0;
    v789 = (int32x4_t)(unint64_t)v147;
    v762 = v153;
    v167 = *a7;
    v168 = *a7 + 24 * *v153;
    v169 = *(unsigned int **)v168;
    v170 = *(unsigned int **)(v168 + 8);
    if (*(unsigned int **)v168 == v170)
    {
      v171 = 0;
      v192 = *v772;
      v196 = (unsigned int **)(v167 + 24 * *v772);
      v194 = *v196;
      v195 = v196[1];
      if (*v196 == v195)
        goto LABEL_248;
    }
    else
    {
      v171 = 0;
      do
      {
        v172 = *v169;
        do
        {
          v173 = v172;
          v172 = *(unsigned int *)(v793.n128_u64[0] + 4 * v172);
        }
        while (v173 != v172);
        *(_DWORD *)(v793.n128_u64[0] + 4 * *v169) = v173;
        v174 = v789.i64[1];
        v175 = v147;
        v176 = v147;
        if (v789.i64[1])
        {
          while (1)
          {
            while (1)
            {
              v176 = (uint64_t *)v174;
              v177 = *(unsigned int *)(v174 + 28);
              if (v173 >= v177)
                break;
              v174 = *v176;
              v175 = v176;
              if (!*v176)
                goto LABEL_175;
            }
            if (v177 >= v173)
              break;
            v174 = v176[1];
            if (!v174)
            {
              v175 = v176 + 1;
              goto LABEL_175;
            }
          }
        }
        else
        {
LABEL_175:
          v178 = operator new(0x20uLL);
          v178[7] = v173;
          *(_QWORD *)v178 = 0;
          *((_QWORD *)v178 + 1) = 0;
          *((_QWORD *)v178 + 2) = v176;
          *v175 = (uint64_t)v178;
          if (*(_QWORD *)v789.i64[0])
          {
            v789.i64[0] = *(_QWORD *)v789.i64[0];
            v178 = (_DWORD *)*v175;
          }
          v179 = v789.i64[1];
          *((_BYTE *)v178 + 24) = v178 == (_DWORD *)v789.i64[1];
          if (v178 != (_DWORD *)v179)
          {
            do
            {
              v180 = *((_QWORD *)v178 + 2);
              if (*(_BYTE *)(v180 + 24))
                break;
              v181 = *(_BYTE **)(v180 + 16);
              v182 = *(_QWORD *)v181;
              if (*(_QWORD *)v181 == v180)
              {
                v185 = *((_QWORD *)v181 + 1);
                if (!v185 || (v186 = *(unsigned __int8 *)(v185 + 24), v183 = (_BYTE *)(v185 + 24), v186))
                {
                  if (*(_DWORD **)v180 == v178)
                  {
                    *(_BYTE *)(v180 + 24) = 1;
                    v181[24] = 0;
                    v189 = *(_QWORD *)(v180 + 8);
                    *(_QWORD *)v181 = v189;
                    if (v189)
                      goto LABEL_191;
                  }
                  else
                  {
                    v187 = *(uint64_t **)(v180 + 8);
                    v188 = *v187;
                    *(_QWORD *)(v180 + 8) = *v187;
                    if (v188)
                    {
                      *(_QWORD *)(v188 + 16) = v180;
                      v181 = *(_BYTE **)(v180 + 16);
                    }
                    v187[2] = (uint64_t)v181;
                    *(_QWORD *)(*(_QWORD *)(v180 + 16) + 8 * (**(_QWORD **)(v180 + 16) != v180)) = v187;
                    *v187 = v180;
                    *(_QWORD *)(v180 + 16) = v187;
                    v181 = (_BYTE *)v187[2];
                    v180 = *(_QWORD *)v181;
                    *((_BYTE *)v187 + 24) = 1;
                    v181[24] = 0;
                    v189 = *(_QWORD *)(v180 + 8);
                    *(_QWORD *)v181 = v189;
                    if (v189)
LABEL_191:
                      *(_QWORD *)(v189 + 16) = v181;
                  }
                  *(_QWORD *)(v180 + 16) = *((_QWORD *)v181 + 2);
                  *(_QWORD *)(*((_QWORD *)v181 + 2) + 8 * (**((_QWORD **)v181 + 2) != (_QWORD)v181)) = v180;
                  *(_QWORD *)(v180 + 8) = v181;
LABEL_163:
                  *((_QWORD *)v181 + 2) = v180;
                  break;
                }
              }
              else if (!v182 || (v184 = *(unsigned __int8 *)(v182 + 24), v183 = (_BYTE *)(v182 + 24), v184))
              {
                if (*(_DWORD **)v180 == v178)
                {
                  v191 = *((_QWORD *)v178 + 1);
                  *(_QWORD *)v180 = v191;
                  if (v191)
                  {
                    *(_QWORD *)(v191 + 16) = v180;
                    v181 = *(_BYTE **)(v180 + 16);
                  }
                  *((_QWORD *)v178 + 2) = v181;
                  *(_QWORD *)(*(_QWORD *)(v180 + 16) + 8 * (**(_QWORD **)(v180 + 16) != v180)) = v178;
                  *((_QWORD *)v178 + 1) = v180;
                  *(_QWORD *)(v180 + 16) = v178;
                  v181 = (_BYTE *)*((_QWORD *)v178 + 2);
                  *((_BYTE *)v178 + 24) = 1;
                  v181[24] = 0;
                  v180 = *((_QWORD *)v181 + 1);
                  v190 = *(_DWORD **)v180;
                  *((_QWORD *)v181 + 1) = *(_QWORD *)v180;
                  if (!v190)
                    goto LABEL_162;
                }
                else
                {
                  *(_BYTE *)(v180 + 24) = 1;
                  v181[24] = 0;
                  v180 = *((_QWORD *)v181 + 1);
                  v190 = *(_DWORD **)v180;
                  *((_QWORD *)v181 + 1) = *(_QWORD *)v180;
                  if (!v190)
                    goto LABEL_162;
                }
                *((_QWORD *)v190 + 2) = v181;
LABEL_162:
                *(_QWORD *)(v180 + 16) = *((_QWORD *)v181 + 2);
                *(_QWORD *)(*((_QWORD *)v181 + 2) + 8 * (**((_QWORD **)v181 + 2) != (_QWORD)v181)) = v180;
                *(_QWORD *)v180 = v181;
                goto LABEL_163;
              }
              *(_BYTE *)(v180 + 24) = 1;
              v178 = v181;
              v181[24] = v181 == (_BYTE *)v179;
              *v183 = 1;
            }
            while (v181 != (_BYTE *)v179);
          }
          v790 = ++v171;
        }
        v169 += 2;
      }
      while (v169 != v170);
      v167 = *a7;
      v192 = *v772;
      v193 = *a7 + 24 * *v772;
      v194 = *(unsigned int **)v193;
      v195 = *(unsigned int **)(v193 + 8);
      if (*(unsigned int **)v193 == v195)
      {
LABEL_248:
        v758 = v150;
        v217 = *v762;
        if (*v762 >= v192)
          v218 = v192;
        else
          v218 = v217;
        *(_QWORD *)(v167 + 24 * v217 + 8) = *(_QWORD *)(v167 + 24 * v217);
        *(_QWORD *)(v167 + 24 * v192 + 8) = v194;
        v219 = v167 + 24 * v218;
        v220 = *(char **)v219;
        v767 = v218;
        if (v171 > (uint64_t)(*(_QWORD *)(v219 + 16) - *(_QWORD *)v219) >> 3)
        {
          if (v171 >> 61)
            sub_2394189F8();
          v221 = v167 + 24 * v218;
          v224 = *(char **)(v221 + 8);
          v222 = (char **)(v221 + 8);
          v223 = v224;
          v225 = (char *)operator new(8 * v171);
          v226 = &v225[v224 - v220];
          v227 = v226;
          if (v224 != v220)
          {
            v227 = &v225[v223 - v220];
            do
            {
              v228 = *((_DWORD *)v223 - 2);
              v223 -= 8;
              v229 = *((_WORD *)v223 + 2);
              *((_DWORD *)v227 - 2) = v228;
              v227 -= 8;
              *((_WORD *)v227 + 2) = v229;
            }
            while (v223 != v220);
          }
          *(_QWORD *)v219 = v227;
          *v222 = v226;
          *(_QWORD *)(v219 + 16) = &v225[8 * v171];
          v218 = v767;
          if (v220)
          {
            operator delete(v220);
            v218 = v767;
          }
        }
        v230 = v789.i64[0];
        if ((uint64_t *)v789.i64[0] == v147)
        {
LABEL_259:
          v146 = (char *)v791.i64[0];
          *(_DWORD *)(v791.i64[0] + 4 * v218) = *(_DWORD *)(v791.i64[0] + 4 * *v762)
                                              + *(_DWORD *)(v791.i64[0] + 4 * *v772)
                                              + 1;
          sub_2399E8100(*a7 + 24 * *v762);
          sub_2399E8100(*a7 + 24 * *v772);
          v231 = *v772;
          v138 = (int32x4_t *)v793.n128_u64[0];
          v232 = *v762;
          do
          {
            v233 = v232;
            v232 = *(unsigned int *)(v793.n128_u64[0] + 4 * v232);
          }
          while (v233 != v232);
          *(_DWORD *)(v793.n128_u64[0] + 4 * *v762) = v233;
          v234 = v231;
          v148 = v755;
          v150 = v758;
          do
          {
            v235 = v234;
            v234 = v138->u32[v234];
          }
          while (v235 != v234);
          v138->i32[v231] = v235;
          if (v233 != v235)
          {
            v236 = v795;
            v237 = *(_DWORD *)&v795[4 * v233];
            v238 = *(_DWORD *)&v795[4 * v235];
            v239 = v233 >= v235;
            if (v233 < v235)
              v240 = v235;
            else
              v240 = v233;
            if (v233 < v235)
            {
              v241 = *(_DWORD *)&v795[4 * v235];
            }
            else
            {
              v233 = v235;
              v241 = v237;
            }
            if (v239)
              v237 = v238;
            v138->i32[v240] = v233;
            if (v241 == v237)
              ++*(_DWORD *)&v236[4 * v233];
          }
          goto LABEL_148;
        }
        while (1)
        {
          v242 = (uint64_t *)(*a7 + 24 * v218);
          v243 = *(unsigned int *)(v230 + 28);
          v245 = v242 + 1;
          v244 = (_WORD *)v242[1];
          v247 = v242 + 2;
          v246 = v242[2];
          if ((unint64_t)v244 < v246)
          {
            *(_QWORD *)v244 = v243;
            a7 = v751;
            *v245 = v244 + 4;
            v248 = *(uint64_t **)(v230 + 8);
            if (v248)
              goto LABEL_295;
            goto LABEL_297;
          }
          v249 = v147;
          v250 = (_WORD *)*v242;
          v251 = ((uint64_t)v244 - *v242) >> 3;
          v252 = v251 + 1;
          if ((unint64_t)(v251 + 1) >> 61)
            sub_2394189F8();
          v253 = v246 - (_QWORD)v250;
          if (v253 >> 2 > v252)
            v252 = v253 >> 2;
          if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8)
            v254 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v254 = v252;
          if (v254)
          {
            if (v254 >> 61)
              sub_239418A80();
            v255 = (char *)operator new(8 * v254);
            v256 = (uint64_t)&v255[8 * v251];
            *(_QWORD *)v256 = v243;
            v257 = (_QWORD *)(v256 + 8);
            if (v244 == v250)
            {
LABEL_292:
              *v242 = v256;
              *v245 = v257;
              *v247 = &v255[8 * v254];
              v147 = v249;
              if (!v244)
                goto LABEL_294;
LABEL_293:
              operator delete(v244);
              goto LABEL_294;
            }
          }
          else
          {
            v255 = 0;
            v256 = 8 * v251;
            v258 = (_QWORD *)(8 * v251);
            *v258 = v243;
            v257 = v258 + 1;
            if (v244 == v250)
              goto LABEL_292;
          }
          do
          {
            v259 = *((_DWORD *)v244 - 2);
            v244 -= 4;
            v260 = v244[2];
            *(_DWORD *)(v256 - 8) = v259;
            v256 -= 8;
            *(_WORD *)(v256 + 4) = v260;
          }
          while (v244 != v250);
          v244 = (_WORD *)*v242;
          *v242 = v256;
          *v245 = v257;
          *v247 = &v255[8 * v254];
          v147 = v249;
          if (v244)
            goto LABEL_293;
LABEL_294:
          a7 = v751;
          v218 = v767;
          *v245 = v257;
          v248 = *(uint64_t **)(v230 + 8);
          if (v248)
          {
            do
            {
LABEL_295:
              v261 = v248;
              v248 = (uint64_t *)*v248;
            }
            while (v248);
            goto LABEL_274;
          }
          do
          {
LABEL_297:
            v261 = *(uint64_t **)(v230 + 16);
            v262 = *v261 == v230;
            v230 = (uint64_t)v261;
          }
          while (!v262);
LABEL_274:
          v230 = (uint64_t)v261;
          if (v261 == v147)
            goto LABEL_259;
        }
      }
    }
    do
    {
      v197 = *v194;
      do
      {
        v198 = v197;
        v197 = *(unsigned int *)(v793.n128_u64[0] + 4 * v197);
      }
      while (v198 != v197);
      *(_DWORD *)(v793.n128_u64[0] + 4 * *v194) = v198;
      v199 = v789.i64[1];
      v200 = v147;
      v201 = v147;
      if (v789.i64[1])
      {
        while (1)
        {
          while (1)
          {
            v201 = (uint64_t *)v199;
            v202 = *(unsigned int *)(v199 + 28);
            if (v198 >= v202)
              break;
            v199 = *v201;
            v200 = v201;
            if (!*v201)
              goto LABEL_220;
          }
          if (v202 >= v198)
            break;
          v199 = v201[1];
          if (!v199)
          {
            v200 = v201 + 1;
            goto LABEL_220;
          }
        }
      }
      else
      {
LABEL_220:
        v203 = operator new(0x20uLL);
        v203[7] = v198;
        *(_QWORD *)v203 = 0;
        *((_QWORD *)v203 + 1) = 0;
        *((_QWORD *)v203 + 2) = v201;
        *v200 = (uint64_t)v203;
        if (*(_QWORD *)v789.i64[0])
        {
          v789.i64[0] = *(_QWORD *)v789.i64[0];
          v203 = (_DWORD *)*v200;
        }
        v204 = v789.i64[1];
        *((_BYTE *)v203 + 24) = v203 == (_DWORD *)v789.i64[1];
        if (v203 != (_DWORD *)v204)
        {
          do
          {
            v205 = *((_QWORD *)v203 + 2);
            if (*(_BYTE *)(v205 + 24))
              break;
            v206 = *(_BYTE **)(v205 + 16);
            v207 = *(_QWORD *)v206;
            if (*(_QWORD *)v206 == v205)
            {
              v210 = *((_QWORD *)v206 + 1);
              if (!v210 || (v211 = *(unsigned __int8 *)(v210 + 24), v208 = (_BYTE *)(v210 + 24), v211))
              {
                if (*(_DWORD **)v205 == v203)
                {
                  *(_BYTE *)(v205 + 24) = 1;
                  v206[24] = 0;
                  v214 = *(_QWORD *)(v205 + 8);
                  *(_QWORD *)v206 = v214;
                  if (v214)
                    goto LABEL_236;
                }
                else
                {
                  v212 = *(uint64_t **)(v205 + 8);
                  v213 = *v212;
                  *(_QWORD *)(v205 + 8) = *v212;
                  if (v213)
                  {
                    *(_QWORD *)(v213 + 16) = v205;
                    v206 = *(_BYTE **)(v205 + 16);
                  }
                  v212[2] = (uint64_t)v206;
                  *(_QWORD *)(*(_QWORD *)(v205 + 16) + 8 * (**(_QWORD **)(v205 + 16) != v205)) = v212;
                  *v212 = v205;
                  *(_QWORD *)(v205 + 16) = v212;
                  v206 = (_BYTE *)v212[2];
                  v205 = *(_QWORD *)v206;
                  *((_BYTE *)v212 + 24) = 1;
                  v206[24] = 0;
                  v214 = *(_QWORD *)(v205 + 8);
                  *(_QWORD *)v206 = v214;
                  if (v214)
LABEL_236:
                    *(_QWORD *)(v214 + 16) = v206;
                }
                *(_QWORD *)(v205 + 16) = *((_QWORD *)v206 + 2);
                *(_QWORD *)(*((_QWORD *)v206 + 2) + 8 * (**((_QWORD **)v206 + 2) != (_QWORD)v206)) = v205;
                *(_QWORD *)(v205 + 8) = v206;
LABEL_208:
                *((_QWORD *)v206 + 2) = v205;
                break;
              }
            }
            else if (!v207 || (v209 = *(unsigned __int8 *)(v207 + 24), v208 = (_BYTE *)(v207 + 24), v209))
            {
              if (*(_DWORD **)v205 == v203)
              {
                v216 = *((_QWORD *)v203 + 1);
                *(_QWORD *)v205 = v216;
                if (v216)
                {
                  *(_QWORD *)(v216 + 16) = v205;
                  v206 = *(_BYTE **)(v205 + 16);
                }
                *((_QWORD *)v203 + 2) = v206;
                *(_QWORD *)(*(_QWORD *)(v205 + 16) + 8 * (**(_QWORD **)(v205 + 16) != v205)) = v203;
                *((_QWORD *)v203 + 1) = v205;
                *(_QWORD *)(v205 + 16) = v203;
                v206 = (_BYTE *)*((_QWORD *)v203 + 2);
                *((_BYTE *)v203 + 24) = 1;
                v206[24] = 0;
                v205 = *((_QWORD *)v206 + 1);
                v215 = *(_DWORD **)v205;
                *((_QWORD *)v206 + 1) = *(_QWORD *)v205;
                if (!v215)
                  goto LABEL_207;
              }
              else
              {
                *(_BYTE *)(v205 + 24) = 1;
                v206[24] = 0;
                v205 = *((_QWORD *)v206 + 1);
                v215 = *(_DWORD **)v205;
                *((_QWORD *)v206 + 1) = *(_QWORD *)v205;
                if (!v215)
                  goto LABEL_207;
              }
              *((_QWORD *)v215 + 2) = v206;
LABEL_207:
              *(_QWORD *)(v205 + 16) = *((_QWORD *)v206 + 2);
              *(_QWORD *)(*((_QWORD *)v206 + 2) + 8 * (**((_QWORD **)v206 + 2) != (_QWORD)v206)) = v205;
              *(_QWORD *)v205 = v206;
              goto LABEL_208;
            }
            *(_BYTE *)(v205 + 24) = 1;
            v203 = v206;
            v206[24] = v206 == (_BYTE *)v204;
            *v208 = 1;
          }
          while (v206 != (_BYTE *)v204);
        }
        v790 = ++v171;
      }
      v194 += 2;
    }
    while (v194 != v195);
    v192 = *v772;
    v167 = *a7;
    v194 = *(unsigned int **)(*a7 + 24 * *v772);
    goto LABEL_248;
  }
  v263 = 0;
LABEL_302:
  sub_239421038((uint64_t)&v789, v263);
  v265 = *a7;
  v264 = a7[1];
  v790 = 0;
  v789 = 0uLL;
  v266 = (v264 - v265) / 24;
  if (v264 == v265)
  {
    LODWORD(v271) = 0;
    v272 = 0.0;
    v265 = v264;
  }
  else
  {
    if (v266 >> 62)
      sub_2394189F8();
    v267 = 4 * v266;
    v268 = operator new(4 * v266);
    v269 = (uint64_t)v268 + 4 * v266;
    v789.i64[0] = (uint64_t)v268;
    v790 = v269;
    memset(v268, 255, v267);
    v270 = 0;
    LODWORD(v271) = 0;
    v789.i64[1] = v269;
    v272 = 0.0;
    v273 = 1;
    do
    {
      v274 = (_QWORD *)(v265 + 24 * v270);
      v275 = v274[1];
      if (*v274 != v275)
      {
        if (v273 - 1 != (_DWORD)v271)
        {
          v276 = (__int128 *)(v265 + 24 * v271);
          v277 = *v276;
          *(_QWORD *)v276 = *v274;
          *((_QWORD *)v276 + 1) = v275;
          *(_OWORD *)v274 = v277;
          v278 = v265 + 24 * v270;
          v279 = *((_QWORD *)v276 + 2);
          *((_QWORD *)v276 + 2) = *(_QWORD *)(v278 + 16);
          *(_QWORD *)(v278 + 16) = v279;
          v280 = *(_DWORD *)&v146[4 * v271];
          *(_DWORD *)&v146[4 * v271] = *(_DWORD *)&v146[4 * v270];
          *(_DWORD *)&v146[4 * v270] = v280;
          v265 = *a7;
          v264 = a7[1];
        }
        v272 = v272 + (float)*(unsigned int *)&v146[4 * v271];
        *((_DWORD *)v268 + v270) = v271;
        LODWORD(v271) = v271 + 1;
      }
      v270 = v273;
      v266 = 0xAAAAAAAAAAAAAAABLL * ((v264 - v265) >> 3);
      ++v273;
    }
    while (v266 > v270);
  }
  v271 = v271;
  v740 = v271;
  if (v271 <= v266)
  {
    if (v271 < v266)
    {
      v281 = v265 + 24 * v271;
      if (v264 != v281)
      {
        v282 = v264;
        do
        {
          v284 = *(void **)(v282 - 24);
          v282 -= 24;
          v283 = v284;
          if (v284)
          {
            *(_QWORD *)(v264 - 16) = v283;
            operator delete(v283);
          }
          v264 = v282;
        }
        while (v282 != v281);
      }
      a7[1] = v281;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)a7, v271 - v266);
  }
  sub_2399E81C0((uint64_t)a7);
  if ((_DWORD)v740)
  {
    v286 = 0;
    v272 = v272 / (float)v740;
    v787 = 0;
    v788 = 0;
    v786 = &v787;
    while (1)
    {
      sub_239421038((uint64_t)&v786, v787);
      v787 = 0;
      v788 = 0;
      v786 = &v787;
      v288 = *a7 + 24 * v286;
      v289 = *(unsigned int **)v288;
      v290 = *(unsigned int **)(v288 + 8);
      if (*(unsigned int **)v288 == v290)
      {
        v313 = 0;
        v783 = 0;
        v784 = 0;
        v785 = 0;
        a7 = v751;
        v314 = (int32x2_t)v786;
        if (v786 != &v787)
          goto LABEL_377;
        goto LABEL_374;
      }
      v291 = 0;
      do
      {
        v292 = *v289;
        do
        {
          v293 = v292;
          v292 = *(unsigned int *)(v793.n128_u64[0] + 4 * v292);
        }
        while (v293 != v292);
        *(_DWORD *)(v793.n128_u64[0] + 4 * *v289) = v293;
        v294 = v787;
        v295 = *(_DWORD *)(v789.i64[0] + 4 * v293);
        v296 = &v787;
        v297 = &v787;
        if (v787)
        {
          while (1)
          {
            while (1)
            {
              v297 = (_QWORD **)v294;
              v298 = *((_DWORD *)v294 + 7);
              if (v295 >= v298)
                break;
              v294 = *v297;
              v296 = v297;
              if (!*v297)
                goto LABEL_339;
            }
            if (v298 >= v295)
              break;
            v294 = v297[1];
            if (!v294)
            {
              v296 = v297 + 1;
              goto LABEL_339;
            }
          }
        }
        else
        {
LABEL_339:
          v299 = operator new(0x20uLL);
          *((_DWORD *)v299 + 7) = v295;
          *v299 = 0;
          v299[1] = 0;
          v299[2] = v297;
          *v296 = v299;
          if (*v786)
          {
            v786 = (_QWORD **)*v786;
            v299 = (_QWORD *)*v296;
          }
          v300 = v787;
          v262 = v299 == v787;
          *((_BYTE *)v299 + 24) = v299 == v787;
          if (!v262)
          {
            do
            {
              v301 = v299[2];
              if (*(_BYTE *)(v301 + 24))
                break;
              v302 = *(_QWORD **)(v301 + 16);
              v303 = *v302;
              if (*v302 == v301)
              {
                v306 = v302[1];
                if (!v306 || (v307 = *(unsigned __int8 *)(v306 + 24), v304 = (_BYTE *)(v306 + 24), v307))
                {
                  if (*(_QWORD **)v301 == v299)
                  {
                    *(_BYTE *)(v301 + 24) = 1;
                    *((_BYTE *)v302 + 24) = 0;
                    v310 = *(_QWORD *)(v301 + 8);
                    *v302 = v310;
                    if (v310)
                      goto LABEL_356;
                  }
                  else
                  {
                    v308 = *(uint64_t **)(v301 + 8);
                    v309 = *v308;
                    *(_QWORD *)(v301 + 8) = *v308;
                    if (v309)
                    {
                      *(_QWORD *)(v309 + 16) = v301;
                      v302 = *(_QWORD **)(v301 + 16);
                    }
                    v308[2] = (uint64_t)v302;
                    *(_QWORD *)(*(_QWORD *)(v301 + 16) + 8 * (**(_QWORD **)(v301 + 16) != v301)) = v308;
                    *v308 = v301;
                    *(_QWORD *)(v301 + 16) = v308;
                    v302 = (_QWORD *)v308[2];
                    v301 = *v302;
                    *((_BYTE *)v308 + 24) = 1;
                    *((_BYTE *)v302 + 24) = 0;
                    v310 = *(_QWORD *)(v301 + 8);
                    *v302 = v310;
                    if (v310)
LABEL_356:
                      *(_QWORD *)(v310 + 16) = v302;
                  }
                  *(_QWORD *)(v301 + 16) = v302[2];
                  *(_QWORD *)(v302[2] + 8 * (*(_QWORD *)v302[2] != (_QWORD)v302)) = v301;
                  *(_QWORD *)(v301 + 8) = v302;
LABEL_327:
                  v302[2] = v301;
                  break;
                }
              }
              else if (!v303 || (v305 = *(unsigned __int8 *)(v303 + 24), v304 = (_BYTE *)(v303 + 24), v305))
              {
                if (*(_QWORD **)v301 == v299)
                {
                  v312 = v299[1];
                  *(_QWORD *)v301 = v312;
                  if (v312)
                  {
                    *(_QWORD *)(v312 + 16) = v301;
                    v302 = *(_QWORD **)(v301 + 16);
                  }
                  v299[2] = v302;
                  *(_QWORD *)(*(_QWORD *)(v301 + 16) + 8 * (**(_QWORD **)(v301 + 16) != v301)) = v299;
                  v299[1] = v301;
                  *(_QWORD *)(v301 + 16) = v299;
                  v302 = (_QWORD *)v299[2];
                  *((_BYTE *)v299 + 24) = 1;
                  *((_BYTE *)v302 + 24) = 0;
                  v301 = v302[1];
                  v311 = *(_QWORD **)v301;
                  v302[1] = *(_QWORD *)v301;
                  if (!v311)
                    goto LABEL_326;
                }
                else
                {
                  *(_BYTE *)(v301 + 24) = 1;
                  *((_BYTE *)v302 + 24) = 0;
                  v301 = v302[1];
                  v311 = *(_QWORD **)v301;
                  v302[1] = *(_QWORD *)v301;
                  if (!v311)
                    goto LABEL_326;
                }
                v311[2] = v302;
LABEL_326:
                *(_QWORD *)(v301 + 16) = v302[2];
                *(_QWORD *)(v302[2] + 8 * (*(_QWORD *)v302[2] != (_QWORD)v302)) = v301;
                *(_QWORD *)v301 = v302;
                goto LABEL_327;
              }
              *(_BYTE *)(v301 + 24) = 1;
              v299 = v302;
              *((_BYTE *)v302 + 24) = v302 == v300;
              *v304 = 1;
            }
            while (v302 != v300);
          }
          v788 = ++v291;
        }
        v289 += 2;
      }
      while (v289 != v290);
      v783 = 0;
      v784 = 0;
      v785 = 0;
      if (!v291)
      {
        v313 = 0;
        a7 = v751;
        v314 = (int32x2_t)v786;
        if (v786 != &v787)
          goto LABEL_377;
        goto LABEL_374;
      }
      a7 = v751;
      if (v291 >> 61)
        sub_2394189F8();
      v313 = (char *)operator new(8 * v291);
      v783 = v313;
      v784 = v313;
      v785 = &v313[8 * v291];
      v314 = (int32x2_t)v786;
      if (v786 != &v787)
        break;
LABEL_374:
      v315 = *a7;
      v316 = *a7 + 24 * v286;
      v317 = *(void **)v316;
      if (*(_QWORD *)v316)
      {
        *(_QWORD *)(v315 + 24 * v286 + 8) = v317;
        operator delete(v317);
        *(_QWORD *)v316 = 0;
        *(_QWORD *)(v316 + 8) = 0;
        *(_QWORD *)(v316 + 16) = 0;
        v313 = v784;
      }
      *(_QWORD *)v316 = v783;
      v287 = v315 + 24 * v286;
      *(_QWORD *)(v287 + 8) = v313;
      *(_QWORD *)(v287 + 16) = v785;
      if (++v286 == v740)
        goto LABEL_403;
    }
    while (1)
    {
LABEL_377:
      v318 = *(unsigned int *)(*(_QWORD *)&v314 + 28);
      if (v313 < v785)
      {
        *(_QWORD *)v313 = v318;
        v313 += 8;
        v784 = v313;
        v319 = *(_QWORD **)(*(_QWORD *)&v314 + 8);
        if (v319)
          goto LABEL_397;
        goto LABEL_399;
      }
      v320 = (char *)v783;
      v321 = (v313 - (_BYTE *)v783) >> 3;
      v322 = v321 + 1;
      if ((unint64_t)(v321 + 1) >> 61)
        sub_2394189F8();
      v323 = v785 - (_BYTE *)v783;
      if ((v785 - (_BYTE *)v783) >> 2 > v322)
        v322 = v323 >> 2;
      if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFF8)
        v324 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v324 = v322;
      if (v324)
      {
        if (v324 >> 61)
          sub_239418A80();
        v325 = (char *)operator new(8 * v324);
        v326 = &v325[8 * v321];
        *(_QWORD *)v326 = v318;
        v327 = v326 + 8;
        if (v313 == v320)
        {
LABEL_394:
          v783 = v326;
          v784 = v327;
          v785 = &v325[8 * v324];
          a7 = v751;
          if (!v313)
            goto LABEL_396;
LABEL_395:
          operator delete(v313);
          goto LABEL_396;
        }
      }
      else
      {
        v325 = 0;
        v326 = (char *)(8 * v321);
        v328 = (_QWORD *)(8 * v321);
        *v328 = v318;
        v327 = (char *)(v328 + 1);
        if (v313 == v320)
          goto LABEL_394;
      }
      do
      {
        v329 = *((_DWORD *)v313 - 2);
        v313 -= 8;
        v330 = *((_WORD *)v313 + 2);
        *((_DWORD *)v326 - 2) = v329;
        v326 -= 8;
        *((_WORD *)v326 + 2) = v330;
      }
      while (v313 != v320);
      v313 = (char *)v783;
      v783 = v326;
      v784 = v327;
      v785 = &v325[8 * v324];
      a7 = v751;
      if (v313)
        goto LABEL_395;
LABEL_396:
      v313 = v327;
      v784 = v327;
      v319 = *(_QWORD **)(*(_QWORD *)&v314 + 8);
      if (v319)
      {
        do
        {
LABEL_397:
          v331 = (_QWORD **)v319;
          v319 = (_QWORD *)*v319;
        }
        while (v319);
        goto LABEL_376;
      }
      do
      {
LABEL_399:
        v331 = *(_QWORD ***)(*(_QWORD *)&v314 + 16);
        v262 = *v331 == *(_QWORD **)&v314;
        v314 = (int32x2_t)v331;
      }
      while (!v262);
LABEL_376:
      v314 = (int32x2_t)v331;
      if (v331 == &v787)
        goto LABEL_374;
    }
  }
  v787 = 0;
  v788 = 0;
  v786 = &v787;
LABEL_403:
  v332 = *a7;
  v333 = a7[1];
  if (v333 != *a7)
  {
    v334 = 0;
    v335 = 0;
    v336 = v272;
    v285.i32[1] = 1069128089;
    v337 = v272 * 0.1;
    do
    {
      LODWORD(v336) = *(_DWORD *)(v791.i64[0] + 4 * v334);
      v336 = (double)*(unint64_t *)&v336;
      if (v337 >= v336)
      {
        v339 = (unsigned int **)(v332 + 24 * v334);
        v338 = *v339;
        v340 = v339[1];
        if (*v339 != v340)
        {
          do
          {
            v341 = (uint64_t *)(*a7 + 24 * *v338);
            v342 = *v341;
            v345 = (int *)v341[1];
            v344 = (int **)(v341 + 1);
            v343 = v345;
            if ((int *)v342 != v345)
            {
              while (*(_DWORD *)v342 != v335)
              {
                v342 += 8;
                if ((int *)v342 == v343)
                  goto LABEL_411;
              }
              if ((int *)v342 != v343)
              {
                v346 = (int *)(v342 + 8);
                if ((int *)(v342 + 8) != v343)
                {
                  do
                  {
                    if (*v346 != v335)
                    {
                      v347 = *v346;
                      *(_WORD *)(v342 + 4) = *((_WORD *)v346 + 2);
                      *(_DWORD *)v342 = v347;
                      v342 += 8;
                    }
                    v346 += 2;
                  }
                  while (v346 != v343);
                  v343 = *v344;
                }
              }
              if ((int *)v342 != v343)
              {
                *v344 = (int *)v342;
                a7 = v751;
              }
            }
LABEL_411:
            v338 += 2;
          }
          while (v338 != v340);
          v332 = *a7;
          v333 = a7[1];
          v338 = *(unsigned int **)(*a7 + 24 * v334);
        }
        *(_QWORD *)(v332 + 24 * v334 + 8) = v338;
      }
      v334 = ++v335;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v333 - v332) >> 3) > v335);
  }
  v349 = *(_QWORD *)(a1 + 104);
  v348 = *(_QWORD *)(a1 + 112);
  v784 = 0;
  v785 = 0;
  v783 = 0;
  v350 = v348 - v349;
  if (v348 == v349)
  {
    v356 = v348;
    v351 = v740;
  }
  else
  {
    v351 = v740;
    if ((unint64_t)v350 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_2394189F8();
    v352 = (char *)operator new(4 * v350);
    v783 = v352;
    v785 = &v352[16 * (v350 >> 2)];
    bzero(v352, 4 * v350);
    v353 = 0;
    v354 = 0;
    v784 = &v352[4 * v350];
    do
    {
      v357 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v359 = *v357;
      v358 = (std::__shared_weak_count *)v357[1];
      if (v358)
      {
        v360 = (unint64_t *)&v358->__shared_owners_;
        do
          v361 = __ldxr(v360);
        while (__stxr(v361 + 1, v360));
        do
          v362 = __ldaxr(v360);
        while (__stlxr(v362 - 1, v360));
        if (!v362)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v355 = *(_QWORD *)(v359 + 40);
      v350 = (uint64_t)v783;
      *((_OWORD *)v783 + v353) = *(_OWORD *)(v355 + 16 * v353);
      v348 = *(_QWORD *)(a1 + 104);
      v356 = *(_QWORD *)(a1 + 112);
      v353 = ++v354;
    }
    while (v354 < (unint64_t)((v356 - v348) >> 2));
  }
  *(_QWORD *)(a10 + 8) = *(_QWORD *)a10;
  v781[0] = 0;
  v781[1] = 0;
  if ((_DWORD)v351)
  {
    sub_2399EBCE8((char **)a10, v351, v781);
    *(_QWORD *)(a8 + 8) = *(_QWORD *)a8;
    v781[0] = 0;
    v781[1] = 0;
    sub_2399EBCE8((char **)a8, v351, v781);
    v753 = operator new(4 * v351);
    bzero(v753, 4 * v351);
    v363 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    if (!v363)
      goto LABEL_446;
LABEL_440:
    v364 = 0;
    v365 = v363 >> 2;
    v366 = v793.n128_u64[0];
    v367 = v789.i64[0];
    v764 = *(char **)a10;
    v768 = *a4;
    v368 = *(char **)a8;
    v369 = *v749;
    do
    {
      v370 = v364;
      do
      {
        v371 = v370;
        v370 = *(unsigned int *)(v366 + 4 * v370);
      }
      while (v371 != v370);
      *(_DWORD *)(v366 + 4 * v364) = v371;
      v372 = *(unsigned int *)(v367 + 4 * v371);
      if ((_DWORD)v372 != -1)
      {
        v373 = (float32x4_t *)(v768 + 16 * v364);
        v773 = *v373;
        v374 = vsubq_f32(*v373, *(float32x4_t *)(v350 + 16 * v364));
        v375 = vmulq_f32(v374, v374);
        v375.i32[3] = 0;
        v376 = expf((float)(v801 * (float)(v801 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v375, v375)))) * -9.0);
        v377 = (float *)&v764[16 * v372];
        v378 = (float *)&v368[16 * v372];
        *v377 = vmlas_n_f32(*v377, v376, v773.f32[0]);
        *v378 = *v378 + (float)(*(float *)(v369 + 16 * v364) * v376);
        v377[1] = v377[1] + (float)(v373->f32[1] * v376);
        v378[1] = v378[1] + (float)(*(float *)(v369 + 16 * v364 + 4) * v376);
        v377[2] = v377[2] + (float)(v373->f32[2] * v376);
        v378[2] = v378[2] + (float)(*(float *)(v369 + 16 * v364 + 8) * v376);
        *((float *)v753 + v372) = v376 + *((float *)v753 + v372);
      }
      ++v364;
    }
    while (v365 > v364);
    goto LABEL_446;
  }
  v753 = 0;
  *(_QWORD *)(a8 + 8) = *(_QWORD *)a8;
  v363 = v356 - v348;
  if (v363)
    goto LABEL_440;
LABEL_446:
  v379 = (unsigned int ***)v751;
  v380 = v753;
  v381 = (uint64_t *)a10;
  if ((_DWORD)v740)
  {
    for (j = 0; j != v740; ++j)
    {
      v285.i32[0] = *((_DWORD *)v753 + j);
      if (v285.f32[0] >= 0.00000001)
      {
        *(float32x4_t *)(*(_QWORD *)a10 + 16 * j) = vdivq_f32(*(float32x4_t *)(*(_QWORD *)a10 + 16 * j), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v285.f32, 0));
        v285 = *(float32x4_t *)(*(_QWORD *)a8 + 16 * j);
        v383 = vmulq_f32(v285, v285);
        v383.i32[3] = 0;
        v384 = vpaddq_f32(v383, v383);
        v385 = vpaddq_f32(v384, v384);
        v386 = (float32x4_t)xmmword_239F02850;
        if (v385.f32[0] > 0.0)
          v386 = vdivq_f32(v285, vsqrtq_f32(v385));
        *(float32x4_t *)(*(_QWORD *)a8 + 16 * j) = v386;
      }
    }
  }
  v747 = 0;
  v742 = 0;
  do
  {
    v388 = 0;
    do
    {
      v744 = v388;
      v390 = *a5 * 0.3;
      v781[0] = 0;
      v781[1] = 0;
      v782 = 0;
      v392 = *v379;
      v391 = v379[1];
      if (v391 != *v379)
      {
        v393 = 0;
        v394 = 0;
        v395 = 0;
        while (1)
        {
          v396 = (uint64_t *)&v392[3 * v394];
          v397 = v396[1];
          v748 = v396 + 1;
          v750 = v396;
          v398 = *v396;
          if (v397 != *v396)
            break;
LABEL_464:
          v394 = ++v395;
          if (0xAAAAAAAAAAAAAAABLL * (v391 - v392) <= v395)
          {
            v438 = (char *)v781[0];
            goto LABEL_500;
          }
        }
        v399 = 0;
        v400 = 0;
        v401 = *v381;
        v402 = v394 << 32;
        v759 = *v381;
        v761 = v394;
        v756 = v394 << 32;
        while (1)
        {
          v774 = v400;
          v403 = *(unsigned int *)(v398 + 8 * v399);
          v404 = &(*v379)[3 * v403];
          v406 = (uint64_t *)(v404 + 1);
          v405 = v404[1];
          v407 = *v404;
          if (v405 != *v404)
            break;
LABEL_468:
          v399 = (v774 + 1);
          v400 = v774 + 1;
          if (v399 >= (v397 - v398) >> 3)
          {
            v392 = *v379;
            v391 = v379[1];
            goto LABEL_464;
          }
        }
        v408 = 0;
        v409 = 0;
        v410 = *v381;
        v765 = (uint64_t *)(v404 + 1);
        v769 = v404;
        while (1)
        {
          v412 = v407[2 * v408];
          if ((_DWORD)v412 == v395)
            goto LABEL_473;
          v413 = *(float32x4_t *)(*v381 + 16 * v412);
          v414 = *(float32x4_t *)(v410 + 16 * v403);
          v415 = vsubq_f32(v414, v413);
          v416 = vmulq_f32(v415, v415);
          v416.i32[3] = 0;
          v417 = *(float32x4_t *)(v401 + 16 * v394);
          v418 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v416, v416)));
          v419 = vsubq_f32(v417, v414);
          v420 = vmulq_f32(v419, v419);
          v420.i32[3] = 0;
          v421 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v420, v420)));
          v422 = vsubq_f32(v417, v413);
          v423 = vmulq_f32(v422, v422);
          v423.i32[3] = 0;
          v424 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v423, v423)));
          v425 = v421 >= v424 ? v421 : v424;
          if (v418 <= v425)
            goto LABEL_473;
          v426 = sqrtf((float)((float)((float)((float)(v418 + v421) + v424) * 0.5) - v424)* (float)((float)((float)((float)((float)(v418 + v421) + v424) * 0.5) - v421)* (float)((float)((float)((float)(v418 + v421) + v424) * 0.5)* (float)((float)((float)((float)(v418 + v421) + v424) * 0.5) - v418))));
          v427 = (float)(v426 + v426) / v418;
          if (v427 >= v390)
            goto LABEL_473;
          v428 = v402 | LODWORD(v427);
          v429 = v403 | (v412 << 32);
          if (v393 >= v782)
            break;
          *(_QWORD *)v393 = v428;
          *((_QWORD *)v393 + 1) = v429;
          v411 = v393 + 16;
LABEL_472:
          v781[1] = v411;
          v405 = (unsigned int *)*v406;
          v407 = *v404;
          v393 = (char *)v411;
LABEL_473:
          v408 = ++v409;
          if (v409 >= (unint64_t)(((char *)v405 - (char *)v407) >> 3))
          {
            v397 = *v748;
            v379 = (unsigned int ***)v751;
            v398 = *v750;
            v380 = v753;
            goto LABEL_468;
          }
        }
        v430 = (char *)v781[0];
        v431 = (v393 - (char *)v781[0]) >> 4;
        v432 = v431 + 1;
        if ((unint64_t)(v431 + 1) >> 60)
          sub_2394189F8();
        v433 = v782 - (char *)v781[0];
        if ((v782 - (char *)v781[0]) >> 3 > v432)
          v432 = v433 >> 3;
        if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFF0)
          v434 = 0xFFFFFFFFFFFFFFFLL;
        else
          v434 = v432;
        if (v434)
        {
          if (v434 >> 60)
            sub_239418A80();
          v435 = (char *)operator new(16 * v434);
          v436 = &v435[16 * v431];
          *(_QWORD *)v436 = v428;
          *((_QWORD *)v436 + 1) = v429;
          v437 = v436;
          if (v393 != v430)
          {
LABEL_490:
            v381 = (uint64_t *)a10;
            do
            {
              *((_OWORD *)v437 - 1) = *((_OWORD *)v393 - 1);
              v437 -= 16;
              v393 -= 16;
            }
            while (v393 != v430);
            v393 = (char *)v781[0];
            v411 = v436 + 16;
            v781[0] = v437;
            v781[1] = v436 + 16;
            v782 = &v435[16 * v434];
            if (!v393)
              goto LABEL_494;
LABEL_493:
            operator delete(v393);
LABEL_494:
            v401 = v759;
            v394 = v761;
            v402 = v756;
            v406 = v765;
            v404 = v769;
            goto LABEL_472;
          }
        }
        else
        {
          v435 = 0;
          v436 = (char *)(16 * v431);
          *(_QWORD *)v436 = v428;
          *((_QWORD *)v436 + 1) = v429;
          v437 = (char *)(16 * v431);
          if (v393 != v430)
            goto LABEL_490;
        }
        v381 = (uint64_t *)a10;
        v411 = v436 + 16;
        v781[0] = v437;
        v781[1] = v436 + 16;
        v782 = &v435[16 * v434];
        if (!v393)
          goto LABEL_494;
        goto LABEL_493;
      }
      v393 = 0;
      v438 = 0;
LABEL_500:
      v439 = 126 - 2 * __clz((v393 - v438) >> 4);
      if (v393 == v438)
        v440 = 0;
      else
        v440 = v439;
      sub_2399EBE1C((uint64_t)v438, (unint64_t)v393, v440, 1);
      v441 = (unsigned int *)v781[0];
      v770 = (unsigned int *)v781[1];
      if (v781[0] == v781[1])
      {
        v389 = 0;
        v388 = v744;
        if (!v781[0])
          continue;
LABEL_459:
        operator delete(v441);
        continue;
      }
      v389 = 0;
      v388 = v744;
      do
      {
        while (1)
        {
          v443 = v441[1];
          v442 = v441[2];
          v444 = *v379;
          v445 = (uint64_t)&(*v379)[3 * v443];
          v446 = *(_DWORD **)v445;
          v447 = *(_DWORD **)(v445 + 8);
          if (v446 != v447)
          {
            while (*v446 != (_DWORD)v442)
            {
              v446 += 2;
              if (v446 == v447)
              {
                v446 = v447;
                break;
              }
            }
          }
          v448 = v441[3];
          v449 = &v444[3 * v442];
          v450 = *v449;
          v451 = v449[1];
          v775 = v441;
          if (v450 != v451)
          {
            while (*v450 != (_DWORD)v448)
            {
              v450 += 2;
              if (v450 == v451)
              {
                v450 = v451;
                break;
              }
            }
          }
          v452 = &v444[3 * v448];
          v454 = *v452;
          v453 = v452[1];
          if (*v452 != v453)
          {
            while (*v454 != v443)
            {
              v454 += 2;
              if (v454 == v453)
              {
                v454 = v452[1];
                break;
              }
            }
          }
          if (v446 != v447 && v450 != v451)
          {
            v455 = *v381;
            v456 = *(float32x4_t *)(*v381 + 16 * v448);
            v457 = *(float32x4_t *)(*v381 + 16 * v442);
            v458 = vsubq_f32(v457, v456);
            v459 = vmulq_f32(v458, v458);
            v459.i32[3] = 0;
            v460 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v459, v459));
            v461 = *(float32x4_t *)(*v381 + 16 * v443);
            v462 = sqrtf(v460);
            v463 = vsubq_f32(v461, v457);
            v464 = vmulq_f32(v463, v463);
            v464.i32[3] = 0;
            v465 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v464, v464)));
            v466 = vsubq_f32(v461, v456);
            v467 = vmulq_f32(v466, v466);
            v467.i32[3] = 0;
            v468 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v467, v467)));
            v469 = sqrtf((float)((float)((float)((float)(v462 + v465) + v468) * 0.5) - v468)* (float)((float)((float)((float)((float)(v462 + v465) + v468) * 0.5) - v465)* (float)((float)((float)((float)(v462 + v465) + v468) * 0.5)* (float)((float)((float)((float)(v462 + v465) + v468) * 0.5) - v462))));
            if (vabds_f32((float)(v469 + v469) / v462, *(float *)v441) <= 0.00000001)
              break;
          }
          v380 = v753;
          v441 += 4;
          if (v775 + 4 == v770)
            goto LABEL_761;
        }
        if (v465 < v390 || v468 < v390)
        {
          if (v465 >= v390)
            v471 = v441[3];
          else
            v471 = v441[2];
          v472 = 16 * v471;
          v473 = vaddq_f32(v461, *(float32x4_t *)(v455 + v472));
          v474.i64[0] = 0x3F0000003F000000;
          v474.i64[1] = 0x3F0000003F000000;
          v475 = 16 * v443;
          *(float32x4_t *)(v455 + v475) = vmulq_f32(v473, v474);
          *(float32x4_t *)(*(_QWORD *)a8 + v475) = vmulq_f32(vaddq_f32(*(float32x4_t *)(*(_QWORD *)a8 + v472), *(float32x4_t *)(*(_QWORD *)a8 + 16 * v443)), v474);
          v779[1] = 0;
          v780 = 0;
          v779[0] = &v779[1];
          v476 = *v379;
          v477 = (uint64_t)&(*v379)[3 * v471];
          v478 = *(_DWORD **)v477;
          v479 = *(_DWORD **)(v477 + 8);
          if (*(_DWORD **)v477 == v479)
          {
            v480 = 0;
            v380 = v753;
          }
          else
          {
            v480 = 0;
            v380 = v753;
            do
            {
              v481 = *v478;
              if (v481 != v443)
              {
                v482 = (void **)v779[1];
                v483 = &v779[1];
LABEL_535:
                v484 = v483;
                if (v482)
                {
                  do
                  {
                    v483 = v482;
                    v485 = *((unsigned int *)v482 + 7);
                    if (v481 < v485)
                    {
                      v482 = (void **)*v483;
                      goto LABEL_535;
                    }
                    if (v485 >= v481)
                      goto LABEL_566;
                    v482 = (void **)v483[1];
                  }
                  while (v482);
                  v484 = v483 + 1;
                }
                v486 = operator new(0x20uLL);
                v486[7] = v481;
                *(_QWORD *)v486 = 0;
                *((_QWORD *)v486 + 1) = 0;
                *((_QWORD *)v486 + 2) = v483;
                *v484 = v486;
                if (*(_QWORD *)v779[0])
                {
                  v779[0] = *(void **)v779[0];
                  v486 = *v484;
                }
                v487 = v779[1];
                v262 = v486 == v779[1];
                *((_BYTE *)v486 + 24) = v486 == v779[1];
                if (!v262)
                {
                  do
                  {
                    v488 = *((_QWORD *)v486 + 2);
                    if (*(_BYTE *)(v488 + 24))
                      break;
                    v489 = *(_BYTE **)(v488 + 16);
                    v490 = *(_QWORD *)v489;
                    if (*(_QWORD *)v489 == v488)
                    {
                      v493 = *((_QWORD *)v489 + 1);
                      if (!v493 || (v494 = *(unsigned __int8 *)(v493 + 24), v491 = (_BYTE *)(v493 + 24), v494))
                      {
                        if (*(_DWORD **)v488 == v486)
                        {
                          *(_BYTE *)(v488 + 24) = 1;
                          v489[24] = 0;
                          v497 = *(_QWORD *)(v488 + 8);
                          *(_QWORD *)v489 = v497;
                          if (v497)
                            goto LABEL_557;
                        }
                        else
                        {
                          v495 = *(uint64_t **)(v488 + 8);
                          v496 = *v495;
                          *(_QWORD *)(v488 + 8) = *v495;
                          if (v496)
                          {
                            *(_QWORD *)(v496 + 16) = v488;
                            v489 = *(_BYTE **)(v488 + 16);
                          }
                          v495[2] = (uint64_t)v489;
                          *(_QWORD *)(*(_QWORD *)(v488 + 16) + 8 * (**(_QWORD **)(v488 + 16) != v488)) = v495;
                          *v495 = v488;
                          *(_QWORD *)(v488 + 16) = v495;
                          v489 = (_BYTE *)v495[2];
                          v488 = *(_QWORD *)v489;
                          *((_BYTE *)v495 + 24) = 1;
                          v489[24] = 0;
                          v497 = *(_QWORD *)(v488 + 8);
                          *(_QWORD *)v489 = v497;
                          if (v497)
LABEL_557:
                            *(_QWORD *)(v497 + 16) = v489;
                        }
                        *(_QWORD *)(v488 + 16) = *((_QWORD *)v489 + 2);
                        *(_QWORD *)(*((_QWORD *)v489 + 2) + 8 * (**((_QWORD **)v489 + 2) != (_QWORD)v489)) = v488;
                        *(_QWORD *)(v488 + 8) = v489;
LABEL_564:
                        *((_QWORD *)v489 + 2) = v488;
                        break;
                      }
                    }
                    else if (!v490 || (v492 = *(unsigned __int8 *)(v490 + 24), v491 = (_BYTE *)(v490 + 24), v492))
                    {
                      if (*(_DWORD **)v488 == v486)
                      {
                        v502 = *((_QWORD *)v486 + 1);
                        *(_QWORD *)v488 = v502;
                        if (v502)
                        {
                          *(_QWORD *)(v502 + 16) = v488;
                          v489 = *(_BYTE **)(v488 + 16);
                        }
                        *((_QWORD *)v486 + 2) = v489;
                        *(_QWORD *)(*(_QWORD *)(v488 + 16) + 8 * (**(_QWORD **)(v488 + 16) != v488)) = v486;
                        *((_QWORD *)v486 + 1) = v488;
                        *(_QWORD *)(v488 + 16) = v486;
                        v489 = (_BYTE *)*((_QWORD *)v486 + 2);
                        *((_BYTE *)v486 + 24) = 1;
                        v489[24] = 0;
                        v488 = *((_QWORD *)v489 + 1);
                        v498 = *(_DWORD **)v488;
                        *((_QWORD *)v489 + 1) = *(_QWORD *)v488;
                        if (v498)
LABEL_562:
                          *((_QWORD *)v498 + 2) = v489;
                      }
                      else
                      {
                        *(_BYTE *)(v488 + 24) = 1;
                        v489[24] = 0;
                        v488 = *((_QWORD *)v489 + 1);
                        v498 = *(_DWORD **)v488;
                        *((_QWORD *)v489 + 1) = *(_QWORD *)v488;
                        if (v498)
                          goto LABEL_562;
                      }
                      *(_QWORD *)(v488 + 16) = *((_QWORD *)v489 + 2);
                      *(_QWORD *)(*((_QWORD *)v489 + 2) + 8 * (**((_QWORD **)v489 + 2) != (_QWORD)v489)) = v488;
                      *(_QWORD *)v488 = v489;
                      goto LABEL_564;
                    }
                    *(_BYTE *)(v488 + 24) = 1;
                    v486 = v489;
                    v489[24] = v489 == v487;
                    *v491 = 1;
                  }
                  while (v489 != v487);
                }
                v780 = (char *)++v480;
                LODWORD(v481) = *v478;
                v476 = *v379;
LABEL_566:
                v499 = &v476[3 * v481];
                v500 = *v499;
                v501 = v499[1];
                while (v500 != v501)
                {
                  if (*v500 == v471)
                    *v500 = v443;
                  v500 += 2;
                }
              }
              v478 += 2;
            }
            while (v478 != v479);
          }
          v517 = &v476[3 * v443];
          v518 = *v517;
          v519 = v517[1];
          while (v518 != v519)
          {
            v520 = (void **)v779[1];
            v521 = *v518;
            v522 = &v779[1];
LABEL_593:
            v523 = v522;
            if (v520)
            {
              do
              {
                v522 = v520;
                v524 = *((_DWORD *)v520 + 7);
                if (v521 < v524)
                {
                  v520 = (void **)*v522;
                  goto LABEL_593;
                }
                if (v524 >= v521)
                  goto LABEL_589;
                v520 = (void **)v522[1];
              }
              while (v520);
              v523 = v522 + 1;
            }
            v525 = operator new(0x20uLL);
            v525[7] = v521;
            *(_QWORD *)v525 = 0;
            *((_QWORD *)v525 + 1) = 0;
            *((_QWORD *)v525 + 2) = v522;
            *v523 = v525;
            if (*(_QWORD *)v779[0])
            {
              v779[0] = *(void **)v779[0];
              v525 = *v523;
            }
            v526 = v779[1];
            v262 = v525 == v779[1];
            *((_BYTE *)v525 + 24) = v525 == v779[1];
            if (!v262)
            {
              do
              {
                v527 = *((_QWORD *)v525 + 2);
                if (*(_BYTE *)(v527 + 24))
                  break;
                v528 = *(_BYTE **)(v527 + 16);
                v529 = *(_QWORD *)v528;
                if (*(_QWORD *)v528 == v527)
                {
                  v532 = *((_QWORD *)v528 + 1);
                  if (!v532 || (v533 = *(unsigned __int8 *)(v532 + 24), v530 = (_BYTE *)(v532 + 24), v533))
                  {
                    if (*(_DWORD **)v527 == v525)
                    {
                      *(_BYTE *)(v527 + 24) = 1;
                      v528[24] = 0;
                      v536 = *(_QWORD *)(v527 + 8);
                      *(_QWORD *)v528 = v536;
                      if (v536)
                        goto LABEL_615;
                    }
                    else
                    {
                      v534 = *(uint64_t **)(v527 + 8);
                      v535 = *v534;
                      *(_QWORD *)(v527 + 8) = *v534;
                      if (v535)
                      {
                        *(_QWORD *)(v535 + 16) = v527;
                        v528 = *(_BYTE **)(v527 + 16);
                      }
                      v534[2] = (uint64_t)v528;
                      *(_QWORD *)(*(_QWORD *)(v527 + 16) + 8 * (**(_QWORD **)(v527 + 16) != v527)) = v534;
                      *v534 = v527;
                      *(_QWORD *)(v527 + 16) = v534;
                      v528 = (_BYTE *)v534[2];
                      v527 = *(_QWORD *)v528;
                      *((_BYTE *)v534 + 24) = 1;
                      v528[24] = 0;
                      v536 = *(_QWORD *)(v527 + 8);
                      *(_QWORD *)v528 = v536;
                      if (v536)
LABEL_615:
                        *(_QWORD *)(v536 + 16) = v528;
                    }
                    *(_QWORD *)(v527 + 16) = *((_QWORD *)v528 + 2);
                    *(_QWORD *)(*((_QWORD *)v528 + 2) + 8 * (**((_QWORD **)v528 + 2) != (_QWORD)v528)) = v527;
                    *(_QWORD *)(v527 + 8) = v528;
LABEL_587:
                    *((_QWORD *)v528 + 2) = v527;
                    break;
                  }
                }
                else if (!v529 || (v531 = *(unsigned __int8 *)(v529 + 24), v530 = (_BYTE *)(v529 + 24), v531))
                {
                  if (*(_DWORD **)v527 == v525)
                  {
                    v538 = *((_QWORD *)v525 + 1);
                    *(_QWORD *)v527 = v538;
                    if (v538)
                    {
                      *(_QWORD *)(v538 + 16) = v527;
                      v528 = *(_BYTE **)(v527 + 16);
                    }
                    *((_QWORD *)v525 + 2) = v528;
                    *(_QWORD *)(*(_QWORD *)(v527 + 16) + 8 * (**(_QWORD **)(v527 + 16) != v527)) = v525;
                    *((_QWORD *)v525 + 1) = v527;
                    *(_QWORD *)(v527 + 16) = v525;
                    v528 = (_BYTE *)*((_QWORD *)v525 + 2);
                    *((_BYTE *)v525 + 24) = 1;
                    v528[24] = 0;
                    v527 = *((_QWORD *)v528 + 1);
                    v537 = *(_DWORD **)v527;
                    *((_QWORD *)v528 + 1) = *(_QWORD *)v527;
                    if (!v537)
                      goto LABEL_586;
                  }
                  else
                  {
                    *(_BYTE *)(v527 + 24) = 1;
                    v528[24] = 0;
                    v527 = *((_QWORD *)v528 + 1);
                    v537 = *(_DWORD **)v527;
                    *((_QWORD *)v528 + 1) = *(_QWORD *)v527;
                    if (!v537)
                      goto LABEL_586;
                  }
                  *((_QWORD *)v537 + 2) = v528;
LABEL_586:
                  *(_QWORD *)(v527 + 16) = *((_QWORD *)v528 + 2);
                  *(_QWORD *)(*((_QWORD *)v528 + 2) + 8 * (**((_QWORD **)v528 + 2) != (_QWORD)v528)) = v527;
                  *(_QWORD *)v527 = v528;
                  goto LABEL_587;
                }
                *(_BYTE *)(v527 + 24) = 1;
                v525 = v528;
                v528[24] = v528 == v526;
                *v530 = 1;
              }
              while (v528 != v526);
            }
            v780 = (char *)++v480;
LABEL_589:
            v518 += 2;
          }
          v539 = (uint64_t *)v779[1];
          if (v779[1])
          {
            v540 = &v779[1];
            v541 = (void **)v779[1];
            do
            {
              v542 = v541;
              v543 = v540;
              v544 = *((unsigned int *)v541 + 7);
              v545 = (void ***)(v541 + 1);
              if (v544 >= v443)
                v540 = v541;
              else
                ++v541;
              v541 = (void **)*v541;
            }
            while (v541);
            if (v540 != &v779[1])
            {
              if (v544 < v443)
                v542 = v543;
              if (v443 >= *((unsigned int *)v542 + 7))
              {
                v546 = (void ***)(v543 + 1);
                if (v544 >= v443)
                  v546 = v545;
                v547 = *v546;
                v548 = v540;
                if (*v546)
                {
                  do
                  {
                    v549 = v547;
                    v547 = (void **)*v547;
                  }
                  while (v547);
                }
                else
                {
                  do
                  {
                    v549 = (void **)v548[2];
                    v262 = *v549 == v548;
                    v548 = v549;
                  }
                  while (!v262);
                }
                if (v779[0] == v540)
                  v779[0] = v549;
                v780 = (char *)(v480 - 1);
                sub_2394F0930((uint64_t *)v779[1], (uint64_t *)v540);
                operator delete(v540);
                v539 = (uint64_t *)v779[1];
              }
            }
            if (v539)
            {
              v550 = &v779[1];
              v551 = v539;
              do
              {
                v552 = v551;
                v553 = v550;
                v554 = *((_DWORD *)v551 + 7);
                v555 = (void ***)(v551 + 1);
                if (v554 >= v471)
                  v550 = (void **)v551;
                else
                  ++v551;
                v551 = (uint64_t *)*v551;
              }
              while (v551);
              if (v550 != &v779[1])
              {
                if (v554 < v471)
                  v552 = v553;
                if (v471 >= v552[7])
                {
                  v556 = (void ***)(v553 + 1);
                  if (v554 >= v471)
                    v556 = v555;
                  v557 = *v556;
                  v558 = v550;
                  if (*v556)
                  {
                    do
                    {
                      v559 = v557;
                      v557 = (void **)*v557;
                    }
                    while (v557);
                  }
                  else
                  {
                    do
                    {
                      v559 = (void **)v558[2];
                      v262 = *v559 == v558;
                      v558 = v559;
                    }
                    while (!v262);
                  }
                  if (v779[0] == v550)
                    v779[0] = v559;
                  --v780;
                  sub_2394F0930(v539, (uint64_t *)v550);
                  operator delete(v550);
                }
              }
            }
          }
          v560 = *v379;
          (*v379)[3 * v471 + 1] = (*v379)[3 * v471];
          v560[3 * v443 + 1] = v560[3 * v443];
          v561 = (void **)v779[0];
          if (v779[0] == &v779[1])
          {
LABEL_668:
            sub_239421038((uint64_t)v779, (_QWORD *)v779[1]);
            goto LABEL_760;
          }
          while (1)
          {
            v562 = *((unsigned int *)v561 + 7);
            v563 = (uint64_t *)&(*v379)[3 * v443];
            v564 = v563 + 1;
            v565 = (char *)v563[1];
            v567 = v563 + 2;
            v566 = v563[2];
            if ((unint64_t)v565 < v566)
            {
              *(_QWORD *)v565 = v562;
              v380 = v753;
              *v564 = v565 + 8;
              v568 = (void **)v561[1];
              if (v568)
                goto LABEL_687;
              goto LABEL_689;
            }
            v569 = (char *)*v563;
            v570 = (uint64_t)&v565[-*v563] >> 3;
            v571 = v570 + 1;
            if ((unint64_t)(v570 + 1) >> 61)
              sub_2394189F8();
            v572 = v566 - (_QWORD)v569;
            if (v572 >> 2 > v571)
              v571 = v572 >> 2;
            if ((unint64_t)v572 >= 0x7FFFFFFFFFFFFFF8)
              v573 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v573 = v571;
            if (v573)
            {
              if (v573 >> 61)
                sub_239418A80();
              v574 = (char *)operator new(8 * v573);
              v575 = (uint64_t)&v574[8 * v570];
              *(_QWORD *)v575 = v562;
              v576 = (_QWORD *)(v575 + 8);
              if (v565 == v569)
              {
LABEL_693:
                v379 = (unsigned int ***)v751;
                v380 = v753;
                *v563 = v575;
                *v564 = v576;
                *v567 = &v574[8 * v573];
                if (v565)
                  goto LABEL_685;
                goto LABEL_686;
              }
            }
            else
            {
              v574 = 0;
              v575 = 8 * v570;
              v580 = (_QWORD *)(8 * v570);
              *v580 = v562;
              v576 = v580 + 1;
              if (v565 == v569)
                goto LABEL_693;
            }
            v380 = v753;
            do
            {
              v577 = *((_DWORD *)v565 - 2);
              v565 -= 8;
              v578 = *((_WORD *)v565 + 2);
              *(_DWORD *)(v575 - 8) = v577;
              v575 -= 8;
              *(_WORD *)(v575 + 4) = v578;
            }
            while (v565 != v569);
            v565 = (char *)*v563;
            *v563 = v575;
            *v564 = v576;
            *v567 = &v574[8 * v573];
            v379 = (unsigned int ***)v751;
            if (v565)
LABEL_685:
              operator delete(v565);
LABEL_686:
            *v564 = v576;
            v568 = (void **)v561[1];
            if (v568)
            {
              do
              {
LABEL_687:
                v579 = v568;
                v568 = (void **)*v568;
              }
              while (v568);
              goto LABEL_669;
            }
            do
            {
LABEL_689:
              v579 = (void **)v561[2];
              v262 = *v579 == v561;
              v561 = v579;
            }
            while (!v262);
LABEL_669:
            v561 = v579;
            if (v579 == &v779[1])
              goto LABEL_668;
          }
        }
        v503 = *(char **)a8;
        v504 = vaddq_f32(v456, v457);
        v505.i64[0] = 0x3F0000003F000000;
        v505.i64[1] = 0x3F0000003F000000;
        *(float32x4_t *)(v455 + 16 * v443) = vmulq_f32(v504, v505);
        v506 = vaddq_f32(*(float32x4_t *)&v503[16 * v448], *(float32x4_t *)&v503[16 * v442]);
        v507 = vmulq_f32(v506, v506);
        v507.i32[3] = 0;
        v508 = vpaddq_f32(v507, v507);
        v509 = vpaddq_f32(v508, v508);
        v510 = (float32x4_t)xmmword_239F02850;
        if (v509.f32[0] > 0.0)
          v510 = vdivq_f32(v506, vsqrtq_f32(v509));
        *(float32x4_t *)(*(_QWORD *)a8 + 16 * v443) = v510;
        v511 = *v379;
        v512 = (uint64_t)&(*v379)[3 * v442];
        v513 = *(char **)v512;
        v516 = *(char **)(v512 + 8);
        v515 = (const void **)(v512 + 8);
        v514 = v516;
        if (v513 != v516)
        {
          while (*(_DWORD *)v513 != (_DWORD)v448)
          {
            v513 += 8;
            if (v513 == v514)
              goto LABEL_706;
          }
          if (v513 != v514)
          {
            v581 = v513 + 8;
            if (v513 + 8 != v514)
            {
              do
              {
                if (*(_DWORD *)v581 != (_DWORD)v448)
                {
                  v582 = *(_DWORD *)v581;
                  *((_WORD *)v513 + 2) = *((_WORD *)v581 + 2);
                  *(_DWORD *)v513 = v582;
                  v513 += 8;
                }
                v581 += 8;
              }
              while (v581 != v514);
              v511 = *v379;
              v514 = (char *)(*v379)[3 * v442 + 1];
            }
          }
          if (v513 != v514)
          {
            v583 = (_BYTE *)*v515 - v514;
            if (*v515 != v514)
            {
              memmove(v513, v514, v583 - 2);
              v511 = *v379;
            }
            *v515 = &v513[v583];
          }
        }
LABEL_706:
        v584 = &v511[3 * v448];
        v585 = (char *)*v584;
        v588 = (char *)v584[1];
        v587 = (const void **)(v584 + 1);
        v586 = v588;
        if (v585 != v588)
        {
          while (*(_DWORD *)v585 != (_DWORD)v442)
          {
            v585 += 8;
            if (v585 == v586)
              goto LABEL_721;
          }
          if (v585 != v586)
          {
            v589 = v585 + 8;
            if (v585 + 8 != v586)
            {
              do
              {
                if (*(_DWORD *)v589 != (_DWORD)v442)
                {
                  v590 = *(_DWORD *)v589;
                  *((_WORD *)v585 + 2) = *((_WORD *)v589 + 2);
                  *(_DWORD *)v585 = v590;
                  v585 += 8;
                }
                v589 += 8;
              }
              while (v589 != v586);
              v586 = (char *)(*v379)[3 * v448 + 1];
            }
          }
          if (v585 != v586)
          {
            v591 = (_BYTE *)*v587 - v586;
            if (*v587 != v586)
              memmove(v585, v586, v591 - 2);
            *v587 = &v585[v591];
          }
        }
LABEL_721:
        v262 = v454 == v453;
        v380 = v753;
        if (v262)
        {
          v592 = (uint64_t *)&(*v379)[3 * v443];
          v593 = v592 + 1;
          v594 = (char *)v592[1];
          v596 = v592 + 2;
          v595 = v592[2];
          if ((unint64_t)v594 < v595)
          {
            *(_QWORD *)v594 = v448;
            v597 = v594 + 8;
            goto LABEL_741;
          }
          v598 = (char *)*v592;
          v599 = (uint64_t)&v594[-*v592] >> 3;
          v600 = v599 + 1;
          if ((unint64_t)(v599 + 1) >> 61)
            sub_2394189F8();
          v601 = v595 - (_QWORD)v598;
          if (v601 >> 2 > v600)
            v600 = v601 >> 2;
          if ((unint64_t)v601 >= 0x7FFFFFFFFFFFFFF8)
            v602 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v602 = v600;
          if (v602)
          {
            if (v602 >> 61)
              sub_239418A80();
            v603 = (char *)operator new(8 * v602);
            v604 = (uint64_t)&v603[8 * v599];
            *(_QWORD *)v604 = v448;
            v597 = (_QWORD *)(v604 + 8);
            if (v594 == v598)
            {
LABEL_739:
              *v592 = v604;
              *v593 = v597;
              *v596 = &v603[8 * v602];
              v379 = (unsigned int ***)v751;
              if (v594)
                goto LABEL_740;
              goto LABEL_741;
            }
          }
          else
          {
            v603 = 0;
            v604 = 8 * v599;
            v605 = (_QWORD *)(8 * v599);
            *v605 = v448;
            v597 = v605 + 1;
            if (v594 == v598)
              goto LABEL_739;
          }
          do
          {
            v606 = *((_DWORD *)v594 - 2);
            v594 -= 8;
            v607 = *((_WORD *)v594 + 2);
            *(_DWORD *)(v604 - 8) = v606;
            v604 -= 8;
            *(_WORD *)(v604 + 4) = v607;
          }
          while (v594 != v598);
          v594 = (char *)*v592;
          *v592 = v604;
          *v593 = v597;
          *v596 = &v603[8 * v602];
          v379 = (unsigned int ***)v751;
          if (v594)
LABEL_740:
            operator delete(v594);
LABEL_741:
          *v593 = v597;
          v608 = (uint64_t *)&(*v379)[3 * v448];
          v609 = v608 + 1;
          v610 = (char *)v608[1];
          v612 = v608 + 2;
          v611 = v608[2];
          if ((unint64_t)v610 < v611)
          {
            *(_QWORD *)v610 = v443;
            v613 = v610 + 8;
LABEL_759:
            *v609 = v613;
            goto LABEL_760;
          }
          v614 = (char *)*v608;
          v615 = (uint64_t)&v610[-*v608] >> 3;
          v616 = v615 + 1;
          if ((unint64_t)(v615 + 1) >> 61)
            sub_2394189F8();
          v617 = v611 - (_QWORD)v614;
          if (v617 >> 2 > v616)
            v616 = v617 >> 2;
          if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFF8)
            v618 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v618 = v616;
          if (v618)
          {
            if (v618 >> 61)
              sub_239418A80();
            v619 = (char *)operator new(8 * v618);
            v620 = (uint64_t)&v619[8 * v615];
            *(_QWORD *)v620 = v443;
            v613 = (_QWORD *)(v620 + 8);
            if (v610 == v614)
              goto LABEL_757;
            do
            {
LABEL_754:
              v622 = *((_DWORD *)v610 - 2);
              v610 -= 8;
              v623 = *((_WORD *)v610 + 2);
              *(_DWORD *)(v620 - 8) = v622;
              v620 -= 8;
              *(_WORD *)(v620 + 4) = v623;
            }
            while (v610 != v614);
            v610 = (char *)*v608;
            *v608 = v620;
            *v609 = v613;
            *v612 = &v619[8 * v618];
            if (!v610)
              goto LABEL_759;
          }
          else
          {
            v619 = 0;
            v620 = 8 * v615;
            v621 = (unint64_t *)(8 * v615);
            *v621 = v443;
            v613 = v621 + 1;
            if (v610 != v614)
              goto LABEL_754;
LABEL_757:
            *v608 = v620;
            *v609 = v613;
            *v612 = &v619[8 * v618];
            if (!v610)
              goto LABEL_759;
          }
          operator delete(v610);
          goto LABEL_759;
        }
LABEL_760:
        ++v747;
        v389 = 1;
        v388 = 1;
        v381 = (uint64_t *)a10;
        v441 = v775 + 4;
      }
      while (v775 + 4 != v770);
LABEL_761:
      v441 = (unsigned int *)v781[0];
      if (v781[0])
        goto LABEL_459;
    }
    while ((v389 & 1) != 0);
    v745 = v388;
    v781[0] = 0;
    v781[1] = 0;
    v782 = 0;
    v625 = *v379;
    v624 = v379[1];
    if (v624 != *v379)
    {
      v626 = 0;
      v627 = 0;
      while (1)
      {
        v628 = (uint64_t *)&v625[3 * v627];
        v629 = v628[1];
        v630 = *v628;
        if (v629 != *v628)
          break;
LABEL_766:
        if (++v627 >= 0xAAAAAAAAAAAAAAABLL * (v624 - v625))
        {
          v667 = (char *)v781[0];
          goto LABEL_805;
        }
      }
      v631 = 0;
      v632 = v381;
      v633 = 0;
      v634 = *v632;
      v635 = (v629 - *v628) >> 3;
      while (1)
      {
        v637 = 0;
        v638 = 0;
        v639 = *(unsigned int *)(v630 + 8 * v631);
        v640 = *(char **)a10;
        v641 = &(*v379)[3 * v639];
        v642 = v641 + 1;
        v643 = 0.0;
        do
        {
          v644 = *(unsigned int *)(v630 + 8 * v637);
          if ((_DWORD)v644 != (_DWORD)v639)
          {
            v645 = *v641;
            v646 = *v642;
            if (*v641 != *v642)
            {
              while (*v645 != (_DWORD)v644)
              {
                v645 += 2;
                if (v645 == v646)
                  goto LABEL_773;
              }
            }
            if (v645 != v646)
            {
              ++v638;
              v647 = *(float32x4_t *)&v640[16 * v644];
              v648 = vsubq_f32(v647, *(float32x4_t *)(v634 + 16 * v627));
              v649 = vmulq_f32(v648, v648);
              v649.i32[3] = 0;
              v650 = vsubq_f32(v647, *(float32x4_t *)&v640[16 * v639]);
              v651 = vmulq_f32(v650, v650);
              v651.i32[3] = 0;
              v643 = v643
                   + (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v649, v649)))
                           + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v651, v651))));
            }
          }
LABEL_773:
          ++v637;
        }
        while (v635 > v637);
        if (v638 != 2)
          goto LABEL_771;
        v652 = (float)(v643 * 0.25) * 1.4142;
        v653 = vsubq_f32(*(float32x4_t *)(v634 + 16 * v627), *(float32x4_t *)&v640[16 * v639]);
        v654 = vmulq_f32(v653, v653);
        v654.i32[3] = 0;
        v655 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v654, v654)));
        v656 = v655 - v652;
        if (v652 >= v655)
          v652 = v655;
        v657 = fabsf(v656 / v652);
        if (v626 < v782)
        {
          *(float *)v626 = v657;
          v636 = v626 + 12;
          *((_DWORD *)v626 + 1) = v627;
          *((_DWORD *)v626 + 2) = v639;
        }
        else
        {
          v658 = (char *)v781[0];
          v659 = 0xAAAAAAAAAAAAAAABLL * ((v626 - (char *)v781[0]) >> 2);
          v660 = v659 + 1;
          if (v659 + 1 > 0x1555555555555555)
            sub_2394189F8();
          if (0x5555555555555556 * ((v782 - (char *)v781[0]) >> 2) > v660)
            v660 = 0x5555555555555556 * ((v782 - (char *)v781[0]) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v782 - (char *)v781[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v661 = 0x1555555555555555;
          else
            v661 = v660;
          if (v661)
          {
            if (v661 > 0x1555555555555555)
              sub_239418A80();
            v662 = (char *)operator new(12 * v661);
          }
          else
          {
            v662 = 0;
          }
          v663 = &v662[12 * v659];
          *(float *)v663 = v657;
          *((_DWORD *)v663 + 1) = v627;
          *((_DWORD *)v663 + 2) = v639;
          v664 = v663;
          if (v626 == v658)
          {
            v379 = (unsigned int ***)v751;
            v636 = v663 + 12;
            v781[0] = v663;
            v781[1] = v663 + 12;
            v782 = &v662[12 * v661];
            if (!v626)
              goto LABEL_770;
          }
          else
          {
            v379 = (unsigned int ***)v751;
            do
            {
              v665 = *(_QWORD *)(v626 - 12);
              v626 -= 12;
              v666 = *((_DWORD *)v626 + 2);
              *(_QWORD *)(v664 - 12) = v665;
              v664 -= 12;
              *((_DWORD *)v664 + 2) = v666;
            }
            while (v626 != v658);
            v626 = (char *)v781[0];
            v636 = v663 + 12;
            v781[0] = v664;
            v781[1] = v663 + 12;
            v782 = &v662[12 * v661];
            if (!v626)
              goto LABEL_770;
          }
          operator delete(v626);
        }
LABEL_770:
        v781[1] = v636;
        v629 = v628[1];
        v630 = *v628;
        v626 = (char *)v636;
LABEL_771:
        v635 = (v629 - v630) >> 3;
        v631 = ++v633;
        if (v635 <= v633)
        {
          v625 = *v379;
          v624 = v379[1];
          v380 = v753;
          v381 = (uint64_t *)a10;
          goto LABEL_766;
        }
      }
    }
    v626 = 0;
    v667 = 0;
LABEL_805:
    v668 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v626 - v667) >> 2));
    if (v626 == v667)
      v669 = 0;
    else
      v669 = v668;
    sub_2399ECC48((uint64_t)v667, (unint64_t)v626, v669, 1);
    v387 = v781[0];
    v670 = v781[1];
    if (v781[0] == v781[1])
    {
      if (v781[0])
        goto LABEL_455;
    }
    else
    {
      do
      {
        v671 = v387[1];
        v672 = *v379;
        v673 = &(*v379)[3 * v671];
        v675 = (const void **)(v673 + 1);
        v674 = (char *)v673[1];
        if (v674 != (char *)*v673)
        {
          v676 = v387[2];
          v677 = &v672[3 * v676];
          v678 = *v677;
          v679 = v677[1];
          if (v678 != v679)
          {
            v680 = 0;
            v681 = 0;
            do
            {
              v682 = v678;
              while (*v682 != *(_DWORD *)(*v673 + 8 * v680))
              {
                v682 += 2;
                if (v682 == v679)
                {
                  v682 = v679;
                  break;
                }
              }
              if (v682 != v679)
                ++v681;
              ++v680;
            }
            while ((uint64_t)&v674[-*v673] >> 3 > (unint64_t)v680);
            v683 = (char *)*v673;
            if (v681 == 2)
            {
              while (*(_DWORD *)v683 != v676)
              {
                v683 += 8;
                if (v683 == v674)
                  goto LABEL_839;
              }
              if (v683 != v674)
              {
                v684 = v683 + 8;
                if (v683 + 8 != v674)
                {
                  do
                  {
                    if (*(_DWORD *)v684 != v676)
                    {
                      v685 = *(_DWORD *)v684;
                      *((_WORD *)v683 + 2) = *((_WORD *)v684 + 2);
                      *(_DWORD *)v683 = v685;
                      v683 += 8;
                    }
                    v684 += 8;
                  }
                  while (v684 != v674);
                  v672 = *v379;
                  v674 = (char *)(*v379)[3 * v671 + 1];
                }
              }
              if (v683 != v674)
              {
                v686 = v683;
                v687 = (_BYTE *)*v675 - v674;
                if (*v675 != v674)
                {
                  memmove(v683, v674, v687 - 2);
                  v672 = *v379;
                }
                *v675 = (char *)v686 + v687;
              }
LABEL_839:
              v688 = &v672[3 * v676];
              v689 = (char *)*v688;
              v692 = (char *)v688[1];
              v691 = (const void **)(v688 + 1);
              v690 = v692;
              if (v689 != v692)
              {
                while (*(_DWORD *)v689 != v671)
                {
                  v689 += 8;
                  if (v689 == v690)
                    goto LABEL_812;
                }
                if (v689 != v690)
                {
                  v693 = v689 + 8;
                  if (v689 + 8 != v690)
                  {
                    do
                    {
                      if (*(_DWORD *)v693 != v671)
                      {
                        v694 = *(_DWORD *)v693;
                        *((_WORD *)v689 + 2) = *((_WORD *)v693 + 2);
                        *(_DWORD *)v689 = v694;
                        v689 += 8;
                      }
                      v693 += 8;
                    }
                    while (v693 != v690);
                    v690 = (char *)(*v379)[3 * v676 + 1];
                  }
                }
                if (v689 != v690)
                {
                  v695 = (_BYTE *)*v691 - v690;
                  if (*v691 != v690)
                    memmove(v689, v690, v695 - 2);
                  *v691 = &v689[v695];
                }
              }
LABEL_812:
              ++v742;
              v745 = 1;
              v381 = (uint64_t *)a10;
            }
          }
        }
        v387 += 3;
      }
      while (v387 != v670);
      v387 = v781[0];
      if (v781[0])
LABEL_455:
        operator delete(v387);
    }
  }
  while ((v745 & 1) != 0);
  *a11 = v742;
  *a12 = v747;
  v696 = *v379;
  v776 = v379[1];
  if (*v379 == v776)
    goto LABEL_892;
  while (2)
  {
    v781[1] = 0;
    v782 = 0;
    v781[0] = &v781[1];
    v779[1] = 0;
    v780 = 0;
    v779[0] = 0;
    v697 = *v696;
    v698 = v696[1];
    v699 = (char *)v698 - (char *)*v696;
    if (v698 != *v696)
    {
      if (v699 < 0)
        sub_2394189F8();
      v779[0] = operator new((char *)v698 - (char *)*v696);
      v779[1] = v779[0];
      v780 = (char *)v779[0] + 8 * (v699 >> 3);
      v697 = *v696;
      v698 = v696[1];
    }
    while (v697 != v698)
    {
      v701 = (void **)v781[1];
      v702 = *v697;
      v703 = &v781[1];
      v704 = &v781[1];
      if (!v781[1])
      {
LABEL_870:
        v706 = operator new(0x20uLL);
        v706[7] = v702;
        *(_QWORD *)v706 = 0;
        *((_QWORD *)v706 + 1) = 0;
        *((_QWORD *)v706 + 2) = v704;
        *v703 = v706;
        if (*(_QWORD *)v781[0])
        {
          v781[0] = *(void **)v781[0];
          v706 = *v703;
        }
        sub_2394213B8((uint64_t *)v781[1], (uint64_t *)v706);
        ++v782;
        v707 = v779[1];
        if (v779[1] < v780)
        {
          *(_QWORD *)v779[1] = *(_QWORD *)v697;
          v700 = v707 + 4;
        }
        else
        {
          v708 = v779[0];
          v709 = ((char *)v779[1] - (char *)v779[0]) >> 3;
          v710 = v709 + 1;
          if ((unint64_t)(v709 + 1) >> 61)
            sub_2394189F8();
          v711 = v780 - (char *)v779[0];
          if ((v780 - (char *)v779[0]) >> 2 > v710)
            v710 = v711 >> 2;
          if ((unint64_t)v711 >= 0x7FFFFFFFFFFFFFF8)
            v712 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v712 = v710;
          if (v712)
          {
            if (v712 >> 61)
              sub_239418A80();
            v713 = (char *)operator new(8 * v712);
            v714 = &v713[8 * v709];
            *(_QWORD *)v714 = *(_QWORD *)v697;
            v700 = v714 + 8;
            if (v707 == v708)
            {
LABEL_887:
              v779[0] = v714;
              v779[1] = v700;
              v780 = &v713[8 * v712];
              if (v707)
                goto LABEL_888;
              goto LABEL_889;
            }
          }
          else
          {
            v713 = 0;
            v714 = (char *)(8 * v709);
            v715 = (_QWORD *)(8 * v709);
            *v715 = *(_QWORD *)v697;
            v700 = v715 + 1;
            if (v707 == v708)
              goto LABEL_887;
          }
          do
          {
            v716 = *((_DWORD *)v707 - 2);
            v707 -= 4;
            v717 = v707[2];
            *((_DWORD *)v714 - 2) = v716;
            v714 -= 8;
            *((_WORD *)v714 + 2) = v717;
          }
          while (v707 != v708);
          v707 = v779[0];
          v779[0] = v714;
          v779[1] = v700;
          v780 = &v713[8 * v712];
          if (v707)
LABEL_888:
            operator delete(v707);
LABEL_889:
          v380 = v753;
        }
        v779[1] = v700;
        goto LABEL_861;
      }
      while (1)
      {
        while (1)
        {
          v704 = v701;
          v705 = *((_DWORD *)v701 + 7);
          if (v702 >= v705)
            break;
          v701 = (void **)*v704;
          v703 = v704;
          if (!*v704)
            goto LABEL_870;
        }
        if (v705 >= v702)
          break;
        v701 = (void **)v704[1];
        if (!v701)
        {
          v703 = v704 + 1;
          goto LABEL_870;
        }
      }
LABEL_861:
      v697 += 2;
    }
    sub_2399E8100((uint64_t)v779);
    v718 = *v696;
    *v696 = (unsigned int *)v779[0];
    v696[1] = (unsigned int *)v779[1];
    v719 = (char *)v696[2];
    v696[2] = (unsigned int *)v780;
    v779[0] = v718;
    v780 = v719;
    if (v718)
    {
      v779[1] = v718;
      operator delete(v718);
    }
    sub_239421038((uint64_t)v781, (_QWORD *)v781[1]);
    v696 += 3;
    if (v696 != v776)
      continue;
    break;
  }
LABEL_892:
  v720 = (_QWORD *)a10;
  if ((_DWORD)v740)
  {
    v721 = 0;
    v722 = 8;
    do
    {
      *(_OWORD *)v781 = 0u;
      *(_OWORD *)v779 = 0u;
      v778 = *(_OWORD *)(*v720 + v721);
      v732 = (float *)(*(_QWORD *)a8 + v721);
      v733 = *v732;
      v734 = v732[1];
      v735 = v732[2];
      v736 = v735 * v735;
      if (fabsf(*v732) <= fabsf(v734))
      {
        v723 = 1.0 / sqrtf(v736 + (float)(v734 * v734));
        *(float *)&v724 = v735 * v723;
        v725 = -(float)(v734 * v723);
        v726.i32[0] = 0;
        v726.i32[3] = 0;
        v726.i32[1] = v724;
      }
      else
      {
        v737 = 1.0 / sqrtf(v736 + (float)(v733 * v733));
        *(float *)&v738 = v735 * v737;
        v725 = -(float)(v733 * v737);
        v726.i32[3] = 0;
        v726.i64[0] = v738;
      }
      *(float *)&v726.i32[2] = v725;
      *(int32x4_t *)v779 = v726;
      *(float32x4_t *)v781 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v726, (int32x4_t)vextq_s8((int8x16_t)v726, (int8x16_t)v726, 0xCuLL)), v726), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v732, *(int8x16_t *)v732, 4uLL), *(int32x4_t *)v732)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v732, (int32x4_t)vextq_s8(*(int8x16_t *)v732, *(int8x16_t *)v732, 0xCuLL)), *(int32x4_t *)v732), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v726, (int8x16_t)v726, 4uLL), v726));
      v727 = (unsigned int **)(*v751 + v722);
      v728 = *(v727 - 1);
      v729 = *v727;
      v730 = 126 - 2 * __clz(((char *)*v727 - (char *)v728) >> 3);
      v777[0] = (float32x4_t *)v779;
      v777[1] = (float32x4_t *)v781;
      v720 = (_QWORD *)a10;
      v777[2] = (float32x4_t *)&v778;
      v777[3] = (float32x4_t *)a10;
      if (v729 == v728)
        v731 = 0;
      else
        v731 = v730;
      sub_2399EDFE8(v728, v729, v777, v731, 1);
      v721 += 16;
      v722 += 24;
    }
    while (16 * v740 != v721);
  }
  if (v380)
    operator delete(v380);
  if (v783)
    operator delete(v783);
  sub_239421038((uint64_t)&v786, v787);
  if (v789.i64[0])
    operator delete((void *)v789.i64[0]);
  if (v791.i64[0])
    operator delete((void *)v791.i64[0]);
  sub_2394FCFA8((uint64_t)&v793);
  if (__p)
    operator delete(__p);
  if (v798)
    operator delete(v798);
  return 1;
}

void sub_2399E7DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57)
{
  uint64_t v57;
  void *v59;

  if (__p)
  {
    operator delete(__p);
    v59 = *(void **)(v57 - 152);
    if (!v59)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v59 = *(void **)(v57 - 152);
    if (!v59)
      goto LABEL_3;
  }
  operator delete(v59);
  _Unwind_Resume(exception_object);
}

void sub_2399E8100(uint64_t a1)
{
  _WORD *v2;
  _WORD *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  __int16 v10;

  v2 = *(_WORD **)(a1 + 8);
  v3 = *(_WORD **)a1;
  v4 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  v5 = (int64_t)v2 - *(_QWORD *)a1;
  v6 = v5 >> 3;
  if (v5 >> 3 >= (unint64_t)(v4 >> 3))
    return;
  if (v2 == v3)
  {
    *(_QWORD *)a1 = 8 * v6;
    *(_QWORD *)(a1 + 8) = 8 * v6;
    *(_QWORD *)(a1 + 16) = 8 * v6;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v5 < 0)
    sub_239418A80();
  v7 = (char *)operator new(v5) + 8 * v6;
  v8 = v7;
  do
  {
    v9 = *((_DWORD *)v2 - 2);
    v2 -= 4;
    v10 = v2[2];
    *((_DWORD *)v8 - 2) = v9;
    v8 -= 8;
    *((_WORD *)v8 + 2) = v10;
  }
  while (v2 != v3);
  v3 = *(_WORD **)a1;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v7;
  if (v3)
LABEL_9:
    operator delete(v3);
}

void sub_2399E81C0(uint64_t a1)
{
  char *v1;
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;

  v1 = *(char **)a1;
  v2 = *(int64x2_t *)(a1 + 8);
  v3 = vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)a1));
  v4 = vshrq_n_s64(v3, 3uLL);
  v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5)
    return;
  v7 = *(char **)(a1 + 8);
  if ((char *)v2.i64[0] == v1)
  {
    *(_QWORD *)a1 = 24 * v5;
    *(_QWORD *)(a1 + 8) = 24 * v5;
    *(_QWORD *)(a1 + 16) = 24 * v5;
    if (!v1)
      return;
    goto LABEL_15;
  }
  if (v5 >= 0xAAAAAAAAAAAAAABLL)
    sub_239418A80();
  v8 = (char *)operator new(v3.u64[0]) + 24 * v5;
  v9 = v8;
  do
  {
    v10 = *(_OWORD *)(v7 - 24);
    v7 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
  }
  while (v7 != v1);
  v11 = *(_QWORD *)a1;
  v1 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  if (v1 != (char *)v11)
  {
    v12 = v1;
    do
    {
      v14 = (void *)*((_QWORD *)v12 - 3);
      v12 -= 24;
      v13 = v14;
      if (v14)
      {
        *((_QWORD *)v1 - 2) = v13;
        operator delete(v13);
      }
      v1 = v12;
    }
    while (v12 != (char *)v11);
    v1 = (char *)v11;
  }
  if (v1)
LABEL_15:
    operator delete(v1);
}

BOOL sub_2399E82FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  _QWORD *v56;
  _WORD *v57;
  _WORD *v58;
  const void **v59;
  _WORD *v60;
  _WORD *v61;
  BOOL v62;
  _WORD *v63;
  int v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  _BYTE *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  void *v119;
  char *v120;
  char *v121;
  int v122;
  uint64_t *v124;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132[2];
  uint64_t v133;
  void *__p;
  uint64_t v135;
  char *v136;
  unsigned int *v137[5];
  char *v138;
  char *v139;
  char *v140;
  uint64_t *v141;
  _QWORD v142[2];

  v124 = (uint64_t *)a4;
  v7 = (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  v142[0] = v7;
  v8 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
  v131 = v7;
  if (v7 <= v8)
  {
    if (v7 < v8)
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 16 * v7;
  }
  else
  {
    sub_2399EFDE8(a4, v7 - v8);
    a4 = (uint64_t)v124;
  }
  *a6 = 0;
  v140 = 0;
  v141 = a1;
  v138 = 0;
  v139 = 0;
  v137[0] = (unsigned int *)v142;
  v137[1] = (unsigned int *)v142 + 1;
  v137[2] = (unsigned int *)a4;
  v137[3] = (unsigned int *)a2;
  v137[4] = (unsigned int *)a3;
  __p = 0;
  v135 = 0;
  v136 = 0;
  if (!(_DWORD)v7)
  {
    v44 = 0;
    goto LABEL_54;
  }
  v9 = *a1;
  v10 = 3;
  while (2)
  {
    v11 = 0;
    do
    {
      if (*(_QWORD *)(v9 + 24 * v11 + 8) != *(_QWORD *)(v9 + 24 * v11))
      {
        LODWORD(v12) = 0;
        do
        {
          if (!sub_2399E8DEC(&v141, v11, v12, v10, (uint64_t)&__p))
            goto LABEL_12;
          v13 = a1;
          v132[0] = 0;
          v132[1] = 0;
          v133 = 0;
          sub_2399E914C(v137, (char **)&__p, v132);
          v15 = v132[0];
          v14 = v132[1];
          if (v132[0] == v132[1])
          {
            if (!v132[0])
              goto LABEL_12;
LABEL_36:
            v132[1] = v15;
            operator delete(v15);
            goto LABEL_12;
          }
          v16 = v139;
          if (v139 < v140)
          {
            *(_QWORD *)v139 = 0;
            *((_QWORD *)v16 + 1) = 0;
            *((_QWORD *)v16 + 2) = 0;
            *(_OWORD *)v16 = *(_OWORD *)v132;
            *((_QWORD *)v16 + 2) = v133;
            v132[0] = 0;
            v132[1] = 0;
            v133 = 0;
            v17 = v16 + 24;
            goto LABEL_35;
          }
          v18 = v138;
          v19 = 0xAAAAAAAAAAAAAAABLL * ((v139 - v138) >> 3) + 1;
          if (v19 > 0xAAAAAAAAAAAAAAALL)
            sub_2394189F8();
          if (0x5555555555555556 * ((v140 - v138) >> 3) > v19)
            v19 = 0x5555555555555556 * ((v140 - v138) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v140 - v138) >> 3) >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v19;
          if (v20 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v21 = (char *)operator new(24 * v20);
          v22 = &v21[8 * ((v16 - v18) >> 3)];
          *(_QWORD *)v22 = v15;
          *((_QWORD *)v22 + 1) = v14;
          *((_QWORD *)v22 + 2) = v133;
          v132[1] = 0;
          v133 = 0;
          v132[0] = 0;
          v17 = v22 + 24;
          if (v16 == v18)
          {
            v138 = &v21[8 * ((v16 - v18) >> 3)];
            v139 = v22 + 24;
            v140 = &v21[24 * v20];
            a1 = v13;
            if (v16)
              goto LABEL_34;
          }
          else
          {
            do
            {
              v23 = *(_OWORD *)(v16 - 24);
              v16 -= 24;
              *(_OWORD *)(v22 - 24) = v23;
              v22 -= 24;
              *((_QWORD *)v22 + 2) = *((_QWORD *)v16 + 2);
              *(_QWORD *)v16 = 0;
              *((_QWORD *)v16 + 1) = 0;
              *((_QWORD *)v16 + 2) = 0;
            }
            while (v16 != v18);
            v16 = v138;
            v24 = v139;
            v138 = v22;
            v139 = v17;
            v140 = &v21[24 * v20];
            a1 = v13;
            if (v24 != v16)
            {
              v25 = v24;
              do
              {
                v27 = (void *)*((_QWORD *)v25 - 3);
                v25 -= 24;
                v26 = v27;
                if (v27)
                {
                  *((_QWORD *)v24 - 2) = v26;
                  operator delete(v26);
                }
                v24 = v25;
              }
              while (v25 != v16);
            }
            if (v16)
LABEL_34:
              operator delete(v16);
          }
LABEL_35:
          v139 = v17;
          v15 = v132[0];
          if (v132[0])
            goto LABEL_36;
LABEL_12:
          v12 = (v12 + 1);
          v9 = *a1;
        }
        while (v12 < (uint64_t)(*(_QWORD *)(*a1 + 24 * v11 + 8) - *(_QWORD *)(*a1 + 24 * v11)) >> 3);
      }
      ++v11;
    }
    while (v11 != v131);
    if (++v10 != 9)
      continue;
    break;
  }
  v28 = 0;
  v29 = 0;
  v30 = *a1;
  do
  {
    v31 = *(_QWORD *)(v30 + 24 * v28);
    v32 = *(_QWORD *)(v30 + 24 * v28 + 8) - v31;
    if (v32)
    {
      v33 = 0;
      v34 = 0;
      v35 = v32 >> 3;
      do
      {
        if (!*(_BYTE *)(v31 + 8 * v33 + 4))
        {
          v36 = *(_QWORD *)(v30 + 24 * *(unsigned int *)(v31 + 8 * v33));
          v37 = *(_QWORD *)(v30 + 24 * *(unsigned int *)(v31 + 8 * v33) + 8);
          v38 = v37 - v36;
          if (v37 == v36)
            goto LABEL_70;
          v39 = 0;
          v40 = v38 >> 3;
          v41 = 1;
          while (v28 != *(_DWORD *)(v36 + 8 * v39))
          {
            v39 = v41++;
            if (v40 <= v39)
              goto LABEL_70;
          }
          v42 = v36 + 8 * v39;
          if (*(_BYTE *)(v42 + 4))
          {
            *(_BYTE *)(v31 + 8 * v33 + 5) = 1;
            *(_BYTE *)(v42 + 5) = 1;
          }
        }
        v33 = ++v34;
      }
      while (v35 > v34);
    }
    v29 = ++v28 >= v131;
  }
  while (v28 != v131);
  v43 = 0;
  do
  {
    v56 = (_QWORD *)(*a1 + 24 * v43);
    v57 = (_WORD *)*v56;
    v60 = (_WORD *)v56[1];
    v59 = (const void **)(v56 + 1);
    v58 = v60;
    if (v57 != v60)
    {
      v61 = v57 + 4;
      while (*((_BYTE *)v61 - 3))
      {
        v62 = v61 == v58;
        v61 += 4;
        if (v62)
          goto LABEL_82;
      }
      v63 = v61 - 4;
      if (v61 - 4 != v58 && v61 != v58)
      {
        do
        {
          if (*((_BYTE *)v61 + 5))
          {
            v64 = *(_DWORD *)v61;
            v63[2] = v61[2];
            *(_DWORD *)v63 = v64;
            v63 += 4;
          }
          v61 += 4;
        }
        while (v61 != v58);
        v58 = *(_WORD **)(*a1 + 24 * v43 + 8);
      }
      if (v63 != v58)
      {
        v65 = (_BYTE *)*v59 - (_BYTE *)v58;
        if (*v59 != v58)
          memmove(v63, v58, v65 - 2);
        *v59 = (char *)v63 + v65;
      }
    }
LABEL_82:
    ++v43;
  }
  while (v43 != v131);
  v66 = 0;
  v44 = 0;
  v67 = *a1;
  while (2)
  {
    if (*(_QWORD *)(v67 + 24 * v66 + 8) == *(_QWORD *)(v67 + 24 * v66))
      goto LABEL_100;
    v122 = v44;
    LODWORD(v68) = 0;
    v69 = v141;
    v127 = v66;
    v128 = v66;
    while (2)
    {
      v70 = (char *)__p;
      v135 = (uint64_t)__p;
      v71 = v68;
      if (*(_BYTE *)(*(_QWORD *)(*v69 + 24 * v66) + 8 * v68 + 4))
      {
LABEL_104:
        v135 = (uint64_t)__p;
        goto LABEL_105;
      }
      v72 = v68;
      v73 = v128;
      v74 = v66;
      while (2)
      {
        v75 = v73 | (v72 << 32);
        if (v70 >= v136)
        {
          v76 = (char *)__p;
          v77 = v70 - (_BYTE *)__p;
          v78 = (v70 - (_BYTE *)__p) >> 3;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61)
            sub_2394189F8();
          v80 = v136 - (_BYTE *)__p;
          if ((v136 - (_BYTE *)__p) >> 2 > v79)
            v79 = v80 >> 2;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
            v81 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          v130 = v71;
          if (v81)
          {
            v129 = v73 | (v72 << 32);
            if (v81 >> 61)
              sub_239418A80();
            v82 = v73;
            v83 = v70 - (_BYTE *)__p;
            v84 = v81;
            v85 = operator new(8 * v81);
            v81 = v84;
            v77 = v83;
            v73 = v82;
            v86 = (uint64_t *)&v85[8 * v78];
            *v86 = v129;
            v87 = (uint64_t)(v86 + 1);
            if (v70 == v76)
              goto LABEL_125;
          }
          else
          {
            v85 = 0;
            v86 = (uint64_t *)(8 * v78);
            *(_QWORD *)(8 * v78) = v75;
            v87 = 8 * v78 + 8;
            if (v70 == v76)
            {
LABEL_125:
              __p = v86;
              v135 = v87;
              v136 = &v85[8 * v81];
              if (v70)
                operator delete(v70);
              v70 = (char *)v87;
              v66 = v127;
              v71 = v130;
              goto LABEL_128;
            }
          }
          v88 = v70 - 8 - v76;
          if (v88 >= 0x168)
          {
            if (&v85[v77 - 8 - (v88 & 0xFFFFFFFFFFFFFFF8)] > &v85[v77 - 8])
            {
              v89 = v70;
            }
            else if (&v70[-(v88 & 0xFFFFFFFFFFFFFFF8) - 8] > v70 - 8)
            {
              v89 = v70;
            }
            else if ((unint64_t)(v70 - v85 - v77) >= 0x20)
            {
              v99 = (v88 >> 3) + 1;
              v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
              v89 = &v70[-v100];
              v86 = (uint64_t *)((char *)v86 - v100);
              v101 = &v85[8 * v78 - 16];
              v102 = v70 - 16;
              v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v104 = *(_OWORD *)v102;
                *(v101 - 1) = *((_OWORD *)v102 - 1);
                *v101 = v104;
                v101 -= 2;
                v102 -= 32;
                v103 -= 4;
              }
              while (v103);
              if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_124;
            }
            else
            {
              v89 = v70;
            }
          }
          else
          {
            v89 = v70;
          }
          do
          {
            v90 = *((_QWORD *)v89 - 1);
            v89 -= 8;
            *--v86 = v90;
          }
          while (v89 != v76);
LABEL_124:
          v70 = (char *)__p;
          goto LABEL_125;
        }
        *(_QWORD *)v70 = v75;
        v70 += 8;
LABEL_128:
        v135 = (uint64_t)v70;
        v69 = v141;
        v91 = *v141;
        v73 = *(unsigned int *)(*(_QWORD *)(*v141 + 24 * v73) + 8 * v72);
        v92 = *(_QWORD *)(*v141 + 24 * v73);
        v93 = *(_QWORD *)(*v141 + 24 * v73 + 8) - v92;
        v94 = v93 >> 3;
        if (!(v93 >> 3))
          goto LABEL_104;
        v95 = 0;
        v96 = (v93 >> 3);
        v97 = *(int **)(*v141 + 24 * v73);
        while (1)
        {
          v98 = *v97;
          v97 += 2;
          if (v98 == v74)
            break;
          if (v96 == ++v95)
            goto LABEL_104;
        }
        if ((_DWORD)v94 == 1)
          goto LABEL_104;
        if (v66 != v73)
        {
          v72 = ((int)v95 + 1) % v94;
          v74 = v73;
          if (*(_BYTE *)(v92 + 8 * v72 + 4))
            goto LABEL_104;
          continue;
        }
        break;
      }
      v105 = v70;
      if (__p != v70)
      {
        v106 = v70 - (_BYTE *)__p - 8;
        v107 = (char *)__p;
        if (v106 < 8)
          goto LABEL_169;
        v108 = (v106 >> 3) + 1;
        v107 = (char *)__p + 8 * (v108 & 0x3FFFFFFFFFFFFFFELL);
        v109 = (unsigned int *)((char *)__p + 8);
        v110 = v108 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v111 = *(v109 - 1);
          v112 = 24 * *(v109 - 2);
          v113 = *v109;
          v114 = v109[1];
          v109 += 4;
          v115 = *(_QWORD *)(v91 + v112) + 8 * v111;
          v116 = *(_QWORD *)(v91 + 24 * v113) + 8 * v114;
          *(_BYTE *)(v115 + 4) = 1;
          *(_BYTE *)(v116 + 4) = 1;
          v110 -= 2;
        }
        while (v110);
        if (v108 != (v108 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_169:
          do
          {
            v117 = *(_DWORD *)v107;
            v118 = *((unsigned int *)v107 + 1);
            v107 += 8;
            *(_BYTE *)(*(_QWORD *)(v91 + 24 * v117) + 8 * v118 + 4) = 1;
          }
          while (v107 != v70);
        }
        v105 = __p;
      }
      if ((unint64_t)(v70 - v105) <= 0x30)
      {
        v132[0] = 0;
        v132[1] = 0;
        v133 = 0;
        sub_2399E914C(v137, (char **)&__p, v132);
        v119 = v132[0];
        if (v132[0] != v132[1])
        {
          v120 = v139;
          if (v139 >= v140)
          {
            v121 = sub_2396C8920(&v138, (uint64_t)v132);
            v119 = v132[0];
          }
          else
          {
            v119 = 0;
            *(_QWORD *)v139 = 0;
            *((_QWORD *)v120 + 1) = 0;
            *((_QWORD *)v120 + 2) = 0;
            *(_OWORD *)v120 = *(_OWORD *)v132;
            *((_QWORD *)v120 + 2) = v133;
            v132[0] = 0;
            v132[1] = 0;
            v133 = 0;
            v121 = v120 + 24;
          }
          v139 = v121;
        }
        if (v119)
        {
          v132[1] = v119;
          operator delete(v119);
        }
        ++v122;
      }
LABEL_105:
      v68 = (v71 + 1);
      v67 = *a1;
      if (v68 < (uint64_t)(*(_QWORD *)(*a1 + 24 * v66 + 8) - *(_QWORD *)(*a1 + 24 * v66)) >> 3)
        continue;
      break;
    }
    v44 = v122;
LABEL_100:
    ++v66;
    a4 = (uint64_t)v124;
    if (v66 != v131)
      continue;
    break;
  }
LABEL_54:
  *a6 = v44;
  v45 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
  if (HIDWORD(v142[0]) != v45)
  {
    if (HIDWORD(v142[0]) <= v45)
    {
      if (HIDWORD(v142[0]) < v45)
        v124[1] = *(_QWORD *)a4 + 16 * HIDWORD(v142[0]);
    }
    else
    {
      sub_2399EFDE8((uint64_t)v124, HIDWORD(v142[0]) - v45);
    }
  }
  v46 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4;
  v47 = LODWORD(v142[0]);
  if (LODWORD(v142[0]) != v46)
  {
    if (LODWORD(v142[0]) <= v46)
    {
      if (LODWORD(v142[0]) < v46)
        *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 16 * LODWORD(v142[0]);
    }
    else
    {
      sub_239932734((char **)a3, LODWORD(v142[0]) - v46);
      v47 = LODWORD(v142[0]);
    }
  }
  v48 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  if (v47 != v48)
  {
    if (v47 <= v48)
    {
      if (v47 < v48)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16 * v47;
    }
    else
    {
      sub_239932734((char **)a2, v47 - v48);
    }
  }
  sub_2399E9B38((uint64_t)v124);
  sub_2399E9C88((char **)a3);
  sub_2399E9C88((char **)a2);
  sub_2399E0634(v124, a2, (char **)a3);
  v29 = 1;
LABEL_70:
  if (__p)
  {
    v135 = (uint64_t)__p;
    operator delete(__p);
  }
  v49 = v138;
  if (v138)
  {
    v50 = v139;
    v51 = v138;
    if (v139 != v138)
    {
      v52 = v139;
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 3);
        v52 -= 24;
        v53 = v54;
        if (v54)
        {
          *((_QWORD *)v50 - 2) = v53;
          operator delete(v53);
        }
        v50 = v52;
      }
      while (v52 != v49);
      v51 = v138;
    }
    v139 = v49;
    operator delete(v51);
  }
  return v29;
}

void sub_2399E8D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;

  if (__p)
  {
    operator delete(__p);
    v26 = a23;
    if (!a23)
    {
LABEL_3:
      v27 = *(char **)(v24 - 128);
      if (!v27)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = *(char **)(v24 - 128);
  if (!v27)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v28 = *(char **)(v24 - 120);
  v29 = v27;
  if (v28 != v27)
  {
    v30 = *(char **)(v24 - 120);
    do
    {
      v32 = (void *)*((_QWORD *)v30 - 3);
      v30 -= 24;
      v31 = v32;
      if (v32)
      {
        *((_QWORD *)v28 - 2) = v31;
        operator delete(v31);
      }
      v28 = v30;
    }
    while (v30 != v27);
    v29 = *(char **)(v24 - 128);
  }
  *(_QWORD *)(v24 - 120) = v27;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399E8DEC(uint64_t **a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int *v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  unint64_t v54;

  v6 = a2;
  v7 = *(unint64_t **)a5;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  v8 = *(_QWORD *)(**a1 + 24 * a2);
  v9 = a2;
  do
  {
    if (*(_BYTE *)(v8 + 8 * a3 + 4) || a4 && a4 <= ((uint64_t)v7 - *(_QWORD *)a5) >> 3)
      goto LABEL_49;
    v10 = a3;
    v11 = v9 | ((unint64_t)a3 << 32);
    v12 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v7 >= v12)
    {
      v13 = *(unint64_t **)a5;
      v14 = (uint64_t)v7 - *(_QWORD *)a5;
      v15 = v14 >> 3;
      v16 = (v14 >> 3) + 1;
      if (v16 >> 61)
        sub_2394189F8();
      v17 = v12 - (_QWORD)v13;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      v53 = a1;
      v54 = a4;
      v52 = v6;
      if (v18)
      {
        if (v18 >> 61)
          sub_239418A80();
        v19 = operator new(8 * v18);
        v20 = (unint64_t *)&v19[8 * v15];
        *v20 = v11;
        v21 = (uint64_t)(v20 + 1);
        if (v7 == v13)
          goto LABEL_31;
      }
      else
      {
        v19 = 0;
        v20 = (unint64_t *)(8 * v15);
        *(_QWORD *)(8 * v15) = v11;
        v21 = 8 * v15 + 8;
        if (v7 == v13)
        {
LABEL_31:
          *(_QWORD *)a5 = v20;
          *(_QWORD *)(a5 + 8) = v21;
          *(_QWORD *)(a5 + 16) = &v19[8 * v18];
          if (v7)
            operator delete(v7);
          v7 = (unint64_t *)v21;
          a1 = v53;
          a4 = v54;
          v6 = v52;
          goto LABEL_34;
        }
      }
      v22 = (char *)(v7 - 1) - (char *)v13;
      if (v22 >= 0x168)
      {
        if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
        {
          v23 = v7;
        }
        else if ((unint64_t *)((char *)v7 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
        {
          v23 = v7;
        }
        else if ((unint64_t)((char *)v7 - v19 - v14) >= 0x20)
        {
          v24 = (v22 >> 3) + 1;
          v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          v23 = &v7[v25 / 0xFFFFFFFFFFFFFFF8];
          v20 = (unint64_t *)((char *)v20 - v25);
          v26 = &v19[8 * v15 - 16];
          v27 = v7 - 2;
          v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *v26 = v29;
            v26 -= 2;
            v27 -= 4;
            v28 -= 4;
          }
          while (v28);
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_30;
        }
        else
        {
          v23 = v7;
        }
      }
      else
      {
        v23 = v7;
      }
      do
      {
        v30 = *--v23;
        *--v20 = v30;
      }
      while (v23 != v13);
LABEL_30:
      v7 = *(unint64_t **)a5;
      goto LABEL_31;
    }
    *v7++ = v11;
LABEL_34:
    v31 = **a1;
    v32 = *(unsigned int *)(*(_QWORD *)(v31 + 24 * v9) + 8 * v10);
    *(_QWORD *)(a5 + 8) = v7;
    v8 = *(_QWORD *)(v31 + 24 * v32);
    v33 = (unint64_t)(*(_QWORD *)(v31 + 24 * v32 + 8) - v8) >> 3;
    if (!(_DWORD)v33)
      goto LABEL_49;
    v34 = 0;
    v35 = *(int **)(v31 + 24 * v32);
    while (1)
    {
      v36 = *v35;
      v35 += 2;
      if (v36 == v9)
        break;
      if ((_DWORD)v33 == ++v34)
        goto LABEL_49;
    }
    if ((_DWORD)v33 == 1)
      goto LABEL_49;
    a3 = (v34 + 1) % v33;
    v9 = v32;
  }
  while (v32 != v6);
  v37 = *(unint64_t **)a5;
  if (a4 && a4 != v7 - v37)
  {
LABEL_49:
    result = 0;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
    return result;
  }
  if (v37 == v7)
    return 1;
  v38 = (char *)v7 - (char *)v37 - 8;
  v39 = *(unint64_t **)a5;
  if (v38 < 8)
    goto LABEL_50;
  v40 = (v38 >> 3) + 1;
  v39 = &v37[v40 & 0x3FFFFFFFFFFFFFFELL];
  v41 = (unsigned int *)(v37 + 1);
  v42 = v40 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v43 = *(v41 - 1);
    v44 = 24 * *(v41 - 2);
    v45 = *v41;
    v46 = v41[1];
    v41 += 4;
    v47 = *(_QWORD *)(v31 + v44) + 8 * v43;
    v48 = *(_QWORD *)(v31 + 24 * v45) + 8 * v46;
    *(_BYTE *)(v47 + 4) = 1;
    *(_BYTE *)(v48 + 4) = 1;
    v42 -= 2;
  }
  while (v42);
  if (v40 == (v40 & 0x3FFFFFFFFFFFFFFELL))
    return 1;
LABEL_50:
  result = 1;
  do
  {
    v50 = *(_DWORD *)v39;
    v51 = *((unsigned int *)v39++ + 1);
    *(_BYTE *)(*(_QWORD *)(v31 + 24 * v50) + 8 * v51 + 4) = 1;
  }
  while (v39 != v7);
  return result;
}

void sub_2399E914C(unsigned int **a1, char **a2, _QWORD *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unsigned int **v6;
  char *v7;
  unint64_t v8;
  unsigned int *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x4_t v19;
  float v20;
  float v21;
  unint64_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  char *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  char *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  char *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  char *v87;
  char *i;
  int64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  BOOL v105;
  BOOL v107;
  BOOL v109;
  BOOL v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unsigned int *v121;
  unsigned int *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _DWORD *v127;
  float32x4_t v128;
  unsigned int v129;
  float32x4_t v130;
  unsigned int v131;
  uint64_t v132;
  float32x4_t v133;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  unint64_t v139;
  unint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  float v157;
  float v158;
  _DWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _BYTE *v169;
  _DWORD *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  _OWORD *v176;
  char *v177;
  uint64_t v178;
  __int128 v179;
  int v180;
  char *v181;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;

  a3[1] = *a3;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if ((unint64_t)v5 >= 0x11)
  {
    v6 = a1;
    while (1)
    {
      if (v5 == 32)
      {
        v122 = v6[1];
        v121 = v6[2];
        v123 = *v122;
        v124 = (v123 + 1);
        *v122 = v124;
        v125 = *(_QWORD *)v121;
        v126 = (uint64_t)(*((_QWORD *)v121 + 1) - *(_QWORD *)v121) >> 4;
        if (v124 > v126)
        {
          sub_2399EFDE8((uint64_t)v121, v124 - v126);
          v3 = *a2;
          v125 = *(_QWORD *)v6[2];
        }
        v127 = (_DWORD *)(v125 + 16 * v123);
        *v127 = *(_DWORD *)v3;
        v127[1] = *((_DWORD *)v3 + 2);
        v127[2] = *((_DWORD *)v3 + 4);
        v127[3] = *((_DWORD *)v3 + 6);
        return;
      }
      v8 = v5 >> 3;
      v9 = v6[3];
      v10 = *(char **)v9;
      if ((unint64_t)v5 < 0x29)
        break;
      LODWORD(v11) = -1;
      v12 = 5;
      v13 = INFINITY;
      do
      {
        v22 = v12 - 5;
        v23 = v12 - 4;
        v24 = *(float32x4_t *)&v10[16 * *(unsigned int *)&v3[8 * (v23 % v8)]];
        v25 = vsubq_f32(*(float32x4_t *)&v10[16 * *(unsigned int *)&v3[8 * (v22 % v8)]], v24);
        v26 = vmulq_f32(v25, v25);
        v26.i32[3] = 0;
        v27 = vpaddq_f32(v26, v26);
        v28 = vpaddq_f32(v27, v27);
        v29 = (float32x4_t)xmmword_239F02850;
        if (v28.f32[0] > 0.0)
          v29 = vdivq_f32(v25, vsqrtq_f32(v28));
        v30 = &v3[8 * ((v12 - 3) % v8)];
        v185 = *(float32x4_t *)&v10[16 * *(unsigned int *)&v3[8 * (v23 % v8)]];
        v186 = *(float32x4_t *)&v10[16 * *(unsigned int *)v30];
        v31 = vsubq_f32(v186, v24);
        v32 = vmulq_f32(v31, v31);
        v32.i32[3] = 0;
        v33 = vpaddq_f32(v32, v32);
        v34 = vpaddq_f32(v33, v33);
        v35 = (float32x4_t)xmmword_239F02850;
        if (v34.f32[0] > 0.0)
          v35 = vdivq_f32(v31, vsqrtq_f32(v34));
        v36 = vmulq_f32(v29, v35);
        v36.i32[3] = 0;
        v37 = acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)));
        v38 = *(float32x4_t *)&v10[16 * *(unsigned int *)v30];
        v39 = vsubq_f32(v185, v38);
        v40 = vmulq_f32(v39, v39);
        v40.i32[3] = 0;
        v41 = vpaddq_f32(v40, v40);
        v42 = vpaddq_f32(v41, v41);
        v43 = (float32x4_t)xmmword_239F02850;
        if (v42.f32[0] > 0.0)
          v43 = vdivq_f32(v39, vsqrtq_f32(v42));
        v44 = &v3[8 * ((v12 - 2) % v8)];
        v45 = vsubq_f32(*(float32x4_t *)&v10[16 * *(unsigned int *)v44], v38);
        v46 = vmulq_f32(v45, v45);
        v46.i32[3] = 0;
        v47 = vpaddq_f32(v46, v46);
        v48 = vpaddq_f32(v47, v47);
        v49 = (float32x4_t)xmmword_239F02850;
        if (v48.f32[0] > 0.0)
          v49 = vdivq_f32(v45, vsqrtq_f32(v48));
        v50 = vmulq_f32(v43, v49);
        v50.i32[3] = 0;
        v51 = acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v50, v50)));
        v52 = *(float32x4_t *)&v10[16 * *(unsigned int *)v44];
        v53 = &v3[8 * ((v12 - 1) % v8)];
        v54 = vsubq_f32(v186, v52);
        v55 = vmulq_f32(v54, v54);
        v55.i32[3] = 0;
        v56 = vpaddq_f32(v55, v55);
        v57 = vpaddq_f32(v56, v56);
        v58 = (float32x4_t)xmmword_239F02850;
        if (v57.f32[0] > 0.0)
          v58 = vdivq_f32(v54, vsqrtq_f32(v57));
        v59 = vsubq_f32(*(float32x4_t *)&v10[16 * *(unsigned int *)v53], v52);
        v60 = vmulq_f32(v59, v59);
        v60.i32[3] = 0;
        v61 = vpaddq_f32(v60, v60);
        v62 = vpaddq_f32(v61, v61);
        v63 = (float32x4_t)xmmword_239F02850;
        if (v62.f32[0] > 0.0)
          v63 = vdivq_f32(v59, vsqrtq_f32(v62));
        v64 = vmulq_f32(v58, v63);
        v64.i32[3] = 0;
        v65 = acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64)));
        v66 = *(float32x4_t *)&v10[16 * *(unsigned int *)v53];
        v67 = vsubq_f32(*(float32x4_t *)&v10[16 * *(unsigned int *)v44], v66);
        v68 = vmulq_f32(v67, v67);
        v68.i32[3] = 0;
        v69 = vpaddq_f32(v68, v68);
        v70 = vpaddq_f32(v69, v69);
        v71 = (float32x4_t)xmmword_239F02850;
        if (v70.f32[0] > 0.0)
          v71 = vdivq_f32(v67, vsqrtq_f32(v70));
        v72 = vsubq_f32(*(float32x4_t *)&v10[16 * *(unsigned int *)&v3[8 * (v12 % v8)]], v66);
        v73 = vmulq_f32(v72, v72);
        v73.i32[3] = 0;
        v74 = vpaddq_f32(v73, v73);
        v75 = vpaddq_f32(v74, v74);
        v76 = (float32x4_t)xmmword_239F02850;
        if (v75.f32[0] > 0.0)
          v76 = vdivq_f32(v72, vsqrtq_f32(v75));
        v14 = (float)(v37 * 180.0) / 3.14159265;
        v15 = (float)(v51 * 180.0) / 3.14159265;
        v16 = fabs(v15 + -90.0) + fabsf(v14 + -90.0);
        v17 = (float)(v65 * 180.0) / 3.14159265;
        v18 = fabs(v17 + -90.0) + v16;
        v19 = vmulq_f32(v71, v76);
        v19.i32[3] = 0;
        v20 = (float)(acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))) * 180.0) / 3.14159265;
        v21 = fabs(v20 + -90.0) + v18;
        if (v13 <= v21)
          v11 = v11;
        else
          v11 = v22;
        if (v13 > v21)
          v13 = v21;
        ++v12;
      }
      while (v8 > v23);
      v6 = a1;
      v78 = a1[1];
      v77 = a1[2];
      v79 = *v78;
      v80 = (v79 + 1);
      *v78 = v80;
      v81 = *(_QWORD *)v77;
      v82 = (uint64_t)(*((_QWORD *)v77 + 1) - *(_QWORD *)v77) >> 4;
      if (v80 > v82)
      {
        sub_2399EFDE8((uint64_t)v77, v80 - v82);
        v3 = *a2;
        v4 = a2[1];
        v81 = *(_QWORD *)a1[2];
      }
      v83 = (v4 - v3) >> 3;
      v84 = (v11 + 1) % v83;
      v85 = (v11 + 2) % v83;
      v86 = (_DWORD *)(v81 + 16 * v79);
      *v86 = *(_DWORD *)&v3[8 * (v11 % v83)];
      v86[1] = *(_DWORD *)&v3[8 * v84];
      *(_DWORD *)&v3[8 * v84] = -1;
      v86[2] = *(_DWORD *)&v3[8 * v85];
      *(_DWORD *)&v3[8 * v85] = -1;
      v86[3] = *(_DWORD *)&v3[8 * ((v11 + 3) % v83)];
      v87 = v3;
      if (v4 != v3)
      {
        while (*(_DWORD *)v87 != -1)
        {
          v87 += 8;
          if (v87 == v4)
            goto LABEL_46;
        }
        if (v87 != v4)
        {
          for (i = v87 + 8; i != v4; i += 8)
          {
            if (*(_DWORD *)i != -1)
            {
              *(_DWORD *)v87 = *(_DWORD *)i;
              *((_DWORD *)v87 + 1) = *((_DWORD *)i + 1);
              v87 += 8;
            }
          }
        }
        if (v87 == v4)
        {
LABEL_46:
          v7 = v4;
          goto LABEL_4;
        }
        v89 = v87 - v3;
        v90 = &v3[(v87 - v3) & 0xFFFFFFFFFFFFFFF8];
        v91 = v4 - v87;
        v92 = &v90[v4 - v87];
        if (v92 == v4)
        {
          v7 = v90;
        }
        else
        {
          v93 = v89 & 0xFFFFFFFFFFFFFFF8;
          v94 = v4 - &v3[v91 + (v89 & 0xFFFFFFFFFFFFFFF8)] - 8;
          if (v94 < 0x118)
          {
            v7 = v90;
            goto LABEL_89;
          }
          v95 = v93 + (v94 & 0xFFFFFFFFFFFFFFF8);
          v96 = &v3[v95 + 4];
          v97 = &v3[v93 + 4];
          v98 = &v3[v95 + 8];
          v99 = v91 + v93;
          v100 = v99 + (v94 & 0xFFFFFFFFFFFFFFF8);
          v101 = &v3[v100 + 4];
          v102 = &v3[v99 + 4];
          v103 = &v3[v100 + 8];
          v105 = v90 < v101 && v92 < v96;
          v107 = v90 < v103 && v102 < v96;
          v109 = v97 < v101 && v92 < v98;
          v111 = v97 < v103 && v102 < v98;
          if (v97 < v96 && v90 < v98)
          {
            v7 = v90;
            goto LABEL_89;
          }
          if (v105)
          {
            v7 = v90;
            goto LABEL_89;
          }
          if (v107)
          {
            v7 = v90;
            goto LABEL_89;
          }
          if (v109)
          {
            v7 = v90;
            goto LABEL_89;
          }
          if (v111)
          {
            v7 = v90;
            goto LABEL_89;
          }
          v113 = v91 >> 3;
          v114 = (v94 >> 3) + 1;
          v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFF8);
          v7 = &v90[v115];
          v92 += v115;
          v116 = 8 * v113;
          v117 = v114 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v118 = *(_OWORD *)&v90[v116 + 16];
            v120 = *(_OWORD *)&v90[v116 + 32];
            v119 = *(_OWORD *)&v90[v116 + 48];
            *(_OWORD *)v90 = *(_OWORD *)&v90[v116];
            *((_OWORD *)v90 + 1) = v118;
            *((_OWORD *)v90 + 2) = v120;
            *((_OWORD *)v90 + 3) = v119;
            v90 += 64;
            v117 -= 8;
          }
          while (v117);
          if (v114 != (v114 & 0x3FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_89:
              *(_DWORD *)v7 = *(_DWORD *)v92;
              *((_DWORD *)v7 + 1) = *((_DWORD *)v92 + 1);
              v7 += 8;
              v92 += 8;
            }
            while (v92 != v4);
          }
        }
        a2[1] = v7;
        v4 = v7;
        goto LABEL_4;
      }
      v7 = v3;
      v4 = v3;
LABEL_4:
      v5 = v7 - v3;
      if ((unint64_t)(v7 - v3) <= 0x10)
        return;
    }
    v128 = 0uLL;
    v129 = 1;
    v130 = 0uLL;
    do
    {
      v131 = *(_DWORD *)v3;
      v3 += 8;
      v132 = 16 * v131;
      v128 = vaddq_f32(v128, *(float32x4_t *)&v10[v132]);
      v133 = *(float32x4_t *)(*(_QWORD *)v6[4] + v132);
      v130 = vaddq_f32(v130, v133);
    }
    while (v8 > v129++);
    v135 = **v6;
    v136 = (v135 + 1);
    **v6 = v136;
    v137 = (uint64_t)(*((_QWORD *)v9 + 1) - (_QWORD)v10) >> 4;
    if (v136 > v137)
    {
      v187 = v128;
      v188 = v130;
      sub_239932734((char **)v9, v136 - v137);
      v138 = v6[4];
      v139 = **v6;
      v140 = (uint64_t)(*((_QWORD *)v138 + 1) - *(_QWORD *)v138) >> 4;
      if (v139 <= v140)
      {
        v128 = v187;
        v130 = v188;
        if (v139 < v140)
          *((_QWORD *)v138 + 1) = *(_QWORD *)v138 + 16 * v139;
      }
      else
      {
        sub_239932734((char **)v138, v139 - v140);
        v128 = v187;
        v130 = v188;
      }
    }
    v133.f32[0] = (float)(unint64_t)((a2[1] - *a2) >> 3);
    *(float32x4_t *)(*(_QWORD *)v6[3] + 16 * v135) = vdivq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 0));
    v141 = vmulq_f32(v130, v130);
    v141.i32[3] = 0;
    v142 = vpaddq_f32(v141, v141);
    v143 = vpaddq_f32(v142, v142);
    if (v143.f32[0] <= 0.0)
      v144 = (float32x4_t)xmmword_239F02850;
    else
      v144 = vdivq_f32(v130, vsqrtq_f32(v143));
    *(float32x4_t *)(*(_QWORD *)v6[4] + 16 * v135) = v144;
    v145 = *a2;
    v146 = a2[1];
    if (v146 != *a2)
    {
      v147 = 0;
      v148 = 0;
      v149 = (float)v135;
      while (1)
      {
        v152 = v6[1];
        v151 = v6[2];
        v153 = *v152;
        v154 = (v153 + 1);
        *v152 = v154;
        v155 = *(_QWORD *)v151;
        v156 = (uint64_t)(*((_QWORD *)v151 + 1) - *(_QWORD *)v151) >> 4;
        if (v154 > v156)
        {
          sub_2399EFDE8((uint64_t)v151, v154 - v156);
          v145 = *a2;
          v146 = a2[1];
          v155 = *(_QWORD *)v6[2];
        }
        v157 = (float)*(unsigned int *)&v145[8 * v147];
        v147 = (v148 + 1);
        v158 = (float)*(unsigned int *)&v145[8 * (v147 % ((v146 - v145) >> 3))];
        v159 = (_DWORD *)(v155 + 16 * v153);
        *v159 = v157;
        v159[1] = v158;
        v159[2] = v149;
        v159[3] = v149;
        v160 = a3;
        v162 = (char *)a3[1];
        v161 = a3[2];
        if ((unint64_t)v162 >= v161)
          break;
        *(_DWORD *)v162 = v153;
        v150 = (uint64_t)(v162 + 4);
LABEL_107:
        v160[1] = v150;
        v145 = *a2;
        v146 = a2[1];
        v148 = v147;
        if (v147 >= (v146 - *a2) >> 3)
          return;
      }
      v163 = (char *)*a3;
      v164 = (uint64_t)&v162[-*a3];
      v165 = v164 >> 2;
      v166 = (v164 >> 2) + 1;
      if (v166 >> 62)
        sub_2394189F8();
      v167 = v161 - (_QWORD)v163;
      if (v167 >> 1 > v166)
        v166 = v167 >> 1;
      if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
        v168 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v168 = v166;
      if (v168)
      {
        if (v168 >> 62)
          sub_239418A80();
        v169 = operator new(4 * v168);
        v170 = &v169[4 * v165];
        *v170 = v153;
        v150 = (uint64_t)(v170 + 1);
        if (v162 != v163)
        {
LABEL_120:
          v171 = v162 - 4 - v163;
          if (v171 < 0x2C)
          {
            v6 = a1;
            goto LABEL_128;
          }
          v172 = v162 - &v169[v164];
          v6 = a1;
          if (v172 < 0x20)
            goto LABEL_136;
          v173 = (v171 >> 2) + 1;
          v174 = 4 * (v173 & 0x7FFFFFFFFFFFFFF8);
          v175 = &v162[-v174];
          v170 = (_DWORD *)((char *)v170 - v174);
          v176 = &v169[4 * v165 - 16];
          v177 = v162 - 16;
          v178 = v173 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v179 = *(_OWORD *)v177;
            *(v176 - 1) = *((_OWORD *)v177 - 1);
            *v176 = v179;
            v176 -= 2;
            v177 -= 32;
            v178 -= 8;
          }
          while (v178);
          v162 = v175;
          if (v173 != (v173 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_136:
            do
            {
LABEL_128:
              v180 = *((_DWORD *)v162 - 1);
              v162 -= 4;
              *--v170 = v180;
            }
            while (v162 != v163);
          }
LABEL_129:
          v181 = &v169[4 * v168];
          v160 = a3;
          *a3 = v170;
          a3[1] = v150;
          a3[2] = v181;
          if (v163)
            operator delete(v163);
          goto LABEL_107;
        }
      }
      else
      {
        v169 = 0;
        v170 = (_DWORD *)(4 * v165);
        *(_DWORD *)(4 * v165) = v153;
        v150 = 4 * v165 + 4;
        if (v162 != v163)
          goto LABEL_120;
      }
      v6 = a1;
      goto LABEL_129;
    }
  }
}

void sub_2399E9B38(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const float *v15;
  float *v16;
  uint64_t v17;
  int v18;
  float32x4x4_t v19;

  v1 = *(char **)(a1 + 8);
  v2 = *(char **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 4;
  if (v3 >> 4 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 16 * v4;
      v10 = (char *)(16 * v4);
    }
    else
    {
      if (v3 < 0)
        sub_239418A80();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (unint64_t)&v7[16 * v4];
      v9 = v6 - 16;
      if ((unint64_t)(v6 - 16) >= 0x70)
      {
        v11 = &v7[v3 - (v9 & 0xFFFFFFFFFFFFFFF0) - 16] >= v1
           || (unint64_t)&v1[-(v9 & 0xFFFFFFFFFFFFFFF0) - 16] >= v8;
        v10 = &v7[16 * v4];
        if (v11)
        {
          v12 = (v9 >> 4) + 1;
          v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFCLL);
          v14 = &v1[-v13];
          v10 = (char *)(v8 - v13);
          v15 = (const float *)(v1 - 64);
          v16 = (float *)(v8 - 64);
          v17 = v12 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v19 = vld4q_f32(v15);
            vst4q_f32(v16, v19);
            v16 -= 16;
            v15 -= 16;
            v17 -= 4;
          }
          while (v17);
          v1 = v14;
          if (v12 == (v12 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_16;
        }
      }
      else
      {
        v10 = &v7[16 * v4];
      }
      do
      {
        v18 = *((_DWORD *)v1 - 4);
        v1 -= 16;
        *((_DWORD *)v10 - 4) = v18;
        v10 -= 16;
        *((_DWORD *)v10 + 1) = *((_DWORD *)v1 + 1);
        *((_DWORD *)v10 + 2) = *((_DWORD *)v1 + 2);
        *((_DWORD *)v10 + 3) = *((_DWORD *)v1 + 3);
      }
      while (v1 != v2);
    }
LABEL_16:
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

void sub_2399E9C88(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  v5 = v2 - *a1;
  v6 = v5 >> 4;
  if (v5 >> 4 >= (unint64_t)(v4 >> 4))
    return;
  if (v2 == v3)
  {
    *a1 = (char *)(16 * v6);
    a1[1] = (char *)(16 * v6);
    a1[2] = (char *)(16 * v6);
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v5 < 0)
    sub_239418A80();
  v7 = (char *)operator new(v5) + 16 * v6;
  v8 = v7;
  do
  {
    v9 = *((_OWORD *)v2 - 1);
    v2 -= 16;
    *((_OWORD *)v8 - 1) = v9;
    v8 -= 16;
  }
  while (v2 != v3);
  v3 = *a1;
  *a1 = v8;
  a1[1] = v7;
  a1[2] = v7;
  if (v3)
LABEL_9:
    operator delete(v3);
}

BOOL sub_2399E9D40(uint64_t a1, unsigned int *a2)
{
  int v2;
  char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  int v47;
  void *__dst[2];
  unint64_t v49;
  unsigned int v50;
  void *__p;
  unint64_t v52;
  unint64_t v53;

  v2 = *a2;
  if (*a2 == -1)
    return v2 != -1;
  v5 = off_256934418[0];
  v6 = strlen(off_256934418[0]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v49 = v10 | 0x8000000000000000;
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(v49) = v6;
    v8 = __dst;
    if (!v6)
      goto LABEL_10;
  }
  memmove(v8, v5, (size_t)v7);
LABEL_10:
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  __p = 0;
  v52 = 0;
  v53 = 0;
  v50 = sub_23993A364((uint64_t **)(a1 + 56), (uint64_t)&__p, (unsigned __int8 *)__dst);
  if (__p)
  {
    v52 = (unint64_t)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    v15 = *(_QWORD *)(a1 + 128);
    v14 = *(_QWORD *)(a1 + 136);
    v52 = 0;
    v53 = 0;
    __p = 0;
    v13 = v14 - v15;
    if (!v13)
      return v2 != -1;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 128);
    v11 = *(_QWORD *)(a1 + 136);
    v52 = 0;
    v53 = 0;
    __p = 0;
    v13 = v11 - v12;
    if (!v13)
      return v2 != -1;
  }
  if (v13 < 0)
    sub_2394189F8();
  v16 = 0xCCCCCCCCCCCCCCCDLL * (v13 >> 2);
  v17 = (v16 - 1) >> 6;
  v18 = operator new(8 * (v17 + 1));
  v19 = v18;
  v52 = v16;
  v53 = v17 + 1;
  __p = v18;
  if (v16 >= 0x41)
    v20 = (v16 - 1) >> 6;
  else
    v20 = 0;
  v18[v20] = 0;
  if (v16 >= 0x40)
    bzero(v18, 8 * (v16 >> 6));
  v47 = v2;
  if ((v16 & 0x3F) != 0)
    v19[v16 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v16 & 0x3F));
  v21 = 0;
  v22 = 0;
  do
  {
    v23 = __p;
    v24 = v21 >> 6;
    v25 = 1 << v21;
    if ((*((_QWORD *)__p + (v21 >> 6)) & (1 << v21)) == 0)
    {
      LODWORD(__dst[0]) = v22;
      if (*(_DWORD *)(sub_239962518(a1 + 104, (unsigned int *)__dst) + 12) != -1)
      {
        v23[v24] |= v25;
        LODWORD(__dst[0]) = v22;
        v26 = (_DWORD *)sub_239962518(a1 + 104, (unsigned int *)__dst);
        *(_QWORD *)((char *)v23 + (((unint64_t)*v26 >> 3) & 0x1FFFFFF8)) |= 1 << *v26;
        LODWORD(__dst[0]) = v22;
        v27 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
        v28 = *v27;
        v29 = (std::__shared_weak_count *)v27[1];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if ((*(_QWORD *)(*(_QWORD *)(v28 + 40) + 8 * v24) & v25) == 0)
        {
          v33 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)__dst);
          v34 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
          v36 = *v34;
          v35 = (std::__shared_weak_count *)v34[1];
          if (!v35)
            goto LABEL_40;
          v37 = (unint64_t *)&v35->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          do
            v39 = __ldaxr(v37);
          while (__stlxr(v39 - 1, v37));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            if (((*(_QWORD *)(*(_QWORD *)(v36 + 40) + ((v33 >> 3) & 0x1FFFFFF8)) >> v33) & 1) != 0)
              goto LABEL_26;
          }
          else
          {
LABEL_40:
            if (((*(_QWORD *)(*(_QWORD *)(v36 + 40) + ((v33 >> 3) & 0x1FFFFFF8)) >> v33) & 1) != 0)
              goto LABEL_26;
          }
          v40 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *a2);
          v41 = *v40;
          v42 = (std::__shared_weak_count *)v40[1];
          if (v42)
          {
            v43 = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            do
              v45 = __ldaxr(v43);
            while (__stlxr(v45 - 1, v43));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          if ((*(_QWORD *)(*(_QWORD *)(v41 + 40) + 8 * v24) & v25) != 0)
          {
            LODWORD(__dst[0]) = v22;
            sub_2399DCD74(a1, (unsigned int *)__dst, &v50);
          }
        }
      }
    }
LABEL_26:
    v21 = ++v22;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v22);
  v2 = v47;
  if (__p)
    operator delete(__p);
  return v2 != -1;
}

void sub_2399EA158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399EA1A0(uint64_t a1, float *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  _BYTE *v36;
  _BOOL4 v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  double v56;
  BOOL v57;
  float v58;
  uint64_t v59;
  float v60;
  unsigned int *v61;
  float v62;
  unsigned int *v63;
  uint64_t v64;
  float v65;
  BOOL v66;
  float v67;
  BOOL v68;
  unsigned int *v71;
  float32x4_t v72;
  unsigned int v73;
  char *v74;
  unsigned int *v75;
  uint64_t v76;
  void *__p;
  _BYTE *v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;

  v4 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 136);
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v5 = v3 - v4;
  if (!v5)
    return 1;
  if (v5 < 0)
    sub_2394189F8();
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 2);
  v10 = (v9 - 1) >> 6;
  v11 = operator new(8 * (v10 + 1));
  v12 = v11;
  v81 = v9;
  v82 = v10 + 1;
  v80 = v11;
  if (v9 >= 0x41)
    v13 = (v9 - 1) >> 6;
  else
    v13 = 0;
  v11[v13] = 0;
  if (v9 >= 0x40)
    bzero(v11, 8 * (v9 >> 6));
  v71 = a3;
  if ((v9 & 0x3F) != 0)
    v12[v9 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v9 & 0x3F));
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = v80;
    v17 = v14 >> 6;
    v18 = 1 << v14;
    if ((*((_QWORD *)v80 + (v14 >> 6)) & (1 << v14)) == 0)
    {
      LODWORD(__p) = v15;
      if (*(_DWORD *)(sub_239962518(a1 + 104, (unsigned int *)&__p) + 12) != -1)
      {
        v16[v17] |= v18;
        LODWORD(__p) = v15;
        v19 = (_DWORD *)sub_239962518(a1 + 104, (unsigned int *)&__p);
        *(_QWORD *)((char *)v16 + (((unint64_t)*v19 >> 3) & 0x1FFFFFF8)) |= 1 << *v19;
        LODWORD(__p) = v15;
        v20 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
        v21 = *v20;
        v22 = (std::__shared_weak_count *)v20[1];
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if ((*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8 * v17) & v18) == 0)
        {
          v26 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)&__p);
          v27 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
          v28 = *v27;
          v29 = (std::__shared_weak_count *)v27[1];
          if (!v29)
            goto LABEL_26;
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            if (((*(_QWORD *)(*(_QWORD *)(v28 + 40) + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) != 0)
              goto LABEL_12;
          }
          else
          {
LABEL_26:
            if (((*(_QWORD *)(*(_QWORD *)(v28 + 40) + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) != 0)
              goto LABEL_12;
          }
          __p = 0;
          v78 = 0;
          v79 = 0;
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v73 = v15;
          v33 = sub_239962518(a1 + 104, &v73);
          sub_239961F68(a1, (unsigned int *)(v33 + 16), (unsigned int **)&__p);
          v73 = v15;
          v34 = (unsigned int *)sub_239962518(a1 + 104, &v73);
          v35 = sub_239962518(a1 + 104, v34);
          sub_239961F68(a1, (unsigned int *)(v35 + 16), (unsigned int **)&v74);
          v36 = __p;
          v38 = v78 - (_BYTE *)__p == 12 && (char *)v75 - v74 == 12;
          if (v74)
          {
            v75 = (unsigned int *)v74;
            operator delete(v74);
            v36 = __p;
          }
          if (v36)
          {
            v78 = v36;
            operator delete(v36);
          }
          if (v38)
          {
            LODWORD(__p) = v15;
            v39 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)&__p);
            v40 = *(unsigned int *)(sub_239962518(a1 + 104, v39) + 12);
            v41 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
            v42 = *v41;
            v43 = (std::__shared_weak_count *)v41[1];
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
              do
                v46 = __ldaxr(v44);
              while (__stlxr(v46 - 1, v44));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v72 = *(float32x4_t *)(*(_QWORD *)(v42 + 40) + 16 * v40);
            v47 = *(unsigned int *)(sub_239962518(a1 + 104, (unsigned int *)&__p) + 12);
            v48 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
            v49 = *v48;
            v50 = (std::__shared_weak_count *)v48[1];
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
              do
                v53 = __ldaxr(v51);
              while (__stlxr(v53 - 1, v51));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v54 = vsubq_f32(v72, *(float32x4_t *)(*(_QWORD *)(v49 + 40) + 16 * v47));
            v55 = vmulq_f32(v54, v54);
            v55.i32[3] = 0;
            v55.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v55, v55)));
            v57 = v55.f32[0] <= *a2;
            v56 = v55.f32[0];
            v57 = v57 || *a2 + *a2 <= v56;
            if (!v57)
            {
              v58 = sub_23992E268(a1, __p);
              v59 = sub_239962518(a1 + 104, (unsigned int *)&__p);
              v60 = sub_23992E268(a1, *(_DWORD *)(v59 + 8));
              v61 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)&__p);
              v62 = sub_23992E268(a1, *v61);
              v63 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)&__p);
              v64 = sub_239962518(a1 + 104, v63);
              v65 = v58 + sub_23992E268(a1, *(_DWORD *)(v64 + 8));
              v66 = v65 > 60.0 && v65 < 120.0;
              v67 = v60 + v62;
              v68 = !v66 || v67 <= 60.0;
              if (!v68 && v67 < 120.0)
                sub_2399DCD74(a1, (unsigned int *)&__p, v71);
            }
          }
        }
      }
    }
LABEL_12:
    v14 = ++v15;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v15);
  if (v80)
    operator delete(v80);
  return 1;
}

void sub_2399EA6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2399EA744(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float v17;
  float v18;
  __n128 v19;
  float v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  float v31;
  float v32;
  __n128 v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  __n128 v36;
  __n128 v37;
  unsigned __int32 v38;
  __int32 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  unsigned __int32 v43;
  __int32 v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  float v49;
  float v50;
  __n128 v51;
  unsigned __int32 v52;
  unsigned __int32 v53;
  __n128 v54;
  __n128 v55;
  unsigned __int32 v56;
  __int32 v57;
  __n128 v58;
  unsigned __int32 v59;
  __int32 v60;
  __n128 v61;
  float v62;
  float v63;
  __n128 v64;
  uint64_t v65;
  float v66;
  unint64_t v67;
  __n128 *v68;
  __n128 *v69;
  float v70;
  __n128 *v71;
  float v72;
  unint64_t v73;
  __n128 v74;
  float v75;
  float v76;
  __n128 *v77;
  __n128 v78;
  BOOL v79;
  __n128 v80;
  unint64_t v81;
  float v82;
  unint64_t v83;
  float v84;
  __n128 *v85;
  __n128 *v86;
  float v87;
  __n128 v88;
  float v89;
  float v90;
  __n128 *v91;
  __n128 v92;
  __int128 v93;
  __n128 *v94;
  float v95;
  float v96;
  __n128 v97;
  __n128 v98;
  __n128 *v99;
  __n128 *v100;
  __n128 *v101;
  __n128 v102;
  unsigned __int32 v103;
  unsigned __int32 v104;
  int v105;
  __n128 v106;
  int v107;
  __n128 v108;
  __n128 *v109;
  BOOL v111;
  uint64_t v112;
  __n128 *v113;
  uint64_t v114;
  float v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  int64_t v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  float v125;
  unint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  __n128 *v132;
  __n128 v133;
  __n128 *v134;
  uint64_t v135;
  int64_t v136;
  __n128 v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float v141;
  __n128 *v142;
  __n128 v143;
  __n128 v144;
  unsigned __int32 v145;
  unsigned __int32 v146;
  float v147;
  float v148;
  __n128 *v149;
  float v150;
  unsigned __int32 v151;
  unsigned __int32 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __int128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  unsigned __int32 v184;
  unsigned __int32 v185;
  unsigned __int32 v186;
  unsigned __int32 v187;
  unsigned __int32 v188;
  unsigned __int32 v189;
  unsigned __int32 v190;
  unsigned __int32 v191;
  unsigned __int32 v192;
  unsigned __int32 v193;
  unsigned __int32 v194;
  unsigned __int32 v195;
  unsigned __int32 v196;
  unsigned __int32 v197;
  unsigned __int32 v198;
  unsigned __int32 v199;
  unsigned __int32 v200;
  int v201;
  unsigned __int32 v202;
  unsigned __int32 v203;
  unsigned __int32 v204;
  int v205;
  unsigned __int32 v206;
  int v207;
  int v208;

BOOL sub_2399EB698(uint64_t a1, __n128 *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  unsigned __int32 v7;
  __n128 v8;
  int v9;
  __n128 *v10;
  __n128 *v11;
  float v12;
  float v13;
  unsigned __int32 v14;
  __n128 v15;
  int v16;
  __n128 *v17;
  __n128 *v18;
  float v19;
  float v20;
  float v21;
  int v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  unsigned __int32 v27;
  __n128 v28;
  int v29;
  int v30;
  __n128 v31;
  int v32;
  __n128 v33;
  int v34;
  __n128 v35;
  unsigned __int32 v36;
  __n128 v37;
  int v38;
  int v39;
  __n128 v40;
  int v41;
  __n128 v42;
  int v43;
  __n128 v44;
  int v45;
  __n128 v46;
  unsigned __int32 v47;
  __n128 v48;
  int v49;
  int v50;
  __n128 v51;
  int v52;
  __n128 v53;
  __n128 *v54;
  uint64_t v55;
  int v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;

  v5 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 2);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (a2[-1].n128_f32[3] < *(float *)(a1 + 16))
      {
        v7 = *(_DWORD *)(a1 + 16);
        v8 = *(__n128 *)a1;
        v9 = a2[-1].n128_i32[3];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 20);
        *(_DWORD *)(a1 + 16) = v9;
        *(__n128 *)((char *)a2 - 20) = v8;
        a2[-1].n128_u32[3] = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 20);
      v11 = (__n128 *)((char *)a2 - 20);
      v12 = *(float *)(a1 + 36);
      v13 = a2[-1].n128_f32[3];
      if (v12 >= *(float *)(a1 + 16))
      {
        if (v13 < v12)
        {
          v36 = *(_DWORD *)(a1 + 36);
          v37 = *v10;
          v38 = a2[-1].n128_i32[3];
          *v10 = *v11;
          *(_DWORD *)(a1 + 36) = v38;
          *v11 = v37;
          a2[-1].n128_u32[3] = v36;
          if (*(float *)(a1 + 36) < *(float *)(a1 + 16))
          {
            v39 = *(_DWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *v10 = v40;
            *(_DWORD *)(a1 + 36) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_DWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *v10 = v46;
        *(_DWORD *)(a1 + 36) = v45;
        if (a2[-1].n128_f32[3] < *(float *)(a1 + 36))
        {
          v47 = *(_DWORD *)(a1 + 36);
          v48 = *v10;
          v49 = a2[-1].n128_i32[3];
          *v10 = *v11;
          *(_DWORD *)(a1 + 36) = v49;
          *v11 = v48;
          a2[-1].n128_u32[3] = v47;
        }
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 16);
        v15 = *(__n128 *)a1;
        v16 = a2[-1].n128_i32[3];
        *(__n128 *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *v11 = v15;
        a2[-1].n128_u32[3] = v14;
      }
      return result;
    case 4uLL:
      sub_2399EBB60((__n128 *)a1, (__n128 *)(a1 + 20), (__n128 *)(a1 + 40), (__n128 *)((char *)a2 - 20), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 20);
      v25 = (__n128 *)(a1 + 40);
      v26 = (__n128 *)(a1 + 60);
      sub_2399EBB60((__n128 *)a1, (__n128 *)(a1 + 20), (__n128 *)(a1 + 40), (__n128 *)(a1 + 60), a3);
      if (a2[-1].n128_f32[3] < *(float *)(a1 + 76))
      {
        v27 = *(_DWORD *)(a1 + 76);
        v28 = *v26;
        v29 = a2[-1].n128_i32[3];
        *v26 = *(__n128 *)((char *)a2 - 20);
        *(_DWORD *)(a1 + 76) = v29;
        *(__n128 *)((char *)a2 - 20) = v28;
        a2[-1].n128_u32[3] = v27;
        if (*(float *)(a1 + 76) < *(float *)(a1 + 56))
        {
          v30 = *(_DWORD *)(a1 + 56);
          v31 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *v26 = v31;
          *(_DWORD *)(a1 + 76) = v30;
          if (*(float *)(a1 + 56) < *(float *)(a1 + 36))
          {
            v32 = *(_DWORD *)(a1 + 36);
            v33 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *v25 = v33;
            *(_DWORD *)(a1 + 56) = v32;
            if (*(float *)(a1 + 36) < *(float *)(a1 + 16))
            {
              v34 = *(_DWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              *v24 = v35;
              *(_DWORD *)(a1 + 36) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 40);
      v18 = (__n128 *)(a1 + 20);
      v19 = *(float *)(a1 + 36);
      v20 = *(float *)(a1 + 16);
      v21 = *(float *)(a1 + 56);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_DWORD *)(a1 + 36);
          v42 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *v17 = v42;
          *(_DWORD *)(a1 + 56) = v41;
          if (*(float *)(a1 + 36) < v20)
          {
            v43 = *(_DWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *v18 = v44;
            *(_DWORD *)(a1 + 36) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_DWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *v18 = v51;
        *(_DWORD *)(a1 + 36) = v50;
        if (v21 < *(float *)(a1 + 36))
        {
          v52 = *(_DWORD *)(a1 + 36);
          v53 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *v17 = v53;
          *(_DWORD *)(a1 + 56) = v52;
        }
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 56);
        *v17 = v23;
        *(_DWORD *)(a1 + 56) = v22;
      }
      v54 = (__n128 *)(a1 + 60);
      if ((__n128 *)(a1 + 60) == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v57 = v54[1].n128_f32[0];
    if (v57 < v17[1].n128_f32[0])
      break;
LABEL_36:
    v17 = v54;
    v55 += 20;
    v54 = (__n128 *)((char *)v54 + 20);
    if (v54 == a2)
      return 1;
  }
  v61 = *v54;
  v58 = v55;
  do
  {
    v59 = a1 + v58;
    *(_OWORD *)(v59 + 60) = *(_OWORD *)(a1 + v58 + 40);
    *(_DWORD *)(v59 + 76) = *(_DWORD *)(a1 + v58 + 56);
    if (v58 == -40)
    {
      *(__n128 *)a1 = v61;
      *(float *)(a1 + 16) = v57;
      if (++v56 != 8)
        goto LABEL_36;
      return &v54[1].n128_u8[4] == (unsigned __int8 *)a2;
    }
    v58 -= 20;
  }
  while (v57 < *(float *)(v59 + 36));
  v60 = a1 + v58;
  *(__n128 *)(v60 + 60) = v61;
  *(float *)(v60 + 76) = v57;
  if (++v56 != 8)
    goto LABEL_36;
  return &v54[1].n128_u8[4] == (unsigned __int8 *)a2;
}

__n128 sub_2399EBB60(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  float v5;
  float v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  unsigned __int32 v17;
  unsigned __int32 v18;
  unsigned __int32 v19;
  unsigned __int32 v20;
  unsigned __int32 v21;

  v5 = a2[1].n128_f32[0];
  v6 = a3[1].n128_f32[0];
  if (v5 >= a1[1].n128_f32[0])
  {
    if (v6 < v5)
    {
      v9 = a2[1].n128_u32[0];
      result = *a2;
      v10 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v10;
      *a3 = result;
      a3[1].n128_u32[0] = v9;
      if (a2[1].n128_f32[0] < a1[1].n128_f32[0])
      {
        v11 = a1[1].n128_u32[0];
        result = *a1;
        v12 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v12;
        *a2 = result;
        a2[1].n128_u32[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = a1[1].n128_u32[0];
      result = *a1;
      v8 = a3[1].n128_u32[0];
      *a1 = *a3;
      a1[1].n128_u32[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u32[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u32[0];
    result = *a1;
    v14 = a2[1].n128_u32[0];
    *a1 = *a2;
    a1[1].n128_u32[0] = v14;
    *a2 = result;
    a2[1].n128_u32[0] = v13;
    if (a3[1].n128_f32[0] < a2[1].n128_f32[0])
    {
      v7 = a2[1].n128_u32[0];
      result = *a2;
      v15 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u32[0] = a4[1].n128_u32[0];
  if (result.n128_f32[0] < a3[1].n128_f32[0])
  {
    v16 = a3[1].n128_u32[0];
    result = *a3;
    v17 = a4[1].n128_u32[0];
    *a3 = *a4;
    a3[1].n128_u32[0] = v17;
    *a4 = result;
    a4[1].n128_u32[0] = v16;
    result.n128_u32[0] = a3[1].n128_u32[0];
    if (result.n128_f32[0] < a2[1].n128_f32[0])
    {
      v18 = a2[1].n128_u32[0];
      result = *a2;
      v19 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v19;
      *a3 = result;
      a3[1].n128_u32[0] = v18;
      result.n128_u32[0] = a2[1].n128_u32[0];
      if (result.n128_f32[0] < a1[1].n128_f32[0])
      {
        v20 = a1[1].n128_u32[0];
        result = *a1;
        v21 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v21;
        *a2 = result;
        a2[1].n128_u32[0] = v20;
      }
    }
  }
  return result;
}

void sub_2399EBCE8(char **a1, unint64_t a2, _OWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v13 = 16 * a2;
      v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60)
      sub_2394189F8();
    v9 = v6 - *a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 60)
        sub_239418A80();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[16 * v8];
    v16 = 16 * a2;
    v17 = &v15[16 * a2];
    v18 = v15;
    do
    {
      *(_OWORD *)v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v7 - 1);
        v7 -= 16;
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 16;
      }
      while (v7 != v19);
      v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_2399EBE1C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  int v29;
  int v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  BOOL v35;
  float v36;
  unint64_t v37;
  float *v38;
  float v39;
  uint64_t v40;
  int v41;
  float v42;
  float v43;
  int v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  int v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  int v83;
  int v84;
  int v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float *v92;
  float v93;
  float v94;
  uint64_t v95;
  int v96;
  float *v97;
  float *v98;
  uint64_t v99;
  float v100;
  float v101;
  uint64_t v102;
  int v103;
  float *v104;
  float *v105;
  int v106;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v49 = *(float *)(a2 - 16);
        v50 = *(float *)v8;
        if (v49 < *(float *)v8)
        {
          *(float *)v8 = v49;
          *(float *)(a2 - 16) = v50;
          v51 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v51;
          v52 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v52;
          v53 = *(_DWORD *)(v8 + 12);
          *(_DWORD *)(v8 + 12) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v53;
        }
        return result;
      case 3uLL:
        return sub_2399EC7C8(v8, v8 + 16, a2 - 16);
      case 4uLL:
        return sub_2399ECB3C((float *)v8, (float *)(v8 + 16), (float *)(v8 + 32), (float *)(a2 - 16));
      case 5uLL:
        return sub_2399EC668(v8, v8 + 16, v8 + 32, v8 + 48, (_DWORD *)(a2 - 16));
      default:
        if (v9 <= 383)
        {
          v54 = v8 + 16;
          v56 = v8 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v8;
              do
              {
                v60 = v54;
                v61 = *(float *)(v58 + 16);
                v62 = *(float *)v58;
                if (v61 < *(float *)v58)
                {
                  v63 = *(_QWORD *)(v58 + 20);
                  v64 = *(_DWORD *)(v58 + 28);
                  v65 = v57;
                  do
                  {
                    v66 = v8 + v65;
                    *(float *)(v66 + 16) = v62;
                    *(_QWORD *)(v66 + 20) = *(_QWORD *)(v8 + v65 + 4);
                    *(_DWORD *)(v66 + 28) = *(_DWORD *)(v8 + v65 + 12);
                    if (!v65)
                    {
                      v59 = v8;
                      goto LABEL_71;
                    }
                    v62 = *(float *)(v66 - 16);
                    v65 -= 16;
                  }
                  while (v61 < v62);
                  v59 = v8 + v65 + 16;
LABEL_71:
                  *(float *)v59 = v61;
                  *(_QWORD *)(v59 + 4) = v63;
                  *(_DWORD *)(v59 + 12) = v64;
                }
                v54 = v60 + 16;
                v57 += 16;
                v58 = v60;
              }
              while (v60 + 16 != a2);
            }
          }
          else if (!v56)
          {
            v98 = (float *)(v8 + 28);
            do
            {
              v99 = v54;
              v100 = *(float *)(v7 + 16);
              v101 = *(float *)v7;
              if (v100 < *(float *)v7)
              {
                v102 = *(_QWORD *)(v7 + 20);
                v103 = *(_DWORD *)(v7 + 28);
                v104 = v98;
                do
                {
                  v105 = v104;
                  *(v104 - 3) = v101;
                  *((_QWORD *)v104 - 1) = *((_QWORD *)v104 - 3);
                  v106 = *((_DWORD *)v104 - 4);
                  v104 -= 4;
                  *(_DWORD *)v105 = v106;
                  v101 = *(v105 - 11);
                }
                while (v100 < v101);
                *(v104 - 3) = v100;
                *((_QWORD *)v104 - 1) = v102;
                *(_DWORD *)v104 = v103;
              }
              v54 = v99 + 16;
              v98 += 4;
              v7 = v99;
            }
            while (v99 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 16 * v70;
                if (2 * v68 + 2 < (uint64_t)v10 && *(float *)v71 < *(float *)(v71 + 16))
                {
                  v71 += 16;
                  v70 = 2 * v68 + 2;
                }
                v72 = v8 + 16 * v68;
                v73 = *(float *)v71;
                v74 = *(float *)v72;
                if (*(float *)v71 >= *(float *)v72)
                {
                  v75 = *(_QWORD *)(v72 + 4);
                  v76 = *(_DWORD *)(v72 + 12);
                  do
                  {
                    v77 = (float *)v72;
                    v72 = v71;
                    *v77 = v73;
                    v77[1] = *(float *)(v71 + 4);
                    v77[2] = *(float *)(v71 + 8);
                    v77[3] = *(float *)(v71 + 12);
                    if (v67 < v70)
                      break;
                    v78 = 2 * v70;
                    v70 = (2 * v70) | 1;
                    v71 = v8 + 16 * v70;
                    v79 = v78 + 2;
                    if (v79 < (uint64_t)v10 && *(float *)v71 < *(float *)(v71 + 16))
                    {
                      v71 += 16;
                      v70 = v79;
                    }
                    v73 = *(float *)v71;
                  }
                  while (*(float *)v71 >= v74);
                  *(float *)v72 = v74;
                  *(_QWORD *)(v72 + 4) = v75;
                  *(_DWORD *)(v72 + 12) = v76;
                }
              }
              v69 = v68-- <= 0;
            }
            while (!v69);
            v80 = (unint64_t)v9 >> 4;
            do
            {
              v81 = 0;
              v82 = *(float *)v8;
              v83 = *(_DWORD *)(v8 + 4);
              v84 = *(_DWORD *)(v8 + 8);
              v85 = *(_DWORD *)(v8 + 12);
              v86 = (_DWORD *)v8;
              do
              {
                v87 = v86;
                v86 += 4 * v81 + 4;
                v88 = 2 * v81;
                v81 = (2 * v81) | 1;
                v89 = v88 + 2;
                if (v89 < v80 && *(float *)v86 < *((float *)v86 + 4))
                {
                  v86 += 4;
                  v81 = v89;
                }
                *v87 = *v86;
                v87[1] = v86[1];
                v87[2] = v86[2];
                v87[3] = v86[3];
              }
              while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              if (v86 == (_DWORD *)(a2 - 16))
              {
                *(float *)v86 = v82;
                v86[1] = v83;
                v86[2] = v84;
                v86[3] = v85;
              }
              else
              {
                *v86 = *(_DWORD *)(a2 - 16);
                v86[1] = *(_DWORD *)(a2 - 12);
                v86[2] = *(_DWORD *)(a2 - 8);
                v86[3] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 16) = v82;
                *(_DWORD *)(a2 - 12) = v83;
                *(_DWORD *)(a2 - 8) = v84;
                *(_DWORD *)(a2 - 4) = v85;
                v90 = (uint64_t)v86 - v8 + 16;
                if (v90 >= 17)
                {
                  v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
                  v92 = (float *)(v8 + 16 * v91);
                  v93 = *v92;
                  v94 = *(float *)v86;
                  if (*v92 < *(float *)v86)
                  {
                    v95 = *(_QWORD *)(v86 + 1);
                    v96 = v86[3];
                    do
                    {
                      v97 = (float *)v86;
                      v86 = v92;
                      *v97 = v93;
                      v97[1] = v92[1];
                      v97[2] = v92[2];
                      v97[3] = v92[3];
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = (float *)(v8 + 16 * v91);
                      v93 = *v92;
                    }
                    while (*v92 < v94);
                    *(float *)v86 = v94;
                    *(_QWORD *)(v86 + 1) = v95;
                    v86[3] = v96;
                  }
                }
              }
              a2 -= 16;
              v69 = v80-- <= 2;
            }
            while (!v69);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_2399EC7C8(v7 + 16 * (v10 >> 1), v7, a2 - 16);
          --a3;
          v18 = *(float *)v7;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          sub_2399EC7C8(v7, v7 + 16 * (v10 >> 1), a2 - 16);
          v13 = 16 * v11;
          v14 = 16 * v11 + v7 - 16;
          sub_2399EC7C8(v7 + 16, v14, a2 - 32);
          sub_2399EC7C8(v7 + 32, v7 + 16 + v13, a2 - 48);
          result = sub_2399EC7C8(v14, v12, v7 + 16 + v13);
          v15 = *(float *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(float *)v12 = v15;
          v16 = *(_QWORD *)(v7 + 4);
          *(_QWORD *)(v7 + 4) = *(_QWORD *)(v12 + 4);
          *(_QWORD *)(v12 + 4) = v16;
          v17 = *(_DWORD *)(v7 + 12);
          *(_DWORD *)(v7 + 12) = *(_DWORD *)(v12 + 12);
          *(_DWORD *)(v12 + 12) = v17;
          --a3;
          v18 = *(float *)v7;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (*(float *)(v7 - 16) >= v18)
        {
          if (v18 >= *(float *)(a2 - 16))
          {
            v37 = v7 + 16;
            do
            {
              v8 = v37;
              if (v37 >= a2)
                break;
              v37 += 16;
            }
            while (v18 >= *(float *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v36 = *(float *)(v8 + 16);
              v8 += 16;
            }
            while (v18 >= v36);
          }
          v38 = (float *)a2;
          if (v8 < a2)
          {
            v38 = (float *)a2;
            do
            {
              v39 = *(v38 - 4);
              v38 -= 4;
            }
            while (v18 < v39);
          }
          v40 = *(_QWORD *)(v7 + 4);
          v41 = *(_DWORD *)(v7 + 12);
          if (v8 < (unint64_t)v38)
          {
            v42 = *(float *)v8;
            v43 = *v38;
            do
            {
              *(float *)v8 = v43;
              *v38 = v42;
              v44 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v38[1];
              *((_DWORD *)v38 + 1) = v44;
              v45 = *(_DWORD *)(v8 + 8);
              *(float *)(v8 + 8) = v38[2];
              *((_DWORD *)v38 + 2) = v45;
              v46 = *(_DWORD *)(v8 + 12);
              *(float *)(v8 + 12) = v38[3];
              *((_DWORD *)v38 + 3) = v46;
              do
              {
                v47 = *(float *)(v8 + 16);
                v8 += 16;
                v42 = v47;
              }
              while (v18 >= v47);
              do
              {
                v48 = *(v38 - 4);
                v38 -= 4;
                v43 = v48;
              }
              while (v18 < v48);
            }
            while (v8 < (unint64_t)v38);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 16) = v18;
          *(_QWORD *)(v8 - 12) = v40;
          *(_DWORD *)(v8 - 4) = v41;
          continue;
        }
LABEL_11:
        v19 = 0;
        v20 = *(_QWORD *)(v7 + 4);
        v21 = *(_DWORD *)(v7 + 12);
        do
        {
          v22 = *(float *)(v7 + v19 + 16);
          v19 += 16;
        }
        while (v22 < v18);
        v23 = v7 + v19;
        v24 = (float *)a2;
        if (v19 == 16)
        {
          v24 = (float *)a2;
          do
          {
            if (v23 >= (unint64_t)v24)
              break;
            v26 = *(v24 - 4);
            v24 -= 4;
          }
          while (v26 >= v18);
        }
        else
        {
          do
          {
            v25 = *(v24 - 4);
            v24 -= 4;
          }
          while (v25 >= v18);
        }
        if (v23 >= (unint64_t)v24)
        {
          v8 = v7 + v19;
          v34 = v23 - 16;
          if (v23 - 16 != v7)
            goto LABEL_26;
        }
        else
        {
          v27 = *v24;
          v8 = v7 + v19;
          v28 = v24;
          do
          {
            *(float *)v8 = v27;
            *v28 = v22;
            v29 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v28[1];
            *((_DWORD *)v28 + 1) = v29;
            v30 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v28[2];
            *((_DWORD *)v28 + 2) = v30;
            v31 = *(_DWORD *)(v8 + 12);
            *(float *)(v8 + 12) = v28[3];
            *((_DWORD *)v28 + 3) = v31;
            do
            {
              v32 = *(float *)(v8 + 16);
              v8 += 16;
              v22 = v32;
            }
            while (v32 < v18);
            do
            {
              v33 = *(v28 - 4);
              v28 -= 4;
              v27 = v33;
            }
            while (v33 >= v18);
          }
          while (v8 < (unint64_t)v28);
          v34 = v8 - 16;
          if (v8 - 16 != v7)
          {
LABEL_26:
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 - 4);
          }
        }
        *(float *)(v8 - 16) = v18;
        *(_QWORD *)(v8 - 12) = v20;
        *(_DWORD *)(v8 - 4) = v21;
        if (v23 < (unint64_t)v24)
        {
LABEL_30:
          result = sub_2399EBE1C(v7, v34, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = sub_2399EC91C(v7, v34);
        result = sub_2399EC91C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_30;
        }
        a2 = v34;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_2399EC668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  float v11;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  int v21;
  int v22;
  float v23;
  int v24;
  int v25;
  int v26;

  result = sub_2399ECB3C((float *)a1, (float *)a2, (float *)a3, (float *)a4);
  v11 = *(float *)a4;
  if (*(float *)a5 < *(float *)a4)
  {
    *(_DWORD *)a4 = *a5;
    *(float *)a5 = v11;
    v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = a5[1];
    a5[1] = v12;
    v13 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = a5[2];
    a5[2] = v13;
    v14 = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = a5[3];
    a5[3] = v14;
    v15 = *(float *)a3;
    if (*(float *)a4 < *(float *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v15;
      v16 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v16;
      v17 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v17;
      v18 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = v18;
      v19 = *(float *)a2;
      if (*(float *)a3 < *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v19;
        v20 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v20;
        v21 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v21;
        v22 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = v22;
        v23 = *(float *)a1;
        if (*(float *)a2 < *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(float *)a2 = v23;
          v24 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a2 + 4) = v24;
          v25 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v25;
          v26 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2399EC7C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 < *(float *)result)
  {
    if (v5 >= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v16 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v16;
      v17 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      v6 = (int *)(a2 + 12);
      v18 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 8) = v17;
      v19 = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = v18;
      *(_DWORD *)(a2 + 12) = v19;
      if (*(float *)a3 >= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      v20 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v20;
      v8 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    }
    else
    {
      v6 = (int *)(result + 12);
      *(float *)result = v5;
      *(float *)a3 = v4;
      v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v7;
      v8 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 8) = v8;
    v12 = (int *)(a3 + 12);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v9;
    v10 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v10;
    v12 = (int *)(a2 + 12);
    v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v11;
    v13 = *(float *)result;
    if (*(float *)a2 < *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v13;
      v14 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v14;
      v15 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v15;
      v6 = (int *)(result + 12);
LABEL_10:
      v21 = *v6;
      *v6 = *v12;
      *v12 = v21;
    }
  }
  return result;
}

BOOL sub_2399EC91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v17 = *(float *)(a2 - 16);
      v18 = *(float *)a1;
      if (v17 < *(float *)a1)
      {
        *(float *)a1 = v17;
        *(float *)(a2 - 16) = v18;
        v19 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v19;
        v20 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v20;
        v21 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v21;
      }
      break;
    case 3:
      sub_2399EC7C8(a1, a1 + 16, a2 - 16);
      result = 1;
      break;
    case 4:
      sub_2399ECB3C((float *)a1, (float *)(a1 + 16), (float *)(a1 + 32), (float *)(a2 - 16));
      result = 1;
      break;
    case 5:
      sub_2399EC668(a1, a1 + 16, a1 + 32, a1 + 48, (_DWORD *)(a2 - 16));
      result = 1;
      break;
    default:
      v6 = (float *)(a1 + 32);
      sub_2399EC7C8(a1, a1 + 16, a1 + 32);
      v7 = a1 + 48;
      if (a1 + 48 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(float *)v7;
          v11 = *v6;
          if (*(float *)v7 < *v6)
            break;
LABEL_12:
          v6 = (float *)v7;
          v8 += 16;
          v7 += 16;
          if (v7 == a2)
            goto LABEL_13;
        }
        v12 = *(_QWORD *)(v7 + 4);
        v13 = *(_DWORD *)(v7 + 12);
        v14 = v8;
        do
        {
          v15 = a1 + v14;
          *(float *)(v15 + 48) = v11;
          *(_QWORD *)(v15 + 52) = *(_QWORD *)(a1 + v14 + 36);
          *(_DWORD *)(v15 + 60) = *(_DWORD *)(a1 + v14 + 44);
          if (v14 == -32)
          {
            *(float *)a1 = v10;
            *(_QWORD *)(a1 + 4) = v12;
            *(_DWORD *)(a1 + 12) = v13;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v11 = *(float *)(v15 + 16);
          v14 -= 16;
        }
        while (v10 < v11);
        v16 = a1 + v14;
        *(float *)(v16 + 48) = v10;
        v16 += 48;
        *(_QWORD *)(v16 + 4) = v12;
        *(_DWORD *)(v16 + 12) = v13;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 16 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_2399ECB3C(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;

  result = sub_2399EC7C8((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v10;
    v11 = *((_DWORD *)a3 + 2);
    a3[2] = a4[2];
    *((_DWORD *)a4 + 2) = v11;
    v12 = *((_DWORD *)a3 + 3);
    a3[3] = a4[3];
    *((_DWORD *)a4 + 3) = v12;
    v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v14;
      v15 = *((_DWORD *)a2 + 2);
      a2[2] = a3[2];
      *((_DWORD *)a3 + 2) = v15;
      v16 = *((_DWORD *)a2 + 3);
      a2[3] = a3[3];
      *((_DWORD *)a3 + 3) = v16;
      v17 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v17;
        v18 = *((_DWORD *)a1 + 1);
        a1[1] = a2[1];
        *((_DWORD *)a2 + 1) = v18;
        v19 = *((_DWORD *)a1 + 2);
        a1[2] = a2[2];
        *((_DWORD *)a2 + 2) = v19;
        v20 = *((_DWORD *)a1 + 3);
        a1[3] = a2[3];
        *((_DWORD *)a2 + 3) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_2399ECC48(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  int *v17;
  int v18;
  float v19;
  float v20;
  uint64_t *v21;
  int *v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  int *v27;
  int v28;
  float v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  float v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  float v39;
  int v40;
  unint64_t v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  int *v46;
  int v47;
  unint64_t v48;
  _DWORD *v49;
  int v50;
  int *v51;
  int v52;
  float v53;
  int v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  float v62;
  int v63;
  int v64;
  unint64_t v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  int *v70;
  int v71;
  unint64_t v72;
  _DWORD *v73;
  int v74;
  int *v75;
  int v76;
  float v77;
  int v78;
  unint64_t v79;
  int *v80;
  int v81;
  int v82;
  int v83;
  float v84;
  int v85;
  int v86;
  float v87;
  float v88;
  int *v89;
  unint64_t v90;
  int v91;
  int *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  float v107;
  unint64_t v108;
  int v109;
  int v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  unint64_t v115;
  float *v116;
  float v117;
  float v118;
  float v119;
  float *v120;
  int v121;
  int v122;
  float v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  float v127;
  unint64_t v128;
  float *v129;
  float v130;
  uint64_t v131;
  float v132;
  float v133;
  int v134;
  int v135;
  float v136;
  float v137;
  float v138;
  float v139;
  int v140;
  int v141;
  float v142;
  float v143;
  float v144;
  int *v145;
  int v146;
  float v147;
  float v148;
  int v149;
  int v150;
  float v151;
  float v152;
  int v153;
  int v154;
  uint64_t v155;
  float v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  unint64_t v160;
  BOOL v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  float v167;
  float v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int64_t v173;
  int64_t v174;
  BOOL v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  float v179;
  float v180;
  uint64_t v181;
  float *v182;
  uint64_t v183;
  uint64_t v184;
  int64_t v185;
  int64_t v186;
  float v187;
  int v188;
  int v189;
  _DWORD *v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  float *v196;
  float v197;
  float v198;
  uint64_t v199;
  float *v200;
  int v201;
  int v202;
  float v203;
  float v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  float v208;
  float v209;
  uint64_t v210;
  float *v211;
  float *v212;
  int v213;
  uint64_t v214;
  float v215;
  int v216;

  v7 = result;
LABEL_2:
  v8 = (int *)(a2 - 4);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v138 = *(float *)(a2 - 12);
        v139 = *(float *)v9;
        if (v138 < *(float *)v9)
        {
          *(float *)v9 = v138;
          *(float *)(a2 - 12) = v139;
          v140 = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v140;
          v141 = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v141;
        }
        return result;
      case 3:
        v142 = *(float *)(v9 + 12);
        v143 = *(float *)v9;
        v144 = *(float *)(a2 - 12);
        if (v142 >= *(float *)v9)
        {
          if (v144 >= v142)
            return result;
          *(float *)(v9 + 12) = v144;
          *(float *)(a2 - 12) = v142;
          v201 = *(_DWORD *)(v9 + 16);
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v201;
          v8 = (int *)(v9 + 20);
          v202 = *(_DWORD *)(v9 + 20);
          *(_DWORD *)(v9 + 20) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v202;
          v203 = *(float *)(v9 + 12);
          v204 = *(float *)v9;
          if (v203 >= *(float *)v9)
            return result;
          *(float *)v9 = v203;
          *(float *)(v9 + 12) = v204;
          v205 = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(v9 + 16);
          *(_DWORD *)(v9 + 16) = v205;
          v145 = (int *)(v9 + 8);
        }
        else if (v144 >= v142)
        {
          *(float *)v9 = v142;
          *(float *)(v9 + 12) = v143;
          v214 = *(_QWORD *)(v9 + 4);
          *(_QWORD *)(v9 + 4) = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(v9 + 16) = v214;
          v215 = *(float *)(a2 - 12);
          if (v215 >= v143)
            return result;
          v145 = (int *)(v9 + 20);
          *(float *)(v9 + 12) = v215;
          *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 - 8);
          *(float *)(a2 - 12) = v143;
          *(_DWORD *)(a2 - 8) = v214;
        }
        else
        {
          v145 = (int *)(v9 + 8);
          *(float *)v9 = v144;
          *(float *)(a2 - 12) = v143;
          v146 = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v146;
        }
        v216 = *v145;
        *v145 = *v8;
        *v8 = v216;
        return result;
      case 4:
        return sub_2399EDE24(v9, v9 + 12, v9 + 24, (float *)(a2 - 12));
      case 5:
        result = sub_2399EDE24(v9, v9 + 12, v9 + 24, (float *)(v9 + 36));
        v147 = *(float *)(a2 - 12);
        v148 = *(float *)(v9 + 36);
        if (v147 < v148)
        {
          *(float *)(v9 + 36) = v147;
          *(float *)(a2 - 12) = v148;
          v149 = *(_DWORD *)(v9 + 40);
          *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v149;
          v150 = *(_DWORD *)(v9 + 44);
          *(_DWORD *)(v9 + 44) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v150;
          v151 = *(float *)(v9 + 36);
          v152 = *(float *)(v9 + 24);
          if (v151 < v152)
          {
            *(float *)(v9 + 24) = v151;
            *(float *)(v9 + 36) = v152;
            v153 = *(_DWORD *)(v9 + 40);
            v154 = *(_DWORD *)(v9 + 44);
            v155 = *(_QWORD *)(v9 + 28);
            *(_DWORD *)(v9 + 28) = v153;
            *(_DWORD *)(v9 + 32) = v154;
            *(_QWORD *)(v9 + 40) = v155;
            v156 = *(float *)(v9 + 12);
            if (v151 < v156)
            {
              *(float *)(v9 + 12) = v151;
              *(float *)(v9 + 24) = v156;
              v157 = *(_QWORD *)(v9 + 16);
              *(_DWORD *)(v9 + 16) = v153;
              *(_DWORD *)(v9 + 20) = v154;
              *(_QWORD *)(v9 + 28) = v157;
              v158 = *(float *)v9;
              if (v151 < *(float *)v9)
              {
                *(float *)v9 = v151;
                *(float *)(v9 + 12) = v158;
                v159 = *(_QWORD *)(v9 + 4);
                *(_DWORD *)(v9 + 4) = v153;
                *(_DWORD *)(v9 + 8) = v154;
                *(_QWORD *)(v9 + 16) = v159;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 287)
        {
          v160 = v9 + 12;
          v162 = v9 == a2 || v160 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v162)
            {
              v163 = 0;
              v164 = v9;
              do
              {
                v166 = v160;
                v167 = *(float *)(v164 + 12);
                v168 = *(float *)v164;
                if (v167 < *(float *)v164)
                {
                  v169 = *(_QWORD *)(v164 + 16);
                  v170 = v163;
                  do
                  {
                    v171 = v9 + v170;
                    *(float *)(v171 + 12) = v168;
                    v172 = *(_DWORD *)(v9 + v170 + 8);
                    *(_DWORD *)(v171 + 16) = *(_DWORD *)(v9 + v170 + 4);
                    *(_DWORD *)(v171 + 20) = v172;
                    if (!v170)
                    {
                      v165 = v9;
                      goto LABEL_126;
                    }
                    v168 = *(float *)(v171 - 12);
                    v170 -= 12;
                  }
                  while (v167 < v168);
                  v165 = v9 + v170 + 12;
LABEL_126:
                  *(float *)v165 = v167;
                  *(_QWORD *)(v165 + 4) = v169;
                }
                v160 = v166 + 12;
                v163 += 12;
                v164 = v166;
              }
              while (v166 + 12 != a2);
            }
          }
          else if (!v162)
          {
            v206 = v9 + 20;
            do
            {
              v207 = v160;
              v208 = *(float *)(v7 + 12);
              v209 = *(float *)v7;
              if (v208 < *(float *)v7)
              {
                v210 = *(_QWORD *)(v7 + 16);
                v211 = (float *)v206;
                do
                {
                  v212 = v211;
                  *(v211 - 2) = v209;
                  *(v211 - 1) = *(v211 - 4);
                  v213 = *((_DWORD *)v211 - 3);
                  v211 -= 3;
                  *(_DWORD *)v212 = v213;
                  v209 = *(v212 - 8);
                }
                while (v208 < v209);
                *(v211 - 2) = v208;
                *(_QWORD *)(v211 - 1) = v210;
              }
              v160 = v207 + 12;
              v206 += 12;
              v7 = v207;
            }
            while (v207 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v173 = (unint64_t)(v11 - 2) >> 1;
            v174 = v173;
            do
            {
              if (v173 >= v174)
              {
                v176 = (2 * v174) | 1;
                v177 = v9 + 12 * v176;
                if (2 * v174 + 2 < v11 && *(float *)v177 < *(float *)(v177 + 12))
                {
                  v177 += 12;
                  v176 = 2 * v174 + 2;
                }
                v178 = v9 + 12 * v174;
                v179 = *(float *)v177;
                v180 = *(float *)v178;
                if (*(float *)v177 >= *(float *)v178)
                {
                  v181 = *(_QWORD *)(v178 + 4);
                  do
                  {
                    v182 = (float *)v178;
                    v178 = v177;
                    *v182 = v179;
                    v182[1] = *(float *)(v177 + 4);
                    v182[2] = *(float *)(v177 + 8);
                    if (v173 < v176)
                      break;
                    v183 = 2 * v176;
                    v176 = (2 * v176) | 1;
                    v177 = v9 + 12 * v176;
                    v184 = v183 + 2;
                    if (v184 < v11 && *(float *)v177 < *(float *)(v177 + 12))
                    {
                      v177 += 12;
                      v176 = v184;
                    }
                    v179 = *(float *)v177;
                  }
                  while (*(float *)v177 >= v180);
                  *(float *)v178 = v180;
                  *(_QWORD *)(v178 + 4) = v181;
                }
              }
              v175 = v174-- <= 0;
            }
            while (!v175);
            v185 = v10 / 0xCuLL;
            do
            {
              v186 = 0;
              v187 = *(float *)v9;
              v188 = *(_DWORD *)(v9 + 4);
              v189 = *(_DWORD *)(v9 + 8);
              v190 = (_DWORD *)v9;
              do
              {
                v191 = v190;
                v190 += 3 * v186 + 3;
                v192 = 2 * v186;
                result = (2 * v186) | 1;
                v186 = result;
                v193 = v192 + 2;
                if (v193 < v185)
                {
                  result = (uint64_t)(v190 + 3);
                  if (*(float *)v190 < *((float *)v190 + 3))
                  {
                    v190 += 3;
                    v186 = v193;
                  }
                }
                *v191 = *v190;
                v191[1] = v190[1];
                v191[2] = v190[2];
              }
              while (v186 <= (uint64_t)((unint64_t)(v185 - 2) >> 1));
              if (v190 == (_DWORD *)(a2 - 12))
              {
                *(float *)v190 = v187;
                v190[1] = v188;
                v190[2] = v189;
              }
              else
              {
                *v190 = *(_DWORD *)(a2 - 12);
                v190[1] = *(_DWORD *)(a2 - 8);
                v190[2] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 12) = v187;
                *(_DWORD *)(a2 - 8) = v188;
                *(_DWORD *)(a2 - 4) = v189;
                v194 = (uint64_t)v190 - v9 + 12;
                if (v194 >= 13)
                {
                  v195 = (v194 / 0xCuLL - 2) >> 1;
                  v196 = (float *)(v9 + 12 * v195);
                  v197 = *v196;
                  v198 = *(float *)v190;
                  if (*v196 < *(float *)v190)
                  {
                    v199 = *(_QWORD *)(v190 + 1);
                    do
                    {
                      v200 = (float *)v190;
                      v190 = v196;
                      *v200 = v197;
                      v200[1] = v196[1];
                      v200[2] = v196[2];
                      if (!v195)
                        break;
                      v195 = (v195 - 1) >> 1;
                      v196 = (float *)(v9 + 12 * v195);
                      v197 = *v196;
                    }
                    while (*v196 < v198);
                    *(float *)v190 = v198;
                    *(_QWORD *)(v190 + 1) = v199;
                  }
                }
              }
              a2 -= 12;
              v175 = v185-- <= 2;
            }
            while (!v175);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (float *)(v9 + 12 * v12);
        v14 = *(float *)(a2 - 12);
        if ((unint64_t)v10 >= 0x601)
        {
          v15 = *v13;
          v16 = *(float *)v9;
          if (*v13 >= *(float *)v9)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              v24 = v9 + 12 * v12;
              v26 = *(_DWORD *)(v24 + 4);
              v25 = (_DWORD *)(v24 + 4);
              *(float *)(a2 - 12) = v15;
              *(_DWORD *)(v24 + 4) = *(_DWORD *)(a2 - 8);
              *(_DWORD *)(a2 - 8) = v26;
              v28 = *(_DWORD *)(v24 + 8);
              v27 = (int *)(v24 + 8);
              *v27 = *(_DWORD *)(a2 - 4);
              *(_DWORD *)(a2 - 4) = v28;
              v29 = *(float *)v9;
              if (*v13 < *(float *)v9)
              {
                *(float *)v9 = *v13;
                *v13 = v29;
                v30 = *(_DWORD *)(v9 + 4);
                *(_DWORD *)(v9 + 4) = *v25;
                *v25 = v30;
                v17 = (int *)(v9 + 8);
                goto LABEL_22;
              }
            }
          }
          else
          {
            if (v14 < v15)
            {
              v17 = (int *)(v9 + 8);
              *(float *)v9 = v14;
              *(float *)(a2 - 12) = v16;
              v18 = *(_DWORD *)(v9 + 4);
              *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 - 8);
              *(_DWORD *)(a2 - 8) = v18;
              goto LABEL_21;
            }
            *(float *)v9 = v15;
            *v13 = v16;
            v37 = *(_QWORD *)(v9 + 4);
            v38 = (_QWORD *)(v9 + 4 + 12 * v12);
            *(_QWORD *)(v9 + 4) = *v38;
            *v38 = v37;
            v39 = *(float *)(a2 - 12);
            if (v39 < v16)
            {
              *v13 = v39;
              v17 = (int *)(v9 + 12 * v12 + 8);
              *(_DWORD *)v38 = *(_DWORD *)(a2 - 8);
              *(float *)(a2 - 12) = v16;
              *(_DWORD *)(a2 - 8) = v37;
LABEL_21:
              v27 = (int *)(a2 - 4);
LABEL_22:
              v40 = *v17;
              *v17 = *v27;
              *v27 = v40;
            }
          }
          v41 = v12 - 1;
          v42 = (float *)(v9 + 12 * (v12 - 1));
          v43 = *v42;
          v44 = *(float *)(v9 + 12);
          v45 = *(float *)(a2 - 24);
          if (*v42 >= v44)
          {
            if (v45 < v43)
            {
              *v42 = v45;
              v48 = v9 + 12 * v41;
              v50 = *(_DWORD *)(v48 + 4);
              v49 = (_DWORD *)(v48 + 4);
              *(float *)(a2 - 24) = v43;
              *(_DWORD *)(v48 + 4) = *(_DWORD *)(a2 - 20);
              *(_DWORD *)(a2 - 20) = v50;
              v52 = *(_DWORD *)(v48 + 8);
              v51 = (int *)(v48 + 8);
              *v51 = *(_DWORD *)(a2 - 16);
              *(_DWORD *)(a2 - 16) = v52;
              v53 = *(float *)(v9 + 12);
              if (*v42 < v53)
              {
                *(float *)(v9 + 12) = *v42;
                *v42 = v53;
                v54 = *(_DWORD *)(v9 + 16);
                *(_DWORD *)(v9 + 16) = *v49;
                *v49 = v54;
                v46 = (int *)(v9 + 20);
                goto LABEL_35;
              }
            }
          }
          else
          {
            if (v45 < v43)
            {
              v46 = (int *)(v9 + 20);
              *(float *)(v9 + 12) = v45;
              *(float *)(a2 - 24) = v44;
              v47 = *(_DWORD *)(v9 + 16);
              *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 - 20);
              *(_DWORD *)(a2 - 20) = v47;
              goto LABEL_34;
            }
            *(float *)(v9 + 12) = v43;
            *v42 = v44;
            v57 = v9 + 12 * v41;
            v58 = (int *)(v57 + 4);
            v59 = *(_DWORD *)(v9 + 16);
            *(_DWORD *)(v9 + 16) = *(_DWORD *)(v57 + 4);
            v60 = *(_DWORD *)(v57 + 8);
            v46 = (int *)(v57 + 8);
            *v58 = v59;
            v61 = *(_DWORD *)(v9 + 20);
            *(_DWORD *)(v9 + 20) = v60;
            *v46 = v61;
            v62 = *(float *)(a2 - 24);
            if (v62 < v44)
            {
              *v42 = v62;
              *(float *)(a2 - 24) = v44;
              v63 = *v58;
              *v58 = *(_DWORD *)(a2 - 20);
              *(_DWORD *)(a2 - 20) = v63;
LABEL_34:
              v51 = (int *)(a2 - 16);
LABEL_35:
              v64 = *v46;
              *v46 = *v51;
              *v51 = v64;
            }
          }
          v65 = v12 + 1;
          v66 = (float *)(v9 + 12 * (v12 + 1));
          v67 = *v66;
          v68 = *(float *)(v9 + 24);
          v69 = *(float *)(a2 - 36);
          if (*v66 >= v68)
          {
            if (v69 < v67)
            {
              *v66 = v69;
              v72 = v9 + 12 * v65;
              v74 = *(_DWORD *)(v72 + 4);
              v73 = (_DWORD *)(v72 + 4);
              *(float *)(a2 - 36) = v67;
              *(_DWORD *)(v72 + 4) = *(_DWORD *)(a2 - 32);
              *(_DWORD *)(a2 - 32) = v74;
              v76 = *(_DWORD *)(v72 + 8);
              v75 = (int *)(v72 + 8);
              *v75 = *(_DWORD *)(a2 - 28);
              *(_DWORD *)(a2 - 28) = v76;
              v67 = *v66;
              v77 = *(float *)(v9 + 24);
              if (*v66 < v77)
              {
                *(float *)(v9 + 24) = v67;
                *v66 = v77;
                v78 = *(_DWORD *)(v9 + 28);
                *(_DWORD *)(v9 + 28) = *v73;
                *v73 = v78;
                v70 = (int *)(v9 + 32);
                goto LABEL_45;
              }
            }
LABEL_46:
            v87 = *v13;
            v88 = *v42;
            if (*v13 >= *v42)
              goto LABEL_52;
          }
          else
          {
            if (v69 < v67)
            {
              v70 = (int *)(v9 + 32);
              *(float *)(v9 + 24) = v69;
              *(float *)(a2 - 36) = v68;
              v71 = *(_DWORD *)(v9 + 28);
              *(_DWORD *)(v9 + 28) = *(_DWORD *)(a2 - 32);
              *(_DWORD *)(a2 - 32) = v71;
              goto LABEL_44;
            }
            *(float *)(v9 + 24) = v67;
            *v66 = v68;
            v79 = v9 + 12 * v65;
            v80 = (int *)(v79 + 4);
            v81 = *(_DWORD *)(v9 + 28);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v79 + 4);
            v82 = *(_DWORD *)(v79 + 8);
            v70 = (int *)(v79 + 8);
            *v80 = v81;
            v83 = *(_DWORD *)(v9 + 32);
            *(_DWORD *)(v9 + 32) = v82;
            *v70 = v83;
            v84 = *(float *)(a2 - 36);
            if (v84 < v68)
            {
              *v66 = v84;
              *(float *)(a2 - 36) = v68;
              v85 = *v80;
              *v80 = *(_DWORD *)(a2 - 32);
              *(_DWORD *)(a2 - 32) = v85;
LABEL_44:
              v75 = (int *)(a2 - 28);
LABEL_45:
              v86 = *v70;
              *v70 = *v75;
              *v75 = v86;
              v67 = *v66;
              goto LABEL_46;
            }
            v67 = v68;
            v87 = *v13;
            v88 = *v42;
            if (*v13 >= *v42)
            {
LABEL_52:
              if (v67 < v87)
              {
                *v13 = v67;
                v98 = v9 + 12 * v12;
                v100 = *(_QWORD *)(v98 + 4);
                v99 = (_QWORD *)(v98 + 4);
                *v66 = v87;
                v101 = v9 + 12 * v65;
                v102 = *(_QWORD *)(v101 + 4);
                *v99 = v102;
                *(_QWORD *)(v101 + 4) = v100;
                if (v67 < v88)
                {
                  *v42 = v67;
                  *v13 = v88;
                  v103 = v9 + 12 * v41;
                  v104 = *(_DWORD *)(v103 + 4);
                  *(_DWORD *)(v103 + 4) = v102;
                  *(_DWORD *)v99 = v104;
                  v92 = (int *)(v103 + 8);
                  v65 = v12;
LABEL_55:
                  v105 = v9 + 12 * v65;
                  v106 = *v92;
                  *v92 = *(_DWORD *)(v105 + 8);
                  *(_DWORD *)(v105 + 8) = v106;
                  goto LABEL_56;
                }
                v87 = v67;
              }
LABEL_57:
              v107 = *(float *)v9;
              *(float *)v9 = v87;
              *v13 = v107;
              v108 = v9 + 12 * v12;
              v109 = *(_DWORD *)(v9 + 4);
              *(_DWORD *)(v9 + 4) = *(_DWORD *)(v108 + 4);
              *(_DWORD *)(v108 + 4) = v109;
              v22 = (int *)(v9 + 8);
              v32 = (int *)(v108 + 8);
LABEL_58:
              v110 = *v22;
              *v22 = *v32;
              *v32 = v110;
              goto LABEL_59;
            }
          }
          v89 = (int *)(v9 + 12 * v41 + 4);
          if (v67 < v87)
          {
            *v42 = v67;
            *v66 = v88;
            v90 = v9 + 12 * v65;
            v91 = *v89;
            v92 = (int *)(v9 + 12 * v41 + 8);
            *v89 = *(_DWORD *)(v90 + 4);
            *(_DWORD *)(v90 + 4) = v91;
            v88 = v87;
            goto LABEL_55;
          }
          *v42 = v87;
          *v13 = v88;
          v93 = v9 + 12 * v12;
          v95 = *(_QWORD *)(v93 + 4);
          v94 = (_QWORD *)(v93 + 4);
          v96 = *(_QWORD *)v89;
          *(_QWORD *)v89 = v95;
          *v94 = v96;
          if (v67 < v88)
          {
            *v13 = v67;
            *v66 = v88;
            v97 = v9 + 12 * v65;
            v92 = (int *)(v9 + 12 * v12 + 8);
            *(_DWORD *)v94 = *(_DWORD *)(v97 + 4);
            *(_DWORD *)(v97 + 4) = v96;
            v88 = v67;
            goto LABEL_55;
          }
LABEL_56:
          v87 = v88;
          goto LABEL_57;
        }
        v19 = *(float *)v9;
        v20 = *v13;
        if (*(float *)v9 < *v13)
        {
          v21 = (uint64_t *)(v9 + 12 * v12 + 4);
          if (v14 >= v19)
          {
            *v13 = v19;
            *(float *)v9 = v20;
            v55 = *v21;
            *v21 = *(_QWORD *)(v9 + 4);
            *(_QWORD *)(v9 + 4) = v55;
            v56 = *(float *)(a2 - 12);
            if (v56 >= v20)
              goto LABEL_59;
            v22 = (int *)(v9 + 8);
            *(float *)v9 = v56;
            *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 - 8);
            *(float *)(a2 - 12) = v20;
            *(_DWORD *)(a2 - 8) = v55;
          }
          else
          {
            v22 = (int *)(v9 + 12 * v12 + 8);
            *v13 = v14;
            *(float *)(a2 - 12) = v20;
            v23 = *(_DWORD *)v21;
            *(_DWORD *)v21 = *(_DWORD *)(a2 - 8);
            *(_DWORD *)(a2 - 8) = v23;
          }
          v32 = (int *)(a2 - 4);
          goto LABEL_58;
        }
        if (v14 < v19)
        {
          *(float *)v9 = v14;
          *(float *)(a2 - 12) = v19;
          v31 = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v31;
          v32 = (int *)(v9 + 8);
          v33 = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v33;
          v34 = *v13;
          if (*(float *)v9 < *v13)
          {
            *v13 = *(float *)v9;
            *(float *)v9 = v34;
            v35 = v9 + 12 * v12;
            v36 = *(_DWORD *)(v35 + 4);
            *(_DWORD *)(v35 + 4) = *(_DWORD *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = v36;
            v22 = (int *)(v35 + 8);
            goto LABEL_58;
          }
        }
LABEL_59:
        --a3;
        v111 = *(float *)v9;
        if ((a4 & 1) == 0 && *(float *)(v9 - 12) >= v111)
        {
          if (v111 >= *(float *)(a2 - 12))
          {
            v128 = v9 + 12;
            do
            {
              v9 = v128;
              if (v128 >= a2)
                break;
              v128 += 12;
            }
            while (v111 >= *(float *)v9);
          }
          else
          {
            do
            {
              v127 = *(float *)(v9 + 12);
              v9 += 12;
            }
            while (v111 >= v127);
          }
          v129 = (float *)a2;
          if (v9 < a2)
          {
            v129 = (float *)a2;
            do
            {
              v130 = *(v129 - 3);
              v129 -= 3;
            }
            while (v111 < v130);
          }
          v131 = *(_QWORD *)(v7 + 4);
          if (v9 < (unint64_t)v129)
          {
            v132 = *(float *)v9;
            v133 = *v129;
            do
            {
              *(float *)v9 = v133;
              *v129 = v132;
              v134 = *(_DWORD *)(v9 + 4);
              *(float *)(v9 + 4) = v129[1];
              *((_DWORD *)v129 + 1) = v134;
              v135 = *(_DWORD *)(v9 + 8);
              *(float *)(v9 + 8) = v129[2];
              *((_DWORD *)v129 + 2) = v135;
              do
              {
                v136 = *(float *)(v9 + 12);
                v9 += 12;
                v132 = v136;
              }
              while (v111 >= v136);
              do
              {
                v137 = *(v129 - 3);
                v129 -= 3;
                v133 = v137;
              }
              while (v111 < v137);
            }
            while (v9 < (unint64_t)v129);
          }
          if (v9 - 12 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v9 - 12);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v9 - 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 4);
          }
          a4 = 0;
          *(float *)(v9 - 12) = v111;
          *(_QWORD *)(v9 - 8) = v131;
          continue;
        }
        v112 = 0;
        v113 = *(_QWORD *)(v9 + 4);
        do
        {
          v114 = *(float *)(v9 + v112 + 12);
          v112 += 12;
        }
        while (v114 < v111);
        v115 = v9 + v112;
        v116 = (float *)a2;
        if (v112 == 12)
        {
          v116 = (float *)a2;
          do
          {
            if (v115 >= (unint64_t)v116)
              break;
            v118 = *(v116 - 3);
            v116 -= 3;
          }
          while (v118 >= v111);
        }
        else
        {
          do
          {
            v117 = *(v116 - 3);
            v116 -= 3;
          }
          while (v117 >= v111);
        }
        if (v115 >= (unint64_t)v116)
        {
          v9 += v112;
          v125 = v115 - 12;
          if (v115 - 12 != v7)
            goto LABEL_76;
        }
        else
        {
          v119 = *v116;
          v9 += v112;
          v120 = v116;
          do
          {
            *(float *)v9 = v119;
            *v120 = v114;
            v121 = *(_DWORD *)(v9 + 4);
            *(float *)(v9 + 4) = v120[1];
            *((_DWORD *)v120 + 1) = v121;
            v122 = *(_DWORD *)(v9 + 8);
            *(float *)(v9 + 8) = v120[2];
            *((_DWORD *)v120 + 2) = v122;
            do
            {
              v123 = *(float *)(v9 + 12);
              v9 += 12;
              v114 = v123;
            }
            while (v123 < v111);
            do
            {
              v124 = *(v120 - 3);
              v120 -= 3;
              v119 = v124;
            }
            while (v124 >= v111);
          }
          while (v9 < (unint64_t)v120);
          v125 = v9 - 12;
          if (v9 - 12 != v7)
          {
LABEL_76:
            *(_DWORD *)v7 = *(_DWORD *)(v9 - 12);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v9 - 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 4);
          }
        }
        *(float *)(v9 - 12) = v111;
        *(_QWORD *)(v9 - 8) = v113;
        if (v115 < (unint64_t)v116)
        {
LABEL_80:
          result = sub_2399ECC48(v7, v125, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v126 = sub_2399EDA1C(v7, v125);
        result = sub_2399EDA1C(v9, a2);
        if (!(_DWORD)result)
        {
          if (v126)
            continue;
          goto LABEL_80;
        }
        a2 = v125;
        if (!v126)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_2399EDA1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  int v9;
  float v10;
  float v11;
  float v12;
  int *v13;
  int v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  int *v19;
  int v20;
  float v21;
  float v22;
  int v23;
  int v24;
  float v25;
  float v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  float v37;
  float v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  float v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 12);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 12) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      v10 = *(float *)(a1 + 12);
      v11 = *(float *)a1;
      v12 = *(float *)(a2 - 12);
      if (v10 < *(float *)a1)
      {
        if (v12 >= v10)
        {
          *(float *)a1 = v10;
          *(float *)(a1 + 12) = v11;
          v44 = *(_QWORD *)(a1 + 4);
          *(_QWORD *)(a1 + 4) = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v44;
          v45 = *(float *)(a2 - 12);
          if (v45 >= v11)
            return result;
          v13 = (int *)(a1 + 20);
          *(float *)(a1 + 12) = v45;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 8);
          *(float *)(a2 - 12) = v11;
          *(_DWORD *)(a2 - 8) = v44;
        }
        else
        {
          v13 = (int *)(a1 + 8);
          *(float *)a1 = v12;
          *(float *)(a2 - 12) = v11;
          v14 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v14;
        }
        v35 = (int *)(a2 - 4);
        goto LABEL_27;
      }
      if (v12 < v10)
      {
        *(float *)(a1 + 12) = v12;
        *(float *)(a2 - 12) = v10;
        v34 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v34;
        v35 = (int *)(a1 + 20);
        v36 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v36;
        v37 = *(float *)(a1 + 12);
        v38 = *(float *)a1;
        if (v37 < *(float *)a1)
        {
          *(float *)a1 = v37;
          *(float *)(a1 + 12) = v38;
          v39 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v39;
          v13 = (int *)(a1 + 8);
LABEL_27:
          v46 = *v13;
          *v13 = *v35;
          *v35 = v46;
          return result;
        }
      }
      return result;
    case 4uLL:
      sub_2399EDE24(a1, a1 + 12, a1 + 24, (float *)(a2 - 12));
      return 1;
    case 5uLL:
      sub_2399EDE24(a1, a1 + 12, a1 + 24, (float *)(a1 + 36));
      v21 = *(float *)(a2 - 12);
      v22 = *(float *)(a1 + 36);
      if (v21 >= v22)
        return 1;
      *(float *)(a1 + 36) = v21;
      *(float *)(a2 - 12) = v22;
      v23 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v23;
      v24 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v24;
      v25 = *(float *)(a1 + 36);
      v26 = *(float *)(a1 + 24);
      if (v25 >= v26)
        return 1;
      *(float *)(a1 + 24) = v25;
      *(float *)(a1 + 36) = v26;
      v27 = *(_DWORD *)(a1 + 40);
      v28 = *(_DWORD *)(a1 + 44);
      v29 = *(_QWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = v27;
      *(_DWORD *)(a1 + 32) = v28;
      *(_QWORD *)(a1 + 40) = v29;
      v30 = *(float *)(a1 + 12);
      if (v25 >= v30)
        return 1;
      *(float *)(a1 + 12) = v25;
      *(float *)(a1 + 24) = v30;
      v31 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 20) = v28;
      *(_QWORD *)(a1 + 28) = v31;
      v32 = *(float *)a1;
      if (v25 >= *(float *)a1)
        return 1;
      *(float *)a1 = v25;
      *(float *)(a1 + 12) = v32;
      v33 = *(_QWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v27;
      *(_DWORD *)(a1 + 8) = v28;
      *(_QWORD *)(a1 + 16) = v33;
      return 1;
    default:
      v15 = (float *)(a1 + 24);
      v16 = *(float *)(a1 + 24);
      v17 = *(float *)(a1 + 12);
      v18 = *(float *)a1;
      if (v17 < *(float *)a1)
      {
        if (v16 >= v17)
        {
          *(float *)a1 = v17;
          *(float *)(a1 + 12) = v18;
          v47 = *(_QWORD *)(a1 + 4);
          *(_QWORD *)(a1 + 4) = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v47;
          if (v16 >= v18)
            goto LABEL_32;
          v19 = (int *)(a1 + 20);
          *(float *)(a1 + 12) = v16;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 28);
          *(float *)(a1 + 24) = v18;
          *(_DWORD *)(a1 + 28) = v47;
        }
        else
        {
          v19 = (int *)(a1 + 8);
          *(float *)a1 = v16;
          *(float *)(a1 + 24) = v18;
          v20 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 28);
          *(_DWORD *)(a1 + 28) = v20;
        }
        v42 = (int *)(a1 + 32);
        goto LABEL_31;
      }
      if (v16 < v17)
      {
        *(float *)(a1 + 12) = v16;
        *(float *)(a1 + 24) = v17;
        v40 = *(_QWORD *)(a1 + 28);
        v41 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v40;
        *(_QWORD *)(a1 + 28) = v41;
        if (v16 < v18)
        {
          v42 = (int *)(a1 + 20);
          *(float *)(a1 + 12) = v18;
          v43 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v16;
          *(_DWORD *)(a1 + 4) = v40;
          *(_DWORD *)(a1 + 16) = v43;
          v19 = (int *)(a1 + 8);
LABEL_31:
          v48 = *v19;
          *v19 = *v42;
          *v42 = v48;
        }
      }
LABEL_32:
      v49 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v50 = 0;
      v51 = 0;
      while (1)
      {
        v52 = *(float *)v49;
        v53 = *v15;
        if (*(float *)v49 < *v15)
          break;
LABEL_41:
        v15 = (float *)v49;
        v50 += 12;
        v49 += 12;
        if (v49 == a2)
          return 1;
      }
      v54 = *(_QWORD *)(v49 + 4);
      v55 = v50;
      do
      {
        v56 = a1 + v55;
        *(float *)(v56 + 36) = v53;
        v57 = *(_DWORD *)(a1 + v55 + 32);
        *(_DWORD *)(v56 + 40) = *(_DWORD *)(a1 + v55 + 28);
        *(_DWORD *)(v56 + 44) = v57;
        if (v55 == -24)
        {
          *(float *)a1 = v52;
          *(_QWORD *)(a1 + 4) = v54;
          if (++v51 != 8)
            goto LABEL_41;
          return v49 + 12 == a2;
        }
        v53 = *(float *)(v56 + 12);
        v55 -= 12;
      }
      while (v52 < v53);
      v58 = a1 + v55;
      *(float *)(v58 + 36) = v52;
      *(_QWORD *)(v58 + 40) = v54;
      if (++v51 != 8)
        goto LABEL_41;
      return v49 + 12 == a2;
  }
}

uint64_t sub_2399EDE24(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  float v24;
  int v25;
  int v26;

  v4 = *(float *)a2;
  v5 = *(float *)result;
  v6 = *(float *)a3;
  if (*(float *)a2 < *(float *)result)
  {
    if (v6 >= v4)
    {
      *(float *)result = v4;
      *(float *)a2 = v5;
      v14 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      v7 = (int *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 4) = v14;
      v16 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = v15;
      *(_DWORD *)(a2 + 8) = v16;
      v4 = *(float *)a3;
      if (*(float *)a3 >= v5)
        goto LABEL_11;
      *(float *)a2 = v4;
      *(float *)a3 = v5;
      v8 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    }
    else
    {
      v7 = (int *)(result + 8);
      *(float *)result = v6;
      *(float *)a3 = v5;
      v8 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
    }
    *(_DWORD *)(a3 + 4) = v8;
    v11 = (int *)(a3 + 8);
    goto LABEL_10;
  }
  if (v6 >= v4)
  {
    v4 = *(float *)a3;
    v18 = *a4;
    if (*a4 >= v6)
      return result;
    goto LABEL_14;
  }
  *(float *)a2 = v6;
  *(float *)a3 = v4;
  v9 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a3 + 4) = v9;
  v11 = (int *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = v10;
  v12 = *(float *)result;
  if (*(float *)a2 < *(float *)result)
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    *(float *)a2 = v12;
    v13 = *(_DWORD *)(result + 4);
    *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v13;
    v7 = (int *)(result + 8);
    v5 = *(float *)a3;
LABEL_10:
    v17 = *v7;
    *v7 = *v11;
    *v11 = v17;
    v4 = v5;
  }
LABEL_11:
  v18 = *a4;
  if (*a4 >= v4)
    return result;
LABEL_14:
  *(float *)a3 = v18;
  *a4 = v4;
  v19 = *(_DWORD *)(a3 + 4);
  *(float *)(a3 + 4) = a4[1];
  *((_DWORD *)a4 + 1) = v19;
  v20 = *(_DWORD *)(a3 + 8);
  *(float *)(a3 + 8) = a4[2];
  *((_DWORD *)a4 + 2) = v20;
  v21 = *(float *)a2;
  if (*(float *)a3 < *(float *)a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(float *)a3 = v21;
    v22 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v22;
    v23 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v23;
    v24 = *(float *)result;
    if (*(float *)a2 < *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v24;
      v25 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v25;
      v26 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v26;
    }
  }
  return result;
}

void sub_2399EDFE8(unsigned int *a1, unsigned int *a2, float32x4_t **a3, uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unsigned int v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  unsigned int v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unsigned int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  unsigned int v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  unsigned int *v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  unsigned int *v81;
  unsigned int v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float v92;
  unsigned int v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  unsigned int v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  float32x4_t *v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float v109;
  float32x4_t v110;
  float32x4_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int *v114;
  uint64_t v115;
  float32x4_t *v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float32x4_t v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  float32x4_t v127;
  float32x4_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  int64_t v141;
  int64_t v142;
  uint64_t v143;
  unsigned int *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  unsigned int *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float v167;
  float32x4_t v168;
  float32x4_t v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float v181;
  float32x4_t v182;
  float32x4_t v183;
  float v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  float32x4_t *v194;
  uint64_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float v199;
  float32x4_t v200;
  float32x4_t v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  unsigned int *v205;
  float32x4_t *v206;
  uint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float v211;
  float32x4_t v212;
  float32x4_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  float32x4_t *v218;
  uint64_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float v223;
  float32x4_t v224;
  float32x4_t v225;
  unsigned int *v226;
  float32x4_t *v227;
  uint64_t v228;
  uint64_t v229;
  float32x4_t v230;
  uint64_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float v235;
  float32x4_t v236;
  float32x4_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unsigned int v242;
  float32x4_t *v243;
  uint64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float v248;
  float32x4_t v249;
  float32x4_t v250;
  unsigned int *v251;
  uint64_t v252;
  unsigned int *v253;
  int64_t v254;
  float32x4_t v255;
  float32x4_t v256;
  unsigned int *v257;
  float32x4_t v258;
  uint64_t v259;
  float32x4_t v261;
  int64_t v262;
  unsigned int *v263;
  unsigned int *v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;

void sub_2399EF1E8(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, float32x4_t **a6)
{
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  unsigned int v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  unsigned int v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  unsigned int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;

  sub_2399EFB78(a1, a2, a3, a4, a6);
  v12 = a6[2];
  v13 = a6[3]->i64[0];
  v14 = vsubq_f32(*(float32x4_t *)(v13 + 16 * *a5), *v12);
  v52 = **a6;
  v15 = vmulq_f32(v14, v52);
  v15.i32[3] = 0;
  v56 = *a6[1];
  v60 = vsubq_f32(*(float32x4_t *)(v13 + 16 * *a4), *v12);
  v16 = vmulq_f32(v14, v56);
  v16.i32[3] = 0;
  v17 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
  v18 = vmulq_f32(v60, v52);
  v18.i32[3] = 0;
  v19 = vmulq_f32(v60, v56);
  v19.i32[3] = 0;
  if (v17 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))))
  {
    v20 = *(_QWORD *)a4;
    v21 = *a5;
    *((_WORD *)a4 + 2) = *((_WORD *)a5 + 2);
    *a4 = v21;
    *a5 = v20;
    *((_WORD *)a5 + 2) = WORD2(v20);
    v22 = a6[2];
    v23 = a6[3]->i64[0];
    v24 = vsubq_f32(*(float32x4_t *)(v23 + 16 * *a4), *v22);
    v53 = **a6;
    v25 = vmulq_f32(v24, v53);
    v25.i32[3] = 0;
    v57 = *a6[1];
    v61 = vsubq_f32(*(float32x4_t *)(v23 + 16 * *a3), *v22);
    v26 = vmulq_f32(v24, v57);
    v26.i32[3] = 0;
    v27 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)));
    v28 = vmulq_f32(v61, v53);
    v28.i32[3] = 0;
    v29 = vmulq_f32(v61, v57);
    v29.i32[3] = 0;
    if (v27 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
    {
      v30 = *(_QWORD *)a3;
      v31 = *a4;
      *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
      *a3 = v31;
      *a4 = v30;
      *((_WORD *)a4 + 2) = WORD2(v30);
      v32 = a6[2];
      v33 = a6[3]->i64[0];
      v34 = vsubq_f32(*(float32x4_t *)(v33 + 16 * *a3), *v32);
      v54 = **a6;
      v35 = vmulq_f32(v34, v54);
      v35.i32[3] = 0;
      v58 = *a6[1];
      v62 = vsubq_f32(*(float32x4_t *)(v33 + 16 * *a2), *v32);
      v36 = vmulq_f32(v34, v58);
      v36.i32[3] = 0;
      v37 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)));
      v38 = vmulq_f32(v62, v54);
      v38.i32[3] = 0;
      v39 = vmulq_f32(v62, v58);
      v39.i32[3] = 0;
      if (v37 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39))))
      {
        v40 = *(_QWORD *)a2;
        v41 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v41;
        *a3 = v40;
        *((_WORD *)a3 + 2) = WORD2(v40);
        v42 = a6[2];
        v43 = a6[3]->i64[0];
        v44 = vsubq_f32(*(float32x4_t *)(v43 + 16 * *a2), *v42);
        v55 = **a6;
        v45 = vmulq_f32(v44, v55);
        v45.i32[3] = 0;
        v59 = *a6[1];
        v63 = vsubq_f32(*(float32x4_t *)(v43 + 16 * *a1), *v42);
        v46 = vmulq_f32(v44, v59);
        v46.i32[3] = 0;
        v47 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46)));
        v48 = vmulq_f32(v63, v55);
        v48.i32[3] = 0;
        v49 = vmulq_f32(v63, v59);
        v49.i32[3] = 0;
        if (v47 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v49, v49))))
        {
          v50 = *(_QWORD *)a1;
          v51 = *a2;
          *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
          *a1 = v51;
          *a2 = v50;
          *((_WORD *)a2 + 2) = WORD2(v50);
        }
      }
    }
  }
}

void sub_2399EF510(unsigned int *a1, unsigned int *a2, unsigned int *a3, float32x4_t **a4)
{
  float32x4_t *v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  float32x4_t *v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  unsigned int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;

  v9 = a4[2];
  v8 = a4[3];
  v10 = v8->i64[0];
  v11 = vsubq_f32(*(float32x4_t *)(v8->i64[0] + 16 * *a2), *v9);
  v47 = vsubq_f32(*(float32x4_t *)(v8->i64[0] + 16 * *a1), *v9);
  v48 = *v9;
  v51 = **a4;
  v12 = vmulq_f32(v11, v51);
  v12.i32[3] = 0;
  v54 = *a4[1];
  v13 = vmulq_f32(v11, v54);
  v13.i32[3] = 0;
  v14 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)));
  v15 = vmulq_f32(v47, v51);
  v15.i32[3] = 0;
  v16 = vmulq_f32(v47, v54);
  v16.i32[3] = 0;
  v17 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
  v18 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *a3), v48);
  v19 = vmulq_f32(v51, v18);
  v19.i32[3] = 0;
  v20 = vmulq_f32(v54, v18);
  v20.i32[3] = 0;
  v21 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20)));
  if (v14 <= v17)
  {
    if (v21 > v14)
    {
      v24 = *(_QWORD *)a2;
      v25 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v25;
      *a3 = v24;
      *((_WORD *)a3 + 2) = WORD2(v24);
      v26 = a4[2];
      v27 = a4[3]->i64[0];
      v28 = vsubq_f32(*(float32x4_t *)(v27 + 16 * *a2), *v26);
      v49 = **a4;
      v29 = vmulq_f32(v28, v49);
      v29.i32[3] = 0;
      v52 = *a4[1];
      v55 = vsubq_f32(*(float32x4_t *)(v27 + 16 * *a1), *v26);
      v30 = vmulq_f32(v28, v52);
      v30.i32[3] = 0;
      v31 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30)));
      v32 = vmulq_f32(v55, v49);
      v32.i32[3] = 0;
      v33 = vmulq_f32(v55, v52);
      v33.i32[3] = 0;
      if (v31 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33))))
      {
        v34 = *(_QWORD *)a1;
        v35 = *a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *a1 = v35;
        *a2 = v34;
        *((_WORD *)a2 + 2) = WORD2(v34);
      }
    }
  }
  else
  {
    v22 = *(_QWORD *)a1;
    if (v21 <= v14)
    {
      v36 = *a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      *a1 = v36;
      *((_WORD *)a2 + 2) = WORD2(v22);
      *a2 = v22;
      v37 = a4[2];
      v38 = a4[3]->i64[0];
      v39 = vsubq_f32(*(float32x4_t *)(v38 + 16 * *a3), *v37);
      v50 = **a4;
      v40 = vmulq_f32(v39, v50);
      v40.i32[3] = 0;
      v53 = *a4[1];
      v56 = vsubq_f32(*(float32x4_t *)(v38 + 16 * v22), *v37);
      v41 = vmulq_f32(v39, v53);
      v41.i32[3] = 0;
      v42 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41)));
      v43 = vmulq_f32(v56, v50);
      v43.i32[3] = 0;
      v44 = vmulq_f32(v56, v53);
      v44.i32[3] = 0;
      if (v42 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44))))
      {
        v45 = *(_QWORD *)a2;
        v46 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v46;
        *a3 = v45;
        *((_WORD *)a3 + 2) = WORD2(v45);
      }
    }
    else
    {
      v23 = *a3;
      *((_WORD *)a1 + 2) = *((_WORD *)a3 + 2);
      *a1 = v23;
      *((_WORD *)a3 + 2) = WORD2(v22);
      *a3 = v22;
    }
  }
}

BOOL sub_2399EF804(unsigned int *a1, unsigned int *a2, float32x4_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  float32x4_t *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      v9 = a3[2];
      v10 = a3[3]->i64[0];
      v11 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *(a2 - 2)), *v9);
      v43 = **a3;
      v12 = vmulq_f32(v11, v43);
      v12.i32[3] = 0;
      v46 = *a3[1];
      v49 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *a1), *v9);
      v13 = vmulq_f32(v11, v46);
      v13.i32[3] = 0;
      v14 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)));
      v15 = vmulq_f32(v49, v43);
      v15.i32[3] = 0;
      v16 = vmulq_f32(v49, v46);
      v16.i32[3] = 0;
      if (v14 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16))))
      {
        v17 = *(_QWORD *)a1;
        v18 = *v8;
        *((_WORD *)a1 + 2) = *((_WORD *)v8 + 2);
        *a1 = v18;
        *v8 = v17;
        *((_WORD *)v8 + 2) = WORD2(v17);
      }
      return 1;
    case 3:
      sub_2399EF510(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_2399EFB78(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_2399EF1E8(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v19 = a1 + 4;
      sub_2399EF510(a1, a1 + 2, a1 + 4, a3);
      v20 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v23 = a3[2];
    v24 = a3[3]->i64[0];
    v25 = vsubq_f32(*(float32x4_t *)(v24 + 16 * *v20), *v23);
    v44 = **a3;
    v26 = vmulq_f32(v25, v44);
    v26.i32[3] = 0;
    v47 = *a3[1];
    v50 = vsubq_f32(*(float32x4_t *)(v24 + 16 * *v19), *v23);
    v27 = vmulq_f32(v25, v47);
    v27.i32[3] = 0;
    v28 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27)));
    v29 = vmulq_f32(v50, v44);
    v29.i32[3] = 0;
    v30 = vmulq_f32(v50, v47);
    v30.i32[3] = 0;
    if (v28 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30))))break;
LABEL_13:
    v19 = v20;
    v21 += 8;
    v20 += 2;
    if (v20 == a2)
      return 1;
  }
  v31 = *(_QWORD *)v20;
  v32 = *(_QWORD *)v20;
  v33 = v21;
  do
  {
    v34 = (char *)a1 + v33;
    *((_DWORD *)v34 + 6) = *(unsigned int *)((char *)a1 + v33 + 16);
    *((_WORD *)v34 + 14) = *(_WORD *)((char *)a1 + v33 + 20);
    if (v33 == -16)
    {
      *a1 = v31;
      *((_WORD *)a1 + 2) = WORD2(v31);
      if (++v22 != 8)
        goto LABEL_13;
      return v20 + 2 == a2;
    }
    v35 = a3[2];
    v36 = a3[3]->i64[0];
    v37 = vsubq_f32(*(float32x4_t *)(v36 + 16 * v32), *v35);
    v45 = **a3;
    v38 = vmulq_f32(v37, v45);
    v38.i32[3] = 0;
    v48 = *a3[1];
    v51 = vsubq_f32(*(float32x4_t *)(v36 + 16 * *((unsigned int *)v34 + 2)), *v35);
    v39 = vmulq_f32(v37, v48);
    v39.i32[3] = 0;
    v40 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)));
    v41 = vmulq_f32(v51, v45);
    v41.i32[3] = 0;
    v42 = vmulq_f32(v51, v48);
    v42.i32[3] = 0;
    v33 -= 8;
  }
  while (v40 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42))));
  *(unsigned int *)((char *)a1 + v33 + 24) = v31;
  *(_WORD *)((char *)a1 + v33 + 28) = WORD2(v31);
  if (++v22 != 8)
    goto LABEL_13;
  return v20 + 2 == a2;
}

void sub_2399EFB78(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, float32x4_t **a5)
{
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  unsigned int v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  float32x4_t *v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  unsigned int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  sub_2399EF510(a1, a2, a3, a5);
  v10 = a5[2];
  v11 = a5[3]->i64[0];
  v12 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *a4), *v10);
  v40 = **a5;
  v13 = vmulq_f32(v12, v40);
  v13.i32[3] = 0;
  v43 = *a5[1];
  v46 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *a3), *v10);
  v14 = vmulq_f32(v12, v43);
  v14.i32[3] = 0;
  v15 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
  v16 = vmulq_f32(v46, v40);
  v16.i32[3] = 0;
  v17 = vmulq_f32(v46, v43);
  v17.i32[3] = 0;
  if (v15 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17))))
  {
    v18 = *(_QWORD *)a3;
    v19 = *a4;
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *a3 = v19;
    *a4 = v18;
    *((_WORD *)a4 + 2) = WORD2(v18);
    v20 = a5[2];
    v21 = a5[3]->i64[0];
    v22 = vsubq_f32(*(float32x4_t *)(v21 + 16 * *a3), *v20);
    v41 = **a5;
    v23 = vmulq_f32(v22, v41);
    v23.i32[3] = 0;
    v44 = *a5[1];
    v47 = vsubq_f32(*(float32x4_t *)(v21 + 16 * *a2), *v20);
    v24 = vmulq_f32(v22, v44);
    v24.i32[3] = 0;
    v25 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24)));
    v26 = vmulq_f32(v47, v41);
    v26.i32[3] = 0;
    v27 = vmulq_f32(v47, v44);
    v27.i32[3] = 0;
    if (v25 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27))))
    {
      v28 = *(_QWORD *)a2;
      v29 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v29;
      *a3 = v28;
      *((_WORD *)a3 + 2) = WORD2(v28);
      v30 = a5[2];
      v31 = a5[3]->i64[0];
      v32 = vsubq_f32(*(float32x4_t *)(v31 + 16 * *a2), *v30);
      v42 = **a5;
      v33 = vmulq_f32(v32, v42);
      v33.i32[3] = 0;
      v45 = *a5[1];
      v48 = vsubq_f32(*(float32x4_t *)(v31 + 16 * *a1), *v30);
      v34 = vmulq_f32(v32, v45);
      v34.i32[3] = 0;
      v35 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)));
      v36 = vmulq_f32(v48, v42);
      v36.i32[3] = 0;
      v37 = vmulq_f32(v48, v45);
      v37.i32[3] = 0;
      if (v35 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37))))
      {
        v38 = *(_QWORD *)a1;
        v39 = *a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *a1 = v39;
        *a2 = v38;
        *((_WORD *)a2 + 2) = WORD2(v38);
      }
    }
  }
}

void sub_2399EFDE8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  int v24;
  float32x4x4_t v25;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      bzero(v5, 16 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(_DWORD **)a1;
    v8 = (uint64_t)v5 - *(_QWORD *)a1;
    v9 = (v8 >> 4) + a2;
    if (v9 >> 60)
      sub_2394189F8();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_239418A80();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * (v8 >> 4)];
    v14 = 16 * a2;
    v15 = &v12[16 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v7)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v7)
LABEL_25:
        operator delete(v7);
    }
    else
    {
      v17 = (char *)v5 - (char *)v7 - 16;
      if (v17 < 0x70
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF0) - 16] < (char *)v5
        && (char *)v5 - (v17 & 0xFFFFFFFFFFFFFFF0) - 16 < v13)
      {
        goto LABEL_22;
      }
      v18 = (v17 >> 4) + 1;
      v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      v6 = &v5[v19 / 0xFFFFFFFFFFFFFFFCLL];
      v20 = &v13[-v19];
      v21 = (const float *)(v5 - 16);
      v22 = (float *)(v13 - 64);
      v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = vld4q_f32(v21);
        vst4q_f32(v22, v25);
        v22 -= 16;
        v21 -= 16;
        v23 -= 4;
      }
      while (v23);
      v13 = v20;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v20 = v13;
        do
        {
          v24 = *(v6 - 4);
          v6 -= 4;
          *((_DWORD *)v20 - 4) = v24;
          v20 -= 16;
          *((_DWORD *)v20 + 1) = v6[1];
          *((_DWORD *)v20 + 2) = v6[2];
          *((_DWORD *)v20 + 3) = v6[3];
        }
        while (v6 != v7);
      }
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v7)
        goto LABEL_25;
    }
  }
}

uint64_t sub_2399EFFC8(float *a1, float32x4_t *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int32x4_t v9;
  float v10;
  __int32 v11;
  int v12;
  float v13;
  __float2 v14;
  float32x4_t v16;
  float32x4_t v17;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = v5 * v5;
  if (fabsf(*a1) <= fabsf(v4))
  {
    v10 = 1.0 / sqrtf(v6 + (float)(v4 * v4));
    *(float *)&v11 = v5 * v10;
    v8 = -(float)(v4 * v10);
    v9.i32[0] = 0;
    v9.i32[3] = 0;
    v9.i32[1] = v11;
  }
  else
  {
    v7 = 1.0 / sqrtf(v6 + (float)(v3 * v3));
    v8 = -(float)(v3 * v7);
    v9.i32[1] = 0;
    v9.i32[3] = 0;
    *(float *)v9.i32 = v5 * v7;
  }
  *(float *)&v9.i32[2] = v8;
  v17 = (float32x4_t)v9;
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v9, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL)), v9), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), v9));
  v12 = rand();
  v13 = (float)((float)((float)v12 * 4.6566e-10) + (float)((float)v12 * 4.6566e-10)) * 3.14159265;
  v14 = __sincosf_stret(v13);
  *a2 = vaddq_f32(vmulq_n_f32(v17, v14.__sinval), vmulq_n_f32(v16, v14.__cosval));
  return 1;
}

BOOL sub_2399F00D8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  float v9;
  __int32 v10;
  float v11;
  int32x4_t v12;
  int v13;
  float v14;
  __float2 v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32x4_t v23;
  float32x4_t v24;

  v2 = a1[1] - *a1;
  v3 = a2[1] - *a2;
  if (v2 == v3)
  {
    srand(2u);
    v6 = *a2;
    if (a2[1] != *a2)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v16 = (float *)(*a1 + 16 * v7);
        v17 = *v16;
        v18 = v16[1];
        v19 = v16[2];
        v20 = v19 * v19;
        if (fabsf(*v16) <= fabsf(v18))
        {
          v9 = 1.0 / sqrtf(v20 + (float)(v18 * v18));
          *(float *)&v10 = v19 * v9;
          v11 = -(float)(v18 * v9);
          v12.i32[0] = 0;
          v12.i32[3] = 0;
          v12.i32[1] = v10;
        }
        else
        {
          v21 = 1.0 / sqrtf(v20 + (float)(v17 * v17));
          v11 = -(float)(v17 * v21);
          v12.i32[1] = 0;
          v12.i32[3] = 0;
          *(float *)v12.i32 = v19 * v21;
        }
        *(float *)&v12.i32[2] = v11;
        v24 = (float32x4_t)v12;
        v23 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v12, (int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL)), v12), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v16, *(int8x16_t *)v16, 4uLL), *(int32x4_t *)v16)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v16, (int32x4_t)vextq_s8(*(int8x16_t *)v16, *(int8x16_t *)v16, 0xCuLL)), *(int32x4_t *)v16), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL), v12));
        v13 = rand();
        v14 = (float)((float)((float)v13 * 4.6566e-10) + (float)((float)v13 * 4.6566e-10)) * 3.14159265;
        v15 = __sincosf_stret(v14);
        *(float32x4_t *)(v6 + 16 * v7) = vaddq_f32(vmulq_n_f32(v24, v15.__sinval), vmulq_n_f32(v23, v15.__cosval));
        v7 = v8;
        v6 = *a2;
        ++v8;
      }
      while (v7 < (a2[1] - *a2) >> 4);
    }
  }
  return v2 == v3;
}

uint64_t sub_2399F026C(float32x4_t *a1, float *a2, float32x4_t *a3, float a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int32x4_t v12;
  float v13;
  __int32 v14;
  float v16;
  float32x4_t v17;
  float32x4_t v18;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = v8 * v8;
  if (fabsf(*a2) <= fabsf(v7))
  {
    v13 = 1.0 / sqrtf(v9 + (float)(v7 * v7));
    *(float *)&v14 = v8 * v13;
    v11 = -(float)(v7 * v13);
    v12.i32[0] = 0;
    v12.i32[3] = 0;
    v12.i32[1] = v14;
  }
  else
  {
    v10 = 1.0 / sqrtf(v9 + (float)(v6 * v6));
    v11 = -(float)(v6 * v10);
    v12.i32[1] = 0;
    v12.i32[3] = 0;
    *(float *)v12.i32 = v8 * v10;
  }
  *(float *)&v12.i32[2] = v11;
  v18 = (float32x4_t)v12;
  v17 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v12, (int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL)), v12), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL), v12));
  v16 = (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0;
  *a3 = vaddq_f32(*a1, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v17, v16), vmulq_n_f32(v18, (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0)), a4));
  return 1;
}

BOOL sub_2399F03A8(_QWORD *a1, _QWORD *a2, uint64_t *a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  float v11;
  __int32 v12;
  float v13;
  int32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v26;
  float32x4_t v27;

  v7 = (a3[1] - *a3) >> 4;
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (v7 == v8)
  {
    srand(2u);
    if ((*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1))
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v18 = (float *)(*a2 + 16 * v9);
        v19 = *v18;
        v20 = v18[1];
        v21 = v18[2];
        v22 = v21 * v21;
        if (fabsf(*v18) <= fabsf(v20))
        {
          v11 = 1.0 / sqrtf(v22 + (float)(v20 * v20));
          *(float *)&v12 = v21 * v11;
          v13 = -(float)(v20 * v11);
          v14.i32[0] = 0;
          v14.i32[3] = 0;
          v14.i32[1] = v12;
        }
        else
        {
          v23 = 1.0 / sqrtf(v22 + (float)(v19 * v19));
          v13 = -(float)(v19 * v23);
          v14.i32[1] = 0;
          v14.i32[3] = 0;
          *(float *)v14.i32 = v21 * v23;
        }
        *(float *)&v14.i32[2] = v13;
        v15 = a1[5];
        v16 = *a3;
        v27 = (float32x4_t)v14;
        v26 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v14, (int32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL)), v14), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v18, *(int8x16_t *)v18, 4uLL), *(int32x4_t *)v18)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v18, (int32x4_t)vextq_s8(*(int8x16_t *)v18, *(int8x16_t *)v18, 0xCuLL)), *(int32x4_t *)v18), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL), v14));
        v17 = (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0;
        *(float32x4_t *)(v16 + 16 * v9) = vaddq_f32(*(float32x4_t *)(v15 + 16 * v9), vmulq_n_f32(vaddq_f32(vmulq_n_f32(v26, v17), vmulq_n_f32(v27, (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0)), a4));
        v9 = v10++;
      }
      while ((*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1) > v9);
    }
  }
  return v7 == v8;
}

uint64_t sub_2399F0588(float *a1, float *a2, float *a3, float *a4, _OWORD *a5, _OWORD *a6, int8x16_t a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _BOOL4 v26;
  double v27;
  double v28;
  double v29;
  _BOOL4 v30;
  double *v31;
  float64x2_t *v32;
  double v33;
  float64x2_t v34;
  __int128 v35;
  unsigned int v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  double v40;
  __int128 v41;
  double v43[6];
  double v44[7];

  v44[6] = *(double *)MEMORY[0x24BDAC8D0];
  v7 = a1[1];
  v44[0] = *a1;
  v44[1] = v7;
  v8 = a1[2];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = v10 * v8 - v11 * v7;
  v13 = v11 * v44[0] - v9 * v8;
  v14 = v9 * v7 - v10 * v44[0];
  v44[2] = v8;
  v44[3] = v12;
  v44[4] = v13;
  v44[5] = v14;
  v15 = *a3;
  v16 = a3[1];
  v17 = a3[2];
  v18 = *a4;
  v19 = a4[1];
  v20 = a4[2];
  v21 = v19 * v17 - v20 * v16;
  v22 = v20 * v15 - v18 * v17;
  v23 = v18 * v16 - v19 * v15;
  v24 = fmax(fabs(v7 * v16 + v44[0] * v15 + v8 * v17), -1.79769313e308);
  v25 = fabs(v22 * v7 + v44[0] * v21 + v8 * v23);
  v26 = v25 > v24;
  if (v25 <= v24)
    v25 = v24;
  v27 = fabs(v13 * v16 + v12 * v15 + v14 * v17);
  if (v27 <= v25)
    v28 = v25;
  else
    v28 = v27;
  v29 = fabs(v13 * v22 + v12 * v21 + v14 * v23);
  v30 = v29 > v28;
  if (v27 > v25)
  {
    v26 = 0;
    v30 = 1;
  }
  v43[0] = *a3;
  v43[1] = v16;
  v43[2] = v17;
  v43[3] = v21;
  v43[4] = v22;
  v43[5] = v23;
  if (v29 > v28)
    v26 = 1;
  v31 = &v44[3 * v30];
  v32 = (float64x2_t *)&v43[3 * v26];
  a7.i64[0] = (uint64_t)v31[2];
  v33 = v32[1].f64[0];
  v34 = *(float64x2_t *)v31;
  *(float32x2_t *)&v35 = vcvt_f32_f64(*(float64x2_t *)v31);
  *(float *)&v36 = *(double *)a7.i64;
  *((_QWORD *)&v35 + 1) = v36;
  *a5 = v35;
  *(double *)a7.i64 = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v34, *v32).f64[1]), v32->f64[0], v34.f64[0])
                    + *(double *)a7.i64 * v33;
  v34.f64[0] = 1.0;
  v37.f64[0] = NAN;
  v37.f64[1] = NAN;
  v38 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v37), (int8x16_t)v34, a7).i64;
  v39 = vmulq_n_f64(*v32, v38);
  v40 = v33 * v38;
  *(float32x2_t *)&v41 = vcvt_f32_f64(v39);
  *(float *)&v40 = v40;
  *((_QWORD *)&v41 + 1) = LODWORD(v40);
  *a6 = v41;
  return 1;
}

uint64_t sub_2399F0758(float32x4_t *a1, int32x4_t *a2, int32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, int32x4_t *a7, float32x4_t *a8, float *a9, float *a10, float *a11, _DWORD *a12, _DWORD *a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  unsigned int v38;
  float32x4_t v39;
  unsigned int v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  int v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float v64;
  int v65;
  unsigned int v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v71;
  unsigned int v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  float v87;
  int v88;
  unsigned int v89;
  BOOL v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  float v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float v108;
  float v109;
  BOOL v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float v123;
  float v124;
  float32x4_t v125;
  float32x4_t v126;
  float v127;
  float v128;
  unsigned int v129;
  BOOL v131;
  float32x4_t v132;
  float32x4_t v133;
  float v134;

  v13 = *(float32x4_t *)a3;
  v14 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), *a3)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *a2));
  v15 = *(float32x4_t *)a7;
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a6, (int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 0xCuLL)), *a6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), *a7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 4uLL), *a6));
  v17 = vmulq_f32(*(float32x4_t *)a2, *a1);
  v17.i32[3] = 0;
  v18 = vmulq_f32(*(float32x4_t *)a2, *a5);
  v18.i32[3] = 0;
  v19 = vmulq_f32(*(float32x4_t *)a6, *a1);
  v19.i32[3] = 0;
  v19.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  v20 = vmulq_f32(*(float32x4_t *)a6, *a5);
  v20.i32[3] = 0;
  v20.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20));
  v21 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a6);
  v21.i32[3] = 0;
  v21.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21));
  v17.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
  v22.i64[0] = 0x3F0000003F000000;
  v22.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V3.4S, #-0.25 }
  v27 = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a5), v22), vmulq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a6, (float)((float)((float)(v19.f32[0] - v20.f32[0]) - (float)(v21.f32[0] * v17.f32[0]))+ (float)((float)(v19.f32[0] - v20.f32[0]) - (float)(v21.f32[0] * v17.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v21.f32[0] * v21.f32[0])) + 0.0001))), vmulq_n_f32(*(float32x4_t *)a2, (float)((float)(v17.f32[0] - (float)(v21.f32[0] * (float)(v19.f32[0] - v20.f32[0])))+ (float)(v17.f32[0] - (float)(v21.f32[0] * (float)(v19.f32[0] - v20.f32[0]))))* (float)(1.0 / (float)((float)(1.0 - (float)(v21.f32[0] * v21.f32[0])) + 0.0001)))), _Q3));
  v28 = *a4;
  v29 = vsubq_f32(v27, *a4);
  v30 = vmulq_f32(*(float32x4_t *)a3, v29);
  v30.i32[3] = 0;
  v31 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30)) * *a10;
  v32 = vmulq_f32(v14, v29);
  v32.i32[3] = 0;
  v33 = *a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32));
  v34 = *a8;
  v35 = vsubq_f32(v27, *a8);
  v36 = vmulq_f32(*(float32x4_t *)a7, v35);
  v36.i32[3] = 0;
  v36.f32[0] = *a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36));
  v37 = floorf(v36.f32[0]);
  v38 = vcvtms_s32_f32(v36.f32[0]);
  v39 = vmulq_f32(v16, v35);
  v39.i32[3] = 0;
  v39.f32[0] = *a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39));
  v36.f32[0] = floorf(v39.f32[0]);
  v40 = vcvtms_s32_f32(v39.f32[0]);
  v41 = *a9;
  v42 = vmulq_n_f32(*(float32x4_t *)a7, (float)(int)v37);
  v43 = vmulq_n_f32(v16, (float)(int)v36.f32[0]);
  v44 = vaddq_f32(*a8, vmulq_n_f32(vaddq_f32(v43, v42), *a9));
  v45 = vmulq_n_f32(*(float32x4_t *)a3, (float)(int)floorf(v31));
  v46 = vmulq_n_f32(v14, (float)(int)floorf(v33));
  v47 = vaddq_f32(*a4, vmulq_n_f32(vaddq_f32(v46, v45), *a9));
  v48 = vsubq_f32(v47, v44);
  v49 = vmulq_f32(v48, v48);
  v49.i32[3] = 0;
  v50 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v49, v49));
  if (v50 < 3.4028e38)
  {
    v51 = 0;
  }
  else
  {
    v50 = 3.4028e38;
    v51 = -1;
  }
  v52 = vmulq_n_f32(v15, (float)(int)(v38 + 1));
  v53 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(v43, v52), v41));
  v54 = vsubq_f32(v47, v53);
  v55 = vmulq_f32(v54, v54);
  v55.i32[3] = 0;
  v56 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v55, v55));
  if (v56 >= v50)
    v57 = v50;
  else
    v57 = v56;
  if (v56 < v50)
    v58 = 1;
  else
    v58 = v51;
  v59 = vmulq_n_f32(v16, (float)(int)(v40 + 1));
  v60 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(v59, v42), v41));
  v61 = vsubq_f32(v47, v60);
  v62 = vmulq_f32(v61, v61);
  v62.i32[3] = 0;
  v63 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62));
  if (v63 >= v57)
    v64 = v57;
  else
    v64 = v63;
  if (v63 >= v57)
    v65 = v58;
  else
    v65 = 2;
  v66 = vcvtms_s32_f32(v31);
  v67 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(v59, v52), v41));
  v68 = vsubq_f32(v47, v67);
  v69 = vmulq_f32(v68, v68);
  v69.i32[3] = 0;
  _NF = v56 < v50 || v63 < v57;
  v71 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69));
  if (_NF || v71 < v64)
    v73 = 0;
  else
    v73 = v51;
  if (v71 < v64)
    v65 = 3;
  else
    v71 = v64;
  v74 = vmulq_n_f32(v13, (float)(int)(v66 + 1));
  v75 = vaddq_f32(v28, vmulq_n_f32(vaddq_f32(v46, v74), v41));
  v76 = vsubq_f32(v75, v44);
  v77 = vmulq_f32(v76, v76);
  v77.i32[3] = 0;
  v78 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v77, v77));
  if (v78 >= v71)
    v79 = v71;
  else
    v79 = v78;
  if (v78 < v71)
    v65 = 0;
  v80 = vsubq_f32(v75, v53);
  v81 = vmulq_f32(v80, v80);
  v81.i32[3] = 0;
  v82 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v81, v81));
  if (v82 >= v79)
    v83 = v79;
  else
    v83 = v82;
  if (v82 < v79)
    v65 = 1;
  v84 = vsubq_f32(v75, v60);
  v85 = vmulq_f32(v84, v84);
  v85.i32[3] = 0;
  v86 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v85, v85));
  if (v86 >= v83)
    v87 = v83;
  else
    v87 = v86;
  if (v86 >= v83)
    v88 = v65;
  else
    v88 = 2;
  v89 = vcvtms_s32_f32(v33);
  v91 = v78 < v71 || v82 < v79 || v86 < v83;
  v92 = vsubq_f32(v75, v67);
  v93 = vmulq_f32(v92, v92);
  v93.i32[3] = 0;
  v94 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v93, v93));
  if (v91 || v94 < v87)
    v73 = 1;
  if (v94 < v87)
    v88 = 3;
  else
    v94 = v87;
  v96 = vmulq_n_f32(v14, (float)(int)(v89 + 1));
  v97 = vaddq_f32(v28, vmulq_n_f32(vaddq_f32(v96, v45), v41));
  v98 = vsubq_f32(v97, v44);
  v99 = vmulq_f32(v98, v98);
  v99.i32[3] = 0;
  v100 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v99, v99));
  if (v100 >= v94)
    v101 = v94;
  else
    v101 = v100;
  v102 = vsubq_f32(v97, v53);
  v103 = vmulq_f32(v102, v102);
  v103.i32[3] = 0;
  if (v100 < v94)
    v88 = 0;
  v104 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v103, v103));
  if (v104 >= v101)
    v105 = v101;
  else
    v105 = v104;
  if (v104 < v101)
    v88 = 1;
  v106 = vsubq_f32(v97, v60);
  v107 = vmulq_f32(v106, v106);
  v107.i32[3] = 0;
  v108 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v107, v107));
  if (v108 >= v105)
    v109 = v105;
  else
    v109 = v108;
  if (v108 < v105)
    v88 = 2;
  v111 = v100 < v94 || v104 < v101 || v108 < v105;
  v112 = vsubq_f32(v97, v67);
  v113 = vmulq_f32(v112, v112);
  v113.i32[3] = 0;
  v114 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v113, v113));
  if (v111 || v114 < v109)
    v73 = 2;
  if (v114 < v109)
    v88 = 3;
  else
    v114 = v109;
  v116 = vaddq_f32(v28, vmulq_n_f32(vaddq_f32(v96, v74), v41));
  v117 = vsubq_f32(v116, v44);
  v118 = vmulq_f32(v117, v117);
  v118.i32[3] = 0;
  v119 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v118, v118));
  if (v119 >= v114)
    v120 = v114;
  else
    v120 = v119;
  if (v119 < v114)
    v88 = 0;
  v121 = vsubq_f32(v116, v53);
  v122 = vmulq_f32(v121, v121);
  v122.i32[3] = 0;
  v123 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v122, v122));
  if (v123 >= v120)
    v124 = v120;
  else
    v124 = v123;
  if (v123 < v120)
    v88 = 1;
  v125 = vsubq_f32(v116, v60);
  v126 = vmulq_f32(v125, v125);
  v126.i32[3] = 0;
  v127 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v126, v126));
  if (v127 >= v124)
    v128 = v124;
  else
    v128 = v127;
  if (v127 >= v124)
    v129 = v88;
  else
    v129 = 2;
  v131 = v119 < v114 || v123 < v120 || v127 < v124;
  v132 = vsubq_f32(v116, v67);
  v133 = vmulq_f32(v132, v132);
  v133.i32[3] = 0;
  v134 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v133, v133));
  if (v131 || v134 < v128)
    v73 = 3;
  if (v134 < v128)
    v129 = 3;
  else
    v134 = v128;
  *a11 = v134;
  *a12 = (v73 & 1) + v66;
  a12[1] = ((v73 >> 1) & 1) + v89;
  *a13 = (v129 & 1) + v38;
  a13[1] = ((v129 >> 1) & 1) + v40;
  return 1;
}

uint64_t sub_2399F0C64(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  float64x2_t v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  float32x4_t *v14;
  uint64_t v15;
  float *v16;
  float *v17;
  double v19;
  double v20;
  double v21;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  _BOOL4 v38;
  double v39;
  _BOOL4 v40;
  float64_t *v41;
  float64x2_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  unsigned int v45;
  double v46;
  double v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  _QWORD *v55;
  int8x16_t v56;
  __int128 v57;
  float32x4_t v58;
  uint64_t v59[3];
  _QWORD v60[6];
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = (a2[1] - *a2) >> 4;
  v4 = *(_QWORD *)(a1 + 104);
  v55 = (_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  if (v3 != (v5 - v4) >> 2 || v3 != (uint64_t)(a3[1] - *a3) >> 4)
    return 0;
  if (v5 != v4)
  {
    v8 = 0;
    v9 = 0;
    v10.f64[0] = NAN;
    v10.f64[1] = NAN;
    v56 = (int8x16_t)vnegq_f64(v10);
    do
    {
      v11 = *a2;
      v58 = *(float32x4_t *)(*a3 + 16 * v8);
      LODWORD(v61.f64[0]) = v9;
      sub_239962480((uint64_t)v59, v55, (unsigned int *)&v61);
      v12 = sub_2399624A8(v59);
      if (v12 != -1)
      {
        v14 = (float32x4_t *)(v11 + 16 * v8);
        LODWORD(v13) = 0;
        do
        {
          v15 = 16 * v12;
          v16 = (float *)(*a2 + v15);
          v17 = (float *)(*a3 + v15);
          _Q0 = vcvtq_f64_f32(*(float32x2_t *)v58.f32);
          v61 = _Q0;
          v62 = v58.f32[2];
          _D2 = v14->f32[0];
          v19 = v14->f32[2];
          v20 = vmuld_lane_f64(-v19, _Q0, 1) + v14->f32[1] * v58.f32[2];
          v21 = vmlad_n_f64(-(_D2 * v58.f32[2]), v19, _Q0.f64[0]);
          __asm { FMLA            D3, D2, V0.D[1] }
          v63 = v20;
          v64 = v21;
          v65 = _D3;
          v27 = *v17;
          v28 = v17[1];
          *(double *)v60 = v27;
          *(double *)&v60[1] = v28;
          v29 = v17[2];
          v30 = *v16;
          v31 = v16[1];
          v32 = v16[2];
          v33 = v31 * v29 - v32 * v28;
          v34 = v32 * v27 - v30 * v29;
          v35 = v30 * v28 - v31 * v27;
          *(double *)&v60[2] = v29;
          *(double *)&v60[3] = v33;
          *(double *)&v60[4] = v34;
          *(double *)&v60[5] = v35;
          v36 = fmax(fabs(vmlad_n_f64(vmuld_lane_f64(v28, _Q0, 1), v27, _Q0.f64[0]) + v58.f32[2] * v29), -1.79769313e308);
          _Q0.f64[0] = fabs(vmlad_n_f64(vmuld_lane_f64(v34, _Q0, 1), v33, _Q0.f64[0]) + v58.f32[2] * v35);
          v38 = _Q0.f64[0] > v36;
          if (_Q0.f64[0] <= v36)
            _Q0.f64[0] = v36;
          v39 = fabs(v21 * v28 + v20 * v27 + _D3 * v29);
          v40 = v39 > _Q0.f64[0];
          if (v39 > _Q0.f64[0])
          {
            _Q0.f64[0] = v39;
            v38 = 0;
          }
          if (fabs(v21 * v34 + v20 * v33 + _D3 * v35) > _Q0.f64[0])
          {
            v40 = 1;
            v38 = 1;
          }
          v41 = &v61.f64[3 * v40];
          v42 = (float64x2_t *)&v60[3 * v38];
          _Q0.f64[0] = v41[2];
          v43 = *(float32x4_t *)v41;
          *(float32x2_t *)v44.f32 = vcvt_f32_f64(*(float64x2_t *)v41);
          *(float *)&v45 = _Q0.f64[0];
          v44.i64[1] = v45;
          v46 = v42[1].f64[0];
          _Q0.f64[0] = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(*(float64x2_t *)v41, *v42).f64[1]), v42->f64[0], *v41)+ _Q0.f64[0] * v46;
          v43.i64[0] = 1.0;
          v47 = *(double *)vbslq_s8(v56, (int8x16_t)v43, (int8x16_t)_Q0).i64;
          *(float32x2_t *)v43.f32 = vcvt_f32_f64(vmulq_n_f64(*v42, v47));
          *(float *)&v47 = v46 * v47;
          v43.i64[1] = LODWORD(v47);
          v57 = v13;
          v48 = vaddq_f32(vmulq_n_f32(v44, *(float *)&v13), v43);
          v49 = vmulq_f32(*v14, v48);
          v49.i32[3] = 0;
          v50 = vsubq_f32(v48, vmulq_n_f32(*v14, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v49, v49))));
          v51 = vmulq_f32(v50, v50);
          v51.i32[3] = 0;
          v52 = (float32x2_t)vpaddq_f32(v51, v51).u64[0];
          v52.f32[0] = sqrtf(vaddv_f32(v52));
          if (v52.f32[0] > 0.00000001)
            v50 = vdivq_f32(v50, (float32x4_t)vdupq_lane_s32((int32x2_t)v52, 0));
          v58 = v50;
          v12 = sub_2399624A8(v59);
          v13 = v57;
          *(float *)&v13 = *(float *)&v57 + 1.0;
        }
        while (v12 != -1);
        if (*(float *)&v13 > 0.0)
          *(float32x4_t *)(*a3 + 16 * v8) = v58;
      }
      v8 = ++v9;
    }
    while (v9 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
  }
  return 1;
}

uint64_t sub_2399F0FD8(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t *v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v33;
  int8x16_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  double v77;
  double v78;
  unsigned int v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float v83;
  double v84;
  BOOL v85;
  double v86;
  unsigned int v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  double v91;
  BOOL v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  BOOL v96;
  double v97;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  double v102;
  double v103;
  float32x4_t v104;
  float32x4_t v105;
  double v106;
  double v107;
  float32x4_t v108;
  float32x4_t v109;
  double v110;
  double v111;
  BOOL v112;
  float32x4_t v113;
  float32x4_t v114;
  double v115;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  double v121;
  double v122;
  float32x4_t v123;
  float32x4_t v124;
  double v125;
  double v126;
  float32x4_t v127;
  float32x4_t v128;
  double v129;
  double v130;
  BOOL v131;
  float32x4_t v132;
  float32x4_t v133;
  double v134;
  BOOL v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  double v141;
  double v142;
  float32x4_t v143;
  float32x4_t v144;
  double v145;
  double v146;
  float32x4_t v147;
  float32x4_t v148;
  double v149;
  double v150;
  BOOL v151;
  float32x4_t v152;
  float32x4_t v153;
  double v154;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  _QWORD *v164;
  unsigned int v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  __int128 v176;
  __int128 v177;
  unsigned int v178;
  uint64_t v179[4];

  v5 = (a2[1] - *a2) >> 4;
  v6 = *(_QWORD *)(a1 + 104);
  v164 = (_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  if (v5 != (v7 - v6) >> 2 || v5 != (uint64_t)(a3[1] - *a3) >> 4 || v5 != (uint64_t)(a4[1] - *a4) >> 4)
    return 0;
  if (fabsf(a5) <= 0.00000001)
    v9 = 0.0;
  else
    v9 = 1.0 / a5;
  if (v7 != v6)
  {
    v11 = 0;
    v12 = 0;
    __asm { FMOV            V0.4S, #-0.25 }
    v166 = _Q0;
    do
    {
      v18 = *a2;
      v19 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v20 = *v19;
      v21 = (std::__shared_weak_count *)v19[1];
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          v25 = v12;
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          v12 = v25;
        }
      }
      v26 = *(float32x4_t *)(*a3 + 16 * v11);
      v174 = *(float32x4_t *)(*a4 + 16 * v11);
      v175 = *(float32x4_t *)(*(_QWORD *)(v20 + 40) + 16 * v11);
      v27 = vmulq_f32(v26, v26);
      v27.i32[3] = 0;
      v28 = vpaddq_f32(v27, v27);
      v29 = vpaddq_f32(v28, v28);
      v173 = (float32x4_t)xmmword_239F02850;
      if (v29.f32[0] > 0.0)
        v173 = vdivq_f32(v26, vsqrtq_f32(v29));
      v165 = v12;
      v178 = v12;
      v30 = (uint64_t *)sub_239962480((uint64_t)v179, v164, &v178);
      v31 = sub_2399624A8(v30);
      if (v31 != -1)
      {
        v33 = v31;
        v34 = (int8x16_t)v173;
        v169 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v173, (int32x4_t)vextq_s8(v34, v34, 0xCuLL)), (int32x4_t)v173);
        v170 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v34, v34, 4uLL), (int32x4_t)v173);
        v167 = vmulq_f32(v173, (float32x4_t)0);
        LODWORD(v32) = 0;
        do
        {
          v36 = *a2;
          v37 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
          v38 = *v37;
          v39 = (std::__shared_weak_count *)v37[1];
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            do
              v42 = __ldaxr(v40);
            while (__stlxr(v42 - 1, v40));
            if (!v42)
            {
              v176 = v32;
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
              v32 = v176;
            }
          }
          v43 = 16 * v33;
          v44 = *(float32x4_t *)(*a3 + v43);
          v45 = *(float32x4_t *)(*a4 + v43);
          v46 = vmulq_f32(v44, v44);
          v46.i32[3] = 0;
          v47 = vpaddq_f32(v46, v46);
          v48 = vpaddq_f32(v47, v47);
          v49 = (float32x4_t)xmmword_239F02850;
          if (v48.f32[0] > 0.0)
            v49 = vdivq_f32(v44, vsqrtq_f32(v48));
          v50 = *(float32x4_t *)(v18 + 16 * v11);
          v51 = vmlsq_f32(vmulq_f32(v170, (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v50, (int32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL)), (int32x4_t)v50)), v169, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL), (int32x4_t)v50));
          v52 = *(float32x4_t *)(v36 + 16 * v33);
          v53 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL), (int32x4_t)v49), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v52, (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 0xCuLL)), (int32x4_t)v52)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v49, (int32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 0xCuLL)), (int32x4_t)v49), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL), (int32x4_t)v52));
          v54 = vmulq_f32(v175, v50);
          v54.i32[3] = 0;
          v55 = *(float32x4_t *)(*(_QWORD *)(v38 + 40) + 16 * v33);
          v56 = vmulq_f32(v50, v55);
          v56.i32[3] = 0;
          v57 = vmulq_f32(v175, v52);
          v57.i32[3] = 0;
          v58 = vmulq_f32(v52, v55);
          v58.i32[3] = 0;
          v59 = vmulq_f32(v50, v52);
          v59.i32[3] = 0;
          v59.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59));
          v60 = 1.0 / (float)((float)(1.0 - (float)(v59.f32[0] * v59.f32[0])) + 0.0001);
          v54.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v56, v56))
                     - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v54, v54));
          v56.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v57, v57))
                     - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v58, v58));
          v57.f32[0] = (float)((float)(v54.f32[0] - (float)(v59.f32[0] * v56.f32[0]))
                             + (float)(v54.f32[0] - (float)(v59.f32[0] * v56.f32[0])))
                     * v60;
          v54.f32[0] = (float)((float)(v56.f32[0] - (float)(v59.f32[0] * v54.f32[0]))
                             + (float)(v56.f32[0] - (float)(v59.f32[0] * v54.f32[0])))
                     * v60;
          v56.i64[0] = 0x3F0000003F000000;
          v56.i64[1] = 0x3F0000003F000000;
          v61 = vaddq_f32(vmulq_f32(vaddq_f32(v175, v55), v56), vmulq_f32(vaddq_f32(vmulq_n_f32(v52, v54.f32[0]), vmulq_n_f32(v50, v57.f32[0])), v166));
          v62 = vsubq_f32(v61, v174);
          v63 = vmulq_f32(v173, v62);
          v63.i32[3] = 0;
          v64 = vmulq_f32(v51, v62);
          v64.i32[3] = 0;
          v65 = vaddq_f32(vaddq_f32(v174, vmulq_n_f32(vmulq_n_f32(v173, floorf(v9 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63)))), a5)), vmulq_n_f32(vmulq_n_f32(v51, floorf(v9 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64)))), a5));
          v66 = vsubq_f32(v61, v45);
          v67 = vmulq_f32(v49, v66);
          v67.i32[3] = 0;
          v68 = vmulq_f32(v53, v66);
          v68.i32[3] = 0;
          v69 = vaddq_f32(vaddq_f32(v45, vmulq_n_f32(vmulq_n_f32(v49, floorf(v9 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v67, v67)))), a5)), vmulq_n_f32(vmulq_n_f32(v53, floorf(v9 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v68, v68)))), a5));
          v70 = vmulq_f32(v49, (float32x4_t)0);
          v71 = vmulq_f32(v53, (float32x4_t)0);
          v72 = vaddq_f32(vmulq_n_f32(vaddq_f32(v70, v71), a5), v69);
          v73 = vmulq_f32(v51, (float32x4_t)0);
          v74 = vaddq_f32(vmulq_n_f32(vaddq_f32(v167, v73), a5), v65);
          v75 = vsubq_f32(v74, v72);
          v76 = vmulq_f32(v75, v75);
          v76.i32[3] = 0;
          v77 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v76, v76)));
          v78 = 1.79769313e308;
          if (v77 >= 1.79769313e308)
          {
            v79 = -1;
          }
          else
          {
            v78 = v77;
            v79 = 0;
          }
          v80 = vaddq_f32(vmulq_n_f32(vaddq_f32(v49, v71), a5), v69);
          v81 = vsubq_f32(v74, v80);
          v82 = vmulq_f32(v81, v81);
          v82.i32[3] = 0;
          v83 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v82, v82)));
          v84 = v83;
          v85 = v78 <= v83;
          if (v78 <= v83)
            v86 = v78;
          else
            v86 = v83;
          if (v85)
            v87 = v79;
          else
            v87 = 1;
          v88 = vaddq_f32(vmulq_n_f32(vaddq_f32(v70, v53), a5), v69);
          v89 = vsubq_f32(v74, v88);
          v90 = vmulq_f32(v89, v89);
          v90.i32[3] = 0;
          v91 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v90, v90)));
          v92 = v86 <= v91;
          if (v86 > v91)
            v87 = 2;
          else
            v91 = v86;
          v93 = vaddq_f32(vmulq_n_f32(vaddq_f32(v49, v53), a5), v69);
          v94 = vsubq_f32(v74, v93);
          v95 = vmulq_f32(v94, v94);
          v95.i32[3] = 0;
          v96 = v92 && v78 <= v84;
          v97 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v95, v95)));
          if (!v96 || v91 > v97)
            v79 = 0;
          if (v91 > v97)
            v87 = 3;
          else
            v97 = v91;
          v99 = vaddq_f32(vmulq_n_f32(vaddq_f32(v173, v73), a5), v65);
          v100 = vsubq_f32(v99, v72);
          v101 = vmulq_f32(v100, v100);
          v101.i32[3] = 0;
          v102 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v101, v101)));
          if (v97 <= v102)
            v103 = v97;
          else
            v103 = v102;
          if (v97 > v102)
            v87 = 0;
          v104 = vsubq_f32(v99, v80);
          v105 = vmulq_f32(v104, v104);
          v105.i32[3] = 0;
          v106 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v105, v105)));
          if (v103 <= v106)
            v107 = v103;
          else
            v107 = v106;
          if (v103 > v106)
            v87 = 1;
          v108 = vsubq_f32(v99, v88);
          v109 = vmulq_f32(v108, v108);
          v109.i32[3] = 0;
          v110 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v109, v109)));
          if (v107 <= v110)
            v111 = v107;
          else
            v111 = v110;
          if (v107 > v110)
            v87 = 2;
          v112 = v103 <= v106 && v97 <= v102;
          v113 = vsubq_f32(v99, v93);
          v114 = vmulq_f32(v113, v113);
          v114.i32[3] = 0;
          v115 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v114, v114)));
          if (!v112 || v111 > v115 || v107 > v110)
            v79 = 1;
          if (v111 > v115)
            v87 = 3;
          else
            v115 = v111;
          v118 = vaddq_f32(vmulq_n_f32(vaddq_f32(v167, v51), a5), v65);
          v119 = vsubq_f32(v118, v72);
          v120 = vmulq_f32(v119, v119);
          v120.i32[3] = 0;
          v121 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v120, v120)));
          if (v115 <= v121)
            v122 = v115;
          else
            v122 = v121;
          if (v115 > v121)
            v87 = 0;
          v123 = vsubq_f32(v118, v80);
          v124 = vmulq_f32(v123, v123);
          v124.i32[3] = 0;
          v125 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v124, v124)));
          if (v122 <= v125)
            v126 = v122;
          else
            v126 = v125;
          v127 = vsubq_f32(v118, v88);
          v128 = vmulq_f32(v127, v127);
          v128.i32[3] = 0;
          if (v122 > v125)
            v87 = 1;
          v129 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v128, v128)));
          if (v126 <= v129)
            v130 = v126;
          else
            v130 = v129;
          if (v126 > v129)
            v87 = 2;
          v131 = v122 <= v125 && v115 <= v121;
          v132 = vsubq_f32(v118, v93);
          v133 = vmulq_f32(v132, v132);
          v133.i32[3] = 0;
          v134 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v133, v133)));
          if (!v131 || v130 > v134 || v126 > v129)
            v79 = 2;
          v137 = v130 <= v134;
          if (v130 <= v134)
            v134 = v130;
          v138 = vaddq_f32(vmulq_n_f32(vaddq_f32(v173, v51), a5), v65);
          v139 = vsubq_f32(v138, v72);
          v140 = vmulq_f32(v139, v139);
          v140.i32[3] = 0;
          if (!v137)
            v87 = 3;
          v141 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v140, v140)));
          if (v134 <= v141)
            v142 = v134;
          else
            v142 = v141;
          if (v134 > v141)
            v87 = 0;
          v143 = vsubq_f32(v138, v80);
          v144 = vmulq_f32(v143, v143);
          v144.i32[3] = 0;
          v145 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v144, v144)));
          if (v142 <= v145)
            v146 = v142;
          else
            v146 = v145;
          if (v142 > v145)
            v87 = 1;
          v147 = vsubq_f32(v138, v88);
          v148 = vmulq_f32(v147, v147);
          v148.i32[3] = 0;
          v149 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v148, v148)));
          if (v146 <= v149)
            v150 = v146;
          else
            v150 = v149;
          if (v146 > v149)
            v87 = 2;
          v151 = v142 <= v145 && v134 <= v141;
          v152 = vsubq_f32(v138, v93);
          v153 = vmulq_f32(v152, v152);
          v153.i32[3] = 0;
          v154 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v153, v153)));
          if (!v151 || v150 > v154 || v146 > v149)
            v79 = 3;
          if (v150 > v154)
            v87 = 3;
          v157 = vaddq_f32(vaddq_f32(v69, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v49, (float)(v87 & 1)), vmulq_n_f32(v53, (float)((v87 >> 1) & 1))), a5)), vmulq_n_f32(vaddq_f32(v65, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v173, (float)(v79 & 1)), vmulq_n_f32(v51, (float)((v79 >> 1) & 1))), a5)), *(float *)&v32));
          *(float *)&v32 = *(float *)&v32 + 1.0;
          v177 = v32;
          if (*(float *)&v32 > 0.00000001)
            v157 = vdivq_f32(v157, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 0));
          v35 = vmulq_f32(v50, vsubq_f32(v157, v175));
          v35.i32[3] = 0;
          v174 = vsubq_f32(v157, vmulq_n_f32(v50, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35))));
          v33 = sub_2399624A8(v179);
          v32 = v177;
        }
        while (v33 != -1);
        if (*(float *)&v177 > 0.0)
        {
          v158 = *(int32x4_t *)(v18 + 16 * v11);
          v159 = vmlsq_f32(vmulq_f32(v170, (float32x4_t)vzip2q_s32(vzip1q_s32(v158, (int32x4_t)vextq_s8((int8x16_t)v158, (int8x16_t)v158, 0xCuLL)), v158)), v169, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v158, (int8x16_t)v158, 4uLL), v158));
          v160 = vsubq_f32(v175, v174);
          v161 = vmulq_f32(v173, v160);
          v161.i32[3] = 0;
          v162 = vmulq_f32(v160, v159);
          v162.i32[3] = 0;
          *(float32x4_t *)(*a4 + 16 * v11) = vaddq_f32(vmulq_n_f32(vmulq_n_f32(v159, roundf(v9 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v162, v162)))), a5), vaddq_f32(v174, vmulq_n_f32(vmulq_n_f32(v173, roundf(v9 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v161, v161)))), a5)));
        }
      }
      v11 = v165 + 1;
      v12 = v165 + 1;
    }
    while (v11 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  }
  return 1;
}

uint64_t sub_2399F18F4(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  char **v9;
  unsigned int v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  char **v39;
  uint64_t result;
  _DWORD *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _DWORD v72[5];
  unsigned int v73;

  v2 = (_DWORD *)(a1 + 16);
  v3 = sub_239962518(*(_QWORD *)a1 + 104, (unsigned int *)(a1 + 16));
  v4 = *(_QWORD *)a1 + 104;
  v5 = (unsigned int *)sub_239962518(v4, (unsigned int *)(a1 + 16));
  v69 = sub_239962518(v4, v5);
  v6 = sub_239962518(*(_QWORD *)a1 + 104, (unsigned int *)(a1 + 16));
  v7 = *(_QWORD *)a1 + 104;
  v8 = (unsigned int *)sub_239962518(v7, (unsigned int *)(a1 + 16));
  v70 = sub_239962518(v7, v8);
  v9 = (char **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v73 = *(_DWORD *)(v3 + 12);
  sub_239962B1C((uint64_t)v72, (_QWORD *)(*(_QWORD *)a1 + 104), &v73);
  while (1)
  {
    v10 = sub_239962B44(v72);
    v71 = v10;
    if (v10 == -1)
      break;
    if (v10 != *v2)
    {
      v11 = (_DWORD *)sub_239962518(*(_QWORD *)a1 + 104, (unsigned int *)(a1 + 16));
      v12 = v71;
      if (v71 != *v11)
      {
        v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * *(unsigned int *)(*(_QWORD *)a1 + 180));
        v14 = *v13;
        v15 = (std::__shared_weak_count *)v13[1];
        if (!v15)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (((*(_QWORD *)(*(_QWORD *)(v14 + 40) + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
            goto LABEL_12;
LABEL_24:
          if (*(_DWORD *)(sub_239962518(*(_QWORD *)a1 + 104, &v71) + 16) != *(_DWORD *)(v6 + 16)
            && *(_DWORD *)(sub_239962518(*(_QWORD *)a1 + 104, &v71) + 16) != *(_DWORD *)(v70 + 16))
          {
            goto LABEL_12;
          }
        }
        else
        {
LABEL_11:
          if (((*(_QWORD *)(*(_QWORD *)(v14 + 40) + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0)
            goto LABEL_24;
LABEL_12:
          v20 = *(char **)(a1 + 112);
          v19 = *(_QWORD *)(a1 + 120);
          if ((unint64_t)v20 < v19)
          {
            *(_DWORD *)v20 = v71;
            *(_QWORD *)(a1 + 112) = v20 + 4;
          }
          else
          {
            v21 = *v9;
            v22 = v20 - *v9;
            v23 = v22 >> 2;
            v24 = (v22 >> 2) + 1;
            if (v24 >> 62)
LABEL_75:
              sub_2394189F8();
            v25 = v19 - (_QWORD)v21;
            if (v25 >> 1 > v24)
              v24 = v25 >> 1;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
              v26 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (!v26)
            {
              v27 = 0;
              v28 = (_DWORD *)(4 * v23);
              *(_DWORD *)(4 * v23) = v71;
              v29 = 4 * v23 + 4;
              if (v20 == v21)
                goto LABEL_35;
LABEL_28:
              v30 = v20 - 4 - v21;
              if (v30 < 0x2C)
                goto LABEL_79;
              if ((unint64_t)(v20 - &v27[v22]) < 0x20)
                goto LABEL_79;
              v31 = (v30 >> 2) + 1;
              v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
              v33 = &v20[-v32];
              v28 = (_DWORD *)((char *)v28 - v32);
              v34 = &v27[4 * v23 - 16];
              v35 = v20 - 16;
              v36 = v31 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                *v34 = v37;
                v34 -= 2;
                v35 -= 32;
                v36 -= 8;
              }
              while (v36);
              v20 = v33;
              if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_79:
                do
                {
                  v38 = *((_DWORD *)v20 - 1);
                  v20 -= 4;
                  *--v28 = v38;
                }
                while (v20 != v21);
              }
              v20 = *v9;
              goto LABEL_35;
            }
            if (v26 >> 62)
LABEL_76:
              sub_239418A80();
            v27 = operator new(4 * v26);
            v28 = &v27[4 * v23];
            *v28 = v71;
            v29 = (uint64_t)(v28 + 1);
            if (v20 != v21)
              goto LABEL_28;
LABEL_35:
            *(_QWORD *)(a1 + 104) = v28;
            *(_QWORD *)(a1 + 112) = v29;
            *(_QWORD *)(a1 + 120) = &v27[4 * v26];
            if (v20)
              operator delete(v20);
            *(_QWORD *)(a1 + 112) = v29;
          }
        }
      }
    }
  }
  v39 = (char **)(a1 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  v73 = *(_DWORD *)(v69 + 12);
  sub_239962B1C((uint64_t)v72, (_QWORD *)(*(_QWORD *)a1 + 104), &v73);
  v71 = -1;
  while (1)
  {
    result = sub_239962B44(v72);
    v71 = result;
    if ((_DWORD)result == -1)
      return result;
    if ((_DWORD)result != *v2)
    {
      v41 = (_DWORD *)sub_239962518(*(_QWORD *)a1 + 104, (unsigned int *)(a1 + 16));
      v42 = v71;
      if (v71 != *v41)
      {
        v43 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * *(unsigned int *)(*(_QWORD *)a1 + 180));
        v45 = *v43;
        v44 = (std::__shared_weak_count *)v43[1];
        if (!v44)
          goto LABEL_47;
        v46 = (unint64_t *)&v44->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
          if (((*(_QWORD *)(*(_QWORD *)(v45 + 40) + ((v42 >> 3) & 0x1FFFFFF8)) >> v42) & 1) != 0)
            goto LABEL_48;
LABEL_62:
          if (*(_DWORD *)(sub_239962518(*(_QWORD *)a1 + 104, &v71) + 16) != *(_DWORD *)(v6 + 16)
            && *(_DWORD *)(sub_239962518(*(_QWORD *)a1 + 104, &v71) + 16) != *(_DWORD *)(v70 + 16))
          {
            goto LABEL_48;
          }
        }
        else
        {
LABEL_47:
          if (((*(_QWORD *)(*(_QWORD *)(v45 + 40) + ((v42 >> 3) & 0x1FFFFFF8)) >> v42) & 1) == 0)
            goto LABEL_62;
LABEL_48:
          v50 = *(char **)(a1 + 136);
          v49 = *(_QWORD *)(a1 + 144);
          if ((unint64_t)v50 < v49)
          {
            *(_DWORD *)v50 = v71;
            v51 = (uint64_t)(v50 + 4);
            goto LABEL_73;
          }
          v52 = *v39;
          v53 = v50 - *v39;
          v54 = v53 >> 2;
          v55 = (v53 >> 2) + 1;
          if (v55 >> 62)
            goto LABEL_75;
          v56 = v49 - (_QWORD)v52;
          if (v56 >> 1 > v55)
            v55 = v56 >> 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            if (v57 >> 62)
              goto LABEL_76;
            v58 = operator new(4 * v57);
            v59 = &v58[4 * v54];
            *v59 = v71;
            v51 = (uint64_t)(v59 + 1);
            if (v50 != v52)
              goto LABEL_66;
LABEL_59:
            *(_QWORD *)(a1 + 128) = v59;
            *(_QWORD *)(a1 + 136) = v51;
            *(_QWORD *)(a1 + 144) = &v58[4 * v57];
            if (v50)
              goto LABEL_60;
LABEL_73:
            *(_QWORD *)(a1 + 136) = v51;
          }
          else
          {
            v58 = 0;
            v59 = (_DWORD *)(4 * v54);
            *(_DWORD *)(4 * v54) = v71;
            v51 = 4 * v54 + 4;
            if (v50 == v52)
              goto LABEL_59;
LABEL_66:
            v60 = v50 - 4 - v52;
            if (v60 < 0x2C)
              goto LABEL_80;
            if ((unint64_t)(v50 - &v58[v53]) < 0x20)
              goto LABEL_80;
            v61 = (v60 >> 2) + 1;
            v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
            v63 = &v50[-v62];
            v59 = (_DWORD *)((char *)v59 - v62);
            v64 = &v58[4 * v54 - 16];
            v65 = v50 - 16;
            v66 = v61 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v67 = *(_OWORD *)v65;
              *(v64 - 1) = *((_OWORD *)v65 - 1);
              *v64 = v67;
              v64 -= 2;
              v65 -= 32;
              v66 -= 8;
            }
            while (v66);
            v50 = v63;
            if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_80:
              do
              {
                v68 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *--v59 = v68;
              }
              while (v50 != v52);
            }
            v50 = *v39;
            *(_QWORD *)(a1 + 128) = v59;
            *(_QWORD *)(a1 + 136) = v51;
            *(_QWORD *)(a1 + 144) = &v58[4 * v57];
            if (!v50)
              goto LABEL_73;
LABEL_60:
            operator delete(v50);
            *(_QWORD *)(a1 + 136) = v51;
          }
        }
      }
    }
  }
}

void sub_2399F1ED4(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41[2];
  void *__p[2];
  __int128 v43;
  _QWORD *v44;

  *(_OWORD *)__p = 0u;
  v43 = 0u;
  *(_OWORD *)v41 = 0u;
  if (v41 == (void **)(a1 + 104))
  {
    v44 = (_QWORD *)a1;
    sub_2399F5974(0, 0, &v44, 0, 1);
    v8 = __p[1];
    v9 = (unsigned int *)v43;
    v12 = 126 - 2 * __clz((uint64_t)(v43 - (unint64_t)__p[1]) >> 2);
    v44 = (_QWORD *)a1;
    if ((void *)v43 == __p[1])
      v11 = 0;
    else
      v11 = v12;
  }
  else
  {
    sub_23942156C(v41, *(char **)(a1 + 104), *(char **)(a1 + 112), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    v6 = 126 - 2 * __clz(((char *)v41[1] - (char *)v41[0]) >> 2);
    v44 = (_QWORD *)a1;
    if (v41[1] == v41[0])
      v7 = 0;
    else
      v7 = v6;
    sub_2399F5974((uint64_t)v41[0], (unsigned int *)v41[1], &v44, v7, 1);
    sub_23942156C(&__p[1], *(char **)(a1 + 128), *(char **)(a1 + 136), (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
    v8 = __p[1];
    v9 = (unsigned int *)v43;
    v10 = 126 - 2 * __clz((uint64_t)(v43 - (unint64_t)__p[1]) >> 2);
    v44 = (_QWORD *)a1;
    if ((void *)v43 == __p[1])
      v11 = 0;
    else
      v11 = v10;
  }
  sub_2399F5974((uint64_t)v8, v9, &v44, v11, 1);
  v13 = (unsigned int *)v41[0];
  if (v41[0] != v41[1])
  {
    v14 = (unsigned int *)__p[1];
    while (1)
    {
      while (1)
      {
        if (v14 == (unsigned int *)v43)
          goto LABEL_33;
        v15 = *(_QWORD *)a1 + 104;
        v16 = (unsigned int *)sub_239962518(v15, v13);
        v17 = *(_DWORD *)(sub_239962518(v15, v16) + 12);
        v18 = *(_QWORD *)a1 + 104;
        v19 = (unsigned int *)sub_239962518(v18, v14);
        if (v17 >= *(_DWORD *)(sub_239962518(v18, v19) + 12))
          break;
        if (++v13 == v41[1])
          goto LABEL_33;
      }
      v20 = *(_QWORD *)a1 + 104;
      v21 = (unsigned int *)sub_239962518(v20, v14);
      v22 = *(_DWORD *)(sub_239962518(v20, v21) + 12);
      v23 = *(_QWORD *)a1 + 104;
      v24 = (unsigned int *)sub_239962518(v23, v13);
      if (v22 >= *(_DWORD *)(sub_239962518(v23, v24) + 12))
        break;
      ++v14;
      if (v13 == v41[1])
        goto LABEL_33;
    }
    v26 = *(char **)(a1 + 192);
    v25 = *(_QWORD *)(a1 + 200);
    if ((unint64_t)v26 >= v25)
    {
      v30 = *(char **)(a1 + 184);
      v31 = (v26 - v30) >> 4;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60)
        sub_2394189F8();
      v33 = v25 - (_QWORD)v30;
      if (v33 >> 3 > v32)
        v32 = v33 >> 3;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
        v34 = 0xFFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34 >> 60)
        sub_239418A80();
      v35 = (char *)operator new(16 * v34);
      v36 = *v13;
      v37 = *v14;
      v38 = &v35[16 * v31];
      *(_DWORD *)v38 = a2;
      *((_DWORD *)v38 + 1) = a3;
      v39 = &v35[16 * v34];
      *((_DWORD *)v38 + 2) = v36;
      *((_DWORD *)v38 + 3) = v37;
      v29 = v38 + 16;
      if (v26 == v30)
      {
        *(_QWORD *)(a1 + 184) = v38;
        *(_QWORD *)(a1 + 192) = v29;
        *(_QWORD *)(a1 + 200) = v39;
        if (!v30)
          goto LABEL_32;
      }
      else
      {
        do
        {
          v40 = v38 - 16;
          *((_OWORD *)v38 - 1) = *((_OWORD *)v26 - 1);
          v26 -= 16;
          v38 -= 16;
        }
        while (v26 != v30);
        *(_QWORD *)(a1 + 184) = v40;
        *(_QWORD *)(a1 + 192) = v29;
        *(_QWORD *)(a1 + 200) = v39;
        if (!v30)
          goto LABEL_32;
      }
      operator delete(v30);
    }
    else
    {
      v27 = *v13;
      v28 = *v14;
      *(_DWORD *)v26 = a2;
      *((_DWORD *)v26 + 1) = a3;
      *((_DWORD *)v26 + 2) = v27;
      *((_DWORD *)v26 + 3) = v28;
      v29 = v26 + 16;
    }
LABEL_32:
    *(_QWORD *)(a1 + 192) = v29;
  }
LABEL_33:
  if (__p[1])
  {
    *(void **)&v43 = __p[1];
    operator delete(__p[1]);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
}

void sub_2399F220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394FCFA8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2399F2220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394FCFA8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2399F2234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394FCFA8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2399F2248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394FCFA8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2399F225C(uint64_t a1, unsigned int *a2, double *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned int v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v51;
  double v52;
  double v53;
  float v56;
  uint64_t v57;
  double *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64_t v64;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  unsigned int v79;
  double *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  float v86;
  double *v87;
  double v88;
  double v89;

  v6 = sub_239962518(*(_QWORD *)a1 + 104, a2);
  v7 = *(_QWORD *)a1 + 104;
  v8 = (unsigned int *)sub_239962518(v7, a2);
  v9 = sub_239962518(v7, v8);
  v10 = *(unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * *a2);
  v11 = **(_QWORD **)(a1 + 72) + 80 * v10;
  v12 = **(_QWORD **)(a1 + 80);
  v13 = **(_QWORD **)(a1 + 48);
  v14 = (float64x2_t *)(v13 + 80 * *(unsigned int *)(v6 + 12));
  v15 = (float64x2_t *)(v13 + 80 * *(unsigned int *)(v9 + 12));
  _Q2 = vaddq_f64(*v14, *v15);
  _Q3 = vaddq_f64(v14[1], v15[1]);
  _Q4 = vaddq_f64(v14[2], v15[2]);
  _Q0 = vaddq_f64(v14[3], v15[3]);
  _Q1 = vaddq_f64(v14[4], v15[4]);
  *(float64x2_t *)v11 = _Q2;
  *(float64x2_t *)(v11 + 16) = _Q3;
  *(float64x2_t *)(v11 + 32) = _Q4;
  *(float64x2_t *)(v11 + 48) = _Q0;
  *(float64x2_t *)(v11 + 64) = _Q1;
  v21 = *(unsigned int *)(v6 + 12);
  v22 = **(_QWORD **)(a1 + 64);
  v23 = (1 << v21) & *(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFF8));
  v24 = *(unsigned int *)(v9 + 12);
  v25 = (1 << v24) & *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFF8));
  if (v25)
    v26 = ((1 << v21) & *(_QWORD *)(v22 + ((v21 >> 3) & 0x1FFFFFF8))) != 0;
  else
    v26 = 0;
  if (v26)
    return !v26;
  if ((v23 != 0) != (v25 != 0))
  {
    if (v23)
      v27 = *(_DWORD *)(v6 + 12);
    else
      v27 = *(_DWORD *)(v9 + 12);
    v28 = (double *)(**(_QWORD **)(a1 + 56) + 24 * v27);
    v29 = *v28;
    *a3 = *v28;
    v30 = v28[1];
    a3[1] = v30;
    v31 = v28[2];
    a3[2] = v31;
    v32 = *(double *)(v11 + 72)
        + v30 * (v30 * *(double *)(v11 + 24) + *(double *)(v11 + 8) * v29 + *(double *)(v11 + 32) * v31)
        + (v30 * *(double *)(v11 + 8) + *(double *)v11 * v29 + *(double *)(v11 + 16) * v31) * v29
        + (v30 * *(double *)(v11 + 32) + *(double *)(v11 + 16) * v29 + *(double *)(v11 + 40) * v31) * v31
        + (v30 * *(double *)(v11 + 56) + *(double *)(v11 + 48) * v29 + *(double *)(v11 + 64) * v31) * 2.0;
LABEL_10:
    v33 = v32;
    *(float *)(v12 + 4 * v10) = v33;
    return !v26;
  }
  _D6 = _Q4.f64[1];
  __asm
  {
    FMLA            D16, D6, V3.D[1]
    FMLA            D17, D6, V2.D[1]
    FMLA            D18, D4, V2.D[1]
  }
  v43 = vmlad_n_f64(vmlad_n_f64(-(_Q2.f64[1] * _D17), _D16, _Q2.f64[0]), _D18, _Q3.f64[0]);
  if (v43 == 0.0)
  {
    v61 = **(_QWORD **)(a1 + 56);
    v62 = (float64x2_t *)(v61 + 24 * v21);
    v63 = (float64x2_t *)(v61 + 24 * v24);
    v64 = (v62[1].f64[0] + v63[1].f64[0]) * 0.5;
    __asm { FMOV            V1.2D, #0.5 }
    v66 = vmulq_f64(vaddq_f64(*v62, *v63), _Q1);
    *(float64x2_t *)a3 = v66;
    a3[2] = v64;
    v68 = *(double *)v11;
    v67 = *(double *)(v11 + 8);
    v69 = *(double *)(v11 + 16);
    v70 = *(double *)(v11 + 24);
    v71 = *(double *)(v11 + 32);
    v72 = *(double *)(v11 + 40);
    v73 = vmlad_n_f64(vmuld_lane_f64(vmlad_n_f64(vmuld_lane_f64(v70, v66, 1), v67, v66.f64[0]) + v71 * v64, v66, 1), vmlad_n_f64(vmuld_lane_f64(v67, v66, 1), *(double *)v11, v66.f64[0]) + v69 * v64, v66.f64[0])+ (vmlad_n_f64(vmuld_lane_f64(v71, v66, 1), v69, v66.f64[0]) + v72 * v64) * v64;
    v74 = *(double *)(v11 + 48);
    v75 = *(double *)(v11 + 56);
    v76 = vmlad_n_f64(vmuld_lane_f64(v75, v66, 1), v74, v66.f64[0]);
    v77 = *(double *)(v11 + 64);
    v78 = *(double *)(v11 + 72);
    *(float *)&v73 = v78 + v73 + (v76 + v77 * v64) * 2.0;
    *(_DWORD *)(v12 + 4 * v10) = LODWORD(v73);
    v79 = *(_DWORD *)(v9 + 12);
    v80 = (double *)(v61 + 24 * *(unsigned int *)(v6 + 12));
    v81 = v80[1];
    v82 = v80[2];
    v83 = v78
        + v81 * (v81 * v70 + v67 * *v80 + v71 * v82)
        + (v67 * v81 + v68 * *v80 + v69 * v82) * *v80
        + (v81 * v71 + v69 * *v80 + v72 * v82) * v82
        + (v81 * v75 + v74 * *v80 + v77 * v82) * 2.0;
    v84 = *(float *)&v73;
    if (v83 < v84)
    {
      *a3 = *v80;
      a3[1] = v80[1];
      v85 = *((_QWORD *)v80 + 2);
      v86 = v83;
      *(float *)(v12 + 4 * v10) = v86;
      *((_QWORD *)a3 + 2) = v85;
      v68 = *(double *)v11;
      v67 = *(double *)(v11 + 8);
      v69 = *(double *)(v11 + 16);
      v70 = *(double *)(v11 + 24);
      v71 = *(double *)(v11 + 32);
      v72 = *(double *)(v11 + 40);
      v74 = *(double *)(v11 + 48);
      v75 = *(double *)(v11 + 56);
      v77 = *(double *)(v11 + 64);
      v78 = *(double *)(v11 + 72);
      v84 = v86;
    }
    v87 = (double *)(v61 + 24 * v79);
    v88 = v87[1];
    v89 = v87[2];
    v32 = v78
        + v88 * (v88 * v70 + v67 * *v87 + v71 * v89)
        + (v67 * v88 + v68 * *v87 + v69 * v89) * *v87
        + (v88 * v71 + v69 * *v87 + v72 * v89) * v89
        + (v88 * v75 + v74 * *v87 + v77 * v89) * 2.0;
    if (v32 >= v84)
      return !v26;
    *a3 = *v87;
    a3[1] = v87[1];
    a3[2] = v87[2];
    goto LABEL_10;
  }
  v44 = 1.0 / v43;
  v45 = (_Q4.f64[1] * -_Q2.f64[1] + _Q3.f64[0] * _Q4.f64[0]) * v44;
  v46 = (_Q2.f64[1] * _Q4.f64[0] - _Q3.f64[0] * _Q3.f64[1]) * v44;
  _Q4.f64[0] = (_Q2.f64[1] * _Q3.f64[0] - _Q2.f64[0] * _Q4.f64[0]) * v44;
  v47 = (_Q2.f64[1] * -_Q2.f64[1] + _Q2.f64[0] * _Q3.f64[1]) * v44;
  v48 = vmlad_n_f64(vmuld_lane_f64(v45, _Q0, 1), _D16 * v44, _Q0.f64[0]);
  v49 = -(v48 + v46 * _Q1.f64[0]);
  _D7 = vmlad_n_f64(v48, v46, _Q1.f64[0]);
  v51 = -(vmlad_n_f64(vmuld_lane_f64((_Q2.f64[0] * _Q4.f64[1] - _Q3.f64[0] * _Q3.f64[0]) * v44, _Q0, 1), v45, _Q0.f64[0])+ _Q4.f64[0] * _Q1.f64[0]);
  v52 = vmlad_n_f64(vmuld_lane_f64(_Q4.f64[0], _Q0, 1), v46, _Q0.f64[0]);
  v53 = -(v52 + v47 * _Q1.f64[0]);
  _Q4.f64[0] = vmlad_n_f64(v52, v47, _Q1.f64[0]);
  __asm
  {
    FMLS            D5, D7, V0.D[0]
    FMLS            D5, D4, V1.D[0]
  }
  *a3 = v49;
  a3[1] = v51;
  a3[2] = v53;
  v56 = _Q1.f64[1] + _D5;
  *(float *)(v12 + 4 * v10) = v56;
  v57 = **(_QWORD **)(a1 + 56);
  v58 = (double *)(v57 + 24 * v24);
  v59 = (double *)(v57 + 24 * v21);
  *(float *)_Q4.f64 = (v49 - *v59) / (*v58 - *v59) + -0.5;
  if (fabsf(*(float *)_Q4.f64) <= 20.0)
  {
    *(float *)_Q4.f64 = (v51 - v59[1]) / (v58[1] - v59[1]) + -0.5;
    if (fabsf(*(float *)_Q4.f64) <= 20.0)
    {
      *(float *)_Q4.f64 = (v53 - v59[2]) / (v58[2] - v59[2]) + -0.5;
      if (fabsf(*(float *)_Q4.f64) <= 20.0)
        return !v26;
    }
  }
  if (*(float *)_Q4.f64 <= 0.0)
  {
    *a3 = *v59;
    a3[1] = v59[1];
    v60 = *((_QWORD *)v59 + 2);
  }
  else
  {
    *a3 = *v58;
    a3[1] = v58[1];
    v60 = *((_QWORD *)v58 + 2);
  }
  *((_QWORD *)a3 + 2) = v60;
  return !v26;
}

uint64_t sub_2399F27A4(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  BOOL v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  double v25[3];
  unsigned int v26;
  _DWORD v27[4];

  sub_239962B1C((uint64_t)v27, (_QWORD *)(*(_QWORD *)a1 + 104), a2);
  result = sub_239962B44(v27);
  v26 = result;
  if ((_DWORD)result != -1)
  {
    v4 = result;
    v5 = (uint64_t **)(a1 + 168);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                     + 32 * *(unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * v4)
                     + 20) == -1)
      {
        v11 = (unsigned int *)sub_239962518(*(_QWORD *)a1 + 104, &v26);
        v12 = *(uint64_t **)(a1 + 168);
        v4 = *v11;
        v8 = (uint64_t **)(a1 + 168);
        v9 = (uint64_t **)(a1 + 168);
        if (v12)
        {
          while (1)
          {
            while (1)
            {
              v9 = (uint64_t **)v12;
              v13 = *((_DWORD *)v12 + 7);
              if (v4 >= v13)
                break;
              v12 = *v9;
              v8 = v9;
              if (!*v9)
                goto LABEL_21;
            }
            if (v13 >= v4)
              goto LABEL_5;
            v12 = v9[1];
            if (!v12)
            {
LABEL_20:
              v8 = v9 + 1;
              break;
            }
          }
        }
      }
      else
      {
        v7 = *v5;
        v8 = (uint64_t **)(a1 + 168);
        v9 = (uint64_t **)(a1 + 168);
        if (*v5)
        {
          while (1)
          {
            while (1)
            {
              v9 = (uint64_t **)v7;
              v10 = *((_DWORD *)v7 + 7);
              if (v4 >= v10)
                break;
              v7 = *v9;
              v8 = v9;
              if (!*v9)
                goto LABEL_21;
            }
            if (v10 >= v4)
              goto LABEL_5;
            v7 = v9[1];
            if (!v7)
              goto LABEL_20;
          }
        }
      }
LABEL_21:
      v14 = operator new(0x20uLL);
      v14[7] = v4;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v9;
      *v8 = (uint64_t *)v14;
      v15 = **(_QWORD **)(a1 + 160);
      if (v15)
      {
        *(_QWORD *)(a1 + 160) = v15;
        v6 = *v8;
      }
      else
      {
        v6 = (uint64_t *)v14;
      }
      sub_2394213B8(*(uint64_t **)(a1 + 168), v6);
      ++*(_QWORD *)(a1 + 176);
LABEL_5:
      result = sub_239962B44(v27);
      v4 = result;
      v26 = result;
    }
    while ((_DWORD)result != -1);
  }
  memset(v25, 0, sizeof(v25));
  v16 = *(unsigned int **)(a1 + 160);
  v17 = (unsigned int *)(a1 + 168);
  if (v16 != (unsigned int *)(a1 + 168))
  {
    do
    {
      result = sub_2399F225C(a1, v16 + 7, v25);
      v18 = (unsigned int *)*((_QWORD *)v16 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(unsigned int **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (unsigned int *)*((_QWORD *)v16 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v16;
          v16 = v19;
        }
        while (!v20);
      }
      v16 = v19;
    }
    while (v19 != v17);
    v21 = *(_QWORD **)(a1 + 160);
    if (v21 != (_QWORD *)v17)
    {
      do
      {
        result = *(_QWORD *)(a1 + 8);
        v22 = (unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * *((unsigned int *)v21 + 7));
        if (*(_DWORD *)(*(_QWORD *)(result + 24) + 32 * *v22 + 20) != -1)
          result = sub_2399F2A0C(result, v22);
        v23 = (unsigned int *)v21[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = *(unsigned int **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (unsigned int *)v21[2];
            v20 = *(_QWORD *)v24 == (_QWORD)v21;
            v21 = v24;
          }
          while (!v20);
        }
        v21 = v24;
      }
      while (v24 != v17);
    }
  }
  return result;
}

uint64_t sub_2399F2A0C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  v3 = *(float *)(**(_QWORD **)(a1 + 16) + 4 * v2);
  v4 = *(_QWORD *)a1;
  if (v3 <= *(float *)(*(_QWORD *)(a1 + 24) + 32 * v2))
    return sub_2399F5364(*(_QWORD *)a1, v2, *(float *)(**(_QWORD **)(a1 + 16) + 4 * v2));
  sub_2399F5364(*(_QWORD *)a1, v2, -3.4028e38);
  result = sub_2399F5504(v4);
  v6 = **(_QWORD **)(v4 + 16);
  v7 = v6 + 32 * result;
  *(float *)v7 = v3;
  *(_DWORD *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 4) = -1;
  *(_DWORD *)(v7 + 16) = -1;
  *(_BYTE *)(v7 + 28) = 0;
  v8 = *(unsigned int *)(v4 + 4);
  if ((_DWORD)v8 == -1)
  {
    *(int32x2_t *)(v7 + 8) = vdup_n_s32(result);
  }
  else
  {
    v9 = v6 + 32 * v8;
    v10 = *(unsigned int *)(v9 + 8);
    *(_DWORD *)(v6 + 32 * v10 + 12) = result;
    *(_DWORD *)(v7 + 8) = v10;
    *(_DWORD *)(v7 + 12) = v8;
    *(_DWORD *)(v9 + 8) = result;
    if (*(float *)v9 <= v3)
      goto LABEL_8;
  }
  *(_DWORD *)(v4 + 4) = result;
LABEL_8:
  ++*(_DWORD *)v4;
  return result;
}

uint64_t sub_2399F2AF4(uint64_t a1)
{
  double *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v2 = (double *)(a1 + 24);
  v3 = *(unsigned int **)(a1 + 104);
  v4 = *(unsigned int **)(a1 + 112);
  if (v3 == v4)
  {
LABEL_7:
    v16 = *(unsigned int **)(a1 + 128);
    v17 = *(unsigned int **)(a1 + 136);
    if (v16 == v17)
    {
      return 1;
    }
    else
    {
      do
      {
        v18 = *(_QWORD *)a1 + 104;
        v19 = (unsigned int *)sub_239962518(v18, v16);
        v20 = *(unsigned int *)(sub_239962518(v18, v19) + 12);
        v21 = *(_QWORD *)a1 + 104;
        v22 = sub_239962518(v21, v16);
        v23 = (unsigned int *)sub_239962518(v21, (unsigned int *)(v22 + 8));
        v20 *= 24;
        v24 = 24 * *(unsigned int *)(sub_239962518(v21, v23) + 12);
        LODWORD(v21) = sub_2399F8B1C(v2, (double *)(**(_QWORD **)(a1 + 56) + v20), (double *)(**(_QWORD **)(a1 + 56) + v24));
        v25 = *(_QWORD **)(a1 + 56);
        v26 = sub_239962518(*(_QWORD *)a1 + 104, v16);
        result = v21 ^ 1 | sub_2399F8B1C((double *)(*v25 + 24 * *(unsigned int *)(v26 + 12)), (double *)(**(_QWORD **)(a1 + 56) + v20), (double *)(**(_QWORD **)(a1 + 56) + v24));
        ++v16;
      }
      while ((_DWORD)result == 1 && v16 != v17);
    }
  }
  else
  {
    while (1)
    {
      v5 = *(_QWORD *)a1 + 104;
      v6 = (unsigned int *)sub_239962518(v5, v3);
      v7 = *(unsigned int *)(sub_239962518(v5, v6) + 12);
      v8 = *(_QWORD *)a1 + 104;
      v9 = sub_239962518(v8, v3);
      v10 = (unsigned int *)sub_239962518(v8, (unsigned int *)(v9 + 8));
      v7 *= 24;
      v11 = 24 * *(unsigned int *)(sub_239962518(v8, v10) + 12);
      LODWORD(v8) = sub_2399F8B1C(v2, (double *)(**(_QWORD **)(a1 + 56) + v7), (double *)(**(_QWORD **)(a1 + 56) + v11));
      v12 = *(_QWORD **)(a1 + 56);
      v13 = sub_239962518(*(_QWORD *)a1 + 104, v3);
      v14 = sub_2399F8B1C((double *)(*v12 + 24 * *(unsigned int *)(v13 + 12)), (double *)(**(_QWORD **)(a1 + 56) + v7), (double *)(**(_QWORD **)(a1 + 56) + v11));
      if ((_DWORD)v8)
      {
        if (!v14)
          return 0;
      }
      if (++v3 == v4)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_2399F2CFC(_QWORD **a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _DWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unsigned int v160;
  _QWORD *v161;
  _OWORD *v162;
  _OWORD *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _QWORD **v167;
  _DWORD *v168;
  _DWORD *i;
  unsigned int *v170;
  unsigned int *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  uint64_t v239;
  unsigned int *v240;
  int v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unint64_t v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  unint64_t v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;

  v271 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)a1 + 4) = *a2;
  v260 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), a2) + 12);
  v4 = (uint64_t)(*a1 + 13);
  v5 = (unsigned int *)sub_239962518(v4, a2);
  v6 = sub_239962518(v4, v5);
  v7 = *(unsigned int *)(v6 + 12);
  v259 = *(_DWORD *)(v6 + 12);
  v8 = *a1[8];
  if (((*(_QWORD *)(v8 + (((unint64_t)v260 >> 3) & 0x1FFFFFF8)) >> v260) & 1) != 0
    && ((*(_QWORD *)(v8 + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
  {
    v9 = (uint64_t)a1[1];
    v10 = (unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4));
    *(_DWORD *)(**(_QWORD **)(v9 + 16) + 4 * *v10) = 2139095039;
    sub_2399F2A0C(v9, v10);
    v11 = a1[21];
    *((_DWORD *)a1 + 38) = 0;
    *((_DWORD *)a1 + 4) = -1;
    a1[14] = a1[13];
    a1[17] = a1[16];
    sub_239421038((uint64_t)(a1 + 20), v11);
    a1[20] = a1 + 21;
    a1[21] = 0;
    a1[22] = 0;
    a1[24] = a1[23];
    return *((unsigned int *)a1 + 38);
  }
  sub_2399F225C((uint64_t)a1, a2, (double *)a1 + 3);
  sub_2399F18F4((uint64_t)a1);
  v14 = (uint64_t)*a1;
  v15 = *a2;
  v16 = (uint64_t *)((*a1)[4] + 16 * *((unsigned int *)*a1 + 45));
  v18 = *v16;
  v17 = (std::__shared_weak_count *)v16[1];
  if (!v17)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (((*(_QWORD *)(*(_QWORD *)(v18 + 40) + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) != 0)
      return sub_2399F46B0(a1, a2);
  }
  else
  {
LABEL_10:
    if (((*(_QWORD *)(*(_QWORD *)(v18 + 40) + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) != 0)
      return sub_2399F46B0(a1, a2);
  }
  v22 = *(unsigned int *)sub_239962518(v14 + 104, a2);
  v23 = (uint64_t *)(*(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 180));
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  if (!v24)
    goto LABEL_16;
  v26 = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 - 1, v26));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (((*(_QWORD *)(*(_QWORD *)(v25 + 40) + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) == 0)
    {
LABEL_17:
      v29 = sub_2399423C8((uint64_t)*a1, &v260);
      v30 = sub_2399423C8((uint64_t)*a1, &v259);
      if (v29)
      {
        v258 = *a2;
        v257 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v258);
        if (v30)
        {
          v31 = *a1;
          v32 = *a2;
          v33 = (uint64_t *)((*a1)[4] + 16 * *((unsigned int *)*a1 + 45));
          v35 = *v33;
          v34 = (std::__shared_weak_count *)v33[1];
          if (v34)
          {
            v36 = (unint64_t *)&v34->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
            do
              v38 = __ldaxr(v36);
            while (__stlxr(v38 - 1, v36));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          if (((*(_QWORD *)(*(_QWORD *)(v35 + 40) + ((v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) != 0)
          {
            LODWORD(v39) = 1;
          }
          else
          {
            v41 = *(unsigned int *)sub_239962518((uint64_t)(v31 + 13), a2);
            v42 = (uint64_t *)(v31[4] + 16 * *((unsigned int *)v31 + 45));
            v44 = *v42;
            v43 = (std::__shared_weak_count *)v42[1];
            if (v43)
            {
              v45 = (unint64_t *)&v43->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
              do
                v47 = __ldaxr(v45);
              while (__stlxr(v47 - 1, v45));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v39 = (*(_QWORD *)(*(_QWORD *)(v44 + 40) + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1;
          }
          v40 = v39 ^ 1;
        }
        else
        {
          v40 = 0;
        }
      }
      else
      {
        v258 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), a2);
        v40 = 0;
        v257 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v258);
      }
      v48 = (uint64_t)(*a1 + 13);
      v49 = (unsigned int *)sub_239962518(v48, &v258);
      HIDWORD(v256) = *(_DWORD *)(sub_239962518(v48, v49) + 12);
      LODWORD(v256) = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v258) + 12);
      sub_2399F1ED4((uint64_t)a1, v256, SHIDWORD(v256));
      if (a1[23] != a1[24])
        goto LABEL_42;
      if (v40)
      {
        v262 = __PAIR64__(v257, v258);
        v55 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262);
        v56 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262);
        v57 = (unsigned int *)(v55 + 8);
        v58 = *a1;
        v59 = *(unsigned int *)sub_239962518((uint64_t)(*a1 + 13), v57);
        v60 = (uint64_t *)(v58[4] + 16 * *((unsigned int *)v58 + 45));
        v62 = *v60;
        v61 = (std::__shared_weak_count *)v60[1];
        if (v61)
        {
          v63 = (unint64_t *)&v61->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
          do
            v65 = __ldaxr(v63);
          while (__stlxr(v65 - 1, v63));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        if (((*(_QWORD *)(*(_QWORD *)(v62 + 40) + ((v59 >> 3) & 0x1FFFFFF8)) >> v59) & 1) != 0)
        {
          v66 = (unsigned int *)(v56 + 4);
          v67 = *a1;
          v68 = *(unsigned int *)sub_239962518((uint64_t)(*a1 + 13), v66);
          v69 = (uint64_t *)(v67[4] + 16 * *((unsigned int *)v67 + 45));
          v71 = *v69;
          v70 = (std::__shared_weak_count *)v69[1];
          if (v70)
          {
            v72 = (unint64_t *)&v70->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
            do
              v74 = __ldaxr(v72);
            while (__stlxr(v74 - 1, v72));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v75 = (*(_QWORD *)(*(_QWORD *)(v71 + 40) + ((v68 >> 3) & 0x1FFFFFF8)) >> v68) & 1;
        }
        else
        {
          LODWORD(v75) = 0;
        }
        v77 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262 + 1);
        v78 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262 + 1);
        v79 = (unsigned int *)(v77 + 8);
        v80 = *a1;
        v81 = *(unsigned int *)sub_239962518((uint64_t)(*a1 + 13), v79);
        v82 = (uint64_t *)(v80[4] + 16 * *((unsigned int *)v80 + 45));
        v84 = *v82;
        v83 = (std::__shared_weak_count *)v82[1];
        if (v83)
        {
          v85 = (unint64_t *)&v83->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
          do
            v87 = __ldaxr(v85);
          while (__stlxr(v87 - 1, v85));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (((*(_QWORD *)(*(_QWORD *)(v84 + 40) + ((v81 >> 3) & 0x1FFFFFF8)) >> v81) & 1) != 0)
        {
          v88 = (unsigned int *)(v78 + 4);
          v89 = *a1;
          v90 = *(unsigned int *)sub_239962518((uint64_t)(*a1 + 13), v88);
          v91 = (uint64_t *)(v89[4] + 16 * *((unsigned int *)v89 + 45));
          v93 = *v91;
          v92 = (std::__shared_weak_count *)v91[1];
          if (v92)
          {
            v94 = (unint64_t *)&v92->__shared_owners_;
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
            do
              v96 = __ldaxr(v94);
            while (__stlxr(v96 - 1, v94));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v97 = (*(_QWORD *)(*(_QWORD *)(v93 + 40) + ((v90 >> 3) & 0x1FFFFFF8)) >> v90) & 1;
        }
        else
        {
          LODWORD(v97) = 0;
        }
        if ((v75 | v97) != 1)
          return sub_2399F4628((uint64_t)a1);
        v76 = v75 ^ v97;
        v40 = v75 ^ v97 ^ 1;
      }
      else
      {
        v76 = 0;
      }
      if (v29 || v30 || (char *)a1[14] - (char *)a1[13] != 4 || (char *)a1[17] - (char *)a1[16] != 4)
      {
        if ((sub_2399F5098((uint64_t)a1) & 1) == 0)
        {
LABEL_42:
          v50 = a1 + 2;
          v51 = (uint64_t)a1[1];
          v52 = (unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4));
          *(_DWORD *)(**(_QWORD **)(v51 + 16) + 4 * *v52) = 2139095039;
          sub_2399F2A0C(v51, v52);
          v54 = a1[21];
          v53 = a1 + 21;
          *((_DWORD *)v53 - 4) = 0;
          *v50 = -1;
          *(v53 - 7) = *(v53 - 8);
          *(v53 - 4) = *(v53 - 5);
          sub_239421038((uint64_t)(v53 - 1), v54);
          *(v53 - 1) = v53;
          *v53 = 0;
          v53[1] = 0;
          v53[3] = v53[2];
          return *((unsigned int *)v53 - 4);
        }
        v255 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v258) + 16);
        v254 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v257) + 16);
        v253 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v258) + 8);
        v252 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v253) + 8);
        v251 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v257) + 8);
        v250 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v251) + 8);
        v99 = (uint64_t)(*a1 + 13);
        v100 = (unsigned int *)sub_239962518(v99, &v253);
        v249 = *(_DWORD *)(sub_239962518(v99, v100) + 12);
        v101 = (uint64_t)(*a1 + 13);
        v102 = (unsigned int *)sub_239962518(v101, &v251);
        v103 = *(_DWORD *)(sub_239962518(v101, v102) + 12);
        v248 = v103;
        v104 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v252);
        v247 = v104;
        v105 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v251);
        v246 = v105;
        v106 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v253);
        v245 = v106;
        v107 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v250);
        v244 = v107;
        if (v40)
        {
          v262 = __PAIR64__(v253, v258);
          v263 = v252;
          v264 = v257;
          v265 = v251;
          v266 = v250;
          v267 = v104;
          v268 = v106;
          v269 = v105;
          v270 = v107;
          v108 = a1[1];
          v109 = *(unsigned int *)(*a1[11] + 4 * v258);
          if (*(_DWORD *)(v108[3] + 32 * v109 + 20) != -1)
          {
            v110 = *v108;
            sub_2399F5364(*v108, v109, -3.4028e38);
            v111 = v108[3] + 32 * sub_2399F5504(v110);
            *(_DWORD *)v111 = 0;
            *(_QWORD *)(v111 + 4) = -1;
            *(_QWORD *)(v111 + 12) = -1;
            *(_QWORD *)(v111 + 20) = -1;
            *(_BYTE *)(v111 + 28) = 0;
          }
          v112 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262);
          *(_QWORD *)v112 = -1;
          *(_QWORD *)(v112 + 8) = -1;
          *(_DWORD *)(v112 + 16) = -1;
          v113 = a1[1];
          v114 = *(unsigned int *)(*a1[11] + 4 * HIDWORD(v262));
          if (*(_DWORD *)(v113[3] + 32 * v114 + 20) != -1)
          {
            v115 = *v113;
            sub_2399F5364(*v113, v114, -3.4028e38);
            v116 = v113[3] + 32 * sub_2399F5504(v115);
            *(_DWORD *)v116 = 0;
            *(_QWORD *)(v116 + 4) = -1;
            *(_QWORD *)(v116 + 12) = -1;
            *(_QWORD *)(v116 + 20) = -1;
            *(_BYTE *)(v116 + 28) = 0;
          }
          v117 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262 + 1);
          *(_QWORD *)v117 = -1;
          *(_QWORD *)(v117 + 8) = -1;
          *(_DWORD *)(v117 + 16) = -1;
          v118 = a1[1];
          v119 = *(unsigned int *)(*a1[11] + 4 * v263);
          if (*(_DWORD *)(v118[3] + 32 * v119 + 20) != -1)
          {
            v120 = *v118;
            sub_2399F5364(*v118, v119, -3.4028e38);
            v121 = v118[3] + 32 * sub_2399F5504(v120);
            *(_DWORD *)v121 = 0;
            *(_QWORD *)(v121 + 4) = -1;
            *(_QWORD *)(v121 + 12) = -1;
            *(_QWORD *)(v121 + 20) = -1;
            *(_BYTE *)(v121 + 28) = 0;
          }
          v122 = sub_239962518((uint64_t)(*a1 + 13), &v263);
          *(_QWORD *)v122 = -1;
          *(_QWORD *)(v122 + 8) = -1;
          *(_DWORD *)(v122 + 16) = -1;
          v123 = a1[1];
          v124 = *(unsigned int *)(*a1[11] + 4 * v264);
          if (*(_DWORD *)(v123[3] + 32 * v124 + 20) != -1)
          {
            v125 = *v123;
            sub_2399F5364(*v123, v124, -3.4028e38);
            v126 = v123[3] + 32 * sub_2399F5504(v125);
            *(_DWORD *)v126 = 0;
            *(_QWORD *)(v126 + 4) = -1;
            *(_QWORD *)(v126 + 12) = -1;
            *(_QWORD *)(v126 + 20) = -1;
            *(_BYTE *)(v126 + 28) = 0;
          }
          v127 = sub_239962518((uint64_t)(*a1 + 13), &v264);
          *(_QWORD *)v127 = -1;
          *(_QWORD *)(v127 + 8) = -1;
          *(_DWORD *)(v127 + 16) = -1;
          v128 = a1[1];
          v129 = *(unsigned int *)(*a1[11] + 4 * v265);
          if (*(_DWORD *)(v128[3] + 32 * v129 + 20) != -1)
          {
            v130 = *v128;
            sub_2399F5364(*v128, v129, -3.4028e38);
            v131 = v128[3] + 32 * sub_2399F5504(v130);
            *(_DWORD *)v131 = 0;
            *(_QWORD *)(v131 + 4) = -1;
            *(_QWORD *)(v131 + 12) = -1;
            *(_QWORD *)(v131 + 20) = -1;
            *(_BYTE *)(v131 + 28) = 0;
          }
          v132 = sub_239962518((uint64_t)(*a1 + 13), &v265);
          *(_QWORD *)v132 = -1;
          *(_QWORD *)(v132 + 8) = -1;
          *(_DWORD *)(v132 + 16) = -1;
          v133 = a1[1];
          v134 = *(unsigned int *)(*a1[11] + 4 * v266);
          if (*(_DWORD *)(v133[3] + 32 * v134 + 20) != -1)
          {
            v135 = *v133;
            sub_2399F5364(*v133, v134, -3.4028e38);
            v136 = v133[3] + 32 * sub_2399F5504(v135);
            *(_DWORD *)v136 = 0;
            *(_QWORD *)(v136 + 4) = -1;
            *(_QWORD *)(v136 + 12) = -1;
            *(_QWORD *)(v136 + 20) = -1;
            *(_BYTE *)(v136 + 28) = 0;
          }
          v137 = sub_239962518((uint64_t)(*a1 + 13), &v266);
          *(_QWORD *)v137 = -1;
          *(_QWORD *)(v137 + 8) = -1;
          *(_DWORD *)(v137 + 16) = -1;
          v138 = a1[1];
          v139 = *(unsigned int *)(*a1[11] + 4 * v267);
          if (*(_DWORD *)(v138[3] + 32 * v139 + 20) != -1)
          {
            v140 = *v138;
            sub_2399F5364(*v138, v139, -3.4028e38);
            v141 = v138[3] + 32 * sub_2399F5504(v140);
            *(_DWORD *)v141 = 0;
            *(_QWORD *)(v141 + 4) = -1;
            *(_QWORD *)(v141 + 12) = -1;
            *(_QWORD *)(v141 + 20) = -1;
            *(_BYTE *)(v141 + 28) = 0;
          }
          v142 = sub_239962518((uint64_t)(*a1 + 13), &v267);
          *(_QWORD *)v142 = -1;
          *(_QWORD *)(v142 + 8) = -1;
          *(_DWORD *)(v142 + 16) = -1;
          v143 = a1[1];
          v144 = *(unsigned int *)(*a1[11] + 4 * v268);
          if (*(_DWORD *)(v143[3] + 32 * v144 + 20) != -1)
          {
            v145 = *v143;
            sub_2399F5364(*v143, v144, -3.4028e38);
            v146 = v143[3] + 32 * sub_2399F5504(v145);
            *(_DWORD *)v146 = 0;
            *(_QWORD *)(v146 + 4) = -1;
            *(_QWORD *)(v146 + 12) = -1;
            *(_QWORD *)(v146 + 20) = -1;
            *(_BYTE *)(v146 + 28) = 0;
          }
          v147 = sub_239962518((uint64_t)(*a1 + 13), &v268);
          *(_QWORD *)v147 = -1;
          *(_QWORD *)(v147 + 8) = -1;
          *(_DWORD *)(v147 + 16) = -1;
          v148 = a1[1];
          v149 = *(unsigned int *)(*a1[11] + 4 * v269);
          if (*(_DWORD *)(v148[3] + 32 * v149 + 20) != -1)
          {
            v150 = *v148;
            sub_2399F5364(*v148, v149, -3.4028e38);
            v151 = v148[3] + 32 * sub_2399F5504(v150);
            *(_DWORD *)v151 = 0;
            *(_QWORD *)(v151 + 4) = -1;
            *(_QWORD *)(v151 + 12) = -1;
            *(_QWORD *)(v151 + 20) = -1;
            *(_BYTE *)(v151 + 28) = 0;
          }
          v152 = sub_239962518((uint64_t)(*a1 + 13), &v269);
          *(_QWORD *)v152 = -1;
          *(_QWORD *)(v152 + 8) = -1;
          *(_DWORD *)(v152 + 16) = -1;
          v153 = a1[1];
          v154 = *(unsigned int *)(*a1[11] + 4 * v270);
          if (*(_DWORD *)(v153[3] + 32 * v154 + 20) != -1)
          {
            v155 = *v153;
            sub_2399F5364(*v153, v154, -3.4028e38);
            v156 = v153[3] + 32 * sub_2399F5504(v155);
            *(_DWORD *)v156 = 0;
            *(_QWORD *)(v156 + 4) = -1;
            *(_QWORD *)(v156 + 12) = -1;
            *(_QWORD *)(v156 + 20) = -1;
            *(_BYTE *)(v156 + 28) = 0;
          }
          v157 = sub_239962518((uint64_t)(*a1 + 13), &v270);
          *(_QWORD *)v157 = -1;
          *(_QWORD *)(v157 + 8) = -1;
          *(_DWORD *)(v157 + 16) = -1;
          v262 = v256;
          v263 = v249;
          v264 = v103;
          *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v262) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v262 + 1) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, &v263) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, &v264) = -1;
          v262 = __PAIR64__(v254, v255);
          *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), (unsigned int *)&v262) = -1;
          *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), (unsigned int *)&v262 + 1) = -1;
          v159 = a1[21];
          v158 = a1 + 21;
          v12 = (*((_DWORD *)v158 - 4) + 2);
          *((_DWORD *)v158 - 4) = 0;
          *((_DWORD *)v158 - 38) = -1;
          *(v158 - 7) = *(v158 - 8);
          *(v158 - 4) = *(v158 - 5);
          sub_239421038((uint64_t)(v158 - 1), v159);
          *(v158 - 1) = v158;
          *v158 = 0;
          v158[1] = 0;
          v158[3] = v158[2];
          return v12;
        }
        if (!sub_2399423C8((uint64_t)*a1, (unsigned int *)&v256 + 1) && a1[3 * v29 + 13] == a1[3 * v29 + 14])
        {
          *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), &v255) = -1;
          *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), &v254) = -1;
          v172 = sub_239962518((uint64_t)(*a1 + 13), &v258);
          *(_QWORD *)v172 = -1;
          *(_QWORD *)(v172 + 8) = -1;
          *(_DWORD *)(v172 + 16) = -1;
          v173 = sub_239962518((uint64_t)(*a1 + 13), &v253);
          *(_QWORD *)v173 = -1;
          *(_QWORD *)(v173 + 8) = -1;
          *(_DWORD *)(v173 + 16) = -1;
          v174 = sub_239962518((uint64_t)(*a1 + 13), &v252);
          *(_QWORD *)v174 = -1;
          *(_QWORD *)(v174 + 8) = -1;
          *(_DWORD *)(v174 + 16) = -1;
          v175 = sub_239962518((uint64_t)(*a1 + 13), &v257);
          *(_QWORD *)v175 = -1;
          *(_QWORD *)(v175 + 8) = -1;
          *(_DWORD *)(v175 + 16) = -1;
          v176 = sub_239962518((uint64_t)(*a1 + 13), &v251);
          *(_QWORD *)v176 = -1;
          *(_QWORD *)(v176 + 8) = -1;
          *(_DWORD *)(v176 + 16) = -1;
          v177 = sub_239962518((uint64_t)(*a1 + 13), &v250);
          *(_QWORD *)v177 = -1;
          *(_QWORD *)(v177 + 8) = -1;
          *(_DWORD *)(v177 + 16) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v256) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v256 + 1) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, &v249) = -1;
          v178 = v257;
          v179 = v252;
          v180 = v253;
          v181 = v250;
          v182 = v251;
          v183 = a1[1];
          v184 = *a1[11];
          v185 = *(unsigned int *)(v184 + 4 * v258);
          v186 = v183[3];
          if (*(_DWORD *)(v186 + 32 * v185 + 20) != -1)
          {
            v187 = *v183;
            sub_2399F5364(*v183, v185, -3.4028e38);
            v188 = v183[3] + 32 * sub_2399F5504(v187);
            *(_DWORD *)v188 = 0;
            *(_QWORD *)(v188 + 4) = -1;
            *(_QWORD *)(v188 + 12) = -1;
            *(_QWORD *)(v188 + 20) = -1;
            *(_BYTE *)(v188 + 28) = 0;
            v183 = a1[1];
            v184 = *a1[11];
            v186 = v183[3];
          }
          v189 = *(unsigned int *)(v184 + 4 * v180);
          if (*(_DWORD *)(v186 + 32 * v189 + 20) != -1)
          {
            v190 = *v183;
            sub_2399F5364(*v183, v189, -3.4028e38);
            v191 = v183[3] + 32 * sub_2399F5504(v190);
            *(_DWORD *)v191 = 0;
            *(_QWORD *)(v191 + 4) = -1;
            *(_QWORD *)(v191 + 12) = -1;
            *(_QWORD *)(v191 + 20) = -1;
            *(_BYTE *)(v191 + 28) = 0;
            v183 = a1[1];
            v184 = *a1[11];
            v186 = v183[3];
          }
          v192 = *(unsigned int *)(v184 + 4 * v179);
          if (*(_DWORD *)(v186 + 32 * v192 + 20) != -1)
          {
            v193 = *v183;
            sub_2399F5364(*v183, v192, -3.4028e38);
            v194 = v183[3] + 32 * sub_2399F5504(v193);
            *(_DWORD *)v194 = 0;
            *(_QWORD *)(v194 + 4) = -1;
            *(_QWORD *)(v194 + 12) = -1;
            *(_QWORD *)(v194 + 20) = -1;
            *(_BYTE *)(v194 + 28) = 0;
            v183 = a1[1];
            v184 = *a1[11];
            v186 = v183[3];
          }
          v195 = *(unsigned int *)(v184 + 4 * v178);
          if (*(_DWORD *)(v186 + 32 * v195 + 20) != -1)
          {
            v196 = *v183;
            sub_2399F5364(*v183, v195, -3.4028e38);
            v197 = v183[3] + 32 * sub_2399F5504(v196);
            *(_DWORD *)v197 = 0;
            *(_QWORD *)(v197 + 4) = -1;
            *(_QWORD *)(v197 + 12) = -1;
            *(_QWORD *)(v197 + 20) = -1;
            *(_BYTE *)(v197 + 28) = 0;
            v183 = a1[1];
            v184 = *a1[11];
            v186 = v183[3];
          }
          v198 = *(unsigned int *)(v184 + 4 * v182);
          if (*(_DWORD *)(v186 + 32 * v198 + 20) != -1)
          {
            v199 = *v183;
            sub_2399F5364(*v183, v198, -3.4028e38);
            v200 = v183[3] + 32 * sub_2399F5504(v199);
            *(_DWORD *)v200 = 0;
            *(_QWORD *)(v200 + 4) = -1;
            *(_QWORD *)(v200 + 12) = -1;
            *(_QWORD *)(v200 + 20) = -1;
            *(_BYTE *)(v200 + 28) = 0;
            v183 = a1[1];
            v184 = *a1[11];
            v186 = v183[3];
          }
          v201 = *(unsigned int *)(v184 + 4 * v181);
          if (*(_DWORD *)(v186 + 32 * v201 + 20) != -1)
          {
            v202 = *v183;
            sub_2399F5364(*v183, v201, -3.4028e38);
            v203 = v183[3] + 32 * sub_2399F5504(v202);
            *(_DWORD *)v203 = 0;
            *(_QWORD *)(v203 + 4) = -1;
            *(_QWORD *)(v203 + 12) = -1;
            *(_QWORD *)(v203 + 20) = -1;
            *(_BYTE *)(v203 + 28) = 0;
          }
          *((_DWORD *)a1 + 38) += 2;
          return sub_2399F5254((uint64_t)a1);
        }
        else if ((sub_2399F2AF4((uint64_t)a1) & 1) != 0)
        {
          v160 = v256;
          v161 = (_QWORD *)(*a1[7] + 24 * v256);
          *v161 = a1[3];
          v161[1] = a1[4];
          v161[2] = a1[5];
          v162 = (_OWORD *)(*a1[9] + 80 * *(unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4)));
          v163 = (_OWORD *)(*a1[6] + 80 * v160);
          *v163 = *v162;
          v164 = v162[1];
          v165 = v162[2];
          v166 = v162[4];
          v163[3] = v162[3];
          v163[4] = v166;
          v163[1] = v164;
          v163[2] = v165;
          sub_2399615C0(*a1, (unsigned int *)&v256, (unsigned int *)&v256 + 1);
          sub_23996256C((uint64_t)(*a1 + 13), &v247, &v245);
          sub_23996256C((uint64_t)(*a1 + 13), &v246, &v244);
          v167 = &a1[3 * v29];
          v168 = v167[13];
          for (i = v167[14]; v168 != i; ++v168)
            sub_2399625C8(*a1 + 13, v168, &v256);
          sub_2399625F4(*a1 + 13, &v249, &v245);
          sub_2399625F4(*a1 + 13, &v248, &v246);
          sub_2399625F4(*a1 + 13, &v256, &v247);
          sub_2399F27A4((uint64_t)a1, (unsigned int *)&v256);
          if ((v76 & 1) != 0)
          {
            if (sub_2399640F8((uint64_t)*a1, &v247) && (sub_2399640F8((uint64_t)*a1, &v245) & 1) != 0)
            {
              v170 = &v245;
              v171 = &v247;
            }
            else
            {
              v170 = &v246;
              v171 = &v244;
            }
            v204 = *v170;
            LODWORD(v262) = *v171;
            HIDWORD(v262) = v204;
            v243 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262 + 1) + 12);
            v242 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262) + 4);
            v241 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v262 + 1) + 8);
            sub_23996253C((uint64_t)(*a1 + 13), &v242, &v241);
            sub_2399625F4(*a1 + 13, &v256, &v241);
            v261 = v262;
            v205 = a1[1];
            v206 = *(unsigned int *)(*a1[11] + 4 * v262);
            if (*(_DWORD *)(v205[3] + 32 * v206 + 20) != -1)
            {
              v207 = *v205;
              sub_2399F5364(*v205, v206, -3.4028e38);
              v208 = v205[3] + 32 * sub_2399F5504(v207);
              *(_DWORD *)v208 = 0;
              *(_QWORD *)(v208 + 4) = -1;
              *(_QWORD *)(v208 + 12) = -1;
              *(_QWORD *)(v208 + 20) = -1;
              *(_BYTE *)(v208 + 28) = 0;
            }
            v209 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v261);
            *(_QWORD *)v209 = -1;
            *(_QWORD *)(v209 + 8) = -1;
            *(_DWORD *)(v209 + 16) = -1;
            v210 = a1[1];
            v211 = *(unsigned int *)(*a1[11] + 4 * HIDWORD(v261));
            if (*(_DWORD *)(v210[3] + 32 * v211 + 20) != -1)
            {
              v212 = *v210;
              sub_2399F5364(*v210, v211, -3.4028e38);
              v213 = v210[3] + 32 * sub_2399F5504(v212);
              *(_DWORD *)v213 = 0;
              *(_QWORD *)(v213 + 4) = -1;
              *(_QWORD *)(v213 + 12) = -1;
              *(_QWORD *)(v213 + 20) = -1;
              *(_BYTE *)(v213 + 28) = 0;
            }
            v214 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v261 + 1);
            *(_QWORD *)v214 = -1;
            *(_QWORD *)(v214 + 8) = -1;
            *(_DWORD *)(v214 + 16) = -1;
            *(_DWORD *)sub_239962508(*a1 + 13, &v243) = -1;
          }
          v215 = v253;
          v216 = v250;
          v217 = a1[1];
          v218 = *a1[11];
          v219 = *(unsigned int *)(v218 + 4 * v258);
          v220 = v217[3];
          if (*(_DWORD *)(v220 + 32 * v219 + 20) != -1)
          {
            v221 = *v217;
            sub_2399F5364(*v217, v219, -3.4028e38);
            v222 = v217[3] + 32 * sub_2399F5504(v221);
            *(_DWORD *)v222 = 0;
            *(_QWORD *)(v222 + 4) = -1;
            *(_QWORD *)(v222 + 12) = -1;
            *(_QWORD *)(v222 + 20) = -1;
            *(_BYTE *)(v222 + 28) = 0;
            v217 = a1[1];
            v218 = *a1[11];
            v220 = v217[3];
          }
          v223 = *(unsigned int *)(v218 + 4 * v215);
          if (*(_DWORD *)(v220 + 32 * v223 + 20) != -1)
          {
            v224 = *v217;
            sub_2399F5364(*v217, v223, -3.4028e38);
            v225 = v217[3] + 32 * sub_2399F5504(v224);
            *(_DWORD *)v225 = 0;
            *(_QWORD *)(v225 + 4) = -1;
            *(_QWORD *)(v225 + 12) = -1;
            *(_QWORD *)(v225 + 20) = -1;
            *(_BYTE *)(v225 + 28) = 0;
            v217 = a1[1];
            v218 = *a1[11];
            v220 = v217[3];
          }
          v226 = *(unsigned int *)(v218 + 4 * v216);
          if (*(_DWORD *)(v220 + 32 * v226 + 20) != -1)
          {
            v227 = *v217;
            sub_2399F5364(*v217, v226, -3.4028e38);
            v228 = v217[3] + 32 * sub_2399F5504(v227);
            *(_DWORD *)v228 = 0;
            *(_QWORD *)(v228 + 4) = -1;
            *(_QWORD *)(v228 + 12) = -1;
            *(_QWORD *)(v228 + 20) = -1;
            *(_BYTE *)(v228 + 28) = 0;
          }
          *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), &v255) = -1;
          *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), &v254) = -1;
          v229 = sub_239962518((uint64_t)(*a1 + 13), &v258);
          *(_QWORD *)v229 = -1;
          *(_QWORD *)(v229 + 8) = -1;
          *(_DWORD *)(v229 + 16) = -1;
          v230 = sub_239962518((uint64_t)(*a1 + 13), &v253);
          *(_QWORD *)v230 = -1;
          *(_QWORD *)(v230 + 8) = -1;
          *(_DWORD *)(v230 + 16) = -1;
          v231 = sub_239962518((uint64_t)(*a1 + 13), &v252);
          *(_QWORD *)v231 = -1;
          *(_QWORD *)(v231 + 8) = -1;
          *(_DWORD *)(v231 + 16) = -1;
          v232 = sub_239962518((uint64_t)(*a1 + 13), &v257);
          *(_QWORD *)v232 = -1;
          *(_QWORD *)(v232 + 8) = -1;
          *(_DWORD *)(v232 + 16) = -1;
          v233 = sub_239962518((uint64_t)(*a1 + 13), &v251);
          *(_QWORD *)v233 = -1;
          *(_QWORD *)(v233 + 8) = -1;
          *(_DWORD *)(v233 + 16) = -1;
          v234 = sub_239962518((uint64_t)(*a1 + 13), &v250);
          *(_QWORD *)v234 = -1;
          *(_QWORD *)(v234 + 8) = -1;
          *(_DWORD *)(v234 + 16) = -1;
          *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v256 + 1) = -1;
          v235 = *a1[11];
          *(_DWORD *)(v235 + 4 * v245) = *(_DWORD *)(v235 + 4 * v247);
          *(_DWORD *)(v235 + 4 * v244) = *(_DWORD *)(v235 + 4 * v246);
          v236 = *a1[12];
          *(_DWORD *)(v236 + 4 * *(unsigned int *)(v235 + 4 * v247)) = v247;
          *(_DWORD *)(v236 + 4 * *(unsigned int *)(v235 + 4 * v246)) = v246;
          v237 = (uint64_t)a1[1];
          v238 = (unsigned int *)(v235 + 4 * v247);
          v239 = *(_QWORD *)(v237 + 24);
          if (*(_DWORD *)(v239 + 32 * *v238 + 20) == -1)
          {
            sub_2399F52B0(v237, v238);
            v237 = (uint64_t)a1[1];
            v235 = *a1[11];
            v239 = *(_QWORD *)(v237 + 24);
          }
          v240 = (unsigned int *)(v235 + 4 * v246);
          if (*(_DWORD *)(v239 + 32 * *v240 + 20) == -1)
            sub_2399F52B0(v237, v240);
          *((_DWORD *)a1 + 38) += 2;
          return sub_2399F5254((uint64_t)a1);
        }
        else
        {
          return sub_2399F4628((uint64_t)a1);
        }
      }
      return sub_2399F4628((uint64_t)a1);
    }
  }
  else
  {
LABEL_16:
    if (((*(_QWORD *)(*(_QWORD *)(v25 + 40) + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) == 0)
      goto LABEL_17;
  }
  return sub_2399F46B0(a1, a2);
}

uint64_t sub_2399F4628(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * *(unsigned int *)(a1 + 16));
  *(_DWORD *)(**(_QWORD **)(v2 + 16) + 4 * *v3) = 2139095039;
  sub_2399F2A0C(v2, v3);
  v4 = *(_QWORD **)(a1 + 168);
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  sub_239421038(a1 + 160, v4);
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  return *(unsigned int *)(a1 + 152);
}

uint64_t sub_2399F46B0(_QWORD **a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD **v65;
  _DWORD *v66;
  _DWORD *i;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  _QWORD *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;

  v4 = *a2;
  v5 = (uint64_t *)((*a1)[4] + 16 * *((unsigned int *)*a1 + 45));
  v7 = *v5;
  v6 = (std::__shared_weak_count *)v5[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = (unsigned int *)*a1;
  if (((*(_QWORD *)(*(_QWORD *)(v7 + 40) + ((v4 >> 3) & 0x1FFFFFF8)) >> v4) & 1) != 0)
  {
    v12 = (unsigned int *)sub_239962518((uint64_t)(v11 + 26), a2);
    v11 = (unsigned int *)*a1;
  }
  else
  {
    v12 = a2;
  }
  v106 = *v12;
  v13 = *a2;
  v14 = (uint64_t *)(*((_QWORD *)v11 + 4) + 16 * v11[45]);
  v16 = *v14;
  v15 = (std::__shared_weak_count *)v14[1];
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + ((v13 >> 3) & 0x1FFFFFF8));
  v105 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v106);
  HIDWORD(v104) = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v105) + 4);
  LODWORD(v104) = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v105) + 8);
  v103 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v106) + 8);
  v102 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v106) + 4);
  v101 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v102);
  v21 = v101;
  v100 = *(_DWORD *)sub_239962518((uint64_t)(*a1 + 13), &v103);
  v22 = v100;
  v99 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v106) + 16);
  v98 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v106) + 12);
  v23 = (uint64_t)(*a1 + 13);
  v24 = (unsigned int *)sub_239962518(v23, &v106);
  v97 = *(_DWORD *)(sub_239962518(v23, v24) + 12);
  v96 = *(_DWORD *)(sub_239962518((uint64_t)(*a1 + 13), &v102) + 12);
  if (v104 == __PAIR64__(v100, v101))
  {
    v25 = v105;
    v26 = v102;
    v27 = v103;
    v28 = a1[1];
    v29 = *a1[11];
    v30 = *(unsigned int *)(v29 + 4 * v106);
    v31 = v28[3];
    if (*(_DWORD *)(v31 + 32 * v30 + 20) != -1)
    {
      v32 = *v28;
      sub_2399F5364(*v28, v30, -3.4028e38);
      v33 = v28[3] + 32 * sub_2399F5504(v32);
      *(_DWORD *)v33 = 0;
      *(_QWORD *)(v33 + 4) = -1;
      *(_QWORD *)(v33 + 12) = -1;
      *(_QWORD *)(v33 + 20) = -1;
      *(_BYTE *)(v33 + 28) = 0;
      v28 = a1[1];
      v29 = *a1[11];
      v31 = v28[3];
    }
    v34 = *(unsigned int *)(v29 + 4 * v27);
    if (*(_DWORD *)(v31 + 32 * v34 + 20) != -1)
    {
      v35 = *v28;
      sub_2399F5364(*v28, v34, -3.4028e38);
      v36 = v28[3] + 32 * sub_2399F5504(v35);
      *(_DWORD *)v36 = 0;
      *(_QWORD *)(v36 + 4) = -1;
      *(_QWORD *)(v36 + 12) = -1;
      *(_QWORD *)(v36 + 20) = -1;
      *(_BYTE *)(v36 + 28) = 0;
      v28 = a1[1];
      v29 = *a1[11];
      v31 = v28[3];
    }
    v37 = *(unsigned int *)(v29 + 4 * v26);
    if (*(_DWORD *)(v31 + 32 * v37 + 20) != -1)
    {
      v38 = *v28;
      sub_2399F5364(*v28, v37, -3.4028e38);
      v39 = v28[3] + 32 * sub_2399F5504(v38);
      *(_DWORD *)v39 = 0;
      *(_QWORD *)(v39 + 4) = -1;
      *(_QWORD *)(v39 + 12) = -1;
      *(_QWORD *)(v39 + 20) = -1;
      *(_BYTE *)(v39 + 28) = 0;
      v28 = a1[1];
      v29 = *a1[11];
      v31 = v28[3];
    }
    v40 = *(unsigned int *)(v29 + 4 * v22);
    if (*(_DWORD *)(v31 + 32 * v40 + 20) != -1)
    {
      v41 = *v28;
      sub_2399F5364(*v28, v40, -3.4028e38);
      v42 = v28[3] + 32 * sub_2399F5504(v41);
      *(_DWORD *)v42 = 0;
      *(_QWORD *)(v42 + 4) = -1;
      *(_QWORD *)(v42 + 12) = -1;
      *(_QWORD *)(v42 + 20) = -1;
      *(_BYTE *)(v42 + 28) = 0;
      v28 = a1[1];
      v29 = *a1[11];
      v31 = v28[3];
    }
    v43 = *(unsigned int *)(v29 + 4 * v25);
    if (*(_DWORD *)(v31 + 32 * v43 + 20) != -1)
    {
      v44 = *v28;
      sub_2399F5364(*v28, v43, -3.4028e38);
      v45 = v28[3] + 32 * sub_2399F5504(v44);
      *(_DWORD *)v45 = 0;
      *(_QWORD *)(v45 + 4) = -1;
      *(_QWORD *)(v45 + 12) = -1;
      *(_QWORD *)(v45 + 20) = -1;
      *(_BYTE *)(v45 + 28) = 0;
      v28 = a1[1];
      v29 = *a1[11];
      v31 = v28[3];
    }
    v46 = *(unsigned int *)(v29 + 4 * v21);
    if (*(_DWORD *)(v31 + 32 * v46 + 20) != -1)
    {
      v47 = *v28;
      sub_2399F5364(*v28, v46, -3.4028e38);
      v48 = v28[3] + 32 * sub_2399F5504(v47);
      *(_DWORD *)v48 = 0;
      *(_QWORD *)(v48 + 20) = -1;
      *(_QWORD *)(v48 + 12) = -1;
      *(_QWORD *)(v48 + 4) = -1;
      *(_BYTE *)(v48 + 28) = 0;
    }
    *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), &v99) = -1;
    v49 = sub_239962518((uint64_t)(*a1 + 13), &v106);
    *(_QWORD *)v49 = -1;
    *(_QWORD *)(v49 + 8) = -1;
    *(_DWORD *)(v49 + 16) = -1;
    v50 = sub_239962518((uint64_t)(*a1 + 13), &v103);
    *(_QWORD *)v50 = -1;
    *(_QWORD *)(v50 + 8) = -1;
    *(_DWORD *)(v50 + 16) = -1;
    v51 = sub_239962518((uint64_t)(*a1 + 13), &v102);
    *(_QWORD *)v51 = -1;
    *(_QWORD *)(v51 + 8) = -1;
    *(_DWORD *)(v51 + 16) = -1;
    v52 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v104 + 1);
    *(_QWORD *)v52 = -1;
    *(_QWORD *)(v52 + 8) = -1;
    *(_DWORD *)(v52 + 16) = -1;
    v53 = sub_239962518((uint64_t)(*a1 + 13), &v105);
    *(_QWORD *)v53 = -1;
    *(_QWORD *)(v53 + 8) = -1;
    *(_DWORD *)(v53 + 16) = -1;
    v54 = sub_239962518((uint64_t)(*a1 + 13), (unsigned int *)&v104);
    *(_QWORD *)v54 = -1;
    *(_QWORD *)(v54 + 8) = -1;
    *(_DWORD *)(v54 + 16) = -1;
    *(_DWORD *)sub_239962508(*a1 + 13, &v96) = -1;
    *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v98) = -1;
    goto LABEL_30;
  }
  sub_2399F1ED4((uint64_t)a1, v98, v97);
  if (a1[23] != a1[24] || (sub_2399F5098((uint64_t)a1) & 1) == 0 || (sub_2399F2AF4((uint64_t)a1) & 1) == 0)
  {
    v88 = (uint64_t)a1[1];
    v89 = (unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4));
    *(_DWORD *)(**(_QWORD **)(v88 + 16) + 4 * *v89) = 2139095039;
    sub_2399F2A0C(v88, v89);
    v90 = a1[21];
    *((_DWORD *)a1 + 38) = 0;
    *((_DWORD *)a1 + 4) = -1;
    a1[14] = a1[13];
    a1[17] = a1[16];
    sub_239421038((uint64_t)(a1 + 20), v90);
    a1[20] = a1 + 21;
    a1[21] = 0;
    a1[22] = 0;
    a1[24] = a1[23];
    return *((unsigned int *)a1 + 38);
  }
  v58 = v98;
  v59 = (_QWORD *)(*a1[7] + 24 * v98);
  *v59 = a1[3];
  v59[1] = a1[4];
  v59[2] = a1[5];
  v60 = (_OWORD *)(*a1[9] + 80 * *(unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4)));
  v61 = (_OWORD *)(*a1[6] + 80 * v58);
  *v61 = *v60;
  v62 = v60[1];
  v63 = v60[2];
  v64 = v60[4];
  v61[3] = v60[3];
  v61[4] = v64;
  v61[1] = v62;
  v61[2] = v63;
  sub_2399615C0(*a1, (unsigned int *)&v98, (unsigned int *)&v97);
  sub_23996253C((uint64_t)(*a1 + 13), (_DWORD *)&v104 + 1, &v104);
  sub_23996256C((uint64_t)(*a1 + 13), &v101, &v100);
  v65 = &a1[3 * (((unint64_t)~v20 >> (v13 & 0x3F)) & 1)];
  v66 = v65[13];
  for (i = v65[14]; v66 != i; ++v66)
    sub_2399625C8(*a1 + 13, v66, &v98);
  sub_2399625F4(*a1 + 13, &v96, &v100);
  sub_2399625F4(*a1 + 13, &v98, &v101);
  v68 = v103;
  v69 = a1[1];
  v70 = *a1[11];
  v71 = *(unsigned int *)(v70 + 4 * v106);
  v72 = v69[3];
  if (*(_DWORD *)(v72 + 32 * v71 + 20) != -1)
  {
    v73 = *v69;
    sub_2399F5364(*v69, v71, -3.4028e38);
    v74 = v69[3] + 32 * sub_2399F5504(v73);
    *(_DWORD *)v74 = 0;
    *(_QWORD *)(v74 + 4) = -1;
    *(_QWORD *)(v74 + 12) = -1;
    *(_QWORD *)(v74 + 20) = -1;
    *(_BYTE *)(v74 + 28) = 0;
    v69 = a1[1];
    v70 = *a1[11];
    v72 = v69[3];
  }
  v75 = *(unsigned int *)(v70 + 4 * v68);
  if (*(_DWORD *)(v72 + 32 * v75 + 20) != -1)
  {
    v76 = *v69;
    sub_2399F5364(*v69, v75, -3.4028e38);
    v77 = v69[3] + 32 * sub_2399F5504(v76);
    *(_DWORD *)v77 = 0;
    *(_QWORD *)(v77 + 4) = -1;
    *(_QWORD *)(v77 + 12) = -1;
    *(_QWORD *)(v77 + 20) = -1;
    *(_BYTE *)(v77 + 28) = 0;
    v70 = *a1[11];
    v69 = a1[1];
    v72 = v69[3];
  }
  *(_DWORD *)(v70 + 4 * v100) = *(_DWORD *)(v70 + 4 * v101);
  *(_DWORD *)(*a1[12] + 4 * *(unsigned int *)(v70 + 4 * v101)) = v101;
  v78 = v101;
  v79 = *(unsigned int *)(v70 + 4 * v101);
  v80 = v72 + 32 * v79;
  if (*(_DWORD *)(v80 + 20) == -1)
  {
    *(_DWORD *)v80 = *(_DWORD *)(*(_QWORD *)v69[2] + 4 * v79);
    *(_QWORD *)(v80 + 12) = -1;
    *(_QWORD *)(v80 + 4) = -1;
    *(_DWORD *)(v80 + 20) = v79;
    *(_DWORD *)(v80 + 24) = -1;
    *(_BYTE *)(v80 + 28) = 0;
    v81 = (_DWORD *)*v69;
    v82 = *(unsigned int *)(v70 + 4 * v78);
    v83 = **(_QWORD **)(*v69 + 16);
    v84 = v83 + 32 * v82;
    *(_DWORD *)(v84 + 24) = 0;
    *(_DWORD *)(v84 + 4) = -1;
    *(_DWORD *)(v84 + 16) = -1;
    *(_BYTE *)(v84 + 28) = 0;
    v85 = v81[1];
    if ((_DWORD)v85 == -1)
    {
      *(int32x2_t *)(v84 + 8) = vdup_n_s32(v82);
    }
    else
    {
      v86 = v83 + 32 * v85;
      v87 = *(unsigned int *)(v86 + 8);
      *(_DWORD *)(v83 + 32 * v87 + 12) = v82;
      *(_DWORD *)(v84 + 8) = v87;
      *(_DWORD *)(v84 + 12) = v85;
      *(_DWORD *)(v86 + 8) = v82;
      if (*(float *)v84 >= *(float *)v86)
        goto LABEL_48;
    }
    v81[1] = v82;
LABEL_48:
    ++*v81;
  }
  sub_2399F27A4((uint64_t)a1, (unsigned int *)&v98);
  *(_DWORD *)sub_23996252C((uint64_t)(*a1 + 13), &v99) = -1;
  v92 = sub_239962518((uint64_t)(*a1 + 13), &v106);
  *(_QWORD *)v92 = -1;
  *(_QWORD *)(v92 + 8) = -1;
  *(_DWORD *)(v92 + 16) = -1;
  v93 = sub_239962518((uint64_t)(*a1 + 13), &v103);
  *(_QWORD *)v93 = -1;
  *(_QWORD *)(v93 + 8) = -1;
  *(_DWORD *)(v93 + 16) = -1;
  v94 = sub_239962518((uint64_t)(*a1 + 13), &v102);
  *(_QWORD *)v94 = -1;
  *(_QWORD *)(v94 + 8) = -1;
  *(_DWORD *)(v94 + 16) = -1;
  v95 = sub_239962518((uint64_t)(*a1 + 13), &v105);
  *(_QWORD *)v95 = -1;
  *(_QWORD *)(v95 + 8) = -1;
  *(_DWORD *)(v95 + 16) = -1;
LABEL_30:
  *(_DWORD *)sub_239962508(*a1 + 13, (unsigned int *)&v97) = -1;
  v56 = a1[21];
  v55 = a1 + 21;
  v57 = (*((_DWORD *)v55 - 4) + 1);
  *((_DWORD *)v55 - 4) = 0;
  *((_DWORD *)v55 - 38) = -1;
  *(v55 - 7) = *(v55 - 8);
  *(v55 - 4) = *(v55 - 5);
  sub_239421038((uint64_t)(v55 - 1), v56);
  *(v55 - 1) = v55;
  *v55 = 0;
  v55[1] = 0;
  v55[3] = v55[2];
  return v57;
}

uint64_t sub_2399F5098(uint64_t a1)
{
  double *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  _BOOL4 v23;

  v2 = (double *)(a1 + 24);
  v3 = *(unsigned int **)(a1 + 104);
  v4 = *(unsigned int **)(a1 + 112);
  if (v3 == v4)
  {
LABEL_4:
    v13 = *(unsigned int **)(a1 + 128);
    v14 = *(unsigned int **)(a1 + 136);
    if (v13 == v14)
    {
      return 1;
    }
    else
    {
      do
      {
        v15 = *(_DWORD *)(sub_239962518(*(_QWORD *)a1 + 104, v13) + 12);
        v16 = *(_QWORD *)a1 + 104;
        v17 = (unsigned int *)sub_239962518(v16, v13);
        v18 = *(_DWORD *)(sub_239962518(v16, v17) + 12);
        v19 = *(_QWORD *)a1 + 104;
        v20 = sub_239962518(v19, v13);
        v21 = (unsigned int *)sub_239962518(v19, (unsigned int *)(v20 + 8));
        v22 = sub_239962518(v19, v21);
        v23 = sub_2399F8A18((double *)(**(_QWORD **)(a1 + 56) + 24 * v15), (double *)(**(_QWORD **)(a1 + 56) + 24 * v18), (double *)(**(_QWORD **)(a1 + 56) + 24 * *(unsigned int *)(v22 + 12)), v2);
        if (v23)
          break;
        ++v13;
      }
      while (v13 != v14);
      return !v23;
    }
  }
  else
  {
    while (1)
    {
      v5 = *(_DWORD *)(sub_239962518(*(_QWORD *)a1 + 104, v3) + 12);
      v6 = *(_QWORD *)a1 + 104;
      v7 = (unsigned int *)sub_239962518(v6, v3);
      v8 = *(_DWORD *)(sub_239962518(v6, v7) + 12);
      v9 = *(_QWORD *)a1 + 104;
      v10 = sub_239962518(v9, v3);
      v11 = (unsigned int *)sub_239962518(v9, (unsigned int *)(v10 + 8));
      v12 = sub_239962518(v9, v11);
      if (sub_2399F8A18((double *)(**(_QWORD **)(a1 + 56) + 24 * v5), (double *)(**(_QWORD **)(a1 + 56) + 24 * v8), (double *)(**(_QWORD **)(a1 + 56) + 24 * *(unsigned int *)(v12 + 12)), v2))
      {
        return 0;
      }
      if (++v3 == v4)
        goto LABEL_4;
    }
  }
}

uint64_t sub_2399F5254(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(a1 + 168);
  v1 = *(_QWORD **)(a1 + 168);
  v3 = *(unsigned int *)(a1 + 152);
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  sub_239421038(a1 + 160, v1);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  v2[3] = v2[2];
  return v3;
}

uint64_t sub_2399F52B0(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  v3 = *(_QWORD *)(result + 24) + 32 * v2;
  *(_DWORD *)v3 = *(_DWORD *)(**(_QWORD **)(result + 16) + 4 * v2);
  *(_QWORD *)(v3 + 12) = -1;
  *(_QWORD *)(v3 + 4) = -1;
  *(_DWORD *)(v3 + 20) = v2;
  *(_DWORD *)(v3 + 24) = -1;
  *(_BYTE *)(v3 + 28) = 0;
  v4 = *(_DWORD **)result;
  v5 = *a2;
  v6 = **(_QWORD **)(*(_QWORD *)result + 16);
  v7 = v6 + 32 * v5;
  *(_DWORD *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 4) = -1;
  *(_DWORD *)(v7 + 16) = -1;
  *(_BYTE *)(v7 + 28) = 0;
  v8 = v4[1];
  if ((_DWORD)v8 == -1)
  {
    *(int32x2_t *)(v7 + 8) = vdup_n_s32(v5);
  }
  else
  {
    v9 = v6 + 32 * v8;
    v10 = *(unsigned int *)(v9 + 8);
    *(_DWORD *)(v6 + 32 * v10 + 12) = v5;
    *(_DWORD *)(v7 + 8) = v10;
    *(_DWORD *)(v7 + 12) = v8;
    *(_DWORD *)(v9 + 8) = v5;
    if (*(float *)v7 >= *(float *)v9)
    {
      ++*v4;
      return result;
    }
  }
  v4[1] = v5;
  ++*v4;
  return result;
}

uint64_t sub_2399F5364(uint64_t result, unsigned int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;

  v3 = **(_QWORD **)(result + 16);
  v4 = v3 + 32 * a2;
  if (*(float *)v4 >= a3)
  {
    *(float *)v4 = a3;
    v7 = *(_DWORD *)(v4 + 4);
    v6 = (_DWORD *)(v4 + 4);
    v5 = v7;
    if (v7 != -1 && *(float *)(v3 + 32 * v5) > a3)
    {
      v8 = v3 + 32 * a2;
      v10 = (unsigned int *)(v8 + 12);
      v9 = *(unsigned int *)(v8 + 12);
      if (*(_DWORD *)(v8 + 12) == a2)
      {
        *(_DWORD *)(v3 + 32 * v5 + 16) = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 32 * v9 + 8) = *(_DWORD *)(v8 + 8);
        *(_DWORD *)(v3 + 32 * *(unsigned int *)(v8 + 8) + 12) = v9;
        v11 = v3 + 32 * v5;
        v13 = *(_DWORD *)(v11 + 16);
        v12 = (unsigned int *)(v11 + 16);
        if (v13 == a2)
          *v12 = *v10;
      }
      v14 = v3 + 32 * v5;
      v15 = *(unsigned int *)(result + 4);
      v16 = v3 + 32 * v15;
      v18 = *(_DWORD *)(v16 + 12);
      v17 = (unsigned int *)(v16 + 12);
      --*(_DWORD *)(v14 + 24);
      *(_DWORD *)(v3 + 32 * v18 + 8) = a2;
      *v10 = v18;
      *v17 = a2;
      v19 = v3 + 32 * a2;
      *(_DWORD *)(v19 + 8) = v15;
      *v6 = -1;
      *(_BYTE *)(v19 + 28) = 0;
      for (i = *(unsigned int *)(v14 + 4); (_DWORD)i != -1; i = *(unsigned int *)(v21 + 4))
      {
        v24 = v5;
        v25 = v5;
        v5 = i;
        v26 = v3 + 32 * v25;
        v27 = (_BYTE *)(v26 + 28);
        if (!*(_BYTE *)(v26 + 28))
        {
          *v27 = 1;
          break;
        }
        v30 = *(_DWORD *)(v26 + 12);
        v28 = (_DWORD *)(v26 + 12);
        v29 = v30;
        if (v30 == v24)
        {
          *(_DWORD *)(v3 + 32 * v5 + 16) = -1;
        }
        else
        {
          v31 = v3 + 32 * v25;
          *(_DWORD *)(v3 + 32 * v29 + 8) = *(_DWORD *)(v31 + 8);
          *(_DWORD *)(v3 + 32 * *(unsigned int *)(v31 + 8) + 12) = v29;
          v32 = v3 + 32 * v5;
          v34 = *(_DWORD *)(v32 + 16);
          v33 = (_DWORD *)(v32 + 16);
          if (v34 == v24)
            *v33 = *v28;
        }
        v21 = v3 + 32 * v5;
        --*(_DWORD *)(v21 + 24);
        v22 = *v17;
        *(_DWORD *)(v3 + 32 * v22 + 8) = v24;
        *v28 = v22;
        *v17 = v24;
        v23 = v3 + 32 * v25;
        *(_DWORD *)(v23 + 4) = -1;
        *(_DWORD *)(v23 + 8) = v15;
        *v27 = 0;
      }
    }
    if (*(float *)(v3 + 32 * *(unsigned int *)(result + 4)) > a3)
      *(_DWORD *)(result + 4) = a2;
  }
  return result;
}

uint64_t sub_2399F5504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  void *v27;
  uint64_t v28;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v1 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v1 != -1)
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = v3 + 32 * v1;
    v5 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v5 != -1)
    {
      v6 = *(int *)(v4 + 24);
      if ((_DWORD)v6)
      {
        sub_23942CB44((uint64_t)&__p, v6);
        v3 = **(_QWORD **)(a1 + 16);
        v7 = v3 + 32 * v1;
        v9 = *(_DWORD *)(v7 + 24);
        v8 = (unsigned int *)(v7 + 24);
        if (v9 >= 1)
        {
          v10 = 0;
          v11 = __p;
          do
          {
            v11[v10] = v5;
            v5 = *(unsigned int *)(v3 + 32 * v5 + 12);
            ++v10;
            v12 = (int)*v8;
          }
          while (v10 < v12);
          v13 = *v8;
          if ((int)v12 >= 1)
          {
            v14 = (unsigned int *)__p;
            v15 = *(unsigned int *)(a1 + 4);
            v16 = v3 + 32 * v15;
            v19 = *(_DWORD *)(v16 + 8);
            v17 = (unsigned int *)(v16 + 8);
            v18 = v19;
            do
            {
              v20 = *v14++;
              *(_DWORD *)(v3 + 32 * v18 + 12) = v20;
              v21 = (_DWORD *)(v3 + 32 * v20);
              v21[2] = v18;
              v21[3] = v15;
              *v17 = v20;
              v21[1] = -1;
              v18 = v20;
              --v13;
            }
            while (v13);
          }
        }
      }
    }
    v22 = v3 + 32 * v1;
    v23 = *(unsigned int *)(v22 + 8);
    *(_DWORD *)(v3 + 32 * v23 + 12) = *(_DWORD *)(v22 + 12);
    v24 = *(unsigned int *)(v22 + 12);
    *(_DWORD *)(v3 + 32 * v24 + 8) = v23;
    if ((_DWORD)v1 == (_DWORD)v24)
    {
      *(_DWORD *)(a1 + 4) = -1;
    }
    else
    {
      *(_DWORD *)(a1 + 4) = v24;
      sub_2399F5668((int *)a1);
    }
    --*(_DWORD *)a1;
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
  }
  return v1;
}

void sub_2399F564C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399F5668(int *a1)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  void *v41;
  uint64_t v42;
  void *__b;
  _DWORD *v44;
  uint64_t v45;

  __b = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  v2 = vcvtmd_s64_f64(log((double)*a1) / 0.481211825);
  v3 = v2 + 2;
  if (v2 == -2 || (sub_23942CB44((uint64_t)&__b, v3), v2 < -1))
  {
    v4 = 0;
  }
  else
  {
    memset(__b, 255, 4 * (v2 + 1) + 4);
    v4 = 1;
  }
  v5 = 0;
  v6 = a1[1];
  v7 = v6;
  do
  {
    v7 = *(unsigned int *)(**((_QWORD **)a1 + 2) + 32 * v7 + 12);
    ++v5;
  }
  while (v7 != v6);
  sub_23942CB44((uint64_t)&__p, v5);
  v8 = __p;
  v9 = **((_QWORD **)a1 + 2);
  v10 = v5;
  do
  {
    *v8++ = v6;
    v6 = *(unsigned int *)(v9 + 32 * v6 + 12);
    --v10;
  }
  while (v10);
  v11 = 0;
  v12 = __b;
  do
  {
    v13 = *((unsigned int *)__p + v11);
    v14 = *(int *)(**((_QWORD **)a1 + 2) + 32 * v13 + 24);
    for (i = v12[v14]; i != -1; i = v18[1])
    {
      v19 = **((_QWORD **)a1 + 2);
      v20 = *(float *)(v19 + 32 * i);
      v21 = *(float *)(v19 + 32 * v13);
      if (v20 >= v21)
        v22 = i;
      else
        v22 = v13;
      if (v20 >= v21)
        v13 = v13;
      else
        v13 = i;
      v23 = v19 + 32 * v22;
      v25 = *(_DWORD *)(v23 + 12);
      v24 = (_DWORD *)(v23 + 12);
      v26 = v24 - 1;
      v27 = *(v24 - 1);
      *(_DWORD *)(v19 + 32 * v27 + 12) = v25;
      *(_DWORD *)(v19 + 32 * *v24 + 8) = v27;
      v28 = v19 + 32 * v13;
      v30 = *(_DWORD *)(v28 + 16);
      v29 = (_DWORD *)(v28 + 16);
      v16 = v30;
      if (v30 == -1)
      {
        *v29 = v22;
        LODWORD(v16) = v22;
      }
      else
      {
        v31 = v19 + 32 * v16;
        v32 = *(_DWORD *)(v31 + 8);
        *(_DWORD *)(v19 + 32 * v32 + 12) = v22;
        *v26 = v32;
        v26 = (unsigned int *)(v31 + 8);
      }
      *v26 = v22;
      *v24 = v16;
      v17 = v19 + 32 * v22;
      *(_DWORD *)(v17 + 4) = v13;
      ++*(_DWORD *)(v19 + 32 * v13 + 24);
      *(_BYTE *)(v17 + 28) = 0;
      v12 = __b;
      v18 = (char *)__b + 4 * v14;
      *v18 = -1;
      ++v14;
    }
    v12[v14] = v13;
    ++v11;
  }
  while (v5 != v11);
  a1[1] = -1;
  if (v4)
  {
    if (v3 <= 1)
      v33 = 1;
    else
      v33 = v3;
    v34 = v12;
    v35 = 0xFFFFFFFFLL;
    do
    {
      v36 = *v34;
      if ((_DWORD)v36 != -1)
      {
        v37 = **((_QWORD **)a1 + 2);
        if (v35 == 0xFFFFFFFFLL)
        {
          *(_DWORD *)(v37 + 32 * v36 + 12) = v36;
          *(_DWORD *)(v37 + 32 * *v34 + 8) = v36;
        }
        else
        {
          v38 = v37 + 32 * v35;
          v39 = *(unsigned int *)(v38 + 8);
          *(_DWORD *)(v37 + 32 * v39 + 12) = v36;
          *(_DWORD *)(v37 + 32 * *v34 + 8) = v39;
          *(_DWORD *)(v38 + 8) = *v34;
          *(_DWORD *)(v37 + 32 * *v34 + 12) = v35;
          v36 = *v34;
          if (*(float *)(v37 + 32 * v36) >= *(float *)v38)
            goto LABEL_30;
        }
        a1[1] = v36;
        v35 = v36;
      }
LABEL_30:
      ++v34;
      --v33;
    }
    while (v33);
  }
  if (!__p || (v41 = __p, operator delete(__p), (v12 = __b) != 0))
  {
    v44 = v12;
    operator delete(v12);
  }
}

void sub_2399F5938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v14;

  if (__p)
  {
    operator delete(__p);
    v14 = a12;
    if (!a12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v14 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399F5974(uint64_t result, unsigned int *a2, _QWORD **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int *v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int *v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  BOOL v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int *v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  unsigned int *v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  BOOL v133;
  int64_t v134;
  int64_t v135;
  uint64_t v136;
  unsigned int *v137;
  _QWORD *v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int *v143;
  _QWORD *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int *v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int *v166;
  uint64_t v168;
  int64_t v169;
  unsigned int *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  unint64_t v180;
  unsigned int *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int *v189;
  _QWORD *v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int *v196;
  unsigned int *v197;
  _QWORD *v198;
  uint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int *v204;
  _QWORD *v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int *v213;
  unsigned int v214;
  int64_t v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int *v219;
  uint64_t v220;
  int64_t v221;
  uint64_t v222;
  unsigned int v223;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = a2 - 1;
  v213 = a2 - 2;
  v217 = a2;
  v212 = a2 - 3;
  while (2)
  {
    v10 = v217;
    v11 = (char *)v217 - (char *)v8;
    v12 = v217 - v8;
    switch(v217 - v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v105 = *a3;
        v106 = **a3 + 104;
        v107 = (unsigned int *)sub_239962518(v106, v9);
        v108 = *(_DWORD *)(sub_239962518(v106, v107) + 12);
        v109 = *v105 + 104;
        v110 = (unsigned int *)sub_239962518(v109, v8);
        result = sub_239962518(v109, v110);
        if (v108 < *(_DWORD *)(result + 12))
        {
          v111 = *v8;
          *v8 = *v9;
          *v9 = v111;
        }
        return result;
      case 3:
        return sub_2399F6950(v8, v8 + 1, v9, a3);
      case 4:
        return sub_2399F6DF0(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return sub_2399F6768(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        v219 = v8;
        if (v11 <= 95)
        {
          v112 = v8 + 1;
          v114 = v8 == v217 || v112 == v217;
          if ((a5 & 1) != 0)
          {
            if (!v114)
            {
              v115 = 0;
              v116 = v8;
              do
              {
                v118 = v116;
                v116 = v112;
                v119 = *a3;
                v120 = **a3 + 104;
                v121 = (unsigned int *)sub_239962518(v120, v112);
                v122 = *(_DWORD *)(sub_239962518(v120, v121) + 12);
                v123 = *v119 + 104;
                v124 = (unsigned int *)sub_239962518(v123, v118);
                result = sub_239962518(v123, v124);
                if (v122 < *(_DWORD *)(result + 12))
                {
                  v223 = *v116;
                  v125 = v115;
                  do
                  {
                    *(unsigned int *)((char *)v8 + v125 + 4) = *(unsigned int *)((char *)v8 + v125);
                    if (!v125)
                    {
                      v117 = v8;
                      goto LABEL_68;
                    }
                    v125 -= 4;
                    v126 = (unsigned int *)((char *)v8 + v125);
                    v127 = *a3;
                    v128 = **a3 + 104;
                    v129 = (unsigned int *)sub_239962518(v128, &v223);
                    v130 = *(_DWORD *)(sub_239962518(v128, v129) + 12);
                    v131 = *v127 + 104;
                    v132 = (unsigned int *)sub_239962518(v131, v126);
                    result = sub_239962518(v131, v132);
                    v133 = v130 >= *(_DWORD *)(result + 12);
                    v8 = v219;
                  }
                  while (!v133);
                  v117 = (unsigned int *)((char *)v219 + v125 + 4);
LABEL_68:
                  *v117 = v223;
                }
                v112 = v116 + 1;
                v115 += 4;
              }
              while (v116 + 1 != v217);
            }
          }
          else if (!v114)
          {
            v196 = v8 - 1;
            do
            {
              v197 = v8;
              v8 = v112;
              v198 = *a3;
              v199 = **a3 + 104;
              v200 = (unsigned int *)sub_239962518(v199, v112);
              v201 = *(_DWORD *)(sub_239962518(v199, v200) + 12);
              v202 = *v198 + 104;
              v203 = (unsigned int *)sub_239962518(v202, v197);
              result = sub_239962518(v202, v203);
              if (v201 < *(_DWORD *)(result + 12))
              {
                v223 = *v8;
                v204 = v196;
                do
                {
                  v204[2] = v204[1];
                  v205 = *a3;
                  v206 = **a3 + 104;
                  v207 = (unsigned int *)sub_239962518(v206, &v223);
                  v208 = *(_DWORD *)(sub_239962518(v206, v207) + 12);
                  v209 = *v205 + 104;
                  v210 = (unsigned int *)sub_239962518(v209, v204);
                  result = sub_239962518(v209, v210);
                  --v204;
                }
                while (v208 < *(_DWORD *)(result + 12));
                v204[2] = v223;
              }
              v112 = v8 + 1;
              ++v196;
            }
            while (v8 + 1 != v217);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v217)
          {
            v134 = (v12 - 2) >> 1;
            v221 = v134;
            v211 = (char *)v217 - (char *)v8;
            do
            {
              v135 = v134;
              if (v221 >= v134)
              {
                v136 = (2 * v134) | 1;
                v137 = &v8[v136];
                if (2 * v134 + 2 < (uint64_t)v12)
                {
                  v138 = *a3;
                  v139 = **a3 + 104;
                  v140 = (unsigned int *)sub_239962518(v139, &v8[v136]);
                  v214 = *(_DWORD *)(sub_239962518(v139, v140) + 12);
                  v141 = *v138 + 104;
                  v142 = (unsigned int *)sub_239962518(v141, v137 + 1);
                  if (v214 < *(_DWORD *)(sub_239962518(v141, v142) + 12))
                  {
                    ++v137;
                    v136 = 2 * v135 + 2;
                  }
                }
                v143 = &v8[v135];
                v144 = *a3;
                v145 = **a3 + 104;
                v146 = (unsigned int *)sub_239962518(v145, v137);
                v147 = *(_DWORD *)(sub_239962518(v145, v146) + 12);
                v148 = *v144 + 104;
                v149 = (unsigned int *)sub_239962518(v148, v143);
                result = sub_239962518(v148, v149);
                v11 = v211;
                if (v147 >= *(_DWORD *)(result + 12))
                {
                  v215 = v135;
                  v223 = *v143;
                  do
                  {
                    v156 = v137;
                    *v143 = *v137;
                    if (v221 < v136)
                      break;
                    v157 = (2 * v136) | 1;
                    v137 = &v8[v157];
                    v158 = 2 * v136 + 2;
                    if (v158 < (uint64_t)v12)
                    {
                      v159 = *a3;
                      v160 = **a3 + 104;
                      v161 = (unsigned int *)sub_239962518(v160, &v8[v157]);
                      v162 = *(_DWORD *)(sub_239962518(v160, v161) + 12);
                      v163 = *v159 + 104;
                      v164 = (unsigned int *)sub_239962518(v163, v137 + 1);
                      v133 = v162 >= *(_DWORD *)(sub_239962518(v163, v164) + 12);
                      v8 = v219;
                      if (!v133)
                      {
                        ++v137;
                        v157 = v158;
                      }
                    }
                    v150 = *a3;
                    v151 = **a3 + 104;
                    v152 = (unsigned int *)sub_239962518(v151, v137);
                    v153 = *(_DWORD *)(sub_239962518(v151, v152) + 12);
                    v154 = *v150 + 104;
                    v155 = (unsigned int *)sub_239962518(v154, &v223);
                    result = sub_239962518(v154, v155);
                    v143 = v156;
                    v136 = v157;
                  }
                  while (v153 >= *(_DWORD *)(result + 12));
                  *v156 = v223;
                  v11 = v211;
                  v135 = v215;
                }
              }
              v134 = v135 - 1;
            }
            while (v135);
            v165 = (unint64_t)v11 >> 2;
            v166 = v217;
            do
            {
              v218 = v166;
              v168 = 0;
              v216 = *v8;
              v169 = (unint64_t)(v165 - 2) >> 1;
              v222 = v165;
              do
              {
                v170 = &v8[v168 + 1];
                v171 = (2 * v168) | 1;
                v172 = 2 * v168 + 2;
                if (v172 < v165)
                {
                  v173 = *a3;
                  v174 = **a3 + 104;
                  v175 = (unsigned int *)sub_239962518(v174, v170);
                  v176 = *(_DWORD *)(sub_239962518(v174, v175) + 12);
                  v177 = *v173 + 104;
                  v178 = (unsigned int *)sub_239962518(v177, v170 + 1);
                  result = sub_239962518(v177, v178);
                  v165 = v222;
                  if (v176 < *(_DWORD *)(result + 12))
                  {
                    ++v170;
                    v171 = v172;
                  }
                }
                *v8 = *v170;
                v8 = v170;
                v168 = v171;
              }
              while (v171 <= v169);
              v166 = v218 - 1;
              if (v170 == v218 - 1)
              {
                *v170 = v216;
                v8 = v219;
              }
              else
              {
                *v170 = *v166;
                *v166 = v216;
                v8 = v219;
                v179 = (char *)v170 - (char *)v219 + 4;
                if (v179 >= 5)
                {
                  v180 = (((unint64_t)v179 >> 2) - 2) >> 1;
                  v181 = &v219[v180];
                  v182 = *a3;
                  v183 = **a3 + 104;
                  v184 = v165;
                  v185 = (unsigned int *)sub_239962518(v183, v181);
                  v186 = *(_DWORD *)(sub_239962518(v183, v185) + 12);
                  v187 = *v182 + 104;
                  v188 = (unsigned int *)sub_239962518(v187, v170);
                  result = sub_239962518(v187, v188);
                  v165 = v184;
                  if (v186 < *(_DWORD *)(result + 12))
                  {
                    v223 = *v170;
                    do
                    {
                      v189 = v181;
                      *v170 = *v181;
                      if (!v180)
                        break;
                      v180 = (v180 - 1) >> 1;
                      v181 = &v219[v180];
                      v190 = *a3;
                      v191 = **a3 + 104;
                      v192 = (unsigned int *)sub_239962518(v191, v181);
                      v193 = *(_DWORD *)(sub_239962518(v191, v192) + 12);
                      v194 = *v190 + 104;
                      v195 = (unsigned int *)sub_239962518(v194, &v223);
                      result = sub_239962518(v194, v195);
                      v170 = v189;
                    }
                    while (v193 < *(_DWORD *)(result + 12));
                    *v189 = v223;
                    v165 = v184;
                  }
                }
              }
            }
            while (v165-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v8[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          sub_2399F6950(&v8[v12 >> 1], v8, v9, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          sub_2399F6950(v8, &v8[v12 >> 1], v9, a3);
          v15 = v13;
          v16 = &v8[v13];
          sub_2399F6950(v8 + 1, v16 - 1, v213, a3);
          sub_2399F6950(v8 + 2, &v8[v15 + 1], v212, a3);
          v10 = v217;
          sub_2399F6950(v16 - 1, v14, &v8[v15 + 1], a3);
          v17 = *v8;
          *v8 = *v16;
          *v16 = v17;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v18 = *a3;
        v19 = **a3 + 104;
        v20 = (unsigned int *)sub_239962518(v19, v8 - 1);
        v21 = *(_DWORD *)(sub_239962518(v19, v20) + 12);
        v22 = *v18 + 104;
        v23 = (unsigned int *)sub_239962518(v22, v8);
        if (v21 >= *(_DWORD *)(sub_239962518(v22, v23) + 12))
        {
          v223 = *v8;
          v65 = *a3;
          v66 = **a3 + 104;
          v67 = (unsigned int *)sub_239962518(v66, &v223);
          v68 = *(_DWORD *)(sub_239962518(v66, v67) + 12);
          v69 = *v65 + 104;
          v70 = (unsigned int *)sub_239962518(v69, v9);
          result = sub_239962518(v69, v70);
          if (v68 >= *(_DWORD *)(result + 12))
          {
            v77 = v8 + 1;
            do
            {
              v8 = v77;
              if (v77 >= v10)
                break;
              v78 = *a3;
              v79 = **a3 + 104;
              v80 = (unsigned int *)sub_239962518(v79, &v223);
              v81 = *(_DWORD *)(sub_239962518(v79, v80) + 12);
              v82 = *v78 + 104;
              v83 = (unsigned int *)sub_239962518(v82, v8);
              result = sub_239962518(v82, v83);
              v77 = v8 + 1;
            }
            while (v81 >= *(_DWORD *)(result + 12));
          }
          else
          {
            do
            {
              ++v8;
              v71 = *a3;
              v72 = **a3 + 104;
              v73 = (unsigned int *)sub_239962518(v72, &v223);
              v74 = *(_DWORD *)(sub_239962518(v72, v73) + 12);
              v75 = *v71 + 104;
              v76 = (unsigned int *)sub_239962518(v75, v8);
              result = sub_239962518(v75, v76);
            }
            while (v74 >= *(_DWORD *)(result + 12));
          }
          v84 = v10;
          if (v8 < v10)
          {
            v84 = v10;
            do
            {
              --v84;
              v85 = *a3;
              v86 = **a3 + 104;
              v87 = (unsigned int *)sub_239962518(v86, &v223);
              v88 = *(_DWORD *)(sub_239962518(v86, v87) + 12);
              v89 = *v85 + 104;
              v90 = (unsigned int *)sub_239962518(v89, v84);
              result = sub_239962518(v89, v90);
            }
            while (v88 < *(_DWORD *)(result + 12));
          }
          while (v8 < v84)
          {
            v91 = *v8;
            *v8 = *v84;
            *v84 = v91;
            do
            {
              ++v8;
              v92 = *a3;
              v93 = **a3 + 104;
              v94 = (unsigned int *)sub_239962518(v93, &v223);
              v95 = *(_DWORD *)(sub_239962518(v93, v94) + 12);
              v96 = *v92 + 104;
              v97 = (unsigned int *)sub_239962518(v96, v8);
            }
            while (v95 >= *(_DWORD *)(sub_239962518(v96, v97) + 12));
            do
            {
              --v84;
              v98 = *a3;
              v99 = **a3 + 104;
              v100 = (unsigned int *)sub_239962518(v99, &v223);
              v101 = *(_DWORD *)(sub_239962518(v99, v100) + 12);
              v102 = *v98 + 104;
              v103 = (unsigned int *)sub_239962518(v102, v84);
              result = sub_239962518(v102, v103);
            }
            while (v101 < *(_DWORD *)(result + 12));
          }
          v104 = v8 - 1;
          if (v8 - 1 != v219)
            *v219 = *v104;
          a5 = 0;
          *v104 = v223;
          continue;
        }
LABEL_11:
        v24 = 0;
        v223 = *v8;
        do
        {
          ++v24;
          v25 = *a3;
          v26 = **a3 + 104;
          v27 = (unsigned int *)sub_239962518(v26, &v8[v24]);
          v28 = *(_DWORD *)(sub_239962518(v26, v27) + 12);
          v29 = *v25 + 104;
          v30 = (unsigned int *)sub_239962518(v29, &v223);
        }
        while (v28 < *(_DWORD *)(sub_239962518(v29, v30) + 12));
        v31 = &v8[v24];
        v32 = v10;
        if (v24 == 1)
        {
          v32 = v10;
          do
          {
            if (v31 >= v32)
              break;
            --v32;
            v39 = *a3;
            v40 = **a3 + 104;
            v41 = (unsigned int *)sub_239962518(v40, v32);
            v42 = *(_DWORD *)(sub_239962518(v40, v41) + 12);
            v43 = *v39 + 104;
            v44 = (unsigned int *)sub_239962518(v43, &v223);
          }
          while (v42 >= *(_DWORD *)(sub_239962518(v43, v44) + 12));
        }
        else
        {
          do
          {
            --v32;
            v33 = *a3;
            v34 = **a3 + 104;
            v35 = (unsigned int *)sub_239962518(v34, v32);
            v36 = *(_DWORD *)(sub_239962518(v34, v35) + 12);
            v37 = *v33 + 104;
            v38 = (unsigned int *)sub_239962518(v37, &v223);
          }
          while (v36 >= *(_DWORD *)(sub_239962518(v37, v38) + 12));
        }
        if (v31 >= v32)
        {
          v62 = v31 - 1;
          v63 = v219;
          if (v31 - 1 == v219)
            goto LABEL_29;
LABEL_28:
          *v63 = *v62;
          goto LABEL_29;
        }
        v220 = a4;
        v45 = a5;
        v46 = v9;
        v47 = v31;
        v48 = v32;
        do
        {
          v49 = *v47;
          *v47 = *v48;
          *v48 = v49;
          do
          {
            ++v47;
            v50 = *a3;
            v51 = **a3 + 104;
            v52 = (unsigned int *)sub_239962518(v51, v47);
            v53 = *(_DWORD *)(sub_239962518(v51, v52) + 12);
            v54 = *v50 + 104;
            v55 = (unsigned int *)sub_239962518(v54, &v223);
          }
          while (v53 < *(_DWORD *)(sub_239962518(v54, v55) + 12));
          do
          {
            --v48;
            v56 = *a3;
            v57 = **a3 + 104;
            v58 = (unsigned int *)sub_239962518(v57, v48);
            v59 = *(_DWORD *)(sub_239962518(v57, v58) + 12);
            v60 = *v56 + 104;
            v61 = (unsigned int *)sub_239962518(v60, &v223);
          }
          while (v59 >= *(_DWORD *)(sub_239962518(v60, v61) + 12));
        }
        while (v47 < v48);
        v62 = v47 - 1;
        v9 = v46;
        a5 = v45;
        v63 = v219;
        a4 = v220;
        if (v62 != v219)
          goto LABEL_28;
LABEL_29:
        *v62 = v223;
        if (v31 < v32)
        {
LABEL_32:
          result = sub_2399F5974(v219, v62, a3, a4, a5 & 1);
          a5 = 0;
          v8 = v62 + 1;
          continue;
        }
        v64 = sub_2399F6B3C(v219, v62, a3);
        v8 = v62 + 1;
        result = sub_2399F6B3C(v62 + 1, v217, a3);
        if (!(_DWORD)result)
        {
          if (v64)
            continue;
          goto LABEL_32;
        }
        a2 = v62;
        v8 = v219;
        if (!v64)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_2399F6768(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _QWORD **a6)
{
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t result;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;

  sub_2399F6DF0(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = **a6 + 104;
  v14 = (unsigned int *)sub_239962518(v13, a5);
  v15 = *(_DWORD *)(sub_239962518(v13, v14) + 12);
  v16 = *v12 + 104;
  v17 = (unsigned int *)sub_239962518(v16, a4);
  result = sub_239962518(v16, v17);
  if (v15 < *(_DWORD *)(result + 12))
  {
    v19 = *a4;
    *a4 = *a5;
    *a5 = v19;
    v20 = *a6;
    v21 = **a6 + 104;
    v22 = (unsigned int *)sub_239962518(v21, a4);
    v23 = *(_DWORD *)(sub_239962518(v21, v22) + 12);
    v24 = *v20 + 104;
    v25 = (unsigned int *)sub_239962518(v24, a3);
    result = sub_239962518(v24, v25);
    if (v23 < *(_DWORD *)(result + 12))
    {
      v26 = *a3;
      *a3 = *a4;
      *a4 = v26;
      v27 = *a6;
      v28 = **a6 + 104;
      v29 = (unsigned int *)sub_239962518(v28, a3);
      v30 = *(_DWORD *)(sub_239962518(v28, v29) + 12);
      v31 = *v27 + 104;
      v32 = (unsigned int *)sub_239962518(v31, a2);
      result = sub_239962518(v31, v32);
      if (v30 < *(_DWORD *)(result + 12))
      {
        v33 = *a2;
        *a2 = *a3;
        *a3 = v33;
        v34 = *a6;
        v35 = **a6 + 104;
        v36 = (unsigned int *)sub_239962518(v35, a2);
        v37 = *(_DWORD *)(sub_239962518(v35, v36) + 12);
        v38 = *v34 + 104;
        v39 = (unsigned int *)sub_239962518(v38, a1);
        result = sub_239962518(v38, v39);
        if (v37 < *(_DWORD *)(result + 12))
        {
          v40 = *a1;
          *a1 = *a2;
          *a2 = v40;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2399F6950(unsigned int *a1, unsigned int *a2, unsigned int *a3, _QWORD **a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;

  v8 = *a4;
  v9 = **a4 + 104;
  v10 = (unsigned int *)sub_239962518(v9, a2);
  v11 = *(_DWORD *)(sub_239962518(v9, v10) + 12);
  v12 = *v8 + 104;
  v13 = (unsigned int *)sub_239962518(v12, a1);
  v14 = *(_DWORD *)(sub_239962518(v12, v13) + 12);
  v15 = *a4;
  v16 = **a4 + 104;
  v17 = (unsigned int *)sub_239962518(v16, a3);
  v18 = *(_DWORD *)(sub_239962518(v16, v17) + 12);
  v19 = *v15 + 104;
  v20 = (unsigned int *)sub_239962518(v19, a2);
  result = sub_239962518(v19, v20);
  v22 = *(_DWORD *)(result + 12);
  if (v11 >= v14)
  {
    if (v18 < v22)
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = *a4;
      v26 = *v25 + 104;
      v27 = (unsigned int *)sub_239962518(v26, a2);
      v28 = *(_DWORD *)(sub_239962518(v26, v27) + 12);
      v29 = *v25 + 104;
      v30 = (unsigned int *)sub_239962518(v29, a1);
      result = sub_239962518(v29, v30);
      if (v28 < *(_DWORD *)(result + 12))
      {
        v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  else
  {
    v23 = *a1;
    if (v18 >= v22)
    {
      *a1 = *a2;
      *a2 = v23;
      v32 = *a4;
      v33 = *v32 + 104;
      v34 = (unsigned int *)sub_239962518(v33, a3);
      v35 = *(_DWORD *)(sub_239962518(v33, v34) + 12);
      v36 = *v32 + 104;
      v37 = (unsigned int *)sub_239962518(v36, a2);
      result = sub_239962518(v36, v37);
      if (v35 >= *(_DWORD *)(result + 12))
        return result;
      v23 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v23;
  }
  return result;
}

BOOL sub_2399F6B3C(unsigned int *a1, unsigned int *a2, _QWORD **a3)
{
  uint64_t v5;
  _BOOL8 result;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v33;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      v8 = *a3;
      v9 = **a3 + 104;
      v10 = (unsigned int *)sub_239962518(v9, a2 - 1);
      v11 = *(_DWORD *)(sub_239962518(v9, v10) + 12);
      v12 = *v8 + 104;
      v13 = (unsigned int *)sub_239962518(v12, a1);
      if (v11 < *(_DWORD *)(sub_239962518(v12, v13) + 12))
      {
        v14 = *a1;
        *a1 = *v7;
        *v7 = v14;
      }
      return 1;
    case 3:
      sub_2399F6950(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_2399F6DF0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2399F6768(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1 + 2;
      sub_2399F6950(a1, a1 + 1, a1 + 2, a3);
      v16 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *a3;
    v20 = **a3 + 104;
    v21 = (unsigned int *)sub_239962518(v20, v16);
    v22 = *(_DWORD *)(sub_239962518(v20, v21) + 12);
    v23 = *v19 + 104;
    v24 = (unsigned int *)sub_239962518(v23, v15);
    if (v22 < *(_DWORD *)(sub_239962518(v23, v24) + 12))
      break;
LABEL_13:
    v15 = v16;
    v17 += 4;
    if (++v16 == a2)
      return 1;
  }
  v33 = *v16;
  v25 = v17;
  do
  {
    *(unsigned int *)((char *)a1 + v25 + 12) = *(unsigned int *)((char *)a1 + v25 + 8);
    if (v25 == -8)
    {
      *a1 = v33;
      if (++v18 != 8)
        goto LABEL_13;
      return v16 + 1 == a2;
    }
    v26 = *a3;
    v27 = **a3 + 104;
    v28 = (unsigned int *)sub_239962518(v27, &v33);
    v29 = *(_DWORD *)(sub_239962518(v27, v28) + 12);
    v30 = *v26 + 104;
    v31 = (unsigned int *)sub_239962518(v30, (unsigned int *)((char *)a1 + v25 + 4));
    v25 -= 4;
  }
  while (v29 < *(_DWORD *)(sub_239962518(v30, v31) + 12));
  *(unsigned int *)((char *)a1 + v25 + 12) = v33;
  if (++v18 != 8)
    goto LABEL_13;
  return v16 + 1 == a2;
}

uint64_t sub_2399F6DF0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD **a5)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t result;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  sub_2399F6950(a1, a2, a3, a5);
  v10 = *a5;
  v11 = **a5 + 104;
  v12 = (unsigned int *)sub_239962518(v11, a4);
  v13 = *(_DWORD *)(sub_239962518(v11, v12) + 12);
  v14 = *v10 + 104;
  v15 = (unsigned int *)sub_239962518(v14, a3);
  result = sub_239962518(v14, v15);
  if (v13 < *(_DWORD *)(result + 12))
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    v18 = *a5;
    v19 = **a5 + 104;
    v20 = (unsigned int *)sub_239962518(v19, a3);
    v21 = *(_DWORD *)(sub_239962518(v19, v20) + 12);
    v22 = *v18 + 104;
    v23 = (unsigned int *)sub_239962518(v22, a2);
    result = sub_239962518(v22, v23);
    if (v21 < *(_DWORD *)(result + 12))
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = *a5;
      v26 = **a5 + 104;
      v27 = (unsigned int *)sub_239962518(v26, a2);
      v28 = *(_DWORD *)(sub_239962518(v26, v27) + 12);
      v29 = *v25 + 104;
      v30 = (unsigned int *)sub_239962518(v29, a1);
      result = sub_239962518(v29, v30);
      if (v28 < *(_DWORD *)(result + 12))
      {
        v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

uint64_t sub_2399F6F68(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char **v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float64_t v13;
  float64x2_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v52;
  char **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v59;
  mach_msg_type_number_t task_info_outCnt[2];
  uint64_t v61;
  unint64_t v62;
  mach_msg_type_number_t v63;
  integer_t task_info_out[96];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = a2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v53 = (char **)(a1 + 88);
  v5 = (char **)(a1 + 112);
  *(_OWORD *)(a1 + 136) = 0u;
  v6 = (uint64_t *)(a1 + 136);
  v52 = (char **)(a1 + 160);
  *(_OWORD *)(a1 + 184) = 0u;
  v56 = (uint64_t *)(a1 + 184);
  v59 = (uint64_t *)(a1 + 208);
  *(_OWORD *)(a1 + 232) = 0u;
  v7 = (_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)a3;
  *(_DWORD *)(a1 + 272) = 0;
  std::chrono::system_clock::now();
  sub_2399FCAC0();
  task_info_outCnt[0] = 93;
  task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, task_info_outCnt);
  v54 = a2[16];
  v55 = a2[17];
  v57 = (uint64_t)(a2[14] - a2[13]) >> 2;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 96) - v8) >> 4);
  if (v57 <= v9)
  {
    if (v57 < v9)
      *(_QWORD *)(a1 + 96) = v8 + 80 * v57;
  }
  else
  {
    sub_2399F82C8(v53, v57 - v9);
  }
  v10 = *(_QWORD *)(a1 + 112);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 120) - v10) >> 3);
  if (v57 <= v11)
  {
    if (v57 < v11)
      *(_QWORD *)(a1 + 120) = v10 + 24 * v57;
  }
  else
  {
    sub_2399F846C(v5, v57 - v11);
  }
  if ((_DWORD)v57)
  {
    v12 = 0;
    do
    {
      v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 64) + 176));
      v17 = *v15;
      v16 = (std::__shared_weak_count *)v15[1];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 = COERCE_FLOAT(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16 * v12 + 8));
      v14 = (float64x2_t *)&(*v5)[24 * v12];
      *v14 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v17 + 40) + 16 * v12));
      v14[1].f64[0] = v13;
      ++v12;
    }
    while (v12 != v57);
  }
  sub_23941C5D8((uint64_t)v6, v57, 0);
  v21 = (-858993459 * ((v55 - v54) >> 2)) >> 1;
  v22 = *(_QWORD *)(a1 + 160);
  v23 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 168) - v22) >> 4);
  if (v21 <= v23)
  {
    if (v21 < v23)
      *(_QWORD *)(a1 + 168) = v22 + 80 * v21;
  }
  else
  {
    sub_2399F82C8(v52, v21 - v23);
  }
  v24 = *(_QWORD *)(a1 + 184);
  v25 = (*(_QWORD *)(a1 + 192) - v24) >> 2;
  if (v21 <= v25)
  {
    if (v21 < v25)
      *(_QWORD *)(a1 + 192) = v24 + 4 * v21;
  }
  else
  {
    sub_2394807B4((uint64_t)v56, v21 - v25);
  }
  v26 = -858993459 * ((v55 - v54) >> 2);
  v27 = *(_QWORD *)(a1 + 208);
  v28 = (*(_QWORD *)(a1 + 216) - v27) >> 2;
  if (v26 <= v28)
  {
    if (v26 < v28)
      *(_QWORD *)(a1 + 216) = v27 + 4 * v26;
  }
  else
  {
    sub_23942CB44((uint64_t)v59, v26 - v28);
  }
  v29 = *(_QWORD *)(a1 + 232);
  v30 = (*(_QWORD *)(a1 + 240) - v29) >> 2;
  if (v21 <= v30)
  {
    if (v21 < v30)
      *(_QWORD *)(a1 + 240) = v29 + 4 * v21;
  }
  else
  {
    sub_23942CB44((uint64_t)v7, v21 - v30);
  }
  v31 = operator new(0x48uLL);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = &off_250AF1410;
  v32 = sub_2399F8764((uint64_t)(v31 + 3), v56);
  v33 = *(std::__shared_weak_count **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v31;
  if (!v33)
    goto LABEL_38;
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    *(_QWORD *)task_info_outCnt = 0;
    v61 = 0;
    v62 = 0;
    if (!(-858993459 * ((v55 - v54) >> 2)))
      goto LABEL_44;
  }
  else
  {
LABEL_38:
    *(_QWORD *)task_info_outCnt = 0;
    v61 = 0;
    v62 = 0;
    if (!(-858993459 * ((v55 - v54) >> 2)))
      goto LABEL_44;
  }
  *(_QWORD *)task_info_outCnt = operator new(8 * (((v26 - 1) >> 6) + 1));
  v61 = 0;
  v62 = ((v26 - 1) >> 6) + 1;
  sub_23942D8C8(task_info_outCnt, v26, 0);
  v36 = 0;
  v37 = 0;
  do
  {
    v38 = *(_QWORD *)(a1 + 64);
    task_info_out[0] = v36;
    v39 = (unsigned int *)sub_239962518(v38 + 104, (unsigned int *)task_info_out);
    v40 = *v39;
    v41 = *(_QWORD **)task_info_outCnt;
    v42 = v40 >> 6;
    v43 = 1 << v40;
    if ((v43 & *(_QWORD *)(*(_QWORD *)task_info_outCnt + 8 * v42)) == 0)
    {
      *(_QWORD *)(*(_QWORD *)task_info_outCnt + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
      v41[v42] |= v43;
      v44 = *v59;
      *(_DWORD *)(*v59 + 4 * v36) = v37;
      *(_DWORD *)(v44 + 4 * *v39) = v37;
      *(_DWORD *)(*v7 + 4 * v37++) = v36;
    }
    ++v36;
  }
  while (v26 != v36);
LABEL_44:
  if (*(_BYTE *)(a3 + 12))
  {
    v45 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
    if (v57 <= v45)
    {
      if (v57 < v45)
        *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * v57;
    }
    else
    {
      sub_2394DE27C(a1, v57 - v45, &flt_239F0397C);
    }
  }
  if (*(_BYTE *)(a3 + 4) && (_DWORD)v57)
  {
    v46 = 0;
    do
    {
      while (1)
      {
        task_info_out[0] = v46;
        v47 = sub_2399423C8((uint64_t)a2, (unsigned int *)task_info_out);
        v48 = *v6;
        v49 = v46 >> 6;
        v50 = 1 << v46;
        if (v47)
          break;
        *(_QWORD *)(v48 + 8 * v49) &= ~v50;
        if (v57 == ++v46)
          goto LABEL_55;
      }
      *(_QWORD *)(v48 + 8 * v49) |= v50;
      ++v46;
    }
    while (v57 != v46);
  }
LABEL_55:
  std::chrono::system_clock::now();
  sub_2399FCAC0();
  v63 = 93;
  task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &v63);
  if (*(_QWORD *)task_info_outCnt)
    operator delete(*(void **)task_info_outCnt);
  return a1;
}

void sub_2399F74B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, void **a18, void *__p)
{
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;

  if (__p)
  {
    operator delete(__p);
    v24 = *v22;
    if (!*v22)
    {
LABEL_3:
      v25 = *a18;
      if (!*a18)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v24 = *v22;
    if (!*v22)
      goto LABEL_3;
  }
  *(_QWORD *)(v19 + 240) = v24;
  operator delete(v24);
  v25 = *a18;
  if (!*a18)
  {
LABEL_4:
    v26 = *a15;
    if (!*a15)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v19 + 216) = v25;
  operator delete(v25);
  v26 = *a15;
  if (!*a15)
  {
LABEL_5:
    v27 = *a11;
    if (!*a11)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v19 + 192) = v26;
  operator delete(v26);
  v27 = *a11;
  if (!*a11)
  {
LABEL_6:
    v28 = *v21;
    if (!*v21)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v19 + 168) = v27;
  operator delete(v27);
  v28 = *v21;
  if (!*v21)
  {
LABEL_7:
    v29 = *v20;
    if (!*v20)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v28);
  v29 = *v20;
  if (!*v20)
  {
LABEL_8:
    v30 = (_QWORD *)(v19 + 24);
    v31 = *a12;
    if (!*a12)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v19 + 120) = v29;
  operator delete(v29);
  v30 = (_QWORD *)(v19 + 24);
  v31 = *a12;
  if (!*a12)
  {
LABEL_9:
    sub_239416DA0(a10);
    v32 = *(_QWORD **)(v19 + 48);
    if (v32 == v30)
    {
LABEL_10:
      v33 = 4;
      v32 = v30;
      goto LABEL_23;
    }
LABEL_19:
    if (!v32)
    {
      v34 = *(void **)v19;
      if (*(_QWORD *)v19)
        goto LABEL_24;
      goto LABEL_21;
    }
    v33 = 5;
LABEL_23:
    (*(void (**)(void))(*v32 + 8 * v33))();
    v34 = *(void **)v19;
    if (*(_QWORD *)v19)
    {
LABEL_24:
      *(_QWORD *)(v19 + 8) = v34;
      operator delete(v34);
      _Unwind_Resume(a1);
    }
LABEL_21:
    _Unwind_Resume(a1);
  }
LABEL_18:
  *(_QWORD *)(v19 + 96) = v31;
  operator delete(v31);
  sub_239416DA0(a10);
  v32 = *(_QWORD **)(v19 + 48);
  if (v32 == v30)
    goto LABEL_10;
  goto LABEL_19;
}

void sub_2399F7660(uint64_t a1)
{
  task_name_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _DWORD *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  float64x2_t v39;
  double v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t v83;
  unsigned int v84;
  mach_msg_type_number_t v85[2];
  uint64_t v86;
  uint64_t v87;
  mach_msg_type_number_t task_info_outCnt[4];
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  _QWORD **v104;
  _QWORD *v105[2];
  void *v106;
  void *v107;
  uint64_t v108;
  _QWORD *task_info_out;
  uint64_t v110;
  unint64_t v111;

  std::chrono::system_clock::now();
  sub_2399FCAC0();
  task_info_outCnt[0] = 93;
  v2 = (task_name_t *)MEMORY[0x24BDAEC58];
  task_info(*MEMORY[0x24BDAEC58], 0x16u, (task_info_t)&task_info_out, task_info_outCnt);
  v3 = *(_QWORD **)(a1 + 64);
  v5 = v3[13];
  v4 = v3[14];
  v7 = v3[16];
  v6 = v3[17];
  v8 = llroundf(*(float *)(a1 + 256) * (float)((v3[20] - v3[19]) >> 2));
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) != 0)
    return;
  if (v8 < 1)
    return;
  sub_2399F7F68((_QWORD *)a1);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) & 1) != 0)
      return;
  }
  v82 = v4;
  *(_OWORD *)task_info_outCnt = *(_OWORD *)(a1 + 64);
  v89 = -1;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = a1 + 88;
  v94 = a1 + 112;
  v95 = a1 + 136;
  v96 = a1 + 160;
  v97 = a1 + 184;
  v98 = a1 + 208;
  v99 = a1 + 232;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0;
  v104 = v105;
  v105[0] = 0;
  v105[1] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  task_info_out = 0;
  v110 = 0;
  v111 = 0;
  v11 = -858993459 * ((v6 - v7) >> 2);
  if (!v11)
  {
    v13 = 0;
    *(_QWORD *)v85 = 0;
    v86 = 0;
    v87 = 0;
    goto LABEL_23;
  }
  task_info_out = operator new(8 * (((v11 - 1) >> 6) + 1));
  v110 = 0;
  v111 = ((v11 - 1) >> 6) + 1;
  sub_23942D8C8(&task_info_out, v11, 0);
  v12 = 0;
  *(_QWORD *)v85 = 0;
  v86 = 0;
  v13 = 1;
  v87 = 0;
  do
  {
    v84 = v12;
    v14 = *(unsigned int *)sub_239962518(*(_QWORD *)(a1 + 64) + 104, &v84);
    v15 = task_info_out;
    v16 = v14 >> 6;
    v17 = 1 << v14;
    if ((v17 & task_info_out[v16]) != 0)
      goto LABEL_8;
    *(_QWORD *)((char *)task_info_out + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v15[v16] |= v17;
    if (sub_2399F225C((uint64_t)task_info_outCnt, &v84, (double *)v85))
    {
      v18 = *(uint64_t **)(a1 + 72);
      v19 = *(_QWORD *)(a1 + 208);
      v20 = 4 * v84;
      v21 = *(unsigned int *)(v19 + v20);
      v22 = v18[3] + 32 * v21;
      *(_DWORD *)v22 = *(_DWORD *)(*(_QWORD *)v18[2] + 4 * v21);
      *(_QWORD *)(v22 + 12) = -1;
      *(_QWORD *)(v22 + 4) = -1;
      *(_DWORD *)(v22 + 20) = v21;
      *(_DWORD *)(v22 + 24) = -1;
      *(_BYTE *)(v22 + 28) = 0;
      v23 = *v18;
      v24 = *(unsigned int *)(v19 + v20);
      v25 = **(_QWORD **)(v23 + 16);
      v26 = v25 + 32 * v24;
      *(_DWORD *)(v26 + 24) = 0;
      *(_DWORD *)(v26 + 4) = -1;
      *(_DWORD *)(v26 + 16) = -1;
      *(_BYTE *)(v26 + 28) = 0;
      v27 = *(unsigned int *)(v23 + 4);
      if ((_DWORD)v27 == -1)
      {
        *(int32x2_t *)(v26 + 8) = vdup_n_s32(v24);
      }
      else
      {
        v28 = v25 + 32 * v27;
        v29 = *(unsigned int *)(v28 + 8);
        *(_DWORD *)(v25 + 32 * v29 + 12) = v24;
        *(_DWORD *)(v26 + 8) = v29;
        *(_DWORD *)(v26 + 12) = v27;
        *(_DWORD *)(v28 + 8) = v24;
        if (*(float *)v26 >= *(float *)v28)
          goto LABEL_16;
      }
      *(_DWORD *)(v23 + 4) = v24;
LABEL_16:
      ++*(_DWORD *)v23;
    }
    v30 = *(_QWORD *)(a1 + 48);
    if (v30 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30))
    {
      v2 = (task_name_t *)MEMORY[0x24BDAEC58];
      v31 = task_info_out;
      if (!task_info_out)
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_8:
    v13 = ++v12 < v11;
  }
  while (v11 != v12);
  v13 = 0;
  v2 = (task_name_t *)MEMORY[0x24BDAEC58];
  v31 = task_info_out;
  if (!task_info_out)
    goto LABEL_23;
LABEL_22:
  operator delete(v31);
LABEL_23:
  if (!v13)
  {
    std::chrono::system_clock::now();
    sub_2399FCAC0();
    v85[0] = 93;
    task_info(*v2, 0x16u, (task_info_t)&task_info_out, v85);
    std::chrono::system_clock::now();
    sub_2399FCAC0();
    v85[0] = 93;
    task_info(*v2, 0x16u, (task_info_t)&task_info_out, v85);
    v32 = *(_QWORD **)(a1 + 72);
    v33 = (_DWORD *)*v32;
    if (*(_DWORD *)*v32)
      v34 = v8 < 1;
    else
      v34 = 1;
    if (!v34)
    {
      while (1)
      {
        v52 = *(unsigned int *)(v32[3] + 32 * v33[1] + 20);
        v85[0] = *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v52);
        v53 = *(_QWORD *)(a1 + 64) + 104;
        LODWORD(task_info_out) = v85[0];
        v54 = sub_239962518(v53, (unsigned int *)&task_info_out);
        v55 = *(uint64_t **)(a1 + 72);
        if (*(_DWORD *)(v54 + 12) != -1 && *(_DWORD *)(v55[3] + 32 * v52 + 20) != -1)
          break;
        v68 = *v55;
        sub_2399F5364(*v55, v52, -3.4028e38);
        v50 = v55[3] + 32 * sub_2399F5504(v68);
        *(_DWORD *)v50 = 0;
        *(_QWORD *)(v50 + 4) = -1;
        *(_QWORD *)(v50 + 12) = -1;
        *(_QWORD *)(v50 + 20) = -1;
        *(_BYTE *)(v50 + 28) = 0;
LABEL_52:
        v32 = *(_QWORD **)(a1 + 72);
        v33 = (_DWORD *)*v32;
        if (*(_DWORD *)*v32)
          v51 = v8 < 1;
        else
          v51 = 1;
        if (v51)
          goto LABEL_29;
      }
      if (*(float *)(*(_QWORD *)(a1 + 184) + 4 * v52) >= 3.4028e38)
        goto LABEL_29;
      v56 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 64) + 104, v85) + 12);
      v57 = *(_QWORD *)(a1 + 64) + 104;
      v58 = (unsigned int *)sub_239962518(v57, v85);
      v59 = *(unsigned int *)(sub_239962518(v57, v58) + 12);
      v60 = sub_2399F2CFC((_QWORD **)task_info_outCnt, v85);
      v61 = v60;
      if (!*(_BYTE *)(a1 + 268) || v60 < 1)
        goto LABEL_95;
      ++*(_DWORD *)(a1 + 272);
      v62 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
      LODWORD(task_info_out) = v56;
      if (*(_DWORD *)sub_239962508(v62, (unsigned int *)&task_info_out) == -1)
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v56) = *(_DWORD *)(a1 + 272);
      v63 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
      LODWORD(task_info_out) = v59;
      if (*(_DWORD *)sub_239962508(v63, (unsigned int *)&task_info_out) == -1)
      {
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v59) = *(_DWORD *)(a1 + 272);
        if (*(_BYTE *)(a1 + 269))
          goto LABEL_65;
      }
      else
      {
LABEL_95:
        if (*(_BYTE *)(a1 + 269))
        {
LABEL_65:
          if (*(_DWORD *)(a1 + 56) != -1 && v61 >= 1)
          {
            v64 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
            LODWORD(task_info_out) = v56;
            if (*(_DWORD *)sub_239962508(v64, (unsigned int *)&task_info_out) != -1
              || (v69 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104),
                  LODWORD(task_info_out) = v59,
                  *(_DWORD *)sub_239962508(v69, (unsigned int *)&task_info_out) == -1))
            {
              v65 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
              LODWORD(task_info_out) = v56;
              if (*(_DWORD *)sub_239962508(v65, (unsigned int *)&task_info_out) != -1)
              {
                v66 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
                LODWORD(task_info_out) = v59;
                if (*(_DWORD *)sub_239962508(v66, (unsigned int *)&task_info_out) == -1)
                {
                  *(_DWORD *)(*(_QWORD *)(sub_2399F81F0(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 56)) + 40) + 4 * v56) = v56;
                  v67 = sub_2399F81F0(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 56));
                  goto LABEL_89;
                }
              }
            }
            else
            {
              v70 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 16 * *(unsigned int *)(a1 + 56));
              v72 = *v70;
              v71 = (std::__shared_weak_count *)v70[1];
              if (v71)
              {
                p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                do
                  v74 = __ldxr(p_shared_owners);
                while (__stxr(v74 + 1, p_shared_owners));
                do
                  v75 = __ldaxr(p_shared_owners);
                while (__stlxr(v75 - 1, p_shared_owners));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              *(_DWORD *)(*(_QWORD *)(v72 + 40) + 4 * v56) = v59;
              v76 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 16 * *(unsigned int *)(a1 + 56));
              v67 = *v76;
              v77 = (std::__shared_weak_count *)v76[1];
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                v2 = (task_name_t *)MEMORY[0x24BDAEC58];
                do
                  v79 = __ldxr(v78);
                while (__stxr(v79 + 1, v78));
                do
                  v80 = __ldaxr(v78);
                while (__stlxr(v80 - 1, v78));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
                LODWORD(v56) = v59;
              }
              else
              {
                LODWORD(v56) = v59;
                v2 = (task_name_t *)MEMORY[0x24BDAEC58];
              }
LABEL_89:
              *(_DWORD *)(*(_QWORD *)(v67 + 40) + 4 * v59) = v56;
            }
          }
        }
      }
      v8 -= v61;
      v81 = *(_QWORD *)(a1 + 48);
      if (v81 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 48))(v81))
        goto LABEL_45;
      goto LABEL_52;
    }
LABEL_29:
    if (((v82 - v5) & 0x3FFFFFFFCLL) != 0)
    {
      v35 = 0;
      v36 = ((unint64_t)(v82 - v5) >> 2);
      while (1)
      {
        v37 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
        LODWORD(task_info_out) = v35;
        if (*(_DWORD *)sub_239962508(v37, (unsigned int *)&task_info_out) != -1)
        {
          v38 = *(_QWORD *)(a1 + 112) + 24 * v35;
          v39 = *(float64x2_t *)v38;
          v40 = *(double *)(v38 + 16);
          v41 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                          + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 64) + 176));
          v43 = *v41;
          v42 = (std::__shared_weak_count *)v41[1];
          if (v42)
          {
            v44 = (unint64_t *)&v42->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            do
              v46 = __ldaxr(v44);
            while (__stlxr(v46 - 1, v44));
            if (!v46)
            {
              v83 = v39;
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
              v39 = v83;
            }
          }
          *(float32x2_t *)&v47 = vcvt_f32_f64(v39);
          *(float *)&v48 = v40;
          *((_QWORD *)&v47 + 1) = v48;
          *(_OWORD *)(*(_QWORD *)(v43 + 40) + 16 * v35) = v47;
        }
        v49 = *(_QWORD *)(a1 + 48);
        if (v49)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49) & 1) != 0)
            break;
        }
        if (++v35 == v36)
          goto LABEL_44;
      }
    }
    else
    {
LABEL_44:
      std::chrono::system_clock::now();
      sub_2399FCAC0();
      v85[0] = 93;
      task_info(*v2, 0x16u, (task_info_t)&task_info_out, v85);
    }
  }
LABEL_45:
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  sub_239421038((uint64_t)&v104, v105[0]);
  if (*((_QWORD *)&v101 + 1))
  {
    *(_QWORD *)&v102 = *((_QWORD *)&v101 + 1);
    operator delete(*((void **)&v101 + 1));
  }
  if ((_QWORD)v100)
  {
    *((_QWORD *)&v100 + 1) = v100;
    operator delete((void *)v100);
  }
}

void sub_2399F7EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  v11 = *(void **)(v9 + 216);
  if (v11)
    operator delete(v11);
  sub_2399F826C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F7F68(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  unsigned int v56;
  void *__p;
  char *v58;
  char *v59;

  v2 = (*(_QWORD *)(a1[8] + 160) - *(_QWORD *)(a1[8] + 152)) >> 2;
  v3 = operator new(0xCuLL);
  v58 = (char *)(v3 + 3);
  v59 = (char *)(v3 + 3);
  *(_QWORD *)v3 = -1;
  v3[2] = -1;
  __p = v3;
  if (!(_DWORD)v2)
    goto LABEL_7;
  v4 = 0;
  do
  {
    v5 = a1[8];
    v56 = v4;
    sub_23996362C(v5, &v56, (uint64_t)&__p);
    v6 = a1[14];
    v7 = *((_DWORD *)__p + 1);
    v8 = (double *)(v6 + 24 * v7);
    v9 = (double *)(v6 + 24 * *(unsigned int *)__p);
    v10 = v9[1];
    v11 = *v8 - *v9;
    v12 = v8[1] - v10;
    v13 = v9[2];
    v14 = v8[2] - v13;
    v15 = *((_DWORD *)__p + 2);
    v16 = (double *)(v6 + 24 * v15);
    v17 = *v9 - *v16;
    v18 = v10 - v16[1];
    v19 = v13 - v16[2];
    v20 = v12 * v19 - v14 * v18;
    v21 = v14 * v17 - v11 * v19;
    v22 = v11 * v18 - v12 * v17;
    v23 = sqrt(v21 * v21 + v20 * v20 + v22 * v22);
    if (v23 != 0.0)
    {
      v24 = v20 / v23;
      v25 = v21 / v23;
      v26 = v22 / v23;
      v27 = v10 * (v21 / v23) + v24 * *v9 + v22 / v23 * v13;
      v28 = v24 * v24;
      v29 = v24 * (v21 / v23);
      v30 = v24 * (v22 / v23);
      v31 = v25 * v26;
      v32 = v26 * v26;
      v33 = v27 * v27;
      v34 = a1[11];
      v35 = v24 * v27;
      v36 = v25 * v27;
      v37 = v26 * v27;
      v38 = (double *)(v34 + 80 * *(unsigned int *)__p);
      v39 = v29 + v38[1];
      *v38 = v28 + *v38;
      v38[1] = v39;
      v40 = v25 * v25 + v38[3];
      v38[2] = v30 + v38[2];
      v38[3] = v40;
      v41 = v32 + v38[5];
      v38[4] = v31 + v38[4];
      v38[5] = v41;
      v42 = v38[7] - v36;
      v38[6] = v38[6] - v35;
      v38[7] = v42;
      v43 = v33 + v38[9];
      v38[8] = v38[8] - v37;
      v38[9] = v43;
      v44 = (double *)(v34 + 80 * v7);
      v45 = v29 + v44[1];
      *v44 = v28 + *v44;
      v44[1] = v45;
      v46 = v25 * v25 + v44[3];
      v44[2] = v30 + v44[2];
      v44[3] = v46;
      v47 = v32 + v44[5];
      v44[4] = v31 + v44[4];
      v44[5] = v47;
      v48 = v44[7] - v36;
      v44[6] = v44[6] - v35;
      v44[7] = v48;
      v49 = v33 + v44[9];
      v44[8] = v44[8] - v37;
      v44[9] = v49;
      v50 = (double *)(v34 + 80 * v15);
      v51 = v50[1];
      *v50 = v28 + *v50;
      v50[1] = v29 + v51;
      v52 = v50[3];
      v50[2] = v30 + v50[2];
      v50[3] = v25 * v25 + v52;
      v53 = v50[5];
      v50[4] = v31 + v50[4];
      v50[5] = v32 + v53;
      v54 = v50[7];
      v50[6] = v50[6] - v35;
      v50[7] = v54 - v36;
      v55 = v33 + v50[9];
      v50[8] = v50[8] - v37;
      v50[9] = v55;
    }
    ++v4;
  }
  while ((_DWORD)v2 != v4);
  v3 = __p;
  if (__p)
  {
LABEL_7:
    v58 = (char *)v3;
    operator delete(v3);
  }
}

void sub_2399F81D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399F81F0(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v2 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * a2);
  v3 = *v2;
  v4 = (std::__shared_weak_count *)v2[1];
  if (!v4)
    return v3;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return v3;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v3;
}

uint64_t sub_2399F826C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_239421038(a1 + 160, *(_QWORD **)(a1 + 168));
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_2399F82C8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x333333333333333)
      sub_2394189F8();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x333333333333333)
        sub_239418A80();
      v11 = (char *)operator new(80 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[80 * v7];
    v14 = &v11[80 * v10];
    v15 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 5) = *((_OWORD *)v5 - 5);
        v17 = *((_OWORD *)v5 - 4);
        v18 = *((_OWORD *)v5 - 3);
        v19 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v19;
        *((_OWORD *)v13 - 4) = v17;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 80;
        v5 -= 80;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2399F846C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  float64x2x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3) + a2;
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[8 * (v8 >> 3)];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 24;
      if (v18 < 0x138)
        goto LABEL_25;
      v19 = v18 / 0x18;
      if (&v12[v8 - 24 * v19 - 24] < v5 && &v5[-24 * v19 - 24] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v6 = &v5[-24 * v22];
      v23 = &v14[-24 * v22];
      v24 = (const double *)(v5 - 48);
      v25 = (double *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_f64(v24);
        vst3q_f64(v25, v28);
        v25 -= 6;
        v24 -= 6;
        v26 -= 2;
      }
      while (v26);
      v14 -= 24 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_QWORD *)v6 - 3);
          v6 -= 24;
          *((_QWORD *)v23 - 3) = v27;
          v23 -= 24;
          *((_QWORD *)v23 + 1) = *((_QWORD *)v6 + 1);
          *((_QWORD *)v23 + 2) = *((_QWORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

void sub_2399F86B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399F86C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2399F86F4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_2399F8764(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *a2;
  v4 = a2[1];
  v12 = 0;
  v13 = -1;
  v14 = -1;
  v15 = -1;
  v16 = 0;
  v6 = v4 - v5;
  if (v6)
    sub_2399F8880((char **)(a1 + 24), v6 >> 2, &v12);
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_250AF1448;
  v7[3] = 0xFFFFFFFF00000000;
  v7[5] = v3;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v7 + 3;
  *(_QWORD *)(a1 + 8) = v7;
  if (!v8)
    return a1;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2399F8858(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

void sub_2399F8880(char **a1, unint64_t a2, _OWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v13 = 32 * a2;
      v14 = &v7[32 * a2];
      do
      {
        v15 = a3[1];
        *(_OWORD *)v7 = *a3;
        *((_OWORD *)v7 + 1) = v15;
        v7 += 32;
        v13 -= 32;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 5;
    if ((v8 + a2) >> 59)
      sub_2394189F8();
    v9 = v6 - *a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 59)
        sub_239418A80();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[32 * v8];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    v19 = v16;
    do
    {
      v20 = a3[1];
      *(_OWORD *)v19 = *a3;
      *((_OWORD *)v19 + 1) = v20;
      v19 += 32;
      v17 -= 32;
    }
    while (v17);
    v21 = *a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *((_OWORD *)v7 - 2);
        *(_OWORD *)(v16 - 19) = *(_OWORD *)(v7 - 19);
        *((_OWORD *)v16 - 2) = v22;
        v16 -= 32;
        v7 -= 32;
      }
      while (v7 != v21);
      v7 = *a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[32 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_2399F89C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399F89D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_2399F8A08(uint64_t a1)
{
  double result;

  result = NAN;
  *(_QWORD *)(a1 + 24) = 0xFFFFFFFF00000000;
  return result;
}

BOOL sub_2399F8A18(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v4 = a3[1];
  v5 = *a3 - *a2;
  v6 = v4 - a2[1];
  v7 = a3[2];
  v8 = v7 - a2[2];
  v9 = *a1 - *a3;
  v10 = a1[1] - v4;
  v11 = a1[2] - v7;
  v12 = v6 * v11 - v8 * v10;
  v13 = v8 * v9 - v5 * v11;
  v14 = v5 * v10 - v6 * v9;
  v15 = sqrt(v13 * v13 + v12 * v12 + v14 * v14);
  if (v15 == 0.0)
    return 0;
  v16 = a4[2] - v7;
  v17 = a4[1] - v4;
  v18 = -v6;
  v19 = *a4 - *a3;
  v20 = v17 * -v8 + v6 * v16;
  v21 = v16 * -v5 + v8 * v19;
  v22 = v19 * v18 + v5 * v17;
  v23 = sqrt(v21 * v21 + v20 * v20 + v22 * v22);
  return fabs(v23) < 1.0e-11
      || v13 / v15 * (v21 / v23) + v12 / v15 * (v20 / v23) + v14 / v15 * (v22 / v23) < 0.173648178;
}

BOOL sub_2399F8B1C(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a2[2];
  v6 = a1[2];
  v7 = a3[1];
  v8 = a3[2];
  v9 = sqrt((v3 - v4) * (v3 - v4) + (*a2 - *a1) * (*a2 - *a1) + (v5 - v6) * (v5 - v6));
  v10 = sqrt((v7 - v3) * (v7 - v3) + (*a3 - *a2) * (*a3 - *a2) + (v8 - v5) * (v8 - v5));
  v11 = sqrt((v7 - v4) * (v7 - v4) + (*a3 - *a1) * (*a3 - *a1) + (v8 - v6) * (v8 - v6));
  return ((v11 + v9 + v10) * 0.5 - v11)
       * (((v11 + v9 + v10) * 0.5 - v10)
        * (((v11 + v9 + v10) * 0.5 - v9)
         * 8.0))
       / (v11
        * (v9
         * v10)) < 0.02;
}

uint64_t sub_2399F8BD4(_QWORD *a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = a7;
  v21 = a4;
  v20 = 0;
  sub_23993C9C8((uint64_t)a3, (double *)&v20);
  v19 = 0;
  sub_23993BC9C(a3, &v19);
  v12 = (uint64_t)(a1[1] - *a1) >> 4;
  v13 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2;
  if (v12 <= v13)
  {
    if (v12 < v13)
      *(_QWORD *)(a5 + 8) = *(_QWORD *)a5 + 4 * v12;
  }
  else
  {
    sub_2394EE834((void **)a5, v12 - v13);
  }
  v14 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 4;
  if (v12 <= v14)
  {
    if (v12 < v14)
      *(_QWORD *)(a6 + 8) = *(_QWORD *)a6 + 16 * v12;
  }
  else
  {
    sub_239932734((char **)a6, v12 - v14);
  }
  v15 = operator new(0x40uLL);
  *v15 = &off_250AF1480;
  v15[1] = a3;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = &v22;
  v15[5] = &v21;
  v15[6] = a5;
  v15[7] = a6;
  v24 = v15;
  sub_2399FC5A4(v12, v23, 0);
  v16 = v24;
  if (v24 == v23)
  {
    v17 = 4;
    v16 = v23;
    goto LABEL_13;
  }
  if (v24)
  {
    v17 = 5;
LABEL_13:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  sub_23993BC9C(a3, &v20);
  return 1;
}

void sub_2399F8D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a15 == v15)
  {
    (*(void (**)(void))(a12 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a15)
  {
    (*(void (**)(void))(*(_QWORD *)a15 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2399F8DA8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2399F8DBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250AF1480;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_2399F8E0C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250AF1480;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2399F8E44(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  char *v20;
  float32x4_t v21;
  _DWORD *v22;
  int *v23;
  int v24;
  _QWORD *v25;
  __int128 v27;
  void *__p;
  char *v29;
  char *v30;
  _BYTE v31[32];
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  if (*a3 - *a2 >= 0x20000)
    v6 = 0x20000;
  else
    v6 = *a3 - *a2;
  sub_23993BB5C((uint64_t)v31, *(id ***)(a1 + 8), 3, 2 * v6);
  __p = 0;
  v29 = 0;
  v30 = 0;
  if (!v6)
  {
    v7 = 0;
    if (v5 <= v4)
      goto LABEL_29;
    goto LABEL_10;
  }
  v7 = (char *)operator new(96 * v6);
  __p = v7;
  v30 = &v7[96 * v6];
  v8 = v7;
  do
  {
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_OWORD *)v8 + 1) = xmmword_239F028E0;
    *((_QWORD *)v8 + 4) = 0x7F7FFFFF3089705FLL;
    v8 += 48;
  }
  while (v8 != &v7[96 * v6]);
  v29 = &v7[96 * v6];
  if (v5 > v4)
  {
LABEL_10:
    v9 = 16 * v4;
    while (1)
    {
      if ((int)v5 - (int)v4 <= (int)v6)
        v12 = v5 - v4;
      else
        v12 = v6;
      if (v12 != v6)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)__p) >> 4);
        if (2 * v12 <= v13)
        {
          if (2 * v12 < v13)
            v29 = (char *)__p + 96 * v12;
        }
        else
        {
          sub_23993D8CC((char **)&__p, 2 * v12 - v13);
        }
      }
      if (v12)
      {
        v14 = (char *)__p;
        v15 = 84;
        v16 = v9;
        v17 = v12;
        do
        {
          v18 = *(_OWORD *)(**(_QWORD **)(a1 + 24) + v16);
          v19 = &v14[v15];
          *(_OWORD *)(v19 - 84) = *(_OWORD *)(**(_QWORD **)(a1 + 16) + v16);
          *(_OWORD *)(v19 - 68) = v18;
          *(_QWORD *)(v19 - 52) = 0x7F7FFFFF3089705FLL;
          v20 = (char *)__p + v15;
          *((_DWORD *)v20 - 13) = 0;
          *((_DWORD *)v20 - 12) = **(_DWORD **)(a1 + 32);
          v21 = vnegq_f32(*(float32x4_t *)(**(_QWORD **)(a1 + 24) + v16));
          *(_OWORD *)(v20 - 36) = *(_OWORD *)(**(_QWORD **)(a1 + 16) + v16);
          *(float32x4_t *)(v20 - 20) = v21;
          *(_QWORD *)(v20 - 4) = 0x7F7FFFFF3089705FLL;
          v14 = (char *)__p;
          v22 = (char *)__p + v15;
          *(v22 - 1) = 0;
          *v22 = **(_DWORD **)(a1 + 32);
          v16 += 16;
          v15 += 96;
          --v17;
        }
        while (v17);
      }
      v23 = *(int **)(a1 + 8);
      v24 = **(_DWORD **)(a1 + 40);
      v27 = *(_OWORD *)(a1 + 48);
      v33 = 0;
      v25 = operator new(0x30uLL);
      *v25 = &off_250AF14C8;
      v25[1] = v12;
      v25[2] = v4;
      *((_DWORD *)v25 + 6) = v24;
      *((_OWORD *)v25 + 2) = v27;
      v33 = v25;
      sub_23993CDF8(v23, (uint64_t)v31, (uint64_t *)&__p, v32, v4 + 3 * v6 >= v5);
      v10 = v33;
      if (v33 == v32)
      {
        v10 = v32;
        v11 = 4;
      }
      else
      {
        if (!v33)
          goto LABEL_13;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
      v4 += v6;
      v9 += 16 * v6;
      if (v4 >= v5)
      {
        v7 = (char *)__p;
        break;
      }
    }
  }
LABEL_29:
  if (v7)
  {
    v29 = v7;
    operator delete(v7);
  }
  return sub_23993BC98((uint64_t)v31);
}

void sub_2399F9118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23993BC98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399F9130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!__p)
  {
    sub_23993BC98((uint64_t)&a14);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_23993BC98((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_2399F91C0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2399F91D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250AF14C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_2399F921C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250AF14C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2399F924C(uint64_t result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  float *v15;
  __int128 v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;

  if (*(_QWORD *)(result + 8))
  {
    v2 = 0;
    v3 = 28;
    while (1)
    {
      v4 = *a2;
      v5 = *a2 + v3;
      v7 = *(float *)(v5 - 28);
      v6 = v5 - 28;
      v8 = v7;
      v9 = (float *)(v6 + 16);
      v10 = *(_DWORD *)(result + 24);
      if (v7 == -1.0)
        break;
      v11 = *(_DWORD *)(*a2 + v3 - 24);
      v12 = *v9;
      if (*v9 == -1.0)
      {
        if (v11 < v10)
          goto LABEL_18;
        goto LABEL_3;
      }
      v13 = *(_DWORD *)(v4 + v3 - 8);
      if (v11 < v10 && v13 < v10)
      {
        if (v8 >= v12)
          v17 = v6 + 16;
        else
          v17 = v6;
        v18 = (float *)(v4 + v3);
        if (v8 < v12)
        {
          v19 = *(v18 - 5);
          v20 = *(v18 - 4);
        }
        else
        {
          v19 = *(v18 - 1);
          v20 = *v18;
        }
        HIDWORD(v16) = 0;
        *(_QWORD *)&v16 = __PAIR64__(LODWORD(v20), LODWORD(v19));
        *((float *)&v16 + 2) = (float)(1.0 - v19) - v20;
        *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = *(_DWORD *)(v17 + 4);
        goto LABEL_26;
      }
      if (v11 < v10)
      {
LABEL_18:
        *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = v11;
        HIDWORD(v16) = 0;
        *(_QWORD *)&v16 = *(_QWORD *)(v4 + v3 - 20);
        *((float *)&v16 + 2) = (float)(1.0 - *(float *)&v16) - *((float *)&v16 + 1);
        goto LABEL_26;
      }
      if (v13 >= v10)
      {
LABEL_3:
        *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = -1;
        ++v2;
        v3 += 32;
        if (v2 >= *(_QWORD *)(result + 8))
          return result;
      }
      else
      {
LABEL_16:
        *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = v13;
        v15 = (float *)(v4 + v3);
        HIDWORD(v16) = 0;
        *(_QWORD *)&v16 = *(_QWORD *)(v15 - 1);
        *((float *)&v16 + 2) = (float)(1.0 - *(float *)&v16) - *v15;
LABEL_26:
        *(_OWORD *)(**(_QWORD **)(result + 40) + 16 * (v2 + *(_QWORD *)(result + 16))) = v16;
        ++v2;
        v3 += 32;
        if (v2 >= *(_QWORD *)(result + 8))
          return result;
      }
    }
    if (*v9 != -1.0)
    {
      v13 = *(_DWORD *)(v4 + v3 - 8);
      if (v13 < v10)
        goto LABEL_16;
    }
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_2399F93F8(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "code"))
  {

    return 1;
  }
  else
  {

    return 0;
  }
}

void sub_2399F944C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_2399F945C(unint64_t **a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  _BOOL8 v49;
  char *v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  char *v70;
  void *v71;
  void *v72;
  void **v74;
  void *v75;
  void *v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  uint64_t v81;
  char *v82;
  _QWORD v83[2];

  v83[1] = *MEMORY[0x24BDAC8D0];
  v2 = MEMORY[0x23B83EC40]();
  v3 = MTLCreateSystemDefaultDevice();
  v83[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v83, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v75 = (void *)v2;
  v76 = v4;
  v5 = objc_msgSend(v4, "count");
  v6 = v5;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v7 = *a1;
  v8 = a1[1];
  v74 = (void **)a1;
  if (*a1 != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = *v7;
      if (*v7 >= v6)
        goto LABEL_5;
      if (v9 >= v82)
        break;
      *(_QWORD *)v9 = v11;
      v10 = (uint64_t)(v9 + 8);
LABEL_4:
      v81 = v10;
      v9 = (char *)v10;
LABEL_5:
      if (++v7 == v8)
        goto LABEL_66;
    }
    v12 = (char *)v80;
    v13 = v9 - (_BYTE *)v80;
    v14 = (v9 - (_BYTE *)v80) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_2394189F8();
    v16 = v82 - (_BYTE *)v80;
    if ((v82 - (_BYTE *)v80) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_239418A80();
      v18 = operator new(8 * v17);
      v19 = (unint64_t *)&v18[8 * v14];
      *v19 = v11;
      v10 = (uint64_t)(v19 + 1);
      if (v9 == v12)
        goto LABEL_22;
    }
    else
    {
      v18 = 0;
      v19 = (unint64_t *)(8 * v14);
      *(_QWORD *)(8 * v14) = v11;
      v10 = 8 * v14 + 8;
      if (v9 == v12)
        goto LABEL_22;
    }
    v20 = v9 - 8 - v12;
    if (v20 >= 0x168)
    {
      if (&v18[v13 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[v13 - 8])
      {
        v21 = v9;
      }
      else if (&v9[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
      {
        v21 = v9;
      }
      else if ((unint64_t)(v9 - v18 - v13) >= 0x20)
      {
        v23 = (v20 >> 3) + 1;
        v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v9[-v24];
        v19 = (unint64_t *)((char *)v19 - v24);
        v25 = &v18[8 * v14 - 16];
        v26 = v9 - 16;
        v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          v80 = v19;
          v81 = v10;
          v82 = &v18[8 * v17];
          if (v12)
            operator delete(v12);
          goto LABEL_4;
        }
      }
      else
      {
        v21 = v9;
      }
    }
    else
    {
      v21 = v9;
    }
    do
    {
      v22 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *--v19 = v22;
    }
    while (v21 != v12);
    goto LABEL_22;
  }
  if (v5)
  {
    v29 = 0;
    v30 = 0;
    while (v29 < v82)
    {
      *(_QWORD *)v29 = v30;
      v9 = v29 + 8;
LABEL_37:
      v81 = (uint64_t)v9;
      ++v30;
      v29 = v9;
      if (v30 == v6)
        goto LABEL_66;
    }
    v31 = (char *)v80;
    v32 = v29 - (_BYTE *)v80;
    v33 = (v29 - (_BYTE *)v80) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      sub_2394189F8();
    v35 = v82 - (_BYTE *)v80;
    if ((v82 - (_BYTE *)v80) >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_239418A80();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = v30;
      v9 = v38 + 8;
      if (v29 == v31)
        goto LABEL_53;
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = v30;
      v9 = (char *)(8 * v33 + 8);
      if (v29 == v31)
        goto LABEL_53;
    }
    v39 = v29 - 8 - v31;
    if (v39 >= 0x168)
    {
      if (&v37[v32 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v37[v32 - 8])
      {
        v40 = v29;
      }
      else if (&v29[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v29 - 8)
      {
        v40 = v29;
      }
      else if ((unint64_t)(v29 - v37 - v32) >= 0x20)
      {
        v42 = (v39 >> 3) + 1;
        v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v29[-v43];
        v38 -= v43;
        v44 = &v37[8 * v33 - 16];
        v45 = v29 - 16;
        v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 4;
        }
        while (v46);
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_53:
          v80 = v38;
          v81 = (uint64_t)v9;
          v82 = &v37[8 * v36];
          if (v31)
            operator delete(v31);
          goto LABEL_37;
        }
      }
      else
      {
        v40 = v29;
      }
    }
    else
    {
      v40 = v29;
    }
    do
    {
      v41 = *((_QWORD *)v40 - 1);
      v40 -= 8;
      *((_QWORD *)v38 - 1) = v41;
      v38 -= 8;
    }
    while (v40 != v31);
    goto LABEL_53;
  }
  v9 = 0;
LABEL_66:
  __p = 0;
  v78 = 0;
  v79 = 0;
  v48 = (char *)v80;
  v49 = v80 != v9;
  if (v80 == v9)
    goto LABEL_101;
  v50 = 0;
  do
  {
    while (1)
    {
      v51 = *(_QWORD *)v48;
      if (v50 >= v79)
        break;
      *(_QWORD *)v50 = v51;
      v50 += 8;
      v78 = v50;
      v48 += 8;
      if (v48 == v9)
        goto LABEL_98;
    }
    v52 = (char *)__p;
    v53 = v50 - (_BYTE *)__p;
    v54 = (v50 - (_BYTE *)__p) >> 3;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      sub_2394189F8();
    v56 = v79 - (_BYTE *)__p;
    if ((v79 - (_BYTE *)__p) >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 61)
        sub_239418A80();
      v58 = operator new(8 * v57);
      v59 = &v58[8 * v54];
      *v59 = v51;
      v60 = (uint64_t)(v59 + 1);
      if (v50 == v52)
        goto LABEL_84;
    }
    else
    {
      v58 = 0;
      v59 = (_QWORD *)(8 * v54);
      *(_QWORD *)(8 * v54) = v51;
      v60 = 8 * v54 + 8;
      if (v50 == v52)
        goto LABEL_84;
    }
    v61 = v50 - 8 - v52;
    if (v61 < 0x168)
    {
      v62 = v50;
      goto LABEL_83;
    }
    if (&v58[v53 - 8 - (v61 & 0xFFFFFFFFFFFFFFF8)] > &v58[v53 - 8])
    {
      v62 = v50;
      do
      {
LABEL_83:
        v63 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *--v59 = v63;
      }
      while (v62 != v52);
      goto LABEL_84;
    }
    if (&v50[-(v61 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
    {
      v62 = v50;
      goto LABEL_83;
    }
    if ((unint64_t)(v50 - v58 - v53) < 0x20)
    {
      v62 = v50;
      goto LABEL_83;
    }
    v64 = (v61 >> 3) + 1;
    v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v50[-v65];
    v59 = (_QWORD *)((char *)v59 - v65);
    v66 = &v58[8 * v54 - 16];
    v67 = v50 - 16;
    v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v69 = *(_OWORD *)v67;
      *(v66 - 1) = *((_OWORD *)v67 - 1);
      *v66 = v69;
      v66 -= 2;
      v67 -= 32;
      v68 -= 4;
    }
    while (v68);
    if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_83;
LABEL_84:
    __p = v59;
    v78 = (char *)v60;
    v79 = &v58[8 * v57];
    if (v52)
      operator delete(v52);
    v50 = (char *)v60;
    v78 = (char *)v60;
    v48 += 8;
  }
  while (v48 != v9);
LABEL_98:
  v70 = (char *)__p;
  if (__p == v50)
  {
    v49 = 0;
    v72 = v75;
    v71 = v76;
    if (!__p)
      goto LABEL_105;
    goto LABEL_104;
  }
  if (&__p == v74)
  {
    v49 = 1;
    v72 = v75;
    v71 = v76;
    if (!__p)
      goto LABEL_105;
LABEL_104:
    v78 = v70;
    operator delete(v70);
    goto LABEL_105;
  }
  sub_23945D3D0(v74, (char *)__p, v50, (v50 - (_BYTE *)__p) >> 3);
  v49 = 1;
LABEL_101:
  v70 = (char *)__p;
  v72 = v75;
  v71 = v76;
  if (__p)
    goto LABEL_104;
LABEL_105:
  if (v80)
  {
    v81 = (uint64_t)v80;
    operator delete(v80);
  }

  objc_autoreleasePoolPop(v72);
  return v49;
}

void sub_2399F9AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_2399F9B40(void **a1)
{
  void *v2;
  id v3;
  void *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  uint64_t i;
  char *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  void *v48;
  void **v49;
  void *v50;
  void *__p;
  uint64_t v52;
  char *v53;
  _QWORD v54[2];

  v54[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x23B83EC40]();
  v3 = MTLCreateSystemDefaultDevice();
  v54[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v54, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "count");
  if (!v5)
    goto LABEL_69;
  v48 = v2;
  v49 = a1;
  v50 = v4;
  __p = 0;
  v52 = 0;
  v53 = 0;
  v6 = (unint64_t *)*a1;
  v7 = (unint64_t *)a1[1];
  if (*a1 != v7)
  {
    v8 = 0;
    while (1)
    {
      v10 = *v6;
      if (*v6 >= v5)
        goto LABEL_6;
      if (v8 >= v53)
        break;
      *(_QWORD *)v8 = v10;
      v9 = (uint64_t)(v8 + 8);
LABEL_5:
      v52 = v9;
      v8 = (char *)v9;
LABEL_6:
      if (++v6 == v7)
        goto LABEL_65;
    }
    v11 = (char *)__p;
    v12 = v8 - (_BYTE *)__p;
    v13 = (v8 - (_BYTE *)__p) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_2394189F8();
    v15 = v53 - (_BYTE *)__p;
    if ((v53 - (_BYTE *)__p) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_239418A80();
      v17 = operator new(8 * v16);
      v18 = (unint64_t *)&v17[8 * v13];
      *v18 = v10;
      v9 = (uint64_t)(v18 + 1);
      if (v8 == v11)
        goto LABEL_23;
    }
    else
    {
      v17 = 0;
      v18 = (unint64_t *)(8 * v13);
      *(_QWORD *)(8 * v13) = v10;
      v9 = 8 * v13 + 8;
      if (v8 == v11)
        goto LABEL_23;
    }
    v19 = v8 - 8 - v11;
    if (v19 >= 0x168)
    {
      if (&v17[v12 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[v12 - 8])
      {
        v20 = v8;
      }
      else if (&v8[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
      {
        v20 = v8;
      }
      else if ((unint64_t)(v8 - v17 - v12) >= 0x20)
      {
        v22 = (v19 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v20 = &v8[-v23];
        v18 = (unint64_t *)((char *)v18 - v23);
        v24 = &v17[8 * v13 - 16];
        v25 = v8 - 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          __p = v18;
          v52 = v9;
          v53 = &v17[8 * v16];
          if (v11)
            operator delete(v11);
          goto LABEL_5;
        }
      }
      else
      {
        v20 = v8;
      }
    }
    else
    {
      v20 = v8;
    }
    do
    {
      v21 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *--v18 = v21;
    }
    while (v20 != v11);
    goto LABEL_23;
  }
  v28 = 0;
  for (i = 0; i != v5; ++i)
  {
    if (v28 < v53)
    {
      *(_QWORD *)v28 = i;
      v8 = v28 + 8;
      goto LABEL_37;
    }
    v30 = (char *)__p;
    v31 = v28 - (_BYTE *)__p;
    v32 = (v28 - (_BYTE *)__p) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_2394189F8();
    v34 = v53 - (_BYTE *)__p;
    if ((v53 - (_BYTE *)__p) >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 61)
        sub_239418A80();
      v36 = operator new(8 * v35);
      v37 = &v36[8 * v32];
      *(_QWORD *)v37 = i;
      v8 = v37 + 8;
      if (v28 == v30)
        goto LABEL_53;
    }
    else
    {
      v36 = 0;
      v37 = (char *)(8 * v32);
      *(_QWORD *)(8 * v32) = i;
      v8 = (char *)(8 * v32 + 8);
      if (v28 == v30)
        goto LABEL_53;
    }
    v38 = v28 - 8 - v30;
    if (v38 < 0x168)
    {
      v39 = v28;
      goto LABEL_52;
    }
    if (&v36[v31 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v36[v31 - 8])
    {
      v39 = v28;
      do
      {
LABEL_52:
        v40 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *((_QWORD *)v37 - 1) = v40;
        v37 -= 8;
      }
      while (v39 != v30);
      goto LABEL_53;
    }
    if (&v28[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8)
    {
      v39 = v28;
      goto LABEL_52;
    }
    if ((unint64_t)(v28 - v36 - v31) < 0x20)
    {
      v39 = v28;
      goto LABEL_52;
    }
    v41 = (v38 >> 3) + 1;
    v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v28[-v42];
    v37 -= v42;
    v43 = &v36[8 * v32 - 16];
    v44 = v28 - 16;
    v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_52;
LABEL_53:
    __p = v37;
    v52 = (uint64_t)v8;
    v53 = &v36[8 * v35];
    if (v30)
      operator delete(v30);
LABEL_37:
    v52 = (uint64_t)v8;
    v28 = v8;
  }
LABEL_65:
  v47 = __p;
  if (&__p != v49)
  {
    sub_23945D3D0(v49, (char *)__p, v8, (v8 - (_BYTE *)__p) >> 3);
    v47 = __p;
  }
  v4 = v50;
  v2 = v48;
  if (v47)
  {
    v52 = (uint64_t)v47;
    operator delete(v47);
  }
LABEL_69:

  objc_autoreleasePoolPop(v2);
}

void sub_2399F9FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

int8x8_t sub_2399F9FF4(unsigned __int8 *a1)
{
  int8x8_t *v1;
  unsigned int v2;
  int8x16_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int8x16_t v6;
  int8x8_t result;

  v1 = (int8x8_t *)(a1 + 28289);
  v2 = *a1;
  v3 = vdupq_n_s8(v2);
  v4 = -28288;
  do
  {
    v5 = &a1[v4];
    v6 = veorq_s8(v3, *(int8x16_t *)&a1[v4 + 28305]);
    *(int8x16_t *)(v5 + 28289) = veorq_s8(v3, *(int8x16_t *)&a1[v4 + 28289]);
    *(int8x16_t *)(v5 + 28305) = v6;
    v4 += 32;
  }
  while (v4);
  result = veor_s8(vdup_n_s8(v2), *v1);
  *v1 = result;
  a1[28297] ^= v2;
  a1[28298] ^= v2;
  a1[28299] ^= v2;
  a1[28300] = 0;
  return result;
}

id sub_2399FA070(void *a1)
{
  unsigned __int8 v1;
  id v2;
  id v4;

  v4 = a1;
  v1 = atomic_load((unsigned __int8 *)&qword_25693C910);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25693C910))
  {
    sub_2399FA128();
    qword_25693C908 = objc_claimAutoreleasedReturnValue();
    __cxa_guard_release(&qword_25693C910);
  }
  v2 = (id)qword_25693C908;

  return v2;
}

void sub_2399FA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_guard_abort(&qword_25693C910);

  _Unwind_Resume(a1);
}

id sub_2399FA128()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v8;
  unsigned __int8 __dst[28301];
  uint64_t v10;

  v0 = MEMORY[0x24BDAC7A8]();
  v10 = *MEMORY[0x24BDAC8D0];
  v1 = (void *)MEMORY[0x24BDD17C8];
  v2 = atomic_load((unsigned __int8 *)&qword_25693C900);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693C900))
  {
    memcpy(__dst, &unk_239F03998, sizeof(__dst));
    sub_2399F9FF4(__dst);
    sub_23941A4FC(&qword_25693C918, v8);
    __cxa_atexit(MEMORY[0x24BEDACF0], &qword_25693C918, &dword_23940C000);
    __cxa_guard_release(&qword_25693C900);
  }
  if (byte_25693C92F >= 0)
    v3 = &qword_25693C918;
  else
    v3 = (uint64_t *)qword_25693C918;
  objc_msgSend(v1, "stringWithUTF8String:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setLanguageVersion:", 131075);
  v6 = (void *)objc_msgSend(**(id **)v0, "newLibraryWithSource:options:error:", v4, v5, **(_QWORD **)(v0 + 8));

  return v6;
}

void sub_2399FA280(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C900);
  _Unwind_Resume(a1);
}

void sub_2399FA298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_2399FA2BC(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  void *v13;

  v7 = a1;
  v8 = v7;
  if (a4)
  {
    sub_2399FA070(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    return v9;
  }
  else
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v8, "newLibraryWithURL:error:", v12, a2);

    return v13;
  }
}

void sub_2399FA380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2399FA398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2399FA3AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399FA3BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2399FA3CC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  int v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  double v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  unsigned int v47;
  char *v48;
  __int128 v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  __int128 v61;
  int v62;
  void *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  void *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  void *v99;
  id v100;
  id v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  void *v106;
  char *v107;
  char *v108;
  char *v109;
  void *v110;
  uint64_t v112;
  int v113;
  id v115;
  void *v116;
  id v117;
  void *v118;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  _QWORD v133[3];
  _QWORD v134[3];
  _QWORD v135[3];
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  id v142;
  void *v143[2];
  char v144;
  char *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  id v149;
  id v150;
  id v151;
  char *v152;
  char *v153;
  unint64_t v154;
  id v155;
  int v156[3];

  v126 = *(_QWORD *)(a2 + 4);
  v13 = a5;
  v14 = MEMORY[0x23B83EC40]();
  v15 = *a1;
  v155 = 0;
  sub_2399FA2BC(v15, (uint64_t)&v155, a6, a8);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v155;
  v116 = (void *)v14;
  v113 = v13;
  if (v17)
  {
    v18 = v17;
    if (v13)
      *(_DWORD *)(a4 + 384) = 5;
    v19 = *(_QWORD *)(a7 + 24);
    v117 = v18;
    if (v19)
    {
      HIBYTE(v154) = 0;
      LOBYTE(v152) = 0;
      LODWORD(v145) = 5;
      (*(void (**)(uint64_t, char **, char **))(*(_QWORD *)v19 + 48))(v19, &v145, &v152);
      if (SHIBYTE(v154) < 0)
        operator delete(v152);
    }
    v125 = 0;
    v20 = 0;
LABEL_8:
    v118 = 0;
    v21 = 0;
    goto LABEL_16;
  }
  v22 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("fwt"));
  v23 = *a1;
  v151 = 0;
  v121 = objc_msgSend(v23, "newComputePipelineStateWithFunction:error:", v22, &v151);
  v24 = v151;
  if (v24)
  {
    v25 = v24;
    if (v113)
      *(_DWORD *)(a4 + 384) = 5;
    v26 = *(_QWORD *)(a7 + 24);
    v117 = v25;
    if (v26)
    {
      HIBYTE(v154) = 0;
      LOBYTE(v152) = 0;
      LODWORD(v145) = 5;
      (*(void (**)(uint64_t, char **, char **))(*(_QWORD *)v26 + 48))(v26, &v145, &v152);
      if (SHIBYTE(v154) < 0)
        operator delete(v152);
    }

    v125 = 0;
    v118 = 0;
    v21 = 0;
    v20 = (void *)v121;
  }
  else
  {

    v53 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("bcwt"));
    v54 = *a1;
    v150 = 0;
    v20 = (void *)v121;
    v125 = objc_msgSend(v54, "newComputePipelineStateWithFunction:error:", v53, &v150);
    v55 = v150;
    if (v55)
    {
      v56 = v55;
      if (v113)
        *(_DWORD *)(a4 + 384) = 5;
      v57 = *(_QWORD *)(a7 + 24);
      v117 = v56;
      if (v57)
      {
        HIBYTE(v154) = 0;
        LOBYTE(v152) = 0;
        LODWORD(v145) = 5;
        (*(void (**)(uint64_t, char **, char **))(*(_QWORD *)v57 + 48))(v57, &v145, &v152);
        if (SHIBYTE(v154) < 0)
          operator delete(v152);
      }

      goto LABEL_8;
    }

    v99 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("grre"));
    v100 = *a1;
    v149 = 0;
    v118 = (void *)objc_msgSend(v100, "newComputePipelineStateWithFunction:error:", v99, &v149);
    v101 = v149;
    v21 = v101 == 0;
    v117 = v101;
    if (v101)
    {
      if (v113)
        *(_DWORD *)(a4 + 384) = 5;
      v102 = *(_QWORD *)(a7 + 24);
      if (v102)
      {
        HIBYTE(v154) = 0;
        LOBYTE(v152) = 0;
        LODWORD(v145) = 5;
        (*(void (**)(uint64_t, char **, char **))(*(_QWORD *)v102 + 48))(v102, &v145, &v152);
        if (SHIBYTE(v154) < 0)
          operator delete(v152);
      }
    }

  }
LABEL_16:
  v27 = v126;
  v28 = HIDWORD(v126);
  if (HIDWORD(v126) >= v126)
    v29 = v126;
  else
    v29 = HIDWORD(v126);
  v30 = log2((double)v29);
  v148 = v126;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  if (!v21)
  {
    v43 = 0;
    v44 = 0;
    v45 = (void *)v125;
    v46 = v116;
    goto LABEL_100;
  }
  v31 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (4 * *(_DWORD *)(a2 + 4) * *(_DWORD *)(a2 + 8)), 0);
  if (v31)
  {
    v115 = objc_retainAutorelease(v31);
    v32 = objc_msgSend(v115, "contents");
    v124 = (v30 + -1.0);
    if (HIDWORD(v126) && (_DWORD)v126)
    {
      v34 = 0;
      v35 = 0;
      v36 = 2;
      do
      {
        v37 = 0;
        v38 = v36;
        v39 = v34;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a3 + 16) + ((v37 + v35 * *(_DWORD *)(a3 + 4)) * *(_DWORD *)(a3 + 12))))
          {
            *(_BYTE *)(v32 + v39) = (int)(float)(*(float *)(*(_QWORD *)(a2 + 16) + 4 * (v38 - 2)) * 255.0);
            v42 = 4 * (v35 * v126 + v37);
            *(_BYTE *)(v32 + v39 + 1) = (int)(float)(*(float *)(*(_QWORD *)(a2 + 16) + 4 * (v38 - 1)) * 255.0);
            v40 = (int)(float)(*(float *)(*(_QWORD *)(a2 + 16) + 4 * v38) * 255.0);
            v41 = -1;
          }
          else
          {
            LOBYTE(v40) = 0;
            v41 = 0;
            *(_BYTE *)(v32 + v39) = 0;
            *(_BYTE *)(v32 + v39 + 1) = 0;
            v42 = v39;
          }
          *(_BYTE *)(v32 + (v42 | 2)) = v40;
          *(_BYTE *)(v32 + (v42 | 3)) = v41;
          ++v37;
          v39 += 4;
          v38 += 3;
        }
        while (v126 != v37);
        ++v35;
        v34 += 4 * v126;
        v36 += 3 * v126;
      }
      while (v35 != HIDWORD(v126));
    }
    if ((_DWORD)v124)
    {
      *(_QWORD *)&v33 = *(_QWORD *)(a2 + 4);
      v127 = v33;
      v47 = (v30 + -1.0);
      while (1)
      {
        *((_QWORD *)&v49 + 1) = *((_QWORD *)&v127 + 1);
        *(uint32x2_t *)&v49 = vshr_n_u32(*(uint32x2_t *)&v127, 1uLL);
        v127 = v49;
        v50 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (4 * DWORD1(v49) * v49), 0);
        v142 = v50;
        if (!v50)
          break;
        v143[0] = (void *)v127;
        v51 = v153;
        if ((unint64_t)v153 < v154)
        {
          *(_QWORD *)v51 = v50;
          *((void **)v51 + 1) = v143[0];
          v48 = v51 + 16;
        }
        else
        {
          v48 = sub_239718BC8(&v152, &v142, v143);
        }
        v153 = v48;

        if (!--v47)
        {
          v59 = (v30 + -1.0);
          while (1)
          {
            v61 = v127;
            v62 = DWORD1(v127);
            *(int32x2_t *)&v61 = vadd_s32(*(int32x2_t *)&v61, *(int32x2_t *)&v61);
            v127 = v61;
            v63 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (8 * v62 * v61), 0);
            v142 = v63;
            if (!v63)
              break;
            v143[0] = (void *)v127;
            v64 = v146;
            if ((unint64_t)v146 < v147)
            {
              *(_QWORD *)v64 = v63;
              *((void **)v64 + 1) = v143[0];
              v60 = v64 + 16;
            }
            else
            {
              v60 = sub_239718BC8(&v145, &v142, v143);
            }
            v146 = v60;

            if (!--v59)
              goto LABEL_61;
          }
          if (v113)
            *(_DWORD *)(a4 + 384) = 2;
          v58 = *(_QWORD *)(a7 + 24);
          v45 = (void *)v125;
          v46 = v116;
          if (v58)
            goto LABEL_96;
          goto LABEL_99;
        }
      }
      if (v113)
        *(_DWORD *)(a4 + 384) = 2;
      v58 = *(_QWORD *)(a7 + 24);
      v45 = (void *)v125;
      v46 = v116;
      if (v58)
      {
LABEL_96:
        v144 = 0;
        LOBYTE(v143[0]) = 0;
        v156[0] = 2;
        (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v58 + 48))(v58, v156, v143);
        if (v144 < 0)
          operator delete(v143[0]);

        goto LABEL_99;
      }
      goto LABEL_99;
    }
LABEL_61:
    v122 = v20;
    objc_msgSend(a1[1], "commandBuffer");
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = (void *)v125;
    if ((_DWORD)v124)
    {
      v65 = v152;
      v66 = objc_msgSend(v20, "threadExecutionWidth");
      v67 = objc_msgSend(v20, "maxTotalThreadsPerThreadgroup");
      v128 = *((_QWORD *)v65 + 1);
      objc_msgSend(v123, "computeCommandEncoder");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v68, "setBuffer:offset:atIndex:", v115, 0, 0);
      objc_msgSend(v68, "setBytes:length:atIndex:", &v148, 8, 1);
      objc_msgSend(v68, "setBytes:length:atIndex:", v152 + 8, 8, 2);
      objc_msgSend(v68, "setBuffer:offset:atIndex:", *(_QWORD *)v152, 0, 3);
      objc_msgSend(v68, "setComputePipelineState:", v20);
      v139 = (v66 + v128 - 1) / v66;
      v140 = (v67 / v66 + HIDWORD(v128) - 1) / (v67 / v66);
      v141 = 1;
      v136 = v66;
      v137 = v67 / v66;
      v138 = 1;
      objc_msgSend(v68, "dispatchThreadgroups:threadsPerThreadgroup:", &v139, &v136);
      objc_msgSend(v68, "endEncoding");

      v120 = (v124 - 1);
      if ((_DWORD)v124 != 1)
      {
        v69 = 0;
        v70 = v124 - 1;
        v71 = 0;
        do
        {
          v72 = v152;
          v73 = objc_msgSend(v122, "threadExecutionWidth");
          v74 = objc_msgSend(v122, "maxTotalThreadsPerThreadgroup");
          v129 = *(_QWORD *)&v72[v69 + 24];
          objc_msgSend(v123, "computeCommandEncoder");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&v152[v69], 0, 0);
          objc_msgSend(v75, "setBytes:length:atIndex:", &v152[16 * v71 + 8], 8, 1);
          objc_msgSend(v75, "setBytes:length:atIndex:", &v152[v69 + 24], 8, 2);
          objc_msgSend(v75, "setBuffer:offset:atIndex:", *(_QWORD *)&v152[v69 + 16], 0, 3);
          objc_msgSend(v75, "setComputePipelineState:", v122);
          v139 = (v73 + v129 - 1) / v73;
          v140 = (v74 / v73 + HIDWORD(v129) - 1) / (v74 / v73);
          v141 = 1;
          v136 = v73;
          v137 = v74 / v73;
          v138 = 1;
          objc_msgSend(v75, "dispatchThreadgroups:threadsPerThreadgroup:", &v139, &v136);
          objc_msgSend(v75, "endEncoding");

          ++v71;
          v69 += 16;
          --v70;
        }
        while (v70);
      }
      v76 = 0;
      v77 = 0;
      v45 = (void *)v125;
      v112 = (v124 - 2);
      do
      {
        v78 = v145;
        v79 = objc_msgSend(v45, "threadExecutionWidth");
        v80 = objc_msgSend(v45, "maxTotalThreadsPerThreadgroup");
        v130 = *(_QWORD *)&v78[v76 + 8];
        objc_msgSend(v123, "computeCommandEncoder");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = v81;
        if (v77)
        {
          if (-v120 == v77)
          {
            objc_msgSend(v81, "setBuffer:offset:atIndex:", v115, 0, 0);
            objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)&v145[16 * v120 - 16], 0, 1);
            objc_msgSend(v82, "setBytes:length:atIndex:", &v148, 8, 2);
            objc_msgSend(v82, "setBytes:length:atIndex:", &v145[16 * v120 - 8], 8, 3);
            v83 = &v145[16 * v120];
          }
          else
          {
            objc_msgSend(v81, "setBuffer:offset:atIndex:", *(_QWORD *)&v152[16 * (v124 + v77 - 2)], 0, 0);
            objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)&v145[v76 - 16], 0, 1);
            objc_msgSend(v82, "setBytes:length:atIndex:", &v152[16 * (v124 + v77 - 2) + 8], 8, 2);
            objc_msgSend(v82, "setBytes:length:atIndex:", &v145[v76 - 8], 8, 3);
            v83 = &v145[v76];
          }
        }
        else
        {
          objc_msgSend(v81, "setBuffer:offset:atIndex:", *(_QWORD *)&v152[16 * v112], 0, 0);
          objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)&v152[16 * v120], 0, 1);
          objc_msgSend(v82, "setBytes:length:atIndex:", &v152[16 * v112 + 8], 8, 2);
          objc_msgSend(v82, "setBytes:length:atIndex:", &v152[16 * v120 + 8], 8, 3);
          v83 = v145;
        }
        objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)v83, 0, 4);
        objc_msgSend(v82, "setComputePipelineState:", v125);
        v135[0] = (v79 + v130 - 1) / v79;
        v135[1] = (v80 / v79 + HIDWORD(v130) - 1) / (v80 / v79);
        v135[2] = 1;
        v134[0] = v79;
        v134[1] = v80 / v79;
        v134[2] = 1;
        objc_msgSend(v82, "dispatchThreadgroups:threadsPerThreadgroup:", v135, v134);
        objc_msgSend(v82, "endEncoding");

        --v77;
        v76 += 16;
        v45 = (void *)v125;
      }
      while (v124 + v77);
    }
    v84 = objc_msgSend(v118, "threadExecutionWidth");
    v85 = objc_msgSend(v118, "maxTotalThreadsPerThreadgroup");
    v131 = v148;
    objc_msgSend(v123, "computeCommandEncoder");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v122;
    objc_msgSend(v86, "setBuffer:offset:atIndex:", *(_QWORD *)&v145[16 * (v124 - 1)], 0, 0);
    objc_msgSend(v86, "setBuffer:offset:atIndex:", v115, 0, 1);
    objc_msgSend(v86, "setBytes:length:atIndex:", &v148, 8, 2);
    objc_msgSend(v86, "setComputePipelineState:", v118);
    v133[0] = (v84 + v131 - 1) / v84;
    v133[1] = (v85 / v84 + HIDWORD(v131) - 1) / (v85 / v84);
    v133[2] = 1;
    v132[0] = v84;
    v132[1] = v85 / v84;
    v132[2] = 1;
    objc_msgSend(v86, "dispatchThreadgroups:threadsPerThreadgroup:", v133, v132);
    objc_msgSend(v86, "endEncoding");

    sub_2399FCF18();
    objc_msgSend(v123, "commit");
    objc_msgSend(v123, "waitUntilCompleted");
    objc_msgSend(v123, "error");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v84) = sub_2399F93F8(v87);

    if ((_DWORD)v84)
    {
      if (v113)
        *(_DWORD *)(a4 + 384) = 16;
      v88 = *(_QWORD *)(a7 + 24);
      v46 = v116;
      if (v88)
      {
        v144 = 0;
        LOBYTE(v143[0]) = 0;
        LODWORD(v142) = 16;
        (*(void (**)(uint64_t, id *, void **))(*(_QWORD *)v88 + 48))(v88, &v142, v143);
        if (v144 < 0)
          operator delete(v143[0]);
      }

LABEL_99:
      v43 = 0;
      v44 = v115;
      goto LABEL_100;
    }

    v44 = objc_retainAutorelease(v115);
    v89 = objc_msgSend(v44, "contents");
    if (v28 && (_DWORD)v27)
    {
      v91 = 0;
      v92 = 0;
      v93 = *(_QWORD *)(a2 + 16);
      v94 = 2;
      do
      {
        v95 = 0;
        v96 = v94;
        do
        {
          LOBYTE(v90) = *(_BYTE *)(v89 + v96 - 2);
          *(float *)&v97 = (float)LODWORD(v90) / 255.0;
          *(float *)(v93 + 4 * (v91 + v95)) = *(float *)&v97;
          LOBYTE(v97) = *(_BYTE *)(v89 + v96 - 1);
          *(float *)&v98 = (float)v97 / 255.0;
          *(float *)(v93 + 4 * (v91 + v95 + 1)) = *(float *)&v98;
          LOBYTE(v98) = *(_BYTE *)(v89 + v96);
          v90 = (float)v98 / 255.0;
          *(float *)(v93 + 4 * (v91 + v95 + 2)) = v90;
          v95 += 3;
          v96 += 4;
        }
        while (v27 + 2 * v27 != v95);
        ++v92;
        v91 += 3 * v27;
        v94 += 4 * v27;
      }
      while (v92 != v28);
    }
    v43 = 1;
    v46 = v116;
  }
  else
  {
    if (v113)
      *(_DWORD *)(a4 + 384) = 2;
    v52 = *(_QWORD *)(a7 + 24);
    v45 = (void *)v125;
    v46 = v116;
    if (v52)
    {
      v144 = 0;
      LOBYTE(v143[0]) = 0;
      LODWORD(v142) = 2;
      (*(void (**)(uint64_t, id *, void **))(*(_QWORD *)v52 + 48))(v52, &v142, v143);
      if (v144 < 0)
        operator delete(v143[0]);
    }
    v43 = 0;
    v44 = 0;
  }
LABEL_100:

  v103 = v145;
  if (v145)
  {
    v104 = v146;
    v105 = v145;
    if (v146 != v145)
    {
      do
      {
        v106 = (void *)*((_QWORD *)v104 - 2);
        v104 -= 16;

      }
      while (v104 != v103);
      v105 = v145;
    }
    v146 = v103;
    operator delete(v105);
  }
  v107 = v152;
  if (v152)
  {
    v108 = v153;
    v109 = v152;
    if (v153 != v152)
    {
      do
      {
        v110 = (void *)*((_QWORD *)v108 - 2);
        v108 -= 16;

      }
      while (v108 != v107);
      v109 = v152;
    }
    v153 = v107;
    operator delete(v109);
  }

  objc_autoreleasePoolPop(v46);
  return v43;
}

void sub_2399FB24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  if (*(char *)(v30 - 121) < 0)
    operator delete(*(void **)(v30 - 144));

  _Unwind_Resume(a1);
}

uint64_t sub_2399FB510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, _QWORD *a7, int a8)
{
  unsigned int v8;
  unsigned int v11;
  int32x2_t v12;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  void *context;
  void *v26;
  id v27[2];
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 4);
  if (v8 == *(_DWORD *)(a2 + 4))
  {
    v11 = *(_DWORD *)(a1 + 8);
    if (v11 == *(_DWORD *)(a2 + 8))
    {
      v12 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v8, v11), (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v8, v11), (int32x2_t)-1)));
      if ((v12.i32[1] & v12.i32[0] & 1) != 0)
      {
        context = (void *)MEMORY[0x23B83EC40]();
        v18 = (void *)MEMORY[0x23B83EC40]();
        v19 = MTLCreateSystemDefaultDevice();
        v27[0] = v19;
        v26 = (void *)objc_msgSend(v19, "newCommandQueue");
        v27[1] = v26;
        objc_autoreleasePoolPop(v18);
        v20 = a7[3];
        if (v20)
        {
          if ((_QWORD *)v20 == a7)
          {
            v29 = v28;
            (*(void (**)(_QWORD *, _BYTE *))(*a7 + 24))(a7, v28);
LABEL_11:
            v21 = sub_2399FA3CC(v27, a1, a2, a4, a5, a6, (uint64_t)v28, a8);
            v23 = v29;
            if (v29 == v28)
            {
              v24 = 4;
              v23 = v28;
            }
            else
            {
              if (!v29)
              {
LABEL_16:

                objc_autoreleasePoolPop(context);
                return v21;
              }
              v24 = 5;
            }
            (*(void (**)(void))(*v23 + 8 * v24))();
            goto LABEL_16;
          }
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        }
        v29 = (_BYTE *)v20;
        goto LABEL_11;
      }
    }
  }
  return 0;
}

void sub_2399FB6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t sub_2399FB73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint32x2_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v25;
  void *context;
  void *v28;
  uint32x2_t v29;
  void *__p;
  char v31;
  float64x2_t v32[2];
  int v33[3];

  v9 = MEMORY[0x23B83EC40]();
  v10 = (void *)MEMORY[0x23B83EC40]();
  v11 = MTLCreateSystemDefaultDevice();
  v12 = (void *)objc_msgSend(v11, "newCommandQueue");
  v25 = a6;
  context = (void *)v9;
  objc_autoreleasePoolPop(v10);
  v29 = *(uint32x2_t *)(a2 + 4);
  v13 = *(uint32x2_t *)(a1 + 4);
  v28 = v12;
  objc_msgSend(v12, "commandBuffer");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:", 4, *(unsigned int *)(a1 + 4), *(unsigned int *)(a1 + 8), 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setStorageMode:", 0);
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", v11, v15);
  objc_msgSend(v16, "writeBytes:dataLayout:imageIndex:", *(_QWORD *)(a1 + 16), 0, 0);
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:", 4, v29.u32[0], v29.u32[1], 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setStorageMode:", 0);
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", v11, v17);
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE388]), "initWithDevice:", v11);
  v32[0] = vcvtq_f64_f32(vdiv_f32(vcvt_f32_u32(v29), vcvt_f32_u32(v13)));
  objc_msgSend(v19, "setScaleTransform:", v32);
  objc_msgSend(v19, "encodeToCommandBuffer:sourceImage:destinationImage:", v14, v16, v18);
  objc_msgSend(v18, "synchronizeOnCommandBuffer:", v14);
  objc_msgSend(v14, "commit");
  objc_msgSend(v14, "waitUntilCompleted");
  objc_msgSend(v14, "error");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = sub_2399F93F8(v20);

  if (v21)
  {
    if (a5)
      *(_DWORD *)(a4 + 384) = 16;
    v22 = *(_QWORD *)(v25 + 24);
    if (v22)
    {
      v31 = 0;
      LOBYTE(__p) = 0;
      v33[0] = 16;
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v22 + 48))(v22, v33, &__p);
      if (v31 < 0)
        operator delete(__p);
    }
  }
  objc_msgSend(v18, "readBytes:dataLayout:imageIndex:", *(_QWORD *)(a2 + 16), 0, 0);

  objc_autoreleasePoolPop(context);
  return v21 ^ 1u;
}

void sub_2399FB9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_2399FBA90(id *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5, uint64_t a6, int a7)
{
  int v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  int *v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  int *v65;
  _DWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *context;
  _QWORD v78[3];
  _QWORD v79[3];
  _QWORD v80[3];
  _QWORD v81[3];
  _QWORD v82[3];
  _QWORD v83[3];
  uint64_t v84;
  id v85;
  id v86;
  void *v87[2];
  char v88;
  id v89;
  int v90[3];

  v13 = a4;
  v73 = *(_QWORD *)(a2 + 4);
  v14 = MEMORY[0x23B83EC40]();
  v15 = *a1;
  v89 = 0;
  sub_2399FA2BC(v15, (uint64_t)&v89, a5, a7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v89;
  context = (void *)v14;
  if (v17)
  {
    v18 = v17;
    if (v13)
      *(_DWORD *)(a3 + 384) = 5;
    v19 = *(_QWORD *)(a6 + 24);
    if (v19)
    {
      v88 = 0;
      LOBYTE(v87[0]) = 0;
      LODWORD(v84) = 5;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v19 + 48))(v19, &v84, v87);
      if (v88 < 0)
        operator delete(v87[0]);
    }
    v20 = 0;
    v21 = 0;
    v22 = 0;
LABEL_21:
    v30 = 0;
    v31 = 0;
    goto LABEL_22;
  }
  v23 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("gausmoth"));
  v24 = *a1;
  v86 = 0;
  v72 = (void *)objc_msgSend(v24, "newComputePipelineStateWithFunction:error:", v23, &v86);
  v25 = v86;
  if (v25)
  {
    if (v13)
      *(_DWORD *)(a3 + 384) = 5;
    v26 = *(_QWORD *)(a6 + 24);
    if (v26)
    {
      v88 = 0;
      LOBYTE(v87[0]) = 0;
      LODWORD(v84) = 5;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v26 + 48))(v26, &v84, v87);
      if (v88 < 0)
        operator delete(v87[0]);
    }
  }
  v27 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("variva"));
  v28 = *a1;
  v85 = v25;
  v71 = (void *)objc_msgSend(v28, "newComputePipelineStateWithFunction:error:", v27, &v85);
  v18 = v85;

  if (v18)
  {
    if (v13)
      *(_DWORD *)(a3 + 384) = 5;
    v29 = *(_QWORD *)(a6 + 24);
    v22 = v71;
    v21 = v72;
    if (v29)
    {
      v88 = 0;
      LOBYTE(v87[0]) = 0;
      LODWORD(v84) = 5;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v29 + 48))(v29, &v84, v87);
      if (v88 < 0)
        operator delete(v87[0]);
    }

    v20 = 0;
    goto LABEL_21;
  }

  if (v25)
  {
    v20 = 0;
    v18 = 0;
    v30 = 0;
    v31 = 0;
LABEL_25:
    v22 = v71;
    v21 = v72;
    goto LABEL_22;
  }
  v69 = (3 * v73 * HIDWORD(v73));
  v31 = (id)objc_msgSend(*a1, "newBufferWithLength:options:", 4 * v69, 0);
  v33 = objc_msgSend(*a1, "newBufferWithLength:options:", 4 * v69, 0);
  v30 = (id)v33;
  if (v31)
    v34 = v33 == 0;
  else
    v34 = 1;
  if (v34)
  {
    if (v13)
      *(_DWORD *)(a3 + 384) = 2;
    v35 = *(_QWORD *)(a6 + 24);
    v22 = v71;
    v21 = v72;
    if (v35
      && (v88 = 0,
          LOBYTE(v87[0]) = 0,
          LODWORD(v84) = 2,
          (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v35 + 48))(v35, &v84, v87),
          v88 < 0))
    {
      operator delete(v87[0]);
      v20 = 0;
      v18 = 0;
    }
    else
    {
      v20 = 0;
      v18 = 0;
    }
  }
  else
  {
    v31 = objc_retainAutorelease(v31);
    v36 = objc_msgSend(v31, "contents");
    if ((_DWORD)v69)
    {
      v37 = 0;
      v38 = *(_QWORD *)(a2 + 16);
      if (v69 < 8)
        goto LABEL_42;
      if ((unint64_t)(v36 - v38) < 0x20)
        goto LABEL_42;
      v37 = v69 & 0xFFFFFFF8;
      v39 = (__int128 *)(v38 + 16);
      v40 = (_OWORD *)(v36 + 16);
      v41 = v37;
      do
      {
        v42 = *v39;
        *(v40 - 1) = *(v39 - 1);
        *v40 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      if (v37 != v69)
      {
LABEL_42:
        v43 = (int *)(v38 + 4 * v37);
        v44 = (_DWORD *)(v36 + 4 * v37);
        v45 = v69 - v37;
        do
        {
          v46 = *v43++;
          *v44++ = v46;
          --v45;
        }
        while (v45);
      }
    }
    objc_msgSend(a1[1], "commandBuffer");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = v73;
    v47 = objc_msgSend(v72, "threadExecutionWidth");
    v48 = objc_msgSend(v72, "maxTotalThreadsPerThreadgroup");
    v74 = v84;
    objc_msgSend(v70, "computeCommandEncoder");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setBuffer:offset:atIndex:", v31, 0, 0);
    objc_msgSend(v49, "setBytes:length:atIndex:", &v84, 8, 1);
    objc_msgSend(v49, "setBytes:length:atIndex:", &v84, 8, 2);
    objc_msgSend(v49, "setBuffer:offset:atIndex:", v30, 0, 3);
    objc_msgSend(v49, "setComputePipelineState:", v72);
    v83[0] = v74 / v47;
    v83[1] = HIDWORD(v74) / (v48 / v47);
    v83[2] = 1;
    v82[0] = v47;
    v82[1] = v48 / v47;
    v82[2] = 1;
    objc_msgSend(v49, "dispatchThreadgroups:threadsPerThreadgroup:", v83, v82);
    objc_msgSend(v49, "endEncoding");

    v50 = objc_msgSend(v71, "threadExecutionWidth");
    v51 = objc_msgSend(v71, "maxTotalThreadsPerThreadgroup");
    v75 = v84;
    objc_msgSend(v70, "computeCommandEncoder");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "setBuffer:offset:atIndex:", v30, 0, 0);
    objc_msgSend(v52, "setBytes:length:atIndex:", &v84, 8, 1);
    objc_msgSend(v52, "setBytes:length:atIndex:", &v84, 8, 2);
    objc_msgSend(v52, "setBuffer:offset:atIndex:", v31, 0, 3);
    objc_msgSend(v52, "setComputePipelineState:", v71);
    v81[0] = v75 / v50;
    v81[1] = HIDWORD(v75) / (v51 / v50);
    v81[2] = 1;
    v80[0] = v50;
    v80[1] = v51 / v50;
    v80[2] = 1;
    objc_msgSend(v52, "dispatchThreadgroups:threadsPerThreadgroup:", v81, v80);
    objc_msgSend(v52, "endEncoding");

    v53 = objc_msgSend(v72, "threadExecutionWidth");
    v54 = objc_msgSend(v72, "maxTotalThreadsPerThreadgroup");
    v76 = v84;
    objc_msgSend(v70, "computeCommandEncoder");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "setBuffer:offset:atIndex:", v31, 0, 0);
    objc_msgSend(v55, "setBytes:length:atIndex:", &v84, 8, 1);
    objc_msgSend(v55, "setBytes:length:atIndex:", &v84, 8, 2);
    objc_msgSend(v55, "setBuffer:offset:atIndex:", v30, 0, 3);
    objc_msgSend(v55, "setComputePipelineState:", v72);
    v79[0] = v76 / v53;
    v79[1] = HIDWORD(v76) / (v54 / v53);
    v79[2] = 1;
    v78[0] = v53;
    v78[1] = v54 / v53;
    v78[2] = 1;
    objc_msgSend(v55, "dispatchThreadgroups:threadsPerThreadgroup:", v79, v78);
    objc_msgSend(v55, "endEncoding");

    sub_2399FCF18();
    objc_msgSend(v70, "commit");
    objc_msgSend(v70, "waitUntilCompleted");
    objc_msgSend(v70, "error");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v53) = sub_2399F93F8(v56);

    if ((_DWORD)v53)
    {
      if (v13)
        *(_DWORD *)(a3 + 384) = 16;
      v57 = *(_QWORD *)(a6 + 24);
      v22 = v71;
      v21 = v72;
      if (v57)
      {
        v88 = 0;
        LOBYTE(v87[0]) = 0;
        v90[0] = 16;
        (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v57 + 48))(v57, v90, v87);
        if (v88 < 0)
          operator delete(v87[0]);
      }

      v20 = 0;
      v18 = 0;
    }
    else
    {

      v30 = objc_retainAutorelease(v30);
      v58 = objc_msgSend(v30, "contents");
      if (!(_DWORD)v69)
      {
        v18 = 0;
        v20 = 1;
        goto LABEL_25;
      }
      v59 = 0;
      v60 = *(_QWORD *)(a2 + 16);
      if (v69 < 8)
      {
        v22 = v71;
        v21 = v72;
      }
      else
      {
        v22 = v71;
        v21 = v72;
        if ((unint64_t)(v60 - v58) >= 0x20)
        {
          v59 = v69 & 0xFFFFFFF8;
          v61 = (__int128 *)(v58 + 16);
          v62 = (_OWORD *)(v60 + 16);
          v63 = v59;
          do
          {
            v64 = *v61;
            *(v62 - 1) = *(v61 - 1);
            *v62 = v64;
            v61 += 2;
            v62 += 2;
            v63 -= 8;
          }
          while (v63);
          if (v59 == v69)
          {
            v18 = 0;
            v20 = 1;
            goto LABEL_22;
          }
        }
      }
      v65 = (int *)(v58 + 4 * v59);
      v66 = (_DWORD *)(v60 + 4 * v59);
      v67 = v69 - v59;
      v20 = 1;
      do
      {
        v68 = *v65++;
        *v66++ = v68;
        --v67;
      }
      while (v67);
      v18 = 0;
    }
  }
LABEL_22:

  objc_autoreleasePoolPop(context);
  return v20;
}

void sub_2399FC218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  if (*(char *)(v15 - 105) < 0)
    operator delete(*(void **)(v15 - 128));

  _Unwind_Resume(a1);
}

void sub_2399FC390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (*(char *)(v3 - 105) < 0)
  {
    operator delete(*(void **)(v3 - 128));

    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2399FC380);
}

uint64_t sub_2399FC3B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5, _QWORD *a6, int a7)
{
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *context;
  id v22[2];
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a1 + 4) & (*(_DWORD *)(a1 + 4) - 1)) == 0 && (*(_DWORD *)(a1 + 8) & (*(_DWORD *)(a1 + 8) - 1)) == 0)
  {
    context = (void *)MEMORY[0x23B83EC40]();
    v13 = (void *)MEMORY[0x23B83EC40]();
    v14 = MTLCreateSystemDefaultDevice();
    v22[0] = v14;
    v15 = (void *)objc_msgSend(v14, "newCommandQueue");
    v22[1] = v15;
    objc_autoreleasePoolPop(v13);
    v16 = a6[3];
    if (v16)
    {
      if ((_QWORD *)v16 == a6)
      {
        v24 = v23;
        (*(void (**)(_QWORD *, _BYTE *))(*a6 + 24))(a6, v23);
LABEL_9:
        v17 = sub_2399FBA90(v22, a1, a3, a4, a5, (uint64_t)v23, a7);
        v18 = v24;
        if (v24 == v23)
        {
          v19 = 4;
          v18 = v23;
        }
        else
        {
          if (!v24)
          {
LABEL_14:

            objc_autoreleasePoolPop(context);
            return v17;
          }
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
        goto LABEL_14;
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
    v24 = (_BYTE *)v16;
    goto LABEL_9;
  }
  return 0;
}

void sub_2399FC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v15)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_2399FC5A4(unint64_t a1, _QWORD *a2, unint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::thread *v13;
  uint64_t v14;
  std::__libcpp_thread_t *p_t;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::thread *v19;
  std::thread *v20;
  unint64_t v21;
  void *__p[2];
  std::thread *v23;
  std::thread v24;
  unint64_t v25;

  if (a3 > 1
    && ((v6 = std::thread::hardware_concurrency()) != 0 ? (v7 = v6) : (v7 = 8),
        v7 >= a3 ? (v8 = a3) : (v8 = v7),
        v8 > 1))
  {
    v10 = a1 / v8;
    v11 = a1 % v8;
    v12 = v8;
    v13 = (std::thread *)operator new(8 * v8);
    __p[0] = v13;
    v23 = &v13[v8];
    bzero(v13, 8 * v8);
    v14 = 0;
    __p[1] = v23;
    p_t = &v13->__t_;
    v16 = v8;
    do
    {
      v25 = v14 * v10;
      v21 = v14 * v10 + v10;
      sub_2399FC778(&v24.__t_, a2, &v25, (uint64_t *)&v21);
      if (*p_t)
        std::terminate();
      *p_t++ = v24.__t_;
      v24.__t_ = 0;
      std::thread::~thread(&v24);
      ++v14;
      --v16;
    }
    while (v16);
    if (v11)
    {
      v24.__t_ = (std::__libcpp_thread_t)(v10 * v8 + v11);
      v25 = v10 * v8;
      v17 = a2[3];
      if (!v17)
        sub_2394172E0();
      (*(void (**)(uint64_t, unint64_t *, std::thread *))(*(_QWORD *)v17 + 48))(v17, &v25, &v24);
    }
    v18 = 8 * v8;
    v19 = v13;
    do
    {
      std::thread::join(v19++);
      v18 -= 8;
    }
    while (v18);
    v20 = v13 - 1;
    do
      std::thread::~thread(&v20[v12--]);
    while (v12 * 8);
    operator delete(__p[0]);
  }
  else
  {
    __p[0] = 0;
    v25 = a1;
    v9 = a2[3];
    if (!v9)
      sub_2394172E0();
    (*(void (**)(uint64_t, void **, unint64_t *))(*(_QWORD *)v9 + 48))(v9, __p, &v25);
  }
}

void sub_2399FC73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239420998((void **)va);
  _Unwind_Resume(a1);
}

void sub_2399FC750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239420998((void **)va);
  _Unwind_Resume(a1);
}

void sub_2399FC764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239420998((void **)va);
  _Unwind_Resume(a1);
}

void sub_2399FC778(pthread_t *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  std::__thread_struct *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v8 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v8);
  v9 = (_QWORD *)operator new();
  *v9 = v8;
  v10 = v9 + 1;
  v11 = a2[3];
  if (!v11)
    goto LABEL_4;
  if ((_QWORD *)v11 != a2)
  {
    v11 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, v10);
LABEL_4:
    v9[4] = v11;
    goto LABEL_6;
  }
  v9[4] = v10;
  (*(void (**)(_QWORD *))(*a2 + 24))(a2);
LABEL_6:
  v12 = *a4;
  v9[5] = *a3;
  v9[6] = v12;
  v13 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_239478DD0, v9);
  if (v13)
  {
    std::__throw_system_error(v13, "thread constructor failed");
    __break(1u);
  }
}

void sub_2399FC87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_239EBF428();
  MEMORY[0x23B83E31C](v2, 0x1020C40A408C0D3);
  sub_239478F54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2399FC8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239478F54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2399FC8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_2399FC8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  sub_239478EBC(&a9);
  sub_239478F54(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2399FC90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t i;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    MEMORY[0x23B83E2F8](v4, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v7;
  v8 = (v5 * v7 * v6);
  *(_QWORD *)(a1 + 16) = operator new[]();
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + i) = llroundf(*(float *)(*(_QWORD *)(a2 + 16) + 4 * i) * 255.0);
  }
  return 1;
}

uint64_t sub_2399FC9C0()
{
  uint64_t (*v0)(_QWORD);
  _QWORD *v2;

  v0 = off_2569345F8;
  if ((*(_BYTE *)off_2569345F8(&off_2569345F8) & 1) == 0)
  {
    v2 = (_QWORD *)off_2569345E0(&off_2569345E0);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    _tlv_atexit((void (__cdecl *)(void *))sub_2399FCA50, v2);
    *(_BYTE *)v0(&off_2569345F8) = 1;
  }
  return off_2569345E0(&off_2569345E0);
}

void **sub_2399FCA50(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 161) < 0)
          operator delete(*(v3 - 23));
        v3 -= 23;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2399FCAC0()
{
  rusage v1;

  getrusage(0, &v1);
  return v1.ru_maxrss;
}

uint64_t sub_2399FCAE8(int8x16_t *a1)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  int8x16_t v5;

  task_info_outCnt = 10;
  if (task_info(*MEMORY[0x24BDAEC58], 0x12u, &task_info_out, &task_info_outCnt))
    return 0;
  *a1 = vextq_s8(v5, v5, 8uLL);
  return 1;
}

uint64_t sub_2399FCB60()
{
  return 1;
}

uint64_t sub_2399FCB68()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v0 = (void *)MEMORY[0x23B83EC40]();
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "physicalMemory");

  objc_autoreleasePoolPop(v0);
  return v2;
}

void sub_2399FCBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_2399FCBCC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  BOOL v11;
  void *v12;
  char isKindOfClass;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  BOOL v20;
  char v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _BOOL8 v26;
  id v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x23B83EC40]();
  NSTemporaryDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF48]), "initFileURLWithPath:", v3);
  v5 = (void *)*MEMORY[0x24BDBCE18];
  v29[0] = *MEMORY[0x24BDBCE18];
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v29, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0;
  objc_msgSend(v4, "resourceValuesForKeys:error:", v6, &v28);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v28;

  if (v7)
  {
    v9 = v5;
    objc_msgSend(v7, "valueForKey:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10 == 0;

    if (v11
      || (objc_msgSend(v7, "objectForKey:", v9),
          v12 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v12,
          (isKindOfClass & 1) == 0))
    {
      v16 = 0;
    }
    else
    {
      objc_msgSend(v7, "valueForKey:", v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "unsignedLongLongValue");

      a1[1] = v15;
      v16 = 1;
    }

  }
  else
  {
    v16 = 0;
  }

  NSTemporaryDirectory();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v17)
    v20 = v18 == 0;
  else
    v20 = 1;
  if (v20)
    v21 = 0;
  else
    v21 = v16;
  if ((v21 & 1) != 0)
  {
    objc_msgSend(v18, "attributesOfFileSystemForPath:error:", v17, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    if (v22)
    {
      objc_msgSend(v22, "objectForKeyedSubscript:", *MEMORY[0x24BDD0D18]);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v24;
      v26 = v24 != 0;
      if (v24)
        *a1 = objc_msgSend(v24, "longLongValue");

    }
    else
    {
      v26 = 0;
    }

  }
  else
  {
    v26 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return v26;
}

void sub_2399FCE1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t sub_2399FCEB0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2399FCF18()
{
  unsigned __int8 v0;
  uint64_t v1;
  std::mutex *m;
  void *v3;
  std::unique_lock<std::mutex> v4;

  v0 = atomic_load((unsigned __int8 *)&qword_25693C930);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C930))
  {
    v3 = operator new(0x90uLL);
    sub_2399FD030((uint64_t)v3);
    qword_25693C938 = (uint64_t)v3 + 24;
    qword_25693C940 = (uint64_t)v3;
    __cxa_atexit((void (*)(void *))sub_2399FCEB0, &qword_25693C938, &dword_23940C000);
    __cxa_guard_release(&qword_25693C930);
  }
  v1 = qword_25693C938;
  m = (std::mutex *)(qword_25693C938 + 56);
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(qword_25693C938 + 56);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(qword_25693C938 + 56));
  if (*(_BYTE *)v1)
    goto LABEL_6;
  do
    std::condition_variable::wait((std::condition_variable *)(v1 + 8), &v4);
  while (!*(_BYTE *)v1);
  if (v4.__owns_)
  {
    m = v4.__m_;
LABEL_6:
    std::mutex::unlock(m);
  }
}

void sub_2399FCFF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25693C930);
  _Unwind_Resume(a1);
}

void sub_2399FD018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C930);
  _Unwind_Resume(a1);
}

uint64_t sub_2399FD030(uint64_t a1)
{
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250AF1510;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 1018212795;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 850045863;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)sub_2399FD18C, CFSTR("UIApplicationDidEnterBackgroundNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)sub_2399FD264, CFSTR("UIApplicationWillEnterForegroundNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_2399FD0FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::condition_variable *v2;
  std::mutex *v3;

  std::mutex::~mutex(v3);
  std::condition_variable::~condition_variable(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2399FD120(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399FD130(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2399FD160(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 32));
}

void sub_2399FD18C()
{
  unsigned __int8 v0;
  uint64_t v1;
  std::mutex *v2;
  void *v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25693C930);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C930))
  {
    v3 = operator new(0x90uLL);
    sub_2399FD030();
    qword_25693C938 = (uint64_t)v3 + 24;
    qword_25693C940 = (uint64_t)v3;
    __cxa_atexit((void (*)(void *))sub_2399FCEB0, &qword_25693C938, &dword_23940C000);
    __cxa_guard_release(&qword_25693C930);
  }
  v1 = qword_25693C938;
  v2 = (std::mutex *)(qword_25693C938 + 56);
  std::mutex::lock((std::mutex *)(qword_25693C938 + 56));
  *(_BYTE *)v1 = 0;
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 8));
  std::mutex::unlock(v2);
}

void sub_2399FD22C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25693C930);
  _Unwind_Resume(a1);
}

void sub_2399FD24C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C930);
  _Unwind_Resume(a1);
}

void sub_2399FD264()
{
  unsigned __int8 v0;
  uint64_t v1;
  std::mutex *v2;
  void *v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25693C930);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C930))
  {
    v3 = operator new(0x90uLL);
    sub_2399FD030();
    qword_25693C938 = (uint64_t)v3 + 24;
    qword_25693C940 = (uint64_t)v3;
    __cxa_atexit((void (*)(void *))sub_2399FCEB0, &qword_25693C938, &dword_23940C000);
    __cxa_guard_release(&qword_25693C930);
  }
  v1 = qword_25693C938;
  v2 = (std::mutex *)(qword_25693C938 + 56);
  std::mutex::lock((std::mutex *)(qword_25693C938 + 56));
  *(_BYTE *)v1 = 1;
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 8));
  std::mutex::unlock(v2);
}

void sub_2399FD308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25693C930);
  _Unwind_Resume(a1);
}

void sub_2399FD328(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C930);
  _Unwind_Resume(a1);
}

uint64_t sub_2399FD340(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_2399FD36C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = operator new(0x58uLL);
  v2[2] = 0;
  *v2 = &unk_250AF1548;
  v2[1] = 0;
  result = MEMORY[0x23B83DECC](v2 + 3);
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_2399FD3B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2399FD3C8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2399FD430(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_QWORD *)a1)
  {
    v2 = ***(std::recursive_mutex ****)a1;
    std::recursive_mutex::lock(v2);
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    std::recursive_mutex::unlock(v2);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_2399FD508@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  v7 = (_QWORD *)a1[3];
  if (v7)
  {
    if (v7 == a1)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v15);
    }
    else
    {
      v16 = (_BYTE *)a1[3];
      a1[3] = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v13);
    }
    else
    {
      v14 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v14 = 0;
  }
  sub_2399FEC6C(v6, (uint64_t)v15, (uint64_t)v13);
  *a3 = v6;
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  result = v16;
  if (v16 == v15)
  {
    v12 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2399FD688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2399FD700(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  uint64_t *v26;
  size_t v27;
  char *v28;
  void *v29;
  uint64_t *v30;
  char *v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  void *v56;
  unint64_t *v57;
  uint64_t v58;
  void **v59;
  char *v60;
  char *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *v68[2];
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73[2];
  _BYTE *v74;
  void *__p;
  char v76;
  uint64_t v77;
  void *v78[5];

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 88);
  if (!*(_QWORD *)(v2 + 48) || (v3 = *(_QWORD *)(v1 + 96), !*(_QWORD *)(v3 + 48)))
    sub_239EC3504();
  v4 = *(_QWORD *)(v1 + 104);
  if (*(_QWORD *)(v4 + 48))
    sub_239EC35C4();
  v5 = **(_DWORD **)(v3 + 56);
  if (v5 != 1 && v5 != 6)
    sub_239EC3534();
  v7 = a1;
  sub_239A0379C(v3, (uint64_t)v73);
  v8 = v77;
  sub_2399FEB00(v78);
  if (v76 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v74) & 0x80000000) == 0)
    {
LABEL_11:
      if (!v8)
        goto LABEL_12;
LABEL_30:
      sub_239EC3594();
    }
  }
  else if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v73[0]);
  if (v8)
    goto LABEL_30;
LABEL_12:
  sub_239A0379C(v4, (uint64_t)v73);
  v9 = v77;
  sub_2399FEB00(v78);
  if (v76 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v74) & 0x80000000) == 0)
    {
LABEL_14:
      if (!v9)
        goto LABEL_15;
LABEL_33:
      sub_239EC3564();
    }
  }
  else if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v73[0]);
  if (v9)
    goto LABEL_33;
LABEL_15:
  sub_239A02D84(v2, v73);
  v10 = *v7;
  v11 = (void **)(*v7 + 152);
  v12 = (char *)*v11;
  if (*v11)
  {
    v13 = *(char **)(v10 + 160);
    v14 = *(void **)(*v7 + 152);
    if (v13 != v12)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = *v11;
    }
    *(_QWORD *)(v10 + 160) = v12;
    operator delete(v14);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
  }
  *(_OWORD *)(v10 + 152) = *(_OWORD *)v73;
  *(_QWORD *)(v10 + 168) = v74;
  v18 = *v7;
  *(_DWORD *)(v18 + 136) = **(_DWORD **)(v2 + 56);
  *(_DWORD *)(v18 + 140) = **(_DWORD **)(v3 + 56);
  if (*(_QWORD *)(v4 + 48))
  {
    *(_DWORD *)(v18 + 144) = **(_DWORD **)(v4 + 56);
    *(_BYTE *)(v18 + 148) = 1;
  }
  else if (*(_BYTE *)(v18 + 148))
  {
    *(_BYTE *)(v18 + 148) = 0;
  }
  v72 = (_QWORD *)v2;
  sub_2399FF4E0(&v72, 6);
  v71 = (_QWORD *)v3;
  sub_2399FF4E0(&v71, 6);
  v70 = (_QWORD *)v4;
  sub_2399FF4E0(&v70, 6);
  *(_QWORD *)(*v7 + 112) = 0;
  v73[0] = 0;
  v73[1] = 0;
  v74 = 0;
  sub_239A02D84(v2, v68);
  v19 = (uint64_t *)v68[0];
  v20 = (uint64_t *)v68[1];
  if (v68[0] != v68[1])
  {
    v66 = v2;
    while (1)
    {
      v21 = *v19;
      v22 = (std::__shared_weak_count *)v19[1];
      v67 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v26 = sub_239A04F08();
      v27 = strlen(v25);
      if (*((char *)v26 + 23) < 0)
      {
        if (v27 != v26[1])
          goto LABEL_65;
        if (v27 == -1)
LABEL_108:
          sub_239423B0C();
        if (memcmp((const void *)*v26, v25, v27))
          goto LABEL_65;
      }
      else
      {
        if (v27 != *((unsigned __int8 *)v26 + 23))
          goto LABEL_65;
        if (v27 == -1)
          goto LABEL_108;
        if (memcmp(v26, v25, v27))
          goto LABEL_65;
      }
      v28 = (char *)v73[1];
      if (v73[1] >= v74)
        break;
      *(_QWORD *)v73[1] = v21;
      v29 = v28 + 8;
LABEL_64:
      v73[1] = v29;
      v22 = v67;
LABEL_65:
      if (v22)
      {
        v39 = (unint64_t *)&v22->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 += 2;
      if (v19 == v20)
      {
        v19 = (uint64_t *)v68[0];
        goto LABEL_80;
      }
    }
    v30 = v7;
    v31 = (char *)v73[0];
    v32 = (char *)v73[1] - (char *)v73[0];
    v33 = ((char *)v73[1] - (char *)v73[0]) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      sub_2394189F8();
    v35 = v74 - (char *)v73[0];
    if ((v74 - (char *)v73[0]) >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_239418A80();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      *v38 = v21;
      v29 = v38 + 1;
      if (v28 == v31)
      {
LABEL_61:
        v73[0] = v38;
        v74 = &v37[8 * v36];
        v7 = v30;
        if (!v28)
        {
LABEL_63:
          v2 = v66;
          goto LABEL_64;
        }
LABEL_62:
        operator delete(v28);
        goto LABEL_63;
      }
    }
    else
    {
      v37 = 0;
      v38 = (_QWORD *)(8 * v33);
      *(_QWORD *)(8 * v33) = v21;
      v29 = (void *)(8 * v33 + 8);
      if (v28 == v31)
        goto LABEL_61;
    }
    v41 = v28 - 8 - v31;
    if (v41 < 0x58)
      goto LABEL_115;
    if ((unint64_t)(v28 - &v37[v32]) < 0x20)
      goto LABEL_115;
    v42 = (v41 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v28[-v43];
    v38 = (_QWORD *)((char *)v38 - v43);
    v45 = &v37[8 * v33 - 16];
    v46 = v28 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v28 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_115:
      do
      {
        v49 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v38 = v49;
      }
      while (v28 != v31);
    }
    v28 = (char *)v73[0];
    v73[0] = v38;
    v74 = &v37[8 * v36];
    v7 = v30;
    if (!v28)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_80:
  if (v19)
  {
    v50 = (uint64_t *)v68[1];
    v51 = v19;
    if (v68[1] != v19)
    {
      do
      {
        v52 = (std::__shared_weak_count *)*(v50 - 1);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v50 -= 2;
      }
      while (v50 != v19);
      v51 = (uint64_t *)v68[0];
    }
    v68[1] = v19;
    operator delete(v51);
  }
  v56 = v73[0];
  v55 = (unint64_t *)v73[1];
  if (v73[0] != v73[1])
  {
    v57 = (unint64_t *)v73[0];
    do
      sub_239A029D4(v2, *v57++);
    while (v57 != v55);
  }
  sub_239A02D84(v2, v68);
  v58 = *v7;
  v59 = (void **)(*v7 + 176);
  v60 = (char *)*v59;
  if (*v59)
  {
    v61 = *(char **)(v58 + 184);
    v62 = *(void **)(*v7 + 176);
    if (v61 != v60)
    {
      do
      {
        v63 = (std::__shared_weak_count *)*((_QWORD *)v61 - 1);
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v61 -= 16;
      }
      while (v61 != v60);
      v62 = *v59;
      v56 = v73[0];
    }
    *(_QWORD *)(v58 + 184) = v60;
    operator delete(v62);
    *v59 = 0;
    v59[1] = 0;
    v59[2] = 0;
  }
  *(_OWORD *)(v58 + 176) = *(_OWORD *)v68;
  *(_QWORD *)(v58 + 192) = v69;
  if (v56)
  {
    v73[1] = v56;
    operator delete(v56);
  }
}

void sub_2399FDD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_2399FDD5C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  sub_2399FEA30(*(_QWORD **)(*a1 + 88), (uint64_t **)(*a1 + 152));
  v2 = *(uint64_t **)(*a1 + 80);
  v13 = *(_QWORD *)(*a1 + 96);
  v14 = v2;
  sub_2399FE8B8(&v14, &v13);
  v3 = *(uint64_t **)(*a1 + 80);
  v11 = *(_QWORD *)(*a1 + 104);
  v12 = v3;
  sub_2399FE974(&v12, &v11);
  sub_2399FEA30(*(_QWORD **)(*a1 + 88), (uint64_t **)(*a1 + 152));
  v4 = *a1;
  v10 = *(_QWORD **)(*a1 + 88);
  sub_2399FF4E0(&v10, *(_DWORD *)(v4 + 136));
  v5 = *a1;
  v9 = *(_QWORD **)(*a1 + 96);
  sub_2399FF4E0(&v9, *(_DWORD *)(v5 + 140));
  v6 = *a1;
  if (*(_BYTE *)(*a1 + 148))
  {
    v8 = *(_QWORD **)(v6 + 104);
    sub_2399FF4E0(&v8, *(_DWORD *)(v6 + 144));
  }
  else
  {
    v7 = *(_QWORD **)(v6 + 104);
    sub_2399FF4E8(&v7);
  }
}

void sub_2399FDE48(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &off_250AF15E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2399FDEE0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (v1)
  {
    sub_2399FDD5C(v1);
    sub_239EC35F4((_QWORD **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2399FDF04(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v6;
  std::recursive_mutex *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25693C950);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25693C950))
  {
    sub_2399FD36C(&qword_25693C968);
    __cxa_atexit((void (*)(void *))sub_2399FD3C8, &qword_25693C968, &dword_23940C000);
    __cxa_guard_release(&qword_25693C950);
  }
  v7 = (std::recursive_mutex *)qword_25693C968;
  v8 = (std::__shared_weak_count *)qword_25693C970;
  v34 = qword_25693C968;
  v35 = (std::__shared_weak_count *)qword_25693C970;
  if (qword_25693C970)
  {
    v9 = (unint64_t *)(qword_25693C970 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::recursive_mutex::lock(v7);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = atomic_load((unsigned __int8 *)&qword_25693C948);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25693C948))
  {
    __cxa_atexit((void (*)(void *))sub_2399FD340, &qword_25693C958, &dword_23940C000);
    __cxa_guard_release(&qword_25693C948);
  }
  v34 = 0;
  v35 = 0;
  if (qword_25693C960)
  {
    v35 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_25693C960);
    if (v35)
    {
      v34 = qword_25693C958;
      if (qword_25693C958)
      {
        *a3 = 0;
        a3[1] = 0;
        goto LABEL_50;
      }
    }
  }
  v14 = (uint64_t *)operator new();
  v15 = a1[3];
  if (!v15)
    goto LABEL_18;
  if ((_QWORD *)v15 != a1)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_18:
    v39 = (_QWORD *)v15;
    goto LABEL_20;
  }
  v39 = v38;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v38);
LABEL_20:
  v16 = a2[3];
  if (!v16)
  {
LABEL_23:
    v37 = (_QWORD *)v16;
    goto LABEL_25;
  }
  if ((_QWORD *)v16 != a2)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    goto LABEL_23;
  }
  v37 = v36;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v36);
LABEL_25:
  sub_2399FD508(v38, v36, v14);
  sub_2399FD700(v14);
  sub_2399FDE48(&v34, (uint64_t)v14);
  v17 = v37;
  if (v37 == v36)
  {
    v18 = 4;
    v17 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_30;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_30:
  v19 = v39;
  if (v39 == v38)
  {
    v20 = 4;
    v19 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_35;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_35:
  v21 = atomic_load((unsigned __int8 *)&qword_25693C948);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_25693C948))
  {
    __cxa_atexit((void (*)(void *))sub_2399FD340, &qword_25693C958, &dword_23940C000);
    __cxa_guard_release(&qword_25693C948);
  }
  v22 = v34;
  v23 = v35;
  if (v35)
  {
    p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  v26 = (std::__shared_weak_count *)qword_25693C960;
  qword_25693C958 = v22;
  qword_25693C960 = (uint64_t)v23;
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    v22 = v34;
    v23 = v35;
  }
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    *a3 = v22;
    a3[1] = (uint64_t)v23;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    do
      v30 = __ldaxr(v27);
    while (__stlxr(v30 - 1, v27));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    *a3 = v22;
    a3[1] = 0;
  }
LABEL_50:
  v31 = v35;
  if (v35)
  {
    v32 = (unint64_t *)&v35->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::recursive_mutex::unlock(v7);
}

void sub_2399FE2E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C950);
  _Unwind_Resume(a1);
}

void sub_2399FE2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::recursive_mutex *v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == &a16)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  MEMORY[0x23B83E31C](v20, 0x20C4093837F09);
  sub_239416DA0((uint64_t)&a10);
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_2399FE3FC()
{
  return 0;
}

uint64_t sub_2399FE404(uint64_t a1)
{
  sub_2399FEB00((void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_2399FE464(std::recursive_mutex ***a1, int a2)
{
  std::recursive_mutex *v4;
  std::recursive_mutex **v5;
  std::recursive_mutex *v6;
  std::recursive_mutex *v7;
  _QWORD *v8;
  std::recursive_mutex *v9;
  std::recursive_mutex **v10;
  std::recursive_mutex **v11;
  std::recursive_mutex *v12;
  std::recursive_mutex **v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::recursive_mutex *v20;
  std::recursive_mutex *v21;
  void *__p;
  char *v23;
  std::recursive_mutex *v24;
  std::recursive_mutex *v25;

  v4 = **a1;
  std::recursive_mutex::lock(v4);
  sub_239A02D84((uint64_t)(*a1)[11], &__p);
  v5 = *a1;
  v7 = (*a1)[22];
  v6 = (*a1)[23];
  v8 = __p;
  if ((char *)v6 - (char *)v7 != v23 - (_BYTE *)__p)
    goto LABEL_22;
  if (v7 != v6)
  {
    while (v7->__m_.__sig == *v8)
    {
      v7 = (std::recursive_mutex *)((char *)v7 + 16);
      v8 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
LABEL_22:
    sub_239A444D4((uint64_t)"unknown file", 365, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
LABEL_5:
  if (*((_DWORD *)v5 + 28) == 2)
  {
    v9 = *v5;
    std::recursive_mutex::lock(*v5);
    v10 = *a1;
    v25 = (*a1)[10];
    v24 = v10[12];
    sub_2399FE8B8((uint64_t **)&v25, (uint64_t *)&v24);
    v11 = *a1;
    if (*((_BYTE *)*a1 + 124))
      *((_BYTE *)v11 + 124) = 0;
    *((_DWORD *)v11 + 28) = 1;
    std::recursive_mutex::unlock(v9);
    v5 = *a1;
  }
  v21 = v5[12];
  v12 = v5[5];
  if (!v12)
    sub_2394172E0();
  (*(void (**)(std::recursive_mutex *, std::recursive_mutex **))(v12->__m_.__sig + 48))(v12, &v21);
  v20 = (*a1)[12];
  sub_2399FF4E0((_QWORD **)&v20, a2);
  v13 = *a1;
  *((_DWORD *)v13 + 30) = a2;
  *((_BYTE *)v13 + 124) = 1;
  *((_DWORD *)*a1 + 28) = 2;
  v14 = (char *)__p;
  if (__p)
  {
    v15 = v23;
    v16 = __p;
    if (v23 != __p)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v23 = v14;
    operator delete(v16);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_2399FE654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::recursive_mutex *v12;
  std::recursive_mutex *v13;

  std::recursive_mutex::unlock(v13);
  sub_2394631DC(&a12);
  std::recursive_mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void sub_2399FE678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::recursive_mutex *v4;
  va_list va;

  va_start(va, a4);
  sub_2394631DC((void **)va);
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_2399FE6B0(std::recursive_mutex ***a1)
{
  std::recursive_mutex *v2;
  std::recursive_mutex **v3;
  std::recursive_mutex *v4;
  std::recursive_mutex *v5;
  char *v6;
  _QWORD *v7;
  std::recursive_mutex *v8;
  uint64_t *v9;
  std::recursive_mutex **v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  char *v17;
  std::recursive_mutex *v18;
  uint64_t *v19;

  v2 = **a1;
  std::recursive_mutex::lock(v2);
  sub_239A02D84((uint64_t)(*a1)[11], &__p);
  v3 = *a1;
  v5 = (*a1)[22];
  v4 = (*a1)[23];
  v6 = (char *)__p;
  if ((char *)v4 - (char *)v5 != v17 - (_BYTE *)__p)
    goto LABEL_22;
  if (v5 != v4)
  {
    v7 = __p;
    while (v5->__m_.__sig == *v7)
    {
      v5 = (std::recursive_mutex *)((char *)v5 + 16);
      v7 += 2;
      if (v5 == v4)
        goto LABEL_6;
    }
LABEL_22:
    sub_239A444D4((uint64_t)"unknown file", 383, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
LABEL_6:
  if (*((_DWORD *)v3 + 29) == 2)
  {
    v8 = *v3;
    std::recursive_mutex::lock(*v3);
    v9 = (uint64_t *)(*a1)[10];
    v18 = (*a1)[13];
    v19 = v9;
    sub_2399FE974(&v19, (uint64_t *)&v18);
    v10 = *a1;
    if (*((_BYTE *)*a1 + 132))
      *((_BYTE *)v10 + 132) = 0;
    *((_DWORD *)v10 + 29) = 1;
    std::recursive_mutex::unlock(v8);
    v3 = *a1;
    v6 = (char *)__p;
  }
  *((_DWORD *)v3 + 32) = **(_DWORD **)&v3[13]->__m_.__opaque[48];
  *((_BYTE *)v3 + 132) = 1;
  *((_DWORD *)*a1 + 29) = 2;
  if (v6)
  {
    v11 = v17;
    v12 = v6;
    if (v17 != v6)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v6);
      v12 = __p;
    }
    v17 = v6;
    operator delete(v12);
  }
  std::recursive_mutex::unlock(v2);
}

void sub_2399FE864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::recursive_mutex *v10;
  std::recursive_mutex *v11;

  std::recursive_mutex::unlock(v11);
  sub_2394631DC(&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2399FE888(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2399FE89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2394631DC((void **)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_2399FE8B8(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void *v9;
  _QWORD *v10;

  sub_239A02CDC(*a2);
  v10 = (_QWORD *)*a2;
  sub_2399FF4E0(&v10, 6);
  sub_239A0379C(*a2, (uint64_t)v5);
  v4 = *a1;
  sub_2399FEB94(&v4, (uint64_t)v5);
  sub_2399FEB00(&v9);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5[0]);
    return;
  }
  operator delete(__p);
  if (v6 < 0)
    goto LABEL_5;
}

void sub_2399FE960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2399FE404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399FE974(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void *v9;
  _QWORD *v10;

  sub_239A02CDC(*a2);
  v10 = (_QWORD *)*a2;
  sub_2399FF4E0(&v10, 6);
  sub_239A0379C(*a2, (uint64_t)v5);
  v4 = *a1;
  sub_2399FEB94(&v4, (uint64_t)v5);
  sub_2399FEB00(&v9);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5[0]);
    return;
  }
  operator delete(__p);
  if (v6 < 0)
    goto LABEL_5;
}

void sub_2399FEA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2399FE404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399FEA30(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  sub_239A02CDC((uint64_t)a1);
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    v6 = (std::__shared_weak_count *)v4[1];
    v12 = *v4;
    v13 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_239A025C0((uint64_t)a1, &v12);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 += 2;
  }
  sub_239A02E94(a1, 6);
}

void sub_2399FEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_2399FEB00(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      sub_2399FEB00(v3 - 3);
      if (*((char *)v3 - 33) < 0)
      {
        operator delete(*(v3 - 7));
        if (*((char *)v3 - 57) < 0)
LABEL_9:
          operator delete(*(v3 - 10));
      }
      else if (*((char *)v3 - 57) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 10;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_2399FEB94(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 56);
  for (i = *(_QWORD *)(a2 + 64); v2 != i; v2 += 80)
  {
    v6 = *a1;
    sub_2399FEB94(&v6, v2);
    v7 = *a1;
    sub_239A03BC8(&v7, v2, (uint64_t *)&v8);
    v5 = v8;
    sub_239A033B0(v8);
    sub_239A02CDC((uint64_t)v5);
  }
}

void sub_2399FEC18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AF1548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399FEC2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AF1548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2399FEC60(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

uint64_t sub_2399FEC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p;
  char v16;
  uint64_t *v17;

  v6 = atomic_load((unsigned __int8 *)&qword_25693C950);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25693C950))
  {
    sub_2399FD36C(&qword_25693C968);
    __cxa_atexit((void (*)(void *))sub_2399FD3C8, &qword_25693C968, &dword_23940C000);
    __cxa_guard_release(&qword_25693C950);
  }
  *(_QWORD *)a1 = qword_25693C968;
  v7 = qword_25693C970;
  *(_QWORD *)(a1 + 8) = qword_25693C970;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
  {
    v10 = (_QWORD *)(a1 + 40);
    goto LABEL_9;
  }
  if (v11 != a2)
  {
    *(_QWORD *)(a1 + 40) = v11;
LABEL_9:
    *v10 = 0;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 40) = a1 + 16;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v10 + 24))(*v10, a1 + 16);
LABEL_11:
  v12 = (_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(a3 + 24);
  if (!v13)
  {
    v12 = (_QWORD *)(a1 + 72);
    goto LABEL_15;
  }
  if (v13 != a3)
  {
    *(_QWORD *)(a1 + 72) = v13;
LABEL_15:
    *v12 = 0;
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v12 + 24))(*v12, a1 + 48);
LABEL_17:
  sub_2399FF268((_QWORD *)(a1 + 80));
  v16 = 0;
  LOBYTE(__p) = 0;
  sub_2399FF268(&v17);
  sub_239A03BC8(&v17, (uint64_t)&__p, (uint64_t *)(a1 + 88));
  if (v16 < 0)
    operator delete(__p);
  sub_2399FF3EC((_QWORD *)(a1 + 96));
  sub_2399FF2F8((_QWORD *)(a1 + 104));
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_2399FEE20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C950);
  _Unwind_Resume(a1);
}

void sub_2399FEE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v18 = *(_QWORD **)(v14 + 72);
  if (v18 == v16)
  {
    v19 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
    v16 = *(_QWORD **)(v14 + 72);
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v19))(v16);
LABEL_6:
  v20 = *(_QWORD **)(v14 + 40);
  if (v20 == v15)
  {
    v21 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v21 = 5;
    v15 = *(_QWORD **)(v14 + 40);
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v21))(v15);
LABEL_11:
  sub_2399FD3C8(v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_2399FEED4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = a1[22];
  if (v2)
  {
    v3 = a1[23];
    v4 = (void *)a1[22];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[22];
    }
    a1[23] = v2;
    operator delete(v4);
  }
  v8 = a1[19];
  if (v8)
  {
    v9 = a1[20];
    v10 = (void *)a1[19];
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)a1[19];
    }
    a1[20] = v8;
    operator delete(v10);
  }
  v14 = (_QWORD *)a1[9];
  if (v14 == a1 + 6)
  {
    v15 = 4;
    v14 = a1 + 6;
  }
  else
  {
    if (!v14)
      goto LABEL_28;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
  v16 = (_QWORD *)a1[5];
  if (v16 == a1 + 2)
  {
    v17 = 4;
    v16 = a1 + 2;
    goto LABEL_32;
  }
  if (v16)
  {
    v17 = 5;
LABEL_32:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  v18 = (std::__shared_weak_count *)a1[1];
  if (!v18)
    return a1;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_2399FF088(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399FF098(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_2399FF0C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_7:
  *(_QWORD *)&result = nullsub_4(a1 + 24).n128_u64[0];
  return result;
}

void sub_2399FF150(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399FF174(uint64_t result)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = *(_QWORD ***)(result + 24);
  if (v1)
  {
    sub_2399FDD5C(*(uint64_t **)(result + 24));
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      v3 = sub_2399FEED4(v2);
      MEMORY[0x23B83E31C](v3, 0x1060C4072C85D0FLL);
    }
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_2399FF1E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2399FF254()
{
  JUMPOUT(0x23B83E31CLL);
}

void sub_2399FF268(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25693C980);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_25693C980))
  {
    *a1 = qword_25693C978;
  }
  else
  {
    sub_2399FFFD0(&qword_25693C978);
    __cxa_guard_release(&qword_25693C980);
    *a1 = qword_25693C978;
  }
}

void sub_2399FF2E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C980);
  _Unwind_Resume(a1);
}

void sub_2399FF2F8(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25693C990);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693C990))
  {
    sub_2399FF268(&v5);
    sub_23941A4FC(__p, "cv3d");
    sub_239A03BC8(&v5, (uint64_t)__p, &qword_25693C988);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25693C990);
  }
  *a1 = qword_25693C988;
}

void sub_2399FF394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25693C990);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25693C990);
  _Unwind_Resume(a1);
}

void sub_2399FF3EC(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25693C9A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693C9A0))
  {
    sub_2399FF268(&v5);
    sub_23941A4FC(__p, "cv3dapi");
    sub_239A03BC8(&v5, (uint64_t)__p, &qword_25693C998);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25693C9A0);
  }
  *a1 = qword_25693C998;
}

void sub_2399FF488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25693C9A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25693C9A0);
  _Unwind_Resume(a1);
}

void sub_2399FF4E0(_QWORD **a1, int a2)
{
  sub_239A02E94(*a1, a2);
}

uint64_t sub_2399FF4E8(_QWORD **a1)
{
  return sub_239A033B0(*a1);
}

uint64_t *sub_2399FF4F0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = *(_QWORD **)(v2 + 40);
  if (v3 == (_QWORD *)(v2 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(v2 + 16);
  }
  else
  {
    if (!v3)
      goto LABEL_7;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
  v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  MEMORY[0x23B83E31C](v2, 0x1020C407A7143E5);
  return a1;
}

uint64_t sub_2399FF5A4(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  char v15;
  _QWORD v16[4];
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;

  sub_2399FFCA4(&v17);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v6 = v18;
  *v4 = v17;
  v4[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v4[2] = &off_250AF16D0;
  v4[5] = v4 + 2;
  v19 = v4;
  v15 = 11;
  strcpy((char *)&v14, "%p %c: %m%n");
  sub_239A04240(v16, &v14);
  sub_239A00290(a1, 1);
  *(_QWORD *)a1 = &off_250AF1638;
  (*(void (**)(_QWORD *))(v16[0] + 48))(v16);
  *(_DWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v5;
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AF1680;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v5;
  *(_QWORD *)(a1 + 40) = v9;
  sub_239A042E8((uint64_t)v16);
  if (v15 < 0)
    operator delete((void *)v14);
  v19 = 0;
  v10 = v18;
  if (!v18)
    return a1;
  v11 = (unint64_t *)&v18->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_2399FF73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;

  v23 = *v20;
  *v20 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  nullsub_4(v19);
  sub_239A042E8((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_2399FF4F0((uint64_t *)(v21 - 40));
  sub_239416DA0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2399FF7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2399FF7BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25693C9A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C9A8))
  {
    byte_25693C9C7 = 13;
    strcpy((char *)&qword_25693C9B0, "OSLogAppender");
    __cxa_atexit(MEMORY[0x24BEDACF0], &qword_25693C9B0, &dword_23940C000);
    __cxa_guard_release(&qword_25693C9A8);
  }
  if (byte_25693C9C7 >= 0)
    return &qword_25693C9B0;
  else
    return (uint64_t *)qword_25693C9B0;
}

void sub_2399FF858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  void *__p;
  char v9;
  char v10;

  if (*(_QWORD *)(a1 + 32) && sub_239A04220((_DWORD *)(a1 + 24), *(_DWORD *)(a2 + 24)))
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&__p, *(_QWORD *)(a1 + 16), a2);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned int *)(a2 + 24);
    if (v5 >= 7)
      v6 = 2;
    else
      v6 = 0x11101001020202uLL >> (8 * v5);
    v10 = v6;
    v7 = *(_QWORD *)(v4 + 40);
    if (!v7)
      sub_2394172E0();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    if (v9 < 0)
      operator delete(__p);
  }
}

void sub_2399FF924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2399FF940(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_7:
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

void sub_2399FF9C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (!v5)
    {
LABEL_7:
      nullsub_4(a1);
      JUMPOUT(0x23B83E31CLL);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  goto LABEL_7;
}

void sub_2399FFA58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399FFA7C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 40);
    if (v2 == (_QWORD *)(v1 + 16))
    {
      v3 = 4;
      v2 = (_QWORD *)(v1 + 16);
    }
    else
    {
      if (!v2)
        goto LABEL_8;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_2399FFB24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3esn4elog13OSLogAppender7PrivateEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3esn4elog13OSLogAppender7PrivateEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3esn4elog13OSLogAppender7PrivateEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3esn4elog13OSLogAppender7PrivateEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2399FFB98()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2399FFBAC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AF16D0;
  return result;
}

void sub_2399FFBD0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AF16D0;
}

void sub_2399FFBE8(int a1, os_log_t *a2, uint64_t a3, os_log_type_t *a4)
{
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  v5 = *a4;
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a3;
  else
    v7 = *(_QWORD *)a3;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  v8[0] = v7;
  v8[1] = v6;
  sub_2399FFD24(a2, v5, v8);
}

uint64_t sub_2399FFC2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn4elog13OSLogAppender7Private14ForwardToOSLogE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn4elog13OSLogAppender7Private14ForwardToOSLogE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn4elog13OSLogAppender7Private14ForwardToOSLogE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn4elog13OSLogAppender7Private14ForwardToOSLogE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2399FFC98()
{
  return &unk_250AF1740;
}

_QWORD *sub_2399FFCA4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  v2 = MEMORY[0x24BDACB70];
  *a1 = MEMORY[0x24BDACB70];
  result = (_QWORD *)operator new();
  *result = &off_250AF1760;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_2399FFCF8(void *a1)
{
  __cxa_begin_catch(a1);
  os_release(MEMORY[0x24BDACB70]);
  __cxa_rethrow();
}

void sub_2399FFD10(void *a1)
{
  __cxa_end_catch();
  sub_239416A48(a1);
}

void sub_2399FFD24(os_log_t *a1, os_log_type_t type, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  std::string *p_p;
  NSObject *v14;
  uint64_t v15;
  std::string __p;
  uint8_t out[48];
  unsigned __int8 uu[8];
  uint64_t v19;
  uint8_t buf[4];
  std::string *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = a3[1];
  if (v6 < 0x401)
  {
    v14 = *a1;
    if (os_log_type_enabled(*a1, type))
    {
      v15 = *a3;
      *(_DWORD *)out = 136315138;
      *(_QWORD *)&out[4] = v15;
      _os_log_impl(&dword_23940C000, v14, type, "%s", out, 0xCu);
    }
  }
  else
  {
    *(_QWORD *)uu = 0;
    v19 = 0;
    memset(out, 0, 37);
    MEMORY[0x23B83F108](uu);
    uuid_unparse_lower(uu, (char *)out);
    v7 = 0;
    for (i = 0; i < v6; i += 987)
    {
      while (1)
      {
        v9 = a3[1];
        if (v9 < i)
          sub_23941D898("string_view::substr");
        v10 = v7 + v9;
        if (v10 >= 0x3DB)
          v11 = 987;
        else
          v11 = v10;
        sub_239A43BB0("%s %.*s", &__p, out, v11, *a3 + i);
        v12 = *a1;
        if (os_log_type_enabled(*a1, type))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v21 = p_p;
          _os_log_impl(&dword_23940C000, v12, type, "%s", buf, 0xCu);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          break;
        i += 987;
        v7 -= 987;
        if (i >= v6)
          return;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v7 -= 987;
    }
  }
}

void sub_2399FFF1C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2399FFF40(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    os_release(v1);
}

uint64_t sub_2399FFF60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn4elog8OSLogPtrC1EP8os_log_sE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3esn4elog8OSLogPtrC1EP8os_log_sE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn4elog8OSLogPtrC1EP8os_log_sE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn4elog8OSLogPtrC1EP8os_log_sE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2399FFFD0(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25693C9D0);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_25693C9D0))
  {
    *a1 = qword_25693C9C8;
  }
  else
  {
    sub_239A00058();
    __cxa_guard_release(&qword_25693C9D0);
    *a1 = qword_25693C9C8;
  }
}

void sub_239A00040(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C9D0);
  _Unwind_Resume(a1);
}

void sub_239A00058()
{
  void *__p[2];
  char v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_239A0413C(&qword_25693C9C8);
  v4 = (_QWORD *)qword_25693C9C8;
  sub_239A03BB8(&v4, &v5);
  v2 = (uint64_t *)qword_25693C9C8;
  v1 = 7;
  strcpy((char *)__p, "cv3dapi");
  sub_239A03BC8(&v2, (uint64_t)__p, (uint64_t *)&v3);
  if (v1 < 0)
    operator delete(__p[0]);
  sub_239A02CDC((uint64_t)v5);
  sub_239A02E94(v5, 6);
  sub_239A02E94(v3, 6);
}

void sub_239A00108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A00124(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v5 = *(char **)v3;
        v6 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_239A001DC((uint64_t *)(v2 + 8));
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t *sub_239A001DC(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v6 = *(char **)v3;
        v7 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_239A001DC(v2 + 8);
    MEMORY[0x23B83E31C](v2, 0x10A0C400EF86968);
  }
  return a1;
}

uint64_t sub_239A00290(uint64_t result, char a2)
{
  *(_QWORD *)result = off_250AF17B0;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_239A002AC(uint64_t a1, char *__format, ...)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list *p_dst;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  va_list *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  va_list __dst;
  size_t v51;
  int64_t v52;
  _QWORD *v53;
  char __str[512];
  uint64_t v55;
  va_list va;

  va_start(va, __format);
  v3 = a1;
  v55 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 56))
  {
    v44 = operator new();
    sub_2394988CC(v44);
    v45 = (_QWORD *)operator new();
    *v45 = &unk_250AF1978;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
    v46 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v44;
    *(_QWORD *)(a1 + 64) = v45;
    v3 = a1;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v53 = 0;
  va_copy(__dst, va);
  v4 = __str;
  v5 = vsnprintf(__str, 0x200uLL, __format, va);
  v6 = v5;
  if (v5 >= 0x200)
  {
    v49 = v3;
    v7 = 0;
    v8 = 512;
    while (1)
    {
      if ((int)v5 > 0)
        v8 = v6 + 1;
      else
        v8 *= 4;
      if (!v7)
      {
        v23 = (_QWORD *)operator new();
        v7 = v23;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        if (v8)
        {
          if ((v8 & 0x8000000000000000) != 0)
            sub_2394189F8();
          v9 = (char *)operator new(v8);
          *v7 = v9;
          v7[2] = &v9[v8];
          bzero(v9, v8);
          v7[1] = &v9[v8];
          v53 = v7;
          v12 = 1;
        }
        else
        {
          v9 = 0;
          v53 = v23;
          v12 = 1;
        }
LABEL_28:
        if (!v12)
          v7[1] = &v9[v8];
        goto LABEL_31;
      }
      v9 = (char *)*v7;
      v10 = (char *)v7[1];
      v11 = (unint64_t)&v10[-*v7];
      v12 = v8 >= v11;
      v13 = v8 - v11;
      if (v8 <= v11)
        goto LABEL_28;
      v14 = v7[2];
      if (v14 - (uint64_t)v10 < v13)
        break;
      bzero(v10, v13);
      v7[1] = &v10[v13];
LABEL_31:
      v7 = v53;
      v4 = (char *)*v53;
      va_copy(__dst, va);
      v5 = vsnprintf(v4, v8, __format, va);
      v6 = v5;
      if ((v5 & 0x80000000) == 0 && v8 > v5)
      {
        v3 = v49;
        goto LABEL_46;
      }
    }
    if ((v8 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v15 = v14 - (_QWORD)v9;
    v16 = 2 * v15;
    if (2 * v15 <= v8)
      v16 = v8;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = (char *)operator new(v17);
    v19 = &v18[v11];
    bzero(&v18[v11], v13);
    if (v10 == v9)
    {
LABEL_23:
      *v7 = v19;
      v7[1] = &v18[v8];
      v7[2] = &v18[v17];
      if (v9)
        operator delete(v9);
      goto LABEL_31;
    }
    if (v11 < 8 || (unint64_t)(v9 - v18) < 0x20)
    {
      v20 = v10;
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      v24 = v11 & 0xFFFFFFFFFFFFFFE0;
      v25 = &v18[v11 - 16];
      v26 = v10 - 16;
      v27 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 32;
        v27 -= 32;
      }
      while (v27);
      if (v11 == v24)
        goto LABEL_22;
      if ((v11 & 0x18) == 0)
      {
        v19 -= v24;
        v20 = &v10[-v24];
LABEL_20:
        v21 = v19 - 1;
        do
        {
          v22 = *--v20;
          *v21-- = v22;
        }
        while (v20 != v9);
LABEL_22:
        v19 = v18;
        goto LABEL_23;
      }
    }
    else
    {
      v24 = 0;
    }
    v20 = &v10[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v19 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v29 = &v18[&v10[-v24] - v9 - 8];
    v30 = &v10[-v24 - 8];
    v31 = v24 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v32 = *(_QWORD *)v30;
      v30 -= 8;
      *(_QWORD *)v29 = v32;
      v29 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_46:
  v33 = *(_QWORD *)(v3 + 56);
  if (v5 >= 0x17)
  {
    v35 = v3;
    v36 = (v6 & 0xFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v36 = v6 | 7;
    v37 = v36 + 1;
    p_dst = (va_list *)operator new(v36 + 1);
    v51 = v6;
    v52 = v37 | 0x8000000000000000;
    __dst = (va_list)p_dst;
    v3 = v35;
    goto LABEL_52;
  }
  HIBYTE(v52) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_52:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v52 >= 0)
    v38 = &__dst;
  else
    v38 = (va_list *)__dst;
  if (v52 >= 0)
    v39 = HIBYTE(v52);
  else
    v39 = v51;
  sub_239458500((_QWORD *)(v33 + 16), (uint64_t)v38, v39);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst);
  v40 = v53;
  if (v53)
  {
    v41 = (void *)*v53;
    if (*v53)
    {
      v53[1] = v41;
      operator delete(v41);
    }
    MEMORY[0x23B83E31C](v40, 0x10C402FEFCB83);
  }
  return v3;
}

void sub_239A00728(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_239A00744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_239A00768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_239A00820((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239A0077C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_239A00820(&a17);
    _Unwind_Resume(a1);
  }
  sub_239A00820(&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A00820(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23B83E31C](v2, 0x10C402FEFCB83);
  }
  return a1;
}

uint64_t sub_239A00874(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v18[2];

  v5 = *a2;
  *(_QWORD *)a1 = &off_250AF17E0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_QWORD *)operator new();
  v7 = (_DWORD *)operator new();
  *v7 = 3;
  *v6 = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v9 = v8 + 1;
  *v8 = &off_250AF1928;
  v8[2] = 0;
  v8[3] = v7;
  v6[1] = v8;
  *(_QWORD *)(a1 + 56) = *v6;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *(_BYTE *)(a1 + 72) = 0;
  v11 = operator new();
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 48;
  *(_DWORD *)(v11 + 32) = 1065353216;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 850045863;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = v11 + 136;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD **)a3;
  v13 = *(_QWORD **)(a3 + 8);
  while (v12 != v13)
  {
    v14 = (std::__shared_weak_count *)v12[1];
    v18[0] = *v12;
    v18[1] = v14;
    *v12 = 0;
    v12[1] = 0;
    sub_239A00AD4(a1, v18, 0);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 += 2;
  }
  return a1;
}

void sub_239A00A44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_239416DA0(v3);
  sub_239A00C98(v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_239A00AD4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;

  v6 = (uint64_t **)(*(_QWORD *)(a1 + 80) + 40);
  v7 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = *a2;
  *((_QWORD *)&v30 + 1) = v30;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_239A057FC(v6, &v30);
  v11 = v10;
  v12 = v31;
  if (!v31)
    goto LABEL_8;
  v13 = (unint64_t *)&v31->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v11 & 1) == 0)
      return v11 & 1;
  }
  else
  {
LABEL_8:
    if ((v10 & 1) == 0)
      return v11 & 1;
  }
  v15 = *(_QWORD *)(a1 + 80);
  v16 = a2[1];
  *(_QWORD *)&v29 = *a2;
  *((_QWORD *)&v29 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 72) = sub_239A026E4(v15, &v29, a3);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *a2;
  v23 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v30 = v22;
  *((_QWORD *)&v30 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_239A028F8((uint64_t)&v30, a1);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v11 & 1;
}

void sub_239A00C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A00C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A00C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239A0267C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A00C98(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x23B83E31C](v2, 0x30C40EEE2E2AFLL);
  }
  return a1;
}

uint64_t sub_239A00D1C(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v8 = *a2;
  *(_QWORD *)a1 = &off_250AF17E0;
  *(_QWORD *)(a1 + 8) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = *a4;
  v11 = *(_QWORD *)(*a4 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*a4 + 56);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 72) = 0;
  v14 = *a5;
  if (*a5)
  {
    *a5 = 0;
  }
  else
  {
    v14 = operator new();
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v14 + 48;
    *(_DWORD *)(v14 + 32) = 1065353216;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 850045863;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 136) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    *(_QWORD *)(v14 + 128) = v14 + 136;
  }
  *(_QWORD *)(a1 + 80) = v14;
  return a1;
}

void sub_239A00E3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;

  sub_239416DA0(v3);
  sub_239A00C98(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_239A00E68(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_250AF17E0;
  sub_239A059C0((uint64_t *)(a1 + 80), 0);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v5)
      goto LABEL_12;
  }
  v6 = *(std::__shared_weak_count **)(v5 + 8);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  MEMORY[0x23B83E31C](v5, 0x30C40EEE2E2AFLL);
LABEL_12:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_239A00F70(uint64_t a1)
{
  sub_239A00E68(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A00F94(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  std::mutex *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  std::string::size_type size;
  void **v20;
  std::string::size_type v21;
  char *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  char **v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57[2];
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  std::string v68;
  void *__p[2];
  uint64_t v70;
  void *v71[2];
  void *v72[2];
  int v73;
  void *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  __int128 __dst;
  void *v81;

  v6 = *a1;
  v7 = (std::mutex *)(*a1 + 7);
  std::mutex::lock(v7);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (_BYTE *)a2;
  else
    v9 = *(_BYTE **)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = 0;
  v11 = v6 + 2;
  while (v9[v10] == 46)
  {
    if (v8 == ++v10)
      goto LABEL_15;
  }
  if (v10 == -1)
  {
LABEL_15:
    *a3 = **a1;
  }
  else
  {
    if (sub_239A01828((_QWORD *)a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_23941A7F8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v81 = *(void **)(a2 + 16);
      }
    }
    else
    {
      sub_239A01AB4(a2, (uint64_t)&__dst);
    }
    v12 = sub_239A05AD4(v11, (uint64_t)&__dst);
    if (v12)
    {
      *a3 = v12[5];
      if (SHIBYTE(v81) < 0)
LABEL_103:
        operator delete((void *)__dst);
    }
    else
    {
      v13 = (uint64_t *)operator new();
      *v13 = **a1;
      v57[0] = 0;
      v57[1] = 0;
      v58 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      sub_239593804((uint64_t)v71, (uint64_t)&__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v70 = 0;
      memset(&v68, 0, sizeof(v68));
      while (1)
      {
        v15 = sub_23955D1B4(v71, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v57[1];
        if (v57[1] >= v58)
        {
          v18 = sub_23959AE70((char **)v57, (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v70) < 0)
          {
            sub_23941A7F8((_BYTE *)v57[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *((_QWORD *)v57[1] + 2) = v70;
            *v16 = v17;
          }
          v18 = (char *)v16 + 24;
        }
        v57[1] = v18;
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v68.__r_.__value_.__l.__size_;
        if (size)
          std::string::append(&v68, ".");
        if (v70 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (v70 >= 0)
          v21 = HIBYTE(v70);
        else
          v21 = (std::string::size_type)__p[1];
        std::string::append(&v68, (const std::string::value_type *)v20, v21);
        v22 = v78;
        if ((unint64_t)v78 < v79)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(v78, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
            *((_QWORD *)v78 + 2) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v14;
          }
          v78 = v22 + 24;
        }
        else
        {
          v78 = sub_23959AE70(&v77, (uint64_t)&v68);
        }
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      v71[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v71 + *((_QWORD *)v71[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v72[0] = v23;
      v72[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      if (v75 < 0)
        operator delete(v74);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](&v76);
      v24 = ((int)v78 - (int)v77) / 24 + 1;
      v25 = 24 * (((int)v78 - (int)v77) / 24) - 24;
      while (--v24 > 0)
      {
        v26 = sub_239A05AD4(v11, (uint64_t)&v77[v25]);
        v25 -= 24;
        if (v26)
        {
          v27 = (uint64_t *)operator new();
          *v27 = v26[5];
          MEMORY[0x23B83E31C](v13, 0x60C4044C4A2DFLL);
          v13 = v27;
          break;
        }
      }
      v28 = v77;
      if (v77)
      {
        v29 = v78;
        v30 = v77;
        if (v78 != v77)
        {
          do
          {
            if (*(v29 - 1) < 0)
              operator delete(*((void **)v29 - 3));
            v29 -= 24;
          }
          while (v29 != v28);
          v30 = v77;
        }
        v78 = v28;
        operator delete(v30);
      }
      v31 = (void **)v57[0];
      if (v57[0])
      {
        v32 = (void **)v57[1];
        v33 = v57[0];
        if (v57[1] != v57[0])
        {
          do
          {
            if (*((char *)v32 - 1) < 0)
              operator delete(*(v32 - 3));
            v32 -= 3;
          }
          while (v32 != v31);
          v33 = v57[0];
        }
        v57[1] = v31;
        operator delete(v33);
      }
      *(_OWORD *)v71 = 0u;
      *(_OWORD *)v72 = 0u;
      v73 = 1065353216;
      v34 = *(_QWORD **)(*(_QWORD *)(*v13 + 80) + 16);
      if (v34)
      {
        do
        {
          while (1)
          {
            v35 = (char **)v34[2];
            if (sub_239A022AC((char *)&__dst, v35 + 2))
              break;
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_79;
          }
          v57[0] = v35;
          sub_239A05D00((uint64_t)v71, (uint64_t *)v57, v57);
          v36 = (_QWORD *)*v34;
          sub_23946B1E4(*(_QWORD **)(*v13 + 80), v34, (uint64_t)v57);
          v37 = v57[0];
          v57[0] = 0;
          if (v37)
            operator delete(v37);
          v34 = v36;
        }
        while (v36);
      }
LABEL_79:
      v38 = operator new();
      sub_239A06058((uint64_t)&v63, (uint64_t)v71);
      v39 = v63;
      v40 = v64;
      v63 = 0;
      v64 = 0;
      *(_QWORD *)v38 = v39;
      *(_QWORD *)(v38 + 8) = v40;
      v41 = v65;
      v42 = v66;
      *(_QWORD *)(v38 + 16) = v65;
      *(_QWORD *)(v38 + 24) = v42;
      *(_DWORD *)(v38 + 32) = v67;
      if (v42)
      {
        v43 = v41[1];
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v43 >= v40)
            v43 %= v40;
        }
        else
        {
          v43 &= v40 - 1;
        }
        v41 = 0;
        v39[v43] = v38 + 16;
        v65 = 0;
        v66 = 0;
      }
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 40) = v38 + 48;
      *(_QWORD *)(v38 + 56) = 0;
      *(_QWORD *)(v38 + 64) = 850045863;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_QWORD *)(v38 + 144) = 0;
      *(_QWORD *)(v38 + 152) = 0;
      *(_QWORD *)(v38 + 136) = 0;
      *(_QWORD *)(v38 + 120) = 0;
      *(_QWORD *)(v38 + 128) = v38 + 136;
      v77 = (char *)v38;
      if (v41)
      {
        do
        {
          v44 = (_QWORD *)*v41;
          operator delete(v41);
          v41 = v44;
        }
        while (v44);
      }
      v45 = v63;
      v63 = 0;
      if (v45)
        operator delete(v45);
      v46 = operator new();
      v47 = *a1;
      v61 = *v13;
      v62 = v47;
      v48 = v77;
      v77 = 0;
      v60 = v48;
      sub_239A00D1C(v46, (uint64_t *)&v62, &__dst, &v61, (uint64_t *)&v60);
      sub_239A059C0((uint64_t *)&v60, 0);
      if (SHIBYTE(v81) < 0)
      {
        sub_23941A7F8(v57, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v57 = __dst;
        v58 = v81;
      }
      v59 = v46;
      v49 = sub_239A064F0((uint64_t)v11, (uint64_t)v57, (__int128 *)v57);
      v50 = v59;
      v59 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[0]);
      v51 = *((_QWORD *)v49 + 5);
      v52 = *(_QWORD *)(*v13 + 80);
      v57[0] = (void *)v51;
      sub_239A05D00(v52, (uint64_t *)v57, v57);
      v53 = v72[0];
      if (v72[0])
      {
        do
        {
          *(_QWORD *)(v53[2] + 40) = v51;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      *(_BYTE *)(v51 + 72) = sub_239A02448(*(_QWORD *)(v51 + 80), *v13);
      *a3 = v51;
      sub_239A059C0((uint64_t *)&v77, 0);
      v54 = v72[0];
      if (v72[0])
      {
        do
        {
          v55 = (_QWORD *)*v54;
          operator delete(v54);
          v54 = v55;
        }
        while (v55);
      }
      v56 = v71[0];
      v71[0] = 0;
      if (v56)
        operator delete(v56);
      MEMORY[0x23B83E31C](v13, 0x60C4044C4A2DFLL);
      if (SHIBYTE(v81) < 0)
        goto LABEL_103;
    }
  }
  std::mutex::unlock(v7);
}

void sub_239A016B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_239A059C0((uint64_t *)(v36 - 136), 0);
  sub_239420950((uint64_t)&a33);
  MEMORY[0x23B83E31C](v34, 0x60C4044C4A2DFLL);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

BOOL sub_239A01828(_QWORD *__s)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned __int8 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  char *v22;

  v2 = *((unsigned __int8 *)__s + 23);
  if (*((char *)__s + 23) < 0)
  {
    v4 = __s[1];
    if (v4)
    {
      v3 = (_QWORD *)*__s;
      goto LABEL_6;
    }
    return 1;
  }
  if (!*((_BYTE *)__s + 23))
    return 1;
  v3 = __s;
  v4 = *((unsigned __int8 *)__s + 23);
LABEL_6:
  v5 = 0;
  while (*((_BYTE *)v3 + v5) != 46)
  {
    if (v4 == ++v5)
      goto LABEL_12;
  }
  if (v4 != v5 && !v5)
    return 0;
LABEL_12:
  v7 = (_QWORD *)*__s;
  v6 = __s[1];
  if ((v2 & 0x80u) == 0)
    v8 = __s;
  else
    v8 = (_QWORD *)*__s;
  if ((v2 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)__s + 23);
  else
    v9 = __s[1];
  v10 = (char *)v8 - 1;
  while (v9)
  {
    v11 = v10[v9--];
    if (v11 == 46)
    {
      if ((v2 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  v9 = -1;
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    v7 = __s;
    v6 = *((unsigned __int8 *)__s + 23);
    if (v9 == v2 - 1)
      return 0;
    goto LABEL_27;
  }
LABEL_25:
  if (v9 == v6 - 1)
    return 0;
LABEL_27:
  if (v6 >= 2)
  {
    v12 = (char *)v7 + v6;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 46, v6 - 1);
      if (!v14)
        break;
      if (*(_WORD *)v14 == 11822)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        return 0;
      }
      v13 = v14 + 1;
      v6 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 2);
  }
  v16 = atomic_load((unsigned __int8 *)qword_25693C9D8);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(qword_25693C9D8))
  {
    sub_23941A4FC(&qword_25693CAF8, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit(MEMORY[0x24BEDACF0], &qword_25693CAF8, &dword_23940C000);
    __cxa_guard_release(qword_25693C9D8);
  }
  v17 = *((char *)__s + 23);
  if (v17 >= 0)
    v18 = (char *)__s;
  else
    v18 = (char *)*__s;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)__s + 23);
  else
    v19 = __s[1];
  if (byte_25693CB0F >= 0)
    v20 = &qword_25693CAF8;
  else
    v20 = (uint64_t *)qword_25693CAF8;
  if (byte_25693CB0F >= 0)
    v21 = byte_25693CB0F;
  else
    v21 = unk_25693CB00;
  if (!v19)
    return 1;
  v22 = v18;
  if (v21)
  {
    while (memchr(v20, *v22, v21))
    {
      ++v22;
      if (!--v19)
        return 1;
    }
  }
  return v22 - v18 == -1;
}

void sub_239A01A9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_25693C9D8);
  _Unwind_Resume(a1);
}

void sub_239A01AB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string::size_type v7;
  int64_t v8;
  std::string *p_dst;
  char *v10;
  int64_t v11;
  std::string *v12;
  char *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  void (*v23)(void *);
  std::string::value_type v24;
  unsigned __int8 v25;
  void (*v26)(void *);
  uint64_t v27;
  std::string::value_type v28;
  unsigned __int8 v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  void **v44;
  char *i;
  __int128 v46;
  uint64_t v47;
  void **v48;
  char *v49;
  char *v50;
  _BYTE *v51;
  void *__p[2];
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  _BYTE v59[152];
  char *v60;
  char *v61;
  unint64_t v62;
  std::string __dst;

  if (sub_239A01828((_QWORD *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_23941A7F8((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
    sub_23941A7F8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  v51 = (_BYTE *)a2;
  v4 = 1;
LABEL_9:
  v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  size = __dst.__r_.__value_.__l.__size_;
  v7 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v8 = __dst.__r_.__value_.__l.__size_;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (v8 < 2)
  {
    v4 = v8;
  }
  else
  {
    v10 = (char *)p_dst + v8;
    v11 = v8;
    v12 = p_dst;
    do
    {
      v13 = (char *)memchr(v12, 46, v11 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 11822)
      {
        if (v13 != v10 && v13 - (char *)p_dst != -1)
        {
          std::string::erase(&__dst, v13 - (char *)p_dst, 1uLL);
          goto LABEL_9;
        }
        break;
      }
      v12 = (std::string *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 2);
  }
  if (v4)
  {
    v14 = 0;
    while (p_dst->__r_.__value_.__s.__data_[v14] != 46)
    {
      if (v8 == ++v14)
        goto LABEL_33;
    }
    if (v8 != v14 && !v14)
    {
      std::string::erase(&__dst, 0, 1uLL);
      v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      size = __dst.__r_.__value_.__l.__size_;
      v7 = __dst.__r_.__value_.__r.__words[0];
    }
  }
LABEL_33:
  if ((v5 & 0x80u) == 0)
    v15 = &__dst;
  else
    v15 = (std::string *)v7;
  if ((v5 & 0x80u) == 0)
    v16 = v5;
  else
    v16 = size;
  v17 = (char *)&v15[-1].__r_.__value_.__r.__words[2] + 7;
  while (v16)
  {
    v18 = v17[v16--];
    if (v18 == 46)
    {
      if ((v5 & 0x80) == 0)
        goto LABEL_43;
LABEL_46:
      if (v16 == size - 1)
        goto LABEL_47;
LABEL_50:
      v19 = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_52;
      }
LABEL_59:
      v51[23] = 0;
      *v51 = 0;
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_134;
    }
  }
  v16 = -1;
  if ((v5 & 0x80) != 0)
    goto LABEL_46;
LABEL_43:
  size = v5;
  if (v16 == v5 - 1)
  {
LABEL_47:
    std::string::erase(&__dst, size, 1uLL);
    LODWORD(v5) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_50;
  }
  if (!(_DWORD)v5)
    goto LABEL_59;
  v19 = v5;
  v20 = &__dst;
LABEL_52:
  v21 = (std::string *)((char *)v20 + v19);
  v22 = v19 - 1;
  v23 = (void (*)(void *))MEMORY[0x24BEDACF0];
  while (1)
  {
    v24 = v20->__r_.__value_.__s.__data_[0];
    v25 = atomic_load((unsigned __int8 *)qword_25693C9D8);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(qword_25693C9D8))
    {
      qword_25693CAF8 = (uint64_t)operator new(0x48uLL);
      unk_25693CB00 = xmmword_239EEF490;
      strcpy((char *)qword_25693CAF8, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
      __cxa_atexit(v23, &qword_25693CAF8, &dword_23940C000);
      __cxa_guard_release(qword_25693C9D8);
    }
    if (std::string::find((const std::string *)&qword_25693CAF8, v24, 0) == -1)
      break;
    v20 = (std::string *)((char *)v20 + 1);
    --v22;
    if (v20 == v21)
      goto LABEL_71;
  }
  if (v20 == v21 || (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1) == v21)
  {
    v21 = v20;
  }
  else
  {
    v26 = (void (*)(void *))MEMORY[0x24BEDACF0];
    v27 = 1;
    v21 = v20;
    do
    {
      v28 = v20->__r_.__value_.__s.__data_[v27];
      v29 = atomic_load((unsigned __int8 *)qword_25693C9D8);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(qword_25693C9D8))
      {
        qword_25693CAF8 = (uint64_t)operator new(0x48uLL);
        unk_25693CB00 = xmmword_239EEF490;
        strcpy((char *)qword_25693CAF8, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
        __cxa_atexit(v26, &qword_25693CAF8, &dword_23940C000);
        __cxa_guard_release(qword_25693C9D8);
      }
      if (std::string::find((const std::string *)&qword_25693CAF8, v28, 0) != -1)
      {
        v21->__r_.__value_.__s.__data_[0] = v20->__r_.__value_.__s.__data_[v27];
        v21 = (std::string *)((char *)v21 + 1);
      }
      ++v27;
      --v22;
    }
    while (v22);
  }
LABEL_71:
  v30 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v31 = &__dst;
  }
  else
  {
    v30 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, (char *)v21 - (char *)v31, v30 - (char *)v21);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  sub_239593804((uint64_t)v54, (uint64_t)&__dst, 24);
  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  while (1)
  {
    v33 = sub_23955D1B4(v54, (uint64_t)__p, 0x2Eu);
    if ((*((_BYTE *)v33 + *(_QWORD *)(*v33 - 24) + 32) & 5) != 0)
      break;
    v34 = v61;
    if ((unint64_t)v61 < v62)
    {
      if (SHIBYTE(v53) < 0)
      {
        sub_23941A7F8(v61, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v32 = *(_OWORD *)__p;
        *((_QWORD *)v61 + 2) = v53;
        *(_OWORD *)v34 = v32;
      }
      v61 = v34 + 24;
    }
    else
    {
      v61 = sub_23959AE70(&v60, (uint64_t)__p);
    }
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  v35 = *MEMORY[0x24BEDB7F0];
  v54[0] = v35;
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v54 + *(_QWORD *)(v35 - 24)) = v37;
  v55 = v36;
  v56 = MEMORY[0x24BEDB848] + 16;
  if (v58 < 0)
    operator delete(v57);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](v59);
  v38 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = __dst.__r_.__value_.__l.__size_;
  if (v38)
  {
    sub_2394988CC((uint64_t)v54);
    v39 = v60;
    v40 = v61;
    if (v60 != v61)
    {
      if (v60[23] < 0)
      {
        sub_23941A7F8(__p, *(void **)v60, *((_QWORD *)v60 + 1));
      }
      else
      {
        v41 = *(_OWORD *)v60;
        v53 = *((_QWORD *)v60 + 2);
        *(_OWORD *)__p = v41;
      }
      if (v53 >= 0)
        v43 = HIBYTE(v53);
      else
        v43 = (uint64_t)__p[1];
      if (v43)
      {
        if (v53 >= 0)
          v44 = __p;
        else
          v44 = (void **)__p[0];
        sub_239458500(&v55, (uint64_t)v44, v43);
      }
      else
      {
        sub_239458500(&v55, (uint64_t)"_", 1);
      }
      if (SHIBYTE(v53) < 0)
        operator delete(__p[0]);
      for (i = v39 + 24; i != v40; i += 24)
      {
        if (i[23] < 0)
        {
          sub_23941A7F8(__p, *(void **)i, *((_QWORD *)i + 1));
        }
        else
        {
          v46 = *(_OWORD *)i;
          v53 = *((_QWORD *)i + 2);
          *(_OWORD *)__p = v46;
        }
        sub_239458500(&v55, (uint64_t)".", 1);
        if (v53 >= 0)
          v47 = HIBYTE(v53);
        else
          v47 = (uint64_t)__p[1];
        if (v47)
        {
          if (v53 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          sub_239458500(&v55, (uint64_t)v48, v47);
        }
        else
        {
          sub_239458500(&v55, (uint64_t)"_", 1);
        }
        if (SHIBYTE(v53) < 0)
          operator delete(__p[0]);
      }
    }
    std::stringbuf::str();
    v54[0] = v35;
    *(_QWORD *)((char *)v54 + *(_QWORD *)(v35 - 24)) = v37;
    v55 = v36;
    v56 = MEMORY[0x24BEDB848] + 16;
    if (v58 < 0)
      operator delete(v57);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v59);
    v42 = v60;
    if (!v60)
      goto LABEL_133;
    goto LABEL_126;
  }
  v51[23] = 1;
  *(_WORD *)v51 = 95;
  v42 = v60;
  if (v60)
  {
LABEL_126:
    v49 = v61;
    v50 = v42;
    if (v61 != v42)
    {
      do
      {
        if (*(v49 - 1) < 0)
          operator delete(*((void **)v49 - 3));
        v49 -= 24;
      }
      while (v49 != v42);
      v50 = v60;
    }
    v61 = v42;
    operator delete(v50);
  }
LABEL_133:
  if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
    return;
LABEL_134:
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_239A02210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  __cxa_guard_abort(qword_25693C9D8);
  if (*(char *)(v20 - 89) < 0)
    operator delete(*(void **)(v20 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_239A022AC(char *a1, char **a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  v4 = a1[23];
  if (a1[23] < 0)
  {
    v5 = *((_QWORD *)a1 + 1);
    if (v3 <= v5)
      return 0;
  }
  else
  {
    v5 = a1[23];
    if (v3 <= v4)
      return 0;
  }
  if (!v5)
    return 1;
  if (v2 >= 0)
    v7 = (char *)a2;
  else
    v7 = *a2;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    if ((uint64_t)v3 >= v9)
    {
      v10 = &v7[v3];
      v11 = *v8;
      v12 = v3;
      v13 = v7;
      while (1)
      {
        v14 = v12 - v9;
        if (v14 == -1)
          break;
        result = (uint64_t)memchr(v13, v11, v14 + 1);
        if (!result)
          return result;
        v15 = result;
        result = memcmp((const void *)result, v8, v9);
        if (!(_DWORD)result)
        {
          if ((char *)v15 == v10 || (char *)v15 != v7)
            return result;
          goto LABEL_30;
        }
        result = 0;
        v13 = (char *)(v15 + 1);
        v12 = (int64_t)&v10[-v15 - 1];
        if (v12 < v9)
          return result;
      }
    }
    return 0;
  }
LABEL_30:
  if (v7[v9] != 46 || v3 <= v9 + 1)
    return 0;
  while (v7[v9 + 1] == 46)
  {
    result = 0;
    if (v3 - 1 == ++v9)
      return result;
  }
  return v9 != -2;
}

BOOL sub_239A02448(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _BOOL8 v18;
  __int128 v20;
  std::mutex *v21;

  v4 = (std::mutex *)(*(_QWORD *)(a2 + 80) + 64);
  std::mutex::lock(v4);
  v5 = (std::mutex *)(a1 + 64);
  v21 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD **)(v6 + 128);
  v8 = (_QWORD *)(v6 + 136);
  if (v7 != (_QWORD *)(v6 + 136))
  {
    while (1)
    {
      v9 = v7[6];
      *(_QWORD *)&v20 = v7[5];
      *((_QWORD *)&v20 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_239A026E4(a1, &v20, (uint64_t)&v21);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (!*((_QWORD *)&v20 + 1))
        goto LABEL_11;
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (_QWORD *)v7[1];
        if (!v15)
        {
          do
          {
LABEL_15:
            v16 = (_QWORD *)v7[2];
            v17 = *v16 == (_QWORD)v7;
            v7 = v16;
          }
          while (!v17);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v15 = (_QWORD *)v7[1];
        if (!v15)
          goto LABEL_15;
      }
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_3:
      v7 = v16;
      if (v16 == v8)
      {
        v5 = v21;
        break;
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 152) != 0;
  std::mutex::unlock(v5);
  std::mutex::unlock(v4);
  return v18;
}

void sub_239A02588(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A0259C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  std::mutex *v12;

  sub_239416DA0((uint64_t)&a10);
  std::mutex::unlock(a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_239A025C0(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[2];
  std::mutex *v10;

  v10 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v10);
  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  *a2 = 0;
  a2[1] = 0;
  v5 = sub_239A00AD4(a1, v9, (uint64_t)&v10);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::unlock(v10);
  return v5;
}

void sub_239A02660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::mutex *a12)
{
  sub_239416DA0((uint64_t)&a10);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_239A0267C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_239A026E4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t **v6;
  char v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  __int128 v14;
  uint64_t **v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;

  if (a3)
  {
    v5 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v5;
    v23 = v5;
    v6 = sub_239A057FC((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v8 = v7;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v8 && *((_BYTE *)v6[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v13 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    v14 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v22 = v14;
    v23 = v14;
    v15 = sub_239A057FC((uint64_t **)(a1 + 128), (__int128 *)&v22);
    v17 = v16;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v17 && *((_BYTE *)v15[4] + 8))
      ++*(_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 152);
    std::mutex::unlock(v13);
  }
  return v12 != 0;
}

void sub_239A028B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_239A0267C((uint64_t)va1);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void sub_239A028DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_239A0267C((uint64_t)va1);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A028F8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = v2[2];
      v5 = v3[1];
      v6 = *(_QWORD *)(v4 + 80);
      *(_QWORD *)&v12 = *v3;
      *((_QWORD *)&v12 + 1) = v5;
      if (v5)
      {
        v7 = (unint64_t *)(v5 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      *(_BYTE *)(v4 + 72) = sub_239A026E4(v6, &v12, 0);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      result = sub_239A028F8(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_239A029BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_239EC3650(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A029D4(uint64_t a1, unint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  std::mutex *v7;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  v7 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v7);
  v5 = sub_239A02A7C(a1, a2, (uint64_t)&v7);
  std::mutex::unlock(v7);
  std::mutex::unlock(v4);
  return v5;
}

void sub_239A02A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_239A02A68(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A02A7C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  unint64_t v23;

  v4 = *(_QWORD **)(a1 + 80);
  result = (uint64_t *)v4[6];
  if (result)
  {
    v8 = v4 + 6;
    v9 = (_QWORD *)v4[6];
    do
    {
      v10 = v9[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (v11)
        v8 = v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 == v4 + 6)
    {
      return 0;
    }
    else if (v8[4] <= a2)
    {
      v13 = (uint64_t *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v15 = v8;
        do
        {
          v14 = (uint64_t *)v15[2];
          v16 = *v14 == (_QWORD)v15;
          v15 = v14;
        }
        while (!v16);
      }
      if ((uint64_t *)v4[5] == v8)
        v4[5] = v14;
      --v4[7];
      sub_2394F0930(result, v8);
      v17 = (std::__shared_weak_count *)v8[6];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v8);
      v20 = *(_QWORD *)(a1 + 80);
      if (a3)
      {
        sub_239A056DC(*(_QWORD **)(a1 + 80), a2);
        v21 = *(_QWORD *)(v20 + 152);
      }
      else
      {
        v22 = (std::mutex *)(v20 + 64);
        std::mutex::lock((std::mutex *)(v20 + 64));
        sub_239A056DC((_QWORD *)v20, a2);
        v21 = *(_QWORD *)(v20 + 152);
        std::mutex::unlock(v22);
      }
      *(_BYTE *)(a1 + 72) = v21 != 0;
      v23 = a2;
      sub_239A02C40((uint64_t)&v23, a1);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_239A02C2C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A02C40(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;

  v2 = *(_QWORD **)(*(_QWORD *)(a2 + 80) + 16);
  if (v2)
  {
    v3 = (unint64_t *)result;
    do
    {
      v4 = v2[2];
      v5 = *v3;
      v6 = *(_QWORD *)(v4 + 80);
      v7 = (std::mutex *)(v6 + 64);
      std::mutex::lock((std::mutex *)(v6 + 64));
      sub_239A056DC((_QWORD *)v6, v5);
      v8 = *(_QWORD *)(v6 + 152);
      std::mutex::unlock(v7);
      *(_BYTE *)(v4 + 72) = v8 != 0;
      result = sub_239A02C40(v3, v2[2]);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_239A02CC8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A02CDC(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::mutex *v4;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v2);
  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_239A02A7C(a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32), (uint64_t)&v4);
  }
  std::mutex::unlock(v4);
  std::mutex::unlock(v2);
}

void sub_239A02D54(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A02D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex *v10;

  std::mutex::unlock(a10);
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_239A02D84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 80) + 64);
  std::mutex::lock(v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_23995F608((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56));
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD **)(v5 + 40);
  v7 = (_QWORD *)(v5 + 48);
  if (v6 != (_QWORD *)(v5 + 48))
  {
    v8 = (_QWORD *)a2[1];
    do
    {
      if ((unint64_t)v8 >= a2[2])
      {
        v8 = sub_23951E0F0((uint64_t)a2, (__int128 *)(v6 + 5));
      }
      else
      {
        v9 = v6[6];
        *v8 = v6[5];
        v8[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v8 += 2;
      }
      a2[1] = v8;
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v7);
  }
  std::mutex::unlock(v4);
}

void sub_239A02E74(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void **v2;

  sub_2394631DC(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A02E94(_QWORD *a1, int a2)
{
  _DWORD **v3;
  std::mutex *v5;
  uint64_t *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t i;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;

  v3 = (_DWORD **)a1[6];
  if (v3)
  {
    **v3 = a2;
    return;
  }
  v5 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v5);
  v6 = (uint64_t *)operator new();
  v7 = (std::__shared_weak_count_vtbl *)operator new();
  LODWORD(v7->~__shared_weak_count) = a2;
  *v6 = (uint64_t)v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1928;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  v6[1] = (uint64_t)v8;
  v9 = a1[6];
  a1[6] = v6;
  if (!v9)
  {
    v13 = *v6;
    goto LABEL_13;
  }
  v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MEMORY[0x23B83E31C](v9, 0x30C40EEE2E2AFLL);
  v13 = *(_QWORD *)a1[6];
  v8 = *(std::__shared_weak_count **)(a1[6] + 8);
  if (v8)
  {
LABEL_13:
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v14 = 0;
    v15 = (std::__shared_weak_count *)a1[8];
    a1[7] = v13;
    a1[8] = v8;
    if (!v15)
      goto LABEL_21;
    goto LABEL_17;
  }
  v14 = 1;
  v15 = (std::__shared_weak_count *)a1[8];
  a1[7] = v13;
  a1[8] = 0;
  if (!v15)
    goto LABEL_21;
LABEL_17:
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_21:
  if ((v14 & 1) == 0)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = *(_QWORD **)(a1[10] + 16);
  *(_OWORD *)__p = 0u;
  v49 = 0u;
  v50 = 0u;
  v24 = 0;
  if (v23)
  {
    v25 = v23;
    do
    {
      ++v24;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  sub_239A06974(__p, v23, v24);
  i = *((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v27 = (void **)__p[1];
    v28 = v50;
    while (1)
    {
      v29 = *(uint64_t *)((char *)v27 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8));
      v30 = v28 & 0x1FF;
      v31 = *(_QWORD **)(v29 + 8 * v30);
      if (!v31[6])
      {
        v33 = a1[7];
        v32 = a1[8];
        if (v32)
        {
          v34 = (unint64_t *)(v32 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = (std::__shared_weak_count *)v31[8];
        v31[7] = v33;
        v31[8] = v32;
        if (!v36)
          goto LABEL_42;
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          for (i = *((_QWORD *)&v50 + 1); v39; v39 = (_QWORD *)*v39)
          {
LABEL_47:
            v40 = (char *)__p[1];
            if ((void *)v49 == __p[1])
              v41 = 0;
            else
              v41 = (((_QWORD)v49 - (unint64_t)__p[1]) << 6) - 1;
            v42 = v50 + i;
            if (v41 == v42)
            {
              sub_239A07424((uint64_t)__p);
              v40 = (char *)__p[1];
              v42 = *((_QWORD *)&v50 + 1) + v50;
            }
            *(_QWORD *)(*(_QWORD *)&v40[(v42 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v42 & 0x1FF)) = v39[2];
            i = ++*((_QWORD *)&v50 + 1);
          }
        }
        else
        {
LABEL_42:
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 80) + 16);
          i = *((_QWORD *)&v50 + 1);
          if (v39)
            goto LABEL_47;
        }
      }
      v27 = (void **)__p[1];
      --i;
      v28 = v50 + 1;
      *(_QWORD *)&v50 = v28;
      *((_QWORD *)&v50 + 1) = i;
      if (v28 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v27 = (void **)((char *)__p[1] + 8);
        v28 = v50 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v50 = v50 - 512;
        i = *((_QWORD *)&v50 + 1);
      }
      if (!i)
        goto LABEL_53;
    }
  }
  v27 = (void **)__p[1];
LABEL_53:
  v43 = (void **)v49;
  *((_QWORD *)&v50 + 1) = 0;
  v44 = v49 - (_QWORD)v27;
  if ((_QWORD)v49 - (_QWORD)v27 >= 0x11uLL)
  {
    do
    {
      operator delete(*v27);
      v43 = (void **)v49;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v44 = v49 - (_QWORD)v27;
    }
    while ((_QWORD)v49 - (_QWORD)v27 > 0x10uLL);
  }
  v45 = v44 >> 3;
  if (v45 == 1)
  {
    v46 = 256;
  }
  else
  {
    if (v45 != 2)
      goto LABEL_60;
    v46 = 512;
  }
  *(_QWORD *)&v50 = v46;
LABEL_60:
  if (v27 != v43)
  {
    do
    {
      v47 = *v27++;
      operator delete(v47);
    }
    while (v27 != v43);
    if ((void *)v49 != __p[1])
      *(_QWORD *)&v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::mutex::unlock(v5);
}

void sub_239A032DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_239A03334(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x23B83E31C](v3, 0x1000C4052888210);
  MEMORY[0x23B83E31C](v2, 0x30C40EEE2E2AFLL);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A03380(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A03394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_2394D0C00((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A033B0(_QWORD *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t i;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;

  if (a1[6])
  {
    if (!a1[5])
      return 0;
    v2 = (std::mutex *)(a1[1] + 56);
    std::mutex::lock(v2);
    v3 = a1[5];
    v5 = *(_QWORD *)(v3 + 56);
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (std::__shared_weak_count *)a1[8];
    a1[7] = v5;
    a1[8] = v4;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD **)(a1[10] + 16);
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    v44 = 0u;
    v12 = 0;
    if (v11)
    {
      v13 = v11;
      do
      {
        ++v12;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    sub_239A06974(__p, v11, v12);
    i = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v15 = (char *)__p[1];
      v16 = v44;
      do
      {
        v17 = *(_QWORD *)&v15[(v16 >> 6) & 0x3FFFFFFFFFFFFF8];
        v18 = v16 & 0x1FF;
        v19 = *(_QWORD **)(v17 + 8 * v18);
        if (!v19[6])
        {
          v21 = a1[7];
          v20 = a1[8];
          if (v20)
          {
            v22 = (unint64_t *)(v20 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (std::__shared_weak_count *)v19[8];
          v19[7] = v21;
          v19[8] = v20;
          if (!v24)
            goto LABEL_27;
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            for (i = *((_QWORD *)&v44 + 1); v27; v27 = (_QWORD *)*v27)
            {
LABEL_32:
              v28 = (char *)__p[1];
              if ((void *)v43 == __p[1])
                v29 = 0;
              else
                v29 = (((_QWORD)v43 - (unint64_t)__p[1]) << 6) - 1;
              v30 = v44 + i;
              if (v29 == v30)
              {
                sub_239A07424((uint64_t)__p);
                v28 = (char *)__p[1];
                v30 = *((_QWORD *)&v44 + 1) + v44;
              }
              *(_QWORD *)(*(_QWORD *)&v28[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = v27[2];
              i = ++*((_QWORD *)&v44 + 1);
            }
          }
          else
          {
LABEL_27:
            v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v18) + 80) + 16);
            i = *((_QWORD *)&v44 + 1);
            if (v27)
              goto LABEL_32;
          }
        }
        v15 = (char *)__p[1];
        --i;
        v16 = v44 + 1;
        *(_QWORD *)&v44 = v16;
        *((_QWORD *)&v44 + 1) = i;
        if (v16 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          v15 = (char *)__p[1] + 8;
          v16 = v44 - 512;
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v44 = v44 - 512;
          i = *((_QWORD *)&v44 + 1);
        }
      }
      while (i);
    }
    v31 = a1[6];
    a1[6] = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 8);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x23B83E31C](v31, 0x30C40EEE2E2AFLL);
    }
    v35 = (void **)__p[1];
    v36 = (void **)v43;
    *((_QWORD *)&v44 + 1) = 0;
    v37 = v43 - (unint64_t)__p[1];
    if ((unint64_t)v43 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v35);
        v36 = (void **)v43;
        v35 = (void **)((char *)__p[1] + 8);
        __p[1] = v35;
        v37 = v43 - (_QWORD)v35;
      }
      while ((_QWORD)v43 - (_QWORD)v35 > 0x10uLL);
    }
    v38 = v37 >> 3;
    if (v38 == 1)
    {
      v39 = 256;
    }
    else
    {
      if (v38 != 2)
        goto LABEL_52;
      v39 = 512;
    }
    *(_QWORD *)&v44 = v39;
LABEL_52:
    if (v35 != v36)
    {
      do
      {
        v41 = *v35++;
        operator delete(v41);
      }
      while (v35 != v36);
      if ((void *)v43 != __p[1])
        *(_QWORD *)&v43 = v43 + (((unint64_t)__p[1] - v43 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    std::mutex::unlock(v2);
  }
  return 1;
}

void sub_239A03728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_239A03780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_2394D0C00((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_239A0379C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(*(_QWORD *)(a1 + 8) + 56);
  std::mutex::lock(v4);
  sub_239A037F8(a1, a2);
  std::mutex::unlock(v4);
}

void sub_239A037E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A037F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD **v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *i;
  void *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_DWORD ***)(a1 + 48);
  if (v4)
  {
    v5 = **v4 - 1;
    if (v5 > 5)
    {
      v6 = "{error}";
      v7 = strlen("{error}");
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_31;
    }
    else
    {
      v6 = off_250AF1A58[v5];
      v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
        sub_23941A5AC();
    }
  }
  else
  {
    v6 = "NONE";
    v7 = strlen("NONE");
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  v8 = v7;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v9 = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&v21 + 1) = v8;
    v22 = v12 | 0x8000000000000000;
    *(_QWORD *)&v21 = v9;
LABEL_13:
    memcpy(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v22) = v7;
  v9 = &v21;
  if (v7)
    goto LABEL_13;
  LOBYTE(v21) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 56);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
LABEL_9:
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    goto LABEL_15;
  }
LABEL_14:
  sub_23941A7F8((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_15:
  v13 = (_BYTE *)(a2 + 24);
  if (SHIBYTE(v22) < 0)
  {
    v16 = (void *)v21;
    sub_23941A7F8(v13, (void *)v21, *((unint64_t *)&v21 + 1));
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    operator delete(v16);
    for (i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16); i; i = (_QWORD *)*i)
    {
LABEL_21:
      while (1)
      {
        sub_239A037F8(&v21, i[2]);
        v17 = *(_QWORD *)(a2 + 64);
        if (v17 < *(_QWORD *)(a2 + 72))
          break;
        *(_QWORD *)(a2 + 64) = sub_239A079E0(v14, (uint64_t)&v21);
        sub_2399FE404((uint64_t)&v21);
        i = (_QWORD *)*i;
        if (!i)
          return;
      }
      if (SHIBYTE(v22) < 0)
      {
        sub_23941A7F8(*(_BYTE **)(a2 + 64), (void *)v21, *((unint64_t *)&v21 + 1));
      }
      else
      {
        v18 = v21;
        *(_QWORD *)(v17 + 16) = v22;
        *(_OWORD *)v17 = v18;
      }
      v19 = (_BYTE *)(v17 + 24);
      if (SHIBYTE(v24) < 0)
      {
        sub_23941A7F8(v19, (void *)v23, *((unint64_t *)&v23 + 1));
      }
      else
      {
        v20 = v23;
        *(_QWORD *)(v17 + 40) = v24;
        *(_OWORD *)v19 = v20;
      }
      *(_QWORD *)(v17 + 48) = v25;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      *(_OWORD *)(v17 + 56) = v26;
      *(_QWORD *)(v17 + 72) = v27;
      v26 = 0uLL;
      v27 = 0;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      *(_QWORD *)(a2 + 64) = v17 + 80;
      sub_2399FE404((uint64_t)&v21);
    }
  }
  else
  {
    *(_OWORD *)v13 = v21;
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 56) = 0;
    v14 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    i = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 16);
    if (i)
      goto LABEL_21;
  }
}

void sub_239A03A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_239A03AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  *(_QWORD *)(v9 + 64) = v10;
  sub_2399FE404((uint64_t)&a9);
  sub_2399FE404(v9);
  JUMPOUT(0x239A03B1CLL);
}

uint64_t sub_239A03B24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 80);
  v3 = *(_QWORD **)(v2 + 128);
  v4 = (_QWORD *)(v2 + 136);
  if (v3 != (_QWORD *)(v2 + 136))
  {
    do
    {
      result = v3[5];
      if (*(_BYTE *)(result + 8))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

_QWORD **sub_239A03BB8@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = **result;
  return result;
}

void sub_239A03BC8(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  v3 = *a1;
  sub_239A00F94(&v3, a2, a3);
}

void sub_239A03BF0(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24[2];
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 1065353216;
  *(_QWORD *)(v2 + 56) = 850045863;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  v3 = operator new();
  sub_239A03F78();
  *(_BYTE *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_250AF1880;
  v4 = (_QWORD *)operator new();
  *v4 = off_250AF1800;
  v5 = v4 + 1;
  if (byte_25693CCB7 < 0)
  {
    sub_23941A7F8(v5, (void *)xmmword_25693CCA0, *((unint64_t *)&xmmword_25693CCA0 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_25693CCA0;
    v4[3] = unk_25693CCB0;
  }
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 24) = 63;
  v24[1] = v3;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF19C8;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v25 = v6;
  v8 = operator new();
  v24[0] = v2;
  v26 = v3;
  v27 = v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  sub_239A04078(&__p, &v26, 1uLL);
  sub_239A00874(v8, v24, (uint64_t)&__p);
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v23;
    v12 = __p;
    if (v23 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v23 = v10;
    operator delete(v12);
  }
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)v2 = v8;
  sub_239A00124((uint64_t *)(v2 + 8), v2);
  *a1 = v2;
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_239A03EBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x23B83E31C](v1, 0x1093C402D7449D9);
  MEMORY[0x23B83E31C](v2, 0x10A1C40503A8522);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A03F78()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)qword_25693CA00);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_25693CA00))
    return &qword_25693CC98;
  sub_23941A4FC(__p, "%d [%t] %p %c: %m%n");
  sub_239A04240(&qword_25693CC98, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_239A042E8, &qword_25693CC98, &dword_23940C000);
  __cxa_guard_release(qword_25693CA00);
  return &qword_25693CC98;
}

void sub_239A0402C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_25693CA00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_25693CA00);
  _Unwind_Resume(a1);
}

_DWORD *sub_239A0406C(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *sub_239A04078(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_2394189F8();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_239A0411C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_239EC3344((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

__int128 *sub_239A04140()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)qword_25693C9F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_25693C9F0))
    return &xmmword_25693CB10;
  sub_23941A4FC(&xmmword_25693CB10, "ILayout");
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_25693CB10, &dword_23940C000);
  __cxa_guard_release(qword_25693C9F0);
  return &xmmword_25693CB10;
}

void sub_239A041CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_25693C9F0);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A041E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v4);
  *a2 = v4;
  return result;
}

BOOL sub_239A04220(_DWORD *a1, char a2)
{
  return (*a1 | (1 << (a2 - 1))) == *a1;
}

_QWORD *sub_239A04240(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  unsigned __int8 v5;
  unsigned __int8 v7;

  *a1 = off_250AF1800;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = atomic_load((unsigned __int8 *)&qword_25693CA28);
    if ((v7 & 1) != 0)
      return a1;
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
    v5 = atomic_load((unsigned __int8 *)&qword_25693CA28);
    if ((v5 & 1) != 0)
      return a1;
  }
  if (!__cxa_guard_acquire(&qword_25693CA28))
    return a1;
  qword_25693CA20 = std::chrono::steady_clock::now().__d_.__rep_;
  __cxa_guard_release(&qword_25693CA28);
  return a1;
}

uint64_t sub_239A042E8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_250AF1800;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_239A04334(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF1800;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x23B83E31CLL);
}

__int128 *sub_239A04380()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25693CA10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25693CA10))
    return &xmmword_25693CB28;
  sub_23941A4FC(&xmmword_25693CB28, "PatternLayout");
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_25693CB28, &dword_23940C000);
  __cxa_guard_release(&qword_25693CA10);
  return &xmmword_25693CB28;
}

void sub_239A0440C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693CA10);
  _Unwind_Resume(a1);
}

uint64_t sub_239A04424(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  int64_t v19;
  tm __t;
  time_t v21;
  char __s[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2 / 1000 % 1000;
  if (v3 >= 0)
    v4 = *a2 / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = *a2 - 1000 * v4;
  v21 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v21, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v18 = v8;
    v19 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_11:
    memcpy(p_dst, __s, v8);
  v12 = (_QWORD *)(a1 + 16);
  *((_BYTE *)p_dst + v8) = 0;
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 >= 0)
    v14 = HIBYTE(v19);
  else
    v14 = v18;
  v15 = sub_239458500(v12, (uint64_t)v13, v14);
  sub_239458500(v15, (uint64_t)",", 1);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    if (v4 <= 9)
      goto LABEL_20;
  }
  else if (v4 <= 9)
  {
LABEL_20:
    sub_239458500(v12, (uint64_t)"00", 2);
    return std::ostream::operator<<();
  }
  if (v4 <= 0x63)
    sub_239458500(v12, (uint64_t)"0", 1);
  return std::ostream::operator<<();
}

void sub_239A0463C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__int128 *sub_239A04664()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25693CA10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25693CA10))
    return &xmmword_25693CB28;
  byte_25693CB3F = 13;
  strcpy((char *)&xmmword_25693CB28, "PatternLayout");
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_25693CB28, &dword_23940C000);
  __cxa_guard_release(&qword_25693CA10);
  return &xmmword_25693CB28;
}

void sub_239A04700(int a1, uint64_t *a2)
{
  unsigned __int8 v3;
  void *v4[2];
  uint64_t v5;
  __int128 __p;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_25693CA18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25693CA18))
  {
    sub_239A04380();
    if (byte_25693CB3F < 0)
    {
      sub_23941A7F8(v4, (void *)xmmword_25693CB28, *((unint64_t *)&xmmword_25693CB28 + 1));
    }
    else
    {
      *(_OWORD *)v4 = xmmword_25693CB28;
      v5 = unk_25693CB38;
    }
    sub_239A04140();
    if (byte_25693CB27 < 0)
    {
      sub_23941A7F8(&__p, (void *)xmmword_25693CB10, *((unint64_t *)&xmmword_25693CB10 + 1));
    }
    else
    {
      __p = xmmword_25693CB10;
      v7 = unk_25693CB20;
    }
    sub_23941B674(qword_25693CB40, (uint64_t)v4, 2uLL);
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v5) < 0)
      operator delete(v4[0]);
    __cxa_atexit((void (*)(void *))sub_23941B08C, qword_25693CB40, &dword_23940C000);
    __cxa_guard_release(&qword_25693CA18);
  }
  if (a2 != qword_25693CB40)
    sub_239A70694((uint64_t)a2, (std::string *)qword_25693CB40[0], unk_25693CB48, 0xAAAAAAAAAAAAAAABLL * ((unk_25693CB48 - qword_25693CB40[0]) >> 3));
}

void sub_239A04880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_25693CA18);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  __cxa_guard_abort(&qword_25693CA18);
  _Unwind_Resume(a1);
}

void sub_239A048E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693CA18);
  _Unwind_Resume(a1);
}

_BYTE *sub_239A04900@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_250AF1800;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_23941A7F8(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_239A0498C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A049B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t i;
  char *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  void **v18;
  uint64_t v19;
  unsigned __int8 v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  void *v28[2];
  unsigned __int8 v29;

  sub_2394988CC((uint64_t)v24);
  if (*(char *)(a1 + 31) < 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 < 2)
      goto LABEL_50;
    goto LABEL_5;
  }
  v4 = *(unsigned __int8 *)(a1 + 31);
  if (v4 >= 2)
  {
LABEL_5:
    v5 = 0;
    v6 = (_QWORD *)(a1 + 8);
    for (i = 1; i < v4; i += 2)
    {
      if (*(char *)(a1 + 31) < 0)
      {
        v10 = *(char *)(a1 + 31);
        if (*(_BYTE *)(*v6 + v5) != 37)
        {
LABEL_21:
          v15 = a1 + 8;
          if (v10 < 0)
            v15 = *v6;
          LOBYTE(v28[0]) = *(_BYTE *)(v15 + v5);
          sub_239458500(v25, (uint64_t)v28, 1);
          i = v5;
          goto LABEL_8;
        }
      }
      else
      {
        v10 = *(char *)(a1 + 31);
        if (*((_BYTE *)v6 + v5) != 37)
          goto LABEL_21;
      }
      v11 = a1 + 8;
      if (v10 < 0)
        v11 = *v6;
      v12 = (_BYTE *)(v11 + i);
      if (v4 <= i + 1)
        v13 = i + 1;
      else
        v13 = v4;
      while (2)
      {
        switch(*v12)
        {
          case '%':
            v16 = "%";
            goto LABEL_39;
          case 'F':
            v8 = *(char **)(a2 + 32);
            v17 = strrchr(v8, 47);
            if (v17)
            {
              v8 = v17 + 1;
            }
            else
            {
              v21 = strrchr(v8, 92);
              if (v21)
                v8 = v21 + 1;
            }
            goto LABEL_7;
          case 'L':
            std::ostream::operator<<();
            break;
          case 'c':
            v8 = *(char **)a2;
            goto LABEL_7;
          case 'd':
            sub_239A04424((uint64_t)v24, (_QWORD *)(a2 + 16));
            break;
          case 'f':
            v8 = *(char **)(a2 + 48);
            goto LABEL_7;
          case 'm':
            std::stringbuf::str();
            if ((v29 & 0x80u) == 0)
              v18 = v28;
            else
              v18 = (void **)v28[0];
            if ((v29 & 0x80u) == 0)
              v19 = v29;
            else
              v19 = (uint64_t)v28[1];
            sub_239458500(v25, (uint64_t)v18, v19);
            if ((char)v29 < 0)
              operator delete(v28[0]);
            break;
          case 'n':
            v16 = "\n";
LABEL_39:
            sub_239458500(v25, (uint64_t)v16, 1);
            break;
          case 'p':
            v8 = off_250AF1838[*(unsigned int *)(a2 + 24)];
LABEL_7:
            v9 = strlen(v8);
            sub_239458500(v25, (uint64_t)v8, v9);
            break;
          case 'r':
            v20 = atomic_load((unsigned __int8 *)&qword_25693CA28);
            if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_25693CA28))
            {
              qword_25693CA20 = std::chrono::steady_clock::now().__d_.__rep_;
              __cxa_guard_release(&qword_25693CA28);
            }
            std::ostream::operator<<();
            break;
          case 't':
            pthread_self();
            std::ostream::operator<<();
            break;
          default:
            v14 = a1 + 8;
            if (*(char *)(a1 + 31) < 0)
              v14 = *v6;
            v12 = (_BYTE *)(v14 + i++ + 1);
            if (i < v4)
              continue;
            i = v13;
            break;
        }
        break;
      }
LABEL_8:
      v5 = i + 1;
    }
  }
LABEL_50:
  std::stringbuf::str();
  v24[0] = *MEMORY[0x24BEDB7F0];
  v22 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v25[0] = v22;
  v25[1] = MEMORY[0x24BEDB848] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B83E250](&v27);
}

void sub_239A04D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 89) < 0)
  {
    operator delete(*(void **)(v2 - 112));
    sub_239498ABC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A04D98(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  _BYTE *v5;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_250AF1880;
  v4 = (_QWORD *)operator new();
  sub_239A03F78();
  *v4 = off_250AF1800;
  v5 = v4 + 1;
  if (byte_25693CCB7 < 0)
  {
    sub_23941A7F8(v5, (void *)xmmword_25693CCA0, *((unint64_t *)&xmmword_25693CCA0 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_25693CCA0;
    v4[3] = unk_25693CCB0;
  }
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *a2;
  return a1;
}

void sub_239A04E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A04E70(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AF1880;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_239A04EB4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250AF1880;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t *sub_239A04F08()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25693CA30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25693CA30))
    return &qword_25693CB58;
  sub_23941A4FC(&qword_25693CB58, "ConsoleAppender");
  __cxa_atexit(MEMORY[0x24BEDACF0], &qword_25693CB58, &dword_23940C000);
  __cxa_guard_release(&qword_25693CA30);
  return &qword_25693CB58;
}

void sub_239A04F94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693CA30);
  _Unwind_Resume(a1);
}

void sub_239A04FAC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *p_p;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 24)) == *(_DWORD *)(a1 + 24))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25693CA38);
    if ((v3 & 1) == 0)
    {
      v13 = a1;
      v14 = __cxa_guard_acquire(&qword_25693CA38);
      a1 = v13;
      if (v14)
      {
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_256934468, &dword_23940C000);
        __cxa_guard_release(&qword_25693CA38);
        a1 = v13;
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&__p, *(_QWORD *)(a1 + 16), a2);
    std::mutex::lock(&stru_256934468);
    v4 = *(_DWORD *)(a2 + 24);
    if ((v4 - 1) < 3)
    {
      v9 = atomic_load((unsigned __int8 *)qword_25693CA40);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_25693CA40))
      {
        qword_25693CAE8 = MEMORY[0x24BEDB318];
        qword_25693CAF0 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_25693CA40);
      }
      if ((v17 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v17 & 0x80u) == 0)
        v11 = v17;
      else
        v11 = v16;
      sub_239458500((_QWORD *)qword_25693CAE8, (uint64_t)p_p, v11);
      v12 = atomic_load((unsigned __int8 *)qword_25693CA40);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v4 - 4) >= 3)
        goto LABEL_23;
      v5 = atomic_load((unsigned __int8 *)qword_25693CA40);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(qword_25693CA40))
      {
        qword_25693CAE8 = MEMORY[0x24BEDB318];
        qword_25693CAF0 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_25693CA40);
      }
      if ((v17 & 0x80u) == 0)
        v6 = &__p;
      else
        v6 = __p;
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = v16;
      sub_239458500((_QWORD *)qword_25693CAF0, (uint64_t)v6, v7);
      v8 = atomic_load((unsigned __int8 *)qword_25693CA40);
      if ((v8 & 1) != 0)
      {
LABEL_22:
        std::ostream::flush();
LABEL_23:
        std::mutex::unlock(&stru_256934468);
        if ((char)v17 < 0)
          operator delete(__p);
        return;
      }
    }
    if (__cxa_guard_acquire(qword_25693CA40))
    {
      qword_25693CAE8 = MEMORY[0x24BEDB318];
      qword_25693CAF0 = MEMORY[0x24BEDB310];
      __cxa_guard_release(qword_25693CA40);
    }
    goto LABEL_22;
  }
}

void sub_239A051E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_239A05218()
{
  return "";
}

uint64_t *sub_239A05224()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25693CA30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693CA30))
  {
    byte_25693CB6F = 15;
    strcpy((char *)&qword_25693CB58, "ConsoleAppender");
    __cxa_atexit(MEMORY[0x24BEDACF0], &qword_25693CB58, &dword_23940C000);
    __cxa_guard_release(&qword_25693CA30);
  }
  if (byte_25693CB6F >= 0)
    return &qword_25693CB58;
  else
    return (uint64_t *)qword_25693CB58;
}

_QWORD *sub_239A052C0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 4);
    if (v7 >= 0x333333333333334)
      sub_2394189F8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[80 * v7];
    a1[1] = sub_239A05418(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_239A05368(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;

  v1[1] = v2;
  if (*v1)
    sub_239EC3698(v1 + 1, *v1, v1);
  _Unwind_Resume(exception_object);
}

void ***sub_239A05394(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_2399FE404(v4 - 80);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_239A05418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  _BYTE *v11;
  void **v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_23941A7F8((_BYTE *)v8, *(void **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = (_BYTE *)(a4 + v7 + 24);
      v12 = (void **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        sub_23941A7F8(v11, *v12, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)v11 = v13;
      }
      v14 = *(_QWORD *)(a2 + v7 + 48);
      *(_QWORD *)(a4 + v7 + 56) = 0;
      v15 = (_QWORD *)(a4 + v7 + 56);
      *(v15 - 1) = v14;
      v15[1] = 0;
      v15[2] = 0;
      v16 = *(_QWORD *)(a2 + v7 + 56);
      v17 = *(_QWORD *)(a2 + v7 + 64);
      v18 = v17 - v16;
      if (v17 != v16)
      {
        v19 = 0xCCCCCCCCCCCCCCCDLL * (v18 >> 4);
        if (v19 >= 0x333333333333334)
          sub_2394189F8();
        v20 = (char *)operator new(v18);
        *v15 = v20;
        *(_QWORD *)(a4 + v7 + 64) = v20;
        *(_QWORD *)(a4 + v7 + 72) = &v20[80 * v19];
        *(_QWORD *)(a4 + v7 + 64) = sub_239A05418(a4 + v7 + 72, v16, v17, v20);
      }
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_239A0558C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(char *)(v1 + v2 + 23) < 0)
  {
    operator delete(*(void **)(v1 + v2));
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
    goto LABEL_7;
  }
  v4 = v1 - 80;
  do
  {
    sub_2399FE404(v4 + v2);
    v2 -= 80;
  }
  while (v2);
LABEL_7:
  _Unwind_Resume(exception_object);
}

void sub_239A05628(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A0564C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x23B83E31CLL);
  return result;
}

uint64_t sub_239A0566C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_239A056DC(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = a1 + 17;
  v3 = (uint64_t *)a1[17];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4)
    {
      v10 = v5[4];
      if (v10 <= a2)
      {
        if (*(_BYTE *)(v10 + 8))
          --a1[19];
        v11 = (uint64_t *)v5[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          v13 = v5;
          do
          {
            v12 = (uint64_t *)v13[2];
            v14 = *v12 == (_QWORD)v13;
            v13 = v12;
          }
          while (!v14);
        }
        if ((uint64_t *)a1[16] == v5)
          a1[16] = v12;
        --a1[18];
        sub_2394F0930(v3, v5);
        v15 = (std::__shared_weak_count *)v5[6];
        if (!v15)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          operator delete(v5);
        }
        else
        {
LABEL_27:
          operator delete(v5);
        }
      }
    }
  }
}

uint64_t **sub_239A057FC(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = a1 + 1;
  v9 = a1[1];
  *((_OWORD *)v4 + 2) = v6;
  v4[6] = v7;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if ((unint64_t)v6 >= v11)
          break;
        v9 = (uint64_t *)*v9;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
    return v10;
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = v10;
    *v8 = v4;
    v12 = (uint64_t *)**a1;
    v13 = v4;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    sub_2394213B8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v5;
  }
}

uint64_t sub_239A05928(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_239A05940(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000239F0AEDELL)
    return a1 + 24;
  if (((v3 & 0x8000000239F0AEDELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000239F0AEDELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000239F0AEDELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_239A059C0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_239A05A4C(v2 + 128, *(_QWORD **)(v2 + 136));
    std::mutex::~mutex((std::mutex *)(v2 + 64));
    sub_239A05A4C(v2 + 40, *(_QWORD **)(v2 + 48));
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_239A05A4C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_239A05A4C(a1, *a2);
    sub_239A05A4C(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

uint64_t *sub_239A05AD4(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

_QWORD *sub_239A05D00(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_239A06044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A06058(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_239A06198(a1, i + 2, i + 2);
  return a1;
}

void sub_239A06170(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_239A06184(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A06198(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_239A064DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_239A064F0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v44[0] = v14;
  v44[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = v26;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v28;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v14 = *v32;
LABEL_89:
      *v32 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v31 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239A068F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239A06910((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A06910(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_239A06974(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_239A06ACC((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_23;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_23:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        *v19++ = a2[2];
        a2 = (_QWORD *)*a2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 3);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v20 = v12[1];
    ++v12;
    v13 = v20;
  }
}

void sub_239A06ACC(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_23946CE0C((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_23946CF98((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_239418A80();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_239418A80();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_239418A80();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_239418A80();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_239A073B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_239A07404()
{
  __cxa_end_catch();
  JUMPOUT(0x239A0740CLL);
}

void sub_239A07424(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239A07980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239A0799C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239A079B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239A079C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A079E0(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v17;
  __int128 v18;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_2394189F8();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_239418A80();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  v17 = v8;
  *((_QWORD *)&v18 + 1) = &v7[80 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(&v7[80 * v3], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[80 * v3 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_23941A7F8(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)&v7[80 * v3 + 40] = *(_QWORD *)(a2 + 40);
  }
  v10 = 0;
  v11 = &v7[80 * v3];
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)&v18 = v11 + 80;
  v13 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v10) != v13; sub_239A07C7C((_DWORD)a1 + 16, &v17[v10], (__int128 *)(v10 + i)))
    v10 -= 80;
  v15 = (void *)*a1;
  v14 = a1[1];
  *a1 = &v17[v10];
  for (*(_OWORD *)(a1 + 1) = v18; (void *)v14 != v15; v14 = sub_2399FE404(v14 - 80))
    ;
  if (v15)
    operator delete(v15);
  return v18;
}

void sub_239A07BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 23) < 0)
  {
    operator delete(*(void **)v4);
    sub_239A07C2C((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_239A07C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A07C2C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_2399FE404(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_239A07C7C(int a1, char *__dst, __int128 *a3)
{
  __int128 v5;
  char *v6;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    v6 = __dst + 24;
    if ((*((char *)a3 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_23941A7F8(v6, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
    goto LABEL_6;
  }
  v5 = *a3;
  *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v5;
  v6 = __dst + 24;
  if (*((char *)a3 + 47) < 0)
    goto LABEL_5;
LABEL_3:
  v7 = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)v6 + 2) = *((_QWORD *)a3 + 5);
  *(_OWORD *)v6 = v7;
LABEL_6:
  *((_QWORD *)__dst + 6) = *((_QWORD *)a3 + 6);
  return sub_239A052C0((_QWORD *)__dst + 7, (uint64_t *)a3 + 7);
}

void sub_239A07D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_239A07D68(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A07D8C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_239A07DA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_239A07E14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A07E24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A07E54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_239A07E64(pxrInternal__aapl__pxrReserved__::UsdStage **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  pxrInternal__aapl__pxrReserved__::UsdStage *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t *v31;
  _DWORD *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t *v45;
  _DWORD *v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  void *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(void);
  uint64_t v66;
  void *__p[4];
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74[2];
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v66 = 0;
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "creator");
  v74[1] = (uint64_t *)&off_250AF1A88;
  v4 = operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8((_BYTE *)v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  }
  v6 = (unsigned int *)(v5 + 24);
  atomic_store(0, (unsigned int *)(v5 + 24));
  v74[0] = (uint64_t *)v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (v74[1])
    v8 = ((uint64_t)v74[1] & 3) == 3;
  else
    v8 = 1;
  if (!v8)
    (*(void (**)(uint64_t *))(((unint64_t)v74[1] & 0xFFFFFFFFFFFFFFF8) + 32))((uint64_t *)v74);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v75 = 10;
  strcpy((char *)v74, "creatorVer");
  v69 = *(_QWORD *)(a2 + 24);
  v70 = *(_DWORD *)(a2 + 32);
  memset(__p, 0, sizeof(__p));
  v68 = 0;
  sub_239A1109C((unint64_t *)__p, (uint64_t)&v69, (uint64_t)&v71);
  v73 = (unint64_t)&off_250AF1B50;
  v9 = operator new();
  v10 = *(_OWORD *)&__p[2];
  *(_OWORD *)v9 = *(_OWORD *)__p;
  *(_OWORD *)(v9 + 16) = v10;
  v11 = v68;
  *(_QWORD *)(v9 + 32) = v68;
  if (v11)
  {
    v12 = (unint64_t *)(v11 - 16);
    if (*(_QWORD *)(v9 + 24))
      v12 = *(unint64_t **)(v9 + 24);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(v9 + 40);
  atomic_store(0, (unsigned int *)(v9 + 40));
  v72 = v9;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (v73)
    v16 = (v73 & 3) == 3;
  else
    v16 = 1;
  if (!v16)
    (*(void (**)(uint64_t *))((v73 & 0xFFFFFFFFFFFFFFF8) + 32))(&v72);
  v73 = 0;
  if (v68)
  {
    v17 = (unint64_t *)__p[3];
    if (__p[3])
    {
      do
      {
        v63 = __ldxr(v17);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v17));
      if (!v64)
      {
        __dmb(9u);
        v65 = (void (*)(void))*((_QWORD *)__p[3] + 1);
        if (v65)
          v65();
      }
    }
    else
    {
      v18 = (unint64_t *)(v68 - 16);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        __dmb(9u);
        operator delete((void *)(v68 - 16));
      }
    }
  }
  if (v75 < 0)
    operator delete(v74[0]);
  v72 = 0;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "preferredIblVersion");
  v74[1] = (uint64_t *)&unk_250AF1C33;
  LODWORD(v74[0]) = 2;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (v74[1] && ((uint64_t)v74[1] & 3) != 3)
    (*(void (**)(uint64_t **))(((unint64_t)v74[1] & 0xFFFFFFFFFFFFFFF8) + 32))(v74);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Apple");
  v74[1] = (uint64_t *)&off_250AF1CE8;
  v21 = operator new();
  MEMORY[0x23B83D50C](v21, &v72);
  v22 = (unsigned int *)(v21 + 8);
  atomic_store(0, (unsigned int *)(v21 + 8));
  v74[0] = (uint64_t *)v21;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (v74[1])
    v24 = ((uint64_t)v74[1] & 3) == 3;
  else
    v24 = 1;
  if (!v24)
    (*(void (**)(uint64_t **))(((unint64_t)v74[1] & 0xFFFFFFFFFFFFFFF8) + 32))(v74);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v25 = *a1;
  if (!*a1)
  {
    __p[0] = "tf/refPtr.h";
    __p[1] = "operator->";
    __p[2] = (void *)953;
    __p[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() con"
             "st [U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    __break(1u);
  }
  MEMORY[0x23B83D734](__p, "customLayerData");
  v26 = sub_239A08868(v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (uint64_t)&v66);
  v27 = v26;
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v28 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  if ((v26 & 1) != 0)
  {
    v30 = (unint64_t *)*a1;
    __p[0] = v30;
    __p[1] = 0;
    if (v30)
    {
      v31 = v30 + 2;
      v32 = (_DWORD *)atomic_load(v30 + 2);
      if (!v32)
      {
        v32 = (_DWORD *)operator new();
        v32[2] = 1;
        *(_QWORD *)v32 = MEMORY[0x24BEE9CD8] + 16;
        *((_WORD *)v32 + 6) = 0;
        *((_BYTE *)v32 + 14) = 1;
        while (1)
        {
          v33 = __ldaxr(v31);
          if (v33)
            break;
          if (!__stlxr((unint64_t)v32, v31))
            goto LABEL_58;
        }
        __clrex();
        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
        v32 = (_DWORD *)v33;
      }
LABEL_58:
      v34 = v32 + 2;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = (unsigned int *)__p[1];
      __p[1] = v32;
      if (v36)
      {
        v37 = v36 + 2;
        do
        {
          v38 = __ldxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit();
    v40 = __p[1];
    if (__p[1])
    {
      v41 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v42 = __ldxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
    }
    v44 = (unint64_t *)*a1;
    __p[0] = v44;
    __p[1] = 0;
    if (v44)
    {
      v45 = v44 + 2;
      v46 = (_DWORD *)atomic_load(v44 + 2);
      if (!v46)
      {
        v46 = (_DWORD *)operator new();
        v46[2] = 1;
        *(_QWORD *)v46 = MEMORY[0x24BEE9CD8] + 16;
        *((_WORD *)v46 + 6) = 0;
        *((_BYTE *)v46 + 14) = 1;
        while (1)
        {
          v47 = __ldaxr(v45);
          if (v47)
            break;
          if (!__stlxr((unint64_t)v46, v45))
            goto LABEL_77;
        }
        __clrex();
        (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
        v46 = (_DWORD *)v47;
      }
LABEL_77:
      v48 = v46 + 2;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      v50 = (unsigned int *)__p[1];
      __p[1] = v46;
      if (v50)
      {
        v51 = v50 + 2;
        do
        {
          v52 = __ldxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
          (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
      }
    }
    MEMORY[0x23B83D734](v74, "Y");
    pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis();
    if (((uint64_t)v74[0] & 7) != 0)
    {
      v54 = (unsigned int *)((unint64_t)v74[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    v56 = __p[1];
    if (__p[1])
    {
      v57 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v58 = __ldxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
        (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
    }
  }
  v60 = v72;
  v72 = 0;
  if (v60)
  {
    sub_239A104D8(v60, *(char **)(v60 + 8));
    MEMORY[0x23B83E31C](v60, 0x1020C4062D53EE8);
  }
  v61 = v66;
  v66 = 0;
  if (v61)
  {
    sub_239A104D8(v61, *(char **)(v61 + 8));
    MEMORY[0x23B83E31C](v61, 0x1020C4062D53EE8);
  }
  return v27;
}

void sub_239A08594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239A08730(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_239A0878C((uint64_t)va1);
  sub_239A087D8((uint64_t)va);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  JUMPOUT(0x239A08720);
}

void sub_239A08764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_239A0878C(v16 - 64);
  if (a16 < 0)
    operator delete(a11);
  JUMPOUT(0x239A08720);
}

uint64_t sub_239A0878C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v3 = 1;
  if (!v3)
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_239A087D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(void);

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = a1 + 24;
    v3 = *(unint64_t **)(a1 + 24);
    if (v3)
    {
      do
      {
        v9 = __ldxr(v3);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v3));
      if (!v10)
      {
        __dmb(9u);
        v11 = *(void (**)(void))(*(_QWORD *)v4 + 8);
        if (v11)
          v11();
      }
    }
    else
    {
      v5 = (unint64_t *)(v2 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t sub_239A08868(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)&off_250AF1CE8;
  v6 = operator new();
  MEMORY[0x23B83D50C](v6, a3);
  v7 = (unsigned int *)(v6 + 8);
  atomic_store(0, (unsigned int *)(v6 + 8));
  v12 = (uint64_t *)v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  if (v13)
    v10 = (v13 & 3) == 3;
  else
    v10 = 1;
  if (!v10)
    (*(void (**)(uint64_t **))((v13 & 0xFFFFFFFFFFFFFFF8) + 32))(&v12);
  return v9;
}

void sub_239A08950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239A08974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A08998(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_239A104D8(v2, *(char **)(v2 + 8));
    MEMORY[0x23B83E31C](v2, 0x1020C4062D53EE8);
  }
  return a1;
}

uint64_t sub_239A089E8(uint64_t *a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4)
{
  std::string *v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t Ptr;
  unsigned int *v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unint64_t *v15;
  std::string *v21;
  __int128 v22;
  std::string *p_dst;
  std::string::size_type size;
  int v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  std::string::size_type v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  std::string::size_type v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  size_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  size_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  size_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  size_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 *v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v203;
  unsigned int v204;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  __int128 v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v214;
  unsigned int v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v222;
  unsigned int v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  size_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  __int128 *v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int *v255;
  unsigned int v256;
  unsigned int *v257;
  unsigned int v258;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  unsigned int *v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v269;
  unsigned int v270;
  unsigned int *v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  unsigned int *v281;
  unsigned int v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  int v289;
  size_t v290;
  unint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  __int128 *v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int *v308;
  unsigned int v309;
  unsigned int *v310;
  unsigned int v311;
  uint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int *v317;
  unsigned int v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int *v322;
  unsigned int v323;
  unsigned int *v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int *v330;
  unsigned int v331;
  uint64_t v333;
  unsigned int *v334;
  unsigned int v335;
  uint64_t *v336;
  char *v337;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v340;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v342;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v344;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v346;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v348;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v350;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v352;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v354;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v356;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v358;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v360;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v362;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v364;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v366;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v368;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v370;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v372;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v374;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v376;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v378;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v380;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v382;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v384;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v386;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v388;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v390;
  uint64_t v393;
  uint64_t v394;
  __int128 v395;
  unsigned __int16 *v396;
  _QWORD v397[4];
  char v398[32];
  uint64_t v399;
  char v400[32];
  uint64_t v401;
  char v402[32];
  uint64_t v403;
  char v404[32];
  uint64_t v405;
  char v406[32];
  uint64_t v407;
  char v408[32];
  uint64_t v409;
  char v410[32];
  uint64_t v411;
  char v412[32];
  uint64_t v413;
  uint64_t v414;
  char v415[32];
  uint64_t v416;
  char v417[32];
  char v418[32];
  _QWORD v419[3];
  uint64_t v420;
  _OWORD v421[2];
  char v422[32];
  char v423[8];
  uint64_t v424;
  int v425;
  std::string v426;
  _BYTE v427[24];
  __int128 v428;
  int64_t v429;
  std::string v430;
  char v431[32];
  __int128 v432;
  int64_t v433;
  std::string __dst;
  char *v435;
  char v436;
  char v437;
  uint64_t v438;

  v438 = *MEMORY[0x24BDAC8D0];
  std::operator+<char>();
  v7 = std::string::append(&__dst, "/Materials");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v433 = v7->__r_.__value_.__r.__words[2];
  v432 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!*a1)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/refPtr.h";
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"operator->";
    __dst.__r_.__value_.__r.__words[2] = 953;
    v435 = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() const"
           " [U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v436 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    __break(1u);
  }
  MEMORY[0x23B83D710](&__dst, &v432);
  MEMORY[0x23B83D734](&v426, "Scope");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim();
  sub_239A1056C((uint64_t)v431);
  if ((v426.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v9 = (unsigned int *)(v426.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v12 = (unsigned int *)(Ptr + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if ((v13 & 0x7FFFFFFF) == 1)
      sub_239A10688(Ptr);
  }
  v14 = *a2;
  v396 = a2[1];
  if (*a2 != v396)
  {
    v15 = (unint64_t *)MEMORY[0x24BEE82A0];
    v394 = MEMORY[0x24BEE9D88] + 16;
    __asm { FMOV            V0.4S, #-1.0 }
    v395 = _Q0;
    v393 = MEMORY[0x24BEE9CD8] + 16;
    while (1)
    {
      *((_BYTE *)&v430.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v430, "Texture");
      if (!*v14)
        goto LABEL_25;
      std::to_string(&v426, *v14);
      v21 = std::string::insert(&v426, 0, "_");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      std::string::append(&v430, (const std::string::value_type *)p_dst, size);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v426.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_25;
      }
      else if ((SHIBYTE(v426.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_25;
      }
      operator delete(v426.__r_.__value_.__l.__data_);
LABEL_25:
      v25 = SHIBYTE(v433);
      if (v433 >= 0)
        v26 = HIBYTE(v433);
      else
        v26 = *((_QWORD *)&v432 + 1);
      v27 = v26 + 1;
      if (v26 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v27 >= 0x17)
      {
        v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17)
          v29 = v27 | 7;
        v30 = v29 + 1;
        v28 = (char *)operator new(v29 + 1);
        __dst.__r_.__value_.__l.__size_ = v26 + 1;
        __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v28 = (char *)&__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26 + 1;
        if (!v26)
          goto LABEL_39;
      }
      if (v25 >= 0)
        v31 = &v432;
      else
        v31 = (__int128 *)v432;
      memmove(v28, v31, v26);
LABEL_39:
      *(_WORD *)&v28[v26] = 47;
      if ((v430.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v430;
      else
        v32 = (std::string *)v430.__r_.__value_.__r.__words[0];
      if ((v430.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v430.__r_.__value_.__r.__words[2]);
      else
        v33 = v430.__r_.__value_.__l.__size_;
      v34 = std::string::append(&__dst, (const std::string::value_type *)v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v429 = v34->__r_.__value_.__r.__words[2];
      v428 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)*a1;
      if (__dst.__r_.__value_.__r.__words[0])
      {
        v36 = (unint64_t *)(__dst.__r_.__value_.__r.__words[0] + 16);
        v37 = atomic_load((unint64_t *)(__dst.__r_.__value_.__r.__words[0] + 16));
        if (!v37)
        {
          v37 = operator new();
          *(_DWORD *)(v37 + 8) = 1;
          *(_QWORD *)v37 = MEMORY[0x24BEE9CD8] + 16;
          *(_WORD *)(v37 + 12) = 0;
          *(_BYTE *)(v37 + 14) = 1;
          while (1)
          {
            v38 = __ldaxr(v36);
            if (v38)
              break;
            if (!__stlxr(v37, v36))
              goto LABEL_56;
          }
          __clrex();
          (*(void (**)(unint64_t))(*(_QWORD *)v37 + 8))(v37);
          v37 = v38;
        }
LABEL_56:
        v39 = (unsigned int *)(v37 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v41 = __dst.__r_.__value_.__l.__size_;
        __dst.__r_.__value_.__l.__size_ = v37;
        if (v41)
        {
          v42 = (unsigned int *)(v41 + 8);
          do
          {
            v43 = __ldxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v41 + 8))(v41);
        }
      }
      MEMORY[0x23B83D710](&v426, &v428);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v45 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
        v46 = (unsigned int *)(v45 + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if ((v47 & 0x7FFFFFFF) == 1)
          sub_239A10688(v45);
      }
      v48 = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v49 = (unsigned int *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
        {
          v50 = __ldxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v48 + 8))(v48);
      }
      MEMORY[0x23B83D734](&__dst, "frame:stPrimvarName");
      v52 = atomic_load(v15);
      if (!v52)
      {
        v52 = MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr(v52, v15))
            goto LABEL_74;
        }
        __clrex();
        if (v52)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)v52);
          MEMORY[0x23B83E31C]();
        }
        v52 = atomic_load(v15);
      }
LABEL_74:
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v427, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__dst, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v52 + 88));
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v53 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      MEMORY[0x23B83D734](&__dst, "st");
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v55 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      v57 = *a1;
      v421[0] = (unint64_t)*a1;
      if (v57)
      {
        v58 = (unint64_t *)(v57 + 16);
        v59 = atomic_load((unint64_t *)(v57 + 16));
        if (!v59)
        {
          v59 = operator new();
          *(_DWORD *)(v59 + 8) = 1;
          *(_QWORD *)v59 = MEMORY[0x24BEE9CD8] + 16;
          *(_WORD *)(v59 + 12) = 0;
          *(_BYTE *)(v59 + 14) = 1;
          while (1)
          {
            v60 = __ldaxr(v58);
            if (v60)
              break;
            if (!__stlxr(v59, v58))
              goto LABEL_87;
          }
          __clrex();
          (*(void (**)(unint64_t))(*(_QWORD *)v59 + 8))(v59);
          v59 = v60;
        }
LABEL_87:
        v61 = (unsigned int *)(v59 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        v63 = (unsigned int *)*((_QWORD *)&v421[0] + 1);
        *((_QWORD *)&v421[0] + 1) = v59;
        if (v63)
        {
          v64 = v63 + 2;
          do
          {
            v65 = __ldxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
        }
      }
      v67 = SHIBYTE(v429);
      if (v429 >= 0)
        v68 = HIBYTE(v429);
      else
        v68 = *((_QWORD *)&v428 + 1);
      v69 = v68 + 14;
      if (v68 + 14 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v69 >= 0x17)
      {
        v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v69 | 7) != 0x17)
          v71 = v69 | 7;
        v72 = v71 + 1;
        v70 = operator new(v71 + 1);
        __dst.__r_.__value_.__l.__size_ = v68 + 14;
        __dst.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v70 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v68 + 14;
        if (!v68)
          goto LABEL_108;
      }
      if (v67 >= 0)
        v73 = &v428;
      else
        v73 = (__int128 *)v428;
      memmove(v70, v73, v68);
LABEL_108:
      strcpy((char *)v70 + v68, "/surfaceShader");
      MEMORY[0x23B83D710](v397, &__dst);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v74 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
        v75 = (unsigned int *)(v74 + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if ((v76 & 0x7FFFFFFF) == 1)
          sub_239A10688(v74);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v77 = *((_QWORD *)&v421[0] + 1);
      if (*((_QWORD *)&v421[0] + 1))
      {
        v78 = (unsigned int *)(*((_QWORD *)&v421[0] + 1) + 8);
        do
        {
          v79 = __ldxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
      }
      MEMORY[0x23B83D734](v421, "UsdPreviewSurface");
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v421[0];
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1DB0 + 1;
      if ((v421[0] & 7) != 0)
      {
        v81 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 2, v81));
        if ((v82 & 1) == 0)
          __dst.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr();
      sub_239A1056C((uint64_t)v422);
      if (__dst.__r_.__value_.__l.__size_ && (__dst.__r_.__value_.__s.__data_[8] & 3) != 3)
        (*(void (**)(std::string *))((__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&__dst);
      __dst.__r_.__value_.__l.__size_ = 0;
      if ((v421[0] & 7) != 0)
      {
        v83 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
      MEMORY[0x23B83D734](v397, "surface");
      v85 = atomic_load(v15);
      if (!v85)
      {
        v85 = MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr(v85, v15))
            goto LABEL_132;
        }
        __clrex();
        if (v85)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)v85);
          MEMORY[0x23B83E31C]();
        }
        v85 = atomic_load(v15);
      }
LABEL_132:
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v427, (const pxrInternal__aapl__pxrReserved__::TfToken *)v397, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v85 + 88));
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v423);
      MEMORY[0x23B83D734](v419, "surface");
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v420);
      MEMORY[0x23B83D914](&__dst, v421, v419, 2, v420);
      if ((v419[0] & 7) != 0)
      {
        v86 = (unsigned int *)(v419[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      MEMORY[0x23B83D680](v421);
      sub_239A1056C((uint64_t)&__dst);
      if ((v397[0] & 7) != 0)
      {
        v88 = (unsigned int *)(v397[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      v90 = *a1;
      v421[0] = (unint64_t)*a1;
      if (v90)
      {
        v91 = (unint64_t *)(v90 + 16);
        v92 = atomic_load((unint64_t *)(v90 + 16));
        if (!v92)
        {
          v92 = operator new();
          *(_DWORD *)(v92 + 8) = 1;
          *(_QWORD *)v92 = MEMORY[0x24BEE9CD8] + 16;
          *(_WORD *)(v92 + 12) = 0;
          *(_BYTE *)(v92 + 14) = 1;
          while (1)
          {
            v93 = __ldaxr(v91);
            if (v93)
              break;
            if (!__stlxr(v92, v91))
              goto LABEL_145;
          }
          __clrex();
          (*(void (**)(unint64_t))(*(_QWORD *)v92 + 8))(v92);
          v92 = v93;
        }
LABEL_145:
        v94 = (unsigned int *)(v92 + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
        v96 = (unsigned int *)*((_QWORD *)&v421[0] + 1);
        *((_QWORD *)&v421[0] + 1) = v92;
        if (v96)
        {
          v97 = v96 + 2;
          do
          {
            v98 = __ldxr(v97);
            v99 = v98 - 1;
          }
          while (__stlxr(v99, v97));
          if (!v99)
            (*(void (**)(unsigned int *))(*(_QWORD *)v96 + 8))(v96);
        }
      }
      v100 = SHIBYTE(v429);
      if (v429 >= 0)
        v101 = HIBYTE(v429);
      else
        v101 = *((_QWORD *)&v428 + 1);
      v102 = v101 + 12;
      if (v101 + 12 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v102 >= 0x17)
      {
        v104 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v102 | 7) != 0x17)
          v104 = v102 | 7;
        v105 = v104 + 1;
        v103 = operator new(v104 + 1);
        __dst.__r_.__value_.__l.__size_ = v101 + 12;
        __dst.__r_.__value_.__r.__words[2] = v105 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v103 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v101 + 12;
        if (!v101)
          goto LABEL_166;
      }
      if (v100 >= 0)
        v106 = &v428;
      else
        v106 = (__int128 *)v428;
      memmove(v103, v106, v101);
LABEL_166:
      strcpy((char *)v103 + v101, "/uvReader_st");
      MEMORY[0x23B83D710](v397, &__dst);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v107 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
        v108 = (unsigned int *)(v107 + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if ((v109 & 0x7FFFFFFF) == 1)
          sub_239A10688(v107);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v110 = *((_QWORD *)&v421[0] + 1);
      if (*((_QWORD *)&v421[0] + 1))
      {
        v111 = (unsigned int *)(*((_QWORD *)&v421[0] + 1) + 8);
        do
        {
          v112 = __ldxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
      }
      MEMORY[0x23B83D734](v421, "UsdPrimvarReader_float2");
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v421[0];
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1DB0 + 1;
      if ((v421[0] & 7) != 0)
      {
        v114 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 2, v114));
        if ((v115 & 1) == 0)
          __dst.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr();
      sub_239A1056C((uint64_t)v418);
      if (__dst.__r_.__value_.__l.__size_ && (__dst.__r_.__value_.__s.__data_[8] & 3) != 3)
        (*(void (**)(std::string *))((__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&__dst);
      __dst.__r_.__value_.__l.__size_ = 0;
      if ((v421[0] & 7) != 0)
      {
        v116 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      MEMORY[0x23B83D734](v421, "varname");
      if (!atomic_load(v15))
      {
        v340 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v340, v15))
            goto LABEL_190;
        }
        __clrex();
        if (v340)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v340);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_190:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      MEMORY[0x23B83D8FC](&__dst, &v426);
      sub_239A1056C((uint64_t)&__dst);
      if ((v421[0] & 7) != 0)
      {
        v119 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v120 = __ldxr(v119);
        while (__stlxr(v120 - 2, v119));
      }
      MEMORY[0x23B83D734](&__dst, "result");
      if (!atomic_load(v15))
      {
        v342 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v342, v15))
            goto LABEL_194;
        }
        __clrex();
        if (v342)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v342);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_194:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
      sub_239A1056C((uint64_t)v417);
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v122 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if (*((_BYTE *)v14 + 8))
      {
        v124 = *a1;
        v421[0] = (unint64_t)*a1;
        if (v124)
        {
          v125 = (unint64_t *)(v124 + 16);
          v126 = atomic_load((unint64_t *)(v124 + 16));
          if (!v126)
          {
            v126 = operator new();
            *(_DWORD *)(v126 + 8) = 1;
            *(_QWORD *)v126 = MEMORY[0x24BEE9CD8] + 16;
            *(_WORD *)(v126 + 12) = 0;
            *(_BYTE *)(v126 + 14) = 1;
            while (1)
            {
              v127 = __ldaxr(v125);
              if (v127)
                break;
              if (!__stlxr(v126, v125))
                goto LABEL_205;
            }
            __clrex();
            (*(void (**)(unint64_t))(*(_QWORD *)v126 + 8))(v126);
            v126 = v127;
          }
LABEL_205:
          v128 = (unsigned int *)(v126 + 8);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
          v130 = (unsigned int *)*((_QWORD *)&v421[0] + 1);
          *((_QWORD *)&v421[0] + 1) = v126;
          if (v130)
          {
            v131 = v130 + 2;
            do
            {
              v132 = __ldxr(v131);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v131));
            if (!v133)
              (*(void (**)(unsigned int *))(*(_QWORD *)v130 + 8))(v130);
          }
        }
        v134 = SHIBYTE(v429);
        if (v429 >= 0)
          v135 = HIBYTE(v429);
        else
          v135 = *((_QWORD *)&v428 + 1);
        v136 = v135 + 21;
        if (v135 + 21 > 0x7FFFFFFFFFFFFFF7)
          sub_23941A5AC();
        if (v136 >= 0x17)
        {
          v138 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v136 | 7) != 0x17)
            v138 = v136 | 7;
          v139 = v138 + 1;
          v137 = operator new(v138 + 1);
          __dst.__r_.__value_.__l.__size_ = v135 + 21;
          __dst.__r_.__value_.__r.__words[2] = v139 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          v137 = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v135 + 21;
          if (!v135)
            goto LABEL_226;
        }
        if (v134 >= 0)
          v140 = &v428;
        else
          v140 = (__int128 *)v428;
        memmove(v137, v140, v135);
LABEL_226:
        strcpy((char *)v137 + v135, "/diffuseColor_texture");
        MEMORY[0x23B83D710](&v416, &__dst);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
        {
          v141 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
          v142 = (unsigned int *)(v141 + 8);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if ((v143 & 0x7FFFFFFF) == 1)
            sub_239A10688(v141);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v144 = *((_QWORD *)&v421[0] + 1);
        if (*((_QWORD *)&v421[0] + 1))
        {
          v145 = (unsigned int *)(*((_QWORD *)&v421[0] + 1) + 8);
          do
          {
            v146 = __ldxr(v145);
            v147 = v146 - 1;
          }
          while (__stlxr(v147, v145));
          if (!v147)
            (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
        }
        MEMORY[0x23B83D734](v421, "UsdUVTexture");
        __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v421[0];
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1DB0 + 1;
        if ((v421[0] & 7) != 0)
        {
          v148 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 2, v148));
          if ((v149 & 1) == 0)
            __dst.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr();
        sub_239A1056C((uint64_t)v415);
        if (__dst.__r_.__value_.__l.__size_ && (__dst.__r_.__value_.__s.__data_[8] & 3) != 3)
          (*(void (**)(std::string *))((__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&__dst);
        __dst.__r_.__value_.__l.__size_ = 0;
        if ((v421[0] & 7) != 0)
        {
          v150 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v151 = __ldxr(v150);
          while (__stlxr(v151 - 2, v150));
        }
        MEMORY[0x23B83D734](&v416, "file");
        if (!atomic_load(v15))
        {
          v346 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v346, v15))
              goto LABEL_250;
          }
          __clrex();
          if (v346)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v346);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_250:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        MEMORY[0x23B83D4DC](&__dst, v14 + 8);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
        if (v437 < 0)
        {
          operator delete(v435);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_255;
LABEL_252:
          sub_239A1056C((uint64_t)v421);
          v153 = v416;
          if ((v416 & 7) != 0)
          {
LABEL_256:
            v154 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFFFF8);
            do
              v155 = __ldxr(v154);
            while (__stlxr(v155 - 2, v154));
          }
        }
        else
        {
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_252;
LABEL_255:
          operator delete(__dst.__r_.__value_.__l.__data_);
          sub_239A1056C((uint64_t)v421);
          v153 = v416;
          if ((v416 & 7) != 0)
            goto LABEL_256;
        }
        MEMORY[0x23B83D734](&v416, "st");
        if (!atomic_load(v15))
        {
          v348 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v348, v15))
              goto LABEL_259;
          }
          __clrex();
          if (v348)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v348);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_259:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v419);
        MEMORY[0x23B83D734](&v414, "result");
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v413);
        MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v413);
        if ((v414 & 7) != 0)
        {
          v157 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        MEMORY[0x23B83D680](v421);
        sub_239A1056C((uint64_t)&__dst);
        if ((v416 & 7) != 0)
        {
          v159 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
          do
            v160 = __ldxr(v159);
          while (__stlxr(v160 - 2, v159));
        }
        MEMORY[0x23B83D734](&__dst, "rgb");
        if (!atomic_load(v15))
        {
          v350 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v350, v15))
              goto LABEL_266;
          }
          __clrex();
          if (v350)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v350);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_266:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
        sub_239A1056C((uint64_t)v412);
        if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v162 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v163 = __ldxr(v162);
          while (__stlxr(v163 - 2, v162));
        }
        MEMORY[0x23B83D734](&v416, "diffuseColor");
        if (!atomic_load(v15))
        {
          v352 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v352, v15))
              goto LABEL_270;
          }
          __clrex();
          if (v352)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v352);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_270:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v397);
        MEMORY[0x23B83D734](&v414, "rgb");
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v411);
        MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v411);
        if ((v414 & 7) != 0)
        {
          v165 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
          do
            v166 = __ldxr(v165);
          while (__stlxr(v166 - 2, v165));
        }
        MEMORY[0x23B83D680](v421);
        sub_239A1056C((uint64_t)&__dst);
        if ((v416 & 7) != 0)
        {
          v167 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
          do
            v168 = __ldxr(v167);
          while (__stlxr(v168 - 2, v167));
        }
        MEMORY[0x23B83D578](v397);
      }
      if (!*((_BYTE *)v14 + 40))
        goto LABEL_372;
      v169 = *a1;
      v421[0] = (unint64_t)*a1;
      if (v169)
      {
        v170 = (unint64_t *)(v169 + 16);
        v171 = atomic_load((unint64_t *)(v169 + 16));
        if (!v171)
        {
          v171 = operator new();
          *(_DWORD *)(v171 + 8) = 1;
          *(_QWORD *)v171 = MEMORY[0x24BEE9CD8] + 16;
          *(_WORD *)(v171 + 12) = 0;
          *(_BYTE *)(v171 + 14) = 1;
          while (1)
          {
            v172 = __ldaxr(v170);
            if (v172)
              break;
            if (!__stlxr(v171, v170))
              goto LABEL_285;
          }
          __clrex();
          (*(void (**)(unint64_t))(*(_QWORD *)v171 + 8))(v171);
          v171 = v172;
        }
LABEL_285:
        v173 = (unsigned int *)(v171 + 8);
        do
          v174 = __ldxr(v173);
        while (__stxr(v174 + 1, v173));
        v175 = (unsigned int *)*((_QWORD *)&v421[0] + 1);
        *((_QWORD *)&v421[0] + 1) = v171;
        if (v175)
        {
          v176 = v175 + 2;
          do
          {
            v177 = __ldxr(v176);
            v178 = v177 - 1;
          }
          while (__stlxr(v178, v176));
          if (!v178)
            (*(void (**)(unsigned int *))(*(_QWORD *)v175 + 8))(v175);
        }
      }
      v179 = SHIBYTE(v429);
      if (v429 >= 0)
        v180 = HIBYTE(v429);
      else
        v180 = *((_QWORD *)&v428 + 1);
      v181 = v180 + 15;
      if (v180 + 15 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v181 >= 0x17)
      {
        v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v181 | 7) != 0x17)
          v183 = v181 | 7;
        v184 = v183 + 1;
        v182 = operator new(v183 + 1);
        __dst.__r_.__value_.__l.__size_ = v180 + 15;
        __dst.__r_.__value_.__r.__words[2] = v184 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v182 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v180 + 15;
        if (!v180)
          goto LABEL_306;
      }
      if (v179 >= 0)
        v185 = &v428;
      else
        v185 = (__int128 *)v428;
      memmove(v182, v185, v180);
LABEL_306:
      strcpy((char *)v182 + v180, "/normal_texture");
      MEMORY[0x23B83D710](&v416, &__dst);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v186 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
        v187 = (unsigned int *)(v186 + 8);
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if ((v188 & 0x7FFFFFFF) == 1)
          sub_239A10688(v186);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v189 = *((_QWORD *)&v421[0] + 1);
      if (*((_QWORD *)&v421[0] + 1))
      {
        v190 = (unsigned int *)(*((_QWORD *)&v421[0] + 1) + 8);
        do
        {
          v191 = __ldxr(v190);
          v192 = v191 - 1;
        }
        while (__stlxr(v192, v190));
        if (!v192)
          (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
      }
      MEMORY[0x23B83D734](v421, "UsdUVTexture");
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v421[0];
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1DB0 + 1;
      if ((v421[0] & 7) != 0)
      {
        v193 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 2, v193));
        if ((v194 & 1) == 0)
          __dst.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr();
      sub_239A1056C((uint64_t)v410);
      if (__dst.__r_.__value_.__l.__size_ && (__dst.__r_.__value_.__s.__data_[8] & 3) != 3)
        (*(void (**)(std::string *))((__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&__dst);
      __dst.__r_.__value_.__l.__size_ = 0;
      if ((v421[0] & 7) != 0)
      {
        v195 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v196 = __ldxr(v195);
        while (__stlxr(v196 - 2, v195));
      }
      MEMORY[0x23B83D734](v421, "sourceColorSpace");
      if (!atomic_load(v15))
      {
        v354 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v354, v15))
            goto LABEL_330;
        }
        __clrex();
        if (v354)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v354);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_330:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      MEMORY[0x23B83D734](&v416, "raw");
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((v416 & 7) != 0)
      {
        v198 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v199 = __ldxr(v198);
        while (__stlxr(v199 - 2, v198));
      }
      sub_239A1056C((uint64_t)&__dst);
      if ((v421[0] & 7) != 0)
      {
        v200 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v201 = __ldxr(v200);
        while (__stlxr(v201 - 2, v200));
      }
      MEMORY[0x23B83D734](&v416, "bias");
      if (!atomic_load(v15))
      {
        v356 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v356, v15))
            goto LABEL_337;
        }
        __clrex();
        if (v356)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v356);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_337:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      v421[0] = v395;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>();
      sub_239A1056C((uint64_t)&__dst);
      if ((v416 & 7) != 0)
      {
        v203 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v204 = __ldxr(v203);
        while (__stlxr(v204 - 2, v203));
      }
      MEMORY[0x23B83D734](&v416, "file");
      if (!atomic_load(v15))
      {
        v358 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v358, v15))
            goto LABEL_341;
        }
        __clrex();
        if (v358)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v358);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_341:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      MEMORY[0x23B83D4DC](&__dst, v14 + 24);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
      if (v437 < 0)
      {
        operator delete(v435);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_343:
          sub_239A1056C((uint64_t)v421);
          v206 = v416;
          if ((v416 & 7) != 0)
            goto LABEL_347;
          goto LABEL_349;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_343;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      sub_239A1056C((uint64_t)v421);
      v206 = v416;
      if ((v416 & 7) != 0)
      {
LABEL_347:
        v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
        do
          v208 = __ldxr(v207);
        while (__stlxr(v208 - 2, v207));
      }
LABEL_349:
      MEMORY[0x23B83D734](&v416, "scale");
      if (!atomic_load(v15))
      {
        v360 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v360, v15))
            goto LABEL_350;
        }
        __clrex();
        if (v360)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v360);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_350:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      *(_QWORD *)&v210 = 0x4000000040000000;
      *((_QWORD *)&v210 + 1) = 0x4000000040000000;
      v421[0] = v210;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>();
      sub_239A1056C((uint64_t)&__dst);
      if ((v416 & 7) != 0)
      {
        v211 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v212 = __ldxr(v211);
        while (__stlxr(v212 - 2, v211));
      }
      MEMORY[0x23B83D734](&v416, "st");
      if (!atomic_load(v15))
      {
        v362 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v362, v15))
            goto LABEL_354;
        }
        __clrex();
        if (v362)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v362);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_354:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v419);
      MEMORY[0x23B83D734](&v414, "result");
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v409);
      MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v409);
      if ((v414 & 7) != 0)
      {
        v214 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
        do
          v215 = __ldxr(v214);
        while (__stlxr(v215 - 2, v214));
      }
      MEMORY[0x23B83D680](v421);
      sub_239A1056C((uint64_t)&__dst);
      if ((v416 & 7) != 0)
      {
        v216 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v217 = __ldxr(v216);
        while (__stlxr(v217 - 2, v216));
      }
      MEMORY[0x23B83D734](&__dst, "rgb");
      if (!atomic_load(v15))
      {
        v364 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v364, v15))
            goto LABEL_361;
        }
        __clrex();
        if (v364)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v364);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_361:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
      sub_239A1056C((uint64_t)v408);
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v219 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v220 = __ldxr(v219);
        while (__stlxr(v220 - 2, v219));
      }
      MEMORY[0x23B83D734](&v416, "normal");
      if (!atomic_load(v15))
      {
        v366 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v366, v15))
            goto LABEL_365;
        }
        __clrex();
        if (v366)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v366);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_365:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v397);
      MEMORY[0x23B83D734](&v414, "rgb");
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v407);
      MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v407);
      if ((v414 & 7) != 0)
      {
        v222 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
        do
          v223 = __ldxr(v222);
        while (__stlxr(v223 - 2, v222));
      }
      MEMORY[0x23B83D680](v421);
      sub_239A1056C((uint64_t)&__dst);
      if ((v416 & 7) != 0)
      {
        v224 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v225 = __ldxr(v224);
        while (__stlxr(v225 - 2, v224));
      }
      MEMORY[0x23B83D578](v397);
LABEL_372:
      if (!*((_BYTE *)v14 + 72))
        goto LABEL_459;
      v226 = *a1;
      v421[0] = (unint64_t)*a1;
      if (v226)
      {
        v227 = (unint64_t *)(v226 + 16);
        v228 = atomic_load((unint64_t *)(v226 + 16));
        if (!v228)
        {
          v228 = operator new();
          *(_DWORD *)(v228 + 8) = 1;
          *(_QWORD *)v228 = MEMORY[0x24BEE9CD8] + 16;
          *(_WORD *)(v228 + 12) = 0;
          *(_BYTE *)(v228 + 14) = 1;
          while (1)
          {
            v229 = __ldaxr(v227);
            if (v229)
              break;
            if (!__stlxr(v228, v227))
              goto LABEL_380;
          }
          __clrex();
          (*(void (**)(unint64_t))(*(_QWORD *)v228 + 8))(v228);
          v228 = v229;
        }
LABEL_380:
        v230 = (unsigned int *)(v228 + 8);
        do
          v231 = __ldxr(v230);
        while (__stxr(v231 + 1, v230));
        v232 = (unsigned int *)*((_QWORD *)&v421[0] + 1);
        *((_QWORD *)&v421[0] + 1) = v228;
        if (v232)
        {
          v233 = v232 + 2;
          do
          {
            v234 = __ldxr(v233);
            v235 = v234 - 1;
          }
          while (__stlxr(v235, v233));
          if (!v235)
            (*(void (**)(unsigned int *))(*(_QWORD *)v232 + 8))(v232);
        }
      }
      v236 = SHIBYTE(v429);
      if (v429 >= 0)
        v237 = HIBYTE(v429);
      else
        v237 = *((_QWORD *)&v428 + 1);
      v238 = v237 + 18;
      if (v237 + 18 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v238 >= 0x17)
      {
        v240 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v238 | 7) != 0x17)
          v240 = v238 | 7;
        v241 = v240 + 1;
        v239 = operator new(v240 + 1);
        __dst.__r_.__value_.__l.__size_ = v237 + 18;
        __dst.__r_.__value_.__r.__words[2] = v241 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        v239 = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v237 + 18;
        if (!v237)
          goto LABEL_401;
      }
      if (v236 >= 0)
        v242 = &v428;
      else
        v242 = (__int128 *)v428;
      memmove(v239, v242, v237);
LABEL_401:
      strcpy((char *)v239 + v237, "/occlusion_texture");
      MEMORY[0x23B83D710](&v416, &__dst);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v243 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
        v244 = (unsigned int *)(v243 + 8);
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if ((v245 & 0x7FFFFFFF) == 1)
          sub_239A10688(v243);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v246 = *((_QWORD *)&v421[0] + 1);
      if (*((_QWORD *)&v421[0] + 1))
      {
        v247 = (unsigned int *)(*((_QWORD *)&v421[0] + 1) + 8);
        do
        {
          v248 = __ldxr(v247);
          v249 = v248 - 1;
        }
        while (__stlxr(v249, v247));
        if (!v249)
          (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
      }
      MEMORY[0x23B83D734](v421, "UsdUVTexture");
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v421[0];
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1DB0 + 1;
      if ((v421[0] & 7) != 0)
      {
        v250 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v251 = __ldxr(v250);
        while (__stxr(v251 + 2, v250));
        if ((v251 & 1) == 0)
          __dst.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr();
      sub_239A1056C((uint64_t)v406);
      if (__dst.__r_.__value_.__l.__size_ && (__dst.__r_.__value_.__s.__data_[8] & 3) != 3)
        (*(void (**)(std::string *))((__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&__dst);
      __dst.__r_.__value_.__l.__size_ = 0;
      if ((v421[0] & 7) != 0)
      {
        v252 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v253 = __ldxr(v252);
        while (__stlxr(v253 - 2, v252));
      }
      MEMORY[0x23B83D734](v421, "sourceColorSpace");
      if (!atomic_load(v15))
      {
        v368 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v368, v15))
            goto LABEL_425;
        }
        __clrex();
        if (v368)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v368);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_425:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      MEMORY[0x23B83D734](&v416, "raw");
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((v416 & 7) != 0)
      {
        v255 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v256 = __ldxr(v255);
        while (__stlxr(v256 - 2, v255));
      }
      sub_239A1056C((uint64_t)&__dst);
      if ((v421[0] & 7) != 0)
      {
        v257 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v258 = __ldxr(v257);
        while (__stlxr(v258 - 2, v257));
      }
      MEMORY[0x23B83D734](&v416, "file");
      if (!atomic_load(v15))
      {
        v370 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v370, v15))
            goto LABEL_432;
        }
        __clrex();
        if (v370)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v370);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_432:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      MEMORY[0x23B83D4DC](&__dst, v14 + 40);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
      if (v437 < 0)
      {
        operator delete(v435);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_434:
          sub_239A1056C((uint64_t)v421);
          v260 = v416;
          if ((v416 & 7) != 0)
            goto LABEL_438;
          goto LABEL_440;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_434;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      sub_239A1056C((uint64_t)v421);
      v260 = v416;
      if ((v416 & 7) != 0)
      {
LABEL_438:
        v261 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
        do
          v262 = __ldxr(v261);
        while (__stlxr(v262 - 2, v261));
      }
LABEL_440:
      MEMORY[0x23B83D734](&v416, "st");
      if (!atomic_load(v15))
      {
        v372 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v372, v15))
            goto LABEL_441;
        }
        __clrex();
        if (v372)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v372);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_441:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v419);
      MEMORY[0x23B83D734](&v414, "result");
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v405);
      MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v405);
      if ((v414 & 7) != 0)
      {
        v264 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
        do
          v265 = __ldxr(v264);
        while (__stlxr(v265 - 2, v264));
      }
      MEMORY[0x23B83D680](v421);
      sub_239A1056C((uint64_t)&__dst);
      if ((v416 & 7) != 0)
      {
        v266 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v267 = __ldxr(v266);
        while (__stlxr(v267 - 2, v266));
      }
      MEMORY[0x23B83D734](&__dst, "r");
      if (!atomic_load(v15))
      {
        v374 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v374, v15))
            goto LABEL_448;
        }
        __clrex();
        if (v374)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v374);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_448:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
      sub_239A1056C((uint64_t)v404);
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v269 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v270 = __ldxr(v269);
        while (__stlxr(v270 - 2, v269));
      }
      MEMORY[0x23B83D734](&v416, "occlusion");
      if (!atomic_load(v15))
      {
        v376 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v376, v15))
            goto LABEL_452;
        }
        __clrex();
        if (v376)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v376);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_452:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v397);
      MEMORY[0x23B83D734](&v414, "r");
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v403);
      MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v403);
      if ((v414 & 7) != 0)
      {
        v272 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
        do
          v273 = __ldxr(v272);
        while (__stlxr(v273 - 2, v272));
      }
      MEMORY[0x23B83D680](v421);
      sub_239A1056C((uint64_t)&__dst);
      if ((v416 & 7) != 0)
      {
        v274 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v275 = __ldxr(v274);
        while (__stlxr(v275 - 2, v274));
      }
      MEMORY[0x23B83D578](v397);
LABEL_459:
      if (*((_BYTE *)v14 + 104))
      {
        v276 = *a1;
        v421[0] = (unint64_t)*a1;
        if (v276)
        {
          v277 = (unint64_t *)(v276 + 16);
          v278 = atomic_load((unint64_t *)(v276 + 16));
          if (!v278)
          {
            v278 = operator new();
            *(_DWORD *)(v278 + 8) = 1;
            *(_QWORD *)v278 = v393;
            *(_WORD *)(v278 + 12) = 0;
            *(_BYTE *)(v278 + 14) = 1;
            while (1)
            {
              v279 = __ldaxr(v277);
              if (v279)
                break;
              if (!__stlxr(v278, v277))
                goto LABEL_472;
            }
            __clrex();
            (*(void (**)(unint64_t))(*(_QWORD *)v278 + 8))(v278);
            v278 = v279;
          }
LABEL_472:
          v283 = (unsigned int *)(v278 + 8);
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
          v285 = (unsigned int *)*((_QWORD *)&v421[0] + 1);
          *((_QWORD *)&v421[0] + 1) = v278;
          if (v285)
          {
            v286 = v285 + 2;
            do
            {
              v287 = __ldxr(v286);
              v288 = v287 - 1;
            }
            while (__stlxr(v288, v286));
            if (!v288)
              (*(void (**)(unsigned int *))(*(_QWORD *)v285 + 8))(v285);
          }
        }
        v289 = SHIBYTE(v429);
        if (v429 >= 0)
          v290 = HIBYTE(v429);
        else
          v290 = *((_QWORD *)&v428 + 1);
        v291 = v290 + 18;
        if (v290 + 18 > 0x7FFFFFFFFFFFFFF7)
          sub_23941A5AC();
        if (v291 >= 0x17)
        {
          v293 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v291 | 7) != 0x17)
            v293 = v291 | 7;
          v294 = v293 + 1;
          v292 = operator new(v293 + 1);
          __dst.__r_.__value_.__l.__size_ = v290 + 18;
          __dst.__r_.__value_.__r.__words[2] = v294 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v292;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          v292 = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v290 + 18;
          if (!v290)
            goto LABEL_493;
        }
        if (v289 >= 0)
          v295 = &v428;
        else
          v295 = (__int128 *)v428;
        memmove(v292, v295, v290);
LABEL_493:
        strcpy((char *)v292 + v290, "/roughness_texture");
        MEMORY[0x23B83D710](&v416, &__dst);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
        {
          v296 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
          v297 = (unsigned int *)(v296 + 8);
          do
            v298 = __ldaxr(v297);
          while (__stlxr(v298 - 1, v297));
          if ((v298 & 0x7FFFFFFF) == 1)
            sub_239A10688(v296);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v299 = *((_QWORD *)&v421[0] + 1);
        if (*((_QWORD *)&v421[0] + 1))
        {
          v300 = (unsigned int *)(*((_QWORD *)&v421[0] + 1) + 8);
          do
          {
            v301 = __ldxr(v300);
            v302 = v301 - 1;
          }
          while (__stlxr(v302, v300));
          if (!v302)
            (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
        }
        MEMORY[0x23B83D734](v421, "UsdUVTexture");
        __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v421[0];
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1DB0 + 1;
        if ((v421[0] & 7) != 0)
        {
          v303 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 2, v303));
          if ((v304 & 1) == 0)
            __dst.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr();
        sub_239A1056C((uint64_t)v402);
        if (__dst.__r_.__value_.__l.__size_ && (__dst.__r_.__value_.__s.__data_[8] & 3) != 3)
          (*(void (**)(std::string *))((__dst.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&__dst);
        __dst.__r_.__value_.__l.__size_ = 0;
        if ((v421[0] & 7) != 0)
        {
          v305 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v306 = __ldxr(v305);
          while (__stlxr(v306 - 2, v305));
        }
        MEMORY[0x23B83D734](v421, "sourceColorSpace");
        if (!atomic_load(v15))
        {
          v378 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v378, v15))
              goto LABEL_517;
          }
          __clrex();
          if (v378)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v378);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_517:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        MEMORY[0x23B83D734](&v416, "raw");
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
        if ((v416 & 7) != 0)
        {
          v308 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
          do
            v309 = __ldxr(v308);
          while (__stlxr(v309 - 2, v308));
        }
        sub_239A1056C((uint64_t)&__dst);
        if ((v421[0] & 7) != 0)
        {
          v310 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v311 = __ldxr(v310);
          while (__stlxr(v311 - 2, v310));
        }
        MEMORY[0x23B83D734](&v416, "file");
        if (!atomic_load(v15))
        {
          v380 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v380, v15))
              goto LABEL_524;
          }
          __clrex();
          if (v380)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v380);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_524:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        MEMORY[0x23B83D4DC](&__dst, v14 + 56);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
        if (v437 < 0)
        {
          operator delete(v435);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_529;
LABEL_526:
          sub_239A1056C((uint64_t)v421);
          v313 = v416;
          if ((v416 & 7) != 0)
          {
LABEL_530:
            v314 = (unsigned int *)(v313 & 0xFFFFFFFFFFFFFFF8);
            do
              v315 = __ldxr(v314);
            while (__stlxr(v315 - 2, v314));
          }
        }
        else
        {
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_526;
LABEL_529:
          operator delete(__dst.__r_.__value_.__l.__data_);
          sub_239A1056C((uint64_t)v421);
          v313 = v416;
          if ((v416 & 7) != 0)
            goto LABEL_530;
        }
        MEMORY[0x23B83D734](&v416, "st");
        if (!atomic_load(v15))
        {
          v382 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v382, v15))
              goto LABEL_533;
          }
          __clrex();
          if (v382)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v382);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_533:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v419);
        MEMORY[0x23B83D734](&v414, "result");
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v401);
        MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v401);
        if ((v414 & 7) != 0)
        {
          v317 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
          do
            v318 = __ldxr(v317);
          while (__stlxr(v318 - 2, v317));
        }
        MEMORY[0x23B83D680](v421);
        sub_239A1056C((uint64_t)&__dst);
        if ((v416 & 7) != 0)
        {
          v319 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
          do
            v320 = __ldxr(v319);
          while (__stlxr(v320 - 2, v319));
        }
        MEMORY[0x23B83D734](&__dst, "r");
        if (!atomic_load(v15))
        {
          v384 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v384, v15))
              goto LABEL_540;
          }
          __clrex();
          if (v384)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v384);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_540:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
        sub_239A1056C((uint64_t)v400);
        if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v322 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v323 = __ldxr(v322);
          while (__stlxr(v323 - 2, v322));
        }
        MEMORY[0x23B83D734](&v416, "roughness");
        if (!atomic_load(v15))
        {
          v388 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
          while (!__ldaxr(v15))
          {
            if (!__stlxr((unint64_t)v388, v15))
              goto LABEL_544;
          }
          __clrex();
          if (v388)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v388);
            MEMORY[0x23B83E31C]();
          }
          atomic_load(v15);
        }
LABEL_544:
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v397);
        MEMORY[0x23B83D734](&v414, "r");
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v399);
        MEMORY[0x23B83D8F0](&__dst, v421, &v414, 2, v399);
        if ((v414 & 7) != 0)
        {
          v325 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
          do
            v326 = __ldxr(v325);
          while (__stlxr(v326 - 2, v325));
        }
        MEMORY[0x23B83D680](v421);
        sub_239A1056C((uint64_t)&__dst);
        if ((v416 & 7) != 0)
        {
          v327 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
          do
            v328 = __ldxr(v327);
          while (__stlxr(v328 - 2, v327));
        }
        MEMORY[0x23B83D578](v397);
        goto LABEL_551;
      }
      MEMORY[0x23B83D734](v421, "roughness");
      if (!atomic_load(v15))
      {
        v390 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v390, v15))
            goto LABEL_467;
        }
        __clrex();
        if (v390)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v390);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_467:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      LODWORD(v397[0]) = 1063675494;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
      sub_239A1056C((uint64_t)&__dst);
      if ((v421[0] & 7) != 0)
      {
        v281 = (unsigned int *)(*(_QWORD *)&v421[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v282 = __ldxr(v281);
        while (__stlxr(v282 - 2, v281));
      }
LABEL_551:
      MEMORY[0x23B83D734](&__dst, "surface");
      if (!atomic_load(v15))
      {
        v344 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v344, v15))
            goto LABEL_552;
        }
        __clrex();
        if (v344)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v344);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_552:
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
      sub_239A1056C((uint64_t)v398);
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v330 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v331 = __ldxr(v330);
        while (__stlxr(v331 - 2, v330));
      }
      if (!*((_BYTE *)v14 + 136))
        goto LABEL_566;
      sub_239A107BC((uint64_t)v397, &v424, &v425);
      MEMORY[0x23B83D734](&v416, "unconnected:displacement");
      if (!atomic_load(v15))
      {
        v386 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x23B83D668]();
        while (!__ldaxr(v15))
        {
          if (!__stlxr((unint64_t)v386, v15))
            goto LABEL_557;
        }
        __clrex();
        if (v386)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(v386);
          MEMORY[0x23B83E31C]();
        }
        atomic_load(v15);
      }
LABEL_557:
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      MEMORY[0x23B83D4DC](&__dst, v14 + 72);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
      if (v437 < 0)
      {
        operator delete(v435);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_559:
          sub_239A1056C((uint64_t)v421);
          v333 = v416;
          if ((v416 & 7) != 0)
            goto LABEL_563;
          goto LABEL_565;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_559;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      sub_239A1056C((uint64_t)v421);
      v333 = v416;
      if ((v416 & 7) != 0)
      {
LABEL_563:
        v334 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFFFF8);
        do
          v335 = __ldxr(v334);
        while (__stlxr(v335 - 2, v334));
      }
LABEL_565:
      sub_239A1056C((uint64_t)v397);
LABEL_566:
      v336 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v336 >= *(_QWORD *)(a4 + 16))
      {
        v337 = sub_239A12620((void **)a4);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *v336 = v394;
        v337 = (char *)(v336 + 3);
        *(_QWORD *)(a4 + 8) = v337;
      }
      *(_QWORD *)(a4 + 8) = v337;
      MEMORY[0x23B83D578](v419);
      MEMORY[0x23B83D578](v423);
      sub_239A1056C((uint64_t)&v426);
      MEMORY[0x23B83D5C0](v427);
      if (SHIBYTE(v429) < 0)
      {
        operator delete((void *)v428);
        if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_15;
LABEL_571:
        operator delete(v430.__r_.__value_.__l.__data_);
        v14 += 84;
        if (v14 == v396)
          break;
      }
      else
      {
        if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_571;
LABEL_15:
        v14 += 84;
        if (v14 == v396)
          break;
      }
    }
  }
  if (SHIBYTE(v433) < 0)
    operator delete((void *)v432);
  return 1;
}

void sub_239A0B844(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239A0C7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  if ((STACK[0x230] & 7) != 0)
  {
    v22 = (unsigned int *)(STACK[0x230] & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  MEMORY[0x23B83D680](&STACK[0x250]);
  sub_239A1056C(v21 - 144);
  if ((a21 & 7) != 0)
  {
    v24 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  JUMPOUT(0x239A0C73CLL);
}

uint64_t sub_239A0C804(uint64_t a1)
{
  uint64_t Ptr;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v3 = (unsigned int *)(Ptr + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_239A10688(Ptr);
  }
  return a1;
}

void sub_239A0C86C(pxrInternal__aapl__pxrReserved__::UsdStage **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t Ptr;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v8;
  unint64_t *v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  char v40;
  char v41[8];
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (!v3)
  {
    v35 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    v36 = (char *)sub_239A10918((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v35, 0x2Fu);
    v37 = "operator->";
    v38 = 953;
    v39 = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() const "
          "[U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    goto LABEL_58;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
  sub_239A0CE70(a2, (uint64_t)&v36);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v6 = (unsigned int *)(Ptr + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if ((v7 & 0x7FFFFFFF) == 1)
      sub_239A10688(Ptr);
  }
  if (!*a1)
  {
    v36 = "tf/refPtr.h";
    v37 = "operator->";
    v38 = 953;
    v39 = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() const "
          "[U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
LABEL_58:
    __break(1u);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*a1);
  pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer();
  v8 = sub_239A0CFDC((pxrInternal__aapl__pxrReserved__::SdfSpec *)v41);
  v9 = (unint64_t *)MEMORY[0x24BEE8B38];
  v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x24BEE8B38]);
  if (!v10)
  {
    v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)operator new();
    MEMORY[0x23B83D53C]();
    while (!__ldaxr(v9))
    {
      if (!__stlxr((unint64_t)v10, v9))
        goto LABEL_9;
    }
    __clrex();
    v33 = sub_239A12860(v10);
    MEMORY[0x23B83E31C](v33, 0x60C406FCEF5C6);
    v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v9);
  }
LABEL_9:
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v8, v10);
  v11 = v44;
  if (v44
    && (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL))|| (v11 & 4) != 0&& (pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl((pxrInternal__aapl__pxrReserved__::VtValue *)&v43, &stru_250AF1E78) & 1) != 0))
  {
    sub_239A12BCC((uint64_t *)&v43);
  }
  else
  {
    v29 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    sub_239A12D14((uint64_t)&v36, v29);
  }
  if (v44 && (v44 & 3) != 3)
    (*(void (**)(_QWORD **))((v44 & 0xFFFFFFFFFFFFFFF8) + 32))(&v43);
  MEMORY[0x23B83D734](&v42, "MaterialBindingAPI");
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v12 = operator new(8uLL);
  v43 = v12;
  v44 = (uint64_t)v12;
  v13 = v42;
  *v12 = v42;
  v45 = v12 + 1;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = (uint64_t)(v12 + 1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations();
  v16 = (uint64_t)v43;
  if (v43)
  {
    v17 = v44;
    v18 = v43;
    if ((_QWORD *)v44 != v43)
    {
      do
      {
        v20 = *(_QWORD *)(v17 - 8);
        v17 -= 8;
        v19 = v20;
        if ((v20 & 7) != 0)
        {
          v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
      }
      while (v17 != v16);
      v18 = v43;
    }
    v44 = v16;
    operator delete(v18);
  }
  if ((v42 & 7) != 0)
  {
    v23 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  sub_239A0CFDC((pxrInternal__aapl__pxrReserved__::SdfSpec *)v41);
  if (!atomic_load(v9))
  {
    v31 = (_QWORD *)operator new();
    MEMORY[0x23B83D53C]();
    while (!__ldaxr(v9))
    {
      if (!__stlxr((unint64_t)v31, v9))
        goto LABEL_36;
    }
    __clrex();
    v34 = sub_239A12860(v31);
    MEMORY[0x23B83E31C](v34, 0x60C406FCEF5C6);
    atomic_load(v9);
  }
LABEL_36:
  v44 = 0;
  sub_239A130F4((uint64_t *)&v43);
  pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo();
  if (v44 && (v44 & 3) != 3)
    (*(void (**)(_QWORD **))((v44 & 0xFFFFFFFFFFFFFFF8) + 32))(&v43);
  sub_239A10968(&v36);
  MEMORY[0x23B83D728](v41);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v26 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v27 = (unsigned int *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if ((v28 & 0x7FFFFFFF) == 1)
      sub_239A10688(v26);
  }
}

void sub_239A0CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x23B83E31C](v9, 0x60C406FCEF5C6);
  sub_239A10968(&a9);
  MEMORY[0x23B83D728](v10 - 88);
  sub_239A0C804(v10 - 80);
  _Unwind_Resume(a1);
}

void sub_239A0CDFC(uint64_t a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  JUMPOUT(0x239A0CE38);
}

void sub_239A0CE10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239A0878C(v1 - 64);
  MEMORY[0x23B83D728](v1 - 88);
  sub_239A0C804(v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_239A0CE70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  unsigned int *v10;
  unsigned int v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
    {
      *(_QWORD *)a2 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 16);
    if (*(_DWORD *)a1 == 1)
    {
      *(_DWORD *)a2 = *(_DWORD *)v9;
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v10 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
                             + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v8 + 20);
      result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      if ((_DWORD)result)
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
      return result;
    }
    v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v9, v12);
  }
  if (*(_DWORD *)a1 != 1)
  {
    v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v9 = v4;
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v9, v12);
  }
  *(_DWORD *)a2 = *(_DWORD *)v4;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v5 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
                        + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 20);
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSpec *sub_239A0CFDC(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  const char *v2;
  const char *p_p;
  void *__p;
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
    return a1;
  v7[0] = "sdf/declareHandles.h";
  v7[1] = "operator->";
  v7[2] = 96;
  v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator"
          "->() const [T = pxrInternal__aapl__pxrReserved__::SdfPrimSpec]";
  v8 = 0;
  v9 = 4;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfPrimSpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  if (v6 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", p_p);
  if (v6 < 0)
    operator delete(__p);
  return 0;
}

void sub_239A0D0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_239A0D0BC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239A0D130(unsigned int **a1, uint64_t *a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial **a4)
{
  std::string *v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t Ptr;
  unsigned int *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  size_t v22;
  unint64_t v23;
  __n128 *p_dst;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t v69;
  int *v70;
  int v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void (*v111)(void);
  unint64_t v112;
  unint64_t v113;
  void (*v114)(void);
  unint64_t v115;
  unint64_t v116;
  void (*v117)(void);
  unint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  _QWORD *v127;
  uint64_t v128;
  int *v129;
  int v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  void (*v170)(void);
  unint64_t v171;
  unint64_t v172;
  void (*v173)(void);
  unint64_t v174;
  unint64_t v175;
  void (*v176)(void);
  unint64_t *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  _QWORD *v192;
  _DWORD *v193;
  _DWORD *v194;
  int v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  __int128 *v206;
  _OWORD *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  int v215;
  unint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  __int128 *v225;
  _OWORD *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  void (*v236)(void);
  unint64_t v237;
  unint64_t v238;
  void (*v239)(void);
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unsigned int v243;
  int v244;
  unint64_t *v245;
  unint64_t *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  unsigned int *v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  unsigned int v268;
  uint64_t *v269;
  unint64_t *v270;
  uint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  _QWORD *v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  _DWORD *v283;
  int *v284;
  unint64_t v285;
  uint64_t v286;
  __int128 *v287;
  _OWORD *v288;
  uint64_t v289;
  __int128 v290;
  int v291;
  unint64_t *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  void (*v298)(void);
  std::string *v299;
  __int128 v300;
  void **v301;
  std::string::size_type v302;
  unint64_t v303;
  unint64_t *v304;
  unsigned int *v305;
  unsigned int v306;
  const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v307;
  _QWORD *v308;
  const pxrInternal__aapl__pxrReserved__::TfToken *v309;
  unsigned int *v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  void (*v325)(void);
  _QWORD *v326;
  unsigned int v330;
  char v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  unsigned int v335;
  int v336;
  const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v337;
  unint64_t *v338;
  _QWORD *v339;
  const pxrInternal__aapl__pxrReserved__::TfToken *v340;
  unint64_t v342;
  unint64_t v343;
  void (*v344)(void);
  unint64_t v345;
  unint64_t v346;
  void (*v347)(void);
  unint64_t v348;
  unint64_t v349;
  void (*v350)(void);
  unint64_t v351;
  unint64_t v352;
  void (*v353)(void);
  unint64_t v354;
  unint64_t v355;
  void (*v356)(void);
  unint64_t v357;
  unint64_t v358;
  void (*v359)(void);
  unint64_t v360;
  unint64_t v361;
  void (*v362)(void);
  _QWORD *v364;
  _QWORD *v366;
  unsigned int v368;
  char v369;
  _QWORD *v370;
  _QWORD *v371;
  unsigned int v374;
  int v375;
  _QWORD *v376;
  _QWORD *v377;
  void *v378;
  unint64_t v381;
  unsigned int __val;
  pxrInternal__aapl__pxrReserved__::UsdStage *v383;
  int v384;
  uint64_t v385;
  int v386;
  std::string v387;
  pxrInternal__aapl__pxrReserved__::UsdStage *v388;
  void *__p[2];
  __int128 v390;
  uint64_t v391;
  __n128 __dst;
  __int128 __dst_16;
  unint64_t v394;
  std::string v395;
  uint64_t v396;
  char v397[32];
  char v398[32];
  char v399[32];
  char v400[32];
  char v401[32];
  char v402[8];
  uint64_t v403;
  int v404;
  char v405[32];
  __int128 v406;
  int64_t v407;
  __int128 v408;
  __int128 v409;
  _QWORD *v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
  std::operator+<char>();
  v5 = std::string::append((std::string *)&__dst, "/Geometry");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v407 = v5->__r_.__value_.__r.__words[2];
  v406 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(__dst_16) < 0)
    operator delete((void *)__dst.n128_u64[0]);
  if (!*a1)
  {
    __dst.n128_u64[0] = (unint64_t)"tf/refPtr.h";
    __dst.n128_u64[1] = (unint64_t)"operator->";
    *(_QWORD *)&__dst_16 = 953;
    *((_QWORD *)&__dst_16 + 1) = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStag"
                                 "e>::operator->() const [U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    LOBYTE(v394) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    __break(1u);
  }
  MEMORY[0x23B83D710](&__dst, &v406);
  MEMORY[0x23B83D734](&v408, "Scope");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim();
  sub_239A1056C((uint64_t)v405);
  if ((v408 & 7) != 0)
  {
    v7 = (unsigned int *)(v408 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v10 = (unsigned int *)(Ptr + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if ((v11 & 0x7FFFFFFF) == 1)
      sub_239A10688(Ptr);
  }
  v408 = (unint64_t)*a1;
  if ((_QWORD)v408)
  {
    v12 = (unint64_t *)(v408 + 16);
    v13 = atomic_load((unint64_t *)(v408 + 16));
    if (!v13)
    {
      v13 = operator new();
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)v13 = MEMORY[0x24BEE9CD8] + 16;
      *(_WORD *)(v13 + 12) = 0;
      *(_BYTE *)(v13 + 14) = 1;
      while (1)
      {
        v14 = __ldaxr(v12);
        if (v14)
          break;
        if (!__stlxr(v13, v12))
          goto LABEL_19;
      }
      __clrex();
      (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
      v13 = v14;
    }
LABEL_19:
    v15 = (unsigned int *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (unsigned int *)*((_QWORD *)&v408 + 1);
    *((_QWORD *)&v408 + 1) = v13;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  v21 = SHIBYTE(v407);
  if (v407 >= 0)
    v22 = HIBYTE(v407);
  else
    v22 = *((_QWORD *)&v406 + 1);
  v23 = v22 + 5;
  if (v22 + 5 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    p_dst = (__n128 *)operator new(v25 + 1);
    __dst.n128_u64[1] = v22 + 5;
    *(_QWORD *)&__dst_16 = v26 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
  }
  else
  {
    *(_QWORD *)&__dst_16 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(__dst_16) = v22 + 5;
    if (!v22)
      goto LABEL_40;
  }
  if (v21 >= 0)
    v27 = &v406;
  else
    v27 = (__int128 *)v406;
  memmove(p_dst, v27, v22);
LABEL_40:
  strcpy((char *)p_dst + v22, "/Mesh");
  MEMORY[0x23B83D710](__p, &__dst);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v28 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v29 = (unsigned int *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if ((v30 & 0x7FFFFFFF) == 1)
      sub_239A10688(v28);
  }
  if (SBYTE7(__dst_16) < 0)
    operator delete((void *)__dst.n128_u64[0]);
  v31 = *((_QWORD *)&v408 + 1);
  if (*((_QWORD *)&v408 + 1))
  {
    v32 = (unsigned int *)(*((_QWORD *)&v408 + 1) + 8);
    do
    {
      v33 = __ldxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v394 = 0;
  __dst = 0u;
  __dst_16 = 0u;
  DWORD2(v408) = 0;
  *(_QWORD *)&v408 = 0;
  __p[0] = &v408;
  sub_239A13820(__dst.n128_u64, 2uLL, (uint64_t **)__p);
  v35 = *a2;
  v36 = *((_DWORD *)a2 + 2);
  sub_239A13C08((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst);
  v37 = v394;
  *(_QWORD *)v394 = v35;
  *(_DWORD *)(v37 + 8) = v36;
  v38 = *(uint64_t *)((char *)a2 + 12);
  v39 = *((_DWORD *)a2 + 5);
  sub_239A13C08((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst);
  v40 = v394;
  *(_QWORD *)(v394 + 12) = v38;
  *(_DWORD *)(v40 + 20) = v39;
  *((_QWORD *)&v408 + 1) = 0;
  sub_239A13D0C((pxrInternal__aapl__pxrReserved__::VtValue *)&v408, &__dst);
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr();
  sub_239A1056C((uint64_t)v401);
  if (*((_QWORD *)&v408 + 1) && (BYTE8(v408) & 3) != 3)
    (*(void (**)(__int128 *))((*((_QWORD *)&v408 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v408);
  if (v394)
  {
    v41 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
    if (*((_QWORD *)&__dst_16 + 1))
    {
      do
      {
        v342 = __ldxr(v41);
        v343 = v342 - 1;
      }
      while (__stlxr(v343, v41));
      if (!v343)
      {
        __dmb(9u);
        v344 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
        if (v344)
          v344();
      }
    }
    else
    {
      v42 = (unint64_t *)(v394 - 16);
      do
      {
        v43 = __ldxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        __dmb(9u);
        operator delete((void *)(v394 - 16));
      }
    }
  }
  v45 = (a2[4] - a2[3]) >> 2;
  __dst = 0u;
  __dst_16 = 0u;
  v394 = 0;
  LODWORD(__p[0]) = 0;
  *(_QWORD *)&v408 = __p;
  sub_239A147F0(__dst.n128_u64, v45, (const float **)&v408);
  v46 = a2[3];
  if (a2[4] != v46)
  {
    v47 = 0;
    v48 = 1;
    do
    {
      v49 = *(_DWORD *)(v46 + 4 * v47);
      sub_239A14C5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst);
      *(_DWORD *)(v394 + 4 * v47) = v49;
      v47 = v48;
      v46 = a2[3];
      ++v48;
    }
    while (v47 < (a2[4] - v46) >> 2);
  }
  *((_QWORD *)&v408 + 1) = 0;
  sub_239A14DBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v408, &__dst);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr();
  sub_239A1056C((uint64_t)v400);
  if (*((_QWORD *)&v408 + 1) && (BYTE8(v408) & 3) != 3)
    (*(void (**)(__int128 *))((*((_QWORD *)&v408 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v408);
  if (v394)
  {
    v50 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
    if (*((_QWORD *)&__dst_16 + 1))
    {
      do
      {
        v345 = __ldxr(v50);
        v346 = v345 - 1;
      }
      while (__stlxr(v346, v50));
      if (!v346)
      {
        __dmb(9u);
        v347 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
        if (v347)
          v347();
      }
    }
    else
    {
      v51 = (unint64_t *)(v394 - 16);
      do
      {
        v52 = __ldxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        __dmb(9u);
        operator delete((void *)(v394 - 16));
      }
    }
  }
  v54 = (a2[7] - a2[6]) >> 2;
  __dst = 0u;
  __dst_16 = 0u;
  v394 = 0;
  LODWORD(__p[0]) = 0;
  *(_QWORD *)&v408 = __p;
  sub_239A147F0(__dst.n128_u64, v54, (const float **)&v408);
  v55 = a2[6];
  if (a2[7] != v55)
  {
    v56 = 0;
    v57 = 1;
    do
    {
      v58 = *(_DWORD *)(v55 + 4 * v56);
      sub_239A14C5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst);
      *(_DWORD *)(v394 + 4 * v56) = v58;
      v56 = v57;
      v55 = a2[6];
      ++v57;
    }
    while (v56 < (a2[7] - v55) >> 2);
  }
  *((_QWORD *)&v408 + 1) = 0;
  sub_239A14DBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v408, &__dst);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexIndicesAttr();
  sub_239A1056C((uint64_t)v399);
  if (*((_QWORD *)&v408 + 1) && (BYTE8(v408) & 3) != 3)
    (*(void (**)(__int128 *))((*((_QWORD *)&v408 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v408);
  if (v394)
  {
    v59 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
    if (*((_QWORD *)&__dst_16 + 1))
    {
      do
      {
        v348 = __ldxr(v59);
        v349 = v348 - 1;
      }
      while (__stlxr(v349, v59));
      if (!v349)
      {
        __dmb(9u);
        v350 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
        if (v350)
          v350();
      }
    }
    else
    {
      v60 = (unint64_t *)(v394 - 16);
      do
      {
        v61 = __ldxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        __dmb(9u);
        operator delete((void *)(v394 - 16));
      }
    }
  }
  v63 = 0xAAAAAAAAAAAAAAABLL * ((a2[10] - a2[9]) >> 2);
  __dst = 0u;
  __dst_16 = 0u;
  v394 = 0;
  DWORD2(v408) = 0;
  *(_QWORD *)&v408 = 0;
  __p[0] = &v408;
  sub_239A13820(__dst.n128_u64, v63, (uint64_t **)__p);
  v65 = a2[9];
  v64 = a2[10];
  if (v64 != v65)
  {
    v66 = 0;
    v67 = 0;
    v68 = (_QWORD *)v394;
    do
    {
      v70 = (int *)(v65 + 12 * v66);
      if (v68)
      {
        v71 = *v70;
        if (*((_QWORD *)&__dst_16 + 1) || (v72 = atomic_load(v68 - 2), v72 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
          v74 = v394;
          v75 = __dst.n128_u64[0];
          v76 = sub_239A13B10((uint64_t)&__dst, __dst.n128_u64[0]);
          v73 = v76;
          if (v75)
          {
            v77 = 12 * v75;
            v78 = v76;
            do
            {
              v79 = *(_QWORD *)v74;
              *((_DWORD *)v78 + 2) = *(_DWORD *)(v74 + 8);
              *v78 = v79;
              v78 = (_QWORD *)((char *)v78 + 12);
              v74 += 12;
              v77 -= 12;
            }
            while (v77);
          }
          if (v394)
          {
            v80 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v109 = __ldxr(v80);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, v80));
              if (!v110)
              {
                __dmb(9u);
                v111 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v111)
                  v111();
              }
            }
            else
            {
              v81 = (unint64_t *)(v394 - 16);
              do
              {
                v82 = __ldxr(v81);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, v81));
              if (!v83)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v73;
        }
        else
        {
          v73 = (_QWORD *)v394;
        }
        *((_DWORD *)v73 + 3 * v66) = v71;
        v84 = *(_DWORD *)(a2[9] + 12 * v66 + 4);
        if (*((_QWORD *)&__dst_16 + 1) || (v85 = atomic_load(v73 - 2), v85 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
          v87 = v394;
          v88 = __dst.n128_u64[0];
          v89 = sub_239A13B10((uint64_t)&__dst, __dst.n128_u64[0]);
          v86 = v89;
          if (v88)
          {
            v90 = 12 * v88;
            v91 = v89;
            do
            {
              v92 = *(_QWORD *)v87;
              *((_DWORD *)v91 + 2) = *(_DWORD *)(v87 + 8);
              *v91 = v92;
              v91 = (_QWORD *)((char *)v91 + 12);
              v87 += 12;
              v90 -= 12;
            }
            while (v90);
          }
          if (v394)
          {
            v93 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v112 = __ldxr(v93);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, v93));
              if (!v113)
              {
                __dmb(9u);
                v114 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v114)
                  v114();
              }
            }
            else
            {
              v94 = (unint64_t *)(v394 - 16);
              do
              {
                v95 = __ldxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (!v96)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v86;
        }
        else
        {
          v86 = (_QWORD *)v394;
        }
        *((_DWORD *)v86 + 3 * v66 + 1) = v84;
        v97 = *(_DWORD *)(a2[9] + 12 * v66 + 8);
        if (*((_QWORD *)&__dst_16 + 1) || (v98 = atomic_load(v86 - 2), v98 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
          v99 = v394;
          v100 = __dst.n128_u64[0];
          v101 = sub_239A13B10((uint64_t)&__dst, __dst.n128_u64[0]);
          v68 = v101;
          if (v100)
          {
            v102 = 12 * v100;
            v103 = v101;
            do
            {
              v104 = *(_QWORD *)v99;
              *((_DWORD *)v103 + 2) = *(_DWORD *)(v99 + 8);
              *v103 = v104;
              v103 = (_QWORD *)((char *)v103 + 12);
              v99 += 12;
              v102 -= 12;
            }
            while (v102);
          }
          if (v394)
          {
            v105 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v115 = __ldxr(v105);
                v116 = v115 - 1;
              }
              while (__stlxr(v116, v105));
              if (!v116)
              {
                __dmb(9u);
                v117 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v117)
                  v117();
              }
            }
            else
            {
              v106 = (unint64_t *)(v394 - 16);
              do
              {
                v107 = __ldxr(v106);
                v108 = v107 - 1;
              }
              while (__stlxr(v108, v106));
              if (!v108)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v68;
        }
        else
        {
          v68 = (_QWORD *)v394;
        }
        *((_DWORD *)v68 + 3 * v66 + 2) = v97;
        v65 = a2[9];
        v64 = a2[10];
      }
      else
      {
        v69 = 12 * v66;
        *(_DWORD *)v69 = *v70;
        *(_DWORD *)(v69 + 4) = v70[1];
        *(_DWORD *)(v69 + 8) = v70[2];
      }
      v66 = ++v67;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v64 - v65) >> 2) > v67);
  }
  *((_QWORD *)&v408 + 1) = 0;
  sub_239A13D0C((pxrInternal__aapl__pxrReserved__::VtValue *)&v408, &__dst);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreateNormalsAttr();
  sub_239A1056C((uint64_t)v398);
  if (*((_QWORD *)&v408 + 1) && (BYTE8(v408) & 3) != 3)
    (*(void (**)(__int128 *))((*((_QWORD *)&v408 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v408);
  if (v394)
  {
    v118 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
    if (*((_QWORD *)&__dst_16 + 1))
    {
      do
      {
        v351 = __ldxr(v118);
        v352 = v351 - 1;
      }
      while (__stlxr(v352, v118));
      if (!v352)
      {
        __dmb(9u);
        v353 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
        if (v353)
          v353();
      }
    }
    else
    {
      v119 = (unint64_t *)(v394 - 16);
      do
      {
        v120 = __ldxr(v119);
        v121 = v120 - 1;
      }
      while (__stlxr(v121, v119));
      if (!v121)
      {
        __dmb(9u);
        operator delete((void *)(v394 - 16));
      }
    }
  }
  v122 = 0xAAAAAAAAAAAAAAABLL * ((a2[13] - a2[12]) >> 2);
  __dst = 0u;
  __dst_16 = 0u;
  v394 = 0;
  DWORD2(v408) = 0;
  *(_QWORD *)&v408 = 0;
  __p[0] = &v408;
  sub_239A13820(__dst.n128_u64, v122, (uint64_t **)__p);
  v124 = a2[12];
  v123 = a2[13];
  if (v123 != v124)
  {
    v125 = 0;
    v126 = 0;
    v127 = (_QWORD *)v394;
    do
    {
      v129 = (int *)(v124 + 12 * v125);
      if (v127)
      {
        v130 = *v129;
        if (*((_QWORD *)&__dst_16 + 1) || (v131 = atomic_load(v127 - 2), v131 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
          v133 = v394;
          v134 = __dst.n128_u64[0];
          v135 = sub_239A13B10((uint64_t)&__dst, __dst.n128_u64[0]);
          v132 = v135;
          if (v134)
          {
            v136 = 12 * v134;
            v137 = v135;
            do
            {
              v138 = *(_QWORD *)v133;
              *((_DWORD *)v137 + 2) = *(_DWORD *)(v133 + 8);
              *v137 = v138;
              v137 = (_QWORD *)((char *)v137 + 12);
              v133 += 12;
              v136 -= 12;
            }
            while (v136);
          }
          if (v394)
          {
            v139 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v168 = __ldxr(v139);
                v169 = v168 - 1;
              }
              while (__stlxr(v169, v139));
              if (!v169)
              {
                __dmb(9u);
                v170 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v170)
                  v170();
              }
            }
            else
            {
              v140 = (unint64_t *)(v394 - 16);
              do
              {
                v141 = __ldxr(v140);
                v142 = v141 - 1;
              }
              while (__stlxr(v142, v140));
              if (!v142)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v132;
        }
        else
        {
          v132 = (_QWORD *)v394;
        }
        *((_DWORD *)v132 + 3 * v125) = v130;
        v143 = *(_DWORD *)(a2[12] + 12 * v125 + 4);
        if (*((_QWORD *)&__dst_16 + 1) || (v144 = atomic_load(v132 - 2), v144 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
          v146 = v394;
          v147 = __dst.n128_u64[0];
          v148 = sub_239A13B10((uint64_t)&__dst, __dst.n128_u64[0]);
          v145 = v148;
          if (v147)
          {
            v149 = 12 * v147;
            v150 = v148;
            do
            {
              v151 = *(_QWORD *)v146;
              *((_DWORD *)v150 + 2) = *(_DWORD *)(v146 + 8);
              *v150 = v151;
              v150 = (_QWORD *)((char *)v150 + 12);
              v146 += 12;
              v149 -= 12;
            }
            while (v149);
          }
          if (v394)
          {
            v152 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v171 = __ldxr(v152);
                v172 = v171 - 1;
              }
              while (__stlxr(v172, v152));
              if (!v172)
              {
                __dmb(9u);
                v173 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v173)
                  v173();
              }
            }
            else
            {
              v153 = (unint64_t *)(v394 - 16);
              do
              {
                v154 = __ldxr(v153);
                v155 = v154 - 1;
              }
              while (__stlxr(v155, v153));
              if (!v155)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v145;
        }
        else
        {
          v145 = (_QWORD *)v394;
        }
        *((_DWORD *)v145 + 3 * v125 + 1) = v143;
        v156 = *(_DWORD *)(a2[12] + 12 * v125 + 8);
        if (*((_QWORD *)&__dst_16 + 1) || (v157 = atomic_load(v145 - 2), v157 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
          v158 = v394;
          v159 = __dst.n128_u64[0];
          v160 = sub_239A13B10((uint64_t)&__dst, __dst.n128_u64[0]);
          v127 = v160;
          if (v159)
          {
            v161 = 12 * v159;
            v162 = v160;
            do
            {
              v163 = *(_QWORD *)v158;
              *((_DWORD *)v162 + 2) = *(_DWORD *)(v158 + 8);
              *v162 = v163;
              v162 = (_QWORD *)((char *)v162 + 12);
              v158 += 12;
              v161 -= 12;
            }
            while (v161);
          }
          if (v394)
          {
            v164 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v174 = __ldxr(v164);
                v175 = v174 - 1;
              }
              while (__stlxr(v175, v164));
              if (!v175)
              {
                __dmb(9u);
                v176 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v176)
                  v176();
              }
            }
            else
            {
              v165 = (unint64_t *)(v394 - 16);
              do
              {
                v166 = __ldxr(v165);
                v167 = v166 - 1;
              }
              while (__stlxr(v167, v165));
              if (!v167)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v127;
        }
        else
        {
          v127 = (_QWORD *)v394;
        }
        *((_DWORD *)v127 + 3 * v125 + 2) = v156;
        v124 = a2[12];
        v123 = a2[13];
      }
      else
      {
        v128 = 12 * v125;
        *(_DWORD *)v128 = *v129;
        *(_DWORD *)(v128 + 4) = v129[1];
        *(_DWORD *)(v128 + 8) = v129[2];
      }
      v125 = ++v126;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v123 - v124) >> 2) > v126);
  }
  *((_QWORD *)&v408 + 1) = 0;
  sub_239A13D0C((pxrInternal__aapl__pxrReserved__::VtValue *)&v408, &__dst);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr();
  sub_239A1056C((uint64_t)v397);
  if (*((_QWORD *)&v408 + 1) && (BYTE8(v408) & 3) != 3)
    (*(void (**)(__int128 *))((*((_QWORD *)&v408 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v408);
  if (v394)
  {
    v177 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
    if (*((_QWORD *)&__dst_16 + 1))
    {
      do
      {
        v354 = __ldxr(v177);
        v355 = v354 - 1;
      }
      while (__stlxr(v355, v177));
      if (!v355)
      {
        __dmb(9u);
        v356 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
        if (v356)
          v356();
      }
    }
    else
    {
      v178 = (unint64_t *)(v394 - 16);
      do
      {
        v179 = __ldxr(v178);
        v180 = v179 - 1;
      }
      while (__stlxr(v180, v178));
      if (!v180)
      {
        __dmb(9u);
        operator delete((void *)(v394 - 16));
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v396 = 0;
  v395.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9DB0] + 16;
  MEMORY[0x23B83D734](&v408, "st");
  v181 = (unint64_t *)MEMORY[0x24BEE82A0];
  v182 = atomic_load(MEMORY[0x24BEE82A0]);
  if (!v182)
  {
    v182 = MEMORY[0x23B83D668]();
    while (!__ldaxr(v181))
    {
      if (!__stlxr(v182, v181))
        goto LABEL_224;
    }
    __clrex();
    if (v182)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)v182);
      MEMORY[0x23B83E31C]();
    }
    v182 = atomic_load(v181);
  }
LABEL_224:
  __p[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v395, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v408, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v182 + 840), (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v183 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  if ((v408 & 7) != 0)
  {
    v185 = (unsigned int *)(v408 & 0xFFFFFFFFFFFFFFF8);
    do
      v186 = __ldxr(v185);
    while (__stlxr(v186 - 2, v185));
  }
  v187 = (a2[16] - a2[15]) >> 3;
  v408 = 0u;
  v409 = 0u;
  v410 = 0;
  v387.__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v387;
  sub_239A150F4((unint64_t *)&v408, v187, (const double **)__p);
  v189 = a2[15];
  v188 = a2[16];
  if (v188 != v189)
  {
    v190 = 0;
    v191 = 0;
    v192 = v410;
    do
    {
      while (1)
      {
        v194 = (_DWORD *)(v189 + 8 * v190);
        if (v192)
          break;
        v193 = (_DWORD *)(8 * v190);
        *v193 = *v194;
        v193[1] = v194[1];
        v190 = ++v191;
        if (v191 >= (unint64_t)((v188 - v189) >> 3))
          goto LABEL_284;
      }
      v195 = *v194;
      if (!*((_QWORD *)&v409 + 1))
      {
        v196 = atomic_load(v192 - 2);
        if (v196 == 1)
        {
          v197 = v410;
          goto LABEL_254;
        }
      }
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v408, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      v198 = v410;
      v199 = v408;
      v200 = sub_239A15560((uint64_t)&v408, v408);
      v197 = v200;
      if (v199)
      {
        v201 = (v199 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v201 < 3)
        {
          v202 = v200;
          v203 = v198;
        }
        else
        {
          v202 = v200;
          v203 = v198;
          if ((unint64_t)((char *)v200 - (char *)v198) >= 0x20)
          {
            v204 = v201 + 1;
            v205 = v204 & 0x3FFFFFFFFFFFFFFCLL;
            v202 = &v200[v205];
            v203 = &v198[v205];
            v206 = (__int128 *)(v198 + 2);
            v207 = v200 + 2;
            v208 = v204 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v209 = *v206;
              *(v207 - 1) = *(v206 - 1);
              *v207 = v209;
              v206 += 2;
              v207 += 2;
              v208 -= 4;
            }
            while (v208);
            if (v204 == (v204 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_246;
          }
        }
        do
        {
          v210 = *v203++;
          *v202++ = v210;
        }
        while (v203 != &v198[v199]);
      }
LABEL_246:
      if (v410)
      {
        v211 = (unint64_t *)*((_QWORD *)&v409 + 1);
        if (*((_QWORD *)&v409 + 1))
        {
          do
          {
            v234 = __ldxr(v211);
            v235 = v234 - 1;
          }
          while (__stlxr(v235, v211));
          if (!v235)
          {
            __dmb(9u);
            v236 = *(void (**)(void))(*((_QWORD *)&v409 + 1) + 8);
            if (v236)
              v236();
          }
        }
        else
        {
          v212 = v410 - 2;
          do
          {
            v213 = __ldxr(v212);
            v214 = v213 - 1;
          }
          while (__stlxr(v214, v212));
          if (!v214)
          {
            __dmb(9u);
            operator delete(v410 - 2);
          }
        }
        *((_QWORD *)&v409 + 1) = 0;
      }
      v410 = v197;
LABEL_254:
      LODWORD(v197[v190]) = v195;
      v215 = *(_DWORD *)(a2[15] + 8 * v190 + 4);
      if (*((_QWORD *)&v409 + 1) || (v216 = atomic_load(v197 - 2), v216 != 1))
      {
        pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v408, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
        v217 = v410;
        v218 = v408;
        v219 = sub_239A15560((uint64_t)&v408, v408);
        v192 = v219;
        if (v218)
        {
          v220 = (v218 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v220 < 3)
          {
            v221 = v219;
            v222 = v217;
          }
          else
          {
            v221 = v219;
            v222 = v217;
            if ((unint64_t)((char *)v219 - (char *)v217) >= 0x20)
            {
              v223 = v220 + 1;
              v224 = v223 & 0x3FFFFFFFFFFFFFFCLL;
              v221 = &v219[v224];
              v222 = &v217[v224];
              v225 = (__int128 *)(v217 + 2);
              v226 = v219 + 2;
              v227 = v223 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v228 = *v225;
                *(v226 - 1) = *(v225 - 1);
                *v226 = v228;
                v225 += 2;
                v226 += 2;
                v227 -= 4;
              }
              while (v227);
              if (v223 == (v223 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_266;
            }
          }
          do
          {
            v229 = *v222++;
            *v221++ = v229;
          }
          while (v222 != &v217[v218]);
        }
LABEL_266:
        if (v410)
        {
          v230 = (unint64_t *)*((_QWORD *)&v409 + 1);
          if (*((_QWORD *)&v409 + 1))
          {
            do
            {
              v237 = __ldxr(v230);
              v238 = v237 - 1;
            }
            while (__stlxr(v238, v230));
            if (!v238)
            {
              __dmb(9u);
              v239 = *(void (**)(void))(*((_QWORD *)&v409 + 1) + 8);
              if (v239)
                v239();
            }
          }
          else
          {
            v231 = v410 - 2;
            do
            {
              v232 = __ldxr(v231);
              v233 = v232 - 1;
            }
            while (__stlxr(v233, v231));
            if (!v233)
            {
              __dmb(9u);
              operator delete(v410 - 2);
            }
          }
          *((_QWORD *)&v409 + 1) = 0;
        }
        v410 = v192;
        goto LABEL_274;
      }
      v192 = v410;
LABEL_274:
      HIDWORD(v192[v190]) = v215;
      v189 = a2[15];
      v188 = a2[16];
      v190 = ++v191;
    }
    while (v191 < (unint64_t)((v188 - v189) >> 3));
  }
LABEL_284:
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
  v240 = (a2[19] - a2[18]) >> 2;
  *(_OWORD *)__p = 0u;
  v390 = 0u;
  v391 = 0;
  v384 = 0;
  v387.__r_.__value_.__r.__words[0] = (std::string::size_type)&v384;
  sub_239A147F0((unint64_t *)__p, v240, (const float **)&v387);
  v241 = a2[18];
  if (a2[19] != v241)
  {
    v242 = 0;
    v243 = 1;
    do
    {
      v244 = *(_DWORD *)(v241 + 4 * v242);
      sub_239A14C5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
      *(_DWORD *)(v391 + 4 * v242) = v244;
      v242 = v243;
      v241 = a2[18];
      ++v243;
    }
    while (v242 < (a2[19] - v241) >> 2);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices();
  v245 = (unint64_t *)MEMORY[0x24BEE7FE8];
  if (!atomic_load(MEMORY[0x24BEE7FE8]))
  {
    v364 = (_QWORD *)operator new();
    MEMORY[0x23B83D5D8]();
    while (!__ldaxr(v245))
    {
      if (!__stlxr((unint64_t)v364, v245))
        goto LABEL_288;
    }
    __clrex();
    v370 = sub_239A15650(v364);
    MEMORY[0x23B83E31C](v370, 0x60C40828F5A6DLL);
    atomic_load(v245);
  }
LABEL_288:
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation();
  if (v391)
  {
    v247 = (unint64_t *)*((_QWORD *)&v390 + 1);
    if (*((_QWORD *)&v390 + 1))
    {
      do
      {
        v357 = __ldxr(v247);
        v358 = v357 - 1;
      }
      while (__stlxr(v358, v247));
      if (!v358)
      {
        __dmb(9u);
        v359 = *(void (**)(void))(*((_QWORD *)&v390 + 1) + 8);
        if (v359)
          v359();
      }
    }
    else
    {
      v248 = (unint64_t *)(v391 - 16);
      do
      {
        v249 = __ldxr(v248);
        v250 = v249 - 1;
      }
      while (__stlxr(v250, v248));
      if (!v250)
      {
        __dmb(9u);
        operator delete((void *)(v391 - 16));
      }
    }
  }
  if (v410)
  {
    v251 = (unint64_t *)*((_QWORD *)&v409 + 1);
    if (*((_QWORD *)&v409 + 1))
    {
      do
      {
        v360 = __ldxr(v251);
        v361 = v360 - 1;
      }
      while (__stlxr(v361, v251));
      if (!v361)
      {
        __dmb(9u);
        v362 = *(void (**)(void))(*((_QWORD *)&v409 + 1) + 8);
        if (v362)
          v362();
      }
    }
    else
    {
      v252 = v410 - 2;
      do
      {
        v253 = __ldxr(v252);
        v254 = v253 - 1;
      }
      while (__stlxr(v254, v252));
      if (!v254)
      {
        __dmb(9u);
        operator delete(v410 - 2);
      }
    }
  }
  if ((v394 & 7) != 0)
  {
    v255 = (unsigned int *)(v394 & 0xFFFFFFFFFFFFFFF8);
    do
      v256 = __ldxr(v255);
    while (__stlxr(v256 - 2, v255));
  }
  sub_239A1056C((uint64_t)&__dst);
  MEMORY[0x23B83D5FC](&v395);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v402);
  if (!atomic_load(v245))
  {
    v366 = (_QWORD *)operator new();
    MEMORY[0x23B83D5D8]();
    while (!__ldaxr(v245))
    {
      if (!__stlxr((unint64_t)v366, v245))
        goto LABEL_304;
    }
    __clrex();
    v371 = sub_239A15650(v366);
    MEMORY[0x23B83E31C](v371, 0x60C40828F5A6DLL);
    atomic_load(v245);
  }
LABEL_304:
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
  sub_239A1056C((uint64_t)&__dst);
  v258 = *a1;
  v388 = (pxrInternal__aapl__pxrReserved__::UsdStage *)v258;
  if (v258)
  {
    v259 = v258 + 2;
    v260 = v258[2];
    if ((v260 & 0x80000000) == 0)
    {
      do
        v261 = __ldxr(v259);
      while (__stxr(v261 + 1, v259));
      goto LABEL_307;
    }
    if (v260 == -1)
    {
LABEL_490:
      pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      goto LABEL_307;
    }
    v368 = __ldxr(v259);
    if (v368 == v260)
    {
      if (!__stxr(v260 - 1, v259))
      {
        v369 = 1;
        goto LABEL_489;
      }
    }
    else
    {
      __clrex();
    }
    v369 = 0;
LABEL_489:
    if ((v369 & 1) != 0)
      goto LABEL_307;
    goto LABEL_490;
  }
LABEL_307:
  sub_239A107BC((uint64_t)&__dst, &v403, &v404);
  sub_239A0C86C(&v388, (uint64_t)&__dst);
  sub_239A1056C((uint64_t)&__dst);
  if (!v258)
    goto LABEL_312;
  v262 = v258 + 2;
  v263 = v258[2];
  if ((v263 & 0x80000000) != 0)
  {
    if (v263 == -2)
      goto LABEL_498;
    v374 = __ldxr(v262);
    if (v374 == v263)
    {
      if (!__stlxr(v263 + 1, v262))
      {
        v375 = 1;
        goto LABEL_495;
      }
    }
    else
    {
      __clrex();
    }
    v375 = 0;
LABEL_495:
    if (v375)
    {
      if (v263 != -1)
        goto LABEL_312;
      goto LABEL_311;
    }
LABEL_498:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
      goto LABEL_312;
LABEL_311:
    (*(void (**)(unsigned int *))(*(_QWORD *)v258 + 8))(v258);
    goto LABEL_312;
  }
  do
  {
    v264 = __ldxr(v262);
    v265 = v264 - 1;
  }
  while (__stlxr(v265, v262));
  if (!v265)
    goto LABEL_311;
LABEL_312:
  if (0xAAAAAAAAAAAAAAABLL * ((a2[22] - a2[21]) >> 3) < 2)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)&__dst_16 + 1) = 0;
    __dst.n128_u64[0] = MEMORY[0x24BEE9DC8] + 16;
    v337 = *a4;
    v338 = (unint64_t *)MEMORY[0x24BEE8128];
    v339 = (_QWORD *)atomic_load(MEMORY[0x24BEE8128]);
    if (!v339)
    {
      v339 = (_QWORD *)operator new();
      MEMORY[0x23B83D608]();
      while (!__ldaxr(v338))
      {
        if (!__stlxr((unint64_t)v339, v338))
          goto LABEL_418;
      }
      __clrex();
      v376 = sub_239A16FE4(v339);
      MEMORY[0x23B83E31C](v376, 0x60C4005C00B59);
      v339 = (_QWORD *)atomic_load(v338);
    }
LABEL_418:
    v340 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v338);
    if (!v340)
    {
      v340 = (const pxrInternal__aapl__pxrReserved__::TfToken *)operator new();
      MEMORY[0x23B83D608]();
      while (!__ldaxr(v338))
      {
        if (!__stlxr((unint64_t)v340, v338))
          goto LABEL_419;
      }
      __clrex();
      v377 = sub_239A16FE4(v340);
      MEMORY[0x23B83E31C](v377, 0x60C4005C00B59);
      v340 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v338);
    }
LABEL_419:
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&__dst, v337, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v339 + 5), v340);
    MEMORY[0x23B83D6A4](&__dst);
    MEMORY[0x23B83D4C4](v402);
    if (SHIBYTE(v407) < 0)
LABEL_420:
      operator delete((void *)v406);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)&v409 + 1) = 0;
    v378 = (void *)(MEMORY[0x24BEE9DC8] + 16);
    *(_QWORD *)&v408 = MEMORY[0x24BEE9DC8] + 16;
    v266 = a2[21];
    if (a2[22] != v266)
    {
      v267 = 0;
      v268 = 0;
      do
      {
        __val = v268;
        v269 = a2;
        v270 = v245;
        v381 = v267;
        v271 = (uint64_t *)(v266 + 24 * v267);
        v272 = (v271[1] - *v271) >> 2;
        v394 = 0;
        __dst = 0u;
        __dst_16 = 0u;
        LODWORD(v395.__r_.__value_.__l.__data_) = 0;
        __p[0] = &v395;
        sub_239A147F0(__dst.n128_u64, v272, (const float **)__p);
        v273 = *v271;
        if (v271[1] != *v271)
        {
          v274 = 0;
          v275 = 0;
          v276 = (_QWORD *)v394;
          while (1)
          {
            v277 = *(_DWORD *)(v273 + 4 * v274);
            if (*((_QWORD *)&__dst_16 + 1))
              break;
            v278 = atomic_load(v276 - 2);
            if (v278 != 1)
              break;
            v276 = (_QWORD *)v394;
LABEL_319:
            *((_DWORD *)v276 + v274) = v277;
            v273 = *v271;
            v274 = ++v275;
            if (v275 >= (unint64_t)((v271[1] - *v271) >> 2))
              goto LABEL_343;
          }
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__dst, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
          v279 = v394;
          v280 = __dst.n128_u64[0];
          v281 = sub_239A1162C((uint64_t)&__dst, __dst.n128_u64[0]);
          v276 = v281;
          if (v280)
          {
            v282 = (v280 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v282 < 7)
            {
              v283 = v281;
              v284 = (int *)v279;
            }
            else
            {
              v283 = v281;
              v284 = (int *)v279;
              if ((unint64_t)v281 - v279 >= 0x20)
              {
                v285 = v282 + 1;
                v286 = 4 * (v285 & 0x7FFFFFFFFFFFFFF8);
                v283 = (_DWORD *)((char *)v281 + v286);
                v284 = (int *)(v279 + v286);
                v287 = (__int128 *)(v279 + 16);
                v288 = v281 + 2;
                v289 = v285 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v290 = *v287;
                  *(v288 - 1) = *(v287 - 1);
                  *v288 = v290;
                  v287 += 2;
                  v288 += 2;
                  v289 -= 8;
                }
                while (v289);
                if (v285 == (v285 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_331;
              }
            }
            do
            {
              v291 = *v284++;
              *v283++ = v291;
            }
            while (v284 != (int *)(v279 + 4 * v280));
          }
LABEL_331:
          if (v394)
          {
            v292 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v296 = __ldxr(v292);
                v297 = v296 - 1;
              }
              while (__stlxr(v297, v292));
              if (!v297)
              {
                __dmb(9u);
                v298 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v298)
                  v298();
              }
            }
            else
            {
              v293 = (unint64_t *)(v394 - 16);
              do
              {
                v294 = __ldxr(v293);
                v295 = v294 - 1;
              }
              while (__stlxr(v295, v293));
              if (!v295)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
            *((_QWORD *)&__dst_16 + 1) = 0;
          }
          v394 = (unint64_t)v276;
          goto LABEL_319;
        }
LABEL_343:
        *((_BYTE *)&v387.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v387, "Group");
        v245 = v270;
        a2 = v269;
        if (__val)
        {
          std::to_string(&v395, __val);
          v299 = std::string::insert(&v395, 0, "_");
          v300 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
          *(_QWORD *)&v390 = *((_QWORD *)&v299->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v300;
          v299->__r_.__value_.__l.__size_ = 0;
          v299->__r_.__value_.__r.__words[2] = 0;
          v299->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v390) & 0x80u) == 0)
            v301 = __p;
          else
            v301 = (void **)__p[0];
          if ((SBYTE7(v390) & 0x80u) == 0)
            v302 = BYTE7(v390);
          else
            v302 = (std::string::size_type)__p[1];
          std::string::append(&v387, (const std::string::value_type *)v301, v302);
          if (SBYTE7(v390) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v395.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_352;
          }
          else if ((SHIBYTE(v395.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_352;
          }
          operator delete(v395.__r_.__value_.__l.__data_);
        }
LABEL_352:
        MEMORY[0x23B83D740](__p, &v387);
        v303 = atomic_load(v245);
        v304 = (unint64_t *)MEMORY[0x24BEE8128];
        if (!v303)
        {
          v326 = (_QWORD *)operator new();
          MEMORY[0x23B83D5D8]();
          while (!__ldaxr(v245))
          {
            if (!__stlxr((unint64_t)v326, v245))
              goto LABEL_353;
          }
          __clrex();
          v332 = sub_239A15650(v326);
          MEMORY[0x23B83E31C](v332, 0x60C40828F5A6DLL);
          atomic_load(v245);
        }
LABEL_353:
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CreateMaterialBindSubset();
        if (((uint64_t)__p[0] & 7) != 0)
        {
          v305 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v306 = __ldxr(v305);
          while (__stlxr(v306 - 2, v305));
        }
        sub_239A107BC((uint64_t)&v395, &v385, &v386);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((_QWORD *)&v390 + 1) = 0;
        __p[0] = v378;
        v307 = *a4;
        v308 = (_QWORD *)atomic_load(v304);
        if (!v308)
        {
          v308 = (_QWORD *)operator new();
          MEMORY[0x23B83D608]();
          while (!__ldaxr(v304))
          {
            if (!__stlxr((unint64_t)v308, v304))
              goto LABEL_357;
          }
          __clrex();
          v333 = sub_239A16FE4(v308);
          MEMORY[0x23B83E31C](v333, 0x60C4005C00B59);
          v308 = (_QWORD *)atomic_load(v304);
        }
LABEL_357:
        v309 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v304);
        if (!v309)
        {
          v309 = (const pxrInternal__aapl__pxrReserved__::TfToken *)operator new();
          MEMORY[0x23B83D608]();
          while (!__ldaxr(v304))
          {
            if (!__stlxr((unint64_t)v309, v304))
              goto LABEL_358;
          }
          __clrex();
          v334 = sub_239A16FE4(v309);
          MEMORY[0x23B83E31C](v334, 0x60C4005C00B59);
          v309 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(v304);
        }
LABEL_358:
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)__p, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)((char *)v307 + 24 * v381), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v308 + 5), v309);
        MEMORY[0x23B83D6A4](__p);
        sub_239A1056C((uint64_t)&v395);
        v310 = *a1;
        v383 = (pxrInternal__aapl__pxrReserved__::UsdStage *)v310;
        if (v310)
        {
          v311 = v310 + 2;
          v312 = v310[2];
          if ((v312 & 0x80000000) != 0)
          {
            if (v312 == -1)
              goto LABEL_409;
            v330 = __ldxr(v311);
            if (v330 == v312)
            {
              if (!__stxr(v312 - 1, v311))
              {
                v331 = 1;
LABEL_408:
                if ((v331 & 1) != 0)
                  goto LABEL_361;
LABEL_409:
                pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
                goto LABEL_361;
              }
            }
            else
            {
              __clrex();
            }
            v331 = 0;
            goto LABEL_408;
          }
          do
            v313 = __ldxr(v311);
          while (__stxr(v313 + 1, v311));
        }
LABEL_361:
        sub_239A107BC((uint64_t)__p, &v385, &v386);
        sub_239A0C86C(&v383, (uint64_t)__p);
        sub_239A1056C((uint64_t)__p);
        if (!v310)
          goto LABEL_366;
        v314 = v310 + 2;
        v315 = v310[2];
        if ((v315 & 0x80000000) != 0)
        {
          if (v315 == -2)
          {
LABEL_415:
            if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) != 0)
              goto LABEL_365;
            goto LABEL_366;
          }
          v335 = __ldxr(v314);
          if (v335 == v315)
          {
            if (!__stlxr(v315 + 1, v314))
            {
              v336 = 1;
              goto LABEL_412;
            }
          }
          else
          {
            __clrex();
          }
          v336 = 0;
LABEL_412:
          if (v336)
          {
            if (v315 == -1)
              goto LABEL_365;
            goto LABEL_366;
          }
          goto LABEL_415;
        }
        do
        {
          v316 = __ldxr(v314);
          v317 = v316 - 1;
        }
        while (__stlxr(v317, v314));
        if (!v317)
LABEL_365:
          (*(void (**)(unsigned int *))(*(_QWORD *)v310 + 8))(v310);
LABEL_366:
        MEMORY[0x23B83D518](&v384);
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v387.__r_.__value_.__l.__data_);
          v318 = v394;
          if (v394)
          {
LABEL_370:
            v319 = (unint64_t *)*((_QWORD *)&__dst_16 + 1);
            if (*((_QWORD *)&__dst_16 + 1))
            {
              do
              {
                v323 = __ldxr(v319);
                v324 = v323 - 1;
              }
              while (__stlxr(v324, v319));
              if (!v324)
              {
                __dmb(9u);
                v325 = *(void (**)(void))(*((_QWORD *)&__dst_16 + 1) + 8);
                if (v325)
                  v325();
              }
            }
            else
            {
              v320 = (unint64_t *)(v318 - 16);
              do
              {
                v321 = __ldxr(v320);
                v322 = v321 - 1;
              }
              while (__stlxr(v322, v320));
              if (!v322)
              {
                __dmb(9u);
                operator delete((void *)(v394 - 16));
              }
            }
          }
        }
        else
        {
          v318 = v394;
          if (v394)
            goto LABEL_370;
        }
        v267 = __val + 1;
        v266 = v269[21];
        v268 = __val + 1;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v269[22] - v266) >> 3) > v267);
    }
    MEMORY[0x23B83D6A4](&v408);
    MEMORY[0x23B83D4C4](v402);
    if (SHIBYTE(v407) < 0)
      goto LABEL_420;
  }
  return 1;
}

void sub_239A0F09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A0F52C(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(void);

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = a1 + 24;
    v3 = *(unint64_t **)(a1 + 24);
    if (v3)
    {
      do
      {
        v9 = __ldxr(v3);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v3));
      if (!v10)
      {
        __dmb(9u);
        v11 = *(void (**)(void))(*(_QWORD *)v4 + 8);
        if (v11)
          v11();
      }
    }
    else
    {
      v5 = (unint64_t *)(v2 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t sub_239A0F5BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(void);

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = a1 + 24;
    v3 = *(unint64_t **)(a1 + 24);
    if (v3)
    {
      do
      {
        v9 = __ldxr(v3);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v3));
      if (!v10)
      {
        __dmb(9u);
        v11 = *(void (**)(void))(*(_QWORD *)v4 + 8);
        if (v11)
          v11();
      }
    }
    else
    {
      v5 = (unint64_t *)(v2 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return a1;
}

unsigned int **sub_239A0F64C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = v2 + 2;
  v4 = v2[2];
  if ((v4 & 0x80000000) != 0)
  {
    if (v4 == -2)
    {
LABEL_16:
      if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
        return a1;
      goto LABEL_5;
    }
    v8 = __ldxr(v3);
    if (v8 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v9 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v9 = 0;
LABEL_13:
    if (v9)
    {
      if (v4 != -1)
        return a1;
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
LABEL_5:
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_239A0F700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t Ptr;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  std::string::size_type v20;
  uint64_t NewARKitUsdzPackage;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  void *v46;
  char *v47;
  char *v48;
  void (**v49)(char *);
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t result;
  unsigned int v56;
  char v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  char v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  std::string v70;
  std::__fs::filesystem::path v71;
  unsigned int *v72;
  unsigned int *v73;
  void *__p;
  char *v75;
  uint64_t v76;
  _QWORD v77[4];
  _BYTE v78[32];
  pxrInternal__aapl__pxrReserved__::UsdStage *v79;
  unsigned int *v80;
  std::__fs::filesystem::path v81;
  std::__fs::filesystem::path __dst;
  std::string v83;
  std::__fs::filesystem::path __replacement;
  char *v85;
  char v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&__replacement.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
  __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&__replacement.__pn_.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  sub_239587BCC((uint64_t)&__replacement, (char *)__replacement.__pn_.__r_.__value_.__l.__size_);
  memset(&v83, 0, sizeof(v83));
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a1;
  else
    v5 = *(std::string **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  sub_23948900C(&v83, v5, (std::string *)((char *)v5 + v4));
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8(&__dst, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    __dst.__pn_ = v83;
  memset(&__replacement, 0, sizeof(__replacement));
  sub_23948900C(&__replacement.__pn_, (std::string *)".usda", (std::string *)"");
  std::__fs::filesystem::path::replace_extension(&__dst, &__replacement);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    v81.__pn_ = v83;
    goto LABEL_14;
  }
  sub_23941A7F8(&v81, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
LABEL_14:
  memset(&__replacement, 0, sizeof(__replacement));
  sub_23948900C(&__replacement.__pn_, (std::string *)".usdc", (std::string *)"");
  std::__fs::filesystem::path::replace_extension(&v81, &__replacement);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  v6 = v80;
  if (!v80)
  {
    NewARKitUsdzPackage = 0;
    goto LABEL_108;
  }
  v79 = (pxrInternal__aapl__pxrReserved__::UsdStage *)v80;
  v7 = v80 + 2;
  v8 = v80[2];
  if ((v8 & 0x80000000) != 0)
  {
    if (v8 == -1)
    {
LABEL_150:
      pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      goto LABEL_19;
    }
    v56 = __ldxr(v7);
    if (v56 == v8)
    {
      if (!__stxr(v8 - 1, v7))
      {
        v57 = 1;
        goto LABEL_149;
      }
    }
    else
    {
      __clrex();
    }
    v57 = 0;
LABEL_149:
    if ((v57 & 1) != 0)
      goto LABEL_19;
    goto LABEL_150;
  }
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
LABEL_19:
  v10 = sub_239A07E64(&v79, a2);
  v11 = *v7;
  if ((*v7 & 0x80000000) != 0)
  {
    if (v11 == -2)
      goto LABEL_156;
    v58 = __ldxr(v7);
    if (v58 == v11)
    {
      if (!__stlxr(v11 + 1, v7))
      {
        v59 = 1;
        goto LABEL_153;
      }
    }
    else
    {
      __clrex();
    }
    v59 = 0;
LABEL_153:
    if (v59)
    {
      if (v11 != -1)
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_156:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
      goto LABEL_23;
LABEL_22:
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_23;
  }
  do
  {
    v12 = __ldxr(v7);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v7));
  if (!v13)
    goto LABEL_22;
LABEL_23:
  if (!v80)
  {
    __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/refPtr.h";
    __replacement.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"operator->";
    __replacement.__pn_.__r_.__value_.__r.__words[2] = 953;
    v85 = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() const "
          "[U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v86 = 0;
    result = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    goto LABEL_198;
  }
  std::operator+<char>();
  MEMORY[0x23B83D710](v77, &__replacement);
  MEMORY[0x23B83D734](&__p, "Xform");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim();
  if ((__p & 7) != 0)
  {
    v14 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v17 = (unsigned int *)(Ptr + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if ((v18 & 0x7FFFFFFF) == 1)
      sub_239A10688(Ptr);
  }
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  MEMORY[0x23B83D734](v77, "name");
  __replacement.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&off_250AF1A88;
  v19 = operator new();
  v20 = v19;
  if (*(char *)(a2 + 63) < 0)
  {
    sub_23941A7F8((_BYTE *)v19, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(a2 + 56);
  }
  v22 = (unsigned int *)(v20 + 24);
  atomic_store(0, (unsigned int *)(v20 + 24));
  __replacement.__pn_.__r_.__value_.__r.__words[0] = v20;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v78, (const pxrInternal__aapl__pxrReserved__::TfToken *)v77, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__replacement);
  if (__replacement.__pn_.__r_.__value_.__l.__size_)
    v24 = (__replacement.__pn_.__r_.__value_.__s.__data_[8] & 3) == 3;
  else
    v24 = 1;
  if (!v24)
    (*(void (**)(uint64_t *))((__replacement.__pn_.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))((uint64_t *)&__replacement);
  if ((v77[0] & 7) != 0)
  {
    v25 = (unsigned int *)(v77[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v77[3] = 0;
  v77[0] = MEMORY[0x24BEE9CF8] + 16;
  MEMORY[0x23B83D734](&__replacement, "component");
  pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetKind((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v77, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__replacement);
  if ((__replacement.__pn_.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v27 = (unsigned int *)(__replacement.__pn_.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if (!v80)
  {
    __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/refPtr.h";
    __replacement.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"operator->";
    __replacement.__pn_.__r_.__value_.__r.__words[2] = 953;
    v85 = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() const "
          "[U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v86 = 0;
    result = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    goto LABEL_198;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim();
  __p = 0;
  v75 = 0;
  v76 = 0;
  if (!v10)
  {
    NewARKitUsdzPackage = 0;
    goto LABEL_103;
  }
  v29 = v80;
  v73 = v80;
  if (v80)
  {
    v30 = v80 + 2;
    v31 = v80[2];
    if ((v31 & 0x80000000) == 0)
    {
      do
        v32 = __ldxr(v30);
      while (__stxr(v32 + 1, v30));
      goto LABEL_56;
    }
    if (v31 == -1)
    {
LABEL_176:
      pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      goto LABEL_56;
    }
    v62 = __ldxr(v30);
    if (v62 == v31)
    {
      if (!__stxr(v31 - 1, v30))
      {
        v63 = 1;
        goto LABEL_175;
      }
    }
    else
    {
      __clrex();
    }
    v63 = 0;
LABEL_175:
    if ((v63 & 1) != 0)
      goto LABEL_56;
    goto LABEL_176;
  }
LABEL_56:
  sub_239A089E8((uint64_t *)&v73, (unsigned __int16 **)(a2 + 64), a2 + 40, (uint64_t)&__p);
  if (!v29)
    goto LABEL_61;
  v33 = v29 + 2;
  v34 = v29[2];
  if ((v34 & 0x80000000) != 0)
  {
    if (v34 == -2)
      goto LABEL_186;
    v66 = __ldxr(v33);
    if (v66 == v34)
    {
      if (!__stlxr(v34 + 1, v33))
      {
        v67 = 1;
        goto LABEL_183;
      }
    }
    else
    {
      __clrex();
    }
    v67 = 0;
LABEL_183:
    if (v67)
    {
      if (v34 != -1)
        goto LABEL_61;
      goto LABEL_60;
    }
LABEL_186:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
      goto LABEL_61;
LABEL_60:
    (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    goto LABEL_61;
  }
  do
  {
    v35 = __ldxr(v33);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v33));
  if (!v36)
    goto LABEL_60;
LABEL_61:
  v37 = v80;
  v72 = v80;
  if (!v80)
    goto LABEL_64;
  v38 = v80 + 2;
  v39 = v80[2];
  if ((v39 & 0x80000000) != 0)
  {
    if (v39 == -1)
    {
LABEL_180:
      pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      goto LABEL_64;
    }
    v64 = __ldxr(v38);
    if (v64 == v39)
    {
      if (!__stxr(v39 - 1, v38))
      {
        v65 = 1;
        goto LABEL_179;
      }
    }
    else
    {
      __clrex();
    }
    v65 = 0;
LABEL_179:
    if ((v65 & 1) != 0)
      goto LABEL_64;
    goto LABEL_180;
  }
  do
    v40 = __ldxr(v38);
  while (__stxr(v40 + 1, v38));
LABEL_64:
  sub_239A0D130(&v72, (uint64_t *)(a2 + 88), a2 + 40, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial **)&__p);
  if (!v37)
    goto LABEL_69;
  v41 = v37 + 2;
  v42 = v37[2];
  if ((v42 & 0x80000000) != 0)
  {
    if (v42 == -2)
      goto LABEL_193;
    v68 = __ldxr(v41);
    if (v68 == v42)
    {
      if (!__stlxr(v42 + 1, v41))
      {
        v69 = 1;
        goto LABEL_190;
      }
    }
    else
    {
      __clrex();
    }
    v69 = 0;
LABEL_190:
    if (v69)
    {
      if (v42 != -1)
        goto LABEL_69;
      goto LABEL_68;
    }
LABEL_193:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
      goto LABEL_69;
LABEL_68:
    (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
    goto LABEL_69;
  }
  do
  {
    v43 = __ldxr(v41);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v41));
  if (!v44)
    goto LABEL_68;
LABEL_69:
  if (v80)
  {
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_23941A7F8(&__replacement, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
    else
      __replacement = __dst;
    *(_OWORD *)&v71.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    v71.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__pn_.__r_.__value_.__l.__size_;
    NewARKitUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdStage::Export();
    sub_23995D378((uint64_t)&v71, v71.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
      if (!(_DWORD)NewARKitUsdzPackage)
        goto LABEL_96;
    }
    else if (!(_DWORD)NewARKitUsdzPackage)
    {
      goto LABEL_96;
    }
    if (v80)
    {
      if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_23941A7F8(&__replacement, v81.__pn_.__r_.__value_.__l.__data_, v81.__pn_.__r_.__value_.__l.__size_);
      else
        __replacement = v81;
      *(_OWORD *)&v71.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
      v71.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__pn_.__r_.__value_.__l.__size_;
      NewARKitUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdStage::Export();
      sub_23995D378((uint64_t)&v71, v71.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
        if (!(_DWORD)NewARKitUsdzPackage)
          goto LABEL_96;
      }
      else if (!(_DWORD)NewARKitUsdzPackage)
      {
LABEL_96:
        v45 = (char *)__p;
        if (!__p)
          goto LABEL_103;
LABEL_97:
        v46 = v45;
        if (v75 != v45)
        {
          v47 = v75 - 24;
          v48 = v75 - 24;
          do
          {
            v49 = *(void (***)(char *))v48;
            v48 -= 24;
            (*v49)(v47);
            v24 = v47 == v45;
            v47 = v48;
          }
          while (!v24);
          v46 = __p;
        }
        v75 = v45;
        operator delete(v46);
LABEL_103:
        MEMORY[0x23B83D4D0](v77);
        sub_239A1056C((uint64_t)v78);
        v50 = v80;
        if (!v80)
          goto LABEL_108;
        v51 = v80 + 2;
        v52 = v80[2];
        if ((v52 & 0x80000000) == 0)
        {
          do
          {
            v53 = __ldxr(v51);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v51));
          if (!v54)
            goto LABEL_107;
LABEL_108:
          if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v81.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_110:
              if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return NewARKitUsdzPackage;
LABEL_114:
              operator delete(v83.__r_.__value_.__l.__data_);
              return NewARKitUsdzPackage;
            }
          }
          else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_110;
          }
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return NewARKitUsdzPackage;
          goto LABEL_114;
        }
        if (v52 == -2)
          goto LABEL_163;
        v60 = __ldxr(v51);
        if (v60 == v52)
        {
          if (!__stlxr(v52 + 1, v51))
          {
            v61 = 1;
            goto LABEL_160;
          }
        }
        else
        {
          __clrex();
        }
        v61 = 0;
LABEL_160:
        if (v61)
        {
          if (v52 != -1)
            goto LABEL_108;
          goto LABEL_107;
        }
LABEL_163:
        if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
          goto LABEL_108;
LABEL_107:
        (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
        goto LABEL_108;
      }
      if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
        sub_23941A7F8(&v71, v81.__pn_.__r_.__value_.__l.__data_, v81.__pn_.__r_.__value_.__l.__size_);
      else
        v71 = v81;
      MEMORY[0x23B83D4DC](&__replacement, &v71);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        sub_23941A7F8(&v70, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
      else
        v70 = v83;
      NewARKitUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage();
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v70.__r_.__value_.__l.__data_);
        if ((v87 & 0x80000000) == 0)
        {
LABEL_94:
          if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_95;
          goto LABEL_117;
        }
      }
      else if ((v87 & 0x80000000) == 0)
      {
        goto LABEL_94;
      }
      operator delete(v85);
      if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_95:
        if ((SHIBYTE(v71.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_96;
        goto LABEL_118;
      }
LABEL_117:
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v71.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_96;
LABEL_118:
      operator delete(v71.__pn_.__r_.__value_.__l.__data_);
      v45 = (char *)__p;
      if (!__p)
        goto LABEL_103;
      goto LABEL_97;
    }
  }
  __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/refPtr.h";
  __replacement.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"operator->";
  __replacement.__pn_.__r_.__value_.__r.__words[2] = 953;
  v85 = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() const [U"
        " = pxrInternal__aapl__pxrReserved__::UsdStage]";
  v86 = 0;
  result = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
LABEL_198:
  __break(1u);
  return result;
}

void sub_239A101CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,__int16 a47,char a48,char a49)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void **sub_239A10468(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 24;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239A104D8(uint64_t a1, char *a2)
{
  uint64_t v4;
  BOOL v5;

  if (a2)
  {
    sub_239A104D8(a1, *(_QWORD *)a2);
    sub_239A104D8(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 8);
    if (v4)
      v5 = (*((_QWORD *)a2 + 8) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(char *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 + 56);
    *((_QWORD *)a2 + 8) = 0;
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_239A1056C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t Ptr;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v6 = (unsigned int *)(Ptr + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if ((v7 & 0x7FFFFFFF) == 1)
      sub_239A10688(Ptr);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 48);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      v12 = MEMORY[0x23B83D4F4]();
      MEMORY[0x23B83E31C](v12, 0x1060C4054FBFFF5);
    }
  }
  return a1;
}

uint64_t *sub_239A10630(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = MEMORY[0x23B83D4F4]();
      MEMORY[0x23B83E31C](v6, 0x1060C4054FBFFF5);
    }
  }
  return a1;
}

void sub_239A10688(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  void *v4;
  void *v5;

  switch(*(_BYTE *)(a1 + 14))
  {
    case 0:
      if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
        pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1);
      if (*(_QWORD *)a1)
      {
        v2 = (unsigned int *)(*(_QWORD *)a1 + 8);
        do
          v3 = __ldaxr(v2);
        while (__stlxr(v3 - 1, v2));
        if ((v3 & 0x7FFFFFFF) == 1)
          sub_239A10688();
      }
      v4 = (void *)a1;
      goto LABEL_10;
    case 1:
      v4 = (void *)MEMORY[0x23B83D5A8](a1);
      goto LABEL_10;
    case 2:
      v4 = (void *)MEMORY[0x23B83D6B0](a1);
LABEL_10:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(v4);
      return;
    case 3:
      v5 = (void *)MEMORY[0x23B83D68C](a1);
      goto LABEL_14;
    case 4:
      v5 = (void *)MEMORY[0x23B83D5F0](a1);
      goto LABEL_14;
    case 5:
      v5 = (void *)MEMORY[0x23B83D5E4](a1);
      goto LABEL_14;
    case 6:
      v5 = (void *)MEMORY[0x23B83D6E0](a1);
      goto LABEL_14;
    case 7:
      v5 = (void *)MEMORY[0x23B83D638](a1);
      goto LABEL_14;
    case 8:
      v5 = (void *)MEMORY[0x23B83D65C](a1);
LABEL_14:
      pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(v5);
      break;
    default:
      return;
  }
}

uint64_t sub_239A107BC(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)a1 = 1;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_DWORD *)(a1 + 16) = *a3;
  v8 = (_QWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v9 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
                        + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 20) = a3[1];
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL())
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  *(_QWORD *)(a1 + 24) = 0;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 && (*(_BYTE *)(v11 + 57) & 8) == 0 && *(_QWORD *)(v11 + 16) == *v8)
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  return a1;
}

void sub_239A108D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *(_QWORD *)(v2 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  sub_239A0C804(v3);
  sub_239A10630(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_239A10918(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 *v3;

  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 <= result)
      {
LABEL_6:
        ++result;
      }
      else
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result)
            goto LABEL_6;
        }
        return (unint64_t)(v3 + 1);
      }
    }
  }
  return result;
}

_QWORD *sub_239A10968(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  v2 = a1[16];
  if (v2)
  {
    v3 = a1[17];
    v4 = (void *)a1[16];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = (void *)a1[16];
    }
    a1[17] = v2;
    operator delete(v4);
  }
  v9 = a1[13];
  if (v9)
  {
    v10 = a1[14];
    v11 = (void *)a1[13];
    if (v10 != v9)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 8);
        v10 -= 8;
        v12 = v13;
        if ((v13 & 7) != 0)
        {
          v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
      }
      while (v10 != v9);
      v11 = (void *)a1[13];
    }
    a1[14] = v9;
    operator delete(v11);
  }
  v16 = a1[10];
  if (v16)
  {
    v17 = a1[11];
    v18 = (void *)a1[10];
    if (v17 != v16)
    {
      do
      {
        v20 = *(_QWORD *)(v17 - 8);
        v17 -= 8;
        v19 = v20;
        if ((v20 & 7) != 0)
        {
          v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
      }
      while (v17 != v16);
      v18 = (void *)a1[10];
    }
    a1[11] = v16;
    operator delete(v18);
  }
  v23 = a1[7];
  if (v23)
  {
    v24 = a1[8];
    v25 = (void *)a1[7];
    if (v24 != v23)
    {
      do
      {
        v27 = *(_QWORD *)(v24 - 8);
        v24 -= 8;
        v26 = v27;
        if ((v27 & 7) != 0)
        {
          v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
      }
      while (v24 != v23);
      v25 = (void *)a1[7];
    }
    a1[8] = v23;
    operator delete(v25);
  }
  v30 = a1[4];
  if (v30)
  {
    v31 = a1[5];
    v32 = (void *)a1[4];
    if (v31 != v30)
    {
      do
      {
        v34 = *(_QWORD *)(v31 - 8);
        v31 -= 8;
        v33 = v34;
        if ((v34 & 7) != 0)
        {
          v35 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
      }
      while (v31 != v30);
      v32 = (void *)a1[4];
    }
    a1[5] = v30;
    operator delete(v32);
  }
  v37 = a1[1];
  if (v37)
  {
    v38 = a1[2];
    v39 = (void *)a1[1];
    if (v38 != v37)
    {
      do
      {
        v41 = *(_QWORD *)(v38 - 8);
        v38 -= 8;
        v40 = v41;
        if ((v41 & 7) != 0)
        {
          v42 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
        }
      }
      while (v38 != v37);
      v39 = (void *)a1[1];
    }
    a1[2] = v37;
    operator delete(v39);
  }
  return a1;
}

uint64_t *sub_239A10B80(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_239A10BA4(uint64_t *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *result;
  if (*result)
  {
    v2 = (unsigned int *)(v1 + 24);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
      JUMPOUT(0x23B83E31CLL);
    }
  }
  return result;
}

_QWORD *sub_239A10C10(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_239A10C20()
{
  return 1;
}

unint64_t sub_239A10C28(uint64_t *a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v4 = 0;
  v5 = 0;
  if (*(char *)(v1 + 23) >= 0)
    v2 = (const char *)v1;
  else
    v2 = *(const char **)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_239A10C88(const void ***a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  else
    v5 = (unsigned __int8 *)(*a1)[1];
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v8 = *a2;
  else
    v8 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v8, (size_t)(*a1)[1]) == 0;
  if (!*((_BYTE *)*a1 + 23))
    return 1;
  v9 = v4 - 1;
  do
  {
    v11 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v10 = v11;
    v13 = *(unsigned __int8 *)v8;
    v8 = (unsigned __int8 **)((char *)v8 + 1);
    v12 = v13;
    v15 = v9-- != 0;
    result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

uint64_t sub_239A10D38(const void ***a1, unsigned __int8 *a2)
{
  const void **v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  uint64_t result;

  v2 = *a1;
  v3 = *((unsigned __int8 *)*a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (const void *)*((unsigned __int8 *)*a1 + 23);
  else
    v4 = (*a1)[1];
  v5 = (const void *)a2[23];
  v6 = (char)v5;
  if ((char)v5 < 0)
    v5 = (const void *)*((_QWORD *)a2 + 1);
  if (v4 != v5)
    return 0;
  if (v6 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v3 & 0x80) != 0)
    return memcmp(*v2, a2, (size_t)(*a1)[1]) == 0;
  if (!*((_BYTE *)*a1 + 23))
    return 1;
  v7 = v3 - 1;
  do
  {
    v9 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v8 = v9;
    v11 = *a2++;
    v10 = v11;
    v13 = v7-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

uint64_t sub_239A10DE8()
{
  return 0;
}

_QWORD *sub_239A10DF4(uint64_t **a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((char *)*a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t)*a1;
  else
    v4 = **a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)*a1 + 23);
  else
    v5 = (*a1)[1];
  return sub_239458500(a2, v4, v5);
}

void *sub_239A10E1C()
{
  return &unk_250AF1B40;
}

uint64_t sub_239A10E28()
{
  return 0;
}

uint64_t sub_239A10E30()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_239A10E3C()
{
  return 0;
}

uint64_t sub_239A10E44()
{
  return 0;
}

BOOL sub_239A10E4C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000239F0B08ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A10E84(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_250AF1B40, a2);
}

void *sub_239A10EA4()
{
  return &unk_250AF1B40;
}

uint64_t sub_239A10EB0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A10EB8@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a1;
  a2[1] = (uint64_t)&off_250AF1A88;
  result = operator new();
  v5 = result;
  if (*((char *)v3 + 23) < 0)
  {
    result = (uint64_t)sub_23941A7F8((_BYTE *)result, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v6 = *v3;
    *(_QWORD *)(result + 16) = *((_QWORD *)v3 + 2);
    *(_OWORD *)result = v6;
  }
  v7 = (unsigned int *)(v5 + 24);
  atomic_store(0, (unsigned int *)(v5 + 24));
  *a2 = v5;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

void sub_239A10F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t sub_239A10F70(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = v3;
    v5 = (__int128 *)*a1;
    if (*(char *)(*a1 + 23) < 0)
    {
      sub_23941A7F8((_BYTE *)v3, *(void **)v5, *((_QWORD *)v5 + 1));
      v5 = (__int128 *)*a1;
      v9 = (unsigned int *)(v4 + 24);
      atomic_store(0, (unsigned int *)(v4 + 24));
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      *a1 = v4;
      if (!v5)
        return *a1;
    }
    else
    {
      v6 = *v5;
      *(_QWORD *)(v3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)v3 = v6;
      v7 = (unsigned int *)(v3 + 24);
      atomic_store(0, (unsigned int *)(v3 + 24));
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      *a1 = v3;
    }
    v11 = (unsigned int *)v5 + 6;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      __dmb(9u);
      if (*((char *)v5 + 23) < 0)
        operator delete(*(void **)v5);
      MEMORY[0x23B83E31C](v5, 0x1012C405C87E9CELL);
    }
  }
  return *a1;
}

void sub_239A11078(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_239A1109C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(void);
  char **v15[2];
  uint64_t v16;
  uint64_t v17;

  v16 = a3;
  v17 = a2;
  v4 = a1[4];
  if (v4)
  {
    v6 = (unint64_t **)(a1 + 3);
    v5 = (unint64_t *)a1[3];
    if (v5)
      goto LABEL_19;
    v7 = atomic_load((unint64_t *)(v4 - 16));
    if (v7 == 1)
      goto LABEL_11;
    v8 = a1[4];
    if (!v8)
      goto LABEL_11;
    v5 = *v6;
    if (*v6)
    {
LABEL_19:
      do
      {
        v12 = __ldxr(v5);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v5));
      if (!v13)
      {
        __dmb(9u);
        v14 = (void (*)(void))(*v6)[1];
        if (v14)
          v14();
      }
    }
    else
    {
      v9 = (unint64_t *)(v8 - 16);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        __dmb(9u);
        operator delete((void *)(a1[4] - 16));
      }
    }
    *v6 = 0;
    a1[4] = 0;
LABEL_11:
    *a1 = 0;
    a3 = v16;
    a2 = v17;
  }
  v15[0] = (char **)&v17;
  v15[1] = (char **)&v16;
  sub_239A11178(a1, (a3 - a2) >> 2, v15);
}

void sub_239A11178(unint64_t *a1, unint64_t a2, char ***a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  _QWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t **v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _DWORD *v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  char *v54;
  _DWORD *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  int v66;
  int v67;
  char *v68;
  char *v69;
  _DWORD *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void (*v88)(void);
  unint64_t v89;
  unint64_t v90;
  void (*v91)(void);

  v3 = *a1;
  if (*a1 != a2)
  {
    if (a2)
    {
      v7 = (_QWORD *)a1[4];
      if (v7)
      {
        if (!a1[3])
        {
          v8 = atomic_load(v7 - 2);
          if (v8 == 1)
          {
            if (v3 >= a2)
            {
LABEL_65:
              v29 = v7;
              goto LABEL_66;
            }
            v9 = (int *)a1[4];
            if (*((_QWORD *)v9 - 1) < a2)
            {
              v10 = sub_239A1162C((uint64_t)a1, a2);
              v7 = v10;
              if (v3)
              {
                v11 = (v3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
                if (v11 < 7)
                {
                  v12 = v10;
                  v13 = v9;
                }
                else
                {
                  v12 = v10;
                  v13 = v9;
                  if ((unint64_t)((char *)v10 - (char *)v9) >= 0x20)
                  {
                    v14 = 0;
                    v15 = v11 + 1;
                    v16 = v15 & 0x7FFFFFFFFFFFFFF8;
                    v12 = (_DWORD *)((char *)v10 + v16 * 4);
                    v13 = &v9[v16];
                    v17 = v15 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v18 = &v10[v14 / 2];
                      v19 = *(_OWORD *)&v9[v14 + 4];
                      *v18 = *(_OWORD *)&v9[v14];
                      v18[1] = v19;
                      v14 += 8;
                      v17 -= 8;
                    }
                    while (v17);
                    if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8))
                      goto LABEL_58;
                  }
                }
                do
                {
                  v67 = *v13++;
                  *v12++ = v67;
                }
                while (v13 != &v9[v3]);
              }
            }
LABEL_58:
            v68 = **a3;
            v69 = *a3[1];
            if (v68 != v69)
            {
              v70 = (_DWORD *)v7 + v3;
              v71 = v69 - v68 - 4;
              if (v71 < 0x1C)
                goto LABEL_87;
              v72 = (char *)v7 + 4 * v3;
              if ((unint64_t)(v72 - v68) < 0x20)
                goto LABEL_87;
              v73 = (v71 >> 2) + 1;
              v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
              v70 = (_DWORD *)((char *)v70 + v74);
              v75 = &v68[v74];
              v76 = (__int128 *)(v68 + 16);
              v77 = v72 + 16;
              v78 = v73 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 8;
              }
              while (v78);
              v68 = v75;
              if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_87:
                do
                {
                  v80 = *(_DWORD *)v68;
                  v68 += 4;
                  *v70++ = v80;
                }
                while (v68 != v69);
              }
            }
            goto LABEL_65;
          }
          v7 = (_QWORD *)a1[4];
        }
        if (v3 >= a2)
          v41 = a2;
        else
          v41 = *a1;
        v42 = sub_239A1162C((uint64_t)a1, a2);
        v29 = v42;
        if (v41)
        {
          v43 = (v41 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v44 = v42;
          v45 = (int *)v7;
          if (v43 < 7)
            goto LABEL_88;
          v44 = v42;
          v45 = (int *)v7;
          if ((unint64_t)((char *)v42 - (char *)v7) < 0x20)
            goto LABEL_88;
          v46 = v43 + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v44 = (_DWORD *)((char *)v42 + v47);
          v45 = (int *)((char *)v7 + v47);
          v48 = (__int128 *)(v7 + 2);
          v49 = v42 + 2;
          v50 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v51 = *v48;
            *(v49 - 1) = *(v48 - 1);
            *v49 = v51;
            v48 += 2;
            v49 += 2;
            v50 -= 8;
          }
          while (v50);
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_88:
            do
            {
              v52 = *v45++;
              *v44++ = v52;
            }
            while (v45 != (int *)((char *)v7 + 4 * v41));
          }
        }
        if (v3 < a2)
        {
          v53 = **a3;
          v54 = *a3[1];
          if (v53 != v54)
          {
            v55 = (_DWORD *)v42 + v3;
            v56 = v54 - v53 - 4;
            if (v56 < 0x1C)
              goto LABEL_89;
            v57 = (char *)v42 + 4 * v3;
            if ((unint64_t)(v57 - v53) < 0x20)
              goto LABEL_89;
            v58 = (v56 >> 2) + 1;
            v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
            v55 = (_DWORD *)((char *)v55 + v59);
            v60 = &v53[v59];
            v61 = (__int128 *)(v53 + 16);
            v62 = v57 + 16;
            v63 = v58 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v64 = *v61;
              *(v62 - 1) = *(v61 - 1);
              *v62 = v64;
              v61 += 2;
              v62 += 2;
              v63 -= 8;
            }
            while (v63);
            v53 = v60;
            if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_89:
              do
              {
                v65 = *(_DWORD *)v53;
                v53 += 4;
                *v55++ = v65;
              }
              while (v53 != v54);
            }
          }
        }
        goto LABEL_66;
      }
      if (4 * a2 / a2 != 4)
        return;
      v28 = sub_239A1162C((uint64_t)a1, a2);
      v29 = v28;
      v30 = **a3;
      v31 = *a3[1];
      if (v30 == v31)
        goto LABEL_66;
      v32 = v31 - v30 - 4;
      if (v32 < 0x1C)
      {
        v33 = v28;
      }
      else
      {
        v33 = v28;
        if ((unint64_t)((char *)v28 - v30) >= 0x20)
        {
          v34 = 0;
          v35 = (v32 >> 2) + 1;
          v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          v33 = (_DWORD *)((char *)v28 + v36);
          v37 = &v30[v36];
          v38 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v39 = &v28[v34];
            v40 = *(_OWORD *)&v30[v34 * 8 + 16];
            *v39 = *(_OWORD *)&v30[v34 * 8];
            v39[1] = v40;
            v34 += 4;
            v38 -= 8;
          }
          while (v38);
          v30 = v37;
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_66:
            v81 = (_QWORD *)a1[4];
            if (v29 != v81)
            {
              if (v81)
              {
                v82 = (unint64_t *)a1[3];
                if (v82)
                {
                  do
                  {
                    v89 = __ldxr(v82);
                    v90 = v89 - 1;
                  }
                  while (__stlxr(v90, v82));
                  if (!v90)
                  {
                    __dmb(9u);
                    v91 = *(void (**)(void))(a1[3] + 8);
                    if (v91)
                      v91();
                  }
                }
                else
                {
                  v83 = v81 - 2;
                  do
                  {
                    v84 = __ldxr(v83);
                    v85 = v84 - 1;
                  }
                  while (__stlxr(v85, v83));
                  if (!v85)
                  {
                    __dmb(9u);
                    operator delete((void *)(a1[4] - 16));
                  }
                }
                a1[3] = 0;
              }
              a1[4] = (unint64_t)v29;
            }
            goto LABEL_75;
          }
        }
      }
      do
      {
        v66 = *(_DWORD *)v30;
        v30 += 4;
        *v33++ = v66;
      }
      while (v30 != v31);
      goto LABEL_66;
    }
    v20 = a1[4];
    if (!v20)
      return;
    v22 = (unint64_t **)(a1 + 3);
    v21 = (unint64_t *)a1[3];
    if (v21)
      goto LABEL_90;
    v23 = atomic_load((unint64_t *)(v20 - 16));
    if (v23 == 1)
      goto LABEL_75;
    v24 = a1[4];
    if (!v24)
      goto LABEL_75;
    v21 = *v22;
    if (*v22)
    {
LABEL_90:
      do
      {
        v86 = __ldxr(v21);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v21));
      if (!v87)
      {
        __dmb(9u);
        v88 = (void (*)(void))(*v22)[1];
        if (v88)
          v88();
      }
    }
    else
    {
      v25 = (unint64_t *)(v24 - 16);
      do
      {
        v26 = __ldxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        __dmb(9u);
        operator delete((void *)(a1[4] - 16));
      }
    }
    *v22 = 0;
    a1[4] = 0;
LABEL_75:
    *a1 = a2;
  }
}

_QWORD *sub_239A1162C(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  char v5;
  size_t v6;
  _QWORD *v7;

  v3 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v3 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin())
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v5 = 0;
      v4 = 2;
      goto LABEL_7;
    }
    v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_7:
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v6 = -1;
  else
    v6 = 4 * a2 + 16;
  v7 = operator new(v6);
  *v7 = 1;
  v7[1] = a2;
  if ((v5 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      --v4;
    }
    while (v4);
  }
  return v7 + 2;
}

void sub_239A11704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239A1171C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A1171C(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  return a1;
}

uint64_t *sub_239A1176C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_239A11790(uint64_t *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = *result;
  if (*result)
  {
    v2 = (unsigned int *)(v1 + 40);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      v5 = *(_QWORD *)(v1 + 32);
      if (v5)
      {
        v7 = v1 + 24;
        v6 = *(unint64_t **)(v1 + 24);
        if (v6)
        {
          do
          {
            v11 = __ldxr(v6);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v6));
          if (!v12)
          {
            __dmb(9u);
            v13 = *(void (**)(void))(*(_QWORD *)v7 + 8);
            if (v13)
              v13();
          }
        }
        else
        {
          v8 = (unint64_t *)(v5 - 16);
          do
          {
            v9 = __ldxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            __dmb(9u);
            operator delete((void *)(*(_QWORD *)(v1 + 32) - 16));
          }
        }
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v1 + 32) = 0;
      }
      JUMPOUT(0x23B83E31CLL);
    }
  }
  return result;
}

_QWORD *sub_239A1185C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_239A1186C()
{
  return 1;
}

unint64_t sub_239A11874(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

BOOL sub_239A118CC(uint64_t **a1, uint64_t **a2)
{
  return sub_239A11A64(*a1, *a2);
}

BOOL sub_239A118D8(uint64_t **a1, uint64_t *a2)
{
  return sub_239A11A64(*a1, a2);
}

uint64_t sub_239A118E4()
{
  return 0;
}

uint64_t sub_239A118F0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_239A11938()
{
  return &unk_250AF1C18;
}

uint64_t sub_239A11944()
{
  return 1;
}

uint64_t sub_239A1194C()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_239A11958(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A11960(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_239A1196C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A1199C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_250AF1C18, a2);
}

void *sub_239A119BC()
{
  return &unk_250AF1C18;
}

uint64_t sub_239A119C8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A119D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = *a1;
  a2[1] = (uint64_t)&off_250AF1B50;
  result = operator new();
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a2 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

BOOL sub_239A11A64(uint64_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  int v10;
  int v11;
  const void *v12;
  int v13;
  uint64_t v14;
  const void *v15;
  int v16;
  int v17;
  const void *v18;
  _BOOL8 result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (const void *)a1[4];
  v5 = (const void *)a2[4];
  v6 = *a1;
  v7 = *a2;
  if (v4 != v5 || v6 != v7)
    goto LABEL_31;
  v9 = a1 + 1;
  v10 = *((_DWORD *)a1 + 2);
  if (v10)
  {
    if (*((_DWORD *)a1 + 3))
    {
      if (*((_DWORD *)a1 + 4))
        v11 = 4;
      else
        v11 = 3;
      v12 = a2 + 1;
      if (!*((_DWORD *)a2 + 2))
      {
LABEL_21:
        if (v11 != 1)
          goto LABEL_31;
        goto LABEL_24;
      }
    }
    else
    {
      v11 = 2;
      v12 = a2 + 1;
      if (!*((_DWORD *)a2 + 2))
        goto LABEL_21;
    }
  }
  else
  {
    v11 = 1;
    v12 = a2 + 1;
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_21;
  }
  if (*((_DWORD *)a2 + 3))
  {
    if (*((_DWORD *)a2 + 4))
      v13 = 4;
    else
      v13 = 3;
    if (v11 != v13)
      goto LABEL_31;
  }
  else if (v11 != 2)
  {
    goto LABEL_31;
  }
LABEL_24:
  if (v10)
  {
    if (*((_DWORD *)a1 + 3))
    {
      v14 = 3;
      if (*((_DWORD *)a1 + 4))
        v14 = 4;
      if (!memcmp(v9, v12, 4 * v14 - 4))
        goto LABEL_62;
LABEL_31:
      if (v6 != v7)
        return 0;
LABEL_32:
      v15 = a1 + 1;
      v16 = *((_DWORD *)a1 + 2);
      if (v16)
      {
        if (*((_DWORD *)a1 + 3))
        {
          if (*((_DWORD *)a1 + 4))
            v17 = 4;
          else
            v17 = 3;
          v18 = a2 + 1;
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_48:
            if (v17 != 1)
              return 0;
LABEL_49:
            if (v16)
            {
              if (*((_DWORD *)a1 + 3))
              {
                v21 = 3;
                if (*((_DWORD *)a1 + 4))
                  v21 = 4;
                if (!memcmp(v15, v18, 4 * v21 - 4))
                  return memcmp(v4, v5, 4 * v6) == 0;
                return 0;
              }
              if (memcmp(v15, v18, 4uLL))
                return 0;
            }
            else if (memcmp(v15, v18, 0))
            {
              return 0;
            }
            return memcmp(v4, v5, 4 * v6) == 0;
          }
        }
        else
        {
          v17 = 2;
          v18 = a2 + 1;
          if (!*((_DWORD *)a2 + 2))
            goto LABEL_48;
        }
      }
      else
      {
        v17 = 1;
        v18 = a2 + 1;
        if (!*((_DWORD *)a2 + 2))
          goto LABEL_48;
      }
      if (*((_DWORD *)a2 + 3))
      {
        if (*((_DWORD *)a2 + 4))
          v20 = 4;
        else
          v20 = 3;
        if (v17 != v20)
          return 0;
      }
      else if (v17 != 2)
      {
        return 0;
      }
      goto LABEL_49;
    }
    if (memcmp(v9, v12, 4uLL))
      goto LABEL_31;
  }
  else if (memcmp(v9, v12, 0))
  {
    goto LABEL_31;
  }
LABEL_62:
  v22 = a1[3];
  v23 = a2[3];
  result = v22 == v23;
  if (v22 != v23)
    goto LABEL_32;
  return result;
}

uint64_t sub_239A11D04(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(void);

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 == 1)
    return *a1;
  v3 = operator new();
  v4 = (_OWORD *)*a1;
  v5 = *(_OWORD *)(*a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)*a1;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = *((_QWORD *)v4 + 4);
  *(_QWORD *)(v3 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(v3 + 24))
      v7 = *(unint64_t **)(v3 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v4 = (_OWORD *)*a1;
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *a1 = v3;
    if (!v4)
      return *a1;
  }
  else
  {
    v12 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *a1 = v3;
  }
  v14 = (unsigned int *)v4 + 10;
  do
  {
    v15 = __ldxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (v16)
    return *a1;
  __dmb(9u);
  v17 = *((_QWORD *)v4 + 4);
  if (v17)
  {
    v19 = (char *)v4 + 24;
    v18 = (unint64_t *)*((_QWORD *)v4 + 3);
    if (v18)
    {
      do
      {
        v23 = __ldxr(v18);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v18));
      if (!v24)
      {
        __dmb(9u);
        v25 = *(void (**)(void))(*(_QWORD *)v19 + 8);
        if (v25)
          v25();
      }
    }
    else
    {
      v20 = (unint64_t *)(v17 - 16);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        __dmb(9u);
        operator delete((void *)(*((_QWORD *)v4 + 4) - 16));
      }
    }
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v4 + 4) = 0;
  }
  MEMORY[0x23B83E31C](v4, 0x1030C404A96FE9ALL);
  return *a1;
}

uint64_t sub_239A11E88(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

_DWORD *sub_239A11EA0(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_239A11EB0(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_239A11EBC()
{
  return 1;
}

unint64_t sub_239A11EC4(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_239A11EE4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_239A11EF8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_239A11F10()
{
  return 0;
}

uint64_t sub_239A11F1C()
{
  return std::ostream::operator<<();
}

uint64_t sub_239A11F2C()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_239A11F38()
{
  return 0;
}

uint64_t sub_239A11F40()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_239A11F4C()
{
  return 0;
}

uint64_t sub_239A11F54()
{
  return 0;
}

BOOL sub_239A11F5C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A11F90(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2);
}

uint64_t sub_239A11FB0()
{
  return MEMORY[0x24BEDB798];
}

_DWORD *sub_239A11FC0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_250AF1C33;
  *(_DWORD *)a2 = *result;
  return result;
}

uint64_t *sub_239A11FDC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t **sub_239A12000(uint64_t **result)
{
  uint64_t *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *result;
  if (*result)
  {
    v2 = (unsigned int *)(v1 + 1);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      v5 = *v1;
      *v1 = 0;
      if (v5)
      {
        sub_239A104D8(v5, *(char **)(v5 + 8));
        MEMORY[0x23B83E31C](v5, 0x1020C4062D53EE8);
      }
      JUMPOUT(0x23B83E31CLL);
    }
  }
  return result;
}

_QWORD *sub_239A1208C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_239A1209C()
{
  return 1;
}

unint64_t sub_239A120A4(pxrInternal__aapl__pxrReserved__::VtDictionary **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * sub_239A12234(*a1));
}

uint64_t sub_239A120D4()
{
  return pxrInternal__aapl__pxrReserved__::operator==();
}

uint64_t sub_239A120E0()
{
  return pxrInternal__aapl__pxrReserved__::operator==();
}

uint64_t sub_239A120EC()
{
  return 0;
}

uint64_t sub_239A120F8()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_239A12108()
{
  return &unk_250AF1DA0;
}

uint64_t sub_239A12114()
{
  return 0;
}

uint64_t sub_239A1211C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_239A12128()
{
  return 0;
}

uint64_t sub_239A12130()
{
  return 0;
}

BOOL sub_239A12138(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12VtDictionaryE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A12168(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_250AF1DA0, a2);
}

void *sub_239A12188()
{
  return &unk_250AF1DA0;
}

uint64_t sub_239A12194(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A1219C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&off_250AF1CE8;
  v4 = operator new();
  result = MEMORY[0x23B83D50C](v4, v3);
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a2 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_239A12210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

unint64_t sub_239A12234(pxrInternal__aapl__pxrReserved__::VtDictionary *a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t Hash;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  char v17;

  if ((pxrInternal__aapl__pxrReserved__::VtDictionary::empty(a1) & 1) != 0)
    return 0;
  v3 = *(_QWORD **)a1;
  v16 = 0;
  v17 = 0;
  v6 = (_QWORD *)*v3;
  v4 = v3 + 1;
  v5 = v6;
  if (v6 == v4)
  {
    Hash = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v5[1];
        v9 = v5;
        if (v8)
        {
          do
          {
            v10 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v9[2];
            v11 = *v10 == (_QWORD)v9;
            v9 = v10;
          }
          while (!v11);
        }
        v14 = (_QWORD *)v5[4];
        v13 = v5 + 4;
        v12 = v14;
        v15 = (const char *)(*((char *)v13 + 23) >= 0 ? v13 : v12);
        pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, v15);
        Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash((pxrInternal__aapl__pxrReserved__::VtValue *)(v13 + 3));
        if (!v17)
          break;
        Hash += (unint64_t)(v16 + Hash + (v16 + Hash) * (v16 + Hash)) >> 1;
        v16 = Hash;
        v5 = v10;
        if (v10 == v4)
          return bswap64(0x9E3779B97F4A7C55 * Hash);
      }
      v17 = 1;
      v16 = Hash;
      v5 = v10;
    }
    while (v10 != v4);
  }
  return bswap64(0x9E3779B97F4A7C55 * Hash);
}

uint64_t sub_239A12358(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = atomic_load((unsigned int *)(*a1 + 8));
  if (v2 != 1)
  {
    v3 = operator new();
    MEMORY[0x23B83D50C](v3, *a1);
    v4 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (uint64_t *)*a1;
    *a1 = v3;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 1);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        __dmb(9u);
        v10 = *v6;
        *v6 = 0;
        if (v10)
        {
          sub_239A104D8(v10, *(char **)(v10 + 8));
          MEMORY[0x23B83E31C](v10, 0x1020C4062D53EE8);
        }
        MEMORY[0x23B83E31C](v6, 0x1020C403A5D3213);
      }
    }
  }
  return *a1;
}

void sub_239A12440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A12464(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_239A1249C(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if ((*result & 7) != 0)
  {
    v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  return result;
}

_QWORD *sub_239A124C0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_239A124D0()
{
  return 1;
}

unint64_t sub_239A124D8(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_239A124FC(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_239A12518(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_239A12538()
{
  return 0;
}

uint64_t sub_239A12544()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_239A12554()
{
  return &unk_250AF1E68;
}

uint64_t sub_239A12560()
{
  return 0;
}

uint64_t sub_239A12568()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_239A12574()
{
  return 0;
}

uint64_t sub_239A1257C()
{
  return 0;
}

BOOL sub_239A12584(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A125B4(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_250AF1E68, a2);
}

void *sub_239A125D4()
{
  return &unk_250AF1E68;
}

unsigned int **sub_239A125E4@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  a2[1] = (unsigned int *)((char *)&off_250AF1DB0 + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

char *sub_239A12620(void **a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void (***v15)(char *);
  void (**v16)(char *);
  BOOL v17;
  char *v19;
  char *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v4 = 0xAAAAAAAAAAAAAAALL;
  else
    v4 = v3;
  if (v4)
  {
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v5 = (char *)operator new(24 * v4);
  }
  else
  {
    v5 = 0;
  }
  v19 = &v5[24 * v2];
  v20 = &v5[24 * v4];
  v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v7 = MEMORY[0x24BEE9D88] + 16;
  *v6 = MEMORY[0x24BEE9D88] + 16;
  v8 = v19 + 24;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    *a1 = v19;
    a1[1] = v8;
    a1[2] = v20;
  }
  else
  {
    v11 = 0;
    do
    {
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase() = v7;
      v11 -= 24;
    }
    while (&v9[v11] != v10);
    v12 = (char *)*a1;
    v9 = (char *)a1[1];
    v13 = &v19[v11];
    v8 = v19 + 24;
    *a1 = v13;
    a1[1] = v19 + 24;
    a1[2] = v20;
    if (v9 != v12)
    {
      v14 = v9 - 24;
      v15 = (void (***)(char *))(v9 - 24);
      do
      {
        v16 = *v15;
        v15 -= 3;
        (*v16)(v14);
        v17 = v14 == v12;
        v14 = (char *)v15;
      }
      while (!v17);
      v9 = v12;
    }
  }
  if (v9)
    operator delete(v9);
  return v8;
}

void sub_239A127C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239A1280C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A127DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  for (; v2; v2 += 24)
    (**(void (***)(uint64_t))(v3 + v2))(v3 + v2);
  sub_239A1280C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A1280C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_239A12860(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;

  v2 = a1[20];
  if (v2)
  {
    v3 = a1[21];
    v4 = (void *)a1[20];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = (void *)a1[20];
    }
    a1[21] = v2;
    operator delete(v4);
  }
  v9 = a1[19];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = a1[18];
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = a1[17];
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v18 = a1[16];
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = a1[15];
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  v24 = a1[14];
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  v27 = a1[13];
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = a1[12];
  if ((v30 & 7) != 0)
  {
    v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  v33 = a1[11];
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  v36 = a1[10];
  if ((v36 & 7) != 0)
  {
    v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  v39 = a1[9];
  if ((v39 & 7) != 0)
  {
    v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  v42 = a1[8];
  if ((v42 & 7) != 0)
  {
    v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  v45 = a1[7];
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  v48 = a1[6];
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  v51 = a1[5];
  if ((v51 & 7) != 0)
  {
    v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  v54 = a1[4];
  if ((v54 & 7) != 0)
  {
    v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  v57 = a1[3];
  if ((v57 & 7) != 0)
  {
    v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  v60 = a1[2];
  if ((v60 & 7) != 0)
  {
    v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v63 = a1[1];
  if ((v63 & 7) != 0)
  {
    v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 - 2, v64));
  }
  if ((*a1 & 7) != 0)
  {
    v66 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  return a1;
}

uint64_t sub_239A12B54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  *a1 = v2;
  a1[1] = (uint64_t)sub_239A12CE8;
  a1[2] = (uint64_t)&unk_250AF1E78;
  return result;
}

void sub_239A12BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C403581E6D5);
  _Unwind_Resume(a1);
}

uint64_t sub_239A12BCC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(&v5, a1);
    if (&v5 != a1)
      sub_239A12EEC((uint64_t)&v5, a1);
    if (v6 && (v6 & 3) != 3)
      (*(void (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(&v5);
  }
  sub_239A13020(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Swap();
  v4 = a1[1];
  if (v4 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_239A12CC4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A12CE8(_QWORD *result)
{
  if (result)
  {
    sub_239A10968(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_239A12D14(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  _QWORD *v5;

  v4 = (uint64_t **)(a2 + 32);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = (_QWORD *)(a1 + 32);
  sub_239A12E18((_QWORD *)(a1 + 8), (uint64_t **)(a2 + 8));
  sub_239A12E18(v5, v4);
  sub_239A12E18((_QWORD *)(a1 + 56), (uint64_t **)(a2 + 56));
  sub_239A12E18((_QWORD *)(a1 + 80), (uint64_t **)(a2 + 80));
  sub_239A12E18((_QWORD *)(a1 + 104), (uint64_t **)(a2 + 104));
  sub_239A12E18((_QWORD *)(a1 + 128), (uint64_t **)(a2 + 128));
  return a1;
}

void sub_239A12DB8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  sub_239A0D0BC(v5);
  sub_239A0D0BC(v4);
  sub_239A0D0BC(v3);
  sub_239A0D0BC(v2);
  sub_239A0D0BC(v1);
  _Unwind_Resume(a1);
}

void sub_239A12E04(_Unwind_Exception *a1)
{
  void **v1;

  sub_239A0D0BC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A12E18(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_2394189F8();
    v6 = operator new((char *)v4 - (char *)*a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5 >> 3];
    do
    {
      v7 = *v3;
      *v6 = *v3;
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          *v6 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v3;
      ++v6;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_239A12ECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_239EC36F0((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A12EEC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  _BYTE v10[8];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = (_QWORD *)result;
    v5 = a2[1];
    if (v5)
      v6 = (~(_BYTE)v5 & 3) == 0;
    else
      v6 = 1;
    if (v6)
    {
      v11 = 0;
    }
    else
    {
      v9 = v5 & 0xFFFFFFFFFFFFFFF8;
      v11 = v9;
      if (v9)
      {
        result = (*(uint64_t (**)(_QWORD *, _BYTE *))(v9 + 40))(a2, v10);
        v3 = v4[1];
      }
    }
    a2[1] = v3;
    if ((~*((_DWORD *)v4 + 2) & 3) != 0)
      result = (*(uint64_t (**)(_QWORD *, _QWORD *))((v3 & 0xFFFFFFFFFFFFFFF8) + 40))(v4, a2);
    else
      *a2 = *v4;
    v4[1] = 0;
    if (v11)
      return (*(uint64_t (**)(_BYTE *))(v11 + 32))(v10);
  }
  else
  {
    v7 = a2[1];
    if (v7)
      v8 = (a2[1] & 3) == 3;
    else
      v8 = 1;
    if (!v8)
      result = (*(uint64_t (**)(_QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    a2[1] = 0;
  }
  return result;
}

void sub_239A13000(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A13020(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;

  v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    v3 = operator new();
    sub_239A12D14(v3, *a1);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (_QWORD *)*a1;
    *a1 = v3;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 19);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        __dmb(9u);
        v10 = sub_239A10968(v6);
        MEMORY[0x23B83E31C](v10, 0x1020C40D6643E80);
      }
    }
  }
  return *a1;
}

void sub_239A130D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t sub_239A130F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if (!v2
    || strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL))&& ((v2 & 4) == 0|| (pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl((pxrInternal__aapl__pxrReserved__::VtValue *)a1, &stru_250AF1E78) & 1) == 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
    sub_239A1324C(a1, (uint64_t)&v5);
    sub_239A10968(&v5);
  }
  v3 = a1[1];
  if ((v3 & 4) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 176))(&v5, a1);
    if (&v5 != a1)
      sub_239A12EEC((uint64_t)&v5, a1);
    if (v6 && (v6 & 3) != 3)
      (*(void (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(&v5);
  }
  sub_239A13020(a1);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Swap();
}

void sub_239A1321C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A1324C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  char v11[8];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  if (v4)
    v5 = (~(_BYTE)v4 & 3) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v12 = 0;
  }
  else
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    v12 = v6;
    if (v6)
      (*(void (**)(uint64_t *, char *))(v6 + 40))(a1, v11);
  }
  a1[1] = (uint64_t)&off_250AF1E88;
  v7 = operator new();
  sub_239A12D14(v7, a2);
  v8 = (unsigned int *)(v7 + 152);
  atomic_store(0, (unsigned int *)(v7 + 152));
  *a1 = v7;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  if (v12)
    (*(void (**)(char *))(v12 + 32))(v11);
  return a1;
}

void sub_239A13348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t *sub_239A133A4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_239A133C8(_QWORD **a1)
{
  _QWORD *result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 19);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      sub_239A10968(result);
      JUMPOUT(0x23B83E31CLL);
    }
  }
  return result;
}

_QWORD *sub_239A13418(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_239A13428()
{
  return 1;
}

unint64_t sub_239A13430(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v1 = *a1 + 8;
  v2 = *a1 + 32;
  v3 = *a1 + 56;
  v4 = *a1 + 80;
  v5 = *a1 + 104;
  v6 = *a1 + 128;
  v7 = *(unsigned __int8 *)*a1;
  v10 = 1;
  v9 = v7;
  sub_239A135FC((uint64_t)&v9, v1, v2, v3, v4, v5, v6);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v9));
}

uint64_t sub_239A1349C()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

uint64_t sub_239A134A8()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

uint64_t sub_239A134B4()
{
  return 0;
}

uint64_t sub_239A134C0()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void *sub_239A134D0()
{
  return &unk_250AF1E78;
}

uint64_t sub_239A134DC()
{
  return 0;
}

uint64_t sub_239A134E4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_239A134F0()
{
  return 0;
}

uint64_t sub_239A134F8()
{
  return 0;
}

BOOL sub_239A13500(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A13530(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_250AF1E78, a2);
}

void *sub_239A13550()
{
  return &unk_250AF1E78;
}

uint64_t sub_239A1355C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A13564@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&off_250AF1E88;
  v4 = operator new();
  result = sub_239A12D14(v4, v3);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a2 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_239A135D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t sub_239A135FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v7 = *(uint64_t **)a2;
  v8 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v8)
  {
    v9 = v8 >> 3;
    v10 = *(unsigned __int8 *)(a1 + 8);
    v11 = *(_QWORD *)a1;
    do
    {
      while (1)
      {
        v12 = *v7++;
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v10)
          break;
        v10 = 1;
        *(_BYTE *)(a1 + 8) = 1;
        v11 = v13;
        *(_QWORD *)a1 = v13;
        if (!--v9)
          goto LABEL_6;
      }
      v11 = v13 + ((v13 + v11 + (v13 + v11) * (v13 + v11)) >> 1);
      *(_QWORD *)a1 = v11;
      --v9;
    }
    while (v9);
  }
LABEL_6:
  v14 = *(uint64_t **)a3;
  v15 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v15)
  {
    v16 = v15 >> 3;
    v17 = *(unsigned __int8 *)(a1 + 8);
    v18 = *(_QWORD *)a1;
    do
    {
      while (1)
      {
        v19 = *v14++;
        v20 = v19 & 0xFFFFFFFFFFFFFFF8;
        if (v17)
          break;
        v17 = 1;
        *(_BYTE *)(a1 + 8) = 1;
        v18 = v20;
        *(_QWORD *)a1 = v20;
        if (!--v16)
          goto LABEL_11;
      }
      v18 = v20 + ((v20 + v18 + (v20 + v18) * (v20 + v18)) >> 1);
      *(_QWORD *)a1 = v18;
      --v16;
    }
    while (v16);
  }
LABEL_11:
  v21 = *(uint64_t **)a4;
  v22 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v22)
  {
    v23 = v22 >> 3;
    v24 = *(unsigned __int8 *)(a1 + 8);
    v25 = *(_QWORD *)a1;
    do
    {
      while (1)
      {
        v26 = *v21++;
        v27 = v26 & 0xFFFFFFFFFFFFFFF8;
        if (v24)
          break;
        v24 = 1;
        *(_BYTE *)(a1 + 8) = 1;
        v25 = v27;
        *(_QWORD *)a1 = v27;
        if (!--v23)
          return sub_239A13714(a1, a5, a6, a7);
      }
      v25 = v27 + ((v27 + v25 + (v27 + v25) * (v27 + v25)) >> 1);
      *(_QWORD *)a1 = v25;
      --v23;
    }
    while (v23);
  }
  return sub_239A13714(a1, a5, a6, a7);
}

uint64_t sub_239A13714(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v4 = *(uint64_t **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5)
  {
    v6 = v5 >> 3;
    v7 = *(unsigned __int8 *)(result + 8);
    v8 = *(_QWORD *)result;
    do
    {
      while (1)
      {
        v9 = *v4++;
        v10 = v9 & 0xFFFFFFFFFFFFFFF8;
        if (v7)
          break;
        v7 = 1;
        *(_BYTE *)(result + 8) = 1;
        v8 = v10;
        *(_QWORD *)result = v10;
        if (!--v6)
          goto LABEL_6;
      }
      v8 = v10 + ((v10 + v8 + (v10 + v8) * (v10 + v8)) >> 1);
      *(_QWORD *)result = v8;
      --v6;
    }
    while (v6);
  }
LABEL_6:
  v11 = *(uint64_t **)a3;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v12)
  {
    v13 = v12 >> 3;
    v14 = *(unsigned __int8 *)(result + 8);
    v15 = *(_QWORD *)result;
    do
    {
      while (1)
      {
        v16 = *v11++;
        v17 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v14)
          break;
        v14 = 1;
        *(_BYTE *)(result + 8) = 1;
        v15 = v17;
        *(_QWORD *)result = v17;
        if (!--v13)
          goto LABEL_11;
      }
      v15 = v17 + ((v17 + v15 + (v17 + v15) * (v17 + v15)) >> 1);
      *(_QWORD *)result = v15;
      --v13;
    }
    while (v13);
  }
LABEL_11:
  v18 = *(uint64_t **)a4;
  v19 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v19)
  {
    v20 = v19 >> 3;
    v21 = *(unsigned __int8 *)(result + 8);
    v22 = *(_QWORD *)result;
    do
    {
      while (1)
      {
        v23 = *v18++;
        v24 = v23 & 0xFFFFFFFFFFFFFFF8;
        if (v21)
          break;
        v21 = 1;
        *(_BYTE *)(result + 8) = 1;
        v22 = v24;
        *(_QWORD *)result = v24;
        if (!--v20)
          return result;
      }
      v22 = v24 + ((v24 + v22 + (v24 + v22) * (v24 + v22)) >> 1);
      *(_QWORD *)result = v22;
      --v20;
    }
    while (v20);
  }
  return result;
}

void sub_239A13820(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(void);
  unint64_t v49;
  unint64_t v50;
  void (*v51)(void);

  v3 = *a1;
  if (*a1 != a2)
  {
    v4 = a2;
    if (a2)
    {
      v7 = (_QWORD *)a1[4];
      if (!v7)
      {
        if (a2 > 0x1555555555555555)
          return;
        v27 = sub_239A13B10((uint64_t)a1, a2);
        v18 = v27;
        v28 = 0;
        v29 = *a3;
        do
        {
          v30 = (char *)v27 + v28;
          v31 = *v29;
          *((_DWORD *)v30 + 2) = *((_DWORD *)v29 + 2);
          *(_QWORD *)v30 = v31;
          v28 += 12;
        }
        while (12 * v4 != v28);
        goto LABEL_38;
      }
      if (!a1[3])
      {
        v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            v9 = a1[4];
            if (*(_QWORD *)(v9 - 8) < a2)
            {
              v10 = sub_239A13B10((uint64_t)a1, a2);
              v7 = v10;
              if (v3)
              {
                v11 = 0;
                do
                {
                  v12 = (char *)v10 + v11;
                  v13 = *(_QWORD *)(v9 + v11);
                  *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                  *(_QWORD *)v12 = v13;
                  v11 += 12;
                }
                while (12 * v3 != v11);
              }
            }
            v14 = *a3;
            v15 = 12 * v3;
            do
            {
              v16 = (char *)v7 + v15;
              v17 = *v14;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
              *(_QWORD *)v16 = v17;
              v15 += 12;
            }
            while (12 * v4 != v15);
          }
          v18 = v7;
LABEL_38:
          v41 = (_QWORD *)a1[4];
          if (v18 != v41)
          {
            if (v41)
            {
              v42 = (unint64_t *)a1[3];
              if (v42)
              {
                do
                {
                  v49 = __ldxr(v42);
                  v50 = v49 - 1;
                }
                while (__stlxr(v50, v42));
                if (!v50)
                {
                  __dmb(9u);
                  v51 = *(void (**)(void))(a1[3] + 8);
                  if (v51)
                    v51();
                }
              }
              else
              {
                v43 = v41 - 2;
                do
                {
                  v44 = __ldxr(v43);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, v43));
                if (!v45)
                {
                  __dmb(9u);
                  operator delete((void *)(a1[4] - 16));
                }
              }
              a1[3] = 0;
            }
            a1[4] = (unint64_t)v18;
          }
          goto LABEL_48;
        }
        v7 = (_QWORD *)a1[4];
      }
      if (v3 >= a2)
        v32 = a2;
      else
        v32 = *a1;
      v33 = sub_239A13B10((uint64_t)a1, a2);
      v18 = v33;
      if (v32)
      {
        v34 = 12 * v32;
        v35 = v33;
        do
        {
          v36 = *v7;
          *((_DWORD *)v35 + 2) = *((_DWORD *)v7 + 2);
          *v35 = v36;
          v35 = (_QWORD *)((char *)v35 + 12);
          v7 = (_QWORD *)((char *)v7 + 12);
          v34 -= 12;
        }
        while (v34);
      }
      if (v3 < v4)
      {
        v37 = *a3;
        v38 = 12 * v3;
        do
        {
          v39 = (char *)v33 + v38;
          v40 = *v37;
          *((_DWORD *)v39 + 2) = *((_DWORD *)v37 + 2);
          *(_QWORD *)v39 = v40;
          v38 += 12;
        }
        while (12 * v4 != v38);
      }
      goto LABEL_38;
    }
    v19 = a1[4];
    if (!v19)
      return;
    v21 = (unint64_t **)(a1 + 3);
    v20 = (unint64_t *)a1[3];
    if (v20)
      goto LABEL_60;
    v22 = atomic_load((unint64_t *)(v19 - 16));
    if (v22 == 1 || (v23 = a1[4]) == 0)
    {
      v4 = 0;
      goto LABEL_48;
    }
    v20 = *v21;
    if (*v21)
    {
LABEL_60:
      do
      {
        v46 = __ldxr(v20);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v20));
      if (!v47)
      {
        __dmb(9u);
        v48 = (void (*)(void))(*v21)[1];
        if (v48)
          v48();
      }
    }
    else
    {
      v24 = (unint64_t *)(v23 - 16);
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        __dmb(9u);
        operator delete((void *)(a1[4] - 16));
      }
    }
    v4 = 0;
    *v21 = 0;
    a1[4] = 0;
LABEL_48:
    *a1 = v4;
  }
}

_QWORD *sub_239A13B10(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  char v5;
  size_t v6;
  _QWORD *v7;

  v3 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v3 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin())
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v5 = 0;
      v4 = 2;
      goto LABEL_7;
    }
    v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_7:
  if (a2 > 0x1555555555555553)
    v6 = -1;
  else
    v6 = 12 * a2 + 16;
  v7 = operator new(v6);
  *v7 = 1;
  v7[1] = a2;
  if ((v5 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      --v4;
    }
    while (v4);
  }
  return v7 + 2;
}

void sub_239A13BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239A1171C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239A13C08(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(void);

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_239A13B10((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 12 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *v9 = v10;
          v9 = (_QWORD *)((char *)v9 + 12);
          v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      v11 = *((_QWORD *)this + 4);
      if (v11)
      {
        v12 = (unint64_t *)*((_QWORD *)this + 3);
        if (v12)
        {
          do
          {
            v16 = __ldxr(v12);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v12));
          if (!v17)
          {
            __dmb(9u);
            v18 = *(void (**)(void))(*((_QWORD *)this + 3) + 8);
            if (v18)
              v18();
          }
        }
        else
        {
          v13 = (unint64_t *)(v11 - 16);
          do
          {
            v14 = __ldxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            __dmb(9u);
            operator delete((void *)(*((_QWORD *)this + 4) - 16));
          }
        }
        *((_QWORD *)this + 3) = 0;
      }
      *((_QWORD *)this + 4) = v7;
    }
  }
}

__n128 sub_239A13D0C(pxrInternal__aapl__pxrReserved__::VtValue *this, __n128 *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(void);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (!v4
    || *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16) != 21
    && ((v4 & 4) == 0 || (pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(this, &stru_250AF1F40) & 1) == 0))
  {
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    sub_239A13EEC((uint64_t *)this, (uint64_t)&v19);
    if (v21)
    {
      v5 = (unint64_t *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        do
        {
          v16 = __ldxr(v5);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v5));
        if (!v17)
        {
          __dmb(9u);
          v18 = *(void (**)(void))(*((_QWORD *)&v20 + 1) + 8);
          if (v18)
            v18();
        }
      }
      else
      {
        v6 = (unint64_t *)(v21 - 16);
        do
        {
          v7 = __ldxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          __dmb(9u);
          operator delete((void *)(v21 - 16));
        }
      }
    }
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 4) != 0)
  {
    (*(void (**)(__int128 *__return_ptr, pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 176))(&v19, this);
    if (&v19 != (__int128 *)this)
      sub_239A12EEC((uint64_t)&v19, this);
    if (*((_QWORD *)&v19 + 1) && (BYTE8(v19) & 3) != 3)
      (*(void (**)(__int128 *))((*((_QWORD *)&v19 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v19);
  }
  v10 = (__n128 *)sub_239A14654((uint64_t *)this);
  v11 = v10[2].n128_u64[0];
  v10[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v11;
  v12 = v10[1].n128_u64[0];
  result = *v10;
  v14 = a2[1].n128_u64[0];
  *v10 = *a2;
  v10[1].n128_u64[0] = v14;
  *a2 = result;
  a2[1].n128_u64[0] = v12;
  v15 = v10[1].n128_u64[1];
  v10[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v15;
  return result;
}

void sub_239A13EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A13EEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v15[8];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  if (v4)
    v5 = (~(_BYTE)v4 & 3) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v16 = 0;
  }
  else
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    v16 = v6;
    if (v6)
      (*(void (**)(uint64_t *, char *))(v6 + 40))(a1, v15);
  }
  a1[1] = (uint64_t)&off_250AF1F58;
  v7 = operator new();
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v7 + 32) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 - 16);
    if (*(_QWORD *)(v7 + 24))
      v10 = *(unint64_t **)(v7 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (unsigned int *)(v7 + 40);
  atomic_store(0, (unsigned int *)(v7 + 40));
  *a1 = v7;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  if (v16)
    (*(void (**)(char *))(v16 + 32))(v15);
  return a1;
}

void sub_239A14008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t *sub_239A14044(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_239A14068(uint64_t *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = *result;
  if (*result)
  {
    v2 = (unsigned int *)(v1 + 40);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      v5 = *(_QWORD *)(v1 + 32);
      if (v5)
      {
        v7 = v1 + 24;
        v6 = *(unint64_t **)(v1 + 24);
        if (v6)
        {
          do
          {
            v11 = __ldxr(v6);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v6));
          if (!v12)
          {
            __dmb(9u);
            v13 = *(void (**)(void))(*(_QWORD *)v7 + 8);
            if (v13)
              v13();
          }
        }
        else
        {
          v8 = (unint64_t *)(v5 - 16);
          do
          {
            v9 = __ldxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            __dmb(9u);
            operator delete((void *)(*(_QWORD *)(v1 + 32) - 16));
          }
        }
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v1 + 32) = 0;
      }
      JUMPOUT(0x23B83E31CLL);
    }
  }
  return result;
}

_QWORD *sub_239A14134(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_239A14144()
{
  return 1;
}

unint64_t sub_239A1414C(unint64_t **a1)
{
  unint64_t v1;
  int8x8_t *v2;
  unint64_t v3;
  int64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = **a1;
  if (v1)
  {
    v2 = (int8x8_t *)((*a1)[4] + 4);
    v3 = **a1;
    do
    {
      v7 = vbic_s8(*v2, (int8x8_t)vceqz_f32((float32x2_t)*v2));
      v4.i64[0] = v7.u32[0];
      v4.i64[1] = v7.u32[1];
      v5 = vaddvq_s64(v4);
      v6 = v7.u32[0];
      v7.i32[0] = v2[-1].i32[1];
      if (*(float *)v7.i32 == 0.0)
        *(float *)v7.i32 = 0.0;
      v8 = v5 + ((v6 + v7.u32[0] + (v6 + v7.u32[0]) * (v6 + (unint64_t)v7.u32[0])) >> 1);
      v9 = bswap64(0x9E3779B97F4A7C55 * (v7.u32[1] + ((v8 + v8 * v8) >> 1)));
      v1 = v9 + ((v9 + v1 + (v9 + v1) * (v9 + v1)) >> 1);
      v2 = (int8x8_t *)((char *)v2 + 12);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_239A141E8(uint64_t **a1, uint64_t **a2)
{
  return sub_239A14380(*a1, *a2);
}

BOOL sub_239A141F4(uint64_t **a1, uint64_t *a2)
{
  return sub_239A14380(*a1, a2);
}

uint64_t sub_239A14200()
{
  return 0;
}

uint64_t sub_239A1420C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_239A14254()
{
  return &unk_250AF1F40;
}

uint64_t sub_239A14260()
{
  return 1;
}

void *sub_239A14268()
{
  return &unk_250AF2010;
}

uint64_t sub_239A14274(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A1427C(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL sub_239A14288(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_239A142B8(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_250AF1F40, a2);
}

void *sub_239A142D8()
{
  return &unk_250AF1F40;
}

uint64_t sub_239A142E4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_239A142EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = *a1;
  a2[1] = (uint64_t)&off_250AF1F58;
  result = operator new();
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a2 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

BOOL sub_239A14380(uint64_t *a1, uint64_t *a2)
{
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  int v10;
  int v11;
  const void *v12;
  int v13;
  const void *v14;
  int v15;
  int v16;
  const void *v17;
  _BOOL8 result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (float *)a1[4];
  v5 = (float *)a2[4];
  v6 = *a1;
  v7 = *a2;
  if (v4 != v5 || v6 != v7)
    goto LABEL_5;
  v14 = a1 + 1;
  v15 = *((_DWORD *)a1 + 2);
  if (v15)
  {
    if (*((_DWORD *)a1 + 3))
    {
      if (*((_DWORD *)a1 + 4))
        v16 = 4;
      else
        v16 = 3;
      v17 = a2 + 1;
      if (!*((_DWORD *)a2 + 2))
      {
LABEL_24:
        if (v16 != 1)
          goto LABEL_5;
        goto LABEL_49;
      }
    }
    else
    {
      v16 = 2;
      v17 = a2 + 1;
      if (!*((_DWORD *)a2 + 2))
        goto LABEL_24;
    }
  }
  else
  {
    v16 = 1;
    v17 = a2 + 1;
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_24;
  }
  if (*((_DWORD *)a2 + 3))
  {
    if (*((_DWORD *)a2 + 4))
      v19 = 4;
    else
      v19 = 3;
    if (v16 != v19)
      goto LABEL_5;
  }
  else if (v16 != 2)
  {
    goto LABEL_5;
  }
LABEL_49:
  if (v15)
  {
    if (*((_DWORD *)a1 + 3))
    {
      v21 = 3;
      if (*((_DWORD *)a1 + 4))
        v21 = 4;
      if (!memcmp(v14, v17, 4 * v21 - 4))
        goto LABEL_69;
LABEL_5:
      if (v6 != v7)
        return 0;
      goto LABEL_6;
    }
    if (memcmp(v14, v17, 4uLL))
      goto LABEL_5;
  }
  else if (memcmp(v14, v17, 0))
  {
    goto LABEL_5;
  }
LABEL_69:
  v23 = a1[3];
  v24 = a2[3];
  result = v23 == v24;
  if (v23 == v24)
    return result;
LABEL_6:
  v9 = a1 + 1;
  v10 = *((_DWORD *)a1 + 2);
  if (v10)
  {
    if (*((_DWORD *)a1 + 3))
    {
      if (*((_DWORD *)a1 + 4))
        v11 = 4;
      else
        v11 = 3;
      v12 = a2 + 1;
      if (*((_DWORD *)a2 + 2))
      {
LABEL_12:
        if (*((_DWORD *)a2 + 3))
        {
          if (*((_DWORD *)a2 + 4))
            v13 = 4;
          else
            v13 = 3;
          if (v11 != v13)
            return 0;
        }
        else if (v11 != 2)
        {
          return 0;
        }
        goto LABEL_40;
      }
    }
    else
    {
      v11 = 2;
      v12 = a2 + 1;
      if (*((_DWORD *)a2 + 2))
        goto LABEL_12;
    }
  }
  else
  {
    v11 = 1;
    v12 = a2 + 1;
    if (*((_DWORD *)a2 + 2))
      goto LABEL_12;
  }
  if (v11 != 1)
    return 0;
LABEL_40:
  if (v10)
  {
    if (*((_DWORD *)a1 + 3))
    {
      v20 = 3;
      if (*((_DWORD *)a1 + 4))
        v20 = 4;
      if (memcmp(v9, v12, 4 * v20 - 4))
        return 0;
      goto LABEL_61;
    }
    if (memcmp(v9, v12, 4uLL))
      return 0;
  }
  else if (memcmp(v9, v12, 0))
  {
    return 0;
  }
LABEL_61:
  if (v6)
  {
    v22 = &v4[3 * v6];
    result = 1;
    while (*v4 == *v5 && v4[1] == v5[1] && v4[2] == v5[2])
    {
      v4 += 3;
      v5 += 3;
      if (v4 == v22)
        return result;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_239A14654(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(void);

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 == 1)
    return *a1;
  v3 = operator new();
  v4 = (_OWORD *)*a1;
  v5 = *(_OWORD *)(*a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)*a1;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = *((_QWORD *)v4 + 4);
  *(_QWORD *)(v3 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(v3 + 24))
      v7 = *(unint64_t **)(v3 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v4 = (_OWORD *)*a1;
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *a1 = v3;
    if (!v4)
      return *a1;
  }
  else
  {
    v12 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *a1 = v3;
  }
  v14 = (unsigned int *)v4 + 10;
  do
  {
    v15 = __ldxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (v16)
    return *a1;
  __dmb(9u);
  v17 = *((_QWORD *)v4 + 4);
  if (v17)
  {
    v19 = (char *)v4 + 24;
    v18 = (unint64_t *)*((_QWORD *)v4 + 3);
    if (v18)
    {
      do
      {
        v23 = __ldxr(v18);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v18));
      if (!v24)
      {
        __dmb(9u);
        v25 = *(void (**)(void))(*(_QWORD *)v19 + 8);
        if (v25)
          v25();
      }
    }
    else
    {
      v20 = (unint64_t *)(v17 - 16);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        __dmb(9u);
        operator delete((void *)(*((_QWORD *)v4 + 4) - 16));
      }
    }
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v4 + 4) = 0;
  }
  MEMORY[0x23B83E31C](v4, 0x1020C40874388CCLL);
  return *a1;
}

uint64_t sub_239A147D8(_QWORD *a1)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_239A147F0(unint64_t *a1, unint64_t a2, const float **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  _QWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t **v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const float *v29;
  const float *v30;
  const float *v31;
  float *v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _DWORD *v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  float *v49;
  const float *v50;
  const float *v51;
  unint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  uint64_t v56;
  int v57;
  const float *v58;
  const float *v59;
  float *v60;
  unint64_t v61;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  uint64_t v66;
  const float *v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void (*v74)(void);
  unint64_t v75;
  unint64_t v76;
  void (*v77)(void);

  v3 = *a1;
  if (*a1 != a2)
  {
    if (a2)
    {
      v7 = (_QWORD *)a1[4];
      if (!v7)
      {
        v28 = 4 * a2;
        if (4 * a2 / a2 != 4)
          return;
        v29 = (const float *)sub_239A1162C((uint64_t)a1, a2);
        v30 = v29;
        v31 = *a3;
        v32 = (float *)v29;
        if ((unint64_t)(v28 - 4) < 0x3C)
          goto LABEL_88;
        if (v29 < v31 + 1)
        {
          v32 = (float *)v29;
          if (v31 < &v29[(unint64_t)v28 / 4])
            goto LABEL_88;
        }
        v33 = ((unint64_t)(v28 - 4) >> 2) + 1;
        v32 = (float *)&v29[v33 & 0x7FFFFFFFFFFFFFF8];
        v34 = vld1q_dup_f32(v31);
        v35 = (float32x4_t *)(v29 + 4);
        v36 = v33 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35[-1] = v34;
          *v35 = v34;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_88:
          do
            *v32++ = *v31;
          while (v32 != &v29[a2]);
        }
        goto LABEL_67;
      }
      if (!a1[3])
      {
        v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
LABEL_66:
            v30 = (const float *)v7;
LABEL_67:
            v67 = (const float *)a1[4];
            if (v30 != v67)
            {
              if (v67)
              {
                v68 = (unint64_t *)a1[3];
                if (v68)
                {
                  do
                  {
                    v75 = __ldxr(v68);
                    v76 = v75 - 1;
                  }
                  while (__stlxr(v76, v68));
                  if (!v76)
                  {
                    __dmb(9u);
                    v77 = *(void (**)(void))(a1[3] + 8);
                    if (v77)
                      v77();
                  }
                }
                else
                {
                  v69 = (unint64_t *)(v67 - 4);
                  do
                  {
                    v70 = __ldxr(v69);
                    v71 = v70 - 1;
                  }
                  while (__stlxr(v71, v69));
                  if (!v71)
                  {
                    __dmb(9u);
                    operator delete((void *)(a1[4] - 16));
                  }
                }
                a1[3] = 0;
              }
              a1[4] = (unint64_t)v30;
            }
            goto LABEL_76;
          }
          v9 = (int *)a1[4];
          if (*((_QWORD *)v9 - 1) < a2)
          {
            v10 = sub_239A1162C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = (v3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v11 < 7)
              {
                v12 = v10;
                v13 = v9;
              }
              else
              {
                v12 = v10;
                v13 = v9;
                if ((unint64_t)((char *)v10 - (char *)v9) >= 0x20)
                {
                  v14 = 0;
                  v15 = v11 + 1;
                  v16 = v15 & 0x7FFFFFFFFFFFFFF8;
                  v12 = (_DWORD *)((char *)v10 + v16 * 4);
                  v13 = &v9[v16];
                  v17 = v15 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v18 = &v10[v14 / 2];
                    v19 = *(_OWORD *)&v9[v14 + 4];
                    *v18 = *(_OWORD *)&v9[v14];
                    v18[1] = v19;
                    v14 += 8;
                    v17 -= 8;
                  }
                  while (v17);
                  if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_56;
                }
              }
              do
              {
                v57 = *v13++;
                *v12++ = v57;
              }
              while (v13 != &v9[v3]);
            }
          }
LABEL_56:
          v58 = (const float *)v7 + a2;
          v59 = *a3;
          v60 = (float *)v7 + v3;
          v61 = 4 * a2 - 4 * v3 - 4;
          if (v61 < 0x5C)
            goto LABEL_89;
          if (v60 < v59 + 1 && v59 < v58)
            goto LABEL_89;
          v63 = (v61 >> 2) + 1;
          v60 += v63 & 0x7FFFFFFFFFFFFFF8;
          v64 = vld1q_dup_f32(v59);
          v65 = (float32x4_t *)((char *)v7 + 4 * v3 + 16);
          v66 = v63 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v65[-1] = v64;
            *v65 = v64;
            v65 += 2;
            v66 -= 8;
          }
          while (v66);
          if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_89:
            do
              *v60++ = *v59;
            while (v60 != v58);
          }
          goto LABEL_66;
        }
        v7 = (_QWORD *)a1[4];
      }
      if (v3 >= a2)
        v37 = a2;
      else
        v37 = *a1;
      v38 = sub_239A1162C((uint64_t)a1, a2);
      v30 = (const float *)v38;
      if (v37)
      {
        v39 = (v37 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v40 = v38;
        v41 = (int *)v7;
        if (v39 < 7)
          goto LABEL_90;
        v40 = v38;
        v41 = (int *)v7;
        if ((unint64_t)((char *)v38 - (char *)v7) < 0x20)
          goto LABEL_90;
        v42 = v39 + 1;
        v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        v40 = (_DWORD *)((char *)v38 + v43);
        v41 = (int *)((char *)v7 + v43);
        v44 = (__int128 *)(v7 + 2);
        v45 = v38 + 2;
        v46 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          *v45 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 8;
        }
        while (v46);
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_90:
          do
          {
            v48 = *v41++;
            *v40++ = v48;
          }
          while (v41 != (int *)((char *)v7 + 4 * v37));
        }
      }
      if (v3 < a2)
      {
        v49 = (float *)v38 + v3;
        v50 = (const float *)v38 + a2;
        v51 = *a3;
        v52 = 4 * a2 - 4 * v3 - 4;
        if (v52 < 0x5C || v49 < v51 + 1 && v51 < v50)
          goto LABEL_91;
        v53 = (v52 >> 2) + 1;
        v49 += v53 & 0x7FFFFFFFFFFFFFF8;
        v54 = vld1q_dup_f32(v51);
        v55 = (float32x4_t *)((char *)v38 + 4 * v3 + 16);
        v56 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v55[-1] = v54;
          *v55 = v54;
          v55 += 2;
          v56 -= 8;
        }
        while (v56);
        if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_91:
          do
            *v49++ = *v51;
          while (v49 != v50);
        }
      }
      goto LABEL_67;
    }
    v20 = a1[4];
    if (!v20)
      return;
    v22 = (unint64_t **)(a1 + 3);
    v21 = (unint64_t *)a1[3];
    if (v21)
      goto LABEL_92;
    v23 = atomic_load((unint64_t *)(v20 - 16));
    if (v23 == 1)
      goto LABEL_76;
    v24 = a1[4];
    if (!v24)
      goto LABEL_76;
    v21 = *v22;
    if (*v22)
    {
LABEL_92:
      do
      {
        v72 = __ldxr(v21);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v21));
      if (!v73)
      {
        __dmb(9u);
        v74 = (void (*)(void))(*v22)[1];
        if (v74)
          v74();
      }
    }
    else
    {
      v25 = (unint64_t *)(v24 - 16);
      do
      {
        v26 = __ldxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        __dmb(9u);
        operator delete((void *)(a1[4] - 16));
      }
    }
    *v22 = 0;
    a1[4] = 0;
LABEL_76:
    *a1 = a2;
  }
}

void sub_239A14C5C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(void);

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return;
  if (!*((_QWORD *)this + 3))
  {
    v3 = atomic_load((unint64_t *)(v1 - 16));
    if (v3 == 1)
      return;
  }
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
  v4 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)this;
  v6 = sub_239A1162C((uint64_t)this, *(_QWORD *)this);
  v7 = v6;
  if (v5)
  {
    v8 = (v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v8 < 7)
    {
      v9 = v6;
      v10 = (int *)v4;
    }
    else
    {
      v9 = v6;
      v10 = (int *)v4;
      if ((unint64_t)v6 - v4 >= 0x20)
      {
        v11 = v8 + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v9 = (_DWORD *)((char *)v6 + v12);
        v10 = (int *)(v4 + v12);
        v13 = (__int128 *)(v4 + 16);
        v14 = v6 + 2;
        v15 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_13;
      }
    }
    do
    {
      v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != (int *)(v4 + 4 * v5));
  }
LABEL_13:
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    v19 = (unint64_t *)*((_QWORD *)this + 3);
    if (v19)
    {
      do
      {
        v23 = __ldxr(v19);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v19));
      if (!v24)
      {
        __dmb(9u);
        v25 = *(void (**)(void))(*((_QWORD *)this + 3) + 8);
        if (v25)
          v25();
      }
    }
    else
    {
      v20 = (unint64_t *)(v18 - 16);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        __dmb(9u);
        operator delete((void *)(*((_QWORD *)this + 4) - 16));
      }
    }
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 4) = v7;
}

__n128 sub_239A14DBC(pxrInternal__aapl__pxrReserved__::VtValue *this, __n128 *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(void);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (!v4
    || *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16) != 52
    && ((v4 & 4) == 0 || (pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(this, &stru_250AF1C18) & 1) == 0))
  {
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    sub_239A14F9C((uint64_t *)this, (uint64_t)&v19);
    if (v21)
    {
      v5 = (unint64_t *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        do
        {
          v16 = __ldxr(v5);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v5));
        if (!v17)
        {
          __dmb(9u);
          v18 = *(void (**)(void))(*((_QWORD *)&v20 + 1) + 8);
          if (v18)
            v18();
        }
      }
      else
      {
        v6 = (unint64_t *)(v21 - 16);
        do
        {
          v7 = __ldxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          __dmb(9u);
          operator delete((void *)(v21 - 16));
        }
      }
    }
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 4) != 0)
  {
    (*(void (**)(__int128 *__return_ptr, pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 176))(&v19, this);
    if (&v19 != (__int128 *)this)
      sub_239A12EEC((uint64_t)&v19, this);
    if (*((_QWORD *)&v19 + 1) && (BYTE8(v19) & 3) != 3)
      (*(void (**)(__int128 *))((*((_QWORD *)&v19 + 1) & 0xFFFFFFFFFFFFFFF8) + 32))(&v19);
  }
  v10 = (__n128 *)sub_239A11D04((uint64_t *)this);
  v11 = v10[2].n128_u64[0];
  v10[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v11;
  v12 = v10[1].n128_u64[0];
  result = *v10;
  v14 = a2[1].n128_u64[0];
  *v10 = *a2;
  v10[1].n128_u64[0] = v14;
  *a2 = result;
  a2[1].n128_u64[0] = v12;
  v15 = v10[1].n128_u64[1];
  v10[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v15;
  return result;
}

void sub_239A14F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A14F9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v15[8];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  if (v4)
    v5 = (~(_BYTE)v4 & 3) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v16 = 0;
  }
  else
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    v16 = v6;
    if (v6)
      (*(void (**)(uint64_t *, char *))(v6 + 40))(a1, v15);
  }
  a1[1] = (uint64_t)&off_250AF1B50;
  v7 = operator new();
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v7 + 32) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 - 16);
    if (*(_QWORD *)(v7 + 24))
      v10 = *(unint64_t **)(v7 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (unsigned int *)(v7 + 40);
  atomic_store(0, (unsigned int *)(v7 + 40));
  *a1 = v7;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  if (v16)
    (*(void (**)(char *))(v16 + 32))(v15);
  return a1;
}

void sub_239A150B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

void sub_239A150F4(unint64_t *a1, unint64_t a2, const double **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t **v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  const double *v31;
  _QWORD *v32;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  double *v49;
  const double *v50;
  const double *v51;
  unint64_t v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  const double *v58;
  const double *v59;
  double *v60;
  unint64_t v61;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void (*v74)(void);
  unint64_t v75;
  unint64_t v76;
  void (*v77)(void);

  v3 = *a1;
  if (*a1 != a2)
  {
    if (a2)
    {
      v7 = (_QWORD *)a1[4];
      if (!v7)
      {
        v28 = 8 * a2;
        if (8 * a2 / a2 != 8)
          return;
        v29 = sub_239A15560((uint64_t)a1, a2);
        v30 = v29;
        v31 = *a3;
        v32 = v29;
        if ((unint64_t)(v28 - 8) < 0x68)
          goto LABEL_88;
        if (v29 < (_QWORD *)v31 + 1)
        {
          v32 = v29;
          if (v31 < (const double *)&v29[(unint64_t)v28 / 8])
            goto LABEL_88;
        }
        v33 = ((unint64_t)(v28 - 8) >> 3) + 1;
        v32 = &v29[v33 & 0x3FFFFFFFFFFFFFFCLL];
        v34 = vld1q_dup_f64(v31);
        v35 = (float64x2_t *)(v29 + 2);
        v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35[-1] = v34;
          *v35 = v34;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_88:
          do
            *v32++ = *(_QWORD *)v31;
          while (v32 != &v29[a2]);
        }
        goto LABEL_67;
      }
      if (!a1[3])
      {
        v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
LABEL_66:
            v30 = v7;
LABEL_67:
            v67 = (_QWORD *)a1[4];
            if (v30 != v67)
            {
              if (v67)
              {
                v68 = (unint64_t *)a1[3];
                if (v68)
                {
                  do
                  {
                    v75 = __ldxr(v68);
                    v76 = v75 - 1;
                  }
                  while (__stlxr(v76, v68));
                  if (!v76)
                  {
                    __dmb(9u);
                    v77 = *(void (**)(void))(a1[3] + 8);
                    if (v77)
                      v77();
                  }
                }
                else
                {
                  v69 = v67 - 2;
                  do
                  {
                    v70 = __ldxr(v69);
                    v71 = v70 - 1;
                  }
                  while (__stlxr(v71, v69));
                  if (!v71)
                  {
                    __dmb(9u);
                    operator delete((void *)(a1[4] - 16));
                  }
                }
                a1[3] = 0;
              }
              a1[4] = (unint64_t)v30;
            }
            goto LABEL_76;
          }
          v9 = (uint64_t *)a1[4];
          if (*(v9 - 1) < a2)
          {
            v10 = sub_239A15560((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = (v3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
              if (v11 < 3)
              {
                v12 = v10;
                v13 = v9;
              }
              else
              {
                v12 = v10;
                v13 = v9;
                if ((unint64_t)((char *)v10 - (char *)v9) >= 0x20)
                {
                  v14 = 0;
                  v15 = v11 + 1;
                  v16 = v15 & 0x3FFFFFFFFFFFFFFCLL;
                  v12 = &v10[v16];
                  v13 = &v9[v16];
                  v17 = v15 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v18 = &v10[v14];
                    v19 = *(_OWORD *)&v9[v14 + 2];
                    *v18 = *(_OWORD *)&v9[v14];
                    v18[1] = v19;
                    v14 += 4;
                    v17 -= 4;
                  }
                  while (v17);
                  if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_56;
                }
              }
              do
              {
                v57 = *v13++;
                *v12++ = v57;
              }
              while (v13 != &v9[v3]);
            }
          }
LABEL_56:
          v58 = (const double *)&v7[a2];
          v59 = *a3;
          v60 = (double *)&v7[v3];
          v61 = 8 * a2 - 8 * v3 - 8;
          if (v61 < 0xA8)
            goto LABEL_89;
          if (v60 < v59 + 1 && v59 < v58)
            goto LABEL_89;
          v63 = (v61 >> 3) + 1;
          v60 += v63 & 0x3FFFFFFFFFFFFFFCLL;
          v64 = vld1q_dup_f64(v59);
          v65 = (float64x2_t *)&v7[v3 + 2];
          v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65[-1] = v64;
            *v65 = v64;
            v65 += 2;
            v66 -= 4;
          }
          while (v66);
          if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_89:
            do
              *v60++ = *v59;
            while (v60 != v58);
          }
          goto LABEL_66;
        }
        v7 = (_QWORD *)a1[4];
      }
      if (v3 >= a2)
        v37 = a2;
      else
        v37 = *a1;
      v38 = sub_239A15560((uint64_t)a1, a2);
      v30 = v38;
      if (v37)
      {
        v39 = (v37 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v40 = v38;
        v41 = v7;
        if (v39 < 3)
          goto LABEL_90;
        v40 = v38;
        v41 = v7;
        if ((unint64_t)((char *)v38 - (char *)v7) < 0x20)
          goto LABEL_90;
        v42 = v39 + 1;
        v43 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        v40 = &v38[v43];
        v41 = &v7[v43];
        v44 = (__int128 *)(v7 + 2);
        v45 = v38 + 2;
        v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          *v45 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_90:
          do
          {
            v48 = *v41++;
            *v40++ = v48;
          }
          while (v41 != &v7[v37]);
        }
      }
      if (v3 < a2)
      {
        v49 = (double *)&v38[v3];
        v50 = (const double *)&v38[a2];
        v51 = *a3;
        v52 = 8 * a2 - 8 * v3 - 8;
        if (v52 < 0xA8 || v49 < v51 + 1 && v51 < v50)
          goto LABEL_91;
        v53 = (v52 >> 3) + 1;
        v49 += v53 & 0x3FFFFFFFFFFFFFFCLL;
        v54 = vld1q_dup_f64(v51);
        v55 = (float64x2_t *)&v38[v3 + 2];
        v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55[-1] = v54;
          *v55 = v54;
          v55 += 2;
          v56 -= 4;
        }
        while (v56);
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_91:
          do
            *v49++ = *v51;
          while (v49 != v50);
        }
      }
      goto LABEL_67;
    }
    v20 = a1[4];
    if (!v20)
      return;
    v22 = (unint64_t **)(a1 + 3);
    v21 = (unint64_t *)a1[3];
    if (v21)
      goto LABEL_92;
    v23 = atomic_load((unint64_t *)(v20 - 16));
    if (v23 == 1)
      goto LABEL_76;
    v24 = a1[4];
    if (!v24)
      goto LABEL_76;
    v21 = *v22;
    if (*v22)
    {
LABEL_92:
      do
      {
        v72 = __ldxr(v21);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v21));
      if (!v73)
      {
        __dmb(9u);
        v74 = (void (*)(void))(*v22)[1];
        if (v74)
          v74();
      }
    }
    else
    {
      v25 = (unint64_t *)(v24 - 16);
      do
      {
        v26 = __ldxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        __dmb(9u);
        operator delete((void *)(a1[4] - 16));
      }
    }
    *v22 = 0;
    a1[4] = 0;
LABEL_76:
    *a1 = a2;
  }
}

_QWORD *sub_239A15560(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  char v5;
  size_t v6;
  _QWORD *v7;

  v3 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v3 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin())
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v5 = 0;
      v4 = 2;
      goto LABEL_7;
    }
    v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_7:
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v6 = -1;
  else
    v6 = 8 * a2 + 16;
  v7 = operator new(v6);
  *v7 = 1;
  v7[1] = a2;
  if ((v5 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      --v4;
    }
    while (v4);
  }
  return v7 + 2;
}

void sub_239A15638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239A1171C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A15650(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int *v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int *v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int *v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  uint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int *v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int *v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int *v280;
  unsigned int v281;
  uint64_t v282;
  unsigned int *v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int *v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int *v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int *v301;
  unsigned int v302;
  uint64_t v303;
  unsigned int *v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int *v313;
  unsigned int v314;
  uint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int *v325;
  unsigned int v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int *v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int *v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int *v340;
  unsigned int v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int *v346;
  unsigned int v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  uint64_t v354;
  unsigned int *v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int *v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int *v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int v365;
  uint64_t v366;
  unsigned int *v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int *v370;
  unsigned int v371;
  uint64_t v372;
  unsigned int *v373;
  unsigned int v374;
  uint64_t v375;
  unsigned int *v376;
  unsigned int v377;
  uint64_t v378;
  unsigned int *v379;
  unsigned int v380;
  uint64_t v381;
  unsigned int *v382;
  unsigned int v383;
  uint64_t v384;
  unsigned int *v385;
  unsigned int v386;
  uint64_t v387;
  unsigned int *v388;
  unsigned int v389;
  uint64_t v390;
  unsigned int *v391;
  unsigned int v392;
  uint64_t v393;
  unsigned int *v394;
  unsigned int v395;
  uint64_t v396;
  unsigned int *v397;
  unsigned int v398;
  uint64_t v399;
  unsigned int *v400;
  unsigned int v401;
  uint64_t v402;
  unsigned int *v403;
  unsigned int v404;
  uint64_t v405;
  unsigned int *v406;
  unsigned int v407;
  uint64_t v408;
  unsigned int *v409;
  unsigned int v410;
  uint64_t v411;
  unsigned int *v412;
  unsigned int v413;
  uint64_t v414;
  unsigned int *v415;
  unsigned int v416;
  uint64_t v417;
  unsigned int *v418;
  unsigned int v419;
  uint64_t v420;
  unsigned int *v421;
  unsigned int v422;
  uint64_t v423;
  unsigned int *v424;
  unsigned int v425;
  uint64_t v426;
  unsigned int *v427;
  unsigned int v428;
  uint64_t v429;
  unsigned int *v430;
  unsigned int v431;
  uint64_t v432;
  unsigned int *v433;
  unsigned int v434;
  uint64_t v435;
  unsigned int *v436;
  unsigned int v437;
  uint64_t v438;
  unsigned int *v439;
  unsigned int v440;
  uint64_t v441;
  unsigned int *v442;
  unsigned int v443;
  uint64_t v444;
  unsigned int *v445;
  unsigned int v446;
  uint64_t v447;
  unsigned int *v448;
  unsigned int v449;
  uint64_t v450;
  unsigned int *v451;
  unsigned int v452;
  uint64_t v453;
  unsigned int *v454;
  unsigned int v455;
  uint64_t v456;
  unsigned int *v457;
  unsigned int v458;
  uint64_t v459;
  unsigned int *v460;
  unsigned int v461;
  uint64_t v462;
  unsigned int *v463;
  unsigned int v464;
  uint64_t v465;
  unsigned int *v466;
  unsigned int v467;
  uint64_t v468;
  unsigned int *v469;
  unsigned int v470;
  uint64_t v471;
  unsigned int *v472;
  unsigned int v473;
  uint64_t v474;
  unsigned int *v475;
  unsigned int v476;
  uint64_t v477;
  unsigned int *v478;
  unsigned int v479;
  uint64_t v480;
  unsigned int *v481;
  unsigned int v482;
  uint64_t v483;
  unsigned int *v484;
  unsigned int v485;
  uint64_t v486;
  unsigned int *v487;
  unsigned int v488;
  uint64_t v489;
  unsigned int *v490;
  unsigned int v491;
  uint64_t v492;
  unsigned int *v493;
  unsigned int v494;
  uint64_t v495;
  unsigned int *v496;
  unsigned int v497;
  uint64_t v498;
  unsigned int *v499;
  unsigned int v500;
  uint64_t v501;
  unsigned int *v502;
  unsigned int v503;
  uint64_t v504;
  unsigned int *v505;
  unsigned int v506;
  uint64_t v507;
  unsigned int *v508;
  unsigned int v509;
  uint64_t v510;
  unsigned int *v511;
  unsigned int v512;
  uint64_t v513;
  unsigned int *v514;
  unsigned int v515;
  uint64_t v516;
  unsigned int *v517;
  unsigned int v518;
  uint64_t v519;
  unsigned int *v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int *v523;
  unsigned int v524;
  uint64_t v525;
  unsigned int *v526;
  unsigned int v527;
  uint64_t v528;
  unsigned int *v529;
  unsigned int v530;
  uint64_t v531;
  unsigned int *v532;
  unsigned int v533;
  uint64_t v534;
  unsigned int *v535;
  unsigned int v536;
  uint64_t v537;
  unsigned int *v538;
  unsigned int v539;
  uint64_t v540;
  unsigned int *v541;
  unsigned int v542;
  uint64_t v543;
  unsigned int *v544;
  unsigned int v545;
  uint64_t v546;
  unsigned int *v547;
  unsigned int v548;
  uint64_t v549;
  unsigned int *v550;
  unsigned int v551;
  uint64_t v552;
  unsigned int *v553;
  unsigned int v554;
  uint64_t v555;
  unsigned int *v556;
  unsigned int v557;
  uint64_t v558;
  unsigned int *v559;
  unsigned int v560;
  uint64_t v561;
  unsigned int *v562;
  unsigned int v563;
  uint64_t v564;
  unsigned int *v565;
  unsigned int v566;
  uint64_t v567;
  unsigned int *v568;
  unsigned int v569;
  uint64_t v570;
  unsigned int *v571;
  unsigned int v572;
  uint64_t v573;
  unsigned int *v574;
  unsigned int v575;
  uint64_t v576;
  unsigned int *v577;
  unsigned int v578;
  uint64_t v579;
  unsigned int *v580;
  unsigned int v581;
  uint64_t v582;
  unsigned int *v583;
  unsigned int v584;
  uint64_t v585;
  unsigned int *v586;
  unsigned int v587;
  uint64_t v588;
  unsigned int *v589;
  unsigned int v590;
  uint64_t v591;
  unsigned int *v592;
  unsigned int v593;
  uint64_t v594;
  unsigned int *v595;
  unsigned int v596;
  uint64_t v597;
  unsigned int *v598;
  unsigned int v599;
  uint64_t v600;
  unsigned int *v601;
  unsigned int v602;
  uint64_t v603;
  unsigned int *v604;
  unsigned int v605;
  uint64_t v606;
  unsigned int *v607;
  unsigned int v608;
  unsigned int *v609;
  unsigned int v610;

  v2 = a1[201];
  if (v2)
  {
    v3 = a1[202];
    v4 = (void *)a1[201];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = (void *)a1[201];
    }
    a1[202] = v2;
    operator delete(v4);
  }
  v9 = a1[200];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = a1[199];
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = a1[198];
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v18 = a1[197];
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = a1[196];
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  v24 = a1[195];
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  v27 = a1[194];
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = a1[193];
  if ((v30 & 7) != 0)
  {
    v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  v33 = a1[192];
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  v36 = a1[191];
  if ((v36 & 7) != 0)
  {
    v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  v39 = a1[190];
  if ((v39 & 7) != 0)
  {
    v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  v42 = a1[189];
  if ((v42 & 7) != 0)
  {
    v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  v45 = a1[188];
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  v48 = a1[187];
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  v51 = a1[186];
  if ((v51 & 7) != 0)
  {
    v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  v54 = a1[185];
  if ((v54 & 7) != 0)
  {
    v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  v57 = a1[184];
  if ((v57 & 7) != 0)
  {
    v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  v60 = a1[183];
  if ((v60 & 7) != 0)
  {
    v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v63 = a1[182];
  if ((v63 & 7) != 0)
  {
    v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 - 2, v64));
  }
  v66 = a1[181];
  if ((v66 & 7) != 0)
  {
    v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  v69 = a1[180];
  if ((v69 & 7) != 0)
  {
    v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stlxr(v71 - 2, v70));
  }
  v72 = a1[179];
  if ((v72 & 7) != 0)
  {
    v73 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  v75 = a1[178];
  if ((v75 & 7) != 0)
  {
    v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  v78 = a1[177];
  if ((v78 & 7) != 0)
  {
    v79 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  v81 = a1[176];
  if ((v81 & 7) != 0)
  {
    v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  v84 = a1[175];
  if ((v84 & 7) != 0)
  {
    v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  v87 = a1[174];
  if ((v87 & 7) != 0)
  {
    v88 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
    do
      v89 = __ldxr(v88);
    while (__stlxr(v89 - 2, v88));
  }
  v90 = a1[173];
  if ((v90 & 7) != 0)
  {
    v91 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
    do
      v92 = __ldxr(v91);
    while (__stlxr(v92 - 2, v91));
  }
  v93 = a1[172];
  if ((v93 & 7) != 0)
  {
    v94 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  v96 = a1[171];
  if ((v96 & 7) != 0)
  {
    v97 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
    do
      v98 = __ldxr(v97);
    while (__stlxr(v98 - 2, v97));
  }
  v99 = a1[170];
  if ((v99 & 7) != 0)
  {
    v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
    do
      v101 = __ldxr(v100);
    while (__stlxr(v101 - 2, v100));
  }
  v102 = a1[169];
  if ((v102 & 7) != 0)
  {
    v103 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  v105 = a1[168];
  if ((v105 & 7) != 0)
  {
    v106 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
    do
      v107 = __ldxr(v106);
    while (__stlxr(v107 - 2, v106));
  }
  v108 = a1[167];
  if ((v108 & 7) != 0)
  {
    v109 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  v111 = a1[166];
  if ((v111 & 7) != 0)
  {
    v112 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v113 = __ldxr(v112);
    while (__stlxr(v113 - 2, v112));
  }
  v114 = a1[165];
  if ((v114 & 7) != 0)
  {
    v115 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
    do
      v116 = __ldxr(v115);
    while (__stlxr(v116 - 2, v115));
  }
  v117 = a1[164];
  if ((v117 & 7) != 0)
  {
    v118 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  v120 = a1[163];
  if ((v120 & 7) != 0)
  {
    v121 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
    do
      v122 = __ldxr(v121);
    while (__stlxr(v122 - 2, v121));
  }
  v123 = a1[162];
  if ((v123 & 7) != 0)
  {
    v124 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v125 = __ldxr(v124);
    while (__stlxr(v125 - 2, v124));
  }
  v126 = a1[161];
  if ((v126 & 7) != 0)
  {
    v127 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
    do
      v128 = __ldxr(v127);
    while (__stlxr(v128 - 2, v127));
  }
  v129 = a1[160];
  if ((v129 & 7) != 0)
  {
    v130 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
    do
      v131 = __ldxr(v130);
    while (__stlxr(v131 - 2, v130));
  }
  v132 = a1[159];
  if ((v132 & 7) != 0)
  {
    v133 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
    do
      v134 = __ldxr(v133);
    while (__stlxr(v134 - 2, v133));
  }
  v135 = a1[158];
  if ((v135 & 7) != 0)
  {
    v136 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
    do
      v137 = __ldxr(v136);
    while (__stlxr(v137 - 2, v136));
  }
  v138 = a1[157];
  if ((v138 & 7) != 0)
  {
    v139 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
    do
      v140 = __ldxr(v139);
    while (__stlxr(v140 - 2, v139));
  }
  v141 = a1[156];
  if ((v141 & 7) != 0)
  {
    v142 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFFFF8);
    do
      v143 = __ldxr(v142);
    while (__stlxr(v143 - 2, v142));
  }
  v144 = a1[155];
  if ((v144 & 7) != 0)
  {
    v145 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
    do
      v146 = __ldxr(v145);
    while (__stlxr(v146 - 2, v145));
  }
  v147 = a1[154];
  if ((v147 & 7) != 0)
  {
    v148 = (unsigned int *)(v147 & 0xFFFFFFFFFFFFFFF8);
    do
      v149 = __ldxr(v148);
    while (__stlxr(v149 - 2, v148));
  }
  v150 = a1[153];
  if ((v150 & 7) != 0)
  {
    v151 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
    do
      v152 = __ldxr(v151);
    while (__stlxr(v152 - 2, v151));
  }
  v153 = a1[152];
  if ((v153 & 7) != 0)
  {
    v154 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFFFF8);
    do
      v155 = __ldxr(v154);
    while (__stlxr(v155 - 2, v154));
  }
  v156 = a1[151];
  if ((v156 & 7) != 0)
  {
    v157 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
    do
      v158 = __ldxr(v157);
    while (__stlxr(v158 - 2, v157));
  }
  v159 = a1[150];
  if ((v159 & 7) != 0)
  {
    v160 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
    do
      v161 = __ldxr(v160);
    while (__stlxr(v161 - 2, v160));
  }
  v162 = a1[149];
  if ((v162 & 7) != 0)
  {
    v163 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
    do
      v164 = __ldxr(v163);
    while (__stlxr(v164 - 2, v163));
  }
  v165 = a1[148];
  if ((v165 & 7) != 0)
  {
    v166 = (unsigned int *)(v165 & 0xFFFFFFFFFFFFFFF8);
    do
      v167 = __ldxr(v166);
    while (__stlxr(v167 - 2, v166));
  }
  v168 = a1[147];
  if ((v168 & 7) != 0)
  {
    v169 = (unsigned int *)(v168 & 0xFFFFFFFFFFFFFFF8);
    do
      v170 = __ldxr(v169);
    while (__stlxr(v170 - 2, v169));
  }
  v171 = a1[146];
  if ((v171 & 7) != 0)
  {
    v172 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
    do
      v173 = __ldxr(v172);
    while (__stlxr(v173 - 2, v172));
  }
  v174 = a1[145];
  if ((v174 & 7) != 0)
  {
    v175 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFFFF8);
    do
      v176 = __ldxr(v175);
    while (__stlxr(v176 - 2, v175));
  }
  v177 = a1[144];
  if ((v177 & 7) != 0)
  {
    v178 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
    do
      v179 = __ldxr(v178);
    while (__stlxr(v179 - 2, v178));
  }
  v180 = a1[143];
  if ((v180 & 7) != 0)
  {
    v181 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v182 = __ldxr(v181);
    while (__stlxr(v182 - 2, v181));
  }
  v183 = a1[142];
  if ((v183 & 7) != 0)
  {
    v184 = (unsigned int *)(v183 & 0xFFFFFFFFFFFFFFF8);
    do
      v185 = __ldxr(v184);
    while (__stlxr(v185 - 2, v184));
  }
  v186 = a1[141];
  if ((v186 & 7) != 0)
  {
    v187 = (unsigned int *)(v186 & 0xFFFFFFFFFFFFFFF8);
    do
      v188 = __ldxr(v187);
    while (__stlxr(v188 - 2, v187));
  }
  v189 = a1[140];
  if ((v189 & 7) != 0)
  {
    v190 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
    do
      v191 = __ldxr(v190);
    while (__stlxr(v191 - 2, v190));
  }
  v192 = a1[139];
  if ((v192 & 7) != 0)
  {
    v193 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
    do
      v194 = __ldxr(v193);
    while (__stlxr(v194 - 2, v193));
  }
  v195 = a1[138];
  if ((v195 & 7) != 0)
  {
    v196 = (unsigned int *)(v195 & 0xFFFFFFFFFFFFFFF8);
    do
      v197 = __ldxr(v196);
    while (__stlxr(v197 - 2, v196));
  }
  v198 = a1[137];
  if ((v198 & 7) != 0)
  {
    v199 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
    do
      v200 = __ldxr(v199);
    while (__stlxr(v200 - 2, v199));
  }
  v201 = a1[136];
  if ((v201 & 7) != 0)
  {
    v202 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
    do
      v203 = __ldxr(v202);
    while (__stlxr(v203 - 2, v202));
  }
  v204 = a1[135];
  if ((v204 & 7) != 0)
  {
    v205 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFF8);
    do
      v206 = __ldxr(v205);
    while (__stlxr(v206 - 2, v205));
  }
  v207 = a1[134];
  if ((v207 & 7) != 0)
  {
    v208 = (unsigned int *)(v207 & 0xFFFFFFFFFFFFFFF8);
    do
      v209 = __ldxr(v208);
    while (__stlxr(v209 - 2, v208));
  }
  v210 = a1[133];
  if ((v210 & 7) != 0)
  {
    v211 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFFFF8);
    do
      v212 = __ldxr(v211);
    while (__stlxr(v212 - 2, v211));
  }
  v213 = a1[132];
  if ((v213 & 7) != 0)
  {
    v214 = (unsigned int *)(v213 & 0xFFFFFFFFFFFFFFF8);
    do
      v215 = __ldxr(v214);
    while (__stlxr(v215 - 2, v214));
  }
  v216 = a1[131];
  if ((v216 & 7) != 0)
  {
    v217 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
    do
      v218 = __ldxr(v217);
    while (__stlxr(v218 - 2, v217));
  }
  v219 = a1[130];
  if ((v219 & 7) != 0)
  {
    v220 = (unsigned int *)(v219 & 0xFFFFFFFFFFFFFFF8);
    do
      v221 = __ldxr(v220);
    while (__stlxr(v221 - 2, v220));
  }
  v222 = a1[129];
  if ((v222 & 7) != 0)
  {
    v223 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
    do
      v224 = __ldxr(v223);
    while (__stlxr(v224 - 2, v223));
  }
  v225 = a1[128];
  if ((v225 & 7) != 0)
  {
    v226 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
    do
      v227 = __ldxr(v226);
    while (__stlxr(v227 - 2, v226));
  }
  v228 = a1[127];
  if ((v228 & 7) != 0)
  {
    v229 = (unsigned int *)(v228 & 0xFFFFFFFFFFFFFFF8);
    do
      v230 = __ldxr(v229);
    while (__stlxr(v230 - 2, v229));
  }
  v231 = a1[126];
  if ((v231 & 7) != 0)
  {
    v232 = (unsigned int *)(v231 & 0xFFFFFFFFFFFFFFF8);
    do
      v233 = __ldxr(v232);
    while (__stlxr(v233 - 2, v232));
  }
  v234 = a1[125];
  if ((v234 & 7) != 0)
  {
    v235 = (unsigned int *)(v234 & 0xFFFFFFFFFFFFFFF8);
    do
      v236 = __ldxr(v235);
    while (__stlxr(v236 - 2, v235));
  }
  v237 = a1[124];
  if ((v237 & 7) != 0)
  {
    v238 = (unsigned int *)(v237 & 0xFFFFFFFFFFFFFFF8);
    do
      v239 = __ldxr(v238);
    while (__stlxr(v239 - 2, v238));
  }
  v240 = a1[123];
  if ((v240 & 7) != 0)
  {
    v241 = (unsigned int *)(v240 & 0xFFFFFFFFFFFFFFF8);
    do
      v242 = __ldxr(v241);
    while (__stlxr(v242 - 2, v241));
  }
  v243 = a1[122];
  if ((v243 & 7) != 0)
  {
    v244 = (unsigned int *)(v243 & 0xFFFFFFFFFFFFFFF8);
    do
      v245 = __ldxr(v244);
    while (__stlxr(v245 - 2, v244));
  }
  v246 = a1[121];
  if ((v246 & 7) != 0)
  {
    v247 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFFFF8);
    do
      v248 = __ldxr(v247);
    while (__stlxr(v248 - 2, v247));
  }
  v249 = a1[120];
  if ((v249 & 7) != 0)
  {
    v250 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFF8);
    do
      v251 = __ldxr(v250);
    while (__stlxr(v251 - 2, v250));
  }
  v252 = a1[119];
  if ((v252 & 7) != 0)
  {
    v253 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
    do
      v254 = __ldxr(v253);
    while (__stlxr(v254 - 2, v253));
  }
  v255 = a1[118];
  if ((v255 & 7) != 0)
  {
    v256 = (unsigned int *)(v255 & 0xFFFFFFFFFFFFFFF8);
    do
      v257 = __ldxr(v256);
    while (__stlxr(v257 - 2, v256));
  }
  v258 = a1[117];
  if ((v258 & 7) != 0)
  {
    v259 = (unsigned int *)(v258 & 0xFFFFFFFFFFFFFFF8);
    do
      v260 = __ldxr(v259);
    while (__stlxr(v260 - 2, v259));
  }
  v261 = a1[116];
  if ((v261 & 7) != 0)
  {
    v262 = (unsigned int *)(v261 & 0xFFFFFFFFFFFFFFF8);
    do
      v263 = __ldxr(v262);
    while (__stlxr(v263 - 2, v262));
  }
  v264 = a1[115];
  if ((v264 & 7) != 0)
  {
    v265 = (unsigned int *)(v264 & 0xFFFFFFFFFFFFFFF8);
    do
      v266 = __ldxr(v265);
    while (__stlxr(v266 - 2, v265));
  }
  v267 = a1[114];
  if ((v267 & 7) != 0)
  {
    v268 = (unsigned int *)(v267 & 0xFFFFFFFFFFFFFFF8);
    do
      v269 = __ldxr(v268);
    while (__stlxr(v269 - 2, v268));
  }
  v270 = a1[113];
  if ((v270 & 7) != 0)
  {
    v271 = (unsigned int *)(v270 & 0xFFFFFFFFFFFFFFF8);
    do
      v272 = __ldxr(v271);
    while (__stlxr(v272 - 2, v271));
  }
  v273 = a1[112];
  if ((v273 & 7) != 0)
  {
    v274 = (unsigned int *)(v273 & 0xFFFFFFFFFFFFFFF8);
    do
      v275 = __ldxr(v274);
    while (__stlxr(v275 - 2, v274));
  }
  v276 = a1[111];
  if ((v276 & 7) != 0)
  {
    v277 = (unsigned int *)(v276 & 0xFFFFFFFFFFFFFFF8);
    do
      v278 = __ldxr(v277);
    while (__stlxr(v278 - 2, v277));
  }
  v279 = a1[110];
  if ((v279 & 7) != 0)
  {
    v280 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFFFF8);
    do
      v281 = __ldxr(v280);
    while (__stlxr(v281 - 2, v280));
  }
  v282 = a1[109];
  if ((v282 & 7) != 0)
  {
    v283 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
    do
      v284 = __ldxr(v283);
    while (__stlxr(v284 - 2, v283));
  }
  v285 = a1[108];
  if ((v285 & 7) != 0)
  {
    v286 = (unsigned int *)(v285 & 0xFFFFFFFFFFFFFFF8);
    do
      v287 = __ldxr(v286);
    while (__stlxr(v287 - 2, v286));
  }
  v288 = a1[107];
  if ((v288 & 7) != 0)
  {
    v289 = (unsigned int *)(v288 & 0xFFFFFFFFFFFFFFF8);
    do
      v290 = __ldxr(v289);
    while (__stlxr(v290 - 2, v289));
  }
  v291 = a1[106];
  if ((v291 & 7) != 0)
  {
    v292 = (unsigned int *)(v291 & 0xFFFFFFFFFFFFFFF8);
    do
      v293 = __ldxr(v292);
    while (__stlxr(v293 - 2, v292));
  }
  v294 = a1[105];
  if ((v294 & 7) != 0)
  {
    v295 = (unsigned int *)(v294 & 0xFFFFFFFFFFFFFFF8);
    do
      v296 = __ldxr(v295);
    while (__stlxr(v296 - 2, v295));
  }
  v297 = a1[104];
  if ((v297 & 7) != 0)
  {
    v298 = (unsigned int *)(v297 & 0xFFFFFFFFFFFFFFF8);
    do
      v299 = __ldxr(v298);
    while (__stlxr(v299 - 2, v298));
  }
  v300 = a1[103];
  if ((v300 & 7) != 0)
  {
    v301 = (unsigned int *)(v300 & 0xFFFFFFFFFFFFFFF8);
    do
      v302 = __ldxr(v301);
    while (__stlxr(v302 - 2, v301));
  }
  v303 = a1[102];
  if ((v303 & 7) != 0)
  {
    v304 = (unsigned int *)(v303 & 0xFFFFFFFFFFFFFFF8);
    do
      v305 = __ldxr(v304);
    while (__stlxr(v305 - 2, v304));
  }
  v306 = a1[101];
  if ((v306 & 7) != 0)
  {
    v307 = (unsigned int *)(v306 & 0xFFFFFFFFFFFFFFF8);
    do
      v308 = __ldxr(v307);
    while (__stlxr(v308 - 2, v307));
  }
  v309 = a1[100];
  if ((v309 & 7) != 0)
  {
    v310 = (unsigned int *)(v309 & 0xFFFFFFFFFFFFFFF8);
    do
      v311 = __ldxr(v310);
    while (__stlxr(v311 - 2, v310));
  }
  v312 = a1[99];
  if ((v312 & 7) != 0)
  {
    v313 = (unsigned int *)(v312 & 0xFFFFFFFFFFFFFFF8);
    do
      v314 = __ldxr(v313);
    while (__stlxr(v314 - 2, v313));
  }
  v315 = a1[98];
  if ((v315 & 7) != 0)
  {
    v316 = (unsigned int *)(v315 & 0xFFFFFFFFFFFFFFF8);
    do
      v317 = __ldxr(v316);
    while (__stlxr(v317 - 2, v316));
  }
  v318 = a1[97];
  if ((v318 & 7) != 0)
  {
    v319 = (unsigned int *)(v318 & 0xFFFFFFFFFFFFFFF8);
    do
      v320 = __ldxr(v319);
    while (__stlxr(v320 - 2, v319));
  }
  v321 = a1[96];
  if ((v321 & 7) != 0)
  {
    v322 = (unsigned int *)(v321 & 0xFFFFFFFFFFFFFFF8);
    do
      v323 = __ldxr(v322);
    while (__stlxr(v323 - 2, v322));
  }
  v324 = a1[95];
  if ((v324 & 7) != 0)
  {
    v325 = (unsigned int *)(v324 & 0xFFFFFFFFFFFFFFF8);
    do
      v326 = __ldxr(v325);
    while (__stlxr(v326 - 2, v325));
  }
  v327 = a1[94];
  if ((v327 & 7) != 0)
  {
    v328 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFFFF8);
    do
      v329 = __ldxr(v328);
    while (__stlxr(v329 - 2, v328));
  }
  v330 = a1[93];
  if ((v330 & 7) != 0)
  {
    v331 = (unsigned int *)(v330 & 0xFFFFFFFFFFFFFFF8);
    do
      v332 = __ldxr(v331);
    while (__stlxr(v332 - 2, v331));
  }
  v333 = a1[92];
  if ((v333 & 7) != 0)
  {
    v334 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFFFF8);
    do
      v335 = __ldxr(v334);
    while (__stlxr(v335 - 2, v334));
  }
  v336 = a1[91];
  if ((v336 & 7) != 0)
  {
    v337 = (unsigned int *)(v336 & 0xFFFFFFFFFFFFFFF8);
    do
      v338 = __ldxr(v337);
    while (__stlxr(v338 - 2, v337));
  }
  v339 = a1[90];
  if ((v339 & 7) != 0)
  {
    v340 = (unsigned int *)(v339 & 0xFFFFFFFFFFFFFFF8);
    do
      v341 = __ldxr(v340);
    while (__stlxr(v341 - 2, v340));
  }
  v342 = a1[89];
  if ((v342 & 7) != 0)
  {
    v343 = (unsigned int *)(v342 & 0xFFFFFFFFFFFFFFF8);
    do
      v344 = __ldxr(v343);
    while (__stlxr(v344 - 2, v343));
  }
  v345 = a1[88];
  if ((v345 & 7) != 0)
  {
    v346 = (unsigned int *)(v345 & 0xFFFFFFFFFFFFFFF8);
    do
      v347 = __ldxr(v346);
    while (__stlxr(v347 - 2, v346));
  }
  v348 = a1[87];
  if ((v348 & 7) != 0)
  {
    v349 = (unsigned int *)(v348 & 0xFFFFFFFFFFFFFFF8);
    do
      v350 = __ldxr(v349);
    while (__stlxr(v350 - 2, v349));
  }
  v351 = a1[86];
  if ((v351 & 7) != 0)
  {
    v352 = (unsigned int *)(v351 & 0xFFFFFFFFFFFFFFF8);
    do
      v353 = __ldxr(v352);
    while (__stlxr(v353 - 2, v352));
  }
  v354 = a1[85];
  if ((v354 & 7) != 0)
  {
    v355 = (unsigned int *)(v354 & 0xFFFFFFFFFFFFFFF8);
    do
      v356 = __ldxr(v355);
    while (__stlxr(v356 - 2, v355));
  }
  v357 = a1[84];
  if ((v357 & 7) != 0)
  {
    v358 = (unsigned int *)(v357 & 0xFFFFFFFFFFFFFFF8);
    do
      v359 = __ldxr(v358);
    while (__stlxr(v359 - 2, v358));
  }
  v360 = a1[83];
  if ((v360 & 7) != 0)
  {
    v361 = (unsigned int *)(v360 & 0xFFFFFFFFFFFFFFF8);
    do
      v362 = __ldxr(v361);
    while (__stlxr(v362 - 2, v361));
  }
  v363 = a1[82];
  if ((v363 & 7) != 0)
  {
    v364 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFFFF8);
    do
      v365 = __ldxr(v364);
    while (__stlxr(v365 - 2, v364));
  }
  v366 = a1[81];
  if ((v366 & 7) != 0)
  {
    v367 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFF8);
    do
      v368 = __ldxr(v367);
    while (__stlxr(v368 - 2, v367));
  }
  v369 = a1[80];
  if ((v369 & 7) != 0)
  {
    v370 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
    do
      v371 = __ldxr(v370);
    while (__stlxr(v371 - 2, v370));
  }
  v372 = a1[79];
  if ((v372 & 7) != 0)
  {
    v373 = (unsigned int *)(v372 & 0xFFFFFFFFFFFFFFF8);
    do
      v374 = __ldxr(v373);
    while (__stlxr(v374 - 2, v373));
  }
  v375 = a1[78];
  if ((v375 & 7) != 0)
  {
    v376 = (unsigned int *)(v375 & 0xFFFFFFFFFFFFFFF8);
    do
      v377 = __ldxr(v376);
    while (__stlxr(v377 - 2, v376));
  }
  v378 = a1[77];
  if ((v378 & 7) != 0)
  {
    v379 = (unsigned int *)(v378 & 0xFFFFFFFFFFFFFFF8);
    do
      v380 = __ldxr(v379);
    while (__stlxr(v380 - 2, v379));
  }
  v381 = a1[76];
  if ((v381 & 7) != 0)
  {
    v382 = (unsigned int *)(v381 & 0xFFFFFFFFFFFFFFF8);
    do
      v383 = __ldxr(v382);
    while (__stlxr(v383 - 2, v382));
  }
  v384 = a1[75];
  if ((v384 & 7) != 0)
  {
    v385 = (unsigned int *)(v384 & 0xFFFFFFFFFFFFFFF8);
    do
      v386 = __ldxr(v385);
    while (__stlxr(v386 - 2, v385));
  }
  v387 = a1[74];
  if ((v387 & 7) != 0)
  {
    v388 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
    do
      v389 = __ldxr(v388);
    while (__stlxr(v389 - 2, v388));
  }
  v390 = a1[73];
  if ((v390 & 7) != 0)
  {
    v391 = (unsigned int *)(v390 & 0xFFFFFFFFFFFFFFF8);
    do
      v392 = __ldxr(v391);
    while (__stlxr(v392 - 2, v391));
  }
  v393 = a1[72];
  if ((v393 & 7) != 0)
  {
    v394 = (unsigned int *)(v393 & 0xFFFFFFFFFFFFFFF8);
    do
      v395 = __ldxr(v394);
    while (__stlxr(v395 - 2, v394));
  }
  v396 = a1[71];
  if ((v396 & 7) != 0)
  {
    v397 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
    do
      v398 = __ldxr(v397);
    while (__stlxr(v398 - 2, v397));
  }
  v399 = a1[70];
  if ((v399 & 7) != 0)
  {
    v400 = (unsigned int *)(v399 & 0xFFFFFFFFFFFFFFF8);
    do
      v401 = __ldxr(v400);
    while (__stlxr(v401 - 2, v400));
  }
  v402 = a1[69];
  if ((v402 & 7) != 0)
  {
    v403 = (unsigned int *)(v402 & 0xFFFFFFFFFFFFFFF8);
    do
      v404 = __ldxr(v403);
    while (__stlxr(v404 - 2, v403));
  }
  v405 = a1[68];
  if ((v405 & 7) != 0)
  {
    v406 = (unsigned int *)(v405 & 0xFFFFFFFFFFFFFFF8);
    do
      v407 = __ldxr(v406);
    while (__stlxr(v407 - 2, v406));
  }
  v408 = a1[67];
  if ((v408 & 7) != 0)
  {
    v409 = (unsigned int *)(v408 & 0xFFFFFFFFFFFFFFF8);
    do
      v410 = __ldxr(v409);
    while (__stlxr(v410 - 2, v409));
  }
  v411 = a1[66];
  if ((v411 & 7) != 0)
  {
    v412 = (unsigned int *)(v411 & 0xFFFFFFFFFFFFFFF8);
    do
      v413 = __ldxr(v412);
    while (__stlxr(v413 - 2, v412));
  }
  v414 = a1[65];
  if ((v414 & 7) != 0)
  {
    v415 = (unsigned int *)(v414 & 0xFFFFFFFFFFFFFFF8);
    do
      v416 = __ldxr(v415);
    while (__stlxr(v416 - 2, v415));
  }
  v417 = a1[64];
  if ((v417 & 7) != 0)
  {
    v418 = (unsigned int *)(v417 & 0xFFFFFFFFFFFFFFF8);
    do
      v419 = __ldxr(v418);
    while (__stlxr(v419 - 2, v418));
  }
  v420 = a1[63];
  if ((v420 & 7) != 0)
  {
    v421 = (unsigned int *)(v420 & 0xFFFFFFFFFFFFFFF8);
    do
      v422 = __ldxr(v421);
    while (__stlxr(v422 - 2, v421));
  }
  v423 = a1[62];
  if ((v423 & 7) != 0)
  {
    v424 = (unsigned int *)(v423 & 0xFFFFFFFFFFFFFFF8);
    do
      v425 = __ldxr(v424);
    while (__stlxr(v425 - 2, v424));
  }
  v426 = a1[61];
  if ((v426 & 7) != 0)
  {
    v427 = (unsigned int *)(v426 & 0xFFFFFFFFFFFFFFF8);
    do
      v428 = __ldxr(v427);
    while (__stlxr(v428 - 2, v427));
  }
  v429 = a1[60];
  if ((v429 & 7) != 0)
  {
    v430 = (unsigned int *)(v429 & 0xFFFFFFFFFFFFFFF8);
    do
      v431 = __ldxr(v430);
    while (__stlxr(v431 - 2, v430));
  }
  v432 = a1[59];
  if ((v432 & 7) != 0)
  {
    v433 = (unsigned int *)(v432 & 0xFFFFFFFFFFFFFFF8);
    do
      v434 = __ldxr(v433);
    while (__stlxr(v434 - 2, v433));
  }
  v435 = a1[58];
  if ((v435 & 7) != 0)
  {
    v436 = (unsigned int *)(v435 & 0xFFFFFFFFFFFFFFF8);
    do
      v437 = __ldxr(v436);
    while (__stlxr(v437 - 2, v436));
  }
  v438 = a1[57];
  if ((v438 & 7) != 0)
  {
    v439 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v440 = __ldxr(v439);
    while (__stlxr(v440 - 2, v439));
  }
  v441 = a1[56];
  if ((v441 & 7) != 0)
  {
    v442 = (unsigned int *)(v441 & 0xFFFFFFFFFFFFFFF8);
    do
      v443 = __ldxr(v442);
    while (__stlxr(v443 - 2, v442));
  }
  v444 = a1[55];
  if ((v444 & 7) != 0)
  {
    v445 = (unsigned int *)(v444 & 0xFFFFFFFFFFFFFFF8);
    do
      v446 = __ldxr(v445);
    while (__stlxr(v446 - 2, v445));
  }
  v447 = a1[54];
  if ((v447 & 7) != 0)
  {
    v448 = (unsigned int *)(v447 & 0xFFFFFFFFFFFFFFF8);
    do
      v449 = __ldxr(v448);
    while (__stlxr(v449 - 2, v448));
  }
  v450 = a1[53];
  if ((v450 & 7) != 0)
  {
    v451 = (unsigned int *)(v450 & 0xFFFFFFFFFFFFFFF8);
    do
      v452 = __ldxr(v451);
    while (__stlxr(v452 - 2, v451));
  }
  v453 = a1[52];
  if ((v453 & 7) != 0)
  {
    v454 = (unsigned int *)(v453 & 0xFFFFFFFFFFFFFFF8);
    do
      v455 = __ldxr(v454);
    while (__stlxr(v455 - 2, v454));
  }
  v456 = a1[51];
  if ((v456 & 7) != 0)
  {
    v457 = (unsigned int *)(v456 & 0xFFFFFFFFFFFFFFF8);
    do
      v458 = __ldxr(v457);
    while (__stlxr(v458 - 2, v457));
  }
  v459 = a1[50];
  if ((v459 & 7) != 0)
  {
    v460 = (unsigned int *)(v459 & 0xFFFFFFFFFFFFFFF8);
    do
      v461 = __ldxr(v460);
    while (__stlxr(v461 - 2, v460));
  }
  v462 = a1[49];
  if ((v462 & 7) != 0)
  {
    v463 = (unsigned int *)(v462 & 0xFFFFFFFFFFFFFFF8);
    do
      v464 = __ldxr(v463);
    while (__stlxr(v464 - 2, v463));
  }
  v465 = a1[48];
  if ((v465 & 7) != 0)
  {
    v466 = (unsigned int *)(v465 & 0xFFFFFFFFFFFFFFF8);
    do
      v467 = __ldxr(v466);
    while (__stlxr(v467 - 2, v466));
  }
  v468 = a1[47];
  if ((v468 & 7) != 0)
  {
    v469 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
    do
      v470 = __ldxr(v469);
    while (__stlxr(v470 - 2, v469));
  }
  v471 = a1[46];
  if ((v471 & 7) != 0)
  {
    v472 = (unsigned int *)(v471 & 0xFFFFFFFFFFFFFFF8);
    do
      v473 = __ldxr(v472);
    while (__stlxr(v473 - 2, v472));
  }
  v474 = a1[45];
  if ((v474 & 7) != 0)
  {
    v475 = (unsigned int *)(v474 & 0xFFFFFFFFFFFFFFF8);
    do
      v476 = __ldxr(v475);
    while (__stlxr(v476 - 2, v475));
  }
  v477 = a1[44];
  if ((v477 & 7) != 0)
  {
    v478 = (unsigned int *)(v477 & 0xFFFFFFFFFFFFFFF8);
    do
      v479 = __ldxr(v478);
    while (__stlxr(v479 - 2, v478));
  }
  v480 = a1[43];
  if ((v480 & 7) != 0)
  {
    v481 = (unsigned int *)(v480 & 0xFFFFFFFFFFFFFFF8);
    do
      v482 = __ldxr(v481);
    while (__stlxr(v482 - 2, v481));
  }
  v483 = a1[42];
  if ((v483 & 7) != 0)
  {
    v484 = (unsigned int *)(v483 & 0xFFFFFFFFFFFFFFF8);
    do
      v485 = __ldxr(v484);
    while (__stlxr(v485 - 2, v484));
  }
  v486 = a1[41];
  if ((v486 & 7) != 0)
  {
    v487 = (unsigned int *)(v486 & 0xFFFFFFFFFFFFFFF8);
    do
      v488 = __ldxr(v487);
    while (__stlxr(v488 - 2, v487));
  }
  v489 = a1[40];
  if ((v489 & 7) != 0)
  {
    v490 = (unsigned int *)(v489 & 0xFFFFFFFFFFFFFFF8);
    do
      v491 = __ldxr(v490);
    while (__stlxr(v491 - 2, v490));
  }
  v492 = a1[39];
  if ((v492 & 7) != 0)
  {
    v493 = (unsigned int *)(v492 & 0xFFFFFFFFFFFFFFF8);
    do
      v494 = __ldxr(v493);
    while (__stlxr(v494 - 2, v493));
  }
  v495 = a1[38];
  if ((v495 & 7) != 0)
  {
    v496 = (unsigned int *)(v495 & 0xFFFFFFFFFFFFFFF8);
    do
      v497 = __ldxr(v496);
    while (__stlxr(v497 - 2, v496));
  }
  v498 = a1[37];
  if ((v498 & 7) != 0)
  {
    v499 = (unsigned int *)(v498 & 0xFFFFFFFFFFFFFFF8);
    do
      v500 = __ldxr(v499);
    while (__stlxr(v500 - 2, v499));
  }
  v501 = a1[36];
  if ((v501 & 7) != 0)
  {
    v502 = (unsigned int *)(v501 & 0xFFFFFFFFFFFFFFF8);
    do
      v503 = __ldxr(v502);
    while (__stlxr(v503 - 2, v502));
  }
  v504 = a1[35];
  if ((v504 & 7) != 0)
  {
    v505 = (unsigned int *)(v504 & 0xFFFFFFFFFFFFFFF8);
    do
      v506 = __ldxr(v505);
    while (__stlxr(v506 - 2, v505));
  }
  v507 = a1[34];
  if ((v507 & 7) != 0)
  {
    v508 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
    do
      v509 = __ldxr(v508);
    while (__stlxr(v509 - 2, v508));
  }
  v510 = a1[33];
  if ((v510 & 7) != 0)
  {
    v511 = (unsigned int *)(v510 & 0xFFFFFFFFFFFFFFF8);
    do
      v512 = __ldxr(v511);
    while (__stlxr(v512 - 2, v511));
  }
  v513 = a1[32];
  if ((v513 & 7) != 0)
  {
    v514 = (unsigned int *)(v513 & 0xFFFFFFFFFFFFFFF8);
    do
      v515 = __ldxr(v514);
    while (__stlxr(v515 - 2, v514));
  }
  v516 = a1[31];
  if ((v516 & 7) != 0)
  {
    v517 = (unsigned int *)(v516 & 0xFFFFFFFFFFFFFFF8);
    do
      v518 = __ldxr(v517);
    while (__stlxr(v518 - 2, v517));
  }
  v519 = a1[30];
  if ((v519 & 7) != 0)
  {
    v520 = (unsigned int *)(v519 & 0xFFFFFFFFFFFFFFF8);
    do
      v521 = __ldxr(v520);
    while (__stlxr(v521 - 2, v520));
  }
  v522 = a1[29];
  if ((v522 & 7) != 0)
  {
    v523 = (unsigned int *)(v522 & 0xFFFFFFFFFFFFFFF8);
    do
      v524 = __ldxr(v523);
    while (__stlxr(v524 - 2, v523));
  }
  v525 = a1[28];
  if ((v525 & 7) != 0)
  {
    v526 = (unsigned int *)(v525 & 0xFFFFFFFFFFFFFFF8);
    do
      v527 = __ldxr(v526);
    while (__stlxr(v527 - 2, v526));
  }
  v528 = a1[27];
  if ((v528 & 7) != 0)
  {
    v529 = (unsigned int *)(v528 & 0xFFFFFFFFFFFFFFF8);
    do
      v530 = __ldxr(v529);
    while (__stlxr(v530 - 2, v529));
  }
  v531 = a1[26];
  if ((v531 & 7) != 0)
  {
    v532 = (unsigned int *)(v531 & 0xFFFFFFFFFFFFFFF8);
    do
      v533 = __ldxr(v532);
    while (__stlxr(v533 - 2, v532));
  }
  v534 = a1[25];
  if ((v534 & 7) != 0)
  {
    v535 = (unsigned int *)(v534 & 0xFFFFFFFFFFFFFFF8);
    do
      v536 = __ldxr(v535);
    while (__stlxr(v536 - 2, v535));
  }
  v537 = a1[24];
  if ((v537 & 7) != 0)
  {
    v538 = (unsigned int *)(v537 & 0xFFFFFFFFFFFFFFF8);
    do
      v539 = __ldxr(v538);
    while (__stlxr(v539 - 2, v538));
  }
  v540 = a1[23];
  if ((v540 & 7) != 0)
  {
    v541 = (unsigned int *)(v540 & 0xFFFFFFFFFFFFFFF8);
    do
      v542 = __ldxr(v541);
    while (__stlxr(v542 - 2, v541));
  }
  v543 = a1[22];
  if ((v543 & 7) != 0)
  {
    v544 = (unsigned int *)(v543 & 0xFFFFFFFFFFFFFFF8);
    do
      v545 = __ldxr(v544);
    while (__stlxr(v545 - 2, v544));
  }
  v546 = a1[21];
  if ((v546 & 7) != 0)
  {
    v547 = (unsigned int *)(v546 & 0xFFFFFFFFFFFFFFF8);
    do
      v548 = __ldxr(v547);
    while (__stlxr(v548 - 2, v547));
  }
  v549 = a1[20];
  if ((v549 & 7) != 0)
  {
    v550 = (unsigned int *)(v549 & 0xFFFFFFFFFFFFFFF8);
    do
      v551 = __ldxr(v550);
    while (__stlxr(v551 - 2, v550));
  }
  v552 = a1[19];
  if ((v552 & 7) != 0)
  {
    v553 = (unsigned int *)(v552 & 0xFFFFFFFFFFFFFFF8);
    do
      v554 = __ldxr(v553);
    while (__stlxr(v554 - 2, v553));
  }
  v555 = a1[18];
  if ((v555 & 7) != 0)
  {
    v556 = (unsigned int *)(v555 & 0xFFFFFFFFFFFFFFF8);
    do
      v557 = __ldxr(v556);
    while (__stlxr(v557 - 2, v556));
  }
  v558 = a1[17];
  if ((v558 & 7) != 0)
  {
    v559 = (unsigned int *)(v558 & 0xFFFFFFFFFFFFFFF8);
    do
      v560 = __ldxr(v559);
    while (__stlxr(v560 - 2, v559));
  }
  v561 = a1[16];
  if ((v561 & 7) != 0)
  {
    v562 = (unsigned int *)(v561 & 0xFFFFFFFFFFFFFFF8);
    do
      v563 = __ldxr(v562);
    while (__stlxr(v563 - 2, v562));
  }
  v564 = a1[15];
  if ((v564 & 7) != 0)
  {
    v565 = (unsigned int *)(v564 & 0xFFFFFFFFFFFFFFF8);
    do
      v566 = __ldxr(v565);
    while (__stlxr(v566 - 2, v565));
  }
  v567 = a1[14];
  if ((v567 & 7) != 0)
  {
    v568 = (unsigned int *)(v567 & 0xFFFFFFFFFFFFFFF8);
    do
      v569 = __ldxr(v568);
    while (__stlxr(v569 - 2, v568));
  }
  v570 = a1[13];
  if ((v570 & 7) != 0)
  {
    v571 = (unsigned int *)(v570 & 0xFFFFFFFFFFFFFFF8);
    do
      v572 = __ldxr(v571);
    while (__stlxr(v572 - 2, v571));
  }
  v573 = a1[12];
  if ((v573 & 7) != 0)
  {
    v574 = (unsigned int *)(v573 & 0xFFFFFFFFFFFFFFF8);
    do
      v575 = __ldxr(v574);
    while (__stlxr(v575 - 2, v574));
  }
  v576 = a1[11];
  if ((v576 & 7) != 0)
  {
    v577 = (unsigned int *)(v576 & 0xFFFFFFFFFFFFFFF8);
    do
      v578 = __ldxr(v577);
    while (__stlxr(v578 - 2, v577));
  }
  v579 = a1[10];
  if ((v579 & 7) != 0)
  {
    v580 = (unsigned int *)(v579 & 0xFFFFFFFFFFFFFFF8);
    do
      v581 = __ldxr(v580);
    while (__stlxr(v581 - 2, v580));
  }
  v582 = a1[9];
  if ((v582 & 7) != 0)
  {
    v583 = (unsigned int *)(v582 & 0xFFFFFFFFFFFFFFF8);
    do
      v584 = __ldxr(v583);
    while (__stlxr(v584 - 2, v583));
  }
  v585 = a1[8];
  if ((v585 & 7) != 0)
  {
    v586 = (unsigned int *)(v585 & 0xFFFFFFFFFFFFFFF8);
    do
      v587 = __ldxr(v586);
    while (__stlxr(v587 - 2, v586));
  }
  v588 = a1[7];
  if ((v588 & 7) != 0)
  {
    v589 = (unsigned int *)(v588 & 0xFFFFFFFFFFFFFFF8);
    do
      v590 = __ldxr(v589);
    while (__stlxr(v590 - 2, v589));
  }
  v591 = a1[6];
  if ((v591 & 7) != 0)
  {
    v592 = (unsigned int *)(v591 & 0xFFFFFFFFFFFFFFF8);
    do
      v593 = __ldxr(v592);
    while (__stlxr(v593 - 2, v592));
  }
  v594 = a1[5];
  if ((v594 & 7) != 0)
  {
    v595 = (unsigned int *)(v594 & 0xFFFFFFFFFFFFFFF8);
    do
      v596 = __ldxr(v595);
    while (__stlxr(v596 - 2, v595));
  }
  v597 = a1[4];
  if ((v597 & 7) != 0)
  {
    v598 = (unsigned int *)(v597 & 0xFFFFFFFFFFFFFFF8);
    do
      v599 = __ldxr(v598);
    while (__stlxr(v599 - 2, v598));
  }
  v600 = a1[3];
  if ((v600 & 7) != 0)
  {
    v601 = (unsigned int *)(v600 & 0xFFFFFFFFFFFFFFF8);
    do
      v602 = __ldxr(v601);
    while (__stlxr(v602 - 2, v601));
  }
  v603 = a1[2];
  if ((v603 & 7) != 0)
  {
    v604 = (unsigned int *)(v603 & 0xFFFFFFFFFFFFFFF8);
    do
      v605 = __ldxr(v604);
    while (__stlxr(v605 - 2, v604));
  }
  v606 = a1[1];
  if ((v606 & 7) != 0)
  {
    v607 = (unsigned int *)(v606 & 0xFFFFFFFFFFFFFFF8);
    do
      v608 = __ldxr(v607);
    while (__stlxr(v608 - 2, v607));
  }
  if ((*a1 & 7) != 0)
  {
    v609 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v610 = __ldxr(v609);
    while (__stlxr(v610 - 2, v609));
  }
  return a1;
}

_QWORD *sub_239A16FE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;

  v2 = a1[38];
  if (v2)
  {
    v3 = a1[39];
    v4 = (void *)a1[38];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = (void *)a1[38];
    }
    a1[39] = v2;
    operator delete(v4);
  }
  v9 = a1[37];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = a1[36];
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v15 = a1[35];
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v18 = a1[34];
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = a1[33];
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  v24 = a1[32];
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  v27 = a1[31];
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = a1[30];
  if ((v30 & 7) != 0)
  {
    v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  v33 = a1[29];
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  v36 = a1[28];
  if ((v36 & 7) != 0)
  {
    v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  v39 = a1[27];
  if ((v39 & 7) != 0)
  {
    v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  v42 = a1[26];
  if ((v42 & 7) != 0)
  {
    v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  v45 = a1[25];
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  v48 = a1[24];
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  v51 = a1[23];
  if ((v51 & 7) != 0)
  {
    v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  v54 = a1[22];
  if ((v54 & 7) != 0)
  {
    v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  v57 = a1[21];
  if ((v57 & 7) != 0)
  {
    v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  v60 = a1[20];
  if ((v60 & 7) != 0)
  {
    v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v63 = a1[19];
  if ((v63 & 7) != 0)
  {
    v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 - 2, v64));
  }
  v66 = a1[18];
  if ((v66 & 7) != 0)
  {
    v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  v69 = a1[17];
  if ((v69 & 7) != 0)
  {
    v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stlxr(v71 - 2, v70));
  }
  v72 = a1[16];
  if ((v72 & 7) != 0)
  {
    v73 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  v75 = a1[15];
  if ((v75 & 7) != 0)
  {
    v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  v78 = a1[14];
  if ((v78 & 7) != 0)
  {
    v79 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  v81 = a1[13];
  if ((v81 & 7) != 0)
  {
    v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  v84 = a1[12];
  if ((v84 & 7) != 0)
  {
    v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  v87 = a1[11];
  if ((v87 & 7) != 0)
  {
    v88 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
    do
      v89 = __ldxr(v88);
    while (__stlxr(v89 - 2, v88));
  }
  v90 = a1[10];
  if ((v90 & 7) != 0)
  {
    v91 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
    do
      v92 = __ldxr(v91);
    while (__stlxr(v92 - 2, v91));
  }
  v93 = a1[9];
  if ((v93 & 7) != 0)
  {
    v94 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  v96 = a1[8];
  if ((v96 & 7) != 0)
  {
    v97 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
    do
      v98 = __ldxr(v97);
    while (__stlxr(v98 - 2, v97));
  }
  v99 = a1[7];
  if ((v99 & 7) != 0)
  {
    v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
    do
      v101 = __ldxr(v100);
    while (__stlxr(v101 - 2, v100));
  }
  v102 = a1[6];
  if ((v102 & 7) != 0)
  {
    v103 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  v105 = a1[5];
  if ((v105 & 7) != 0)
  {
    v106 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
    do
      v107 = __ldxr(v106);
    while (__stlxr(v107 - 2, v106));
  }
  v108 = a1[4];
  if ((v108 & 7) != 0)
  {
    v109 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  v111 = a1[3];
  if ((v111 & 7) != 0)
  {
    v112 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v113 = __ldxr(v112);
    while (__stlxr(v113 - 2, v112));
  }
  v114 = a1[2];
  if ((v114 & 7) != 0)
  {
    v115 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
    do
      v116 = __ldxr(v115);
    while (__stlxr(v116 - 2, v115));
  }
  v117 = a1[1];
  if ((v117 & 7) != 0)
  {
    v118 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  if ((*a1 & 7) != 0)
  {
    v120 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  return a1;
}

uint64_t sub_239A17518(unint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t i;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;

  if (!a2)
    return 1;
  v3 = a1 >> 16;
  v4 = (unsigned __int16)a1;
  if (a3)
  {
    for (i = a3 % 0x15B0; i < 8; i = 5552)
    {
      v22 = i;
      if (i)
        goto LABEL_12;
LABEL_4:
      v4 %= 0xFFF1u;
      LODWORD(v3) = v3 % 0xFFF1;
      a3 -= i;
      if (!a3)
        return v4 | ((_DWORD)v3 << 16);
    }
    v6 = 0;
    do
    {
      v7 = v4 + a2[v6];
      v8 = v7 + v3;
      v9 = v7 + a2[v6 + 1];
      v10 = v8 + v9;
      v11 = v9 + a2[v6 + 2];
      v12 = v10 + v11;
      v13 = v11 + a2[v6 + 3];
      v14 = v12 + v13;
      v15 = v13 + a2[v6 + 4];
      v16 = v14 + v15;
      v17 = v15 + a2[v6 + 5];
      v18 = v16 + v17;
      v19 = v17 + a2[v6 + 6];
      v20 = v18 + v19;
      v4 = v19 + a2[v6 + 7];
      LODWORD(v3) = v20 + v4;
      v6 += 8;
    }
    while ((int)v6 + 7 < i);
    a2 += v6;
    v21 = i >= v6;
    v22 = i - v6;
    if (v22 == 0 || !v21)
      goto LABEL_4;
LABEL_12:
    v23 = v22;
    v24 = a2;
    do
    {
      v25 = *v24++;
      v4 += v25;
      LODWORD(v3) = v4 + v3;
      --v23;
    }
    while (v23);
    a2 += v22;
    goto LABEL_4;
  }
  return v4 | ((_DWORD)v3 << 16);
}

void *sub_239A17654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return malloc_type_malloc(a3 * a2, 0xE563D92BuLL);
}

void sub_239A17664(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_239A1766C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v31[7];

  v4 = 4294967294;
  if (a1)
  {
    if (a2 <= 4)
    {
      v31[5] = v2;
      v31[6] = v3;
      v6 = *(_QWORD *)(a1 + 56);
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 24);
        if (v7)
        {
          v8 = *(_DWORD *)(a1 + 32);
          if (!v8)
            return 4294967291;
          if (a2 == 1)
            v9 = 2;
          else
            v9 = a2;
          if (*(_DWORD *)(v6 + 132) == 1)
          {
            if (v9 == 4)
              return 1;
            else
              return 4294967291;
          }
          v10 = *(_DWORD *)(a1 + 8);
          v11 = *(unsigned __int8 **)a1;
          if (v9 == 4)
          {
            while (1)
            {
              v30 = v8;
              v31[0] = v10;
              v4 = sub_239A17864(v6, v11, v31, v7, (unint64_t)&v30, 4);
              v12 = v31[0];
              v13 = LODWORD(v31[0]);
              v11 = (unsigned __int8 *)(*(_QWORD *)a1 + LODWORD(v31[0]));
              *(_QWORD *)a1 = v11;
              v10 = *(_DWORD *)(a1 + 8) - v12;
              *(_DWORD *)(a1 + 8) = v10;
              v14 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 16) += v13;
              v6 = *(_QWORD *)(a1 + 56);
              *(_QWORD *)(a1 + 96) = *(unsigned int *)(v6 + 32);
              v15 = v30;
              v16 = v30;
              v7 = v14 + v30;
              *(_QWORD *)(a1 + 24) = v7;
              v17 = *(_DWORD *)(a1 + 32);
              v8 = v17 - v15;
              *(_DWORD *)(a1 + 32) = v17 - v15;
              *(_QWORD *)(a1 + 40) += v16;
              if ((v4 & 0x80000000) != 0)
                break;
              if ((_DWORD)v4 != 1)
              {
                v4 = 0;
                if (v17 != v15)
                  continue;
              }
              return v4;
            }
          }
          else
          {
            v18 = *(_QWORD *)(a1 + 16);
            v19 = *(_QWORD *)(a1 + 40);
            while (1)
            {
              v30 = v8;
              v31[0] = v10;
              v4 = sub_239A17864(v6, v11, v31, v7, (unint64_t)&v30, v9);
              v21 = v30;
              v20 = v31[0];
              v22 = LODWORD(v31[0]);
              v11 = (unsigned __int8 *)(*(_QWORD *)a1 + LODWORD(v31[0]));
              *(_QWORD *)a1 = v11;
              v23 = *(_DWORD *)(a1 + 8);
              v10 = v23 - v20;
              *(_DWORD *)(a1 + 8) = v23 - v20;
              v24 = *(_QWORD *)(a1 + 24);
              v25 = *(_QWORD *)(a1 + 16) + v22;
              *(_QWORD *)(a1 + 16) = v25;
              v6 = *(_QWORD *)(a1 + 56);
              *(_QWORD *)(a1 + 96) = *(unsigned int *)(v6 + 32);
              v7 = v24 + v21;
              *(_QWORD *)(a1 + 24) = v7;
              v26 = *(_DWORD *)(a1 + 32);
              v8 = v26 - v21;
              *(_DWORD *)(a1 + 32) = v26 - v21;
              v27 = *(_QWORD *)(a1 + 40) + v21;
              *(_QWORD *)(a1 + 40) = v27;
              if ((v4 & 0x80000000) != 0)
                break;
              if ((_DWORD)v4 == 1)
                return v4;
              if (v26 == v21)
                return 0;
              if (v23 == v20)
              {
                if (v9)
                  return 0;
                if (v27 == v19 && v25 == v18)
                  return 4294967291;
                else
                  return 0;
              }
            }
          }
        }
        return 4294967294;
      }
    }
  }
  return v4;
}

uint64_t sub_239A17864(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t result;
  int v11;
  _BOOL4 v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  BOOL v17;

  if (a1)
  {
    *(_QWORD *)(a1 + 136) = a2;
    *(_QWORD *)(a1 + 144) = a4;
    *(_QWORD *)(a1 + 152) = a3;
    *(_QWORD *)(a1 + 160) = a5;
    *(_QWORD *)(a1 + 176) = a2;
    if (a3)
      v9 = *a3;
    else
      v9 = 0;
    *(_QWORD *)(a1 + 184) = v9;
    *(_QWORD *)(a1 + 192) = 0;
    *(_DWORD *)(a1 + 168) = a6;
    if (((a4 | a5) != 0) != (*(_QWORD *)a1 == 0))
      goto LABEL_14;
    if (*(_DWORD *)(a1 + 132))
      goto LABEL_14;
    v11 = *(_DWORD *)(a1 + 128);
    if (a6 != 4)
    {
      if (v11)
        goto LABEL_14;
    }
    if (a3 && !a2 && *a3)
      goto LABEL_15;
    if (a5 && !a4 && *(_QWORD *)a5)
    {
LABEL_14:
      if (!a3)
      {
LABEL_16:
        if (a5)
          *(_QWORD *)a5 = 0;
        result = 4294967294;
        *(_DWORD *)(a1 + 132) = -2;
        return result;
      }
LABEL_15:
      *a3 = 0;
      goto LABEL_16;
    }
    v12 = a6 == 4;
    *(_DWORD *)(a1 + 128) = v11 | v12;
    v13 = *(unsigned int *)(a1 + 116);
    if (!*(_QWORD *)(a1 + 116))
    {
      if (sub_239A17D28(a1))
      {
        if (a2 && (*(_DWORD *)(a1 + 16) & 0x3000) != 0)
          *(_DWORD *)(a1 + 32) = sub_239A17518(*(unsigned int *)(a1 + 32), a2, *(_QWORD *)(a1 + 176) - (_QWORD)a2);
        if (!a6 || *(_DWORD *)(a1 + 40) || *(_QWORD *)(a1 + 184) || *(_DWORD *)(a1 + 116))
          goto LABEL_50;
        if ((sub_239A186B0(a1, a6) & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 120) = v12;
          if (a6 == 3)
          {
            *(_DWORD *)(a1 + 44) = 0;
            bzero((void *)(a1 + 103082), 0x20000uLL);
          }
LABEL_50:
          result = sub_239A17C70(a1);
          *(_DWORD *)(a1 + 132) = result;
          return result;
        }
      }
      return *(unsigned int *)(a1 + 132);
    }
    if (a3)
      *a3 = 0;
    if (a5)
    {
      v14 = *(_QWORD *)(a1 + 192);
      if (*(_QWORD *)a5 - v14 >= v13)
        v15 = v13;
      else
        v15 = *(_QWORD *)a5 - v14;
      memcpy((void *)(a4 + v14), (const void *)(a1 + 234154 + *(unsigned int *)(a1 + 112)), v15);
      LODWORD(v13) = *(_DWORD *)(a1 + 116) - v15;
      *(_DWORD *)(a1 + 112) += v15;
      *(_DWORD *)(a1 + 116) = v13;
      v16 = *(_QWORD *)(a1 + 192) + v15;
      *(_QWORD *)(a1 + 192) = v16;
      **(_QWORD **)(a1 + 160) = v16;
    }
    if (*(_DWORD *)(a1 + 120))
      v17 = (_DWORD)v13 == 0;
    else
      v17 = 0;
    result = v17;
    *(_DWORD *)(a1 + 132) = result;
  }
  else
  {
    if (a3)
      *a3 = 0;
    if (a5)
      *(_QWORD *)a5 = 0;
    return 4294967294;
  }
  return result;
}

uint64_t sub_239A17AB8(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  v18 = 0;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v4 = *a2;
  if ((*a2 | a4) >> 32)
    return 4294957296;
  v12 = a3;
  LODWORD(v13) = a4;
  *(_QWORD *)&v14 = a1;
  DWORD2(v14) = v4;
  v19 = xmmword_239F0B2A0;
  v15 = 0uLL;
  *((_QWORD *)&v16 + 1) = sub_239A17654;
  *(_QWORD *)&v17 = sub_239A17664;
  v7 = malloc_type_malloc(0x4DF78uLL, 0xE563D92BuLL);
  if (!v7)
    return 4294967292;
  v8 = v7;
  *(_QWORD *)&v16 = v7;
  *v7 = 0;
  v7[1] = 0;
  *((_OWORD *)v7 + 1) = xmmword_239F0B2B0;
  bzero((char *)v7 + 168618, 0x10000uLL);
  *(_QWORD *)((char *)v8 + 92) = 0;
  *(_QWORD *)((char *)v8 + 84) = 0;
  v8[15] = 0;
  v8[16] = 0;
  v8[13] = 0;
  v8[14] = 0;
  v8[6] = (char *)v8 + 37547;
  v8[7] = (char *)v8 + 37546;
  *((_DWORD *)v8 + 20) = 8;
  v8[8] = (char *)v8 + 234154;
  v8[9] = (char *)v8 + 234154;
  *((_DWORD *)v8 + 25) = 0;
  *((_OWORD *)v8 + 2) = xmmword_239F0B2A0;
  *(_OWORD *)(v8 + 17) = 0u;
  *(_OWORD *)(v8 + 19) = 0u;
  *((_DWORD *)v8 + 42) = 0;
  v8[22] = 0;
  v8[23] = 0;
  v8[24] = 0;
  bzero((char *)v8 + 33226, 0x280uLL);
  v9 = sub_239A1766C((uint64_t)&v12, 4u);
  if (v9 == 1)
  {
    v10 = v16;
    *a2 = v15;
    if (v10)
      ((void (*)(_QWORD))v17)(*((_QWORD *)&v17 + 1));
    return 0;
  }
  else
  {
    v11 = v9;
    if ((_QWORD)v16)
      ((void (*)(_QWORD))v17)(*((_QWORD *)&v17 + 1));
    if (v11)
      return v11;
    else
      return 4294967291;
  }
}

BOOL sub_239A17C70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  int v7;
  size_t v8;

  v2 = *(_QWORD **)(a1 + 152);
  if (v2)
    *v2 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD **)(a1 + 160);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 192);
    v5 = *v3 - v4;
    if (v5 >= *(unsigned int *)(a1 + 116))
      v6 = *(unsigned int *)(a1 + 116);
    else
      v6 = v5;
    memcpy((void *)(*(_QWORD *)(a1 + 144) + v4), (const void *)(a1 + 234154 + *(unsigned int *)(a1 + 112)), v6);
    v7 = *(_DWORD *)(a1 + 116) - v6;
    *(_DWORD *)(a1 + 112) += v6;
    *(_DWORD *)(a1 + 116) = v7;
    v8 = *(_QWORD *)(a1 + 192) + v6;
    *(_QWORD *)(a1 + 192) = v8;
    **(_QWORD **)(a1 + 160) = v8;
  }
  return *(_DWORD *)(a1 + 120) && *(_DWORD *)(a1 + 116) == 0;
}

BOOL sub_239A17D28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  __int16 v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  _BYTE *v54;
  int v55;
  unint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  _BYTE *v71;
  int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  int v86;

  v2 = a1 + 200;
  v3 = a1 + 33226;
  v4 = *(unsigned __int8 **)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 184);
  v86 = a1 + 37546;
  v6 = *(_DWORD *)(a1 + 168);
  v7 = a1 + 103074;
  while (!v5)
  {
    if (!v6 || (v12 = *(_DWORD *)(a1 + 40)) == 0)
    {
      v5 = 0;
      goto LABEL_149;
    }
    v9 = *(_DWORD *)(a1 + 44);
    if (v9 + v12 <= 1)
    {
      v5 = 0;
      goto LABEL_34;
    }
    v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
    LODWORD(v18) = *(_DWORD *)(a1 + 36) + v10;
    v19 = v18 - 2;
    v20 = *(unsigned __int8 *)(a1 + 200 + (((_DWORD)v18 - 2) & 0x7FFF));
    v21 = *(unsigned __int8 *)(a1 + 200 + ((*(_WORD *)(a1 + 36) + (_WORD)v10 - 1) & 0x7FFF));
    if (v5 >= 258 - v10)
      v22 = 258 - v10;
    else
      v22 = v5;
    v5 -= v22;
    v12 = v10 + v22;
    *(_DWORD *)(a1 + 40) = v10 + v22;
    if (v22)
    {
      v23 = &v4[v22];
      LOWORD(v24) = v21 ^ (32 * v20);
      do
      {
        v18 &= 0x7FFFu;
        v27 = *v4++;
        v26 = v27;
        *(_BYTE *)(a1 + v18 + 200) = v27;
        if (v18 <= 0x100)
          *(_BYTE *)(a1 + (v18 | 0x8000) + 200) = v26;
        v24 = (32 * (v24 & 0x3FF)) ^ v26;
        v25 = a1 + 2 * v24;
        *(_WORD *)(a1 + 2 * (v19 & 0x7FFF) + 103082) = *(_WORD *)(v25 + 168618);
        *(_WORD *)(v25 + 168618) = v19;
        LOWORD(v18) = v18 + 1;
        ++v19;
        --v22;
      }
      while (v22);
      v4 = v23;
      if (0x8000 - v12 >= v9)
        v28 = v9;
      else
        v28 = 0x8000 - v12;
      *(_DWORD *)(a1 + 44) = v28;
      if (!v6)
        goto LABEL_38;
      goto LABEL_48;
    }
LABEL_34:
    if (0x8000 - v12 >= v9)
      v28 = v9;
    else
      v28 = 0x8000 - v12;
    *(_DWORD *)(a1 + 44) = v28;
    if (!v6)
      goto LABEL_38;
LABEL_48:
    v29 = v12;
    v30 = *(_DWORD *)(a1 + 104);
    if (v30)
      v31 = *(_DWORD *)(a1 + 104);
    else
      v31 = 2;
    v32 = *(_DWORD *)(a1 + 36);
    v33 = v32 & 0x7FFF;
    v34 = *(_DWORD *)(a1 + 16);
    if ((v34 & 0x90000) != 0)
    {
      v35 = 0;
      if (v28 && (v34 & 0x80000) == 0)
      {
        if (v12)
        {
          v36 = 0;
          while (*(unsigned __int8 *)(a1 + (*(_DWORD *)(a1 + 36) & 0x7FFF) + v36 + 200) == *(unsigned __int8 *)(a1 + (((unsigned __int16)*(_DWORD *)(a1 + 36) - 1) & 0x7FFF) + 200))
          {
            if (v12 == ++v36)
              goto LABEL_89;
          }
          v29 = v36;
        }
        else
        {
          v29 = 0;
        }
LABEL_89:
        v35 = v29 > 2;
        if (v29 <= 2)
          v31 = 0;
        else
          v31 = v29;
      }
LABEL_92:
      if ((v35 & 0xFFFFE000) != 0 && v31 == 3)
      {
LABEL_99:
        v53 = *(_DWORD *)(a1 + 84);
        v54 = *(_BYTE **)(a1 + 48);
        if (v30)
          goto LABEL_100;
        goto LABEL_128;
      }
    }
    else if (v31 >= v12 || (v37 = *(_DWORD *)(a1 + 4 * (v31 > 0x1F) + 20), v38 = v37 - 1, v37 == 1))
    {
      v35 = 0;
    }
    else
    {
      v35 = 0;
      v39 = *(unsigned __int8 *)(a1 + 200 + v33 + v31);
      v40 = *(unsigned __int8 *)(a1 + 200 + v33 + v31 - 1);
      LODWORD(v41) = *(_DWORD *)(a1 + 36) & 0x7FFF;
      v42 = v31;
      while (2)
      {
        v43 = 1 - v38;
        while (1)
        {
          v44 = *(unsigned __int16 *)(a1 + 2 * v41 + 103082);
          if (!v44)
            goto LABEL_92;
          v45 = (unsigned __int16)(v32 - v44);
          if (v28 < v45)
            goto LABEL_92;
          v41 = v44 & 0x7FFF;
          v46 = v42 + v41;
          if (*(unsigned __int8 *)(a1 + v46 + 200) == v39
            && *(unsigned __int8 *)(a1 + (v46 - 1) + 200) == v40)
          {
            break;
          }
          v47 = *(unsigned __int16 *)(a1 + 2 * v41 + 103082);
          if (!v47)
            goto LABEL_92;
          v45 = (unsigned __int16)(v32 - v47);
          if (v28 < v45)
            goto LABEL_92;
          v41 = v47 & 0x7FFF;
          v48 = v42 + v41;
          if (*(unsigned __int8 *)(a1 + v48 + 200) == v39
            && *(unsigned __int8 *)(a1 + (v48 - 1) + 200) == v40)
          {
            break;
          }
          v49 = *(unsigned __int16 *)(a1 + 2 * v41 + 103082);
          if (!v49)
            goto LABEL_92;
          v45 = (unsigned __int16)(v32 - v49);
          if (v28 < v45)
            goto LABEL_92;
          LODWORD(v41) = v49 & 0x7FFF;
          v50 = v42 + v41;
          if (*(unsigned __int8 *)(a1 + v50 + 200) == v39
            && *(unsigned __int8 *)(a1 + (v50 - 1) + 200) == v40)
          {
            break;
          }
          if (++v43 == 1)
            goto LABEL_92;
        }
        if (!v45)
          goto LABEL_92;
        v51 = 0;
        while (*(unsigned __int8 *)(v2 + v33 + v51) == *(unsigned __int8 *)(v2 + v41 + v51))
        {
          if (v12 == (_DWORD)++v51)
          {
            LODWORD(v51) = v12;
            break;
          }
        }
        if (v51 <= v42)
          goto LABEL_84;
        if ((_DWORD)v51 != v12)
        {
          v39 = *(unsigned __int8 *)(a1 + 200 + (v51 + v33));
          v40 = *(unsigned __int8 *)(a1 + 200 + (v51 + v33 - 1));
          v35 = v45;
          v31 = v51;
          v42 = v51;
LABEL_84:
          v38 = -v43;
          if (v43)
            continue;
          goto LABEL_92;
        }
        break;
      }
      v35 = v45;
      v31 = v12;
      if ((v45 & 0xFFFFE000) != 0 && v12 == 3)
        goto LABEL_99;
    }
    if ((_DWORD)v33 == v35 || (v34 & 0x20000) != 0 && v31 < 6)
      goto LABEL_99;
    if (v30)
    {
      v53 = *(_DWORD *)(a1 + 84);
      v54 = *(_BYTE **)(a1 + 48);
      if (v31 <= v30)
      {
LABEL_100:
        v55 = *(_DWORD *)(a1 + 100);
        *(_DWORD *)(a1 + 84) = v53 + v30;
        *v54 = v30 - 3;
        v56 = (v55 - 1);
        *(_WORD *)(*(_QWORD *)(a1 + 48) + 1) = v55 - 1;
        v57 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 48) += 3;
        *v57 = (*v57 >> 1) | 0x80;
        v58 = *(_DWORD *)(a1 + 80) - 1;
        *(_DWORD *)(a1 + 80) = v58;
        if (!v58)
        {
          *(_DWORD *)(a1 + 80) = 8;
          v59 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v59 + 1;
          *(_QWORD *)(a1 + 56) = v59;
        }
        if (v56 >= 0x200)
          v60 = (unsigned __int8 *)&unk_239F0B526 + ((v56 >> 8) & 0x7F);
        else
          v60 = (unsigned __int8 *)&unk_239F0B326 + (v56 & 0x1FF);
        ++*(_WORD *)(a1 + 2 * *v60 + 33802);
        if (v30 >= 3)
        {
          v61 = 2 * word_239F0B5A6[v30 - 3];
          ++*(_WORD *)(v3 + v61);
        }
        v31 = *(_DWORD *)(a1 + 104) - 1;
        *(_DWORD *)(a1 + 104) = 0;
        goto LABEL_132;
      }
      v62 = *(_DWORD *)(a1 + 108);
      *(_DWORD *)(a1 + 84) = v53 + 1;
      *(_QWORD *)(a1 + 48) = v54 + 1;
      *v54 = v62;
      **(_BYTE **)(a1 + 56) >>= 1;
      v63 = *(_DWORD *)(a1 + 80) - 1;
      *(_DWORD *)(a1 + 80) = v63;
      if (!v63)
      {
        *(_DWORD *)(a1 + 80) = 8;
        v64 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v64 + 1;
        *(_QWORD *)(a1 + 56) = v64;
      }
      ++*(_WORD *)(v3 + 2 * v62);
      if (v31 >= 0x80)
      {
        *(_DWORD *)(a1 + 84) += v31;
        **(_BYTE **)(a1 + 48) = v31 - 3;
        v65 = v35 - 1;
        *(_WORD *)(*(_QWORD *)(a1 + 48) + 1) = v35 - 1;
        v66 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 48) += 3;
        *v66 = (*v66 >> 1) | 0x80;
        v67 = *(_DWORD *)(a1 + 80) - 1;
        *(_DWORD *)(a1 + 80) = v67;
        if (!v67)
        {
          *(_DWORD *)(a1 + 80) = 8;
          v68 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v68 + 1;
          *(_QWORD *)(a1 + 56) = v68;
        }
        if (v65 >= 0x200)
          v69 = (unsigned __int8 *)&unk_239F0B526 + ((v65 >> 8) & 0x7F);
        else
          v69 = (unsigned __int8 *)&unk_239F0B326 + (v65 & 0x1FF);
        ++*(_WORD *)(a1 + 2 * *v69 + 33802);
        v70 = 2 * word_239F0B5A6[v31 - 3];
        ++*(_WORD *)(v3 + v70);
        *(_DWORD *)(a1 + 104) = 0;
        goto LABEL_132;
      }
    }
    else
    {
      if (!v35)
      {
        v53 = *(_DWORD *)(a1 + 84);
        v54 = *(_BYTE **)(a1 + 48);
LABEL_128:
        v76 = *(unsigned __int8 *)(a1 + (v32 & 0x7FFF) + 200);
        *(_DWORD *)(a1 + 84) = v53 + 1;
        *(_QWORD *)(a1 + 48) = v54 + 1;
        *v54 = v76;
        **(_BYTE **)(a1 + 56) >>= 1;
        v77 = *(_DWORD *)(a1 + 80) - 1;
        *(_DWORD *)(a1 + 80) = v77;
        if (!v77)
        {
          *(_DWORD *)(a1 + 80) = 8;
          v78 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v78 + 1;
          *(_QWORD *)(a1 + 56) = v78;
        }
        ++*(_WORD *)(v3 + 2 * v76);
        goto LABEL_131;
      }
      if (*(_DWORD *)(a1 + 28) || (v34 & 0x10000) != 0 || v31 >= 0x80)
      {
        *(_DWORD *)(a1 + 84) += v31;
        **(_BYTE **)(a1 + 48) = v31 - 3;
        *(_WORD *)(*(_QWORD *)(a1 + 48) + 1) = v35 - 1;
        v71 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 48) += 3;
        *v71 = (*v71 >> 1) | 0x80;
        v72 = *(_DWORD *)(a1 + 80) - 1;
        *(_DWORD *)(a1 + 80) = v72;
        if (!v72)
        {
          *(_DWORD *)(a1 + 80) = 8;
          v73 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v73 + 1;
          *(_QWORD *)(a1 + 56) = v73;
        }
        v74 = (unsigned __int8 *)&unk_239F0B526 + (((unint64_t)(v35 - 1) >> 8) & 0x7F);
        if (v35 < 0x201)
          v74 = (unsigned __int8 *)&unk_239F0B326 + (((_WORD)v35 - 1) & 0x1FF);
        ++*(_WORD *)(a1 + 2 * *v74 + 33802);
        if (v31 >= 3)
        {
          v75 = 2 * word_239F0B5A6[v31 - 3];
          ++*(_WORD *)(v3 + v75);
        }
        goto LABEL_132;
      }
    }
    v83 = *(unsigned __int8 *)(a1 + (v32 & 0x7FFF) + 200);
    *(_DWORD *)(a1 + 104) = v31;
    *(_DWORD *)(a1 + 108) = v83;
    *(_DWORD *)(a1 + 100) = v35;
LABEL_131:
    v31 = 1;
LABEL_132:
    v79 = *(_DWORD *)(a1 + 40) - v31;
    *(_DWORD *)(a1 + 36) += v31;
    *(_DWORD *)(a1 + 40) = v79;
    v80 = *(_DWORD *)(a1 + 44) + v31;
    if (v80 >= 0x8000)
      v80 = 0x8000;
    *(_DWORD *)(a1 + 44) = v80;
    v81 = *(_QWORD *)(a1 + 48);
    if (v81 <= v7)
    {
      v82 = *(_DWORD *)(a1 + 84);
      if (v82 < 0x7C01 || v82 > (115 * (v81 - v86)) >> 7 && (*(_BYTE *)(a1 + 18) & 8) == 0)
        continue;
    }
    *(_QWORD *)(a1 + 176) = v4;
    *(_QWORD *)(a1 + 184) = v5;
    v8 = sub_239A186B0(a1, 0);
    if (v8)
      return v8 >= 0;
  }
  v10 = *(_DWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 44);
  if (v9 + v10 > 1)
    goto LABEL_20;
  v11 = 0;
  if (v10 <= 0x102)
    v12 = 258;
  else
    v12 = *(_DWORD *)(a1 + 40);
  v13 = v10 + v9 + 1;
  while (2)
  {
    if (v12 - v10 == (_DWORD)v11)
    {
      if (0x8000 - v12 >= v9)
        v28 = v9;
      else
        v28 = 0x8000 - v12;
      *(_DWORD *)(a1 + 44) = v28;
      v4 += v11;
      v5 -= v11;
      goto LABEL_48;
    }
    v14 = v4[v11];
    v15 = *(_DWORD *)(a1 + 36);
    v16 = ((_WORD)v10 + (_WORD)v11 + (_WORD)v15) & 0x7FFF;
    *(_BYTE *)(a1 + v16 + 200) = v14;
    if (v16 > 0x100)
    {
      *(_DWORD *)(a1 + 40) = v10 + v11 + 1;
      if ((v13 + v11) >= 3)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)(a1 + (v16 | 0x8000) + 200) = v14;
      *(_DWORD *)(a1 + 40) = v10 + v11 + 1;
      if ((v13 + v11) >= 3)
      {
LABEL_15:
        v17 = a1
            + 2
            * (v14 ^ (32 * *(unsigned __int8 *)(a1 + 200 + (((_WORD)v10 + 0x7FFF + (_WORD)v11 + (_WORD)v15) & 0x7FFF))) ^ ((unint64_t)(*(_BYTE *)(a1 + 200 + (((_WORD)v10 - 2 + (_WORD)v11 + (_WORD)v15) & 0x7FFF)) & 0x1F) << 10));
        *(_WORD *)(a1 + 2 * (((_WORD)v10 - 2 + (_WORD)v11 + (_WORD)v15) & 0x7FFF) + 103082) = *(_WORD *)(v17 + 168618);
        *(_WORD *)(v17 + 168618) = v10 - 2 + v11 + v15;
      }
    }
    if (v5 != ++v11)
      continue;
    break;
  }
  v5 = 0;
  v12 = v10 + v11;
  v4 += v11;
  if (0x8000 - (v10 + v11) >= v9)
    v28 = v9;
  else
    v28 = 0x8000 - v12;
  *(_DWORD *)(a1 + 44) = v28;
  if (v6)
    goto LABEL_48;
LABEL_38:
  if (v12 >= 0x102)
    goto LABEL_48;
LABEL_149:
  *(_QWORD *)(a1 + 176) = v4;
  *(_QWORD *)(a1 + 184) = v5;
  return 1;
}

uint64_t sub_239A186B0(uint64_t a1, int a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL4 v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, _QWORD);
  uint64_t result;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;

  if ((*(_BYTE *)(a1 + 18) & 8) != 0)
  {
    v4 = (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 88)) <= *(_DWORD *)(a1 + 44);
    if (!*(_QWORD *)a1)
      goto LABEL_5;
LABEL_7:
    v6 = a1 + 234154;
    goto LABEL_8;
  }
  v4 = 0;
  if (*(_QWORD *)a1)
    goto LABEL_7;
LABEL_5:
  v5 = *(_QWORD *)(a1 + 192);
  if ((unint64_t)(**(_QWORD **)(a1 + 160) - v5) < 0x14CCC)
    goto LABEL_7;
  v6 = *(_QWORD *)(a1 + 144) + v5;
LABEL_8:
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v6 + 85180;
  *(_QWORD *)(a1 + 112) = 0;
  **(_BYTE **)(a1 + 56) = **(unsigned __int8 **)(a1 + 56) >> *(_DWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 48) -= *(_DWORD *)(a1 + 80) == 8;
  if ((*(_BYTE *)(a1 + 17) & 0x10) != 0 && !*(_DWORD *)(a1 + 124))
  {
    v16 = *(_DWORD *)(a1 + 92);
    v17 = *(_DWORD *)(a1 + 96) | (120 << v16);
    v18 = v16 + 8;
    *(_DWORD *)(a1 + 92) = v16 + 8;
    *(_DWORD *)(a1 + 96) = v17;
    if (v16 <= 0xFFFFFFF7)
    {
      do
      {
        v22 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v22 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v22 + 1;
          *v22 = v17;
          v18 = *(_DWORD *)(a1 + 92);
          v17 = *(_DWORD *)(a1 + 96);
        }
        v17 >>= 8;
        v18 -= 8;
        *(_DWORD *)(a1 + 92) = v18;
        *(_DWORD *)(a1 + 96) = v17;
      }
      while (v18 > 7);
    }
    v19 = v17 | (1 << v18);
    v20 = v18 + 8;
    *(_DWORD *)(a1 + 92) = v20;
    *(_DWORD *)(a1 + 96) = v19;
    do
    {
      v21 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v21 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v21 + 1;
        *v21 = v19;
        v20 = *(_DWORD *)(a1 + 92);
        v19 = *(_DWORD *)(a1 + 96);
      }
      v19 >>= 8;
      v20 -= 8;
      *(_DWORD *)(a1 + 92) = v20;
      *(_DWORD *)(a1 + 96) = v19;
    }
    while (v20 > 7);
  }
  v7 = *(_DWORD *)(a1 + 92);
  v8 = *(_DWORD *)(a1 + 96) | ((a2 == 4) << v7);
  v9 = v7 + 1;
  *(_DWORD *)(a1 + 92) = v7 + 1;
  *(_DWORD *)(a1 + 96) = v8;
  if ((v7 + 1) >= 8)
  {
    do
    {
      v12 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v12 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v12 + 1;
        *v12 = v8;
        v9 = *(_DWORD *)(a1 + 92);
        v8 = *(_DWORD *)(a1 + 96);
      }
      v8 >>= 8;
      v9 -= 8;
      *(_DWORD *)(a1 + 92) = v9;
      *(_DWORD *)(a1 + 96) = v8;
    }
    while (v9 > 7);
  }
  v10 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v11 = 0;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 18) & 4) != 0)
    {
      v11 = sub_239A1CCD0(a1, 1);
      v13 = *(unsigned int *)(a1 + 84);
      if (!(_DWORD)v13)
        goto LABEL_22;
    }
    else
    {
      v11 = sub_239A1CCD0(a1, *(_DWORD *)(a1 + 84) < 0x30u);
      v13 = *(unsigned int *)(a1 + 84);
      if (!(_DWORD)v13)
      {
LABEL_22:
        if (!v11)
        {
          *(_QWORD *)(a1 + 64) = v10;
          *(_DWORD *)(a1 + 92) = v9;
          *(_DWORD *)(a1 + 96) = v8;
          sub_239A1CCD0(a1, 1);
        }
        goto LABEL_67;
      }
    }
    if (*(_QWORD *)(a1 + 64) - v10 + 1 < v13)
      goto LABEL_22;
  }
  if ((*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 88)) > *(_DWORD *)(a1 + 44))
    goto LABEL_22;
  *(_QWORD *)(a1 + 64) = v10;
  v14 = v9 + 2;
  *(_DWORD *)(a1 + 92) = v9 + 2;
  *(_DWORD *)(a1 + 96) = v8;
  if (v9 < 6)
    goto LABEL_38;
  do
  {
    v15 = *(_BYTE **)(a1 + 64);
    if ((unint64_t)v15 < *(_QWORD *)(a1 + 72))
    {
      *(_QWORD *)(a1 + 64) = v15 + 1;
      *v15 = v8;
      v14 = *(_DWORD *)(a1 + 92);
      v8 = *(_DWORD *)(a1 + 96);
    }
    v8 >>= 8;
    v14 -= 8;
    *(_DWORD *)(a1 + 92) = v14;
    *(_DWORD *)(a1 + 96) = v8;
  }
  while (v14 > 7);
  if (v14)
  {
LABEL_38:
    v23 = 8;
    *(_DWORD *)(a1 + 92) = 8;
    do
    {
      v24 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v24 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v24 + 1;
        *v24 = v8;
        v23 = *(_DWORD *)(a1 + 92);
        v8 = *(_DWORD *)(a1 + 96);
      }
      v8 >>= 8;
      v23 -= 8;
      *(_DWORD *)(a1 + 92) = v23;
      *(_DWORD *)(a1 + 96) = v8;
    }
    while (v23 > 7);
  }
  else
  {
    v23 = 0;
  }
  v25 = *(_DWORD *)(a1 + 84);
  v26 = v8 | ((unsigned __int16)v25 << v23);
  v27 = v23 | 0x10;
  *(_DWORD *)(a1 + 92) = v27;
  *(_DWORD *)(a1 + 96) = v26;
  if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
  {
    do
    {
      v28 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v28 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v28 + 1;
        *v28 = v26;
        v27 = *(_DWORD *)(a1 + 92);
        v26 = *(_DWORD *)(a1 + 96);
      }
      v26 >>= 8;
      v27 -= 8;
      *(_DWORD *)(a1 + 92) = v27;
      *(_DWORD *)(a1 + 96) = v26;
    }
    while (v27 > 7);
    v25 = *(_DWORD *)(a1 + 84);
  }
  else
  {
    do
    {
      v26 >>= 8;
      v27 -= 8;
    }
    while (v27 > 7);
  }
  v29 = v25 ^ 0xFFFF;
  *(_DWORD *)(a1 + 84) = v29;
  v30 = v26 | ((unsigned __int16)v29 << v27);
  v31 = v27 + 16;
  *(_DWORD *)(a1 + 92) = v31;
  *(_DWORD *)(a1 + 96) = v30;
  if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
  {
    do
    {
      v33 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v33 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v33 + 1;
        *v33 = v30;
        v31 = *(_DWORD *)(a1 + 92);
        v30 = *(_DWORD *)(a1 + 96);
      }
      v30 >>= 8;
      v31 -= 8;
      *(_DWORD *)(a1 + 92) = v31;
      *(_DWORD *)(a1 + 96) = v30;
    }
    while (v31 > 7);
    v32 = *(_DWORD *)(a1 + 84) ^ 0xFFFF;
    *(_DWORD *)(a1 + 84) = v32;
    if (!v32)
      goto LABEL_67;
  }
  else
  {
    do
    {
      v30 >>= 8;
      v31 -= 8;
    }
    while (v31 > 7);
    *(_DWORD *)(a1 + 92) = v31;
    *(_DWORD *)(a1 + 96) = v30;
    v32 = v29 ^ 0xFFFF;
    *(_DWORD *)(a1 + 84) = v29 ^ 0xFFFF;
    if (v29 == 0xFFFF)
      goto LABEL_67;
  }
  v34 = 0;
  do
  {
    while (1)
    {
      v30 |= *(unsigned __int8 *)(a1 + (((unsigned __int16)*(_DWORD *)(a1 + 88) + (_WORD)v34) & 0x7FFF) + 200) << v31;
      v31 += 8;
      *(_DWORD *)(a1 + 92) = v31;
      *(_DWORD *)(a1 + 96) = v30;
      if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
        break;
      do
      {
        v30 >>= 8;
        v31 -= 8;
      }
      while (v31 > 7);
      *(_DWORD *)(a1 + 92) = v31;
      *(_DWORD *)(a1 + 96) = v30;
      if (++v34 >= v32)
        goto LABEL_67;
    }
    do
    {
      v35 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v35 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v35 + 1;
        *v35 = v30;
        v31 = *(_DWORD *)(a1 + 92);
        v30 = *(_DWORD *)(a1 + 96);
      }
      v30 >>= 8;
      v31 -= 8;
      *(_DWORD *)(a1 + 92) = v31;
      *(_DWORD *)(a1 + 96) = v30;
    }
    while (v31 > 7);
    v32 = *(_DWORD *)(a1 + 84);
    ++v34;
  }
  while (v34 < v32);
LABEL_67:
  if (!a2)
    goto LABEL_114;
  v36 = *(_DWORD *)(a1 + 92);
  if (a2 == 4)
  {
    if (v36)
    {
      v37 = 8;
      *(_DWORD *)(a1 + 92) = 8;
      v38 = *(_DWORD *)(a1 + 96);
      do
      {
        v39 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v39 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v39 + 1;
          *v39 = v38;
          v37 = *(_DWORD *)(a1 + 92);
          v38 = *(_DWORD *)(a1 + 96);
        }
        v38 >>= 8;
        v37 -= 8;
        *(_DWORD *)(a1 + 92) = v37;
        *(_DWORD *)(a1 + 96) = v38;
      }
      while (v37 > 7);
    }
    else
    {
      v37 = 0;
    }
    if ((*(_BYTE *)(a1 + 17) & 0x10) != 0)
    {
      v48 = *(_DWORD *)(a1 + 32);
      v49 = *(_DWORD *)(a1 + 96) | (HIBYTE(v48) << v37);
      v50 = v37 | 8;
      *(_DWORD *)(a1 + 92) = v50;
      *(_DWORD *)(a1 + 96) = v49;
      if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
      {
        do
        {
          v57 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v57 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v57 + 1;
            *v57 = v49;
            v50 = *(_DWORD *)(a1 + 92);
            v49 = *(_DWORD *)(a1 + 96);
          }
          v49 >>= 8;
          v50 -= 8;
          *(_DWORD *)(a1 + 92) = v50;
          *(_DWORD *)(a1 + 96) = v49;
        }
        while (v50 > 7);
      }
      else
      {
        do
        {
          v49 >>= 8;
          v50 -= 8;
        }
        while (v50 > 7);
      }
      v51 = v49 | (BYTE2(v48) << v50);
      v52 = v50 | 8;
      *(_DWORD *)(a1 + 92) = v52;
      *(_DWORD *)(a1 + 96) = v51;
      if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
      {
        do
        {
          v58 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v58 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v58 + 1;
            *v58 = v51;
            v52 = *(_DWORD *)(a1 + 92);
            v51 = *(_DWORD *)(a1 + 96);
          }
          v51 >>= 8;
          v52 -= 8;
          *(_DWORD *)(a1 + 92) = v52;
          *(_DWORD *)(a1 + 96) = v51;
        }
        while (v52 > 7);
      }
      else
      {
        do
        {
          v51 >>= 8;
          v52 -= 8;
        }
        while (v52 > 7);
      }
      v53 = v51 | (BYTE1(v48) << v52);
      v54 = v52 | 8;
      *(_DWORD *)(a1 + 92) = v54;
      *(_DWORD *)(a1 + 96) = v53;
      if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
      {
        do
        {
          v59 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v59 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v59 + 1;
            *v59 = v53;
            v54 = *(_DWORD *)(a1 + 92);
            v53 = *(_DWORD *)(a1 + 96);
          }
          v53 >>= 8;
          v54 -= 8;
          *(_DWORD *)(a1 + 92) = v54;
          *(_DWORD *)(a1 + 96) = v53;
        }
        while (v54 > 7);
      }
      else
      {
        do
        {
          v53 >>= 8;
          v54 -= 8;
        }
        while (v54 > 7);
      }
      v55 = v53 | (v48 << v54);
      v56 = v54 | 8;
      *(_DWORD *)(a1 + 92) = v54 | 8;
      *(_DWORD *)(a1 + 96) = v55;
      if (*(_QWORD *)(a1 + 64) >= *(_QWORD *)(a1 + 72))
      {
        do
        {
          v55 >>= 8;
          v56 -= 8;
        }
        while (v56 > 7);
LABEL_113:
        *(_DWORD *)(a1 + 92) = v56;
        *(_DWORD *)(a1 + 96) = v55;
        goto LABEL_114;
      }
      do
      {
        v60 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v60 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v60 + 1;
          *v60 = v55;
          v56 = *(_DWORD *)(a1 + 92);
          v55 = *(_DWORD *)(a1 + 96);
        }
        v55 >>= 8;
        v56 -= 8;
        *(_DWORD *)(a1 + 92) = v56;
        *(_DWORD *)(a1 + 96) = v55;
      }
      while (v56 > 7);
    }
    goto LABEL_114;
  }
  v40 = v36 + 3;
  *(_DWORD *)(a1 + 92) = v40;
  if (v40 >= 8)
  {
    v41 = *(_DWORD *)(a1 + 96);
    do
    {
      v42 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v42 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v42 + 1;
        *v42 = v41;
        v40 = *(_DWORD *)(a1 + 92);
        v41 = *(_DWORD *)(a1 + 96);
      }
      v41 >>= 8;
      v40 -= 8;
      *(_DWORD *)(a1 + 92) = v40;
      *(_DWORD *)(a1 + 96) = v41;
    }
    while (v40 > 7);
  }
  if (v40)
  {
    v43 = 8;
    *(_DWORD *)(a1 + 92) = 8;
    v44 = *(_DWORD *)(a1 + 96);
    do
    {
      while (1)
      {
        v46 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v46 >= *(_QWORD *)(a1 + 72))
          break;
        *(_QWORD *)(a1 + 64) = v46 + 1;
        *v46 = v44;
        v45 = *(_DWORD *)(a1 + 92);
        v44 = *(_DWORD *)(a1 + 96) >> 8;
        v43 = v45 - 8;
        *(_DWORD *)(a1 + 92) = v45 - 8;
        *(_DWORD *)(a1 + 96) = v44;
        if (v45 - 8 <= 7)
          goto LABEL_84;
      }
      v45 = v43;
      v44 >>= 8;
      v43 -= 8;
      *(_DWORD *)(a1 + 92) = v43;
      *(_DWORD *)(a1 + 96) = v44;
    }
    while (v43 > 7);
LABEL_84:
    v47 = v45 + 8;
    *(_DWORD *)(a1 + 92) = v45 + 8;
    *(_DWORD *)(a1 + 96) = v44;
    if (*(_QWORD *)(a1 + 64) >= *(_QWORD *)(a1 + 72))
      goto LABEL_110;
    do
    {
LABEL_119:
      v65 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v65 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v65 + 1;
        *v65 = v44;
        v47 = *(_DWORD *)(a1 + 92);
        v44 = *(_DWORD *)(a1 + 96);
      }
      v44 >>= 8;
      v47 -= 8;
      *(_DWORD *)(a1 + 92) = v47;
      *(_DWORD *)(a1 + 96) = v44;
    }
    while (v47 > 7);
    goto LABEL_111;
  }
  v44 = *(_DWORD *)(a1 + 96);
  v47 = 16;
  *(_DWORD *)(a1 + 92) = 16;
  *(_DWORD *)(a1 + 96) = v44;
  if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
    goto LABEL_119;
  do
  {
LABEL_110:
    v44 >>= 8;
    v47 -= 8;
  }
  while (v47 > 7);
LABEL_111:
  v55 = v44 | (0xFFFF << v47);
  v56 = v47 | 0x10;
  *(_DWORD *)(a1 + 92) = v56;
  *(_DWORD *)(a1 + 96) = v55;
  if (*(_QWORD *)(a1 + 64) >= *(_QWORD *)(a1 + 72))
  {
    do
    {
      v55 >>= 8;
      v56 -= 8;
    }
    while (v56 > 7);
    goto LABEL_113;
  }
  do
  {
    v66 = *(_BYTE **)(a1 + 64);
    if ((unint64_t)v66 < *(_QWORD *)(a1 + 72))
    {
      *(_QWORD *)(a1 + 64) = v66 + 1;
      *v66 = v55;
      v56 = *(_DWORD *)(a1 + 92);
      v55 = *(_DWORD *)(a1 + 96);
    }
    v55 >>= 8;
    v56 -= 8;
    *(_DWORD *)(a1 + 92) = v56;
    *(_DWORD *)(a1 + 96) = v55;
  }
  while (v56 > 7);
LABEL_114:
  bzero((void *)(a1 + 33226), 0x280uLL);
  *(_QWORD *)(a1 + 48) = a1 + 37547;
  *(_QWORD *)(a1 + 56) = a1 + 37546;
  *(_DWORD *)(a1 + 88) += *(_DWORD *)(a1 + 84);
  *(_QWORD *)(a1 + 80) = 8;
  ++*(_DWORD *)(a1 + 124);
  v61 = *(_QWORD *)(a1 + 64);
  v62 = v61 - v6;
  if ((_DWORD)v61 == (_DWORD)v6)
    return *(unsigned int *)(a1 + 116);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD))a1;
  if (*(_QWORD *)a1)
  {
    **(_QWORD **)(a1 + 152) = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 136);
    if (!v63(a1 + 234154, v62, *(_QWORD *)(a1 + 8)))
    {
      result = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 132) = -1;
      return result;
    }
    return *(unsigned int *)(a1 + 116);
  }
  if (v6 != a1 + 234154)
  {
    *(_QWORD *)(a1 + 192) += (int)v62;
    return *(unsigned int *)(a1 + 116);
  }
  v67 = *(_QWORD *)(a1 + 192);
  if ((int)v62 >= (unint64_t)(**(_QWORD **)(a1 + 160) - v67))
    v68 = **(_QWORD **)(a1 + 160) - v67;
  else
    LODWORD(v68) = v62;
  memcpy((void *)(*(_QWORD *)(a1 + 144) + v67), (const void *)(a1 + 234154), (int)v68);
  *(_QWORD *)(a1 + 192) += (int)v68;
  if ((_DWORD)v62 == (_DWORD)v68)
    return *(unsigned int *)(a1 + 116);
  *(_DWORD *)(a1 + 112) = v68;
  *(_DWORD *)(a1 + 116) = v62 - v68;
  return *(unsigned int *)(a1 + 116);
}

double sub_239A18FFC(uint64_t a1)
{
  double result;

  if (a1)
  {
    *(_QWORD *)(a1 + 384) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double sub_239A1903C(_OWORD *a1)
{
  double result;

  if (a1)
  {
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

size_t sub_239A19050(int32x2_t *a1, _DWORD *a2, _QWORD *a3, char **a4)
{
  _DWORD *v5;

  v5 = a2;
  return sub_239A19080(a1, &v5, 1u, a3, a4);
}

size_t sub_239A19080(int32x2_t *a1, _DWORD **a2, unsigned int a3, _QWORD *a4, char **a5)
{
  uint64_t v8;
  _DWORD **v9;
  int v10;
  int v11;
  int32x2_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  int *v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  _DWORD **v22;
  int32x2_t *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  std::string::size_type v37;
  std::string *p_dst;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const char *v54;
  unint64_t v55;
  void **v56;
  char *v57;
  unint64_t v58;
  BOOL v59;
  size_t v60;
  unint64_t v61;
  size_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  __int128 v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  size_t v84;
  const char *v85;
  char *v86;
  int v87;
  int32x2_t *v88;
  _DWORD *v89;
  std::string::value_type v90;
  const char *v91;
  size_t v92;
  int v93;
  size_t v94;
  std::string::size_type v95;
  std::string *p_src;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  char *v108;
  size_t v109;
  int64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  size_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  __int128 *v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  char *v133;
  char *v134;
  size_t v135;
  char *v136;
  char *v137;
  unint64_t v138;
  __int128 v139;
  char v140;
  char *v141;
  char *v142;
  unint64_t v143;
  __int128 v144;
  char *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char v150;
  char *v151;
  size_t v152;
  char *v153;
  char *v154;
  unint64_t v155;
  int64_t v156;
  unint64_t v157;
  size_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  __int128 v165;
  char *v166;
  char *v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  char v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  unint64_t v176;
  int64_t v177;
  unint64_t v178;
  size_t v179;
  char *v180;
  char *v181;
  char *v182;
  unint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  __int128 v187;
  char *v188;
  char *v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  char v193;
  char *v194;
  uint64_t v195;
  int v196;
  int v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  char *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  uint64_t v212;
  void *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  int32x2_t *v221;
  char *v222;
  char *v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  __int32 v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  int32x2_t v240;
  uint64_t v241;
  _QWORD *v242;
  char *v243;
  _QWORD *v244;
  char *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  size_t v253;
  char *v254;
  unint64_t v255;
  char *v256;
  char *v257;
  char *v258;
  unint64_t v259;
  uint64_t v260;
  _BYTE *v261;
  char v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int *v269;
  std::string::size_type size;
  std::string *v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  size_t *v279;
  _QWORD *v280;
  unint64_t v281;
  int v282;
  uint64_t v283;
  char v284;
  int32x2_t *v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  char *v291;
  _QWORD *v292;
  unint64_t v293;
  unint64_t v294;
  size_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  size_t v302;
  size_t v303;
  char *v304;
  char *v305;
  char *v306;
  char v307;
  int v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _DWORD *v314;
  size_t *v315;
  _QWORD *v316;
  void *v317;
  char v318;
  size_t v319;
  std::string::size_type v320;
  std::string *v321;
  void *v322;
  char *v323;
  char *v324;
  size_t v325;
  uint64_t v326;
  int v327;
  char *v328;
  char *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  const void *v336;
  size_t v337;
  char *v338;
  char *v339;
  void **v340;
  void **v341;
  void **v342;
  void **v343;
  void *v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  void *v349;
  void *v350;
  void **v351;
  void **v352;
  void *v353;
  void **v354;
  void *v355;
  void **v356;
  void **v357;
  void **v358;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  char *v366;
  _QWORD *v367;
  char **v368;
  uint64_t v369;
  size_t v370;
  _DWORD *v371;
  unsigned int v372;
  void *__p;
  size_t v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  int *v381;
  char v382;
  unint64_t v383;
  uint64_t v385;
  size_t **v386;
  char v387;
  size_t v388;
  int v389;
  _QWORD *v390;
  uint64_t v391;
  int v392;
  unint64_t v393;
  uint64_t v394;
  int32x2_t *v395;
  uint64_t v396;
  uint64_t v397;
  int *v398;
  int v399;
  uint64_t *v400;
  int32x2_t v401;
  uint64_t *v402;
  size_t v403;
  uint64_t v404;
  int *v405;
  uint64_t v407;
  _DWORD *v408;
  char *v409;
  char *v410;
  void *v411;
  void *v412;
  char *v413;
  std::string __dst;
  void *v415;
  void **v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  unint64_t v422;
  std::string v423;
  std::string __src;
  __int128 v425;
  void **v426;
  void **v427;
  _QWORD v428[3];

  v428[1] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2 || !a4)
  {
LABEL_12:
    v13 = (char *)operator new(0x30uLL);
    strcpy(v13, "Invalid argument for SaveEXRNPartImageToMemory");
    if (!a5)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    while (1)
    {
      v10 = (*v9)[31];
      if (v10 < 0)
        goto LABEL_12;
      if (v10 == 128)
        break;
      ++v9;
      if (!--v8)
        goto LABEL_9;
    }
    v13 = (char *)operator new(0x30uLL);
    strcpy(v13, "ZFP compression is not supported in this build");
    if (!a5)
    {
LABEL_14:
      operator delete(v13);
      return 0;
    }
LABEL_13:
    *a5 = strdup(v13);
    goto LABEL_14;
  }
LABEL_9:
  v420 = 0;
  v421 = 0;
  v422 = 0;
  LODWORD(__src.__r_.__value_.__l.__data_) = 20000630;
  sub_239A1ED08(&v420, 0, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
  v11 = (*a2)[19];
  LODWORD(__src.__r_.__value_.__l.__data_) = 2;
  if (a3 == 1)
  {
    v12 = *a1;
    if (*a1)
    {
      v12.i8[0] = 2;
      __src.__r_.__value_.__s.__data_[1] = 2;
    }
  }
  else
  {
    v12.i8[0] = 0;
  }
  if (v11)
  {
    v12.i8[0] |= 4u;
    __src.__r_.__value_.__s.__data_[1] = v12.i8[0];
  }
  if (a3 >= 2)
    __src.__r_.__value_.__s.__data_[1] = v12.i8[0] | 0x10;
  sub_239A1ED08(&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
  v367 = a4;
  v368 = a5;
  v15 = a3;
  v372 = a3;
  v378 = a3;
  if (a3)
  {
    v16 = (int *)operator new(4 * a3);
    bzero(v16, 4 * a3);
    v417 = 0;
    v418 = 0;
    v419 = 0;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v417;
    v17 = 32 * a3;
    __src.__r_.__value_.__s.__data_[8] = 0;
    v18 = (char *)operator new(32 * v15);
    v19 = &v18[v17];
    v417 = v18;
    v419 = &v18[v17];
    bzero(v18, v17);
    v20 = 0;
    v399 = 0;
    v418 = v19;
    v21 = v16;
    v22 = a2;
    v23 = a1;
    do
    {
      if (*v23)
      {
        memset(&__src, 0, sizeof(__src));
        memset(&v423, 0, sizeof(v423));
        sub_239A1BD2C((uint64_t *)&__src, (uint64_t *)&v423, *v22);
        v28 = sub_239A1C268((uint64_t)&v417[v20], (*v22)[17], &__src, &v423);
        *v21 = v28;
        if (v423.__r_.__value_.__r.__words[0])
        {
          v423.__r_.__value_.__l.__size_ = v423.__r_.__value_.__r.__words[0];
          operator delete(v423.__r_.__value_.__l.__data_);
        }
        if (__src.__r_.__value_.__r.__words[0])
        {
          __src.__r_.__value_.__l.__size_ = __src.__r_.__value_.__r.__words[0];
          operator delete(__src.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v24 = (*v22)[31];
        if (v24 == 4)
          v25 = 32;
        else
          v25 = 1;
        if (v24 == 128)
          v25 = 16;
        if (v24 == 3)
          v26 = 16;
        else
          v26 = v25;
        v27 = (v26 + v23[4].i32[1] - 1) / v26;
        *v21 = v27;
        sub_239A1BBA0((uint64_t *)&v417[v20], v27);
        v28 = *v21;
      }
      v399 += v28;
      v23 += 6;
      ++v22;
      ++v21;
      v20 += 32;
    }
    while (v17 != v20);
  }
  else
  {
    v16 = 0;
    v399 = 0;
    v417 = 0;
    v418 = 0;
    v419 = 0;
  }
  sub_239A1EA14(&v415, v378);
  *(_OWORD *)&v423.__r_.__value_.__r.__words[1] = 0uLL;
  v423.__r_.__value_.__r.__words[0] = (std::string::size_type)&v423.__r_.__value_.__l.__size_;
  v381 = v16;
  if (!v372)
  {
    sub_239587BCC((uint64_t)&v423, 0);
    v172 = v421;
    goto LABEL_268;
  }
  v29 = 0;
  do
  {
    v426 = 0;
    v427 = 0;
    v428[0] = 0;
    v32 = a2[v29];
    if ((int)v32[30] >= 1)
    {
      v33 = 0;
      v34 = 0;
      while (1)
      {
        memset(&__src, 0, sizeof(__src));
        BYTE12(v425) = 0;
        LODWORD(v425) = *(_DWORD *)(*((_QWORD *)v32 + 16) + 4 * v34);
        *(_QWORD *)((char *)&v425 + 4) = 0x100000001;
        v35 = (const char *)(*((_QWORD *)v32 + 13) + v33);
        v36 = strlen(v35);
        if (v36 > 0x7FFFFFFFFFFFFFF7)
          sub_23941A5AC();
        v37 = v36;
        if (v36 >= 0x17)
          break;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36;
        p_dst = &__dst;
        if (v36)
          goto LABEL_55;
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_49;
LABEL_56:
        operator delete(__src.__r_.__value_.__l.__data_);
LABEL_49:
        __src = __dst;
        v39 = (char *)v415 + 24 * v29;
        v41 = *((_QWORD *)v39 + 1);
        v40 = *((_QWORD *)v39 + 2);
        v42 = (uint64_t *)(v39 + 8);
        if (v41 < v40)
        {
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8((_BYTE *)v41, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          }
          else
          {
            v43 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
            *(_QWORD *)(v41 + 16) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
            *(_OWORD *)v41 = v43;
          }
          *(_OWORD *)(v41 + 24) = v425;
          *v42 = v41 + 40;
          *v42 = v41 + 40;
          if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_44;
LABEL_61:
          operator delete(__src.__r_.__value_.__l.__data_);
          goto LABEL_44;
        }
        *v42 = sub_239A1F14C((char **)v415 + 3 * v29, (uint64_t)&__src);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_61;
LABEL_44:
        ++v34;
        v32 = a2[v29];
        v33 += 272;
        if (v34 >= (int)v32[30])
          goto LABEL_62;
      }
      v44 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v44 = v36 | 7;
      v45 = v44 + 1;
      p_dst = (std::string *)operator new(v44 + 1);
      __dst.__r_.__value_.__l.__size_ = v37;
      __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_55:
      memmove(p_dst, v35, v37);
      p_dst->__r_.__value_.__s.__data_[v37] = 0;
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_49;
      goto LABEL_56;
    }
LABEL_62:
    v407 = v29;
    v46 = (uint64_t *)((char *)v415 + 24 * v29);
    v48 = v46[1];
    v47 = v46 + 1;
    v49 = *v46;
    v50 = v48 - *v46;
    if (v48 == *v46)
    {
      v55 = 1;
      v57 = (char *)v426;
      v56 = v427;
      v58 = (char *)v427 - (char *)v426;
      v59 = (unint64_t)((char *)v427 - (char *)v426) <= 1;
      v60 = 1 - ((char *)v427 - (char *)v426);
      if (v427 == v426)
        goto LABEL_70;
    }
    else
    {
      v51 = 0;
      v52 = v50 / 40;
      if (v52 <= 1)
        v53 = 1;
      else
        v53 = v52;
      do
      {
        v54 = (const char *)v49;
        if (*(char *)(v49 + 23) < 0)
          v54 = *(const char **)v49;
        v51 += strlen(v54) + 17;
        v49 += 40;
        --v53;
      }
      while (v53);
      v55 = v51 + 1;
      v57 = (char *)v426;
      v56 = v427;
      v58 = (char *)v427 - (char *)v426;
      v59 = v55 >= (char *)v427 - (char *)v426;
      v60 = v55 - ((char *)v427 - (char *)v426);
      if (v55 > (char *)v427 - (char *)v426)
      {
LABEL_70:
        if (v428[0] - (_QWORD)v56 >= v60)
        {
          bzero(v56, v60);
          v427 = (void **)((char *)v56 + v60);
          v56 = (void **)((char *)v56 + v60);
          goto LABEL_101;
        }
        if ((v55 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v61 = 2 * (v428[0] - (_QWORD)v57);
        if (v61 <= v55)
          v61 = v55;
        if (v428[0] - (_QWORD)v57 >= 0x3FFFFFFFFFFFFFFFuLL)
          v62 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v62 = v61;
        v63 = (char *)operator new(v62);
        v64 = &v63[v58];
        bzero(&v63[v58], v60);
        if (v56 == (void **)v57)
        {
          v57 = (char *)v56;
          goto LABEL_99;
        }
        if (v58 >= 8 && (unint64_t)(v57 - v63) >= 0x20)
        {
          if (v58 < 0x20)
          {
            v65 = 0;
            goto LABEL_91;
          }
          v65 = v58 & 0xFFFFFFFFFFFFFFE0;
          v66 = &v63[v58 - 16];
          v67 = (char *)(v56 - 2);
          v68 = v58 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v69 = *(_OWORD *)v67;
            *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
            *(_OWORD *)v66 = v69;
            v66 -= 32;
            v67 -= 32;
            v68 -= 32;
          }
          while (v68);
          if (v58 == v65)
            goto LABEL_98;
          if ((v58 & 0x18) != 0)
          {
LABEL_91:
            v64 -= v58 & 0xFFFFFFFFFFFFFFF8;
            v70 = &v63[(char *)v56 - v65 - v57 - 8];
            v71 = (char *)v56 - v65 - 8;
            v72 = v65 - (v58 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v73 = *(_QWORD *)v71;
              v71 -= 8;
              *(_QWORD *)v70 = v73;
              v70 -= 8;
              v72 += 8;
            }
            while (v72);
            v56 = (void **)((char *)v56 - (v58 & 0xFFFFFFFFFFFFFFF8));
            if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_98;
            goto LABEL_96;
          }
          v64 -= v65;
          v56 = (void **)((char *)v56 - v65);
        }
LABEL_96:
        v74 = v64 - 1;
        do
        {
          v75 = *((_BYTE *)v56 - 1);
          v56 = (void **)((char *)v56 - 1);
          *v74-- = v75;
        }
        while (v56 != (void **)v57);
LABEL_98:
        v64 = v63;
LABEL_99:
        v56 = (void **)&v63[v55];
        v426 = (void **)v64;
        v427 = (void **)&v63[v55];
        v428[0] = &v63[v62];
        if (v57)
        {
          operator delete(v57);
          v56 = v427;
        }
        goto LABEL_101;
      }
    }
    if (!v59)
    {
      v56 = (void **)&v57[v55];
      v427 = (void **)&v57[v55];
    }
LABEL_101:
    v76 = v426;
    if (v56 == v426)
      goto LABEL_497;
    v77 = *v46;
    if (*v47 != *v46)
    {
      v78 = 0;
      v79 = 0;
      do
      {
        v83 = (const char *)(v77 + v78);
        if (*(char *)(v77 + v78 + 23) < 0)
          v83 = *(const char **)v83;
        v84 = strlen(v83);
        memcpy(v76, v83, v84);
        v85 = (const char *)(*v46 + v78);
        if (v85[23] < 0)
          v85 = *(const char **)v85;
        v80 = (char *)v76 + strlen(v85);
        *v80 = 0;
        v81 = *v46 + v78;
        v82 = *(_QWORD *)(v81 + 28);
        *(_DWORD *)(v80 + 1) = *(_DWORD *)(v81 + 24);
        v80[5] = *(_BYTE *)(*v46 + v78 + 36);
        *(_QWORD *)(v80 + 9) = v82;
        v76 = (void **)(v80 + 17);
        ++v79;
        v77 = *v46;
        v78 += 40;
      }
      while (v79 < 0xCCCCCCCCCCCCCCCDLL * ((*v47 - *v46) >> 3));
    }
    *(_BYTE *)v76 = 0;
    v86 = (char *)v426;
    v87 = (_DWORD)v427 - (_DWORD)v426;
    if (v427 == v426)
LABEL_497:
      sub_23941D884();
    sub_239A1ED08(&v420, v421, "channels", "dataWindow", 9);
    sub_239A1ED08(&v420, v421, "chlist", "box2i", 7);
    LODWORD(__src.__r_.__value_.__l.__data_) = v87;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, v86, &v86[v87], v87);
    if (v426)
    {
      v427 = v426;
      operator delete(v426);
    }
    LODWORD(v426) = a2[v407][31];
    v16 = v381;
    sub_239A1ED08(&v420, v421, "compression", "channels", 12);
    sub_239A1ED08(&v420, v421, "compression", "channels", 12);
    LODWORD(__src.__r_.__value_.__l.__data_) = 1;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 1, 1);
    __src.__r_.__value_.__r.__words[0] = 0;
    v88 = &a1[6 * v407];
    __src.__r_.__value_.__r.__words[1] = (std::string::size_type)vadd_s32(v88[4], (int32x2_t)-1);
    sub_239A1ED08(&v420, v421, "dataWindow", "displayWindow", 11);
    sub_239A1ED08(&v420, v421, "box2i", "v2f", 6);
    LODWORD(v426) = 16;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 4, 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[16], 16);
    v426 = 0;
    v427 = (void **)vadd_s32(a1[4], (int32x2_t)-1);
    sub_239A1ED08(&v420, v421, "displayWindow", "tiles", 14);
    sub_239A1ED08(&v420, v421, "box2i", "v2f", 6);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 16;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__dst, &__dst.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)v428, 16);
    LOBYTE(v426) = 0;
    sub_239A1ED08(&v420, v421, "lineOrder", "pixelAspectRatio", 10);
    sub_239A1ED08(&v420, v421, "lineOrder", "pixelAspectRatio", 10);
    LODWORD(__src.__r_.__value_.__l.__data_) = 1;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 1, 1);
    LODWORD(v426) = 1065353216;
    sub_239A1ED08(&v420, v421, "pixelAspectRatio", "screenWindowCenter", 17);
    sub_239A1ED08(&v420, v421, "float", "ply\n", 6);
    LODWORD(__src.__r_.__value_.__l.__data_) = 4;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 4, 4);
    __src.__r_.__value_.__r.__words[0] = 0;
    sub_239A1ED08(&v420, v421, "screenWindowCenter", "screenWindowWidth", 19);
    sub_239A1ED08(&v420, v421, "v2f", "tiledesc", 4);
    LODWORD(v426) = 8;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 4, 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[8], 8);
    LODWORD(v426) = 1065353216;
    sub_239A1ED08(&v420, v421, "screenWindowWidth", "chunkCount", 18);
    sub_239A1ED08(&v420, v421, "float", "ply\n", 6);
    LODWORD(__src.__r_.__value_.__l.__data_) = 4;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 4, 4);
    if (*v88)
    {
      v89 = a2[v407];
      if (v89[18])
        v90 = v89[17] & 3 | 0x10;
      else
        v90 = v89[17] & 3;
      LODWORD(__src.__r_.__value_.__r.__words[1]) = 0;
      __src.__r_.__value_.__r.__words[0] = *(_QWORD *)(v89 + 15);
      __src.__r_.__value_.__s.__data_[8] = v90;
      sub_239A1ED08(&v420, v421, "tiles", "lineOrder", 6);
      sub_239A1ED08(&v420, v421, "tiledesc", "'name' attributes must be unique for a multi-part file", 9);
      LODWORD(v426) = 9;
      sub_239A1F334((uint64_t)&v420, v421, (char *)&v426, (char *)&v426 + 4, 4);
      sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[9], 9);
    }
    if (v372 < 2)
      goto LABEL_137;
    v91 = (const char *)(a2[v407] + 34);
    v92 = strlen(v91);
    if (!v92)
    {
      v174 = (char *)operator new(0x30uLL);
      strcpy(v174, "Invalid 'name' attribute for a multi-part file");
LABEL_235:
      if (v368)
        *v368 = strdup(v174);
      operator delete(v174);
      sub_239587BCC((uint64_t)&v423, (char *)v423.__r_.__value_.__l.__size_);
      v14 = 0;
      goto LABEL_465;
    }
    v93 = v92;
    v94 = strlen(v91);
    if (v94 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v95 = v94;
    if (v94 >= 0x17)
    {
      v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v94 | 7) != 0x17)
        v97 = v94 | 7;
      v98 = v97 + 1;
      p_src = (std::string *)operator new(v97 + 1);
      __src.__r_.__value_.__l.__size_ = v95;
      __src.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
    }
    else
    {
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v94;
      p_src = &__src;
      if (!v94)
        goto LABEL_127;
    }
    memmove(p_src, v91, v95);
LABEL_127:
    p_src->__r_.__value_.__s.__data_[v95] = 0;
    sub_239A1F5E8((uint64_t **)&v423, (const void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&__src);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    if (v423.__r_.__value_.__r.__words[2] != v407 + 1)
    {
      v174 = (char *)operator new(0x38uLL);
      strcpy(v174, "'name' attributes must be unique for a multi-part file");
      goto LABEL_235;
    }
    v99 = (char *)a2[v407];
    sub_239A1ED08(&v420, v421, "name", "component", 5);
    sub_239A1ED08(&v420, v421, "string", "BOOLean", 7);
    LODWORD(__src.__r_.__value_.__l.__data_) = v93;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, v99 + 136, &v99[v93 + 136], v93);
    if (*v88)
      v100 = "tiledimage";
    else
      v100 = "scanlineimage";
    if (*v88)
      v101 = 10;
    else
      v101 = 13;
    sub_239A1ED08(&v420, v421, "type", "scanlineimage", 5);
    sub_239A1ED08(&v420, v421, "string", "BOOLean", 7);
    LODWORD(__src.__r_.__value_.__l.__data_) = v101;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, v100, &v100[v101], v101);
    sub_239A1ED08(&v420, v421, "chunkCount", "type", 11);
    sub_239A1ED08(&v420, v421, "int", "Output memory size is zero", 4);
    LODWORD(__src.__r_.__value_.__l.__data_) = 4;
    sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
    sub_239A1F334((uint64_t)&v420, v421, (char *)&v381[v407], (char *)&v381[v407 + 1], 4);
LABEL_137:
    v102 = a2[v407];
    if ((int)v102[23] >= 1)
    {
      v103 = 0;
      v104 = 16;
      while (1)
      {
        v105 = *((_QWORD *)v102 + 12);
        v106 = v105 + 528 * v103;
        v410 = *(char **)(v106 + 512);
        v107 = *(_DWORD *)(v106 + 520);
        v108 = v421;
        v109 = strlen((const char *)v106);
        v110 = v109 + 1;
        if ((uint64_t)(v109 + 1) >= 1)
          break;
LABEL_197:
        v152 = strlen((const char *)(v106 + 256));
        sub_239A1ED08(&v420, v421, (char *)(v106 + 256), (char *)(v106 + 256 + v152 + 1), v152 + 1);
        LODWORD(__src.__r_.__value_.__l.__data_) = v107;
        sub_239A1F334((uint64_t)&v420, v421, (char *)&__src, &__src.__r_.__value_.__s.__data_[4], 4);
        sub_239A1F334((uint64_t)&v420, v421, v410, &v410[v107], v107);
        ++v103;
        v102 = a2[v407];
        v104 += 528;
        if (v103 >= (int)v102[23])
          goto LABEL_198;
      }
      if ((uint64_t)(v422 - (_QWORD)v421) < v110)
      {
        v111 = v420;
        v112 = v421 - v420;
        v113 = v110 + v421 - v420;
        if (v113 < 0)
          sub_2394189F8();
        v114 = v422 - (_QWORD)v420;
        if (2 * (v422 - (unint64_t)v420) > v113)
          v113 = 2 * v114;
        if (v114 >= 0x3FFFFFFFFFFFFFFFLL)
          v115 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        v403 = v115;
        if (v115)
          v116 = (char *)operator new(v115);
        else
          v116 = 0;
        v124 = &v116[v112];
        memcpy(&v116[v112], (const void *)v106, v110);
        if (v111 == v108)
        {
          v127 = &v116[v112];
          v128 = &v124[v110];
          v129 = 0;
        }
        else
        {
          if (v112 < 8)
          {
            v125 = v108;
            v126 = &v116[v112];
            goto LABEL_191;
          }
          v125 = v108;
          v126 = &v116[v112];
          if ((unint64_t)(v111 - v116) < 0x20)
            goto LABEL_191;
          if (v112 >= 0x20)
          {
            v130 = v112 & 0xFFFFFFFFFFFFFFE0;
            v141 = &v116[v112 - 16];
            v142 = v108 - 16;
            v143 = v112 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v144 = *(_OWORD *)v142;
              *((_OWORD *)v141 - 1) = *((_OWORD *)v142 - 1);
              *(_OWORD *)v141 = v144;
              v141 -= 32;
              v142 -= 32;
              v143 -= 32;
            }
            while (v143);
            if (v112 != v130)
            {
              if ((v112 & 0x18) == 0)
              {
                v126 = &v124[-v130];
                v125 = &v108[-v130];
                goto LABEL_191;
              }
              goto LABEL_186;
            }
          }
          else
          {
            v130 = 0;
LABEL_186:
            v125 = &v108[-(v112 & 0xFFFFFFFFFFFFFFF8)];
            v126 = &v124[-(v112 & 0xFFFFFFFFFFFFFFF8)];
            v145 = &v116[&v108[-v130] - v111 - 8];
            v146 = &v108[-v130 - 8];
            v147 = v130 - (v112 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v148 = *(_QWORD *)v146;
              v146 -= 8;
              *(_QWORD *)v145 = v148;
              v145 -= 8;
              v147 += 8;
            }
            while (v147);
            if (v112 != (v112 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_191:
              v149 = v126 - 1;
              do
              {
                v150 = *--v125;
                *v149-- = v150;
              }
              while (v125 != v111);
            }
          }
          v127 = v116;
          v128 = &v124[v110];
          v129 = (char *)(v421 - v108);
          if (v421 != v108)
            memmove(v128, v108, v421 - v108);
        }
        v151 = v420;
        v420 = v127;
        v421 = &v129[(_QWORD)v128];
        v422 = (unint64_t)&v116[v403];
        if (v151)
          operator delete(v151);
        goto LABEL_197;
      }
      if (v110 <= 0)
      {
        v123 = v106 + v109 + 1;
        v133 = &v421[-v110];
        v134 = v421;
        if (&v421[-v110] < v421)
        {
          v135 = v109 + 1;
          if (v109 + 1 < 0x20)
          {
            v134 = v421;
            goto LABEL_177;
          }
          v133 += v135 & 0xFFFFFFFFFFFFFFE0;
          v134 = &v421[v135 & 0xFFFFFFFFFFFFFFE0];
          v136 = v421 + 16;
          v137 = &v421[-v109 + 15];
          v138 = v135 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v139 = *(_OWORD *)v137;
            *((_OWORD *)v136 - 1) = *((_OWORD *)v137 - 1);
            *(_OWORD *)v136 = v139;
            v136 += 32;
            v137 += 32;
            v138 -= 32;
          }
          while (v138);
          if (v135 != (v135 & 0xFFFFFFFFFFFFFFE0))
          {
            do
            {
LABEL_177:
              v140 = *v133++;
              *v134++ = v140;
            }
            while (v133 != v108);
          }
        }
        v421 = v134;
        if (v108 != &v108[v110])
          memmove(&v108[v110], v108, -v110);
        if (v123 != v106)
          memmove(v108, (const void *)(v105 + 528 * v103), v123 - v106);
        goto LABEL_197;
      }
      if (v106 == v106 + v109 + 1)
      {
        v118 = v421;
      }
      else
      {
        if ((unint64_t)v110 < 0x20)
        {
          v117 = v105 + 528 * v103;
          v118 = v421;
        }
        else
        {
          v117 = v105 + 528 * v103;
          v118 = v421;
          if ((unint64_t)&v421[-v106] >= 0x20)
          {
            v117 = v105 + 528 * v103 + (v110 & 0xFFFFFFFFFFFFFFE0);
            v118 = &v421[v110 & 0xFFFFFFFFFFFFFFE0];
            v119 = v421 + 16;
            v120 = (__int128 *)(v105 + v104);
            v121 = v110 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v122 = *v120;
              *((_OWORD *)v119 - 1) = *(v120 - 1);
              *(_OWORD *)v119 = v122;
              v119 += 32;
              v120 += 2;
              v121 -= 32;
            }
            while (v121);
            if (v110 == (v110 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_170;
          }
        }
        v131 = v117 - 1;
        do
        {
          v132 = *(_BYTE *)++v131;
          *v118++ = v132;
        }
        while (v131 != v106 + v109);
      }
LABEL_170:
      v421 = v118;
      goto LABEL_197;
    }
LABEL_198:
    v153 = v421;
    if ((unint64_t)v421 < v422)
    {
      *v421 = 0;
      v30 = v153 + 1;
      v16 = v381;
      v31 = v407;
      goto LABEL_41;
    }
    v154 = v420;
    v155 = v421 - v420;
    v156 = v421 - v420 + 1;
    v31 = v407;
    if (v156 < 0)
      sub_2394189F8();
    v157 = v422 - (_QWORD)v420;
    if (2 * (v422 - (unint64_t)v420) > v156)
      v156 = 2 * v157;
    if (v157 >= 0x3FFFFFFFFFFFFFFFLL)
      v158 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v158 = v156;
    v16 = v381;
    if (!v158)
    {
      v159 = 0;
      v160 = (char *)(v421 - v420);
      *(_BYTE *)v155 = 0;
      v30 = (char *)(v155 + 1);
      if (v153 == v154)
        goto LABEL_212;
LABEL_207:
      if (v155 < 8 || (unint64_t)(v154 - v159) < 0x20)
        goto LABEL_223;
      if (v155 >= 0x20)
      {
        v161 = v155 & 0xFFFFFFFFFFFFFFE0;
        v162 = &v159[v155 - 16];
        v163 = v153 - 16;
        v164 = v155 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v165 = *(_OWORD *)v163;
          *((_OWORD *)v162 - 1) = *((_OWORD *)v163 - 1);
          *(_OWORD *)v162 = v165;
          v162 -= 32;
          v163 -= 32;
          v164 -= 32;
        }
        while (v164);
        if (v155 == v161)
        {
LABEL_225:
          v153 = v420;
          v420 = v159;
          v421 = v30;
          v422 = (unint64_t)&v159[v158];
          if (!v153)
            goto LABEL_41;
LABEL_226:
          operator delete(v153);
          goto LABEL_41;
        }
        if ((v155 & 0x18) == 0)
        {
          v160 -= v161;
          v153 -= v161;
          goto LABEL_223;
        }
      }
      else
      {
        v161 = 0;
      }
      v160 -= v155 & 0xFFFFFFFFFFFFFFF8;
      v166 = &v159[&v153[-v161] - v154 - 8];
      v167 = &v153[-v161 - 8];
      v168 = v161 - (v155 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v169 = *(_QWORD *)v167;
        v167 -= 8;
        *(_QWORD *)v166 = v169;
        v166 -= 8;
        v168 += 8;
      }
      while (v168);
      v153 -= v155 & 0xFFFFFFFFFFFFFFF8;
      if (v155 == (v155 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_225;
LABEL_223:
      v170 = v160 - 1;
      do
      {
        v171 = *--v153;
        *v170-- = v171;
      }
      while (v153 != v154);
      goto LABEL_225;
    }
    v159 = (char *)operator new(v158);
    v160 = &v159[v155];
    v159[v155] = 0;
    v30 = &v159[v155 + 1];
    if (v153 != v154)
      goto LABEL_207;
LABEL_212:
    v420 = v160;
    v421 = v30;
    v422 = (unint64_t)&v159[v158];
    if (v153)
      goto LABEL_226;
LABEL_41:
    v421 = v30;
    v29 = v31 + 1;
  }
  while (v29 != v378);
  sub_239587BCC((uint64_t)&v423, (char *)v423.__r_.__value_.__l.__size_);
  v172 = v421;
  if (v372 < 2)
    goto LABEL_268;
  if ((unint64_t)v421 < v422)
  {
    *v421 = 0;
    v173 = v172 + 1;
    goto LABEL_267;
  }
  v175 = v420;
  v176 = v421 - v420;
  v177 = v421 - v420 + 1;
  if (v177 < 0)
    sub_2394189F8();
  v178 = v422 - (_QWORD)v420;
  if (2 * (v422 - (unint64_t)v420) > v177)
    v177 = 2 * v178;
  if (v178 >= 0x3FFFFFFFFFFFFFFFLL)
    v179 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v179 = v177;
  if (v179)
    v180 = (char *)operator new(v179);
  else
    v180 = 0;
  v181 = &v180[v176];
  v182 = &v180[v179];
  v180[v176] = 0;
  v173 = &v180[v176 + 1];
  if (v172 == v175)
  {
    v180 += v176;
    goto LABEL_265;
  }
  if (v176 < 8 || (unint64_t)(v175 - v180) < 0x20)
  {
LABEL_262:
    v192 = v181 - 1;
    do
    {
      v193 = *--v172;
      *v192-- = v193;
    }
    while (v172 != v175);
    goto LABEL_264;
  }
  if (v176 >= 0x20)
  {
    v183 = v176 & 0xFFFFFFFFFFFFFFE0;
    v184 = v172 - 16;
    v185 = &v180[v172 - 16 - v175];
    v186 = v176 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v187 = *(_OWORD *)v184;
      *((_OWORD *)v185 - 1) = *((_OWORD *)v184 - 1);
      *(_OWORD *)v185 = v187;
      v185 -= 32;
      v184 -= 32;
      v186 -= 32;
    }
    while (v186);
    if (v176 == v183)
      goto LABEL_264;
    if ((v176 & 0x18) != 0)
      goto LABEL_257;
    v181 -= v183;
    v172 -= v183;
    goto LABEL_262;
  }
  v183 = 0;
LABEL_257:
  v181 -= v176 & 0xFFFFFFFFFFFFFFF8;
  v188 = &v172[-v183 - 8];
  v189 = &v180[v188 - v175];
  v190 = v183 - (v176 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v191 = *(_QWORD *)v188;
    v188 -= 8;
    *(_QWORD *)v189 = v191;
    v189 -= 8;
    v190 += 8;
  }
  while (v190);
  v172 -= v176 & 0xFFFFFFFFFFFFFFF8;
  if (v176 != (v176 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_262;
LABEL_264:
  v172 = v420;
LABEL_265:
  v420 = v180;
  v421 = v173;
  v422 = (unint64_t)v182;
  if (v172)
    operator delete(v172);
LABEL_267:
  v421 = v173;
  v172 = v173;
LABEL_268:
  v194 = v420;
  sub_239A1EADC(&v426, v378);
  if (!v372)
  {
LABEL_447:
    v338 = (char *)operator new(0x20uLL);
    v339 = v338;
    strcpy(v338, "Output memory size is zero");
    if (v368)
      *v368 = strdup(v338);
    operator delete(v339);
    goto LABEL_450;
  }
  v195 = 0;
  v374 = &v172[8 * v399] - v194;
  v369 = 4 * (v372 > 1);
  v370 = 0;
  while (1)
  {
    memset(&__dst, 0, sizeof(__dst));
    v408 = a2[v195];
    v196 = v408[31];
    v197 = 16;
    if (v196 != 3 && v196 != 128)
    {
      if (v196 == 4)
        v197 = 32;
      else
        v197 = 1;
    }
    v389 = v197;
    v198 = (char *)v415;
    v199 = v16[v195];
    v200 = 24 * v195;
    v201 = v417;
    v375 = v195;
    v202 = (char *)&v426[3 * v195];
    v205 = *((_QWORD *)v202 + 1);
    v204 = (uint64_t *)(v202 + 8);
    v203 = v205;
    v206 = (char *)&v426[3 * v195];
    v207 = 0xAAAAAAAAAAAAAAABLL * ((v205 - *(_QWORD *)v206) >> 3);
    if (v199 <= v207)
    {
      if (v199 < v207)
      {
        v208 = *(_QWORD *)v206 + 24 * (int)v199;
        if (v203 != v208)
        {
          v209 = v203;
          do
          {
            v211 = *(void **)(v209 - 24);
            v209 -= 24;
            v210 = v211;
            if (v211)
            {
              *(_QWORD *)(v203 - 16) = v210;
              operator delete(v210);
            }
            v203 = v209;
          }
          while (v209 != v208);
        }
        *v204 = v208;
      }
    }
    else
    {
      sub_2394D951C((uint64_t)v206, v199 - v207);
    }
    v212 = (int)v408[30];
    memset(&__src, 0, sizeof(__src));
    if ((_DWORD)v212)
    {
      if ((v212 & 0x80000000) != 0)
        sub_2394189F8();
      v213 = operator new(8 * v212);
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
      __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v213 + 8 * v212;
      bzero(v213, 8 * v212);
      v214 = 0;
      v215 = 0;
      v216 = 0;
      __src.__r_.__value_.__l.__size_ = (std::string::size_type)v213 + 8 * v212;
      v217 = *((_QWORD *)v408 + 16);
      do
      {
        *((_QWORD *)v213 + v215) = v216;
        v218 = *(_DWORD *)(v217 + 4 * v215);
        v219 = v214 + 4;
        v220 = v216 + 4;
        if (v218 == 1)
        {
          v216 += 2;
          v214 += 2;
        }
        if (v218 == 2)
        {
          v216 = v220;
          v214 = v219;
        }
        if (!v218)
        {
          v216 = v220;
          v214 = v219;
        }
        ++v215;
      }
      while (v212 != v215);
    }
    else
    {
      v213 = 0;
      v214 = 0;
    }
    v221 = &a1[6 * v375];
    v400 = (uint64_t *)&v198[v200];
    v222 = &v201[32 * v375];
    v409 = v206;
    __p = v213;
    if (*v221)
    {
      v223 = &v201[32 * v375];
      v224 = *((_DWORD *)v223 + 6);
      v371 = v223 + 24;
      v225 = *((_DWORD *)v223 + 7);
      if (v408[17] == 2)
        v226 = v225;
      else
        v226 = 1;
      v377 = (v226 * v224);
      if ((int)v377 < 1)
      {
LABEL_407:
        v272 = 1;
        v317 = __p;
        v14 = v374;
        v16 = v381;
        if (!__p)
          goto LABEL_414;
        goto LABEL_413;
      }
      v227 = 0;
      v228 = 0;
      v391 = v214;
      v14 = v374;
      v376 = v222;
      while (1)
      {
        if (!v221)
        {
          std::string::append(&__dst, "Invalid number of tiled levels for EncodeChunk\n");
          goto LABEL_411;
        }
        v229 = v221[2].i32[0];
        v230 = v408[17];
        if (v230 == 2)
        {
          if (v227 != v229 + v221[2].i32[1] * *v371)
            goto LABEL_410;
        }
        else
        {
          if (v230 != 1)
            v229 = 0;
          if (v227 != v229)
          {
LABEL_410:
            std::string::append(&__dst, "Incorrect level ordering in tiled image\n");
            goto LABEL_411;
          }
        }
        v385 = v227;
        v231 = *(_QWORD *)v222 + 24 * v227;
        v233 = *(uint64_t **)v231;
        v232 = *(_QWORD *)(v231 + 8);
        v235 = **(_QWORD **)v231;
        v234 = *(_QWORD *)(*(_QWORD *)v231 + 8);
        memset(&v423, 0, sizeof(v423));
        if ((v408[15] > v221[4].i32[0] || v408[16] > v221[4].i32[1]) && !v221[2].i32[0] && !v221[2].i32[1])
          goto LABEL_345;
        v236 = (v232 - (uint64_t)v233) >> 3;
        v379 = v234 - v235;
        v380 = 0xAAAAAAAAAAAAAAABLL * v236;
        v393 = (unint64_t)(v234 - v235) >> 3;
        v397 = (v393 * -1431655765 * v236);
        if ((int)v397 >= 1)
          break;
LABEL_355:
        if (v380 << 32)
        {
          v222 = v376;
          v273 = v385;
          if (v379 << 29)
          {
            v274 = 0;
            v275 = (int)v380;
            v276 = *(_QWORD *)(*(_QWORD *)v376 + 24 * v385);
            v277 = (int)(v379 >> 3);
            if (v277 <= 1)
              v277 = 1;
            if ((unint64_t)(int)v380 <= 1)
              v275 = 1;
            v278 = *(_QWORD *)v206 + 8;
            do
            {
              v279 = *(size_t **)(v276 + 24 * v274);
              v280 = (_QWORD *)(v278 + 24 * v228);
              v281 = v277;
              do
              {
                *v279++ = v14;
                v14 += v369 + *v280 - *(v280 - 1);
                ++v228;
                v280 += 3;
                --v281;
              }
              while (v281);
              ++v274;
            }
            while (v274 != v275);
          }
          v221 = (int32x2_t *)v221[1];
          v272 = 1;
          if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_366;
        }
        else
        {
          v222 = v376;
          v273 = v385;
          v221 = (int32x2_t *)v221[1];
          v272 = 1;
          if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_366;
        }
LABEL_367:
        if ((v272 & 1) == 0)
        {
          v14 = v370;
          v16 = v381;
          v317 = __p;
          if (!__p)
            goto LABEL_414;
LABEL_413:
          operator delete(v317);
          goto LABEL_414;
        }
        v227 = v273 + 1;
        if (v227 == v377)
          goto LABEL_412;
      }
      v237 = 0;
      v238 = 0;
      v395 = v221;
LABEL_315:
      v382 = v238;
      while (1)
      {
        v239 = v237 + v228;
        v240 = *v221;
        v241 = *(_QWORD *)(*(_QWORD *)v221 + 32 * v237 + 24);
        v242 = (_QWORD *)(*(_QWORD *)v206 + 24 * (v237 + v228));
        v244 = v242 + 1;
        v243 = (char *)v242[1];
        v245 = (char *)*v242;
        v246 = (unint64_t)&v243[-*v242];
        v411 = (void *)(v237 + v228);
        if (v246 > 0x13)
        {
          if (v246 != 20)
            *v244 = v245 + 20;
          goto LABEL_339;
        }
        v401 = v240;
        v404 = v241;
        v247 = *(_QWORD *)v206 + 24 * v239;
        v250 = *(_QWORD *)(v247 + 16);
        v249 = (_QWORD *)(v247 + 16);
        v248 = v250;
        if (v250 - (uint64_t)v243 < 20 - v246)
          break;
        bzero(v243, 20 - v246);
        *v244 = &v243[20 - v246];
        v206 = v409;
        v239 = v237 + v228;
        v240 = v401;
        v241 = v404;
LABEL_339:
        v263 = (uint64_t *)(*(_QWORD *)v206 + 24 * v239);
        v265 = *v263;
        v264 = v263[1];
        if (!sub_239A1F758((uint64_t)v263, v241, *((_QWORD *)v408 + 16), v408[31], *(_DWORD *)(*(_QWORD *)&v240 + 32 * v237 + 16), v408[15], 0, *(_DWORD *)(*(_QWORD *)&v240 + 32 * v237 + 20), v391, v400, &__src))
        {
          ++v237;
          v238 = 1;
          v221 = v395;
          v206 = v409;
          if (v237 != v397)
            goto LABEL_315;
          goto LABEL_345;
        }
        v206 = v409;
        v266 = 24 * (_QWORD)v411;
        v267 = *(_QWORD *)v409 + 24 * (_QWORD)v411;
        v268 = *(_DWORD *)(v267 + 8);
        v269 = *(int **)v267;
        *v269 = (int)v237 % (int)v393;
        LODWORD(v269) = v265 + v268 - (v264 + (_DWORD)v269);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v409 + v266) + 4) = (int)v237 / (int)v393;
        v221 = v395;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v409 + v266) + 8) = v395[2].i32[0];
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v409 + v266) + 12) = v395[2].i32[1];
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v409 + v266) + 16) = (_DWORD)v269;
        if (++v237 == v397)
        {
          if ((v382 & 1) == 0)
            goto LABEL_355;
LABEL_345:
          std::string::append(&v423, "Failed to encode tile data.\n");
          if ((v423.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v423.__r_.__value_.__r.__words[2]);
          else
            size = v423.__r_.__value_.__l.__size_;
          if (size)
          {
            if ((v423.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v271 = &v423;
            else
              v271 = (std::string *)v423.__r_.__value_.__r.__words[0];
            std::string::append(&__dst, (const std::string::value_type *)v271, size);
          }
          v272 = 0;
          v222 = v376;
          v273 = v385;
          if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
LABEL_366:
            operator delete(v423.__r_.__value_.__l.__data_);
          goto LABEL_367;
        }
      }
      v251 = v248 - (_QWORD)v245;
      v252 = 2 * v251;
      if (2 * v251 <= 0x14)
        v252 = 20;
      if (v251 >= 0x3FFFFFFFFFFFFFFFLL)
        v253 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v253 = v252;
      v388 = v253;
      v390 = v249;
      v254 = (char *)operator new(v253);
      bzero(&v254[v246], 20 - v246);
      if (v243 == v245)
      {
        v206 = v409;
        v240 = v401;
        v241 = v404;
        v256 = &v254[v246];
        goto LABEL_337;
      }
      v240 = v401;
      v241 = v404;
      if (v246 >= 8)
      {
        v206 = v409;
        v255 = (unint64_t)&v254[v246];
        if ((unint64_t)(v245 - v254) >= 0x20)
        {
          v255 = (unint64_t)&v254[v246 - (v246 & 0xFFFFFFFFFFFFFFF8)];
          v257 = v243 - 8;
          v258 = (char *)(v243 - 8 - v245);
          v259 = v246 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v260 = *(_QWORD *)v257;
            v257 -= 8;
            *(_QWORD *)&v258[(_QWORD)v254] = v260;
            v258 -= 8;
            v259 -= 8;
          }
          while (v259);
          v243 -= v246 & 0xFFFFFFFFFFFFFFF8;
          if (v246 == (v246 & 0x18))
            goto LABEL_336;
        }
      }
      else
      {
        v206 = v409;
        v255 = (unint64_t)&v254[v246];
      }
      v261 = (_BYTE *)(v255 - 1);
      do
      {
        v262 = *--v243;
        *v261-- = v262;
      }
      while (v243 != v245);
LABEL_336:
      v243 = v245;
      v256 = v254;
LABEL_337:
      *v242 = v256;
      *v244 = v254 + 20;
      *v390 = &v254[v388];
      v239 = v237 + v228;
      if (v243)
      {
        operator delete(v243);
        v240 = v401;
        v241 = v404;
        v239 = v237 + v228;
      }
      goto LABEL_339;
    }
    v386 = **(size_t ****)v222;
    v282 = v389;
    if ((int)v199 < 1)
      goto LABEL_402;
    v283 = 0;
    v284 = 0;
    v285 = &a1[6 * v375];
    v402 = (uint64_t *)&v285[3];
    v405 = (int *)&v285[4] + 1;
    v396 = v214;
    v398 = (int *)&v285[4];
    v394 = v199;
    v383 = v199;
LABEL_374:
    v387 = v284;
    v286 = v283;
    do
    {
      v283 = v286 + 1;
      if (*v405 >= v282 * ((int)v286 + 1))
        v287 = v282 * (v286 + 1);
      else
        v287 = *v405;
      v288 = *v402;
      v289 = *(_QWORD *)v206;
      v290 = (unint64_t *)(*(_QWORD *)v206 + 24 * v286);
      v292 = v290 + 1;
      v291 = (char *)v290[1];
      v293 = *v290;
      v294 = (unint64_t)&v291[-*v290];
      if (v294 > 7)
      {
        if (v294 != 8)
          *v292 = v293 + 8;
      }
      else
      {
        v392 = v287;
        v412 = (void *)*v402;
        v295 = 8 - v294;
        v296 = v289 + 24 * v286;
        v299 = *(_QWORD *)(v296 + 16);
        v298 = (_QWORD *)(v296 + 16);
        v297 = v299;
        if (v299 - (uint64_t)v291 >= 8 - v294)
        {
          bzero(v291, 8 - v294);
          *v292 = &v291[v295];
          v282 = v389;
          v288 = (uint64_t)v412;
          v287 = v392;
        }
        else
        {
          v300 = v297 - v293;
          v301 = 2 * v300;
          if (2 * v300 <= 8)
            v301 = 8;
          if (v300 >= 0x3FFFFFFFFFFFFFFFLL)
            v302 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v302 = v301;
          v303 = v302;
          v304 = (char *)operator new(v302);
          v305 = &v304[v294];
          bzero(v305, v295);
          if (v291 == (char *)v293)
          {
            v282 = v389;
            v288 = (uint64_t)v412;
          }
          else
          {
            v306 = &v291[~v293];
            v282 = v389;
            v288 = (uint64_t)v412;
            do
            {
              v307 = *--v291;
              (v306--)[(_QWORD)v304] = v307;
            }
            while (v291 != (char *)v293);
            v291 = (char *)v293;
            v305 = v304;
          }
          *v290 = (unint64_t)v305;
          *v292 = v304 + 8;
          *v298 = &v304[v303];
          v287 = v392;
          v283 = v286 + 1;
          if (v291)
          {
            operator delete(v291);
            v288 = (uint64_t)v412;
          }
        }
      }
      v308 = v287 - v282 * v286;
      v206 = v409;
      v309 = (uint64_t *)(*(_QWORD *)v409 + 24 * v286);
      v311 = *v309;
      v310 = v309[1];
      if ((sub_239A1F758((uint64_t)v309, v288, *((_QWORD *)v408 + 16), v408[31], *v398, *v398, v282 * (int)v286, v308, v396, v400, &__src) & 1) == 0)
      {
        v284 = 1;
        if (v283 == v394)
        {
LABEL_401:
          std::string::append(&__dst, "Failed to encode scanline data.\n");
LABEL_411:
          v272 = 0;
          v14 = v370;
LABEL_412:
          v16 = v381;
          v317 = __p;
          if (__p)
            goto LABEL_413;
          goto LABEL_414;
        }
        goto LABEL_374;
      }
      v312 = *(_QWORD *)v409 + 24 * v286;
      v313 = *(_DWORD *)(v312 + 8);
      v314 = *(_DWORD **)v312;
      *v314 = v282 * v286;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v409 + 24 * v286) + 4) = v311 + v313 - (v310 + (_DWORD)v314);
      v286 = v283;
    }
    while (v283 != v394);
    v199 = v383;
    if ((v387 & 1) != 0)
      goto LABEL_401;
LABEL_402:
    if (!(_DWORD)v199)
      goto LABEL_407;
    v315 = *v386;
    v316 = (_QWORD *)(*(_QWORD *)v206 + 8);
    v14 = v374;
    do
    {
      *v315++ = v14;
      v14 = v14 + v369 + *v316 - *(v316 - 1);
      v316 += 3;
      --v199;
    }
    while (v199);
    v272 = 1;
    v16 = v381;
    v317 = __p;
    if (__p)
      goto LABEL_413;
LABEL_414:
    v318 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v319 = v14;
    if ((v272 & 1) != 0)
      break;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v320 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v320 = __dst.__r_.__value_.__l.__size_;
    if (v368 && v320)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v321 = &__dst;
      else
        v321 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      *v368 = strdup((const char *)v321);
    }
    v319 = v374;
    if (v318 < 0)
      goto LABEL_428;
LABEL_416:
    if ((v272 & 1) == 0)
      goto LABEL_450;
LABEL_429:
    v195 = v375 + 1;
    v374 = v319;
    v370 = v14;
    if (v375 + 1 == v378)
    {
      if (v14)
      {
        v322 = malloc_type_malloc(v14, 0xD2EF6589uLL);
        *v367 = v322;
        memcpy(v322, v420, v421 - v420);
        v323 = 0;
        v324 = (char *)(*v367 + v421 - v420);
        do
        {
          v326 = 32 * (_QWORD)v323;
          v413 = v323;
          if (a1[6 * (_QWORD)v323])
          {
            v327 = a2[(_QWORD)v323][17];
            v328 = v417;
            v329 = &v417[32 * (_QWORD)v323];
            v330 = *((_DWORD *)v329 + 6);
            if (v327 == 2)
              v330 *= *((_DWORD *)v329 + 7);
            if (v330 >= 1)
            {
              v331 = 0;
              v332 = v330;
              do
              {
                v333 = *(_QWORD *)(*(_QWORD *)&v328[v326] + 24 * v331);
                if (*(_QWORD *)(*(_QWORD *)&v328[v326] + 24 * v331 + 8) != v333)
                {
                  v334 = 0;
                  v335 = 0;
                  do
                  {
                    v336 = *(const void **)(v333 + v334);
                    v337 = *(_QWORD *)(v333 + v334 + 8) - (_QWORD)v336;
                    memcpy(v324, v336, v337);
                    v324 += v337;
                    ++v335;
                    v328 = v417;
                    v333 = *(_QWORD *)(*(_QWORD *)&v417[v326] + 24 * v331);
                    v334 += 24;
                  }
                  while (v335 < 0xAAAAAAAAAAAAAAABLL
                               * ((*(_QWORD *)(*(_QWORD *)&v417[v326] + 24 * v331 + 8) - v333) >> 3));
                }
                ++v331;
              }
              while (v331 != v332);
            }
          }
          else
          {
            v325 = 8 * v16[(_QWORD)v323];
            memcpy(v324, ***(const void ****)&v417[32 * (_QWORD)v323], v325);
            v324 += v325;
          }
          v323 = v413 + 1;
          v16 = v381;
        }
        while (v413 + 1 != (char *)v378);
        if (v372 < 2)
        {
          if (*v381)
          {
            v364 = 0;
            v365 = 0;
            v366 = (char *)*v426;
            do
            {
              memcpy(v324, *(const void **)&v366[v364], *(_QWORD *)&v366[v364 + 8] - *(_QWORD *)&v366[v364]);
              v366 = (char *)*v426;
              v324 += *(_QWORD *)&v366[v364 + 8] - *(_QWORD *)&v366[v364];
              ++v365;
              v364 += 24;
            }
            while (v365 < *v381);
          }
        }
        else
        {
          v360 = 0;
          do
          {
            if (v381[v360])
            {
              v361 = 0;
              v362 = 0;
              do
              {
                *(_DWORD *)v324 = v360;
                v363 = v324 + 4;
                memcpy(v363, *(const void **)((char *)v426[3 * v360] + v361), *(_QWORD *)((char *)v426[3 * v360] + v361 + 8) - *(_QWORD *)((char *)v426[3 * v360] + v361));
                v324 = &v363[*(_QWORD *)((char *)v426[3 * v360] + v361 + 8) - *(_QWORD *)((char *)v426[3 * v360] + v361)];
                ++v362;
                v361 += 24;
              }
              while (v362 < v381[v360]);
            }
            ++v360;
          }
          while (v360 != v378);
        }
        goto LABEL_451;
      }
      goto LABEL_447;
    }
  }
  if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_416;
LABEL_428:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((v272 & 1) != 0)
    goto LABEL_429;
LABEL_450:
  v14 = 0;
LABEL_451:
  v340 = v426;
  if (v426)
  {
    v341 = v427;
    v342 = v426;
    if (v427 != v426)
    {
      v343 = v427;
      do
      {
        v346 = (char *)*(v343 - 3);
        v343 -= 3;
        v345 = v346;
        if (v346)
        {
          v347 = (char *)*(v341 - 2);
          v344 = v345;
          if (v347 != v345)
          {
            v348 = (char *)*(v341 - 2);
            do
            {
              v350 = (void *)*((_QWORD *)v348 - 3);
              v348 -= 24;
              v349 = v350;
              if (v350)
              {
                *((_QWORD *)v347 - 2) = v349;
                operator delete(v349);
              }
              v347 = v348;
            }
            while (v348 != v345);
            v344 = *v343;
          }
          *(v341 - 2) = v345;
          operator delete(v344);
        }
        v341 = v343;
      }
      while (v343 != v340);
      v342 = v426;
    }
    v427 = v340;
    operator delete(v342);
  }
LABEL_465:
  v351 = (void **)v415;
  if (v415)
  {
    v352 = v416;
    v353 = v415;
    if (v416 != v415)
    {
      v354 = v416;
      do
      {
        v357 = (void **)*(v354 - 3);
        v354 -= 3;
        v356 = v357;
        if (v357)
        {
          v358 = (void **)*(v352 - 2);
          v355 = v356;
          if (v358 != v356)
          {
            do
            {
              if (*((char *)v358 - 17) < 0)
                operator delete(*(v358 - 5));
              v358 -= 5;
            }
            while (v358 != v356);
            v355 = *v354;
          }
          *(v352 - 2) = v356;
          operator delete(v355);
        }
        v352 = v354;
      }
      while (v354 != v351);
      v353 = v415;
    }
    v416 = v351;
    operator delete(v353);
  }
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v417;
  sub_239A1F034((void ***)&__src);
  if (v16)
    operator delete(v16);
  if (v420)
  {
    v421 = v420;
    operator delete(v420);
  }
  return v14;
}

void sub_239A1B634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void **a50)
{
  void *v50;
  uint64_t v51;
  void *v53;

  sub_239A1EC58(&a50);
  *(_QWORD *)(v51 - 200) = v51 - 248;
  sub_239A1F034((void ***)(v51 - 200));
  if (v50)
  {
    operator delete(v50);
    v53 = *(void **)(v51 - 224);
    if (!v53)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v53 = *(void **)(v51 - 224);
    if (!v53)
      goto LABEL_3;
  }
  *(_QWORD *)(v51 - 216) = v53;
  operator delete(v53);
  _Unwind_Resume(a1);
}

uint64_t sub_239A1B880(int32x2_t *a1, std::string::size_type a2, char *__filename, char **a4)
{
  int v7;
  char *v8;
  char *v9;
  char *v11;
  char *v12;
  FILE *v14;
  FILE *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  std::string::size_type v20;
  std::string *p_ptr;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  int v25;
  std::string *p_p;
  std::string __ptr;
  std::string __p;

  if (a1)
  {
    if (__filename)
    {
      v7 = *(_DWORD *)(a2 + 124);
      if ((v7 & 0x80000000) == 0)
      {
        if (v7 == 128)
        {
          v8 = (char *)operator new(0x30uLL);
          v9 = v8;
          strcpy(v8, "ZFP compression is not supported in this build");
          if (a4)
            *a4 = strdup(v8);
          operator delete(v9);
          return 4294967286;
        }
        v14 = fopen(__filename, "wb");
        if (v14)
        {
          v15 = v14;
          __ptr.__r_.__value_.__r.__words[0] = 0;
          __p.__r_.__value_.__r.__words[0] = a2;
          v16 = sub_239A19080(a1, &__p, 1u, &__ptr, a4);
          if (!v16)
            return 4294967284;
          v17 = v16;
          if (__ptr.__r_.__value_.__r.__words[0])
          {
            v18 = fwrite(__ptr.__r_.__value_.__l.__data_, 1uLL, v16, v15);
            free(__ptr.__r_.__value_.__l.__data_);
            fclose(v15);
            if (v18 == v17)
              return 0;
          }
          else
          {
            free(0);
            fclose(v15);
          }
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&__p, "Cannot write a file");
          if (a4)
            *a4 = strdup((const char *)&__p);
          return 4294967285;
        }
        v19 = strlen(__filename);
        if (v19 >= 0x7FFFFFFFFFFFFFF8)
          sub_23941A5AC();
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          p_ptr = (std::string *)operator new(v22 + 1);
          __ptr.__r_.__value_.__l.__size_ = v20;
          __ptr.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
          __ptr.__r_.__value_.__r.__words[0] = (std::string::size_type)p_ptr;
        }
        else
        {
          *((_BYTE *)&__ptr.__r_.__value_.__s + 23) = v19;
          p_ptr = &__ptr;
          if (!v19)
            goto LABEL_25;
        }
        memcpy(p_ptr, __filename, v20);
LABEL_25:
        p_ptr->__r_.__value_.__s.__data_[v20] = 0;
        v24 = std::string::insert(&__ptr, 0, "Cannot write a file: ");
        __p = *v24;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (a4)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *a4 = strdup((const char *)p_p);
        }
        if (v25 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__ptr.__r_.__value_.__l.__data_);
        return 4294967285;
      }
    }
  }
  v11 = (char *)operator new(0x28uLL);
  v12 = v11;
  strcpy(v11, "Invalid argument for SaveEXRImageToFile");
  if (a4)
    *a4 = strdup(v11);
  operator delete(v12);
  return 4294967293;
}

void sub_239A1BB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239A1BB94(void *a1)
{
  if (a1)
    free(a1);
}

double sub_239A1BBA0(uint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  void **v5;
  unint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  double result;

  v4 = (_QWORD *)*a1;
  v5 = (void **)a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
  if (v5 == (void **)*a1)
  {
    sub_23951A318((uint64_t)a1, 1 - v6);
  }
  else if (v6 >= 2)
  {
    v7 = (void **)(v4 + 3);
    if (v5 != v4 + 3)
    {
      v8 = (void **)a1[1];
      do
      {
        v11 = (char *)*(v8 - 3);
        v8 -= 3;
        v10 = v11;
        if (v11)
        {
          v12 = (char *)*(v5 - 2);
          v9 = v10;
          if (v12 != v10)
          {
            v13 = (char *)*(v5 - 2);
            do
            {
              v15 = (void *)*((_QWORD *)v13 - 3);
              v13 -= 24;
              v14 = v15;
              if (v15)
              {
                *((_QWORD *)v12 - 2) = v14;
                operator delete(v14);
              }
              v12 = v13;
            }
            while (v13 != v10);
            v9 = *v8;
          }
          *(v5 - 2) = v10;
          operator delete(v9);
        }
        v5 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = (uint64_t)v7;
  }
  v16 = *a1;
  v18 = *(_QWORD *)*a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
  if (v17 == v18)
  {
    sub_2394D951C(*a1, 1 - v19);
  }
  else if (v19 >= 2)
  {
    v20 = v18 + 24;
    if (v17 != v18 + 24)
    {
      v21 = *(_QWORD *)(*a1 + 8);
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v17 - 16) = v22;
          operator delete(v22);
        }
        v17 = v21;
      }
      while (v21 != v20);
    }
    *(_QWORD *)(v16 + 8) = v20;
  }
  v24 = *(_QWORD **)*a1;
  v25 = (uint64_t)(v24[1] - *v24) >> 3;
  if (a2 <= v25)
  {
    if (a2 < v25)
      v24[1] = *v24 + 8 * a2;
  }
  else
  {
    sub_23946DAD4((uint64_t)v24, a2 - v25);
  }
  *(_QWORD *)&result = 0x100000001;
  a1[3] = 0x100000001;
  return result;
}

void sub_239A1BD2C(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  int v61;
  unint64_t v63;
  _BOOL4 v64;
  int v65;
  int v66;
  _BOOL4 v67;
  int v68;
  int v69;
  int *v70;
  unint64_t v71;
  _BOOL4 v72;
  int v73;
  int v74;
  _BOOL4 v75;
  int v76;
  int v77;
  int *v78;

  v7 = a3[2];
  v6 = a3[3];
  v9 = a3[4];
  v8 = a3[5];
  v10 = a3[17];
  if (!v10)
  {
    v20 = 1;
    v16 = 1;
    v21 = *a1;
    v22 = (a1[1] - *a1) >> 2;
    v23 = v22 <= 1;
    v24 = 1 - v22;
    if (v22)
      goto LABEL_66;
    goto LABEL_42;
  }
  if (v10 != 2)
  {
    if (v10 != 1)
    {
      LODWORD(v16) = 0;
      goto LABEL_39;
    }
    v11 = v9 - v7 + 1;
    if ((int)v11 <= v8 - v6 + 1)
      v11 = v8 - v6 + 1;
    if (a3[18])
    {
      if (v11 >= 2)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          if ((v11 & 1) != 0)
            v12 = 1;
          ++v13;
          v48 = v11 > 3;
          v11 >>= 1;
        }
        while (v48);
LABEL_20:
        v15 = v12 + v13;
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    if (v11 >= 2)
    {
      v15 = 0;
      do
      {
        ++v15;
        v48 = v11 > 3;
        v11 >>= 1;
      }
      while (v48);
      goto LABEL_38;
    }
LABEL_37:
    v15 = 0;
    goto LABEL_38;
  }
  v14 = v9 - v7 + 1;
  if (a3[18])
  {
    if (v14 >= 2)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if ((v14 & 1) != 0)
          v12 = 1;
        ++v13;
        v48 = v14 > 3;
        v14 >>= 1;
      }
      while (v48);
      goto LABEL_20;
    }
    goto LABEL_37;
  }
  if (v14 < 2)
    goto LABEL_37;
  v15 = 0;
  do
  {
    ++v15;
    v48 = v14 > 3;
    v14 >>= 1;
  }
  while (v48);
LABEL_38:
  LODWORD(v16) = v15 + 1;
  if (v10 == 2)
  {
    v17 = v8 - v6 + 1;
    if (a3[18])
    {
      if (v17 >= 2)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          if ((v17 & 1) != 0)
            v18 = 1;
          ++v19;
          v48 = v17 > 3;
          v17 >>= 1;
        }
        while (v48);
        goto LABEL_53;
      }
      goto LABEL_64;
    }
    if (v17 >= 2)
    {
      v31 = 0;
      do
      {
        ++v31;
        v48 = v17 > 3;
        v17 >>= 1;
      }
      while (v48);
LABEL_65:
      v20 = v31 + 1;
      v16 = (int)v16;
      v21 = *a1;
      v33 = (a1[1] - *a1) >> 2;
      v23 = (int)v16 >= v33;
      v24 = (int)v16 - v33;
      if ((int)v16 <= v33)
        goto LABEL_66;
      goto LABEL_42;
    }
LABEL_64:
    v31 = 0;
    goto LABEL_65;
  }
LABEL_39:
  if (v10 == 1)
  {
    v30 = v9 - v7 + 1;
    if ((int)v30 <= v8 - v6 + 1)
      v30 = v8 - v6 + 1;
    if (a3[18])
    {
      if (v30 >= 2)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          if ((v30 & 1) != 0)
            v18 = 1;
          ++v19;
          v48 = v30 > 3;
          v30 >>= 1;
        }
        while (v48);
LABEL_53:
        v31 = v18 + v19;
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    if (v30 >= 2)
    {
      v31 = 0;
      do
      {
        ++v31;
        v48 = v30 > 3;
        v30 >>= 1;
      }
      while (v48);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  v20 = 0;
  v16 = (int)v16;
  v21 = *a1;
  v32 = (a1[1] - *a1) >> 2;
  v23 = (int)v16 >= v32;
  v24 = (int)v16 - v32;
  if ((int)v16 <= v32)
  {
LABEL_66:
    if (!v23)
      a1[1] = v21 + 4 * v16;
    v25 = v20;
    v26 = *a2;
    v34 = (a2[1] - *a2) >> 2;
    v28 = v20 >= v34;
    v29 = v20 - v34;
    if (v20 > v34)
      goto LABEL_69;
    goto LABEL_43;
  }
LABEL_42:
  sub_23942CB44((uint64_t)a1, v24);
  v25 = v20;
  v26 = *a2;
  v27 = (a2[1] - *a2) >> 2;
  v28 = v20 >= v27;
  v29 = v20 - v27;
  if (v20 > v27)
  {
LABEL_69:
    sub_23942CB44((uint64_t)a2, v29);
    goto LABEL_70;
  }
LABEL_43:
  if (!v28)
    a2[1] = v26 + 4 * v25;
LABEL_70:
  v35 = *a1;
  v36 = a1[1];
  v37 = v36 - *a1;
  if (v36 == *a1)
    goto LABEL_84;
  v38 = v9 - v7;
  v39 = v9 - v7 + 1;
  v40 = a3[15];
  v41 = v37 >> 2;
  v42 = a3[18];
  v43 = v40 - 1;
  if (v41 <= 1)
    v44 = 1;
  else
    v44 = v41;
  if (v44 < 2)
  {
    v45 = 0;
    v46 = 0;
    do
    {
LABEL_76:
      v47 = v39 / (1 << v46);
      v48 = v42 == 1 && v47 << v46 <= v38;
      if (v48)
        ++v47;
      if (v47 <= 1)
        v47 = 1;
      *(_DWORD *)(v35 + 4 * v45) = (v43 + v47) / v40;
      v45 = ++v46;
    }
    while (v41 > v46);
    goto LABEL_84;
  }
  v46 = 0;
  v45 = 0;
  if (!(_DWORD)v44)
    goto LABEL_76;
  v63 = (v44 - 1) >> 32;
  if (v63)
    goto LABEL_76;
  v45 = v44 & 0xFFFFFFFFFFFFFFFELL;
  v46 = v44 & 0xFFFFFFFE;
  do
  {
    v64 = v42 == 1;
    v65 = v39 / (1 << v63);
    v66 = v39 / (1 << (v63 + 1));
    v67 = v65 << v63 <= v38 && v42 == 1;
    if (v66 << (v63 + 1) > v38)
      v64 = 0;
    v68 = v65 + v67;
    v69 = v66 + v64;
    if (v65 + v67 <= 1)
      v68 = 1;
    if (v69 <= 1)
      v69 = 1;
    v70 = (int *)(v35 + 4 * v63);
    *v70 = (v43 + v68) / v40;
    v70[1] = (v43 + v69) / v40;
    v63 += 2;
  }
  while (v45 != v63);
  if (v44 != v45)
    goto LABEL_76;
LABEL_84:
  v49 = *a2;
  v50 = a2[1];
  v51 = v50 - *a2;
  if (v50 == *a2)
    return;
  v52 = v8 - v6;
  v53 = v8 - v6 + 1;
  v54 = a3[16];
  v55 = v51 >> 2;
  v56 = a3[18];
  v57 = v54 - 1;
  if (v55 <= 1)
    v58 = 1;
  else
    v58 = v55;
  if (v58 < 2)
  {
    v59 = 0;
    v60 = 0;
    do
    {
LABEL_90:
      v61 = v53 / (1 << v60);
      if (v56 == 1 && v61 << v60 <= v52)
        ++v61;
      if (v61 <= 1)
        v61 = 1;
      *(_DWORD *)(v49 + 4 * v59) = (v57 + v61) / v54;
      v59 = ++v60;
    }
    while (v55 > v60);
    return;
  }
  v60 = 0;
  v59 = 0;
  if (!(_DWORD)v58)
    goto LABEL_90;
  v71 = (v58 - 1) >> 32;
  if (v71)
    goto LABEL_90;
  v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
  v60 = v58 & 0xFFFFFFFE;
  do
  {
    v72 = v56 == 1;
    v73 = v53 / (1 << v71);
    v74 = v53 / (1 << (v71 + 1));
    v75 = v73 << v71 <= v52 && v56 == 1;
    if (v74 << (v71 + 1) > v52)
      v72 = 0;
    v76 = v73 + v75;
    v77 = v74 + v72;
    if (v73 + v75 <= 1)
      v76 = 1;
    if (v77 <= 1)
      v77 = 1;
    v78 = (int *)(v49 + 4 * v71);
    *v78 = (v57 + v76) / v54;
    v78[1] = (v57 + v77) / v54;
    v71 += 2;
  }
  while (v59 != v71);
  if (v58 != v59)
    goto LABEL_90;
}

uint64_t sub_239A1C268(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void **v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  size_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char **v84;
  unint64_t v85;
  char **v86;
  char *v87;
  int v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  size_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _OWORD *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v148;
  uint64_t v149;
  int v151;
  unsigned int v152;
  int v153;
  size_t v154;
  char *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;

  v4 = a3;
  v5 = a1;
  v6 = a3[1] - *a3;
  v7 = (a4[1] - *a4) >> 2;
  *(_DWORD *)(a1 + 24) = (unint64_t)v6 >> 2;
  *(_DWORD *)(a1 + 28) = v7;
  if (a2 >= 2)
  {
    if (a2 != 2)
      return 0;
    v12 = (int)v7 * (uint64_t)(int)((unint64_t)v6 >> 2);
    v13 = *(void ***)(a1 + 8);
    v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(_QWORD *)a1) >> 3);
    if (v12 <= v14)
    {
      if (v12 < v14)
      {
        v24 = *(_QWORD *)a1 + 24 * v12;
        if (v13 != (void **)v24)
        {
          v25 = *(void ***)(a1 + 8);
          do
          {
            v28 = (char *)*(v25 - 3);
            v25 -= 3;
            v27 = v28;
            if (v28)
            {
              v29 = (char *)*(v13 - 2);
              v26 = v27;
              if (v29 != v27)
              {
                v30 = (char *)*(v13 - 2);
                do
                {
                  v32 = (void *)*((_QWORD *)v30 - 3);
                  v30 -= 24;
                  v31 = v32;
                  if (v32)
                  {
                    *((_QWORD *)v29 - 2) = v31;
                    operator delete(v31);
                  }
                  v29 = v30;
                }
                while (v30 != v27);
                v26 = *v25;
              }
              *(v13 - 2) = v27;
              operator delete(v26);
            }
            v13 = v25;
          }
          while (v25 != (void **)v24);
        }
        *(_QWORD *)(v5 + 8) = v24;
      }
    }
    else
    {
      sub_23951A318(a1, v12 - v14);
    }
    LODWORD(v79) = *(_DWORD *)(v5 + 24);
    v78 = *(_DWORD *)(v5 + 28);
    if (v78 < 1 || (int)v79 < 1)
      return 0;
    v145 = 0;
    result = 0;
LABEL_83:
    if ((int)v79 < 1)
      goto LABEL_82;
    v81 = 0;
    v82 = *(_QWORD *)v5;
    while (1)
    {
      v83 = v81 + v79 * v145;
      v84 = (char **)(v82 + 24 * v83);
      v85 = *(int *)(*a4 + 4 * v145);
      v86 = v84 + 1;
      v87 = v84[1];
      v88 = v83;
      v89 = *v84;
      v90 = 0xAAAAAAAAAAAAAAABLL * ((v87 - *v84) >> 3);
      v91 = v85 - v90;
      v157 = v83;
      v159 = v81;
      if (v85 <= v90)
      {
        if (v85 < v90)
        {
          v109 = result;
          v110 = &v89[24 * (int)v85];
          if (v87 != v110)
          {
            v111 = v84[1];
            do
            {
              v113 = (void *)*((_QWORD *)v111 - 3);
              v111 -= 24;
              v112 = v113;
              if (v113)
              {
                *((_QWORD *)v87 - 2) = v112;
                operator delete(v112);
                v88 = v157;
                v81 = v159;
              }
              v87 = v111;
            }
            while (v111 != v110);
          }
          *v86 = v110;
          result = v109;
        }
        goto LABEL_113;
      }
      v92 = v82 + 24 * v83;
      v95 = *(_QWORD *)(v92 + 16);
      v94 = (char **)(v92 + 16);
      v93 = v95;
      if (0xAAAAAAAAAAAAAAABLL * ((v95 - (uint64_t)v87) >> 3) >= v91)
      {
        v114 = result;
        bzero(v87, 24 * ((24 * v91 - 24) / 0x18) + 24);
        v88 = v157;
        v81 = v159;
        result = v114;
        *v86 = &v87[24 * ((24 * v91 - 24) / 0x18) + 24];
        v5 = a1;
      }
      else
      {
        if ((v85 & 0x80000000) != 0)
          sub_2394189F8();
        v152 = result;
        v96 = 0xAAAAAAAAAAAAAAABLL * ((v93 - (uint64_t)v89) >> 3);
        if (2 * v96 > v85)
          v85 = 2 * v96;
        if (v96 >= 0x555555555555555)
          v97 = 0xAAAAAAAAAAAAAAALL;
        else
          v97 = v85;
        if (v97 > 0xAAAAAAAAAAAAAAALL)
LABEL_142:
          sub_239418A80();
        v98 = 24 * v97;
        v99 = (char *)operator new(24 * v97);
        v100 = &v99[24 * v90];
        v101 = &v99[v98];
        bzero(v100, 24 * ((24 * v91 - 24) / 0x18) + 24);
        v102 = &v100[24 * ((24 * v91 - 24) / 0x18) + 24];
        if (v87 == v89)
        {
          *v84 = v100;
          *v86 = v102;
          *v94 = v101;
          v4 = a3;
          v5 = a1;
          result = v152;
          v88 = v157;
          v81 = v159;
          if (!v87)
            goto LABEL_113;
        }
        else
        {
          result = v152;
          v81 = v159;
          do
          {
            v103 = v100;
            *((_QWORD *)v100 - 2) = 0;
            *((_QWORD *)v100 - 1) = 0;
            v104 = *(_OWORD *)(v87 - 24);
            v87 -= 24;
            *(_OWORD *)(v100 - 24) = v104;
            v100 -= 24;
            *((_QWORD *)v103 - 1) = *((_QWORD *)v87 + 2);
            *(_QWORD *)v87 = 0;
            *((_QWORD *)v87 + 1) = 0;
            *((_QWORD *)v87 + 2) = 0;
          }
          while (v87 != v89);
          v87 = *v84;
          v105 = *v86;
          *v84 = v100;
          *v86 = v102;
          *v94 = v101;
          v88 = v157;
          if (v105 == v87)
          {
            v4 = a3;
            v5 = a1;
            if (!v87)
              goto LABEL_113;
          }
          else
          {
            v106 = v105;
            v4 = a3;
            v5 = a1;
            do
            {
              v108 = (void *)*((_QWORD *)v106 - 3);
              v106 -= 24;
              v107 = v108;
              if (v108)
              {
                *((_QWORD *)v105 - 2) = v107;
                operator delete(v107);
                v88 = v157;
                v81 = v159;
              }
              v105 = v106;
            }
            while (v106 != v87);
            result = v152;
            if (!v87)
              goto LABEL_113;
          }
        }
        operator delete(v87);
        v88 = v157;
        v81 = v159;
        result = v152;
      }
LABEL_113:
      v82 = *(_QWORD *)v5;
      v115 = *(_QWORD *)(*(_QWORD *)v5 + 24 * v88);
      if (*(_QWORD *)(*(_QWORD *)v5 + 24 * v88 + 8) != v115)
      {
        v116 = 0;
        v117 = *(_DWORD *)(*v4 + 4 * v81);
        while (1)
        {
          v119 = v115 + 24 * v116;
          v120 = v117;
          v121 = (_QWORD *)(v119 + 8);
          v122 = *(char **)(v119 + 8);
          v123 = *(char **)v119;
          v124 = (uint64_t)&v122[-*(_QWORD *)v119];
          v125 = v124 >> 3;
          v126 = v117 - (v124 >> 3);
          if (v117 <= (unint64_t)(v124 >> 3))
          {
            if (v117 < (unint64_t)(v124 >> 3))
              *v121 = &v123[8 * v117];
            goto LABEL_116;
          }
          v127 = v115 + 24 * v116;
          v130 = *(_QWORD *)(v127 + 16);
          v129 = (_QWORD *)(v127 + 16);
          v128 = v130;
          if (v126 > (v130 - (uint64_t)v122) >> 3)
            break;
          v118 = result;
          bzero(v122, 8 * v126);
          v88 = v157;
          v81 = v159;
          LODWORD(result) = v118;
          *v121 = &v122[8 * v126];
          v5 = a1;
LABEL_116:
          v117 = *(_DWORD *)(*v4 + 4 * v81);
          result = (v117 + result);
          ++v116;
          v82 = *(_QWORD *)v5;
          v115 = *(_QWORD *)(*(_QWORD *)v5 + 24 * v88);
          if (v116 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)v5 + 24 * v88 + 8) - v115) >> 3))
            goto LABEL_85;
        }
        if (v117 < 0)
          sub_2394189F8();
        v131 = v128 - (_QWORD)v123;
        if (v131 >> 2 > (unint64_t)v117)
          v120 = v131 >> 2;
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
          v120 = 0x1FFFFFFFFFFFFFFFLL;
        if (v120 >> 61)
          goto LABEL_142;
        v153 = result;
        v149 = 8 * v120;
        v132 = operator new(8 * v120);
        v155 = &v132[8 * v125];
        v133 = 8 * v126;
        bzero(v155, v133);
        if (v122 == v123)
        {
          v135 = &v132[8 * v125];
          v88 = v157;
          LODWORD(result) = v153;
          v81 = v159;
          v136 = v149;
        }
        else
        {
          v134 = v122 - 8 - v123;
          LODWORD(result) = v153;
          v88 = v157;
          v81 = v159;
          if (v134 < 0x58)
          {
            v135 = &v132[8 * v125];
            v136 = v149;
            goto LABEL_135;
          }
          v135 = &v132[8 * v125];
          v136 = v149;
          if ((unint64_t)(v122 - &v132[v124]) < 0x20)
            goto LABEL_148;
          v137 = (v134 >> 3) + 1;
          v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
          v139 = &v122[-v138];
          v135 = &v155[-v138];
          v140 = &v132[8 * v125 - 16];
          v141 = v122 - 16;
          v142 = v137 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v143 = *(_OWORD *)v141;
            *(v140 - 1) = *((_OWORD *)v141 - 1);
            *v140 = v143;
            v140 -= 2;
            v141 -= 32;
            v142 -= 4;
          }
          while (v142);
          v122 = v139;
          if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_148:
            do
            {
LABEL_135:
              v144 = *((_QWORD *)v122 - 1);
              v122 -= 8;
              *((_QWORD *)v135 - 1) = v144;
              v135 -= 8;
            }
            while (v122 != v123);
          }
        }
        *(_QWORD *)v119 = v135;
        *v121 = &v155[v133];
        *v129 = &v132[v136];
        v4 = a3;
        v5 = a1;
        if (v123)
        {
          operator delete(v123);
          v88 = v157;
          v81 = v159;
          LODWORD(result) = v153;
        }
        goto LABEL_116;
      }
LABEL_85:
      ++v81;
      v79 = *(int *)(v5 + 24);
      if (v81 >= v79)
      {
        v78 = *(_DWORD *)(v5 + 28);
LABEL_82:
        if (++v145 >= v78)
          return result;
        goto LABEL_83;
      }
    }
  }
  v8 = (int)(v6 >> 2);
  v9 = *(void ***)(a1 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v11 = *(_QWORD *)a1;
      if (v9 == *(void ***)a1)
        return 0;
    }
    else
    {
      v15 = *(_QWORD *)a1 + 24 * (int)v8;
      if (v9 != (void **)v15)
      {
        v16 = *(void ***)(a1 + 8);
        do
        {
          v19 = (char *)*(v16 - 3);
          v16 -= 3;
          v18 = v19;
          if (v19)
          {
            v20 = (char *)*(v9 - 2);
            v17 = v18;
            if (v20 != v18)
            {
              v21 = (char *)*(v9 - 2);
              do
              {
                v23 = (void *)*((_QWORD *)v21 - 3);
                v21 -= 24;
                v22 = v23;
                if (v23)
                {
                  *((_QWORD *)v20 - 2) = v22;
                  operator delete(v22);
                }
                v20 = v21;
              }
              while (v21 != v18);
              v17 = *v16;
            }
            *(v9 - 2) = v18;
            operator delete(v17);
          }
          v9 = v16;
        }
        while (v16 != (void **)v15);
      }
      *(_QWORD *)(v5 + 8) = v15;
      v11 = *(_QWORD *)v5;
      if (v15 == *(_QWORD *)v5)
        return 0;
    }
    goto LABEL_35;
  }
  sub_23951A318(a1, v8 - v10);
  v11 = *(_QWORD *)v5;
  if (*(_QWORD *)(v5 + 8) != *(_QWORD *)v5)
  {
LABEL_35:
    v33 = 0;
    v34 = 0;
    result = 0;
    while (1)
    {
      v36 = result;
      v38 = *(int *)(*a4 + 4 * v33);
      v37 = (_QWORD *)(v11 + 24 * v33);
      v40 = v37 + 1;
      v39 = v37[1];
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v39 - *v37) >> 3);
      v158 = v33;
      if (v38 <= v41)
      {
        if (v38 < v41)
        {
          v42 = *v37 + 24 * (int)v38;
          if (v39 != v42)
          {
            v43 = v37[1];
            do
            {
              v45 = *(void **)(v43 - 24);
              v43 -= 24;
              v44 = v45;
              if (v45)
              {
                *(_QWORD *)(v39 - 16) = v44;
                operator delete(v44);
                v33 = v158;
              }
              v39 = v43;
            }
            while (v43 != v42);
          }
          *v40 = v42;
        }
      }
      else
      {
        sub_2394D951C((uint64_t)v37, v38 - v41);
        v33 = v158;
      }
      v11 = *(_QWORD *)v5;
      v46 = (uint64_t *)(*(_QWORD *)v5 + 24 * v33);
      v47 = *v46;
      if (v46[1] != *v46)
        break;
      result = v36;
LABEL_37:
      v33 = ++v34;
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 8) - v11) >> 3) <= v34)
        return result;
    }
    v148 = v34;
    v48 = 0;
    v49 = 0;
    v50 = *(_DWORD *)(*v4 + 4 * v33);
    LODWORD(result) = v36;
    while (1)
    {
      v52 = v47 + 24 * v48;
      v53 = v50;
      v54 = (_QWORD *)(v52 + 8);
      v55 = *(char **)(v52 + 8);
      v56 = *(char **)v52;
      v57 = (uint64_t)&v55[-*(_QWORD *)v52];
      v58 = v57 >> 3;
      v59 = v50 - (v57 >> 3);
      if (v50 <= (unint64_t)(v57 >> 3))
      {
        if (v50 < (unint64_t)(v57 >> 3))
          *v54 = &v56[8 * v50];
        goto LABEL_50;
      }
      v60 = v47 + 24 * v48;
      v63 = *(_QWORD *)(v60 + 16);
      v62 = (_QWORD *)(v60 + 16);
      v61 = v63;
      if (v59 > (v63 - (uint64_t)v55) >> 3)
        break;
      v51 = result;
      bzero(v55, 8 * v59);
      v33 = v158;
      LODWORD(result) = v51;
      *v54 = &v55[8 * v59];
LABEL_50:
      v50 = *(_DWORD *)(*v4 + 4 * v33);
      result = (v50 + result);
      v5 = a1;
      v11 = *(_QWORD *)a1;
      v47 = *(_QWORD *)(*(_QWORD *)a1 + 24 * v33);
      v48 = ++v49;
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)a1 + 24 * v33 + 8) - v47) >> 3) <= v49)
      {
        v34 = v148;
        goto LABEL_37;
      }
    }
    if (v50 < 0)
      sub_2394189F8();
    v151 = result;
    v64 = v61 - (_QWORD)v56;
    if (v64 >> 2 > (unint64_t)v50)
      v53 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    if (v53 >> 61)
      goto LABEL_142;
    v156 = 8 * v53;
    v65 = operator new(8 * v53);
    v66 = 8 * v59;
    v67 = &v65[8 * v58];
    v154 = v66;
    bzero(v67, v66);
    if (v55 == v56)
    {
      v69 = &v65[8 * v58];
      LODWORD(result) = v151;
      v33 = v158;
    }
    else
    {
      v68 = v55 - 8 - v56;
      LODWORD(result) = v151;
      v33 = v158;
      if (v68 >= 0x58)
      {
        v69 = &v65[8 * v58];
        if ((unint64_t)(v55 - &v65[v57]) >= 0x20)
        {
          v70 = (v68 >> 3) + 1;
          v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          v72 = &v55[-v71];
          v69 = &v67[-v71];
          v73 = &v65[8 * v58 - 16];
          v74 = v55 - 16;
          v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v76 = *(_OWORD *)v74;
            *(v73 - 1) = *((_OWORD *)v74 - 1);
            *v73 = v76;
            v73 -= 2;
            v74 -= 32;
            v75 -= 4;
          }
          while (v75);
          v55 = v72;
          if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_70;
        }
      }
      else
      {
        v69 = &v65[8 * v58];
      }
      do
      {
        v77 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *((_QWORD *)v69 - 1) = v77;
        v69 -= 8;
      }
      while (v55 != v56);
    }
LABEL_70:
    *(_QWORD *)v52 = v69;
    *v54 = &v67[v154];
    *v62 = &v65[v156];
    v4 = a3;
    if (v56)
    {
      operator delete(v56);
      v33 = v158;
      LODWORD(result) = v151;
    }
    goto LABEL_50;
  }
  return 0;
}

BOOL sub_239A1CCD0(uint64_t a1, int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  char v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  _WORD *v42;
  char v43;
  unsigned int v44;
  char v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  _BYTE *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  char *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  _BYTE *v98;
  _BYTE v99[4];
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  __int128 __dst;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v3 = (unsigned __int8 *)(a1 + 37546);
  v4 = (unsigned __int8 *)(a1 + 36970);
  v5 = a1 + 34378;
  if (a2)
  {
    v6 = 0;
    memset((void *)(a1 + 36938), 7, 24);
    *(_QWORD *)&v7 = 0x808080808080808;
    *((_QWORD *)&v7 + 1) = 0x808080808080808;
    *(_OWORD *)(a1 + 36794) = v7;
    *(_OWORD *)(a1 + 36810) = v7;
    *(_OWORD *)(a1 + 36762) = v7;
    *(_OWORD *)(a1 + 36778) = v7;
    *(_OWORD *)(a1 + 36730) = v7;
    *(_OWORD *)(a1 + 36746) = v7;
    *(_OWORD *)(a1 + 36698) = v7;
    *(_OWORD *)(a1 + 36714) = v7;
    *(_OWORD *)(a1 + 36682) = v7;
    *(_QWORD *)&v7 = 0x909090909090909;
    *((_QWORD *)&v7 + 1) = 0x909090909090909;
    *(_OWORD *)(a1 + 36826) = v7;
    *(_OWORD *)(a1 + 36842) = v7;
    *(_OWORD *)(a1 + 36858) = v7;
    *(_OWORD *)(a1 + 36874) = v7;
    *(_OWORD *)(a1 + 36890) = v7;
    *(_OWORD *)(a1 + 36906) = v7;
    *(_OWORD *)(a1 + 36922) = v7;
    *(_QWORD *)(a1 + 36962) = 0x808080808080808;
    *(_QWORD *)&v7 = 0x505050505050505;
    *((_QWORD *)&v7 + 1) = 0x505050505050505;
    *(_OWORD *)v4 = v7;
    *(_OWORD *)(a1 + 36986) = v7;
    __dst = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v123 = 0;
    do
      ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36682 + v6++));
    while (v6 != 288);
    v8 = 0;
    v100 = 0;
    v101 = 2 * DWORD1(__dst);
    v102 = 2 * (DWORD2(__dst) + 2 * DWORD1(__dst));
    v103 = 2 * (HIDWORD(__dst) + v102);
    v104 = 2 * (v116 + v103);
    v105 = 2 * (DWORD1(v116) + v104);
    v106 = 2 * (DWORD2(v116) + v105);
    v107 = 2 * (HIDWORD(v116) + v106);
    v108 = 2 * (v117 + v107);
    v109 = 2 * (DWORD1(v117) + v108);
    v110 = 2 * (DWORD2(v117) + v109);
    v111 = 2 * (HIDWORD(v117) + v110);
    v112 = 2 * (v118 + v111);
    v113 = 2 * (DWORD1(v118) + v112);
    v114 = 2 * (DWORD2(v118) + v113);
    do
    {
      v9 = *(unsigned __int8 *)(a1 + v8 + 36682);
      if (*(_BYTE *)(a1 + v8 + 36682))
      {
        v10 = 0;
        v11 = 4 * *(unsigned __int8 *)(a1 + v8 + 36682);
        v12 = *(_DWORD *)&v99[v11];
        *(_DWORD *)&v99[v11] = v12 + 1;
        v13 = v9 + 1;
        do
        {
          v14 = v10;
          v15 = v12;
          v12 >>= 1;
          v10 = v15 & 1 | (2 * v14);
          --v13;
        }
        while (v13 > 1);
        *(_WORD *)(a1 + 2 * v8 + 34954) = v10;
      }
      ++v8;
    }
    while (v8 != 288);
    v16 = 0;
    __dst = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v123 = 0;
    ++*((_DWORD *)&__dst + *v4);
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36971));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36972));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36973));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36974));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36975));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36976));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36977));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36978));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36979));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36980));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36981));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36982));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36983));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36984));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36985));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36986));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36987));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36988));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36989));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36990));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36991));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36992));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36993));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36994));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36995));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36996));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36997));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36998));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 36999));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 37000));
    ++*((_DWORD *)&__dst + *(unsigned __int8 *)(a1 + 37001));
    v100 = 0;
    v101 = 2 * DWORD1(__dst);
    v102 = 2 * (DWORD2(__dst) + 2 * DWORD1(__dst));
    v103 = 2 * (HIDWORD(__dst) + v102);
    v104 = 2 * (v116 + v103);
    v105 = 2 * (DWORD1(v116) + v104);
    v106 = 2 * (DWORD2(v116) + v105);
    v107 = 2 * (HIDWORD(v116) + v106);
    v108 = 2 * (v117 + v107);
    v109 = 2 * (DWORD1(v117) + v108);
    v110 = 2 * (DWORD2(v117) + v109);
    v111 = 2 * (HIDWORD(v117) + v110);
    v112 = 2 * (v118 + v111);
    v113 = 2 * (DWORD1(v118) + v112);
    v114 = 2 * (DWORD2(v118) + v113);
    do
    {
      v17 = *(unsigned __int8 *)(a1 + v16 + 36970);
      if (*(_BYTE *)(a1 + v16 + 36970))
      {
        v18 = 0;
        v19 = 4 * *(unsigned __int8 *)(a1 + v16 + 36970);
        v20 = *(_DWORD *)&v99[v19];
        *(_DWORD *)&v99[v19] = v20 + 1;
        v21 = v17 + 1;
        do
        {
          v22 = v18;
          v23 = v20;
          v20 >>= 1;
          v18 = v23 & 1 | (2 * v22);
          --v21;
        }
        while (v21 > 1);
        *(_WORD *)(a1 + 2 * v16 + 35530) = v18;
      }
      ++v16;
    }
    while (v16 != 32);
    v24 = *(_DWORD *)(a1 + 92);
    v25 = *(_DWORD *)(a1 + 96) | (1 << v24);
    v26 = v24 + 2;
    *(_DWORD *)(a1 + 92) = v26;
    *(_DWORD *)(a1 + 96) = v25;
    if (v26 >= 8)
    {
      do
      {
        v27 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v27 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v27 + 1;
          *v27 = v25;
          v26 = *(_DWORD *)(a1 + 92);
          v25 = *(_DWORD *)(a1 + 96);
        }
        v25 >>= 8;
        v26 -= 8;
        *(_DWORD *)(a1 + 92) = v26;
        *(_DWORD *)(a1 + 96) = v25;
      }
      while (v26 > 7);
    }
    goto LABEL_279;
  }
  *(_WORD *)(a1 + 33738) = 1;
  sub_239A1E210();
  sub_239A1E210();
  if (*(_BYTE *)(v5 + 2589))
  {
    v28 = 286;
  }
  else if (*(_BYTE *)(v5 + 2588))
  {
    v28 = 285;
  }
  else if (*(_BYTE *)(v5 + 2587))
  {
    v28 = 284;
  }
  else if (*(_BYTE *)(v5 + 2586))
  {
    v28 = 283;
  }
  else if (*(_BYTE *)(v5 + 2585))
  {
    v28 = 282;
  }
  else if (*(_BYTE *)(v5 + 2584))
  {
    v28 = 281;
  }
  else if (*(_BYTE *)(v5 + 2583))
  {
    v28 = 280;
  }
  else if (*(_BYTE *)(v5 + 2582))
  {
    v28 = 279;
  }
  else if (*(_BYTE *)(v5 + 2581))
  {
    v28 = 278;
  }
  else if (*(_BYTE *)(v5 + 2580))
  {
    v28 = 277;
  }
  else if (*(_BYTE *)(v5 + 2579))
  {
    v28 = 276;
  }
  else if (*(_BYTE *)(v5 + 2578))
  {
    v28 = 275;
  }
  else if (*(_BYTE *)(v5 + 2577))
  {
    v28 = 274;
  }
  else if (*(_BYTE *)(v5 + 2576))
  {
    v28 = 273;
  }
  else if (*(_BYTE *)(v5 + 2575))
  {
    v28 = 272;
  }
  else if (*(_BYTE *)(v5 + 2574))
  {
    v28 = 271;
  }
  else if (*(_BYTE *)(v5 + 2573))
  {
    v28 = 270;
  }
  else if (*(_BYTE *)(v5 + 2572))
  {
    v28 = 269;
  }
  else if (*(_BYTE *)(v5 + 2571))
  {
    v28 = 268;
  }
  else if (*(_BYTE *)(v5 + 2570))
  {
    v28 = 267;
  }
  else if (*(_BYTE *)(v5 + 2569))
  {
    v28 = 266;
  }
  else if (*(_BYTE *)(v5 + 2568))
  {
    v28 = 265;
  }
  else if (*(_BYTE *)(v5 + 2567))
  {
    v28 = 264;
  }
  else if (*(_BYTE *)(v5 + 2566))
  {
    v28 = 263;
  }
  else if (*(_BYTE *)(v5 + 2565))
  {
    v28 = 262;
  }
  else if (*(_BYTE *)(v5 + 2564))
  {
    v28 = 261;
  }
  else if (*(_BYTE *)(v5 + 2563))
  {
    v28 = 260;
  }
  else if (*(_BYTE *)(v5 + 2562))
  {
    v28 = 259;
  }
  else if (*(_BYTE *)(v5 + 2561))
  {
    v28 = 258;
  }
  else
  {
    v28 = 257;
  }
  if (v4[29])
  {
    v29 = 30;
  }
  else if (v4[28])
  {
    v29 = 29;
  }
  else if (v4[27])
  {
    v29 = 28;
  }
  else if (v4[26])
  {
    v29 = 27;
  }
  else if (v4[25])
  {
    v29 = 26;
  }
  else if (v4[24])
  {
    v29 = 25;
  }
  else if (v4[23])
  {
    v29 = 24;
  }
  else if (v4[22])
  {
    v29 = 23;
  }
  else if (v4[21])
  {
    v29 = 22;
  }
  else if (v4[20])
  {
    v29 = 21;
  }
  else if (v4[19])
  {
    v29 = 20;
  }
  else if (v4[18])
  {
    v29 = 19;
  }
  else if (v4[17])
  {
    v29 = 18;
  }
  else if (v4[16])
  {
    v29 = 17;
  }
  else if (v4[15])
  {
    v29 = 16;
  }
  else if (v4[14])
  {
    v29 = 15;
  }
  else if (v4[13])
  {
    v29 = 14;
  }
  else if (v4[12])
  {
    v29 = 13;
  }
  else if (v4[11])
  {
    v29 = 12;
  }
  else if (v4[10])
  {
    v29 = 11;
  }
  else if (v4[9])
  {
    v29 = 10;
  }
  else if (v4[8])
  {
    v29 = 9;
  }
  else if (v4[7])
  {
    v29 = 8;
  }
  else if (v4[6])
  {
    v29 = 7;
  }
  else if (v4[5])
  {
    v29 = 6;
  }
  else if (v4[4])
  {
    v29 = 5;
  }
  else if (v4[3])
  {
    v29 = 4;
  }
  else if (v4[2])
  {
    v29 = 3;
  }
  else if (v4[1])
  {
    v29 = 2;
  }
  else
  {
    v29 = 1;
  }
  memcpy(&__dst, (const void *)(a1 + 36682), v28);
  memcpy((char *)&__dst + v28, (const void *)(a1 + 36970), v29);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  v34 = (_WORD *)(v5 + 36);
  LOBYTE(v35) = -1;
  *(_QWORD *)(v5 + 30) = 0;
  do
  {
    v37 = v35;
    v35 = *((unsigned __int8 *)&__dst + v30);
    if (!*((_BYTE *)&__dst + v30))
    {
      if (v33)
      {
        if (v33 > 2)
        {
          ++*(_WORD *)(v5 + 32);
          LODWORD(v39) = v31 + 1;
          v99[v31] = 16;
          v37 = v33 - 3;
        }
        else
        {
          *(_WORD *)(a1 + 2 * v37 + 34378) += v33;
          v39 = (v31 + 1);
          v99[v31] = v37;
          if (v33 == 1)
          {
LABEL_167:
            if (++v32 != 138)
              goto LABEL_168;
LABEL_171:
            v33 = 0;
            v32 = 0;
            ++*v34;
            v99[v39] = 18;
            v31 = (v39 + 2);
            v99[(v39 + 1)] = 127;
            goto LABEL_142;
          }
        }
        v99[v39] = v37;
        v39 = (v31 + 2);
        if (++v32 != 138)
        {
LABEL_168:
          v33 = 0;
          v31 = v39;
          goto LABEL_142;
        }
        goto LABEL_171;
      }
      v39 = v31;
      goto LABEL_167;
    }
    if (v32)
    {
      if (v32 <= 2)
      {
        *(_WORD *)v5 += v32;
        v38 = v31 + 1;
        v99[v31] = 0;
        if (v32 == 1)
        {
          v31 = (v31 + 1);
          if ((_DWORD)v35 != v37)
            goto LABEL_174;
        }
        else
        {
          v31 = (v31 + 2);
          v99[v38] = 0;
          if ((_DWORD)v35 != v37)
          {
LABEL_174:
            if (v33)
            {
              if (v33 > 2)
              {
                ++*(_WORD *)(v5 + 32);
                v36 = v31 + 1;
                v99[v31] = 16;
                v37 = v33 - 3;
              }
              else
              {
                *(_WORD *)(a1 + 2 * v37 + 34378) += v33;
                v36 = v31 + 1;
                v99[v31] = v37;
                if (v33 == 1)
                  goto LABEL_141;
              }
              v99[v36] = v37;
              v36 = v31 + 2;
            }
            else
            {
              v36 = v31;
            }
LABEL_141:
            v33 = 0;
            v32 = 0;
            ++*(_WORD *)(a1 + 2 * v35 + 34378);
            v31 = (v36 + 1);
            v99[v36] = v35;
            goto LABEL_142;
          }
        }
        goto LABEL_164;
      }
      v40 = v31 + 1;
      if (v32 < 0xB)
        v41 = 17;
      else
        v41 = 18;
      v99[v31] = v41;
      v31 = (v31 + 2);
      if (v32 >= 0xB)
        v42 = (_WORD *)(v5 + 36);
      else
        v42 = (_WORD *)(v5 + 34);
      if (v32 >= 0xB)
        v43 = -11;
      else
        v43 = -3;
      ++*v42;
      v99[v40] = v43 + v32;
    }
    if ((_DWORD)v35 != v37)
      goto LABEL_174;
LABEL_164:
    if (++v33 == 6)
    {
      v33 = 0;
      v32 = 0;
      ++*(_WORD *)(v5 + 32);
      v99[v31] = 16;
      v99[(v31 + 1)] = 3;
      v31 = (v31 + 2);
    }
    else
    {
      v32 = 0;
    }
LABEL_142:
    ++v30;
  }
  while (v29 + v28 != v30);
  if (v33)
  {
    if (v33 > 2)
    {
      ++*(_WORD *)(v5 + 32);
      v99[v31] = 16;
      v44 = v31 + 2;
      v99[(v31 + 1)] = v33 - 3;
    }
    else
    {
      *(_WORD *)(a1 + 2 * v35 + 34378) += v33;
      v44 = v31 + 1;
      v99[v31] = v35;
      if (v33 != 1)
      {
        v99[v44] = v35;
        v44 = v31 + 2;
      }
    }
  }
  else if (v32)
  {
    if (v32 > 2)
    {
      v44 = v31 + 2;
      if (v32 > 0xA)
      {
        ++*v34;
        v99[v31] = 18;
        v45 = v32 - 11;
      }
      else
      {
        ++*(_WORD *)(v5 + 34);
        v99[v31] = 17;
        v45 = v32 - 3;
      }
      v99[(v31 + 1)] = v45;
    }
    else
    {
      *(_WORD *)v5 += v32;
      v44 = v31 + 1;
      v99[v31] = 0;
      if (v32 != 1)
      {
        v99[v44] = 0;
        v44 = v31 + 2;
      }
    }
  }
  else
  {
    v44 = v31;
  }
  sub_239A1E210();
  v46 = *(_DWORD *)(a1 + 92);
  v47 = *(_DWORD *)(a1 + 96) | (2 << v46);
  v48 = v46 + 2;
  *(_DWORD *)(a1 + 92) = v48;
  *(_DWORD *)(a1 + 96) = v47;
  if (v48 >= 8)
  {
    do
    {
      v54 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v54 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v54 + 1;
        *v54 = v47;
        v48 = *(_DWORD *)(a1 + 92);
        v47 = *(_DWORD *)(a1 + 96);
      }
      v47 >>= 8;
      v48 -= 8;
      *(_DWORD *)(a1 + 92) = v48;
      *(_DWORD *)(a1 + 96) = v47;
    }
    while (v48 > 7);
  }
  v49 = ((v28 - 257) << v48) | v47;
  v50 = v48 + 5;
  *(_DWORD *)(a1 + 92) = v48 + 5;
  *(_DWORD *)(a1 + 96) = v49;
  if (v48 >= 3)
  {
    do
    {
      v55 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v55 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v55 + 1;
        *v55 = v49;
        v50 = *(_DWORD *)(a1 + 92);
        v49 = *(_DWORD *)(a1 + 96);
      }
      v49 >>= 8;
      v50 -= 8;
      *(_DWORD *)(a1 + 92) = v50;
      *(_DWORD *)(a1 + 96) = v49;
    }
    while (v50 > 7);
  }
  v51 = ((v29 - 1) << v50) | v49;
  v52 = v50 + 5;
  *(_DWORD *)(a1 + 92) = v50 + 5;
  *(_DWORD *)(a1 + 96) = v51;
  if (v50 >= 3)
  {
    do
    {
      v56 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v56 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v56 + 1;
        *v56 = v51;
        v52 = *(_DWORD *)(a1 + 92);
        v51 = *(_DWORD *)(a1 + 96);
      }
      v51 >>= 8;
      v52 -= 8;
      *(_DWORD *)(a1 + 92) = v52;
      *(_DWORD *)(a1 + 96) = v51;
    }
    while (v52 > 7);
  }
  if (v4[303])
  {
    v53 = 18;
  }
  else if (v4[289])
  {
    v53 = 17;
  }
  else if (v4[302])
  {
    v53 = 16;
  }
  else if (v4[290])
  {
    v53 = 15;
  }
  else if (v4[301])
  {
    v53 = 14;
  }
  else if (v4[291])
  {
    v53 = 13;
  }
  else if (v4[300])
  {
    v53 = 12;
  }
  else if (v4[292])
  {
    v53 = 11;
  }
  else if (v4[299])
  {
    v53 = 10;
  }
  else if (v4[293])
  {
    v53 = 9;
  }
  else if (v4[298])
  {
    v53 = 8;
  }
  else if (v4[294])
  {
    v53 = 7;
  }
  else if (v4[297])
  {
    v53 = 6;
  }
  else if (v4[295])
  {
    v53 = 5;
  }
  else if (v4[296])
  {
    v53 = 4;
  }
  else if (v4[288])
  {
    v53 = 3;
  }
  else if (v4[306])
  {
    v53 = 2;
  }
  else if (v4[305])
  {
    v53 = 1;
  }
  else if (v4[304])
  {
    v53 = 0;
  }
  else
  {
    v53 = -1;
  }
  if (v53 <= 3)
    v57 = 3;
  else
    v57 = v53;
  v25 = ((v57 - 3) << v52) | v51;
  v26 = v52 + 4;
  *(_DWORD *)(a1 + 92) = v52 + 4;
  *(_DWORD *)(a1 + 96) = v25;
  if (v52 >= 4)
  {
    do
    {
      v62 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v62 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v62 + 1;
        *v62 = v25;
        v26 = *(_DWORD *)(a1 + 92);
        v25 = *(_DWORD *)(a1 + 96);
      }
      v25 >>= 8;
      v26 -= 8;
      *(_DWORD *)(a1 + 92) = v26;
      *(_DWORD *)(a1 + 96) = v25;
    }
    while (v26 > 7);
  }
  v58 = 0;
  v59 = (v57 + 1);
  do
  {
    v60 = v26;
    v25 |= *(unsigned __int8 *)(a1 + byte_239F0B7A6[v58] + 37258) << v26;
    v26 += 3;
    *(_DWORD *)(a1 + 92) = v26;
    *(_DWORD *)(a1 + 96) = v25;
    if (v60 >= 5)
    {
      if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
      {
        do
        {
          v61 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v61 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v61 + 1;
            *v61 = v25;
            v26 = *(_DWORD *)(a1 + 92);
            v25 = *(_DWORD *)(a1 + 96);
          }
          v25 >>= 8;
          v26 -= 8;
          *(_DWORD *)(a1 + 92) = v26;
          *(_DWORD *)(a1 + 96) = v25;
        }
        while (v26 > 7);
      }
      else
      {
        do
        {
          v25 >>= 8;
          v26 -= 8;
        }
        while (v26 > 7);
        *(_DWORD *)(a1 + 92) = v26;
        *(_DWORD *)(a1 + 96) = v25;
      }
    }
    ++v58;
  }
  while (v58 != v59);
  if (v44)
  {
    v63 = 0;
    do
    {
      v64 = v99[v63];
      v25 |= *(unsigned __int16 *)(a1 + 2 * v64 + 36106) << v26;
      v26 += *(unsigned __int8 *)(a1 + v64 + 37258);
      *(_DWORD *)(a1 + 92) = v26;
      *(_DWORD *)(a1 + 96) = v25;
      if (v26 >= 8)
      {
        if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
        {
          do
          {
            v67 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v67 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v67 + 1;
              *v67 = v25;
              v26 = *(_DWORD *)(a1 + 92);
              v25 = *(_DWORD *)(a1 + 96);
            }
            v25 >>= 8;
            v26 -= 8;
            *(_DWORD *)(a1 + 92) = v26;
            *(_DWORD *)(a1 + 96) = v25;
          }
          while (v26 > 7);
        }
        else
        {
          do
          {
            v25 >>= 8;
            v26 -= 8;
          }
          while (v26 > 7);
          *(_DWORD *)(a1 + 92) = v26;
          *(_DWORD *)(a1 + 96) = v25;
        }
      }
      v65 = v63 + 1;
      if (v64 >= 0x10)
      {
        v66 = v99[v65];
        LODWORD(v65) = v63 + 2;
        v25 |= v66 << v26;
        v26 += asc_239F971BF[(v64 - 16)];
        *(_DWORD *)(a1 + 92) = v26;
        *(_DWORD *)(a1 + 96) = v25;
        if (v26 >= 8)
        {
          if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
          {
            do
            {
              v68 = *(_BYTE **)(a1 + 64);
              if ((unint64_t)v68 < *(_QWORD *)(a1 + 72))
              {
                *(_QWORD *)(a1 + 64) = v68 + 1;
                *v68 = v25;
                v26 = *(_DWORD *)(a1 + 92);
                v25 = *(_DWORD *)(a1 + 96);
              }
              v25 >>= 8;
              v26 -= 8;
              *(_DWORD *)(a1 + 92) = v26;
              *(_DWORD *)(a1 + 96) = v25;
            }
            while (v26 > 7);
          }
          else
          {
            do
            {
              v25 >>= 8;
              v26 -= 8;
            }
            while (v26 > 7);
            *(_DWORD *)(a1 + 92) = v26;
            *(_DWORD *)(a1 + 96) = v25;
          }
        }
      }
      v63 = v65;
    }
    while (v65 < v44);
  }
LABEL_279:
  if ((unint64_t)v3 < *(_QWORD *)(a1 + 48))
  {
    v69 = a1 + 34954;
    v70 = a1 + 36682;
    v71 = 1;
    do
    {
      if (v71 == 1)
      {
        v72 = *v3++;
        v71 = v72 | 0x100;
      }
      if ((v71 & 1) != 0)
      {
        v75 = *v3;
        v76 = v3[1];
        v77 = v3[2];
        v78 = word_239F0B5A6[v75];
        v79 = v25 | (*(unsigned __int16 *)(v69 + 2 * v78) << v26);
        v80 = v26 + *(unsigned __int8 *)(v70 + v78);
        *(_DWORD *)(a1 + 92) = v80;
        *(_DWORD *)(a1 + 96) = v79;
        if (v80 >= 8)
        {
          do
          {
            v91 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v91 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v91 + 1;
              *v91 = v79;
              v80 = *(_DWORD *)(a1 + 92);
              v79 = *(_DWORD *)(a1 + 96);
            }
            v79 >>= 8;
            v80 -= 8;
            *(_DWORD *)(a1 + 92) = v80;
            *(_DWORD *)(a1 + 96) = v79;
          }
          while (v80 > 7);
        }
        v81 = ((dword_239F0B7BC[byte_239F0B800[v75]] & v75) << v80) | v79;
        v82 = v80 + byte_239F0B800[v75];
        *(_DWORD *)(a1 + 92) = v82;
        *(_DWORD *)(a1 + 96) = v81;
        if (v82 >= 8)
        {
          do
          {
            v92 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v92 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v92 + 1;
              *v92 = v81;
              v82 = *(_DWORD *)(a1 + 92);
              v81 = *(_DWORD *)(a1 + 96);
            }
            v81 >>= 8;
            v82 -= 8;
            *(_DWORD *)(a1 + 92) = v82;
            *(_DWORD *)(a1 + 96) = v81;
          }
          while (v82 > 7);
        }
        v83 = v76 | ((_DWORD)v77 << 8);
        v84 = (unsigned __int8 *)&unk_239F0B326 + v83;
        v85 = (char *)&unk_239F0B526 + v77;
        v86 = (unsigned __int8 *)&unk_239F0BB00 + v77;
        if (v83 >= 0x200)
          v84 = (unsigned __int8 *)v85;
        else
          v86 = (unsigned __int8 *)&unk_239F0B900 + v83;
        v87 = *v84;
        v88 = *v86;
        v89 = (*(unsigned __int16 *)(a1 + 2 * v87 + 35530) << v82) | v81;
        v90 = v82 + *(unsigned __int8 *)(a1 + v87 + 36970);
        *(_DWORD *)(a1 + 92) = v90;
        *(_DWORD *)(a1 + 96) = v89;
        if (v90 >= 8)
        {
          do
          {
            v93 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v93 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v93 + 1;
              *v93 = v89;
              v90 = *(_DWORD *)(a1 + 92);
              v89 = *(_DWORD *)(a1 + 96);
            }
            v89 >>= 8;
            v90 -= 8;
            *(_DWORD *)(a1 + 92) = v90;
            *(_DWORD *)(a1 + 96) = v89;
          }
          while (v90 > 7);
        }
        v3 += 3;
        v25 = ((dword_239F0B7BC[v88] & v83) << v90) | v89;
        v26 = v90 + v88;
        *(_DWORD *)(a1 + 92) = v90 + v88;
        *(_DWORD *)(a1 + 96) = v25;
        if (v90 + v88 >= 8)
        {
          do
          {
            v94 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v94 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v94 + 1;
              *v94 = v25;
              v26 = *(_DWORD *)(a1 + 92);
              v25 = *(_DWORD *)(a1 + 96);
            }
            v25 >>= 8;
            v26 -= 8;
            *(_DWORD *)(a1 + 92) = v26;
            *(_DWORD *)(a1 + 96) = v25;
          }
          while (v26 > 7);
        }
      }
      else
      {
        v73 = *v3++;
        v25 |= *(unsigned __int16 *)(v69 + 2 * v73) << v26;
        v26 += *(unsigned __int8 *)(v70 + v73);
        *(_DWORD *)(a1 + 92) = v26;
        *(_DWORD *)(a1 + 96) = v25;
        if (v26 >= 8)
        {
          do
          {
            v74 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v74 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v74 + 1;
              *v74 = v25;
              v26 = *(_DWORD *)(a1 + 92);
              v25 = *(_DWORD *)(a1 + 96);
            }
            v25 >>= 8;
            v26 -= 8;
            *(_DWORD *)(a1 + 92) = v26;
            *(_DWORD *)(a1 + 96) = v25;
          }
          while (v26 > 7);
        }
      }
      v71 >>= 1;
    }
    while ((unint64_t)v3 < *(_QWORD *)(a1 + 48));
  }
  v95 = (*(unsigned __int16 *)(v5 + 1088) << v26) | v25;
  v96 = v26 + *(unsigned __int8 *)(v5 + 2560);
  *(_DWORD *)(a1 + 92) = v96;
  *(_DWORD *)(a1 + 96) = v95;
  if (v96 >= 8)
  {
    if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72))
    {
      do
      {
        v98 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v98 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v98 + 1;
          *v98 = v95;
          v96 = *(_DWORD *)(a1 + 92);
          v95 = *(_DWORD *)(a1 + 96);
        }
        v95 >>= 8;
        v96 -= 8;
        *(_DWORD *)(a1 + 92) = v96;
        *(_DWORD *)(a1 + 96) = v95;
      }
      while (v96 > 7);
    }
    else
    {
      do
      {
        v95 >>= 8;
        v96 -= 8;
      }
      while (v96 > 7);
      *(_DWORD *)(a1 + 92) = v96;
      *(_DWORD *)(a1 + 96) = v95;
    }
  }
  return *(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72);
}

void sub_239A1E210()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  signed int v3;
  signed int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _WORD *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  _WORD *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  _WORD *v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t *v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint64_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int v77;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  int v82;
  unsigned __int16 *v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int *v87;
  int *v88;
  uint64_t v89;
  int v90;
  uint64_t i;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _DWORD *v103;
  int v104;
  int v105;
  _BYTE v106[1152];
  _BYTE v107[1152];
  _OWORD v108[8];
  int v109;
  _BYTE v110[1024];
  _BYTE v111[4];
  int v112;
  uint64_t v113;
  _DWORD v114[256];
  uint64_t v115;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v5 = v2;
  v6 = v0;
  v115 = *MEMORY[0x24BDAC8D0];
  memset(v108, 0, sizeof(v108));
  v109 = 0;
  v7 = v1;
  if (v8)
  {
    if (v2 >= 1)
    {
      v9 = v2;
      v10 = (unsigned __int8 *)(v0 + 288 * v1 + 36682);
      do
      {
        v11 = *v10++;
        ++*((_DWORD *)v108 + v11);
        --v9;
      }
      while (v9);
    }
    goto LABEL_90;
  }
  if (v2 <= 0)
  {
    bzero(v111, 0x800uLL);
LABEL_24:
    v31 = 0;
    v32 = 0;
    do
    {
      *(_DWORD *)&v110[v31] = v32;
      v32 += *(_DWORD *)&v111[v31];
      v31 += 4;
    }
    while (v31 != 1024);
    v13 = 0;
    v27 = v106;
    goto LABEL_83;
  }
  v12 = 0;
  v13 = 0;
  v14 = v0 + 576 * v1 + 33226;
  do
  {
    if (*(_WORD *)(v14 + 2 * v12))
    {
      v15 = &v107[4 * v13];
      *v15 = *(_WORD *)(v14 + 2 * v12);
      ++v13;
      v15[1] = v12;
    }
    ++v12;
  }
  while (v2 != v12);
  bzero(v111, 0x800uLL);
  if (!v13)
    goto LABEL_24;
  v16 = 0;
  do
  {
    v17 = *(unsigned __int16 *)&v107[v16];
    v18 = 4 * *(_WORD *)&v107[v16];
    ++*(_DWORD *)&v111[v18];
    ++*(_DWORD *)((char *)v114 + ((v17 >> 6) & 0x3FC));
    v16 += 4;
  }
  while (4 * v13 != v16);
  v19 = 0;
  v20 = 0;
  v21 = 1;
  if (v114[0] != v13)
    v21 = 2;
  v22 = v107;
  v23 = v106;
  v24 = v111;
  do
  {
    v25 = 0;
    v26 = 0;
    v27 = v23;
    do
    {
      *(_DWORD *)&v110[v25] = v26;
      v26 += *(_DWORD *)&v24[v25];
      v25 += 4;
    }
    while (v25 != 1024);
    v28 = 0;
    do
    {
      v29 = 4 * (*(unsigned __int16 *)&v22[v28] >> v20);
      v30 = *(unsigned int *)&v110[v29];
      *(_DWORD *)&v110[v29] = v30 + 1;
      *(_DWORD *)&v27[2 * v30] = *(_DWORD *)&v22[v28];
      v28 += 4;
    }
    while (4 * v13 != v28);
    ++v19;
    v20 += 8;
    v24 += 1024;
    v23 = v22;
    v22 = v27;
  }
  while (v19 != v21);
  v33 = (v13 - 1);
  if (v13 != 1)
  {
    *v27 += v27[2];
    if (v13 <= 2)
    {
      v45 = v13 - 2;
      v27[2 * v45] = 0;
      goto LABEL_47;
    }
    v34 = 0;
    v35 = v27 + 2;
    v36 = 2;
    v37 = 1;
    while (1)
    {
      v39 = &v27[2 * v34];
      v40 = (unsigned __int16)*v39;
      if (v36 < v13 && (v41 = (unsigned __int16)v27[2 * v36], v40 >= v41))
      {
        v42 = v34;
        ++v36;
        *v35 = v41;
        v43 = 2 * v34;
        if (v36 >= v13)
        {
LABEL_31:
          LOWORD(v38) = v27[v43];
          goto LABEL_32;
        }
      }
      else
      {
        *v35 = v40;
        ++v34;
        *v39 = v37;
        v42 = v34;
        v43 = 2 * v34;
        if (v36 >= v13)
          goto LABEL_31;
      }
      if (v37 <= v42)
      {
        LOWORD(v44) = v27[2 * v36];
LABEL_42:
        ++v36;
        *v35 += v44;
        v35 += 2;
        if (v33 == ++v37)
        {
LABEL_43:
          v45 = v13 - 2;
          v27[2 * v45] = 0;
          v46 = 2 * (v13 - 3);
          do
          {
            v27[v46] = v27[2 * (unsigned __int16)v27[v46]] + 1;
            v46 -= 2;
          }
          while (v46 != -2);
LABEL_47:
          v47 = 0;
          v48 = 1;
          LODWORD(v49) = v13 - 1;
          while (2)
          {
            if ((v45 & 0x80000000) != 0)
            {
              v51 = 0;
              if (v48 > 0)
                goto LABEL_58;
            }
            else
            {
              v50 = 0;
              v51 = v45 + 1;
              while (v47 == (unsigned __int16)v27[2 * v45])
              {
                ++v50;
                LODWORD(v45) = v45 - 1;
                if (v51 == v50)
                {
                  LODWORD(v45) = -1;
                  if (v48 <= v51)
                    goto LABEL_48;
                  goto LABEL_58;
                }
              }
              v51 = v50;
              if (v48 <= v50)
                goto LABEL_48;
LABEL_58:
              v52 = (int)v49;
              v53 = (v48 + ~v51);
              if (!(v48 + ~v51))
              {
                v49 = v52;
                goto LABEL_64;
              }
              v54 = v53 + 1;
              v55 = (v53 + 1) & 0x1FFFFFFFELL;
              v49 = v52 - v55;
              v48 -= v55;
              v56 = &v27[2 * v52];
              v57 = v55;
              do
              {
                *v56 = v47;
                *(v56 - 2) = v47;
                v56 -= 4;
                v57 -= 2;
              }
              while (v57);
              if (v54 != v55)
              {
LABEL_64:
                v58 = &v27[2 * v49];
                do
                {
                  LODWORD(v49) = v49 - 1;
                  *v58 = v47;
                  v58 -= 2;
                  --v48;
                }
                while (v48 > v51);
              }
            }
LABEL_48:
            v48 = 2 * v51;
            ++v47;
            if (!v51)
            {
              if (v13 >= 1)
                goto LABEL_68;
              goto LABEL_83;
            }
            continue;
          }
        }
      }
      else
      {
        v38 = (unsigned __int16)v27[v43];
        v44 = (unsigned __int16)v27[2 * v36];
        if (v38 >= v44)
          goto LABEL_42;
LABEL_32:
        *v35 += v38;
        v35 += 2;
        ++v34;
        v27[v43] = v37++;
        if (v33 == v37)
          goto LABEL_43;
      }
    }
  }
  *v27 = 1;
LABEL_68:
  v59 = v13;
  v60 = v27;
  do
  {
    v61 = *v60;
    v60 += 2;
    ++*((_DWORD *)v108 + v61);
    --v59;
  }
  while (v59);
  if (v13 > 1)
  {
    if (v4 <= 31)
    {
      v62 = *((_DWORD *)v108 + v4);
      v63 = v4;
      do
      {
        v62 += *((_DWORD *)v108 + v63 + 1);
        *((_DWORD *)v108 + v4) = v62;
        ++v63;
      }
      while (v63 != 32);
      if (v4 < 1)
      {
        LODWORD(v64) = 0;
        v79 = 1 << v4;
        if (!(1 << v4))
          goto LABEL_83;
        do
        {
LABEL_104:
          --*((_DWORD *)v108 + v4);
          v100 = v4;
          while ((int)v100 >= 2)
          {
            v101 = v100 - 1;
            v102 = *((_DWORD *)v108 + --v100);
            if (v102)
            {
              v103 = (_DWORD *)v108 + v101;
              v104 = v102 - 1;
              v105 = v103[1] + 2;
              *v103 = v104;
              v103[1] = v105;
              break;
            }
          }
          v64 = (v64 - 1);
        }
        while (v79 != v64);
        goto LABEL_83;
      }
    }
    if (v4 >= 8)
    {
      v66 = vdupq_n_s32(v4);
      v65 = v4 & 7;
      v67 = vaddq_s32(v66, (int32x4_t)xmmword_239F0B2C0);
      v68 = (int32x4_t *)&v107[4 * v4 + 1140];
      v69 = 0uLL;
      v70.i64[0] = 0x300000003;
      v70.i64[1] = 0x300000003;
      v71.i64[0] = 0x700000007;
      v71.i64[1] = 0x700000007;
      v72 = v4 & 0xFFFFFFF8;
      v73 = 0uLL;
      do
      {
        v74 = (int8x16_t)vrev64q_s32(*v68);
        v75 = (int8x16_t)vrev64q_s32(v68[-1]);
        v76 = vsubq_s32(v66, v67);
        v69 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vextq_s8(v74, v74, 8uLL), (uint32x4_t)v76), v69);
        v73 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vextq_s8(v75, v75, 8uLL), (uint32x4_t)vsubq_s32(v76, v70)), v73);
        v67 = vaddq_s32(v67, v71);
        v68 -= 2;
        v72 -= 8;
      }
      while (v72);
      LODWORD(v64) = vaddvq_s32(vaddq_s32(v73, v69));
      if ((v4 & 0xFFFFFFF8) == (unint64_t)v4)
      {
LABEL_82:
        v79 = 1 << v4;
        if (1 << v4 == v64)
          goto LABEL_83;
        goto LABEL_104;
      }
    }
    else
    {
      LODWORD(v64) = 0;
      v65 = v4;
    }
    v77 = v4 - v65;
    do
      LODWORD(v64) = (*((_DWORD *)v108 + v65) << v77++) + v64;
    while (v65-- > 1);
    goto LABEL_82;
  }
LABEL_83:
  v80 = (_OWORD *)(v6 + 288 * v7 + 36682);
  v80[16] = 0u;
  v80[17] = 0u;
  v80[14] = 0u;
  v80[15] = 0u;
  v80[12] = 0u;
  v80[13] = 0u;
  v80[10] = 0u;
  v80[11] = 0u;
  v80[8] = 0u;
  v80[9] = 0u;
  v80[6] = 0u;
  v80[7] = 0u;
  v80[4] = 0u;
  v80[5] = 0u;
  v80[2] = 0u;
  v80[3] = 0u;
  *v80 = 0u;
  v80[1] = 0u;
  bzero((void *)(v6 + 576 * v7 + 34954), 0x240uLL);
  if (v4 >= 1)
  {
    v81 = 1;
    do
    {
      v82 = *((_DWORD *)v108 + v81);
      if (v82 >= 1)
      {
        v83 = &v27[2 * v13 - 1];
        v84 = v82 + 1;
        v13 -= v82;
        do
        {
          v85 = *v83;
          v83 -= 2;
          *(_BYTE *)(v6 + 288 * v7 + v85 + 36682) = v81;
          --v84;
        }
        while (v84 > 1);
      }
      ++v81;
    }
    while (v81 != v4 + 1);
  }
LABEL_90:
  v112 = 0;
  if (v4 > 1)
  {
    v86 = 0;
    v87 = (int *)v108 + 1;
    v88 = (int *)&v113;
    v89 = (v4 + 1) - 2;
    do
    {
      v90 = *v87++;
      v86 = 2 * (v90 + v86);
      *v88++ = v86;
      --v89;
    }
    while (v89);
  }
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      v92 = v6 + 288 * v7 + i;
      v93 = *(unsigned __int8 *)(v92 + 36682);
      if (*(_BYTE *)(v92 + 36682))
      {
        v94 = 0;
        v95 = 4 * v93;
        v96 = *(_DWORD *)&v111[v95];
        *(_DWORD *)&v111[v95] = v96 + 1;
        v97 = v93 + 1;
        do
        {
          v98 = v94;
          v99 = v96;
          v96 >>= 1;
          v94 = v99 & 1 | (2 * v98);
          --v97;
        }
        while (v97 > 1);
        *(_WORD *)(v6 + 576 * v7 + 2 * i + 34954) = v94;
      }
    }
  }
}

_QWORD *sub_239A1EA14(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_239A1EABC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC3738((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A1EADC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_239A1EB84(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC37BC((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void ***sub_239A1EBA4(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (char *)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            v10 = (char *)*(v3 - 2);
            do
            {
              v12 = (void *)*((_QWORD *)v10 - 3);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *((_QWORD *)v9 - 2) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_239A1EC58(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (void **)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (void **)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              if (*((char *)v9 - 17) < 0)
                operator delete(*(v9 - 5));
              v9 -= 5;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_239A1ED08(char **a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  char v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  char v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  _OWORD *v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  char v47;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = (unint64_t)a1[1];
  v9 = a1[2];
  if ((uint64_t)&v9[-v10] < a5)
  {
    v11 = *a1;
    v12 = v10 - (_QWORD)*a1 + a5;
    if (v12 < 0)
      sub_2394189F8();
    v13 = __dst - v11;
    v14 = v9 - v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v31 = &v16[v13];
    memcpy(&v16[v13], __src, a5);
    v32 = &v16[v13];
    if (v11 != v5)
    {
      v33 = v5;
      v32 = &v16[v13];
      if (v13 < 0x20)
        goto LABEL_54;
      v33 = v5;
      v32 = &v16[v13];
      if ((unint64_t)(v11 - v16) < 0x20)
        goto LABEL_54;
      v33 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      v32 = &v31[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      v34 = v5 - 16;
      v35 = &v16[v5 - 16 - v11];
      v36 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v37 = *(_OWORD *)v34;
        *((_OWORD *)v35 - 1) = *((_OWORD *)v34 - 1);
        *(_OWORD *)v35 = v37;
        v35 -= 32;
        v34 -= 32;
        v36 -= 32;
      }
      while (v36);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_54:
        do
        {
          v38 = *--v33;
          *--v32 = v38;
        }
        while (v33 != v11);
      }
      v10 = (unint64_t)a1[1];
    }
    v39 = &v31[a5];
    v40 = &v16[v15];
    if ((char *)v10 != v5)
      memmove(v39, v5, v10 - (_QWORD)v5);
    v41 = *a1;
    *a1 = v32;
    a1[1] = &v39[v10 - (_QWORD)v5];
    a1[2] = v40;
    if (v41)
      operator delete(v41);
    return &v16[v13];
  }
  v17 = v10 - (_QWORD)__dst;
  if ((uint64_t)(v10 - (_QWORD)__dst) >= a5)
  {
    v18 = &__src[a5];
    v21 = a1[1];
    v27 = &__dst[a5];
    v28 = (char *)(v10 - a5);
    v29 = v21;
    if (v10 < a5)
      goto LABEL_44;
    goto LABEL_23;
  }
  v18 = &__src[v17];
  if (&__src[v17] == a4)
  {
    v21 = a1[1];
    a1[1] = (char *)v10;
    if (v17 < 1)
      return v5;
LABEL_20:
    v27 = &__dst[a5];
    v28 = &v21[-a5];
    v29 = v21;
    if ((unint64_t)&v21[-a5] >= v10)
      goto LABEL_44;
LABEL_23:
    v30 = v10 + a5 - (_QWORD)v21;
    if (v30 >= 0x20)
    {
      v29 = v21;
      if ((unint64_t)a5 >= 0x20)
      {
        v42 = &v28[v30 & 0xFFFFFFFFFFFFFFE0];
        v29 = &v21[v30 & 0xFFFFFFFFFFFFFFE0];
        v43 = v21 + 16;
        v44 = (__int128 *)(v28 + 16);
        v45 = v30 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *v44;
          *(v43 - 1) = *(v44 - 1);
          *v43 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 32;
        }
        while (v45);
        v28 = v42;
        if (v30 == (v30 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_44;
      }
    }
    else
    {
      v29 = v21;
    }
    do
    {
      v47 = *v28++;
      *v29++ = v47;
    }
    while (v28 != (char *)v10);
LABEL_44:
    a1[1] = v29;
    if (v21 != v27)
      memmove(v27, __dst, v21 - v27);
    if (v18 != __src)
      memmove(v5, __src, v18 - __src);
    return v5;
  }
  v19 = &a4[(_QWORD)__dst] - &__src[v10];
  v20 = &__src[v17];
  v21 = a1[1];
  if (v19 < 0x20)
    goto LABEL_55;
  v20 = &__src[v17];
  v21 = a1[1];
  if ((unint64_t)(__dst - __src) < 0x20)
    goto LABEL_55;
  v20 = &v18[v19 & 0xFFFFFFFFFFFFFFE0];
  v21 = (char *)(v10 + (v19 & 0xFFFFFFFFFFFFFFE0));
  v22 = (_OWORD *)(v10 + 16);
  v23 = &__src[v10 + 16 - (_QWORD)__dst];
  v24 = v19 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v25 = *(_OWORD *)v23;
    *(v22 - 1) = *((_OWORD *)v23 - 1);
    *v22 = v25;
    v22 += 2;
    v23 += 32;
    v24 -= 32;
  }
  while (v24);
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFE0))
  {
LABEL_55:
    do
    {
      v26 = *v20++;
      *v21++ = v26;
    }
    while (v20 != a4);
  }
  a1[1] = v21;
  if (v17 >= 1)
    goto LABEL_20;
  return v5;
}

void sub_239A1F034(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v9 = (void **)*(v6 - 4);
        v6 -= 4;
        v8 = v9;
        if (v9)
        {
          v10 = (void **)*(v4 - 3);
          v7 = v8;
          if (v10 != v8)
          {
            v11 = (void **)*(v4 - 3);
            do
            {
              v14 = (char *)*(v11 - 3);
              v11 -= 3;
              v13 = v14;
              if (v14)
              {
                v15 = (char *)*(v10 - 2);
                v12 = v13;
                if (v15 != v13)
                {
                  v16 = (char *)*(v10 - 2);
                  do
                  {
                    v18 = (void *)*((_QWORD *)v16 - 3);
                    v16 -= 24;
                    v17 = v18;
                    if (v18)
                    {
                      *((_QWORD *)v15 - 2) = v17;
                      operator delete(v17);
                    }
                    v15 = v16;
                  }
                  while (v16 != v13);
                  v12 = *v11;
                }
                *(v10 - 2) = v13;
                operator delete(v12);
              }
              v10 = v11;
            }
            while (v11 != v8);
            v7 = *v6;
          }
          *(v4 - 3) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_239A1F14C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    sub_2394189F8();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_239418A80();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v5];
  v16 = &v9[40 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = &v9[40 * v5];
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)&v9[40 * v5 + 24] = *(_OWORD *)(a2 + 24);
  v11 = (uint64_t)&v9[40 * v5 + 40];
  if (v4 == v3)
  {
    v13 = v3;
  }
  else
  {
    do
    {
      v12 = *(_OWORD *)(v4 - 40);
      *((_QWORD *)v10 - 3) = *((_QWORD *)v4 - 3);
      *(_OWORD *)(v10 - 40) = v12;
      *((_QWORD *)v4 - 4) = 0;
      *((_QWORD *)v4 - 3) = 0;
      *((_QWORD *)v4 - 5) = 0;
      *((_OWORD *)v10 - 1) = *((_OWORD *)v4 - 1);
      v10 -= 40;
      v4 -= 40;
    }
    while (v4 != v3);
    v13 = *a1;
    v3 = a1[1];
  }
  *a1 = v10;
  a1[1] = (char *)v11;
  a1[2] = v16;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 40);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 5;
    }
    while (v14 + 5 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_239A1F320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395BC370((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_239A1F334(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  char v34;
  char *v35;
  size_t v36;
  char *v37;
  char *v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  char v43;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_2394189F8();
    v13 = __dst - v11;
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v15 = (size_t)operator new(v15);
    }
    else
    {
      v16 = 0;
    }
    v25 = v15 + v13;
    v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    v27 = v26;
    v28 = v25;
    if (v11 != v5)
    {
      v29 = v5;
      v28 = v25;
      if (v13 < 0x20)
        goto LABEL_47;
      v29 = v5;
      v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20)
        goto LABEL_47;
      v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      v30 = v5 - 16;
      v31 = (char *)(v27 + v5 - 16 - v11);
      v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          v34 = *--v29;
          *(_BYTE *)--v28 = v34;
        }
        while (v29 != v11);
      }
      v10 = *(char **)(a1 + 8);
    }
    v35 = (char *)(v25 + a5);
    v36 = v27 + v16;
    if (v10 != v5)
      memmove(v35, v5, v10 - v5);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v35[v10 - v5];
    *(_QWORD *)(a1 + 16) = v36;
    if (v37)
      operator delete(v37);
    return (char *)v25;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
    v21 = &__dst[a5];
    v22 = &v10[-a5];
    v23 = v20;
    if ((unint64_t)v10 < a5)
      goto LABEL_39;
    goto LABEL_18;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    v21 = &v5[a5];
    v22 = &v20[-a5];
    v23 = &v10[v19];
    if (&v20[-a5] >= v10)
      goto LABEL_39;
LABEL_18:
    v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        v39 = v20 + 16;
        v40 = (__int128 *)(v22 + 16);
        v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_39;
      }
    }
    else
    {
      v23 = v20;
    }
    do
    {
      v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(v21, v5, v20 - v21);
    if (v18 != __src)
      memmove(v5, __src, v18 - __src);
  }
  return v5;
}

uint64_t **sub_239A1F5E8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *v6 = (uint64_t *)v10;
    v23 = (uint64_t *)**a1;
    v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      v24 = *v6;
    }
    sub_2394213B8(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t sub_239A1F758(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, _QWORD *a11)
{
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  float v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  __int16 v77;
  int v78;
  _BYTE *v79;
  char *v80;
  int64_t v81;
  size_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  _BYTE *v87;
  char *v88;
  char v89;
  char v90;
  char *v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  int8x16_t v95;
  int8x16_t *v96;
  int8x16_t v97;
  unint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  void *v107;
  unsigned __int8 *v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  size_t v113;
  char *v114;
  unint64_t v115;
  char *v116;
  char *v117;
  _BYTE *v118;
  char *v119;
  char v120;
  char v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned int v124;
  unint64_t v125;
  int8x16_t v126;
  int8x16_t *v127;
  int8x16_t v128;
  unint64_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  unsigned __int8 v135;
  unsigned __int8 *v136;
  char *v137;
  unint64_t v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  char *v149;
  unint64_t v150;
  unsigned __int8 *v151;
  char v152;
  __int128 *v153;
  _OWORD *v154;
  unint64_t v155;
  __int128 v156;
  int v157;
  size_t v158;
  char *v159;
  char *v160;
  void *v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  char *v164;
  char *v165;
  unint64_t v166;
  int64x2_t *v167;
  char *v168;
  char v169;
  uint64_t v170;
  int64x2_t *v171;
  int *v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  char v176;
  int v177;
  int v178;
  char *v179;
  int64x2_t *v180;
  uint64_t v181;
  size_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  _BYTE *v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  unsigned __int16 v198;
  int v199;
  unsigned __int16 v200;
  char *v201;
  uint64_t v202;
  char *v203;
  size_t v204;
  int64x2_t *v205;
  int *v206;
  int v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  void *v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  char *i8;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int16 *v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  unsigned __int16 *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  __int16 v250;
  unsigned int v251;
  unsigned __int16 *v252;
  unsigned __int16 *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  int v260;
  unsigned int v261;
  int v262;
  int v263;
  unsigned int v264;
  BOOL v265;
  int v266;
  unsigned __int16 v267;
  int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned __int16 v272;
  int v273;
  unsigned int v274;
  int v275;
  __int16 v276;
  int v277;
  int v278;
  unsigned int v279;
  int v280;
  __int16 v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  unsigned __int16 *v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned __int16 v293;
  int v294;
  char *v295;
  int v296;
  uint64_t *v297;
  int v298;
  uint64_t v299;
  int64_t v300;
  int64_t v301;
  uint64_t v302;
  uint64_t **v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t v306;
  BOOL v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  BOOL v313;
  uint64_t **v314;
  uint64_t v315;
  void *v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t **v322;
  uint64_t **v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t **v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t **v336;
  unint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int64_t v343;
  uint64_t **v344;
  uint64_t **v345;
  uint64_t *v346;
  uint64_t **v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t **v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t **v354;
  uint64_t *v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t **v358;
  uint64_t **v359;
  uint64_t *v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t **v363;
  unint64_t v364;
  int v365;
  BOOL v366;
  uint32x4_t *v367;
  char *v368;
  int v369;
  int64_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  uint32x4_t *v380;
  uint64_t v381;
  int64_t v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  uint32x4_t *v386;
  uint64_t v387;
  int32x4_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int64x2_t v393;
  uint64_t v394;
  uint32x4_t v395;
  uint32x4_t v396;
  uint32x4_t v397;
  uint32x4_t v398;
  int64x2_t v399;
  int64x2_t v400;
  int64x2_t v401;
  int64x2_t v402;
  uint64_t v403;
  unsigned int v404;
  unsigned int v405;
  int v406;
  unsigned int v407;
  uint64_t v408;
  int v409;
  unsigned int v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int64x2_t v416;
  uint64_t v417;
  uint32x4_t v418;
  uint32x4_t v419;
  uint32x4_t v420;
  uint32x4_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  int64x2_t v425;
  uint64_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int64x2_t v432;
  uint64_t v433;
  uint32x4_t v434;
  uint32x4_t v435;
  uint32x4_t v436;
  uint32x4_t v437;
  int64x2_t v438;
  int64x2_t v439;
  int64x2_t v440;
  int64x2_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int64x2_t v451;
  uint64_t v452;
  uint32x4_t v453;
  uint32x4_t v454;
  uint32x4_t v455;
  uint32x4_t v456;
  int64x2_t v457;
  int64x2_t v458;
  int64x2_t v459;
  int64x2_t v460;
  uint64_t v461;
  int v462;
  int v463;
  unsigned int v464;
  int64_t v465;
  uint64_t v466;
  int32x4_t v467;
  int32x4_t v468;
  uint32x4_t *v469;
  uint64_t v470;
  uint64_t v471;
  char v472;
  uint64_t v473;
  int v474;
  unsigned int v475;
  int64_t v476;
  int v477;
  int v478;
  unsigned int v479;
  uint32x4_t *v480;
  unsigned int v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  uint32x4_t *v487;
  uint64_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int64x2_t v494;
  uint64_t v495;
  uint32x4_t v496;
  uint32x4_t v497;
  uint32x4_t v498;
  uint32x4_t v499;
  int64x2_t v500;
  int64x2_t v501;
  int64x2_t v502;
  int64x2_t v503;
  uint64_t v504;
  uint64_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int64x2_t v511;
  uint64_t v512;
  uint32x4_t v513;
  uint32x4_t v514;
  uint32x4_t v515;
  uint32x4_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  int64x2_t v520;
  uint64_t v521;
  signed int v522;
  int64_t v523;
  unsigned int v524;
  unsigned int v525;
  uint32x4_t *v526;
  unsigned int v527;
  int v528;
  unsigned int v529;
  uint64_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int64x2_t v536;
  uint64_t v537;
  uint32x4_t v538;
  uint32x4_t v539;
  uint32x4_t v540;
  uint32x4_t v541;
  int64x2_t v542;
  int64x2_t v543;
  int64x2_t v544;
  int64x2_t v545;
  uint64_t v546;
  signed int v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int64x2_t v553;
  uint64_t v554;
  uint32x4_t v555;
  uint32x4_t v556;
  uint32x4_t v557;
  uint32x4_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int64x2_t v561;
  int64x2_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  char v568;
  uint64_t v569;
  signed int v570;
  int64_t v571;
  int v572;
  unsigned int v573;
  uint32x4_t *v574;
  unsigned int v575;
  int v576;
  uint64_t v577;
  int v578;
  int32x4_t v579;
  int32x4_t v580;
  unsigned int v581;
  int v582;
  unsigned int v583;
  uint64_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  int32x4_t v588;
  int32x4_t v589;
  int64x2_t v590;
  uint64_t v591;
  uint32x4_t v592;
  uint32x4_t v593;
  uint32x4_t v594;
  uint32x4_t v595;
  int64x2_t v596;
  int64x2_t v597;
  int64x2_t v598;
  int64x2_t v599;
  uint64_t v600;
  uint64_t v601;
  int32x4_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int32x4_t v605;
  int64x2_t v606;
  int32x4_t v607;
  int32x4_t v608;
  int32x4_t v609;
  uint64_t v610;
  uint32x4_t v611;
  uint32x4_t v612;
  uint32x4_t v613;
  uint32x4_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  uint64_t v619;
  uint64_t v620;
  int64_t v621;
  signed int v622;
  int64_t v623;
  int v624;
  unsigned int v625;
  uint32x4_t *v626;
  unsigned int v627;
  uint64_t v628;
  signed int v629;
  int32x4_t v630;
  int32x4_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int64x2_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  uint64_t v638;
  uint32x4_t v639;
  uint32x4_t v640;
  uint32x4_t v641;
  uint32x4_t v642;
  int64x2_t v643;
  int64x2_t v644;
  int64x2_t v645;
  int64x2_t v646;
  uint64_t v647;
  int v648;
  unsigned int v649;
  uint64_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int64x2_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  uint64_t v659;
  uint32x4_t v660;
  uint32x4_t v661;
  uint32x4_t v662;
  uint32x4_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  uint64_t v668;
  int v669;
  int v670;
  size_t v671;
  char *__src;
  void *v673;
  size_t __n;
  char *v675;
  unint64_t v676;
  char *v677;
  _BYTE *v678;
  uint64_t v679;
  char *__dst;
  uint64_t v681;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int64x2_t *v690;
  int v691;
  int v692;
  int v693;
  uint64_t *v694;
  uint64_t v695;
  int v696;
  void *v697;
  char *v698;
  char *v699;
  void *__p;
  char *v701;
  char *v702;
  char *v703;
  char *v704;
  char *v705;
  void *v706;
  unsigned __int8 *v707;
  unsigned __int8 *v708;
  int8x16x4_t v709;
  int8x16x4_t v710;
  int8x16x4_t v711;
  int8x16x4_t v712;
  int8x16x4_t v713;
  int8x16x4_t v714;
  int8x16x4_t v715;
  int8x16x4_t v716;
  int8x16x4_t v717;
  int8x16x4_t v718;
  int8x16x4_t v719;
  int8x16x4_t v720;
  int8x16x4_t v721;
  int8x16x4_t v722;
  int8x16x4_t v723;
  int8x16x4_t v724;
  int8x16x4_t v725;
  int8x16x4_t v726;
  int8x16x4_t v727;
  int8x16x4_t v728;
  int8x16x4_t v729;
  int8x16x4_t v730;
  int8x16x4_t v731;
  int8x16x4_t v732;

  v16 = a8 * (uint64_t)a5;
  v17 = v16 * a9;
  __p = 0;
  v701 = 0;
  v702 = 0;
  if (v16 * a9)
  {
    if ((v17 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v18 = (char *)operator new(v16 * a9);
    v19 = &v18[v17];
    __p = v18;
    v702 = &v18[v17];
    bzero(v18, v17);
    v701 = v19;
  }
  v692 = a8;
  v20 = *a10;
  v21 = a10[1];
  if (v21 == *a10)
  {
    v25 = a10[1];
    v78 = a4;
    if (a4)
      goto LABEL_77;
LABEL_100:
    sub_239A22398(a1, *(char **)(a1 + 8), (char *)__p, v701, v701 - (_BYTE *)__p);
    goto LABEL_101;
  }
  v22 = 0;
  v23 = a7 * (uint64_t)a6;
  v687 = 4 * v23;
  v24 = 4 * a6;
  v685 = 2 * v23;
  v695 = 2 * a6;
  v25 = *a10;
  do
  {
    v26 = *(_DWORD *)(v25 + 40 * v22 + 24);
    if (v26 == 2)
    {
      v44 = *(_DWORD *)(a3 + 4 * v22);
      if (v44 == 1)
      {
        if (v692 >= 1)
        {
          v66 = 0;
          v67 = 0;
          v68 = v687;
          do
          {
            v69 = *(_QWORD *)(*a11 + 8 * v22);
            if (v701 - (_BYTE *)__p <= (unint64_t)((v69 + v67 * a9) * a5))
              sub_23941D884();
            if (a5 >= 1)
            {
              v70 = (char *)__p + a5 * (v69 + v66) + 1;
              v71 = a5;
              v72 = v68;
              do
              {
                v73 = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v22) + v72);
                v74 = (v73 >> 23);
                if ((v73 >> 23))
                {
                  v75 = ((v73 >> 12) & 1) + ((v73 >> 13) & 0x3FF) + (((v73 >> 23 << 10) + 0x4000) & 0x7C00);
                  v76 = (((v73 & 0x7FFFFF | 0x800000) >> (125 - v74)) & 1)
                      + ((v73 & 0x7FFFFF | 0x800000) >> (126 - v74));
                  if (v74 < 0x66)
                    LOWORD(v76) = 0;
                  if (v74 <= 0x70)
                    LOWORD(v75) = v76;
                  if (v74 > 0x8E)
                    LOWORD(v75) = 31744;
                  if ((v73 & 0x7FFFFF) != 0)
                    v77 = 32256;
                  else
                    v77 = 31744;
                  if (v74 == 255)
                    LOWORD(v74) = v77;
                  else
                    LOWORD(v74) = v75;
                }
                *(v70 - 1) = v74;
                *v70 = (unsigned __int16)(HIWORD(v73) & 0x8000 | v74 & 0x7FFF) >> 8;
                v70 += 2;
                v72 += 4;
                --v71;
              }
              while (v71);
            }
            ++v67;
            v66 += a9;
            v68 += v24;
          }
          while (v67 != v692);
        }
      }
      else if (v44 == 2 && v692 >= 1)
      {
        v46 = 0;
        v47 = 0;
        v48 = v687;
        do
        {
          v49 = *(_QWORD *)(*a11 + 8 * v22);
          if (v701 - (_BYTE *)__p <= (unint64_t)((v49 + v47 * a9) * a5))
            sub_23941D884();
          if (a5 >= 1)
          {
            v50 = (char *)__p + a5 * (v49 + v46) + 3;
            v51 = v48;
            v52 = a5;
            do
            {
              *(_DWORD *)(v50 - 3) = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v22) + v51);
              v51 += 4;
              v50 += 4;
              --v52;
            }
            while (v52);
          }
          ++v47;
          v48 += v24;
          v46 += a9;
        }
        while (v47 != v692);
      }
    }
    else if (v26 == 1)
    {
      v35 = *(_DWORD *)(a3 + 4 * v22);
      if (v35 == 2)
      {
        if (v692 >= 1)
        {
          v53 = 0;
          v54 = 0;
          v55 = v685;
          do
          {
            v56 = *(_QWORD *)(*a11 + 8 * v22);
            if (v701 - (_BYTE *)__p <= (unint64_t)((v56 + v54 * a9) * a5))
              sub_23941D884();
            if (a5 >= 1)
            {
              v57 = (char *)__p + a5 * (v56 + v53) + 3;
              v58 = v55;
              v59 = a5;
              do
              {
                v60 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8 * v22) + v58);
                v61 = (__int16)v60;
                v62 = v60 << 13;
                v63 = v62 & 0xF800000;
                LODWORD(v64) = (v62 & 0xFFFE000) + 939524096;
                if ((v62 & 0xF800000) == 0)
                  v64 = COERCE_FLOAT((v62 & 0xFFFE000) + 947912704) + -0.000061035;
                v65 = v62 | 0x70000000;
                if (v63 == 260046848)
                  v64 = *(float *)&v65;
                *(_WORD *)(v57 - 3) = LOWORD(v64);
                *(v57 - 1) = BYTE2(v64);
                *v57 = (LODWORD(v64) | v61 & 0x80000000) >> 24;
                v57 += 4;
                v58 += 2;
                --v59;
              }
              while (v59);
            }
            ++v54;
            v55 += v695;
            v53 += a9;
          }
          while (v54 != v692);
        }
      }
      else if (v35 == 1 && v692 >= 1)
      {
        v37 = 0;
        v38 = 0;
        v39 = v685;
        do
        {
          v40 = *(_QWORD *)(*a11 + 8 * v22);
          if (v701 - (_BYTE *)__p <= (unint64_t)((v40 + v38 * a9) * a5))
            sub_23941D884();
          if (a5 >= 1)
          {
            v41 = (char *)__p + a5 * (v40 + v37) + 1;
            v42 = a5;
            v43 = v39;
            do
            {
              *(_WORD *)(v41 - 1) = *(_WORD *)(*(_QWORD *)(a2 + 8 * v22) + v43);
              v41 += 2;
              v43 += 2;
              --v42;
            }
            while (v42);
          }
          ++v38;
          v37 += a9;
          v39 += v695;
        }
        while (v38 != v692);
      }
    }
    else
    {
      if (v26)
        v27 = 1;
      else
        v27 = v692 < 1;
      if (!v27)
      {
        v28 = 0;
        v29 = 0;
        v30 = v687;
        do
        {
          v31 = *(_QWORD *)(*a11 + 8 * v22);
          if (v701 - (_BYTE *)__p <= (unint64_t)((v31 + v29 * a9) * a5))
            sub_23941D884();
          if (a5 >= 1)
          {
            v32 = (char *)__p + a5 * (v31 + v28) + 3;
            v33 = v30;
            v34 = a5;
            do
            {
              *(_DWORD *)(v32 - 3) = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v22) + v33);
              v33 += 4;
              v32 += 4;
              --v34;
            }
            while (v34);
          }
          ++v29;
          v30 += v24;
          v28 += a9;
        }
        while (v29 != v692);
      }
    }
    ++v22;
    v25 = *a10;
    v21 = a10[1];
  }
  while (v22 < 0xCCCCCCCCCCCCCCCDLL * ((v21 - *a10) >> 3));
  v20 = *a10;
  v78 = a4;
  if (!a4)
    goto LABEL_100;
LABEL_77:
  if ((v78 & 0xFFFFFFFE) == 2)
  {
    v79 = __p;
    v80 = v701;
    v81 = v701 - (_BYTE *)__p;
    v704 = 0;
    v705 = 0;
    if (110 * (v701 - (_BYTE *)__p) / 0x64uLL + 128 <= (unint64_t)(v701
                                                                         - (_BYTE *)__p
                                                                         + 5
                                                                         * ((((unint64_t)(v701 - (_BYTE *)__p) >> 10)
                                                                           * (unsigned __int128)0x842108421084211uLL) >> 64)
                                                                         + 133))
      v82 = v701
          - (_BYTE *)__p
          + 5 * ((((unint64_t)(v701 - (_BYTE *)__p) >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64)
          + 133;
    else
      v82 = 110 * (v701 - (_BYTE *)__p) / 0x64uLL + 128;
    v703 = 0;
    if ((v82 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v83 = (char *)operator new(v82);
    v703 = v83;
    v705 = &v83[v82];
    bzero(v83, v82);
    if (!v81)
      sub_23941D884();
    v706 = 0;
    v707 = 0;
    v708 = 0;
    if (v81 < 0)
      sub_2394189F8();
    v84 = (uint64_t)operator new(v81);
    bzero((void *)v84, v81);
    v85 = v701;
    v86 = (char *)__p;
    v87 = (_BYTE *)v84;
    do
    {
      v89 = *v86;
      v88 = v86 + 1;
      *v87 = v89;
      if (v88 >= v85)
        break;
      v90 = *v88;
      v86 = v88 + 1;
      v87[(unint64_t)(v81 + 1) >> 1] = v90;
      ++v87;
    }
    while (v86 < v85);
    if (v81 < 2)
      goto LABEL_96;
    v91 = (char *)(v84 + 1);
    v92 = v84 + 2;
    v93 = *(unsigned __int8 *)v84;
    if (&v80[v84] - v79 > (unint64_t)(v84 + 2))
      v92 = &v80[v84] - v79;
    v94 = v92 + ~v84;
    if (v94 >= 0x20)
    {
      v91 += v94 & 0xFFFFFFFFFFFFFFE0;
      v95 = vdupq_n_s8(v93);
      v96 = (int8x16_t *)(v84 + 17);
      v97.i64[0] = 0x8080808080808080;
      v97.i64[1] = 0x8080808080808080;
      v98 = v94 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v99 = v96[-1];
        v100 = vextq_s8(v95, v99, 0xFuLL);
        v95 = *v96;
        v101 = vextq_s8(v99, *v96, 0xFuLL);
        v102 = vsubq_s8(v99, v100);
        v103 = veorq_s8(vsubq_s8(*v96, v101), v97);
        v96[-1] = veorq_s8(v102, v97);
        *v96 = v103;
        v96 += 2;
        v98 -= 32;
      }
      while (v98);
      if (v94 == (v94 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_96;
      LOBYTE(v93) = v95.i8[15];
    }
    do
    {
      v104 = *v91;
      *v91 = (*v91 - v93) ^ 0x80;
      ++v91;
      LOBYTE(v93) = v104;
    }
    while ((unint64_t)v91 < v84 + v81);
LABEL_96:
    v697 = (void *)v82;
    sub_239A17AB8((uint64_t)v83, (uint64_t *)&v697, v84, v81);
    v105 = v697;
    if ((unint64_t)v697 >= v81)
    {
      memcpy(v83, v79, v81);
      v105 = v81;
    }
    operator delete((void *)v84);
    sub_239A22398(a1, *(char **)(a1 + 8), v83, &v83[v105], v105);
LABEL_557:
    operator delete(v83);
    v106 = 1;
    v107 = __p;
    if (!__p)
      return v106;
    goto LABEL_102;
  }
  if (v78 != 128)
  {
    if (v78 != 4)
    {
      if (v78 != 1)
      {
        v106 = 0;
        v107 = __p;
        if (!__p)
          return v106;
        goto LABEL_102;
      }
      v109 = (unsigned __int8 *)__p;
      v110 = v701;
      v111 = v701 - (_BYTE *)__p;
      v112 = 3 * (v701 - (_BYTE *)__p);
      v704 = 0;
      v705 = 0;
      v703 = 0;
      if (v112 < 2
        || (v113 = v112 >> 1,
            v114 = (char *)operator new(v112 >> 1),
            v703 = v114,
            v705 = &v114[v113],
            bzero(v114, v113),
            v704 = &v114[v113],
            !v111))
      {
        sub_23941D884();
      }
      v706 = 0;
      v707 = 0;
      v708 = 0;
      if (v111 < 0)
        sub_2394189F8();
      v115 = (unint64_t)operator new(v111);
      v706 = (void *)v115;
      v708 = (unsigned __int8 *)(v115 + v111);
      bzero((void *)v115, v111);
      v707 = (unsigned __int8 *)(v115 + v111);
      v116 = v701;
      v117 = (char *)__p;
      v118 = (_BYTE *)v115;
      do
      {
        v120 = *v117;
        v119 = v117 + 1;
        *v118 = v120;
        if (v119 >= v116)
          break;
        v121 = *v119;
        v117 = v119 + 1;
        v118[(unint64_t)(v111 + 1) >> 1] = v121;
        ++v118;
      }
      while (v117 < v116);
      if (v111 < 2)
        goto LABEL_122;
      v122 = (unsigned __int8 *)(v115 + 1);
      v123 = (unsigned __int8 *)(v115 + 2);
      v124 = *(unsigned __int8 *)v115;
      if (&v110[v115] - (char *)v109 > v115 + 2)
        v123 = (unsigned __int8 *)(&v110[v115] - (char *)v109);
      v125 = (unint64_t)&v123[~v115];
      if (v125 >= 0x20)
      {
        v122 += v125 & 0xFFFFFFFFFFFFFFE0;
        v126 = vdupq_n_s8(v124);
        v127 = (int8x16_t *)(v115 + 17);
        v128.i64[0] = 0x8080808080808080;
        v128.i64[1] = 0x8080808080808080;
        v129 = v125 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v130 = v127[-1];
          v131 = vextq_s8(v126, v130, 0xFuLL);
          v126 = *v127;
          v132 = vextq_s8(v130, *v127, 0xFuLL);
          v133 = vsubq_s8(v130, v131);
          v134 = veorq_s8(vsubq_s8(*v127, v132), v128);
          v127[-1] = veorq_s8(v133, v128);
          *v127 = v134;
          v127 += 2;
          v129 -= 32;
        }
        while (v129);
        if (v125 == (v125 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_122;
        LOBYTE(v124) = v126.i8[15];
      }
      do
      {
        v135 = *v122;
        *v122 = (*v122 - v124) ^ 0x80;
        ++v122;
        LOBYTE(v124) = v135;
      }
      while ((unint64_t)v122 < v115 + v111);
LABEL_122:
      if ((int)v111 < 1)
      {
        LODWORD(v137) = (_DWORD)v114;
      }
      else
      {
        v136 = (unsigned __int8 *)(v115 + (int)v111);
        v137 = v114;
        v138 = v115;
        do
        {
          v139 = (unsigned __int8 *)(v115 + 1);
          v140 = (unsigned __int8 *)(v115 + 3);
          v141 = (unsigned __int8 *)(v115 + 1);
          do
          {
            v142 = v141;
            v143 = v139;
            if (v141 >= v136)
            {
              LOBYTE(v147) = (_BYTE)v139 - v138;
              if ((uint64_t)&v139[-v138] <= 2)
              {
                v115 = (unint64_t)v141;
                *v137 = v138 - (_BYTE)v139;
                v149 = v137 + 1;
                if (v138 >= (unint64_t)v141)
                  goto LABEL_161;
                goto LABEL_145;
              }
LABEL_124:
              *v137 = v147 - 1;
              v137[1] = *(_BYTE *)v138;
              v137 += 2;
              v115 = (unint64_t)v142;
              goto LABEL_125;
            }
            v144 = v140;
            ++v141;
            v145 = *v142;
            v146 = (uint64_t)&v139[-v138 - 1];
            ++v139;
            if (v146 > 126)
              break;
            v140 = v144 + 1;
          }
          while (*(unsigned __int8 *)v138 == v145);
          v147 = (uint64_t)&v139[~v138];
          if (v147 > 2)
            goto LABEL_124;
          if (v141 < v136)
          {
            v142 = v136 - 1;
            while (1)
            {
              v148 = v145 != *(v144 - 1) || v144 >= v136;
              if (v148)
              {
                if ((uint64_t)&v143[-v138] >= 127)
                  goto LABEL_141;
              }
              else if ((uint64_t)&v143[-v138] > 126 || v145 == *v144)
              {
LABEL_141:
                v115 = (unint64_t)(v144 - 2);
                *v137 = v138 - (_BYTE)v143;
                v149 = v137 + 1;
                if (v138 < v115)
                  goto LABEL_145;
LABEL_161:
                v142 = (unsigned __int8 *)v138;
LABEL_162:
                v137 = v149;
                goto LABEL_125;
              }
              ++v143;
              v145 = *(v144 - 1);
              v148 = v144++ >= v136;
              if (v148)
              {
                v147 = (uint64_t)&v136[-v138 - 1];
                break;
              }
            }
          }
          if (v147 <= 126)
            v143 = v136;
          else
            v143 = v142;
          v115 = (unint64_t)v143;
          *v137 = v138 - (_BYTE)v143;
          v149 = v137 + 1;
          if (v138 >= (unint64_t)v143)
            goto LABEL_161;
LABEL_145:
          v150 = (unint64_t)&v143[-v138];
          if ((unint64_t)&v143[-v138] >= 0x20 && (unint64_t)&v137[-v138 + 1] >= 0x20)
          {
            v149 += v150 & 0xFFFFFFFFFFFFFFE0;
            v151 = (unsigned __int8 *)(v138 + (v150 & 0xFFFFFFFFFFFFFFE0));
            v153 = (__int128 *)(v138 + 16);
            v154 = v137 + 17;
            v155 = v150 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v156 = *v153;
              *(v154 - 1) = *(v153 - 1);
              *v154 = v156;
              v153 += 2;
              v154 += 2;
              v155 -= 32;
            }
            while (v155);
            if (v150 == (v150 & 0xFFFFFFFFFFFFFFE0))
            {
              v142 = v143;
              goto LABEL_162;
            }
          }
          else
          {
            v151 = (unsigned __int8 *)v138;
          }
          v137 = v149;
          do
          {
            v152 = *v151++;
            *v137++ = v152;
          }
          while (v151 != v143);
          v142 = v143;
LABEL_125:
          v138 = (unint64_t)v142;
        }
        while (v142 < v136);
      }
      v183 = (int)v137 - (int)v114;
      if (v183 >= v111)
      {
        memcpy(v114, v109, v111);
        LODWORD(v183) = v111;
      }
      if (v706)
        operator delete(v706);
      v83 = v703;
      sub_239A22398(a1, *(char **)(a1 + 8), v703, &v703[v183], v183);
LABEL_556:
      if (v83)
        goto LABEL_557;
      goto LABEL_101;
    }
    __src = (char *)__p;
    __n = v701 - (_BYTE *)__p;
    v157 = 2 * ((_DWORD)v701 - (_DWORD)__p);
    v697 = 0;
    v698 = 0;
    v699 = 0;
    v158 = (v157 + 0x2000);
    if (v157 == -8192
      || (v159 = (char *)operator new((v157 + 0x2000)),
          v160 = &v159[v158],
          v697 = v159,
          v699 = &v159[v158],
          __dst = v159,
          bzero(v159, v158),
          v698 = v160,
          v701 == __p))
    {
      sub_23941D884();
    }
    v161 = operator new(0x2000uLL);
    bzero(v161, 0x2000uLL);
    v706 = 0;
    v707 = 0;
    v708 = 0;
    v678 = v161;
    if (__n >= 2)
    {
      v164 = (char *)operator new(__n & 0xFFFFFFFFFFFFFFFELL);
      v706 = v164;
      v708 = (unsigned __int8 *)&v164[2 * (__n >> 1)];
      bzero(v164, __n & 0xFFFFFFFFFFFFFFFELL);
      v165 = v164;
      v162 = (unsigned __int8 *)&v164[__n & 0xFFFFFFFFFFFFFFFELL];
      v707 = v162;
      v703 = 0;
      v704 = 0;
      v705 = 0;
      if (v21 == v25)
      {
        if ((__n & 0xFFFFFFFFFFFFFFFELL) == 0)
          goto LABEL_574;
        v690 = 0;
        v166 = 0;
        v169 = 1;
        v168 = v165;
LABEL_199:
        bzero(v678, 0x2000uLL);
        v184 = v162 - (unsigned __int8 *)v168;
        v676 = (unint64_t)(v162 - (unsigned __int8 *)v168) >> 1;
        v677 = v168;
        if ((int)v676 < 1)
        {
          LOBYTE(v189) = 0;
          v187 = v678;
        }
        else
        {
          v185 = v168;
          v186 = (v184 >> 1);
          v187 = v678;
          do
          {
            v188 = *(unsigned __int16 *)v185;
            v185 += 2;
            v678[(unint64_t)v188 >> 3] |= 1 << (v188 & 7);
            --v186;
          }
          while (v186);
          v189 = *v678 & 0xFE;
        }
        v190 = 0;
        v191 = 0;
        v192 = 0;
        *v187 = v189;
        v193 = 0x1FFF;
        do
        {
          if (v192 >= (unsigned __int16)v193)
            v194 = v193;
          else
            v194 = v192;
          if (v192 >= (unsigned __int16)v193)
            v195 = v191;
          else
            v195 = v190;
          if (v192 <= (unsigned __int16)v195)
            v196 = v190;
          else
            v196 = v192;
          if (v192 > (unsigned __int16)v195)
            v195 = v192;
          if (v187[v192])
          {
            v193 = v194;
            v190 = v196;
            v191 = v195;
          }
          ++v192;
        }
        while (v192 != 0x2000);
        v679 = (v184 >> 1);
        v673 = operator new(0x20000uLL);
        bzero(v673, 0x20000uLL);
        v197 = 1;
        v198 = 1;
        do
        {
          v199 = (v678[v197 >> 3] >> (v197 & 7)) & 1;
          if (v199)
            v200 = v198;
          else
            v200 = 0;
          v198 += v199;
          *((_WORD *)v673 + v197++) = v200;
        }
        while (v197 != 0x10000);
        if ((int)v676 >= 1)
        {
          v201 = v677;
          v202 = v679;
          do
          {
            *(_WORD *)v201 = *((_WORD *)v673 + *(unsigned __int16 *)v201);
            v201 += 2;
            --v202;
          }
          while (v202);
        }
        *(_WORD *)__dst = v193;
        *((_WORD *)__dst + 1) = v190;
        v203 = __dst + 4;
        if ((unsigned __int16)v193 <= (unsigned __int16)v190)
        {
          v204 = (unsigned __int16)v190 - (unint64_t)(unsigned __int16)v193 + 1;
          memcpy(v203, &v678[(unsigned __int16)v193], v204);
          v203 += v204;
        }
        v675 = v203;
        v205 = v690;
        if ((v169 & 1) == 0)
        {
          v221 = 0;
          v222 = v198 - 1;
          if (v166 <= 1)
            v223 = 1;
          else
            v223 = v166;
          v681 = v223;
          do
          {
            v684 = v221;
            i8 = v205[2 * v221].i8;
            v225 = *((unsigned int *)i8 + 7);
            if ((int)v225 >= 1)
            {
              v226 = *((_DWORD *)i8 + 4);
              v227 = *((unsigned int *)i8 + 5);
              v693 = v226;
              if (v226 >= (int)v227)
                v226 = *((_DWORD *)i8 + 5);
              v691 = v226;
              if (v226 >= 2)
              {
                v688 = 0;
                v228 = 0;
                v229 = *(_QWORD *)i8;
                v696 = v693 * v225;
                do
                {
                  v686 = v228;
                  v230 = (unsigned __int16 *)(v229 + 2 * v228);
                  v231 = 1;
                  v232 = 2;
                  do
                  {
                    v233 = v231;
                    v231 = v232;
                    v234 = v227;
                    v235 = (v227 - v232) * v696;
                    v236 = v233 * v225;
                    v237 = v231 * v225;
                    v238 = v230;
                    if ((v235 & 0x80000000) == 0)
                    {
                      v239 = (unint64_t)&v230[v235];
                      v240 = (v693 - v231) * (int)v225;
                      v241 = v233 * v696;
                      v242 = v231 * v696;
                      v243 = 2 * v237;
                      v244 = v229 + 2 * v241;
                      v245 = 2 * v236;
                      v246 = v229 + 2 * v241 + v245;
                      v247 = v229 + v245;
                      v248 = v688;
                      v238 = v230;
                      do
                      {
                        v252 = v238;
                        if ((v240 & 0x80000000) == 0)
                        {
                          v253 = &v238[v240];
                          v254 = v248;
                          if (v222 >= 0x4000)
                          {
                            do
                            {
                              v262 = *(unsigned __int16 *)(v247 + v254);
                              v263 = *(unsigned __int16 *)(v229 + v254) ^ 0x8000;
                              v264 = (v263 + v262) >> 1;
                              v265 = __OFSUB__(v263, v262);
                              v266 = v263 - v262;
                              v267 = v264 + 0x8000;
                              if (v266 < 0 == v265)
                                v267 = v264;
                              v268 = *(unsigned __int16 *)(v246 + v254);
                              v269 = *(unsigned __int16 *)(v244 + v254) ^ 0x8000;
                              v270 = (v269 + v268) >> 1;
                              v265 = __OFSUB__(v269, v268);
                              v271 = v269 - v268;
                              v272 = v270 + 0x8000;
                              if (v271 < 0 == v265)
                                v272 = v270;
                              v273 = v267 ^ 0x8000;
                              v274 = (v272 + v273) >> 1;
                              v265 = __OFSUB__(v273, v272);
                              v275 = v273 - v272;
                              v276 = v274 + 0x8000;
                              if (v275 < 0 == v265)
                                v276 = v274;
                              *(_WORD *)(v229 + v254) = v276;
                              *(_WORD *)(v244 + v254) = v275;
                              v277 = (unsigned __int16)v266 ^ 0x8000;
                              v278 = (unsigned __int16)v271;
                              v279 = ((unsigned __int16)v271 + v277) >> 1;
                              v265 = __OFSUB__(v277, v278);
                              v280 = v277 - v278;
                              v281 = v279 + 0x8000;
                              if (v280 < 0 == v265)
                                v281 = v279;
                              *(_WORD *)(v247 + v254) = v281;
                              *(_WORD *)(v246 + v254) = v280;
                              v254 += v243;
                              v252 = (unsigned __int16 *)(v229 + v254);
                            }
                            while (v229 + v254 <= (unint64_t)v253);
                          }
                          else
                          {
                            v255 = v248;
                            do
                            {
                              v256 = *(__int16 *)(v229 + v255);
                              v257 = *(__int16 *)(v247 + v255);
                              v258 = (v257 + v256) >> 1;
                              v259 = *(__int16 *)(v244 + v255);
                              LOWORD(v256) = v256 - v257;
                              v260 = *(__int16 *)(v246 + v255);
                              v261 = (v260 + v259) >> 1;
                              *(_WORD *)(v229 + v255) = (v261 + v258) >> 1;
                              *(_WORD *)(v244 + v255) = v258 - v261;
                              *(_WORD *)(v247 + v255) = ((__int16)(v259 - v260) + (__int16)v256) >> 1;
                              *(_WORD *)(v246 + v255) = v256 - (v259 - v260);
                              v255 += v243;
                              v252 = (unsigned __int16 *)(v229 + v255);
                            }
                            while (v229 + v255 <= (unint64_t)v253);
                          }
                        }
                        if ((v233 & v693) != 0)
                        {
                          v282 = (__int16)*v252;
                          v283 = (__int16)v252[v241];
                          if (v222 >> 14)
                          {
                            v249 = *v252 ^ 0x8000;
                            v250 = (v282 ^ 0x8000) - v283;
                            if (v249 >= v252[v241])
                              LOWORD(v251) = (v249 + v252[v241]) >> 1;
                            else
                              LOWORD(v251) = ((v249 + v252[v241]) >> 1) + 0x8000;
                          }
                          else
                          {
                            v251 = (v283 + v282) >> 1;
                            v250 = v282 - v283;
                          }
                          v252[v241] = v250;
                          *v252 = v251;
                        }
                        v238 += v242;
                        v248 += 2 * v242;
                      }
                      while ((unint64_t)v238 <= v239);
                    }
                    v227 = v234;
                    v205 = v690;
                    if ((v233 & v234) != 0)
                    {
                      v284 = (v693 - v231) * v225;
                      if ((v284 & 0x80000000) == 0)
                      {
                        v285 = 2 * v237;
                        v286 = &v238[v284];
                        if (v222 >= 0x4000)
                        {
                          do
                          {
                            v289 = v238[v236];
                            v290 = *v238 ^ 0x8000;
                            v291 = (v290 + v289) >> 1;
                            v265 = __OFSUB__(v290, v289);
                            v292 = v290 - v289;
                            v293 = v291 + 0x8000;
                            if (v292 < 0 == v265)
                              v293 = v291;
                            v238[v236] = v292;
                            *v238 = v293;
                            v238 = (unsigned __int16 *)((char *)v238 + v285);
                          }
                          while (v238 <= v286);
                        }
                        else
                        {
                          do
                          {
                            v287 = (__int16)*v238;
                            v288 = (__int16)v238[v236];
                            v238[v236] = v287 - v238[v236];
                            *v238 = (v288 + v287) >> 1;
                            v238 = (unsigned __int16 *)((char *)v238 + v285);
                          }
                          while (v238 <= v286);
                        }
                      }
                    }
                    v232 = 2 * v231;
                  }
                  while (2 * v231 <= v691);
                  v228 = v686 + 1;
                  v688 += 2;
                }
                while (v686 + 1 != v225);
              }
            }
            v221 = v684 + 1;
          }
          while (v684 + 1 != v681);
        }
        v206 = (int *)v675;
        *(_DWORD *)v675 = 0;
        v207 = (_DWORD)v675 + 4;
        if (!(_DWORD)v676)
        {
          v294 = 0;
          v295 = __dst;
          goto LABEL_549;
        }
        v208 = (char *)operator new(0x80008uLL);
        bzero(v208, 0x80008uLL);
        v209 = v677;
        v210 = v679;
        if ((int)v676 >= 1)
        {
          v211 = v679;
          do
          {
            v212 = *(unsigned __int16 *)v209;
            v209 += 2;
            ++*(_QWORD *)&v208[8 * v212];
            --v211;
          }
          while (v211);
        }
        v213 = operator new(0x40004uLL);
        bzero(v213, 0x40004uLL);
        v214 = operator new(0x80008uLL);
        bzero(v214, 0x80008uLL);
        v215 = v208 - 8;
        v216 = -1;
        do
        {
          v217 = *((_QWORD *)v215 + 1);
          v215 += 8;
          ++v216;
        }
        while (!v217);
        if (v216 > 0x10000)
        {
          v218 = 0;
          v219 = 0;
        }
        else
        {
          v218 = 0;
          v219 = 0;
          v220 = v216 + 1;
          do
          {
            *((_DWORD *)v213 + v220 - 1) = v220 - 1;
            if (*(_QWORD *)v215)
            {
              v214[v219++] = v215;
              v218 = v220 - 1;
            }
            ++v220;
            v215 += 8;
          }
          while (v220 != 65538);
        }
        v296 = v218 + 1;
        v297 = (uint64_t *)&v208[8 * v218 + 8];
        *v297 = 1;
        v694 = v297;
        v214[v219] = v297;
        v298 = v219 + 1;
        v299 = v219 + 1;
        if (v219 >= 1 && (v298 & 0x1FFFFFFFFFFFFFFELL) != 0)
        {
          v300 = (unint64_t)(v298 - 2) >> 1;
          v301 = (unint64_t)(v299 - 2) >> 1;
          do
          {
            if (v300 >= v301)
            {
              v302 = (2 * v301) | 1;
              v303 = (uint64_t **)&v214[v302];
              v304 = *v303;
              if (2 * v301 + 2 >= v299)
              {
                v308 = (uint64_t **)&v214[v301];
                v309 = *v308;
                v310 = **v308;
                if (*v304 <= v310)
                  goto LABEL_314;
              }
              else
              {
                v305 = v303[1];
                v306 = *v304;
                v307 = *v304 <= *v305;
                if (*v304 >= *v305)
                  v306 = *v305;
                if (*v304 > *v305)
                {
                  v304 = v303[1];
                  ++v303;
                }
                if (!v307)
                  v302 = 2 * v301 + 2;
                v308 = (uint64_t **)&v214[v301];
                v309 = *v308;
                v310 = **v308;
                if (v306 <= v310)
                {
LABEL_314:
                  while (1)
                  {
                    v314 = v303;
                    *v308 = v304;
                    if (v300 < v302)
                      break;
                    v315 = (2 * v302) | 1;
                    v303 = (uint64_t **)&v214[v315];
                    v302 = 2 * v302 + 2;
                    v304 = *v303;
                    if (v302 < v299)
                    {
                      v311 = v303[1];
                      v312 = *v304;
                      v313 = *v304 <= *v311;
                      if (*v304 >= *v311)
                        v312 = *v311;
                      if (*v304 > *v311)
                      {
                        v304 = v303[1];
                        ++v303;
                      }
                      if (v313)
                        v302 = v315;
                      v308 = v314;
                      if (v312 > v310)
                        break;
                    }
                    else
                    {
                      v302 = v315;
                      v308 = v314;
                      if (*v304 > v310)
                        break;
                    }
                  }
                  *v314 = v309;
                }
              }
            }
            v27 = v301-- <= 0;
          }
          while (!v27);
        }
        v316 = operator new(0x80008uLL);
        bzero(v316, 0x80008uLL);
        if (v219 >= 1)
        {
          v317 = v214 - 1;
          v318 = (v219 + 1);
          do
          {
            v319 = 0;
            v320 = v318;
            v321 = (uint64_t *)*v214;
            v322 = (uint64_t **)v214;
            do
            {
              v323 = &v322[v319];
              v326 = v323[1];
              v324 = v323 + 1;
              v325 = v326;
              v327 = (2 * v319) | 1;
              v328 = 2 * v319 + 2;
              if (v328 < v320 && *v325 > *v324[1])
              {
                v325 = v324[1];
                ++v324;
                v327 = v328;
              }
              *v322 = v325;
              v322 = v324;
              v319 = v327;
            }
            while (v327 <= (uint64_t)((unint64_t)(v320 - 2) >> 1));
            v329 = (uint64_t **)&v317[v320];
            if (v324 == v329)
            {
              *v324 = v321;
            }
            else
            {
              *v324 = *v329;
              *v329 = v321;
              v330 = (char *)v324 - (char *)v214 + 8;
              if (v330 >= 9)
              {
                v331 = (((unint64_t)v330 >> 3) - 2) >> 1;
                v332 = (uint64_t **)&v214[v331];
                v333 = *v332;
                v334 = *v324;
                v335 = **v324;
                if (**v332 > v335)
                {
                  do
                  {
                    v336 = v332;
                    *v324 = v333;
                    if (!v331)
                      break;
                    v331 = (v331 - 1) >> 1;
                    v332 = (uint64_t **)&v214[v331];
                    v333 = *v332;
                    v324 = v336;
                  }
                  while (**v332 > v335);
                  *v336 = v334;
                }
              }
            }
            v337 = (unint64_t)((char *)v321 - v208) >> 3;
            v318 = v320 - 1;
            v338 = (uint64_t *)*v214;
            v339 = *v214 - (_QWORD)v208;
            v340 = (int)(v339 >> 3);
            if (((v320 - 1) & 0xFFFFFFFELL) != 0)
            {
              v341 = 0;
              v342 = (v320 - 1);
              v343 = (unint64_t)(v342 - 2) >> 1;
              v344 = (uint64_t **)v214;
              do
              {
                v345 = &v344[v341];
                v348 = v345[1];
                v347 = v345 + 1;
                v346 = v348;
                v349 = (2 * v341) | 1;
                v350 = 2 * v341 + 2;
                if (v350 < v342 && *v346 > *v347[1])
                {
                  v346 = v347[1];
                  ++v347;
                  v349 = v350;
                }
                *v344 = v346;
                v344 = v347;
                v341 = v349;
              }
              while (v349 <= v343);
              v351 = (uint64_t **)&v317[v342];
              if (v347 == v351)
              {
                *v347 = v338;
              }
              else
              {
                *v347 = *v351;
                *v351 = v338;
                v352 = (char *)v347 - (char *)v214 + 8;
                if (v352 >= 9)
                {
                  v353 = (((unint64_t)v352 >> 3) - 2) >> 1;
                  v354 = (uint64_t **)&v214[v353];
                  v355 = *v354;
                  v356 = *v347;
                  v357 = **v347;
                  if (**v354 > v357)
                  {
                    do
                    {
                      v358 = v354;
                      *v347 = v355;
                      if (!v353)
                        break;
                      v353 = (v353 - 1) >> 1;
                      v354 = (uint64_t **)&v214[v353];
                      v355 = *v354;
                      v347 = v358;
                    }
                    while (**v354 > v357);
                    *v358 = v356;
                  }
                }
              }
              *(_QWORD *)&v208[8 * v340] += *(_QWORD *)&v208[8 * (int)v337];
              v359 = (uint64_t **)&v214[v343];
              v360 = *v359;
              v361 = *v351;
              v362 = **v351;
              if (**v359 > v362)
              {
                do
                {
                  v363 = v359;
                  *v351 = v360;
                  if (!v343)
                    break;
                  v343 = (unint64_t)(v343 - 1) >> 1;
                  v359 = (uint64_t **)&v214[v343];
                  v360 = *v359;
                  v351 = v363;
                }
                while (**v359 > v362);
                *v363 = v361;
              }
            }
            else
            {
              *(_QWORD *)&v208[8 * v340] += *(_QWORD *)&v208[8 * (int)v337];
            }
            v364 = (unint64_t)v339 >> 3;
            do
            {
              v365 = v364;
              ++*((_QWORD *)v316 + (int)v364);
              v366 = *((_DWORD *)v213 + (int)v364) == (_DWORD)v364;
              LODWORD(v364) = *((_DWORD *)v213 + (int)v364);
            }
            while (!v366);
            *((_DWORD *)v213 + v365) = v337;
            do
            {
              ++*((_QWORD *)v316 + (int)v337);
              v366 = *((_DWORD *)v213 + (int)v337) == (_DWORD)v337;
              LODWORD(v337) = *((_DWORD *)v213 + (int)v337);
            }
            while (!v366);
          }
          while ((int)v320 >= 3);
        }
        sub_239A22730((uint64_t *)v316);
        memcpy(v208, v316, 0x80008uLL);
        operator delete(v316);
        operator delete(v214);
        operator delete(v213);
        if (v296 < (int)v216)
        {
          v367 = (uint32x4_t *)(v675 + 24);
          v295 = __dst;
          v368 = v677;
          goto LABEL_425;
        }
        v369 = 0;
        v370 = 0;
        v371.i64[0] = 0x700000007;
        v371.i64[1] = 0x700000007;
        v372.i64[0] = 0x7F0000007FLL;
        v372.i64[1] = 0x7F0000007FLL;
        v373 = v216;
        v367 = (uint32x4_t *)(v675 + 24);
        v368 = v677;
        while (1)
        {
          v374 = *(_QWORD *)&v208[8 * v373] & 0x3FLL;
          if (v373 > v218 || v374)
            goto LABEL_372;
          v375 = 0;
          do
          {
            if ((*(_QWORD *)&v208[8 * v373 + 8 + 8 * v375] & 0x3FLL) != 0)
              break;
            if (++v375 + v373 >= v296)
              break;
          }
          while (v375 < 0x104);
          v373 += v375;
          v376 = v375 + 1;
          if (v376 < 2)
          {
LABEL_372:
            v377 = v369 + 6;
            v370 = v374 | (v370 << 6);
            v378 = v369 - 2;
            if (v369 >= 2)
            {
              if (v378 >= 7)
                v378 = 7;
              v379 = v369 - v378 + 5;
              if (v379 < 0x78)
              {
                v380 = v367;
                v369 = v377;
LABEL_387:
                v403 = (v369 - 8);
                v367 = v380;
                do
                {
                  v369 -= 8;
                  v367->i8[0] = v370 >> v403;
                  v367 = (uint32x4_t *)((char *)v367 + 1);
                  v403 -= 8;
                }
                while (v369 > 7);
                goto LABEL_363;
              }
              v387 = (v379 >> 3) + 1;
              v380 = (uint32x4_t *)((char *)v367 + (v387 & 0x3FFFFFF0));
              v369 = v377 - 8 * (v387 & 0x3FFFFFF0);
              v388 = vdupq_n_s32(v377);
              v389 = vaddq_s32(v388, (int32x4_t)xmmword_239F0B2D0);
              v390 = vaddq_s32(v388, (int32x4_t)xmmword_239F0B2E0);
              v391 = vaddq_s32(v388, (int32x4_t)xmmword_239F0B2F0);
              v392 = vaddq_s32(v388, (int32x4_t)xmmword_239F0B300);
              v393 = vdupq_n_s64(v370);
              v394 = v387 & 0x3FFFFFF0;
              do
              {
                v395 = (uint32x4_t)vaddq_s32(v390, v371);
                v396 = (uint32x4_t)vaddq_s32(v389, v371);
                v397 = (uint32x4_t)vaddq_s32(v392, v371);
                v398 = (uint32x4_t)vaddq_s32(v391, v371);
                v399.i64[0] = v398.u32[0];
                v399.i64[1] = v398.u32[1];
                v400 = v399;
                v399.i64[0] = v397.u32[0];
                v399.i64[1] = v397.u32[1];
                v401 = v399;
                v399.i64[0] = v396.u32[0];
                v399.i64[1] = v396.u32[1];
                v402 = v399;
                v399.i64[0] = v395.u32[0];
                v399.i64[1] = v395.u32[1];
                v709.val[1] = (int8x16_t)vshlq_s64(v393, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v395));
                v709.val[0] = (int8x16_t)vshlq_s64(v393, vnegq_s64(v399));
                v709.val[3] = (int8x16_t)vshlq_s64(v393, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v396));
                v709.val[2] = (int8x16_t)vshlq_s64(v393, vnegq_s64(v402));
                v724.val[1] = (int8x16_t)vshlq_s64(v393, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v397));
                v724.val[3] = (int8x16_t)vshlq_s64(v393, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v398));
                v724.val[0] = (int8x16_t)vshlq_s64(v393, vnegq_s64(v401));
                v724.val[2] = (int8x16_t)vshlq_s64(v393, vnegq_s64(v400));
                v395.i64[0] = vqtbl4q_s8(v724, (int8x16_t)xmmword_239F0B310).u64[0];
                v395.i64[1] = vqtbl4q_s8(v709, (int8x16_t)xmmword_239F0B310).u64[0];
                *v367++ = v395;
                v392 = vaddq_s32(v392, v372);
                v391 = vaddq_s32(v391, v372);
                v390 = vaddq_s32(v390, v372);
                v389 = vaddq_s32(v389, v372);
                v394 -= 16;
              }
              while (v394);
              if ((v387 & 0x3FFFFFF0) != v387)
                goto LABEL_387;
              goto LABEL_386;
            }
          }
          else
          {
            v381 = v376 - 6;
            if (v376 < 6)
            {
              v377 = v369 + 6;
              v370 = (v376 + 57) | (unint64_t)(v370 << 6);
              v404 = v369 - 2;
              if (v369 >= 2)
              {
                if (v404 >= 7)
                  v404 = 7;
                v405 = v369 - v404 + 5;
                if (v405 < 0x78)
                {
                  v380 = v367;
                  v369 = v377;
LABEL_407:
                  v442 = (v369 - 8);
                  v367 = v380;
                  do
                  {
                    v369 -= 8;
                    v367->i8[0] = v370 >> v442;
                    v367 = (uint32x4_t *)((char *)v367 + 1);
                    v442 -= 8;
                  }
                  while (v369 > 7);
                  goto LABEL_363;
                }
                v426 = (v405 >> 3) + 1;
                v380 = (uint32x4_t *)((char *)v367 + (v426 & 0x3FFFFFF0));
                v369 = v377 - 8 * (v426 & 0x3FFFFFF0);
                v427 = vdupq_n_s32(v377);
                v428 = vaddq_s32(v427, (int32x4_t)xmmword_239F0B2D0);
                v429 = vaddq_s32(v427, (int32x4_t)xmmword_239F0B2E0);
                v430 = vaddq_s32(v427, (int32x4_t)xmmword_239F0B2F0);
                v431 = vaddq_s32(v427, (int32x4_t)xmmword_239F0B300);
                v432 = vdupq_n_s64(v370);
                v433 = v426 & 0x3FFFFFF0;
                do
                {
                  v434 = (uint32x4_t)vaddq_s32(v429, v371);
                  v435 = (uint32x4_t)vaddq_s32(v428, v371);
                  v436 = (uint32x4_t)vaddq_s32(v431, v371);
                  v437 = (uint32x4_t)vaddq_s32(v430, v371);
                  v438.i64[0] = v437.u32[0];
                  v438.i64[1] = v437.u32[1];
                  v439 = v438;
                  v438.i64[0] = v436.u32[0];
                  v438.i64[1] = v436.u32[1];
                  v440 = v438;
                  v438.i64[0] = v435.u32[0];
                  v438.i64[1] = v435.u32[1];
                  v441 = v438;
                  v438.i64[0] = v434.u32[0];
                  v438.i64[1] = v434.u32[1];
                  v711.val[1] = (int8x16_t)vshlq_s64(v432, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v434));
                  v711.val[0] = (int8x16_t)vshlq_s64(v432, vnegq_s64(v438));
                  v711.val[3] = (int8x16_t)vshlq_s64(v432, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v435));
                  v711.val[2] = (int8x16_t)vshlq_s64(v432, vnegq_s64(v441));
                  v726.val[1] = (int8x16_t)vshlq_s64(v432, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v436));
                  v726.val[3] = (int8x16_t)vshlq_s64(v432, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v437));
                  v726.val[0] = (int8x16_t)vshlq_s64(v432, vnegq_s64(v440));
                  v726.val[2] = (int8x16_t)vshlq_s64(v432, vnegq_s64(v439));
                  v434.i64[0] = vqtbl4q_s8(v726, (int8x16_t)xmmword_239F0B310).u64[0];
                  v434.i64[1] = vqtbl4q_s8(v711, (int8x16_t)xmmword_239F0B310).u64[0];
                  *v367++ = v434;
                  v431 = vaddq_s32(v431, v372);
                  v430 = vaddq_s32(v430, v372);
                  v429 = vaddq_s32(v429, v372);
                  v428 = vaddq_s32(v428, v372);
                  v433 -= 16;
                }
                while (v433);
                if ((v426 & 0x3FFFFFF0) != v426)
                  goto LABEL_407;
                goto LABEL_386;
              }
            }
            else
            {
              v382 = (v370 << 6) | 0x3F;
              v383 = v369 - 2;
              if (v369 >= 2)
              {
                v384 = v369 + 6;
                if (v383 >= 7)
                  v383 = 7;
                v385 = v369 - v383 + 5;
                if (v385 >= 0x78)
                {
                  v408 = (v385 >> 3) + 1;
                  v386 = (uint32x4_t *)((char *)v367 + (v408 & 0x3FFFFFF0));
                  v409 = 8 * (v408 & 0x3FFFFFF0);
                  v410 = v384 - v409;
                  v411 = vdupq_n_s32(v384);
                  v412 = vaddq_s32(v411, (int32x4_t)xmmword_239F0B2D0);
                  v413 = vaddq_s32(v411, (int32x4_t)xmmword_239F0B2E0);
                  v414 = vaddq_s32(v411, (int32x4_t)xmmword_239F0B2F0);
                  v415 = vaddq_s32(v411, (int32x4_t)xmmword_239F0B300);
                  v416 = vdupq_n_s64(v382);
                  v417 = v408 & 0x3FFFFFF0;
                  do
                  {
                    v418 = (uint32x4_t)vaddq_s32(v413, v371);
                    v419 = (uint32x4_t)vaddq_s32(v412, v371);
                    v420 = (uint32x4_t)vaddq_s32(v415, v371);
                    v421 = (uint32x4_t)vaddq_s32(v414, v371);
                    v422.i64[0] = v421.u32[0];
                    v422.i64[1] = v421.u32[1];
                    v423 = v422;
                    v422.i64[0] = v420.u32[0];
                    v422.i64[1] = v420.u32[1];
                    v424 = v422;
                    v422.i64[0] = v419.u32[0];
                    v422.i64[1] = v419.u32[1];
                    v425 = v422;
                    v422.i64[0] = v418.u32[0];
                    v422.i64[1] = v418.u32[1];
                    v710.val[1] = (int8x16_t)vshlq_s64(v416, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v418));
                    v710.val[0] = (int8x16_t)vshlq_s64(v416, vnegq_s64(v422));
                    v710.val[3] = (int8x16_t)vshlq_s64(v416, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v419));
                    v710.val[2] = (int8x16_t)vshlq_s64(v416, vnegq_s64(v425));
                    v725.val[1] = (int8x16_t)vshlq_s64(v416, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v420));
                    v725.val[3] = (int8x16_t)vshlq_s64(v416, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v421));
                    v725.val[0] = (int8x16_t)vshlq_s64(v416, vnegq_s64(v424));
                    v725.val[2] = (int8x16_t)vshlq_s64(v416, vnegq_s64(v423));
                    v418.i64[0] = vqtbl4q_s8(v725, (int8x16_t)xmmword_239F0B310).u64[0];
                    v418.i64[1] = vqtbl4q_s8(v710, (int8x16_t)xmmword_239F0B310).u64[0];
                    *v367++ = v418;
                    v415 = vaddq_s32(v415, v372);
                    v414 = vaddq_s32(v414, v372);
                    v413 = vaddq_s32(v413, v372);
                    v412 = vaddq_s32(v412, v372);
                    v417 -= 16;
                  }
                  while (v417);
                  if ((v408 & 0x3FFFFFF0) != v408)
                  {
                    v384 = v410;
                    v368 = v677;
                    goto LABEL_411;
                  }
                  v377 = v369 - v409 + 14;
                  v368 = v677;
                }
                else
                {
                  v386 = v367;
LABEL_411:
                  v443 = v384 - 8;
                  do
                  {
                    v384 -= 8;
                    v386->i8[0] = v382 >> v443;
                    v386 = (uint32x4_t *)((char *)v386 + 1);
                    v443 -= 8;
                  }
                  while (v384 > 7);
                  v377 = v384 + 8;
                }
                v210 = v679;
                v370 = v381 | (v382 << 8);
                v367 = v386;
                v444 = 7 - v377;
                if (7 - v377 <= 0xFFFFFFF8)
                  v444 = -8;
                v407 = v444 + v377;
                if (v407 < 0x78)
                  goto LABEL_399;
                goto LABEL_417;
              }
              v377 = v369 + 14;
              v370 = v381 | (v382 << 8);
              if (v369 >= -6)
              {
                v406 = -7 - v369;
                if (7 - v377 <= 0xFFFFFFF8)
                  v406 = -8;
                v407 = v406 + v377;
                if (v407 < 0x78)
                {
LABEL_399:
                  v380 = v367;
                  v369 = v377;
LABEL_420:
                  v461 = (v369 - 8);
                  v367 = v380;
                  do
                  {
                    v369 -= 8;
                    v367->i8[0] = v370 >> v461;
                    v367 = (uint32x4_t *)((char *)v367 + 1);
                    v461 -= 8;
                  }
                  while (v369 > 7);
                  goto LABEL_363;
                }
LABEL_417:
                v445 = (v407 >> 3) + 1;
                v380 = (uint32x4_t *)((char *)v367 + (v445 & 0x3FFFFFF0));
                v369 = v377 - 8 * (v445 & 0x3FFFFFF0);
                v446 = vdupq_n_s32(v377);
                v447 = vaddq_s32(v446, (int32x4_t)xmmword_239F0B2D0);
                v448 = vaddq_s32(v446, (int32x4_t)xmmword_239F0B2E0);
                v449 = vaddq_s32(v446, (int32x4_t)xmmword_239F0B2F0);
                v450 = vaddq_s32(v446, (int32x4_t)xmmword_239F0B300);
                v451 = vdupq_n_s64(v370);
                v452 = v445 & 0x3FFFFFF0;
                do
                {
                  v453 = (uint32x4_t)vaddq_s32(v448, v371);
                  v454 = (uint32x4_t)vaddq_s32(v447, v371);
                  v455 = (uint32x4_t)vaddq_s32(v450, v371);
                  v456 = (uint32x4_t)vaddq_s32(v449, v371);
                  v457.i64[0] = v456.u32[0];
                  v457.i64[1] = v456.u32[1];
                  v458 = v457;
                  v457.i64[0] = v455.u32[0];
                  v457.i64[1] = v455.u32[1];
                  v459 = v457;
                  v457.i64[0] = v454.u32[0];
                  v457.i64[1] = v454.u32[1];
                  v460 = v457;
                  v457.i64[0] = v453.u32[0];
                  v457.i64[1] = v453.u32[1];
                  v712.val[1] = (int8x16_t)vshlq_s64(v451, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v453));
                  v712.val[0] = (int8x16_t)vshlq_s64(v451, vnegq_s64(v457));
                  v712.val[3] = (int8x16_t)vshlq_s64(v451, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v454));
                  v712.val[2] = (int8x16_t)vshlq_s64(v451, vnegq_s64(v460));
                  v727.val[1] = (int8x16_t)vshlq_s64(v451, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v455));
                  v727.val[3] = (int8x16_t)vshlq_s64(v451, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v456));
                  v727.val[0] = (int8x16_t)vshlq_s64(v451, vnegq_s64(v459));
                  v727.val[2] = (int8x16_t)vshlq_s64(v451, vnegq_s64(v458));
                  v453.i64[0] = vqtbl4q_s8(v727, (int8x16_t)xmmword_239F0B310).u64[0];
                  v453.i64[1] = vqtbl4q_s8(v712, (int8x16_t)xmmword_239F0B310).u64[0];
                  *v367++ = v453;
                  v450 = vaddq_s32(v450, v372);
                  v449 = vaddq_s32(v449, v372);
                  v448 = vaddq_s32(v448, v372);
                  v447 = vaddq_s32(v447, v372);
                  v452 -= 16;
                }
                while (v452);
                if ((v445 & 0x3FFFFFF0) != v445)
                  goto LABEL_420;
LABEL_386:
                v367 = v380;
                goto LABEL_363;
              }
            }
          }
          v369 = v377;
LABEL_363:
          v27 = v373++ <= v218;
          if (!v27)
          {
            v295 = __dst;
            if (v369 >= 1)
            {
              v367->i8[0] = v370 << (8 - v369);
              v367 = (uint32x4_t *)((char *)v367 + 1);
            }
LABEL_425:
            v462 = *(unsigned __int16 *)v368;
            if ((int)v676 > 1)
            {
              v463 = 0;
              v464 = 0;
              v465 = 0;
              v466 = 1;
              v467.i64[0] = 0x700000007;
              v467.i64[1] = 0x700000007;
              v468.i64[0] = 0x7F0000007FLL;
              v468.i64[1] = 0x7F0000007FLL;
              v469 = v367;
              while (1)
              {
                if (v462 == *(unsigned __int16 *)&v368[2 * v466] && v463 <= 254)
                {
                  ++v463;
                  goto LABEL_428;
                }
                v470 = *(_QWORD *)&v208[8 * v462];
                v471 = *v694;
                v472 = v470 & 0x3F;
                v473 = *v694 & 0x3F;
                if ((v470 & 0x3F) + v473 + 8 >= (v470 & 0x3F) * v463)
                {
                  if (v463 < 0)
                  {
                    v463 = 0;
                    v295 = __dst;
LABEL_455:
                    v210 = v679;
                    goto LABEL_428;
                  }
                  v482 = v470 & 0x3F;
                  while (2)
                  {
                    v483 = v464 + v482;
                    v465 = (v465 << v472) | (v470 >> 6);
                    if ((int)(v464 + v482) < 8)
                    {
                      v464 += v482;
                    }
                    else
                    {
                      v484 = v482 - 1 + v464;
                      v485 = v482 - 8 + v464;
                      if (v485 >= 7)
                        v485 = 7;
                      v486 = v484 - v485;
                      if (v486 < 0x78)
                      {
                        v487 = v469;
                        v464 = v483;
                        goto LABEL_449;
                      }
                      v488 = (v486 >> 3) + 1;
                      v487 = (uint32x4_t *)((char *)v469 + (v488 & 0x3FFFFFF0));
                      v464 = v483 - 8 * (v488 & 0x3FFFFFF0);
                      v489 = vdupq_n_s32(v483);
                      v490 = vaddq_s32(v489, (int32x4_t)xmmword_239F0B2D0);
                      v491 = vaddq_s32(v489, (int32x4_t)xmmword_239F0B2E0);
                      v492 = vaddq_s32(v489, (int32x4_t)xmmword_239F0B2F0);
                      v493 = vaddq_s32(v489, (int32x4_t)xmmword_239F0B300);
                      v494 = vdupq_n_s64(v465);
                      v495 = v488 & 0x3FFFFFF0;
                      do
                      {
                        v496 = (uint32x4_t)vaddq_s32(v491, v467);
                        v497 = (uint32x4_t)vaddq_s32(v490, v467);
                        v498 = (uint32x4_t)vaddq_s32(v493, v467);
                        v499 = (uint32x4_t)vaddq_s32(v492, v467);
                        v500.i64[0] = v499.u32[0];
                        v500.i64[1] = v499.u32[1];
                        v501 = v500;
                        v500.i64[0] = v498.u32[0];
                        v500.i64[1] = v498.u32[1];
                        v502 = v500;
                        v500.i64[0] = v497.u32[0];
                        v500.i64[1] = v497.u32[1];
                        v503 = v500;
                        v500.i64[0] = v496.u32[0];
                        v500.i64[1] = v496.u32[1];
                        v713.val[1] = (int8x16_t)vshlq_s64(v494, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v496));
                        v713.val[0] = (int8x16_t)vshlq_s64(v494, vnegq_s64(v500));
                        v713.val[3] = (int8x16_t)vshlq_s64(v494, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v497));
                        v713.val[2] = (int8x16_t)vshlq_s64(v494, vnegq_s64(v503));
                        v728.val[1] = (int8x16_t)vshlq_s64(v494, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v498));
                        v728.val[3] = (int8x16_t)vshlq_s64(v494, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v499));
                        v728.val[0] = (int8x16_t)vshlq_s64(v494, vnegq_s64(v502));
                        v728.val[2] = (int8x16_t)vshlq_s64(v494, vnegq_s64(v501));
                        v496.i64[0] = vqtbl4q_s8(v728, (int8x16_t)xmmword_239F0B310).u64[0];
                        v496.i64[1] = vqtbl4q_s8(v713, (int8x16_t)xmmword_239F0B310).u64[0];
                        *v469++ = v496;
                        v493 = vaddq_s32(v493, v468);
                        v492 = vaddq_s32(v492, v468);
                        v491 = vaddq_s32(v491, v468);
                        v490 = vaddq_s32(v490, v468);
                        v495 -= 16;
                      }
                      while (v495);
                      v469 = v487;
                      if ((v488 & 0x3FFFFFF0) != v488)
                      {
LABEL_449:
                        v504 = v464 - 8;
                        v469 = v487;
                        do
                        {
                          v464 -= 8;
                          v469->i8[0] = v465 >> v504;
                          v469 = (uint32x4_t *)((char *)v469 + 1);
                          v504 -= 8;
                        }
                        while (v464 > 7);
                      }
                    }
                    v27 = v463-- <= 0;
                    if (v27)
                    {
                      v463 = 0;
                      v295 = __dst;
                      v368 = v677;
                      goto LABEL_455;
                    }
                    continue;
                  }
                }
                v474 = v470 & 0x3F;
                v475 = v474 + v464;
                v476 = (v465 << v472) | (v470 >> 6);
                if ((int)(v474 + v464) < 8)
                {
                  v480 = v469;
                  v481 = v474 + v464;
                }
                else
                {
                  v477 = v464 + v474;
                  v478 = v477 - 8;
                  if ((v477 - 8) >= 7)
                    v478 = 7;
                  v479 = ~v478 + v477;
                  if (v479 >= 0x78)
                  {
                    v505 = (v479 >> 3) + 1;
                    v480 = (uint32x4_t *)((char *)v469 + (v505 & 0x3FFFFFF0));
                    v481 = v475 - 8 * (v505 & 0x3FFFFFF0);
                    v506 = vdupq_n_s32(v475);
                    v507 = vaddq_s32(v506, (int32x4_t)xmmword_239F0B2D0);
                    v508 = vaddq_s32(v506, (int32x4_t)xmmword_239F0B2E0);
                    v509 = vaddq_s32(v506, (int32x4_t)xmmword_239F0B2F0);
                    v510 = vaddq_s32(v506, (int32x4_t)xmmword_239F0B300);
                    v511 = vdupq_n_s64(v476);
                    v512 = v505 & 0x3FFFFFF0;
                    do
                    {
                      v513 = (uint32x4_t)vaddq_s32(v508, v467);
                      v514 = (uint32x4_t)vaddq_s32(v507, v467);
                      v515 = (uint32x4_t)vaddq_s32(v510, v467);
                      v516 = (uint32x4_t)vaddq_s32(v509, v467);
                      v517.i64[0] = v516.u32[0];
                      v517.i64[1] = v516.u32[1];
                      v518 = v517;
                      v517.i64[0] = v515.u32[0];
                      v517.i64[1] = v515.u32[1];
                      v519 = v517;
                      v517.i64[0] = v514.u32[0];
                      v517.i64[1] = v514.u32[1];
                      v520 = v517;
                      v517.i64[0] = v513.u32[0];
                      v517.i64[1] = v513.u32[1];
                      v714.val[1] = (int8x16_t)vshlq_s64(v511, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v513));
                      v714.val[0] = (int8x16_t)vshlq_s64(v511, vnegq_s64(v517));
                      v714.val[3] = (int8x16_t)vshlq_s64(v511, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v514));
                      v714.val[2] = (int8x16_t)vshlq_s64(v511, vnegq_s64(v520));
                      v729.val[1] = (int8x16_t)vshlq_s64(v511, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v515));
                      v729.val[3] = (int8x16_t)vshlq_s64(v511, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v516));
                      v729.val[0] = (int8x16_t)vshlq_s64(v511, vnegq_s64(v519));
                      v729.val[2] = (int8x16_t)vshlq_s64(v511, vnegq_s64(v518));
                      v513.i64[0] = vqtbl4q_s8(v729, (int8x16_t)xmmword_239F0B310).u64[0];
                      v513.i64[1] = vqtbl4q_s8(v714, (int8x16_t)xmmword_239F0B310).u64[0];
                      *v469++ = v513;
                      v510 = vaddq_s32(v510, v468);
                      v509 = vaddq_s32(v509, v468);
                      v508 = vaddq_s32(v508, v468);
                      v507 = vaddq_s32(v507, v468);
                      v512 -= 16;
                    }
                    while (v512);
                    if ((v505 & 0x3FFFFFF0) == v505)
                      goto LABEL_461;
                  }
                  else
                  {
                    v480 = v469;
                    v481 = v475;
                  }
                  v521 = v481 - 8;
                  do
                  {
                    v481 -= 8;
                    v480->i8[0] = v476 >> v521;
                    v480 = (uint32x4_t *)((char *)v480 + 1);
                    v521 -= 8;
                  }
                  while (v481 > 7);
                }
LABEL_461:
                v522 = v481 + (v471 & 0x3F);
                v523 = (v476 << v473) | (v471 >> 6);
                v465 = v463 | (unint64_t)(v523 << 8);
                v524 = v522 - 8;
                v210 = v679;
                v295 = __dst;
                if (v522 >= 8)
                {
                  if (v524 >= 7)
                    v524 = 7;
                  v525 = ~v524 + v522;
                  if (v525 >= 0x78)
                  {
                    v546 = (v525 >> 3) + 1;
                    v526 = (uint32x4_t *)((char *)v480 + (v546 & 0x3FFFFFF0));
                    v547 = v522 - 8 * (v546 & 0x3FFFFFF0);
                    v548 = vdupq_n_s32(v522);
                    v549 = vaddq_s32(v548, (int32x4_t)xmmword_239F0B2D0);
                    v550 = vaddq_s32(v548, (int32x4_t)xmmword_239F0B2E0);
                    v551 = vaddq_s32(v548, (int32x4_t)xmmword_239F0B2F0);
                    v552 = vaddq_s32(v548, (int32x4_t)xmmword_239F0B300);
                    v553 = vdupq_n_s64(v523);
                    v554 = v546 & 0x3FFFFFF0;
                    do
                    {
                      v555 = (uint32x4_t)vaddq_s32(v550, v467);
                      v556 = (uint32x4_t)vaddq_s32(v549, v467);
                      v557 = (uint32x4_t)vaddq_s32(v552, v467);
                      v558 = (uint32x4_t)vaddq_s32(v551, v467);
                      v559.i64[0] = v558.u32[0];
                      v559.i64[1] = v558.u32[1];
                      v560 = v559;
                      v559.i64[0] = v557.u32[0];
                      v559.i64[1] = v557.u32[1];
                      v561 = v559;
                      v559.i64[0] = v556.u32[0];
                      v559.i64[1] = v556.u32[1];
                      v562 = v559;
                      v559.i64[0] = v555.u32[0];
                      v559.i64[1] = v555.u32[1];
                      v716.val[1] = (int8x16_t)vshlq_s64(v553, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v555));
                      v716.val[0] = (int8x16_t)vshlq_s64(v553, vnegq_s64(v559));
                      v716.val[3] = (int8x16_t)vshlq_s64(v553, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v556));
                      v716.val[2] = (int8x16_t)vshlq_s64(v553, vnegq_s64(v562));
                      v731.val[1] = (int8x16_t)vshlq_s64(v553, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v557));
                      v731.val[3] = (int8x16_t)vshlq_s64(v553, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v558));
                      v731.val[0] = (int8x16_t)vshlq_s64(v553, vnegq_s64(v561));
                      v731.val[2] = (int8x16_t)vshlq_s64(v553, vnegq_s64(v560));
                      v555.i64[0] = vqtbl4q_s8(v731, (int8x16_t)xmmword_239F0B310).u64[0];
                      v555.i64[1] = vqtbl4q_s8(v716, (int8x16_t)xmmword_239F0B310).u64[0];
                      *v480++ = v555;
                      v552 = vaddq_s32(v552, v468);
                      v551 = vaddq_s32(v551, v468);
                      v550 = vaddq_s32(v550, v468);
                      v549 = vaddq_s32(v549, v468);
                      v554 -= 16;
                    }
                    while (v554);
                    if ((v546 & 0x3FFFFFF0) != v546)
                    {
                      v522 = v547;
                      goto LABEL_480;
                    }
                    v527 = v547 + 8;
                  }
                  else
                  {
                    v526 = v480;
LABEL_480:
                    v563 = (v522 - 8);
                    do
                    {
                      v522 -= 8;
                      v526->i8[0] = v523 >> v563;
                      v526 = (uint32x4_t *)((char *)v526 + 1);
                      v563 -= 8;
                    }
                    while (v522 > 7);
                    v527 = v522 + 8;
                  }
                  v480 = v526;
                  v564 = 7 - v527;
                  if (7 - v527 <= 0xFFFFFFF8)
                    v564 = -8;
                  v529 = v564 + v527;
                  if (v529 >= 0x78)
                    goto LABEL_470;
                  goto LABEL_486;
                }
                v464 = v522 + 8;
                if ((v522 & 0x80000000) == 0)
                {
                  v527 = v522 + 8;
                  v528 = -1 - v522;
                  if ((-1 - v522) <= 0xFFFFFFF8)
                    v528 = -8;
                  v529 = v528 + v527;
                  if (v529 >= 0x78)
                  {
LABEL_470:
                    v530 = (v529 >> 3) + 1;
                    v469 = (uint32x4_t *)((char *)v480 + (v530 & 0x3FFFFFF0));
                    v464 = v527 - 8 * (v530 & 0x3FFFFFF0);
                    v531 = vdupq_n_s32(v527);
                    v532 = vaddq_s32(v531, (int32x4_t)xmmword_239F0B2D0);
                    v533 = vaddq_s32(v531, (int32x4_t)xmmword_239F0B2E0);
                    v534 = vaddq_s32(v531, (int32x4_t)xmmword_239F0B2F0);
                    v535 = vaddq_s32(v531, (int32x4_t)xmmword_239F0B300);
                    v536 = vdupq_n_s64(v465);
                    v537 = v530 & 0x3FFFFFF0;
                    do
                    {
                      v538 = (uint32x4_t)vaddq_s32(v533, v467);
                      v539 = (uint32x4_t)vaddq_s32(v532, v467);
                      v540 = (uint32x4_t)vaddq_s32(v535, v467);
                      v541 = (uint32x4_t)vaddq_s32(v534, v467);
                      v542.i64[0] = v541.u32[0];
                      v542.i64[1] = v541.u32[1];
                      v543 = v542;
                      v542.i64[0] = v540.u32[0];
                      v542.i64[1] = v540.u32[1];
                      v544 = v542;
                      v542.i64[0] = v539.u32[0];
                      v542.i64[1] = v539.u32[1];
                      v545 = v542;
                      v542.i64[0] = v538.u32[0];
                      v542.i64[1] = v538.u32[1];
                      v715.val[1] = (int8x16_t)vshlq_s64(v536, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v538));
                      v715.val[0] = (int8x16_t)vshlq_s64(v536, vnegq_s64(v542));
                      v715.val[3] = (int8x16_t)vshlq_s64(v536, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v539));
                      v715.val[2] = (int8x16_t)vshlq_s64(v536, vnegq_s64(v545));
                      v730.val[1] = (int8x16_t)vshlq_s64(v536, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v540));
                      v730.val[3] = (int8x16_t)vshlq_s64(v536, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v541));
                      v730.val[0] = (int8x16_t)vshlq_s64(v536, vnegq_s64(v544));
                      v730.val[2] = (int8x16_t)vshlq_s64(v536, vnegq_s64(v543));
                      v538.i64[0] = vqtbl4q_s8(v730, (int8x16_t)xmmword_239F0B310).u64[0];
                      v538.i64[1] = vqtbl4q_s8(v715, (int8x16_t)xmmword_239F0B310).u64[0];
                      *v480++ = v538;
                      v535 = vaddq_s32(v535, v468);
                      v534 = vaddq_s32(v534, v468);
                      v533 = vaddq_s32(v533, v468);
                      v532 = vaddq_s32(v532, v468);
                      v537 -= 16;
                    }
                    while (v537);
                    if ((v530 & 0x3FFFFFF0) != v530)
                    {
                      v527 = v464;
LABEL_487:
                      v565 = v527 - 8;
                      do
                      {
                        v464 -= 8;
                        v469->i8[0] = v465 >> v565;
                        v469 = (uint32x4_t *)((char *)v469 + 1);
                        v565 -= 8;
                      }
                      while (v464 > 7);
                    }
                    v463 = 0;
                    goto LABEL_428;
                  }
LABEL_486:
                  v469 = v480;
                  v464 = v527;
                  goto LABEL_487;
                }
                v463 = 0;
                v469 = v480;
LABEL_428:
                v462 = *(unsigned __int16 *)&v368[2 * v466++];
                if (v466 == v210)
                  goto LABEL_491;
              }
            }
            v465 = 0;
            v464 = 0;
            v463 = 0;
            v469 = v367;
LABEL_491:
            v566 = *(_QWORD *)&v208[8 * v462];
            v567 = *v694;
            v568 = v566 & 0x3F;
            v569 = *v694 & 0x3F;
            if ((v566 & 0x3F) + v569 + 8 < (v566 & 0x3F) * v463)
            {
              v570 = (v566 & 0x3F) + v464;
              v571 = (v465 << v568) | (v566 >> 6);
              if (v570 < 8)
              {
                v574 = v469;
                v575 = v570;
              }
              else
              {
                v572 = 7 - v570;
                if (v570 == 15 || (7 - v570) < 0xFFFFFFF8)
                  v572 = -8;
                v573 = v572 + v570;
                if (v573 < 0x78)
                {
                  v574 = v469;
                  v575 = v570;
                  goto LABEL_516;
                }
                v601 = (v573 >> 3) + 1;
                v574 = (uint32x4_t *)((char *)v469 + (v601 & 0x3FFFFFF0));
                v575 = v570 - 8 * (v601 & 0x3FFFFFF0);
                v602 = vdupq_n_s32(v570);
                v603 = vaddq_s32(v602, (int32x4_t)xmmword_239F0B2D0);
                v604 = vaddq_s32(v602, (int32x4_t)xmmword_239F0B2E0);
                v605 = vaddq_s32(v602, (int32x4_t)xmmword_239F0B2F0);
                v606 = vdupq_n_s64(v571);
                v607 = vaddq_s32(v602, (int32x4_t)xmmword_239F0B300);
                v608.i64[0] = 0x700000007;
                v608.i64[1] = 0x700000007;
                v609.i64[0] = 0x7F0000007FLL;
                v609.i64[1] = 0x7F0000007FLL;
                v610 = v601 & 0x3FFFFFF0;
                do
                {
                  v611 = (uint32x4_t)vaddq_s32(v604, v608);
                  v612 = (uint32x4_t)vaddq_s32(v603, v608);
                  v613 = (uint32x4_t)vaddq_s32(v607, v608);
                  v614 = (uint32x4_t)vaddq_s32(v605, v608);
                  v615.i64[0] = v614.u32[0];
                  v615.i64[1] = v614.u32[1];
                  v616 = v615;
                  v615.i64[0] = v613.u32[0];
                  v615.i64[1] = v613.u32[1];
                  v617 = v615;
                  v615.i64[0] = v612.u32[0];
                  v615.i64[1] = v612.u32[1];
                  v618 = v615;
                  v615.i64[0] = v611.u32[0];
                  v615.i64[1] = v611.u32[1];
                  v721.val[1] = (int8x16_t)vshlq_s64(v606, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v611));
                  v721.val[0] = (int8x16_t)vshlq_s64(v606, vnegq_s64(v615));
                  v721.val[3] = (int8x16_t)vshlq_s64(v606, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v612));
                  v721.val[2] = (int8x16_t)vshlq_s64(v606, vnegq_s64(v618));
                  v718.val[1] = (int8x16_t)vshlq_s64(v606, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v613));
                  v718.val[3] = (int8x16_t)vshlq_s64(v606, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v614));
                  v718.val[0] = (int8x16_t)vshlq_s64(v606, vnegq_s64(v617));
                  v718.val[2] = (int8x16_t)vshlq_s64(v606, vnegq_s64(v616));
                  v611.i64[0] = vqtbl4q_s8(v718, (int8x16_t)xmmword_239F0B310).u64[0];
                  v611.i64[1] = vqtbl4q_s8(v721, (int8x16_t)xmmword_239F0B310).u64[0];
                  *v469++ = v611;
                  v607 = vaddq_s32(v607, v609);
                  v605 = vaddq_s32(v605, v609);
                  v604 = vaddq_s32(v604, v609);
                  v603 = vaddq_s32(v603, v609);
                  v610 -= 16;
                }
                while (v610);
                if ((v601 & 0x3FFFFFF0) != v601)
                {
LABEL_516:
                  v619 = v575 - 8;
                  do
                  {
                    v575 -= 8;
                    v574->i8[0] = v571 >> v619;
                    v574 = (uint32x4_t *)((char *)v574 + 1);
                    v619 -= 8;
                  }
                  while (v575 > 7);
                }
              }
              v620 = v463;
              v621 = v571 << v569;
              v622 = v575 + (v567 & 0x3F);
              v623 = v621 | (v567 >> 6);
              if (v622 < 8)
              {
                v627 = v622 + 8;
                v465 = v620 | (v623 << 8);
                v464 = v622 + 8;
                if ((v622 & 0x80000000) == 0)
                  goto LABEL_534;
              }
              else
              {
                v624 = 7 - v622;
                if (v622 == 15 || (7 - v622) < 0xFFFFFFF8)
                  v624 = -8;
                v625 = v624 + v622;
                if (v625 >= 0x78)
                {
                  v628 = (v625 >> 3) + 1;
                  v626 = (uint32x4_t *)((char *)v574 + (v628 & 0x3FFFFFF0));
                  v629 = v622 - 8 * (v628 & 0x3FFFFFF0);
                  v630 = vdupq_n_s32(v622);
                  v631 = vaddq_s32(v630, (int32x4_t)xmmword_239F0B2D0);
                  v632 = vaddq_s32(v630, (int32x4_t)xmmword_239F0B2E0);
                  v633 = vaddq_s32(v630, (int32x4_t)xmmword_239F0B2F0);
                  v634 = vdupq_n_s64(v623);
                  v635 = vaddq_s32(v630, (int32x4_t)xmmword_239F0B300);
                  v636.i64[0] = 0x700000007;
                  v636.i64[1] = 0x700000007;
                  v637.i64[0] = 0x7F0000007FLL;
                  v637.i64[1] = 0x7F0000007FLL;
                  v638 = v628 & 0x3FFFFFF0;
                  do
                  {
                    v639 = (uint32x4_t)vaddq_s32(v632, v636);
                    v640 = (uint32x4_t)vaddq_s32(v631, v636);
                    v641 = (uint32x4_t)vaddq_s32(v635, v636);
                    v642 = (uint32x4_t)vaddq_s32(v633, v636);
                    v643.i64[0] = v642.u32[0];
                    v643.i64[1] = v642.u32[1];
                    v644 = v643;
                    v643.i64[0] = v641.u32[0];
                    v643.i64[1] = v641.u32[1];
                    v645 = v643;
                    v643.i64[0] = v640.u32[0];
                    v643.i64[1] = v640.u32[1];
                    v646 = v643;
                    v643.i64[0] = v639.u32[0];
                    v643.i64[1] = v639.u32[1];
                    v722.val[1] = (int8x16_t)vshlq_s64(v634, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v639));
                    v722.val[0] = (int8x16_t)vshlq_s64(v634, vnegq_s64(v643));
                    v722.val[3] = (int8x16_t)vshlq_s64(v634, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v640));
                    v722.val[2] = (int8x16_t)vshlq_s64(v634, vnegq_s64(v646));
                    v719.val[1] = (int8x16_t)vshlq_s64(v634, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v641));
                    v719.val[3] = (int8x16_t)vshlq_s64(v634, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v642));
                    v719.val[0] = (int8x16_t)vshlq_s64(v634, vnegq_s64(v645));
                    v719.val[2] = (int8x16_t)vshlq_s64(v634, vnegq_s64(v644));
                    v639.i64[0] = vqtbl4q_s8(v719, (int8x16_t)xmmword_239F0B310).u64[0];
                    v639.i64[1] = vqtbl4q_s8(v722, (int8x16_t)xmmword_239F0B310).u64[0];
                    *v574++ = v639;
                    v635 = vaddq_s32(v635, v637);
                    v633 = vaddq_s32(v633, v637);
                    v632 = vaddq_s32(v632, v637);
                    v631 = vaddq_s32(v631, v637);
                    v638 -= 16;
                  }
                  while (v638);
                  if ((v628 & 0x3FFFFFF0) != v628)
                  {
                    v622 = v629;
                    goto LABEL_530;
                  }
                  v627 = v629 + 8;
                }
                else
                {
                  v626 = v574;
LABEL_530:
                  v647 = (v622 - 8);
                  do
                  {
                    v622 -= 8;
                    v626->i8[0] = v623 >> v647;
                    v626 = (uint32x4_t *)((char *)v626 + 1);
                    v647 -= 8;
                  }
                  while (v622 > 7);
                  v627 = v622 + 8;
                }
                v465 = v620 | (v623 << 8);
                v574 = v626;
LABEL_534:
                v648 = 7 - v627;
                if (v627 == 15 || 7 - v627 < 0xFFFFFFF8)
                  v648 = -8;
                v649 = v648 + v627;
                if (v649 < 0x78)
                {
                  v469 = v574;
                  v464 = v627;
                  goto LABEL_542;
                }
                v650 = (v649 >> 3) + 1;
                v469 = (uint32x4_t *)((char *)v574 + (v650 & 0x3FFFFFF0));
                v464 = v627 - 8 * (v650 & 0x3FFFFFF0);
                v651 = vdupq_n_s32(v627);
                v652 = vaddq_s32(v651, (int32x4_t)xmmword_239F0B2D0);
                v653 = vaddq_s32(v651, (int32x4_t)xmmword_239F0B2E0);
                v654 = vaddq_s32(v651, (int32x4_t)xmmword_239F0B2F0);
                v655 = vdupq_n_s64(v465);
                v656 = vaddq_s32(v651, (int32x4_t)xmmword_239F0B300);
                v657.i64[0] = 0x700000007;
                v657.i64[1] = 0x700000007;
                v658.i64[0] = 0x7F0000007FLL;
                v658.i64[1] = 0x7F0000007FLL;
                v659 = v650 & 0x3FFFFFF0;
                do
                {
                  v660 = (uint32x4_t)vaddq_s32(v653, v657);
                  v661 = (uint32x4_t)vaddq_s32(v652, v657);
                  v662 = (uint32x4_t)vaddq_s32(v656, v657);
                  v663 = (uint32x4_t)vaddq_s32(v654, v657);
                  v664.i64[0] = v663.u32[0];
                  v664.i64[1] = v663.u32[1];
                  v665 = v664;
                  v664.i64[0] = v662.u32[0];
                  v664.i64[1] = v662.u32[1];
                  v666 = v664;
                  v664.i64[0] = v661.u32[0];
                  v664.i64[1] = v661.u32[1];
                  v667 = v664;
                  v664.i64[0] = v660.u32[0];
                  v664.i64[1] = v660.u32[1];
                  v723.val[1] = (int8x16_t)vshlq_s64(v655, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v660));
                  v723.val[0] = (int8x16_t)vshlq_s64(v655, vnegq_s64(v664));
                  v723.val[3] = (int8x16_t)vshlq_s64(v655, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v661));
                  v723.val[2] = (int8x16_t)vshlq_s64(v655, vnegq_s64(v667));
                  v720.val[1] = (int8x16_t)vshlq_s64(v655, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v662));
                  v720.val[3] = (int8x16_t)vshlq_s64(v655, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v663));
                  v720.val[0] = (int8x16_t)vshlq_s64(v655, vnegq_s64(v666));
                  v720.val[2] = (int8x16_t)vshlq_s64(v655, vnegq_s64(v665));
                  v660.i64[0] = vqtbl4q_s8(v720, (int8x16_t)xmmword_239F0B310).u64[0];
                  v660.i64[1] = vqtbl4q_s8(v723, (int8x16_t)xmmword_239F0B310).u64[0];
                  *v574++ = v660;
                  v656 = vaddq_s32(v656, v658);
                  v654 = vaddq_s32(v654, v658);
                  v653 = vaddq_s32(v653, v658);
                  v652 = vaddq_s32(v652, v658);
                  v659 -= 16;
                }
                while (v659);
                if ((v650 & 0x3FFFFFF0) == v650)
                {
LABEL_541:
                  v574 = v469;
                }
                else
                {
LABEL_542:
                  v668 = v464 - 8;
                  v574 = v469;
                  do
                  {
                    v464 -= 8;
                    v574->i8[0] = v465 >> v668;
                    v574 = (uint32x4_t *)((char *)v574 + 1);
                    v668 -= 8;
                  }
                  while (v464 > 7);
                }
              }
LABEL_544:
              if (v464)
                v574->i8[0] = v465 << (8 - v464);
              v206 = (int *)v675;
              *((_WORD *)v675 + 2) = v216;
              v675[6] = BYTE2(v216);
              v675[7] = BYTE3(v216);
              *((_DWORD *)v675 + 2) = v296;
              v669 = v464 + 8 * ((_DWORD)v574 - (_DWORD)v367);
              v670 = v669 + 7;
              if (v669 < -7)
                v670 = v669 + 14;
              *((_DWORD *)v675 + 3) = (_DWORD)v367 - ((_DWORD)v675 + 24);
              *((_DWORD *)v675 + 4) = v669;
              v207 = (_DWORD)v675 + 4;
              v294 = (_DWORD)v367 + (v670 >> 3) - ((_DWORD)v675 + 4);
              *((_DWORD *)v675 + 5) = 0;
              operator delete(v208);
LABEL_549:
              *v206 = v294;
              v671 = (v294 + v207 - (_DWORD)v295);
              if (__n <= v671)
              {
                LODWORD(v671) = __n;
                memcpy(v295, __src, __n);
              }
              operator delete(v673);
              if (v703)
              {
                v704 = v703;
                operator delete(v703);
              }
              if (v706)
                operator delete(v706);
              operator delete(v678);
              v83 = (char *)v697;
              sub_239A22398(a1, *(char **)(a1 + 8), (char *)v697, (char *)v697 + v671, v671);
              goto LABEL_556;
            }
            if (v463 < 0)
              goto LABEL_541;
            v576 = v566 & 0x3F;
            v577 = v566 >> 6;
            v578 = v576 - 8;
            v579.i64[0] = 0x700000007;
            v579.i64[1] = 0x700000007;
            v580.i64[0] = 0x7F0000007FLL;
            v580.i64[1] = 0x7F0000007FLL;
            while (2)
            {
              v581 = v464 + v576;
              v465 = (v465 << v568) | v577;
              if ((int)(v464 + v576) < 8)
              {
                v574 = v469;
                v464 += v576;
              }
              else
              {
                v582 = v578 + v464;
                if (v578 + v464 >= 7)
                  v582 = 7;
                v583 = v576 - 1 + v464 - v582;
                if (v583 < 0x78)
                {
                  v574 = v469;
                  v464 += v576;
                  goto LABEL_509;
                }
                v584 = (v583 >> 3) + 1;
                v574 = (uint32x4_t *)((char *)v469 + (v584 & 0x3FFFFFF0));
                v464 = v581 - 8 * (v584 & 0x3FFFFFF0);
                v585 = vdupq_n_s32(v581);
                v586 = vaddq_s32(v585, (int32x4_t)xmmword_239F0B2D0);
                v587 = vaddq_s32(v585, (int32x4_t)xmmword_239F0B2E0);
                v588 = vaddq_s32(v585, (int32x4_t)xmmword_239F0B2F0);
                v589 = vaddq_s32(v585, (int32x4_t)xmmword_239F0B300);
                v590 = vdupq_n_s64(v465);
                v591 = v584 & 0x3FFFFFF0;
                do
                {
                  v592 = (uint32x4_t)vaddq_s32(v587, v579);
                  v593 = (uint32x4_t)vaddq_s32(v586, v579);
                  v594 = (uint32x4_t)vaddq_s32(v589, v579);
                  v595 = (uint32x4_t)vaddq_s32(v588, v579);
                  v596.i64[0] = v595.u32[0];
                  v596.i64[1] = v595.u32[1];
                  v597 = v596;
                  v596.i64[0] = v594.u32[0];
                  v596.i64[1] = v594.u32[1];
                  v598 = v596;
                  v596.i64[0] = v593.u32[0];
                  v596.i64[1] = v593.u32[1];
                  v599 = v596;
                  v596.i64[0] = v592.u32[0];
                  v596.i64[1] = v592.u32[1];
                  v717.val[1] = (int8x16_t)vshlq_s64(v590, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v592));
                  v717.val[0] = (int8x16_t)vshlq_s64(v590, vnegq_s64(v596));
                  v717.val[3] = (int8x16_t)vshlq_s64(v590, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v593));
                  v717.val[2] = (int8x16_t)vshlq_s64(v590, vnegq_s64(v599));
                  v732.val[1] = (int8x16_t)vshlq_s64(v590, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v594));
                  v732.val[3] = (int8x16_t)vshlq_s64(v590, (int64x2_t)vsubw_high_u32((uint64x2_t)0, v595));
                  v732.val[0] = (int8x16_t)vshlq_s64(v590, vnegq_s64(v598));
                  v732.val[2] = (int8x16_t)vshlq_s64(v590, vnegq_s64(v597));
                  v592.i64[0] = vqtbl4q_s8(v732, (int8x16_t)xmmword_239F0B310).u64[0];
                  v592.i64[1] = vqtbl4q_s8(v717, (int8x16_t)xmmword_239F0B310).u64[0];
                  *v469++ = v592;
                  v589 = vaddq_s32(v589, v580);
                  v588 = vaddq_s32(v588, v580);
                  v587 = vaddq_s32(v587, v580);
                  v586 = vaddq_s32(v586, v580);
                  v591 -= 16;
                }
                while (v591);
                if ((v584 & 0x3FFFFFF0) != v584)
                {
LABEL_509:
                  v600 = v464 - 8;
                  do
                  {
                    v464 -= 8;
                    v574->i8[0] = v465 >> v600;
                    v574 = (uint32x4_t *)((char *)v574 + 1);
                    v600 -= 8;
                  }
                  while (v464 > 7);
                }
              }
              v469 = v574;
              v27 = v463-- <= 0;
              if (v27)
                goto LABEL_544;
              continue;
            }
          }
        }
      }
      v163 = (unsigned __int8 *)v164;
    }
    else
    {
      v162 = 0;
      v163 = 0;
      v703 = 0;
      v704 = 0;
      v705 = 0;
      if (v21 == v25)
        goto LABEL_574;
    }
    v166 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
    if (v166 >> 59)
      sub_2394189F8();
    v167 = (int64x2_t *)operator new(32 * v166);
    v703 = (char *)v167;
    v705 = v167[2 * v166].i8;
    bzero(v167, 32 * v166);
    v704 = v705;
    if (v162 == v163)
LABEL_574:
      sub_23941D884();
    v168 = (char *)v163;
    v690 = v167;
    v169 = 1;
    if (v21 == v25)
    {
      v166 = 0;
    }
    else
    {
      if (v166 <= 1)
        v170 = 1;
      else
        v170 = v166;
      v171 = v167 + 1;
      v172 = (int *)(v25 + 24);
      v173 = v170;
      v174 = (unint64_t)v163;
      do
      {
        v171[-1] = vdupq_n_s64(v174);
        v171->i32[0] = a5;
        v171->i32[1] = v692;
        v175 = *v172;
        v172 += 10;
        v176 = v175 != 1;
        if (v175 == 1)
          v177 = 1;
        else
          v177 = 2;
        v171->i32[3] = v177;
        v174 += 2 * ((v692 * a5) << v176);
        v171 += 2;
        --v173;
      }
      while (v173);
      if (v692 < 1)
      {
        v169 = 0;
      }
      else
      {
        v178 = 0;
        v179 = __src;
        do
        {
          v180 = v690 + 1;
          v181 = v170;
          do
          {
            v182 = 2 * v180->i32[3] * v180->i32[0];
            memcpy((void *)v180[-1].i64[1], v179, v182);
            v179 += v182;
            v180[-1].i64[1] += v182;
            v180 += 2;
            --v181;
          }
          while (v181);
          ++v178;
        }
        while (v178 != v692);
        v169 = 0;
        v168 = (char *)v163;
      }
    }
    goto LABEL_199;
  }
LABEL_101:
  v106 = 1;
  v107 = __p;
  if (__p)
LABEL_102:
    operator delete(v107);
  return v106;
}

void sub_239A22220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  operator delete(__p);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(a1);
}

char *sub_239A22398(uint64_t a1, char *__dst, char *__src, char *a4, unint64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  __int128 v34;
  char v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  char v53;
  char *v54;
  char *v55;
  size_t v56;
  char *v57;

  v5 = __dst;
  if ((uint64_t)a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < (uint64_t)a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = operator new(v15);
      v17 = &v13[(_QWORD)v16];
      v18 = &v13[(_QWORD)v16 + a5];
      v19 = &v13[(_QWORD)v16];
      v20 = __src;
      if (a5 < 8)
        goto LABEL_43;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(__dst - v11);
      v18 = &v13[a5];
      v19 = (char *)(__dst - v11);
      v20 = __src;
      if (a5 < 8)
        goto LABEL_43;
    }
    v19 = v17;
    v20 = __src;
    if ((char *)(&v5[(_QWORD)v16] - &__src[(_QWORD)v11]) >= (char *)0x20)
    {
      if (a5 >= 0x20)
      {
        v29 = a5 & 0x7FFFFFFFFFFFFFE0;
        v36 = (__int128 *)(__src + 16);
        v37 = (char *)v16 + (_QWORD)v13 + 16;
        v38 = a5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v29 == a5)
        {
LABEL_44:
          v45 = *(char **)a1;
          if (*(char **)a1 == v5)
          {
            v48 = v17;
            v55 = (char *)v16 + v15;
            v56 = v10 - v5;
            if (v10 == v5)
              goto LABEL_53;
          }
          else
          {
            v46 = v5 - v45;
            v47 = v5;
            v48 = v17;
            if ((unint64_t)(v5 - v45) < 0x20)
              goto LABEL_62;
            v47 = v5;
            v48 = v17;
            if ((unint64_t)(v11 - (_BYTE *)v16) < 0x20)
              goto LABEL_62;
            v47 = &v5[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            v48 = &v17[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            v49 = v5 - 16;
            v50 = (char *)v16 + v5 - 16 - v11;
            v51 = v46 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v52 = *(_OWORD *)v49;
              *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
              *(_OWORD *)v50 = v52;
              v50 -= 32;
              v49 -= 32;
              v51 -= 32;
            }
            while (v51);
            if (v46 != (v46 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_62:
              do
              {
                v53 = *--v47;
                *--v48 = v53;
              }
              while (v47 != v45);
            }
            v54 = *(char **)(a1 + 8);
            v55 = (char *)v16 + v15;
            v56 = v54 - v5;
            if (v54 == v5)
              goto LABEL_53;
          }
          memmove(v18, v5, v56);
LABEL_53:
          v57 = *(char **)a1;
          *(_QWORD *)a1 = v48;
          *(_QWORD *)(a1 + 8) = &v18[v56];
          *(_QWORD *)(a1 + 16) = v55;
          if (v57)
            operator delete(v57);
          return v17;
        }
        if ((a5 & 0x18) == 0)
        {
          v20 = &__src[v29];
          v19 = &v17[v29];
          goto LABEL_43;
        }
      }
      else
      {
        v29 = 0;
      }
      v19 = &v17[a5 & 0xFFFFFFFFFFFFFFF8];
      v20 = &__src[a5 & 0xFFFFFFFFFFFFFFF8];
      v40 = &__src[v29];
      v41 = (char *)v16 + &v5[v29] - v11;
      v42 = v29 - (a5 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v43 = *(_QWORD *)v40;
        v40 += 8;
        *(_QWORD *)v41 = v43;
        v41 += 8;
        v42 += 8;
      }
      while (v42);
      if ((a5 & 0x7FFFFFFFFFFFFFF8) == a5)
        goto LABEL_44;
    }
    do
    {
LABEL_43:
      v44 = *v20++;
      *v19++ = v44;
    }
    while (v19 != v18);
    goto LABEL_44;
  }
  v21 = v10 - __dst;
  if (v10 - __dst >= (uint64_t)a5)
  {
    v22 = &__src[a5];
    v24 = *(char **)(a1 + 8);
    v25 = &__dst[a5];
    v26 = &v10[-a5];
    v27 = v24;
    if ((unint64_t)v10 < a5)
      goto LABEL_30;
    goto LABEL_19;
  }
  v22 = &__src[v21];
  v23 = a4 - &__src[v21];
  if (a4 != &__src[v21])
    memmove(*(void **)(a1 + 8), &__src[v21], a4 - &__src[v21]);
  v24 = &v10[v23];
  *(_QWORD *)(a1 + 8) = &v10[v23];
  if (v21 >= 1)
  {
    v25 = &v5[a5];
    v26 = &v24[-a5];
    v27 = &v10[v23];
    if (&v24[-a5] >= v10)
      goto LABEL_30;
LABEL_19:
    v28 = &v10[a5] - v24;
    if (v28 >= 0x20)
    {
      v27 = v24;
      if (a5 >= 0x20)
      {
        v30 = &v26[v28 & 0xFFFFFFFFFFFFFFE0];
        v27 = &v24[v28 & 0xFFFFFFFFFFFFFFE0];
        v31 = v24 + 16;
        v32 = (__int128 *)(v26 + 16);
        v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        v26 = v30;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_30;
      }
    }
    else
    {
      v27 = v24;
    }
    do
    {
      v35 = *v26++;
      *v27++ = v35;
    }
    while (v26 != v10);
LABEL_30:
    *(_QWORD *)(a1 + 8) = v27;
    if (v24 != v25)
      memmove(v25, v5, v24 - v25);
    if (v22 != __src)
      memmove(v5, __src, v22 - __src);
  }
  return v5;
}

uint64_t *sub_239A22730(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v1 = 65537;
  v64 = 0;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v2 = 65537;
  v3 = result;
  v35 = 0u;
  do
  {
    v4 = *v3++;
    ++*((_QWORD *)&v35 + v4);
    --v2;
  }
  while (v2);
  v5 = (*((_QWORD *)&v63 + 1) + (v64 >> 1)) >> 1;
  *((_QWORD *)&v63 + 1) = v64 >> 1;
  v64 = 0;
  v6 = (*((_QWORD *)&v62 + 1) + (((uint64_t)v63 + v5) >> 1)) >> 1;
  *((_QWORD *)&v62 + 1) = ((uint64_t)v63 + v5) >> 1;
  *(_QWORD *)&v63 = v5;
  v7 = (*((_QWORD *)&v61 + 1) + (((uint64_t)v62 + v6) >> 1)) >> 1;
  *((_QWORD *)&v61 + 1) = ((uint64_t)v62 + v6) >> 1;
  *(_QWORD *)&v62 = v6;
  v8 = (*((_QWORD *)&v60 + 1) + (((uint64_t)v61 + v7) >> 1)) >> 1;
  *((_QWORD *)&v60 + 1) = ((uint64_t)v61 + v7) >> 1;
  *(_QWORD *)&v61 = v7;
  v9 = (*((_QWORD *)&v59 + 1) + (((uint64_t)v60 + v8) >> 1)) >> 1;
  *((_QWORD *)&v59 + 1) = ((uint64_t)v60 + v8) >> 1;
  *(_QWORD *)&v60 = v8;
  v10 = (*((_QWORD *)&v58 + 1) + (((uint64_t)v59 + v9) >> 1)) >> 1;
  *((_QWORD *)&v58 + 1) = ((uint64_t)v59 + v9) >> 1;
  *(_QWORD *)&v59 = v9;
  v11 = (*((_QWORD *)&v57 + 1) + (((uint64_t)v58 + v10) >> 1)) >> 1;
  *((_QWORD *)&v57 + 1) = ((uint64_t)v58 + v10) >> 1;
  *(_QWORD *)&v58 = v10;
  v12 = (*((_QWORD *)&v56 + 1) + (((uint64_t)v57 + v11) >> 1)) >> 1;
  *((_QWORD *)&v56 + 1) = ((uint64_t)v57 + v11) >> 1;
  *(_QWORD *)&v57 = v11;
  v13 = (*((_QWORD *)&v55 + 1) + (((uint64_t)v56 + v12) >> 1)) >> 1;
  *((_QWORD *)&v55 + 1) = ((uint64_t)v56 + v12) >> 1;
  *(_QWORD *)&v56 = v12;
  v14 = (*((_QWORD *)&v54 + 1) + (((uint64_t)v55 + v13) >> 1)) >> 1;
  *((_QWORD *)&v54 + 1) = ((uint64_t)v55 + v13) >> 1;
  *(_QWORD *)&v55 = v13;
  v15 = (*((_QWORD *)&v53 + 1) + (((uint64_t)v54 + v14) >> 1)) >> 1;
  *((_QWORD *)&v53 + 1) = ((uint64_t)v54 + v14) >> 1;
  *(_QWORD *)&v54 = v14;
  v16 = (*((_QWORD *)&v52 + 1) + (((uint64_t)v53 + v15) >> 1)) >> 1;
  *((_QWORD *)&v52 + 1) = ((uint64_t)v53 + v15) >> 1;
  *(_QWORD *)&v53 = v15;
  v17 = (*((_QWORD *)&v51 + 1) + (((uint64_t)v52 + v16) >> 1)) >> 1;
  *((_QWORD *)&v51 + 1) = ((uint64_t)v52 + v16) >> 1;
  *(_QWORD *)&v52 = v16;
  v18 = (*((_QWORD *)&v50 + 1) + (((uint64_t)v51 + v17) >> 1)) >> 1;
  *((_QWORD *)&v50 + 1) = ((uint64_t)v51 + v17) >> 1;
  *(_QWORD *)&v51 = v17;
  v19 = (*((_QWORD *)&v49 + 1) + (((uint64_t)v50 + v18) >> 1)) >> 1;
  *((_QWORD *)&v49 + 1) = ((uint64_t)v50 + v18) >> 1;
  *(_QWORD *)&v50 = v18;
  v20 = (*((_QWORD *)&v48 + 1) + (((uint64_t)v49 + v19) >> 1)) >> 1;
  *((_QWORD *)&v48 + 1) = ((uint64_t)v49 + v19) >> 1;
  *(_QWORD *)&v49 = v19;
  v21 = (*((_QWORD *)&v47 + 1) + (((uint64_t)v48 + v20) >> 1)) >> 1;
  *((_QWORD *)&v47 + 1) = ((uint64_t)v48 + v20) >> 1;
  *(_QWORD *)&v48 = v20;
  v22 = (*((_QWORD *)&v46 + 1) + (((uint64_t)v47 + v21) >> 1)) >> 1;
  *((_QWORD *)&v46 + 1) = ((uint64_t)v47 + v21) >> 1;
  *(_QWORD *)&v47 = v21;
  v23 = (*((_QWORD *)&v45 + 1) + (((uint64_t)v46 + v22) >> 1)) >> 1;
  *((_QWORD *)&v45 + 1) = ((uint64_t)v46 + v22) >> 1;
  *(_QWORD *)&v46 = v22;
  v24 = (*((_QWORD *)&v44 + 1) + (((uint64_t)v45 + v23) >> 1)) >> 1;
  *((_QWORD *)&v44 + 1) = ((uint64_t)v45 + v23) >> 1;
  *(_QWORD *)&v45 = v23;
  v25 = (*((_QWORD *)&v43 + 1) + (((uint64_t)v44 + v24) >> 1)) >> 1;
  *((_QWORD *)&v43 + 1) = ((uint64_t)v44 + v24) >> 1;
  *(_QWORD *)&v44 = v24;
  v26 = (*((_QWORD *)&v42 + 1) + (((uint64_t)v43 + v25) >> 1)) >> 1;
  *((_QWORD *)&v42 + 1) = ((uint64_t)v43 + v25) >> 1;
  *(_QWORD *)&v43 = v25;
  v27 = (*((_QWORD *)&v41 + 1) + (((uint64_t)v42 + v26) >> 1)) >> 1;
  *((_QWORD *)&v41 + 1) = ((uint64_t)v42 + v26) >> 1;
  *(_QWORD *)&v42 = v26;
  v28 = (*((_QWORD *)&v40 + 1) + (((uint64_t)v41 + v27) >> 1)) >> 1;
  *((_QWORD *)&v40 + 1) = ((uint64_t)v41 + v27) >> 1;
  *(_QWORD *)&v41 = v27;
  v29 = (*((_QWORD *)&v39 + 1) + (((uint64_t)v40 + v28) >> 1)) >> 1;
  *((_QWORD *)&v39 + 1) = ((uint64_t)v40 + v28) >> 1;
  *(_QWORD *)&v40 = v28;
  v30 = (*((_QWORD *)&v38 + 1) + (((uint64_t)v39 + v29) >> 1)) >> 1;
  *((_QWORD *)&v38 + 1) = ((uint64_t)v39 + v29) >> 1;
  *(_QWORD *)&v39 = v29;
  v31 = (*((_QWORD *)&v37 + 1) + (((uint64_t)v38 + v30) >> 1)) >> 1;
  *((_QWORD *)&v37 + 1) = ((uint64_t)v38 + v30) >> 1;
  *(_QWORD *)&v38 = v30;
  v32 = *((_QWORD *)&v36 + 1) + (((uint64_t)v37 + v31) >> 1);
  *((_QWORD *)&v36 + 1) = ((uint64_t)v37 + v31) >> 1;
  *(_QWORD *)&v37 = v31;
  *((_QWORD *)&v35 + 1) = ((uint64_t)v36 + (v32 >> 1)) >> 1;
  *(_QWORD *)&v36 = v32 >> 1;
  do
  {
    if ((int)*result >= 1)
    {
      v33 = *result;
      v34 = *((_QWORD *)&v35 + v33);
      *((_QWORD *)&v35 + v33) = v34 + 1;
      *result = v33 | (v34 << 6);
    }
    ++result;
    --v1;
  }
  while (v1);
  return result;
}

void sub_239A22AD8(void *__p)
{
  operator delete(__p);
}

__n128 sub_239A22AEC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, simd_float3x3 a3@<0:Q0, 16:Q1, 32:Q2>)
{
  simd_float3x3 v4;

  a3.columns[2].i64[0] = *(_QWORD *)(a1 + 24);
  a3.columns[2].i32[2] = *(_DWORD *)(a1 + 32);
  a3.columns[1] = *(simd_float3 *)(a1 + 12);
  a3.columns[0] = *(simd_float3 *)a1;
  v4 = __invert_f3(a3);
  v4.columns[0].i32[3] = v4.columns[1].i32[0];
  *(simd_float3 *)a2 = v4.columns[0];
  *(int8x16_t *)(a2 + 16) = vextq_s8(vextq_s8((int8x16_t)v4.columns[1], (int8x16_t)v4.columns[1], 0xCuLL), (int8x16_t)v4.columns[2], 8uLL);
  *(_DWORD *)(a2 + 32) = v4.columns[2].i32[2];
  return (__n128)v4.columns[0];
}

double sub_239A22B38@<D0>(uint64_t a1@<X8>)
{
  double result;

  __invert_d3();
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

__n128 sub_239A22BE8@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;

  __invert_d4();
  result = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  return result;
}

int *sub_239A22C9C()
{
  unsigned __int8 v0;
  unsigned int v2;
  uint64_t v3;
  uint64_t i;
  int v5;

  v0 = atomic_load((unsigned __int8 *)&unk_25693CE90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire((__guard *)&unk_25693CE90))
    return &dword_25693CE98;
  v2 = dword_2569344A8;
  dword_25693CE98 = dword_2569344A8;
  v3 = 1;
  for (i = 3; i != 626; ++i)
  {
    v5 = 1812433253 * (v2 ^ (v2 >> 30));
    v2 = v5 + v3;
    *((_DWORD *)&unk_25693CE90 + i) = i + v5 - 2;
    ++v3;
  }
  qword_25693D858 = 0;
  __cxa_guard_release((__guard *)&unk_25693CE90);
  return &dword_25693CE98;
}

void sub_239A22D48(int a1, int a2, int a3, int a4, int a5, const float *a6, int __lda, float *__B, float a9, float a10, int __ldb, float *__C, int __ldc)
{
  CBLAS_TRANSPOSE v17;
  CBLAS_TRANSPOSE v18;
  uint64_t v19;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  if (a2)
    v18 = CblasTrans;
  else
    v18 = CblasNoTrans;
  v19 = 1;
  sub_239A41430(&v19, CblasColMajor, v17, v18, a3, a4, a5, a6, a9, a10, __lda, __B, __ldb, __C, __ldc);
}

void sub_239A22DC0(int a1, int __M, int __N, const float *__A, int __lda, const float *__X, int __incX, float *__Y, float a9, float a10, int __incY)
{
  CBLAS_TRANSPOSE v17;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  cblas_sgemv(CblasColMajor, v17, __M, __N, a9, __A, __lda, __X, __incX, a10, __Y, __incY);
}

void sub_239A22E14(int a1, int a2, int a3, int a4, int a5, const double *a6, int __lda, double *__B, double a9, double a10, int __ldb, double *__C, int __ldc)
{
  CBLAS_TRANSPOSE v17;
  CBLAS_TRANSPOSE v18;
  uint64_t v19;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  if (a2)
    v18 = CblasTrans;
  else
    v18 = CblasNoTrans;
  v19 = 1;
  sub_239A414D0(&v19, CblasColMajor, v17, v18, a3, a4, a5, a6, a9, a10, __lda, __B, __ldb, __C, __ldc);
}

void sub_239A22E8C(int a1, int __M, int __N, const double *__A, int __lda, const double *__X, int __incX, double *__Y, double a9, double a10, int __incY)
{
  CBLAS_TRANSPOSE v17;

  if (a1)
    v17 = CblasTrans;
  else
    v17 = CblasNoTrans;
  cblas_dgemv(CblasColMajor, v17, __M, __N, a9, __A, __lda, __X, __incX, a10, __Y, __incY);
}

void sub_239A22EE0(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double *__A, int __lda, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *__B, int __ldb)
{
  uint64_t v20;
  CBLAS_UPLO v21;
  int v22;
  CBLAS_TRANSPOSE v23;
  CBLAS_DIAG v24;
  uint64_t v25;

  if (a1)
    v20 = 142;
  else
    v20 = 141;
  if (a2)
    v21 = CblasLower;
  else
    v21 = CblasUpper;
  if (a3)
    v22 = 113;
  else
    v22 = 111;
  if (a3 == 1)
    v23 = CblasTrans;
  else
    v23 = v22;
  if (a4)
    v24 = CblasNonUnit;
  else
    v24 = CblasUnit;
  v25 = 1;
  sub_239A41570(&v25, CblasColMajor, v20, v21, v23, v24, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16, __A, __lda, __B,
    __ldb);
}

void sub_239A22F7C(int a1, int a2, int a3, int __N, const double *__A, int __lda, double *__X, int __incX)
{
  CBLAS_UPLO v11;
  int v12;
  CBLAS_TRANSPOSE v13;
  CBLAS_DIAG v14;
  uint64_t v15;

  if (a1)
    v11 = CblasLower;
  else
    v11 = CblasUpper;
  if (a2)
    v12 = 113;
  else
    v12 = 111;
  if (a2 == 1)
    v13 = CblasTrans;
  else
    v13 = v12;
  if (a3)
    v14 = CblasNonUnit;
  else
    v14 = CblasUnit;
  v15 = 1;
  sub_239A413E4(&v15, CblasColMajor, v11, v13, v14, __N, __A, __lda, __X, __incX);
}

uint64_t sub_239A22FFC(int a1, __CLPK_integer a2, __CLPK_integer a3, __CLPK_doublereal *a4, __CLPK_integer a5, __CLPK_doublereal *a6, __CLPK_integer a7)
{
  char v7;
  __CLPK_integer __ldb;
  __CLPK_integer __lda;
  __CLPK_integer __nrhs;
  __CLPK_integer __n;
  __CLPK_integer __info;
  char __uplo;

  if (a1)
    v7 = 76;
  else
    v7 = 85;
  __uplo = v7;
  __n = a2;
  __info = -1;
  __lda = a5;
  __nrhs = a3;
  __ldb = a7;
  dpotrs_(&__uplo, &__n, &__nrhs, a4, &__lda, a6, &__ldb, &__info);
  return __info;
}

uint64_t sub_239A23058(int a1, __CLPK_integer a2, __CLPK_doublereal *a3, __CLPK_integer a4)
{
  char v4;
  __CLPK_integer v6;
  __CLPK_integer __n;
  __CLPK_integer __info;
  char __uplo;

  if (a1)
    v4 = 76;
  else
    v4 = 85;
  __uplo = v4;
  __n = a2;
  __info = -1;
  v6 = a4;
  dpotrf_(&__uplo, &__n, a3, &v6, &__info);
  return __info;
}

uint64_t sub_239A230A8(int a1, __CLPK_integer a2, __CLPK_integer a3, __CLPK_doublereal *a4, __CLPK_integer a5, __CLPK_integer *a6, __CLPK_doublereal *a7, __CLPK_integer a8)
{
  char v8;
  char __uplo;
  __CLPK_integer __ldb;
  __CLPK_integer __lda;
  __CLPK_integer __nrhs;
  __CLPK_integer __n;
  __CLPK_integer __info;

  __n = a2;
  __info = -1;
  __nrhs = a3;
  __ldb = a8;
  __lda = a5;
  if (a1)
    v8 = 76;
  else
    v8 = 85;
  __uplo = v8;
  dsytrs_(&__uplo, &__n, &__nrhs, a4, &__lda, a6, a7, &__ldb, &__info);
  return __info;
}

uint64_t sub_239A23108(int a1, __CLPK_integer a2, __CLPK_doublereal *a3, __CLPK_integer a4, __CLPK_integer *a5, __CLPK_doublereal *a6, __CLPK_integer a7)
{
  char v7;
  char __uplo;
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __info;

  __n = a2;
  __info = -1;
  __lda = a4;
  __lwork = a7;
  if (a1)
    v7 = 76;
  else
    v7 = 85;
  __uplo = v7;
  dsytrf_(&__uplo, &__n, a3, &__lda, a5, a6, &__lwork, &__info);
  return __info;
}

uint64_t sub_239A23160(char a1, char a2, __CLPK_integer a3, __CLPK_integer a4, __CLPK_doublereal *a5, __CLPK_integer a6, __CLPK_doublereal *a7, __CLPK_doublereal *a8, __CLPK_integer __ldu, __CLPK_doublereal *a10, __CLPK_integer __ldvt, __CLPK_doublereal *a12, __CLPK_integer __lwork, __CLPK_integer *a14)
{
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  __jobu = a1;
  __jobvt = a2;
  __n = a4;
  __m = a3;
  __lda = a6;
  return dgesvd_(&__jobu, &__jobvt, &__m, &__n, a5, &__lda, a7, a8, &__ldu, a10, &__ldvt, a12, &__lwork, a14);
}

uint64_t sub_239A231C4(char a1, char a2, __CLPK_integer a3, __CLPK_doublereal *a4, __CLPK_integer a5, __CLPK_doublereal *a6, __CLPK_doublereal *a7, __CLPK_integer a8, __CLPK_integer *__info)
{
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  char __uplo;
  char __jobz;

  __jobz = a1;
  __uplo = a2;
  __lda = a5;
  __n = a3;
  __lwork = a8;
  return dsyev_(&__jobz, &__uplo, &__n, a4, &__lda, a6, a7, &__lwork, __info);
}

uint64_t sub_239A2320C(__CLPK_integer a1, __CLPK_doublereal *a2, __CLPK_integer a3, __CLPK_integer *a4, __CLPK_doublereal *a5, __CLPK_integer a6, __CLPK_integer *a7)
{
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;

  __n = a1;
  __lwork = a6;
  __lda = a3;
  return dgetri_(&__n, a2, &__lda, a4, a5, &__lwork, a7);
}

uint64_t sub_239A2323C(__CLPK_integer a1, __CLPK_integer a2, __CLPK_doublereal *a3, __CLPK_integer a4, __CLPK_integer *a5, __CLPK_integer *a6)
{
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  __m = a1;
  __lda = a4;
  __n = a2;
  return dgetrf_(&__m, &__n, a3, &__lda, a5, a6);
}

uint64_t sub_239A2326C(char a1, __CLPK_integer a2, __CLPK_integer a3, __CLPK_doublereal *a4, __CLPK_integer a5, __CLPK_integer *a6, __CLPK_doublereal *a7, __CLPK_integer a8, __CLPK_doublereal *__work, uint64_t __lwork, __CLPK_integer *a11)
{
  __CLPK_integer __ldb;
  __CLPK_integer __lda;
  __CLPK_integer __nrhs;
  __CLPK_integer __n;
  char __uplo;

  __uplo = a1;
  __nrhs = a3;
  __n = a2;
  __ldb = a8;
  __lda = a5;
  return dsysv_(&__uplo, &__n, &__nrhs, a4, &__lda, a6, a7, &__ldb, __work, (__CLPK_integer *)&__lwork, a11);
}

__n128 sub_239A232BC(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __n128 result;
  SparseOpaqueFactorization_Float v5;
  uint64_t v6;

  v1 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v5.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v5.solveWorkspaceRequiredStatic = v1;
  v6 = *(_QWORD *)(a1 + 96);
  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v5.status = *(_OWORD *)a1;
  *(_OWORD *)&v5.symbolicFactorization.columnCount = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v5.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v5.symbolicFactorization.factorSize_Float = v3;
  _SparseDestroyOpaqueNumeric_Float(&v5);
  return result;
}

void sub_239A232FC(SparseFactorization_t factorType@<W1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  __int128 v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SparseNumericFactorOptions v14;
  SparseSymbolicFactorOptions sfoptions;
  SparseMatrix_Float Matrix;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&Matrix.structure.rowCount = *(_OWORD *)a2;
  *(_OWORD *)&Matrix.structure.rowIndices = v4;
  Matrix.data = *(float **)(a2 + 32);
  sfoptions = *(SparseSymbolicFactorOptions *)byte_250AF2020;
  v14 = *(SparseNumericFactorOptions *)ymmword_239F0BBA0;
  if (Matrix.structure.rowCount <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC39D4();
    goto LABEL_14;
  }
  if (Matrix.structure.columnCount <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3960();
    goto LABEL_14;
  }
  if (!*(&Matrix.structure.blockSize + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3844();
    goto LABEL_14;
  }
  v5 = *(_BYTE *)&Matrix.structure.attributes & 0xC;
  if (Matrix.structure.rowCount != Matrix.structure.columnCount && v5 == 12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC38EC();
LABEL_14:
    _SparseTrap();
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)a3 = -4;
    *(_DWORD *)(a3 + 8) = -4;
    return;
  }
  if ((factorType & 0xFE) == 0x28)
  {
    _SparseFactorQR_Float((SparseOpaqueFactorization_Float *)a3, factorType, &Matrix, &sfoptions, &v14);
  }
  else
  {
    if (v5 != 12)
    {
      v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v6)
        sub_239EC38B8(v6, v7, v8, v9, v10, v11, v12, v13);
      goto LABEL_14;
    }
    _SparseFactorSymmetric_Float((SparseOpaqueFactorization_Float *)a3, factorType, &Matrix, &sfoptions, &v14);
  }
}

void sub_239A234C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  SparseControl_t v19;
  int *v20;
  int v21;
  float *v22;
  void (__cdecl *reportError)(const char *);
  int v24;
  int v25;
  int v26;
  int v27;
  float *v28;
  int v29;
  float *v30;
  void (__cdecl *v31)(const char *);
  int v32;
  int v33;
  int v34;
  void (__cdecl *free)(void *);
  void *v36;
  void *v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  SparseOpaqueFactorization_Float v54;
  uint64_t v55;
  SparseOpaqueFactorization_Float Factored;
  uint64_t v57;
  DenseMatrix_Float v58;
  DenseMatrix_Float Soln;
  SparseSymbolicFactorOptions v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v4 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v4;
    v57 = *(_QWORD *)(a1 + 96);
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a1;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v5;
    v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v6;
    if (Factored.symbolicFactorization.status == SparseStatusOK && Factored.symbolicFactorization.workspaceSize_Float)
    {
      v19 = *(_DWORD *)a3;
      v20 = *(int **)(a3 + 8);
      v21 = *(_DWORD *)a2;
      v22 = *(float **)(a2 + 8);
      _SparseGetOptionsFromSymbolicFactor(&v60, &Factored.symbolicFactorization);
      reportError = v60.reportError;
      if (Factored.symbolicFactorization.status
        || !Factored.symbolicFactorization.workspaceSize_Float
        || Factored.status
        || !Factored.solveWorkspaceRequiredStatic)
      {
        if (v60.reportError)
        {
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
          memset(&v60, 0, sizeof(v60));
          snprintf((char *)&v60, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
LABEL_56:
          ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v60);
          return;
        }
        v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v38)
          sub_239EC3A7C(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
          v24 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        else
          v24 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
          v25 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        else
          v25 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (BYTE1(Factored.symbolicFactorization.factorization) == 40)
          v26 = v24;
        else
          v26 = v25;
        if (v25 == v21)
        {
          if (v26 == v19)
          {
            v60.control = v19;
            *(_DWORD *)&v60.orderMethod = 1;
            v60.ignoreRowsAndColumns = v20;
            v60.order = (int *)v19;
            Soln.rowCount = v21;
            Soln.columnCount = 1;
            *(_DWORD *)&Soln.attributes = 0;
            Soln.data = v22;
            Soln.columnStride = v21;
            _SparseSolveOpaque_Float(&Factored, (const DenseMatrix_Float *)&v60, &Soln, a4);
            return;
          }
          if (v60.reportError)
            goto LABEL_55;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_239EC3B58();
        }
        else
        {
          if (v60.reportError)
          {
LABEL_55:
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v61 = 0u;
            memset(&v60, 0, sizeof(v60));
            snprintf((char *)&v60, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
            goto LABEL_56;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_239EC3BD8();
        }
      }
LABEL_8:
      _SparseTrap();
      return;
    }
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v7)
      goto LABEL_8;
LABEL_7:
    sub_239EC3A48(v7, v8, v9, v10, v11, v12, v13, v14);
    goto LABEL_8;
  }
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v54.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v54.solveWorkspaceRequiredStatic = v15;
  v55 = *(_QWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v54.status = *(_OWORD *)a1;
  *(_OWORD *)&v54.symbolicFactorization.columnCount = v16;
  v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v54.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v54.symbolicFactorization.factorSize_Float = v17;
  if (v54.symbolicFactorization.status || !v54.symbolicFactorization.workspaceSize_Float)
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v7)
      goto LABEL_8;
    goto LABEL_7;
  }
  v27 = *(_DWORD *)a3;
  v28 = *(float **)(a3 + 8);
  v29 = *(_DWORD *)a2;
  v30 = *(float **)(a2 + 8);
  _SparseGetOptionsFromSymbolicFactor(&v60, &v54.symbolicFactorization);
  v31 = v60.reportError;
  if (v54.symbolicFactorization.status
    || !v54.symbolicFactorization.workspaceSize_Float
    || v54.status
    || !v54.solveWorkspaceRequiredStatic)
  {
    if (!v60.reportError)
    {
      v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v46)
        sub_239EC3A7C(v46, v47, v48, v49, v50, v51, v52, v53);
      goto LABEL_8;
    }
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    memset(&v60, 0, sizeof(v60));
    snprintf((char *)&v60, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_63;
  }
  if (((*(_BYTE *)&v54.attributes ^ *(_BYTE *)&v54.symbolicFactorization.attributes) & 1) != 0)
    v32 = v54.symbolicFactorization.columnCount * LOBYTE(v54.symbolicFactorization.factorization);
  else
    v32 = v54.symbolicFactorization.rowCount * LOBYTE(v54.symbolicFactorization.factorization);
  if (((*(_BYTE *)&v54.attributes ^ *(_BYTE *)&v54.symbolicFactorization.attributes) & 1) != 0)
    v33 = v54.symbolicFactorization.rowCount * LOBYTE(v54.symbolicFactorization.factorization);
  else
    v33 = v54.symbolicFactorization.columnCount * LOBYTE(v54.symbolicFactorization.factorization);
  if (BYTE1(v54.symbolicFactorization.factorization) == 40)
    v34 = v32;
  else
    v34 = v33;
  if (v33 != v29)
  {
    if (!v60.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_239EC3BD8();
      goto LABEL_8;
    }
LABEL_62:
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    memset(&v60, 0, sizeof(v60));
    snprintf((char *)&v60, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
    goto LABEL_63;
  }
  if (v34 != v27)
  {
    if (!v60.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_239EC3B58();
      goto LABEL_8;
    }
    goto LABEL_62;
  }
  free = v60.free;
  Soln.rowCount = v27;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = v28;
  Soln.columnStride = v27;
  *(_DWORD *)&v58.attributes = 0;
  v58.data = v30;
  v58.rowCount = v29;
  v58.columnCount = 1;
  v58.columnStride = v29;
  v36 = (void *)((uint64_t (*)(size_t))v60.malloc)(v55 + v54.solveWorkspaceRequiredPerRHS);
  if (v36)
  {
    v37 = v36;
    _SparseSolveOpaque_Float(&v54, &Soln, &v58, v36);
    ((void (*)(void *))free)(v37);
    return;
  }
  if (!v31)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3AF0();
    goto LABEL_8;
  }
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  memset(&v60, 0, sizeof(v60));
  snprintf((char *)&v60, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
LABEL_63:
  ((void (*)(SparseSymbolicFactorOptions *))v31)(&v60);
}

__n128 sub_239A23A84(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __n128 result;
  SparseOpaqueFactorization_Double v5;
  uint64_t v6;

  v1 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v5.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v5.solveWorkspaceRequiredStatic = v1;
  v6 = *(_QWORD *)(a1 + 96);
  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v5.status = *(_OWORD *)a1;
  *(_OWORD *)&v5.symbolicFactorization.columnCount = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v5.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v5.symbolicFactorization.factorSize_Float = v3;
  _SparseDestroyOpaqueNumeric_Double(&v5);
  return result;
}

void sub_239A23AC4(SparseFactorization_t factorType@<W1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  __int128 v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SparseNumericFactorOptions v14;
  SparseSymbolicFactorOptions sfoptions;
  SparseMatrix_Double Matrix;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&Matrix.structure.rowCount = *(_OWORD *)a2;
  *(_OWORD *)&Matrix.structure.rowIndices = v4;
  Matrix.data = *(double **)(a2 + 32);
  sfoptions = *(SparseSymbolicFactorOptions *)byte_250AF2020;
  v14 = *(SparseNumericFactorOptions *)ymmword_239F0BBC0;
  if (Matrix.structure.rowCount <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC39D4();
    goto LABEL_14;
  }
  if (Matrix.structure.columnCount <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3960();
    goto LABEL_14;
  }
  if (!*(&Matrix.structure.blockSize + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3844();
    goto LABEL_14;
  }
  v5 = *(_BYTE *)&Matrix.structure.attributes & 0xC;
  if (Matrix.structure.rowCount != Matrix.structure.columnCount && v5 == 12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC38EC();
LABEL_14:
    _SparseTrap();
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)a3 = -4;
    *(_DWORD *)(a3 + 8) = -4;
    return;
  }
  if ((factorType & 0xFE) == 0x28)
  {
    _SparseFactorQR_Double((SparseOpaqueFactorization_Double *)a3, factorType, &Matrix, &sfoptions, &v14);
  }
  else
  {
    if (v5 != 12)
    {
      v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v6)
        sub_239EC38B8(v6, v7, v8, v9, v10, v11, v12, v13);
      goto LABEL_14;
    }
    _SparseFactorSymmetric_Double((SparseOpaqueFactorization_Double *)a3, factorType, &Matrix, &sfoptions, &v14);
  }
}

void sub_239A23C90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  SparseControl_t v19;
  int *v20;
  int v21;
  double *v22;
  void (__cdecl *reportError)(const char *);
  int v24;
  int v25;
  int v26;
  int v27;
  double *v28;
  int v29;
  double *v30;
  void (__cdecl *v31)(const char *);
  int v32;
  int v33;
  int v34;
  void (__cdecl *free)(void *);
  void *v36;
  void *v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  SparseOpaqueFactorization_Double v54;
  uint64_t v55;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v57;
  DenseMatrix_Double v58;
  DenseMatrix_Double Soln;
  SparseSymbolicFactorOptions v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v4 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v4;
    v57 = *(_QWORD *)(a1 + 96);
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a1;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v5;
    v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v6;
    if (Factored.symbolicFactorization.status == SparseStatusOK && Factored.symbolicFactorization.workspaceSize_Float)
    {
      v19 = *(_DWORD *)a3;
      v20 = *(int **)(a3 + 8);
      v21 = *(_DWORD *)a2;
      v22 = *(double **)(a2 + 8);
      _SparseGetOptionsFromSymbolicFactor(&v60, &Factored.symbolicFactorization);
      reportError = v60.reportError;
      if (Factored.symbolicFactorization.status
        || !Factored.symbolicFactorization.workspaceSize_Float
        || Factored.status
        || !Factored.solveWorkspaceRequiredStatic)
      {
        if (v60.reportError)
        {
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
          memset(&v60, 0, sizeof(v60));
          snprintf((char *)&v60, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
LABEL_56:
          ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v60);
          return;
        }
        v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v38)
          sub_239EC3A7C(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
          v24 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        else
          v24 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
          v25 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        else
          v25 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (BYTE1(Factored.symbolicFactorization.factorization) == 40)
          v26 = v24;
        else
          v26 = v25;
        if (v25 == v21)
        {
          if (v26 == v19)
          {
            v60.control = v19;
            *(_DWORD *)&v60.orderMethod = 1;
            v60.ignoreRowsAndColumns = v20;
            v60.order = (int *)v19;
            Soln.rowCount = v21;
            Soln.columnCount = 1;
            *(_DWORD *)&Soln.attributes = 0;
            Soln.data = v22;
            Soln.columnStride = v21;
            _SparseSolveOpaque_Double(&Factored, (const DenseMatrix_Double *)&v60, &Soln, a4);
            return;
          }
          if (v60.reportError)
            goto LABEL_55;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_239EC3B58();
        }
        else
        {
          if (v60.reportError)
          {
LABEL_55:
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v61 = 0u;
            memset(&v60, 0, sizeof(v60));
            snprintf((char *)&v60, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
            goto LABEL_56;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_239EC3BD8();
        }
      }
LABEL_8:
      _SparseTrap();
      return;
    }
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v7)
      goto LABEL_8;
LABEL_7:
    sub_239EC3A48(v7, v8, v9, v10, v11, v12, v13, v14);
    goto LABEL_8;
  }
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v54.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v54.solveWorkspaceRequiredStatic = v15;
  v55 = *(_QWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v54.status = *(_OWORD *)a1;
  *(_OWORD *)&v54.symbolicFactorization.columnCount = v16;
  v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v54.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v54.symbolicFactorization.factorSize_Float = v17;
  if (v54.symbolicFactorization.status || !v54.symbolicFactorization.workspaceSize_Float)
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v7)
      goto LABEL_8;
    goto LABEL_7;
  }
  v27 = *(_DWORD *)a3;
  v28 = *(double **)(a3 + 8);
  v29 = *(_DWORD *)a2;
  v30 = *(double **)(a2 + 8);
  _SparseGetOptionsFromSymbolicFactor(&v60, &v54.symbolicFactorization);
  v31 = v60.reportError;
  if (v54.symbolicFactorization.status
    || !v54.symbolicFactorization.workspaceSize_Float
    || v54.status
    || !v54.solveWorkspaceRequiredStatic)
  {
    if (!v60.reportError)
    {
      v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v46)
        sub_239EC3A7C(v46, v47, v48, v49, v50, v51, v52, v53);
      goto LABEL_8;
    }
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    memset(&v60, 0, sizeof(v60));
    snprintf((char *)&v60, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_63;
  }
  if (((*(_BYTE *)&v54.attributes ^ *(_BYTE *)&v54.symbolicFactorization.attributes) & 1) != 0)
    v32 = v54.symbolicFactorization.columnCount * LOBYTE(v54.symbolicFactorization.factorization);
  else
    v32 = v54.symbolicFactorization.rowCount * LOBYTE(v54.symbolicFactorization.factorization);
  if (((*(_BYTE *)&v54.attributes ^ *(_BYTE *)&v54.symbolicFactorization.attributes) & 1) != 0)
    v33 = v54.symbolicFactorization.rowCount * LOBYTE(v54.symbolicFactorization.factorization);
  else
    v33 = v54.symbolicFactorization.columnCount * LOBYTE(v54.symbolicFactorization.factorization);
  if (BYTE1(v54.symbolicFactorization.factorization) == 40)
    v34 = v32;
  else
    v34 = v33;
  if (v33 != v29)
  {
    if (!v60.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_239EC3BD8();
      goto LABEL_8;
    }
LABEL_62:
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    memset(&v60, 0, sizeof(v60));
    snprintf((char *)&v60, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
    goto LABEL_63;
  }
  if (v34 != v27)
  {
    if (!v60.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_239EC3B58();
      goto LABEL_8;
    }
    goto LABEL_62;
  }
  free = v60.free;
  Soln.rowCount = v27;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = v28;
  Soln.columnStride = v27;
  *(_DWORD *)&v58.attributes = 0;
  v58.data = v30;
  v58.rowCount = v29;
  v58.columnCount = 1;
  v58.columnStride = v29;
  v36 = (void *)((uint64_t (*)(size_t))v60.malloc)(v55 + v54.solveWorkspaceRequiredPerRHS);
  if (v36)
  {
    v37 = v36;
    _SparseSolveOpaque_Double(&v54, &Soln, &v58, v36);
    ((void (*)(void *))free)(v37);
    return;
  }
  if (!v31)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3AF0();
    goto LABEL_8;
  }
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  memset(&v60, 0, sizeof(v60));
  snprintf((char *)&v60, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
LABEL_63:
  ((void (*)(SparseSymbolicFactorOptions *))v31)(&v60);
}

void sub_239A2424C(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  SparseControl_t v18;
  int *v19;
  void (__cdecl *reportError)(const char *);
  int v21;
  int v22;
  double *v23;
  int v24;
  void (__cdecl *free)(void *);
  void *v26;
  void *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  SparseOpaqueFactorization_Double v44;
  uint64_t v45;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v47;
  DenseMatrix_Double Soln;
  SparseSymbolicFactorOptions v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 64);
    *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v3;
    v47 = *(_QWORD *)(a1 + 96);
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&Factored.status = *(_OWORD *)a1;
    *(_OWORD *)&Factored.symbolicFactorization.columnCount = v4;
    v5 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v5;
    if (Factored.symbolicFactorization.status == SparseStatusOK && Factored.symbolicFactorization.workspaceSize_Float)
    {
      v18 = *(_DWORD *)a2;
      v19 = *(int **)(a2 + 8);
      _SparseGetOptionsFromSymbolicFactor(&v49, &Factored.symbolicFactorization);
      reportError = v49.reportError;
      if (Factored.symbolicFactorization.status == SparseStatusOK
        && Factored.symbolicFactorization.workspaceSize_Float
        && Factored.status == SparseStatusOK
        && Factored.solveWorkspaceRequiredStatic)
      {
        v21 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization) > v21)
          v21 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
        if (v21 == v18)
        {
          v49.control = v18;
          *(_DWORD *)&v49.orderMethod = 1;
          v49.ignoreRowsAndColumns = v19;
          v49.order = (int *)v18;
          _SparseSolveOpaque_Double(&Factored, 0, (const DenseMatrix_Double *)&v49, a3);
          return;
        }
        if (!v49.reportError)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            sub_239EC3C58();
          goto LABEL_8;
        }
        goto LABEL_37;
      }
      if (!v49.reportError)
      {
        v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v28)
          sub_239EC3A7C(v28, v29, v30, v31, v32, v33, v34, v35);
        goto LABEL_8;
      }
      goto LABEL_32;
    }
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      goto LABEL_7;
    goto LABEL_8;
  }
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v44.userFactorStorage = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v44.solveWorkspaceRequiredStatic = v14;
  v45 = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v44.status = *(_OWORD *)a1;
  *(_OWORD *)&v44.symbolicFactorization.columnCount = v15;
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v44.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v44.symbolicFactorization.factorSize_Float = v16;
  if (v44.symbolicFactorization.status || !v44.symbolicFactorization.workspaceSize_Float)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
LABEL_7:
      sub_239EC3A48(v6, v7, v8, v9, v10, v11, v12, v13);
LABEL_8:
    _SparseTrap();
    return;
  }
  v22 = *(_DWORD *)a2;
  v23 = *(double **)(a2 + 8);
  _SparseGetOptionsFromSymbolicFactor(&v49, &v44.symbolicFactorization);
  reportError = v49.reportError;
  if (v44.symbolicFactorization.status
    || !v44.symbolicFactorization.workspaceSize_Float
    || v44.status
    || !v44.solveWorkspaceRequiredStatic)
  {
    if (!v49.reportError)
    {
      v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v36)
        sub_239EC3A7C(v36, v37, v38, v39, v40, v41, v42, v43);
      goto LABEL_8;
    }
LABEL_32:
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    memset(&v49, 0, sizeof(v49));
    snprintf((char *)&v49, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_38;
  }
  v24 = v44.symbolicFactorization.columnCount * LOBYTE(v44.symbolicFactorization.factorization);
  if (v44.symbolicFactorization.rowCount * LOBYTE(v44.symbolicFactorization.factorization) > v24)
    v24 = v44.symbolicFactorization.rowCount * LOBYTE(v44.symbolicFactorization.factorization);
  if (v24 != v22)
  {
    if (!v49.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_239EC3C58();
      goto LABEL_8;
    }
LABEL_37:
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    memset(&v49, 0, sizeof(v49));
    snprintf((char *)&v49, 0x100uLL, "%s.count (%d) is not equal to largest dimension of matrix factorization %s.\n");
    goto LABEL_38;
  }
  free = v49.free;
  Soln.rowCount = v22;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = v23;
  Soln.columnStride = v22;
  v26 = (void *)((uint64_t (*)(size_t))v49.malloc)(v45 + v44.solveWorkspaceRequiredPerRHS);
  if (v26)
  {
    v27 = v26;
    _SparseSolveOpaque_Double(&v44, 0, &Soln, v26);
    ((void (*)(void *))free)(v27);
    return;
  }
  if (!reportError)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239EC3AF0();
    goto LABEL_8;
  }
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  memset(&v49, 0, sizeof(v49));
  snprintf((char *)&v49, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
LABEL_38:
  ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v49);
}

void sub_239A245F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_239A24604(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_239A24648(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

void sub_239A24670(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_239A246DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void sub_239A24700(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

#error "239A24A10: call analysis failed (funcsize=201)"

#error "239A24D18: call analysis failed (funcsize=193)"

void sub_239A24D4C(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, double *a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17)
{
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float64x2_t v20;
  int8x16_t v21;
  float64x2_t v22;
  double *v23;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  int8x16_t *v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  double *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64_t *v47;
  _QWORD *f64;
  float64_t *v49;
  double *v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  _QWORD *v64;
  float64_t v65;
  float64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  _QWORD *v72;
  float64_t v73;
  _QWORD *v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v79;
  __n128 *v80;
  int8x16_t *v81;
  double *v82;
  double *v83;
  double v84;
  double *v85;
  double *v86;
  double *v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  char v110;

  v23 = a6;
  v27 = a17;
  v100 = *(uint64_t *)&a10.f64[0];
  a9.f64[1] = a10.f64[0];
  v28 = 0;
  if (a2 >= 2)
  {
    v29 = a2 - 1;
    v30 = 3 * a5;
    v31 = a1 - 3;
    v32 = 32 * a5;
    v33 = a5;
    v34 = 8 * a5;
    v35 = a6;
    v36 = 16 * a7;
    v98 = a17;
    v99 = a8;
    do
    {
      v37 = (__n128 *)(a8 + 8 * v28 * v27);
      v38 = v28 | 1;
      v39 = (int8x16_t *)(a8 + 8 * (v28 | 1) * v27);
      if (a1 <= 3)
      {
        v41 = 0;
        v43 = v38 * a7;
      }
      else
      {
        v40 = v36;
        v41 = 0;
        v42 = (float64x2_t *)&v23[v28 * a7];
        v43 = v38 * a7;
        v44 = v23;
        v45 = (float64x2_t *)&v23[v38 * a7];
        v46 = a4;
        do
        {
          v47 = &a4->f64[(unint64_t)v34 / 8];
          f64 = (_QWORD *)a4[v33].f64;
          v49 = &a4->f64[v30];
          v50 = (double *)v42;
          v51 = (double *)v45;
          v52 = a4;
          v53 = (float64x2_t)veorq_s8((int8x16_t)a15, (int8x16_t)a15);
          v54 = (float64x2_t)veorq_s8((int8x16_t)a16, (int8x16_t)a16);
          v55 = (float64x2_t)veorq_s8(v17, v17);
          v56 = (float64x2_t)veorq_s8(v18, v18);
          v57 = (float64x2_t)veorq_s8(v19, v19);
          v58 = (float64x2_t)veorq_s8((int8x16_t)v20, (int8x16_t)v20);
          v59 = (float64x2_t)veorq_s8(v21, v21);
          v60 = (float64x2_t)veorq_s8((int8x16_t)v22, (int8x16_t)v22);
          if (a3 >= 2)
          {
            v62.f64[0] = a4->f64[0];
            v52 = a4 + 1;
            v63.f64[0] = a4->f64[1];
            v62.f64[1] = *v47;
            v63.f64[1] = v47[1];
            v61 = v47 + 2;
            v65 = *(double *)f64;
            v64 = f64 + 1;
            v67.f64[0] = v65;
            v66 = *(double *)v64;
            f64 = v64 + 1;
            v68.f64[0] = v66;
            v67.f64[1] = *v49;
            v68.f64[1] = v49[1];
            v49 += 2;
            v50 = v42[1].f64;
            v69 = *v42;
            v51 = v45[1].f64;
            v70 = *v45;
            v71 = ((unint64_t)a3 >> 1) - 1;
            if ((unint64_t)a3 >> 1 > 1)
            {
              do
              {
                v53 = vmlaq_n_f64(v53, v62, v69.f64[0]);
                v54 = vmlaq_n_f64(v54, v67, v69.f64[0]);
                v55 = vmlaq_n_f64(v55, v62, v70.f64[0]);
                v73 = v52->f64[0];
                v72 = (_QWORD *)&v52->f64[1];
                v62.f64[0] = v73;
                v56 = vmlaq_n_f64(v56, v67, v70.f64[0]);
                v75 = *(double *)f64;
                v74 = f64 + 1;
                v67.f64[0] = v75;
                v57 = vmlaq_laneq_f64(v57, v63, v69, 1);
                v58 = vmlaq_laneq_f64(v58, v68, v69, 1);
                v76 = *(float64x2_t *)v50;
                v50 += 2;
                v69 = v76;
                v59 = vmlaq_laneq_f64(v59, v63, v70, 1);
                v76.f64[0] = *(float64_t *)v72;
                v52 = (float64x2_t *)(v72 + 1);
                v63.f64[0] = v76.f64[0];
                v60 = vmlaq_laneq_f64(v60, v68, v70, 1);
                v76.f64[0] = *(float64_t *)v74;
                f64 = v74 + 1;
                v68.f64[0] = v76.f64[0];
                v62.f64[1] = *v61;
                v63.f64[1] = v61[1];
                v61 += 2;
                v67.f64[1] = *v49;
                v68.f64[1] = v49[1];
                v49 += 2;
                v77 = *(float64x2_t *)v51;
                v51 += 2;
                v70 = v77;
              }
              while (v71-- > 1);
            }
            v53 = vaddq_f64(vmlaq_n_f64(v53, v62, v69.f64[0]), vmlaq_laneq_f64(v57, v63, v69, 1));
            v54 = vaddq_f64(vmlaq_n_f64(v54, v67, v69.f64[0]), vmlaq_laneq_f64(v58, v68, v69, 1));
            v55 = vaddq_f64(vmlaq_n_f64(v55, v62, v70.f64[0]), vmlaq_laneq_f64(v59, v63, v70, 1));
            v56 = vaddq_f64(vmlaq_n_f64(v56, v67, v70.f64[0]), vmlaq_laneq_f64(v60, v68, v70, 1));
          }
          if ((a3 & 1) != 0)
          {
            v79.f64[0] = *(float64_t *)f64;
            v79.f64[1] = *v49;
            v53 = vmlaq_n_f64(v53, *v52, *v50);
            v54 = vmlaq_n_f64(v54, v79, *v50);
            v55 = vmlaq_n_f64(v55, *v52, *v51);
            v56 = vmlaq_n_f64(v56, v79, *v51);
          }
          v19 = *(int8x16_t *)v37;
          v20 = (float64x2_t)v37[1];
          v21 = *v39;
          v22 = (float64x2_t)v39[1];
          a15 = vmlaq_laneq_f64(vmulq_n_f64(v53, a9.f64[0]), *(float64x2_t *)v37, a9, 1);
          a16 = vmlaq_laneq_f64(vmulq_n_f64(v54, a9.f64[0]), v20, a9, 1);
          v17 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v55, a9.f64[0]), *(float64x2_t *)v39, a9, 1);
          v18 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v56, a9.f64[0]), v22, a9, 1);
          *v37 = (__n128)a15;
          v80 = v37 + 1;
          *v80 = (__n128)a16;
          v37 = v80 + 1;
          *v39 = v17;
          v81 = v39 + 1;
          *v81 = v18;
          v39 = v81 + 1;
          v41 += 4;
          a4 = (float64x2_t *)((char *)a4 + v32);
        }
        while (v41 < v31);
        a4 = v46;
        v36 = v40;
        v23 = v44;
        v27 = a17;
        a8 = v99;
      }
      if (v41 < a1)
      {
        v82 = &v23[v43];
        v83 = (double *)((char *)a4->f64 + v34 * v41);
        do
        {
          if (a3 < 1)
          {
            v89 = 0.0;
            v84 = 0.0;
          }
          else
          {
            v84 = 0.0;
            v85 = v35;
            v86 = v83;
            v87 = v82;
            v88 = a3;
            v89 = 0.0;
            do
            {
              v90 = *v85++;
              v91 = v90;
              v92 = *v86++;
              v93 = v92;
              v89 = v89 + v91 * v92;
              v94 = *v87++;
              v84 = v84 + v94 * v93;
              --v88;
            }
            while (v88);
          }
          a14.f64[0] = a9.f64[0];
          v37->n128_f64[0] = v89 * a9.f64[0] + v37->n128_f64[0] * *(double *)&v100;
          v37 = (__n128 *)((char *)v37 + 8);
          *(_QWORD *)&a11.f64[0] = v39->i64[0];
          *(_QWORD *)&a12.f64[0] = v100;
          a13.f64[0] = a9.f64[0];
          *(double *)v39->i64 = v84 * a9.f64[0] + *(double *)v39->i64 * *(double *)&v100;
          v39 = (int8x16_t *)((char *)v39 + 8);
          ++v41;
          v83 = (double *)((char *)v83 + v34);
        }
        while (v41 != a1);
      }
      v28 += 2;
      v35 = (double *)((char *)v35 + v36);
    }
    while (v28 < v29);
  }
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&a10.f64[0] = v100;
    LODWORD(v95) = 1;
    sub_239A2D034(101, 111, a1, a3, (uint64_t)a4, a5, (uint64_t)&v23[v28 * a7], 1, a9, a10, a11, a12, a13, a14, a15, a16, (double *)(a8 + 8 * v28 * v27), v95, a5,
      a2,
      v98,
      v99,
      v100,
      *(uint64_t *)&a9.f64[0],
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110);
  }
}

void sub_239A250A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17)
{
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  double *v28;
  double *f64;
  double *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  __n128 *v58;
  int8x16_t *v59;
  double *v60;
  double v61;
  double *v62;
  uint64_t v63;
  double *v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  char vars0;

  v68 = *(uint64_t *)&a10.f64[0];
  a9.f64[1] = a10.f64[0];
  if (a2 < 2)
  {
    v20 = 0;
    if ((a2 & 1) == 0)
      return;
    goto LABEL_25;
  }
  v20 = 0;
  v21 = (double *)(a6 + 8);
  v22 = 8 * a5;
  do
  {
    v23 = (float64x2_t *)(a8 + 8 * v20 * a17);
    v24 = (float64x2_t *)(a8 + 8 * (v20 | 1) * a17);
    if (a1 < 4)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v26 = (float64x2_t *)(a6 + 8 * v20);
      v27 = (float64x2_t *)a4;
      do
      {
        v28 = &v27->f64[(unint64_t)v22 / 8];
        f64 = v27[a5].f64;
        v30 = &v27->f64[3 * a5];
        v31 = (double *)v27;
        v32 = (float64x2_t *)(a6 + 8 * v20);
        v33 = (float64x2_t)veorq_s8((int8x16_t)a15, (int8x16_t)a15);
        v34 = (float64x2_t)veorq_s8((int8x16_t)a16, (int8x16_t)a16);
        v35 = (float64x2_t)veorq_s8(v17, v17);
        v36 = (float64x2_t)veorq_s8(v18, v18);
        if (a3 >= 2)
        {
          v37 = *v26;
          v38 = *(float64x2_t *)((char *)v26 + 8 * a7);
          v31 = v27[1].f64;
          v39 = *v27;
          v40 = *(float64x2_t *)v28;
          v28 += 2;
          v41 = v40;
          v42 = *(float64x2_t *)f64;
          f64 += 2;
          v43 = v42;
          v44 = *(float64x2_t *)v30;
          v30 += 2;
          v45 = v44;
          v46 = ((unint64_t)a3 >> 1) - 1;
          if ((unint64_t)a3 >> 1 > 1)
          {
            do
            {
              v32 += a7;
              v47 = vmlaq_n_f64(v33, v37, v39.f64[0]);
              v48 = vmlaq_n_f64(v34, v37, v41.f64[0]);
              v49 = vmlaq_n_f64(v35, v37, v43.f64[0]);
              v50 = vmlaq_n_f64(v36, v37, v45.f64[0]);
              v37 = *v32;
              v33 = vmlaq_laneq_f64(v47, v38, v39, 1);
              v51 = *(float64x2_t *)v31;
              v31 += 2;
              v39 = v51;
              v34 = vmlaq_laneq_f64(v48, v38, v41, 1);
              v52 = *(float64x2_t *)v28;
              v28 += 2;
              v41 = v52;
              v35 = vmlaq_laneq_f64(v49, v38, v43, 1);
              v53 = *(float64x2_t *)f64;
              f64 += 2;
              v43 = v53;
              v36 = vmlaq_laneq_f64(v50, v38, v45, 1);
              v54 = *(float64x2_t *)v30;
              v30 += 2;
              v45 = v54;
              v38 = *(float64x2_t *)((char *)v32 + 8 * a7);
            }
            while (v46-- > 1);
          }
          v32 += a7;
          v33 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v37, v39.f64[0]), v38, v39, 1);
          v34 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v37, v41.f64[0]), v38, v41, 1);
          v35 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v37, v43.f64[0]), v38, v43, 1);
          v36 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v37, v45.f64[0]), v38, v45, 1);
        }
        if ((a3 & 1) != 0)
        {
          v33 = vmlaq_n_f64(v33, *v32, *v31);
          v34 = vmlaq_n_f64(v34, *v32, *v28);
          v35 = vmlaq_n_f64(v35, *v32, *f64);
          v36 = vmlaq_n_f64(v36, *v32, *v30);
        }
        v56 = (float64x2_t)vtrn2q_s64((int64x2_t)v33, (int64x2_t)v34);
        v57 = (float64x2_t)vtrn2q_s64((int64x2_t)v35, (int64x2_t)v36);
        a15 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vtrn1q_s64((int64x2_t)v33, (int64x2_t)v34), a9.f64[0]), *v23, a9, 1);
        a16 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vtrn1q_s64((int64x2_t)v35, (int64x2_t)v36), a9.f64[0]), v23[1], a9, 1);
        v17 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v56, a9.f64[0]), *v24, a9, 1);
        v18 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v57, a9.f64[0]), v24[1], a9, 1);
        *v23 = a15;
        v58 = (__n128 *)&v23[1];
        *v58 = (__n128)a16;
        v23 = (float64x2_t *)&v58[1];
        *v24 = (float64x2_t)v17;
        v59 = (int8x16_t *)&v24[1];
        *v59 = v18;
        v24 = (float64x2_t *)&v59[1];
        v25 += 4;
        v27 += 2 * a5;
      }
      while (v25 < a1 - 3);
    }
    if (v25 < a1)
    {
      v60 = (double *)(a4 + v22 * v25);
      do
      {
        if (a3 < 1)
        {
          v65 = 0.0;
          v61 = 0.0;
        }
        else
        {
          v61 = 0.0;
          v62 = v60;
          v63 = a3;
          v64 = v21;
          v65 = 0.0;
          do
          {
            v66 = *v62++;
            v65 = v65 + *(v64 - 1) * v66;
            v61 = v61 + *v64 * v66;
            v64 += a7;
            --v63;
          }
          while (v63);
        }
        a14.f64[0] = a9.f64[0];
        v23->f64[0] = v65 * a9.f64[0] + v23->f64[0] * *(double *)&v68;
        v23 = (float64x2_t *)((char *)v23 + 8);
        a11.f64[0] = v24->f64[0];
        *(_QWORD *)&a12.f64[0] = v68;
        a13.f64[0] = a9.f64[0];
        v24->f64[0] = v61 * a9.f64[0] + v24->f64[0] * *(double *)&v68;
        v24 = (float64x2_t *)((char *)v24 + 8);
        ++v25;
        v60 = (double *)((char *)v60 + v22);
      }
      while (v25 != a1);
    }
    v20 += 2;
    v21 += 2;
  }
  while (v20 < a2 - 1);
  if ((a2 & 1) != 0)
  {
LABEL_25:
    *(_QWORD *)&a10.f64[0] = v68;
    LODWORD(v67) = 1;
    sub_239A2D034(101, 111, a1, a3, a4, a5, a6 + 8 * v20, a7, a9, a10, a11, a12, a13, a14, a15, a16, (double *)(a8 + 8 * v20 * a17), v67, v68,
      *(uint64_t *)&a9.f64[0],
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      vars0);
  }
}

#error "239A254B0: call analysis failed (funcsize=190)"

void sub_239A256A4(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, double *__X, uint64_t a6, double a7, float64x2_t a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  double *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  uint64_t v84;
  float64x2_t *v85;
  double *v86;
  uint64_t v87;
  float64_t *v88;
  float64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  double *v92;
  float64x2_t v93;
  float64_t v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double *v99;
  float64x2_t v100;
  float64_t *v101;
  float64_t v102;
  double *v103;
  float64x2_t v104;
  float64_t v105;
  double *v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  double *v113;
  double *v114;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v23 = 2;
      }
      else
      {
        a8.f64[0] = *(float64_t *)(a3 + 8);
        v23 = 2;
        v28 = __X;
        v29 = __N;
        do
        {
          v30 = *v28 * a7;
          *v28 = v30;
          v28[a6] = v28[a6] * a7 - v30 * a8.f64[0];
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v23 = 1;
      cblas_dscal(__N, a7, __X, 1);
    }
    else
    {
      v23 = 0;
    }
  }
  else if (__N < 1)
  {
    v23 = 3;
  }
  else
  {
    a8.f64[0] = *(float64_t *)(a3 + 8);
    v21 = *(double *)(a3 + 16);
    v22 = *(double *)(a3 + 8 * a4 + 16);
    v23 = 3;
    v24 = __X;
    v25 = __N;
    do
    {
      v26 = *v24 * a7;
      *v24 = v26;
      v27 = v24[a6] * a7 - v26 * a8.f64[0];
      v24[a6] = v27;
      v24[2 * a6] = -(v22 * v27 + *v24 * v21 - v24[2 * a6] * a7);
      ++v24;
      --v25;
    }
    while (v25);
  }
  if (v23 < a2)
  {
    v31 = a6;
    v32 = 8 * a4;
    do
    {
      if (__N < 4)
      {
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v35 = __X;
        do
        {
          v36 = v23;
          v37 = (float64x2_t *)v35;
          v34 = (float64x2_t *)(a3 + 8 * v23);
          v38 = v34;
          v39 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v40 = v39;
          v41 = v39;
          v42 = v39;
          v43 = v39;
          v44 = v39;
          v45 = v39;
          v46 = v39;
          if ((v23 & 1) != 0)
          {
            v47 = *(float64x2_t *)(v35 + 2);
            v37 = (float64x2_t *)&v35[v31];
            v48 = v34[1];
            v38 = (float64x2_t *)((char *)v34 + v32);
            v39 = vmlaq_n_f64(v39, *(float64x2_t *)v35, v34->f64[0]);
            v41 = vmlaq_laneq_f64(v41, *(float64x2_t *)v35, *v34, 1);
            v43 = vmlaq_n_f64(v43, *(float64x2_t *)v35, v48.f64[0]);
            v45 = vmlaq_laneq_f64(v45, *(float64x2_t *)v35, v48, 1);
            v40 = vmlaq_n_f64(v40, v47, v34->f64[0]);
            v42 = vmlaq_laneq_f64(v42, v47, *v34, 1);
            v44 = vmlaq_n_f64(v44, v47, v48.f64[0]);
            v46 = vmlaq_laneq_f64(v46, v47, v48, 1);
            v36 = v23 - 1;
          }
          for (; v36; v36 -= 2)
          {
            v50 = *v37;
            v51 = v37[1];
            v49 = (float64x2_t *)((char *)v37 + v31 * 8);
            v52 = *v49;
            v53 = v49[1];
            v37 = (float64x2_t *)((char *)v49 + v31 * 8);
            v55 = *v38;
            v56 = v38[1];
            v54 = (float64x2_t *)((char *)v38 + v32);
            v57 = *v54;
            v58 = v54[1];
            v38 = (float64x2_t *)((char *)v54 + v32);
            v39 = vmlaq_n_f64(vmlaq_n_f64(v39, v50, v55.f64[0]), v52, v57.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v50, v55, 1), v52, v57, 1);
            v43 = vmlaq_n_f64(vmlaq_n_f64(v43, v50, v56.f64[0]), v52, v58.f64[0]);
            v45 = vmlaq_laneq_f64(vmlaq_laneq_f64(v45, v50, v56, 1), v52, v58, 1);
            v40 = vmlaq_n_f64(vmlaq_n_f64(v40, v51, v55.f64[0]), v53, v57.f64[0]);
            v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v51, v55, 1), v53, v57, 1);
            v44 = vmlaq_n_f64(vmlaq_n_f64(v44, v51, v56.f64[0]), v53, v58.f64[0]);
            v46 = vmlaq_laneq_f64(vmlaq_laneq_f64(v46, v51, v56, 1), v53, v58, 1);
          }
          v60 = *v37;
          v61 = v37[1];
          v59 = (float64x2_t *)((char *)v37 + v31 * 8);
          v63 = *v59;
          v64 = v59[1];
          v62 = (float64x2_t *)((char *)v59 + v31 * 8);
          v66 = *v62;
          v67 = v62[1];
          v65 = (float64x2_t *)((char *)v62 + v31 * 8);
          v68 = *v65;
          v69 = v65[1];
          v70 = (float64x2_t *)((char *)v65 + 8 * a6 + -32 * a6);
          v14 = vsubq_f64(vmulq_n_f64(v60, a7), v39);
          v71 = vsubq_f64(vmulq_n_f64(v61, a7), v40);
          v72 = *v38;
          v73 = v38[1];
          v74 = (float64x2_t *)((char *)v38 + v32 + 16);
          v75 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v63, a7), v41), v14, v72, 1);
          v76 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v64, a7), v42), v71, v72, 1);
          a8 = *v74;
          v77 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v66, a7), v43), v14, v73.f64[0], 0), v75, v74->f64[0], 0);
          v78 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v67, a7), v44), v71, v73.f64[0], 0), v76, v74->f64[0], 0);
          a8.f64[0] = v74->f64[(unint64_t)v32 / 8 + 1];
          v79 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v68, a7), v45), v14, v73, 1), v75, *v74, 1), v77, a8.f64[0], 0);
          v80 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v69, a7), v46), v71, v73, 1), v76, *v74, 1), v78, a8.f64[0], 0);
          *v70 = v14;
          v70[1] = v71;
          v81 = (float64x2_t *)((char *)v70 + v31 * 8);
          *v81 = v75;
          v81[1] = v76;
          v82 = (float64x2_t *)((char *)v81 + v31 * 8);
          *v82 = v77;
          v82[1] = v78;
          v83 = (float64x2_t *)((char *)v82 + v31 * 8);
          *v83 = v79;
          v83[1] = v80;
          v33 += 4;
          v35 += 4;
        }
        while (v33 < __N - 3);
      }
      v84 = __N - v33;
      if (__N > v33)
      {
        v86 = &__X[v33];
        do
        {
          v87 = v23;
          v88 = v86;
          v85 = (float64x2_t *)(a3 + 8 * v23);
          v89 = v85;
          v90 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v91 = v90;
          if ((v23 & 1) != 0)
          {
            v88 = &v86[v31];
            v89 = (float64x2_t *)((char *)v85 + v32);
            v90 = vmlaq_n_f64(v90, *v85, *v86);
            v91 = vmlaq_n_f64(v91, v85[1], *v86);
            v87 = v23 - 1;
          }
          for (; v87; v87 -= 2)
          {
            v93.f64[0] = *v88;
            v92 = &v88[v31];
            v94 = *v92;
            v88 = &v92[v31];
            v96 = *v89;
            v97 = v89[1];
            v95 = (float64x2_t *)((char *)v89 + v32);
            v93.f64[1] = v94;
            v98 = *v95;
            a14 = v95[1];
            v89 = (float64x2_t *)((char *)v95 + v32);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v96, v93.f64[0]), v98, v93, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v97, v93.f64[0]), a14, v93, 1);
          }
          v100.f64[0] = *v88;
          v99 = &v88[v31];
          v102 = *v99;
          v101 = &v99[v31];
          v104.f64[0] = *v101;
          v103 = &v101[v31];
          v105 = *v103;
          v106 = &v103[a6 + -4 * a6];
          v100.f64[1] = v102;
          v104.f64[1] = v105;
          v107 = vsubq_f64(vmulq_n_f64(v100, a7), v90);
          v108 = v107.f64[0];
          v109 = *v89;
          v110 = v89[1];
          v111 = (float64x2_t *)((char *)v89 + v32 + 16);
          a8 = vmlsq_lane_f64(v107, v109, v107.f64[0], 0);
          v14 = *v111;
          v112 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v104, a7), v91), v110, v108, 0), *v111, a8, 1);
          a14.f64[1] = v111->f64[(unint64_t)v32 / 8 + 1];
          *v106 = v108;
          v113 = &v106[v31];
          *v113 = a8.f64[1];
          v114 = &v113[v31];
          *v114 = v112.f64[0];
          v114[a6] = vmlsq_lane_f64(v112, a14, *(double *)&v112, 0).f64[1];
          ++v86;
          --v84;
        }
        while (v84);
      }
      v23 += 4;
    }
    while (v23 < a2);
  }
}

void sub_239A25A78(uint64_t __N, uint64_t a2, double *a3, uint64_t a4, double *__X, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  const double *v44;
  const double *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t *v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t *v104;
  float64x2_t *v105;
  uint64_t v106;
  float64x2_t *v107;
  double *v108;
  uint64_t v109;
  float64_t *v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v114;
  float64x2_t v115;
  float64_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double *v121;
  float64x2_t v122;
  float64_t *v123;
  float64_t v124;
  double *v125;
  float64x2_t v126;
  float64_t v127;
  float64_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t *v133;
  float64x2_t v134;
  float64_t *v135;
  double *v136;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v27 = 2;
      }
      else
      {
        v33 = a3[1];
        v34 = a7 / *a3;
        v27 = 2;
        v35 = __X;
        v36 = __N;
        v37 = 1.0 / a3[a4 + 1];
        do
        {
          v38 = v34 * *v35;
          *v35 = v38;
          v35[a6] = v37 * (v35[a6] * a7 - v38 * v33);
          ++v35;
          --v36;
        }
        while (v36);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v27 = 1;
      cblas_dscal(__N, a7 / *a3, __X, 1);
    }
    else
    {
      v27 = 0;
    }
  }
  else if (__N < 1)
  {
    v27 = 3;
  }
  else
  {
    v22 = a3[1];
    v21 = a3[2];
    v23 = &a3[a4];
    v24 = a7 / *a3;
    v25 = v23[2];
    v26 = 1.0 / v23[1];
    v27 = 3;
    v28 = __X;
    v29 = __N;
    v30 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v31 = v24 * *v28;
      *v28 = v31;
      v32 = v26 * (v28[a6] * a7 - v31 * v22);
      v28[a6] = v32;
      v14.f64[0] = v28[2 * a6];
      a14.f64[0] = v30 * -(v25 * v32 + *v28 * v21 - v14.f64[0] * a7);
      v28[2 * a6] = a14.f64[0];
      ++v28;
      --v29;
    }
    while (v29);
  }
  if (v27 < a2)
  {
    v39 = a4 + 1;
    v40 = a6;
    v41 = 8 * a4;
    do
    {
      v42 = &a3[v27 * a4 + v27];
      v43 = &a3[v39 + v39 * v27];
      v44 = &a3[(v27 + 2) * v39];
      v45 = &a3[(v27 + 3) * v39];
      v46 = vld1q_dup_f64(v42);
      v47 = vld1q_dup_f64(v43);
      v48 = vld1q_dup_f64(v44);
      v49 = vld1q_dup_f64(v45);
      v50 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v51 = vdivq_f64(v50, v46);
      v52 = vdivq_f64(v50, v47);
      v53 = vdivq_f64(v50, v48);
      v54 = vdivq_f64(v50, v49);
      if (__N < 4)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v57 = __X;
        do
        {
          v58 = v27;
          v59 = (float64x2_t *)v57;
          v56 = &a3[v27];
          v60 = (float64x2_t *)v56;
          v61 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v62 = v61;
          v63 = v61;
          v64 = v61;
          v65 = v61;
          v66 = v61;
          v67 = v61;
          v68 = v61;
          if ((v27 & 1) != 0)
          {
            v69 = *(float64x2_t *)(v57 + 2);
            v59 = (float64x2_t *)&v57[v40];
            v70 = *(float64x2_t *)(v56 + 2);
            v60 = (float64x2_t *)&v56[(unint64_t)v41 / 8];
            v61 = vmlaq_n_f64(v61, *(float64x2_t *)v57, *v56);
            v63 = vmlaq_laneq_f64(v63, *(float64x2_t *)v57, *(float64x2_t *)v56, 1);
            v65 = vmlaq_n_f64(v65, *(float64x2_t *)v57, v70.f64[0]);
            v67 = vmlaq_laneq_f64(v67, *(float64x2_t *)v57, v70, 1);
            v62 = vmlaq_n_f64(v62, v69, *v56);
            v64 = vmlaq_laneq_f64(v64, v69, *(float64x2_t *)v56, 1);
            v66 = vmlaq_n_f64(v66, v69, v70.f64[0]);
            v68 = vmlaq_laneq_f64(v68, v69, v70, 1);
            v58 = v27 - 1;
          }
          for (; v58; v58 -= 2)
          {
            v72 = *v59;
            v73 = v59[1];
            v71 = (float64x2_t *)((char *)v59 + v40 * 8);
            v74 = *v71;
            v75 = v71[1];
            v59 = (float64x2_t *)((char *)v71 + v40 * 8);
            v77 = *v60;
            v78 = v60[1];
            v76 = (float64x2_t *)((char *)v60 + v41);
            v79 = *v76;
            v80 = v76[1];
            v60 = (float64x2_t *)((char *)v76 + v41);
            v61 = vmlaq_n_f64(vmlaq_n_f64(v61, v72, v77.f64[0]), v74, v79.f64[0]);
            v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(v63, v72, v77, 1), v74, v79, 1);
            v65 = vmlaq_n_f64(vmlaq_n_f64(v65, v72, v78.f64[0]), v74, v80.f64[0]);
            v67 = vmlaq_laneq_f64(vmlaq_laneq_f64(v67, v72, v78, 1), v74, v80, 1);
            v62 = vmlaq_n_f64(vmlaq_n_f64(v62, v73, v77.f64[0]), v75, v79.f64[0]);
            v64 = vmlaq_laneq_f64(vmlaq_laneq_f64(v64, v73, v77, 1), v75, v79, 1);
            v66 = vmlaq_n_f64(vmlaq_n_f64(v66, v73, v78.f64[0]), v75, v80.f64[0]);
            v68 = vmlaq_laneq_f64(vmlaq_laneq_f64(v68, v73, v78, 1), v75, v80, 1);
          }
          v82 = *v59;
          v83 = v59[1];
          v81 = (float64x2_t *)((char *)v59 + v40 * 8);
          v85 = *v81;
          v86 = v81[1];
          v84 = (float64x2_t *)((char *)v81 + v40 * 8);
          v88 = *v84;
          v89 = v84[1];
          v87 = (float64x2_t *)((char *)v84 + v40 * 8);
          v90 = *v87;
          v91 = v87[1];
          v92 = (float64x2_t *)((char *)v87 + 8 * a6 + -32 * a6);
          v14 = vmulq_f64(vsubq_f64(vmulq_n_f64(v82, a7), v61), v51);
          v93 = vmulq_f64(vsubq_f64(vmulq_n_f64(v83, a7), v62), v51);
          v94 = *v60;
          v95 = v60[1];
          v96 = (float64x2_t *)((char *)v60 + v41 + 16);
          v97 = vmulq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v85, a7), v63), v14, v94, 1), v52);
          v98 = vmulq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v86, a7), v64), v93, v94, 1), v52);
          v46 = *v96;
          v99 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v88, a7), v65), v14, v95.f64[0], 0), v97, v96->f64[0], 0), v53);
          v100 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v89, a7), v66), v93, v95.f64[0], 0), v98, v96->f64[0], 0), v53);
          v46.f64[0] = v96->f64[(unint64_t)v41 / 8 + 1];
          v101 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v90, a7), v67), v14, v95, 1), v97, *v96, 1), v99, v46.f64[0], 0), v54);
          v102 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v91, a7), v68), v93, v95, 1), v98, *v96, 1), v100, v46.f64[0], 0), v54);
          *v92 = v14;
          v92[1] = v93;
          v103 = (float64x2_t *)((char *)v92 + v40 * 8);
          *v103 = v97;
          v103[1] = v98;
          v104 = (float64x2_t *)((char *)v103 + v40 * 8);
          *v104 = v99;
          v104[1] = v100;
          v105 = (float64x2_t *)((char *)v104 + v40 * 8);
          *v105 = v101;
          v105[1] = v102;
          v55 += 4;
          v57 += 4;
        }
        while (v55 < __N - 3);
      }
      v106 = __N - v55;
      if (__N > v55)
      {
        v108 = &__X[v55];
        do
        {
          v109 = v27;
          v110 = v108;
          v107 = (float64x2_t *)&a3[v27];
          v111 = v107;
          v112 = (float64x2_t)veorq_s8((int8x16_t)v46, (int8x16_t)v46);
          v113 = v112;
          if ((v27 & 1) != 0)
          {
            v110 = &v108[v40];
            v111 = (float64x2_t *)((char *)v107 + v41);
            v112 = vmlaq_n_f64(v112, *v107, *v108);
            v113 = vmlaq_n_f64(v113, v107[1], *v108);
            v109 = v27 - 1;
          }
          for (; v109; v109 -= 2)
          {
            v115.f64[0] = *v110;
            v114 = &v110[v40];
            v116 = *v114;
            v110 = &v114[v40];
            v118 = *v111;
            v119 = v111[1];
            v117 = (float64x2_t *)((char *)v111 + v41);
            v115.f64[1] = v116;
            v120 = *v117;
            a14 = v117[1];
            v111 = (float64x2_t *)((char *)v117 + v41);
            v112 = vmlaq_laneq_f64(vmlaq_n_f64(v112, v118, v115.f64[0]), v120, v115, 1);
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v119, v115.f64[0]), a14, v115, 1);
          }
          v122.f64[0] = *v110;
          v121 = &v110[v40];
          v124 = *v121;
          v123 = &v121[v40];
          v126.f64[0] = *v123;
          v125 = &v123[v40];
          v127 = *v125;
          v128 = &v125[a6 + -4 * a6];
          v122.f64[1] = v124;
          v126.f64[1] = v127;
          v129 = vsubq_f64(vmulq_n_f64(v122, a7), v112);
          v130.f64[0] = v129.f64[0] * v51.f64[0];
          v131 = *v111;
          v132 = v111[1];
          v133 = (float64x2_t *)((char *)v111 + v41 + 16);
          v46 = vmulq_f64(vmlsq_lane_f64(v129, v131, v129.f64[0] * v51.f64[0], 0), v52);
          v130.f64[1] = v46.f64[1];
          v14 = *v133;
          v134 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v126, a7), v113), v132, v130.f64[0], 0), *v133, v130, 1);
          a14.f64[1] = v133->f64[(unint64_t)v41 / 8 + 1];
          *v128 = v130.f64[0];
          v135 = &v128[v40];
          *v135 = v46.f64[1];
          v136 = &v135[v40];
          *v136 = v134.f64[0] * v53.f64[0];
          v136[a6] = vmulq_f64(vmlsq_lane_f64(v134, a14, *(double *)&v134 * *(double *)&v53, 0), v54).f64[1];
          ++v108;
          --v106;
        }
        while (v106);
      }
      v27 += 4;
    }
    while (v27 < a2);
  }
}

void sub_239A25F14(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, int64x2_t a14)
{
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  float64x2_t *v101;
  float64x2_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  double *f64;
  float64_t *v112;
  uint64_t v113;
  __n128 *v114;
  int64x2_t *v115;
  int64x2_t *v116;
  int64x2_t *v117;
  uint64_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double *v121;
  float64x2_t v122;
  float64_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t *v127;
  float64_t *v128;
  double *v129;
  float64x2_t v130;
  float64_t *v131;
  float64_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  double *v136;
  float64x2_t v137;
  float64x2_t v138;
  double *v139;
  double *v140;
  BOOL v141;

  v22 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        a8.i64[0] = *(_QWORD *)(a3 + 8 * (v22 + (a2 - 2) * a4));
        v33 = (double *)(a5 + 8 * v22 * a6);
        v34 = (double *)(a5 + a6 * (8 * a2 - 16));
        v35 = __N;
        do
        {
          v36 = *v33 * a7;
          *v33++ = v36;
          *v34 = *v34 * a7 - v36 * *(double *)a8.i64;
          ++v34;
          --v35;
        }
        while (v35);
      }
      v22 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v22 * a6), 1);
      v22 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      a8.i64[0] = *(_QWORD *)(a3 + 8 * (v22 + (a2 - 2) * a4));
      v23 = (double *)(a3 + 8 * (v22 + (a2 - 3) * a4));
      v25 = *(v23 - 1);
      v24 = *v23;
      v26 = (double *)(a5 + 8 * v22 * a6);
      v27 = (double *)(a5 + a6 * (8 * a2 - 16));
      v28 = (double *)(a5 + a6 * (8 * a2 - 24));
      v29 = __N;
      do
      {
        v30 = *v26 * a7;
        *v26 = v30;
        v31 = *v27 * a7 - v30 * *(double *)a8.i64;
        *v27++ = v31;
        v32 = *v26++;
        *v28 = -(v25 * v31 + v32 * v24 - *v28 * a7);
        ++v28;
        --v29;
      }
      while (v29);
    }
    v22 = a2 - 4;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    v37 = v22 + 1;
    v38 = 8 * a6;
    v39 = (float64x2_t *)(a5 + 8 * a6 * (v22 + 1));
    v40 = -32 * a6;
    do
    {
      v41 = v37 - 4;
      if (__N < 4)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = a3 + 8 * v37;
        v44 = (double *)(v43 + 8 * v41 * a4);
        v45 = (double *)(v43 + 8 * (v37 - 3) * a4);
        v46 = (double *)(v43 + 8 * (v37 - 2) * a4);
        v47 = (double *)(v43 + 8 * (v37 - 1) * a4);
        v48 = a2 - v41;
        if (a2 - v41 <= 4)
          v48 = 4;
        v49 = v48 - 4;
        v50 = v39;
        do
        {
          v51 = (float64x2_t *)v45;
          v52 = (float64x2_t *)v47;
          v53 = (float64x2_t *)v44;
          v54 = (float64x2_t *)v46;
          v55 = v50;
          v56 = v49;
          v57 = v49 + 1;
          v58 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v59 = v58;
          v60 = v58;
          v61 = v58;
          v62 = v58;
          v63 = v58;
          v64 = v58;
          v65 = v58;
          if ((v49 & 1) != 0)
          {
            v66 = v50[1];
            v55 = (float64x2_t *)((char *)v50 + v38);
            v53 = (float64x2_t *)(v44 + 1);
            v51 = (float64x2_t *)(v45 + 1);
            v54 = (float64x2_t *)(v46 + 1);
            v52 = (float64x2_t *)(v47 + 1);
            v58 = vmlaq_n_f64(v58, *v50, *v44);
            v60 = vmlaq_n_f64(v60, *v50, *v45);
            v62 = vmlaq_n_f64(v62, *v50, *v46);
            v64 = vmlaq_n_f64(v64, *v50, *v47);
            v59 = vmlaq_n_f64(v59, v66, *v44);
            v61 = vmlaq_n_f64(v61, v66, *v45);
            v63 = vmlaq_n_f64(v63, v66, *v46);
            v65 = vmlaq_n_f64(v65, v66, *v47);
            v56 = v49 - 1;
          }
          for (; v56; v56 -= 2)
          {
            v68 = *v55;
            v69 = v55[1];
            v67 = (float64x2_t *)((char *)v55 + v38);
            v70 = *v67;
            v71 = v67[1];
            v55 = (float64x2_t *)((char *)v67 + v38);
            v72 = *v53++;
            v73 = *v51++;
            v74 = *v54++;
            v75 = *v52++;
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v68, v72.f64[0]), v70, v72, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v68, v73.f64[0]), v70, v73, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v68, v74.f64[0]), v70, v74, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v68, v75.f64[0]), v70, v75, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v69, v72.f64[0]), v71, v72, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v69, v73.f64[0]), v71, v73, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v69, v74.f64[0]), v71, v74, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v69, v75.f64[0]), v71, v75, 1);
          }
          v76 = (float64x2_t *)((char *)v53 - 8 * v57 - 8);
          v77 = (float64x2_t *)((char *)v55 - v38 * (v49 + 4));
          v79 = *v77;
          v80 = v77[1];
          v78 = (float64x2_t *)((char *)v77 + v38);
          v82 = *v78;
          v83 = v78[1];
          v81 = (float64x2_t *)((char *)v78 + v38);
          v85 = *v81;
          v86 = v81[1];
          v84 = (float64x2_t *)((char *)v81 + v38);
          v87 = *v84;
          v88 = v84[1];
          v89 = (int64x2_t *)((char *)v84 + v38 + -4 * v38);
          a11 = vmulq_n_f64(v83, a7);
          a12 = vmulq_n_f64(v85, a7);
          a13 = vmulq_n_f64(v86, a7);
          v90 = vsubq_f64(vmulq_n_f64(v79, a7), v58);
          v91 = vsubq_f64(vmulq_n_f64(v80, a7), v59);
          v92 = vsubq_f64(vmulq_n_f64(v82, a7), v60);
          v93 = vsubq_f64(vmulq_n_f64(v87, a7), v64);
          v94 = vsubq_f64(vmulq_n_f64(v88, a7), v65);
          a8 = *(int8x16_t *)v76;
          v95 = *(float64x2_t *)((char *)v51 - 8 * v57 - 8);
          v82.f64[0] = v54->f64[-v57];
          v96 = vmlsq_lane_f64(vsubq_f64(a12, v62), v93, v82.f64[0], 0);
          v97 = vmlsq_lane_f64(vsubq_f64(a13, v63), v94, v82.f64[0], 0);
          v98 = vmlsq_lane_f64(vmlsq_laneq_f64(v92, v93, v95, 1), v96, v95.f64[0], 0);
          v99 = vmlsq_lane_f64(vmlsq_laneq_f64(vsubq_f64(a11, v61), v94, v95, 1), v97, v95.f64[0], 0);
          a8.i64[0] = *(_QWORD *)&v76[-1].f64[1];
          v14 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v90, v93, *v76, 1), v96, v76->f64[0], 0), v98, *(double *)a8.i64, 0);
          v15 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v91, v94, *v76, 1), v97, v76->f64[0], 0), v99, *(double *)a8.i64, 0);
          *v89 = v14;
          v89[1] = (int64x2_t)v15;
          v100 = (float64x2_t *)&v89->i8[v38];
          *v100 = v98;
          v100[1] = v99;
          v101 = (float64x2_t *)((char *)v100 + v38);
          *v101 = v96;
          v101[1] = v97;
          v102 = (float64x2_t *)((char *)v101 + v38);
          *v102 = v93;
          v102[1] = v94;
          v42 += 4;
          v50 += 2;
        }
        while (v42 < __N - 3);
      }
      v103 = __N - v42;
      if (__N > v42)
      {
        v104 = a3 + 8 * v37;
        v105 = (unint64_t *)(v104 + 8 * v41 * a4);
        v106 = (unint64_t *)(v104 + 8 * (v37 - 3) * a4);
        v107 = (unint64_t *)(v104 + 8 * (v37 - 2) * a4);
        v108 = (unint64_t *)(v104 + 8 * (v37 - 1) * a4);
        v109 = a2 - v41;
        if (a2 - v41 <= 4)
          v109 = 4;
        v110 = v109 - 4;
        f64 = v39[(unint64_t)v42 / 2].f64;
        do
        {
          v112 = f64;
          v113 = v110;
          v114 = (__n128 *)v106;
          v115 = (int64x2_t *)v108;
          v116 = (int64x2_t *)v105;
          v117 = (int64x2_t *)v107;
          v118 = v110 + 1;
          v119 = (float64x2_t)veorq_s8(a8, a8);
          v120 = v119;
          if ((v110 & 1) != 0)
          {
            v112 = &f64[(unint64_t)v38 / 8];
            *(_QWORD *)&a11.f64[0] = *v105;
            v116 = (int64x2_t *)(v105 + 1);
            *(_QWORD *)&a12.f64[0] = *v106;
            v114 = (__n128 *)(v106 + 1);
            *(_QWORD *)&a13.f64[0] = *v107;
            v117 = (int64x2_t *)(v107 + 1);
            a14.i64[0] = *v108;
            v115 = (int64x2_t *)(v108 + 1);
            v119 = vmlaq_n_f64(v119, (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)a12), *f64);
            v120 = vmlaq_n_f64(v120, (float64x2_t)vtrn1q_s64((int64x2_t)a13, a14), *f64);
            v113 = v110 - 1;
          }
          for (; v113; v113 -= 2)
          {
            v122.f64[0] = *v112;
            v121 = &v112[(unint64_t)v38 / 8];
            v123 = *v121;
            v112 = &v121[(unint64_t)v38 / 8];
            v124 = *v116++;
            a12 = *(float64x2_t *)v114++;
            v125 = *v117++;
            v122.f64[1] = v123;
            v126 = *v115++;
            v15 = (float64x2_t)vtrn1q_s64(v125, v126);
            v119 = vmlaq_laneq_f64(vmlaq_n_f64(v119, (float64x2_t)vtrn1q_s64(v124, (int64x2_t)a12), v122.f64[0]), (float64x2_t)vtrn2q_s64(v124, (int64x2_t)a12), v122, 1);
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v15, v122.f64[0]), (float64x2_t)vtrn2q_s64(v125, v126), v122, 1);
          }
          v127 = (int64x2_t *)((char *)v116 - 8 * v118 - 8);
          v128 = (float64_t *)((char *)v112 - v38 * (v110 + 4));
          v130.f64[0] = *v128;
          v129 = &v128[(unint64_t)v38 / 8];
          v132 = *v129;
          v131 = &v129[(unint64_t)v38 / 8];
          v134.f64[0] = *v131;
          v133 = &v131[(unint64_t)v38 / 8];
          v135 = *v133;
          v136 = &v133[(unint64_t)v38 / 8 + v38 / 0xFFFFFFFFFFFFFFFELL];
          v130.f64[1] = v132;
          v134.f64[1] = v135;
          a11 = vmulq_n_f64(v134, a7);
          v137 = vsubq_f64(a11, v120);
          a14 = *v127;
          v14 = *(int64x2_t *)((char *)v114 - 8 * v118 - 8);
          *(_QWORD *)&v15.f64[0] = v117->i64[-v118];
          *(_QWORD *)&v137.f64[0] = *(_OWORD *)&vmlsq_lane_f64(v137, v15, v137.f64[1], 0);
          a13 = (float64x2_t)vtrn1q_s64(*v127, v14);
          v138 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v130, a7), v119), (float64x2_t)vtrn2q_s64(*v127, v14), v137.f64[1], 0), a13, v137.f64[0], 0);
          a11.f64[0] = v138.f64[1];
          a14.i64[0] = v127[-1].i64[1];
          a8 = (int8x16_t)vmlsq_lane_f64(v138, (float64x2_t)a14, v138.f64[1], 0);
          *v136 = *(double *)a8.i64;
          v139 = &v136[(unint64_t)v38 / 8];
          *v139 = a11.f64[0];
          v140 = &v139[(unint64_t)v38 / 8];
          *v140 = v137.f64[0];
          v140[(unint64_t)v38 / 8] = v137.f64[1];
          ++f64;
          --v103;
        }
        while (v103);
      }
      v39 = (float64x2_t *)((char *)v39 + v40);
      v141 = v37 < 5;
      v37 -= 4;
    }
    while (!v141);
  }
}

void sub_239A26438(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13, int64x2_t a14)
{
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  uint64_t *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const double *v55;
  uint64_t v56;
  const double *v57;
  uint64_t v58;
  const double *v59;
  uint64_t v60;
  const double *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  double *v74;
  double *v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t *v105;
  float64x2_t *v106;
  float64x2_t *v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  int64x2_t *v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t *v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  double *f64;
  uint64_t v141;
  float64x2_t *v142;
  int64x2_t *v143;
  int64x2_t *v144;
  int64x2_t *v145;
  float64_t *v146;
  uint64_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double *v150;
  float64x2_t v151;
  float64_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t *v156;
  float64_t *v157;
  double *v158;
  float64x2_t v159;
  float64_t *v160;
  float64_t v161;
  double *v162;
  float64x2_t v163;
  float64_t v164;
  double *v165;
  float64x2_t v166;
  float64x2_t v167;
  double *v168;
  double *v169;
  BOOL v170;

  v22 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v39 = (a2 - 2) * a4;
        v40 = *(double *)(a3 + 8 * (v39 + v22));
        v41 = a7 / *(double *)(a3 + 8 * (v22 + v22 * a4));
        v42 = *(double *)(a3 + 8 * (v39 + a2 - 2));
        v43 = (double *)(a5 + 8 * v22 * a6);
        v44 = (double *)(a5 + a6 * (8 * a2 - 16));
        v45 = __N;
        v46 = 1.0 / v42;
        do
        {
          v47 = v41 * *v43;
          *v43++ = v47;
          *v44 = v46 * (*v44 * a7 - v47 * v40);
          ++v44;
          --v45;
        }
        while (v45);
      }
      v22 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v22 + v22 * a4)), (double *)(a5 + 8 * v22 * a6), 1);
      v22 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v23 = (a2 - 2) * a4;
      v24 = *(double *)(a3 + 8 * (v23 + v22));
      v25 = (a2 - 3) * a4;
      v26 = (double *)(a3 + 8 * (v25 + v22));
      v28 = *(v26 - 1);
      v27 = *v26;
      v29 = a7 / *(double *)(a3 + 8 * (v22 + v22 * a4));
      v30 = 1.0 / *(double *)(a3 + 8 * (v23 + a2 - 2));
      v31 = (double *)(a5 + 8 * v22 * a6);
      v32 = (double *)(a5 + a6 * (8 * a2 - 16));
      v33 = (uint64_t *)(a5 + a6 * (8 * a2 - 24));
      v34 = __N;
      v35 = 1.0 / *(double *)(a3 + 8 * (v25 + a2 - 3));
      do
      {
        v36 = v29 * *v31;
        *v31 = v36;
        v37 = v30 * (*v32 * a7 - v36 * v24);
        *v32++ = v37;
        v14.i64[0] = *v33;
        v38 = *v31++;
        *(double *)v33 = v35 * -(v28 * v37 + v38 * v27 - *(double *)v33 * a7);
        ++v33;
        --v34;
      }
      while (v34);
    }
    v22 = a2 - 4;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    v48 = v22 + 1;
    v49 = a4 + 1;
    v50 = 8 * a6;
    v51 = (float64x2_t *)(a5 + 8 * a6 * v48);
    v52 = -32 * a6;
    do
    {
      v53 = v48 - 4;
      v54 = a3 + 8 * (v48 - 4) * a4;
      v55 = (const double *)(v54 + 8 * (v48 - 4));
      v56 = v48 - 3;
      v57 = (const double *)(a3 + 8 * (v48 - 3) * v49);
      v58 = v48 - 2;
      v59 = (const double *)(a3 + 8 * (v48 - 2) * v49);
      v60 = v48 - 1;
      v61 = (const double *)(a3 + 8 * (v48 - 1) * v49);
      v62 = vld1q_dup_f64(v55);
      v63 = vld1q_dup_f64(v57);
      v64 = vld1q_dup_f64(v59);
      v65 = vld1q_dup_f64(v61);
      v66 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v67 = vdivq_f64(v66, v62);
      v68 = vdivq_f64(v66, v63);
      v69 = vdivq_f64(v66, v64);
      v70 = vdivq_f64(v66, v65);
      if (__N < 4)
      {
        v71 = 0;
      }
      else
      {
        v71 = 0;
        v72 = a3 + 8 * v48;
        v74 = (double *)(v72 + 8 * v56 * a4);
        v75 = (double *)(v72 + 8 * v58 * a4);
        v76 = (double *)(v72 + 8 * v60 * a4);
        v77 = a2 - v53;
        if (a2 - v53 <= 4)
          v77 = 4;
        v78 = v77 - 4;
        v79 = v51;
        do
        {
          v80 = (float64x2_t *)v74;
          v81 = (float64x2_t *)v76;
          v73 = (double *)(v54 + 8 * v48);
          v82 = (float64x2_t *)v73;
          v83 = (float64x2_t *)v75;
          v84 = v79;
          v85 = v78;
          v86 = v78 + 1;
          v87 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v88 = v87;
          v89 = v87;
          v90 = v87;
          v91 = v87;
          v92 = v87;
          v93 = v87;
          v94 = v87;
          if ((v78 & 1) != 0)
          {
            v95 = v79[1];
            v84 = (float64x2_t *)((char *)v79 + v50);
            v82 = (float64x2_t *)(v73 + 1);
            v80 = (float64x2_t *)(v74 + 1);
            v83 = (float64x2_t *)(v75 + 1);
            v81 = (float64x2_t *)(v76 + 1);
            v87 = vmlaq_n_f64(v87, *v79, *v73);
            v89 = vmlaq_n_f64(v89, *v79, *v74);
            v91 = vmlaq_n_f64(v91, *v79, *v75);
            v93 = vmlaq_n_f64(v93, *v79, *v76);
            v88 = vmlaq_n_f64(v88, v95, *v73);
            v90 = vmlaq_n_f64(v90, v95, *v74);
            v92 = vmlaq_n_f64(v92, v95, *v75);
            v94 = vmlaq_n_f64(v94, v95, *v76);
            v85 = v78 - 1;
          }
          for (; v85; v85 -= 2)
          {
            v97 = *v84;
            v98 = v84[1];
            v96 = (float64x2_t *)((char *)v84 + v50);
            v99 = *v96;
            v100 = v96[1];
            v84 = (float64x2_t *)((char *)v96 + v50);
            v101 = *v82++;
            v102 = *v80++;
            v103 = *v83++;
            v104 = *v81++;
            v87 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v97, v101.f64[0]), v99, v101, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v97, v102.f64[0]), v99, v102, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v97, v103.f64[0]), v99, v103, 1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v97, v104.f64[0]), v99, v104, 1);
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v98, v101.f64[0]), v100, v101, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v98, v102.f64[0]), v100, v102, 1);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v98, v103.f64[0]), v100, v103, 1);
            v94 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v98, v104.f64[0]), v100, v104, 1);
          }
          v105 = (float64x2_t *)((char *)v82 - 8 * v86 - 8);
          v106 = (float64x2_t *)((char *)v84 - v50 * (v78 + 4));
          v108 = *v106;
          v109 = v106[1];
          v107 = (float64x2_t *)((char *)v106 + v50);
          v111 = *v107;
          v112 = v107[1];
          v110 = (float64x2_t *)((char *)v107 + v50);
          v114 = *v110;
          v115 = v110[1];
          v113 = (float64x2_t *)((char *)v110 + v50);
          v116 = *v113;
          v117 = v113[1];
          v118 = (int64x2_t *)((char *)v113 + v50 + -4 * v50);
          v65 = vmulq_n_f64(v112, a7);
          v66 = vmulq_n_f64(v114, a7);
          a13 = vmulq_n_f64(v115, a7);
          v119 = vsubq_f64(vmulq_n_f64(v108, a7), v87);
          v120 = vsubq_f64(vmulq_n_f64(v109, a7), v88);
          v121 = vsubq_f64(vmulq_n_f64(v111, a7), v89);
          v122 = vmulq_f64(vsubq_f64(vmulq_n_f64(v116, a7), v93), v70);
          v123 = vmulq_f64(vsubq_f64(vmulq_n_f64(v117, a7), v94), v70);
          v62 = *v105;
          v124 = *(float64x2_t *)((char *)v80 - 8 * v86 - 8);
          v111.f64[0] = v83->f64[-v86];
          v125 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(v66, v91), v122, v111.f64[0], 0), v69);
          v126 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(a13, v92), v123, v111.f64[0], 0), v69);
          v127 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v121, v122, v124, 1), v125, v124.f64[0], 0), v68);
          v128 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vsubq_f64(v65, v90), v123, v124, 1), v126, v124.f64[0], 0), v68);
          v62.f64[0] = v105[-1].f64[1];
          v14 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v119, v122, *v105, 1), v125, v105->f64[0], 0), v127, v62.f64[0], 0), v67);
          v15 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v120, v123, *v105, 1), v126, v105->f64[0], 0), v128, v62.f64[0], 0), v67);
          *v118 = v14;
          v118[1] = (int64x2_t)v15;
          v129 = (float64x2_t *)&v118->i8[v50];
          *v129 = v127;
          v129[1] = v128;
          v130 = (float64x2_t *)((char *)v129 + v50);
          *v130 = v125;
          v130[1] = v126;
          v131 = (float64x2_t *)((char *)v130 + v50);
          *v131 = v122;
          v131[1] = v123;
          v71 += 4;
          v79 += 2;
        }
        while (v71 < __N - 3);
      }
      v132 = __N - v71;
      if (__N > v71)
      {
        v133 = a3 + 8 * v48;
        v134 = (_QWORD *)(v54 + 8 * v48);
        v135 = (_QWORD *)(v133 + 8 * v56 * a4);
        v136 = (unint64_t *)(v133 + 8 * v58 * a4);
        v137 = (unint64_t *)(v133 + 8 * v60 * a4);
        v138 = a2 - v53;
        if (a2 - v53 <= 4)
          v138 = 4;
        v139 = v138 - 4;
        f64 = v51[(unint64_t)v71 / 2].f64;
        do
        {
          v141 = v139;
          v142 = (float64x2_t *)v135;
          v143 = (int64x2_t *)v137;
          v144 = (int64x2_t *)v134;
          v145 = (int64x2_t *)v136;
          v146 = f64;
          v147 = v139 + 1;
          v148 = (float64x2_t)veorq_s8((int8x16_t)v62, (int8x16_t)v62);
          v149 = v148;
          if ((v139 & 1) != 0)
          {
            v146 = &f64[(unint64_t)v50 / 8];
            v65.f64[0] = *(float64_t *)v134;
            v144 = (int64x2_t *)(v134 + 1);
            v66.f64[0] = *(float64_t *)v135;
            v142 = (float64x2_t *)(v135 + 1);
            *(_QWORD *)&a13.f64[0] = *v136;
            v145 = (int64x2_t *)(v136 + 1);
            a14.i64[0] = *v137;
            v143 = (int64x2_t *)(v137 + 1);
            v148 = vmlaq_n_f64(v148, (float64x2_t)vtrn1q_s64((int64x2_t)v65, (int64x2_t)v66), *f64);
            v149 = vmlaq_n_f64(v149, (float64x2_t)vtrn1q_s64((int64x2_t)a13, a14), *f64);
            v141 = v139 - 1;
          }
          for (; v141; v141 -= 2)
          {
            v151.f64[0] = *v146;
            v150 = &v146[(unint64_t)v50 / 8];
            v152 = *v150;
            v146 = &v150[(unint64_t)v50 / 8];
            v153 = *v144++;
            v66 = *v142++;
            v154 = *v145++;
            v151.f64[1] = v152;
            v155 = *v143++;
            v15 = (float64x2_t)vtrn1q_s64(v154, v155);
            v148 = vmlaq_laneq_f64(vmlaq_n_f64(v148, (float64x2_t)vtrn1q_s64(v153, (int64x2_t)v66), v151.f64[0]), (float64x2_t)vtrn2q_s64(v153, (int64x2_t)v66), v151, 1);
            v149 = vmlaq_laneq_f64(vmlaq_n_f64(v149, v15, v151.f64[0]), (float64x2_t)vtrn2q_s64(v154, v155), v151, 1);
          }
          v156 = (int64x2_t *)((char *)v144 - 8 * v147 - 8);
          v157 = (float64_t *)((char *)v146 - v50 * (v139 + 4));
          v159.f64[0] = *v157;
          v158 = &v157[(unint64_t)v50 / 8];
          v161 = *v158;
          v160 = &v158[(unint64_t)v50 / 8];
          v163.f64[0] = *v160;
          v162 = &v160[(unint64_t)v50 / 8];
          v164 = *v162;
          v165 = &v162[(unint64_t)v50 / 8 + v50 / 0xFFFFFFFFFFFFFFFELL];
          v159.f64[1] = v161;
          v163.f64[1] = v164;
          v65 = vmulq_n_f64(v163, a7);
          v166 = vsubq_f64(v65, v149);
          a14 = *v156;
          v14 = *(int64x2_t *)((char *)v142 - 8 * v147 - 8);
          *(_QWORD *)&v15.f64[0] = v145->i64[-v147];
          v166.f64[0] = vmlsq_lane_f64(v166, v15, v166.f64[1] * v70.f64[0], 0).f64[0] * v69.f64[0];
          a13 = (float64x2_t)vtrn1q_s64(*v156, v14);
          v167 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v159, a7), v148), (float64x2_t)vtrn2q_s64(*v156, v14), v166.f64[1] * v70.f64[0], 0), a13, v166.f64[0], 0);
          v65.f64[0] = v167.f64[1] * v68.f64[0];
          a14.i64[0] = v156[-1].i64[1];
          v62 = vmlsq_lane_f64(v167, (float64x2_t)a14, v167.f64[1] * v68.f64[0], 0);
          v62.f64[0] = v62.f64[0] * v67.f64[0];
          *v165 = v62.f64[0];
          v168 = &v165[(unint64_t)v50 / 8];
          *v168 = v65.f64[0];
          v169 = &v168[(unint64_t)v50 / 8];
          *v169 = v166.f64[0];
          v169[(unint64_t)v50 / 8] = v166.f64[1] * v70.f64[0];
          ++f64;
          --v132;
        }
        while (v132);
      }
      v51 = (float64x2_t *)((char *)v51 + v52);
      v170 = v48 < 5;
      v48 -= 4;
    }
    while (!v170);
  }
}

uint64_t sub_239A26A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 *v50;
  float32x4_t v51;
  __int32 *v52;
  float32x2_t *v53;
  float32x2_t *v54;
  uint64_t result;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  float32x2_t *v69;
  uint64_t v70;
  unint64_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  unsigned __int32 *v86;
  float32x2_t v87;
  float v88;
  unsigned __int32 *v89;

  a7.i64[1] = a8.i64[0];
  v12 = 0;
  v13 = 4 * a4;
  v14 = 4 * a6;
  v15 = a1 <= 3;
  for (i = a1 - 3; !v15; v12 += 4)
  {
    v17 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v14);
    if (v12)
    {
      v18 = 0;
      do
      {
        v19 = a2;
        v20 = (float32x4_t *)(a3 + 4 * v12);
        v21 = (float32x4_t *)(a3 + 4 * v18);
        v22 = (float32x4_t)veorq_s8(a8, a8);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        do
        {
          v26 = *v21;
          v21 = (float32x4_t *)((char *)v21 + v13);
          v27 = *v20;
          v20 = (float32x4_t *)((char *)v20 + v13);
          v22 = vmlaq_n_f32(v22, v26, v27.f32[0]);
          v23 = vmlaq_lane_f32(v23, v26, *(float32x2_t *)v27.f32, 1);
          v24 = vmlaq_laneq_f32(v24, v26, v27, 2);
          v25 = vmlaq_laneq_f32(v25, v26, v27, 3);
          v15 = v19-- <= 1;
        }
        while (!v15);
        v29 = *v17;
        v28 = (float32x4_t *)((char *)v17 + v14);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v14);
        v33 = *v30;
        v32 = (float32x4_t *)((char *)v30 + v14);
        v34 = *v32;
        v35 = (__n128 *)((char *)v32 + v14 + -4 * v14);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v22, a7.f32[0]), v29, a7, 2);
        *v35 = (__n128)a8;
        v36 = (float32x4_t *)((char *)v35 + v14);
        *v36 = vmlaq_laneq_f32(vmulq_n_f32(v23, a7.f32[0]), v31, a7, 2);
        v37 = (float32x4_t *)((char *)v36 + v14);
        *v37 = vmlaq_laneq_f32(vmulq_n_f32(v24, a7.f32[0]), v33, a7, 2);
        v38 = (float32x4_t *)((char *)v37 + v14);
        *v38 = vmlaq_laneq_f32(vmulq_n_f32(v25, a7.f32[0]), v34, a7, 2);
        v17 = (float32x4_t *)((char *)v38 + v14 + -4 * v14 + 16);
        v18 += 4;
      }
      while (v18 < v12);
    }
    v39 = a2;
    v40 = (float32x4_t *)(a3 + 4 * v12);
    a8 = veorq_s8(a8, a8);
    v41 = *(float32x2_t *)a8.i8;
    v42 = (float32x4_t)a8;
    v43 = (float32x4_t)a8;
    do
    {
      a12 = *v40;
      v40 = (float32x4_t *)((char *)v40 + v13);
      *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a12.f32[0]);
      v41 = vmla_lane_f32(v41, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
      v42 = vmlaq_laneq_f32(v42, a12, a12, 2);
      v43 = vmlaq_laneq_f32(v43, a12, a12, 3);
      v15 = v39-- <= 1;
    }
    while (!v15);
    a12.i32[0] = v17->i32[0];
    v44 = (float32x2_t *)((char *)v17 + v14);
    v46 = *v44;
    v45 = (float32x4_t *)((char *)v44 + v14);
    v48 = *v45;
    v47 = (float32x4_t *)((char *)v45 + v14);
    v49 = *v47;
    v50 = (__int32 *)((char *)v47 + v14 + -4 * v14);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v51 = vmlaq_laneq_f32(vmulq_n_f32(v42, a7.f32[0]), v48, a7, 2);
    v52 = &v50[(unint64_t)v14 / 2];
    *v50 = a8.i32[0];
    v53 = (float32x2_t *)&v50[(unint64_t)v14 / 4];
    *v53 = vmla_laneq_f32(vmul_n_f32(v41, a7.f32[0]), v46, a7, 2);
    v54 = (float32x2_t *)((char *)v53 + v14);
    *v54 = *(float32x2_t *)v51.f32;
    v52[2] = v51.i32[2];
    *(float32x4_t *)&v54->f32[(unint64_t)v14 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v43, a7.f32[0]), v49, a7, 2);
    v15 = i <= 4;
    i -= 4;
  }
  v15 = i <= -3;
  result = i + 3;
  if (!v15)
  {
    if (result >= 2)
    {
      v56 = (float32x2_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v14);
      if (v12)
      {
        v57 = 0;
        do
        {
          v58 = a2;
          v59 = (float32x2_t *)(a3 + 4 * v12);
          v60 = (float32x2_t *)(a3 + 4 * v57);
          v61 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v62 = v61;
          do
          {
            v63 = *v60;
            v60 = (float32x2_t *)((char *)v60 + v13);
            v64 = *v59;
            v59 = (float32x2_t *)((char *)v59 + v13);
            v61 = vmla_n_f32(v61, v63, v64.f32[0]);
            v62 = vmla_lane_f32(v62, v63, v64, 1);
            v15 = v58-- <= 1;
          }
          while (!v15);
          v66 = *v56;
          v65 = (float32x2_t *)((char *)v56 + v14);
          v67 = *v65;
          v68 = (float32x2_t *)((char *)v65 + v14 + -2 * v14);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v66, a7, 2);
          *v68 = *(float32x2_t *)a8.i8;
          v69 = (float32x2_t *)((char *)v68 + v14);
          *v69 = vmla_laneq_f32(vmul_n_f32(v62, a7.f32[0]), v67, a7, 2);
          v56 = (float32x2_t *)((char *)v69 + v14 + -2 * v14 + 8);
          v57 += 2;
        }
        while (v57 < v12);
      }
      v70 = a2;
      v71 = (unint64_t *)(a3 + 4 * v12);
      v72 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v73 = v72;
      do
      {
        a12.i64[0] = *v71;
        v71 = (unint64_t *)((char *)v71 + v13);
        v72 = vmla_n_f32(v72, *(float32x2_t *)a12.f32, a12.f32[0]);
        v73 = vmla_lane_f32(v73, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
        v15 = v70-- <= 1;
      }
      while (!v15);
      a12.i32[0] = v56->i32[0];
      v74 = (float32x2_t *)((char *)v56 + v14);
      v75 = *v74;
      v76 = (float32x2_t *)((char *)v74 + v14 + -2 * v14);
      v72.f32[0] = v72.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v72, *(float32x2_t *)a12.f32, a7, 2);
      v76->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v76 + v14) = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), v75, a7, 2);
      result -= 2;
      v12 += 2;
    }
    if (result >= 1)
    {
      v77 = (float32x2_t *)a5;
      v78 = 0;
      if (v12 >= 1)
      {
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + 4 * v12);
          v81 = (float32x2_t *)(a3 + 4 * v78);
          v82 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          do
          {
            v83 = *v81;
            v81 = (float32x2_t *)((char *)v81 + v13);
            v84 = *v80;
            v80 = (float *)((char *)v80 + v13);
            v82 = vmla_n_f32(v82, v83, v84);
            v15 = v79-- <= 1;
          }
          while (!v15);
          *(float32x2_t *)a12.f32 = *v77;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v82, a7.f32[0]), *v77, a7, 2);
          *v77++ = *(float32x2_t *)a8.i8;
          v78 += 2;
        }
        while (v78 < v12 - 1);
      }
      v85 = a2;
      v86 = (unsigned __int32 *)(a3 + 4 * v12);
      v87 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v88 = *(float *)v86,
            v86 = (unsigned __int32 *)((char *)v86 + v13),
            v87.f32[0] = v88 * v88,
            v85 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i32[0] = *v86;
          v89 = &v86[(unint64_t)v13 / 4];
          a12.i32[1] = *v89;
          v86 = &v89[(unint64_t)v13 / 4];
          v87 = vmla_f32(v87, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v15 = v85 <= 2;
          v85 -= 2;
        }
        while (!v15);
        v87.f32[0] = vaddv_f32(v87);
      }
      a12.i32[0] = v77->i32[0];
      v87.f32[0] = v87.f32[0] * a7.f32[0];
      v77->i32[0] = vmla_laneq_f32(v87, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

_OWORD *sub_239A26D20(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;

  v8 = _X2;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    v25 = _X2[2];
    v26 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v29 = *_X2;
    v30 = _X2[1];
    v31 = _X2[2];
    v32 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    v37 = _X2[2];
    v38 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v41 = *a2;
    v42 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v46 = vmulq_n_f64(v23, a7);
    v47 = vmulq_n_f64(v24, a7);
    v48 = vmulq_n_f64(v25, a7);
    v49 = vmulq_n_f64(v26, a7);
    v50 = vmulq_n_f64(v29, a7);
    v51 = vmulq_n_f64(v30, a7);
    v52 = vmulq_n_f64(v31, a7);
    v53 = vmulq_n_f64(v32, a7);
    v54 = vmulq_n_f64(v35, a7);
    v55 = vmulq_n_f64(v36, a7);
    v56 = vmulq_n_f64(v37, a7);
    v57 = vmulq_n_f64(v38, a7);
    v58 = vmulq_n_f64(*_X2, a7);
    v59 = vmulq_n_f64(_X2[1], a7);
    v60 = vmulq_n_f64(_X2[2], a7);
    v61 = vmulq_n_f64(_X2[3], a7);
    do
    {
      v62 = v11;
      v63 = v12;
      v46 = vmlaq_n_f64(v46, v11, v41.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v11, v41, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v64 = result + 2;
      v54 = vmlaq_n_f64(v54, v62, v42.f64[0]);
      v58 = vmlaq_laneq_f64(v58, v62, v42, 1);
      v65 = *_X6;
      v66 = _X6[1];
      _X6 += 2;
      v67 = v14;
      v47 = vmlaq_n_f64(v47, v63, v41.f64[0]);
      v51 = vmlaq_laneq_f64(v51, v63, v41, 1);
      v68 = v15;
      v55 = vmlaq_n_f64(v55, v63, v42.f64[0]);
      v59 = vmlaq_laneq_f64(v59, v63, v42, 1);
      v14 = *(float64x2_t *)v64;
      v15 = *((float64x2_t *)v64 + 1);
      result = v64 + 2;
      v48 = vmlaq_n_f64(v48, v67, v41.f64[0]);
      v52 = vmlaq_laneq_f64(v52, v67, v41, 1);
      v56 = vmlaq_n_f64(v56, v67, v42.f64[0]);
      v60 = vmlaq_laneq_f64(v60, v67, v42, 1);
      v49 = vmlaq_n_f64(v49, v68, v41.f64[0]);
      v53 = vmlaq_laneq_f64(v53, v68, v41, 1);
      v41 = v65;
      v57 = vmlaq_n_f64(v57, v68, v42.f64[0]);
      v61 = vmlaq_laneq_f64(v61, v68, v42, 1);
      v42 = v66;
      --v16;
    }
    while (v16);
    v69 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v46;
    v8[1] = v47;
    v8[2] = v48;
    v8[3] = v49;
    v8 += 4;
    *v69 = v50;
    v69[1] = v51;
    v69[2] = v52;
    v69[3] = v53;
    v70 = (float64x2_t *)((char *)v69 + v9);
    *v70 = v54;
    v70[1] = v55;
    v70[2] = v56;
    v70[3] = v57;
    v71 = (float64x2_t *)((char *)v70 + v9);
    *v71 = v58;
    v71[1] = v59;
    v71[2] = v60;
    v71[3] = v61;
    _X2 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

_OWORD *sub_239A26E70(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v7 = _X2;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v22 = *_X2;
    v23 = _X2[1];
    v24 = _X2[2];
    v25 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    v30 = _X2[2];
    v31 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    v36 = _X2[2];
    v37 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v39 = *_X2;
    v40 = _X2[1];
    v41 = _X2[2];
    v42 = _X2[3];
    v44 = *a2;
    v45 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    do
    {
      v49 = v10;
      v50 = v11;
      v22 = vmlaq_n_f64(v22, v10, v44.f64[0]);
      v28 = vmlaq_laneq_f64(v28, v10, v44, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v34 = vmlaq_n_f64(v34, v49, v45.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v49, v45, 1);
      v52 = *_X6;
      v53 = _X6[1];
      _X6 += 2;
      v54 = v13;
      v23 = vmlaq_n_f64(v23, v50, v44.f64[0]);
      v29 = vmlaq_laneq_f64(v29, v50, v44, 1);
      v55 = v14;
      v35 = vmlaq_n_f64(v35, v50, v45.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v50, v45, 1);
      v13 = *(float64x2_t *)v51;
      v14 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v24 = vmlaq_n_f64(v24, v54, v44.f64[0]);
      v30 = vmlaq_laneq_f64(v30, v54, v44, 1);
      v36 = vmlaq_n_f64(v36, v54, v45.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v54, v45, 1);
      v25 = vmlaq_n_f64(v25, v55, v44.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v55, v44, 1);
      v44 = v52;
      v37 = vmlaq_n_f64(v37, v55, v45.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v55, v45, 1);
      v45 = v53;
      --v15;
    }
    while (v15);
    v56 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v22;
    v7[1] = v23;
    v7[2] = v24;
    v7[3] = v25;
    v7 += 4;
    *v56 = v28;
    v56[1] = v29;
    v56[2] = v30;
    v56[3] = v31;
    v57 = (float64x2_t *)((char *)v56 + v8);
    *v57 = v34;
    v57[1] = v35;
    v57[2] = v36;
    v57[3] = v37;
    v58 = (float64x2_t *)((char *)v57 + v8);
    *v58 = v39;
    v58[1] = v40;
    v58[2] = v41;
    v58[3] = v42;
    _X2 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_239A26F70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x2_t *v35;
  float32x4_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  BOOL v65;
  uint64_t v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  __int32 *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  __int32 *v87;
  float32x2_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float v104;
  float32x4_t *v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x2_t *v111;
  float32x4_t v112;
  float32x2_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  float32x2_t *v131;
  __int32 *v132;
  __int32 *v133;
  float32x2_t v134;
  __int32 *v135;
  float32x2_t *v136;
  float32x2_t v137;
  float32x2_t *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int32 *v142;
  float32x2_t v143;
  float32_t v144;
  float32_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  float32x4_t *v149;
  float *v150;
  uint64_t v151;
  float32x2_t *v152;
  float v153;
  float32x4_t *v154;
  float32x2_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  uint64_t v171;
  float32x2_t *v172;
  __int32 *v173;
  __int32 *v174;
  float32x2_t v175;
  __int32 *v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 *v180;
  float32x2_t v181;

  v11 = 4 * a6;
  v12 = 4 * a4;
  v13 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v14 = a2 - 3;
  do
  {
    v15 = 0;
    v16 = __OFSUB__(result, 3);
    v17 = result - 3;
    if (result > 3)
    {
      do
      {
        v18 = (float32x4_t *)(a5 + v13 * v11 + 4 * v15);
        v19 = (float32x4_t *)((char *)v18 + v11);
        v20 = (float32x4_t *)((char *)v18 + 2 * v11);
        v21 = (float32x4_t *)((char *)v18 + 2 * v11 + v11);
        v22 = (float *)(a3 + v15 * v12 + 4 * v15);
        v23 = 4 * (result - v15);
        v24 = result - v15 - 4;
        v26 = *v22;
        v25 = (float32x2_t *)&v22[(unint64_t)v12 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v12);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v12);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v12);
        v34 = *v18;
        v33 = (float32x2_t *)&v18[1];
        v36 = *v19;
        v35 = (float32x2_t *)&v19[1];
        v38 = *v20;
        v37 = (float32x2_t *)&v20[1];
        v40 = *v21;
        v39 = (float32x2_t *)&v21[1];
        v30.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vmul_lane_f32(v28, *(float32x2_t *)v34.f32, 1);
        *(float32x2_t *)v8.f32 = vmul_lane_f32(v28, *(float32x2_t *)v36.f32, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(v28, *(float32x2_t *)v38.f32, 1);
        *(float32x2_t *)v10.f32 = vmul_lane_f32(v28, *(float32x2_t *)v40.f32, 1);
        v41 = vmulq_laneq_f32(v30, v34, 2);
        v42 = vmulq_laneq_f32(v30, v36, 2);
        v43 = vmulq_laneq_f32(v30, v38, 2);
        v44 = vmulq_laneq_f32(v30, v40, 2);
        v41.f32[0] = (float)(v26 * v34.f32[0]) + v41.f32[0];
        v42.f32[0] = (float)(v26 * v36.f32[0]) + v42.f32[0];
        v43.f32[0] = (float)(v26 * v38.f32[0]) + v43.f32[0];
        v44.f32[0] = (float)(v26 * v40.f32[0]) + v44.f32[0];
        v45 = vaddq_f32(vmlaq_laneq_f32(v7, v32, v34, 3), v41);
        v46 = vaddq_f32(vmlaq_laneq_f32(v8, v32, v36, 3), v42);
        v47 = vaddq_f32(vmlaq_laneq_f32(v9, v32, v38, 3), v43);
        v48 = vaddq_f32(vmlaq_laneq_f32(v10, v32, v40, 3), v44);
        if ((v24 & 1) != 0)
        {
          v49 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v12);
          v50 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v51 = v35->f32[0];
          v35 = (float32x2_t *)((char *)v35 + 4);
          v52 = v37->f32[0];
          v37 = (float32x2_t *)((char *)v37 + 4);
          v53 = v39->f32[0];
          v39 = (float32x2_t *)((char *)v39 + 4);
          v45 = vmlaq_n_f32(v45, v49, v50);
          v46 = vmlaq_n_f32(v46, v49, v51);
          v47 = vmlaq_n_f32(v47, v49, v52);
          v48 = vmlaq_n_f32(v48, v49, v53);
          v24 = result - v15 - 5;
        }
        if (v24)
        {
          v54 = 0uLL;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          do
          {
            v59 = *v31;
            v58 = (float32x4_t *)((char *)v31 + v12);
            v60 = *v58;
            v31 = (float32x4_t *)((char *)v58 + v12);
            v61 = *v33++;
            v62 = *v35++;
            v63 = *v37++;
            v64 = *v39++;
            v45 = vmlaq_n_f32(v45, v59, v61.f32[0]);
            v46 = vmlaq_n_f32(v46, v59, v62.f32[0]);
            v47 = vmlaq_n_f32(v47, v59, v63.f32[0]);
            v48 = vmlaq_n_f32(v48, v59, v64.f32[0]);
            v54 = vmlaq_lane_f32(v54, v60, v61, 1);
            v55 = vmlaq_lane_f32(v55, v60, v62, 1);
            v56 = vmlaq_lane_f32(v56, v60, v63, 1);
            v57 = vmlaq_lane_f32(v57, v60, v64, 1);
            v65 = v24 <= 2;
            v24 -= 2;
          }
          while (!v65);
          v45 = vaddq_f32(v45, v54);
          v46 = vaddq_f32(v46, v55);
          v47 = vaddq_f32(v47, v56);
          v48 = vaddq_f32(v48, v57);
        }
        v7 = vmulq_n_f32(v45, a7);
        v8 = vmulq_n_f32(v46, a7);
        v9 = vmulq_n_f32(v47, a7);
        v10 = vmulq_n_f32(v48, a7);
        *(float32x4_t *)&v33->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v7;
        *(float32x4_t *)&v35->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v8;
        *(float32x4_t *)&v37->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v9;
        *(float32x4_t *)&v39->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v10;
        v15 += 4;
        v16 = __OFSUB__(v17, 4);
        v65 = v17 <= 4;
        v17 -= 4;
      }
      while (!v65);
    }
    v66 = result & 3;
    if (!v16 && v66 != 0)
    {
      v67 = (float32x2_t *)(a5 + v13 * v11 + 4 * v15);
      v68 = (float32x2_t *)((char *)v67 + v11);
      v69 = &v67[(unint64_t)v11 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v11 / 4] + v11);
      v71 = (__int32 *)(a3 + v15 * v12 + 4 * v15);
      if (v66 != 1)
      {
        if (v66 != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v12 / 4];
          v73.i32[1] = *v72;
          v74 = &v72[(unint64_t)v12 / 4];
          v76 = *v67;
          v75 = v67 + 1;
          v78 = *v68;
          v77 = v68 + 1;
          v80 = *v69;
          v79 = v69 + 1;
          v82 = *v70;
          v81 = v70 + 1;
          v83 = vmul_f32(v73, v76);
          v84 = vmul_f32(v73, v78);
          v85 = vmul_f32(v73, v80);
          v86 = vmul_f32(v73, v82);
          v73.i32[0] = *v74;
          v76.i32[0] = v75->i32[0];
          --v75;
          v78.i32[0] = v77->i32[0];
          --v77;
          v80.i32[0] = v79->i32[0];
          --v79;
          v82.i32[0] = v81->i32[0];
          --v81;
          v71 = &v74[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v75->f32[0] = (float)(vaddv_f32(v83) + (float)(v73.f32[0] * v76.f32[0])) * a7;
          v67 = (float32x2_t *)((char *)v75 + 4);
          v77->f32[0] = (float)(vaddv_f32(v84) + (float)(v73.f32[0] * v78.f32[0])) * a7;
          v68 = (float32x2_t *)((char *)v77 + 4);
          v79->f32[0] = (float)(vaddv_f32(v85) + (float)(v73.f32[0] * v80.f32[0])) * a7;
          v69 = (float32x2_t *)((char *)v79 + 4);
          v81->f32[0] = (float)(vaddv_f32(v86) + (float)(v73.f32[0] * v82.f32[0])) * a7;
          v70 = (float32x2_t *)((char *)v81 + 4);
        }
        v88.i32[0] = *v71;
        v87 = &v71[(unint64_t)v12 / 4];
        v88.i32[1] = *v87;
        v71 = v87 + 1;
        v89 = vaddv_f32(vmul_f32(v88, *v68)) * a7;
        v90 = vaddv_f32(vmul_f32(v88, *v69)) * a7;
        v91 = vaddv_f32(vmul_f32(v88, *v70)) * a7;
        v67->f32[0] = vaddv_f32(vmul_f32(v88, *v67)) * a7;
        v67 = (float32x2_t *)((char *)v67 + 4);
        v68->f32[0] = v89;
        v68 = (float32x2_t *)((char *)v68 + 4);
        v69->f32[0] = v90;
        v69 = (float32x2_t *)((char *)v69 + 4);
        v70->f32[0] = v91;
        v70 = (float32x2_t *)((char *)v70 + 4);
      }
      v92 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v93 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v94 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v92;
      v69->f32[0] = v93;
      v70->f32[0] = v94;
    }
    v13 += 4;
    v65 = v14 <= 4;
    v14 -= 4;
  }
  while (!v65);
  v65 = v14 <= -3;
  a2 = v14 + 3;
  if (!v65)
  {
LABEL_22:
    if (a2 > 1)
    {
      v95 = 0;
      v96 = __OFSUB__(result, 3);
      v97 = result - 3;
      if (result > 3)
      {
        do
        {
          v98 = (float32x4_t *)(a5 + v13 * v11 + 4 * v95);
          v99 = (float32x4_t *)((char *)v98 + v11);
          v100 = (float *)(a3 + v95 * v12 + 4 * v95);
          v101 = 4 * (result - v95);
          v102 = result - v95 - 4;
          v104 = *v100;
          v103 = (float32x2_t *)&v100[(unint64_t)v12 / 4];
          v106 = *v103;
          v105 = (float32x4_t *)((char *)v103 + v12);
          v108 = *v105;
          v107 = (float32x4_t *)((char *)v105 + v12);
          v110 = *v107;
          v109 = (float32x4_t *)((char *)v107 + v12);
          v112 = *v98;
          v111 = (float32x2_t *)&v98[1];
          v114 = *v99;
          v113 = (float32x2_t *)&v99[1];
          v108.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v106, *(float32x2_t *)v112.f32, 1);
          *(float32x2_t *)v8.f32 = vmul_lane_f32(v106, *(float32x2_t *)v114.f32, 1);
          v115 = vmulq_laneq_f32(v108, v112, 2);
          v116 = vmulq_laneq_f32(v108, v114, 2);
          v115.f32[0] = (float)(v104 * v112.f32[0]) + v115.f32[0];
          v116.f32[0] = (float)(v104 * v114.f32[0]) + v116.f32[0];
          v117 = vaddq_f32(vmlaq_laneq_f32(v7, v110, v112, 3), v115);
          v118 = vaddq_f32(vmlaq_laneq_f32(v8, v110, v114, 3), v116);
          if ((v102 & 1) != 0)
          {
            v119 = *v109;
            v109 = (float32x4_t *)((char *)v109 + v12);
            v120 = v111->f32[0];
            v111 = (float32x2_t *)((char *)v111 + 4);
            v121 = v113->f32[0];
            v113 = (float32x2_t *)((char *)v113 + 4);
            v117 = vmlaq_n_f32(v117, v119, v120);
            v118 = vmlaq_n_f32(v118, v119, v121);
            v102 = result - v95 - 5;
          }
          if (v102)
          {
            v122 = 0uLL;
            v123 = 0uLL;
            do
            {
              v125 = *v109;
              v124 = (float32x4_t *)((char *)v109 + v12);
              v126 = *v124;
              v109 = (float32x4_t *)((char *)v124 + v12);
              v127 = *v111++;
              v128 = *v113++;
              v117 = vmlaq_n_f32(v117, v125, v127.f32[0]);
              v118 = vmlaq_n_f32(v118, v125, v128.f32[0]);
              v122 = vmlaq_lane_f32(v122, v126, v127, 1);
              v123 = vmlaq_lane_f32(v123, v126, v128, 1);
              v65 = v102 <= 2;
              v102 -= 2;
            }
            while (!v65);
            v117 = vaddq_f32(v117, v122);
            v118 = vaddq_f32(v118, v123);
          }
          v7 = vmulq_n_f32(v117, a7);
          v8 = vmulq_n_f32(v118, a7);
          *(float32x4_t *)&v111->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v7;
          *(float32x4_t *)&v113->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v8;
          v95 += 4;
          v96 = __OFSUB__(v97, 4);
          v65 = v97 <= 4;
          v97 -= 4;
        }
        while (!v65);
      }
      v129 = result & 3;
      if (!v96 && v129 != 0)
      {
        v130 = (float32x2_t *)(a5 + v13 * v11 + 4 * v95);
        v131 = (float32x2_t *)((char *)v130 + v11);
        v132 = (__int32 *)(a3 + v95 * v12 + 4 * v95);
        if (v129 != 1)
        {
          if (v129 != 2)
          {
            v134.i32[0] = *v132;
            v133 = &v132[(unint64_t)v12 / 4];
            v134.i32[1] = *v133;
            v135 = &v133[(unint64_t)v12 / 4];
            v137 = *v130;
            v136 = v130 + 1;
            v139 = *v131;
            v138 = v131 + 1;
            v140 = vmul_f32(v134, v137);
            v141 = vmul_f32(v134, v139);
            v134.i32[0] = *v135;
            v137.i32[0] = v136->i32[0];
            --v136;
            v139.i32[0] = v138->i32[0];
            --v138;
            v132 = &v135[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v136->f32[0] = (float)(vaddv_f32(v140) + (float)(v134.f32[0] * v137.f32[0])) * a7;
            v130 = (float32x2_t *)((char *)v136 + 4);
            v138->f32[0] = (float)(vaddv_f32(v141) + (float)(v134.f32[0] * v139.f32[0])) * a7;
            v131 = (float32x2_t *)((char *)v138 + 4);
          }
          v143.i32[0] = *v132;
          v142 = &v132[(unint64_t)v12 / 4];
          v143.i32[1] = *v142;
          v132 = v142 + 1;
          v144 = vaddv_f32(vmul_f32(v143, *v131)) * a7;
          v130->f32[0] = vaddv_f32(vmul_f32(v143, *v130)) * a7;
          v130 = (float32x2_t *)((char *)v130 + 4);
          v131->f32[0] = v144;
          v131 = (float32x2_t *)((char *)v131 + 4);
        }
        v145 = (float)(*(float *)v132 * v131->f32[0]) * a7;
        v130->f32[0] = (float)(*(float *)v132 * v130->f32[0]) * a7;
        v131->f32[0] = v145;
      }
      a2 -= 2;
      v13 += 2;
    }
    if (a2)
    {
      v146 = 0;
      v147 = __OFSUB__(result, 3);
      v148 = result - 3;
      if (result > 3)
      {
        do
        {
          v149 = (float32x4_t *)(a5 + v13 * v11 + 4 * v146);
          v150 = (float *)(a3 + v146 * v12 + 4 * v146);
          v151 = result - v146 - 4;
          v153 = *v150;
          v152 = (float32x2_t *)&v150[(unint64_t)v12 / 4];
          v155 = *v152;
          v154 = (float32x4_t *)((char *)v152 + v12);
          v157 = *v154;
          v156 = (float32x4_t *)((char *)v154 + v12);
          v159 = *v156;
          v158 = (float32x4_t *)((char *)v156 + v12);
          v161 = *v149;
          v160 = (float32x2_t *)&v149[1];
          v157.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v155, *(float32x2_t *)v161.f32, 1);
          v162 = vmulq_laneq_f32(v157, v161, 2);
          v162.f32[0] = (float)(v153 * v161.f32[0]) + v162.f32[0];
          v163 = vaddq_f32(vmlaq_laneq_f32(v7, v159, v161, 3), v162);
          if ((v151 & 1) != 0)
          {
            v164 = *v158;
            v158 = (float32x4_t *)((char *)v158 + v12);
            v165 = v160->f32[0];
            v160 = (float32x2_t *)((char *)v160 + 4);
            v163 = vmlaq_n_f32(v163, v164, v165);
            v151 = result - v146 - 5;
          }
          if (v151)
          {
            v166 = 0uLL;
            do
            {
              v168 = *v158;
              v167 = (float32x4_t *)((char *)v158 + v12);
              v169 = *v167;
              v158 = (float32x4_t *)((char *)v167 + v12);
              v170 = *v160++;
              v163 = vmlaq_n_f32(v163, v168, v170.f32[0]);
              v166 = vmlaq_lane_f32(v166, v169, v170, 1);
              v65 = v151 <= 2;
              v151 -= 2;
            }
            while (!v65);
            v163 = vaddq_f32(v163, v166);
          }
          v7 = vmulq_n_f32(v163, a7);
          *(float32x4_t *)&v160->f32[-(result - v146)] = v7;
          v146 += 4;
          v147 = __OFSUB__(v148, 4);
          v65 = v148 <= 4;
          v148 -= 4;
        }
        while (!v65);
      }
      v171 = result & 3;
      if (!v147 && v171 != 0)
      {
        v172 = (float32x2_t *)(a5 + v13 * v11 + 4 * v146);
        v173 = (__int32 *)(a3 + v146 * v12 + 4 * v146);
        if (v171 != 1)
        {
          if (v171 != 2)
          {
            v175.i32[0] = *v173;
            v174 = &v173[(unint64_t)v12 / 4];
            v175.i32[1] = *v174;
            v176 = &v174[(unint64_t)v12 / 4];
            v178 = *v172;
            v177 = v172 + 1;
            v179 = vmul_f32(v175, v178);
            v175.i32[0] = *v176;
            v178.i32[0] = v177->i32[0];
            --v177;
            v173 = &v176[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v177->f32[0] = (float)(vaddv_f32(v179) + (float)(v175.f32[0] * v178.f32[0])) * a7;
            v172 = (float32x2_t *)((char *)v177 + 4);
          }
          v181.i32[0] = *v173;
          v180 = &v173[(unint64_t)v12 / 4];
          v181.i32[1] = *v180;
          v173 = v180 + 1;
          v172->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v181, *v172), a7));
          v172 = (float32x2_t *)((char *)v172 + 4);
        }
        v172->f32[0] = (float)(*(float *)v173 * v172->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A275E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  float32x2_t *v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x2_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  BOOL v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  float *v61;
  __int32 *v62;
  float32x2_t v63;
  float32x2_t *v64;
  float v65;
  float32x2_t *v66;
  float v67;
  float32x2_t *v68;
  float v69;
  float32x2_t *v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  float32x2_t *v89;
  unsigned int v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x2_t *v95;
  float32x4_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t *v113;
  float *v114;
  __int32 *v115;
  float32x2_t v116;
  float32x2_t *v117;
  float v118;
  float32x2_t *v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  float32x4_t *v128;
  uint64_t v129;
  unsigned int *v130;
  float32x2_t *v131;
  unsigned int v132;
  float32x4_t *v133;
  float32x2_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x2_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int32 *v149;
  __int32 *v150;
  float32x2_t v151;
  float32x2_t *v152;
  float v153;
  float32x2_t v154;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (float32x4_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (float32x4_t *)((char *)v14 + v7);
        v16 = (float32x4_t *)((char *)v14 + 2 * v7);
        v17 = (float32x4_t *)((char *)v14 + 2 * v7 + v7);
        v18 = 4 * (result - v11);
        v19 = result - v11 - 4;
        v20 = (unsigned int *)(a3 + v11 * v8 + 4 * v11 + v8);
        v22 = *v20;
        v21 = (float32x2_t *)&v20[(unint64_t)v8 / 4];
        v24 = *v21;
        v23 = (float32x4_t *)((char *)v21 + v8);
        v26 = *v23;
        v25 = (float32x4_t *)((char *)v23 + v8);
        v28 = *v14;
        v27 = (float32x2_t *)&v14[1];
        v30 = *v15;
        v29 = (float32x2_t *)&v15[1];
        v32 = *v16;
        v31 = (float32x2_t *)&v16[1];
        v34 = *v17;
        v33 = (float32x2_t *)&v17[1];
        v26.i32[3] = 0;
        v35 = vmlaq_laneq_f32(v28, v26, v28, 3);
        v36 = vmlaq_laneq_f32(v30, v26, v30, 3);
        v37 = vmlaq_laneq_f32(v32, v26, v32, 3);
        v38 = vmlaq_laneq_f32(v34, v26, v34, 3);
        *(float32x2_t *)v35.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v28, 2), (float32x2_t)v22, *(float32x2_t *)v28.f32, 1), *(float32x2_t *)v35.f32);
        *(float32x2_t *)v36.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v30, 2), (float32x2_t)v22, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v36.f32);
        *(float32x2_t *)v37.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v32, 2), (float32x2_t)v22, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v37.f32);
        *(float32x2_t *)v38.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v34, 2), (float32x2_t)v22, *(float32x2_t *)v34.f32, 1), *(float32x2_t *)v38.f32);
        if ((v19 & 1) != 0)
        {
          v39 = *v25;
          v25 = (float32x4_t *)((char *)v25 + v8);
          v40 = v27->f32[0];
          v27 = (float32x2_t *)((char *)v27 + 4);
          v41 = v29->f32[0];
          v29 = (float32x2_t *)((char *)v29 + 4);
          v42 = v31->f32[0];
          v31 = (float32x2_t *)((char *)v31 + 4);
          v43 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v35 = vmlaq_n_f32(v35, v39, v40);
          v36 = vmlaq_n_f32(v36, v39, v41);
          v37 = vmlaq_n_f32(v37, v39, v42);
          v38 = vmlaq_n_f32(v38, v39, v43);
          v19 = result - v11 - 5;
        }
        if (v19)
        {
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          do
          {
            v49 = *v25;
            v48 = (float32x4_t *)((char *)v25 + v8);
            v50 = *v48;
            v25 = (float32x4_t *)((char *)v48 + v8);
            v51 = *v27++;
            v52 = *v29++;
            v53 = *v31++;
            v54 = *v33++;
            v35 = vmlaq_n_f32(v35, v49, v51.f32[0]);
            v36 = vmlaq_n_f32(v36, v49, v52.f32[0]);
            v37 = vmlaq_n_f32(v37, v49, v53.f32[0]);
            v38 = vmlaq_n_f32(v38, v49, v54.f32[0]);
            v44 = vmlaq_lane_f32(v44, v50, v51, 1);
            v45 = vmlaq_lane_f32(v45, v50, v52, 1);
            v46 = vmlaq_lane_f32(v46, v50, v53, 1);
            v47 = vmlaq_lane_f32(v47, v50, v54, 1);
            v55 = v19 <= 2;
            v19 -= 2;
          }
          while (!v55);
          v35 = vaddq_f32(v35, v44);
          v36 = vaddq_f32(v36, v45);
          v37 = vaddq_f32(v37, v46);
          v38 = vaddq_f32(v38, v47);
        }
        *(float32x4_t *)&v27->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v35, a7);
        *(float32x4_t *)&v29->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v36, a7);
        *(float32x4_t *)&v31->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v37, a7);
        *(float32x4_t *)&v33->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v38, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v55 = v13 <= 4;
        v13 -= 4;
      }
      while (!v55);
    }
    v56 = result & 3;
    if (!v12 && v56 != 0)
    {
      v57 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v58 = (int32x2_t *)((char *)v57 + v7);
      v59 = &v57[(unint64_t)v7 / 4];
      v60 = (int32x2_t *)((char *)&v57[(unint64_t)v7 / 4] + v7);
      v61 = (float *)(a3 + v11 * v8 + 4 * v11 + v8);
      if (v56 != 1)
      {
        if (v56 != 2)
        {
          v63.f32[0] = *v61;
          v62 = (__int32 *)&v61[(unint64_t)v8 / 4];
          v63.i32[1] = *v62;
          v65 = *(float *)v57->i32;
          v64 = (float32x2_t *)((char *)v57 + 4);
          v67 = *(float *)v58->i32;
          v66 = (float32x2_t *)((char *)v58 + 4);
          v69 = *(float *)v59->i32;
          v68 = (float32x2_t *)((char *)v59 + 4);
          v71 = *(float *)v60->i32;
          v70 = (float32x2_t *)((char *)v60 + 4);
          v72 = vmul_f32(v63, *v64);
          v73 = vmul_f32(v63, *v66);
          v74 = vmul_f32(v63, *v68);
          v75 = vmul_f32(v63, *v70);
          v64 = (float32x2_t *)((char *)v64 - 4);
          v66 = (float32x2_t *)((char *)v66 - 4);
          v68 = (float32x2_t *)((char *)v68 - 4);
          v70 = (float32x2_t *)((char *)v70 - 4);
          v61 = (float *)(v62 + 1);
          v64->f32[0] = (float)(vaddv_f32(v72) + v65) * a7;
          v57 = (int32x2_t *)((char *)v64 + 4);
          v66->f32[0] = (float)(vaddv_f32(v73) + v67) * a7;
          v58 = (int32x2_t *)((char *)v66 + 4);
          v68->f32[0] = (float)(vaddv_f32(v74) + v69) * a7;
          v59 = (int32x2_t *)((char *)v68 + 4);
          v70->f32[0] = (float)(vaddv_f32(v75) + v71) * a7;
          v60 = (int32x2_t *)((char *)v70 + 4);
        }
        v76 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v57, *v58), vmul_n_f32((float32x2_t)vtrn2_s32(*v57, *v58), *v61)), a7);
        v77 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v59, *v60), vmul_n_f32((float32x2_t)vtrn2_s32(*v59, *v60), *v61)), a7);
        v57->i32[0] = v76.i32[0];
        v57 = (int32x2_t *)((char *)v57 + 4);
        v58->i32[0] = v76.i32[1];
        v58 = (int32x2_t *)((char *)v58 + 4);
        v59->i32[0] = v77.i32[0];
        v59 = (int32x2_t *)((char *)v59 + 4);
        v60->i32[0] = v77.i32[1];
        v60 = (int32x2_t *)((char *)v60 + 4);
      }
      v78 = *(float *)v58->i32 * a7;
      v79 = *(float *)v59->i32 * a7;
      v80 = *(float *)v60->i32 * a7;
      *(float *)v57->i32 = *(float *)v57->i32 * a7;
      *(float *)v58->i32 = v78;
      *(float *)v59->i32 = v79;
      *(float *)v60->i32 = v80;
    }
    v9 += 4;
    v55 = v10 <= 4;
    v10 -= 4;
  }
  while (!v55);
  v55 = v10 <= -3;
  a2 = v10 + 3;
  if (!v55)
  {
LABEL_22:
    if (a2 > 1)
    {
      v81 = 0;
      v82 = __OFSUB__(result, 3);
      v83 = result - 3;
      if (result > 3)
      {
        do
        {
          v84 = (float32x4_t *)(a5 + v9 * v7 + 4 * v81);
          v85 = (float32x4_t *)((char *)v84 + v7);
          v86 = 4 * (result - v81);
          v87 = result - v81 - 4;
          v88 = (unsigned int *)(a3 + v81 * v8 + 4 * v81 + v8);
          v90 = *v88;
          v89 = (float32x2_t *)&v88[(unint64_t)v8 / 4];
          v92 = *v89;
          v91 = (float32x4_t *)((char *)v89 + v8);
          v94 = *v91;
          v93 = (float32x4_t *)((char *)v91 + v8);
          v96 = *v84;
          v95 = (float32x2_t *)&v84[1];
          v98 = *v85;
          v97 = (float32x2_t *)&v85[1];
          v94.i32[3] = 0;
          v99 = vmlaq_laneq_f32(v96, v94, v96, 3);
          v100 = vmlaq_laneq_f32(v98, v94, v98, 3);
          *(float32x2_t *)v99.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v96, 2), (float32x2_t)v90, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v99.f32);
          *(float32x2_t *)v100.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v98, 2), (float32x2_t)v90, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v100.f32);
          if ((v87 & 1) != 0)
          {
            v101 = *v93;
            v93 = (float32x4_t *)((char *)v93 + v8);
            v102 = v95->f32[0];
            v95 = (float32x2_t *)((char *)v95 + 4);
            v103 = v97->f32[0];
            v97 = (float32x2_t *)((char *)v97 + 4);
            v99 = vmlaq_n_f32(v99, v101, v102);
            v100 = vmlaq_n_f32(v100, v101, v103);
            v87 = result - v81 - 5;
          }
          if (v87)
          {
            v104 = 0uLL;
            v105 = 0uLL;
            do
            {
              v107 = *v93;
              v106 = (float32x4_t *)((char *)v93 + v8);
              v108 = *v106;
              v93 = (float32x4_t *)((char *)v106 + v8);
              v109 = *v95++;
              v110 = *v97++;
              v99 = vmlaq_n_f32(v99, v107, v109.f32[0]);
              v100 = vmlaq_n_f32(v100, v107, v110.f32[0]);
              v104 = vmlaq_lane_f32(v104, v108, v109, 1);
              v105 = vmlaq_lane_f32(v105, v108, v110, 1);
              v55 = v87 <= 2;
              v87 -= 2;
            }
            while (!v55);
            v99 = vaddq_f32(v99, v104);
            v100 = vaddq_f32(v100, v105);
          }
          *(float32x4_t *)&v95->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v99, a7);
          *(float32x4_t *)&v97->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v100, a7);
          v81 += 4;
          v82 = __OFSUB__(v83, 4);
          v55 = v83 <= 4;
          v83 -= 4;
        }
        while (!v55);
      }
      v111 = result & 3;
      if (!v82 && v111 != 0)
      {
        v112 = (int32x2_t *)(a5 + v9 * v7 + 4 * v81);
        v113 = (int32x2_t *)((char *)v112 + v7);
        v114 = (float *)(a3 + v81 * v8 + 4 * v81 + v8);
        if (v111 != 1)
        {
          if (v111 != 2)
          {
            v116.f32[0] = *v114;
            v115 = (__int32 *)&v114[(unint64_t)v8 / 4];
            v116.i32[1] = *v115;
            v118 = *(float *)v112->i32;
            v117 = (float32x2_t *)((char *)v112 + 4);
            v120 = *(float *)v113->i32;
            v119 = (float32x2_t *)((char *)v113 + 4);
            v121 = vmul_f32(v116, *v117);
            v122 = vmul_f32(v116, *v119);
            v117 = (float32x2_t *)((char *)v117 - 4);
            v119 = (float32x2_t *)((char *)v119 - 4);
            v114 = (float *)(v115 + 1);
            v117->f32[0] = (float)(vaddv_f32(v121) + v118) * a7;
            v112 = (int32x2_t *)((char *)v117 + 4);
            v119->f32[0] = (float)(vaddv_f32(v122) + v120) * a7;
            v113 = (int32x2_t *)((char *)v119 + 4);
          }
          v123 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v112, *v113), vmul_n_f32((float32x2_t)vtrn2_s32(*v112, *v113), *v114)), a7);
          v112->i32[0] = v123.i32[0];
          v112 = (int32x2_t *)((char *)v112 + 4);
          v113->i32[0] = v123.i32[1];
          v113 = (int32x2_t *)((char *)v113 + 4);
        }
        v124 = *(float *)v113->i32 * a7;
        *(float *)v112->i32 = *(float *)v112->i32 * a7;
        *(float *)v113->i32 = v124;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v125 = 0;
      v126 = __OFSUB__(result, 3);
      v127 = result - 3;
      if (result > 3)
      {
        do
        {
          v128 = (float32x4_t *)(a5 + v9 * v7 + 4 * v125);
          v129 = result - v125 - 4;
          v130 = (unsigned int *)(a3 + v125 * v8 + 4 * v125 + v8);
          v132 = *v130;
          v131 = (float32x2_t *)&v130[(unint64_t)v8 / 4];
          v134 = *v131;
          v133 = (float32x4_t *)((char *)v131 + v8);
          v136 = *v133;
          v135 = (float32x4_t *)((char *)v133 + v8);
          v138 = *v128;
          v137 = (float32x2_t *)&v128[1];
          v136.i32[3] = 0;
          v139 = vmlaq_laneq_f32(v138, v136, v138, 3);
          *(float32x2_t *)v139.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v134, v138, 2), (float32x2_t)v132, *(float32x2_t *)v138.f32, 1), *(float32x2_t *)v139.f32);
          if ((v129 & 1) != 0)
          {
            v140 = *v135;
            v135 = (float32x4_t *)((char *)v135 + v8);
            v141 = v137->f32[0];
            v137 = (float32x2_t *)((char *)v137 + 4);
            v139 = vmlaq_n_f32(v139, v140, v141);
            v129 = result - v125 - 5;
          }
          if (v129)
          {
            v142 = 0uLL;
            do
            {
              v144 = *v135;
              v143 = (float32x4_t *)((char *)v135 + v8);
              v145 = *v143;
              v135 = (float32x4_t *)((char *)v143 + v8);
              v146 = *v137++;
              v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
              v142 = vmlaq_lane_f32(v142, v145, v146, 1);
              v55 = v129 <= 2;
              v129 -= 2;
            }
            while (!v55);
            v139 = vaddq_f32(v139, v142);
          }
          *(float32x4_t *)&v137->f32[-(result - v125)] = vmulq_n_f32(v139, a7);
          v125 += 4;
          v126 = __OFSUB__(v127, 4);
          v55 = v127 <= 4;
          v127 -= 4;
        }
        while (!v55);
      }
      v147 = result & 3;
      if (!v126 && v147 != 0)
      {
        v148 = (_QWORD *)(a5 + v9 * v7 + 4 * v125);
        v149 = (__int32 *)(a3 + v125 * v8 + 4 * v125 + v8);
        if (v147 != 1)
        {
          if (v147 != 2)
          {
            v151.i32[0] = *v149;
            v150 = &v149[(unint64_t)v8 / 4];
            v151.i32[1] = *v150;
            v149 = v150 + 1;
            v153 = *(float *)v148;
            v152 = (float32x2_t *)((char *)v148 + 4);
            v154 = vmul_f32(v151, *v152);
            v152 = (float32x2_t *)((char *)v152 - 4);
            v152->f32[0] = (float)(vaddv_f32(v154) + v153) * a7;
            v148 = (_QWORD *)((char *)v152 + 4);
          }
          *(float *)v148 = (float)((float)(COERCE_FLOAT(HIDWORD(*v148)) * *(float *)v149) + COERCE_FLOAT(*v148)) * a7;
          v148 = (_QWORD *)((char *)v148 + 4);
        }
        *(float *)v148 = *(float *)v148 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A27BD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  float *v17;
  float32x2_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  float v22;
  __int32 *v23;
  float32x2_t v24;
  __int32 *v25;
  float32x4_t v26;
  __int32 *v27;
  float32x4_t v28;
  __int32 *v29;
  int64x2_t v30;
  float32x2_t *v31;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  float32x2_t *v35;
  int64x2_t v36;
  float32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  BOOL v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  uint64_t j;
  int32x4_t *v95;
  int32x4_t *v96;
  float *v97;
  float32x2_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  float v102;
  __int32 *v103;
  float32x2_t v104;
  __int32 *v105;
  float32x4_t v106;
  __int32 *v107;
  float32x4_t v108;
  __int32 *v109;
  int32x4_t v110;
  float32x2_t *v111;
  int32x4_t v112;
  float32x4_t *v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  float32_t v138;
  float32x2_t v139;
  float32_t v140;
  float32_t v141;
  uint64_t k;
  float *v143;
  float32x2_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float v148;
  __int32 *v149;
  float32x2_t v150;
  __int32 *v151;
  float32x4_t v152;
  __int32 *v153;
  float32x4_t v154;
  __int32 *v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v37 = vmulq_n_f32(v56, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = (float *)(a3 + i * v9 + 4 * i);
      v18 = (float32x2_t *)&v17[(unint64_t)v9 / 4];
      v19 = (float32x4_t *)&v17[(unint64_t)v9 / 2];
      v20 = (float32x4_t *)&v17[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
      v21 = i;
      v22 = *v17;
      v23 = (__int32 *)(a3 + i * v9);
      v24 = *v18;
      v25 = (__int32 *)v18 - i;
      v26 = *v19;
      v27 = (__int32 *)v19 - i;
      v28 = *v20;
      v29 = (__int32 *)v20 - i;
      v30 = *v13;
      v31 = (float32x2_t *)(a5 + v10 * v8);
      v32 = *v14;
      v33 = (float32x2_t *)((char *)v14 - 4 * i);
      v34 = *v15;
      v35 = (float32x2_t *)((char *)v15 - 4 * i);
      v36 = *v16;
      v37 = (float32x4_t *)((char *)v16 - 4 * i);
      v38 = (int32x4_t)vtrn1q_s64(v30, v34);
      v39 = (int32x4_t)vtrn1q_s64(v32, v36);
      v40 = (int32x4_t)vtrn2q_s64(v30, v34);
      v41 = (int32x4_t)vtrn2q_s64(v32, v36);
      v42 = (float32x4_t)vtrn1q_s32(v38, v39);
      v43 = (float32x4_t)vtrn2q_s32(v38, v39);
      v44 = (float32x4_t)vtrn1q_s32(v40, v41);
      v45 = (int64x2_t)vmulq_n_f32(v42, v22);
      v46 = (int64x2_t)vaddq_f32(vmulq_n_f32(v42, v24.f32[0]), vmulq_lane_f32(v43, v24, 1));
      v47 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v26.f32[0]), v44, v26, 2), vmulq_lane_f32(v43, *(float32x2_t *)v26.f32, 1));
      v48 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v28.f32[0]), v44, v28, 2), vmulq_lane_f32(v43, *(float32x2_t *)v28.f32, 1)), vmulq_laneq_f32((float32x4_t)vtrn2q_s32(v40, v41), v28, 3));
      v49 = (int32x4_t)vtrn1q_s64(v45, v47);
      v50 = (int32x4_t)vtrn1q_s64(v46, v48);
      v51 = (int32x4_t)vtrn2q_s64(v45, v47);
      v52 = (int32x4_t)vtrn2q_s64(v46, v48);
      v53 = (float32x4_t)vtrn1q_s32(v49, v50);
      v54 = (float32x4_t)vtrn2q_s32(v49, v50);
      v55 = (float32x4_t)vtrn1q_s32(v51, v52);
      v56 = (float32x4_t)vtrn2q_s32(v51, v52);
      if ((i & 1) != 0)
      {
        v57.i32[0] = *v23++;
        v57.i32[1] = *v25++;
        v57.i32[2] = *v27++;
        v57.i32[3] = *v29++;
        v58 = v31->f32[0];
        v31 = (float32x2_t *)((char *)v31 + 4);
        v59 = v33->f32[0];
        v33 = (float32x2_t *)((char *)v33 + 4);
        v60 = v35->f32[0];
        v35 = (float32x2_t *)((char *)v35 + 4);
        v61 = v37->f32[0];
        v37 = (float32x4_t *)((char *)v37 + 4);
        v53 = vmlaq_n_f32(v53, v57, v58);
        v54 = vmlaq_n_f32(v54, v57, v59);
        v55 = vmlaq_n_f32(v55, v57, v60);
        v56 = vmlaq_n_f32(v56, v57, v61);
        v21 = i - 1;
      }
      if (v21)
      {
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        do
        {
          v66.i64[0] = *(_QWORD *)v23;
          v23 += 2;
          v67.i64[0] = *(_QWORD *)v25;
          v25 += 2;
          v68 = *(_QWORD *)v27;
          v27 += 2;
          v69 = *(_QWORD *)v29;
          v29 += 2;
          v70 = *v31++;
          v71 = *v33++;
          v72 = *v35++;
          v73 = *(float32x2_t *)v37->f32;
          v37 = (float32x4_t *)((char *)v37 + 8);
          v66.i64[1] = v68;
          v67.i64[1] = v69;
          v74 = (float32x4_t)vtrn1q_s32(v66, v67);
          v75 = (float32x4_t)vtrn2q_s32(v66, v67);
          v53 = vmlaq_n_f32(v53, v74, v70.f32[0]);
          v54 = vmlaq_n_f32(v54, v74, v71.f32[0]);
          v55 = vmlaq_n_f32(v55, v74, v72.f32[0]);
          v56 = vmlaq_n_f32(v56, v74, v73.f32[0]);
          v62 = vmlaq_lane_f32(v62, v75, v70, 1);
          v63 = vmlaq_lane_f32(v63, v75, v71, 1);
          v64 = vmlaq_lane_f32(v64, v75, v72, 1);
          v65 = vmlaq_lane_f32(v65, v75, v73, 1);
          v76 = v21 <= 2;
          v21 -= 2;
        }
        while (!v76);
        v53 = vaddq_f32(v53, v62);
        v54 = vaddq_f32(v54, v63);
        v55 = vaddq_f32(v55, v64);
        v56 = vaddq_f32(v56, v65);
      }
      *(float32x4_t *)v31->f32 = vmulq_n_f32(v53, a7);
      *(float32x4_t *)v33->f32 = vmulq_n_f32(v54, a7);
      *(float32x4_t *)v35->f32 = vmulq_n_f32(v55, a7);
    }
    if (i)
    {
      v77 = (float32x2_t *)(a5 + v10 * v8);
      v78 = (float32x2_t *)((char *)v77 + v8);
      v79 = &v77[(unint64_t)v8 / 4];
      v80 = (float32x2_t *)((char *)&v77[(unint64_t)v8 / 4] + v8);
      v81 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v82 = *v81;
          v83 = v81[1].f32[0];
          v81 = (float32x2_t *)((char *)v81 - v9);
          v84 = (float)(vaddv_f32(vmul_f32(v82, *v78)) + (float)(v78[1].f32[0] * v83)) * a7;
          v85 = (float)(vaddv_f32(vmul_f32(v82, *v79)) + (float)(v79[1].f32[0] * v83)) * a7;
          v86 = (float)(vaddv_f32(vmul_f32(v82, *v80)) + (float)(v80[1].f32[0] * v83)) * a7;
          v77[1].f32[0] = (float)(vaddv_f32(vmul_f32(v82, *v77)) + (float)(v77[1].f32[0] * v83)) * a7;
          v78[1].f32[0] = v84;
          v79[1].f32[0] = v85;
          v80[1].f32[0] = v86;
        }
        v87 = *v81;
        v81 = (float32x2_t *)((char *)v81 - v9);
        v88 = vaddv_f32(vmul_f32(v87, *v78)) * a7;
        v89 = vaddv_f32(vmul_f32(v87, *v79)) * a7;
        v90 = vaddv_f32(vmul_f32(v87, *v80)) * a7;
        v77->f32[1] = vaddv_f32(vmul_f32(v87, *v77)) * a7;
        v78->f32[1] = v88;
        v79->f32[1] = v89;
        v80->f32[1] = v90;
      }
      v91 = (float)(v81->f32[0] * v78->f32[0]) * a7;
      v92 = (float)(v81->f32[0] * v79->f32[0]) * a7;
      v93 = (float)(v81->f32[0] * v80->f32[0]) * a7;
      v77->f32[0] = (float)(v81->f32[0] * v77->f32[0]) * a7;
      v78->f32[0] = v91;
      v79->f32[0] = v92;
      v80->f32[0] = v93;
    }
    v10 += 4;
    v76 = v11 <= 4;
    v11 -= 4;
  }
  while (!v76);
  v76 = v11 <= -3;
  a2 = v11 + 3;
  if (!v76)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v113 = vmulq_n_f32(v119, a7))
      {
        j -= 4;
        v95 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v96 = (int32x4_t *)((char *)v95 + v8);
        v97 = (float *)(a3 + j * v9 + 4 * j);
        v98 = (float32x2_t *)&v97[(unint64_t)v9 / 4];
        v99 = (float32x4_t *)&v97[(unint64_t)v9 / 2];
        v100 = (float32x4_t *)&v97[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v101 = j;
        v102 = *v97;
        v103 = (__int32 *)(a3 + j * v9);
        v104 = *v98;
        v105 = (__int32 *)v98 - j;
        v106 = *v99;
        v107 = (__int32 *)v99 - j;
        v108 = *v100;
        v109 = (__int32 *)v100 - j;
        v110 = *v95;
        v111 = (float32x2_t *)(a5 + v10 * v8);
        v112 = *v96;
        v113 = (float32x4_t *)((char *)v96 - 4 * j);
        v114 = vtrn1q_s32(v110, v112);
        v115 = vtrn2q_s32(v110, v112);
        *(float32x2_t *)v116.i8 = vmul_n_f32(*(float32x2_t *)v114.i8, v102);
        *(float32x2_t *)v117.i8 = vadd_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v104.f32[0]), vmul_lane_f32(*(float32x2_t *)v115.i8, v104, 1));
        v116.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v106.f32[0]), (float32x2_t)v114.u64[1], v106, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v106.f32, 1));
        v117.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v108.f32[0]), (float32x2_t)v114.u64[1], v108, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v108.f32, 1)), vmul_laneq_f32((float32x2_t)v115.u64[1], v108, 3));
        v118 = (float32x4_t)vtrn1q_s32(v116, v117);
        v119 = (float32x4_t)vtrn2q_s32(v116, v117);
        if ((j & 1) != 0)
        {
          v120.i32[0] = *v103++;
          v120.i32[1] = *v105++;
          v120.i32[2] = *v107++;
          v120.i32[3] = *v109++;
          v121 = v111->f32[0];
          v111 = (float32x2_t *)((char *)v111 + 4);
          v122 = v113->f32[0];
          v113 = (float32x4_t *)((char *)v113 + 4);
          v118 = vmlaq_n_f32(v118, v120, v121);
          v119 = vmlaq_n_f32(v119, v120, v122);
          v101 = j - 1;
        }
        if (v101)
        {
          v123 = 0uLL;
          v124 = 0uLL;
          do
          {
            v125.i64[0] = *(_QWORD *)v103;
            v103 += 2;
            v126.i64[0] = *(_QWORD *)v105;
            v105 += 2;
            v127 = *(_QWORD *)v107;
            v107 += 2;
            v128 = *(_QWORD *)v109;
            v109 += 2;
            v129 = *v111++;
            v130 = *(float32x2_t *)v113->f32;
            v113 = (float32x4_t *)((char *)v113 + 8);
            v125.i64[1] = v127;
            v126.i64[1] = v128;
            v131 = (float32x4_t)vtrn1q_s32(v125, v126);
            v132 = (float32x4_t)vtrn2q_s32(v125, v126);
            v118 = vmlaq_n_f32(v118, v131, v129.f32[0]);
            v119 = vmlaq_n_f32(v119, v131, v130.f32[0]);
            v123 = vmlaq_lane_f32(v123, v132, v129, 1);
            v124 = vmlaq_lane_f32(v124, v132, v130, 1);
            v76 = v101 <= 2;
            v101 -= 2;
          }
          while (!v76);
          v118 = vaddq_f32(v118, v123);
          v119 = vaddq_f32(v119, v124);
        }
        *(float32x4_t *)v111->f32 = vmulq_n_f32(v118, a7);
      }
      if (j)
      {
        v133 = (float32x2_t *)(a5 + v10 * v8);
        v134 = (float32x2_t *)((char *)v133 + v8);
        v135 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v136 = *v135;
            v137 = v135[1].f32[0];
            v135 = (float32x2_t *)((char *)v135 - v9);
            v138 = (float)(vaddv_f32(vmul_f32(v136, *v134)) + (float)(v134[1].f32[0] * v137)) * a7;
            v133[1].f32[0] = (float)(vaddv_f32(vmul_f32(v136, *v133)) + (float)(v133[1].f32[0] * v137)) * a7;
            v134[1].f32[0] = v138;
          }
          v139 = *v135;
          v135 = (float32x2_t *)((char *)v135 - v9);
          v140 = vaddv_f32(vmul_f32(v139, *v134)) * a7;
          v133->f32[1] = vaddv_f32(vmul_f32(v139, *v133)) * a7;
          v134->f32[1] = v140;
        }
        v141 = (float)(v135->f32[0] * v134->f32[0]) * a7;
        v133->f32[0] = (float)(v135->f32[0] * v133->f32[0]) * a7;
        v134->f32[0] = v141;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v157 = vmulq_n_f32(v161, a7))
      {
        k -= 4;
        v143 = (float *)(a3 + k * v9 + 4 * k);
        v144 = (float32x2_t *)&v143[(unint64_t)v9 / 4];
        v145 = (float32x4_t *)&v143[(unint64_t)v9 / 2];
        v146 = (float32x4_t *)&v143[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v147 = k;
        v148 = *v143;
        v149 = (__int32 *)(a3 + k * v9);
        v150 = *v144;
        v151 = (__int32 *)v144 - k;
        v152 = *v145;
        v153 = (__int32 *)v145 - k;
        v154 = *v146;
        v155 = (__int32 *)v146 - k;
        v156 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v157 = (float32x4_t *)(a5 + v10 * v8);
        v152.i32[3] = 0;
        v158 = vmulq_f32(v154, v156);
        v159 = vmulq_f32(v152, v156);
        v160 = vmul_f32(v150, *(float32x2_t *)v156.f32);
        *(float *)v7.i32 = v148 * v156.f32[0];
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160.f32[0] = vaddv_f32(v160);
        v158.f32[0] = vaddv_f32(*(float32x2_t *)v158.f32);
        v159.f32[0] = vaddv_f32(*(float32x2_t *)v159.f32);
        *(int32x2_t *)v161.f32 = vtrn1_s32(v7, (int32x2_t)v160);
        *(int32x2_t *)&v161.u32[2] = vtrn1_s32(*(int32x2_t *)v159.f32, *(int32x2_t *)v158.f32);
        if ((k & 1) != 0)
        {
          v162.i32[0] = *v149++;
          v162.i32[1] = *v151++;
          v162.i32[2] = *v153++;
          v162.i32[3] = *v155++;
          v163 = v157->f32[0];
          v157 = (float32x4_t *)((char *)v157 + 4);
          v161 = vmlaq_n_f32(v161, v162, v163);
          v147 = k - 1;
        }
        if (v147)
        {
          v164 = 0uLL;
          do
          {
            v165.i64[0] = *(_QWORD *)v149;
            v149 += 2;
            v166.i64[0] = *(_QWORD *)v151;
            v151 += 2;
            v167 = *(_QWORD *)v153;
            v153 += 2;
            v168 = *(_QWORD *)v155;
            v155 += 2;
            v169 = *(float32x2_t *)v157->f32;
            v157 = (float32x4_t *)((char *)v157 + 8);
            v165.i64[1] = v167;
            v166.i64[1] = v168;
            v161 = vmlaq_n_f32(v161, (float32x4_t)vtrn1q_s32(v165, v166), v169.f32[0]);
            v164 = vmlaq_lane_f32(v164, (float32x4_t)vtrn2q_s32(v165, v166), v169, 1);
            v76 = v147 <= 2;
            v147 -= 2;
          }
          while (!v76);
          v161 = vaddq_f32(v161, v164);
        }
      }
      if (k)
      {
        v170 = (float32x2_t *)(a5 + v10 * v8);
        v171 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v172 = *v171;
            v173 = v171[1].f32[0];
            v171 = (float32x2_t *)((char *)v171 - v9);
            v170[1].f32[0] = (float)(vaddv_f32(vmul_f32(v172, *v170)) + (float)(v170[1].f32[0] * v173)) * a7;
          }
          v174 = *v171;
          v171 = (float32x2_t *)((char *)v171 - v9);
          v170->f32[1] = vaddv_f32(vmul_f32(v174, *v170)) * a7;
        }
        v170->f32[0] = (float)(v171->f32[0] * v170->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A282D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  float *v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  __int32 *v22;
  float v23;
  __int32 *v24;
  float32x2_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  int64x2_t v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  BOOL v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32_t v87;
  uint64_t j;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  float *v92;
  float32x2_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  __int32 *v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  __int32 *v100;
  float32x4_t v101;
  __int32 *v102;
  int32x4_t v103;
  float32x2_t *v104;
  int32x4_t v105;
  float32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32_t v129;
  float32_t v130;
  float32_t v131;
  uint64_t k;
  uint64_t v133;
  float *v134;
  float32x2_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  __int32 *v138;
  float v139;
  __int32 *v140;
  float32x2_t v141;
  __int32 *v142;
  float32x4_t v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  float32x2_t v161;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v36 = vmulq_n_f32(v53, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = a3 + i * v9 + 4 * i;
      v18 = (float *)(v17 + v9);
      v19 = (float32x2_t *)(v17 + 2 * v9);
      v20 = (float32x4_t *)(v17 + v9 + 2 * v9);
      v21 = i;
      v22 = (__int32 *)(a3 + i * v9);
      v23 = *v18;
      v24 = (__int32 *)&v18[-i];
      v25 = *v19;
      v26 = (__int32 *)v19 - i;
      v27 = *v20;
      v28 = (__int32 *)v20 - i;
      v29 = *v13;
      v30 = (float32x2_t *)(a5 + v10 * v8);
      v31 = *v14;
      v32 = (float32x2_t *)((char *)v14 - 4 * i);
      v33 = *v15;
      v34 = (float32x2_t *)((char *)v15 - 4 * i);
      v35 = *v16;
      v36 = (float32x4_t *)((char *)v16 - 4 * i);
      v37 = (int32x4_t)vtrn1q_s64(v29, v33);
      v38 = (int32x4_t)vtrn1q_s64(v31, v35);
      v39 = (int32x4_t)vtrn2q_s64(v29, v33);
      v40 = (int32x4_t)vtrn2q_s64(v31, v35);
      v41 = (float32x4_t)vtrn1q_s32(v37, v38);
      v42 = (float32x4_t)vtrn2q_s32(v37, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (int64x2_t)vmlaq_n_f32(v42, v41, v23);
      v45 = (int64x2_t)vaddq_f32(vmlaq_n_f32(v43, v41, v25.f32[0]), vmulq_lane_f32(v42, v25, 1));
      v46 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vtrn2q_s32(v39, v40), v41, v27.f32[0]), v43, v27, 2), vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1));
      v47 = (int32x4_t)vtrn1q_s64((int64x2_t)v41, v45);
      v48 = (int32x4_t)vtrn1q_s64(v44, v46);
      v49 = (int32x4_t)vtrn2q_s64((int64x2_t)v41, v45);
      v7 = (float32x4_t)vtrn2q_s64(v44, v46);
      v50 = (float32x4_t)vtrn1q_s32(v47, v48);
      v51 = (float32x4_t)vtrn2q_s32(v47, v48);
      v52 = (float32x4_t)vtrn1q_s32(v49, (int32x4_t)v7);
      v53 = (float32x4_t)vtrn2q_s32(v49, (int32x4_t)v7);
      if ((i & 1) != 0)
      {
        v54.i32[0] = *v22++;
        v54.i32[1] = *v24++;
        v54.i32[2] = *v26++;
        v54.i32[3] = *v28++;
        v55 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v56 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v57 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        v58 = v36->f32[0];
        v36 = (float32x4_t *)((char *)v36 + 4);
        v50 = vmlaq_n_f32(v50, v54, v55);
        v51 = vmlaq_n_f32(v51, v54, v56);
        v52 = vmlaq_n_f32(v52, v54, v57);
        v53 = vmlaq_n_f32(v53, v54, v58);
        v21 = i - 1;
      }
      if (v21)
      {
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        do
        {
          v63.i64[0] = *(_QWORD *)v22;
          v22 += 2;
          v64.i64[0] = *(_QWORD *)v24;
          v24 += 2;
          v65 = *(_QWORD *)v26;
          v26 += 2;
          v66 = *(_QWORD *)v28;
          v28 += 2;
          v67 = *v30++;
          v68 = *v32++;
          v69 = *v34++;
          v70 = *(float32x2_t *)v36->f32;
          v36 = (float32x4_t *)((char *)v36 + 8);
          v63.i64[1] = v65;
          v64.i64[1] = v66;
          v71 = (float32x4_t)vtrn1q_s32(v63, v64);
          v7 = (float32x4_t)vtrn2q_s32(v63, v64);
          v50 = vmlaq_n_f32(v50, v71, v67.f32[0]);
          v51 = vmlaq_n_f32(v51, v71, v68.f32[0]);
          v52 = vmlaq_n_f32(v52, v71, v69.f32[0]);
          v53 = vmlaq_n_f32(v53, v71, v70.f32[0]);
          v59 = vmlaq_lane_f32(v59, v7, v67, 1);
          v60 = vmlaq_lane_f32(v60, v7, v68, 1);
          v61 = vmlaq_lane_f32(v61, v7, v69, 1);
          v62 = vmlaq_lane_f32(v62, v7, v70, 1);
          v72 = v21 <= 2;
          v21 -= 2;
        }
        while (!v72);
        v50 = vaddq_f32(v50, v59);
        v51 = vaddq_f32(v51, v60);
        v52 = vaddq_f32(v52, v61);
        v53 = vaddq_f32(v53, v62);
      }
      *(float32x4_t *)v30->f32 = vmulq_n_f32(v50, a7);
      *(float32x4_t *)v32->f32 = vmulq_n_f32(v51, a7);
      *(float32x4_t *)v34->f32 = vmulq_n_f32(v52, a7);
    }
    if (i)
    {
      v73 = (float32x2_t *)(a5 + v10 * v8);
      v74 = (float32x2_t *)((char *)v73 + v8);
      v75 = &v73[(unint64_t)v8 / 4];
      v76 = (float32x2_t *)((char *)&v73[(unint64_t)v8 / 4] + v8);
      v77 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v78 = *v77;
          v77 = (float32x2_t *)((char *)v77 - v9);
          v79 = (float)(vaddv_f32(vmul_f32(v78, *v74)) + v74[1].f32[0]) * a7;
          v80 = (float)(vaddv_f32(vmul_f32(v78, *v75)) + v75[1].f32[0]) * a7;
          v81 = (float)(vaddv_f32(vmul_f32(v78, *v76)) + v76[1].f32[0]) * a7;
          v73[1].f32[0] = (float)(vaddv_f32(vmul_f32(v78, *v73)) + v73[1].f32[0]) * a7;
          v74[1].f32[0] = v79;
          v75[1].f32[0] = v80;
          v76[1].f32[0] = v81;
        }
        v82 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v74)) + (float)(v77->f32[0] * COERCE_FLOAT(*v74))) * a7;
        v83 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v75)) + (float)(v77->f32[0] * COERCE_FLOAT(*v75))) * a7;
        v84 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v76)) + (float)(v77->f32[0] * COERCE_FLOAT(*v76))) * a7;
        v73->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v73)) + (float)(v77->f32[0] * COERCE_FLOAT(*v73)))
                    * a7;
        v74->f32[1] = v82;
        v75->f32[1] = v83;
        v76->f32[1] = v84;
      }
      v85 = v74->f32[0] * a7;
      v86 = v75->f32[0] * a7;
      v87 = v76->f32[0] * a7;
      v73->f32[0] = v73->f32[0] * a7;
      v74->f32[0] = v85;
      v75->f32[0] = v86;
      v76->f32[0] = v87;
    }
    v10 += 4;
    v72 = v11 <= 4;
    v11 -= 4;
  }
  while (!v72);
  v72 = v11 <= -3;
  a2 = v11 + 3;
  if (!v72)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v106 = vmulq_n_f32(v112, a7))
      {
        j -= 4;
        v89 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v90 = (int32x4_t *)((char *)v89 + v8);
        v91 = a3 + j * v9 + 4 * j;
        v92 = (float *)(v91 + v9);
        v93 = (float32x2_t *)(v91 + 2 * v9);
        v94 = (float32x4_t *)(v91 + v9 + 2 * v9);
        v95 = j;
        v96 = (__int32 *)(a3 + j * v9);
        v97 = *v92;
        v98 = (__int32 *)&v92[-j];
        v99 = *v93;
        v100 = (__int32 *)v93 - j;
        v101 = *v94;
        v102 = (__int32 *)v94 - j;
        v103 = *v89;
        v104 = (float32x2_t *)(a5 + v10 * v8);
        v105 = *v90;
        v106 = (float32x4_t *)((char *)v90 - 4 * j);
        v107 = vtrn1q_s32(v103, v105);
        v108 = vtrn2q_s32(v103, v105);
        *(float32x2_t *)v109.i8 = vmla_n_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v107.i8, v97);
        v110 = vadd_f32(vmla_laneq_f32(vmla_n_f32((float32x2_t)v108.u64[1], *(float32x2_t *)v107.i8, v101.f32[0]), (float32x2_t)v107.u64[1], v101, 2), vmul_lane_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v101.f32, 1));
        v107.u64[1] = (unint64_t)vadd_f32(vmla_n_f32((float32x2_t)v107.u64[1], *(float32x2_t *)v107.i8, v99.f32[0]), vmul_lane_f32(*(float32x2_t *)v108.i8, v99, 1));
        v109.u64[1] = (unint64_t)v110;
        v111 = (float32x4_t)vtrn1q_s32(v107, v109);
        v112 = (float32x4_t)vtrn2q_s32(v107, v109);
        if ((j & 1) != 0)
        {
          v113.i32[0] = *v96++;
          v113.i32[1] = *v98++;
          v113.i32[2] = *v100++;
          v113.i32[3] = *v102++;
          v114 = v104->f32[0];
          v104 = (float32x2_t *)((char *)v104 + 4);
          v115 = v106->f32[0];
          v106 = (float32x4_t *)((char *)v106 + 4);
          v111 = vmlaq_n_f32(v111, v113, v114);
          v112 = vmlaq_n_f32(v112, v113, v115);
          v95 = j - 1;
        }
        if (v95)
        {
          v116 = 0uLL;
          v117 = 0uLL;
          do
          {
            v118.i64[0] = *(_QWORD *)v96;
            v96 += 2;
            v119.i64[0] = *(_QWORD *)v98;
            v98 += 2;
            v120 = *(_QWORD *)v100;
            v100 += 2;
            v121 = *(_QWORD *)v102;
            v102 += 2;
            v122 = *v104++;
            v123 = *(float32x2_t *)v106->f32;
            v106 = (float32x4_t *)((char *)v106 + 8);
            v118.i64[1] = v120;
            v119.i64[1] = v121;
            v124 = (float32x4_t)vtrn1q_s32(v118, v119);
            v7 = (float32x4_t)vtrn2q_s32(v118, v119);
            v111 = vmlaq_n_f32(v111, v124, v122.f32[0]);
            v112 = vmlaq_n_f32(v112, v124, v123.f32[0]);
            v116 = vmlaq_lane_f32(v116, v7, v122, 1);
            v117 = vmlaq_lane_f32(v117, v7, v123, 1);
            v72 = v95 <= 2;
            v95 -= 2;
          }
          while (!v72);
          v111 = vaddq_f32(v111, v116);
          v112 = vaddq_f32(v112, v117);
        }
        *(float32x4_t *)v104->f32 = vmulq_n_f32(v111, a7);
      }
      if (j)
      {
        v125 = (float32x2_t *)(a5 + v10 * v8);
        v126 = (float32x2_t *)((char *)v125 + v8);
        v127 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v128 = *v127;
            v127 = (float32x2_t *)((char *)v127 - v9);
            v129 = (float)(vaddv_f32(vmul_f32(v128, *v126)) + v126[1].f32[0]) * a7;
            v125[1].f32[0] = (float)(vaddv_f32(vmul_f32(v128, *v125)) + v125[1].f32[0]) * a7;
            v126[1].f32[0] = v129;
          }
          v130 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v126)) + (float)(v127->f32[0] * COERCE_FLOAT(*v126)))
               * a7;
          v125->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v125))
                               + (float)(v127->f32[0] * COERCE_FLOAT(*v125)))
                       * a7;
          v126->f32[1] = v130;
        }
        v131 = v126->f32[0] * a7;
        v125->f32[0] = v125->f32[0] * a7;
        v126->f32[0] = v131;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v146 = vmulq_n_f32(v150, a7))
      {
        k -= 4;
        v133 = a3 + k * v9 + 4 * k;
        v134 = (float *)(v133 + v9);
        v135 = (float32x2_t *)(v133 + 2 * v9);
        v136 = (float32x4_t *)(v133 + v9 + 2 * v9);
        v137 = k;
        v138 = (__int32 *)(a3 + k * v9);
        v139 = *v134;
        v140 = (__int32 *)&v134[-k];
        v141 = *v135;
        v142 = (__int32 *)v135 - k;
        v143 = *v136;
        v144 = (__int32 *)v136 - k;
        v145 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v146 = (float32x4_t *)(a5 + v10 * v8);
        v143.i32[3] = 0;
        v147 = vmulq_f32(v143, v145);
        v148 = vmul_f32(v141, *(float32x2_t *)v145.f32);
        v7.f32[0] = v139 * v145.f32[0];
        v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
        *(int32x2_t *)v149.f32 = vtrn1_s32(*(int32x2_t *)v145.f32, *(int32x2_t *)v7.f32);
        *(int32x2_t *)&v149.u32[2] = vtrn1_s32((int32x2_t)vpadd_f32(v148, v148), (int32x2_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32));
        v145.i32[0] = 0;
        v150 = vaddq_f32(v149, v145);
        if ((k & 1) != 0)
        {
          v151.i32[0] = *v138++;
          v151.i32[1] = *v140++;
          v151.i32[2] = *v142++;
          v151.i32[3] = *v144++;
          v152 = v146->f32[0];
          v146 = (float32x4_t *)((char *)v146 + 4);
          v150 = vmlaq_n_f32(v150, v151, v152);
          v137 = k - 1;
        }
        if (v137)
        {
          v153 = 0uLL;
          do
          {
            v154.i64[0] = *(_QWORD *)v138;
            v138 += 2;
            v155.i64[0] = *(_QWORD *)v140;
            v140 += 2;
            v156 = *(_QWORD *)v142;
            v142 += 2;
            v157 = *(_QWORD *)v144;
            v144 += 2;
            v158 = *(float32x2_t *)v146->f32;
            v146 = (float32x4_t *)((char *)v146 + 8);
            v154.i64[1] = v156;
            v155.i64[1] = v157;
            v7 = (float32x4_t)vtrn2q_s32(v154, v155);
            v150 = vmlaq_n_f32(v150, (float32x4_t)vtrn1q_s32(v154, v155), v158.f32[0]);
            v153 = vmlaq_lane_f32(v153, v7, v158, 1);
            v72 = v137 <= 2;
            v137 -= 2;
          }
          while (!v72);
          v150 = vaddq_f32(v150, v153);
        }
      }
      if (k)
      {
        v159 = (float32x2_t *)(a5 + v10 * v8);
        v160 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v161 = *v160;
            v160 = (float32x2_t *)((char *)v160 - v9);
            v159[1].f32[0] = (float)(vaddv_f32(vmul_f32(v161, *v159)) + v159[1].f32[0]) * a7;
          }
          v159->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v159))
                               + (float)(v160->f32[0] * COERCE_FLOAT(*v159)))
                       * a7;
        }
        v159->f32[0] = v159->f32[0] * a7;
      }
    }
  }
  return result;
}

_OWORD *sub_239A28970(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  float32x4_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  _OWORD *v49;
  _OWORD *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;

  v8 = _X2;
  v9 = 4 * a4;
  v11 = *(float32x4_t *)a1;
  v12 = *((float32x4_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float32x4_t *)v10;
  v15 = *((float32x4_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v27 = *_X2;
    v28 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v31 = *_X2;
    v32 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    _X2 = v8 + 2;
    v36 = v6;
    v37 = v6;
    v38 = v6;
    v39 = v6;
    v40 = v6;
    v41 = v6;
    v42 = v6;
    v44 = *(float32x4_t *)a2;
    v45 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
    v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
    v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
    v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
    v11 = v14;
    v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
    v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
    v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
    v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
    v12 = v15;
    v14 = *(float32x4_t *)result;
    v15 = *((float32x4_t *)result + 1);
    result += 2;
    v44 = *((float32x4_t *)a2 + 1);
    v45 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v16 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
        v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
        v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
        v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
        v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
        v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
        v11 = *(float32x4_t *)result;
        v12 = *((float32x4_t *)result + 1);
        v49 = result + 2;
        v44 = *(float32x4_t *)_X6;
        v50 = _X6 + 1;
        v6 = vmlaq_n_f32(v6, v14, v45.f32[0]);
        v37 = vmlaq_lane_f32(v37, v14, *(float32x2_t *)v45.f32, 1);
        v39 = vmlaq_laneq_f32(v39, v14, v45, 2);
        v41 = vmlaq_laneq_f32(v41, v14, v45, 3);
        v36 = vmlaq_n_f32(v36, v15, v45.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v45.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v45, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v45, 3);
        v14 = *(float32x4_t *)v49;
        v15 = *((float32x4_t *)v49 + 1);
        result = v49 + 2;
        v45 = *(float32x4_t *)v50;
        _X6 = v50 + 1;
        v16 -= 2;
      }
      while (v16);
      v23 = vaddq_f32(v23, v6);
      v24 = vaddq_f32(v24, v36);
      v27 = vaddq_f32(v27, v37);
      v28 = vaddq_f32(v28, v38);
      v31 = vaddq_f32(v31, v39);
      v32 = vaddq_f32(v32, v40);
      v34 = vaddq_f32(v34, v41);
      v35 = vaddq_f32(v35, v42);
    }
    *v8 = v23;
    v8[1] = v24;
    v51 = (float32x4_t *)((char *)v8 + v9);
    *v51 = v27;
    v51[1] = v28;
    v52 = (float32x4_t *)((char *)v51 + v9);
    *v52 = v31;
    v52[1] = v32;
    v53 = (float32x4_t *)((char *)v52 + v9);
    *v53 = v34;
    v53[1] = v35;
    v8 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

void sub_239A28AD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v53;
  uint64_t v54;
  void (*v55)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  double *(*v57)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  uint64_t v61;
  const double *v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t vars0;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(void);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double *(*v84)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v85;
  float64x2_t *v86;

  v23 = MEMORY[0x24BDAC7A8]();
  v68 = v29;
  v30 = v25;
  v67 = v31;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  if (v23 == 111)
    v34 = 1;
  else
    v34 = v27;
  v77 = v34;
  v35 = (uint64_t (*)(void))MEMORY[0x24BDB2C98];
  v79 = v27;
  if (v23 == 111)
    v36 = v27;
  else
    v36 = 1;
  v64 = v36;
  if (v23 == 111)
    v35 = MEMORY[0x24BDB2C90];
  v76 = v35;
  v37 = sub_239A30D08;
  if (v23 == 111)
    v37 = sub_239A309DC;
  v66 = v37;
  v38 = (v25 << 6) + 4108;
  if (a12 == -1)
  {
    v43 = 8 * v38;
    if (v25 < 65)
      v43 = 0;
    v42 = (double)(unint64_t)v43;
    goto LABEL_19;
  }
  v39 = v26;
  v40 = v24;
  v41 = v28;
  if (v25 >= 65 && a12)
  {
    if (8 * v38 > a12)
    {
      v42 = (double)(unint64_t)(8 * v38);
LABEL_19:
      *a11 = v42;
      return;
    }
    goto LABEL_22;
  }
  if (v25 >= 65)
  {
LABEL_22:
    v86 = (float64x2_t *)a11;
    v63 = a11;
    if (!a11)
      v86 = (float64x2_t *)malloc_type_malloc(8 * v38, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v63 = a11;
  v86 = (float64x2_t *)&a23;
LABEL_24:
  if (v39 >= 1)
  {
    vars0 = 0;
    v44 = 0;
    v85 = v30 - 3;
    if (v30 <= 0)
      v46 = -(-v30 & 3);
    else
      v46 = v30 & 3;
    v81 = v46;
    v74 = v40;
    v71 = a10 + 512;
    v47 = 64;
    v75 = v30;
    v65 = v39;
    do
    {
      v69 = v47;
      if (v39 >= v47)
        v48 = v47;
      else
        v48 = v39;
      if (v44 + 64 <= v39)
        v49 = 64;
      else
        v49 = v39 - v44;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v66)(v67, v49, v30, v68 + 8 * v44 * v79 + 8 * v44, v41);
      dgePack_B_NoTran();
      v70 = v44 + 64;
      if (v44 + 64 < v40)
      {
        v50 = v71;
        v51 = 32 * (v48 + vars0);
        v78 = v68 + 8 * v44 * v64;
        v53 = v41 != 1.0 && v44 == 0 && v41 != 0.0;
        v54 = v44 + 64;
        v84 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
        v55 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A26E70;
        do
        {
          v82 = v54 + 64;
          if (v54 + 64 <= v40)
            v56 = 64;
          else
            v56 = v40 - v54;
          v80 = v54;
          if ((v56 & 7) != 0)
            v55 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A308B0;
          v57 = v84;
          if ((v56 & 7) != 0)
            v57 = sub_239A2BE00;
          v84 = v57;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))v76)(v56, v49, v78 + 8 * v54 * v77, v79, v86);
          v83 = v50;
          v58 = 0;
          if (v30 >= 4)
          {
            v59 = (float64x2_t *)v50;
            v60 = v86 + 2052;
            do
            {
              if (v53)
                v84(v86, v60, v59, a9, v56, v49, v41);
              else
                v55(v86, v60, v59, a9, v56, v49);
              v58 += 4;
              v60 = (float64x2_t *)((char *)v60 + v51);
              v59 += 2 * a9;
            }
            while (v58 < v85);
          }
          v30 = v75;
          if (v81)
          {
            v61 = a10 + 8 * v80 + 8 * v58 * a9;
            v62 = &v86[2052].f64[v58 * v49];
            if (v53)
              sub_239A30304(v86, v62, v61, a9, v56, v81, v49, v41);
            else
              sub_239A30480(v86, v62, v61, a9, v56, v81, v49);
          }
          v50 = v83 + 512;
          v54 = v82;
          v40 = v74;
        }
        while (v82 < v74);
      }
      v44 = v70;
      v47 = v69 + 64;
      v71 += 512;
      vars0 -= 64;
      v41 = 1.0;
      v39 = v65;
    }
    while (v70 < v65);
  }
  if (v30 >= 65 && !v63)
    free(v86);
}

void sub_239A28F30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19)
{
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *(*v51)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v52)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  const double *v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int v62;
  uint64_t vars0;
  uint64_t (*vars8)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double *(*v72)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v73)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  float64x2_t *v74;

  v19 = MEMORY[0x24BDAC7A8]();
  v25 = v20;
  v62 = v26;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  if (v19 == 111)
    v28 = 1;
  else
    v28 = v23;
  v66 = v28;
  v29 = (uint64_t (*)(void))MEMORY[0x24BDB2C98];
  v68 = v23;
  if (v19 == 111)
    v30 = v23;
  else
    v30 = 1;
  v60 = v30;
  if (v19 == 111)
    v29 = MEMORY[0x24BDB2C90];
  vars8 = v29;
  v31 = sub_239A30B68;
  if (v19 == 111)
    v31 = sub_239A30E94;
  v61 = v31;
  v32 = (v20 << 6) + 4108;
  if (a12 == -1)
  {
    v37 = 8 * v32;
    if (v20 < 65)
      v37 = 0;
    v36 = (double)(unint64_t)v37;
    goto LABEL_19;
  }
  v33 = v22;
  v34 = v21;
  v35 = v24;
  if (v20 >= 65 && a12)
  {
    if (8 * v32 > a12)
    {
      v36 = (double)(unint64_t)(8 * v32);
LABEL_19:
      *a11 = v36;
      return;
    }
    goto LABEL_22;
  }
  if (v20 >= 65)
  {
LABEL_22:
    v74 = (float64x2_t *)a11;
    v58 = a11;
    if (!a11)
      v74 = (float64x2_t *)malloc_type_malloc(8 * v32, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v58 = a11;
  v74 = (float64x2_t *)&a19;
LABEL_24:
  if ((uint64_t)v34 >= 1)
  {
    v38 = v25 - 3;
    if (v25 <= 0)
      v39 = -(-v25 & 3);
    else
      v39 = v25 & 3;
    v69 = v39;
    v40 = 1;
    vars0 = v25;
    v59 = v33;
    while (1)
    {
      v41 = v34 >= 0x40 ? v34 - 64 : 0;
      v42 = v34 >= 0x40 ? 64 : v34;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v61)(v62, v42, v25, v33 + 8 * v41 * v68 + 8 * v41, v35);
      dgePack_B_NoTran();
      if (v34 < 0x41)
        break;
      v67 = v33 + 8 * v41 * v60;
      v43 = v35 != 1.0;
      if (v35 == 0.0)
        v43 = 0;
      v44 = v40 & v43;
      v45 = v41;
      v73 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
      v72 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A26E70;
      do
      {
        v46 = v45;
        v47 = v45 >= 0x40;
        v48 = v45 - 64;
        if (v47)
          v49 = 64;
        else
          v49 = v46;
        if (!v47)
          v48 = 0;
        v70 = v48;
        v71 = a10 + 8 * v48;
        v50 = v67 + 8 * v48 * v66;
        v51 = v72;
        if ((v49 & 7) != 0)
          v51 = sub_239A308B0;
        v72 = v51;
        v52 = v73;
        if ((v49 & 7) != 0)
          v52 = sub_239A2BE00;
        v73 = v52;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))vars8)(v49, v42, v50, v68, v74);
        v53 = 0;
        if (v25 >= 4)
        {
          v53 = 0;
          v54 = (float64x2_t *)v71;
          v55 = v74 + 2052;
          do
          {
            if (v44)
              v73(v74, v55, v54, v66, v49, v42, v35);
            else
              v72(v74, v55, v54, v66, v49, v42);
            v53 += 4;
            v55 += 2 * v42;
            v54 += 2 * v66;
          }
          while (v53 < v38);
        }
        if (v69)
        {
          v56 = v71 + 8 * v53 * v66;
          v57 = &v74[2052].f64[v53 * v42];
          if (v44)
            sub_239A30304(v74, v57, v56, v66, v49, v69, v42, v35);
          else
            sub_239A30480(v74, v57, v56, v66, v49, v69, v42);
        }
        v45 = v70;
        v25 = vars0;
      }
      while (v70 > 0);
      v40 = 0;
      v35 = 1.0;
      v33 = v59;
      v34 = v41;
    }
  }
  if (v25 >= 65 && !v58)
    free(v74);
}

void sub_239A29340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  unint64_t v12;
  BOOL v13;
  uint64_t i;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  const double *v19;
  const double *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  __int32 v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  double v71;
  int32x2_t v72;
  double v73;
  float32x2_t v74;
  __int32 *v75;

  v12 = 4 * a5;
  v13 = a2 <= 1;
  for (i = a2 - 1; !v13; i -= 2)
  {
    v15 = (float32x4_t *)a4;
    v16 = (float32x4_t *)(a4 + v12);
    v17 = (float32x4_t *)(a4 + 2 * v12);
    v18 = (float32x4_t *)(a4 + v12 + 2 * v12);
    v19 = a6;
    v20 = (double *)((char *)a6 + 4 * a7);
    v21 = (float32x4_t *)((char *)a8 + 8 * a12);
    v22 = __OFSUB__(a1, 3);
    v23 = a1 - 3;
    if (a1 > 3)
    {
      do
      {
        v24 = (float32x4_t)veorq_s8(a11, a11);
        v25 = v24;
        v26 = v24;
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = a3 - 3;
        if (a3 > 3)
        {
          v33 = *v15++;
          v34 = v33;
          v35 = *v16++;
          v36 = v35;
          v37 = *v17++;
          v38 = v37;
          v39 = *v18++;
          v40 = v39;
          v41 = *(float32x4_t *)v19;
          v19 += 2;
          v42 = v41;
          v43 = *(float32x4_t *)v20;
          v20 += 2;
          v44 = v43;
          v22 = __OFSUB__(v32, 4);
          v45 = v32 == 4;
          v32 = a3 - 7;
          if (!((a3 - 7 < 0) ^ v22 | v45))
          {
            do
            {
              v24 = vmlaq_f32(v24, v34, v42);
              v25 = vmlaq_f32(v25, v36, v42);
              v26 = vmlaq_f32(v26, v38, v42);
              v27 = vmlaq_f32(v27, v40, v42);
              v46 = *(float32x4_t *)v19;
              v19 += 2;
              v42 = v46;
              v28 = vmlaq_f32(v28, v34, v44);
              v47 = *v15++;
              v34 = v47;
              v29 = vmlaq_f32(v29, v36, v44);
              v48 = *v16++;
              v36 = v48;
              v30 = vmlaq_f32(v30, v38, v44);
              v49 = *v17++;
              v38 = v49;
              v31 = vmlaq_f32(v31, v40, v44);
              v50 = *v18++;
              v40 = v50;
              v51 = *(float32x4_t *)v20;
              v20 += 2;
              v44 = v51;
              v13 = v32 <= 4;
              v32 -= 4;
            }
            while (!v13);
          }
          v24 = vpaddq_f32(vmlaq_f32(v24, v34, v42), vmlaq_f32(v25, v36, v42));
          v25 = vpaddq_f32(vmlaq_f32(v26, v38, v42), vmlaq_f32(v27, v40, v42));
          v26 = vpaddq_f32(vmlaq_f32(v28, v34, v44), vmlaq_f32(v29, v36, v44));
          v27 = vpaddq_f32(vmlaq_f32(v30, v38, v44), vmlaq_f32(v31, v40, v44));
        }
        v13 = v32 <= -2;
        v52 = v32 + 2;
        if (!v13)
        {
          v53 = v15->i64[0];
          v15 = (float32x4_t *)((char *)v15 + 8);
          v54.i64[0] = v53;
          v54.i64[1] = v16->i64[0];
          v16 = (float32x4_t *)((char *)v16 + 8);
          v55 = v17->i64[0];
          v17 = (float32x4_t *)((char *)v17 + 8);
          v56.i64[0] = v55;
          v56.i64[1] = v18->i64[0];
          v18 = (float32x4_t *)((char *)v18 + 8);
          v57 = (float32x4_t)vld1q_dup_f64(v19++);
          v58 = (float32x4_t)vld1q_dup_f64(v20++);
          v24 = vmlaq_f32(v24, v54, v57);
          v25 = vmlaq_f32(v25, v56, v57);
          v26 = vmlaq_f32(v26, v54, v58);
          v27 = vmlaq_f32(v27, v56, v58);
          v52 -= 2;
        }
        v59 = vpaddq_f32(v24, v25);
        v60 = vpaddq_f32(v26, v27);
        if (v52 > -1)
        {
          v61 = v15->i32[0];
          v15 = (float32x4_t *)((char *)v15 + 4);
          v62.i32[0] = v61;
          v62.i32[1] = v16->i32[0];
          v62.i32[2] = v17->i32[0];
          v62.i32[3] = v18->i32[0];
          v59 = vmlaq_n_f32(v59, v62, *(float *)v19);
          v60 = vmlaq_n_f32(v60, v62, *(float *)v20);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v59, a9), *a8, a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v60, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)&v15[v12 / 4] - 4 * a3);
        v16 = (float32x4_t *)((char *)v15 + v12);
        v17 = (float32x4_t *)((char *)v15 + 2 * v12);
        v18 = (float32x4_t *)((char *)v15 + 2 * v12 + v12);
        v22 = __OFSUB__(v23, 4);
        v13 = v23 <= 4;
        v23 -= 4;
      }
      while (!v13);
    }
    v63 = a1 & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_18;
        v65 = v15->f32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v66 = v65;
        v67 = *(_DWORD *)v19;
        v19 = (const double *)((char *)v19 + 4);
        v68.i32[0] = v67;
        v68.i32[1] = *(_DWORD *)v20;
        v20 = (const double *)((char *)v20 + 4);
        *(float32x2_t *)a11.i8 = vmla_n_f32(*(float32x2_t *)a11.i8, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_18:
          do
          {
            v69 = *(float32x2_t *)v15->f32;
            v15 = (float32x4_t *)((char *)v15 + 8);
            v70 = v69;
            v71 = *v19++;
            v72 = *(int32x2_t *)&v71;
            v73 = *v20++;
            *(float32x2_t *)a11.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a11.i8, (float32x2_t)vtrn1_s32(v72, *(int32x2_t *)&v73), v70.f32[0]), (float32x2_t)vtrn2_s32(v72, *(int32x2_t *)&v73), v70, 1);
            v13 = v64 <= 2;
            v64 -= 2;
          }
          while (!v13);
        }
        v74.i32[0] = a8->i32[0];
        v74.i32[1] = a8->i32[a12];
        *(float32x2_t *)a11.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a11.i8, a9), v74, a10);
        v75 = &a8->i32[a12];
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v75 = a11.i32[1];
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)v15 + v12 + -4 * a3);
        v13 = v63-- <= 1;
      }
      while (!v13);
    }
    a6 += a7;
    a8 = v21;
    v13 = i <= 2;
  }
  if (i > -1)
    sub_239A2D31C(a3, a1, a4, v12 >> 2, a6, 1, a8->f32, 1, a9, a10);
}

uint64_t sub_239A295B0()
{
  size_t v1;
  uint64_t v2;

  v1 = 8;
  v2 = 0;
  if (!sysctlbyname("hw.cpufamily", &v2, &v1, 0, 0))
  {
    if (v2 > 1176831185)
    {
      if (v2 <= 2465937351)
      {
        if (v2 == 1176831186)
          return 8;
        if (v2 == 1741614739)
          return 5;
      }
      else
      {
        switch(v2)
        {
          case 2465937352:
            return 4;
          case 3660830781:
            return 10;
          case 3894312694:
            return 6;
        }
      }
    }
    else if (v2 <= 506291072)
    {
      if (v2 == 131287967)
        return 7;
      if (v2 == 458787763)
        return 9;
    }
    else
    {
      switch(v2)
      {
        case 506291073:
          return 1;
        case 747742334:
          return 3;
        case 933271106:
          return 2;
      }
    }
  }
  return 0;
}

uint64_t sub_239A29718()
{
  int v0;
  unsigned int v1;
  size_t v3;
  uint64_t v4;

  v3 = 8;
  v4 = 0;
  v0 = sysctlbyname("hw.cpusubfamily", &v4, &v3, 0, 0);
  if ((unint64_t)(v4 - 1) <= 4)
    v1 = v4;
  else
    v1 = 0;
  if (v0)
    return 0;
  else
    return v1;
}

unint64_t sub_239A2976C@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t result;
  size_t v17;
  uint64_t v18;

  v2 = sub_239A295B0();
  *(_DWORD *)(a1 + 4) = v2;
  v3 = sub_239A29718();
  *(_DWORD *)(a1 + 8) = v3;
  v17 = 8;
  v18 = 0;
  v4 = sysctlbyname("hw.perflevel0.l2cachesize", &v18, &v17, 0, 0);
  v5 = v18;
  if (v4)
    v5 = 0x800000;
  *(_QWORD *)(a1 + 40) = v5;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel0.physicalcpu_max", &v18, &v17, 0, 0))
    v6 = 2;
  else
    v6 = v18;
  *(_DWORD *)(a1 + 12) = v6;
  v17 = 8;
  v18 = 0;
  v7 = sysctlbyname("hw.perflevel0.cpusperl2", &v18, &v17, 0, 0);
  v8 = v18;
  if (v7)
    v8 = 2;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 20) = v6 / v8;
  v17 = 8;
  v18 = 0;
  v9 = sysctlbyname("hw.perflevel1.l2cachesize", &v18, &v17, 0, 0);
  v10 = v18;
  if (v9)
    v10 = 0x400000;
  *(_QWORD *)(a1 + 48) = v10;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel1.physicalcpu_max", &v18, &v17, 0, 0))
    v11 = 4;
  else
    v11 = v18;
  *(_DWORD *)(a1 + 16) = v11;
  v17 = 8;
  v18 = 0;
  v12 = sysctlbyname("hw.perflevel1.cpusperl2", &v18, &v17, 0, 0);
  v13 = v18;
  if (v12)
    v13 = 4;
  *(_DWORD *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 24) = v11 / v13;
  switch(v2)
  {
    case 8:
      v15 = 1;
      break;
    case 10:
      if ((v3 & 6) == 4)
        v15 = 8;
      else
        v15 = 3;
      break;
    case 9:
      v14 = v3 - 2;
      if (v14 >= 4)
        v15 = 2;
      else
        v15 = dword_239F0BBE0[v14];
      break;
    default:
      v15 = 0;
      break;
  }
  *(_DWORD *)a1 = v15;
  result = _get_cpu_capabilities();
  *(_DWORD *)(a1 + 56) = (result >> 59) & 2;
  return result;
}

#error "239A29EA8: call analysis failed (funcsize=366)"

void sub_239A29F80(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N, float a8)
{
  int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  if (a5 >= 1)
  {
    v9 = __N;
    v10 = a5;
    v14 = __N & 3;
    if (__N <= 0)
      v14 = -(-__N & 3);
    v15 = __N - v14 + 4;
    if ((__N & 3) == 0)
      v15 = __N;
    v16 = 4 * v15;
    do
    {
      v17 = *a3;
      *a3++ = cblas_sdot(v9, __X, 1, __Y, 1) + (float)(a8 * v17);
      __X = (const float *)((char *)__X + v16);
      --v10;
    }
    while (v10);
  }
}

float sub_239A2A024(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N)
{
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  if (a5 >= 1)
  {
    v7 = __N;
    v8 = a5;
    v12 = __N & 3;
    if (__N <= 0)
      v12 = -(-__N & 3);
    v13 = __N - v12 + 4;
    if ((__N & 3) == 0)
      v13 = __N;
    v14 = 4 * v13;
    do
    {
      result = cblas_sdot(v7, __X, 1, __Y, 1) + *a3;
      *a3++ = result;
      __X = (const float *)((char *)__X + v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_239A2A0BC(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;

  if (__N >= 1 && a6 >= 1)
  {
    v15 = 0;
    v16 = a5 - 7;
    if (a5 <= 0)
      v17 = -(-a5 & 7);
    else
      v17 = a5 & 7;
    v18 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = (float32x4_t *)(a3 + 4 * v15 * a4);
      if (a5 < 8)
      {
        v21 = a1;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v22 = __Y;
          v23 = __N;
          v24 = vmulq_n_f32(*v19, a8);
          v25 = vmulq_n_f32(v19[1], a8);
          do
          {
            v26 = *v22++;
            v27 = *v21;
            v28 = v21[1];
            v21 += 2;
            v24 = vmlaq_n_f32(v24, v27, v26);
            v25 = vmlaq_n_f32(v25, v28, v26);
            --v23;
          }
          while (v23);
          *v19 = v24;
          v19[1] = v25;
          v19 += 2;
          v20 += 8;
        }
        while (v20 < v16);
        if (!v17)
          goto LABEL_14;
      }
      sub_239A29F80(v21->f32, __Y, v19->f32, a4, v17, a6, __N, a8);
LABEL_14:
      __Y += v18;
      ++v15;
    }
    while (v15 != a6);
  }
}

void sub_239A2A1EC(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  if (__N >= 1 && a6 >= 1)
  {
    v13 = 0;
    v14 = a5 - 7;
    if (a5 <= 0)
      v15 = -(-a5 & 7);
    else
      v15 = a5 & 7;
    v16 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = (float32x4_t *)(a3 + 4 * v13 * a4);
      if (a5 < 8)
      {
        v19 = a1;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v18 = 0;
        v19 = a1;
        do
        {
          v20 = __Y;
          v21 = __N;
          v22 = *v17;
          v23 = v17[1];
          do
          {
            v24 = *v20++;
            v25 = *v19;
            v26 = v19[1];
            v19 += 2;
            v22 = vmlaq_n_f32(v22, v25, v24);
            v23 = vmlaq_n_f32(v23, v26, v24);
            --v21;
          }
          while (v21);
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
          v18 += 8;
        }
        while (v18 < v14);
        if (!v15)
          goto LABEL_14;
      }
      sub_239A2A024(v19->f32, __Y, v17->f32, a4, v15, a6, __N);
LABEL_14:
      __Y += v16;
      ++v13;
    }
    while (v13 != a6);
  }
}

float *sub_239A2A2FC(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  __int32 *v17;
  __int32 *v18;

  if (a5 >= 1)
  {
    v7 = a4;
    if (a6 <= 0)
      v8 = -(-a6 & 3);
    else
      v8 = a6 & 3;
    v9 = 4 - v8;
    if (!v8)
      v9 = 0;
    do
    {
      v10 = a2;
      v11 = a6;
      v12.i32[0] = *a3;
      v13 = &a3[v7 + v7];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v13;
      v12.i32[3] = v13[a4];
      v14 = vmulq_n_f32(v12, a7);
      do
      {
        v15 = *v10++;
        v16 = *result++;
        v14 = vmlaq_n_f32(v14, v15, v16);
        --v11;
      }
      while (v11);
      v17 = &a3[v7];
      *a3++ = v14.i32[0];
      *v17 = v14.i32[1];
      v18 = &v17[v7];
      *v18 = v14.i32[2];
      v18[a4] = v14.i32[3];
      result += v9;
      --a5;
    }
    while (a5);
  }
  return result;
}

float *sub_239A2A390(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 *v15;
  __int32 *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    if (a6 <= 0)
      v7 = -(-a6 & 3);
    else
      v7 = a6 & 3;
    v8 = 4 - v7;
    if (!v7)
      v8 = 0;
    do
    {
      v9 = a2;
      v10 = a6;
      v12.i32[0] = *a3;
      v11 = &a3[v6 + v6];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v11;
      v12.i32[3] = v11[a4];
      do
      {
        v13 = *v9++;
        v14 = *result++;
        v12 = vmlaq_n_f32(v12, v13, v14);
        --v10;
      }
      while (v10);
      v15 = &a3[v6];
      *a3++ = v12.i32[0];
      *v15 = v12.i32[1];
      v16 = &v15[v6];
      *v16 = v12.i32[2];
      v16[a4] = v12.i32[3];
      result += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_239A2A420(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12, char *a13, uint64_t a14)
{
  float32x4_t *v18;
  uint64_t v25;
  int v26;
  double v27;
  int v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;

  if (!a3 || !a4)
    return;
  v18 = (float32x4_t *)a13;
  if (a5 && a9 != 0.0)
  {
    v25 = a12;
    if (a5 == 1)
    {
      if (a10 == 0.0)
      {
        v26 = a12;
        sub_239A3C8CC(a3, a4, a13, a14);
      }
      else
      {
        if (a10 == 1.0)
        {
LABEL_31:
          if (a1 == 114 || a1 == 111)
            v31 = 1;
          else
            v31 = a7;
          if (a2 != 114 && a2 != 111)
            LODWORD(v25) = 1;
          cblas_sger(CblasColMajor, a3, a4, a9, a6->f32, v31, (const float *)a8, v25, (float *)a13, a14);
          return;
        }
        v26 = a12;
        sub_239A3C91C(a3, a4, (float *)a13, a14, a10);
      }
      LODWORD(v25) = v26;
      goto LABEL_31;
    }
    if (a10 == 0.0)
    {
      v33 = (uint64_t)a13;
      sub_239A3C8CC(a3, a4, a13, a14);
      v25 = a12;
      v18 = (float32x4_t *)a13;
    }
    *(double *)a11.i64 = fmax((double)a3 / (double)a4, (double)a4 / (double)a3);
    v27 = (double)a3 * (double)a4 * (double)a5;
    if (*(double *)a11.i64 <= 4.0)
    {
      if ((v27 < 4096.0 || a5 <= 31) && v27 < 262144.0)
        goto LABEL_14;
    }
    else if (v27 < 262144.0)
    {
LABEL_14:
      if (a2 == 111)
      {
        if (a1 == 111)
          sub_239A2D560(a3, a4, a5, a6, a7, a8, v25, v18, a9, a10, a11, a14);
        else
          sub_239A29340(a3, a4, a5, (uint64_t)a6, a7, (double *)a8, v25, v18, a9, a10, a11, a14);
      }
      else if (a1 == 111)
      {
        sub_239A336B0(a3, a4, a5, a6, a7, (float32x4_t *)a8, v25, v18, a9, a10, a11, a14);
      }
      else
      {
        sub_239A2BF70(a3, a4, a5, a6->f32, a7, a8, v25, v18, a9, a10, a11, a14);
      }
      return;
    }
    sub_239A31690(a1, a2, a3, a4, a5, (int)a6, a7, (int)a8, v25, (uint64_t)v18, a14, 0, 0, v33, v34, v35, v36, v37, v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      SWORD2(v43),
      SHIWORD(v43),
      v44);
    return;
  }
  if (a10 == 0.0)
  {
    sub_239A3C8CC(a3, a4, a13, a14);
  }
  else if (a10 != 1.0)
  {
    sub_239A3C91C(a3, a4, (float *)a13, a14, a10);
  }
}

#error "239A2AD20: call analysis failed (funcsize=366)"

_OWORD *sub_239A2AE00(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _OWORD *result;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  _OWORD *v58;
  _OWORD *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;

  v9 = _X2;
  v10 = 4 * a4;
  v12 = *(float32x4_t *)a1;
  v13 = *((float32x4_t *)a1 + 1);
  v11 = a1 + 2;
  v15 = *(float32x4_t *)v11;
  v16 = *((float32x4_t *)v11 + 1);
  result = v11 + 2;
  do
  {
    v17 = a6;
    v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
    __asm { PRFM            #1, [X2,#0x40] }
    v24 = *_X2;
    v25 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v32 = *_X2;
    v33 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    _X2 = v9 + 2;
    v37 = v7;
    v38 = v7;
    v39 = v7;
    v40 = v7;
    v41 = v7;
    v42 = v7;
    v43 = v7;
    v45 = *(float32x4_t *)a2;
    v46 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v50 = vmulq_n_f32(v24, a7);
    v51 = vmulq_n_f32(v25, a7);
    v52 = vmulq_n_f32(v28, a7);
    v53 = vmulq_n_f32(v29, a7);
    v54 = vmulq_n_f32(v32, a7);
    v55 = vmulq_n_f32(v33, a7);
    v56 = vmulq_n_f32(v35, a7);
    v57 = vmulq_n_f32(v36, a7);
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
    v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
    v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
    v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
    v12 = v15;
    v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
    v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
    v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
    v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
    v13 = v16;
    v15 = *(float32x4_t *)result;
    v16 = *((float32x4_t *)result + 1);
    result += 2;
    v45 = *((float32x4_t *)a2 + 1);
    v46 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v17 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
        v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
        v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
        v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
        v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
        v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
        v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
        v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
        v12 = *(float32x4_t *)result;
        v13 = *((float32x4_t *)result + 1);
        v58 = result + 2;
        v45 = *(float32x4_t *)_X6;
        v59 = _X6 + 1;
        v7 = vmlaq_n_f32(v7, v15, v46.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v46.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v46, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v46, 3);
        v37 = vmlaq_n_f32(v37, v16, v46.f32[0]);
        v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v46.f32, 1);
        v41 = vmlaq_laneq_f32(v41, v16, v46, 2);
        v43 = vmlaq_laneq_f32(v43, v16, v46, 3);
        v15 = *(float32x4_t *)v58;
        v16 = *((float32x4_t *)v58 + 1);
        result = v58 + 2;
        v46 = *(float32x4_t *)v59;
        _X6 = v59 + 1;
        v17 -= 2;
      }
      while (v17);
      v50 = vaddq_f32(v50, v7);
      v51 = vaddq_f32(v51, v37);
      v52 = vaddq_f32(v52, v38);
      v53 = vaddq_f32(v53, v39);
      v54 = vaddq_f32(v54, v40);
      v55 = vaddq_f32(v55, v41);
      v56 = vaddq_f32(v56, v42);
      v57 = vaddq_f32(v57, v43);
    }
    *v9 = v50;
    v9[1] = v51;
    v60 = (float32x4_t *)((char *)v9 + v10);
    *v60 = v52;
    v60[1] = v53;
    v61 = (float32x4_t *)((char *)v60 + v10);
    *v61 = v54;
    v61[1] = v55;
    v62 = (float32x4_t *)((char *)v61 + v10);
    *v62 = v56;
    v62[1] = v57;
    v9 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

void sub_239A2AF94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t (*v37)(void);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v55;
  _BOOL4 v56;
  void (*v57)(float64x2_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v58)(float64x2_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int vars8_4;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float64x2_t *v89;

  v27 = MEMORY[0x24BDAC7A8]();
  v35 = v29;
  vars8_4 = v36;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v37 = (uint64_t (*)(void))MEMORY[0x24BDB2CA8];
  if (v27 == 111)
    v37 = MEMORY[0x24BDB2CA0];
  v70 = v37;
  v38 = sub_239A31038;
  if (v27 == 111)
    v38 = sub_239A31364;
  vars0 = v38;
  v39 = (v29 << 6) + 4108;
  if (a12 == -1)
  {
    v46 = 8 * v39;
    if (v29 < 65)
      v46 = 0;
    v45 = (double)(unint64_t)v46;
    goto LABEL_13;
  }
  v40 = v33;
  v41 = v32;
  v42 = v30;
  v43 = v28;
  v44 = v34;
  v72 = v31;
  if (v29 >= 65 && a12)
  {
    if (8 * v39 > a12)
    {
      v45 = (double)(unint64_t)(8 * v39);
LABEL_13:
      *a11 = v45;
      return;
    }
    goto LABEL_16;
  }
  if (v29 >= 65)
  {
LABEL_16:
    v89 = (float64x2_t *)a11;
    v66 = a11;
    if (!a11)
      v89 = (float64x2_t *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_18;
  }
  v66 = a11;
  v89 = (float64x2_t *)&a27;
LABEL_18:
  if (v42 >= 1)
  {
    v78 = 0;
    v47 = 0;
    v88 = v35 - 3;
    if (v35 <= 0)
      v48 = -(-v35 & 3);
    else
      v48 = v35 & 3;
    v83 = v48;
    v67 = v42;
    v71 = v41 << 9;
    v87 = 32 * v41;
    v77 = 512;
    v49 = 64;
    v76 = a10 + (v41 << 9);
    v68 = v40;
    v69 = v35;
    v81 = v43;
    do
    {
      v75 = v49;
      if (v42 >= v49)
        v50 = v49;
      else
        v50 = v42;
      if (v47 + 64 <= v42)
        v51 = 64;
      else
        v51 = v42 - v47;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))vars0)(vars8_4, v43, v51, v40 + 8 * v47 * v72 + 8 * v47, v72, v44);
      v84 = v47 + 64;
      if (v35 - (v47 + 64) >= 1)
      {
        ((void (*)(uint64_t, double))v70)(v51, -1.0);
        if (v43 < 1)
        {
          v44 = 1.0;
        }
        else
        {
          v52 = 0;
          v79 = (uint64_t)&v89[2052] + v77 * (v50 + v78);
          v53 = 32 * (v50 + v78);
          v55 = v44 != 1.0 && v47 == 0;
          v56 = v44 != 0.0 && v55;
          v86 = v76;
          v57 = (void (*)(float64x2_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
          v58 = (void (*)(float64x2_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_239A26E70;
          do
          {
            v85 = v52 + 64;
            if (v52 + 64 <= v43)
              v59 = 64;
            else
              v59 = v43 - v52;
            v82 = v52;
            if ((v59 & 7) != 0)
            {
              v58 = (void (*)(float64x2_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_239A308B0;
              v57 = (void (*)(float64x2_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_239A2BE00;
            }
            v60 = v41;
            dgePack_A_NoTran();
            v61 = v84;
            if (v84 < v88)
            {
              v62 = v86;
              v63 = v79;
              v61 = v84;
              do
              {
                if (v56)
                  v57(v89, v63, v62, v60, v59, v51, v44);
                else
                  v58(v89, v63, v62, v60, v59, v51);
                v61 += 4;
                v63 += v53;
                v62 += v87;
              }
              while (v61 < v88);
            }
            v41 = v60;
            if (v83)
            {
              v64 = a10 + 8 * v82 + 8 * v61 * v60;
              v65 = &v89[2052].f64[v61 * v51];
              if (v56)
                sub_239A30304(v89, v65, v64, v60, v59, v83, v51, v44);
              else
                sub_239A30480(v89, v65, v64, v60, v59, v83, v51);
            }
            v86 += 512;
            v52 = v85;
            v43 = v81;
          }
          while (v85 < v81);
          v44 = 1.0;
          v40 = v68;
          v35 = v69;
          v42 = v67;
        }
      }
      v49 = v75 + 64;
      v77 += 512;
      v78 -= 64;
      v76 += v71;
      v47 = v84;
    }
    while (v84 < v42);
  }
  if (v35 >= 65 && !v66)
    free(v89);
}

void sub_239A2B45C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  void (*v49)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  double *(*v51)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v52;
  uint64_t v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  const double *v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v68;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double *(*v76)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v77;
  float64x2_t *v78;

  v17 = MEMORY[0x24BDAC7A8]();
  v26 = a9;
  STACK[0x10138] = *MEMORY[0x24BDAC8D0];
  v27 = (uint64_t (*)(void))MEMORY[0x24BDB2CA8];
  if (v17 == 111)
    v28 = 1;
  else
    v28 = a9;
  v65 = v28;
  if (v17 == 111)
    v27 = MEMORY[0x24BDB2CA0];
  v64 = v27;
  v29 = sub_239A314EC;
  if (v17 == 111)
    v29 = sub_239A311C0;
  v66 = v29;
  v30 = (v20 << 6) + 4108;
  if (a12 == -1)
  {
    v39 = 8 * v30;
    if (v20 < 65)
      v39 = 0;
    v38 = (double)(unint64_t)v39;
    goto LABEL_16;
  }
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v19;
  v36 = v25;
  v37 = v18;
  if (v20 >= 65 && a12)
  {
    if (8 * v30 > a12)
    {
      v38 = (double)(unint64_t)(8 * v30);
LABEL_16:
      *a11 = v38;
      return;
    }
    goto LABEL_19;
  }
  if (v20 >= 65)
  {
LABEL_19:
    v58 = a11;
    v59 = v20;
    v78 = (float64x2_t *)a11;
    if (!a11)
      v78 = (float64x2_t *)malloc_type_malloc(8 * v30, 0x100004000313F17uLL);
    goto LABEL_21;
  }
  v58 = a11;
  v59 = v20;
  v78 = (float64x2_t *)&a17;
LABEL_21:
  if (v34 >= 1)
  {
    v68 = v35;
    v71 = (uint64_t)&v78[2052];
    v77 = 32 * v32;
    v40 = 1;
    v62 = v33;
    v63 = v31;
    v61 = v37;
    v60 = v26;
    do
    {
      v41 = v34;
      v42 = (unint64_t)v34 >= 0x40;
      if ((unint64_t)v34 >= 0x40)
        v34 -= 64;
      else
        v34 = 0;
      if (v42)
        v43 = 64;
      else
        v43 = v41;
      vars8 = v33 + 8 * v34 * v32;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v66)(v37, v35, v43, v31 + 8 * v34 * v26 + 8 * v34, v26, v36);
      if (v41 >= 0x41)
      {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v64)(v43, v34, v31 + 8 * v34 * v65, v26, v71, -1.0);
        v44 = 1.0;
        if (v35 < 1)
        {
          v40 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v34 - 3;
          v47 = v36 != 1.0;
          if (v36 == 0.0)
            v47 = 0;
          v48 = v47 & v40;
          v73 = v34 & 3;
          v75 = a10;
          v76 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
          v49 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A26E70;
          vars0 = v34;
          do
          {
            v74 = v45 + 64;
            if (v45 + 64 <= v35)
              v50 = 64;
            else
              v50 = v35 - v45;
            v72 = v45;
            if ((v50 & 7) != 0)
              v49 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A308B0;
            v51 = v76;
            if ((v50 & 7) != 0)
              v51 = sub_239A2BE00;
            v76 = v51;
            v52 = v32;
            dgePack_A_NoTran();
            if ((unint64_t)v34 < 4)
            {
              v53 = 0;
            }
            else
            {
              v53 = 0;
              v54 = (float64x2_t *)v75;
              v55 = v78 + 2052;
              do
              {
                if (v48)
                  v76(v78, v55, v54, v52, v50, v43, v36);
                else
                  v49(v78, v55, v54, v52, v50, v43);
                v53 += 4;
                v55 += 2 * v43;
                v54 = (float64x2_t *)((char *)v54 + v77);
              }
              while (v53 < v46);
            }
            v32 = v52;
            v34 = vars0;
            if (v73)
            {
              v56 = a10 + 8 * v72 + 8 * v53 * v52;
              v57 = (const double *)(v71 + 8 * v53 * v43);
              if (v48)
                sub_239A30304(v78, v57, v56, v52, v50, v73, v43, v36);
              else
                sub_239A30480(v78, v57, v56, v52, v50, v73, v43);
            }
            v75 += 512;
            v45 = v74;
            v35 = v68;
          }
          while (v74 < v68);
          v40 = 0;
          v33 = v62;
          v31 = v63;
          v37 = v61;
          v26 = v60;
        }
      }
      else
      {
        v44 = v36;
      }
      v36 = v44;
    }
    while (v34 > 0);
  }
  if (v59 >= 65 && !v58)
    free(v78);
}

void sub_239A2B8A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,char a29)
{
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  void (**v43)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  void (**v44)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  double *(*v52)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double *(*v68)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  double *(*v82)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  _OWORD *(*v83)(_OWORD *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v96;
  double *(*v97)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double *(*v107)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  float64x2_t *v108;

  v35 = MEMORY[0x24BDAC7A8]();
  v86 = v36;
  v78 = v37;
  v38 = v33;
  v101 = v32;
  v39 = v31;
  v41 = v40;
  v42 = v35;
  v43 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))a12;
  STACK[0x10198] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))&unk_250AF2050;
  v44 = v43 + 1;
  if (v29 == 111)
  {
    v44 = v43;
    v45 = 1;
  }
  else
  {
    v45 = v34;
  }
  v98 = v45;
  v99 = v34;
  if (v29 == 111)
    v46 = v34;
  else
    v46 = 1;
  v77 = v46;
  v47 = 3;
  if (v30 == 111)
  {
    v47 = 2;
    v48 = 1;
  }
  else
  {
    v48 = a9;
  }
  v84 = v48;
  if (MEMORY[0xFFFFFC080] <= 747742333)
  {
    if (MEMORY[0xFFFFFC080] != -1829029944)
    {
      v49 = 506291073;
      goto LABEL_17;
    }
LABEL_18:
    if (v33 <= 512)
      v50 = 64;
    else
      v50 = 384;
    if (v31 >= 512)
      v51 = 128;
    else
      v51 = 64;
    v83 = sub_239A26E70;
    v97 = sub_239A2BE00;
    v82 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
    v52 = sub_239A308B0;
    goto LABEL_25;
  }
  if (MEMORY[0xFFFFFC080] == 933271106)
    goto LABEL_18;
  v49 = 747742334;
LABEL_17:
  if (MEMORY[0xFFFFFC080] == v49)
    goto LABEL_18;
  if (v33 >= 512)
    v50 = 544;
  else
    v50 = 64;
  v75 = 512;
  if (v31 < 1024)
    v75 = 288;
  if (v31 >= 512)
    v51 = v75;
  else
    v51 = 64;
  v83 = sub_239A3FD70;
  v97 = sub_239A2D190;
  v82 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A3B600;
  v52 = sub_239A2CE00;
LABEL_25:
  v95 = *v44;
  v96 = (uint64_t)v52;
  v81 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v43[v47];
  v53 = (v51 + v32) * v50;
  v76 = v53;
  if (v53 > 0x2000)
    v108 = (float64x2_t *)malloc_type_malloc((8 * v53) | 0x60, 0x100004000313F17uLL);
  else
    v108 = (float64x2_t *)&a29;
  if (v38 >= 1)
  {
    vars8 = 0;
    v54 = 0;
    v102 = (uint64_t)v108 + ((8 * v51 * (unint64_t)v50) | 0x40);
    if (v101 <= 0)
      v57 = -(-v101 & 3);
    else
      v57 = v101 & 3;
    v103 = v57;
    v91 = 8 * v51;
    v58 = v50;
    v79 = v50;
    v80 = v38;
    v93 = v51;
    v94 = v39;
    v92 = a13;
    do
    {
      vars0 = v58;
      if (v38 >= v58)
        v59 = v58;
      else
        v59 = v38;
      v87 = v54 + v50;
      if (v54 + v50 <= v38)
        v60 = v50;
      else
        v60 = v38 - v54;
      v106 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v83;
      v107 = v82;
      if (a13)
      {
        v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a13;
        v107 = *(double *(**)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))(a13 + 24);
      }
      v81(v60, v101, v86 + 8 * v54 * v84, a9, v102, v42);
      if (v39 >= 1)
      {
        v61 = 0;
        v62 = 32 * (v59 + vars8);
        v100 = v78 + 8 * v54 * v77;
        v64 = v41 != 1.0 && v54 == 0 && v41 != 0.0;
        v65 = a10;
        do
        {
          v104 = v61 + v51;
          if (v61 + v51 <= v39)
            v66 = v51;
          else
            v66 = v39 - v61;
          v67 = v106;
          if ((v66 & 7) != 0)
            v67 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v96;
          v106 = v67;
          v68 = v107;
          if ((v66 & 7) != 0)
            v68 = v97;
          v107 = v68;
          if (a13 && (v66 & 7) != 0)
          {
            v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a13 + 8);
            v107 = *(double *(**)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))(a13 + 32);
          }
          v69 = v61;
          v95(v66, v60, v100 + 8 * v61 * v98, v99, v108);
          v105 = v65;
          v70 = 0;
          if (v101 < 4)
          {
            v72 = v69;
          }
          else
          {
            v71 = v102;
            do
            {
              if (v64)
                v107(v108, (float64x2_t *)v71, (float64x2_t *)v65, a11, v66, v60, v41);
              else
                v106(v108, v71, v65, a11, v66, v60);
              v70 += 4;
              v71 += v62;
              v65 += 32 * a11;
              v72 = v69;
            }
            while (v70 < v101 - 3);
          }
          a13 = v92;
          if (v103)
          {
            v73 = a10 + 8 * v72 + 8 * v70 * a11;
            v74 = (const double *)(v102 + 8 * v70 * v60);
            if (v64)
            {
              if (v92)
                (*(void (**)(float64x2_t *, const double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v92 + 40))(v108, v74, v73, a11, v66, v103, v60, v41);
              else
                sub_239A30304(v108, v74, v73, a11, v66, v103, v60, v41);
            }
            else if (v92)
            {
              (*(void (**)(float64x2_t *, const double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 16))(v108, v74, v73, a11, v66, v103, v60);
            }
            else
            {
              sub_239A30480(v108, v74, v73, a11, v66, v103, v60);
            }
          }
          v65 = v105 + v91;
          v61 = v104;
          v51 = v93;
          v39 = v94;
        }
        while (v104 < v94);
      }
      v50 = v79;
      v38 = v80;
      v58 = vars0 + v79;
      vars8 -= v79;
      v54 = v87;
    }
    while (v87 < v80);
  }
  if (v76 > 0x2000)
    free(v108);
}

double *sub_239A2BE00(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      v27 = _X2[2];
      v28 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v31 = *_X2;
      v32 = _X2[1];
      v33 = _X2[2];
      v34 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      v39 = _X2[2];
      v40 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v43 = *a2;
      v44 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v48 = vmulq_n_f64(v25, a7);
      v49 = vmulq_n_f64(v26, a7);
      v50 = vmulq_n_f64(v27, a7);
      v51 = vmulq_n_f64(v28, a7);
      v52 = vmulq_n_f64(v31, a7);
      v53 = vmulq_n_f64(v32, a7);
      v54 = vmulq_n_f64(v33, a7);
      v55 = vmulq_n_f64(v34, a7);
      v56 = vmulq_n_f64(v37, a7);
      v57 = vmulq_n_f64(v38, a7);
      v58 = vmulq_n_f64(v39, a7);
      v59 = vmulq_n_f64(v40, a7);
      v60 = vmulq_n_f64(*_X2, a7);
      v61 = vmulq_n_f64(_X2[1], a7);
      v62 = vmulq_n_f64(_X2[2], a7);
      v63 = vmulq_n_f64(_X2[3], a7);
      do
      {
        v64 = v14;
        v65 = v15;
        v48 = vmlaq_n_f64(v48, v14, v43.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v14, v43, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v66 = (float64x2_t *)(result + 4);
        v56 = vmlaq_n_f64(v56, v64, v44.f64[0]);
        v60 = vmlaq_laneq_f64(v60, v64, v44, 1);
        v67 = *_X6;
        v68 = _X6[1];
        _X6 += 2;
        v69 = v16;
        v49 = vmlaq_n_f64(v49, v65, v43.f64[0]);
        v53 = vmlaq_laneq_f64(v53, v65, v43, 1);
        v70 = v17;
        v57 = vmlaq_n_f64(v57, v65, v44.f64[0]);
        v61 = vmlaq_laneq_f64(v61, v65, v44, 1);
        v16 = *v66;
        v17 = v66[1];
        result = v66[2].f64;
        v50 = vmlaq_n_f64(v50, v69, v43.f64[0]);
        v54 = vmlaq_laneq_f64(v54, v69, v43, 1);
        v58 = vmlaq_n_f64(v58, v69, v44.f64[0]);
        v62 = vmlaq_laneq_f64(v62, v69, v44, 1);
        v51 = vmlaq_n_f64(v51, v70, v43.f64[0]);
        v55 = vmlaq_laneq_f64(v55, v70, v43, 1);
        v43 = v67;
        v59 = vmlaq_n_f64(v59, v70, v44.f64[0]);
        v63 = vmlaq_laneq_f64(v63, v70, v44, 1);
        v44 = v68;
        --v18;
      }
      while (v18);
      v71 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v50;
      v11[3] = v51;
      v11 += 4;
      *v71 = v52;
      v71[1] = v53;
      v71[2] = v54;
      v71[3] = v55;
      v72 = (float64x2_t *)((char *)v71 + v12);
      *v72 = v56;
      v72[1] = v57;
      v72[2] = v58;
      v72[3] = v59;
      v73 = (float64x2_t *)((char *)v72 + v12);
      *v73 = v60;
      v73[1] = v61;
      v73[2] = v62;
      v73[3] = v63;
      _X2 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_239A305DC(result - 8, a2, _X2->f64, a4, v8, a6, a7);
  return result;
}

uint64_t sub_239A2BF70(uint64_t result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, _OWORD *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int32 *v75;
  float32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t k;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  __int32 v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  __int32 *v111;

  v12 = 4 * a5;
  v13 = a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = &a4[(unint64_t)v12 / 4];
    v19 = &a4[(unint64_t)v12 / 2];
    v20 = &a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v21 = (float32x4_t *)a6;
    v22 = &a8[a12];
    v23 = __OFSUB__(result, 3);
    v24 = result - 3;
    if (result > 3)
    {
      do
      {
        v25 = a3;
        v26 = (float32x4_t)veorq_s8(a11, a11);
        v27 = v26;
        v28 = v26;
        v29 = v26;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v30 = *v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = v32;
        v34 = *v19++;
        v35 = v34;
        v36 = *v20++;
        v37 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v14);
        v26 = vmlaq_n_f32(v26, v37, v31);
        v27 = vmlaq_n_f32(v27, v37, v33);
        v28 = vmlaq_n_f32(v28, v37, v35);
        v29 = vmlaq_n_f32(v29, v37, v36);
        v25 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v38 = *v21;
          v39 = *(float32x4_t *)((char *)v21 + v14);
          v40 = *(float32x2_t *)v17;
          v17 += 2;
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v15 = v25 <= 2;
          for (j = v25 - 2; !v15; j -= 2)
          {
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v52 = vmlaq_n_f32(v26, v38, v41.f32[0]);
            v53 = vmlaq_n_f32(v27, v38, v44.f32[0]);
            v54 = vmlaq_n_f32(v28, v38, v47.f32[0]);
            v55 = vmlaq_n_f32(v29, v38, v50.f32[0]);
            v38 = *v21;
            v26 = vmlaq_lane_f32(v52, v39, v41, 1);
            v56 = *(float32x2_t *)v17;
            v17 += 2;
            v41 = v56;
            v27 = vmlaq_lane_f32(v53, v39, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v28 = vmlaq_lane_f32(v54, v39, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v29 = vmlaq_lane_f32(v55, v39, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v39 = *(float32x4_t *)((char *)v21 + v14);
            v15 = j <= 2;
          }
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v38, v41.f32[0]), v39, v41, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v38, v44.f32[0]), v39, v44, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v38, v47.f32[0]), v39, v47, 1);
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v38, v50.f32[0]), v39, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        v61 = vzip1q_s32((int32x4_t)v26, (int32x4_t)v28);
        v62 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v28);
        v63 = vzip1q_s32((int32x4_t)v27, (int32x4_t)v29);
        v64 = vzip2q_s32((int32x4_t)v27, (int32x4_t)v29);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v61, v63), a9), *a8, a10);
        v65 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v62, v64), a9), *v60, a10);
        v66 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v62, v64), a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v61, v63), a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v65;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v66;
        v21 = (float32x4_t *)a6;
        v17 = &v17[v12 - a3];
        v18 = &v17[(unint64_t)v12 / 4];
        v19 = &v17[(unint64_t)v12 / 2];
        v20 = &v17[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v23 = __OFSUB__(v24, 4);
        v15 = v24 <= 4;
        v24 -= 4;
      }
      while (!v15);
    }
    v67 = result & 3;
    if (!v23 && v67 != 0)
    {
      do
      {
        v68 = a3;
        v69 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v70 = *v17,
              ++v17,
              v71 = *v21,
              v21 = (float32x4_t *)((char *)v21 + v14),
              v69 = vmlaq_n_f32(v69, v71, v70),
              v68 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v72 = *(float32x2_t *)v17;
            v17 += 2;
            v73 = *v21;
            v74 = *(float32x4_t *)((char *)v21 + v14);
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v69 = vmlaq_lane_f32(vmlaq_n_f32(v69, v73, v72.f32[0]), v74, v72, 1);
            v15 = v68 <= 2;
            v68 -= 2;
          }
          while (!v15);
        }
        v76.i32[0] = a8->i32[0];
        v75 = (__int32 *)((char *)a8 + v13 * 4);
        v76.i32[1] = *v75;
        v77 = &v75[v13];
        v76.i32[2] = *v77;
        v78 = &v77[v13];
        v76.i32[3] = *v78;
        v79 = &v78[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v69, a9), v76, a10);
        v80 = &v79[v13];
        *v79 = a11.i32[0];
        a8 = (float32x4_t *)(v79 + 1);
        *v80 = a11.i32[1];
        v81 = &v80[v13];
        *v81 = a11.i32[2];
        v81[a12] = a11.i32[3];
        v21 = (float32x4_t *)a6;
        v17 = &v17[(unint64_t)v12 / 4 - a3];
        v15 = v67-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v22;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v83 = (__int32 *)a4;
    v84 = (__int32 *)&a4[(unint64_t)v12 / 4];
    v85 = (__int32 *)&a4[(unint64_t)v12 / 2];
    v86 = (__int32 *)&a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v87 = (__int32 *)a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_25;
        v93 = *v83++;
        v94.i32[0] = v93;
        v94.i32[1] = *v84++;
        v94.i32[2] = *v85++;
        v94.i32[3] = *v86++;
        v95 = *v87;
        v87 = (__int32 *)((char *)v87 + v14);
        v92 = vmlaq_n_f32(v92, v94, *(float *)&v95);
        v91 = a3 - 1;
        if (a3 > 1)
        {
LABEL_25:
          do
          {
            v96 = *(_QWORD *)v83;
            v83 += 2;
            v97.i64[0] = v96;
            v98 = *(_QWORD *)v84;
            v84 += 2;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v85;
            v85 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v86;
            v86 += 2;
            v103.i32[0] = *v87;
            v104 = &v87[(unint64_t)v14 / 4];
            v103.i32[1] = *v104;
            v87 = &v104[(unint64_t)v14 / 4];
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, (float32x4_t)vtrn1q_s32(v97, v99), v103.f32[0]), (float32x4_t)vtrn2q_s32(v97, v99), v103, 1);
            v15 = v91 <= 2;
            v91 -= 2;
          }
          while (!v15);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = (__int32 *)a6;
        v83 = &v83[v12 - a3];
        v84 = &v83[(unint64_t)v12 / 4];
        v85 = &v83[(unint64_t)v12 / 2];
        v86 = &v83[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v89 = __OFSUB__(v90, 4);
        v15 = v90 <= 4;
        v90 -= 4;
      }
      while (!v15);
    }
    v105 = result & 3;
    if (!v89 && v105 != 0)
    {
      do
      {
        v106 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v107 = *(float *)v83,
              ++v83,
              v108 = *(float *)v87,
              v87 = (__int32 *)((char *)v87 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v108, v107),
              v106 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v109 = *(float32x2_t *)v83;
            v83 += 2;
            v110.i32[0] = *v87;
            v111 = &v87[(unint64_t)v14 / 4];
            v110.i32[1] = *v111;
            v87 = &v111[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v110, v109);
            v15 = v106 <= 2;
            v106 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = (__int32 *)a6;
        v83 = &v83[(unint64_t)v12 / 4 - a3];
        v15 = v105-- <= 1;
      }
      while (!v15);
    }
    a6 = (_OWORD *)((char *)a6 + 4);
    a8 = v88;
    v15 = k <= 1;
  }
  return result;
}

void sub_239A2C2F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int128 a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,int a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,__int128 a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void);
  uint64_t (*v74)(void);
  unint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *(*v91)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v92)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v93;
  uint64_t v94;
  float64x2_t *v95;
  float64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  float64x2_t *v112;
  __int128 v113;
  __int128 v114;
  float64x2_t *v115;
  __int128 v116;
  double *v117;
  double v118;
  char *v119;
  float64x2_t *v120;
  __int128 v121;
  __int128 v122;
  float64x2_t *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(double);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(void);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  double *(*v168)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  double *(*v181)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  float64x2_t *v182;
  uint64_t v183;

  v61 = MEMORY[0x24BDAC7A8]();
  v176 = v63;
  v152 = v64;
  v65 = v60;
  v145 = v66;
  v68 = v67;
  v69 = v61;
  v70 = v59;
  STACK[0x10318] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v71 = 1;
  else
    v71 = v60;
  if (v58 == 111)
    v72 = v60;
  else
    v72 = 1;
  v144 = v72;
  v73 = MEMORY[0x24BDB2CA0];
  if (v58 == 111)
    v73 = (uint64_t (*)(void))MEMORY[0x24BDB2CA8];
  v143 = (void (*)(double))v73;
  v74 = (uint64_t (*)(void))MEMORY[0x24BDB2C98];
  if (v58 == 111)
    v74 = MEMORY[0x24BDB2C90];
  v154 = v74;
  v177 = v62;
  if (v59 >= 225)
  {
    v76 = (char *)malloc_type_malloc((v59 << 8) + 8288, 0x100004000313F17uLL);
    *(_QWORD *)&v62 = v177;
    v182 = (float64x2_t *)v76;
    v75 = (unint64_t *)(v76 + 8256);
  }
  else
  {
    v182 = (float64x2_t *)&STACK[0x2A0];
    v75 = &STACK[0x22E0];
  }
  v153 = (uint64_t)v75;
  if (v68 >= 1)
  {
    v148 = 0;
    v77 = 0;
    v180 = v70 - 3;
    if (v70 <= 0)
      v78 = -(-v70 & 3);
    else
      v78 = v70 & 3;
    v159 = v78;
    v167 = (__int128)vdupq_lane_s64(v62, 0);
    v166 = 24 * v176 + 40;
    v174 = 24 * v176 + 24;
    v175 = 24 * v176 + 56;
    v165 = 16 * v176 + 48;
    v172 = 16 * v176 + 32;
    v173 = 24 * v176 + 8;
    v170 = 8 * v176 + 32;
    v171 = 16 * v176 + 16;
    v169 = 8 * v176;
    v164 = 8 * v176 + 16;
    v79 = 32;
    vars0 = v70;
    vars8 = v65;
    v142 = v68;
    v149 = v71;
    while (1)
    {
      v147 = v79;
      v80 = v68 >= v79 ? v79 : v68;
      v146 = v77 + 32;
      v81 = v77 + 32 <= v68 ? 32 : v68 - v77;
      v183 = v81;
      v156 = v145 + 8 * v77 * v144;
      v143(v69);
      v82 = (__n128)v177;
      if (v70 >= 1)
        break;
LABEL_119:
      v79 = v147 + 32;
      v148 -= 32;
      v77 = v146;
      v68 = v142;
      if (v146 >= v142)
        goto LABEL_120;
    }
    v83 = 0;
    v84 = 0;
    v155 = (v80 + v148) << 8;
    v178 = 32 * (v80 + v148);
    v85 = *(double *)&v177 != 0.0;
    if (*(double *)&v177 == 1.0 || v77 != 0)
      v85 = 0;
    v179 = v85;
    v161 = v152;
    v87 = 32;
    v162 = v153;
    v163 = v152;
    v168 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
    v181 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A26E70;
    while (1)
    {
      if (v70 >= v87)
        v88 = v87;
      else
        v88 = v70;
      v160 = v83;
      v89 = v88 + v83;
      v157 = v84 + 32;
      v158 = v87;
      if (v84 + 32 <= v70)
        v90 = 32;
      else
        v90 = v70 - v84;
      v91 = v181;
      if ((v90 & 7) != 0)
        v91 = sub_239A308B0;
      v181 = v91;
      v92 = v168;
      if ((v90 & 7) != 0)
        v92 = sub_239A2BE00;
      v168 = v92;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128))v154)(v90, v183, v156 + 8 * v84 * v71, v65, v182, v82);
      v93 = v84;
      if (v84 < v180)
        break;
LABEL_87:
      v82 = (__n128)v177;
      if (v159)
      {
        if (v93 - v84 >= v90)
          v125 = v90;
        else
          v125 = v93 - v84;
        v126 = v90 - v125;
        if (v90 - v125 >= 3)
          v127 = 3;
        else
          v127 = v90 - v125;
        if (v126 >= 1)
        {
          a56 = 0u;
          a57 = 0u;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
          a48 = 0u;
          a49 = 0u;
          a46 = 0u;
          a47 = 0u;
        }
        v128 = v152 + 8 * v84 + 8 * v93 * v176;
        v129 = (const double *)(v153 + 8 * v93 * v183);
        if (v179)
        {
          if (v125)
            sub_239A30304(v182, (const double *)(v153 + 8 * v93 * v183), v128, v176, v125, v159, v183, *(double *)&v177);
          if (v126 >= 1)
          {
            sub_239A30480((float64x2_t *)((char *)v182+ 8 * v125 * v183+ 8 * (v125 & ((int)((_DWORD)v183 << 31) >> 31) & 7)), v129, (uint64_t)&a46, 8, v127, v159, v183);
            if (v159 >= 1)
            {
              v130 = 0;
              v131 = v93 + v160;
              if (v93 + v160 >= v89)
                v131 = v89;
              v132 = v161 + v169 * v93 + 8 * v131;
              v133 = &a46;
              v134 = 1;
              do
              {
                v135 = 0;
                do
                {
                  v82.n128_f64[0] = *((double *)v133 + v135) + *(double *)(v132 + 8 * v135) * *(double *)&v177;
                  *(_QWORD *)(v132 + 8 * v135++) = v82.n128_u64[0];
                }
                while (v134 != v135);
                ++v130;
                ++v134;
                v133 += 4;
                v132 += v169;
              }
              while (v130 != v159);
            }
          }
        }
        else
        {
          if (v125)
            sub_239A30480(v182, (const double *)(v153 + 8 * v93 * v183), v128, v176, v125, v159, v183);
          if (v126 >= 1)
          {
            sub_239A30480((float64x2_t *)((char *)v182+ 8 * v125 * v183+ 8 * (v125 & ((int)((_DWORD)v183 << 31) >> 31) & 7)), v129, (uint64_t)&a46, 8, v127, v159, v183);
            if (v159 >= 1)
            {
              v136 = 0;
              v137 = v93 + v160;
              if (v93 + v160 >= v89)
                v137 = v89;
              v138 = v161 + v169 * v93 + 8 * v137;
              v139 = &a46;
              v140 = 1;
              do
              {
                v141 = 0;
                do
                {
                  v82.n128_f64[0] = *(double *)(v138 + 8 * v141) + *((double *)v139 + v141);
                  *(_QWORD *)(v138 + 8 * v141++) = v82.n128_u64[0];
                }
                while (v140 != v141);
                ++v136;
                ++v140;
                v139 += 4;
                v138 += v169;
              }
              while (v136 != v159);
            }
          }
        }
      }
      v162 += v155;
      v163 += (v176 << 8) + 256;
      v87 = v158 + 32;
      v83 = v160 - 32;
      v161 += 256;
      v84 += 32;
      if (v157 >= v70)
        goto LABEL_119;
    }
    v94 = 0;
    v96 = (float64x2_t *)v162;
    v95 = (float64x2_t *)v163;
    while (1)
    {
      if (v94 <= 0)
        v97 = -(-v94 & 7);
      else
        v97 = v94 & 7;
      v98 = v94 - v97;
      if (v94 - v97 >= v90)
        v99 = v90;
      else
        v99 = v94 - v97;
      v100 = v90 - v99;
      if (v90 - v99 >= 1)
      {
        *(_OWORD *)&STACK[0x280] = 0u;
        *(_OWORD *)&STACK[0x290] = 0u;
        a58 = 0u;
        *(_OWORD *)&STACK[0x270] = 0u;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
        a48 = 0u;
        a49 = 0u;
        a46 = 0u;
        a47 = 0u;
      }
      if (v179)
      {
        if (v99)
          ((void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, __n128))v168)(v182, v96, v95, v176, v99, v183, (__n128)v177);
        if (v100 < 1)
          goto LABEL_85;
        if (v100 >= 8)
          v101 = 8;
        else
          v101 = v90 - v99;
        ((void (*)(float64_t *, float64x2_t *, __int128 *, uint64_t, uint64_t))v181)(&v182->f64[v99 * v183], v96, &a46, 8, v101);
        if (v89 >= v98)
          v102 = v98;
        else
          v102 = v89;
        v95->f64[v102] = *(double *)&a46 + v95->f64[v102] * *(double *)&v177;
        if (v89 >= v98)
          v103 = v98;
        else
          v103 = v89;
        if ((((_BYTE)v84 + (_BYTE)v94) & 4) != 0)
        {
          v111 = (char *)&v95->f64[v103];
          *(float64x2_t *)(v111 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a46 + 8), (float64x2_t)v167, *(float64x2_t *)(v111 + 8));
          *(float64x2_t *)(v111 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a47 + 8), (float64x2_t)v167, *(float64x2_t *)(v111 + 24));
          v112 = (float64x2_t *)&v111[v170];
          v113 = a51;
          v112[-2] = vmlaq_f64((float64x2_t)a50, (float64x2_t)v167, *(float64x2_t *)&v111[8 * v176]);
          *(float64x2_t *)((char *)v95 + 8 * v103 + v164) = vmlaq_f64((float64x2_t)v113, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v164));
          v114 = a54;
          *v112 = vmlaq_f64((float64x2_t)a52, (float64x2_t)v167, *(float64x2_t *)&v111[v170]);
          v115 = (float64x2_t *)&v111[v172];
          v115[-2] = vmlaq_f64((float64x2_t)v114, (float64x2_t)v167, *(float64x2_t *)&v111[16 * v176]);
          v116 = a56;
          *(float64x2_t *)((char *)v95 + 8 * v103 + v171) = vmlaq_f64((float64x2_t)a55, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v171));
          *v115 = vmlaq_f64((float64x2_t)v116, (float64x2_t)v167, *(float64x2_t *)&v111[v172]);
          *(_QWORD *)&v116 = a58;
          *(double *)((char *)&v95->f64[v103] + v165) = *(double *)&a57
                                                      + *(double *)((char *)&v95->f64[v103] + v165) * *(double *)&v177;
          v117 = (double *)&v111[v175];
          *(v117 - 7) = *(double *)&v116 + *(v117 - 7) * *(double *)&v177;
          *(float64x2_t *)((char *)v95 + 8 * v103 + v173) = vmlaq_f64(*(float64x2_t *)((char *)&a58 + 8), (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v173));
          *(float64x2_t *)((char *)v95 + 8 * v103 + v174) = vmlaq_f64(*(float64x2_t *)&STACK[0x278], (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v174));
          *(float64x2_t *)((char *)v95 + 8 * v103 + v166) = vmlaq_f64(*(float64x2_t *)&STACK[0x288], (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v166));
          v118 = *(double *)&STACK[0x298] + *v117 * *(double *)&v177;
LABEL_84:
          *v117 = v118;
          goto LABEL_85;
        }
        v104 = a54;
        *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v103) = vmlaq_f64((float64x2_t)a50, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v103));
        *(float64x2_t *)((char *)&v95[v176] + 8 * v103) = vmlaq_f64((float64x2_t)v104, (float64x2_t)v167, *(float64x2_t *)((char *)&v95[v176] + 8 * v103));
        *(_QWORD *)&v104 = a58;
        *(double *)((char *)&v95->f64[v103] + v171) = *(double *)&a55
                                                    + *(double *)((char *)&v95->f64[v103] + v171) * *(double *)&v177;
        v95->f64[3 * v176 + v103] = *(double *)&v104 + v95->f64[3 * v176 + v103] * *(double *)&v177;
        *(float64x2_t *)((char *)v95 + 8 * v103 + v173) = vmlaq_f64(*(float64x2_t *)((char *)&a58 + 8), (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v173));
        v105 = v174 + 8 * v103;
        v106 = *(double *)&STACK[0x278] + *(double *)((char *)v95->f64 + v105) * *(double *)&v177;
      }
      else
      {
        if (v99)
          v181(v182, v96, v95, v176, v99, v183);
        if (v100 < 1)
          goto LABEL_85;
        if (v100 >= 8)
          v107 = 8;
        else
          v107 = v90 - v99;
        ((void (*)(float64_t *, float64x2_t *, __int128 *, uint64_t, uint64_t))v181)(&v182->f64[v99 * v183], v96, &a46, 8, v107);
        if (v89 >= v98)
          v108 = v98;
        else
          v108 = v89;
        v95->f64[v108] = v95->f64[v108] + *(double *)&a46;
        if (v89 >= v98)
          v109 = v98;
        else
          v109 = v89;
        if ((((_BYTE)v84 + (_BYTE)v94) & 4) != 0)
        {
          v119 = (char *)&v95->f64[v109];
          *(float64x2_t *)(v119 + 8) = vaddq_f64(*(float64x2_t *)(v119 + 8), *(float64x2_t *)((char *)&a46 + 8));
          *(float64x2_t *)(v119 + 24) = vaddq_f64(*(float64x2_t *)(v119 + 24), *(float64x2_t *)((char *)&a47 + 8));
          v120 = (float64x2_t *)&v119[v170];
          v121 = a51;
          v120[-2] = vaddq_f64(*(float64x2_t *)&v119[8 * v176], (float64x2_t)a50);
          *(float64x2_t *)((char *)v95 + 8 * v109 + v164) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v164), (float64x2_t)v121);
          v122 = a54;
          *v120 = vaddq_f64(*(float64x2_t *)&v119[v170], (float64x2_t)a52);
          v123 = (float64x2_t *)&v119[v172];
          v123[-2] = vaddq_f64(*(float64x2_t *)&v119[16 * v176], (float64x2_t)v122);
          v124 = a56;
          *(float64x2_t *)((char *)v95 + 8 * v109 + v171) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v171), (float64x2_t)a55);
          *v123 = vaddq_f64(*(float64x2_t *)&v119[v172], (float64x2_t)v124);
          *(_QWORD *)&v124 = a58;
          *(double *)((char *)&v95->f64[v109] + v165) = *(double *)((char *)&v95->f64[v109] + v165) + *(double *)&a57;
          v117 = (double *)&v119[v175];
          *(v117 - 7) = *(v117 - 7) + *(double *)&v124;
          *(float64x2_t *)((char *)v95 + 8 * v109 + v173) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v173), *(float64x2_t *)((char *)&a58 + 8));
          *(float64x2_t *)((char *)v95 + 8 * v109 + v174) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v174), *(float64x2_t *)&STACK[0x278]);
          *(float64x2_t *)((char *)v95 + 8 * v109 + v166) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v166), *(float64x2_t *)&STACK[0x288]);
          v118 = *v117 + *(double *)&STACK[0x298];
          goto LABEL_84;
        }
        v110 = a54;
        *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v109) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v109), (float64x2_t)a50);
        *(float64x2_t *)((char *)&v95[v176] + 8 * v109) = vaddq_f64(*(float64x2_t *)((char *)&v95[v176] + 8 * v109), (float64x2_t)v110);
        *(_QWORD *)&v110 = a58;
        *(double *)((char *)&v95->f64[v109] + v171) = *(double *)((char *)&v95->f64[v109] + v171) + *(double *)&a55;
        v95->f64[3 * v176 + v109] = v95->f64[3 * v176 + v109] + *(double *)&v110;
        *(float64x2_t *)((char *)v95 + 8 * v109 + v173) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v173), *(float64x2_t *)((char *)&a58 + 8));
        v105 = v174 + 8 * v109;
        v106 = *(double *)((char *)v95->f64 + v105) + *(double *)&STACK[0x278];
      }
      *(double *)((char *)v95->f64 + v105) = v106;
LABEL_85:
      v94 += 4;
      v93 = v84 + v94;
      v96 = (float64x2_t *)((char *)v96 + v178);
      v95 += 2 * v176;
      if (v84 + v94 >= v180)
      {
        v70 = vars0;
        v65 = vars8;
        v71 = v149;
        goto LABEL_87;
      }
    }
  }
LABEL_120:
  if (v70 >= 225)
    free(v182);
}

double *sub_239A2CE00(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = a3;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      v19 = *a3;
      v20 = a3[1];
      v21 = a3[2];
      v22 = a3[3];
      v18 = (float64x2_t *)((char *)a3 + v11);
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v23 = (float64x2_t *)((char *)v18 + v11);
      v29 = *v23;
      v30 = v23[1];
      v31 = v23[2];
      v32 = v23[3];
      v28 = (float64x2_t *)((char *)v23 + v11);
      v33 = *v28;
      v34 = v28[1];
      v35 = v28[2];
      v36 = v28[3];
      v38 = *a2;
      v39 = a2[1];
      v37 = a2 + 2;
      do
      {
        v19 = vmlaq_n_f64(v19, v13, v38.f64[0]);
        v24 = vmlaq_laneq_f64(v24, v13, v38, 1);
        v29 = vmlaq_n_f64(v29, v13, v39.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v13, v39, 1);
        v20 = vmlaq_n_f64(v20, v14, v38.f64[0]);
        v25 = vmlaq_laneq_f64(v25, v14, v38, 1);
        v30 = vmlaq_n_f64(v30, v14, v39.f64[0]);
        v34 = vmlaq_laneq_f64(v34, v14, v39, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v40 = (float64x2_t *)(result + 4);
        v21 = vmlaq_n_f64(v21, v15, v38.f64[0]);
        v26 = vmlaq_laneq_f64(v26, v15, v38, 1);
        v31 = vmlaq_n_f64(v31, v15, v39.f64[0]);
        v35 = vmlaq_laneq_f64(v35, v15, v39, 1);
        v22 = vmlaq_n_f64(v22, v16, v38.f64[0]);
        v27 = vmlaq_laneq_f64(v27, v16, v38, 1);
        v32 = vmlaq_n_f64(v32, v16, v39.f64[0]);
        v36 = vmlaq_laneq_f64(v36, v16, v39, 1);
        v15 = *v40;
        v16 = v40[1];
        result = v40[2].f64;
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        --v17;
      }
      while (v17);
      v41 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v19;
      v10[1] = v20;
      v10[2] = v21;
      v10[3] = v22;
      v10 += 4;
      *v41 = v24;
      v41[1] = v25;
      v41[2] = v26;
      v41[3] = v27;
      v42 = (float64x2_t *)((char *)v41 + v11);
      *v42 = v29;
      v42[1] = v30;
      v42[2] = v31;
      v42[3] = v32;
      v43 = (float64x2_t *)((char *)v42 + v11);
      *v43 = v33;
      v43[1] = v34;
      v43[2] = v35;
      v43[3] = v36;
      a3 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_239A3064C(result - 8, a2, a3->f64, a4, v7, a6);
  return result;
}

void sub_239A2CEF4(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  int v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a1 - 101;
  if ((a1 - 101) > 1)
  {
    v45 = 1;
LABEL_32:
    cblas_xerbla(v45, "cblas_sgemv", "");
    return;
  }
  if ((a2 - 111) > 3)
  {
    v45 = 2;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v45 = 3;
    goto LABEL_32;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v45 = 4;
    goto LABEL_32;
  }
  if (!a8)
  {
    v45 = 9;
    goto LABEL_32;
  }
  if (!(_DWORD)a18)
  {
    v45 = 12;
    goto LABEL_32;
  }
  if ((a2 - 113) >= 2)
    v40 = (a2 & 0xFFFFFFFE) == 112;
  else
    v40 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  v41 = a3;
  v42 = a4;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v44 = a18 - a18 * a4;
  }
  else
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v44 = a18 - a18 * a3;
  }
  v46 = &a17[v44];
  if ((int)a18 >= 0)
    v46 = a17;
  if (!v38)
  {
    if (a4 <= 1uLL)
      v50 = 1;
    else
      v50 = a4;
    if (v50 <= a6)
    {
      v40 ^= 1u;
      v48 = a8;
      v51 = (int)a18;
      v49 = a4;
      v42 = v41;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v41 <= 1)
    v47 = 1;
  else
    v47 = v41;
  if (v47 > a6)
  {
LABEL_31:
    v45 = 7;
    goto LABEL_32;
  }
  v48 = a8;
  v51 = (int)a18;
  v49 = v41;
LABEL_34:
  sub_239A2D2D0(v40, v49, v42, a5, a6, v43, v48, v46, a9, a10, a11, a12, a13, a14, a15, a16, v51, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38);
}

void sub_239A2D034(int a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  char v35;
  _QWORD *v36;
  int v37;
  int v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((a1 - 101) > 1)
  {
LABEL_27:
    v38 = 1;
    goto LABEL_28;
  }
  if ((a2 - 111) > 3)
  {
    v38 = 2;
LABEL_28:
    cblas_xerbla(v38, "cblas_dgemv", "");
    return;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v38 = 3;
    goto LABEL_28;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v38 = 4;
    goto LABEL_28;
  }
  if (!a8)
  {
    v38 = 9;
    goto LABEL_28;
  }
  if (!(_DWORD)a18)
  {
    v38 = 12;
    goto LABEL_28;
  }
  if ((a2 - 113) >= 2)
    v35 = (a2 & 0xFFFFFFFE) == 112;
  else
    v35 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  a3 = a3;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v36 = (_QWORD *)(a7 + 8 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v37 = a18 - a18 * a4;
  }
  else
  {
    v36 = (_QWORD *)(a7 + 8 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v37 = a18 - a18 * a3;
  }
  v39 = &a17[v37];
  if ((int)a18 >= 0)
    v39 = a17;
  if (a1 == 102)
  {
    if (a3 <= 1uLL)
      v44 = 1;
    else
      v44 = a3;
    if (v44 <= a6)
    {
      v41 = a6;
      v42 = a8;
      v45 = (int)a18;
      v43 = a3;
      a3 = a4;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if (a1 != 101)
    goto LABEL_27;
  if (a4 <= 1uLL)
    v40 = 1;
  else
    v40 = a4;
  if (v40 > a6)
  {
LABEL_33:
    v38 = 7;
    goto LABEL_28;
  }
  v41 = a6;
  v35 ^= 1u;
  v42 = a8;
  v45 = (int)a18;
  v43 = a4;
LABEL_35:
  sub_239A33EDC(v35, v43, a3, a5, v41, v36, v42, v39, a9, a10, a11, a12, a13, a14, a15, a16, v45, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34);
}

double *sub_239A2D190(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = a3;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      v23 = a3[3];
      v19 = (float64x2_t *)((char *)a3 + v12);
      v25 = *v19;
      v26 = v19[1];
      v27 = v19[2];
      v28 = v19[3];
      v24 = (float64x2_t *)((char *)v19 + v12);
      v30 = *v24;
      v31 = v24[1];
      v32 = v24[2];
      v33 = v24[3];
      v29 = (float64x2_t *)((char *)v24 + v12);
      v35 = *a2;
      v36 = a2[1];
      v34 = a2 + 2;
      v37 = vmulq_n_f64(v20, a7);
      v38 = vmulq_n_f64(v21, a7);
      v39 = vmulq_n_f64(v22, a7);
      v40 = vmulq_n_f64(v23, a7);
      v41 = vmulq_n_f64(v25, a7);
      v42 = vmulq_n_f64(v26, a7);
      v43 = vmulq_n_f64(v27, a7);
      v44 = vmulq_n_f64(v28, a7);
      v45 = vmulq_n_f64(v30, a7);
      v46 = vmulq_n_f64(v31, a7);
      v47 = vmulq_n_f64(v32, a7);
      v48 = vmulq_n_f64(v33, a7);
      v49 = vmulq_n_f64(*v29, a7);
      v50 = vmulq_n_f64(v29[1], a7);
      v51 = vmulq_n_f64(v29[2], a7);
      v52 = vmulq_n_f64(v29[3], a7);
      do
      {
        v37 = vmlaq_n_f64(v37, v14, v35.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v14, v35, 1);
        v45 = vmlaq_n_f64(v45, v14, v36.f64[0]);
        v49 = vmlaq_laneq_f64(v49, v14, v36, 1);
        v38 = vmlaq_n_f64(v38, v15, v35.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v15, v35, 1);
        v46 = vmlaq_n_f64(v46, v15, v36.f64[0]);
        v50 = vmlaq_laneq_f64(v50, v15, v36, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v39 = vmlaq_n_f64(v39, v16, v35.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v16, v35, 1);
        v47 = vmlaq_n_f64(v47, v16, v36.f64[0]);
        v51 = vmlaq_laneq_f64(v51, v16, v36, 1);
        v40 = vmlaq_n_f64(v40, v17, v35.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v17, v35, 1);
        v48 = vmlaq_n_f64(v48, v17, v36.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v17, v36, 1);
        v16 = *v53;
        v17 = v53[1];
        result = v53[2].f64;
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        --v18;
      }
      while (v18);
      v54 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v37;
      v11[1] = v38;
      v11[2] = v39;
      v11[3] = v40;
      v11 += 4;
      *v54 = v41;
      v54[1] = v42;
      v54[2] = v43;
      v54[3] = v44;
      v55 = (float64x2_t *)((char *)v54 + v12);
      *v55 = v45;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v56 = (float64x2_t *)((char *)v55 + v12);
      *v56 = v49;
      v56[1] = v50;
      v56[2] = v51;
      v56[3] = v52;
      a3 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_239A305DC(result - 8, a2, a3->f64, a4, v8, a6, a7);
  return result;
}

void sub_239A2D2D0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, float *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  if ((a1 & 1) != 0)
    sub_239A2D31C(a2, a3, a4, a5, a6, a7, a8, a17, a9.f32[0], a10.f32[0]);
  else
    sub_239A2D520(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
}

void sub_239A2D31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10)
{
  float v10;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;

  v32 = a2;
  v33 = a7;
  v10 = a10;
  v30 = a3;
  v31 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v28) = a8;
      else
        v28 = -a8;
      cblas_sscal(v32, a10, &v33[((v32 - 1) * a8) & (a8 >> 63)], v28);
    }
  }
  else
  {
    sub_239A31F2C();
    v29[3] = v29;
    MEMORY[0x24BDAC7A8]();
    v17 = (void *)(((unint64_t)v29 - v16) & 0xFFFFFFFFFFFFFFC0);
    v19 = (uint64_t)v17 + 4 * v18;
    v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    bzero(v17, v20 & 0xFFFFFFFFFFFFFFFCLL);
    bzero((void *)(v19 + 2048), v21);
    if (a1 >= 1)
    {
      v22 = 0;
      v23 = a1;
      do
      {
        v24 = v23 - 512;
        if (v23 >= 512)
          v23 = 512;
        if (a1 - v22 >= 512)
          v25 = 512;
        else
          v25 = a1 - v22;
        if (a1 - v22 >= 1)
        {
          v26 = a5;
          v27 = (_DWORD *)v19;
          do
          {
            *v27++ = *v26;
            v26 += a6;
            --v23;
          }
          while (v23);
        }
        sub_239A35FDC(v25, v32, v30 + 4 * v22, v31, v19, v33, a8, a9, v10);
        v22 += 512;
        a5 += 512 * a6;
        v10 = 1.0;
        v23 = v24;
      }
      while (v22 < a1);
    }
  }
}

void sub_239A2D520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;

  if (a9.f32[0] == 0.0)
  {
    if (a10.f32[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v38) = a8;
      else
        v38 = -a8;
      cblas_sscal(a1, a10.f32[0], (float *)(a7 + 4 * (((a1 - 1) * a8) & (a8 >> 63))), v38);
    }
  }
  else
  {
    sub_239A34300(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
  }
}

uint64_t sub_239A2D560(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t i;
  float32x4_t *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  __int32 v32;
  float v33;
  __int32 v34;
  float v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float v66;
  __int32 v67;
  float32x4_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  float32x4_t v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t k;
  float32x4_t *v86;
  float32x2_t *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t m;
  float32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  __int32 *v105;
  float32x2_t v106;

  v12 = 4 * a5;
  v13 = a12;
  v14 = a2 <= 3;
  for (i = a2 - 3; !v14; i -= 4)
  {
    v16 = a4;
    v17 = (__int32 *)a6;
    v18 = (__int32 *)a6 + a7;
    v19 = (__int32 *)&a6[a7];
    v20 = &v18[2 * a7];
    v21 = &a8[a12];
    v22 = __OFSUB__(result, 3);
    v23 = result - 3;
    if (result > 3)
    {
      do
      {
        v24 = a3;
        v25 = (float32x4_t)veorq_s8(a11, a11);
        v26 = v25;
        v27 = v25;
        v28 = v25;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v29 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v12);
        v30 = *(float *)v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = *(float *)&v32;
        v34 = *v19++;
        v35 = *(float *)&v34;
        v36 = *v20++;
        v25 = vmlaq_n_f32(v25, v29, v31);
        v26 = vmlaq_n_f32(v26, v29, v33);
        v27 = vmlaq_n_f32(v27, v29, v35);
        v28 = vmlaq_n_f32(v28, v29, *(float *)&v36);
        v24 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v37 = *v16;
          v38 = *(float32x4_t *)((char *)v16 + v12);
          v40 = *(float32x2_t *)v17;
          v39 = (float32x2_t *)(v17 + 2);
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v14 = v24 <= 2;
          for (j = v24 - 2; !v14; j -= 2)
          {
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v52 = vmlaq_n_f32(v25, v37, v41.f32[0]);
            v53 = vmlaq_n_f32(v26, v37, v44.f32[0]);
            v54 = vmlaq_n_f32(v27, v37, v47.f32[0]);
            v55 = vmlaq_n_f32(v28, v37, v50.f32[0]);
            v37 = *v16;
            v25 = vmlaq_lane_f32(v52, v38, v41, 1);
            v56 = *v39++;
            v41 = v56;
            v26 = vmlaq_lane_f32(v53, v38, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v27 = vmlaq_lane_f32(v54, v38, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v28 = vmlaq_lane_f32(v55, v38, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v38 = *(float32x4_t *)((char *)v16 + v12);
            v14 = j <= 2;
          }
          v16 = (float32x4_t *)((char *)v16 + 2 * v12);
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v37, v41.f32[0]), v38, v41, 1);
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v37, v44.f32[0]), v38, v44, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v37, v47.f32[0]), v38, v47, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v37, v50.f32[0]), v38, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v25, a9), *a8, a10);
        v61 = vmlaq_n_f32(vmulq_n_f32(v27, a9), *v60, a10);
        v62 = vmlaq_n_f32(vmulq_n_f32(v28, a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v61;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v62;
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)v16 - v12 * a3 + 16);
        v22 = __OFSUB__(v23, 4);
        v14 = v23 <= 4;
        v23 -= 4;
      }
      while (!v14);
    }
    v63 = result & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        v65 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_15;
        v66 = v16->f32[0];
        v16 = (float32x4_t *)((char *)v16 + v12);
        v67 = *v17++;
        v68.i32[0] = v67;
        v68.i32[1] = *v18++;
        v68.i32[2] = *v19++;
        v68.i32[3] = *v20++;
        v65 = vmlaq_n_f32(v65, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_15:
          do
          {
            v69 = v16->f32[0];
            v70 = v16->f32[(unint64_t)v12 / 4];
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v71 = *(_QWORD *)v17;
            v17 += 2;
            v72.i64[0] = v71;
            v73 = *(_QWORD *)v18;
            v18 += 2;
            v74.i64[0] = v73;
            v75 = *(_QWORD *)v19;
            v19 += 2;
            v76 = v75;
            v77 = *(_QWORD *)v20;
            v20 += 2;
            v72.i64[1] = v76;
            v74.i64[1] = v77;
            v65 = vmlaq_n_f32(vmlaq_n_f32(v65, (float32x4_t)vtrn1q_s32(v72, v74), v69), (float32x4_t)vtrn2q_s32(v72, v74), v70);
            v14 = v64 <= 2;
            v64 -= 2;
          }
          while (!v14);
        }
        v79.i32[0] = a8->i32[0];
        v78 = (__int32 *)((char *)a8 + v13 * 4);
        v79.i32[1] = *v78;
        v80 = &v78[v13];
        v79.i32[2] = *v80;
        v81 = &v80[v13];
        v79.i32[3] = *v81;
        v82 = &v81[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v65, a9), v79, a10);
        v83 = &v82[v13];
        *v82 = a11.i32[0];
        a8 = (float32x4_t *)(v82 + 1);
        *v83 = a11.i32[1];
        v84 = &v83[v13];
        *v84 = a11.i32[2];
        v84[a12] = a11.i32[3];
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)&v16->i32[1] - v12 * a3);
        v14 = v63-- <= 1;
      }
      while (!v14);
    }
    a6 += 2 * a7;
    a8 = v21;
    v14 = i <= 4;
  }
  v14 = i <= -3;
  for (k = i + 3; !v14; --k)
  {
    v86 = a4;
    v87 = a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v93 = *v86,
              v86 = (float32x4_t *)((char *)v86 + v12),
              v94 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              v92 = vmlaq_n_f32(v92, v93, v94),
              v91 = a3 - 1,
              a3 > 1))
        {
          v95 = *v86;
          v96 = *(float32x4_t *)((char *)v86 + v12);
          v14 = v91 <= 2;
          for (m = v91 - 2; !v14; m -= 2)
          {
            v86 = (float32x4_t *)((char *)v86 + 2 * v12);
            v98 = *v87++;
            v99 = vmlaq_n_f32(v92, v95, v98.f32[0]);
            v95 = *v86;
            v92 = vmlaq_lane_f32(v99, v96, v98, 1);
            v96 = *(float32x4_t *)((char *)v86 + v12);
            v14 = m <= 2;
          }
          v86 = (float32x4_t *)((char *)v86 + 2 * v12);
          v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, v95, COERCE_FLOAT(*v87)), v96, *v87, 1);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = a6;
        v86 = (float32x4_t *)((char *)v86 - v12 * a3 + 16);
        v89 = __OFSUB__(v90, 4);
        v14 = v90 <= 4;
        v90 -= 4;
      }
      while (!v14);
    }
    v100 = result & 3;
    if (!v89 && v100 != 0)
    {
      do
      {
        v101 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v102 = v86->f32[0],
              v86 = (float32x4_t *)((char *)v86 + v12),
              v103 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v103, v102),
              v101 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v104.i32[0] = v86->i32[0];
            v105 = (__int32 *)((char *)v86 + v12);
            v104.i32[1] = *v105;
            v86 = (float32x4_t *)&v105[(unint64_t)v12 / 4];
            v106 = *v87++;
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v106, v104);
            v14 = v101 <= 2;
            v101 -= 2;
          }
          while (!v14);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = a6;
        v86 = (float32x4_t *)((char *)&v86->i32[1] - v12 * a3);
        v14 = v100-- <= 1;
      }
      while (!v14);
    }
    a6 = (float32x2_t *)((char *)a6 + 4 * a7);
    a8 = v88;
    v14 = k <= 1;
  }
  return result;
}

void sub_239A2D8D4(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, double *__X, uint64_t __incX, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  int8x16_t v13;
  double v20;
  double *v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  unint64_t *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  double *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  double *v48;
  int64x2_t *v49;
  int64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double *i64;
  float64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  uint64_t v91;
  float64x2_t *v92;
  float64x2_t *v93;
  double *v94;
  int64x2_t *v95;
  int64x2_t *v96;
  float64x2_t *v97;
  uint64_t v98;
  int64x2_t *v99;
  int64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v24 = 2;
      }
      else
      {
        v28 = *(double *)(a3 + 8 * a4);
        v29 = (unint64_t *)(__X + 1);
        v24 = 2;
        v30 = __N;
        do
        {
          *(_QWORD *)&a10.f64[0] = *v29;
          v31 = *((double *)v29 - 1) * a7;
          *((double *)v29 - 1) = v31;
          *(double *)v29 = a10.f64[0] * a7 - v31 * v28;
          v29 += __incX;
          --v30;
        }
        while (v30);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, __X, __incX);
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
  }
  else if (__N < 1)
  {
    v24 = 3;
  }
  else
  {
    v20 = *(double *)(a3 + 8 * a4);
    v21 = (double *)(a3 + 16 * a4);
    v22 = *v21;
    a10.f64[0] = v21[1];
    v23 = __X + 2;
    v24 = 3;
    v25 = __N;
    do
    {
      v26 = *(v23 - 2) * a7;
      v27 = *(v23 - 1) * a7 - v26 * v20;
      *(v23 - 2) = v26;
      *(v23 - 1) = v27;
      *v23 = -(a10.f64[0] * v27 + v26 * v22 - *v23 * a7);
      v23 += __incX;
      --v25;
    }
    while (v25);
  }
  if (v24 < a1)
  {
    v32 = 3 * __incX;
    v33 = 32 * __incX;
    v34 = 2 * __incX;
    v35 = 8 * __incX;
    do
    {
      if (__N < 4)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v37 = (unint64_t *)(a3 + 8 * v24 * a4);
        v38 = (unint64_t *)(a3 + 8 * (a4 + v24 * a4));
        v40 = (unint64_t *)(a3 + 8 * (v24 + 3) * a4);
        v41 = __X;
        do
        {
          v42 = (float64x2_t *)&v41[(unint64_t)v35 / 8];
          v43 = (float64x2_t *)&v41[v34];
          v44 = (float64x2_t *)&v41[v32];
          v39 = (unint64_t *)(a3 + 8 * (v24 + 2) * a4);
          v45 = (float64x2_t *)v39;
          v46 = (float64x2_t *)v41;
          v47 = v24;
          v48 = (double *)(a3 + 8 * (a4 + v24 * a4));
          v49 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v50 = (int64x2_t *)(a3 + 8 * v24 * a4);
          v51 = (float64x2_t)veorq_s8(v13, v13);
          v52 = v51;
          v53 = v51;
          v54 = v51;
          v55 = v51;
          v56 = v51;
          v57 = v51;
          v58 = v51;
          if ((v24 & 1) != 0)
          {
            *(_QWORD *)&a10.f64[0] = *v37;
            v50 = (int64x2_t *)(v37 + 1);
            *(_QWORD *)&a11.f64[0] = *v38;
            v48 = (double *)(v38 + 1);
            *(_QWORD *)&a12.f64[0] = *v39;
            v45 = (float64x2_t *)(v39 + 1);
            *(_QWORD *)&a13.f64[0] = *v40;
            v49 = (int64x2_t *)(v40 + 1);
            v59 = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)a11);
            v60 = (float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13);
            v46 = (float64x2_t *)(v41 + 1);
            v61 = v42->f64[0];
            v42 = (float64x2_t *)((char *)v42 + 8);
            v62 = v43->f64[0];
            v43 = (float64x2_t *)((char *)v43 + 8);
            v63 = v44->f64[0];
            v44 = (float64x2_t *)((char *)v44 + 8);
            v51 = vmlaq_n_f64(v51, v59, *v41);
            v53 = vmlaq_n_f64(v53, v59, v61);
            v55 = vmlaq_n_f64(v55, v59, v62);
            v57 = vmlaq_n_f64(v57, v59, v63);
            v52 = vmlaq_n_f64(v52, v60, *v41);
            v54 = vmlaq_n_f64(v54, v60, v61);
            v56 = vmlaq_n_f64(v56, v60, v62);
            v58 = vmlaq_n_f64(v58, v60, v63);
            v47 = v24 - 1;
          }
          for (; v47; v47 -= 2)
          {
            v64 = *v50++;
            v65 = *(int64x2_t *)v48;
            v48 += 2;
            v66 = *(int64x2_t *)v45++;
            v67 = *v49++;
            v68 = (float64x2_t)vtrn1q_s64(v64, v65);
            v69 = (float64x2_t)vtrn1q_s64(v66, v67);
            v70 = (float64x2_t)vtrn2q_s64(v64, v65);
            v71 = (float64x2_t)vtrn2q_s64(v66, v67);
            v72 = *v46++;
            v73 = *v42++;
            v74 = *v43++;
            v75 = *v44++;
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v68, v72.f64[0]), v70, v72, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v68, v73.f64[0]), v70, v73, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v68, v74.f64[0]), v70, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v68, v75.f64[0]), v70, v75, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v69, v72.f64[0]), v71, v72, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v69, v73.f64[0]), v71, v73, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v69, v74.f64[0]), v71, v74, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, v75.f64[0]), v71, v75, 1);
          }
          v76 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v46, a7), v51);
          v77 = (int64x2_t)vsubq_f64(vmulq_n_f64(v46[1], a7), v52);
          v78 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v42, a7), v53);
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(v42[1], a7), v54);
          v80 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v43, a7), v55);
          v81 = (int64x2_t)vsubq_f64(vmulq_n_f64(v43[1], a7), v56);
          v82 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v44, a7), v57);
          v83 = (int64x2_t)vsubq_f64(vmulq_n_f64(v44[1], a7), v58);
          v84 = (float64x2_t)vtrn2q_s64(v76, v78);
          v85 = (float64x2_t)vtrn1q_s64(v76, v78);
          v86 = (float64x2_t)vtrn1q_s64(v80, v82);
          v88 = *(float64x2_t *)v49;
          i64 = (double *)v49[1].i64;
          a12 = vmlsq_lane_f64(v84, v85, *v48, 0);
          a13 = vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v80, v82), v86, *v48, 0);
          a10 = vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v77, v79), v85, v45->f64[0], 0), a12, *v45, 1);
          a11 = vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v81, v83), v86, v45->f64[0], 0), a13, *v45, 1);
          v89 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v77, v79), v85, v88.f64[0], 0), a12, v88, 1), a10, *i64, 0);
          v90 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v81, v83), v86, v88.f64[0], 0), a13, v88, 1), a11, *i64, 0);
          v13 = (int8x16_t)vtrn1q_s64((int64x2_t)v85, (int64x2_t)a12);
          *v46 = (float64x2_t)v13;
          v46[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a10, v89);
          *(int64x2_t *)v42 = vtrn2q_s64((int64x2_t)v85, (int64x2_t)a12);
          v42[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a10, v89);
          *(int64x2_t *)v43 = vtrn1q_s64((int64x2_t)v86, (int64x2_t)a13);
          v43[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a11, v90);
          *(int64x2_t *)v44 = vtrn2q_s64((int64x2_t)v86, (int64x2_t)a13);
          v44[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a11, v90);
          v36 += 4;
          v41 = (double *)((char *)v41 + v33);
        }
        while (v36 < __N - 3);
      }
      v91 = __N - v36;
      if (__N > v36)
      {
        v93 = (float64x2_t *)(a3 + 8 * (v24 + 2) * a4);
        v94 = (double *)((char *)__X + v35 * v36);
        do
        {
          v92 = (float64x2_t *)(a3 + 8 * v24 * a4);
          v95 = (int64x2_t *)v92;
          v96 = (int64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v97 = (float64x2_t *)v94;
          v98 = v24;
          v99 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4));
          v100 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v101 = (float64x2_t)veorq_s8(v13, v13);
          v102 = v101;
          if ((v24 & 1) != 0)
          {
            v95 = (int64x2_t *)&v92->f64[1];
            v99 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4) + 8);
            v96 = (int64x2_t *)&v93->f64[1];
            v100 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4 + 8);
            a10.f64[0] = *v94;
            v97 = (float64x2_t *)(v94 + 1);
            v101 = vmlaq_n_f64(v101, *v92, *v94);
            v102 = vmlaq_n_f64(v102, *v93, *v94);
            v98 = v24 - 1;
          }
          for (; v98; v98 -= 2)
          {
            v103 = *v95++;
            v104 = *v99++;
            v105 = *v96++;
            v106 = *v100++;
            a10 = *v97++;
            v101 = vmlaq_laneq_f64(vmlaq_n_f64(v101, (float64x2_t)vtrn1q_s64(v103, v104), a10.f64[0]), (float64x2_t)vtrn2q_s64(v103, v104), a10, 1);
            v102 = vmlaq_laneq_f64(vmlaq_n_f64(v102, (float64x2_t)vtrn1q_s64(v105, v106), a10.f64[0]), (float64x2_t)vtrn2q_s64(v105, v106), a10, 1);
          }
          v107 = vsubq_f64(vmulq_n_f64(*v97, a7), v101);
          v108.f64[0] = v107.f64[0];
          *(_QWORD *)&a10.f64[1] = v99->i64[0];
          a11 = *(float64x2_t *)v96;
          a12 = *(float64x2_t *)v100;
          v13 = (int8x16_t)vmlsq_lane_f64(v107, a10, v107.f64[0], 0);
          *(_QWORD *)&v108.f64[1] = v13.i64[1];
          a13 = (float64x2_t)vtrn2q_s64(*v96, *v100);
          v109 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v97[1], a7), v102), (float64x2_t)vtrn1q_s64(*v96, *v100), v108.f64[0], 0), a13, v108, 1);
          v110.f64[0] = v109.f64[0];
          *(_QWORD *)&a10.f64[1] = v100[1].i64[0];
          v110.f64[1] = vmlsq_lane_f64(v109, a10, *(double *)&v109, 0).f64[1];
          *v97 = v108;
          v97[1] = v110;
          v94 = (double *)((char *)v94 + v35);
          --v91;
        }
        while (v91);
      }
      v24 += 4;
    }
    while (v24 < a1);
  }
}

void sub_239A2DD98(uint64_t a1, uint64_t __N, double *a3, uint64_t a4, double *a5, uint64_t __incX, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  int8x16_t v13;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t *v47;
  const double *v48;
  uint64_t v49;
  const double *v50;
  uint64_t v51;
  const double *v52;
  uint64_t v53;
  const double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  unint64_t *v67;
  double *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  double *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  double v89;
  double v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *i64;
  float64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  uint64_t v118;
  double *v119;
  float64_t *v120;
  float64_t *v121;
  double *v122;
  uint64_t v123;
  int64x2_t *v124;
  int64x2_t *v125;
  int64x2_t *v126;
  int64x2_t *v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v28 = 2;
      }
      else
      {
        v33 = &a3[a4];
        v34 = a7 / *a3;
        v35 = *v33;
        v36 = v33[1];
        v37 = a5 + 1;
        v28 = 2;
        v38 = __N;
        v39 = 1.0 / v36;
        do
        {
          v40 = *v37;
          v41 = v34 * *(v37 - 1);
          *(v37 - 1) = v41;
          *v37 = v39 * (v40 * a7 - v41 * v35);
          v37 += __incX;
          --v38;
        }
        while (v38);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *a3, a5, __incX);
      v28 = 1;
    }
    else
    {
      v28 = 0;
    }
  }
  else if (__N < 1)
  {
    v28 = 3;
  }
  else
  {
    v19 = &a3[a4];
    v20 = &a3[2 * a4];
    v21 = *v20;
    v22 = v20[1];
    v23 = a7 / *a3;
    v24 = *v19;
    v25 = 1.0 / v19[1];
    v26 = v20[2];
    v27 = a5 + 2;
    v28 = 3;
    v29 = __N;
    v30 = 1.0 / v26;
    do
    {
      v31 = v23 * *(v27 - 2);
      v32 = v25 * (*(v27 - 1) * a7 - v31 * v24);
      *(v27 - 2) = v31;
      *(v27 - 1) = v32;
      *(double *)v13.i64 = v22 * v32;
      *v27 = v30 * -(*(double *)v13.i64 + v31 * v21 - *v27 * a7);
      v27 += __incX;
      --v29;
    }
    while (v29);
  }
  if (v28 < a1)
  {
    v42 = a4 + 1;
    v43 = 3 * __incX;
    v44 = 32 * __incX;
    v45 = 2 * __incX;
    v46 = 8 * __incX;
    do
    {
      v47 = (float64x2_t *)&a3[v28 * a4];
      v48 = &v47->f64[v28];
      v49 = v28 + 1;
      v50 = &a3[(v28 + 1) * v42];
      v51 = v28 + 2;
      v52 = &a3[(v28 + 2) * v42];
      v53 = v28 + 3;
      v54 = &a3[(v28 + 3) * v42];
      v55 = vld1q_dup_f64(v48);
      v56 = vld1q_dup_f64(v50);
      v57 = vld1q_dup_f64(v52);
      v58 = vld1q_dup_f64(v54);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v60 = vdivq_f64(v59, v55);
      v61 = vdivq_f64(v59, v56);
      v62 = vdivq_f64(v59, v57);
      v63 = vdivq_f64(v59, v58);
      if (__N < 4)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v66 = &a3[v51 * a4];
        v67 = (unint64_t *)&a3[v53 * a4];
        v68 = a5;
        do
        {
          v69 = (float64x2_t *)&v68[(unint64_t)v46 / 8];
          v70 = (float64x2_t *)&v68[v45];
          v71 = (float64x2_t *)&v68[v43];
          v72 = (float64x2_t *)v68;
          v73 = v28;
          v65 = &a3[v49 * a4];
          v74 = v65;
          v75 = (int64x2_t *)&a3[v53 * a4];
          v76 = (int64x2_t *)&a3[v28 * a4];
          v77 = (float64x2_t *)&a3[v51 * a4];
          v78 = (float64x2_t)veorq_s8(v13, v13);
          v79 = v78;
          v80 = v78;
          v81 = v78;
          v82 = v78;
          v83 = v78;
          v84 = v78;
          v85 = v78;
          if ((v28 & 1) != 0)
          {
            v57.f64[0] = v47->f64[0];
            v76 = (int64x2_t *)&v47->f64[1];
            v58.f64[0] = *v65;
            v74 = v65 + 1;
            v59.f64[0] = *v66;
            v77 = (float64x2_t *)(v66 + 1);
            *(_QWORD *)&a13.f64[0] = *v67;
            v75 = (int64x2_t *)(v67 + 1);
            v86 = (float64x2_t)vtrn1q_s64((int64x2_t)v57, (int64x2_t)v58);
            v87 = (float64x2_t)vtrn1q_s64((int64x2_t)v59, (int64x2_t)a13);
            v72 = (float64x2_t *)(v68 + 1);
            v88 = v69->f64[0];
            v69 = (float64x2_t *)((char *)v69 + 8);
            v89 = v70->f64[0];
            v70 = (float64x2_t *)((char *)v70 + 8);
            v90 = v71->f64[0];
            v71 = (float64x2_t *)((char *)v71 + 8);
            v78 = vmlaq_n_f64(v78, v86, *v68);
            v80 = vmlaq_n_f64(v80, v86, v88);
            v82 = vmlaq_n_f64(v82, v86, v89);
            v84 = vmlaq_n_f64(v84, v86, v90);
            v79 = vmlaq_n_f64(v79, v87, *v68);
            v81 = vmlaq_n_f64(v81, v87, v88);
            v83 = vmlaq_n_f64(v83, v87, v89);
            v85 = vmlaq_n_f64(v85, v87, v90);
            v73 = v28 - 1;
          }
          for (; v73; v73 -= 2)
          {
            v91 = *v76++;
            v92 = *(int64x2_t *)v74;
            v74 += 2;
            v93 = *(int64x2_t *)v77++;
            v94 = *v75++;
            v95 = (float64x2_t)vtrn1q_s64(v91, v92);
            v96 = (float64x2_t)vtrn1q_s64(v93, v94);
            v97 = (float64x2_t)vtrn2q_s64(v91, v92);
            v98 = (float64x2_t)vtrn2q_s64(v93, v94);
            v99 = *v72++;
            v100 = *v69++;
            v101 = *v70++;
            v102 = *v71++;
            v78 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v95, v99.f64[0]), v97, v99, 1);
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v95, v100.f64[0]), v97, v100, 1);
            v82 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v95, v101.f64[0]), v97, v101, 1);
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v95, v102.f64[0]), v97, v102, 1);
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v96, v99.f64[0]), v98, v99, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v96, v100.f64[0]), v98, v100, 1);
            v83 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v96, v101.f64[0]), v98, v101, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v96, v102.f64[0]), v98, v102, 1);
          }
          v103 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v72, a7), v78);
          v104 = (int64x2_t)vsubq_f64(vmulq_n_f64(v72[1], a7), v79);
          v105 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v69, a7), v80);
          v106 = (int64x2_t)vsubq_f64(vmulq_n_f64(v69[1], a7), v81);
          v107 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v70, a7), v82);
          v108 = (int64x2_t)vsubq_f64(vmulq_n_f64(v70[1], a7), v83);
          v109 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v71, a7), v84);
          v110 = (int64x2_t)vsubq_f64(vmulq_n_f64(v71[1], a7), v85);
          v111 = (float64x2_t)vtrn2q_s64(v103, v105);
          v112 = vmulq_f64((float64x2_t)vtrn1q_s64(v103, v105), v60);
          v113 = vmulq_f64((float64x2_t)vtrn1q_s64(v107, v109), v60);
          v115 = *(float64x2_t *)v75;
          i64 = (double *)v75[1].i64;
          v59 = vmulq_f64(vmlsq_lane_f64(v111, v112, *v74, 0), v61);
          a13 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v107, v109), v113, *v74, 0), v61);
          v57 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v104, v106), v112, v77->f64[0], 0), v59, *v77, 1), v62);
          v58 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v108, v110), v113, v77->f64[0], 0), a13, *v77, 1), v62);
          v116 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v104, v106), v112, v115.f64[0], 0), v59, v115, 1), v57, *i64, 0), v63);
          v117 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v108, v110), v113, v115.f64[0], 0), a13, v115, 1), v58, *i64, 0), v63);
          v13 = (int8x16_t)vtrn1q_s64((int64x2_t)v112, (int64x2_t)v59);
          *v72 = (float64x2_t)v13;
          v72[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v57, v116);
          *(int64x2_t *)v69 = vtrn2q_s64((int64x2_t)v112, (int64x2_t)v59);
          v69[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v57, v116);
          *(int64x2_t *)v70 = vtrn1q_s64((int64x2_t)v113, (int64x2_t)a13);
          v70[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v58, v117);
          *(int64x2_t *)v71 = vtrn2q_s64((int64x2_t)v113, (int64x2_t)a13);
          v71[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v58, v117);
          v64 += 4;
          v68 = (double *)((char *)v68 + v44);
        }
        while (v64 < __N - 3);
      }
      v118 = __N - v64;
      if (__N > v64)
      {
        v119 = &a3[v49 * a4];
        v120 = &a3[v51 * a4];
        v121 = &a3[v53 * a4];
        v122 = (double *)((char *)a5 + v46 * v64);
        do
        {
          v123 = v28;
          v124 = (int64x2_t *)v119;
          v125 = (int64x2_t *)v121;
          v126 = (int64x2_t *)&a3[v28 * a4];
          v127 = (int64x2_t *)v120;
          v128 = (float64x2_t *)v122;
          v129 = (float64x2_t)veorq_s8(v13, v13);
          v130 = v129;
          if ((v28 & 1) != 0)
          {
            v126 = (int64x2_t *)&v47->f64[1];
            v124 = (int64x2_t *)(v119 + 1);
            v131.f64[0] = *v120;
            v127 = (int64x2_t *)(v120 + 1);
            v125 = (int64x2_t *)(v121 + 1);
            v57.f64[0] = *v122;
            v128 = (float64x2_t *)(v122 + 1);
            v131.f64[1] = *v121;
            v129 = vmlaq_n_f64(v129, *v47, *v122);
            v130 = vmlaq_n_f64(v130, v131, *v122);
            v123 = v28 - 1;
          }
          for (; v123; v123 -= 2)
          {
            v132 = *v126++;
            v133 = *v124++;
            v134 = *v127++;
            v135 = *v125++;
            v57 = *v128++;
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v129, (float64x2_t)vtrn1q_s64(v132, v133), v57.f64[0]), (float64x2_t)vtrn2q_s64(v132, v133), v57, 1);
            v130 = vmlaq_laneq_f64(vmlaq_n_f64(v130, (float64x2_t)vtrn1q_s64(v134, v135), v57.f64[0]), (float64x2_t)vtrn2q_s64(v134, v135), v57, 1);
          }
          v136 = vsubq_f64(vmulq_n_f64(*v128, a7), v129);
          v137.f64[0] = v136.f64[0] * v60.f64[0];
          *(_QWORD *)&v57.f64[1] = v124->i64[0];
          v13 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(v136, v57, v136.f64[0] * v60.f64[0], 0), v61);
          *(_QWORD *)&v137.f64[1] = v13.i64[1];
          a13 = (float64x2_t)vtrn2q_s64(*v127, *v125);
          v138 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v128[1], a7), v130), (float64x2_t)vtrn1q_s64(*v127, *v125), v137.f64[0], 0), a13, v137, 1);
          v139.f64[0] = v138.f64[0] * v62.f64[0];
          *(_QWORD *)&v57.f64[1] = v125[1].i64[0];
          v139.f64[1] = vmulq_f64(vmlsq_lane_f64(v138, v57, *(double *)&v138 * *(double *)&v62, 0), v63).f64[1];
          *v128 = v137;
          v128[1] = v139;
          v122 = (double *)((char *)v122 + v46);
          --v118;
        }
        while (v118);
      }
      v28 += 4;
    }
    while (v28 < a1);
  }
}

void sub_239A2E318(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  int8x16_t v7;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double *v95;
  float64x2_t v96;
  float64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  uint64_t v100;
  float64x2_t *v101;
  uint64_t v102;
  double *v103;
  float64x2_t *v104;
  uint64_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  BOOL v125;

  v14 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v23 = *(double *)(a3 + 8 * (a1 + v14 * a4) - 16);
        v24 = (double *)(a5 + 8 * v14);
        v25 = __N;
        do
        {
          v26 = *(v24 - 1);
          v27 = *v24 * a7;
          *v24 = v27;
          *(v24 - 1) = v26 * a7 - v27 * v23;
          v24 += __incX;
          --v25;
        }
        while (v25);
      }
      v14 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v14), __incX);
      v14 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v15 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
      v16 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 3));
      v17 = *(double *)(a3 + 8 * (a1 - 3 + (a1 - 2) * a4));
      v18 = (double *)(a5 + 8 * v14);
      v19 = __N;
      do
      {
        v20 = *(v18 - 1);
        v21 = *v18 * a7;
        *v18 = v21;
        v22 = v20 * a7 - v21 * v15;
        *(v18 - 2) = -(v17 * v22 + v21 * v16 - *(v18 - 2) * a7);
        *(v18 - 1) = v22;
        v18 += __incX;
        --v19;
      }
      while (v19);
    }
    v14 = a1 - 4;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v28 = 8 * a4;
    v29 = v14 + 1;
    v30 = 3 * __incX;
    v31 = a5 + 8 * v14 + 8;
    v32 = 32 * __incX;
    v33 = 2 * __incX;
    v34 = 8 * __incX;
    do
    {
      v35 = v29 - 4;
      if (__N < 4)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v38 = a1 - v35;
        if (a1 - v35 <= 4)
          v38 = 4;
        v39 = (double *)v31;
        do
        {
          v40 = (float64x2_t *)&v39[(unint64_t)v34 / 8];
          v41 = (float64x2_t *)&v39[v33];
          v42 = (float64x2_t *)&v39[v30];
          v43 = (float64x2_t *)v39;
          v37 = a3 + 8 * v35 + 8 * v29 * a4;
          v44 = (float64x2_t *)v37;
          v45 = v38 - 4;
          v46 = (float64x2_t)veorq_s8(v7, v7);
          v47 = v46;
          v48 = v46;
          v49 = v46;
          v50 = v46;
          v51 = v46;
          v52 = v46;
          v53 = v46;
          if ((((_BYTE)v38 - 4) & 1) != 0)
          {
            v54 = *(float64x2_t *)(v37 + 16);
            v44 = (float64x2_t *)(v37 + v28);
            v43 = (float64x2_t *)(v39 + 1);
            v55 = v40->f64[0];
            v40 = (float64x2_t *)((char *)v40 + 8);
            v56 = v41->f64[0];
            v41 = (float64x2_t *)((char *)v41 + 8);
            v57 = v42->f64[0];
            v42 = (float64x2_t *)((char *)v42 + 8);
            v46 = vmlaq_n_f64(v46, *(float64x2_t *)v37, *v39);
            v48 = vmlaq_n_f64(v48, *(float64x2_t *)v37, v55);
            v50 = vmlaq_n_f64(v50, *(float64x2_t *)v37, v56);
            v52 = vmlaq_n_f64(v52, *(float64x2_t *)v37, v57);
            v47 = vmlaq_n_f64(v47, v54, *v39);
            v49 = vmlaq_n_f64(v49, v54, v55);
            v51 = vmlaq_n_f64(v51, v54, v56);
            v53 = vmlaq_n_f64(v53, v54, v57);
            v45 = v38 - 5;
          }
          for (; v45; v45 -= 2)
          {
            v59 = *v44;
            v60 = v44[1];
            v58 = (float64x2_t *)((char *)v44 + v28);
            v61 = *v58;
            v62 = v58[1];
            v44 = (float64x2_t *)((char *)v58 + v28);
            v63 = *v43++;
            v64 = *v40++;
            v65 = *v41++;
            v66 = *v42++;
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v59, v63.f64[0]), v61, v63, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v64, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v59, v65.f64[0]), v61, v65, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v59, v66.f64[0]), v61, v66, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v60, v63.f64[0]), v62, v63, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v60, v64.f64[0]), v62, v64, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v60, v65.f64[0]), v62, v65, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v60, v66.f64[0]), v62, v66, 1);
          }
          v67 = (float64x2_t *)((char *)v44 - v28 * (v38 - 3));
          v68 = (float64x2_t *)((char *)v43 - 8 * v38);
          v69 = (float64x2_t *)((char *)v40 - 8 * v38);
          v70 = (float64x2_t *)((char *)v41 - 8 * v38);
          v71 = (float64x2_t *)((char *)v42 - 8 * v38);
          v72 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v68, a7), v46);
          v73 = (int64x2_t)vsubq_f64(vmulq_n_f64(v68[1], a7), v47);
          v74 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v69, a7), v48);
          v75 = (int64x2_t)vsubq_f64(vmulq_n_f64(v69[1], a7), v49);
          v76 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v70, a7), v50);
          v77 = (int64x2_t)vsubq_f64(vmulq_n_f64(v70[1], a7), v51);
          v78 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v71, a7), v52);
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(v71[1], a7), v53);
          v80 = (float64x2_t)vtrn2q_s64(v73, v75);
          v81 = (float64x2_t)vtrn2q_s64(v77, v79);
          v82 = (float64x2_t)vtrn1q_s64(v73, v75);
          v83 = (float64x2_t)vtrn2q_s64(v72, v74);
          v84 = (float64x2_t)vtrn1q_s64(v72, v74);
          v85 = *v67;
          v86 = v67[1];
          v87 = (float64x2_t *)((char *)v67 - v28);
          v88 = vmlsq_lane_f64(v82, v80, v86.f64[0], 0);
          v89 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v77, v79), v81, v86.f64[0], 0);
          v90 = vmlsq_laneq_f64(v83, v80, v85, 1);
          v91 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v76, v78), v81, v85, 1);
          v92 = vmlsq_lane_f64(v84, v80, v85.f64[0], 0);
          v93 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v76, v78), v81, v85.f64[0], 0);
          v94 = *v87;
          v95 = &v87->f64[v28 / 0xFFFFFFFFFFFFFFF8];
          v96 = vmlsq_laneq_f64(v90, v88, v94, 1);
          v97 = vmlsq_laneq_f64(v91, v89, v94, 1);
          v98 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v92, v88, v94.f64[0], 0), v96, *v95, 0);
          v99 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v93, v89, v94.f64[0], 0), v97, *v95, 0);
          v7 = (int8x16_t)vtrn1q_s64(v98, (int64x2_t)v96);
          *v68 = (float64x2_t)v7;
          v68[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v88, (int64x2_t)v80);
          *(int64x2_t *)v69 = vtrn2q_s64(v98, (int64x2_t)v96);
          v69[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v88, (int64x2_t)v80);
          *(int64x2_t *)v70 = vtrn1q_s64(v99, (int64x2_t)v97);
          v70[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v89, (int64x2_t)v81);
          *(int64x2_t *)v71 = vtrn2q_s64(v99, (int64x2_t)v97);
          v71[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v89, (int64x2_t)v81);
          v36 += 4;
          v39 = (double *)((char *)v39 + v32);
        }
        while (v36 < __N - 3);
      }
      v100 = __N - v36;
      if (__N > v36)
      {
        v102 = a1 - v35;
        if (a1 - v35 <= 4)
          v102 = 4;
        v103 = (double *)(v31 + v34 * v36);
        do
        {
          v101 = (float64x2_t *)(a3 + 8 * v35 + 8 * v29 * a4);
          v104 = v101;
          v105 = v102 - 4;
          v106 = (float64x2_t *)v103;
          v107 = (float64x2_t)veorq_s8(v7, v7);
          v108 = v107;
          if ((((_BYTE)v102 - 4) & 1) != 0)
          {
            v104 = (float64x2_t *)((char *)v101 + v28);
            v106 = (float64x2_t *)(v103 + 1);
            v107 = vmlaq_n_f64(v107, *v101, *v103);
            v108 = vmlaq_n_f64(v108, v101[1], *v103);
            v105 = v102 - 5;
          }
          for (; v105; v105 -= 2)
          {
            v110 = *v104;
            v111 = v104[1];
            v109 = (float64x2_t *)((char *)v104 + v28);
            v112 = *v109;
            v113 = v109[1];
            v104 = (float64x2_t *)((char *)v109 + v28);
            v114 = *v106++;
            v107 = vmlaq_laneq_f64(vmlaq_n_f64(v107, v110, v114.f64[0]), v112, v114, 1);
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(v108, v111, v114.f64[0]), v113, v114, 1);
          }
          v115 = (float64x2_t *)((char *)v104 - v28 * (v102 - 3));
          v116 = (float64x2_t *)((char *)v106 - 8 * v102);
          v117 = vmulq_n_f64(v116[1], a7);
          v118 = vsubq_f64(v117, v108);
          v117.f64[1] = v118.f64[1];
          v119 = *v115;
          v120 = v115[1];
          v121 = (float64x2_t *)((char *)v115 - v28);
          v122 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v116, a7), v107), v119, v117, 1);
          *(_QWORD *)&v117.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v118, v120, v117, 1);
          v123 = *v121;
          v124 = vmlsq_lane_f64(v122, *v121, v117.f64[0], 0);
          v123.f64[1] = v124.f64[1];
          v119.f64[0] = v121->f64[-a4];
          v7 = (int8x16_t)vmlsq_laneq_f64(v124, v119, v123, 1);
          *(_QWORD *)&v123.f64[0] = v7.i64[0];
          *v116 = v123;
          v116[1] = v117;
          v103 = (double *)((char *)v103 + v34);
          --v100;
        }
        while (v100);
      }
      v31 -= 32;
      v125 = v29 < 5;
      v29 -= 4;
    }
    while (!v125);
  }
}

void sub_239A2E7A4(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  int8x16_t v7;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  const double *v44;
  const double *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  double v75;
  double v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t *v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v114;
  float64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  uint64_t v119;
  float64x2_t *v120;
  uint64_t v121;
  double *v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t *v134;
  float64x2_t *v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  BOOL v146;

  v14 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v26 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
        v27 = (double *)(a5 + 8 * v14);
        v28 = a7 / *(double *)(a3 + 8 * (v14 * a4 + v14));
        v29 = __N;
        v30 = 1.0 / *(double *)(a3 + 8 * (a1 - 2 + (a1 - 2) * a4));
        do
        {
          v31 = *(v27 - 1);
          v32 = v28 * *v27;
          *v27 = v32;
          *(v27 - 1) = v30 * (v31 * a7 - v32 * v26);
          v27 += __incX;
          --v29;
        }
        while (v29);
      }
      v14 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v14 + v14 * a4)), (double *)(a5 + 8 * v14), __incX);
      v14 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v15 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
      v16 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 3));
      v17 = (a1 - 2) * a4;
      v18 = *(double *)(a3 + 8 * (v17 + a1 - 3));
      v19 = a7 / *(double *)(a3 + 8 * (v14 * a4 + v14));
      v20 = 1.0 / *(double *)(a3 + 8 * (a1 - 2 + v17));
      v21 = (double *)(a5 + 8 * v14);
      v22 = __N;
      v23 = 1.0 / *(double *)(a3 + 8 * (a1 - 3 + (a1 - 3) * a4));
      do
      {
        v24 = *(v21 - 1);
        v25 = v19 * *v21;
        *v21 = v25;
        *(double *)v7.i64 = v20 * (v24 * a7 - v25 * v15);
        *(v21 - 2) = v23 * -(v18 * *(double *)v7.i64 + v25 * v16 - *(v21 - 2) * a7);
        *(v21 - 1) = *(double *)v7.i64;
        v21 += __incX;
        --v22;
      }
      while (v22);
    }
    v14 = a1 - 4;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v33 = 8 * a4;
    v34 = v14 + 1;
    v35 = a4 + 1;
    v36 = 3 * __incX;
    v37 = a5 + 8 * v14 + 8;
    v38 = 32 * __incX;
    v39 = 2 * __incX;
    v40 = 8 * __incX;
    do
    {
      v41 = v34 - 4;
      v42 = (const double *)(a3 + 8 * (v34 - 4) * a4 + 8 * (v34 - 4));
      v43 = (const double *)(a3 + 8 * (v34 - 3) * v35);
      v44 = (const double *)(a3 + 8 * (v34 - 2) * v35);
      v45 = (const double *)(a3 + 8 * (v34 - 1) * v35);
      v46 = vld1q_dup_f64(v42);
      v47 = vld1q_dup_f64(v43);
      v48 = vld1q_dup_f64(v44);
      v49 = vld1q_dup_f64(v45);
      v50 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v51 = vdivq_f64(v50, v46);
      v52 = vdivq_f64(v50, v47);
      v53 = vdivq_f64(v50, v48);
      v54 = vdivq_f64(v50, v49);
      if (__N < 4)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v57 = a1 - v41;
        if (a1 - v41 <= 4)
          v57 = 4;
        v58 = (double *)v37;
        do
        {
          v59 = (float64x2_t *)&v58[(unint64_t)v40 / 8];
          v60 = (float64x2_t *)&v58[v39];
          v61 = (float64x2_t *)&v58[v36];
          v62 = v57 - 4;
          v63 = (float64x2_t *)v58;
          v56 = a3 + 8 * v41 + 8 * v34 * a4;
          v64 = (float64x2_t *)v56;
          v65 = (float64x2_t)veorq_s8(v7, v7);
          v66 = v65;
          v67 = v65;
          v68 = v65;
          v69 = v65;
          v70 = v65;
          v71 = v65;
          v72 = v65;
          if ((((_BYTE)v57 - 4) & 1) != 0)
          {
            v73 = *(float64x2_t *)(v56 + 16);
            v64 = (float64x2_t *)(v56 + v33);
            v63 = (float64x2_t *)(v58 + 1);
            v74 = v59->f64[0];
            v59 = (float64x2_t *)((char *)v59 + 8);
            v75 = v60->f64[0];
            v60 = (float64x2_t *)((char *)v60 + 8);
            v76 = v61->f64[0];
            v61 = (float64x2_t *)((char *)v61 + 8);
            v65 = vmlaq_n_f64(v65, *(float64x2_t *)v56, *v58);
            v67 = vmlaq_n_f64(v67, *(float64x2_t *)v56, v74);
            v69 = vmlaq_n_f64(v69, *(float64x2_t *)v56, v75);
            v71 = vmlaq_n_f64(v71, *(float64x2_t *)v56, v76);
            v66 = vmlaq_n_f64(v66, v73, *v58);
            v68 = vmlaq_n_f64(v68, v73, v74);
            v70 = vmlaq_n_f64(v70, v73, v75);
            v72 = vmlaq_n_f64(v72, v73, v76);
            v62 = v57 - 5;
          }
          for (; v62; v62 -= 2)
          {
            v78 = *v64;
            v79 = v64[1];
            v77 = (float64x2_t *)((char *)v64 + v33);
            v80 = *v77;
            v81 = v77[1];
            v64 = (float64x2_t *)((char *)v77 + v33);
            v82 = *v63++;
            v83 = *v59++;
            v84 = *v60++;
            v85 = *v61++;
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v78, v82.f64[0]), v80, v82, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v78, v83.f64[0]), v80, v83, 1);
            v69 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v78, v84.f64[0]), v80, v84, 1);
            v71 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v78, v85.f64[0]), v80, v85, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v79, v82.f64[0]), v81, v82, 1);
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v79, v83.f64[0]), v81, v83, 1);
            v70 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v79, v84.f64[0]), v81, v84, 1);
            v72 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v79, v85.f64[0]), v81, v85, 1);
          }
          v86 = (float64x2_t *)((char *)v64 - v33 * (v57 - 3));
          v87 = (float64x2_t *)((char *)v63 - 8 * v57);
          v88 = (float64x2_t *)((char *)v59 - 8 * v57);
          v89 = (float64x2_t *)((char *)v60 - 8 * v57);
          v90 = (float64x2_t *)((char *)v61 - 8 * v57);
          v91 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v87, a7), v65);
          v92 = (int64x2_t)vsubq_f64(vmulq_n_f64(v87[1], a7), v66);
          v93 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v88, a7), v67);
          v94 = (int64x2_t)vsubq_f64(vmulq_n_f64(v88[1], a7), v68);
          v95 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v89, a7), v69);
          v96 = (int64x2_t)vsubq_f64(vmulq_n_f64(v89[1], a7), v70);
          v97 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v90, a7), v71);
          v98 = (int64x2_t)vsubq_f64(vmulq_n_f64(v90[1], a7), v72);
          v99 = (float64x2_t)vtrn1q_s64(v92, v94);
          v100 = (float64x2_t)vtrn2q_s64(v91, v93);
          v101 = (float64x2_t)vtrn1q_s64(v91, v93);
          v102 = vmulq_f64((float64x2_t)vtrn2q_s64(v92, v94), v54);
          v103 = vmulq_f64((float64x2_t)vtrn2q_s64(v96, v98), v54);
          v104 = *v86;
          v105 = v86[1];
          v106 = (float64x2_t *)((char *)v86 - v33);
          v107 = vmlsq_laneq_f64(v100, v102, v104, 1);
          v108 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v95, v97), v103, v104, 1);
          v109 = vmlsq_lane_f64(v101, v102, v104.f64[0], 0);
          v110 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v95, v97), v103, v104.f64[0], 0);
          v111 = vmulq_f64(vmlsq_lane_f64(v99, v102, v105.f64[0], 0), v53);
          v112 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v96, v98), v103, v105.f64[0], 0), v53);
          v113 = *v106;
          v114 = &v106->f64[v33 / 0xFFFFFFFFFFFFFFF8];
          v115 = vmulq_f64(vmlsq_laneq_f64(v107, v111, v113, 1), v52);
          v116 = vmulq_f64(vmlsq_laneq_f64(v108, v112, v113, 1), v52);
          v117 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v109, v111, v113.f64[0], 0), v115, *v114, 0), v51);
          v118 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v110, v112, v113.f64[0], 0), v116, *v114, 0), v51);
          v7 = (int8x16_t)vtrn1q_s64(v117, (int64x2_t)v115);
          *v87 = (float64x2_t)v7;
          v87[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v111, (int64x2_t)v102);
          *(int64x2_t *)v88 = vtrn2q_s64(v117, (int64x2_t)v115);
          v88[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v111, (int64x2_t)v102);
          *(int64x2_t *)v89 = vtrn1q_s64(v118, (int64x2_t)v116);
          v89[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v112, (int64x2_t)v103);
          *(int64x2_t *)v90 = vtrn2q_s64(v118, (int64x2_t)v116);
          v90[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v112, (int64x2_t)v103);
          v55 += 4;
          v58 = (double *)((char *)v58 + v38);
        }
        while (v55 < __N - 3);
      }
      v119 = __N - v55;
      if (__N > v55)
      {
        v121 = a1 - v41;
        if (a1 - v41 <= 4)
          v121 = 4;
        v122 = (double *)(v37 + v40 * v55);
        do
        {
          v120 = (float64x2_t *)(a3 + 8 * v41 + 8 * v34 * a4);
          v123 = v120;
          v124 = v121 - 4;
          v125 = (float64x2_t *)v122;
          v126 = (float64x2_t)veorq_s8(v7, v7);
          v127 = v126;
          if ((((_BYTE)v121 - 4) & 1) != 0)
          {
            v123 = (float64x2_t *)((char *)v120 + v33);
            v125 = (float64x2_t *)(v122 + 1);
            v126 = vmlaq_n_f64(v126, *v120, *v122);
            v127 = vmlaq_n_f64(v127, v120[1], *v122);
            v124 = v121 - 5;
          }
          for (; v124; v124 -= 2)
          {
            v129 = *v123;
            v130 = v123[1];
            v128 = (float64x2_t *)((char *)v123 + v33);
            v131 = *v128;
            v132 = v128[1];
            v123 = (float64x2_t *)((char *)v128 + v33);
            v133 = *v125++;
            v126 = vmlaq_laneq_f64(vmlaq_n_f64(v126, v129, v133.f64[0]), v131, v133, 1);
            v127 = vmlaq_laneq_f64(vmlaq_n_f64(v127, v130, v133.f64[0]), v132, v133, 1);
          }
          v134 = (float64x2_t *)((char *)v123 - v33 * (v121 - 3));
          v135 = (float64x2_t *)((char *)v125 - 8 * v121);
          v136 = vmulq_n_f64(v135[1], a7);
          v137 = vsubq_f64(v136, v127);
          v136.f64[1] = v137.f64[1];
          v138 = vmulq_f64(v136, v54);
          v139 = *v134;
          v140 = v134[1];
          v141 = (float64x2_t *)((char *)v134 - v33);
          v142 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v135, a7), v126), v139, v138, 1);
          v138.f64[0] = vmlsq_laneq_f64(v137, v140, v138, 1).f64[0] * v53.f64[0];
          v143 = *v141;
          v144 = vmlsq_lane_f64(v142, *v141, v138.f64[0], 0);
          v143.f64[1] = v144.f64[1];
          v145 = vmulq_f64(v143, v52);
          v139.f64[0] = v141->f64[-a4];
          v7 = (int8x16_t)vmlsq_laneq_f64(v144, v139, v145, 1);
          *(double *)v7.i64 = *(double *)v7.i64 * v51.f64[0];
          *(_QWORD *)&v145.f64[0] = v7.i64[0];
          *v135 = v145;
          v135[1] = v138;
          v122 = (double *)((char *)v122 + v40);
          --v119;
        }
        while (v119);
      }
      v37 -= 32;
      v146 = v34 < 5;
      v34 -= 4;
    }
    while (!v146);
  }
}

uint64_t sub_239A2ED20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x2_t v33;
  float *v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float *v62;
  unint64_t *v63;
  float v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x2_t *v81;
  float *v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  float32x2_t v88;
  float *v89;
  float v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t *v112;
  float32x2_t *v113;
  uint64_t v114;
  float32x2_t *v115;
  float *v116;
  unint64_t *v117;
  float v118;
  float32x2_t *v119;
  float32x2_t v120;
  unint64_t *v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  unint64_t *v125;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unsigned __int32 *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x2_t *v135;
  float *v136;
  float *v137;
  float32x4_t v138;
  float *v139;
  float32x4_t v140;
  float *v141;
  float32x2_t v142;
  float *v143;
  float v144;
  unsigned __int32 *v145;
  unsigned __int32 *v146;
  unsigned __int32 *v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  __int32 *v159;
  float32x2_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float *v165;
  float *v166;
  uint64_t *v167;
  float v168;
  uint64_t v169;
  float *v170;
  float v171;
  float *v172;
  float v173;
  float v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = (float32x4_t *)((char *)v23 + v16);
        v25 = a2 - v19 - 4;
        v26 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 2 + 2];
        v27 = &v23->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v24;
        v30 = v24[1].f32;
        v33 = *v26;
        v32 = (float *)&v26[1];
        v35 = *v27;
        v34 = v27 + 1;
        a11 = *v22;
        v36 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        a13 = *v37;
        v38 = (float32x4_t *)((char *)v37 + v15);
        a14 = *v38;
        v39 = (float32x4_t *)((char *)v38 + v15);
        v40 = vmulq_n_f32(a14, v35);
        v41 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v31, 3), a12, *(float32x2_t *)v31.f32, 1), vmulq_laneq_f32(a13, v31, 2));
        v42 = vaddq_f32(vmulq_lane_f32(a14, v33, 1), vmulq_n_f32(a13, v33.f32[0]));
        v43 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmlaq_n_f32(vmulq_laneq_f32(a13, v29, 2), a11, v29.f32[0]));
        if ((v25 & 1) != 0)
        {
          v44 = *v39;
          v39 = (float32x4_t *)((char *)v39 + v15);
          v45 = *f32++;
          v46 = *v30++;
          v47 = *v32++;
          v48 = *v34++;
          v43 = vmlaq_n_f32(v43, v44, v45);
          v41 = vmlaq_n_f32(v41, v44, v46);
          v42 = vmlaq_n_f32(v42, v44, v47);
          v40 = vmlaq_n_f32(v40, v44, v48);
          v25 = a2 - v19 - 5;
        }
        if (v25)
        {
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v54 = *v39;
            v53 = (float32x4_t *)((char *)v39 + v15);
            v55 = *v53;
            v39 = (float32x4_t *)((char *)v53 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14.i64[0] = *(_QWORD *)v34;
            v34 += 2;
            v43 = vmlaq_n_f32(v43, v54, a11.f32[0]);
            v41 = vmlaq_n_f32(v41, v54, a12.f32[0]);
            v42 = vmlaq_n_f32(v42, v54, a13.f32[0]);
            v40 = vmlaq_n_f32(v40, v54, a14.f32[0]);
            v49 = vmlaq_lane_f32(v49, v55, *(float32x2_t *)a11.f32, 1);
            v50 = vmlaq_lane_f32(v50, v55, *(float32x2_t *)a12.f32, 1);
            v51 = vmlaq_lane_f32(v51, v55, *(float32x2_t *)a13.f32, 1);
            v52 = vmlaq_lane_f32(v52, v55, *(float32x2_t *)a14.f32, 1);
            v56 = v25 <= 2;
            v25 -= 2;
          }
          while (!v56);
          v43 = vaddq_f32(v43, v49);
          v41 = vaddq_f32(v41, v50);
          v42 = vaddq_f32(v42, v51);
          v40 = vaddq_f32(v40, v52);
        }
        v14 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v39 - (a2 - v19) * v15);
        *v57 = vmulq_n_f32(v43, a7);
        v58 = (float32x4_t *)((char *)v57 + v15);
        *v58 = vmulq_n_f32(v41, a7);
        v59 = (float32x4_t *)((char *)v58 + v15);
        *v59 = vmulq_n_f32(v42, a7);
        *(float32x4_t *)((char *)v59 + v15) = v14;
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v56 = v21 <= 4;
        v21 -= 4;
      }
      while (!v56);
    }
    v60 = a2 & 3;
    if (!v20 && v60 != 0)
    {
      v61 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v62 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v60 != 1)
      {
        if (v60 != 2)
        {
          v64 = *v62;
          v63 = (unint64_t *)(v62 + 1);
          a13.i64[0] = *v63;
          v62 = (float *)((char *)v63 + v16);
          v66 = *v61;
          v65 = (float32x4_t *)((char *)v61 + v15);
          v68 = *v65;
          v67 = (float32x4_t *)((char *)v65 + v15);
          a12 = *v67;
          v69 = (float32x4_t *)((char *)v67 - 2 * v15);
          *v69 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v66, v64), vmulq_n_f32(v68, a13.f32[0])), vmulq_lane_f32(a12, *(float32x2_t *)a13.f32, 1)), a7);
          v61 = (float32x4_t *)((char *)v69 + v15);
        }
        v70 = *(float32x2_t *)v62;
        v62 = (float *)((char *)v62 + v16 + 4);
        v72 = *v61;
        v71 = (float32x4_t *)((char *)v61 + v15);
        a11 = *v71;
        v73 = (float32x4_t *)((char *)v71 - v15);
        *v73 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v72, v70.f32[0]), vmulq_lane_f32(a11, v70, 1)), a7);
        v61 = (float32x4_t *)((char *)v73 + v15);
      }
      *v61 = vmulq_n_f32(vmulq_n_f32(*v61, *v62), a7);
    }
    v17 += 4;
    v56 = v18 <= 4;
    v18 -= 4;
  }
  while (!v56);
  v56 = v18 <= -3;
  result = v18 + 3;
  if (!v56)
  {
LABEL_22:
    if (result > 1)
    {
      v74 = 0;
      v75 = __OFSUB__(a2, 3);
      v76 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v77 = (unint64_t *)(a5 + v74 * v15 + 4 * v17);
          v78 = (float32x4_t *)(a3 + v74 * v16 + 4 * v74);
          v79 = (float32x4_t *)((char *)v78 + v16);
          v80 = a2 - v74 - 4;
          v81 = (float32x2_t *)&v78->u32[(unint64_t)v16 / 2 + 2];
          v82 = &v78->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v84 = *v78;
          v83 = v78[1].f32;
          v86 = *v79;
          v85 = v79[1].f32;
          v88 = *v81;
          v87 = (float *)&v81[1];
          v90 = *v82;
          v89 = v82 + 1;
          a11.i64[0] = *v77;
          v91 = (unint64_t *)((char *)v77 + v15);
          a12.i64[0] = *v91;
          v92 = (unint64_t *)((char *)v91 + v15);
          a13.i64[0] = *v92;
          v93 = (unint64_t *)((char *)v92 + v15);
          a14.i64[0] = *v93;
          v94 = (float32x2_t *)((char *)v93 + v15);
          v95 = vmul_n_f32(*(float32x2_t *)a14.f32, v90);
          v96 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v86.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v86, 2));
          v97 = vadd_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, v88, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v88.f32[0]));
          v98 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v84, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v84.f32, 1), vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2), *(float32x2_t *)a11.f32, v84.f32[0]));
          if ((v80 & 1) != 0)
          {
            v99 = *v94;
            v94 = (float32x2_t *)((char *)v94 + v15);
            v100 = *v83++;
            v101 = *v85++;
            v102 = *v87++;
            v103 = *v89++;
            v98 = vmla_n_f32(v98, v99, v100);
            v96 = vmla_n_f32(v96, v99, v101);
            v97 = vmla_n_f32(v97, v99, v102);
            v95 = vmla_n_f32(v95, v99, v103);
            v80 = a2 - v74 - 5;
          }
          if (v80)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v109 = *v94;
              v108 = (float32x2_t *)((char *)v94 + v15);
              v110 = *v108;
              v94 = (float32x2_t *)((char *)v108 + v15);
              a11.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              a12.i64[0] = *(_QWORD *)v85;
              v85 += 2;
              a13.i64[0] = *(_QWORD *)v87;
              v87 += 2;
              a14.i64[0] = *(_QWORD *)v89;
              v89 += 2;
              v98 = vmla_n_f32(v98, v109, a11.f32[0]);
              v96 = vmla_n_f32(v96, v109, a12.f32[0]);
              v97 = vmla_n_f32(v97, v109, a13.f32[0]);
              v95 = vmla_n_f32(v95, v109, a14.f32[0]);
              v104 = vmla_lane_f32(v104, v110, *(float32x2_t *)a11.f32, 1);
              v105 = vmla_lane_f32(v105, v110, *(float32x2_t *)a12.f32, 1);
              v106 = vmla_lane_f32(v106, v110, *(float32x2_t *)a13.f32, 1);
              v107 = vmla_lane_f32(v107, v110, *(float32x2_t *)a14.f32, 1);
              v56 = v80 <= 2;
              v80 -= 2;
            }
            while (!v56);
            v98 = vadd_f32(v98, v104);
            v96 = vadd_f32(v96, v105);
            v97 = vadd_f32(v97, v106);
            v95 = vadd_f32(v95, v107);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v95, a7);
          v111 = (float32x2_t *)((char *)v94 - (a2 - v74) * v15);
          *v111 = vmul_n_f32(v98, a7);
          v112 = (float32x2_t *)((char *)v111 + v15);
          *v112 = vmul_n_f32(v96, a7);
          v113 = (float32x2_t *)((char *)v112 + v15);
          *v113 = vmul_n_f32(v97, a7);
          *(float32x2_t *)((char *)v113 + v15) = *(float32x2_t *)v14.f32;
          v74 += 4;
          v75 = __OFSUB__(v76, 4);
          v56 = v76 <= 4;
          v76 -= 4;
        }
        while (!v56);
      }
      v114 = a2 & 3;
      if (!v75 && v114 != 0)
      {
        v115 = (float32x2_t *)(a5 + v74 * v15 + 4 * v17);
        v116 = (float *)(a3 + v74 * v16 + 4 * v74);
        if (v114 != 1)
        {
          if (v114 != 2)
          {
            v118 = *v116;
            v117 = (unint64_t *)(v116 + 1);
            a13.i64[0] = *v117;
            v116 = (float *)((char *)v117 + v16);
            v120 = *v115;
            v119 = (float32x2_t *)((char *)v115 + v15);
            v122 = *v119;
            v121 = (unint64_t *)((char *)v119 + v15);
            a12.i64[0] = *v121;
            v123 = (float32x2_t *)&v121[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v123 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v120, v118), vmul_n_f32(v122, a13.f32[0])), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1)), a7);
            v115 = (float32x2_t *)((char *)v123 + v15);
          }
          v124 = *(float32x2_t *)v116;
          v116 = (float *)((char *)v116 + v16 + 4);
          v126 = *v115;
          v125 = (unint64_t *)((char *)v115 + v15);
          a11.i64[0] = *v125;
          v127 = (float32x2_t *)((char *)v125 - v15);
          *v127 = vmul_n_f32(vadd_f32(vmul_n_f32(v126, v124.f32[0]), vmul_lane_f32(*(float32x2_t *)a11.f32, v124, 1)), a7);
          v115 = (float32x2_t *)((char *)v127 + v15);
        }
        *v115 = vmul_n_f32(vmul_n_f32(*v115, *v116), a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v128 = 0;
      v129 = __OFSUB__(a2, 3);
      v130 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v131 = (unsigned __int32 *)(a5 + v128 * v15 + 4 * v17);
          v132 = (float32x4_t *)(a3 + v128 * v16 + 4 * v128);
          v133 = (float32x4_t *)((char *)v132 + v16);
          v134 = a2 - v128 - 4;
          v135 = (float32x2_t *)&v132->u32[(unint64_t)v16 / 2 + 2];
          v136 = &v132->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v138 = *v132;
          v137 = v132[1].f32;
          v140 = *v133;
          v139 = v133[1].f32;
          v142 = *v135;
          v141 = (float *)&v135[1];
          v144 = *v136;
          v143 = v136 + 1;
          a11.i32[0] = *v131;
          v145 = &v131[(unint64_t)v15 / 4];
          a12.i32[0] = *v145;
          v146 = &v145[(unint64_t)v15 / 4];
          a13.i32[0] = *v146;
          v147 = &v146[(unint64_t)v15 / 4];
          a14.i32[0] = *v147;
          v148 = (float *)&v147[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v140.i32[0] = 0;
          v149 = vmulq_f32(v138, a11);
          v150 = vmulq_f32(v140, a11);
          v151 = vmul_f32(v142, *(float32x2_t *)a13.f32);
          v14.f32[0] = v144 * a14.f32[0];
          v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
          v153 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
          if ((v134 & 1) != 0)
          {
            v154 = *v148;
            v148 = (float *)((char *)v148 + v15);
            v155 = *v137++;
            v156 = *v139++;
            v157 = *v141++;
            v158 = *v143++;
            v152.f32[0] = vaddv_f32(v152) + (float)(v154 * v155);
            v153.f32[0] = vaddv_f32(v153) + (float)(v154 * v156);
            v151.f32[0] = vaddv_f32(v151) + (float)(v154 * v157);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v154 * v158);
            v134 = a2 - v128 - 5;
          }
          if (v134)
          {
            do
            {
              v160.f32[0] = *v148;
              v159 = (__int32 *)&v148[(unint64_t)v15 / 4];
              v160.i32[1] = *v159;
              v148 = (float *)&v159[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v137;
              v137 += 2;
              a12.i64[0] = *(_QWORD *)v139;
              v139 += 2;
              a13.i64[0] = *(_QWORD *)v141;
              v141 += 2;
              a14.i64[0] = *(_QWORD *)v143;
              v143 += 2;
              v152 = vmla_f32(v152, v160, *(float32x2_t *)a11.f32);
              v153 = vmla_f32(v153, v160, *(float32x2_t *)a12.f32);
              v151 = vmla_f32(v151, v160, *(float32x2_t *)a13.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v160, *(float32x2_t *)a14.f32);
              v56 = v134 <= 2;
              v134 -= 2;
            }
            while (!v56);
          }
          v161 = (float *)((char *)v148 - (a2 - v128) * v15);
          *v161 = vaddv_f32(v152) * a7;
          v162 = &v161[(unint64_t)v15 / 4];
          *v162 = vaddv_f32(v153) * a7;
          v163 = &v162[(unint64_t)v15 / 4];
          *v163 = vaddv_f32(v151) * a7;
          v163[(unint64_t)v15 / 4] = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v128 += 4;
          v129 = __OFSUB__(v130, 4);
          v56 = v130 <= 4;
          v130 -= 4;
        }
        while (!v56);
      }
      v164 = a2 & 3;
      if (!v129 && v164 != 0)
      {
        v165 = (float *)(a5 + v128 * v15 + 4 * v17);
        v166 = (float *)(a3 + v128 * v16 + 4 * v128);
        if (v164 != 1)
        {
          if (v164 != 2)
          {
            v168 = *v166;
            v167 = (uint64_t *)(v166 + 1);
            v169 = *v167;
            v166 = (float *)((char *)v167 + v16);
            v171 = *v165;
            v170 = &v165[(unint64_t)v15 / 4];
            v173 = *v170;
            v172 = &v170[(unint64_t)v15 / 4];
            v174 = *v172;
            v175 = &v172[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v175 = (float)((float)((float)(v168 * v171) + (float)(*(float *)&v169 * v173))
                          + (float)(*((float *)&v169 + 1) * v174))
                  * a7;
            v165 = &v175[(unint64_t)v15 / 4];
          }
          v177 = *v166;
          v176 = v166 + 1;
          v178 = *v176;
          v166 = &v176[(unint64_t)v16 / 4];
          v180 = *v165;
          v179 = &v165[(unint64_t)v15 / 4];
          v181 = *v179;
          v182 = &v179[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v182 = (float)((float)(v177 * v180) + (float)(v178 * v181)) * a7;
          v165 = &v182[(unint64_t)v15 / 4];
        }
        *v165 = (float)(*v165 * *v166) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A2F310(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, double a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x2_t *v75;
  float *v76;
  float *v77;
  float *v78;
  float32x4_t v79;
  float *v80;
  float32x2_t v81;
  float *v82;
  float v83;
  unint64_t *v84;
  unint64_t *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  unint64_t *v115;
  float32x2_t v116;
  float32x2_t *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned __int32 *v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float *v125;
  float *v126;
  float *v127;
  float32x4_t v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  unsigned __int32 *v135;
  float *v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int32 *v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v25 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 4 + 2];
        v26 = &v23->f32[(unint64_t)v16 / 2 + 3];
        v27 = &v23[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v25;
        v30 = (float *)&v25[1];
        v33 = *v26;
        v32 = v26 + 1;
        a11 = *v22;
        v34 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a13 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v38 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        v39 = vmlaq_n_f32(a13, v38, v33);
        v40 = vaddq_f32(vmlaq_lane_f32(a12, v38, v31, 1), vmulq_n_f32(a13, v31.f32[0]));
        v41 = vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a11, v38, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmulq_laneq_f32(a13, v29, 2));
        if ((v24 & 1) != 0)
        {
          v42 = *v37;
          v37 = (float32x4_t *)((char *)v37 + v15);
          v43 = *f32++;
          v44 = *v30++;
          v45 = *v32++;
          v46 = *v27++;
          v41 = vmlaq_n_f32(v41, v42, v43);
          v40 = vmlaq_n_f32(v40, v42, v44);
          v39 = vmlaq_n_f32(v39, v42, v45);
          v38 = vmlaq_n_f32(v38, v42, v46);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v52 = *v37;
            v51 = (float32x4_t *)((char *)v37 + v15);
            v53 = *v51;
            v37 = (float32x4_t *)((char *)v51 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14 = *(double *)v27;
            v27 += 2;
            v41 = vmlaq_n_f32(v41, v52, a11.f32[0]);
            v40 = vmlaq_n_f32(v40, v52, a12.f32[0]);
            v39 = vmlaq_n_f32(v39, v52, a13.f32[0]);
            v38 = vmlaq_n_f32(v38, v52, *(float *)&a14);
            v47 = vmlaq_lane_f32(v47, v53, *(float32x2_t *)a11.f32, 1);
            v48 = vmlaq_lane_f32(v48, v53, *(float32x2_t *)a12.f32, 1);
            v49 = vmlaq_lane_f32(v49, v53, *(float32x2_t *)a13.f32, 1);
            v50 = vmlaq_lane_f32(v50, v53, *(float32x2_t *)&a14, 1);
            v54 = v24 <= 2;
            v24 -= 2;
          }
          while (!v54);
          v41 = vaddq_f32(v41, v47);
          v40 = vaddq_f32(v40, v48);
          v39 = vaddq_f32(v39, v49);
          v38 = vaddq_f32(v38, v50);
        }
        v14 = vmulq_n_f32(v39, a7);
        v55 = (float32x4_t *)((char *)v37 - (a2 - v19) * v15);
        *v55 = vmulq_n_f32(v41, a7);
        v56 = (float32x4_t *)((char *)v55 + v15);
        *v56 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v56 + v15);
        *v57 = v14;
        *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v38, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v54 = v21 <= 4;
        v21 -= 4;
      }
      while (!v54);
    }
    v58 = a2 & 3;
    if (!v20 && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v60 = (float *)(a3 + v19 * v16 + 4 * v19 + 4);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          a13.i64[0] = *(_QWORD *)v60;
          v60 = (float *)((char *)v60 + v16 + 4);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v15);
          v64 = *v61;
          v63 = (float32x4_t *)((char *)v61 + v15);
          a12 = *v63;
          v65 = (float32x4_t *)((char *)v63 - 2 * v15);
          *v65 = vmulq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(v62, v64, a13.f32[0]), a12, *(float32x2_t *)a13.f32, 1), a7);
          v59 = (float32x4_t *)((char *)v65 + v15);
        }
        v67 = *v59;
        v66 = (float32x4_t *)((char *)v59 + v15);
        a11 = *v66;
        v68 = (float32x4_t *)((char *)v66 - v15);
        *v68 = vmulq_n_f32(vmlaq_n_f32(v67, a11, *v60), a7);
        v59 = (float32x4_t *)((char *)v68 + v15);
      }
      *v59 = vmulq_n_f32(*v59, a7);
    }
    v17 += 4;
    v54 = v18 <= 4;
    v18 -= 4;
  }
  while (!v54);
  v54 = v18 <= -3;
  result = v18 + 3;
  if (!v54)
  {
LABEL_22:
    if (result > 1)
    {
      v69 = 0;
      v70 = __OFSUB__(a2, 3);
      v71 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v72 = (unint64_t *)(a5 + v69 * v15 + 4 * v17);
          v73 = (float32x4_t *)(a3 + v69 * v16 + 4 * v69);
          v74 = a2 - v69 - 4;
          v75 = (float32x2_t *)&v73->u32[(unint64_t)v16 / 4 + 2];
          v76 = &v73->f32[(unint64_t)v16 / 2 + 3];
          v77 = &v73[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v79 = *v73;
          v78 = v73[1].f32;
          v81 = *v75;
          v80 = (float *)&v75[1];
          v83 = *v76;
          v82 = v76 + 1;
          a11.i64[0] = *v72;
          v84 = (unint64_t *)((char *)v72 + v15);
          a12.i64[0] = *v84;
          v85 = (unint64_t *)((char *)v84 + v15);
          a13.i64[0] = *v85;
          v86 = (float32x2_t *)((char *)v85 + v15);
          v88 = *v86;
          v87 = (float32x2_t *)((char *)v86 + v15);
          v89 = vmla_n_f32(*(float32x2_t *)a13.f32, v88, v83);
          v90 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v88, v81, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v81.f32[0]));
          v91 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)a11.f32, v88, v79, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v79.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v79, 2));
          if ((v74 & 1) != 0)
          {
            v92 = *v87;
            v87 = (float32x2_t *)((char *)v87 + v15);
            v93 = *v78++;
            v94 = *v80++;
            v95 = *v82++;
            v96 = *v77++;
            v91 = vmla_n_f32(v91, v92, v93);
            v90 = vmla_n_f32(v90, v92, v94);
            v89 = vmla_n_f32(v89, v92, v95);
            v88 = vmla_n_f32(v88, v92, v96);
            v74 = a2 - v69 - 5;
          }
          if (v74)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v102 = *v87;
              v101 = (float32x2_t *)((char *)v87 + v15);
              v103 = *v101;
              v87 = (float32x2_t *)((char *)v101 + v15);
              a11.i64[0] = *(_QWORD *)v78;
              v78 += 2;
              a12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              a13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              a14 = *(double *)v77;
              v77 += 2;
              v91 = vmla_n_f32(v91, v102, a11.f32[0]);
              v90 = vmla_n_f32(v90, v102, a12.f32[0]);
              v89 = vmla_n_f32(v89, v102, a13.f32[0]);
              v88 = vmla_n_f32(v88, v102, *(float *)&a14);
              v97 = vmla_lane_f32(v97, v103, *(float32x2_t *)a11.f32, 1);
              v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
              v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
              v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)&a14, 1);
              v54 = v74 <= 2;
              v74 -= 2;
            }
            while (!v54);
            v91 = vadd_f32(v91, v97);
            v90 = vadd_f32(v90, v98);
            v89 = vadd_f32(v89, v99);
            v88 = vadd_f32(v88, v100);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v89, a7);
          v104 = (float32x2_t *)((char *)v87 - (a2 - v69) * v15);
          *v104 = vmul_n_f32(v91, a7);
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v90, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = *(float32x2_t *)v14.f32;
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v88, a7);
          v69 += 4;
          v70 = __OFSUB__(v71, 4);
          v54 = v71 <= 4;
          v71 -= 4;
        }
        while (!v54);
      }
      v107 = a2 & 3;
      if (!v70 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v69 * v15 + 4 * v17);
        v109 = (float *)(a3 + v69 * v16 + 4 * v69 + 4);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            a13.i64[0] = *(_QWORD *)v109;
            v109 = (float *)((char *)v109 + v16 + 4);
            v111 = *v108;
            v110 = (float32x2_t *)((char *)v108 + v15);
            v113 = *v110;
            v112 = (unint64_t *)((char *)v110 + v15);
            a12.i64[0] = *v112;
            v114 = (float32x2_t *)&v112[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v114 = vmul_n_f32(vmla_lane_f32(vmla_n_f32(v111, v113, a13.f32[0]), *(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1), a7);
            v108 = (float32x2_t *)((char *)v114 + v15);
          }
          v116 = *v108;
          v115 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v115;
          v117 = (float32x2_t *)((char *)v115 - v15);
          *v117 = vmul_n_f32(vmla_n_f32(v116, *(float32x2_t *)a11.f32, *v109), a7);
          v108 = (float32x2_t *)((char *)v117 + v15);
        }
        *v108 = vmul_n_f32(*v108, a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v118 = 0;
      v119 = __OFSUB__(a2, 3);
      v120 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v121 = (unsigned __int32 *)(a5 + v118 * v15 + 4 * v17);
          v122 = (float32x4_t *)(a3 + v118 * v16 + 4 * v118);
          v123 = a2 - v118 - 4;
          v124 = (float32x2_t *)&v122->u32[(unint64_t)v16 / 4 + 2];
          v125 = &v122->f32[(unint64_t)v16 / 2 + 3];
          v126 = &v122[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v128 = *v122;
          v127 = v122[1].f32;
          v130 = *v124;
          v129 = (float *)&v124[1];
          v132 = *v125;
          v131 = v125 + 1;
          a11.i32[0] = *v121;
          v133 = &v121[(unint64_t)v15 / 4];
          a12.i32[0] = *v133;
          v134 = &v133[(unint64_t)v15 / 4];
          a13.i32[0] = *v134;
          v135 = &v134[(unint64_t)v15 / 4];
          LODWORD(a14) = *v135;
          v136 = (float *)&v135[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)&a14);
          a11.i64[1] = a13.i64[0];
          v128.i32[0] = 0;
          v137 = vmulq_f32(v128, a11);
          v139 = vmul_f32(v130, *(float32x2_t *)a13.f32);
          v138 = (float32x2_t)LODWORD(a14);
          v140 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
          v139.f32[0] = vaddv_f32(v139) + a12.f32[0];
          v14.f32[0] = (float)(v132 * *(float *)&a14) + a13.f32[0];
          v140.f32[0] = vaddv_f32(v140) + a11.f32[0];
          if ((v123 & 1) != 0)
          {
            v141 = *v136;
            v136 = (float *)((char *)v136 + v15);
            v142 = *v127++;
            v143 = *v129++;
            v144 = *v131++;
            v145 = *v126++;
            v140.f32[0] = vaddv_f32(v140) + (float)(v141 * v142);
            v139.f32[0] = vaddv_f32(v139) + (float)(v141 * v143);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v141 * v144);
            v138.f32[0] = vaddv_f32(v138) + (float)(v141 * v145);
            v123 = a2 - v118 - 5;
          }
          if (v123)
          {
            do
            {
              v147.f32[0] = *v136;
              v146 = (__int32 *)&v136[(unint64_t)v15 / 4];
              v147.i32[1] = *v146;
              v136 = (float *)&v146[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v127;
              v127 += 2;
              a12.i64[0] = *(_QWORD *)v129;
              v129 += 2;
              a13.i64[0] = *(_QWORD *)v131;
              v131 += 2;
              a14 = *(double *)v126;
              v126 += 2;
              v140 = vmla_f32(v140, v147, *(float32x2_t *)a11.f32);
              v139 = vmla_f32(v139, v147, *(float32x2_t *)a12.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v147, *(float32x2_t *)a13.f32);
              v138 = vmla_f32(v138, v147, *(float32x2_t *)&a14);
              v54 = v123 <= 2;
              v123 -= 2;
            }
            while (!v54);
          }
          v148 = (float *)((char *)v136 - (a2 - v118) * v15);
          *v148 = vaddv_f32(v140) * a7;
          v149 = &v148[(unint64_t)v15 / 4];
          *v149 = vaddv_f32(v139) * a7;
          v150 = &v149[(unint64_t)v15 / 4];
          *v150 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v150[(unint64_t)v15 / 4] = vaddv_f32(v138) * a7;
          v118 += 4;
          v119 = __OFSUB__(v120, 4);
          v54 = v120 <= 4;
          v120 -= 4;
        }
        while (!v54);
      }
      v151 = a2 & 3;
      if (!v119 && v151 != 0)
      {
        v152 = (float *)(a5 + v118 * v15 + 4 * v17);
        v153 = (float *)(a3 + v118 * v16 + 4 * v118 + 4);
        if (v151 != 1)
        {
          if (v151 != 2)
          {
            v154 = *(_QWORD *)v153;
            v153 = (float *)((char *)v153 + v16 + 4);
            v156 = *v152;
            v155 = &v152[(unint64_t)v15 / 4];
            v158 = *v155;
            v157 = &v155[(unint64_t)v15 / 4];
            v159 = *v157;
            v160 = &v157[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v160 = (float)((float)(v156 + (float)(*(float *)&v154 * v158)) + (float)(*((float *)&v154 + 1) * v159))
                  * a7;
            v152 = &v160[(unint64_t)v15 / 4];
          }
          v162 = *v152;
          v161 = &v152[(unint64_t)v15 / 4];
          v163 = *v161;
          v164 = &v161[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v164 = (float)(v162 + (float)(*v153 * v163)) * a7;
          v152 = &v164[(unint64_t)v15 / 4];
        }
        *v152 = *v152 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A2F8C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL i;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  BOOL j;
  float32x2_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  uint64_t v100;
  float32x2_t *v101;
  float *v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float32x2_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float32x2_t *v114;
  float32x2_t v115;
  uint64_t v116;
  BOOL k;
  float *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float *v126;
  float v127;
  float *v128;
  float v129;
  float *v130;
  float v131;
  float v132;
  float *v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  __int32 *v152;
  __int32 *v153;
  float32x2_t v154;
  float v155;
  __int32 *v156;
  float32x2_t v157;
  float *v158;
  float v159;
  float v160;
  float *v161;
  float v162;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (result <= 3)
    goto LABEL_21;
  v10 = result - 3;
  do
  {
    v11 = a2;
    for (i = __OFSUB__(a2, 3); v11 > 3; i = __OFSUB__(v11, 3))
    {
      v11 -= 4;
      v13 = (float32x4_t *)(a5 + v11 * v7 + 4 * v9);
      v14 = (float32x4_t *)(a3 + 4 * v11);
      v15 = (float32x4_t *)((char *)v14 + v11 * v8);
      v16 = v11;
      v18 = *v15;
      v17 = (float32x4_t *)((char *)v15 + v8);
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v22 = *v13;
      v21 = (float32x4_t *)((char *)v13 + v7);
      v24 = *v21;
      v23 = (float32x4_t *)((char *)v21 + v7);
      v26 = *v23;
      v25 = (float32x4_t *)((char *)v23 + v7);
      v27 = *v25;
      v28 = (float32x4_t *)((char *)v25 + v7 - v11 * v7 + -4 * v7);
      v29 = vmulq_n_f32(v22, v18.f32[0]);
      v30 = vaddq_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v24, *(float32x2_t *)v19.f32, 1));
      v31 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v22, v18, 2), v26, COERCE_FLOAT(*v20)), vmulq_laneq_f32(v24, v19, 2));
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v22, v18, 3), v26, *v20, 1), vmlaq_n_f32(vmulq_laneq_f32(v24, v19, 3), v27, v20->f32[(unint64_t)v8 / 4 + 1]));
      if ((v11 & 1) != 0)
      {
        v33 = *v28;
        v28 = (float32x4_t *)((char *)v28 + v7);
        v34 = *v14;
        v14 = (float32x4_t *)((char *)v14 + v8);
        v29 = vmlaq_n_f32(v29, v33, v34.f32[0]);
        v30 = vmlaq_lane_f32(v30, v33, *(float32x2_t *)v34.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v33, v34, 2);
        v32 = vmlaq_laneq_f32(v32, v33, v34, 3);
        v16 = v11 - 1;
      }
      if (v16)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v28;
          v39 = (float32x4_t *)((char *)v28 + v7);
          v41 = *v39;
          v28 = (float32x4_t *)((char *)v39 + v7);
          v43 = *v14;
          v42 = (float32x4_t *)((char *)v14 + v8);
          v44 = *v42;
          v14 = (float32x4_t *)((char *)v42 + v8);
          v29 = vmlaq_n_f32(v29, v40, v43.f32[0]);
          v30 = vmlaq_lane_f32(v30, v40, *(float32x2_t *)v43.f32, 1);
          v31 = vmlaq_laneq_f32(v31, v40, v43, 2);
          v32 = vmlaq_laneq_f32(v32, v40, v43, 3);
          v35 = vmlaq_n_f32(v35, v41, v44.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)v44.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, v44, 2);
          v38 = vmlaq_laneq_f32(v38, v41, v44, 3);
          v45 = v16 <= 2;
          v16 -= 2;
        }
        while (!v45);
        v29 = vaddq_f32(v29, v35);
        v30 = vaddq_f32(v30, v36);
        v31 = vaddq_f32(v31, v37);
        v32 = vaddq_f32(v32, v38);
      }
      *v28 = vmulq_n_f32(v29, a7);
      v46 = (float32x4_t *)((char *)v28 + v7);
      *v46 = vmulq_n_f32(v30, a7);
      v47 = (float32x4_t *)((char *)v46 + v7);
      *v47 = vmulq_n_f32(v31, a7);
      *(float32x4_t *)((char *)v47 + v7) = vmulq_n_f32(v32, a7);
    }
    v48 = a2 & 3;
    if (!i && v48 != 0)
    {
      v49 = (float32x4_t *)(a5 + 4 * v9);
      v50 = (float *)(a3 + 4 * (v11 - 1));
      if (v48 != 1)
      {
        if (v48 != 2)
        {
          v52 = *v50;
          v51 = &v50[(unint64_t)v8 / 4];
          v54 = *v51;
          v53 = &v51[(unint64_t)v8 / 4];
          v56 = *v49;
          v55 = (float32x4_t *)((char *)v49 + v7);
          v58 = *v55;
          v57 = (float32x4_t *)((char *)v55 + v7);
          v59 = *v53;
          v50 = &v53[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
          *v57 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v56, v52), vmulq_n_f32(v58, v54)), vmulq_n_f32(*v57, v59)), a7);
          v49 = (float32x4_t *)((char *)v57 - 2 * v7);
        }
        v60 = *v50;
        v61 = v50[(unint64_t)v8 / 4];
        v63 = *v49;
        v62 = (float32x4_t *)((char *)v49 + v7);
        --v50;
        *v62 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v63, v60), vmulq_n_f32(*v62, v61)), a7);
        v49 = (float32x4_t *)((char *)v62 - v7);
      }
      *v49 = vmulq_n_f32(vmulq_n_f32(*v49, *v50), a7);
    }
    v9 += 4;
    v45 = v10 <= 4;
    v10 -= 4;
  }
  while (!v45);
  v45 = v10 <= -3;
  result = v10 + 3;
  if (!v45)
  {
LABEL_21:
    if (result > 1)
    {
      v64 = a2;
      for (j = __OFSUB__(a2, 3); v64 > 3; j = __OFSUB__(v64, 3))
      {
        v64 -= 4;
        v66 = (float32x2_t *)(a5 + v64 * v7 + 4 * v9);
        v67 = (float32x4_t *)(a3 + 4 * v64);
        v68 = (float32x4_t *)((char *)v67 + v64 * v8);
        v69 = v64;
        v71 = *v68;
        v70 = (float32x4_t *)((char *)v68 + v8);
        v72 = *v70;
        v73 = (float32x2_t *)&v70->u32[(unint64_t)v8 / 4 + 2];
        v75 = *v66;
        v74 = (float32x2_t *)((char *)v66 + v7);
        v77 = *v74;
        v76 = (float32x2_t *)((char *)v74 + v7);
        v79 = *v76;
        v78 = (float32x2_t *)((char *)v76 + v7);
        v80 = *v78;
        v81 = (float32x2_t *)((char *)v78 + v7 - v64 * v7 + -4 * v7);
        v82 = vmul_n_f32(v75, v71.f32[0]);
        v83 = vadd_f32(vmul_lane_f32(v75, *(float32x2_t *)v71.f32, 1), vmul_lane_f32(v77, *(float32x2_t *)v72.f32, 1));
        v84 = vadd_f32(vmla_n_f32(vmul_laneq_f32(v75, v71, 2), v79, COERCE_FLOAT(*v73)), vmul_laneq_f32(v77, v72, 2));
        v85 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v75, v71, 3), v79, *v73, 1), vmla_n_f32(vmul_laneq_f32(v77, v72, 3), v80, v73->f32[(unint64_t)v8 / 4 + 1]));
        if ((v64 & 1) != 0)
        {
          v86 = *v81;
          v81 = (float32x2_t *)((char *)v81 + v7);
          v87 = *v67;
          v67 = (float32x4_t *)((char *)v67 + v8);
          v82 = vmla_n_f32(v82, v86, v87.f32[0]);
          v83 = vmla_lane_f32(v83, v86, *(float32x2_t *)v87.f32, 1);
          v84 = vmla_laneq_f32(v84, v86, v87, 2);
          v85 = vmla_laneq_f32(v85, v86, v87, 3);
          v69 = v64 - 1;
        }
        if (v69)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v93 = *v81;
            v92 = (float32x2_t *)((char *)v81 + v7);
            v94 = *v92;
            v81 = (float32x2_t *)((char *)v92 + v7);
            v96 = *v67;
            v95 = (float32x4_t *)((char *)v67 + v8);
            v97 = *v95;
            v67 = (float32x4_t *)((char *)v95 + v8);
            v82 = vmla_n_f32(v82, v93, v96.f32[0]);
            v83 = vmla_lane_f32(v83, v93, *(float32x2_t *)v96.f32, 1);
            v84 = vmla_laneq_f32(v84, v93, v96, 2);
            v85 = vmla_laneq_f32(v85, v93, v96, 3);
            v88 = vmla_n_f32(v88, v94, v97.f32[0]);
            v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)v97.f32, 1);
            v90 = vmla_laneq_f32(v90, v94, v97, 2);
            v91 = vmla_laneq_f32(v91, v94, v97, 3);
            v45 = v69 <= 2;
            v69 -= 2;
          }
          while (!v45);
          v82 = vadd_f32(v82, v88);
          v83 = vadd_f32(v83, v89);
          v84 = vadd_f32(v84, v90);
          v85 = vadd_f32(v85, v91);
        }
        *v81 = vmul_n_f32(v82, a7);
        v98 = (float32x2_t *)((char *)v81 + v7);
        *v98 = vmul_n_f32(v83, a7);
        v99 = (float32x2_t *)((char *)v98 + v7);
        *v99 = vmul_n_f32(v84, a7);
        *(float32x2_t *)((char *)v99 + v7) = vmul_n_f32(v85, a7);
      }
      v100 = a2 & 3;
      if (!j && v100 != 0)
      {
        v101 = (float32x2_t *)(a5 + 4 * v9);
        v102 = (float *)(a3 + 4 * (v64 - 1));
        if (v100 != 1)
        {
          if (v100 != 2)
          {
            v104 = *v102;
            v103 = &v102[(unint64_t)v8 / 4];
            v106 = *v103;
            v105 = &v103[(unint64_t)v8 / 4];
            v108 = *v101;
            v107 = (float32x2_t *)((char *)v101 + v7);
            v110 = *v107;
            v109 = (float32x2_t *)((char *)v107 + v7);
            v111 = *v105;
            v102 = &v105[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
            *v109 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v108, v104), vmul_n_f32(v110, v106)), vmul_n_f32(*v109, v111)), a7);
            v101 = &v109[v7 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v112 = *v102;
          v113 = v102[(unint64_t)v8 / 4];
          --v102;
          v115 = *v101;
          v114 = (float32x2_t *)((char *)v101 + v7);
          *v114 = vmul_n_f32(vadd_f32(vmul_n_f32(v115, v112), vmul_n_f32(*v114, v113)), a7);
          v101 = (float32x2_t *)((char *)v114 - v7);
        }
        *v101 = vmul_n_f32(vmul_n_f32(*v101, *v102), a7);
      }
      v9 += 2;
      result -= 2;
    }
    if (result)
    {
      v116 = a2;
      for (k = __OFSUB__(a2, 3); v116 > 3; k = __OFSUB__(v116, 3))
      {
        v116 -= 4;
        v118 = (float *)(a5 + v116 * v7 + 4 * v9);
        v119 = (float32x4_t *)(a3 + 4 * v116);
        v120 = (float32x4_t *)((char *)v119 + v116 * v8);
        v121 = v116;
        v123 = *v120;
        v122 = (float32x4_t *)((char *)v120 + v8);
        v124 = *v122;
        v125 = (float32x2_t *)&v122->u32[(unint64_t)v8 / 4 + 2];
        v127 = *v118;
        v126 = &v118[(unint64_t)v7 / 4];
        v129 = *v126;
        v128 = &v126[(unint64_t)v7 / 4];
        v131 = *v128;
        v130 = &v128[(unint64_t)v7 / 4];
        v132 = *v130;
        v133 = (float *)((char *)&v130[(unint64_t)v7 / 4] - v116 * v7 + -4 * v7);
        v124.i32[0] = 0;
        v134.i32[0] = 0;
        v134.f32[1] = v125->f32[(unint64_t)v8 / 4 + 1] * v132;
        v135 = vadd_f32(v134, vmul_n_f32(*v125, v131));
        v136.i64[0] = 0;
        *(float32x2_t *)&v136.u32[2] = v135;
        v137 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v123, v127), v124, v129), v136);
        if ((v116 & 1) != 0)
        {
          v138 = *v133;
          v133 = (float *)((char *)v133 + v7);
          v139 = *v119;
          v119 = (float32x4_t *)((char *)v119 + v8);
          v137 = vmlaq_n_f32(v137, v139, v138);
          v121 = v116 - 1;
        }
        if (v121)
        {
          v140 = 0uLL;
          do
          {
            v142 = *v133;
            v141 = &v133[(unint64_t)v7 / 4];
            v143 = *v141;
            v133 = &v141[(unint64_t)v7 / 4];
            v145 = *v119;
            v144 = (float32x4_t *)((char *)v119 + v8);
            v146 = *v144;
            v119 = (float32x4_t *)((char *)v144 + v8);
            v137 = vmlaq_n_f32(v137, v145, v142);
            v140 = vmlaq_n_f32(v140, v146, v143);
            v45 = v121 <= 2;
            v121 -= 2;
          }
          while (!v45);
          v137 = vaddq_f32(v137, v140);
        }
        v147 = vmulq_n_f32(v137, a7);
        *v133 = v147.f32[0];
        v148 = &v133[(unint64_t)v7 / 4];
        *v148 = v147.f32[1];
        v149 = &v148[(unint64_t)v7 / 4];
        *v149 = v147.f32[2];
        v149[(unint64_t)v7 / 4] = v147.f32[3];
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v9);
        v152 = (__int32 *)(a3 + 4 * (v116 - 1));
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v154.i32[0] = *v152;
            v153 = &v152[(unint64_t)v8 / 4];
            v154.i32[1] = *v153;
            v155 = *(float *)&v153[(unint64_t)v8 / 4];
            v152 = &v153[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v157.i32[0] = *v151;
            v156 = &v151[(unint64_t)v7 / 4];
            v157.i32[1] = *v156;
            v158 = (float *)&v156[(unint64_t)v7 / 4];
            *v158 = (float)(vaddv_f32(vmul_f32(v157, v154)) + (float)(v155 * *v158)) * a7;
            v151 = (__int32 *)&v158[v7 / 0xFFFFFFFFFFFFFFFELL];
          }
          v159 = *(float *)v152;
          v160 = *(float *)&v152[(unint64_t)v8 / 4];
          --v152;
          v162 = *(float *)v151;
          v161 = (float *)&v151[(unint64_t)v7 / 4];
          *v161 = (float)((float)(v162 * v159) + (float)(*v161 * v160)) * a7;
          v151 = (__int32 *)&v161[v7 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = (float)(*(float *)v151 * *(float *)v152) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A2FE20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL i;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  BOOL v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float *v48;
  float v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  BOOL j;
  float32x2_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t *v64;
  unint64_t *v65;
  float32x2_t v66;
  unint64_t *v67;
  unint64_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  float32x2_t *v85;
  float *v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t v95;
  BOOL k;
  unsigned __int32 *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x2_t *v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  unsigned __int32 *v105;
  float *v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float *v114;
  float v115;
  float v116;
  float32x4_t *v117;
  float32x4_t v118;
  float *v119;
  float *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  __int32 *v124;
  float32x2_t v125;
  __int32 *v126;
  float32x2_t v127;
  float *v128;
  float *v129;
  float v130;

  v14 = 4 * a6;
  v15 = 4 * a4;
  v16 = 0;
  if (result <= 3)
    goto LABEL_21;
  v17 = result - 3;
  do
  {
    v18 = a2;
    for (i = __OFSUB__(a2, 3); v18 > 3; i = __OFSUB__(v18, 3))
    {
      v18 -= 4;
      v20 = (float32x4_t *)(a5 + v18 * v14 + 4 * v16);
      v21 = (float32x4_t *)(a3 + 4 * v18);
      v22 = (float32x4_t *)((char *)v21 + v18 * v15);
      v23 = v18;
      v24 = *v22;
      v25 = (float32x2_t *)&v22->u32[(unint64_t)v15 / 4 + 2];
      v27 = *v20;
      v26 = (float32x4_t *)((char *)v20 + v14);
      a12 = *v26;
      v28 = (float32x4_t *)((char *)v26 + v14);
      a13 = *v28;
      v29 = (float32x4_t *)((char *)v28 + v14);
      a14 = *v29;
      v30 = (float32x4_t *)((char *)v29 + v14 - v18 * v14 + -4 * v14);
      v31 = vmlaq_lane_f32(a12, v27, *(float32x2_t *)v24.f32, 1);
      v32 = vaddq_f32(vmlaq_laneq_f32(a13, v27, v24, 2), vmulq_n_f32(a12, COERCE_FLOAT(*v25)));
      v33 = vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32(a14, v27, v24, 3), a13, v25->f32[(unint64_t)v15 / 4 + 1]), vmulq_lane_f32(a12, *v25, 1));
      if ((v18 & 1) != 0)
      {
        v34 = *v30;
        v30 = (float32x4_t *)((char *)v30 + v14);
        a11 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v15);
        v27 = vmlaq_n_f32(v27, v34, a11.f32[0]);
        v31 = vmlaq_lane_f32(v31, v34, *(float32x2_t *)a11.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v34, a11, 2);
        v33 = vmlaq_laneq_f32(v33, v34, a11, 3);
        v23 = v18 - 1;
      }
      if (v23)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v30;
          v39 = (float32x4_t *)((char *)v30 + v14);
          v41 = *v39;
          v30 = (float32x4_t *)((char *)v39 + v14);
          a11 = *v21;
          v42 = (float32x4_t *)((char *)v21 + v15);
          a12 = *v42;
          v21 = (float32x4_t *)((char *)v42 + v15);
          v27 = vmlaq_n_f32(v27, v40, a11.f32[0]);
          v31 = vmlaq_lane_f32(v31, v40, *(float32x2_t *)a11.f32, 1);
          v32 = vmlaq_laneq_f32(v32, v40, a11, 2);
          v33 = vmlaq_laneq_f32(v33, v40, a11, 3);
          v35 = vmlaq_n_f32(v35, v41, a12.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)a12.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, a12, 2);
          v38 = vmlaq_laneq_f32(v38, v41, a12, 3);
          v43 = v23 <= 2;
          v23 -= 2;
        }
        while (!v43);
        v27 = vaddq_f32(v27, v35);
        v31 = vaddq_f32(v31, v36);
        v32 = vaddq_f32(v32, v37);
        v33 = vaddq_f32(v33, v38);
      }
      *v30 = vmulq_n_f32(v27, a7);
      v44 = (float32x4_t *)((char *)v30 + v14);
      *v44 = vmulq_n_f32(v31, a7);
      v45 = (float32x4_t *)((char *)v44 + v14);
      *v45 = vmulq_n_f32(v32, a7);
      *(float32x4_t *)((char *)v45 + v14) = vmulq_n_f32(v33, a7);
    }
    v46 = a2 & 3;
    if (!i && v46 != 0)
    {
      v47 = (float32x4_t *)(a5 + 4 * v16);
      v48 = (float *)(a3 + 4 * (v18 - 1));
      if (v46 != 1)
      {
        if (v46 != 2)
        {
          v49 = *v48;
          v50 = v48[(unint64_t)v15 / 4];
          v52 = *v47;
          v51 = (float32x4_t *)((char *)v47 + v14);
          v54 = *v51;
          v53 = (float32x4_t *)((char *)v51 + v14);
          --v48;
          a12 = vmlaq_n_f32(*v53, v52, v49);
          *v53 = vmulq_n_f32(vaddq_f32(a12, vmulq_n_f32(v54, v50)), a7);
          v47 = (float32x4_t *)((char *)v53 - 2 * v14);
        }
        v56 = *v47;
        v55 = (float32x4_t *)((char *)v47 + v14);
        a11 = vmlaq_n_f32(*v55, v56, *v48);
        *v55 = vmulq_n_f32(a11, a7);
        v47 = (float32x4_t *)((char *)v55 - v14);
      }
      *v47 = vmulq_n_f32(*v47, a7);
    }
    v16 += 4;
    v43 = v17 <= 4;
    v17 -= 4;
  }
  while (!v43);
  v43 = v17 <= -3;
  result = v17 + 3;
  if (!v43)
  {
LABEL_21:
    if (result > 1)
    {
      v57 = a2;
      for (j = __OFSUB__(a2, 3); v57 > 3; j = __OFSUB__(v57, 3))
      {
        v57 -= 4;
        v59 = (float32x2_t *)(a5 + v57 * v14 + 4 * v16);
        v60 = (float32x4_t *)(a3 + 4 * v57);
        v61 = (float32x4_t *)((char *)v60 + v57 * v15);
        v62 = v57;
        v63 = *v61;
        v64 = (float32x2_t *)&v61->u32[(unint64_t)v15 / 4 + 2];
        v66 = *v59;
        v65 = (unint64_t *)((char *)v59 + v14);
        a12.i64[0] = *v65;
        v67 = (unint64_t *)((char *)v65 + v14);
        a13.i64[0] = *v67;
        v68 = (unint64_t *)((char *)v67 + v14);
        a14.i64[0] = *v68;
        v69 = (float32x2_t *)((char *)v68 + v14 - v57 * v14 + -4 * v14);
        v70 = vmla_lane_f32(*(float32x2_t *)a12.f32, v66, *(float32x2_t *)v63.f32, 1);
        v71 = vadd_f32(vmla_laneq_f32(*(float32x2_t *)a13.f32, v66, v63, 2), vmul_n_f32(*(float32x2_t *)a12.f32, COERCE_FLOAT(*v64)));
        v72 = vadd_f32(vmla_n_f32(vmla_laneq_f32(*(float32x2_t *)a14.f32, v66, v63, 3), *(float32x2_t *)a13.f32, v64->f32[(unint64_t)v15 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)a12.f32, *v64, 1));
        if ((v57 & 1) != 0)
        {
          v73 = *v69;
          v69 = (float32x2_t *)((char *)v69 + v14);
          a11 = *v60;
          v60 = (float32x4_t *)((char *)v60 + v15);
          v66 = vmla_n_f32(v66, v73, a11.f32[0]);
          v70 = vmla_lane_f32(v70, v73, *(float32x2_t *)a11.f32, 1);
          v71 = vmla_laneq_f32(v71, v73, a11, 2);
          v72 = vmla_laneq_f32(v72, v73, a11, 3);
          v62 = v57 - 1;
        }
        if (v62)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v79 = *v69;
            v78 = (float32x2_t *)((char *)v69 + v14);
            v80 = *v78;
            v69 = (float32x2_t *)((char *)v78 + v14);
            a11 = *v60;
            v81 = (float32x4_t *)((char *)v60 + v15);
            a12 = *v81;
            v60 = (float32x4_t *)((char *)v81 + v15);
            v66 = vmla_n_f32(v66, v79, a11.f32[0]);
            v70 = vmla_lane_f32(v70, v79, *(float32x2_t *)a11.f32, 1);
            v71 = vmla_laneq_f32(v71, v79, a11, 2);
            v72 = vmla_laneq_f32(v72, v79, a11, 3);
            v74 = vmla_n_f32(v74, v80, a12.f32[0]);
            v75 = vmla_lane_f32(v75, v80, *(float32x2_t *)a12.f32, 1);
            v76 = vmla_laneq_f32(v76, v80, a12, 2);
            v77 = vmla_laneq_f32(v77, v80, a12, 3);
            v43 = v62 <= 2;
            v62 -= 2;
          }
          while (!v43);
          v66 = vadd_f32(v66, v74);
          v70 = vadd_f32(v70, v75);
          v71 = vadd_f32(v71, v76);
          v72 = vadd_f32(v72, v77);
        }
        *v69 = vmul_n_f32(v66, a7);
        v82 = (float32x2_t *)((char *)v69 + v14);
        *v82 = vmul_n_f32(v70, a7);
        v83 = (float32x2_t *)((char *)v82 + v14);
        *v83 = vmul_n_f32(v71, a7);
        *(float32x2_t *)((char *)v83 + v14) = vmul_n_f32(v72, a7);
      }
      v84 = a2 & 3;
      if (!j && v84 != 0)
      {
        v85 = (float32x2_t *)(a5 + 4 * v16);
        v86 = (float *)(a3 + 4 * (v57 - 1));
        if (v84 != 1)
        {
          if (v84 != 2)
          {
            v87 = *v86;
            v88 = v86[(unint64_t)v15 / 4];
            v90 = *v85;
            v89 = (float32x2_t *)((char *)v85 + v14);
            v92 = *v89;
            v91 = (float32x2_t *)((char *)v89 + v14);
            --v86;
            *(float32x2_t *)a12.f32 = vmla_n_f32(*v91, v90, v87);
            *v91 = vmul_n_f32(vadd_f32(*(float32x2_t *)a12.f32, vmul_n_f32(v92, v88)), a7);
            v85 = &v91[v14 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v94 = *v85;
          v93 = (float32x2_t *)((char *)v85 + v14);
          *(float32x2_t *)a11.f32 = vmla_n_f32(*v93, v94, *v86);
          *v93 = vmul_n_f32(*(float32x2_t *)a11.f32, a7);
          v85 = (float32x2_t *)((char *)v93 - v14);
        }
        *v85 = vmul_n_f32(*v85, a7);
      }
      v16 += 2;
      result -= 2;
    }
    if (result)
    {
      v95 = a2;
      for (k = __OFSUB__(a2, 3); v95 > 3; k = __OFSUB__(v95, 3))
      {
        v95 -= 4;
        v97 = (unsigned __int32 *)(a5 + v95 * v14 + 4 * v16);
        v98 = (float32x4_t *)(a3 + 4 * v95);
        v99 = (float32x4_t *)((char *)v98 + v95 * v15);
        v100 = v95;
        v101 = *v99;
        v102 = (float32x2_t *)&v99->u32[(unint64_t)v15 / 4 + 2];
        a11.i32[0] = *v97;
        v103 = &v97[(unint64_t)v14 / 4];
        a12.i32[0] = *v103;
        v104 = &v103[(unint64_t)v14 / 4];
        a13.i32[0] = *v104;
        v105 = &v104[(unint64_t)v14 / 4];
        a14.i32[0] = *v105;
        v106 = (float *)((char *)&v105[(unint64_t)v14 / 4] - v95 * v14 + -4 * v14);
        v101.i32[0] = 0;
        *(int32x2_t *)v107.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)&v107.u32[2] = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v108.i32[0] = 0;
        v108.f32[1] = v102->f32[(unint64_t)v15 / 4 + 1] * a13.f32[0];
        v109 = vadd_f32(v108, vmul_n_f32(*v102, a12.f32[0]));
        v110.i64[0] = 0;
        *(float32x2_t *)&v110.u32[2] = v109;
        v111 = vaddq_f32(vaddq_f32(vmulq_n_f32(v101, a11.f32[0]), v107), v110);
        if ((v95 & 1) != 0)
        {
          v112 = *v106;
          v106 = (float *)((char *)v106 + v14);
          a11 = *v98;
          v98 = (float32x4_t *)((char *)v98 + v15);
          v111 = vmlaq_n_f32(v111, a11, v112);
          v100 = v95 - 1;
        }
        if (v100)
        {
          v113 = 0uLL;
          do
          {
            v115 = *v106;
            v114 = &v106[(unint64_t)v14 / 4];
            v116 = *v114;
            v106 = &v114[(unint64_t)v14 / 4];
            a11 = *v98;
            v117 = (float32x4_t *)((char *)v98 + v15);
            a12 = *v117;
            v98 = (float32x4_t *)((char *)v117 + v15);
            v111 = vmlaq_n_f32(v111, a11, v115);
            v113 = vmlaq_n_f32(v113, a12, v116);
            v43 = v100 <= 2;
            v100 -= 2;
          }
          while (!v43);
          v111 = vaddq_f32(v111, v113);
        }
        v118 = vmulq_n_f32(v111, a7);
        *v106 = v118.f32[0];
        v119 = &v106[(unint64_t)v14 / 4];
        *v119 = v118.f32[1];
        v120 = &v119[(unint64_t)v14 / 4];
        *v120 = v118.f32[2];
        v120[(unint64_t)v14 / 4] = v118.f32[3];
      }
      v121 = a2 & 3;
      if (!k && v121 != 0)
      {
        v122 = (__int32 *)(a5 + 4 * v16);
        v123 = (__int32 *)(a3 + 4 * (v95 - 1));
        if (v121 != 1)
        {
          if (v121 != 2)
          {
            v125.i32[0] = *v123;
            v124 = &v123[(unint64_t)v15 / 4];
            v125.i32[1] = *v124;
            v123 = &v124[v15 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v127.i32[0] = *v122;
            v126 = &v122[(unint64_t)v14 / 4];
            v127.i32[1] = *v126;
            v128 = (float *)&v126[(unint64_t)v14 / 4];
            *v128 = (float)(vaddv_f32(vmul_f32(v127, v125)) + *v128) * a7;
            v122 = (__int32 *)&v128[v14 / 0xFFFFFFFFFFFFFFFELL];
          }
          v130 = *(float *)v122;
          v129 = (float *)&v122[(unint64_t)v14 / 4];
          *v129 = (float)((float)(v130 * *(float *)v123) + *v129) * a7;
          v122 = (__int32 *)&v129[v14 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v122 = *(float *)v122 * a7;
      }
    }
  }
  return result;
}

void sub_239A30304(float64x2_t *a1, const double *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, double a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *f64;
  uint64_t v17;
  float64x2_t *v18;
  const double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  double v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  double v37;

  if (__N >= 1 && a6 >= 1)
  {
    v11 = 0;
    v12 = a5 - 7;
    if (a5 <= 0)
      v13 = -(-a5 & 7);
    else
      v13 = a5 & 7;
    v14 = __N & 1;
    v15 = 8 * (v14 + __N);
    do
    {
      f64 = (_OWORD *)(a3 + 8 * v11 * a4);
      if (a5 < 8)
      {
        v18 = a1;
      }
      else
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = __Y;
          v20 = __N;
          v22 = *(float64x2_t *)f64;
          v23 = *((float64x2_t *)f64 + 1);
          v21 = (float64x2_t *)(f64 + 2);
          v24 = vmulq_n_f64(v22, a8);
          v25 = vmulq_n_f64(v23, a8);
          v26 = vmulq_n_f64(*v21, a8);
          v27 = vmulq_n_f64(v21[1], a8);
          v28 = v21 - 2;
          do
          {
            v29 = *v19++;
            v31 = *v18;
            v32 = v18[1];
            v30 = v18 + 2;
            v33 = *v30;
            v34 = v30[1];
            v18 = v30 + 2;
            v24 = vmlaq_n_f64(v24, v31, v29);
            v25 = vmlaq_n_f64(v25, v32, v29);
            v26 = vmlaq_n_f64(v26, v33, v29);
            v27 = vmlaq_n_f64(v27, v34, v29);
            --v20;
          }
          while (v20);
          *v28 = v24;
          v28[1] = v25;
          v35 = v28 + 2;
          *v35 = v26;
          v35[1] = v27;
          f64 = (_OWORD *)v35[2].f64;
          v17 += 8;
        }
        while (v17 < v12);
      }
      if (v13 >= 1)
      {
        v36 = v13;
        do
        {
          v37 = *(double *)f64;
          *(double *)f64 = cblas_ddot(__N, v18->f64, 1, __Y, 1) + a8 * v37;
          f64 = (_OWORD *)((char *)f64 + 8);
          v18 = (float64x2_t *)((char *)v18 + v15);
          --v36;
        }
        while (v36);
      }
      __Y += __N + v14;
      ++v11;
    }
    while (v11 != a6);
  }
}

void sub_239A30480(float64x2_t *a1, const double *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *f64;
  uint64_t v15;
  float64x2_t *v16;
  const double *v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  double v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  uint64_t v32;

  if (__N >= 1 && a6 >= 1)
  {
    v9 = 0;
    v10 = a5 - 7;
    if (a5 <= 0)
      v11 = -(-a5 & 7);
    else
      v11 = a5 & 7;
    v12 = __N & 1;
    v13 = 8 * (v12 + __N);
    do
    {
      f64 = (_OWORD *)(a3 + 8 * v9 * a4);
      if (a5 < 8)
      {
        v16 = a1;
      }
      else
      {
        v15 = 0;
        v16 = a1;
        do
        {
          v17 = __Y;
          v18 = __N;
          v20 = *(float64x2_t *)f64;
          v21 = *((float64x2_t *)f64 + 1);
          v19 = (float64x2_t *)(f64 + 2);
          v22 = *v19;
          v23 = v19[1];
          v24 = v19 - 2;
          do
          {
            v25 = *v17++;
            v27 = *v16;
            v28 = v16[1];
            v26 = v16 + 2;
            v29 = *v26;
            v30 = v26[1];
            v16 = v26 + 2;
            v20 = vmlaq_n_f64(v20, v27, v25);
            v21 = vmlaq_n_f64(v21, v28, v25);
            v22 = vmlaq_n_f64(v22, v29, v25);
            v23 = vmlaq_n_f64(v23, v30, v25);
            --v18;
          }
          while (v18);
          *v24 = v20;
          v24[1] = v21;
          v31 = v24 + 2;
          *v31 = v22;
          v31[1] = v23;
          f64 = (_OWORD *)v31[2].f64;
          v15 += 8;
        }
        while (v15 < v10);
      }
      if (v11 >= 1)
      {
        v32 = v11;
        do
        {
          *(double *)f64 = cblas_ddot(__N, v16->f64, 1, __Y, 1) + *(double *)f64;
          f64 = (_OWORD *)((char *)f64 + 8);
          v16 = (float64x2_t *)((char *)v16 + v13);
          --v32;
        }
        while (v32);
      }
      __Y += __N + v12;
      ++v9;
    }
    while (v9 != a6);
  }
}

double *sub_239A305DC(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64_t *v18;
  float64_t *v19;

  if (a5 >= 1)
  {
    v7 = a4;
    do
    {
      v8 = a6;
      v9 = a2;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v11 = &a3[v7 + v7];
      v12.f64[0] = *v11;
      v12.f64[1] = v11[a4];
      v13 = vmulq_n_f64(v10, a7);
      v14 = vmulq_n_f64(v12, a7);
      do
      {
        v15 = *v9;
        v16 = v9[1];
        v9 += 2;
        v17 = *result++;
        v13 = vmlaq_n_f64(v13, v15, v17);
        v14 = vmlaq_n_f64(v14, v16, v17);
        --v8;
      }
      while (v8);
      v18 = &a3[v7];
      *a3++ = v13.f64[0];
      *v18 = v13.f64[1];
      v19 = &v18[v7];
      *v19 = v14.f64[0];
      v19[a4] = v14.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *sub_239A3064C(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64_t *v15;
  float64_t *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    do
    {
      v7 = a2;
      v8 = a6;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v9 = &a3[v6 + v6];
      v11.f64[0] = *v9;
      v11.f64[1] = v9[a4];
      do
      {
        v12 = *v7;
        v13 = v7[1];
        v7 += 2;
        v14 = *result++;
        v10 = vmlaq_n_f64(v10, v12, v14);
        v11 = vmlaq_n_f64(v11, v13, v14);
        --v8;
      }
      while (v8);
      v15 = &a3[v6];
      *a3++ = v10.f64[0];
      *v15 = v10.f64[1];
      v16 = &v15[v6];
      *v16 = v11.f64[0];
      v16[a4] = v11.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_239A306B4(int a1, int a2, uint64_t a3, uint64_t a4, const double *a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10, double a11, int8x16_t a12, __n128 a13, float64x2_t a14, float64x2_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55)
{
  BOOL v58;
  _BOOL4 v59;

  if (a3)
  {
    v58 = a9 == 0.0 || a4 == 0;
    v59 = v58;
    if (!v59 || a10 != 1.0)
    {
      if (v59)
      {
        sub_239A3C6F8(a1, a3, a7, a8, a10);
      }
      else
      {
        if (a10 == 0.0)
          sub_239A3C6F8(a1, a3, a7, a8, a10);
        if (a3 > 45 || a4 >= 46)
        {
          if (a1 == 121)
            sub_239A2C2F4(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              SDWORD2(a37),
              a38,
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              SDWORD2(a40),
              SHIDWORD(a40),
              a41,
              *((uint64_t *)&a41 + 1),
              (void *)a42,
              *((uint64_t *)&a42 + 1),
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55);
          else
            sub_239A4215C(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48);
        }
        else if (a1 == 121)
        {
          if (a2 == 111)
            sub_239A418E4(a3, a4, a5, a6, a7, a8, a9, a10);
          else
            sub_239A41A78(a3, a4, a5, a6, a7, a8, a9, a10);
        }
        else if (a2 == 111)
        {
          sub_239A41D04(a3, a4, a5, a6, a7, a8, a9, a10);
        }
        else
        {
          sub_239A41EC8(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        }
      }
    }
  }
}

double *sub_239A308B0(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = _X2;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v24 = *_X2;
      v25 = _X2[1];
      v26 = _X2[2];
      v27 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      v32 = _X2[2];
      v33 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      v38 = _X2[2];
      v39 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v41 = *_X2;
      v42 = _X2[1];
      v43 = _X2[2];
      v44 = _X2[3];
      v46 = *a2;
      v47 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      do
      {
        v51 = v13;
        v52 = v14;
        v24 = vmlaq_n_f64(v24, v13, v46.f64[0]);
        v30 = vmlaq_laneq_f64(v30, v13, v46, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v36 = vmlaq_n_f64(v36, v51, v47.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v51, v47, 1);
        v54 = *_X6;
        v55 = _X6[1];
        _X6 += 2;
        v56 = v15;
        v25 = vmlaq_n_f64(v25, v52, v46.f64[0]);
        v31 = vmlaq_laneq_f64(v31, v52, v46, 1);
        v57 = v16;
        v37 = vmlaq_n_f64(v37, v52, v47.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v52, v47, 1);
        v15 = *v53;
        v16 = v53[1];
        result = v53[2].f64;
        v26 = vmlaq_n_f64(v26, v56, v46.f64[0]);
        v32 = vmlaq_laneq_f64(v32, v56, v46, 1);
        v38 = vmlaq_n_f64(v38, v56, v47.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v56, v47, 1);
        v27 = vmlaq_n_f64(v27, v57, v46.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v57, v46, 1);
        v46 = v54;
        v39 = vmlaq_n_f64(v39, v57, v47.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v57, v47, 1);
        v47 = v55;
        --v17;
      }
      while (v17);
      v58 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v24;
      v10[1] = v25;
      v10[2] = v26;
      v10[3] = v27;
      v10 += 4;
      *v58 = v30;
      v58[1] = v31;
      v58[2] = v32;
      v58[3] = v33;
      v59 = (float64x2_t *)((char *)v58 + v11);
      *v59 = v36;
      v59[1] = v37;
      v59[2] = v38;
      v59[3] = v39;
      v60 = (float64x2_t *)((char *)v59 + v11);
      *v60 = v41;
      v60[1] = v42;
      v60[2] = v43;
      v60[3] = v44;
      _X2 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_239A3064C(result - 8, a2, _X2->f64, a4, v7, a6);
  return result;
}

uint64_t sub_239A309DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25[2];
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A3CEE8;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A3CAE0;
  v27 = v8;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v12 = 0;
    v13 = 0;
    v26 = a7 << 8;
    v29 = a7;
    v23 = a2;
    do
    {
      v28 = v12;
      v24 = v13 + 32;
      if (v13 + 32 <= a2)
        v14 = 32;
      else
        v14 = a2 - v13;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a6;
        *(_QWORD *)v25 = a4 + 8 * v13;
        v18 = 32;
        do
        {
          if (a3 >= v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = v19 + v15;
          a8.n128_u64[0] = v10;
          if (v13)
          {
            sub_239A253AC(111, 111, v14, v20, v13, v25[0], a5, v17, a7, v17 + v28, a7);
            a7 = v29;
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v27(v14, v20, *(_QWORD *)v25 + 8 * v13 * a5, a5, v17 + v28, a7, a8);
          a7 = v29;
          v17 += v26;
          v18 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v12 = v28 + 256;
      a2 = v23;
      v13 += 32;
    }
    while (v24 < v23);
  }
  return result;
}

uint64_t sub_239A30B68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A3D920;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A3D3B4;
  v29 = v8;
  v25 = a2;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v30 = 0;
    v28 = a7 << 8;
    v12 = a2;
    do
    {
      v13 = v12 - 32;
      if (v12 < 0x20)
        v13 = 0;
      v26 = v13;
      if (v12 >= 0x20)
        v14 = 32;
      else
        v14 = v12;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a4 + 8 * v13 * a5;
        v27 = v17 + 8 * (v26 + v14);
        v18 = v17 + 8 * v26;
        v19 = a6 + 8 * v12;
        v20 = 32;
        do
        {
          if (a3 >= v20)
            v21 = v20;
          else
            v21 = a3;
          v22 = v21 + v15;
          a8.n128_u64[0] = v10;
          if ((v30 & 1) != 0)
          {
            sub_239A253AC(112, 111, v14, v22, v25 - (v26 + v14), v27, a5, v19, a7, v19 - 8 * v14, a7);
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v29(v14, v22, v18, a5, v19 - 8 * v14, a7, a8);
          v19 += v28;
          v20 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v30 = 1;
      v12 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t sub_239A30D08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25[2];
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A2DD98;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A2D8D4;
  v27 = v8;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v12 = 0;
    v13 = 0;
    v26 = a7 << 8;
    v29 = a7;
    v23 = a2;
    do
    {
      v28 = v12;
      v24 = v13 + 32;
      if (v13 + 32 <= a2)
        v14 = 32;
      else
        v14 = a2 - v13;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a6;
        *(_QWORD *)v25 = a4 + 8 * v13 * a5;
        v18 = 32;
        do
        {
          if (a3 >= v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = v19 + v15;
          a8.n128_u64[0] = v10;
          if (v13)
          {
            sub_239A253AC(112, 111, v14, v20, v13, v25[0], a5, v17, a7, v17 + v28, a7);
            a7 = v29;
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v27(v14, v20, *(_QWORD *)v25 + 8 * v13, a5, v17 + v28, a7, a8);
          a7 = v29;
          v17 += v26;
          v18 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v12 = v28 + 256;
      a2 = v23;
      v13 += 32;
    }
    while (v24 < v23);
  }
  return result;
}

uint64_t sub_239A30E94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  char v30;

  v8 = sub_239A2E7A4;
  if ((_DWORD)result == 132)
    v8 = sub_239A2E318;
  v29 = v8;
  v25 = a2;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v30 = 0;
    v28 = a7 << 8;
    v12 = a2;
    do
    {
      v13 = v12 - 32;
      if (v12 < 0x20)
        v13 = 0;
      v26 = v13;
      if (v12 >= 0x20)
        v14 = 32;
      else
        v14 = v12;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a4 + 8 * v13;
        v27 = v17 + 8 * (v26 + v14) * a5;
        v18 = v17 + 8 * v26 * a5;
        v19 = a6 + 8 * v12;
        v20 = 32;
        do
        {
          if (a3 >= v20)
            v21 = v20;
          else
            v21 = a3;
          v22 = v21 + v15;
          a8.n128_u64[0] = v10;
          if ((v30 & 1) != 0)
          {
            sub_239A253AC(111, 111, v14, v22, v25 - (v26 + v14), v27, a5, v19, a7, v19 - 8 * v14, a7);
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))v29)(v14, v22, v18, a5, v19 - 8 * v14, a7, a8);
          v19 += v28;
          v20 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v30 = 1;
      v12 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t sub_239A31038(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A25A78;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A256A4;
  v26 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v13 = 0;
    v14 = 0;
    v20 = a2 << 32;
    v23 = a7 << 8;
    do
    {
      v25 = v14 + 32;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6;
        if (v25 <= a3)
          v17 = 32;
        else
          v17 = (int)a3 - (int)v14;
        v18 = v20;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v19 = 32;
          else
            v19 = v18 >> 32;
          a8.n128_u64[0] = v11;
          if (v14)
          {
            sub_239A253AC(111, 112, v19, v17, v14, v16, a7, a4 + 8 * v14, a5, v16 + v13, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v26(v19, v17, a4 + 8 * v14 + 8 * v14 * a5, a5, v16 + v13, a7, a8);
          v18 -= 0x2000000000;
          v16 += 256;
        }
        while (v15 < a2);
      }
      v13 += v23;
      v14 += 32;
    }
    while (v25 < a3);
  }
  return result;
}

uint64_t sub_239A311C0(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A26438;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A25F14;
  v28 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v22 = a2 << 32;
    v29 = 1;
    v13 = a3;
    do
    {
      LODWORD(v14) = v13 - 32;
      if (v13 >= 0x20)
        v14 = v14;
      else
        v14 = 0;
      v26 = v14;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6 + 8 * v14 * a7;
        if (v13 >= 0x20)
          v17 = 32;
        else
          v17 = v13;
        v27 = a3 - (v14 + v17);
        v18 = a4 + 8 * v14 * a5 + 8 * v14;
        v19 = a6 + a7 * (8 * v14 + 8 * v17);
        v20 = v22;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v21 = 32;
          else
            v21 = v20 >> 32;
          a8.n128_u64[0] = v11;
          if ((v29 & 1) == 0)
          {
            sub_239A253AC(111, 111, v21, v17, v27, v19, a7, v18 + 8 * v17, a5, v16, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v28(v21, v17, v18, a5, v16, a7, a8);
          v20 -= 0x2000000000;
          v16 += 256;
          v19 += 256;
        }
        while (v15 < a2);
      }
      v29 = 0;
      v13 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t sub_239A31364(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A32444;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A31FD0;
  v26 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v13 = 0;
    v14 = 0;
    v20 = a2 << 32;
    v23 = a7 << 8;
    do
    {
      v25 = v14 + 32;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6;
        if (v25 <= a3)
          v17 = 32;
        else
          v17 = (int)a3 - (int)v14;
        v18 = v20;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v19 = 32;
          else
            v19 = v18 >> 32;
          a8.n128_u64[0] = v11;
          if (v14)
          {
            sub_239A253AC(111, 111, v19, v17, v14, v16, a7, a4 + 8 * v14 * a5, a5, v16 + v13, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v26(v19, v17, a4 + 8 * v14 * a5 + 8 * v14, a5, v16 + v13, a7, a8);
          v18 -= 0x2000000000;
          v16 += 256;
        }
        while (v15 < a2);
      }
      v13 += v23;
      v14 += 32;
    }
    while (v25 < a3);
  }
  return result;
}

uint64_t sub_239A314EC(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A32DB8;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_239A32960;
  v29 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v23 = a2 << 32;
    v30 = 1;
    v13 = a3;
    do
    {
      LODWORD(v14) = v13 - 32;
      if (v13 >= 0x20)
        v14 = v14;
      else
        v14 = 0;
      v27 = v14;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6 + 8 * v14 * a7;
        v17 = v23;
        v18 = a4 + 8 * v14;
        if (v13 >= 0x20)
          v19 = 32;
        else
          v19 = v13;
        v28 = v18 + 8 * (v27 + v19) * a5;
        v20 = v18 + 8 * v27 * a5;
        v21 = a6 + a7 * (8 * v27 + 8 * v19);
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v22 = 32;
          else
            v22 = v17 >> 32;
          a8.n128_u64[0] = v11;
          if ((v30 & 1) == 0)
          {
            sub_239A253AC(111, 112, v22, v19, a3 - (v27 + v19), v21, a7, v28, a5, v16, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v29(v22, v19, v20, a5, v16, a7, a8);
          v17 -= 0x2000000000;
          v16 += 256;
          v21 += 256;
        }
        while (v15 < a2);
      }
      v30 = 0;
      v13 = v27;
    }
    while ((int)v27 >= 1);
  }
  return result;
}

void sub_239A31690(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t (**a13)(), uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,int a24,__int16 a25,__int16 a26,char a27)
{
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t (**v42)();
  void (**v43)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  void (**v44)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t vars8;
  void (*v84)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *(*v96)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  _OWORD *(*v97)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  char *v98;

  v33 = MEMORY[0x24BDAC7A8]();
  v79 = v34;
  v73 = v35;
  v36 = v31;
  v37 = v29;
  v39 = v38;
  v40 = v33;
  v43 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))a12;
  v42 = a13;
  STACK[0x10118] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))&unk_250AF2090;
  if (!a13)
    v42 = off_250AF20D0;
  v91 = (uint64_t)v42;
  v44 = v43 + 1;
  if (v27 == 111)
    v45 = 1;
  else
    v45 = v32;
  v85 = v45;
  v86 = v32;
  if (v27 == 111)
    v46 = v32;
  else
    v46 = 1;
  v72 = v46;
  if (v27 == 111)
    v44 = v43;
  v84 = *v44;
  if (v28 == 111)
    v47 = 1;
  else
    v47 = a9;
  v77 = v47;
  v78 = a9;
  v48 = 3;
  if (v28 == 111)
    v48 = 2;
  v76 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))v43[v48];
  if (v31 <= 512)
    v49 = 64;
  else
    v49 = 384;
  v50 = 256;
  if (v29 < 512)
    v50 = 64;
  v87 = v50;
  a26 = 0;
  v51 = 8;
  if (v29 < 512)
    v51 = 6;
  v52 = ((((unint64_t)(v49 << v51) >> 6) & 0x1FFFF) << 8) | 0x40;
  v89 = v30;
  v53 = ((unint64_t)(v30 * v49) >> 6 << 8) | 0x20;
  if ((unint64_t)(v52 + v53) > 0x10000)
  {
    v55 = v49;
    v56 = (char *)malloc_type_malloc(v52 + v53, 0xC9775249uLL);
    v49 = v55;
    v90 = v56;
    v98 = &v56[v53];
    LOBYTE(a26) = 1;
    v54 = (__int16 *)((char *)&a26 + 1);
  }
  else
  {
    v98 = &a27;
    v90 = &a27 + v52;
    HIBYTE(a26) = 0;
    v54 = &a26;
  }
  *(_BYTE *)v54 = 0;
  if (v36 >= 1)
  {
    v82 = 0;
    v57 = 0;
    v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))v91;
    v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 24);
    if (v89 <= 0)
      v58 = -(-v89 & 3);
    else
      v58 = v89 & 3;
    v93 = v58;
    v59 = v49;
    v74 = v49;
    v75 = v36;
    vars8 = v37;
    do
    {
      v81 = v59;
      if (v36 >= v59)
        v60 = v59;
      else
        v60 = v36;
      v80 = v57 + v49;
      if (v57 + v49 <= v36)
        v61 = v49;
      else
        v61 = v36 - v57;
      v76(v61, v89, v79 + 4 * v57 * v77, v78, v90, v40);
      if (v37 >= 1)
      {
        v62 = 0;
        v63 = 16 * (v60 + v82);
        v88 = v73 + 4 * v57 * v72;
        v65 = v39 != 1.0 && v57 == 0 && v39 != 0.0;
        v66 = (float32x4_t *)v85;
        do
        {
          v94 = v62 + v87;
          if (v62 + v87 <= v37)
            v67 = v87;
          else
            v67 = v37 - v62;
          if ((v67 & 7) != 0)
          {
            v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))(v91 + 8);
            v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 32);
          }
          v92 = v62;
          v84(v67, v61, v88 + 4 * v62 * v85, v86, v98);
          v95 = (uint64_t)v66;
          v68 = 0;
          if (v89 >= 4)
          {
            v69 = v90;
            do
            {
              if (v65)
                v97(v98, v69, v66, v86, v67, v61, v39);
              else
                v96(v98, v69, v66, v86, v67, v61);
              v68 += 4;
              v69 += v63;
              v66 += v86;
            }
            while (v68 < v89 - 3);
          }
          if (v93)
          {
            v70 = v85 + 4 * v92 + 4 * v68 * v86;
            v71 = &v90[4 * v68 * v61];
            if (v65)
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(v91 + 40))(v98, v71, v70, v86, v67, v93, v61, v39);
            else
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 16))(v98, v71, v70, v86, v67, v93, v61);
          }
          v37 = vars8;
          v66 = (float32x4_t *)(v95 + 4 * v87);
          v62 = v94;
        }
        while (v94 < vars8);
      }
      v49 = v74;
      v36 = v75;
      v59 = v81 + v74;
      v82 -= v74;
      v57 = v80;
      v97 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_239A2AE00;
      v96 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_239A28970;
    }
    while (v80 < v75);
  }
  if (HIBYTE(a26))
    free(v98);
  if ((_BYTE)a26)
    free(v90);
}

uint64_t sub_239A31B10(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, double a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;
  __int32 *v20;
  BOOL v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  char *v37;
  char *v38;
  float32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x2_t *v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 *v67;
  float32x4_t v68;
  __n128 *v69;
  __n128 *v70;
  float32x2_t *v71;
  uint64_t i;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  __n128 *v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;

  a7.i64[1] = a8.i64[0];
  v13 = 0;
  v14 = 4 * a4;
  v15 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_13:
    if ((result & 2) != 0)
    {
      v29 = (float32x2_t *)&a5[v13];
      a5 = (_DWORD *)((char *)a5 + 2 * v15);
      v30 = a2;
      v31 = (float32x2_t *)&a3[v13];
      v32 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v33 = v32;
      do
      {
        v34 = *v31;
        v31 = (float32x2_t *)((char *)v31 + v14);
        v32 = vmla_n_f32(v32, v34, v34.f32[0]);
        v33 = vmla_lane_f32(v33, v34, v34, 1);
        v21 = v30-- <= 1;
      }
      while (!v21);
      v36 = *v29;
      v35 = (char *)v29 + v15;
      HIDWORD(a13) = *((_DWORD *)v35 + 1);
      v37 = &v35[-v15];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v32, a7.f32[0]), v36, a7, 2);
      *(_QWORD *)v37 = a8.i64[0];
      v38 = &v37[v15];
      *((_DWORD *)v38 + 1) = vmla_laneq_f32(vmul_n_f32(v33, *(float *)&a7), *(float32x2_t *)&a13, a7, 2).i32[1];
      v39 = (float32x2_t *)&v38[-v15 + 8];
      v40 = v13 + 2;
      if (result > v13 + 2)
      {
        do
        {
          v41 = a2;
          v42 = (float32x2_t *)&a3[v13];
          v43 = (float32x2_t *)&a3[v40];
          v44 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v45 = v44;
          do
          {
            v46 = *v43;
            v43 = (float32x2_t *)((char *)v43 + v14);
            v47 = *v42;
            v42 = (float32x2_t *)((char *)v42 + v14);
            v44 = vmla_n_f32(v44, v46, v47.f32[0]);
            v45 = vmla_lane_f32(v45, v46, v47, 1);
            v21 = v41-- <= 1;
          }
          while (!v21);
          v49 = *v39;
          v48 = (float32x2_t *)((char *)v39 + v15);
          v50 = *v48;
          v51 = (float32x2_t *)((char *)v48 + v15 + -2 * v15);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v44, a7.f32[0]), v49, a7, 2);
          *v51 = *(float32x2_t *)a8.i8;
          v52 = (float32x2_t *)((char *)v51 + v15);
          *v52 = vmla_laneq_f32(vmul_n_f32(v45, a7.f32[0]), v50, a7, 2);
          v39 = (float32x2_t *)((char *)v52 + v15 + -2 * v15 + 8);
          v40 += 2;
        }
        while (v40 < result);
        v13 += 2;
      }
      else
      {
        v13 += 2;
      }
    }
    for (; result > v13; v13 += 4)
    {
      v53 = (float32x4_t *)&a5[v13];
      a5 += v15;
      v54 = a2;
      v55 = (float32x4_t *)&a3[v13];
      v56 = (float32x4_t)veorq_s8(a8, a8);
      v57 = v56;
      v58 = *(float32x2_t *)v56.f32;
      v59 = *(float32x2_t *)v56.f32;
      do
      {
        v60 = *v55;
        v55 = (float32x4_t *)((char *)v55 + v14);
        v56 = vmlaq_n_f32(v56, v60, v60.f32[0]);
        v57 = vmlaq_lane_f32(v57, v60, *(float32x2_t *)v60.f32, 1);
        v58 = vmla_laneq_f32(v58, *(float32x2_t *)&v60.u32[2], v60, 2);
        v59 = vmla_laneq_f32(v59, *(float32x2_t *)&v60.u32[2], v60, 3);
        v21 = v54-- <= 1;
      }
      while (!v21);
      v62 = *v53;
      v61 = (float32x4_t *)((char *)v53 + v15);
      v64 = *v61;
      v63 = (float32x2_t *)((char *)v61 + v15);
      v65 = v63[1];
      v66 = *(float32x2_t *)((char *)v63 + v15 + 8);
      v67 = (__n128 *)&v63[v15 / 0xFFFFFFFFFFFFFFFCLL];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v56, a7.f32[0]), v62, a7, 2);
      v68 = vmlaq_laneq_f32(vmulq_n_f32(v57, a7.f32[0]), v64, a7, 2);
      v69 = (__n128 *)((char *)v67 + v15);
      *v67 = (__n128)a8;
      v70 = v67 + 1;
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u32[0] = v68.u32[1];
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u64[0] = v68.u64[1];
      v71 = (float32x2_t *)((char *)v69 + v15);
      *v71 = vmla_laneq_f32(vmul_n_f32(v58, a7.f32[0]), v65, a7, 2);
      v71->i32[(unint64_t)v15 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v59, *(float *)&a7), v66, a7, 2).i32[1];
      for (i = v13 + 4; i < result; i += 4)
      {
        v73 = a2;
        v74 = (float32x4_t *)&a3[v13];
        v75 = (float32x4_t *)&a3[i];
        v76 = (float32x4_t)veorq_s8(a8, a8);
        v77 = v76;
        v78 = v76;
        v79 = v76;
        do
        {
          v80 = *v75;
          v75 = (float32x4_t *)((char *)v75 + v14);
          v81 = *v74;
          v74 = (float32x4_t *)((char *)v74 + v14);
          v76 = vmlaq_n_f32(v76, v80, v81.f32[0]);
          v77 = vmlaq_lane_f32(v77, v80, *(float32x2_t *)v81.f32, 1);
          v78 = vmlaq_laneq_f32(v78, v80, v81, 2);
          v79 = vmlaq_laneq_f32(v79, v80, v81, 3);
          v21 = v73-- <= 1;
        }
        while (!v21);
        v83 = *(float32x4_t *)v70;
        v82 = (float32x4_t *)((char *)v70 + v15);
        v85 = *v82;
        v84 = (float32x4_t *)((char *)v82 + v15);
        v87 = *v84;
        v86 = (float32x4_t *)((char *)v84 + v15);
        v88 = *v86;
        v89 = (__n128 *)((char *)v86 + v15 + -4 * v15);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v76, a7.f32[0]), v83, a7, 2);
        *v89 = (__n128)a8;
        v90 = (float32x4_t *)((char *)v89 + v15);
        *v90 = vmlaq_laneq_f32(vmulq_n_f32(v77, a7.f32[0]), v85, a7, 2);
        v91 = (float32x4_t *)((char *)v90 + v15);
        *v91 = vmlaq_laneq_f32(vmulq_n_f32(v78, a7.f32[0]), v87, a7, 2);
        v92 = (float32x4_t *)((char *)v91 + v15);
        *v92 = vmlaq_laneq_f32(vmulq_n_f32(v79, a7.f32[0]), v88, a7, 2);
        v70 = (__n128 *)((char *)&v92[1] + v15 + -4 * v15);
      }
    }
    return result;
  }
  v16 = a5;
  a5 = (_DWORD *)((char *)a5 + v15);
  v17 = a2;
  v18 = a3;
  v19 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v18 = &a3[(unint64_t)v14 / 4], v19.f32[0] = *a3 * *a3, v17 = a2 - 1, a2 > 1))
  {
    do
    {
      a12.f32[0] = *v18;
      v20 = (__int32 *)&v18[(unint64_t)v14 / 4];
      a12.i32[1] = *v20;
      v18 = (float *)&v20[(unint64_t)v14 / 4];
      v19 = vmla_f32(v19, a12, a12);
      v21 = v17 <= 2;
      v17 -= 2;
    }
    while (!v21);
    v19.f32[0] = vaddv_f32(v19);
  }
  a12.i32[0] = *v16;
  v19.f32[0] = v19.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v19, a12, a7, 2);
  *v16 = a8.i32[0];
  v22 = (float32x2_t *)(v16 + 1);
  v23 = 1;
  if (result > 1)
  {
    do
    {
      v24 = a2;
      v25 = a3;
      v26 = (float32x2_t *)&a3[v23];
      v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      do
      {
        v28 = *v26;
        v26 = (float32x2_t *)((char *)v26 + v14);
        *(float *)&a13 = *v25;
        v25 = (float *)((char *)v25 + v14);
        v27 = vmla_n_f32(v27, v28, *(float *)&a13);
        v21 = v24-- <= 1;
      }
      while (!v21);
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v27, a7.f32[0]), *v22, a7, 2);
      *v22++ = *(float32x2_t *)a8.i8;
      v23 += 2;
    }
    while (v23 < result);
    v13 = 1;
    goto LABEL_13;
  }
  return result;
}

unint64_t sub_239A31E04()
{
  unsigned int v0;
  unsigned int v1;
  char *v3;
  unsigned int v4;
  unint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  qos_class_self();
  dword_25693D860 = pthread_qos_max_parallelism();
  v0 = pthread_qos_max_parallelism();
  dword_25693D864 = v0;
  v1 = dword_25693D860;
  if (dword_25693D860 == -1 || v0 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_239A31F8C();
    v1 = 1;
    dword_25693D860 = 1;
    goto LABEL_12;
  }
  if (!dword_25693D860)
  {
    v1 = 2;
    dword_25693D860 = 2;
  }
  if (v0 < v1)
LABEL_12:
    dword_25693D864 = v1;
  v3 = getenv("VECLIB_MAXIMUM_THREADS");
  if (v3)
  {
    v4 = strtol(v3, 0, 0);
    if (v4)
    {
      if (dword_25693D864 > v4)
      {
        dword_25693D860 = v4;
        dword_25693D864 = v4;
      }
    }
  }
  byte_25693D86C = getenv("APPLE_LAPACK_FILL_NAN") != 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = sub_239A2976C((uint64_t)&v6);
  dword_25693D870 = DWORD1(v7);
  *(_QWORD *)&algn_25693D874[4] = *((_QWORD *)&v8 + 1);
  dword_25693D880 = DWORD2(v9);
  return result;
}

uint64_t sub_239A31F2C()
{
  if (qword_25693D888 != -1)
    dispatch_once(&qword_25693D888, &unk_250AF2120);
  if ((dword_25693D868 - 1) > 2)
    return 16;
  else
    return dword_239F0BBF0[dword_25693D868 - 1];
}

void sub_239A31F8C()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_23940C000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "pthread_qos_max_parallelism() returned error in LAPACK call to initHardwareInfo()\n", v0, 2u);
}

void sub_239A31FD0(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, double *__X, uint64_t a6, double a7, float64x2_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14)
{
  float64x2_t v14;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  uint64_t v39;
  double *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  double *v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t *v93;
  float64_t *v94;
  uint64_t v95;
  int64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  double *v99;
  float64x2_t v100;
  float64_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  double *v105;
  float64x2_t v106;
  float64_t *v107;
  float64_t v108;
  double *v109;
  float64x2_t v110;
  float64_t v111;
  double *v112;
  float64x2_t v113;
  float64x2_t v114;
  double *v115;
  double *v116;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v24 = 2;
      }
      else
      {
        a8.f64[0] = *(float64_t *)(a3 + 8 * a4);
        v24 = 2;
        v29 = __X;
        v30 = __N;
        do
        {
          v31 = *v29 * a7;
          *v29 = v31;
          v29[a6] = v29[a6] * a7 - v31 * a8.f64[0];
          ++v29;
          --v30;
        }
        while (v30);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v24 = 1;
      cblas_dscal(__N, a7, __X, 1);
    }
    else
    {
      v24 = 0;
    }
  }
  else if (__N < 1)
  {
    v24 = 3;
  }
  else
  {
    a8.f64[0] = *(float64_t *)(a3 + 8 * a4);
    v21 = (double *)(a3 + 16 * a4);
    v22 = *v21;
    v23 = v21[1];
    v24 = 3;
    v25 = __X;
    v26 = __N;
    do
    {
      v27 = *v25 * a7;
      *v25 = v27;
      v28 = v25[a6] * a7 - v27 * a8.f64[0];
      v25[a6] = v28;
      v25[2 * a6] = -(v23 * v28 + *v25 * v22 - v25[2 * a6] * a7);
      ++v25;
      --v26;
    }
    while (v26);
  }
  if (v24 < a2)
  {
    v32 = a6;
    do
    {
      if (__N < 4)
      {
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v34 = (double *)(a3 + 8 * v24 * a4);
        v36 = (double *)(a3 + 8 * (v24 + 2) * a4);
        v37 = (double *)(a3 + 8 * (v24 + 3) * a4);
        v38 = __X;
        do
        {
          v39 = v24;
          v35 = (double *)(a3 + 8 * (a4 + v24 * a4));
          v40 = v35;
          v41 = (float64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v42 = (float64x2_t *)(a3 + 8 * v24 * a4);
          v43 = (float64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v44 = (float64x2_t *)v38;
          v45 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v46 = v45;
          v47 = v45;
          v48 = v45;
          v49 = v45;
          v50 = v45;
          v51 = v45;
          v52 = v45;
          if ((v24 & 1) != 0)
          {
            v53 = *(float64x2_t *)(v38 + 2);
            v44 = (float64x2_t *)&v38[v32];
            v42 = (float64x2_t *)(v34 + 1);
            v40 = v35 + 1;
            v43 = (float64x2_t *)(v36 + 1);
            v41 = (float64x2_t *)(v37 + 1);
            v45 = vmlaq_n_f64(v45, *(float64x2_t *)v38, *v34);
            v47 = vmlaq_n_f64(v47, *(float64x2_t *)v38, *v35);
            v49 = vmlaq_n_f64(v49, *(float64x2_t *)v38, *v36);
            v51 = vmlaq_n_f64(v51, *(float64x2_t *)v38, *v37);
            v46 = vmlaq_n_f64(v46, v53, *v34);
            v48 = vmlaq_n_f64(v48, v53, *v35);
            v50 = vmlaq_n_f64(v50, v53, *v36);
            v52 = vmlaq_n_f64(v52, v53, *v37);
            v39 = v24 - 1;
          }
          for (; v39; v39 -= 2)
          {
            v55 = *v44;
            v56 = v44[1];
            v54 = (float64x2_t *)((char *)v44 + v32 * 8);
            v57 = *v54;
            v58 = v54[1];
            v44 = (float64x2_t *)((char *)v54 + v32 * 8);
            v59 = *v42++;
            v60 = *(float64x2_t *)v40;
            v40 += 2;
            v61 = *v43++;
            v62 = *v41++;
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v55, v59.f64[0]), v57, v59, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v55, v60.f64[0]), v57, v60, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v55, v61.f64[0]), v57, v61, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v55, v62.f64[0]), v57, v62, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v56, v59.f64[0]), v58, v59, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v56, v60.f64[0]), v58, v60, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v56, v61.f64[0]), v58, v61, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v56, v62.f64[0]), v58, v62, 1);
          }
          v64 = *v44;
          v65 = v44[1];
          v63 = (float64x2_t *)((char *)v44 + v32 * 8);
          v67 = *v63;
          v68 = v63[1];
          v66 = (float64x2_t *)((char *)v63 + v32 * 8);
          v70 = *v66;
          v71 = v66[1];
          v69 = (float64x2_t *)((char *)v66 + v32 * 8);
          v72 = *v69;
          v73 = v69[1];
          v74 = (float64x2_t *)((char *)v69 + 8 * a6 + -32 * a6);
          a8 = vmulq_n_f64(v64, a7);
          a11 = vmulq_n_f64(v68, a7);
          a12 = vmulq_n_f64(v70, a7);
          a13 = vmulq_n_f64(v71, a7);
          v14 = vsubq_f64(a8, v45);
          v75 = vsubq_f64(vmulq_n_f64(v65, a7), v46);
          v76 = vsubq_f64(vmulq_n_f64(v67, a7), v47);
          v77 = *v41;
          v78 = vmlsq_lane_f64(v76, v14, *v40, 0);
          v79 = vmlsq_lane_f64(vsubq_f64(a11, v48), v75, *v40, 0);
          v80 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a12, v49), v14, v43->f64[0], 0), v78, *v43, 1);
          v81 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a13, v50), v75, v43->f64[0], 0), v79, *v43, 1);
          a8.f64[0] = v41[1].f64[0];
          *v74 = v14;
          v74[1] = v75;
          v82 = (float64x2_t *)((char *)v74 + v32 * 8);
          *v82 = v78;
          v82[1] = v79;
          v83 = (float64x2_t *)((char *)v82 + v32 * 8);
          *v83 = v80;
          v83[1] = v81;
          v84 = (float64x2_t *)((char *)v83 + v32 * 8);
          *v84 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v72, a7), v51), v14, v77.f64[0], 0), v78, v77, 1), v80, a8.f64[0], 0);
          v84[1] = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v73, a7), v52), v75, v77.f64[0], 0), v79, v77, 1), v81, a8.f64[0], 0);
          v33 += 4;
          v38 += 4;
        }
        while (v33 < __N - 3);
      }
      v85 = __N - v33;
      if (__N > v33)
      {
        v86 = (unint64_t *)(a3 + 8 * v24 * a4);
        v87 = (unint64_t *)(a3 + 8 * (a4 + v24 * a4));
        v88 = (unint64_t *)(a3 + 8 * (v24 + 2) * a4);
        v90 = &__X[v33];
        do
        {
          v89 = (unint64_t *)(a3 + 8 * (v24 + 3) * a4);
          v91 = (int64x2_t *)v89;
          v92 = (int64x2_t *)(a3 + 8 * v24 * a4);
          v93 = (int64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v94 = v90;
          v95 = v24;
          v96 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4));
          v97 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v98 = v97;
          if ((v24 & 1) != 0)
          {
            v94 = &v90[v32];
            *(_QWORD *)&a11.f64[0] = *v86;
            v92 = (int64x2_t *)(v86 + 1);
            *(_QWORD *)&a12.f64[0] = *v87;
            v96 = (int64x2_t *)(v87 + 1);
            *(_QWORD *)&a13.f64[0] = *v88;
            v93 = (int64x2_t *)(v88 + 1);
            *(_QWORD *)&a14.f64[0] = *v89;
            v91 = (int64x2_t *)(v89 + 1);
            v97 = vmlaq_n_f64(v97, (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)a12), *v90);
            v98 = vmlaq_n_f64(v98, (float64x2_t)vtrn1q_s64((int64x2_t)a13, (int64x2_t)a14), *v90);
            v95 = v24 - 1;
          }
          for (; v95; v95 -= 2)
          {
            v100.f64[0] = *v94;
            v99 = &v94[v32];
            v101 = *v99;
            v94 = &v99[v32];
            v102 = *v92++;
            v103 = *v96++;
            v104 = *v93++;
            v100.f64[1] = v101;
            a14 = *(float64x2_t *)v91++;
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(v97, (float64x2_t)vtrn1q_s64(v102, v103), v100.f64[0]), (float64x2_t)vtrn2q_s64(v102, v103), v100, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(v98, (float64x2_t)vtrn1q_s64(v104, (int64x2_t)a14), v100.f64[0]), (float64x2_t)vtrn2q_s64(v104, (int64x2_t)a14), v100, 1);
          }
          v106.f64[0] = *v94;
          v105 = &v94[v32];
          v108 = *v105;
          v107 = &v105[v32];
          v110.f64[0] = *v107;
          v109 = &v107[v32];
          v111 = *v109;
          v112 = &v109[a6 + -4 * a6];
          v106.f64[1] = v108;
          v110.f64[1] = v111;
          a11 = vmulq_n_f64(v110, a7);
          v113 = vsubq_f64(vmulq_n_f64(v106, a7), v97);
          a12.f64[0] = v113.f64[0];
          *(_QWORD *)&a14.f64[1] = v96->i64[0];
          v14 = *(float64x2_t *)v93;
          a13 = (float64x2_t)vtrn1q_s64(*v93, *v91);
          a8 = vmlsq_lane_f64(v113, a14, v113.f64[0], 0);
          a12.f64[1] = a8.f64[1];
          a14 = (float64x2_t)vtrn2q_s64(*v93, *v91);
          v114 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a11, v98), a13, a12.f64[0], 0), a14, a12, 1);
          *(_QWORD *)&a14.f64[1] = v91[1].i64[0];
          *v112 = a12.f64[0];
          v115 = &v112[v32];
          *v115 = a8.f64[1];
          v116 = &v115[v32];
          *v116 = v114.f64[0];
          v116[a6] = vmlsq_lane_f64(v114, a14, *(double *)&v114, 0).f64[1];
          ++v90;
          --v85;
        }
        while (v85);
      }
      v24 += 4;
    }
    while (v24 < a2);
  }
}

void sub_239A32444(uint64_t __N, uint64_t a2, double *a3, uint64_t a4, double *__X, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13, float64x2_t a14)
{
  float64x2_t v14;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  const double *v46;
  uint64_t v47;
  const double *v48;
  uint64_t v49;
  const double *v50;
  uint64_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double *v65;
  double *v66;
  double *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t *v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t *v112;
  uint64_t v113;
  double *v114;
  unint64_t *v115;
  unint64_t *v116;
  double *v117;
  int64x2_t *v118;
  float64_t *v119;
  uint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  int64x2_t *v123;
  float64x2_t v124;
  float64x2_t v125;
  double *v126;
  float64x2_t v127;
  float64_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  double *v132;
  float64x2_t v133;
  float64_t *v134;
  float64_t v135;
  double *v136;
  float64x2_t v137;
  float64_t v138;
  double *v139;
  float64x2_t v140;
  float64x2_t v141;
  double *v142;
  double *v143;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v29 = 2;
      }
      else
      {
        v35 = &a3[a4];
        v36 = a7 / *a3;
        v37 = *v35;
        v38 = v35[1];
        v29 = 2;
        v39 = __X;
        v40 = __N;
        v41 = 1.0 / v38;
        do
        {
          v42 = v36 * *v39;
          *v39 = v42;
          v39[a6] = v41 * (v39[a6] * a7 - v42 * v37);
          ++v39;
          --v40;
        }
        while (v40);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v29 = 1;
      cblas_dscal(__N, a7 / *a3, __X, 1);
    }
    else
    {
      v29 = 0;
    }
  }
  else if (__N < 1)
  {
    v29 = 3;
  }
  else
  {
    v21 = &a3[a4];
    v22 = &a3[2 * a4];
    v23 = *v22;
    v24 = v22[1];
    v25 = a7 / *a3;
    v26 = *v21;
    v27 = 1.0 / v21[1];
    v28 = v22[2];
    v29 = 3;
    v30 = __X;
    v31 = __N;
    v32 = 1.0 / v28;
    do
    {
      v33 = v25 * *v30;
      *v30 = v33;
      v34 = v27 * (v30[a6] * a7 - v33 * v26);
      v30[a6] = v34;
      v14.f64[0] = v30[2 * a6];
      a14.f64[0] = v32 * -(v24 * v34 + *v30 * v23 - v14.f64[0] * a7);
      v30[2 * a6] = a14.f64[0];
      ++v30;
      --v31;
    }
    while (v31);
  }
  if (v29 < a2)
  {
    v43 = a4 + 1;
    v44 = a6;
    do
    {
      v45 = &a3[v29 * a4];
      v46 = &v45[v29];
      v47 = v29 + 1;
      v48 = &a3[(v29 + 1) * v43];
      v49 = v29 + 2;
      v50 = &a3[(v29 + 2) * v43];
      v51 = v29 + 3;
      v52 = &a3[(v29 + 3) * v43];
      v53 = vld1q_dup_f64(v46);
      v54 = vld1q_dup_f64(v48);
      v55 = vld1q_dup_f64(v50);
      v56 = vld1q_dup_f64(v52);
      v57 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v58 = vdivq_f64(v57, v53);
      v59 = vdivq_f64(v57, v54);
      v60 = vdivq_f64(v57, v55);
      v61 = vdivq_f64(v57, v56);
      if (__N < 4)
      {
        v62 = 0;
      }
      else
      {
        v62 = 0;
        v64 = &a3[v49 * a4];
        v65 = &a3[v51 * a4];
        v66 = __X;
        do
        {
          v63 = &a3[v47 * a4];
          v67 = v63;
          v68 = (float64x2_t *)&a3[v51 * a4];
          v69 = (float64x2_t *)&a3[v29 * a4];
          v70 = (float64x2_t *)&a3[v49 * a4];
          v71 = (float64x2_t *)v66;
          v72 = v29;
          v73 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v74 = v73;
          v75 = v73;
          v76 = v73;
          v77 = v73;
          v78 = v73;
          v79 = v73;
          v80 = v73;
          if ((v29 & 1) != 0)
          {
            v81 = *(float64x2_t *)(v66 + 2);
            v71 = (float64x2_t *)&v66[v44];
            v69 = (float64x2_t *)(v45 + 1);
            v67 = v63 + 1;
            v70 = (float64x2_t *)(v64 + 1);
            v68 = (float64x2_t *)(v65 + 1);
            v73 = vmlaq_n_f64(v73, *(float64x2_t *)v66, *v45);
            v75 = vmlaq_n_f64(v75, *(float64x2_t *)v66, *v63);
            v77 = vmlaq_n_f64(v77, *(float64x2_t *)v66, *v64);
            v79 = vmlaq_n_f64(v79, *(float64x2_t *)v66, *v65);
            v74 = vmlaq_n_f64(v74, v81, *v45);
            v76 = vmlaq_n_f64(v76, v81, *v63);
            v78 = vmlaq_n_f64(v78, v81, *v64);
            v80 = vmlaq_n_f64(v80, v81, *v65);
            v72 = v29 - 1;
          }
          for (; v72; v72 -= 2)
          {
            v83 = *v71;
            v84 = v71[1];
            v82 = (float64x2_t *)((char *)v71 + v44 * 8);
            v85 = *v82;
            v86 = v82[1];
            v71 = (float64x2_t *)((char *)v82 + v44 * 8);
            v87 = *v69++;
            v88 = *(float64x2_t *)v67;
            v67 += 2;
            v89 = *v70++;
            v90 = *v68++;
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v83, v87.f64[0]), v85, v87, 1);
            v75 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v83, v88.f64[0]), v85, v88, 1);
            v77 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v83, v89.f64[0]), v85, v89, 1);
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v83, v90.f64[0]), v85, v90, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(v74, v84, v87.f64[0]), v86, v87, 1);
            v76 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v84, v88.f64[0]), v86, v88, 1);
            v78 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v84, v89.f64[0]), v86, v89, 1);
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v84, v90.f64[0]), v86, v90, 1);
          }
          v92 = *v71;
          v93 = v71[1];
          v91 = (float64x2_t *)((char *)v71 + v44 * 8);
          v95 = *v91;
          v96 = v91[1];
          v94 = (float64x2_t *)((char *)v91 + v44 * 8);
          v98 = *v94;
          v99 = v94[1];
          v97 = (float64x2_t *)((char *)v94 + v44 * 8);
          v100 = *v97;
          v101 = v97[1];
          v102 = (float64x2_t *)((char *)v97 + 8 * a6 + -32 * a6);
          v53 = vmulq_n_f64(v92, a7);
          v56 = vmulq_n_f64(v96, a7);
          v57 = vmulq_n_f64(v98, a7);
          a13 = vmulq_n_f64(v99, a7);
          v14 = vmulq_f64(vsubq_f64(v53, v73), v58);
          v103 = vmulq_f64(vsubq_f64(vmulq_n_f64(v93, a7), v74), v58);
          v104 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v95, a7), v75), v14, *v67, 0), v59);
          v105 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(v56, v76), v103, *v67, 0), v59);
          v106 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(v57, v77), v14, v70->f64[0], 0), v104, *v70, 1), v60);
          v107 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a13, v78), v103, v70->f64[0], 0), v105, *v70, 1), v60);
          v53.f64[0] = v68[1].f64[0];
          v108 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v100, a7), v79), v14, v68->f64[0], 0), v104, *v68, 1), v106, v53.f64[0], 0), v61);
          v109 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v101, a7), v80), v103, v68->f64[0], 0), v105, *v68, 1), v107, v53.f64[0], 0), v61);
          *v102 = v14;
          v102[1] = v103;
          v110 = (float64x2_t *)((char *)v102 + v44 * 8);
          *v110 = v104;
          v110[1] = v105;
          v111 = (float64x2_t *)((char *)v110 + v44 * 8);
          *v111 = v106;
          v111[1] = v107;
          v112 = (float64x2_t *)((char *)v111 + v44 * 8);
          *v112 = v108;
          v112[1] = v109;
          v62 += 4;
          v66 += 4;
        }
        while (v62 < __N - 3);
      }
      v113 = __N - v62;
      if (__N > v62)
      {
        v114 = &a3[v47 * a4];
        v115 = (unint64_t *)&a3[v49 * a4];
        v116 = (unint64_t *)&a3[v51 * a4];
        v117 = &__X[v62];
        do
        {
          v118 = (int64x2_t *)v115;
          v119 = v117;
          v120 = v29;
          v121 = (int64x2_t *)v114;
          v122 = (int64x2_t *)v116;
          v123 = (int64x2_t *)&a3[v29 * a4];
          v124 = (float64x2_t)veorq_s8((int8x16_t)v53, (int8x16_t)v53);
          v125 = v124;
          if ((v29 & 1) != 0)
          {
            v119 = &v117[v44];
            v56.f64[0] = *v45;
            v123 = (int64x2_t *)(v45 + 1);
            v57.f64[0] = *v114;
            v121 = (int64x2_t *)(v114 + 1);
            *(_QWORD *)&a13.f64[0] = *v115;
            v118 = (int64x2_t *)(v115 + 1);
            *(_QWORD *)&a14.f64[0] = *v116;
            v122 = (int64x2_t *)(v116 + 1);
            v124 = vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64((int64x2_t)v56, (int64x2_t)v57), *v117);
            v125 = vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64((int64x2_t)a13, (int64x2_t)a14), *v117);
            v120 = v29 - 1;
          }
          for (; v120; v120 -= 2)
          {
            v127.f64[0] = *v119;
            v126 = &v119[v44];
            v128 = *v126;
            v119 = &v126[v44];
            v129 = *v123++;
            v130 = *v121++;
            v131 = *v118++;
            v127.f64[1] = v128;
            a14 = *(float64x2_t *)v122++;
            v124 = vmlaq_laneq_f64(vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64(v129, v130), v127.f64[0]), (float64x2_t)vtrn2q_s64(v129, v130), v127, 1);
            v125 = vmlaq_laneq_f64(vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64(v131, (int64x2_t)a14), v127.f64[0]), (float64x2_t)vtrn2q_s64(v131, (int64x2_t)a14), v127, 1);
          }
          v133.f64[0] = *v119;
          v132 = &v119[v44];
          v135 = *v132;
          v134 = &v132[v44];
          v137.f64[0] = *v134;
          v136 = &v134[v44];
          v138 = *v136;
          v139 = &v136[a6 + -4 * a6];
          v133.f64[1] = v135;
          v137.f64[1] = v138;
          v56 = vmulq_n_f64(v137, a7);
          v140 = vsubq_f64(vmulq_n_f64(v133, a7), v124);
          v57.f64[0] = v140.f64[0] * v58.f64[0];
          *(_QWORD *)&a14.f64[1] = v121->i64[0];
          v14 = *(float64x2_t *)v118;
          a13 = (float64x2_t)vtrn1q_s64(*v118, *v122);
          v53 = vmulq_f64(vmlsq_lane_f64(v140, a14, v140.f64[0] * v58.f64[0], 0), v59);
          v57.f64[1] = v53.f64[1];
          a14 = (float64x2_t)vtrn2q_s64(*v118, *v122);
          v141 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(v56, v125), a13, v57.f64[0], 0), a14, v57, 1);
          *(_QWORD *)&a14.f64[1] = v122[1].i64[0];
          *v139 = v57.f64[0];
          v142 = &v139[v44];
          *v142 = v53.f64[1];
          v143 = &v142[v44];
          *v143 = v141.f64[0] * v60.f64[0];
          v143[a6] = vmulq_f64(vmlsq_lane_f64(v141, a14, *(double *)&v141 * *(double *)&v60, 0), v61).f64[1];
          ++v117;
          --v113;
        }
        while (v113);
      }
      v29 += 4;
    }
    while (v29 < a2);
  }
}

void sub_239A32960(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  int8x16_t v14;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double *v25;
  double *v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int8x16_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  float64x2_t *v99;
  float64x2_t *v100;
  uint64_t v101;
  float64x2_t *v102;
  uint64_t v103;
  double *f64;
  float64x2_t *v105;
  uint64_t v106;
  float64_t *v107;
  float64x2_t v108;
  float64x2_t v109;
  double *v110;
  float64x2_t v111;
  float64_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64_t *v118;
  double *v119;
  float64x2_t v120;
  float64_t *v121;
  float64_t v122;
  double *v123;
  float64x2_t v124;
  float64_t v125;
  double *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  float64_t *v133;
  float64_t *v134;
  BOOL v135;

  v21 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        a8.i64[0] = *(_QWORD *)(a3 + 8 * (v21 + v21 * a4) - 8);
        v32 = (double *)(a5 + 8 * v21 * a6);
        v33 = (double *)(a5 + a6 * (8 * a2 - 16));
        v34 = __N;
        do
        {
          v35 = *v32 * a7;
          *v32++ = v35;
          *v33 = *v33 * a7 - v35 * *(double *)a8.i64;
          ++v33;
          --v34;
        }
        while (v34);
      }
      v21 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v21 * a6), 1);
      v21 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v22 = a3 + 8 * (v21 + v21 * a4);
      v23 = *(double *)(v22 - 16);
      a8.i64[0] = *(_QWORD *)(v22 - 8);
      v24 = *(double *)(a3 + 8 * (a2 + (a2 - 2) * a4) - 24);
      v25 = (double *)(a5 + 8 * v21 * a6);
      v26 = (double *)(a5 + a6 * (8 * a2 - 16));
      v27 = (double *)(a5 + a6 * (8 * a2 - 24));
      v28 = __N;
      do
      {
        v29 = *v25 * a7;
        *v25 = v29;
        v30 = *v26 * a7 - v29 * *(double *)a8.i64;
        *v26++ = v30;
        v31 = *v25++;
        *v27 = -(v24 * v30 + v31 * v23 - *v27 * a7);
        ++v27;
        --v28;
      }
      while (v28);
    }
    v21 = a2 - 4;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    v36 = v21 + 1;
    v37 = 8 * a6;
    v38 = 8 * a4;
    v39 = (float64x2_t *)(a5 + 8 * a6 * (v21 + 1));
    do
    {
      v40 = v36 - 4;
      if (__N < 4)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        v43 = a2 - v40;
        if (a2 - v40 <= 4)
          v43 = 4;
        v44 = v39;
        do
        {
          v45 = v43 - 4;
          v46 = v44;
          v42 = a3 + 8 * v40 + 8 * v36 * a4;
          v47 = (float64x2_t *)v42;
          v48 = (float64x2_t)veorq_s8(v14, v14);
          v49 = v48;
          v50 = v48;
          v51 = v48;
          v52 = v48;
          v53 = v48;
          v54 = v48;
          v55 = v48;
          if ((((_BYTE)v43 - 4) & 1) != 0)
          {
            v56 = v44[1];
            v46 = (float64x2_t *)((char *)v44 + v37);
            v57 = *(float64x2_t *)(v42 + 16);
            v47 = (float64x2_t *)(v42 + v38);
            v48 = vmlaq_n_f64(v48, *v44, *(double *)v42);
            v50 = vmlaq_laneq_f64(v50, *v44, *(float64x2_t *)v42, 1);
            v52 = vmlaq_n_f64(v52, *v44, v57.f64[0]);
            v54 = vmlaq_laneq_f64(v54, *v44, v57, 1);
            v49 = vmlaq_n_f64(v49, v56, *(double *)v42);
            v51 = vmlaq_laneq_f64(v51, v56, *(float64x2_t *)v42, 1);
            v53 = vmlaq_n_f64(v53, v56, v57.f64[0]);
            v55 = vmlaq_laneq_f64(v55, v56, v57, 1);
            v45 = v43 - 5;
          }
          for (; v45; v45 -= 2)
          {
            v59 = *v46;
            v60 = v46[1];
            v58 = (float64x2_t *)((char *)v46 + v37);
            v61 = *v58;
            v62 = v58[1];
            v46 = (float64x2_t *)((char *)v58 + v37);
            v64 = *v47;
            v65 = v47[1];
            v63 = (float64x2_t *)((char *)v47 + v38);
            v66 = *v63;
            v67 = v63[1];
            v47 = (float64x2_t *)((char *)v63 + v38);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v66.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v59, v64, 1), v61, v66, 1);
            v52 = vmlaq_n_f64(vmlaq_n_f64(v52, v59, v65.f64[0]), v61, v67.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v59, v65, 1), v61, v67, 1);
            v49 = vmlaq_n_f64(vmlaq_n_f64(v49, v60, v64.f64[0]), v62, v66.f64[0]);
            v51 = vmlaq_laneq_f64(vmlaq_laneq_f64(v51, v60, v64, 1), v62, v66, 1);
            v53 = vmlaq_n_f64(vmlaq_n_f64(v53, v60, v65.f64[0]), v62, v67.f64[0]);
            v55 = vmlaq_laneq_f64(vmlaq_laneq_f64(v55, v60, v65, 1), v62, v67, 1);
          }
          v68 = (float64x2_t *)((char *)v47 - v38 * (v43 - 3));
          v69 = (float64x2_t *)((char *)v46 - v37 * v43);
          v71 = *v69;
          v72 = v69[1];
          v70 = (float64x2_t *)((char *)v69 + v37);
          v74 = *v70;
          v75 = v70[1];
          v73 = (float64x2_t *)((char *)v70 + v37);
          v77 = *v73;
          v78 = v73[1];
          v76 = (float64x2_t *)((char *)v73 + v37);
          v79 = *v76;
          v80 = v76[1];
          v81 = (int8x16_t *)&v76->f64[a6 + -4 * a6];
          v82 = vsubq_f64(vmulq_n_f64(v71, a7), v48);
          v83 = vsubq_f64(vmulq_n_f64(v72, a7), v49);
          v84 = vsubq_f64(vmulq_n_f64(v79, a7), v54);
          v85 = vsubq_f64(vmulq_n_f64(v80, a7), v55);
          v86 = *v68;
          v87 = v68[1];
          v88 = (float64x2_t *)((char *)v68 - v38);
          v89 = vmlsq_lane_f64(v82, v84, v86.f64[0], 0);
          v90 = vmlsq_lane_f64(v83, v85, v86.f64[0], 0);
          v91 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v74, a7), v50), v84, v86, 1);
          v92 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v75, a7), v51), v85, v86, 1);
          v93 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v77, a7), v52), v84, v87.f64[0], 0);
          v94 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v78, a7), v53), v85, v87.f64[0], 0);
          a8 = *(int8x16_t *)v88;
          v95 = vmlsq_laneq_f64(v91, v93, *v88, 1);
          v96 = vmlsq_laneq_f64(v92, v94, *v88, 1);
          a8.i64[0] = *(_QWORD *)&v88->f64[-a4];
          v14 = (int8x16_t)vmlsq_lane_f64(vmlsq_lane_f64(v89, v93, v88->f64[0], 0), v95, *(double *)a8.i64, 0);
          v97 = vmlsq_lane_f64(vmlsq_lane_f64(v90, v94, v88->f64[0], 0), v96, *(double *)a8.i64, 0);
          *v81 = v14;
          v81[1] = (int8x16_t)v97;
          v98 = (float64x2_t *)&v81->i8[v37];
          *v98 = v95;
          v98[1] = v96;
          v99 = (float64x2_t *)((char *)v98 + v37);
          *v99 = v93;
          v99[1] = v94;
          v100 = (float64x2_t *)((char *)v99 + v37);
          *v100 = v84;
          v100[1] = v85;
          v41 += 4;
          v44 += 2;
        }
        while (v41 < __N - 3);
      }
      v101 = __N - v41;
      if (__N > v41)
      {
        v103 = a2 - v40;
        if (a2 - v40 <= 4)
          v103 = 4;
        f64 = v39[(unint64_t)v41 / 2].f64;
        do
        {
          v102 = (float64x2_t *)(a3 + 8 * v40 + 8 * v36 * a4);
          v105 = v102;
          v106 = v103 - 4;
          v107 = f64;
          v108 = (float64x2_t)veorq_s8(a8, a8);
          v109 = v108;
          if ((((_BYTE)v103 - 4) & 1) != 0)
          {
            v107 = &f64[(unint64_t)v37 / 8];
            v105 = (float64x2_t *)((char *)v102 + v38);
            v108 = vmlaq_n_f64(v108, *v102, *f64);
            v109 = vmlaq_n_f64(v109, v102[1], *f64);
            v106 = v103 - 5;
          }
          for (; v106; v106 -= 2)
          {
            v111.f64[0] = *v107;
            v110 = &v107[(unint64_t)v37 / 8];
            v112 = *v110;
            v107 = &v110[(unint64_t)v37 / 8];
            v114 = *v105;
            v115 = v105[1];
            v113 = (float64x2_t *)((char *)v105 + v38);
            v111.f64[1] = v112;
            v116 = *v113;
            a14 = v113[1];
            v105 = (float64x2_t *)((char *)v113 + v38);
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(v108, v114, v111.f64[0]), v116, v111, 1);
            v109 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v115, v111.f64[0]), a14, v111, 1);
          }
          v117 = (float64x2_t *)((char *)v105 - v38 * (v103 - 3));
          v118 = (float64_t *)((char *)v107 - v37 * v103);
          v120.f64[0] = *v118;
          v119 = &v118[(unint64_t)v37 / 8];
          v122 = *v119;
          v121 = &v119[(unint64_t)v37 / 8];
          v124.f64[0] = *v121;
          v123 = &v121[(unint64_t)v37 / 8];
          v125 = *v123;
          v126 = &v123[a6 + -4 * a6];
          v120.f64[1] = v122;
          v124.f64[1] = v125;
          v127 = vsubq_f64(vmulq_n_f64(v124, a7), v109);
          v128 = *v117;
          v129 = v117[1];
          v130 = (float64x2_t *)((char *)v117 - v38);
          v131 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v120, a7), v108), v128, v127.f64[1], 0);
          *(_QWORD *)&v127.f64[0] = *(_OWORD *)&vmlsq_lane_f64(v127, v129, v127.f64[1], 0);
          v14 = *(int8x16_t *)v130;
          v132 = vmlsq_lane_f64(v131, *v130, v127.f64[0], 0);
          v124.f64[0] = v132.f64[1];
          a14.f64[0] = v130->f64[-a4];
          a8 = (int8x16_t)vmlsq_lane_f64(v132, a14, v132.f64[1], 0);
          *v126 = *(double *)a8.i64;
          v133 = &v126[(unint64_t)v37 / 8];
          *v133 = v124.f64[0];
          v134 = &v133[(unint64_t)v37 / 8];
          *v134 = v127.f64[0];
          v134[a6] = v127.f64[1];
          ++f64;
          --v101;
        }
        while (v101);
      }
      v39 -= 2 * a6;
      v135 = v36 < 5;
      v36 -= 4;
    }
    while (!v135);
  }
}

void sub_239A32DB8(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  int8x16_t v14;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  uint64_t v50;
  const double *v51;
  const double *v52;
  const double *v53;
  const double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t *v92;
  float64x2_t *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int8x16_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t *v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  uint64_t v126;
  double *f64;
  float64x2_t *v128;
  uint64_t v129;
  float64_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t *v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t *v140;
  float64_t *v141;
  double *v142;
  float64x2_t v143;
  float64_t *v144;
  float64_t v145;
  double *v146;
  float64x2_t v147;
  float64_t v148;
  double *v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t *v153;
  float64x2_t v154;
  float64x2_t v155;
  float64_t *v156;
  float64_t *v157;
  BOOL v158;

  v21 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v37 = (double *)(a3 + 8 * (a4 + 1) * v21);
        v38 = *(v37 - 1);
        v39 = a7 / *v37;
        v40 = (double *)(a5 + 8 * v21 * a6);
        v41 = (double *)(a5 + a6 * (8 * a2 - 16));
        v42 = __N;
        v43 = 1.0 / *(double *)(a3 + 8 * (a4 + 1) * (a2 - 2));
        do
        {
          v44 = v39 * *v40;
          *v40++ = v44;
          *v41 = v43 * (*v41 * a7 - v44 * v38);
          ++v41;
          --v42;
        }
        while (v42);
      }
      v21 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v21 + v21 * a4)), (double *)(a5 + 8 * v21 * a6), 1);
      v21 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v22 = (double *)(a3 + 8 * (a4 + 1) * v21);
      v24 = *(v22 - 2);
      v23 = *(v22 - 1);
      v25 = (a2 - 2) * a4;
      v26 = *(double *)(a3 + 8 * (a2 - 3 + v25));
      v27 = a7 / *v22;
      v28 = 1.0 / *(double *)(a3 + 8 * (v25 + a2 - 2));
      v29 = (double *)(a5 + 8 * v21 * a6);
      v30 = (double *)(a5 + a6 * (8 * a2 - 16));
      v31 = (uint64_t *)(a5 + a6 * (8 * a2 - 24));
      v32 = __N;
      v33 = 1.0 / *(double *)(a3 + 8 * (a4 + 1) * (a2 - 3));
      do
      {
        v34 = v27 * *v29;
        *v29 = v34;
        v35 = v28 * (*v30 * a7 - v34 * v23);
        *v30++ = v35;
        v14.i64[0] = *v31;
        v36 = *v29++;
        *(double *)v31 = v33 * -(v26 * v35 + v36 * v24 - *(double *)v31 * a7);
        ++v31;
        --v32;
      }
      while (v32);
    }
    v21 = a2 - 4;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    v45 = v21 + 1;
    v46 = a4 + 1;
    v47 = 8 * a6;
    v48 = 8 * a4;
    v49 = (float64x2_t *)(a5 + 8 * a6 * v45);
    do
    {
      v50 = v45 - 4;
      v51 = (const double *)(a3 + 8 * (v45 - 4) * a4 + 8 * (v45 - 4));
      v52 = (const double *)(a3 + 8 * (v45 - 3) * v46);
      v53 = (const double *)(a3 + 8 * (v45 - 2) * v46);
      v54 = (const double *)(a3 + 8 * (v45 - 1) * v46);
      v55 = vld1q_dup_f64(v51);
      v56 = vld1q_dup_f64(v52);
      v57 = vld1q_dup_f64(v53);
      v58 = vld1q_dup_f64(v54);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v60 = vdivq_f64(v59, v55);
      v61 = vdivq_f64(v59, v56);
      v62 = vdivq_f64(v59, v57);
      v63 = vdivq_f64(v59, v58);
      if (__N < 4)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v66 = a2 - v50;
        if (a2 - v50 <= 4)
          v66 = 4;
        v67 = v49;
        do
        {
          v65 = a3 + 8 * v50 + 8 * v45 * a4;
          v68 = (float64x2_t *)v65;
          v69 = v66 - 4;
          v70 = v67;
          v71 = (float64x2_t)veorq_s8(v14, v14);
          v72 = v71;
          v73 = v71;
          v74 = v71;
          v75 = v71;
          v76 = v71;
          v77 = v71;
          v78 = v71;
          if ((((_BYTE)v66 - 4) & 1) != 0)
          {
            v79 = v67[1];
            v70 = (float64x2_t *)((char *)v67 + v47);
            v80 = *(float64x2_t *)(v65 + 16);
            v68 = (float64x2_t *)(v65 + v48);
            v71 = vmlaq_n_f64(v71, *v67, *(double *)v65);
            v73 = vmlaq_laneq_f64(v73, *v67, *(float64x2_t *)v65, 1);
            v75 = vmlaq_n_f64(v75, *v67, v80.f64[0]);
            v77 = vmlaq_laneq_f64(v77, *v67, v80, 1);
            v72 = vmlaq_n_f64(v72, v79, *(double *)v65);
            v74 = vmlaq_laneq_f64(v74, v79, *(float64x2_t *)v65, 1);
            v76 = vmlaq_n_f64(v76, v79, v80.f64[0]);
            v78 = vmlaq_laneq_f64(v78, v79, v80, 1);
            v69 = v66 - 5;
          }
          for (; v69; v69 -= 2)
          {
            v82 = *v70;
            v83 = v70[1];
            v81 = (float64x2_t *)((char *)v70 + v47);
            v84 = *v81;
            v85 = v81[1];
            v70 = (float64x2_t *)((char *)v81 + v47);
            v87 = *v68;
            v88 = v68[1];
            v86 = (float64x2_t *)((char *)v68 + v48);
            v89 = *v86;
            v90 = v86[1];
            v68 = (float64x2_t *)((char *)v86 + v48);
            v71 = vmlaq_n_f64(vmlaq_n_f64(v71, v82, v87.f64[0]), v84, v89.f64[0]);
            v73 = vmlaq_laneq_f64(vmlaq_laneq_f64(v73, v82, v87, 1), v84, v89, 1);
            v75 = vmlaq_n_f64(vmlaq_n_f64(v75, v82, v88.f64[0]), v84, v90.f64[0]);
            v77 = vmlaq_laneq_f64(vmlaq_laneq_f64(v77, v82, v88, 1), v84, v90, 1);
            v72 = vmlaq_n_f64(vmlaq_n_f64(v72, v83, v87.f64[0]), v85, v89.f64[0]);
            v74 = vmlaq_laneq_f64(vmlaq_laneq_f64(v74, v83, v87, 1), v85, v89, 1);
            v76 = vmlaq_n_f64(vmlaq_n_f64(v76, v83, v88.f64[0]), v85, v90.f64[0]);
            v78 = vmlaq_laneq_f64(vmlaq_laneq_f64(v78, v83, v88, 1), v85, v90, 1);
          }
          v91 = (float64x2_t *)((char *)v68 - v48 * (v66 - 3));
          v92 = (float64x2_t *)((char *)v70 - v47 * v66);
          v94 = *v92;
          v95 = v92[1];
          v93 = (float64x2_t *)((char *)v92 + v47);
          v97 = *v93;
          v98 = v93[1];
          v96 = (float64x2_t *)((char *)v93 + v47);
          v100 = *v96;
          v101 = v96[1];
          v99 = (float64x2_t *)((char *)v96 + v47);
          v102 = *v99;
          v103 = v99[1];
          v104 = (int8x16_t *)&v99->f64[a6 + -4 * a6];
          v105 = vsubq_f64(vmulq_n_f64(v94, a7), v71);
          v106 = vsubq_f64(vmulq_n_f64(v95, a7), v72);
          v107 = vmulq_f64(vsubq_f64(vmulq_n_f64(v102, a7), v77), v63);
          v108 = vmulq_f64(vsubq_f64(vmulq_n_f64(v103, a7), v78), v63);
          v109 = *v91;
          v110 = v91[1];
          v111 = (float64x2_t *)((char *)v91 - v48);
          v112 = vmlsq_lane_f64(v105, v107, v109.f64[0], 0);
          v113 = vmlsq_lane_f64(v106, v108, v109.f64[0], 0);
          v114 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v97, a7), v73), v107, v109, 1);
          v115 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v98, a7), v74), v108, v109, 1);
          v116 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v100, a7), v75), v107, v110.f64[0], 0), v62);
          v117 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v101, a7), v76), v108, v110.f64[0], 0), v62);
          v55 = *v111;
          v118 = vmulq_f64(vmlsq_laneq_f64(v114, v116, *v111, 1), v61);
          v119 = vmulq_f64(vmlsq_laneq_f64(v115, v117, *v111, 1), v61);
          v55.f64[0] = v111->f64[-a4];
          v14 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v112, v116, v111->f64[0], 0), v118, v55.f64[0], 0), v60);
          v120 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v113, v117, v111->f64[0], 0), v119, v55.f64[0], 0), v60);
          *v104 = v14;
          v104[1] = (int8x16_t)v120;
          v121 = (float64x2_t *)&v104->i8[v47];
          *v121 = v118;
          v121[1] = v119;
          v122 = (float64x2_t *)((char *)v121 + v47);
          *v122 = v116;
          v122[1] = v117;
          v123 = (float64x2_t *)((char *)v122 + v47);
          *v123 = v107;
          v123[1] = v108;
          v64 += 4;
          v67 += 2;
        }
        while (v64 < __N - 3);
      }
      v124 = __N - v64;
      if (__N > v64)
      {
        v126 = a2 - v50;
        if (a2 - v50 <= 4)
          v126 = 4;
        f64 = v49[(unint64_t)v64 / 2].f64;
        do
        {
          v125 = (float64x2_t *)(a3 + 8 * v50 + 8 * v45 * a4);
          v128 = v125;
          v129 = v126 - 4;
          v130 = f64;
          v131 = (float64x2_t)veorq_s8((int8x16_t)v55, (int8x16_t)v55);
          v132 = v131;
          if ((((_BYTE)v126 - 4) & 1) != 0)
          {
            v130 = &f64[(unint64_t)v47 / 8];
            v128 = (float64x2_t *)((char *)v125 + v48);
            v131 = vmlaq_n_f64(v131, *v125, *f64);
            v132 = vmlaq_n_f64(v132, v125[1], *f64);
            v129 = v126 - 5;
          }
          for (; v129; v129 -= 2)
          {
            v134.f64[0] = *v130;
            v133 = &v130[(unint64_t)v47 / 8];
            v135 = *v133;
            v130 = &v133[(unint64_t)v47 / 8];
            v137 = *v128;
            v138 = v128[1];
            v136 = (float64x2_t *)((char *)v128 + v48);
            v134.f64[1] = v135;
            v139 = *v136;
            a14 = v136[1];
            v128 = (float64x2_t *)((char *)v136 + v48);
            v131 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v137, v134.f64[0]), v139, v134, 1);
            v132 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v138, v134.f64[0]), a14, v134, 1);
          }
          v140 = (float64x2_t *)((char *)v128 - v48 * (v126 - 3));
          v141 = (float64_t *)((char *)v130 - v47 * v126);
          v143.f64[0] = *v141;
          v142 = &v141[(unint64_t)v47 / 8];
          v145 = *v142;
          v144 = &v142[(unint64_t)v47 / 8];
          v147.f64[0] = *v144;
          v146 = &v144[(unint64_t)v47 / 8];
          v148 = *v146;
          v149 = &v146[a6 + -4 * a6];
          v143.f64[1] = v145;
          v147.f64[1] = v148;
          v150 = vsubq_f64(vmulq_n_f64(v147, a7), v132);
          v151 = *v140;
          v152 = v140[1];
          v153 = (float64x2_t *)((char *)v140 - v48);
          v154 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v143, a7), v131), v151, v150.f64[1] * v63.f64[0], 0);
          v150.f64[0] = vmlsq_lane_f64(v150, v152, v150.f64[1] * v63.f64[0], 0).f64[0] * v62.f64[0];
          v14 = *(int8x16_t *)v153;
          v155 = vmlsq_lane_f64(v154, *v153, v150.f64[0], 0);
          v147.f64[0] = v155.f64[1] * v61.f64[0];
          a14.f64[0] = v153->f64[-a4];
          v55 = vmlsq_lane_f64(v155, a14, v155.f64[1] * v61.f64[0], 0);
          v55.f64[0] = v55.f64[0] * v60.f64[0];
          *v149 = v55.f64[0];
          v156 = &v149[(unint64_t)v47 / 8];
          *v156 = v147.f64[0];
          v157 = &v156[(unint64_t)v47 / 8];
          *v157 = v150.f64[0];
          v157[a6] = v150.f64[1] * v63.f64[0];
          ++f64;
          --v124;
        }
        while (v124);
      }
      v49 -= 2 * a6;
      v158 = v45 < 5;
      v45 -= 4;
    }
    while (!v158);
  }
}

void sub_239A332FC(int a1, int a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, float32x4_t a14, double a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  unsigned __int32 v57;
  unsigned __int32 v58;
  BOOL v60;
  _BOOL4 v61;

  if (a3)
  {
    v57 = a10.i32[0];
    v58 = a9.i32[0];
    v60 = a9.f32[0] == 0.0 || a4 == 0;
    v61 = v60;
    if (!v61 || *(float *)a10.i32 != 1.0)
    {
      if (v61)
      {
        sub_239A3C980(a1, a3, a7->f32, a8, *(float *)a10.i32);
      }
      else
      {
        if (*(float *)a10.i32 == 0.0)
          sub_239A3C980(a1, a3, a7->f32, a8, *(float *)a10.i32);
        if (a3 > 85 || a4 >= 86)
        {
          if (a1 == 121)
            sub_239A3BBDC(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              *((uint64_t *)&a37 + 1),
              a38,
              SDWORD2(a38),
              SHIDWORD(a38),
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55,
              a56,
              a57);
          else
            sub_239A42870(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40);
        }
        else
        {
          a9.i32[0] = v58;
          a10.i32[0] = v57;
          if (a1 == 121)
          {
            if (a2 == 111)
              sub_239A26A40(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
            else
              sub_239A3B720(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          }
          else if (a2 == 111)
          {
            sub_239A31B10(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, a15);
          }
          else
          {
            sub_239A33A00(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, *(float32x2_t *)&a15);
          }
        }
      }
    }
  }
}

float *sub_239A334F0(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v9;
  uint64_t v10;
  float *result;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t *v60;
  _OWORD *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;

  v9 = a5 & 7;
  v10 = a5 - v9;
  if (v10)
  {
    v12 = _X2;
    v13 = 4 * a4;
    v15 = *a1;
    v16 = a1[1];
    v14 = a1 + 2;
    v17 = *v14;
    v18 = v14[1];
    result = v14[2].f32;
    do
    {
      v19 = a6;
      v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
      __asm { PRFM            #1, [X2,#0x40] }
      v26 = *_X2;
      v27 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v34 = *_X2;
      v35 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      _X2 = v12 + 2;
      v39 = v7;
      v40 = v7;
      v41 = v7;
      v42 = v7;
      v43 = v7;
      v44 = v7;
      v45 = v7;
      v47 = *(float32x4_t *)a2;
      v48 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v52 = vmulq_n_f32(v26, a7);
      v53 = vmulq_n_f32(v27, a7);
      v54 = vmulq_n_f32(v30, a7);
      v55 = vmulq_n_f32(v31, a7);
      v56 = vmulq_n_f32(v34, a7);
      v57 = vmulq_n_f32(v35, a7);
      v58 = vmulq_n_f32(v37, a7);
      v59 = vmulq_n_f32(v38, a7);
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
      v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
      v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
      v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
      v15 = v17;
      v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
      v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
      v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
      v16 = v18;
      v17 = *(float32x4_t *)result;
      v18 = *(float32x4_t *)(result + 4);
      result += 8;
      v47 = *(float32x4_t *)(a2 + 16);
      v48 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v19 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
          v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
          v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
          v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
          v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
          v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
          v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
          v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
          v15 = *(float32x4_t *)result;
          v16 = *(float32x4_t *)(result + 4);
          v60 = (float32x4_t *)(result + 8);
          v47 = *(float32x4_t *)_X6;
          v61 = _X6 + 1;
          v7 = vmlaq_n_f32(v7, v17, v48.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v48.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v48, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v48, 3);
          v39 = vmlaq_n_f32(v39, v18, v48.f32[0]);
          v41 = vmlaq_lane_f32(v41, v18, *(float32x2_t *)v48.f32, 1);
          v43 = vmlaq_laneq_f32(v43, v18, v48, 2);
          v45 = vmlaq_laneq_f32(v45, v18, v48, 3);
          v17 = *v60;
          v18 = v60[1];
          result = v60[2].f32;
          v48 = *(float32x4_t *)v61;
          _X6 = v61 + 1;
          v19 -= 2;
        }
        while (v19);
        v52 = vaddq_f32(v52, v7);
        v53 = vaddq_f32(v53, v39);
        v54 = vaddq_f32(v54, v40);
        v55 = vaddq_f32(v55, v41);
        v56 = vaddq_f32(v56, v42);
        v57 = vaddq_f32(v57, v43);
        v58 = vaddq_f32(v58, v44);
        v59 = vaddq_f32(v59, v45);
      }
      *v12 = v52;
      v12[1] = v53;
      v62 = (float32x4_t *)((char *)v12 + v13);
      *v62 = v54;
      v62[1] = v55;
      v63 = (float32x4_t *)((char *)v62 + v13);
      *v63 = v56;
      v63[1] = v57;
      v64 = (float32x4_t *)((char *)v63 + v13);
      *v64 = v58;
      v64[1] = v59;
      v12 = _X2;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v9)
    return sub_239A2A2FC(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v9, a6, a7);
  return result;
}

uint64_t sub_239A336B0(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t j;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int32 *v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t k;
  float32x4_t *v55;
  float *v56;
  float32x4_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t m;
  float v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  __int32 *v74;
  float32x2_t v75;
  __int32 *v76;
  float32x2_t v77;

  v12 = 4 * a5;
  v13 = 4 * a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = a6;
    v19 = &a8[a12];
    v20 = __OFSUB__(result, 3);
    v21 = result - 3;
    if (result > 3)
    {
      do
      {
        v22 = a3;
        v23 = (float32x4_t)veorq_s8(a11, a11);
        v24 = v23;
        v25 = v23;
        v26 = v23;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v27 = *v17;
        v17 = (float32x4_t *)((char *)v17 + v12);
        v28 = *v18;
        v18 = (float32x4_t *)((char *)v18 + v14);
        v23 = vmlaq_n_f32(v23, v27, v28.f32[0]);
        v24 = vmlaq_lane_f32(v24, v27, *(float32x2_t *)v28.f32, 1);
        v25 = vmlaq_laneq_f32(v25, v27, v28, 2);
        v26 = vmlaq_laneq_f32(v26, v27, v28, 3);
        v22 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v29 = *v17;
          v30 = *(float32x4_t *)((char *)v17 + v12);
          v31 = *v18;
          v32 = *(float32x4_t *)((char *)v18 + v14);
          v15 = v22 <= 2;
          for (j = v22 - 2; !v15; j -= 2)
          {
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v34 = vmlaq_n_f32(v23, v29, v31.f32[0]);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v35 = vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1);
            v36 = vmlaq_laneq_f32(v25, v29, v31, 2);
            v37 = vmlaq_laneq_f32(v26, v29, v31, 3);
            v29 = *v17;
            v23 = vmlaq_n_f32(v34, v30, v32.f32[0]);
            v31 = *v18;
            v24 = vmlaq_lane_f32(v35, v30, *(float32x2_t *)v32.f32, 1);
            v25 = vmlaq_laneq_f32(v36, v30, v32, 2);
            v26 = vmlaq_laneq_f32(v37, v30, v32, 3);
            v30 = *(float32x4_t *)((char *)v17 + v12);
            v32 = *(float32x4_t *)((char *)v18 + v14);
            v15 = j <= 2;
          }
          v17 = (float32x4_t *)((char *)v17 + 2 * v12);
          v23 = vmlaq_n_f32(vmlaq_n_f32(v23, v29, v31.f32[0]), v30, v32.f32[0]);
          v24 = vmlaq_lane_f32(vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1), v30, *(float32x2_t *)v32.f32, 1);
          v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(v25, v29, v31, 2), v30, v32, 2);
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(v26, v29, v31, 3), v30, v32, 3);
        }
        v38 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v23, a9), *a8, a10);
        v39 = vmlaq_n_f32(vmulq_n_f32(v25, a9), *v38, a10);
        v40 = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)v38 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v24, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v38 = v39;
        *(float32x4_t *)((char *)v38 + 4 * a12) = v40;
        v18 = a6;
        v17 = (float32x4_t *)((char *)v17 - v12 * a3 + 16);
        v20 = __OFSUB__(v21, 4);
        v15 = v21 <= 4;
        v21 -= 4;
      }
      while (!v15);
    }
    v41 = result & 3;
    if (!v20 && v41 != 0)
    {
      do
      {
        v42 = a3;
        v43 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v44 = v17->f32[0],
              v17 = (float32x4_t *)((char *)v17 + v12),
              v45 = *v18,
              v18 = (float32x4_t *)((char *)v18 + v14),
              v43 = vmlaq_n_f32(v43, v45, v44),
              v42 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v46 = v17->f32[0];
            v47 = v17->f32[(unint64_t)v12 / 4];
            v48 = *(float32x4_t *)((char *)v18 + v14);
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v49 = vmlaq_n_f32(v43, *v18, v46);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v43 = vmlaq_n_f32(v49, v48, v47);
            v15 = v42 <= 2;
            v42 -= 2;
          }
          while (!v15);
        }
        v50.i32[0] = a8->i32[0];
        v50.i32[1] = a8->i32[a12];
        v51 = (__int32 *)((char *)a8 + v13 + v13);
        v50.i32[2] = *v51;
        v50.i32[3] = v51[a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v43, a9), v50, a10);
        v52 = (__int32 *)((char *)a8 + v13);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v52 = a11.i32[1];
        v53 = &v52[(unint64_t)v13 / 4];
        *v53 = a11.i32[2];
        v53[a12] = a11.i32[3];
        v18 = a6;
        v17 = (float32x4_t *)((char *)&v17->i32[1] - v12 * a3);
        v15 = v41-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v19;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v55 = a4;
    v56 = (float *)a6;
    v57 = (float32x4_t *)((char *)a8 + v13);
    v58 = __OFSUB__(result, 3);
    v59 = result - 3;
    if (result > 3)
    {
      do
      {
        v60 = a3;
        v61 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v62 = *v55,
              v55 = (float32x4_t *)((char *)v55 + v12),
              v63 = *v56,
              v56 = (float *)((char *)v56 + v14),
              v61 = vmlaq_n_f32(v61, v62, v63),
              v60 = a3 - 1,
              a3 > 1))
        {
          v64 = *v55;
          v65 = *(float32x4_t *)((char *)v55 + v12);
          v15 = v60 <= 2;
          for (m = v60 - 2; !v15; m -= 2)
          {
            v55 = (float32x4_t *)((char *)v55 + 2 * v12);
            v67 = *v56;
            v68 = v56[(unint64_t)v14 / 4];
            v56 = (float *)((char *)v56 + 2 * v14);
            v69 = vmlaq_n_f32(v61, v64, v67);
            v64 = *v55;
            v61 = vmlaq_n_f32(v69, v65, v68);
            v65 = *(float32x4_t *)((char *)v55 + v12);
            v15 = m <= 2;
          }
          v55 = (float32x4_t *)((char *)v55 + 2 * v12);
          v61 = vmlaq_n_f32(vmlaq_n_f32(v61, v64, *v56), v65, v56[(unint64_t)v14 / 4]);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v61, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)v55 - v12 * a3 + 16);
        v58 = __OFSUB__(v59, 4);
        v15 = v59 <= 4;
        v59 -= 4;
      }
      while (!v15);
    }
    v70 = result & 3;
    if (!v58 && v70 != 0)
    {
      do
      {
        v71 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v72 = v55->f32[0],
              v55 = (float32x4_t *)((char *)v55 + v12),
              v73 = *v56,
              v56 = (float *)((char *)v56 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v73, v72),
              v71 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v75.i32[0] = v55->i32[0];
            v74 = (__int32 *)((char *)v55 + v12);
            v75.i32[1] = *v74;
            v55 = (float32x4_t *)&v74[(unint64_t)v12 / 4];
            v77.f32[0] = *v56;
            v76 = (__int32 *)&v56[(unint64_t)v14 / 4];
            v77.i32[1] = *v76;
            v56 = (float *)&v76[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v77, v75);
            v15 = v71 <= 2;
            v71 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)&v55->i32[1] - v12 * a3);
        v15 = v70-- <= 1;
      }
      while (!v15);
    }
    a6 = (float32x4_t *)((char *)a6 + 4);
    a8 = v57;
    v15 = k <= 1;
  }
  return result;
}

uint64_t sub_239A33A00(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, float32x2_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double *v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  char *v43;
  float32x2_t v44;
  char *v45;
  char *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  float *v52;
  __int32 *v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  __int32 *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  __n128 *v83;
  float32x4_t v84;
  __n128 *v85;
  __n128 *v86;
  float32x2_t *v87;
  uint64_t i;
  uint64_t v89;
  float32x2_t *v90;
  __int32 *v91;
  float32x2_t *v92;
  __int32 *v93;
  float32x2_t *v94;
  int32x2_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t *v114;
  __n128 *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;

  a7.i64[1] = a8.i64[0];
  v21 = 0;
  v22 = 4 * a4;
  v23 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_14:
    if ((result & 2) != 0)
    {
      v36 = (float32x2_t *)&a5[v21];
      a5 = (_DWORD *)((char *)a5 + 2 * v23);
      v37 = a2;
      v38 = (__int32 *)((char *)a3 + v21 * v22);
      v39 = &v38[(unint64_t)v22 / 4];
      v40 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v41 = v40;
      if ((a2 & 1) == 0)
        goto LABEL_18;
      v13.i32[0] = *v38++;
      v14.i32[0] = *v39++;
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v40 = vmla_n_f32(v40, *(float32x2_t *)v17.f32, v13.f32[0]);
      v41 = vmla_n_f32(v41, *(float32x2_t *)v17.f32, v14.f32[0]);
      v37 = a2 - 1;
      if (a2 > 1)
      {
LABEL_18:
        do
        {
          v13.i64[0] = *(_QWORD *)v38;
          v38 += 2;
          v14.i64[0] = *(_QWORD *)v39;
          v39 += 2;
          v42 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          v40 = vmla_lane_f32(vmla_n_f32(v40, v42, v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v41 = vmla_lane_f32(vmla_n_f32(v41, v42, v14.f32[0]), a13, *(float32x2_t *)v14.f32, 1);
          v28 = v37 <= 2;
          v37 -= 2;
        }
        while (!v28);
      }
      v44 = *v36;
      v43 = (char *)v36 + v23;
      a13.i32[1] = *((_DWORD *)v43 + 1);
      v45 = &v43[-v23];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v40, a7.f32[0]), v44, a7, 2);
      *(_QWORD *)v45 = a8.i64[0];
      v46 = &v45[v23];
      *((_DWORD *)v46 + 1) = vmla_laneq_f32(vmul_n_f32(v41, *(float *)&a7), a13, a7, 2).i32[1];
      v47 = (float32x2_t *)&v46[-v23 + 8];
      v48 = v21 + 2;
      if (result > v21 + 2)
      {
        do
        {
          v49 = a2;
          v50 = (float *)((char *)a3 + v21 * v22);
          v51 = (__int32 *)((char *)a3 + v48 * v22);
          v52 = &v50[(unint64_t)v22 / 4];
          v53 = &v51[(unint64_t)v22 / 4];
          v54 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v55 = v54;
          if ((a2 & 1) == 0)
            goto LABEL_24;
          v17.i32[0] = *v51++;
          v18.i32[0] = *v53++;
          v56 = *v50++;
          v57 = *v52++;
          *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v54 = vmla_n_f32(v54, *(float32x2_t *)v17.f32, v56);
          v55 = vmla_n_f32(v55, *(float32x2_t *)v17.f32, v57);
          v49 = a2 - 1;
          if (a2 > 1)
          {
LABEL_24:
            do
            {
              v17.i64[0] = *(_QWORD *)v51;
              v51 += 2;
              v18.i64[0] = *(_QWORD *)v53;
              v53 += 2;
              v13.i64[0] = *(_QWORD *)v50;
              v50 += 2;
              v14.i64[0] = *(_QWORD *)v52;
              v52 += 2;
              v58 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v59 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v54 = vmla_lane_f32(vmla_n_f32(v54, v58, v13.f32[0]), v59, *(float32x2_t *)v13.f32, 1);
              v55 = vmla_lane_f32(vmla_n_f32(v55, v58, v14.f32[0]), v59, *(float32x2_t *)v14.f32, 1);
              v28 = v49 <= 2;
              v49 -= 2;
            }
            while (!v28);
          }
          v61 = *v47;
          v60 = (float32x2_t *)((char *)v47 + v23);
          v62 = *v60;
          v63 = (float32x2_t *)((char *)v60 + v23 + -2 * v23);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v54, a7.f32[0]), v61, a7, 2);
          *v63 = *(float32x2_t *)a8.i8;
          v64 = (float32x2_t *)((char *)v63 + v23);
          *v64 = vmla_laneq_f32(vmul_n_f32(v55, a7.f32[0]), v62, a7, 2);
          v47 = (float32x2_t *)((char *)v64 + v23 + -2 * v23 + 8);
          v48 += 2;
        }
        while (v48 < result);
        v21 += 2;
      }
      else
      {
        v21 += 2;
      }
    }
    for (; result > v21; v21 += 4)
    {
      v65 = (float32x4_t *)&a5[v21];
      a5 += v23;
      v66 = a2;
      v67 = (__int32 *)((char *)a3 + v21 * v22);
      v68 = &v67[(unint64_t)v22 / 4];
      v69 = (float32x2_t *)&v67[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
      v70 = (float32x2_t *)((char *)v69 + v22);
      v71 = (float32x4_t)veorq_s8(a8, a8);
      v72 = v71;
      v73 = *(float32x2_t *)v71.f32;
      v74 = *(float32x2_t *)v71.f32;
      if ((a2 & 1) == 0)
        goto LABEL_31;
      v13.i32[0] = *v67++;
      v14.i32[0] = *v68++;
      v15.i32[0] = v69->i32[0];
      v69 = (float32x2_t *)((char *)v69 + 4);
      v16.i32[0] = v70->i32[0];
      v70 = (float32x2_t *)((char *)v70 + 4);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v20 = (float32x2_t)vtrn1_s32((int32x2_t)v15, (int32x2_t)v16);
      *(float32x2_t *)&v17.u32[2] = v20;
      v71 = vmlaq_n_f32(v71, v17, v13.f32[0]);
      v72 = vmlaq_n_f32(v72, v17, v14.f32[0]);
      v73 = vmla_n_f32(v73, v20, v15.f32[0]);
      v74 = vmla_n_f32(v74, v20, v16.f32[0]);
      v66 = a2 - 1;
      if (a2 > 1)
      {
LABEL_31:
        do
        {
          v75.i64[0] = *(_QWORD *)v67;
          v67 += 2;
          v76.i64[0] = *(_QWORD *)v68;
          v68 += 2;
          v15 = *v69++;
          v16 = *v70++;
          v75.u64[1] = (unint64_t)v15;
          v76.u64[1] = (unint64_t)v16;
          v77 = (float32x4_t)vtrn1q_s32(v75, v76);
          v78 = (float32x4_t)vtrn2q_s32(v75, v76);
          v71 = vmlaq_lane_f32(vmlaq_n_f32(v71, v77, *(float *)v75.i32), v78, *(float32x2_t *)v75.i8, 1);
          v72 = vmlaq_lane_f32(vmlaq_n_f32(v72, v77, *(float *)v76.i32), v78, *(float32x2_t *)v76.i8, 1);
          v73 = vmla_lane_f32(vmla_n_f32(v73, *(float32x2_t *)&v77.u32[2], v15.f32[0]), *(float32x2_t *)&v78.u32[2], v15, 1);
          v74 = vmla_lane_f32(vmla_n_f32(v74, *(float32x2_t *)&v77.u32[2], v16.f32[0]), *(float32x2_t *)&v78.u32[2], v16, 1);
          v28 = v66 <= 2;
          v66 -= 2;
        }
        while (!v28);
      }
      v80 = *v65;
      v79 = (float32x4_t *)((char *)v65 + v23);
      v82 = *v79;
      v81 = (char *)v79 + v23;
      v13.i64[0] = *((_QWORD *)v81 + 1);
      v14.i64[0] = *(_QWORD *)&v81[v23 + 8];
      v83 = (__n128 *)&v81[-2 * v23];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v71, a7.f32[0]), v80, a7, 2);
      v84 = vmlaq_laneq_f32(vmulq_n_f32(v72, a7.f32[0]), v82, a7, 2);
      v85 = (__n128 *)((char *)v83 + v23);
      *v83 = (__n128)a8;
      v86 = v83 + 1;
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u32[0] = v84.u32[1];
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u64[0] = v84.u64[1];
      v87 = (float32x2_t *)((char *)v85 + v23);
      *v87 = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), *(float32x2_t *)v13.f32, a7, 2);
      v87->i32[(unint64_t)v23 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v74, *(float *)&a7), *(float32x2_t *)&v14, a7, 2).i32[1];
      for (i = v21 + 4; i < result; i += 4)
      {
        v89 = a2;
        v90 = (float32x2_t *)((char *)a3 + v21 * v22);
        v91 = (__int32 *)((char *)a3 + i * v22);
        v92 = (float32x2_t *)((char *)v90 + v22);
        v93 = &v91[(unint64_t)v22 / 4];
        v94 = (float32x2_t *)((char *)v90 + v22 + v22);
        v95 = (int32x2_t *)&v91[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
        v96 = (float32x2_t *)((char *)v94 + v22);
        v97 = (float32x2_t *)((char *)v95 + v22);
        v98 = (float32x4_t)veorq_s8(a8, a8);
        v99 = v98;
        v100 = v98;
        v101 = v98;
        if ((a2 & 1) == 0)
          goto LABEL_36;
        v17.i32[0] = *v91++;
        v18.i32[0] = *v93++;
        v19.i32[0] = v95->i32[0];
        v95 = (int32x2_t *)((char *)v95 + 4);
        v20.i32[0] = v97->i32[0];
        v97 = (float32x2_t *)((char *)v97 + 4);
        v102 = v90->f32[0];
        v90 = (float32x2_t *)((char *)v90 + 4);
        v103 = v92->f32[0];
        v92 = (float32x2_t *)((char *)v92 + 4);
        v104 = v94->f32[0];
        v94 = (float32x2_t *)((char *)v94 + 4);
        v105 = v96->f32[0];
        v96 = (float32x2_t *)((char *)v96 + 4);
        *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
        v20 = (float32x2_t)vtrn1_s32(v19, (int32x2_t)v20);
        *(float32x2_t *)&v17.u32[2] = v20;
        v98 = vmlaq_n_f32(v98, v17, v102);
        v99 = vmlaq_n_f32(v99, v17, v103);
        v100 = vmlaq_n_f32(v100, v17, v104);
        v101 = vmlaq_n_f32(v101, v17, v105);
        v89 = a2 - 1;
        if (a2 > 1)
        {
LABEL_36:
          do
          {
            v17.i64[0] = *(_QWORD *)v91;
            v91 += 2;
            v18.i64[0] = *(_QWORD *)v93;
            v93 += 2;
            v19 = *v95++;
            v20 = *v97++;
            v106 = *v90++;
            v107 = *v92++;
            v15 = *v94++;
            v16 = *v96++;
            *(int32x2_t *)&v17.u32[2] = v19;
            v18.u64[1] = (unint64_t)v20;
            v108 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, v18);
            v109 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
            v98 = vmlaq_lane_f32(vmlaq_n_f32(v98, v108, v106.f32[0]), v109, v106, 1);
            v99 = vmlaq_lane_f32(vmlaq_n_f32(v99, v108, v107.f32[0]), v109, v107, 1);
            v100 = vmlaq_lane_f32(vmlaq_n_f32(v100, v108, v15.f32[0]), v109, v15, 1);
            v101 = vmlaq_lane_f32(vmlaq_n_f32(v101, v108, v16.f32[0]), v109, v16, 1);
            v28 = v89 <= 2;
            v89 -= 2;
          }
          while (!v28);
        }
        v111 = *(float32x4_t *)v86;
        v110 = (float32x4_t *)((char *)v86 + v23);
        v113 = *v110;
        v112 = (float32x4_t *)((char *)v110 + v23);
        v13 = *v112;
        v114 = (float32x4_t *)((char *)v112 + v23);
        v14 = *v114;
        v115 = (__n128 *)((char *)v114 + v23 + -4 * v23);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v98, a7.f32[0]), v111, a7, 2);
        *v115 = (__n128)a8;
        v116 = (float32x4_t *)((char *)v115 + v23);
        *v116 = vmlaq_laneq_f32(vmulq_n_f32(v99, a7.f32[0]), v113, a7, 2);
        v117 = (float32x4_t *)((char *)v116 + v23);
        *v117 = vmlaq_laneq_f32(vmulq_n_f32(v100, a7.f32[0]), v13, a7, 2);
        v118 = (float32x4_t *)((char *)v117 + v23);
        *v118 = vmlaq_laneq_f32(vmulq_n_f32(v101, a7.f32[0]), v14, a7, 2);
        v86 = (__n128 *)((char *)&v118[1] + v23 + -4 * v23);
      }
    }
    return result;
  }
  v24 = a5;
  a5 = (_DWORD *)((char *)a5 + v23);
  v25 = a2;
  v26 = (double *)a3;
  v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v26 = (double *)(a3 + 1), v27.f32[0] = *a3 * *a3, v25 = a2 - 1, a2 > 1))
  {
    do
    {
      a12 = *(float32x2_t *)v26++;
      v27 = vmla_f32(v27, a12, a12);
      v28 = v25 <= 2;
      v25 -= 2;
    }
    while (!v28);
    v27.f32[0] = vaddv_f32(v27);
  }
  a12.i32[0] = *v24;
  v27.f32[0] = v27.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v27, a12, a7, 2);
  *v24 = a8.i32[0];
  v29 = (float32x2_t *)(v24 + 1);
  v30 = 1;
  if (result > 1)
  {
    do
    {
      v31 = a2;
      v32 = (uint64_t *)a3;
      v33 = (__int32 *)((char *)a3 + v30 * v22);
      v34 = &v33[(unint64_t)v22 / 4];
      v35 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0)
        goto LABEL_11;
      v17.i32[0] = *v33++;
      v18.i32[0] = *v34++;
      v32 = (uint64_t *)(a3 + 1);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
      v35 = vmla_n_f32(v35, *(float32x2_t *)v17.f32, *a3);
      v31 = a2 - 1;
      if (a2 > 1)
      {
LABEL_11:
        do
        {
          v17.i64[0] = *(_QWORD *)v33;
          v33 += 2;
          v18.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v13.i64[0] = *v32++;
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v35 = vmla_lane_f32(vmla_n_f32(v35, (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8), v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v28 = v31 <= 2;
          v31 -= 2;
        }
        while (!v28);
      }
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v35, a7.f32[0]), *v29, a7, 2);
      *v29++ = *(float32x2_t *)a8.i8;
      v30 += 2;
    }
    while (v30 < result);
    v21 = 1;
    goto LABEL_14;
  }
  return result;
}

void sub_239A33EDC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, double *a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  if ((a1 & 1) != 0)
    sub_239A33F28(a2, a3, a4, a5, a6, a7, a8, a17, a9.f64[0], a10.f64[0]);
  else
    sub_239A3412C(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34);
}

void sub_239A33F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10)
{
  double v10;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *f64;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;

  v32 = a2;
  v33 = a7;
  v10 = a10;
  v30 = a3;
  v31 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v28) = a8;
      else
        v28 = -a8;
      cblas_dscal(v32, a10, &v33[((v32 - 1) * a8) & (a8 >> 63)], v28);
    }
  }
  else
  {
    sub_239A31F2C();
    v29[3] = v29;
    MEMORY[0x24BDAC7A8]();
    v17 = (char *)(((unint64_t)v29 - v16) & 0xFFFFFFFFFFFFFFC0);
    v19 = (float64x2_t *)&v17[8 * v18];
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    bzero(v17, v20 & 0xFFFFFFFFFFFFFFF8);
    bzero(&v19[128], v21);
    if (a1 >= 1)
    {
      v22 = 0;
      v23 = a1;
      do
      {
        v24 = v23 - 256;
        if (v23 >= 256)
          v23 = 256;
        if (a1 - v22 >= 256)
          v25 = 256;
        else
          v25 = a1 - v22;
        if (a1 - v22 >= 1)
        {
          v26 = a5;
          f64 = (_QWORD *)v19->f64;
          do
          {
            *f64++ = *v26;
            v26 += a6;
            --v23;
          }
          while (v23);
        }
        sub_239A392B0(v25, v32, (float64x2_t *)(v30 + 8 * v22), v31, v19, v33, a8, a9, v10);
        v22 += 256;
        a5 += 256 * a6;
        v10 = 1.0;
        v23 = v24;
      }
      while (v22 < a1);
    }
  }
}

void sub_239A3412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  uint64_t v34;

  if (a9.f64[0] == 0.0)
  {
    if (a10.f64[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v34) = a8;
      else
        v34 = -a8;
      cblas_dscal(a1, a10.f64[0], (double *)(a7 + 8 * (((a1 - 1) * a8) & (a8 >> 63))), v34);
    }
  }
  else
  {
    sub_239A37D1C(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27,
      a28,
      a29,
      a30,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a31,
      a32,
      a33,
      a34);
  }
}

float *sub_239A34170(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  uint64_t v8;
  uint64_t v9;
  float *result;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v51;
  _OWORD *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 4 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f32;
    do
    {
      v18 = a6;
      v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v29 = *_X2;
      v30 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v33 = *_X2;
      v34 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      _X2 = v11 + 2;
      v38 = v6;
      v39 = v6;
      v40 = v6;
      v41 = v6;
      v42 = v6;
      v43 = v6;
      v44 = v6;
      v46 = *(float32x4_t *)a2;
      v47 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
      v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
      v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
      v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
      v14 = v16;
      v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
      v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
      v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
      v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
      v15 = v17;
      v16 = *(float32x4_t *)result;
      v17 = *(float32x4_t *)(result + 4);
      result += 8;
      v46 = *(float32x4_t *)(a2 + 16);
      v47 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v18 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
          v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
          v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
          v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
          v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
          v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
          v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
          v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
          v14 = *(float32x4_t *)result;
          v15 = *(float32x4_t *)(result + 4);
          v51 = (float32x4_t *)(result + 8);
          v46 = *(float32x4_t *)_X6;
          v52 = _X6 + 1;
          v6 = vmlaq_n_f32(v6, v16, v47.f32[0]);
          v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v47.f32, 1);
          v41 = vmlaq_laneq_f32(v41, v16, v47, 2);
          v43 = vmlaq_laneq_f32(v43, v16, v47, 3);
          v38 = vmlaq_n_f32(v38, v17, v47.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v47.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v47, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v47, 3);
          v16 = *v51;
          v17 = v51[1];
          result = v51[2].f32;
          v47 = *(float32x4_t *)v52;
          _X6 = v52 + 1;
          v18 -= 2;
        }
        while (v18);
        v25 = vaddq_f32(v25, v6);
        v26 = vaddq_f32(v26, v38);
        v29 = vaddq_f32(v29, v39);
        v30 = vaddq_f32(v30, v40);
        v33 = vaddq_f32(v33, v41);
        v34 = vaddq_f32(v34, v42);
        v36 = vaddq_f32(v36, v43);
        v37 = vaddq_f32(v37, v44);
      }
      *v11 = v25;
      v11[1] = v26;
      v53 = (float32x4_t *)((char *)v11 + v12);
      *v53 = v29;
      v53[1] = v30;
      v54 = (float32x4_t *)((char *)v53 + v12);
      *v54 = v33;
      v54[1] = v34;
      v55 = (float32x4_t *)((char *)v54 + v12);
      *v55 = v36;
      v55[1] = v37;
      v11 = _X2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v8)
    return sub_239A2A390(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v8, a6);
  return result;
}

void sub_239A34300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float32x4_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23,float32x4_t a24,float32x4_t a25,float32x4_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  float32x2_t *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float v46;
  int32x2_t v47;
  float32x2_t *v48;
  __int128 v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int64_t v96;
  float v97;
  float v98;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  float *v122;
  int64_t v123;
  float v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t *v156;
  _DWORD *v157;
  uint64_t v158;
  const float *v159;
  float32x4_t v160;
  uint64_t v161;
  float v162;
  float32x4_t *v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t v166;
  float *v167;
  uint64_t m;
  int64_t v169;
  float v170;
  float v171;
  int64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  int64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int64_t v186;
  float32x2_t v187;
  float32x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  _DWORD *v198;
  uint64_t v199;
  const float *v200;
  float32x4_t v201;
  uint64_t v202;
  float v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t i;
  int64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint64_t v213;
  float32x4_t *v214;
  float *v215;
  float32x4_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x2_t *v220;
  _DWORD *v221;
  const float *v222;
  float32x2_t v223;
  uint64_t v224;
  float v225;
  float32x2_t *v226;
  float32x2_t v227;
  float32x2_t v228;
  float v229;
  uint64_t v230;
  float *v231;
  float *v232;
  int64_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int64_t v238;
  float32x2_t v239;
  float32x2_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t *v249;
  _DWORD *v250;
  uint64_t v251;
  const float *v252;
  float32x4_t v253;
  uint64_t v254;
  float v255;
  float32x4_t *v256;
  float32x4_t v257;
  float32x4_t v258;
  uint64_t v259;
  float *v260;
  uint64_t j;
  int64_t v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t v265;
  float32x4_t *v266;
  float *v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  float32x2_t *v271;
  float *v272;
  float32x2_t v273;
  __int32 *v274;
  uint64_t v275;
  uint64_t v276;
  float32x2_t *v277;
  _DWORD *v278;
  const float *v279;
  float32x2_t v280;
  uint64_t v281;
  float v282;
  int64_t v283;
  float32x2_t v284;
  float32x2_t v285;
  uint64_t v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t *v295;
  _DWORD *v296;
  uint64_t v297;
  const float *v298;
  float32x4_t v299;
  uint64_t v300;
  float v301;
  float32x4_t *v302;
  float32x4_t v303;
  float32x4_t v304;
  uint64_t v305;
  float *v306;
  uint64_t k;
  int64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  uint64_t v311;
  float *v312;
  float *v313;
  int64_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float *v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  float *v325;
  float *v326;
  int64_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  uint64_t v332;
  float32x2_t *v333;
  float *v334;
  uint64_t v335;
  float32x2_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t *v339;
  _DWORD *v340;
  const float *v341;
  float32x2_t v342;
  uint64_t v343;
  float v344;
  float32x2_t v345;
  uint64_t v346;
  float32x2_t *v347;
  float *v348;
  uint64_t v349;
  float32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x2_t *v353;
  _DWORD *v354;
  const float *v355;
  float32x2_t v356;
  uint64_t v357;
  float v358;
  float32x2_t v359;
  uint64_t v360;
  float32x4_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  float v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t *v368;
  float32x4_t *v369;
  uint64_t v370;
  uint64_t v371;
  __int128 vars0;
  float *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float32x2_t *v390;
  float32x2_t *v391;
  float32x2_t *v392;
  float32x2_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;

  v38 = MEMORY[0x24BDAC7A8]();
  v373 = v42;
  v48 = v40;
  LODWORD(v49) = v51.i32[0];
  v50 = v38;
  STACK[0x1218] = *MEMORY[0x24BDAC8D0];
  v51.i32[0] = 1.0;
  v52 = v39 * v38;
  vars0 = v49;
  v370 = v38;
  v371 = v45;
  if (v46 != 1.0)
  {
    *(float *)v47.i32 = v46;
    if (v46 == 0.0)
    {
      if (v38 >= 16 && v52 >= 0x2000)
      {
        v75 = 0;
        v76 = 0;
        v77 = -v41 & v41;
        if (v77 >= 4)
          v77 = 4;
        v78 = __clz(v77) - 61;
        v79 = (1 << v78);
        v399 = v43 << v78;
        v403 = v41 << v78;
        v395 = 4 * v43;
        v80 = 4 * v41;
        v81 = v39 - 1;
        v363 = v45 << 12;
        v82 = 16 * v45;
        v83 = 4 * v45;
        v367 = v44;
        do
        {
          v379 = v44;
          v383 = v76;
          if (v50 - v76 >= 1024)
            v84 = 1024;
          else
            v84 = v50 - v76;
          v375 = v50 - v76;
          if (v50 - v76 >= 1)
          {
            v85 = v50 - (v75 << 10);
            if (v85 >= 1024)
              v85 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v85 - (v85 != 0)) + 4);
          }
          v387 = v75;
          v391 = v48;
          v86 = (uint64_t)v48;
          v87 = v373;
          v88 = v79;
          do
          {
            v89 = (v81 + v88) / v79;
            if (!v89)
              break;
            v51 = sub_239A3ADD0(v84, v89, v86, v403, v87, v399, (unint64_t)&a38 | 0x10, v51);
            v87 = (float *)((char *)v87 + v395);
            v86 += v80;
            --v88;
          }
          while (v88);
          v50 = v370;
          if (v375 >= 1)
          {
            v90 = 0;
            v91 = v379;
            do
            {
              v92 = v84 - v90;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v90), *(float *)&vars0);
              if (v371 == 1 && v92 >= 4)
              {
                *(float32x4_t *)((char *)v367 + 4 * v383 * v371 + 4 * v90) = v51;
              }
              else
              {
                if (v92 >= 4)
                  v93 = 4;
                else
                  v93 = v84 - v90;
                v94 = (v93 + 4) & (v93 >> 63);
                if (v93 < 0)
                  v93 = 4;
                if (v94 < v93)
                {
                  v95 = (__int32 *)((char *)v91->i32 + v83 * v94);
                  do
                  {
                    a22 = v51;
                    *v95 = *(_DWORD *)((unint64_t)&a22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94++ & 3)));
                    v95 = (_DWORD *)((char *)v95 + v83);
                  }
                  while (v93 != v94);
                }
              }
              v90 += 4;
              v91 = (float32x4_t *)((char *)v91 + v82);
            }
            while (v90 < v84);
          }
          v76 = v383 + 1024;
          v75 = v387 + 1;
          v48 = v391 + 512;
          v44 = (float32x4_t *)((char *)v379 + v363);
        }
        while (v383 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v125 = 0.0;
            v230 = 2;
            v231 = (float *)v40;
            v124 = 0.0;
            v232 = v42;
            do
            {
              v124 = v124 + (float)(*v231 * *v232);
              v125 = v125 + (float)(v231[v41] * v232[v43]);
              v230 += 2;
              v232 += 2 * v43;
              v231 += 2 * v41;
            }
            while (v230 <= v39);
            v123 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v123 = 0;
            v124 = 0.0;
            v125 = 0.0;
          }
          if (v123 < v39)
            v124 = v124 + (float)(v40->f32[v123 * v41] * v42[v123 * v43]);
          v180 = (float)(v125 + v124) * *(float *)&v49;
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v188 = 0;
            v270 = 2;
            v271 = v40;
            v187 = 0;
            v272 = v42;
            do
            {
              v187 = vmla_n_f32(v187, *v271, *v272);
              v188 = vmla_n_f32(v188, *(float32x2_t *)((char *)v271 + 4 * v41), v272[v43]);
              v270 += 2;
              v272 += 2 * v43;
              v271 += v41;
            }
            while (v270 <= v39);
            v186 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
          }
          if (v186 < v39)
            v187 = vmla_n_f32(v187, *(float32x2_t *)((char *)v40 + 4 * v186 * v41), v42[v186 * v43]);
          v273 = vmul_n_f32(vadd_f32(v188, v187), *(float *)&v49);
          v44->i32[0] = v273.i32[0];
          v274 = &v44->i32[v45];
          goto LABEL_313;
        }
        if (v39 >= 2)
        {
          v233 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v237 = 0;
          v276 = 2;
          v277 = v40;
          v278 = v42;
          v236 = 0;
          v235 = 0;
          v234 = 0;
          v279 = v42;
          do
          {
            v280 = vld1_dup_f32(v279);
            v275 = 8 * v43;
            v279 = (const float *)((char *)v279 + v275);
            v237 = vmla_f32(v237, v280, *v277);
            v235 = vmla_f32(v235, v280, *(float32x2_t *)((char *)v277 + 4));
            v280.i32[0] = v278[v43];
            v234 = vmla_n_f32(v234, *(float32x2_t *)((char *)v277 + 4 * v41), v280.f32[0]);
            v236 = vmla_n_f32(v236, *(float32x2_t *)((char *)v277 + 4 * v41 + 4), v280.f32[0]);
            v276 += 2;
            v277 += v41;
            v278 = v279;
          }
          while (v276 <= v39);
        }
        else
        {
          v233 = 0;
          v234 = 0;
          v235 = 0;
          v236 = 0;
          v237 = 0;
        }
        if (v233 < v39)
        {
          v281 = 4 * v233 * v41;
          v282 = v42[v233 * v43];
          v237 = vmla_n_f32(v237, *(float32x2_t *)((char *)v40 + v281), v282);
          v235 = vmla_n_f32(v235, *(float32x2_t *)((char *)v40 + (v281 | 4)), v282);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->i32[0] = vmul_n_f32(vadd_f32(v234, v237), *(float *)&v49).u32[0];
        v273 = vmul_n_f32(vadd_f32(v236, v235), *(float *)&v49);
        if (v45 != 1)
        {
          v226->i32[0] = v273.i32[0];
          v274 = (__int32 *)v226 + v45;
LABEL_313:
          *v274 = v273.i32[1];
          return;
        }
LABEL_311:
        *v226 = v273;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_227:
        if (v39 >= 2)
        {
          v212 = 0uLL;
          v213 = 2;
          v214 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v211 = 0uLL;
          v215 = v373;
          do
          {
            v211 = vmlaq_n_f32(v211, *v214, *v215);
            v212 = vmlaq_n_f32(v212, *(float32x4_t *)((char *)v214 + 4 * v41), v215[v43]);
            v213 += 2;
            v215 += 2 * v43;
            v214 = (float32x4_t *)((char *)v214 + 8 * v41);
          }
          while (v213 <= v39);
          v210 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v210 = 0;
          v211 = 0uLL;
          v212 = 0uLL;
        }
        if (v210 < v39)
          v211 = vmlaq_n_f32(v211, *(float32x4_t *)&v48[-2].f32[v50 + v210 * v41], v373[v210 * v43]);
        v216 = vmulq_n_f32(vaddq_f32(v212, v211), *(float *)&v49);
        v217 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a23 = v216;
            v44->i32[0] = *(_DWORD *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v217++ & 3)));
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v217 != 4);
        }
        return;
      }
      v190 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v191 = 8;
        else
          v191 = v50;
        if (v39 >= 2)
        {
          v196 = 0uLL;
          v197 = (float32x4_t *)v48;
          v198 = v373;
          v199 = 2;
          v195 = 0uLL;
          v194 = 0uLL;
          v193 = 0uLL;
          v200 = v373;
          do
          {
            v201 = vld1q_dup_f32(v200);
            v189 = 8 * v43;
            v200 = (const float *)((char *)v200 + v189);
            v196 = vmlaq_f32(v196, v201, *v197);
            v194 = vmlaq_f32(v194, v201, *(float32x4_t *)((char *)v197 + 4 * v191 - 16));
            v201.i32[0] = v198[v43];
            v193 = vmlaq_n_f32(v193, *(float32x4_t *)((char *)v197 + 4 * v41), v201.f32[0]);
            v195 = vmlaq_n_f32(v195, *(float32x4_t *)((char *)v197 + 4 * v41 + 4 * v191 - 16), v201.f32[0]);
            v199 += 2;
            v197 = (float32x4_t *)((char *)v197 + 8 * v41);
            v198 = v200;
          }
          while (v199 <= v39);
          v192 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v192 = 0;
          v193 = 0uLL;
          v194 = 0uLL;
          v195 = 0uLL;
          v196 = 0uLL;
        }
        v202 = v191 - 4;
        if (v192 < v39)
        {
          v203 = v373[v192 * v43];
          v196 = vmlaq_n_f32(v196, *(float32x4_t *)&v48->f32[v192 * v41], v203);
          v194 = vmlaq_n_f32(v194, *(float32x4_t *)&v48->f32[v192 * v41 + v202], v203);
        }
        v204 = (float32x4_t *)((char *)v44 + 4 * v202 * v45);
        v205 = vmulq_n_f32(vaddq_f32(v193, v196), *(float *)&v49);
        if (v45 == 1 && v191 == 8)
        {
          *v44 = v205;
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
        }
        else
        {
          if (v191 >= 4)
            v207 = 0;
          else
            v207 = v191;
          if (v191 < 4)
            v202 = 4;
          if (v207 < v202)
          {
            v208 = (__int32 *)((char *)v44->i32 + v190 * v207);
            do
            {
              a25 = v205;
              *v208 = *(_DWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v207++ & 3)));
              v208 = (_DWORD *)((char *)v208 + v190);
            }
            while (v202 != v207);
          }
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
          if (v45 != 1)
          {
            for (i = 0; i != 4; ++i)
            {
              a24 = v206;
              v204->i32[0] = *(_DWORD *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v204 = (float32x4_t *)((char *)v204 + v190);
            }
            goto LABEL_225;
          }
        }
        *v204 = v206;
LABEL_225:
        v48 = (float32x2_t *)((char *)v48 + 4 * v191);
        v44 = (float32x4_t *)((char *)v44 + 4 * v191 * v45);
        v50 -= v191;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_227;
        }
      }
    }
    v100 = (v52 & 0xFFFFFFFFFFFFE000) != 0 && v38 > 15;
    v51.i32[0] = -1.0;
    if (v46 == -1.0)
    {
      if (v100)
      {
        v101 = 0;
        v102 = 0;
        v103 = -v41 & v41;
        if (v103 >= 4)
          v103 = 4;
        v104 = __clz(v103) - 61;
        v105 = (1 << v104);
        v400 = v43 << v104;
        v404 = v41 << v104;
        v396 = 4 * v43;
        v106 = 4 * v41;
        v107 = v39 - 1;
        v364 = v45 << 12;
        v108 = 16 * v45;
        v109 = 4 * v45;
        v368 = v44;
        do
        {
          v380 = v44;
          v384 = v102;
          if (v50 - v102 >= 1024)
            v110 = 1024;
          else
            v110 = v50 - v102;
          v376 = v50 - v102;
          if (v50 - v102 >= 1)
          {
            v111 = v50 - (v101 << 10);
            if (v111 >= 1024)
              v111 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v111 - (v111 != 0)) + 4);
          }
          v388 = v101;
          v392 = v48;
          v112 = (uint64_t)v48;
          v113 = v373;
          v114 = v105;
          do
          {
            v115 = (v107 + v114) / v105;
            if (!v115)
              break;
            v51 = sub_239A3ADD0(v110, v115, v112, v404, v113, v400, (unint64_t)&a38 | 0x10, v51);
            v113 = (float *)((char *)v113 + v396);
            v112 += v106;
            --v114;
          }
          while (v114);
          v50 = v370;
          if (v376 >= 1)
          {
            v116 = 0;
            v117 = v380;
            do
            {
              v118 = v110 - v116;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v116), *(float *)&vars0);
              if (v371 == 1 && v118 >= 4)
              {
                v119 = (float32x4_t *)((char *)v368 + 4 * v384 * v371 + 4 * v116);
                v51 = vsubq_f32(v51, *v119);
                *v119 = v51;
              }
              else
              {
                if (v118 >= 4)
                  v120 = 4;
                else
                  v120 = v110 - v116;
                v121 = (v120 + 4) & (v120 >> 63);
                if (v120 < 0)
                  v120 = 4;
                if (v121 < v120)
                {
                  v122 = (float *)((char *)v117->f32 + v109 * v121);
                  do
                  {
                    a26 = v51;
                    *v122 = *(float *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v121++ & 3))) - *v122;
                    v122 = (float *)((char *)v122 + v109);
                  }
                  while (v120 != v121);
                }
              }
              v116 += 4;
              v117 = (float32x4_t *)((char *)v117 + v108);
            }
            while (v116 < v110);
          }
          v102 = v384 + 1024;
          v101 = v388 + 1;
          v48 = v392 + 512;
          v44 = (float32x4_t *)((char *)v380 + v364);
        }
        while (v384 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v171 = 0.0;
            v311 = 2;
            v312 = (float *)v40;
            v170 = 0.0;
            v313 = v42;
            do
            {
              v170 = v170 + (float)(*v312 * *v313);
              v171 = v171 + (float)(v312[v41] * v313[v43]);
              v311 += 2;
              v313 += 2 * v43;
              v312 += 2 * v41;
            }
            while (v311 <= v39);
            v169 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v169 = 0;
            v170 = 0.0;
            v171 = 0.0;
          }
          if (v169 < v39)
            v170 = v170 + (float)(v40->f32[v169 * v41] * v42[v169 * v43]);
          v180 = -(float)(v44->f32[0] - (float)(*(float *)&v49 * (float)(v171 + v170)));
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v240 = 0;
            v332 = 2;
            v333 = v40;
            v239 = 0;
            v334 = v42;
            do
            {
              v239 = vmla_n_f32(v239, *v333, *v334);
              v240 = vmla_n_f32(v240, *(float32x2_t *)((char *)v333 + 4 * v41), v334[v43]);
              v332 += 2;
              v334 += 2 * v43;
              v333 += v41;
            }
            while (v332 <= v39);
            v238 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v238 = 0;
            v239 = 0;
            v240 = 0;
          }
          if (v238 < v39)
            v239 = vmla_n_f32(v239, *(float32x2_t *)((char *)v40 + 4 * v238 * v41), v42[v238 * v43]);
          v335 = 0;
          v336 = vmul_n_f32(vadd_f32(v240, v239), *(float *)&v49);
          do
          {
            a28 = v336;
            v44->f32[0] = *(float *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v335++ & 1))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v335 != 2);
          return;
        }
        if (v39 >= 2)
        {
          v314 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v318 = 0;
          v338 = 2;
          v339 = v40;
          v340 = v42;
          v317 = 0;
          v316 = 0;
          v315 = 0;
          v341 = v42;
          do
          {
            v342 = vld1_dup_f32(v341);
            v337 = 8 * v43;
            v341 = (const float *)((char *)v341 + v337);
            v318 = vmla_f32(v318, v342, *v339);
            v316 = vmla_f32(v316, v342, *(float32x2_t *)((char *)v339 + 4));
            v342.i32[0] = v340[v43];
            v315 = vmla_n_f32(v315, *(float32x2_t *)((char *)v339 + 4 * v41), v342.f32[0]);
            v317 = vmla_n_f32(v317, *(float32x2_t *)((char *)v339 + 4 * v41 + 4), v342.f32[0]);
            v338 += 2;
            v339 += v41;
            v340 = v341;
          }
          while (v338 <= v39);
        }
        else
        {
          v314 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
        }
        if (v314 < v39)
        {
          v343 = 4 * v314 * v41;
          v344 = v42[v314 * v43];
          v318 = vmla_n_f32(v318, *(float32x2_t *)((char *)v40 + v343), v344);
          v316 = vmla_n_f32(v316, *(float32x2_t *)((char *)v40 + (v343 | 4)), v344);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->f32[0] = vmul_n_f32(vadd_f32(v315, v318), *(float *)&v49).f32[0] - v44->f32[0];
        v345 = vmul_n_f32(vadd_f32(v317, v316), *(float *)&v49);
        if (v45 == 1)
        {
          v228 = vsub_f32(v345, *v226);
          goto LABEL_246;
        }
        v226->f32[0] = v345.f32[0] - v226->f32[0];
        v229 = v345.f32[1] - v226->f32[v45];
LABEL_248:
        v226->f32[v45] = v229;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_290:
        if (v39 >= 2)
        {
          v264 = 0uLL;
          v265 = 2;
          v266 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v263 = 0uLL;
          v267 = v373;
          do
          {
            v263 = vmlaq_n_f32(v263, *v266, *v267);
            v264 = vmlaq_n_f32(v264, *(float32x4_t *)((char *)v266 + 4 * v41), v267[v43]);
            v265 += 2;
            v267 += 2 * v43;
            v266 = (float32x4_t *)((char *)v266 + 8 * v41);
          }
          while (v265 <= v39);
          v262 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v262 = 0;
          v263 = 0uLL;
          v264 = 0uLL;
        }
        if (v262 < v39)
          v263 = vmlaq_n_f32(v263, *(float32x4_t *)&v48[-2].f32[v50 + v262 * v41], v373[v262 * v43]);
        v268 = vmulq_n_f32(vaddq_f32(v264, v263), *(float *)&v49);
        v269 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a29 = v268;
            v44->f32[0] = *(float *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v269++ & 3))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v269 != 4);
        }
        return;
      }
      v242 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v243 = 8;
        else
          v243 = v50;
        if (v39 >= 2)
        {
          v248 = 0uLL;
          v249 = (float32x4_t *)v48;
          v250 = v373;
          v251 = 2;
          v247 = 0uLL;
          v246 = 0uLL;
          v245 = 0uLL;
          v252 = v373;
          do
          {
            v253 = vld1q_dup_f32(v252);
            v241 = 8 * v43;
            v252 = (const float *)((char *)v252 + v241);
            v248 = vmlaq_f32(v248, v253, *v249);
            v246 = vmlaq_f32(v246, v253, *(float32x4_t *)((char *)v249 + 4 * v243 - 16));
            v253.i32[0] = v250[v43];
            v245 = vmlaq_n_f32(v245, *(float32x4_t *)((char *)v249 + 4 * v41), v253.f32[0]);
            v247 = vmlaq_n_f32(v247, *(float32x4_t *)((char *)v249 + 4 * v41 + 4 * v243 - 16), v253.f32[0]);
            v251 += 2;
            v249 = (float32x4_t *)((char *)v249 + 8 * v41);
            v250 = v252;
          }
          while (v251 <= v39);
          v244 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v244 = 0;
          v245 = 0uLL;
          v246 = 0uLL;
          v247 = 0uLL;
          v248 = 0uLL;
        }
        v254 = v243 - 4;
        if (v244 < v39)
        {
          v255 = v373[v244 * v43];
          v248 = vmlaq_n_f32(v248, *(float32x4_t *)&v48->f32[v244 * v41], v255);
          v246 = vmlaq_n_f32(v246, *(float32x4_t *)&v48->f32[v244 * v41 + v254], v255);
        }
        v256 = (float32x4_t *)((char *)v44 + 4 * v254 * v45);
        v257 = vmulq_n_f32(vaddq_f32(v245, v248), *(float *)&v49);
        if (v45 == 1 && v243 == 8)
        {
          *v44 = vsubq_f32(v257, *v44);
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
        }
        else
        {
          if (v243 >= 4)
            v259 = 0;
          else
            v259 = v243;
          if (v243 < 4)
            v254 = 4;
          if (v259 < v254)
          {
            v260 = (float *)((char *)v44->f32 + v242 * v259);
            do
            {
              a31 = v257;
              *v260 = *(float *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v259++ & 3))) - *v260;
              v260 = (float *)((char *)v260 + v242);
            }
            while (v254 != v259);
          }
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
          if (v45 != 1)
          {
            for (j = 0; j != 4; ++j)
            {
              a30 = v258;
              v256->f32[0] = *(float *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) - v256->f32[0];
              v256 = (float32x4_t *)((char *)v256 + v242);
            }
            goto LABEL_288;
          }
        }
        *v256 = vsubq_f32(v258, *v256);
LABEL_288:
        v48 = (float32x2_t *)((char *)v48 + 4 * v243);
        v44 = (float32x4_t *)((char *)v44 + 4 * v243 * v45);
        v50 -= v243;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_290;
        }
      }
    }
    if (v100)
    {
      v126 = 0;
      v127 = 0;
      v128 = -v41 & v41;
      if (v128 >= 4)
        v128 = 4;
      v129 = __clz(v128) - 61;
      v130 = (1 << v129);
      v401 = v43 << v129;
      v405 = v41 << v129;
      v397 = 4 * v43;
      v131 = 4 * v41;
      v132 = v39 - 1;
      v360 = v45 << 12;
      v133 = 16 * v45;
      v134 = 4 * v45;
      v369 = v44;
      v361 = (float32x4_t)vdupq_lane_s32(v47, 0);
      v365 = v46;
      do
      {
        v381 = v44;
        v385 = v127;
        if (v50 - v127 >= 1024)
          v135 = 1024;
        else
          v135 = v50 - v127;
        v377 = v50 - v127;
        if (v50 - v127 >= 1)
        {
          v136 = v50 - (v126 << 10);
          if (v136 >= 1024)
            v136 = 1024;
          bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v136 - (v136 != 0)) + 4);
        }
        v389 = v126;
        v393 = v48;
        v137 = (uint64_t)v48;
        v138 = v373;
        v139 = v130;
        do
        {
          v140 = (v132 + v139) / v130;
          if (!v140)
            break;
          v51 = sub_239A3ADD0(v135, v140, v137, v405, v138, v401, (unint64_t)&a38 | 0x10, v51);
          v138 = (float *)((char *)v138 + v397);
          v137 += v131;
          --v139;
        }
        while (v139);
        v50 = v370;
        if (v377 >= 1)
        {
          v141 = 0;
          v142 = v381;
          do
          {
            v143 = v135 - v141;
            v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v141), *(float *)&vars0);
            if (v371 == 1 && v143 >= 4)
            {
              v144 = (float32x4_t *)((char *)v369 + 4 * v385 * v371 + 4 * v141);
              v51 = vmlaq_f32(v51, *v144, v361);
              *v144 = v51;
            }
            else
            {
              if (v143 >= 4)
                v145 = 4;
              else
                v145 = v135 - v141;
              v146 = (v145 + 4) & (v145 >> 63);
              if (v145 < 0)
                v145 = 4;
              if (v146 < v145)
              {
                v147 = (float *)((char *)v142->f32 + v134 * v146);
                do
                {
                  a32 = v51;
                  *v147 = *(float *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v146++ & 3)))
                        + (float)(v365 * *v147);
                  v147 = (float *)((char *)v147 + v134);
                }
                while (v145 != v146);
              }
            }
            v141 += 4;
            v142 = (float32x4_t *)((char *)v142 + v133);
          }
          while (v141 < v135);
        }
        v127 = v385 + 1024;
        v126 = v389 + 1;
        v48 = v393 + 512;
        v44 = (float32x4_t *)((char *)v381 + v360);
      }
      while (v385 + 1024 < v370);
      return;
    }
    if (v38 < 1)
      return;
    if ((unint64_t)v38 < 4)
    {
      if ((unint64_t)v38 < 2)
      {
        if (v39 >= 2)
        {
          v174 = 0.0;
          v324 = 2;
          v325 = (float *)v40;
          v173 = 0.0;
          v326 = v42;
          do
          {
            v173 = v173 + (float)(*v325 * *v326);
            v174 = v174 + (float)(v325[v41] * v326[v43]);
            v324 += 2;
            v326 += 2 * v43;
            v325 += 2 * v41;
          }
          while (v324 <= v39);
          v172 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v172 = 0;
          v173 = 0.0;
          v174 = 0.0;
        }
        if (v172 < v39)
          v173 = v173 + (float)(v40->f32[v172 * v41] * v42[v172 * v43]);
        v178 = v174 + v173;
        v179 = v44->f32[0] * *(float *)v47.i32;
        goto LABEL_194;
      }
      if (v38 == 2)
      {
        if (v39 >= 2)
        {
          v285 = 0;
          v346 = 2;
          v347 = v40;
          v284 = 0;
          v348 = v42;
          do
          {
            v284 = vmla_n_f32(v284, *v347, *v348);
            v285 = vmla_n_f32(v285, *(float32x2_t *)((char *)v347 + 4 * v41), v348[v43]);
            v346 += 2;
            v348 += 2 * v43;
            v347 += v41;
          }
          while (v346 <= v39);
          v283 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v283 = 0;
          v284 = 0;
          v285 = 0;
        }
        if (v283 < v39)
          v284 = vmla_n_f32(v284, *(float32x2_t *)((char *)v40 + 4 * v283 * v41), v42[v283 * v43]);
        v349 = 0;
        v350 = vmul_n_f32(vadd_f32(v285, v284), *(float *)&v49);
        do
        {
          a34 = v350;
          v44->f32[0] = *(float *)((unint64_t)&a34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v349++ & 1)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v349 != 2);
        return;
      }
      if (v39 >= 2)
      {
        v327 = v39 & 0xFFFFFFFFFFFFFFFELL;
        v331 = 0;
        v352 = 2;
        v353 = v40;
        v354 = v42;
        v330 = 0;
        v329 = 0;
        v328 = 0;
        v355 = v42;
        do
        {
          v356 = vld1_dup_f32(v355);
          v351 = 8 * v43;
          v355 = (const float *)((char *)v355 + v351);
          v331 = vmla_f32(v331, v356, *v353);
          v329 = vmla_f32(v329, v356, *(float32x2_t *)((char *)v353 + 4));
          v356.i32[0] = v354[v43];
          v328 = vmla_n_f32(v328, *(float32x2_t *)((char *)v353 + 4 * v41), v356.f32[0]);
          v330 = vmla_n_f32(v330, *(float32x2_t *)((char *)v353 + 4 * v41 + 4), v356.f32[0]);
          v352 += 2;
          v353 += v41;
          v354 = v355;
        }
        while (v352 <= v39);
      }
      else
      {
        v327 = 0;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v331 = 0;
      }
      if (v327 < v39)
      {
        v357 = 4 * v327 * v41;
        v358 = v42[v327 * v43];
        v331 = vmla_n_f32(v331, *(float32x2_t *)((char *)v40 + v357), v358);
        v329 = vmla_n_f32(v329, *(float32x2_t *)((char *)v40 + (v357 | 4)), v358);
      }
      v226 = (float32x2_t *)&v44->f32[v45];
      v44->f32[0] = vmul_n_f32(vadd_f32(v328, v331), *(float *)&v49).f32[0] + (float)(*(float *)v47.i32 * v44->f32[0]);
      v359 = vmul_n_f32(vadd_f32(v330, v329), *(float *)&v49);
      if (v45 != 1)
      {
        v226->f32[0] = v359.f32[0] + (float)(*(float *)v47.i32 * v226->f32[0]);
        v229 = v359.f32[1] + (float)(*(float *)v47.i32 * v226->f32[v45]);
        goto LABEL_248;
      }
      v273 = vmla_f32(v359, *v226, (float32x2_t)vdup_lane_s32(v47, 0));
      goto LABEL_311;
    }
    if (v38 == 4)
    {
      v50 = 4;
LABEL_344:
      if (v39 >= 2)
      {
        v310 = 0uLL;
        v319 = 2;
        v320 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
        v309 = 0uLL;
        v321 = v373;
        do
        {
          v309 = vmlaq_n_f32(v309, *v320, *v321);
          v310 = vmlaq_n_f32(v310, *(float32x4_t *)((char *)v320 + 4 * v41), v321[v43]);
          v319 += 2;
          v321 += 2 * v43;
          v320 = (float32x4_t *)((char *)v320 + 8 * v41);
        }
        while (v319 <= v39);
        v308 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v308 = 0;
        v309 = 0uLL;
        v310 = 0uLL;
      }
      if (v308 < v39)
        v309 = vmlaq_n_f32(v309, *(float32x4_t *)&v48[-2].f32[v50 + v308 * v41], v373[v308 * v43]);
      v322 = vmulq_n_f32(vaddq_f32(v310, v309), *(float *)&v49);
      v323 = 4 - v50;
      if (4 - v50 <= 3)
      {
        do
        {
          a35 = v322;
          v44->f32[0] = *(float *)((unint64_t)&a35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v323++ & 3)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v323 != 4);
      }
      return;
    }
    v287 = (float32x4_t)vdupq_lane_s32(v47, 0);
    v288 = 4 * v45;
    while (1)
    {
      if (v50 >= 8)
        v289 = 8;
      else
        v289 = v50;
      if (v39 >= 2)
      {
        v294 = 0uLL;
        v295 = (float32x4_t *)v48;
        v296 = v373;
        v297 = 2;
        v293 = 0uLL;
        v292 = 0uLL;
        v291 = 0uLL;
        v298 = v373;
        do
        {
          v299 = vld1q_dup_f32(v298);
          v286 = 8 * v43;
          v298 = (const float *)((char *)v298 + v286);
          v294 = vmlaq_f32(v294, v299, *v295);
          v292 = vmlaq_f32(v292, v299, *(float32x4_t *)((char *)v295 + 4 * v289 - 16));
          v299.i32[0] = v296[v43];
          v291 = vmlaq_n_f32(v291, *(float32x4_t *)((char *)v295 + 4 * v41), v299.f32[0]);
          v293 = vmlaq_n_f32(v293, *(float32x4_t *)((char *)v295 + 4 * v41 + 4 * v289 - 16), v299.f32[0]);
          v297 += 2;
          v295 = (float32x4_t *)((char *)v295 + 8 * v41);
          v296 = v298;
        }
        while (v297 <= v39);
        v290 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v290 = 0;
        v291 = 0uLL;
        v292 = 0uLL;
        v293 = 0uLL;
        v294 = 0uLL;
      }
      v300 = v289 - 4;
      if (v290 < v39)
      {
        v301 = v373[v290 * v43];
        v294 = vmlaq_n_f32(v294, *(float32x4_t *)&v48->f32[v290 * v41], v301);
        v292 = vmlaq_n_f32(v292, *(float32x4_t *)&v48->f32[v290 * v41 + v300], v301);
      }
      v302 = (float32x4_t *)((char *)v44 + 4 * v300 * v45);
      v303 = vmulq_n_f32(vaddq_f32(v291, v294), *(float *)&v49);
      if (v45 == 1 && v289 == 8)
      {
        *v44 = vmlaq_f32(v303, *v44, v287);
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
      }
      else
      {
        if (v289 >= 4)
          v305 = 0;
        else
          v305 = v289;
        if (v289 < 4)
          v300 = 4;
        if (v305 < v300)
        {
          v306 = (float *)((char *)v44->f32 + v288 * v305);
          do
          {
            a37 = v303;
            *v306 = *(float *)((unint64_t)&a37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v305++ & 3)))
                  + (float)(*(float *)v47.i32 * *v306);
            v306 = (float *)((char *)v306 + v288);
          }
          while (v300 != v305);
        }
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
        if (v45 != 1)
        {
          for (k = 0; k != 4; ++k)
          {
            a36 = v304;
            v302->f32[0] = *(float *)((unint64_t)&a36 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)))
                         + (float)(*(float *)v47.i32 * v302->f32[0]);
            v302 = (float32x4_t *)((char *)v302 + v288);
          }
          goto LABEL_342;
        }
      }
      *v302 = vmlaq_f32(v304, *v302, v287);
LABEL_342:
      v48 = (float32x2_t *)((char *)v48 + 4 * v289);
      v44 = (float32x4_t *)((char *)v44 + 4 * v289 * v45);
      v50 -= v289;
      if (v50 <= 4)
      {
        if (v50 < 1)
          return;
        goto LABEL_344;
      }
    }
  }
  if (v38 >= 16 && v52 >= 0x2000)
  {
    v53 = 0;
    v54 = 0;
    v55 = -v41 & v41;
    if (v55 >= 4)
      v55 = 4;
    v56 = __clz(v55) - 61;
    v57 = (1 << v56);
    v398 = v43 << v56;
    v402 = v41 << v56;
    v394 = 4 * v43;
    v58 = 4 * v41;
    v59 = v39 - 1;
    v362 = v45 << 12;
    v60 = 16 * v45;
    v61 = 4 * v45;
    v366 = v44;
    do
    {
      v378 = v44;
      v382 = v54;
      if (v50 - v54 >= 1024)
        v62 = 1024;
      else
        v62 = v50 - v54;
      v374 = v50 - v54;
      if (v50 - v54 >= 1)
      {
        v63 = v50 - (v53 << 10);
        if (v63 >= 1024)
          v63 = 1024;
        bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v63 - (v63 != 0)) + 4);
      }
      v386 = v53;
      v390 = v48;
      v64 = (uint64_t)v48;
      v65 = v373;
      v66 = v57;
      do
      {
        v67 = (v59 + v66) / v57;
        if (!v67)
          break;
        v51 = sub_239A3ADD0(v62, v67, v64, v402, v65, v398, (unint64_t)&a38 | 0x10, v51);
        v65 = (float *)((char *)v65 + v394);
        v64 += v58;
        --v66;
      }
      while (v66);
      v50 = v370;
      if (v374 >= 1)
      {
        v68 = 0;
        v69 = v378;
        do
        {
          v70 = v62 - v68;
          v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v68), *(float *)&vars0);
          if (v371 == 1 && v70 >= 4)
          {
            v71 = (float32x4_t *)((char *)v366 + 4 * v382 * v371 + 4 * v68);
            v51 = vaddq_f32(v51, *v71);
            *v71 = v51;
          }
          else
          {
            if (v70 >= 4)
              v72 = 4;
            else
              v72 = v62 - v68;
            v73 = (v72 + 4) & (v72 >> 63);
            if (v72 < 0)
              v72 = 4;
            if (v73 < v72)
            {
              v74 = (float *)((char *)v69->f32 + v61 * v73);
              do
              {
                a19 = v51;
                *v74 = *(float *)((unint64_t)&a19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73++ & 3))) + *v74;
                v74 = (float *)((char *)v74 + v61);
              }
              while (v72 != v73);
            }
          }
          v68 += 4;
          v69 = (float32x4_t *)((char *)v69 + v60);
        }
        while (v68 < v62);
      }
      v54 = v382 + 1024;
      v53 = v386 + 1;
      v48 = v390 + 512;
      v44 = (float32x4_t *)((char *)v378 + v362);
    }
    while (v382 + 1024 < v370);
    return;
  }
  if (v38 < 1)
    return;
  if ((unint64_t)v38 < 4)
  {
    if ((unint64_t)v38 < 2)
    {
      if (v39 >= 2)
      {
        v98 = 0.0;
        v175 = 2;
        v176 = (float *)v40;
        v97 = 0.0;
        v177 = v42;
        do
        {
          v97 = v97 + (float)(*v176 * *v177);
          v98 = v98 + (float)(v176[v41] * v177[v43]);
          v175 += 2;
          v177 += 2 * v43;
          v176 += 2 * v41;
        }
        while (v175 <= v39);
        v96 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v96 = 0;
        v97 = 0.0;
        v98 = 0.0;
      }
      if (v96 < v39)
        v97 = v97 + (float)(v40->f32[v96 * v41] * v42[v96 * v43]);
      v178 = v98 + v97;
      v179 = v44->f32[0];
LABEL_194:
      v180 = v179 + (float)(*(float *)&v49 * v178);
LABEL_352:
      v44->f32[0] = v180;
      return;
    }
    if (v38 == 2)
    {
      sub_239A3B0D8(-2, v39, v40, v41, v42, v43, (float32x2_t *)v44, v45, *(float *)&v49);
      return;
    }
    if (v39 >= 2)
    {
      v181 = v39 & 0xFFFFFFFFFFFFFFFELL;
      v185 = 0;
      v219 = 2;
      v220 = v40;
      v221 = v42;
      v184 = 0;
      v183 = 0;
      v182 = 0;
      v222 = v42;
      do
      {
        v223 = vld1_dup_f32(v222);
        v218 = 8 * v43;
        v222 = (const float *)((char *)v222 + v218);
        v185 = vmla_f32(v185, v223, *v220);
        v183 = vmla_f32(v183, v223, *(float32x2_t *)((char *)v220 + 4));
        v223.i32[0] = v221[v43];
        v182 = vmla_n_f32(v182, *(float32x2_t *)((char *)v220 + 4 * v41), v223.f32[0]);
        v184 = vmla_n_f32(v184, *(float32x2_t *)((char *)v220 + 4 * v41 + 4), v223.f32[0]);
        v219 += 2;
        v220 += v41;
        v221 = v222;
      }
      while (v219 <= v39);
    }
    else
    {
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v184 = 0;
      v185 = 0;
    }
    if (v181 < v39)
    {
      v224 = 4 * v181 * v41;
      v225 = v42[v181 * v43];
      v185 = vmla_n_f32(v185, *(float32x2_t *)((char *)v40 + v224), v225);
      v183 = vmla_n_f32(v183, *(float32x2_t *)((char *)v40 + (v224 | 4)), v225);
    }
    v226 = (float32x2_t *)&v44->f32[v45];
    v44->f32[0] = v44->f32[0] + vmul_n_f32(vadd_f32(v182, v185), *(float *)&v49).f32[0];
    v227 = vmul_n_f32(vadd_f32(v184, v183), *(float *)&v49);
    if (v45 == 1)
    {
      v228 = vadd_f32(v227, *v226);
LABEL_246:
      *v226 = v228;
      return;
    }
    v226->f32[0] = v227.f32[0] + v226->f32[0];
    v229 = v227.f32[1] + v226->f32[v45];
    goto LABEL_248;
  }
  if (v38 == 4)
  {
    v50 = 4;
    goto LABEL_174;
  }
  v149 = 4 * v45;
  do
  {
    if (v50 >= 8)
      v150 = 8;
    else
      v150 = v50;
    if (v39 >= 2)
    {
      v155 = 0uLL;
      v156 = (float32x4_t *)v48;
      v157 = v373;
      v158 = 2;
      v154 = 0uLL;
      v153 = 0uLL;
      v152 = 0uLL;
      v159 = v373;
      do
      {
        v160 = vld1q_dup_f32(v159);
        v148 = 8 * v43;
        v159 = (const float *)((char *)v159 + v148);
        v155 = vmlaq_f32(v155, v160, *v156);
        v153 = vmlaq_f32(v153, v160, *(float32x4_t *)((char *)v156 + 4 * v150 - 16));
        v160.i32[0] = v157[v43];
        v152 = vmlaq_n_f32(v152, *(float32x4_t *)((char *)v156 + 4 * v41), v160.f32[0]);
        v154 = vmlaq_n_f32(v154, *(float32x4_t *)((char *)v156 + 4 * v41 + 4 * v150 - 16), v160.f32[0]);
        v158 += 2;
        v156 = (float32x4_t *)((char *)v156 + 8 * v41);
        v157 = v159;
      }
      while (v158 <= v39);
      v151 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v151 = 0;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = 0uLL;
      v155 = 0uLL;
    }
    v161 = v150 - 4;
    if (v151 < v39)
    {
      v162 = v373[v151 * v43];
      v155 = vmlaq_n_f32(v155, *(float32x4_t *)&v48->f32[v151 * v41], v162);
      v153 = vmlaq_n_f32(v153, *(float32x4_t *)&v48->f32[v151 * v41 + v161], v162);
    }
    v163 = (float32x4_t *)((char *)v44 + 4 * v161 * v45);
    v164 = vmulq_n_f32(vaddq_f32(v152, v155), *(float *)&v49);
    if (v45 == 1 && v150 == 8)
    {
      *v44 = vaddq_f32(v164, *v44);
      v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
LABEL_169:
      *v163 = vaddq_f32(v165, *v163);
      goto LABEL_172;
    }
    if (v150 >= 4)
      v166 = 0;
    else
      v166 = v150;
    if (v150 < 4)
      v161 = 4;
    if (v166 < v161)
    {
      v167 = (float *)((char *)v44->f32 + v149 * v166);
      do
      {
        a21 = v164;
        *v167 = *(float *)((unint64_t)&a21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v166++ & 3))) + *v167;
        v167 = (float *)((char *)v167 + v149);
      }
      while (v161 != v166);
    }
    v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
    if (v45 == 1)
      goto LABEL_169;
    for (m = 0; m != 4; ++m)
    {
      a20 = v165;
      v163->f32[0] = *(float *)((unint64_t)&a20 & 0xFFFFFFFFFFFFFFF3 | (4 * (m & 3))) + v163->f32[0];
      v163 = (float32x4_t *)((char *)v163 + v149);
    }
LABEL_172:
    v48 = (float32x2_t *)((char *)v48 + 4 * v150);
    v44 = (float32x4_t *)((char *)v44 + 4 * v150 * v45);
    v50 -= v150;
  }
  while (v50 > 4);
  if (v50 >= 1)
LABEL_174:
    sub_239A3ACC0(-v50, v39, (float32x4_t *)((char *)&v48[-2] + 4 * v50), v41, v373, v43, (float32x4_t *)((char *)v44 + 4 * (v50 - 4) * v45), v45, *(float *)&v49);
}

uint64_t sub_239A35FDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float _S0, float a9)
{
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int8 *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v64;
  float32x4_t v66;
  float32x4_t v73;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t i;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int8 *v103;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float *v129;
  float32x4_t *v132;
  float32x4_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t j;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t *v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  __int8 *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float *v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t *v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t k;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int8 *v207;
  float32x4_t v208;
  uint64_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float *v229;
  float32x4_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t m;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x2_t v245;
  float32x2_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t *v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float *v280;
  uint64_t v289;
  float32x4_t *v290;
  uint64_t v291;
  float32x4_t *v292;
  uint64_t v293;
  float32x4_t *v294;
  float32x4_t *v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  float32x4_t *v306;
  float32x4_t *v307;
  uint64_t n;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  __int8 *v315;
  float32x2_t v320;
  float32x2_t *v321;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t *v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t v338;
  __int8 *v339;
  uint64_t v340;
  float32x4_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t *v350;
  float32x4_t *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  float32x4_t *v354;
  float *v355;
  uint64_t v364;
  float32x4_t *v365;
  uint64_t v366;
  float32x4_t *v367;
  uint64_t v368;
  float32x4_t *v369;
  float32x4_t *v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  float32x4_t *v382;
  uint64_t jj;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  __int8 *v390;
  float32x4_t *v395;
  uint64_t v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t *v400;
  float32x4_t *v401;
  float32x4_t *v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float *v407;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  uint64_t ii;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int8x16_t v418;
  char *v419;
  uint64_t v420;
  float32x4_t *v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t *v425;
  uint64_t kk;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float *v431;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t *v436;
  float32x4_t *v437;
  uint64_t mm;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t *v449;
  float32x4_t *v450;
  float32x4_t *v451;
  float32x4_t *v452;
  uint64_t v453;
  uint64_t v454;

  v10 = a4;
  v11 = (float32x4_t *)a3;
  v12 = result;
  if (a9 == 1.0)
  {
    if (result > 3)
    {
      v15 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v16 = *(float32x4_t *)a5;
          do
          {
            v17 = (int8x16_t)vmulq_f32(v16, *v11);
            *a6 = *a6
                + (float)(_S0
                        * vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v29 = *(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (4 - (-(int)result & 3)));
        v453 = result;
        v445 = result - 4;
        v30 = 0;
        if (a2 >= 8)
        {
          v31 = 4 * a4;
          v449 = (float32x4_t *)(a5 + 4 * v15);
          v32 = v15 + 2 * a4;
          v33 = v15 + 4 * a4;
          v34 = 32 * a4;
          v35 = 4 * v15;
          v36 = 4 * (v15 + a4);
          v37 = 4 * v32;
          v38 = 4 * (v32 + a4);
          v39 = 4 * v33;
          v40 = 4 * (v33 + a4);
          v41 = 4 * (v15 + 6 * a4);
          v42 = 4 * (v15 - a4 + 8 * a4);
          v43 = v11;
          do
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = v10;
            v47 = &v11->i8[4 * v30 * v10];
            v48 = a5;
            v49 = v43;
            v50 = v453;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            do
            {
              v57 = *(float32x4_t *)a5;
              a5 += 16;
              v44 = vmlaq_f32(v44, v57, *v49);
              v45 = vmlaq_f32(v45, v57, *(float32x4_t *)((char *)v49 + v31));
              v58 = (float32x4_t *)((char *)v49 + v31 + v31);
              v51 = vmlaq_f32(v51, v57, *v58);
              v59 = (float32x4_t *)((char *)v58 + v31);
              v56 = vmlaq_f32(v56, v57, *v59);
              v60 = (float32x4_t *)((char *)v59 + v31);
              v55 = vmlaq_f32(v55, v57, *v60);
              v61 = (float32x4_t *)((char *)v60 + v31);
              v54 = vmlaq_f32(v54, v57, *v61);
              v62 = (float32x4_t *)((char *)v61 + v31);
              v53 = vmlaq_f32(v53, v57, *v62);
              v52 = vmlaq_f32(v52, v57, *(float32x4_t *)((char *)v62 + v31));
              v50 -= 4;
              ++v49;
            }
            while (v50 > 4);
            result = (uint64_t)&a6[v30 * a7];
            _Q5 = vaddq_f32(v55, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v39])));
            v64 = vaddq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v40])));
            _Q3 = vaddq_f32(v53, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v41])));
            v66 = (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v42]));
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v35]))), vaddq_f32(v45, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v36])))), vpaddq_f32(vaddq_f32(v51, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v37]))), vaddq_f32(v56, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v38])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q6.f32[0]);
            __asm { FMLA            S7, S0, V6.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S7;
            v73 = vpaddq_f32(_Q5, v64);
            __asm { FMLA            S7, S0, V6.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S7;
            __asm { FMLA            S5, S0, V6.S[3] }
            *(_DWORD *)(result + 12 * a7) = _Q5.i32[0];
            _Q2 = vpaddq_f32(v73, vpaddq_f32(_Q3, vaddq_f32(v52, v66)));
            *(float *)(result + 16 * a7) = vmlas_n_f32(*(float *)(result + 16 * a7), _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 20 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 24 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 28 * a7) = _Q3.i32[0];
            v30 += 8;
            v43 = (float32x4_t *)((char *)v43 + v34);
            v10 = v46;
            a5 = v48;
          }
          while ((v30 | 7) < a2);
        }
        if ((v30 | 3) >= a2)
        {
          v86 = v453;
          v76 = v445;
        }
        else
        {
          v76 = v445;
          v78 = v445 + 2 * v10;
          v79 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 12));
          v80 = 16 * v10;
          v81 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 8));
          v82 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v83 = 4 * v78;
          v84 = 4 * (v78 + v10);
          v85 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          v86 = v453;
          do
          {
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = (float32x4_t *)a5;
            v92 = v85;
            v93 = v82;
            v94 = v81;
            v95 = v79;
            for (i = v453; i > 4; i -= 4)
            {
              v97 = *v91++;
              v98 = v97;
              v99 = *v92++;
              v90 = vmlaq_f32(v90, v98, v99);
              v100 = *v93++;
              v89 = vmlaq_f32(v89, v98, v100);
              v101 = *v94++;
              v88 = vmlaq_f32(v88, v98, v101);
              v102 = *v95++;
              v87 = vmlaq_f32(v87, v98, v102);
            }
            v103 = &v11->i8[4 * v30 * v10];
            result = (uint64_t)&a6[v30 * a7];
            v77 = (float32x4_t *)(a5 + 4 * v445);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v90, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445]))), vaddq_f32(v89, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445 + 4 * v10])))), vpaddq_f32(vaddq_f32(v88, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v83]))), vaddq_f32(v87, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v84])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v30 += 4;
            v79 = (float32x4_t *)((char *)v79 + v80);
            v81 = (float32x4_t *)((char *)v81 + v80);
            v82 = (float32x4_t *)((char *)v82 + v80);
            v85 = (float32x4_t *)((char *)v85 + v80);
          }
          while ((v30 | 3) < a2);
        }
        if ((v30 | 1) < a2)
        {
          v117 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v118 = 8 * v10;
          v119 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v120 = 0uLL;
            v121 = 0uLL;
            v122 = (float32x4_t *)a5;
            v123 = v119;
            v124 = v117;
            for (result = v86; result > 4; result -= 4)
            {
              v125 = *v122++;
              v126 = v125;
              v127 = *v123++;
              v121 = vmlaq_f32(v121, v126, v127);
              v128 = *v124++;
              v120 = vmlaq_f32(v120, v126, v128);
            }
            v129 = &a6[v30 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v121, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76)))), vaddq_f32(v120, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v129 = vmlas_n_f32(*v129, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v129[a7] = _S3;
            v30 += 2;
            v117 = (float32x4_t *)((char *)v117 + v118);
            v119 = (float32x4_t *)((char *)v119 + v118);
          }
          while ((v30 | 1) < a2);
        }
        if (v30 < a2)
        {
          v132 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v133 = 0uLL;
            v134 = (float32x4_t *)a5;
            v135 = v132;
            for (j = v86; j > 4; j -= 4)
            {
              v137 = *v134++;
              v138 = v137;
              v139 = *v135++;
              v133 = vmlaq_f32(v133, v138, v139);
            }
            v140 = (int8x16_t)vaddq_f32(v133, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76))));
            a6[v30 * a7] = a6[v30 * a7]
                         + (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL))));
            ++v30;
            v132 = (float32x4_t *)((char *)v132 + 4 * v10);
          }
          while (v30 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v19 = *(float32x4_t *)a5;
        v20 = *(float32x4_t *)(a5 + 4 * result - 16);
        v21 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (8 - result)));
        do
        {
          v22 = (int8x16_t)vaddq_f32(vmulq_f32(v20, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v19, *v11), v21));
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v18 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = *a6 + (float)(_S0 * vaddv_f32(vmul_f32(v18, *(float32x2_t *)v11->f32)));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v27 = *(float32x2_t *)(a5 + 4);
        v28 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(vmul_f32(v27, *v28), (float32x2_t)vmul_f32(v18, *(float32x2_t *)((char *)v28 - 4)).u32[0])));
          a6 += a7;
          v28 = (float32x2_t *)((char *)v28 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v13 = *(float *)a5;
      do
      {
        *a6 = *a6 + (float)(_S0 * (float)(v13 * v11->f32[0]));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 3)
    {
      v24 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v25 = *(float32x4_t *)a5;
          do
          {
            v26 = (int8x16_t)vmulq_f32(v25, *v11);
            *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * v10);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v143 = *(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (4 - (-(int)result & 3)));
        v454 = result;
        v446 = result - 4;
        v144 = 0;
        if (a2 >= 8)
        {
          v145 = 4 * v10;
          v450 = (float32x4_t *)(a5 + 4 * v24);
          v146 = v24 + 2 * v10;
          v147 = v24 + 4 * v10;
          v148 = 32 * v10;
          v149 = 4 * v24;
          v150 = 4 * (v24 + v10);
          v151 = 4 * v146;
          v152 = 4 * (v146 + v10);
          v153 = 4 * v147;
          v154 = 4 * (v147 + v10);
          v155 = 4 * (v24 + 6 * v10);
          v156 = 4 * (v24 - v10 + 8 * v10);
          v157 = v11;
          do
          {
            v158 = 0uLL;
            v159 = 0uLL;
            v160 = v10;
            v161 = &v11->i8[4 * v144 * v10];
            v162 = a5;
            v163 = v157;
            v164 = v454;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            v169 = 0uLL;
            v170 = 0uLL;
            do
            {
              v171 = *(float32x4_t *)a5;
              a5 += 16;
              v158 = vmlaq_f32(v158, v171, *v163);
              v159 = vmlaq_f32(v159, v171, *(float32x4_t *)((char *)v163 + v145));
              v172 = (float32x4_t *)((char *)v163 + v145 + v145);
              v165 = vmlaq_f32(v165, v171, *v172);
              v173 = (float32x4_t *)((char *)v172 + v145);
              v170 = vmlaq_f32(v170, v171, *v173);
              v174 = (float32x4_t *)((char *)v173 + v145);
              v169 = vmlaq_f32(v169, v171, *v174);
              v175 = (float32x4_t *)((char *)v174 + v145);
              v168 = vmlaq_f32(v168, v171, *v175);
              v176 = (float32x4_t *)((char *)v175 + v145);
              v167 = vmlaq_f32(v167, v171, *v176);
              v166 = vmlaq_f32(v166, v171, *(float32x4_t *)((char *)v176 + v145));
              v164 -= 4;
              ++v163;
            }
            while (v164 > 4);
            v177 = &a6[v144 * a7];
            v178 = vpaddq_f32(vpaddq_f32(vaddq_f32(v158, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v149]))), vaddq_f32(v159, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v150])))), vpaddq_f32(vaddq_f32(v165, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v151]))), vaddq_f32(v170, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v152])))));
            v179 = vpaddq_f32(vpaddq_f32(vaddq_f32(v169, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v153]))), vaddq_f32(v168, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v154])))), vpaddq_f32(vaddq_f32(v167, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v155]))), vaddq_f32(v166, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v156])))));
            *v177 = _S0 * v178.f32[0];
            v177[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v178.f32, 1);
            v177[2 * a7] = vmuls_lane_f32(_S0, v178, 2);
            v177[3 * a7] = vmuls_lane_f32(_S0, v178, 3);
            v177[4 * a7] = _S0 * v179.f32[0];
            v177[5 * a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v179.f32, 1);
            v177[6 * a7] = vmuls_lane_f32(_S0, v179, 2);
            v177[7 * a7] = vmuls_lane_f32(_S0, v179, 3);
            v144 += 8;
            result = v144 | 7;
            v157 = (float32x4_t *)((char *)v157 + v148);
            v10 = v160;
            a5 = v162;
          }
          while ((v144 | 7) < a2);
        }
        if ((v144 | 3) >= a2)
        {
          v190 = v454;
          v180 = v446;
        }
        else
        {
          v180 = v446;
          v182 = v446 + 2 * v10;
          v183 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 12));
          v184 = 16 * v10;
          v185 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 8));
          v186 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v187 = 4 * v182;
          v188 = 4 * (v182 + v10);
          v189 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          v190 = v454;
          do
          {
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = (float32x4_t *)a5;
            v196 = v189;
            v197 = v186;
            v198 = v185;
            v199 = v183;
            for (k = v454; k > 4; k -= 4)
            {
              v201 = *v195++;
              v202 = v201;
              v203 = *v196++;
              v194 = vmlaq_f32(v194, v202, v203);
              v204 = *v197++;
              v193 = vmlaq_f32(v193, v202, v204);
              v205 = *v198++;
              v192 = vmlaq_f32(v192, v202, v205);
              v206 = *v199++;
              v191 = vmlaq_f32(v191, v202, v206);
            }
            v207 = &v11->i8[4 * v144 * v10];
            result = (uint64_t)&a6[v144 * a7];
            v181 = (float32x4_t *)(a5 + 4 * v446);
            v208 = vpaddq_f32(vpaddq_f32(vaddq_f32(v194, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446]))), vaddq_f32(v193, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446 + 4 * v10])))), vpaddq_f32(vaddq_f32(v192, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v187]))), vaddq_f32(v191, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v188])))));
            *(float *)result = _S0 * v208.f32[0];
            *(float *)(result + 4 * a7) = vmuls_lane_f32(_S0, *(float32x2_t *)v208.f32, 1);
            *(float *)(result + 8 * a7) = vmuls_lane_f32(_S0, v208, 2);
            *(float *)(result + 12 * a7) = vmuls_lane_f32(_S0, v208, 3);
            v144 += 4;
            v183 = (float32x4_t *)((char *)v183 + v184);
            v185 = (float32x4_t *)((char *)v185 + v184);
            v186 = (float32x4_t *)((char *)v186 + v184);
            v189 = (float32x4_t *)((char *)v189 + v184);
          }
          while ((v144 | 3) < a2);
        }
        if ((v144 | 1) < a2)
        {
          v217 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v218 = 8 * v10;
          v219 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (float32x4_t *)a5;
            v223 = v219;
            v224 = v217;
            for (result = v190; result > 4; result -= 4)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f32(v221, v226, v227);
              v228 = *v224++;
              v220 = vmlaq_f32(v220, v226, v228);
            }
            v229 = &a6[v144 * a7];
            v230 = vpaddq_f32(vaddq_f32(v221, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180)))), vaddq_f32(v220, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180 + 4 * v10)))));
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            *v229 = _S0 * v230.f32[0];
            v229[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v230.f32, 1);
            v144 += 2;
            v217 = (float32x4_t *)((char *)v217 + v218);
            v219 = (float32x4_t *)((char *)v219 + v218);
          }
          while ((v144 | 1) < a2);
        }
        if (v144 < a2)
        {
          v231 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v232 = 0uLL;
            v233 = (float32x4_t *)a5;
            v234 = v231;
            for (m = v190; m > 4; m -= 4)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f32(v232, v237, v238);
            }
            v239 = (int8x16_t)vaddq_f32(v232, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180))));
            a6[v144 * a7] = vaddv_f32(vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL)))* _S0;
            ++v144;
            v231 = (float32x4_t *)((char *)v231 + 4 * v10);
          }
          while (v144 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v109 = *(float32x4_t *)a5;
        v110 = *(float32x4_t *)(a5 + 4 * result - 16);
        v111 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (8 - result)));
        do
        {
          v112 = (int8x16_t)vaddq_f32(vmulq_f32(v110, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v109, *v11), v111));
          *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) * _S0;
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * v10);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v108 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = vaddv_f32(vmul_f32(v108, *(float32x2_t *)v11->f32)) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v141 = *(float32x2_t *)(a5 + 4);
        v142 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = vaddv_f32(vadd_f32(vmul_f32(v141, *v142), (float32x2_t)vmul_f32(v108, *(float32x2_t *)((char *)v142 - 4)).u32[0]))* _S0;
          a6 += a7;
          v142 = (float32x2_t *)((char *)v142 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v14 = *(float *)a5;
      do
      {
        *a6 = (float)(v14 * v11->f32[0]) * _S0;
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 3)
    {
      v114 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v115 = *(float32x4_t *)a5;
          do
          {
            v116 = (int8x16_t)vmulq_f32(v115, *v11);
            *a6 = -(float)(*a6
                         - (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v247 = *(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (4 - (-(int)result & 3)));
        v443 = result - 4;
        v248 = 0;
        if (a2 >= 8)
        {
          v249 = 4 * a4;
          v451 = (float32x4_t *)(a5 + 4 * v114);
          v250 = v114 + 2 * a4;
          v251 = v114 + 4 * a4;
          v447 = 32 * a4;
          v252 = 4 * v114;
          v253 = 4 * (v114 + a4);
          v254 = 4 * v250;
          v255 = 4 * (v250 + a4);
          v256 = 4 * v251;
          v257 = 4 * (v251 + a4);
          v258 = 4 * (v114 + 6 * a4);
          v259 = 4 * (v114 - a4 + 8 * a4);
          v260 = v11;
          do
          {
            v261 = 0uLL;
            v262 = 0uLL;
            v263 = v10;
            v264 = &v11->i8[4 * v248 * v10];
            v265 = a5;
            v266 = v260;
            v267 = v12;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = 0uLL;
            do
            {
              v274 = *(float32x4_t *)a5;
              a5 += 16;
              v261 = vmlaq_f32(v261, v274, *v266);
              v262 = vmlaq_f32(v262, v274, *(float32x4_t *)((char *)v266 + v249));
              v275 = (float32x4_t *)((char *)v266 + v249 + v249);
              v268 = vmlaq_f32(v268, v274, *v275);
              v276 = (float32x4_t *)((char *)v275 + v249);
              v273 = vmlaq_f32(v273, v274, *v276);
              v277 = (float32x4_t *)((char *)v276 + v249);
              v272 = vmlaq_f32(v272, v274, *v277);
              v278 = (float32x4_t *)((char *)v277 + v249);
              v271 = vmlaq_f32(v271, v274, *v278);
              v279 = (float32x4_t *)((char *)v278 + v249);
              v270 = vmlaq_f32(v270, v274, *v279);
              v269 = vmlaq_f32(v269, v274, *(float32x4_t *)((char *)v279 + v249));
              v267 -= 4;
              ++v266;
            }
            while (v267 > 4);
            v280 = &a6[v248 * a7];
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v261, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v252]))), vaddq_f32(v262, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v253])))), vpaddq_f32(vaddq_f32(v268, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v254]))), vaddq_f32(v273, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v255])))));
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v272, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v256]))), vaddq_f32(v271, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v257])))), vpaddq_f32(vaddq_f32(v270, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v258]))), vaddq_f32(v269, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v259])))));
            *v280 = vmlas_n_f32(-*v280, _S0, _Q6.f32[0]);
            __asm { FMLA            S3, S0, V6.S[1] }
            v280[a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[2] }
            v280[2 * a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[3] }
            v280[3 * a7] = _S3;
            v280[4 * a7] = vmlas_n_f32(-v280[4 * a7], _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v280[5 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            v280[6 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            v280[7 * a7] = _S3;
            v248 += 8;
            result = v248 | 7;
            v260 = (float32x4_t *)((char *)v260 + v447);
            v10 = v263;
            a5 = v265;
          }
          while ((v248 | 7) < a2);
        }
        if ((v248 | 3) >= a2)
        {
          v289 = v443;
        }
        else
        {
          v289 = v443;
          v291 = v443 + 2 * v10;
          v292 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 12));
          v293 = 16 * v10;
          v294 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 8));
          v295 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v296 = 4 * v291;
          v297 = 4 * (v291 + v10);
          v298 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = 0uLL;
            if (v12 >= 5)
            {
              v303 = (float32x4_t *)a5;
              v304 = v298;
              v305 = v295;
              v306 = v294;
              v307 = v292;
              for (n = v12; n > 4; n -= 4)
              {
                v309 = *v303++;
                v310 = v309;
                v311 = *v304++;
                v302 = vmlaq_f32(v302, v310, v311);
                v312 = *v305++;
                v301 = vmlaq_f32(v301, v310, v312);
                v313 = *v306++;
                v300 = vmlaq_f32(v300, v310, v313);
                v314 = *v307++;
                v299 = vmlaq_f32(v299, v310, v314);
              }
            }
            v315 = &v11->i8[4 * v248 * v10];
            result = (uint64_t)&a6[v248 * a7];
            v290 = (float32x4_t *)(a5 + 4 * v443);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v302, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443]))), vaddq_f32(v301, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443 + 4 * v10])))), vpaddq_f32(vaddq_f32(v300, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v296]))), vaddq_f32(v299, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v297])))));
            *(float *)result = vmlas_n_f32(-*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v248 += 4;
            v292 = (float32x4_t *)((char *)v292 + v293);
            v294 = (float32x4_t *)((char *)v294 + v293);
            v295 = (float32x4_t *)((char *)v295 + v293);
            v298 = (float32x4_t *)((char *)v298 + v293);
          }
          while ((v248 | 3) < a2);
        }
        if ((v248 | 1) < a2)
        {
          v395 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v396 = 8 * v10;
          v397 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v398 = 0uLL;
            v399 = 0uLL;
            if (v12 >= 5)
            {
              v400 = (float32x4_t *)a5;
              v401 = v397;
              v402 = v395;
              for (result = v12; result > 4; result -= 4)
              {
                v403 = *v400++;
                v404 = v403;
                v405 = *v401++;
                v399 = vmlaq_f32(v399, v404, v405);
                v406 = *v402++;
                v398 = vmlaq_f32(v398, v404, v406);
              }
            }
            v407 = &a6[v248 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v399, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289)))), vaddq_f32(v398, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v407 = vmlas_n_f32(-*v407, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v407[a7] = _S3;
            v248 += 2;
            v395 = (float32x4_t *)((char *)v395 + v396);
            v397 = (float32x4_t *)((char *)v397 + v396);
          }
          while ((v248 | 1) < a2);
        }
        if (v248 < a2)
        {
          v410 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v411 = 0uLL;
            if (v12 >= 5)
            {
              v412 = (float32x4_t *)a5;
              v413 = v410;
              for (ii = v12; ii > 4; ii -= 4)
              {
                v415 = *v412++;
                v416 = v415;
                v417 = *v413++;
                v411 = vmlaq_f32(v411, v416, v417);
              }
            }
            v418 = (int8x16_t)vaddq_f32(v411, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289))));
            a6[v248 * a7] = -(float)(a6[v248 * a7]
                                   - (float)(_S0
                                           * vaddv_f32(vadd_f32(*(float32x2_t *)v418.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL)))));
            ++v248;
            v410 = (float32x4_t *)((char *)v410 + 4 * v10);
          }
          while (v248 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v213 = *(float32x4_t *)a5;
        v214 = *(float32x4_t *)(a5 + 4 * result - 16);
        v215 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (8 - result)));
        do
        {
          v216 = (int8x16_t)vaddq_f32(vmulq_f32(v214, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v213, *v11), v215));
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL)))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v212 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = -(float)(*a6 - (float)(_S0 * vaddv_f32(vmul_f32(v212, *(float32x2_t *)v11->f32))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v245 = *(float32x2_t *)(a5 + 4);
        v246 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(vmul_f32(v245, *v246), (float32x2_t)vmul_f32(v212, *(float32x2_t *)((char *)v246 - 4)).u32[0]))));
          a6 += a7;
          v246 = (float32x2_t *)((char *)v246 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v23 = *(float *)a5;
      do
      {
        *a6 = -(float)(*a6 - (float)(_S0 * (float)(v23 * v11->f32[0])));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 3)
  {
    v209 = result - 4;
    if (result == 4)
    {
      if (a2 >= 1)
      {
        v210 = *(float32x4_t *)a5;
        do
        {
          v211 = (int8x16_t)vmulq_f32(v210, *v11);
          *a6 = (float)(*a6 * a9)
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v211.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 8)
    {
      v322 = *(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (4 - (-(int)result & 3)));
      v323 = 4 * a4;
      v444 = result - 4;
      v324 = 0;
      if (a2 >= 8)
      {
        v452 = (float32x4_t *)(a5 + 4 * v209);
        v325 = v209 + 2 * a4;
        v326 = v209 + 4 * a4;
        v448 = 32 * a4;
        v327 = 4 * v209;
        v328 = 4 * (v209 + a4);
        v329 = 4 * v325;
        v330 = 4 * (v325 + a4);
        v331 = 4 * v326;
        v332 = 4 * (v326 + a4);
        v333 = 4 * (v209 + 6 * a4);
        v334 = 4 * (v209 - a4 + 8 * a4);
        v335 = v11;
        do
        {
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = v10;
          v339 = &v11->i8[4 * v324 * v10];
          v340 = a5;
          v341 = v335;
          v342 = v12;
          v343 = 0uLL;
          v344 = 0uLL;
          v345 = 0uLL;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          do
          {
            v349 = *(float32x4_t *)a5;
            a5 += 16;
            v336 = vmlaq_f32(v336, v349, *v341);
            v337 = vmlaq_f32(v337, v349, *(float32x4_t *)((char *)v341 + v323));
            v350 = (float32x4_t *)((char *)v341 + v323 + v323);
            v343 = vmlaq_f32(v343, v349, *v350);
            v351 = (float32x4_t *)((char *)v350 + v323);
            v348 = vmlaq_f32(v348, v349, *v351);
            v352 = (float32x4_t *)((char *)v351 + v323);
            v347 = vmlaq_f32(v347, v349, *v352);
            v353 = (float32x4_t *)((char *)v352 + v323);
            v346 = vmlaq_f32(v346, v349, *v353);
            v354 = (float32x4_t *)((char *)v353 + v323);
            v345 = vmlaq_f32(v345, v349, *v354);
            v344 = vmlaq_f32(v344, v349, *(float32x4_t *)((char *)v354 + v323));
            v342 -= 4;
            ++v341;
          }
          while (v342 > 4);
          v355 = &a6[v324 * a7];
          _Q7 = vpaddq_f32(vpaddq_f32(vaddq_f32(v336, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v327]))), vaddq_f32(v337, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v328])))), vpaddq_f32(vaddq_f32(v343, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v329]))), vaddq_f32(v348, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v330])))));
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v347, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v331]))), vaddq_f32(v346, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v332])))), vpaddq_f32(vaddq_f32(v345, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v333]))), vaddq_f32(v344, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v334])))));
          *v355 = vmlas_n_f32(*v355 * a9, _S0, _Q7.f32[0]);
          __asm { FMLA            S4, S0, V7.S[1] }
          v355[a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[2] }
          v355[2 * a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[3] }
          v355[3 * a7] = _S4;
          v355[4 * a7] = vmlas_n_f32(v355[4 * a7] * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v355[5 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          v355[6 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          v355[7 * a7] = _S4;
          v324 += 8;
          result = v324 | 7;
          v335 = (float32x4_t *)((char *)v335 + v448);
          v10 = v338;
          a5 = v340;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v364 = v444;
      }
      else
      {
        v364 = v444;
        v366 = v444 + 2 * v10;
        v367 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 12));
        v368 = 16 * v10;
        v369 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 8));
        v370 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 4));
        v371 = 4 * v366;
        v372 = 4 * (v366 + v10);
        v373 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v374 = 0uLL;
          v375 = 0uLL;
          v376 = 0uLL;
          v377 = 0uLL;
          if (v12 >= 5)
          {
            v378 = (float32x4_t *)a5;
            v379 = v373;
            v380 = v370;
            v381 = v369;
            v382 = v367;
            for (jj = v12; jj > 4; jj -= 4)
            {
              v384 = *v378++;
              v385 = v384;
              v386 = *v379++;
              v377 = vmlaq_f32(v377, v385, v386);
              v387 = *v380++;
              v376 = vmlaq_f32(v376, v385, v387);
              v388 = *v381++;
              v375 = vmlaq_f32(v375, v385, v388);
              v389 = *v382++;
              v374 = vmlaq_f32(v374, v385, v389);
            }
          }
          v390 = &v11->i8[4 * v324 * v10];
          result = (uint64_t)&a6[v324 * a7];
          v365 = (float32x4_t *)(a5 + 4 * v444);
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v377, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444]))), vaddq_f32(v376, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444 + 4 * v10])))), vpaddq_f32(vaddq_f32(v375, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v371]))), vaddq_f32(v374, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v372])))));
          *(float *)result = vmlas_n_f32(*(float *)result * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          *(_DWORD *)(result + 4 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          *(_DWORD *)(result + 8 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          *(_DWORD *)(result + 12 * a7) = _S4;
          v324 += 4;
          v367 = (float32x4_t *)((char *)v367 + v368);
          v369 = (float32x4_t *)((char *)v369 + v368);
          v370 = (float32x4_t *)((char *)v370 + v368);
          v373 = (float32x4_t *)((char *)v373 + v368);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v419 = (char *)v11 + v10 * (4 * v324 + 4);
        v420 = 8 * v10;
        v421 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v422 = 0uLL;
          v423 = 0uLL;
          if (v12 >= 5)
          {
            v424 = (float32x4_t *)a5;
            v425 = v421;
            result = (uint64_t)v419;
            for (kk = v12; kk > 4; kk -= 4)
            {
              v427 = *v424++;
              v428 = v427;
              v429 = *v425++;
              v423 = vmlaq_f32(v423, v428, v429);
              v430 = *(float32x4_t *)result;
              result += 16;
              v422 = vmlaq_f32(v422, v428, v430);
            }
          }
          v431 = &a6[v324 * a7];
          _Q3 = vpaddq_f32(vaddq_f32(v423, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364)))), vaddq_f32(v422, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364 + 4 * v10)))));
          _Q3.i64[0] = vpaddq_f32(_Q3, _Q3).u64[0];
          *v431 = vmlas_n_f32(*v431 * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v431[a7] = _S4;
          v324 += 2;
          v419 += v420;
          v421 = (float32x4_t *)((char *)v421 + v420);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v434 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v435 = 0uLL;
          if (v12 >= 5)
          {
            v436 = (float32x4_t *)a5;
            v437 = v434;
            for (mm = v12; mm > 4; mm -= 4)
            {
              v439 = *v436++;
              v440 = v439;
              v441 = *v437++;
              v435 = vmlaq_f32(v435, v440, v441);
            }
          }
          v442 = (int8x16_t)vaddq_f32(v435, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364))));
          a6[v324 * a7] = (float)(a6[v324 * a7] * a9)
                        + (float)(_S0
                                * vaddv_f32(vadd_f32(*(float32x2_t *)v442.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL))));
          ++v324;
          v434 = (float32x4_t *)((char *)v434 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v241 = *(float32x4_t *)a5;
      v242 = *(float32x4_t *)(a5 + 4 * result - 16);
      v243 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC00 + 4 * (8 - result)));
      do
      {
        v244 = (int8x16_t)vaddq_f32(vmulq_f32(v242, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v241, *v11), v243));
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(*(float32x2_t *)v244.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL))));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v240 = *(float32x2_t *)a5;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        do
        {
          *a6 = (float)(*a6 * a9) + (float)(_S0 * vaddv_f32(vmul_f32(v240, *(float32x2_t *)v11->f32)));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v320 = *(float32x2_t *)(a5 + 4);
      v321 = (float32x2_t *)(a3 + 4);
      do
      {
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(vmul_f32(v320, *v321), (float32x2_t)vmul_f32(v240, *(float32x2_t *)((char *)v321 - 4)).u32[0])));
        a6 += a7;
        v321 = (float32x2_t *)((char *)v321 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v113 = *(float *)a5;
    do
    {
      *a6 = (float)(*a6 * a9) + (float)(_S0 * (float)(v113 * v11->f32[0]));
      a6 += a7;
      v11 = (float32x4_t *)((char *)v11 + 4 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

