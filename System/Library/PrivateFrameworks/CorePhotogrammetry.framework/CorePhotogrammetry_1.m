void sub_239474644(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_239474658(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_QWORD *)v10 + 2) == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_QWORD *)v10 + 2) == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(_QWORD *)v10 = *v17;
LABEL_61:
      *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v17)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239474984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239474998(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_2394749E4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239474CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474D04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239474D04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  void *v7;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v6 = (_QWORD *)*v3;
          v7 = (void *)v3[3];
          if (v7)
          {
            v3[4] = v7;
            operator delete(v7);
          }
          operator delete(v3);
          v3 = v6;
        }
        while (v6);
      }
      v4 = (void *)v2[3];
      v2[3] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_239474D88(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 38) = 0;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2394750A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2394750BC(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_23:
      sub_2394189F8();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

char *sub_239475234(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return (char *)v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return (char *)v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0x48uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = **a4;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *(_QWORD *)v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239475554(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239475568(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  unsigned int *v16;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      if (v8 != a2)
        sub_2394750BC(v8 + 3, (char *)a2[3], (char *)a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 2));
      v8[6] = a2[6];
      v9 = *(_OWORD *)(a2 + 7);
      v10 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v8 + 11) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v8 + 9) = v10;
      *(_OWORD *)(v8 + 7) = v9;
      v11 = *(_OWORD *)(a2 + 13);
      v12 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v8 + 17) = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v8 + 15) = v12;
      *(_OWORD *)(v8 + 13) = v11;
      *((_DWORD *)v8 + 38) = *((_DWORD *)a2 + 38);
      v13 = (uint64_t *)*v8;
      sub_23943604C(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v13;
      if (!v13)
        goto LABEL_9;
    }
    do
    {
      v14 = (uint64_t *)*v8;
      v15 = (void *)v8[3];
      if (v15)
      {
        v8[4] = (uint64_t)v15;
        operator delete(v15);
      }
      operator delete(v8);
      v8 = v14;
    }
    while (v14);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_23947570C((uint64_t)a1, (unsigned int *)a2 + 4, (uint64_t)&v16);
      sub_23943604C(a1, v16);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2394756BC(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_23946DA88(v1, v2);
  __cxa_rethrow();
}

void sub_2394756D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2394756EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
  {
    sub_239EBF318((uint64_t)&a10, v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394756E0);
}

float sub_23947570C@<S0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  float result;

  v5 = a1 + 16;
  v6 = (char *)operator new(0xA0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = *a2;
  *((_QWORD *)v6 + 3) = 0;
  *((_DWORD *)v6 + 4) = v7;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 1);
  v8 = (_BYTE *)*((_QWORD *)a2 + 2);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 >> 2) >= 0x1555555555555556)
      sub_2394189F8();
    v11 = (char *)operator new(v10);
    *((_QWORD *)v6 + 3) = v11;
    *((_QWORD *)v6 + 4) = v11;
    v12 = &v11[4 * (v10 >> 2)];
    *((_QWORD *)v6 + 5) = v12;
    memcpy(v11, v9, v10);
    *((_QWORD *)v6 + 4) = v12;
  }
  *((_QWORD *)v6 + 6) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 10);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 14);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a2 + 18);
  *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 + 22);
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a2 + 26);
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(a2 + 30);
  result = *((float *)a2 + 34);
  *((float *)v6 + 38) = result;
  *(_BYTE *)(a3 + 16) = 1;
  *((_QWORD *)v6 + 1) = v7;
  return result;
}

void sub_239475824(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_239474998(v1);
  _Unwind_Resume(a1);
}

void sub_23947584C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239475860(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADC188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239475898(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float sub_2394758B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::chrono::system_clock::time_point v3;
  float result;
  rusage v5;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v8;

  v1 = *(uint64_t **)(a1 + 8);
  if (*((_BYTE *)v1 + 8))
  {
    v2 = *v1;
    v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)(v2 + 200) = v3;
    *(double *)(v2 + 208) = (double)(v3.__d_.__rep_ - *(_QWORD *)(v2 + 192)) / 1000000.0;
    task_info_outCnt = 93;
    if (!task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt))
      *(float *)(v2 + 224) = (float)((float)v8 * 0.00097656) * 0.00097656;
    *(_BYTE *)(v2 + 256) = 0;
    getrusage(0, &v5);
    result = (float)((float)v5.ru_maxrss * 0.00097656) * 0.00097656;
    *(float *)(v2 + 216) = result;
  }
  return result;
}

_QWORD *sub_239475984(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239475CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239475CB4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239475FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239475FE4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

void sub_239475FF4()
{
  void *v0;

  operator delete(v0);
}

BOOL sub_239476008(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v5;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23[3];
  unint64_t v24;
  unint64_t v25;

  v25 = a2;
  v5 = a1[1] - *a1;
  if (v5 % a2)
    sub_239EBF34C();
  v24 = v5 / a2;
  sub_239476EC0((uint64_t)a1, (uint64_t *)&v24, (uint64_t *)&v25, v23);
  v9 = *(_OWORD *)v23;
  *(_OWORD *)v23 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a4 + 8);
  *(_OWORD *)a4 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v23[1];
  if (v23[1])
  {
    v14 = (unint64_t *)(v23[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)a4;
  v23[0] = a3;
  v17 = operator new(0xB0uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_250ADC238;
  v18 = sub_2394770B8((uint64_t)(v17 + 3), v25, v16, v23);
  v19 = (std::__shared_weak_count *)a5[1];
  *a5 = v18;
  a5[1] = (uint64_t)v17;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_239476190(*a5);
  return *a5 != 0;
}

void sub_239476178(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_239476190(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;

  v2 = *(int *)(*(_QWORD *)(a1 + 128) + 24);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v2;
  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (v2 != v3)
  {
    if (v2 <= v3)
    {
      if (v2 < v3)
        *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * v2;
    }
    else
    {
      sub_23946DAD4(a1, v2 - v3);
      v2 = *(_QWORD *)(a1 + 40);
    }
  }
  if (v2)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    do
    {
      *(_QWORD *)(v5 + 8 * v4) = v4;
      ++v4;
      v2 = *(_QWORD *)(a1 + 40);
    }
    while (v4 < v2);
  }
  result = *(_QWORD **)(a1 + 96);
  if (result)
  {
    do
    {
      v7 = (_QWORD *)*result;
      free(result);
      *(_QWORD *)(a1 + 96) = v7;
      result = v7;
    }
    while (v7);
    v2 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    sub_239477184(a1, (void **)(a1 + 64));
    result = sub_23947739C(a1, a1, 0, *(_QWORD *)(a1 + 40), a1 + 64);
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

BOOL sub_239476270(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  unint64_t v9;
  unint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::thread *v39;
  uint64_t v40;
  std::thread *v41;
  std::thread *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  char *v49;
  std::thread *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  std::thread *v57;
  char *v58;
  std::thread *v59;
  uint64_t v60;
  __int128 v61;
  _opaque_pthread_t *t;
  std::thread *v63;
  std::thread *v64;
  std::thread *v65;
  std::thread *v66;
  std::thread *v67;
  void **p_p;
  uint64_t v69;
  uint64_t v71;
  std::thread v72;
  uint64_t v73;
  std::thread *v74;
  std::thread *v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *__p;
  char *v85;
  char *v86;
  void **v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v81 = a3;
  v82 = a2;
  v6 = *a5;
  if (!*a5)
    return v6 != 0;
  if (!a4)
    sub_239EBF37C();
  v71 = *a5;
  v9 = a1[1] - *a1;
  v10 = v9 / a2;
  if (v9 % a2)
    sub_239EBF3AC();
  v15 = *a6;
  v14 = a6[1];
  if (v14 != *a6)
  {
    v16 = a6[1];
    do
    {
      v18 = *(void **)(v16 - 24);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *(_QWORD *)(v14 - 16) = v17;
        operator delete(v17);
      }
      v14 = v16;
    }
    while (v16 != v15);
  }
  a6[1] = v15;
  __p = 0;
  v85 = 0;
  v86 = 0;
  if (a3)
  {
    if (a3 >= 0x1555555555555556)
      sub_2394189F8();
    v19 = (char *)operator new(12 * a3);
    __p = v19;
    v86 = &v19[12 * a3];
    v20 = 12 * ((12 * a3 - 12) / 0xC) + 12;
    bzero(v19, v20);
    v85 = &v19[v20];
  }
  else
  {
    v19 = 0;
  }
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a6) >> 3);
  if (v10 <= v21)
  {
    if (v10 < v21)
    {
      v22 = *a6 + 24 * v10;
      if (v15 != v22)
      {
        v23 = v15;
        do
        {
          v25 = *(void **)(v23 - 24);
          v23 -= 24;
          v24 = v25;
          if (v25)
          {
            *(_QWORD *)(v15 - 16) = v24;
            operator delete(v24);
          }
          v15 = v23;
        }
        while (v23 != v22);
      }
      a6[1] = v22;
    }
  }
  else
  {
    sub_23942A264(a6, v10 - v21, (uint64_t)&__p);
    v19 = (char *)__p;
  }
  if (v19)
  {
    v85 = v19;
    operator delete(v19);
  }
  *(_QWORD *)&v77 = a1;
  *((_QWORD *)&v77 + 1) = &v82;
  *(_QWORD *)&v78 = &v81;
  *((_QWORD *)&v78 + 1) = a6;
  v27 = *a5;
  v26 = (std::__shared_weak_count *)a5[1];
  v79 = v27;
  v80 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  v87 = 0;
  v30 = (char *)operator new(0x38uLL);
  *(_QWORD *)v30 = &off_250ADC270;
  v31 = v78;
  *(_OWORD *)(v30 + 8) = v77;
  *(_OWORD *)(v30 + 24) = v31;
  *((_QWORD *)v30 + 5) = v27;
  *((_QWORD *)v30 + 6) = v26;
  if (v26)
  {
    v32 = (unint64_t *)&v26->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v87 = (void **)v30;
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    if (a4 == 1)
      goto LABEL_35;
  }
  else
  {
    v87 = (void **)v30;
    if (a4 == 1)
    {
LABEL_35:
      v74 = 0;
      v83 = v10;
      if (!v87)
        sub_2394172E0();
      (*((void (**)(void **, std::thread **, unint64_t *))*v87 + 6))(v87, &v74, &v83);
      goto LABEL_79;
    }
  }
  v35 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v36 = a4 - 1;
  if (a4 <= 1)
    v37 = 1;
  else
    v37 = a4;
  v38 = v10 / a4;
  do
  {
    v83 = v35 * v38;
    v40 = v35 * v38 + v38;
    if (v35 == v36)
      v40 = v10;
    v73 = v40;
    sub_239478C3C(&v72.__t_, &__p, &v83, &v73);
    v41 = v75;
    if ((unint64_t)v75 < v76)
    {
      v75->__t_ = v72.__t_;
      v72.__t_ = 0;
      v39 = v41 + 1;
      goto LABEL_43;
    }
    v42 = v74;
    v43 = (char *)((char *)v75 - (char *)v74);
    v44 = v75 - v74;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      sub_2394189F8();
    v46 = v76 - (_QWORD)v74;
    if ((uint64_t)(v76 - (_QWORD)v74) >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v48 = 0uLL;
    if (v47)
    {
      if (v47 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v47);
      v48 = 0uLL;
    }
    else
    {
      v49 = 0;
    }
    v50 = (std::thread *)&v49[8 * v44];
    v51 = &v49[8 * v47];
    v50->__t_ = v72.__t_;
    v39 = v50 + 1;
    v72.__t_ = 0;
    v52 = (char *)((char *)v41 - (char *)v42);
    if (v41 == v42)
    {
      v74 = (std::thread *)&v49[8 * v44];
      v75 = v50 + 1;
      v76 = (unint64_t)v51;
      if (!v41)
        goto LABEL_43;
LABEL_70:
      operator delete(v41);
      goto LABEL_43;
    }
    v53 = v52 - 8;
    if ((unint64_t)(v52 - 8) < 0x78)
      goto LABEL_94;
    v54 = (unint64_t)v53 >> 3;
    if (&v43[(_QWORD)v49 - ((unint64_t)v53 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v41 && &v41[-v54 - 1] < v50)
      goto LABEL_94;
    v55 = v54 + 1;
    v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
    v57 = &v41[v56 / 0xFFFFFFFFFFFFFFF8];
    v50 = (std::thread *)((char *)v50 - v56);
    v58 = &v49[8 * v44 - 16];
    v59 = v41 - 2;
    v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v61 = *(_OWORD *)&v59->__t_;
      *((_OWORD *)v58 - 1) = *(_OWORD *)&v59[-2].__t_;
      *(_OWORD *)v58 = v61;
      *(_OWORD *)&v59[-2].__t_ = v48;
      *(_OWORD *)&v59->__t_ = v48;
      v58 -= 32;
      v59 -= 4;
      v60 -= 4;
    }
    while (v60);
    v41 = v57;
    if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        t = v41[-1].__t_;
        --v41;
        v50[-1].__t_ = t;
        --v50;
        v41->__t_ = 0;
      }
      while (v41 != v42);
    }
    v41 = v74;
    v63 = v75;
    v74 = v50;
    v75 = v39;
    v76 = (unint64_t)v51;
    while (v63 != v41)
      std::thread::~thread(v63 - 1);
    if (v41)
      goto LABEL_70;
LABEL_43:
    v75 = v39;
    std::thread::~thread(&v72);
    ++v35;
  }
  while (v35 != v37);
  v64 = v74;
  v65 = v75;
  if (v74 != v75)
  {
    do
      std::thread::join(v64++);
    while (v64 != v65);
    v64 = v74;
  }
  if (v64)
  {
    v66 = v75;
    v67 = v64;
    if (v75 != v64)
    {
      do
        std::thread::~thread(v66 - 1);
      while (v66 != v64);
      v67 = v74;
    }
    v75 = v64;
    operator delete(v67);
  }
LABEL_79:
  p_p = v87;
  if (v87 == &__p)
  {
    v69 = 4;
    p_p = &__p;
LABEL_83:
    (*((void (**)(void))*p_p + v69))();
  }
  else if (v87)
  {
    v69 = 5;
    goto LABEL_83;
  }
  v6 = v71;
  return v6 != 0;
}

void sub_2394767CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::thread a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239476880(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_2394768E8(_QWORD *a1, int a2, char a3, int a4, float a5)
{
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_250ADC1D0;
  a1[1] = 0;
  a1[2] = sub_239476EA4;
  v10 = operator new();
  *(_QWORD *)v10 = 0x3F4CCCCD00000000;
  *(_BYTE *)(v10 + 8) = 1;
  *(_WORD *)(v10 + 9) = 0;
  *(_BYTE *)(v10 + 11) = 0;
  *(_DWORD *)(v10 + 12) = 1;
  *(_QWORD *)(v10 + 16) = 100;
  v11 = a1[1];
  a1[1] = v10;
  if (v11)
  {
    ((void (*)(uint64_t))a1[2])(v11);
    v10 = a1[1];
  }
  a1[2] = sub_239476EA4;
  *(_DWORD *)v10 = a2;
  *(float *)(v10 + 4) = a5;
  *(_BYTE *)(v10 + 8) = a3;
  *(_DWORD *)(v10 + 12) = a4;
  return a1;
}

void sub_2394769BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 16))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394769E0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADC1D0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_239476A20(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADC1D0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239476A70(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int *v7;
  float v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  char *v31;
  void *v32;
  void *v33;
  char *v35;
  char *v36;
  void *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *__p;
  char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  char *v61[3];
  char *v62[3];

  v7 = *(unsigned int **)(a1 + 8);
  v8 = *((float *)v7 + 1);
  v9 = *((unsigned __int8 *)v7 + 8);
  v10 = v7[3];
  v11 = *((_QWORD *)v7 + 2);
  v12 = *v7;
  sub_239429CA8(a2, 0, v62);
  sub_239429CA8(a3, 0, v61);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  sub_23942C8A8(a2, (uint64_t)&v58, 0, 0);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  sub_23942C8A8(a3, (uint64_t)&v55, 0, 0);
  __p = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  if (!sub_239476008(&v55, v12, v11, (uint64_t)&v48, &v44)
    || !sub_239476270(&v58, v12, 2uLL, v10, &v44, (uint64_t *)&__p))
  {
    v15 = 0;
    goto LABEL_8;
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (!v9)
  {
    v13 = 0;
    v14 = 0;
LABEL_48:
    sub_23943EFB8(v62, v61, (uint64_t *)&__p, a4, v13, v14, v8);
    v15 = 1;
    v35 = (char *)v41;
    if (!v41)
      goto LABEL_8;
    goto LABEL_49;
  }
  if (sub_239476008(&v58, v12, v11, (uint64_t)&v50, &v46) && sub_239476270(&v55, v12, 1uLL, v10, &v46, (uint64_t *)&v41))
  {
    v13 = &v41;
    v14 = 1;
    goto LABEL_48;
  }
  v15 = 0;
  v35 = (char *)v41;
  if (!v41)
    goto LABEL_8;
LABEL_49:
  v36 = v42;
  v37 = v35;
  if (v42 != v35)
  {
    v38 = v42;
    do
    {
      v40 = (void *)*((_QWORD *)v38 - 3);
      v38 -= 24;
      v39 = v40;
      if (v40)
      {
        *((_QWORD *)v36 - 2) = v39;
        operator delete(v39);
      }
      v36 = v38;
    }
    while (v38 != v35);
    v37 = v41;
  }
  v42 = v35;
  operator delete(v37);
LABEL_8:
  v16 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v47;
  if (v47)
  {
    v20 = (unint64_t *)&v47->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v49;
  if (v49)
  {
    v23 = (unint64_t *)&v49->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v51;
  if (v51)
  {
    v26 = (unint64_t *)&v51->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (char *)__p;
  if (__p)
  {
    v29 = v53;
    v30 = __p;
    if (v53 != __p)
    {
      v31 = v53;
      do
      {
        v33 = (void *)*((_QWORD *)v31 - 3);
        v31 -= 24;
        v32 = v33;
        if (v33)
        {
          *((_QWORD *)v29 - 2) = v32;
          operator delete(v32);
        }
        v29 = v31;
      }
      while (v31 != v28);
      v30 = __p;
    }
    v53 = v28;
    operator delete(v30);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  return v15;
}

void sub_239476DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;

  sub_23942A16C((void **)&a9);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  sub_239416DA0((uint64_t)&a16);
  sub_239416DA0((uint64_t)&a18);
  sub_23942A16C(&a20);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
    v29 = a26;
    if (!a26)
    {
LABEL_3:
      v30 = *(void **)(v27 - 128);
      if (!v30)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v29 = a26;
    if (!a26)
      goto LABEL_3;
  }
  a27 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v27 - 128);
  if (!v30)
  {
LABEL_4:
    v31 = *(void **)(v27 - 104);
    if (!v31)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v27 - 120) = v30;
  operator delete(v30);
  v31 = *(void **)(v27 - 104);
  if (!v31)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  *(_QWORD *)(v27 - 96) = v31;
  operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_239476E98(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 8) + 4) = a2;
  return result;
}

uint64_t sub_239476EA4(uint64_t result)
{
  if (result)
    JUMPOUT(0x23B83E31CLL);
  return result;
}

_QWORD *sub_239476EC0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  char *v16;
  char *v17;

  result = operator new(0x38uLL);
  v9 = result;
  result[3] = 0;
  v10 = result + 3;
  result[1] = 0;
  result[2] = 0;
  *result = &off_250ADC200;
  v11 = *a2;
  v12 = *a3;
  result[4] = 0;
  result[5] = 0;
  v14 = *(const void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v15 = v13 - *(_QWORD *)a1;
  if (v13 != *(_QWORD *)a1)
  {
    if ((v15 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v16 = (char *)operator new(v13 - *(_QWORD *)a1);
    v9[3] = v16;
    v17 = &v16[v15];
    v9[5] = &v16[v15];
    result = memcpy(v16, v14, v15);
    v9[4] = v17;
  }
  *((_DWORD *)v9 + 12) = v11;
  *((_DWORD *)v9 + 13) = v12;
  *a4 = v10;
  a4[1] = v9;
  return result;
}

void sub_239476F78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_239476FA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239476FB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239476FE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_239476FFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23947700C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23947703C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  v2 = a1 + 14;
  v3 = (_QWORD *)a1[15];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      free(v3);
      a1[15] = v4;
      v3 = v4;
    }
    while (v4);
  }
  *v2 = 0;
  v2[1] = 0;
  a1[17] = 0;
  a1[18] = 0;
  v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
}

uint64_t sub_2394770B8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = *a4;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = a3;
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v7;
  if ((_DWORD)v7)
  {
    sub_23946DAD4(a1, v7);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = 0;
      v9 = *(_QWORD *)a1;
      do
      {
        *(_QWORD *)(v9 + 8 * v8) = v8;
        ++v8;
      }
      while (v8 < *(_QWORD *)(a1 + 40));
    }
  }
  return a1;
}

void sub_239477148(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(v1 + 96);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      free(v3);
      *(_QWORD *)(v1 + 96) = v4;
      v3 = v4;
    }
    while (v4);
  }
  sub_239EBF3DC((_QWORD *)(v1 + 88), (_QWORD *)(v1 + 112), (void **)(v1 + 64), v1);
  _Unwind_Resume(a1);
}

void sub_239477184(uint64_t a1, void **a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t i;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  char *v26;
  int8x16_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int8x8_t *v31;
  char *v32;
  uint64_t v33;
  int8x8_t v34;
  void *exception;
  int8x8x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v4 = *(int *)(a1 + 56);
  v5 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 1;
  if (v4 <= v5)
  {
    if (v4 < v5)
      a2[1] = (char *)*a2 + 2 * v4;
  }
  else
  {
    sub_239477978(a2, v4 - v5);
  }
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(int *)(v6 + 24);
  if (!(_DWORD)v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] computeBoundingBox() called but no data points found.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 < 1)
    return;
  v9 = *(_QWORD *)v6;
  v10 = (char *)*a2;
  if (v8 < 8
    || ((unint64_t)v10 < v9 + v8 ? (v11 = v9 >= (unint64_t)&v10[2 * v8]) : (v11 = 1), !v11))
  {
    v12 = 0;
    goto LABEL_16;
  }
  if (v8 >= 0x20)
  {
    v12 = v8 & 0x7FFFFFE0;
    v26 = v10 + 32;
    v27 = (int8x16_t *)(v9 + 16);
    v28 = v8 & 0xFFFFFFE0;
    do
    {
      v37.val[0] = v27[-1];
      v38.val[0] = *v27;
      v37.val[1] = v37.val[0];
      v29 = v26 - 32;
      vst2q_s8(v29, v37);
      v38.val[1] = v38.val[0];
      vst2q_s8(v26, v38);
      v26 += 64;
      v27 += 2;
      v28 -= 32;
    }
    while (v28);
    if (v12 == v8)
      goto LABEL_18;
    if ((v8 & 0x18) == 0)
    {
LABEL_16:
      v13 = &v10[2 * v12 + 1];
      v14 = (char *)(v9 + v12);
      v15 = v8 - v12;
      do
      {
        v16 = *v14++;
        *v13 = v16;
        *(v13 - 1) = v16;
        v13 += 2;
        --v15;
      }
      while (v15);
      goto LABEL_18;
    }
  }
  else
  {
    v12 = 0;
  }
  v30 = v12;
  v12 = v8 & 0xFFFFFFF8;
  v31 = (int8x8_t *)(v9 + v30);
  v32 = &v10[2 * v30];
  v33 = v30 - v12;
  do
  {
    v34 = *v31++;
    v36.val[0] = v34;
    v36.val[1] = v34;
    vst2_s8(v32, v36);
    v32 += 16;
    v33 += 8;
  }
  while (v33);
  if (v12 != v8)
    goto LABEL_16;
LABEL_18:
  if (v7 >= 2)
  {
    v17 = *(int *)(v6 + 28);
    v18 = *(_QWORD *)v6;
    v19 = (uint64_t)*a2 + 1;
    v20 = (_BYTE *)(v18 + v17);
    for (i = 1; i != v7; ++i)
    {
      v22 = v8;
      v23 = v20;
      v24 = (_BYTE *)v19;
      do
      {
        v25 = (char)*v23;
        if (v25 >= (char)*(v24 - 1))
        {
          if ((char)*v24 >= (char)v25)
            goto LABEL_22;
        }
        else
        {
          *(v24 - 1) = v25;
          LOBYTE(v25) = *v23;
          if (*v24 >= *v23)
            goto LABEL_22;
        }
        *v24 = v25;
LABEL_22:
        v24 += 2;
        ++v23;
        --v22;
      }
      while (v22);
      v20 += v17;
    }
  }
}

void sub_239477388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23947739C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int8 *v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  BOOL v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  unint64_t v56;
  BOOL v58;
  BOOL v59;
  char *v60;
  int8x16_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  int8x8_t *v66;
  uint64_t v67;
  int8x8_t v68;
  char *v69;
  int8x16_t *v70;
  int8x16_t *v71;
  uint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  int8x16_t *v84;
  int8x16_t *v85;
  uint64_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x8_t v92;
  void *__p;
  int8x16_t *v94;
  char *v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  int8x8x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;

  v10 = *(_QWORD *)(a2 + 88);
  if (v10 >= 0x20)
  {
    v12 = *(_QWORD **)(a2 + 104);
LABEL_5:
    *(_QWORD *)(a2 + 88) = v10 - 32;
    v13 = *(_QWORD *)(a2 + 112) + 32;
    *(_QWORD *)(a2 + 104) = v12 + 4;
    *(_QWORD *)(a2 + 112) = v13;
    v14 = a4 - a3;
    if (a4 - a3 > *(_QWORD *)(a2 + 32))
      goto LABEL_6;
LABEL_20:
    v12[2] = 0;
    v12[3] = 0;
    *v12 = a3;
    v12[1] = a4;
    v34 = *(unsigned int *)(a2 + 56);
    if ((int)v34 < 1)
      return v12;
    v35 = *(uint64_t **)(a2 + 128);
    v36 = *(_QWORD *)(*(_QWORD *)a2 + 8 * a3) * *((int *)v35 + 7);
    v37 = *v35;
    v38 = *(unsigned __int8 **)a5;
    if (v34 < 8
      || ((unint64_t)v38 < v37 + v36 + v34 ? (v39 = v37 + v36 >= (unint64_t)&v38[2 * v34]) : (v39 = 1),
          !v39))
    {
      v40 = 0;
      goto LABEL_30;
    }
    if (v34 >= 0x20)
    {
      v40 = v34 & 0x7FFFFFE0;
      v60 = (char *)(v38 + 32);
      v61 = (int8x16_t *)(v36 + v37 + 16);
      v62 = v34 & 0xFFFFFFE0;
      do
      {
        v102.val[0] = v61[-1];
        v104.val[0] = *v61;
        v102.val[1] = v102.val[0];
        v63 = v60 - 32;
        vst2q_s8(v63, v102);
        v104.val[1] = v104.val[0];
        vst2q_s8(v60, v104);
        v60 += 64;
        v61 += 2;
        v62 -= 32;
      }
      while (v62);
      if (v40 == v34)
        goto LABEL_32;
      if ((v34 & 0x18) == 0)
      {
LABEL_30:
        v41 = &v38[2 * v40 + 1];
        v42 = (unsigned __int8 *)(v37 + v40 + v36);
        v43 = v34 - v40;
        do
        {
          *(v41 - 1) = *v42;
          v44 = *v42++;
          *v41 = v44;
          v41 += 2;
          --v43;
        }
        while (v43);
        goto LABEL_32;
      }
    }
    else
    {
      v40 = 0;
    }
    v64 = v40;
    v40 = v34 & 0xFFFFFFF8;
    v65 = (char *)&v38[2 * v64];
    v66 = (int8x8_t *)(v37 + v64 + v36);
    v67 = v64 - v40;
    do
    {
      v68 = *v66++;
      v101.val[0] = v68;
      v101.val[1] = v68;
      vst2_s8(v65, v101);
      v65 += 16;
      v67 += 8;
    }
    while (v67);
    if (v40 != v34)
      goto LABEL_30;
LABEL_32:
    v45 = a3 + 1;
    if (a3 + 1 >= a4)
      return v12;
    v46 = *(_QWORD *)a2;
    v47 = *(uint64_t **)(a2 + 128);
    v48 = *((int *)v47 + 7);
    v49 = *v47;
    v50 = *(_QWORD *)a5 + 1;
LABEL_35:
    v51 = (_BYTE *)(v49 + *(_QWORD *)(v46 + 8 * v45) * v48);
    v52 = v34;
    v53 = (_BYTE *)v50;
    while (1)
    {
      v54 = (char)*v51;
      if ((char)*(v53 - 1) <= v54)
      {
        if ((char)*v53 < (char)v54)
LABEL_41:
          *v53 = v54;
      }
      else
      {
        *(v53 - 1) = v54;
        LOBYTE(v54) = *v51;
        if (*v53 < *v51)
          goto LABEL_41;
      }
      ++v51;
      v53 += 2;
      if (!--v52)
      {
        if (++v45 == a4)
          return v12;
        goto LABEL_35;
      }
    }
  }
  *(_QWORD *)(a2 + 120) += v10;
  v11 = malloc_type_malloc(0x2000uLL, 0x933F5985uLL);
  if (v11)
  {
    *v11 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v11;
    v12 = v11 + 1;
    v10 = 8184;
    goto LABEL_5;
  }
  fwrite("Failed to allocate memory.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  v12 = 0;
  v14 = a4 - a3;
  if (a4 - a3 <= *(_QWORD *)(a2 + 32))
    goto LABEL_20;
LABEL_6:
  v99 = 0;
  v100 = 0;
  sub_239477B0C(a1, a2, (_QWORD *)(*(_QWORD *)a2 + 8 * a3), v14, &v100, (int *)&v99 + 1, (int *)&v99, (unsigned __int8 **)a5);
  *(_DWORD *)v12 = HIDWORD(v99);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v15 = *(_QWORD *)(a5 + 8);
  v16 = *(unsigned __int8 **)a5;
  v17 = v15 - *(_QWORD *)a5;
  if (v17 < 0)
    sub_2394189F8();
  v96 = operator new(v15 - *(_QWORD *)a5);
  v98 = (char *)v96 + 2 * (v17 >> 1);
  memcpy(v96, v16, v17);
  v97 = (char *)v96 + 2 * (v17 >> 1);
  *((_BYTE *)v96 + 2 * SHIDWORD(v99) + 1) = v99;
  v12[2] = sub_23947739C(a1, a2, a3, v100 + a3, &v96);
  __p = 0;
  v94 = 0;
  v95 = 0;
  v18 = *(_QWORD *)(a5 + 8);
  v19 = *(unsigned __int8 **)a5;
  v20 = v18 - *(_QWORD *)a5;
  if (v20 < 0)
    sub_2394189F8();
  __p = operator new(v18 - *(_QWORD *)a5);
  v95 = (char *)__p + 2 * (v20 >> 1);
  memcpy(__p, v19, v20);
  v94 = (int8x16_t *)((char *)__p + 2 * (v20 >> 1));
  *((_BYTE *)__p + 2 * SHIDWORD(v99)) = v99;
  v12[3] = sub_23947739C(a1, a2, v100 + a3, a4, &__p);
  v21 = 2 * SHIDWORD(v99);
  *((_DWORD *)v12 + 1) = *((char *)v96 + v21 + 1);
  v22 = (int8x16_t *)__p;
  *((_DWORD *)v12 + 2) = *((char *)__p + v21);
  v23 = *(unsigned int *)(a2 + 56);
  if ((int)v23 < 1)
    goto LABEL_17;
  v24 = (char *)v96;
  v25 = *(unsigned __int8 **)a5;
  if (v23 < 8)
  {
    v26 = 0;
    goto LABEL_11;
  }
  v26 = 0;
  v56 = (unint64_t)&v25[2 * v23];
  v58 = v25 < (unsigned __int8 *)((char *)v96 + 2 * v23) && (unint64_t)v96 < v56;
  v59 = (unint64_t)v22 >= v56 || v25 >= (unsigned __int8 *)v22 + 2 * v23;
  if (!v59 || v58)
    goto LABEL_11;
  if (v23 < 0x20)
  {
    v26 = 0;
LABEL_69:
    v82 = v26;
    v26 = v23 & 0xFFFFFFF8;
    v83 = (char *)&v25[2 * v82];
    v84 = (int8x16_t *)&v24[2 * v82];
    v85 = (int8x16_t *)((char *)v22 + 2 * v82);
    v86 = v82 - v26;
    do
    {
      v87 = *v85++;
      v88 = v87;
      v89 = *v84++;
      v90 = vminq_s8(v88, v89);
      *(int8x8_t *)v90.i8 = vuzp1_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
      v91 = vmaxq_s8(v89, v88);
      v92 = vuzp2_s8(*(int8x8_t *)v91.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
      vst2_s8(v83, (int8x8x2_t)v90);
      v83 += 16;
      v86 += 8;
    }
    while (v86);
    if (v26 == v23)
      goto LABEL_17;
LABEL_11:
    v27 = v23 - v26;
    v28 = (2 * v26) | 1;
    v29 = &v22->i8[v28];
    v30 = &v25[v28];
    v31 = &v24[v28];
    do
    {
      v32 = *(v29 - 1);
      if (v32 >= *(v31 - 1))
        LOBYTE(v32) = *(v31 - 1);
      *(v30 - 1) = v32;
      v33 = *v31;
      if (v33 <= *v29)
        LOBYTE(v33) = *v29;
      *v30 = v33;
      v30 += 2;
      v29 += 2;
      v31 += 2;
      --v27;
    }
    while (v27);
    goto LABEL_17;
  }
  v26 = v23 & 0x7FFFFFE0;
  v69 = (char *)(v25 + 32);
  v70 = (int8x16_t *)((char *)v96 + 32);
  v71 = v22 + 2;
  v72 = v23 & 0xFFFFFFE0;
  do
  {
    v73 = v71[-2];
    v74 = v71[-1];
    v75 = *v71;
    v76 = v71[1];
    v71 += 4;
    v77 = v70[-2];
    v78 = v70[-1];
    v79 = *v70;
    v80 = v70[1];
    v70 += 4;
    v105.val[0] = vuzp1q_s8(vminq_s8(v73, v77), vminq_s8(v74, v78));
    v105.val[1] = vuzp2q_s8(vmaxq_s8(v77, v73), vmaxq_s8(v78, v74));
    v103.val[0] = vuzp1q_s8(vminq_s8(v75, v79), vminq_s8(v76, v80));
    v81 = v69 - 32;
    vst2q_s8(v81, v105);
    v103.val[1] = vuzp2q_s8(vmaxq_s8(v79, v75), vmaxq_s8(v80, v76));
    vst2q_s8(v69, v103);
    v69 += 64;
    v72 -= 32;
  }
  while (v72);
  if (v26 != v23)
  {
    if ((v23 & 0x18) == 0)
      goto LABEL_11;
    goto LABEL_69;
  }
LABEL_17:
  v94 = v22;
  operator delete(v22);
  if (v96)
  {
    v97 = (char *)v96;
    operator delete(v96);
  }
  return v12;
}

void sub_23947793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_239477978(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      sub_2394189F8();
    v11 = v4 - v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        sub_239418A80();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_30:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_239477B0C(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t *a5, int *a6, int *a7, unsigned __int8 **a8)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  const char *v18;
  unint64_t v19;
  int8x16_t v20;
  const char *v21;
  int8x16_t v22;
  int8x8_t v23;
  const char *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t *v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  int8x8x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v11 = (uint64_t)*a8;
  v12 = (*a8)[1] - **a8;
  v13 = *(unsigned int *)(a2 + 56);
  if ((int)v13 <= 1)
    goto LABEL_19;
  if (v13 < 9)
  {
    v14 = 1;
    goto LABEL_15;
  }
  v15 = v13 - 1;
  if (v13 < 0x21)
  {
    v16 = 0;
LABEL_10:
    v14 = v15 & 0xFFFFFFFFFFFFFFF8 | 1;
    v23 = vdup_n_s8(v12);
    v24 = (const char *)(v11 + 2 * v16 + 2);
    v25 = v16 - (v15 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v65 = vld2_s8(v24);
      v24 += 16;
      v23 = vmax_s8(vsub_s8(v65.val[1], v65.val[0]), v23);
      v25 += 8;
    }
    while (v25);
    LOBYTE(v12) = vmaxv_s8(v23);
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_19;
    goto LABEL_15;
  }
  v16 = v15 & 0xFFFFFFFFFFFFFFE0;
  v17 = vdupq_n_s8(v12);
  v18 = (const char *)(v11 + 34);
  v19 = v15 & 0xFFFFFFFFFFFFFFE0;
  v20 = v17;
  do
  {
    v21 = v18 - 32;
    v66 = vld2q_s8(v21);
    v67 = vld2q_s8(v18);
    v17 = vmaxq_s8(vsubq_s8(v66.val[1], v66.val[0]), v17);
    v20 = vmaxq_s8(vsubq_s8(v67.val[1], v67.val[0]), v20);
    v18 += 64;
    v19 -= 32;
  }
  while (v19);
  v22 = vmaxq_s8(v17, v20);
  v22.i8[0] = vmaxvq_s8(v22);
  v12 = v22.i32[0];
  if (v15 == v16)
    goto LABEL_19;
  if ((v15 & 0x18) != 0)
    goto LABEL_10;
  v14 = v16 | 1;
LABEL_15:
  v26 = (_BYTE *)(v11 + 2 * v14 + 1);
  v27 = v13 - v14;
  do
  {
    if ((char)(*v26 - *(v26 - 1)) > (char)v12)
      LOBYTE(v12) = *v26 - *(v26 - 1);
    v26 += 2;
    --v27;
  }
  while (v27);
LABEL_19:
  *a6 = 0;
  v28 = *(_DWORD *)(a2 + 56);
  v29 = *(uint64_t **)(a2 + 128);
  if (v28 < 1)
  {
    v30 = 0;
  }
  else
  {
    v30 = 0;
    if (a4 <= 1)
    {
      v60 = 0;
      v61 = (_BYTE *)(v11 + 1);
      v62 = -1;
      do
      {
        if ((char)(*v61 - *(v61 - 1)) > (char)v12 && v62 < 0)
        {
          v62 = 0;
          *a6 = v60;
          v28 = *(_DWORD *)(a2 + 56);
          v30 = v60;
        }
        v61 += 2;
        ++v60;
      }
      while (v60 < v28);
    }
    else
    {
      v31 = 0;
      v32 = -1;
      do
      {
        if ((char)(*(_BYTE *)(v11 + 2 * v31 + 1) - *(_BYTE *)(v11 + 2 * v31)) > (char)v12)
        {
          v33 = *((int *)v29 + 7);
          v34 = *(_BYTE *)(*v29 + v31 + *a3 * v33);
          v35 = a3 + 1;
          v36 = a4 - 1;
          v37 = v34;
          v38 = v34;
          do
          {
            v39 = *v35++;
            v40 = *(char *)(*v29 + v31 + v39 * v33);
            if (v40 < v34)
            {
              v34 = v40;
              v38 = v37;
            }
            if (v40 > v38)
            {
              v37 = v40;
              v38 = v40;
            }
            --v36;
          }
          while (v36);
          if ((char)(v37 - v34) > v32)
          {
            *a6 = v31;
            v28 = *(_DWORD *)(a2 + 56);
            v30 = v31;
            v32 = v37 - v34;
          }
        }
        ++v31;
      }
      while (v31 < v28);
    }
  }
  v41 = v30;
  v42 = (char *)(v11 + 2 * v30);
  v43 = *v42;
  v44 = v42[1];
  v45 = *((int *)v29 + 7);
  v46 = *v29;
  v47 = *(_BYTE *)(*v29 + v41 + *a3 * v45);
  if (a4 < 2)
  {
    v50 = v47;
  }
  else
  {
    v48 = a4 - 1;
    v49 = a3 + 1;
    v50 = v47;
    v51 = v47;
    do
    {
      v52 = *v49++;
      v53 = *(char *)(v46 + v41 + v52 * v45);
      if (v53 < v47)
      {
        v47 = v53;
        v51 = v50;
      }
      if (v53 > v51)
      {
        v50 = v53;
        v51 = v53;
      }
      --v48;
    }
    while (v48);
  }
  v54 = (int)(v44 + v43 + (((v44 + v43) & 0x8000u) >> 15)) >> 1;
  v55 = v47;
  v56 = v50;
  if (v54 < v50)
    v56 = v54;
  if (v54 >= v55)
    v57 = v56;
  else
    v57 = v55;
  *a7 = v57;
  v63 = 0;
  v64 = 0;
  sub_239477E5C(a1, a2, (uint64_t)a3, a4, *a6, a7, &v64, &v63);
  v59 = v63;
  v58 = v64;
  if (v63 >= a4 >> 1)
    v59 = a4 >> 1;
  if (v64 <= a4 >> 1)
    v58 = v59;
  *a5 = v58;
}

void sub_239477E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6, unint64_t *a7, unint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;

  v8 = 0;
  v9 = a4 - 1;
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *a6;
  v12 = a4 - 1;
  do
  {
LABEL_2:
    if (v11 <= *(char *)(*(_QWORD *)v10 + a5 + *(_QWORD *)(a3 + 8 * v8) * *(int *)(v10 + 28)))
      break;
    ++v8;
  }
  while (v8 <= v12);
  while (1)
  {
    v13 = v12 != 0;
    if (v8 > v12)
    {
      v14 = v12;
LABEL_13:
      if (v8 > v14)
        break;
      goto LABEL_16;
    }
    if (!v12)
    {
      v14 = 0;
      if (v8)
        break;
      goto LABEL_16;
    }
    while (v11 <= *(char *)(*(_QWORD *)v10 + a5 + *(_QWORD *)(a3 + 8 * v12) * *(int *)(v10 + 28)))
    {
      v14 = v12 - 1;
      v13 = v12 != 1;
      if (v8 <= v12 - 1)
      {
        if (--v12)
          continue;
      }
      goto LABEL_13;
    }
    v13 = 1;
    v14 = v12;
    if (v8 > v12)
      break;
LABEL_16:
    if (!v13)
      break;
    v15 = *(_QWORD *)(a3 + 8 * v8);
    *(_QWORD *)(a3 + 8 * v8) = *(_QWORD *)(a3 + 8 * v14);
    *(_QWORD *)(a3 + 8 * v14) = v15;
    ++v8;
    v12 = v14 - 1;
    if (v8 <= v14 - 1)
      goto LABEL_2;
  }
  *a7 = v8;
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *a6;
  if (v8 > v9)
    goto LABEL_22;
  do
  {
LABEL_20:
    if (v17 < *(char *)(*(_QWORD *)v16 + a5 + *(_QWORD *)(a3 + 8 * v8) * *(int *)(v16 + 28)))
      break;
    ++v8;
  }
  while (v8 <= v9);
LABEL_22:
  while (2)
  {
    v18 = v9 != 0;
    if (v8 > v9)
    {
      v19 = v9;
LABEL_31:
      if (v8 > v19)
        goto LABEL_37;
LABEL_34:
      if (!v18)
        goto LABEL_37;
      v20 = *(_QWORD *)(a3 + 8 * v8);
      *(_QWORD *)(a3 + 8 * v8) = *(_QWORD *)(a3 + 8 * v19);
      *(_QWORD *)(a3 + 8 * v19) = v20;
      ++v8;
      v9 = v19 - 1;
      if (v8 <= v19 - 1)
        goto LABEL_20;
      continue;
    }
    break;
  }
  if (!v9)
  {
    v19 = 0;
    if (v8)
      goto LABEL_37;
    goto LABEL_34;
  }
  while (v17 < *(char *)(*(_QWORD *)v16 + a5 + *(_QWORD *)(a3 + 8 * v9) * *(int *)(v16 + 28)))
  {
    v19 = v9 - 1;
    v18 = v9 != 1;
    if (v8 <= v9 - 1)
    {
      if (--v9)
        continue;
    }
    goto LABEL_31;
  }
  v18 = 1;
  v19 = v9;
  if (v8 <= v9)
    goto LABEL_34;
LABEL_37:
  *a8 = v8;
}

_QWORD *sub_239478048(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_250ADC270;
  v2 = (std::__shared_weak_count *)result[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2394780BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250ADC270;
  v1 = (std::__shared_weak_count *)a1[6];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

char *sub_239478130(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x38uLL);
  *(_QWORD *)result = &off_250ADC270;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_239478190(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_250ADC270;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2394781D0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239478228(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_239478290(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28[4];

  v4 = *a2;
  v5 = *a3;
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *v6;
  if (!*v6)
  {
    v11 = 0;
    v8 = 0;
    v9 = 0;
    if (v4 >= v5)
      goto LABEL_18;
    goto LABEL_6;
  }
  if (v7 >> 61)
    sub_2394189F8();
  v8 = (char *)operator new(8 * v7);
  v9 = &v8[8 * v7];
  memset(v8, 255, 8 * v7);
  v10 = 4 * v7;
  v11 = (char *)operator new(4 * v7);
  v7 = (unint64_t)&v11[4 * v7];
  memset_pattern16(v11, &unk_239EC6A00, v10);
  if (v4 < v5)
  {
LABEL_6:
    v12 = v7 - (_QWORD)v11;
    do
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = **(_QWORD **)(a1 + 8);
      v15 = **(_QWORD **)(a1 + 16);
      v16 = *v6;
      v28[0] = (uint64_t)v8;
      v28[1] = (uint64_t)v11;
      v28[2] = v16;
      v28[3] = 0;
      if (v16)
        *(_DWORD *)&v11[4 * v16 - 4] = 0x7FFFFFFF;
      v26 = 32;
      v27 = 1;
      sub_2394784F4(v13, v28, (int8x8_t *)(v14 + v15 * v4), (uint64_t)&v26);
      v6 = *(uint64_t **)(a1 + 24);
      v17 = *v6;
      if (*v6)
      {
        v18 = 0;
        v19 = *(_QWORD **)(a1 + 32);
        v20 = (uint64_t *)v8;
        v21 = (int *)v11;
        do
        {
          v23 = *v20++;
          v22 = v23;
          if (v23 == -1)
            break;
          v24 = *v21++;
          v25 = *(_QWORD *)(*v19 + 24 * v4) + v18;
          *(_DWORD *)v25 = v4;
          *(_DWORD *)(v25 + 4) = v22;
          *(float *)(v25 + 8) = (float)v24;
          v18 += 12;
          --v17;
        }
        while (v17);
      }
      if (v9 - v8 >= 1)
        memset(v8, 255, 8 * (((unint64_t)(v9 - v8) >> 3) - ((unint64_t)(v9 - v8) > 7)) + 8);
      if (v12 >= 1)
        memset_pattern16(v11, &unk_239EC6A00, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
      ++v4;
    }
    while (v4 != v5);
  }
LABEL_18:
  if (v11)
    operator delete(v11);
  if (v8)
    operator delete(v8);
}

void sub_2394784B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

BOOL sub_2394784F4(uint64_t a1, uint64_t *a2, int8x8_t *a3, uint64_t a4)
{
  float v7;
  __n128 v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 v16;
  void *exception;
  int v19;
  void *__p;
  void *v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (!*(_QWORD *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v7 = *(float *)(a4 + 4);
  __p = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  sub_239478A18((uint64_t)&__p, *(int *)(a1 + 56), (const float *)&v19);
  if (*(int *)(a1 + 56) >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = __p;
    v12 = (char *)(*(_QWORD *)(a1 + 64) + 1);
    while (1)
    {
      v13 = a3->i8[v9];
      v14 = *(v12 - 1);
      if (v13 < v14)
      {
        v11[v9] = -(v14 * v13);
        v10 -= v14 * v13;
        LOBYTE(v13) = a3->i8[v9];
        v15 = *v12;
        if (v15 < (char)v13)
        {
LABEL_10:
          v11[v9] = -(v15 * (char)v13);
          v10 -= v15 * (char)v13;
        }
      }
      else
      {
        v15 = *v12;
        if (v15 < (char)v13)
          goto LABEL_10;
      }
      ++v9;
      v12 += 2;
      if (v9 >= *(int *)(a1 + 56))
        goto LABEL_13;
    }
  }
  v10 = 0;
LABEL_13:
  v8.n128_f32[0] = v7 + 1.0;
  sub_2394786A0((uint64_t *)a1, a2, a3, *(int **)(a1 + 24), v10, (uint64_t *)&__p, v8);
  v16 = a2[3] == a2[2];
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v16;
}

void sub_239478664(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239478678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394786A0(uint64_t *a1, uint64_t *a2, int8x8_t *a3, int *a4, int a5, uint64_t *a6, __n128 a7)
{
  float v7;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  __n128 v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x8_t *v37;
  unint64_t v38;
  int8x8_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  unint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int8x8_t *v59;
  int8x8_t *v60;
  unint64_t v61;
  int8x8_t v62;
  int16x8_t v63;
  int8x8_t v64;
  int16x8_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  int *v73;
  _QWORD *v74;
  int v75;
  unint64_t v76;

  v7 = a7.n128_f32[0];
  if (!*((_QWORD *)a4 + 2) && !*((_QWORD *)a4 + 3))
  {
    v21 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 >= *((_QWORD *)a4 + 1))
      return 1;
    v22 = a2[1];
    v23 = a2[2];
    v24 = *a2;
    v25 = *(_DWORD *)(v22 + 4 * v23 - 4);
    v26 = *a1;
    while (1)
    {
      v27 = *(_QWORD *)(v26 + 8 * v21);
      v28 = *((int *)a1 + 14);
      if (!(_DWORD)v28)
      {
        v34 = 0x4000;
        if (v25 > 0x4000)
          goto LABEL_33;
        goto LABEL_15;
      }
      v29 = (uint64_t *)a1[18];
      v30 = v27 * *((int *)v29 + 7);
      v31 = *v29;
      if (v28 < 8)
      {
        v32 = 0;
        v33 = 0;
LABEL_30:
        v66 = v28 - v33;
        v67 = (char *)(v31 + v33 + v30);
        v68 = (char *)a3 + v33;
        do
        {
          v70 = *v68++;
          v69 = v70;
          v71 = *v67++;
          v32 += v71 * v69;
          --v66;
        }
        while (v66);
        goto LABEL_32;
      }
      if (v28 >= 0x20)
      {
        v35 = 0uLL;
        v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        v36 = 0uLL;
        v37 = (int8x8_t *)(v31 + v30 + 16);
        v38 = v28 & 0xFFFFFFFFFFFFFFE0;
        v39 = a3 + 2;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        v44 = 0uLL;
        v45 = 0uLL;
        do
        {
          v46 = *(int8x16_t *)v39[-2].i8;
          v47 = vmovl_s8(*(int8x8_t *)v46.i8);
          v48 = vmovl_high_s8(v46);
          v49 = vmovl_s8(*v39);
          v50 = vmovl_high_s8(*(int8x16_t *)v39->i8);
          v51 = *(int8x16_t *)v37[-2].i8;
          v52 = vmovl_s8(*(int8x8_t *)v51.i8);
          v53 = vmovl_high_s8(v51);
          v54 = vmovl_s8(*v37);
          v55 = vmovl_high_s8(*(int8x16_t *)v37->i8);
          v41 = vmlal_high_s16(v41, v53, v48);
          v40 = vmlal_s16(v40, *(int16x4_t *)v53.i8, *(int16x4_t *)v48.i8);
          v36 = vmlal_high_s16(v36, v52, v47);
          v35 = vmlal_s16(v35, *(int16x4_t *)v52.i8, *(int16x4_t *)v47.i8);
          v45 = vmlal_high_s16(v45, v55, v50);
          v44 = vmlal_s16(v44, *(int16x4_t *)v55.i8, *(int16x4_t *)v50.i8);
          v43 = vmlal_high_s16(v43, v54, v49);
          v42 = vmlal_s16(v42, *(int16x4_t *)v54.i8, *(int16x4_t *)v49.i8);
          v39 += 4;
          v37 += 4;
          v38 -= 32;
        }
        while (v38);
        v32 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v42, v35), vaddq_s32(v44, v40)), vaddq_s32(vaddq_s32(v43, v36), vaddq_s32(v45, v41))));
        if (v33 == v28)
          goto LABEL_32;
        if ((v28 & 0x18) == 0)
          goto LABEL_30;
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
      v56 = v33;
      v33 = v28 & 0xFFFFFFFFFFFFFFF8;
      v57 = 0uLL;
      v58 = (int32x4_t)v32;
      v59 = (int8x8_t *)((char *)a3 + v56);
      v60 = (int8x8_t *)(v31 + v56 + v30);
      v61 = v56 - (v28 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v62 = *v59++;
        v63 = vmovl_s8(v62);
        v64 = *v60++;
        v65 = vmovl_s8(v64);
        v57 = vmlal_high_s16(v57, v65, v63);
        v58 = vmlal_s16(v58, *(int16x4_t *)v65.i8, *(int16x4_t *)v63.i8);
        v61 += 8;
      }
      while (v61);
      v32 = vaddvq_s32(vaddq_s32(v58, v57));
      if (v33 != v28)
        goto LABEL_30;
LABEL_32:
      v34 = 0x4000 - v32;
      if ((int)(0x4000 - v32) < v25)
      {
LABEL_33:
        v72 = a2[3];
        if (v72)
        {
          v73 = (int *)(v22 + 4 * v72);
          v74 = (_QWORD *)(*a2 + 8 * v72);
          while (1)
          {
            v75 = *(v73 - 1);
            v23 = a2[2];
            if (v75 <= v34)
              break;
            if (v72 < v23)
            {
              *v73 = v75;
              *v74 = *(v74 - 1);
            }
            --v73;
            --v74;
            if (!--v72)
            {
              v23 = a2[2];
              break;
            }
          }
        }
        if (v72 < v23)
        {
          *(_DWORD *)(v22 + 4 * v72) = v34;
          *(_QWORD *)(v24 + 8 * v72) = v27;
          v23 = a2[2];
        }
        v76 = a2[3];
        if (v76 < v23)
          a2[3] = v76 + 1;
      }
LABEL_15:
      if ((unint64_t)++v21 >= *((_QWORD *)a4 + 1))
        return 1;
    }
  }
  v9 = a4[1];
  v10 = *a4;
  v11 = a3->i8[v10];
  v12 = a4[2];
  result = sub_2394786A0(a1, a2, a7);
  if (!(_DWORD)result)
    return result;
  if (2 * v11 - (v12 + v9) >= 0)
    v18 = v9;
  else
    v18 = v12;
  v19 = *a6;
  v20 = *(_DWORD *)(*a6 + 4 * v10);
  *(_DWORD *)(*a6 + 4 * v10) = -(v18 * v11);
  if ((float)((float)(a5 - (v20 + v18 * v11)) * v7) <= (float)*(int *)(a2[1] + 4 * a2[2] - 4))
  {
    v17.n128_f32[0] = v7;
    result = sub_2394786A0(a1, a2, v17);
    if (!(_DWORD)result)
      return result;
    v19 = *a6;
  }
  *(_DWORD *)(v19 + 4 * v10) = v20;
  return 1;
}

float *sub_239478A18(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  float *v7;
  float *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  unint64_t v15;
  float *v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 62)
      goto LABEL_38;
    v9 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 62)
LABEL_38:
      sub_2394189F8();
    v12 = v11;
    result = (float *)operator new(4 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 7)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x7FFFFFFFFFFFFFF8];
    v18 = vdupq_n_s32(LODWORD(v14));
    v19 = (int32x4_t *)(result + 4);
    v20 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(float32x4_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = ((char *)v21 - (char *)v7) >> 2;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = ((char *)v21 - (char *)v7) >> 2;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFF8];
    v25 = vld1q_dup_f32(a3);
    v26 = (float32x4_t *)(v7 + 4);
    v27 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFF8);
    v24 &= 7u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = (float32x4_t *)((char *)v21 + 4 * v29);
  v31 = 4 * a2 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v31 < 0x4C || v21 < (float32x4_t *)(a3 + 1) && (char *)&v21->i32[1] + v31 > (char *)a3)
    goto LABEL_43;
  v32 = (v31 >> 2) + 1;
  v33 = (float32x4_t *)((char *)v21 + 4 * (v32 & 0x7FFFFFFFFFFFFFF8));
  v34 = vld1q_dup_f32(a3);
  v35 = v21 + 1;
  v36 = v32 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 8;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
    {
      v21->f32[0] = *a3;
      v21 = (float32x4_t *)((char *)v21 + 4);
    }
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

void sub_239478C3C(pthread_t *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  std::__thread_struct *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v8 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v8);
  v9 = (_QWORD *)operator new();
  *v9 = v8;
  v10 = v9 + 1;
  v11 = a2[3];
  if (!v11)
    goto LABEL_4;
  if ((_QWORD *)v11 != a2)
  {
    v11 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, v10);
LABEL_4:
    v9[4] = v11;
    goto LABEL_6;
  }
  v9[4] = v10;
  (*(void (**)(_QWORD *))(*a2 + 24))(a2);
LABEL_6:
  v12 = *a4;
  v9[5] = *a3;
  v9[6] = v12;
  v13 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_239478DD0, v9);
  if (v13)
  {
    std::__throw_system_error(v13, "thread constructor failed");
    __break(1u);
  }
}

void sub_239478D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    sub_239EBF428();
  MEMORY[0x23B83E31C](v2, 0x1020C40A408C0D3);
  sub_239478F54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239478D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239478F54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239478D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_239478DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  sub_239478EBC(&a9);
  sub_239478F54(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_239478DD0(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = v4;
  if (!v5)
    sub_2394172E0();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v12, &v11);
  v6 = *(_QWORD **)(a1 + 32);
  if (v6 == (_QWORD *)(a1 + 8))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  v8 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    v9 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v9, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1020C40A408C0D3);
  return 0;
}

void sub_239478EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239478EBC((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_239478EBC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = (uint64_t *)v2[4];
  if (v3 == v2 + 1)
  {
    v4 = 4;
    v3 = v2 + 1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    v6 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v6, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](v2, 0x1020C40A408C0D3);
  return a1;
}

uint64_t *sub_239478F54(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_239478F9C(_QWORD *a1)
{
  *a1 = &off_250ADC2B8;
  a1[1] = 0;
  a1[2] = sub_2394790D4;
  sub_239A444D4((uint64_t)"unknown file", 645, (uint64_t)"", (void (*)(void *))sub_239A4463C);
  sub_239A4475C();
  abort();
}

void sub_239478FF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 16))();
  _Unwind_Resume(exception_object);
}

void sub_239479014()
{
  sub_239A444D4((uint64_t)"unknown file", 659, (uint64_t)"", (void (*)(void *))sub_239A4463C);
  sub_239A4475C();
  abort();
}

uint64_t sub_239479044(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADC2B8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_239479084(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADC2B8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394790D4(uint64_t result)
{
  if (result)
    JUMPOUT(0x23B83E31CLL);
  return result;
}

uint64_t sub_2394790EC(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "code"))
  {

    return 1;
  }
  else
  {

    return 0;
  }
}

void sub_239479140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_239479150(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, unsigned __int8 a13)
{
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  unint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  int64x2_t v56;
  unint64_t v57;
  int64x2_t v58;
  unint64_t v59;
  int64x2_t v60;
  unint64_t v61;
  int64x2_t v62;

  v20 = a1;
  v21 = a2;
  v49 = a3;
  v52 = a4;
  v51 = a5;
  v22 = a6;
  v54 = a7;
  v23 = a8;
  v53 = a9;
  v50 = a10;
  v24 = a11;
  v48 = a12;
  v47 = objc_msgSend(v20, "rows");
  v25 = v21;
  v46 = objc_msgSend(v21, "rows");
  v26 = objc_msgSend(v20, "columns");
  if (v23)
  {
    v27 = v26;
    v45 = v24;
    v28 = objc_alloc(MEMORY[0x24BDDE470]);
    if (a13)
      v29 = v46;
    else
      v29 = v47;
    v30 = (void *)objc_msgSend(v28, "initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:", v54, 0, a13 ^ 1u, v29, (int)v27, (int)v27, 1.0, 0.0);
    if (a13)
      v31 = v21;
    else
      v31 = v20;
    if (a13)
      v32 = v51;
    else
      v32 = v52;
    v44 = v30;
    objc_msgSend(v30, "encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:", v23, v31, v49, v32);
    objc_msgSend(v23, "computeCommandEncoder");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v54, "newComputePipelineStateWithFunction:error:", v24, 0);
    objc_msgSend(v33, "setComputePipelineState:", v34);
    v35 = objc_msgSend(v34, "threadExecutionWidth");
    objc_msgSend(v33, "setBuffer:offset:atIndex:", v53, 0, 0);
    objc_msgSend(v33, "setBuffer:offset:atIndex:", v50, 0, 1);
    v61 = (v35 + (int)v29 - 1) / v35;
    v62 = vdupq_n_s64(1uLL);
    v59 = v35;
    v60 = v62;
    objc_msgSend(v33, "dispatchThreadgroups:threadsPerThreadgroup:", &v61, &v59);
    objc_msgSend(v33, "endEncoding");

    objc_msgSend(v23, "computeCommandEncoder");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_msgSend(v54, "newComputePipelineStateWithFunction:error:", v48, 0);
    objc_msgSend(v36, "setComputePipelineState:", v37);
    v38 = objc_msgSend(v37, "threadExecutionWidth");
    objc_msgSend(v36, "setBuffer:offset:atIndex:", v53, 0, 0);
    objc_msgSend(v36, "setBuffer:offset:atIndex:", v50, 0, 1);
    v57 = (v38 + (((v29 << 32) * v27) >> 32) - 1) / v38;
    v58 = vdupq_n_s64(1uLL);
    v55 = v38;
    v56 = v58;
    objc_msgSend(v36, "dispatchThreadgroups:threadsPerThreadgroup:", &v57, &v55);
    objc_msgSend(v36, "endEncoding");

    v39 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE470]), "initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:", v54, 0, 1, v47, v46, (int)v27, 1.0, 0.0);
    v40 = v39;
    if (a13)
      v41 = v20;
    else
      v41 = v52;
    v25 = v21;
    if (a13)
      v42 = v51;
    else
      v42 = v21;
    v24 = v45;
    objc_msgSend(v39, "encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:", v23, v41, v42, v22);

  }
  return v23 != 0;
}

void sub_2394794E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_2394795C0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, char a7, void *a8, float a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, char a20)
{
  id v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  id v31;
  uint64_t v32;
  const void *v33;
  id v34;
  uint64_t v35;
  const void *v36;
  id v37;
  id v38;
  uint64_t v39;
  const void *v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  void *v78;
  id v79;
  id v80;
  id v81;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  id v89;
  int v90;
  unint64_t v91;
  int64x2_t v92;
  unint64_t v93;
  int64x2_t v94;
  char v95;
  unint64_t v96;
  int64x2_t v97;
  unint64_t v98;
  int64x2_t v99;
  char v100;
  _DWORD v101[3];

  v67 = a1;
  v87 = a2;
  *(float *)v101 = a9;
  v100 = a7;
  v26 = a8;
  v69 = a10;
  v68 = a11;
  v89 = a12;
  v74 = a13;
  v81 = a14;
  v72 = a15;
  v80 = a16;
  v79 = a17;
  v73 = a18;
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  v30 = *(const void **)a4;
  v29 = *(_QWORD *)(a4 + 8);
  v31 = v26;
  v33 = *(const void **)a3;
  v32 = *(_QWORD *)(a3 + 8);
  v88 = objc_retainAutorelease(v31);
  memcpy((void *)objc_msgSend(v88, "contents"), *(const void **)a3, v32 - (_QWORD)v33);
  nullsub_4(v88);

  v34 = v69;
  v36 = *(const void **)a4;
  v35 = *(_QWORD *)(a4 + 8);
  v37 = objc_retainAutorelease(v34);
  memcpy((void *)objc_msgSend(v37, "contents"), *(const void **)a4, v35 - (_QWORD)v36);
  nullsub_4(v37);

  v38 = v68;
  v40 = *(const void **)a5;
  v39 = *(_QWORD *)(a5 + 8);
  v41 = objc_retainAutorelease(v38);
  memcpy((void *)objc_msgSend(v41, "contents"), *(const void **)a5, v39 - (_QWORD)v40);
  nullsub_4(v41);
  v42 = (v28 - (uint64_t)v27) >> 2;
  v43 = a6;
  LODWORD(v39) = 4 * v42;
  v44 = v42 / a6;

  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v44, a6, (int)v39 / v44, 268435488);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = (v29 - (uint64_t)v30) >> 2;
  v46 = v45 / a6;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v45 / v43, v43, 4 * (int)v45 / (v45 / v43), 268435488);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v43, v43, 4 * v43, 268435488);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v88, v86);
  v71 = (void *)v47;
  v78 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v37, v85);
  v76 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v41, v84);
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v44, v46, 4 * v46, 268435488);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v89, v83);
  objc_msgSend(v87, "commandBuffer");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v48)
  {
    v62 = 0;
    v52 = v67;
    v49 = v74;
    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v44, v43, 4 * v43, 268435488);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v74, v66);
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v46, v43, 4 * v43, 268435488);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v74;
  v50 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v74, v65);
  v51 = (void *)v47;
  v64 = v50;
  v52 = v67;
  if (sub_239479150(v51, v78, v76, v70, v50, v75, v67, v48, v74, v81, v80, v79, 1u))
  {
    objc_msgSend(v48, "computeCommandEncoder");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = (void *)objc_msgSend(v67, "newComputePipelineStateWithFunction:error:", v73, 0);
    objc_msgSend(v53, "setComputePipelineState:", v54);
    v55 = objc_msgSend(v54, "threadExecutionWidth");
    objc_msgSend(v53, "setBuffer:offset:atIndex:", v89, 0, 0);
    objc_msgSend(v53, "setBuffer:offset:atIndex:", v72, 0, 1);
    objc_msgSend(v53, "setBytes:length:atIndex:", v101, 4, 2);
    objc_msgSend(v53, "setBytes:length:atIndex:", &v100, 1, 3);
    v56 = v46 * v44 - 1;
    v98 = (v56 + v55) / v55;
    v99 = vdupq_n_s64(1uLL);
    v96 = v55;
    v97 = v99;
    objc_msgSend(v53, "dispatchThreadgroups:threadsPerThreadgroup:", &v98, &v96);
    objc_msgSend(v53, "endEncoding");

    if (sub_239479150(v71, v78, v76, v70, v64, v75, v67, v48, v74, v81, v80, v79, 0))
    {
      v95 = 1;
      objc_msgSend(v48, "computeCommandEncoder");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = (void *)objc_msgSend(v67, "newComputePipelineStateWithFunction:error:", v73, 0);
      objc_msgSend(v57, "setComputePipelineState:", v58);
      v59 = objc_msgSend(v58, "threadExecutionWidth");
      objc_msgSend(v57, "setBuffer:offset:atIndex:", v89, 0, 0);
      objc_msgSend(v57, "setBuffer:offset:atIndex:", v72, 0, 1);
      objc_msgSend(v57, "setBytes:length:atIndex:", v101, 4, 2);
      objc_msgSend(v57, "setBytes:length:atIndex:", &v95, 1, 3);
      v93 = (v56 + v59) / v59;
      v94 = vdupq_n_s64(1uLL);
      v91 = v59;
      v92 = v94;
      objc_msgSend(v57, "dispatchThreadgroups:threadsPerThreadgroup:", &v93, &v91);
      objc_msgSend(v57, "endEncoding");

      sub_23971DB68();
      objc_msgSend(v48, "commit");
      objc_msgSend(v48, "waitUntilCompleted");
      objc_msgSend(v48, "error");
      v60 = (id)objc_claimAutoreleasedReturnValue();
      v61 = v60;
      if (!v60 || !objc_msgSend(v60, "code"))
      {

        v62 = 1;
        goto LABEL_9;
      }

      if (a20)
      {
        v90 = 3016;
        sub_23947FDCC(a19, &v90, &v90);
      }
    }
  }
  v62 = 0;
LABEL_9:

LABEL_11:
  return v62;
}

void sub_239479CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void sub_239479E10()
{
  JUMPOUT(0x239479D70);
}

void sub_239479E18()
{
  JUMPOUT(0x239479D80);
}

void sub_239479E20()
{
  JUMPOUT(0x239479D88);
}

void sub_239479E28()
{
  JUMPOUT(0x239479D90);
}

void sub_239479E30()
{
  void *v0;

  JUMPOUT(0x239479DA8);
}

void sub_239479E3C()
{
  void *v0;

  JUMPOUT(0x239479DA8);
}

void sub_239479E48()
{
  void *v0;

  JUMPOUT(0x239479DA8);
}

uint64_t sub_239479E54(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, unsigned int a17, unsigned int a18, unsigned int a19, unsigned int a20,unsigned int a21,char a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  unint64_t v46;
  void *v47;
  void *v48;
  unint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  int v55;
  void *v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unsigned int v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  char v82;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  unsigned int v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  unsigned int v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  void *v114;
  id v115;
  void *v116;
  id v117;
  id v118;
  void *v119;
  void *v120;
  id v121;
  void *v122;
  id v124;
  void *v125;
  id v126;
  id v127;
  int v128;
  unint64_t v129;
  int64x2_t v130;
  unint64_t v131;
  int64x2_t v132;
  unint64_t v133;
  int64x2_t v134;
  unint64_t v135;
  int64x2_t v136;
  unint64_t v137;
  int64x2_t v138;
  unint64_t v139;
  int64x2_t v140;
  unint64_t v141;
  int64x2_t v142;
  unint64_t v143;
  int64x2_t v144;

  v34 = a18;
  v33 = a19;
  v111 = a1;
  v121 = a2;
  v127 = a3;
  v126 = a4;
  v109 = a5;
  v117 = a6;
  v115 = a7;
  v124 = a8;
  v106 = a9;
  v35 = a17;
  v112 = a10;
  v113 = a11;
  v107 = a12;
  v108 = a13;
  v118 = a14;
  v110 = a15;
  v105 = a16;
  v36 = v33 * a17;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v35, v33, (int)v33 * (int)v35 / v35, 536870920);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (int)v33 * (int)v34;
  v38 = v33;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v34, v33, (int)v33 * (int)v34 / v34, 536870920);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v104 = v34;
  v39 = v34 * a17;
  v95 = 4 * v34 * a17;
  v40 = v111;
  objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", v35, a18, v95 / v35, 268435488);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = v38;
  v116 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v127, v122);
  v114 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v126, v120);
  v125 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v124, v119);
  objc_msgSend(v121, "commandBuffer");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (v42)
  {
    v43 = objc_alloc(MEMORY[0x24BDDE470]);
    v97 = (void *)objc_msgSend(v43, "initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:", v111, 0, 1, a17, a18, v38, 1.0, 0.0);
    objc_msgSend(v97, "encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:", v42, v116, v114, v125);
    v102 = v39;
    if (a22 != 2)
      goto LABEL_18;
    objc_msgSend(v42, "computeCommandEncoder");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = (void *)objc_msgSend(v111, "newComputePipelineStateWithFunction:error:", v118, 0);
    objc_msgSend(v44, "setComputePipelineState:", v45);
    v46 = objc_msgSend(v45, "threadExecutionWidth");
    objc_msgSend(v44, "setBuffer:offset:atIndex:", v127, 0, 0);
    objc_msgSend(v44, "setBuffer:offset:atIndex:", v117, 0, 1);
    v143 = (v36 + v46 - 1) / v46;
    v144 = vdupq_n_s64(1uLL);
    v141 = v46;
    v142 = v144;
    objc_msgSend(v44, "dispatchThreadgroups:threadsPerThreadgroup:", &v143, &v141);
    objc_msgSend(v44, "endEncoding");

    objc_msgSend(v42, "computeCommandEncoder");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = (void *)objc_msgSend(v111, "newComputePipelineStateWithFunction:error:", v118, 0);
    objc_msgSend(v47, "setComputePipelineState:", v48);
    v49 = objc_msgSend(v48, "threadExecutionWidth");
    objc_msgSend(v47, "setBuffer:offset:atIndex:", v126, 0, 0);
    objc_msgSend(v47, "setBuffer:offset:atIndex:", v115, 0, 1);
    v139 = (v37 + v49 - 1) / v49;
    v140 = vdupq_n_s64(1uLL);
    v137 = v49;
    v138 = v140;
    objc_msgSend(v47, "dispatchThreadgroups:threadsPerThreadgroup:", &v139, &v137);
    objc_msgSend(v47, "endEncoding");

    objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, v41, a17, 0);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "setUsage:", 3);
    objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, v41, a18, 0);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "setUsage:", 3);
    if (4 * v41 % (unint64_t)(int)objc_msgSend(v111, "minimumLinearTextureAlignmentForPixelFormat:", 55))
    {
      sub_239A444D4((uint64_t)"unknown file", 577, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v52 = (void *)objc_msgSend(v117, "newTextureWithDescriptor:offset:bytesPerRow:", v50, 0, 4 * v41);
    v53 = objc_msgSend(v115, "newTextureWithDescriptor:offset:bytesPerRow:", v51, 0, 4 * v41);
    v54 = (void *)v53;
    v55 = 1;
    if (v52 && v53)
    {
      v56 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithTexture:featureChannels:", v52, 1);
      v57 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithTexture:featureChannels:", v54, 1);
      v55 = 1;
      if (v56 && v57)
      {
        v90 = v57;
        objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, 1, a17, 1, 1, 3);
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, 1, a18, 1, 1, 3);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDDE4F8], "temporaryImageWithCommandBuffer:imageDescriptor:", v42, v93);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDDE4F8], "temporaryImageWithCommandBuffer:imageDescriptor:", v42, v91);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = 1;
        if (v100 && v98)
        {
          v87 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE2C0]), "initWithDevice:", v111);
          objc_msgSend(v87, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v42, v56, v56, v56);
          objc_msgSend(v87, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v42, v90, v90, v90);
          v86 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE4D8]), "initWithDevice:", v111);
          objc_msgSend(v86, "encodeToCommandBuffer:sourceImage:destinationImage:", v42, v56, v100);
          objc_msgSend(v86, "encodeToCommandBuffer:sourceImage:destinationImage:", v42, v90, v98);
          objc_msgSend(v100, "texture");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v98, "texture");
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = 1;
          if (v89 && v88)
          {
            objc_msgSend(v42, "computeCommandEncoder");
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            v84 = (void *)objc_msgSend(v111, "newComputePipelineStateWithFunction:error:", v105, 0);
            objc_msgSend(v85, "setComputePipelineState:", v84);
            v58 = objc_msgSend(v84, "threadExecutionWidth");
            objc_msgSend(v85, "setBytes:length:atIndex:", &a18, 4, 0);
            objc_msgSend(v85, "setBuffer:offset:atIndex:", v124, 0, 1);
            objc_msgSend(v85, "setTexture:atIndex:", v89, 0);
            objc_msgSend(v85, "setTexture:atIndex:", v88, 1);
            v135 = (v102 + v58 - 1) / v58;
            v136 = vdupq_n_s64(1uLL);
            v133 = v58;
            v134 = v136;
            objc_msgSend(v85, "dispatchThreadgroups:threadsPerThreadgroup:", &v135, &v133);
            objc_msgSend(v85, "endEncoding");
            objc_msgSend(v100, "setReadCount:", 0);
            objc_msgSend(v98, "setReadCount:", 0);

            objc_msgSend(v100, "setReadCount:", 0);
            objc_msgSend(v98, "setReadCount:", 0);
            v55 = 0;
          }

        }
        v57 = v90;
      }

    }
    if (v55)
    {
      v59 = 0;
    }
    else
    {
LABEL_18:
      if (a24)
      {
        objc_msgSend(v42, "computeCommandEncoder");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = (void *)objc_msgSend(v111, "newComputePipelineStateWithFunction:error:", v110, 0);
        objc_msgSend(v60, "setComputePipelineState:", v61);
        v62 = objc_msgSend(v61, "threadExecutionWidth");
        objc_msgSend(v60, "setBuffer:offset:atIndex:", v124, 0, 0);
        objc_msgSend(v60, "setBuffer:offset:atIndex:", v109, 0, 1);
        v131 = (v102 + v62 - 1) / v62;
        v132 = vdupq_n_s64(1uLL);
        v129 = v62;
        v130 = v132;
        objc_msgSend(v60, "dispatchThreadgroups:threadsPerThreadgroup:", &v131, &v129);
        objc_msgSend(v60, "endEncoding");

      }
      v63 = a20;
      v64 = 4 * a17 * a20 / a17;
      objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", a17, a20, v64, 32);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v101 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v113, v65);
      objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", a17, v63, v64, 268435488);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      v99 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v112, v103);
      v66 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE468]), "initWithDevice:numberOfTopKValues:", v111, v63);
      objc_msgSend(v66, "encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:", v42, v125, v101, v99);
      if (a23)
      {
        v92 = v65;
        v67 = a21;
        v68 = 4 * v104 * a21;
        objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", a18, a21, v68 / a18, 32);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v108, v94);
        objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", a18, v67, v68 / a18, 268435488);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v107, v70);
        v72 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE468]), "initWithDevice:numberOfTopKValues:", v111, v67);
        v73 = v72;
        if (a25)
        {
          objc_msgSend(v72, "setAlongColumns:", 1);
          objc_msgSend(v73, "encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:", v42, v125, v69, v71);
          v74 = 0;
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDDE460], "matrixDescriptorWithRows:columns:rowBytes:dataType:", a18, a17, v95 / a18, 268435488);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE440]), "initWithBuffer:descriptor:", v106, v96);
          objc_msgSend(MEMORY[0x24BDDE450], "descriptorWithSourceMatrix:destinationMatrix:offsets:", v125, v74, 0, 0);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v76 = objc_alloc(MEMORY[0x24BDDE448]);
          if (a17 > v104)
            v77 = a17;
          else
            v77 = a18;
          if (a17 > v104)
            v78 = a18;
          else
            v78 = a17;
          v79 = (void *)objc_msgSend(v76, "initWithDevice:copyRows:copyColumns:sourcesAreTransposed:destinationsAreTransposed:", v111, v77, v78, a17 <= v104, a17 > v104);
          objc_msgSend(v79, "encodeToCommandBuffer:copyDescriptor:", v42, v75);
          objc_msgSend(v73, "encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:", v42, v74, v69, v71);

          v40 = v111;
        }

        v65 = v92;
      }
      else
      {
        v74 = 0;
        v69 = 0;
        v71 = 0;
      }
      sub_23971DB68();
      objc_msgSend(v42, "commit");
      objc_msgSend(v42, "waitUntilCompleted");
      objc_msgSend(v42, "error");
      v80 = (id)objc_claimAutoreleasedReturnValue();
      v81 = v80;
      if (v80 && objc_msgSend(v80, "code"))
      {
        v82 = a27;

        if (v82)
        {
          v128 = 3016;
          sub_23947FDCC(a26, &v128, &v128);
        }
        v59 = 0;
      }
      else
      {

        v59 = 1;
      }

    }
  }
  else
  {
    v59 = 0;
  }

  return v59;
}

void sub_23947AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46)
{
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

void sub_23947AE7C()
{
  JUMPOUT(0x23947ADCCLL);
}

void sub_23947AE84()
{
  JUMPOUT(0x23947ADD4);
}

void sub_23947AE8C()
{
  JUMPOUT(0x23947ADDCLL);
}

_QWORD *sub_23947AE94(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  unint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  _DWORD *v90;
  char *v91;
  _DWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _OWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  void *v112[2];
  uint64_t v113;
  void *__p[2];
  _BYTE v115[32];
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  *a1 = &off_250ADC2E8;
  a1[1] = 0;
  a1[2] = sub_23947FBA8;
  if (!a2)
  {
    sub_239A444D4((uint64_t)"unknown file", 1121, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_OWORD *)v115 = 0u;
  v116 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)&v115[12] = xmmword_239EC6A10;
  *(_DWORD *)&v115[28] = -1082130432;
  v117 = -1;
  v118 = 0u;
  v119 = 0u;
  memset(v120, 0, sizeof(v120));
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0;
  v14 = operator new();
  v15 = *(_OWORD *)v115;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = v15;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)&v115[16];
  *(_DWORD *)(v14 + 48) = v116;
  *(_QWORD *)(v14 + 56) = v117;
  v16 = v118;
  v17 = v119;
  v118 = 0u;
  *(_OWORD *)(v14 + 64) = v16;
  *(_OWORD *)(v14 + 80) = v17;
  v18 = *((_QWORD *)&v120[1] + 1);
  *(_QWORD *)(v14 + 96) = *(_QWORD *)&v120[0];
  v119 = 0u;
  *(_OWORD *)(v14 + 104) = *(_OWORD *)((char *)v120 + 8);
  *(_QWORD *)(v14 + 120) = v18;
  memset(v120, 0, sizeof(v120));
  v19 = v121;
  v20 = v122;
  v121 = 0u;
  v122 = 0u;
  *(_OWORD *)(v14 + 128) = v19;
  *(_OWORD *)(v14 + 144) = v20;
  v21 = v123;
  v22 = v124;
  v123 = 0u;
  v124 = 0u;
  *(_OWORD *)(v14 + 160) = v21;
  *(_OWORD *)(v14 + 176) = v22;
  v23 = v125;
  v24 = v126;
  v125 = 0u;
  v126 = 0u;
  *(_OWORD *)(v14 + 192) = v23;
  *(_OWORD *)(v14 + 208) = v24;
  v25 = v127;
  v26 = v128;
  v127 = 0u;
  v128 = 0u;
  *(_OWORD *)(v14 + 224) = v25;
  *(_OWORD *)(v14 + 240) = v26;
  v27 = v129;
  v28 = v130;
  v129 = 0u;
  v130 = 0u;
  *(_OWORD *)(v14 + 256) = v27;
  *(_OWORD *)(v14 + 272) = v28;
  v29 = v132;
  *(_OWORD *)(v14 + 288) = v131;
  *(_OWORD *)(v14 + 304) = v29;
  v131 = 0u;
  v132 = 0u;
  *(_OWORD *)(v14 + 320) = v133;
  *(_QWORD *)(v14 + 336) = v134;
  v133 = 0u;
  v134 = 0;
  v30 = a1[1];
  a1[1] = v14;
  if (v30)
    ((void (*)(uint64_t))a1[2])(v30);
  a1[2] = sub_23947FBA8;
  sub_23947FBD4((uint64_t)__p);
  v31 = a1[1];
  *(_DWORD *)(v31 + 12) = a2;
  *(_QWORD *)(v31 + 28) = *(_QWORD *)(a7 + 12);
  *(_DWORD *)(v31 + 44) = *(_DWORD *)(a7 + 32);
  *(_QWORD *)v31 = *(_QWORD *)a7;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(a7 + 8);
  *(_DWORD *)(v31 + 20) = *(_DWORD *)(a7 + 24);
  *(_DWORD *)(v31 + 40) = *(_DWORD *)(a7 + 28);
  *(_WORD *)(v31 + 48) = *(_WORD *)(a7 + 36);
  v32 = nullsub_4(a3);
  sub_2397A9494(v32);
  v33 = objc_claimAutoreleasedReturnValue();
  v34 = a1[1];
  v35 = *(void **)(v34 + 280);
  *(_QWORD *)(v34 + 280) = v33;

  v36 = sub_2397A9F50(a3);
  sub_2397A9494(v36);
  v37 = objc_claimAutoreleasedReturnValue();
  v38 = a1[1];
  v39 = *(void **)(v38 + 288);
  *(_QWORD *)(v38 + 288) = v37;

  v40 = a1[1];
  v41 = *(unsigned int *)(v40 + 20);
  v42 = *(unsigned int *)(a7 + 12);
  __p[1] = 0;
  *(_QWORD *)v115 = 0;
  __p[0] = 0;
  if ((_DWORD)v42)
  {
    v43 = operator new(12 * v42);
    v44 = (char *)v43 + 12 * v42;
    __p[0] = v43;
    *(_QWORD *)v115 = v44;
    if ((unint64_t)(12 * v42 - 12) >= 0x54)
    {
      v46 = (12 * v42 - 12) / 0xCuLL + 1;
      v45 = (char *)v43 + 12 * (v46 & 0x3FFFFFFFFFFFFFF8);
      v47 = v46 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *v43 = xmmword_239EC6A40;
        v43[1] = xmmword_239EC6A30;
        v43[4] = xmmword_239EC6A30;
        v43[5] = xmmword_239EC6A20;
        v43[2] = xmmword_239EC6A20;
        v43[3] = xmmword_239EC6A40;
        v43 += 6;
        v47 -= 8;
      }
      while (v47);
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_11;
    }
    else
    {
      v45 = (char *)v43;
    }
    do
    {
      *(_QWORD *)v45 = -1;
      *((_DWORD *)v45 + 2) = -1082130432;
      v45 += 12;
    }
    while (v45 != v44);
LABEL_11:
    __p[1] = v44;
  }
  v49 = *(_QWORD *)(v40 + 296);
  v48 = *(_QWORD *)(v40 + 304);
  v50 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 3);
  if (v41 <= v50)
  {
    if (v41 < v50)
    {
      v51 = v49 + 24 * v41;
      if (v48 != v51)
      {
        v52 = *(_QWORD *)(v40 + 304);
        do
        {
          v54 = *(void **)(v52 - 24);
          v52 -= 24;
          v53 = v54;
          if (v54)
          {
            *(_QWORD *)(v48 - 16) = v53;
            operator delete(v53);
          }
          v48 = v52;
        }
        while (v52 != v51);
      }
      *(_QWORD *)(v40 + 304) = v51;
    }
  }
  else
  {
    sub_23942A264((_QWORD *)(v40 + 296), v41 - v50, (uint64_t)__p);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v55 = a1[1];
  v56 = *(unsigned int *)(v55 + 20);
  v57 = *(unsigned int *)(a7 + 16);
  __p[1] = 0;
  *(_QWORD *)v115 = 0;
  __p[0] = 0;
  if ((_DWORD)v57)
  {
    v58 = operator new(12 * v57);
    v59 = (char *)v58 + 12 * v57;
    __p[0] = v58;
    *(_QWORD *)v115 = v59;
    if ((unint64_t)(12 * v57 - 12) >= 0x54)
    {
      v61 = (12 * v57 - 12) / 0xCuLL + 1;
      v60 = (char *)v58 + 12 * (v61 & 0x3FFFFFFFFFFFFFF8);
      v62 = v61 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *v58 = xmmword_239EC6A40;
        v58[1] = xmmword_239EC6A30;
        v58[4] = xmmword_239EC6A30;
        v58[5] = xmmword_239EC6A20;
        v58[2] = xmmword_239EC6A20;
        v58[3] = xmmword_239EC6A40;
        v58 += 6;
        v62 -= 8;
      }
      while (v62);
      if (v61 == (v61 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_30;
    }
    else
    {
      v60 = (char *)v58;
    }
    do
    {
      *(_QWORD *)v60 = -1;
      *((_DWORD *)v60 + 2) = -1082130432;
      v60 += 12;
    }
    while (v60 != v59);
LABEL_30:
    __p[1] = v59;
  }
  v64 = *(_QWORD *)(v55 + 320);
  v63 = *(_QWORD *)(v55 + 328);
  v65 = 0xAAAAAAAAAAAAAAABLL * ((v63 - v64) >> 3);
  if (v56 <= v65)
  {
    if (v56 < v65)
    {
      v66 = v64 + 24 * v56;
      if (v63 != v66)
      {
        v67 = *(_QWORD *)(v55 + 328);
        do
        {
          v69 = *(void **)(v67 - 24);
          v67 -= 24;
          v68 = v69;
          if (v69)
          {
            *(_QWORD *)(v63 - 16) = v68;
            operator delete(v68);
          }
          v63 = v67;
        }
        while (v67 != v66);
      }
      *(_QWORD *)(v55 + 328) = v66;
    }
  }
  else
  {
    sub_23942A264((_QWORD *)(v55 + 320), v56 - v65, (uint64_t)__p);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_BYTE *)(a1[1] + 24) = 1;
  if (*(char *)(a4 + 23) < 0)
  {
    v70 = *(_QWORD *)(a4 + 8);
    if (v70)
    {
      sub_23941A7F8(v112, *(void **)a4, v70);
LABEL_47:
      v71 = sub_23947B70C((uint64_t)a1, (uint64_t)v112);
      v72 = v71;
      if (SHIBYTE(v113) < 0)
      {
        operator delete(v112[0]);
        if ((v72 & 1) != 0)
          goto LABEL_49;
      }
      else if ((v71 & 1) != 0)
      {
        goto LABEL_49;
      }
      if (!a6)
        return a1;
      v76 = *(char **)(a5 + 8);
      v75 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v76 < v75)
      {
        *(_DWORD *)v76 = 3014;
        *(_QWORD *)(a5 + 8) = v76 + 4;
        return a1;
      }
      v77 = *(char **)a5;
      v84 = (uint64_t)&v76[-*(_QWORD *)a5];
      v85 = v84 >> 2;
      v86 = (v84 >> 2) + 1;
      if (v86 >> 62)
        sub_2394189F8();
      v87 = v75 - (_QWORD)v77;
      if (v87 >> 1 > v86)
        v86 = v87 >> 1;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
        v88 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
      {
        if (v88 >> 62)
          sub_239418A80();
        v89 = operator new(4 * v88);
      }
      else
      {
        v89 = 0;
      }
      v90 = &v89[4 * v85];
      v91 = &v89[4 * v88];
      *v90 = 3014;
      v92 = v90 + 1;
      if (v76 != v77)
      {
        v102 = v76 - v77 - 4;
        if (v102 < 0x2C)
          goto LABEL_104;
        if ((unint64_t)(v76 - v89 - v84) < 0x20)
          goto LABEL_104;
        v103 = (v102 >> 2) + 1;
        v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
        v105 = &v76[-v104];
        v90 = (_DWORD *)((char *)v90 - v104);
        v106 = &v89[4 * v85 - 16];
        v107 = v76 - 16;
        v108 = v103 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v109 = *(_OWORD *)v107;
          *(v106 - 1) = *((_OWORD *)v107 - 1);
          *v106 = v109;
          v106 -= 2;
          v107 -= 32;
          v108 -= 8;
        }
        while (v108);
        v76 = v105;
        if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_104:
          do
          {
            v110 = *((_DWORD *)v76 - 1);
            v76 -= 4;
            *--v90 = v110;
          }
          while (v76 != v77);
        }
      }
      goto LABEL_93;
    }
  }
  else if (*(_BYTE *)(a4 + 23))
  {
    *(_OWORD *)v112 = *(_OWORD *)a4;
    v113 = *(_QWORD *)(a4 + 16);
    goto LABEL_47;
  }
LABEL_49:
  if ((sub_23947BBBC((uint64_t)a1, *(unsigned __int8 *)(a1[1] + 8)) & 1) != 0)
  {
    *(_BYTE *)(a1[1] + 16) = 0;
    return a1;
  }
  if (!a6)
    return a1;
  v74 = *(char **)(a5 + 8);
  v73 = *(_QWORD *)(a5 + 16);
  if ((unint64_t)v74 < v73)
  {
    *(_DWORD *)v74 = 3013;
    *(_QWORD *)(a5 + 8) = v74 + 4;
    return a1;
  }
  v77 = *(char **)a5;
  v78 = (uint64_t)&v74[-*(_QWORD *)a5];
  v79 = v78 >> 2;
  v80 = (v78 >> 2) + 1;
  if (v80 >> 62)
    sub_2394189F8();
  v81 = v73 - (_QWORD)v77;
  if (v81 >> 1 > v80)
    v80 = v81 >> 1;
  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
    v82 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v82 = v80;
  if (v82)
  {
    if (v82 >> 62)
      sub_239418A80();
    v83 = operator new(4 * v82);
  }
  else
  {
    v83 = 0;
  }
  v90 = &v83[4 * v79];
  v91 = &v83[4 * v82];
  *v90 = 3013;
  v92 = v90 + 1;
  if (v74 != v77)
  {
    v93 = v74 - v77 - 4;
    if (v93 < 0x2C)
      goto LABEL_105;
    if ((unint64_t)(v74 - v83 - v78) < 0x20)
      goto LABEL_105;
    v94 = (v93 >> 2) + 1;
    v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
    v96 = &v74[-v95];
    v90 = (_DWORD *)((char *)v90 - v95);
    v97 = &v83[4 * v79 - 16];
    v98 = v74 - 16;
    v99 = v94 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v100 = *(_OWORD *)v98;
      *(v97 - 1) = *((_OWORD *)v98 - 1);
      *v97 = v100;
      v97 -= 2;
      v98 -= 32;
      v99 -= 8;
    }
    while (v99);
    v74 = v96;
    if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_105:
      do
      {
        v101 = *((_DWORD *)v74 - 1);
        v74 -= 4;
        *--v90 = v101;
      }
      while (v74 != v77);
    }
  }
LABEL_93:
  *(_QWORD *)a5 = v90;
  *(_QWORD *)(a5 + 8) = v92;
  *(_QWORD *)(a5 + 16) = v91;
  if (v77)
    operator delete(v77);
  *(_QWORD *)(a5 + 8) = v92;
  return a1;
}

void sub_23947B688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = 0;
  if (v19)
    (*(void (**)(void))(v17 + 16))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_23947B70C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *__p[2];
  uint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;

  v4 = *(id *)(*(_QWORD *)(a1 + 8) + 280);
  sub_2397A9468(&v54, v4);
  v52 = 0;
  v53 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v49 = *(_QWORD *)(a2 + 16);
  }
  sub_2397A9AC8((uint64_t)&v54, (uint64_t *)__p, (uint64_t)&v52, &v50);
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  if (sub_2397A9990((uint64_t)&v52))
  {
    v5 = 0;
    v6 = v51;
    if (!v51)
      goto LABEL_29;
    goto LABEL_25;
  }
  sub_2397A9494((uint64_t)&v50);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    sub_239A444D4((uint64_t)"unknown file", 1231, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "e0hiOBeGnx4wYO3K", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "newFunctionWithName:", v8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(void **)(v10 + 224);
  *(_QWORD *)(v10 + 224) = v9;

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 224);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "U70VPTWfA53TrlHS", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v7, "newFunctionWithName:", v13);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(void **)(v15 + 232);
  *(_QWORD *)(v15 + 232) = v14;

  if (v12)
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232) == 0;
  else
    v17 = 1;
  v18 = v17;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "QIGzPs2bVq2VxS4M", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding", __p[0], __p[1], v49));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v7, "newFunctionWithName:", v19);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(void **)(v21 + 240);
  *(_QWORD *)(v21 + 240) = v20;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 240))
    v18 = 1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "Hmk3PGZ565RIBRZP", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v7, "newFunctionWithName:", v23);
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(void **)(v25 + 248);
  *(_QWORD *)(v25 + 248) = v24;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
    v18 = 1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "KE4xrzZesffGRPUB", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v7, "newFunctionWithName:", v27);
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(void **)(v29 + 256);
  *(_QWORD *)(v29 + 256) = v28;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 256))
    v18 = 1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "q8uvFNtso1zF16lH", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend(v7, "newFunctionWithName:", v31);
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(void **)(v33 + 264);
  *(_QWORD *)(v33 + 264) = v32;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264))
    v18 = 1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", "wkXOvIk1TMeWvozi", objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v7, "newFunctionWithName:", v35);
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(void **)(v37 + 272);
  *(_QWORD *)(v37 + 272) = v36;

  v5 = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 272) != 0) & ~v18;
  v6 = v51;
  if (v51)
  {
LABEL_25:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_29:
  v41 = v53;
  if (v53)
  {
    v42 = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v55;
  if (v55)
  {
    v45 = (unint64_t *)&v55->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  return v5;
}

void sub_23947BB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  sub_239416DA0((uint64_t)&a16);
  sub_239416DA0((uint64_t)&a18);
  sub_239416DA0((uint64_t)&a20);

  _Unwind_Resume(a1);
}

uint64_t sub_23947BBBC(uint64_t a1, int a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  BOOL v84;
  BOOL v86;
  uint64_t v87;
  int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  unsigned int v122;
  uint64_t v123;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  int v129;

  v4 = *(id *)(*(_QWORD *)(a1 + 8) + 280);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 40);
  if (v6 < 3)
  {
    v10 = *(std::__shared_weak_count **)(v5 + 72);
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 0;
    if (!v10)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
  }
  else
  {
    v7 = operator new(0x138uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_250ADC318;
    v8 = sub_23948013C((uint64_t)(v7 + 3), v6);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(v9 + 72);
    *(_QWORD *)(v9 + 64) = v8;
    *(_QWORD *)(v9 + 72) = v7;
    if (!v10)
      goto LABEL_11;
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
  }
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  v129 = a2;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (*(_DWORD *)(v5 + 12) * *(_DWORD *)(v5 + 20));
  v16 = *(char **)(v14 + 80);
  v17 = *(char **)(v14 + 88);
  v18 = v17 - v16;
  v19 = v15 - (v17 - v16);
  if (v15 > v17 - v16)
  {
    v20 = *(_QWORD *)(v14 + 96);
    if (v20 - (uint64_t)v17 >= v19)
    {
      bzero(*(void **)(v14 + 88), v15 - (v17 - v16));
      *(_QWORD *)(v14 + 88) = &v16[v15];
      goto LABEL_40;
    }
    v21 = v20 - (_QWORD)v16;
    v22 = 2 * v21;
    if (2 * v21 <= v15)
      v22 = (*(_DWORD *)(v5 + 12) * *(_DWORD *)(v5 + 20));
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    v24 = (char *)operator new(v23);
    v127 = &v24[v23];
    v25 = v24;
    v125 = &v24[v15];
    v26 = &v24[v18];
    bzero(&v24[v18], v19);
    if (v17 == v16)
      goto LABEL_38;
    if (v18 >= 8 && (unint64_t)(v16 - v25) >= 0x20)
    {
      if (v18 < 0x20)
      {
        v27 = 0;
        goto LABEL_30;
      }
      v27 = v18 & 0xFFFFFFFFFFFFFFE0;
      v28 = v17 - 16;
      v29 = &v25[v17 - 16 - v16];
      v30 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v31 = *(_OWORD *)v28;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v28 - 1);
        *(_OWORD *)v29 = v31;
        v29 -= 32;
        v28 -= 32;
        v30 -= 32;
      }
      while (v30);
      if (v18 == v27)
        goto LABEL_37;
      if ((v18 & 0x18) != 0)
      {
LABEL_30:
        v26 -= v18 & 0xFFFFFFFFFFFFFFF8;
        v32 = &v17[-v27 - 8];
        v33 = (char *)(v32 - v16);
        v34 = v27 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v35 = *(_QWORD *)v32;
          v32 -= 8;
          *(_QWORD *)&v33[(_QWORD)v25] = v35;
          v33 -= 8;
          v34 += 8;
        }
        while (v34);
        v17 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_37;
        goto LABEL_35;
      }
      v26 -= v27;
      v17 -= v27;
    }
LABEL_35:
    v36 = v26 - 1;
    do
    {
      v37 = *--v17;
      *v36-- = v37;
    }
    while (v17 != v16);
LABEL_37:
    v17 = v16;
    v26 = v25;
LABEL_38:
    *(_QWORD *)(v14 + 80) = v26;
    *(_QWORD *)(v14 + 88) = v125;
    *(_QWORD *)(v14 + 96) = v127;
    if (v17)
      operator delete(v17);
    goto LABEL_40;
  }
  if (v15 < v17 - v16)
    *(_QWORD *)(v14 + 88) = &v16[v15];
LABEL_40:
  v38 = *(_QWORD *)(a1 + 8);
  v39 = (*(_DWORD *)(v5 + 12) * *(_DWORD *)(v5 + 20));
  v40 = *(char **)(v38 + 104);
  v41 = *(char **)(v38 + 112);
  v42 = v41 - v40;
  v43 = v39 - (v41 - v40);
  if (v39 > v41 - v40)
  {
    v44 = *(_QWORD *)(v38 + 120);
    if (v44 - (uint64_t)v41 >= v43)
    {
      bzero(*(void **)(v38 + 112), v39 - (v41 - v40));
      *(_QWORD *)(v38 + 112) = &v40[v39];
      goto LABEL_69;
    }
    v45 = v44 - (_QWORD)v40;
    v46 = 2 * v45;
    if (2 * v45 <= v39)
      v46 = (*(_DWORD *)(v5 + 12) * *(_DWORD *)(v5 + 20));
    if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
      v47 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    v48 = (char *)operator new(v47);
    v128 = &v48[v47];
    v49 = v48;
    v126 = &v48[v39];
    v50 = &v48[v42];
    bzero(&v48[v42], v43);
    if (v41 == v40)
      goto LABEL_67;
    if (v42 >= 8 && (unint64_t)(v40 - v49) >= 0x20)
    {
      if (v42 < 0x20)
      {
        v51 = 0;
        goto LABEL_59;
      }
      v51 = v42 & 0xFFFFFFFFFFFFFFE0;
      v52 = v41 - 16;
      v53 = &v49[v41 - 16 - v40];
      v54 = v42 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v55 = *(_OWORD *)v52;
        *((_OWORD *)v53 - 1) = *((_OWORD *)v52 - 1);
        *(_OWORD *)v53 = v55;
        v53 -= 32;
        v52 -= 32;
        v54 -= 32;
      }
      while (v54);
      if (v42 == v51)
        goto LABEL_66;
      if ((v42 & 0x18) != 0)
      {
LABEL_59:
        v50 -= v42 & 0xFFFFFFFFFFFFFFF8;
        v56 = &v41[-v51 - 8];
        v57 = (char *)(v56 - v40);
        v58 = v51 - (v42 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v59 = *(_QWORD *)v56;
          v56 -= 8;
          *(_QWORD *)&v57[(_QWORD)v49] = v59;
          v57 -= 8;
          v58 += 8;
        }
        while (v58);
        v41 -= v42 & 0xFFFFFFFFFFFFFFF8;
        if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_66;
        goto LABEL_64;
      }
      v50 -= v51;
      v41 -= v51;
    }
LABEL_64:
    v60 = v50 - 1;
    do
    {
      v61 = *--v41;
      *v60-- = v61;
    }
    while (v41 != v40);
LABEL_66:
    v41 = v40;
    v50 = v49;
LABEL_67:
    *(_QWORD *)(v38 + 104) = v50;
    *(_QWORD *)(v38 + 112) = v126;
    *(_QWORD *)(v38 + 120) = v128;
    if (v41)
      operator delete(v41);
    goto LABEL_69;
  }
  if (v39 < v41 - v40)
    *(_QWORD *)(v38 + 112) = &v40[v39];
LABEL_69:
  v62 = 4 * (*(_DWORD *)(v5 + 12) * *(_DWORD *)(v5 + 20));
  v63 = objc_msgSend(v4, "newBufferWithLength:options:", v62, 0);
  v64 = *(_QWORD *)(a1 + 8);
  v65 = *(void **)(v64 + 128);
  *(_QWORD *)(v64 + 128) = v63;

  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
  v67 = objc_msgSend(v4, "newBufferWithLength:options:", v62, 0);
  v68 = *(_QWORD *)(a1 + 8);
  v69 = *(void **)(v68 + 136);
  *(_QWORD *)(v68 + 136) = v67;

  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136);
  v71 = (*(_DWORD *)(v5 + 12) * *(_DWORD *)(v5 + 20));
  v72 = objc_msgSend(v4, "newBufferWithLength:options:", v71, 0);
  v73 = *(_QWORD *)(a1 + 8);
  v74 = *(void **)(v73 + 144);
  *(_QWORD *)(v73 + 144) = v72;

  v75 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v76 = objc_msgSend(v4, "newBufferWithLength:options:", v71, 0);
  v77 = *(_QWORD *)(a1 + 8);
  v78 = *(void **)(v77 + 152);
  *(_QWORD *)(v77 + 152) = v76;

  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
  v80 = 4 * (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 20));
  v81 = objc_msgSend(v4, "newBufferWithLength:options:", v80, 0);
  v82 = *(_QWORD *)(a1 + 8);
  v83 = *(void **)(v82 + 160);
  *(_QWORD *)(v82 + 160) = v81;

  if (v66)
    v84 = v70 == 0;
  else
    v84 = 1;
  v86 = v84 || v75 == 0 || v79 == 0;
  v87 = *(_QWORD *)(a1 + 8);
  v89 = v86 || *(_QWORD *)(v87 + 160) == 0;
  if (v129)
  {
    if (!*(_BYTE *)(v87 + 24))
    {
      v90 = objc_msgSend(v4, "newBufferWithLength:options:", v80, 0);
      v91 = *(_QWORD *)(a1 + 8);
      v92 = *(void **)(v91 + 168);
      *(_QWORD *)(v91 + 168) = v90;

      if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168))
        v89 = 1;
    }
  }
  v93 = objc_msgSend(v4, "newBufferWithLength:options:", (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v5 + 20)), 0);
  v94 = *(_QWORD *)(a1 + 8);
  v95 = *(void **)(v94 + 176);
  *(_QWORD *)(v94 + 176) = v93;

  v96 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 176);
  LODWORD(v97) = *(_DWORD *)(v5 + 20);
  LODWORD(v98) = *(_DWORD *)(v5 + 28);
  LODWORD(v99) = *(_DWORD *)(v5 + 36);
  v100 = objc_msgSend(v4, "newBufferWithLength:options:", vcvtd_n_u64_f64(fmax((double)v98, (double)v99) * (double)v97, 2uLL), 0);
  v101 = *(_QWORD *)(a1 + 8);
  v102 = *(void **)(v101 + 184);
  *(_QWORD *)(v101 + 184) = v100;

  v103 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 184);
  LODWORD(v104) = *(_DWORD *)(v5 + 20);
  LODWORD(v105) = *(_DWORD *)(v5 + 32);
  LODWORD(v106) = *(_DWORD *)(v5 + 36);
  v107 = objc_msgSend(v4, "newBufferWithLength:options:", vcvtd_n_u64_f64(fmax((double)v105, (double)v106) * (double)v104, 2uLL), 0);
  v108 = *(_QWORD *)(a1 + 8);
  v109 = *(void **)(v108 + 192);
  *(_QWORD *)(v108 + 192) = v107;

  v110 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 192);
  v111 = objc_msgSend(v4, "newBufferWithLength:options:", 4 * (*(_DWORD *)(v5 + 28) * *(_DWORD *)(v5 + 20)), 0);
  v112 = *(_QWORD *)(a1 + 8);
  v113 = *(void **)(v112 + 208);
  *(_QWORD *)(v112 + 208) = v111;

  v114 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  v115 = objc_msgSend(v4, "newBufferWithLength:options:", 4 * (*(_DWORD *)(v5 + 32) * *(_DWORD *)(v5 + 20)), 0);
  v116 = *(_QWORD *)(a1 + 8);
  v117 = *(void **)(v116 + 216);
  *(_QWORD *)(v116 + 216) = v115;

  v118 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 216);
  v119 = objc_msgSend(v4, "newBufferWithLength:options:", 4 * *(unsigned int *)(v5 + 20), 0);
  v120 = *(_QWORD *)(a1 + 8);
  v121 = *(void **)(v120 + 200);
  *(_QWORD *)(v120 + 200) = v119;

  v122 = (v96 != 0) & ~v89;
  if (!v103)
    v122 = 0;
  if (!v110)
    v122 = 0;
  if (!v114)
    v122 = 0;
  if (!v118)
    v122 = 0;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 200))
    v123 = v122;
  else
    v123 = 0;

  return v123;
}

void sub_23947C2A8(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);

  _Unwind_Resume(a1);
}

void sub_23947C2C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23947C2D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23947C2E4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADC2E8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_23947C324(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADC2E8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23947C374(uint64_t result, float a2)
{
  **(float **)(result + 8) = a2;
  return result;
}

uint64_t sub_23947C380(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;
  id v7;

  v2 = a2[1];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 20);
  if (v2 > v4)
    sub_239EBF44C();
  v6 = *a2;
  if (*a2 > v4)
    sub_239EBF47C();
  v7 = objc_retainAutorelease(*(id *)(v3 + 176));
  memcpy((void *)objc_msgSend(v7, "contents"), *((const void **)a2 + 5), v6 * (unint64_t)v2);
  nullsub_4(v7);

  return 1;
}

void sub_23947C408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23947C418(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, float64x2_t *a5, double *a6, char a7, float a8, uint64_t a9, uint64_t a10, char a11)
{
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float *v25;
  double v26;
  float v27;
  double v28;
  float v29;
  double v30;
  float v31;
  double v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  size_t v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  char *v56;
  int v57;
  float *v58;
  uint64_t v59;
  double v60;
  float v61;
  float v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  int v69;
  float *v70;
  uint64_t v71;
  double v72;
  float v73;
  float v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  __int32 *v96;
  uint64_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  __int32 *v114;
  uint64_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float *v121;
  void *v122;
  void *v123;
  void *v124;
  char *v125;
  id v126;
  char v127;
  float *__p;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  _QWORD v136[3];
  double v137[9];
  _BYTE *v138;
  _BYTE *v139;
  char *v140;
  _BYTE *v141;

  v17 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 36);
  sub_23941D390(a2, a4, &v140);
  sub_23941D390(a3, a4, &v138);
  if (v17 != 3)
  {
    sub_239A444D4((uint64_t)"unknown file", 1407, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((sub_23943E9C0(a5, (uint64_t)a6, (uint64_t)v137, v18, v19, v20, v21, v22, v23, v24) & 1) == 0)
  {
    v47 = 0;
    v48 = v138;
    if (!v138)
      goto LABEL_15;
    goto LABEL_14;
  }
  v25 = (float *)operator new(0x24uLL);
  v127 = a7;
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  v26 = v137[1];
  v27 = v137[0];
  v28 = v137[2];
  v29 = v137[3];
  *v25 = v27;
  v25[1] = v29;
  v30 = v137[7];
  v31 = v137[6];
  *(float *)&v26 = v26;
  v25[2] = v31;
  v25[3] = *(float *)&v26;
  v32 = v137[5];
  v33 = v137[4];
  *(float *)&v30 = v30;
  v25[4] = v33;
  v25[5] = *(float *)&v30;
  v136[1] = v25 + 9;
  v136[2] = v25 + 9;
  v25[8] = 0.0;
  v136[0] = v25;
  v34 = v28;
  *(float *)&v32 = v32;
  v25[6] = v34;
  v25[7] = *(float *)&v32;
  v35 = v137[8];
  v25[8] = v35;
  v36 = *(_QWORD *)(a1 + 8);
  v125 = v140;
  v37 = -1431655765 * ((unint64_t)(v141 - v140) >> 3);
  v38 = *(_DWORD *)(v36 + 20);
  if (v38 >= v37)
    v39 = v37;
  else
    v39 = v38;
  v40 = v138;
  v41 = -1431655765 * ((unint64_t)(v139 - v138) >> 3);
  if (v38 >= v41)
    v42 = v41;
  else
    v42 = v38;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  __p = v25;
  if ((_DWORD)v39)
  {
    v43 = 4 * (3 * v39);
    v44 = (char *)operator new(v43);
    v133 = v44;
    v135 = &v44[v43];
    bzero(v44, v43);
    v134 = &v44[v43];
    v130 = 0;
    v131 = 0;
    v132 = 0;
    if ((_DWORD)v42)
      goto LABEL_11;
  }
  else
  {
    v44 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    if ((_DWORD)v42)
    {
LABEL_11:
      v45 = 4 * (3 * v42);
      v46 = (char *)operator new(v45);
      v130 = v46;
      v132 = &v46[v45];
      bzero(v46, v45);
      v131 = &v46[v45];
      if (!(_DWORD)v39)
        goto LABEL_24;
      goto LABEL_20;
    }
  }
  v46 = 0;
  if (!(_DWORD)v39)
    goto LABEL_24;
LABEL_20:
  v50 = a5->f64[1];
  v51 = 1.0 / a5->f64[0];
  v52 = 1.0 / v50;
  v53 = -a5[1].f64[0] / a5->f64[0];
  v54 = -a5[1].f64[1] / v50;
  if (v39 > 0x16)
  {
    v55 = 0;
    v86 = 3 * (v39 - 1);
    v56 = v125;
    if (v86 <= 0xFFFFFFFD && (v86 & 0xFFFFFFFF00000000) == 0)
    {
      v87 = 12 * (v39 - 1);
      if (&v44[v87 + 4] >= v44 + 4 && &v44[v87 + 8] >= v44 + 8 && &v44[v87] >= v44)
      {
        if (v125 >= &v44[12 * v39] || v44 >= &v125[24 * v39 - 16])
        {
          v108 = v39 & 1;
          v109 = 2;
          if ((v39 & 1) == 0)
            v108 = 2;
          v55 = v39 - v108;
          v110 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v51, 0);
          v111 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v53, 0);
          v112 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v52, 0);
          v113 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0);
          v114 = (__int32 *)(v125 + 28);
          __asm { FMOV            V18.2S, #1.0 }
          v116 = v55;
          do
          {
            v117.i32[0] = *(v114 - 7);
            v118.i32[0] = *(v114 - 6);
            v117.i32[1] = *(v114 - 1);
            v118.i32[1] = *v114;
            v119 = vcvt_f32_f64(vmlaq_f64(v111, v110, vcvtq_f64_f32(v117)));
            v120 = vcvt_f32_f64(vmlaq_f64(v113, v112, vcvtq_f64_f32(v118)));
            v121 = (float *)&v44[4 * (v109 & 0xFFFFFFFE) - 8];
            vst3_f32(v121, *(float32x2x3_t *)(&_D18 - 2));
            v109 += 6;
            v114 += 12;
            v116 -= 2;
          }
          while (v116);
        }
        else
        {
          v55 = 0;
        }
      }
    }
  }
  else
  {
    v55 = 0;
    v56 = v125;
  }
  v57 = 3 * v55;
  v58 = (float *)&v56[24 * v55 + 4];
  v59 = v39 - v55;
  do
  {
    v60 = v54 + *v58 * v52;
    v61 = v53 + *(v58 - 1) * v51;
    *(float *)&v44[4 * v57] = v61;
    v62 = v60;
    *(float *)&v44[4 * (v57 + 1)] = v62;
    *(_DWORD *)&v44[4 * (v57 + 2)] = 1065353216;
    v57 += 3;
    v58 += 6;
    --v59;
  }
  while (v59);
LABEL_24:
  if (!(_DWORD)v42)
    goto LABEL_29;
  v63 = a6[1];
  v64 = 1.0 / *a6;
  v65 = 1.0 / v63;
  v66 = -a6[2] / *a6;
  v67 = -a6[3] / v63;
  if (v42 > 0x16)
  {
    v68 = 0;
    v88 = 3 * (v42 - 1);
    if (v88 > 0xFFFFFFFD)
      goto LABEL_27;
    if ((v88 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_27;
    v89 = 12 * (v42 - 1);
    if (&v46[v89 + 4] < v46 + 4 || &v46[v89 + 8] < v46 + 8 || &v46[v89] < v46)
      goto LABEL_27;
    if (v40 >= &v46[12 * v42] || v46 >= &v40[24 * v42 - 16])
    {
      v90 = v42 & 1;
      v91 = 2;
      if ((v42 & 1) == 0)
        v90 = 2;
      v68 = v42 - v90;
      v92 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v64, 0);
      v93 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v66, 0);
      v94 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
      v95 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v67, 0);
      v96 = (__int32 *)(v40 + 28);
      __asm { FMOV            V18.2S, #1.0 }
      v102 = v68;
      do
      {
        v103.i32[0] = *(v96 - 7);
        v104.i32[0] = *(v96 - 6);
        v103.i32[1] = *(v96 - 1);
        v104.i32[1] = *v96;
        v105 = vcvt_f32_f64(vmlaq_f64(v93, v92, vcvtq_f64_f32(v103)));
        v106 = vcvt_f32_f64(vmlaq_f64(v95, v94, vcvtq_f64_f32(v104)));
        v107 = (float *)&v46[4 * (v91 & 0xFFFFFFFE) - 8];
        vst3_f32(v107, *(float32x2x3_t *)(&_D18 - 2));
        v91 += 6;
        v96 += 12;
        v102 -= 2;
      }
      while (v102);
      goto LABEL_27;
    }
  }
  v68 = 0;
LABEL_27:
  v69 = 3 * v68;
  v70 = (float *)&v40[24 * v68 + 4];
  v71 = v42 - v68;
  do
  {
    v72 = v67 + *v70 * v65;
    v73 = v66 + *(v70 - 1) * v64;
    *(float *)&v46[4 * v69] = v73;
    v74 = v72;
    *(float *)&v46[4 * (v69 + 1)] = v74;
    *(_DWORD *)&v46[4 * (v69 + 2)] = 1065353216;
    v69 += 3;
    v70 += 6;
    --v71;
  }
  while (v71);
LABEL_29:
  v126 = *(id *)(v36 + 128);
  v75 = *(id *)(*(_QWORD *)(a1 + 8) + 136);
  v76 = *(id *)(*(_QWORD *)(a1 + 8) + 160);
  v77 = *(id *)(*(_QWORD *)(a1 + 8) + 184);
  v78 = *(id *)(*(_QWORD *)(a1 + 8) + 200);
  v79 = *(id *)(*(_QWORD *)(a1 + 8) + 176);
  v80 = *(id *)(*(_QWORD *)(a1 + 8) + 216);
  kdebug_trace();
  v81 = *(_QWORD *)(a1 + 8);
  v82 = v79;
  v124 = v79;
  v83 = v77;
  v122 = v76;
  v123 = v77;
  v84 = v76;
  v85 = v75;
  v47 = sub_2394795C0(*(void **)(v81 + 280), *(void **)(v81 + 288), (uint64_t)&v133, (uint64_t)&v130, (uint64_t)v136, *(_DWORD *)(v81 + 36), v127, v126, a8, v75, v80, v122, v123, v78, v124, *(void **)(v81 + 248), *(void **)(v81 + 256), *(void **)(v81 + 264), a10,
          a11);
  if ((v47 & 1) != 0)
    kdebug_trace();

  if (v46)
    operator delete(v46);
  if (v44)
    operator delete(v44);
  operator delete(__p);
  v48 = v138;
  if (v138)
  {
LABEL_14:
    v139 = v48;
    operator delete(v48);
  }
LABEL_15:
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  return v47;
}

void sub_23947CB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;
  uint64_t v26;
  void *v28;
  void *v29;

  if (v25)
    operator delete(v25);
  operator delete(__p);
  v28 = *(void **)(v26 - 152);
  if (v28)
  {
    *(_QWORD *)(v26 - 144) = v28;
    operator delete(v28);
    v29 = *(void **)(v26 - 128);
    if (!v29)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v29 = *(void **)(v26 - 128);
    if (!v29)
      goto LABEL_5;
  }
  *(_QWORD *)(v26 - 120) = v29;
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_23947CBD0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, int a5, float64x2_t *a6, char a7, uint64_t a8, float a9, double *a10, char a11, uint64_t a12, unsigned __int8 a13, char **a14, unsigned __int8 a15, uint64_t a16, char a17)
{
  uint64_t result;
  char v20;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  id v38;
  id v39;
  int v40;

  result = 0;
  if (a5 && a7)
  {
    if (a9 <= 0.0 || a11 == 0)
      return 0;
    v20 = a4;
    v23 = sub_23947C418(a1, a2, a3, a4, a6, a10, 0, a9, a8, a16, a17);
    v24 = v23;
    result = 0;
    if (v24)
    {
      if (a13 | (unint64_t)a15)
      {
        v39 = *(id *)(*(_QWORD *)(a1 + 8) + 176);
        v38 = *(id *)(*(_QWORD *)(a1 + 8) + 160);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 288), "commandBuffer");
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = (void *)v25;
        if (!v25)
        {
LABEL_15:

          return 0;
        }
        v37 = (void *)v25;
        sub_23971DB68();
        objc_msgSend(v26, "commit");
        objc_msgSend(v26, "waitUntilCompleted");
        objc_msgSend(v26, "error");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = sub_2394790EC(v27);

        if (v28)
        {
          v26 = v37;
          if (a17)
          {
            v40 = 3016;
            sub_23947FDCC(a16, &v40, &v40);
          }
          goto LABEL_15;
        }
        v29 = *(_QWORD *)(a1 + 8);
        v30 = sub_23947CE1C((uint64_t)a2, v20);
        v31 = *(_DWORD *)(v29 + 20);
        v32 = *(_QWORD *)(a1 + 8);
        v33 = sub_23947CE1C((uint64_t)a3, v20);
        if (v30 >= v31)
          v34 = v31;
        else
          v34 = v30;
        v35 = *(_DWORD *)(v32 + 20);
        if (v33 < v35)
          v35 = v33;
        v36 = v35 * v34;
        if (a13)
          sub_23947CEF0(v39, a12, v35 * v34);
        if (a15)
          sub_23947D128(v38, a14, v36);

      }
      return 1;
    }
  }
  return result;
}

void sub_23947CDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_23947CE1C(uint64_t a1, char a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  BOOL v8;
  _BOOL4 v9;
  double v10;

  if ((a2 & 1) != 0)
    return *(unsigned int *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    return 0;
  v5 = 0;
  result = 0;
  v6 = *(_QWORD *)(a1 + 24);
  do
  {
    if ((*(_QWORD *)(v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v5)) != 0)
    {
      if (v4 <= v5
        || (*(_QWORD *)(v6 + (((unint64_t)v5 >> 3) & 0x1FFFFFF8)) & (1 << v5)) == 0)
      {
        sub_239EBEBD8();
      }
      v7 = *(float *)(*(_QWORD *)(a1 + 48) + 24 * v5 + 20);
      v8 = v7 < 0.0;
      v9 = v7 != 0.0;
      v10 = v7;
      if (v8)
        v10 = 0.0 - v10;
      if (v10 <= 0.00000001)
        v9 = 0;
      result = (result + v9);
    }
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void sub_23947CEF0(void *a1, uint64_t a2, size_t a3)
{
  id v5;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char *v29;
  id v30;

  v5 = a1;
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = a3 - v8;
  if (a3 <= v8)
  {
    if (a3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[a3];
    goto LABEL_33;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 >= v9)
  {
    bzero(*(void **)(a2 + 8), a3 - v8);
    *(_QWORD *)(a2 + 8) = &v6[v9];
    goto LABEL_33;
  }
  if ((a3 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v11 = v10 - (_QWORD)v7;
  v12 = 2 * v11;
  if (2 * v11 <= a3)
    v12 = a3;
  if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v12;
  v14 = operator new(v13);
  v15 = (char *)v14 + v13;
  v16 = (char *)v14 + a3;
  bzero((char *)v14 + v8, a3 - v8);
  if (v6 == v7)
  {
    *(_QWORD *)a2 = (char *)v14 + v8;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v15;
    if (!v6)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v8 < 8)
  {
    v17 = (char *)v14 + v8;
    goto LABEL_29;
  }
  v17 = (char *)v14 + v8;
  if ((unint64_t)(v7 - (_BYTE *)v14) < 0x20)
  {
LABEL_29:
    v27 = v17 - 1;
    do
    {
      v28 = *--v6;
      *v27-- = v28;
    }
    while (v6 != v7);
    goto LABEL_31;
  }
  if (v8 < 0x20)
  {
    v18 = 0;
    goto LABEL_24;
  }
  v18 = v8 & 0xFFFFFFFFFFFFFFE0;
  v19 = v6 - 16;
  v20 = (char *)v14 + v6 - 16 - v7;
  v21 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
    *(_OWORD *)v20 = v22;
    v20 -= 32;
    v19 -= 32;
    v21 -= 32;
  }
  while (v21);
  if (v8 == v18)
    goto LABEL_31;
  if ((v8 & 0x18) == 0)
  {
    v17 -= v18;
    v6 -= v18;
    goto LABEL_29;
  }
LABEL_24:
  v17 -= v8 & 0xFFFFFFFFFFFFFFF8;
  v23 = &v6[-v18 - 8];
  v24 = (char *)(v23 - v7);
  v25 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v26 = *(_QWORD *)v23;
    v23 -= 8;
    *(_QWORD *)&v24[(_QWORD)v14] = v26;
    v24 -= 8;
    v25 += 8;
  }
  while (v25);
  v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
  if (v8 != (v8 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_29;
LABEL_31:
  v6 = v7;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v15;
  if (v7)
LABEL_32:
    operator delete(v6);
LABEL_33:
  v29 = *(char **)a2;
  v30 = objc_retainAutorelease(v5);
  memcpy(v29, (const void *)objc_msgSend(v30, "contents"), a3);

}

void sub_23947D118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23947D128(void *a1, char **a2, unint64_t a3)
{
  id v5;
  char *v6;
  unint64_t v7;
  id v8;

  v5 = a1;
  v6 = *a2;
  v7 = (a2[1] - *a2) >> 2;
  if (a3 <= v7)
  {
    if (a3 < v7)
      a2[1] = &v6[4 * a3];
  }
  else
  {
    sub_2394807B4((uint64_t)a2, a3 - v7);
    v6 = *a2;
  }
  v8 = objc_retainAutorelease(v5);
  memcpy(v6, (const void *)objc_msgSend(v8, "contents"), 4 * a3);

}

void sub_23947D1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23947D1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6, int a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  int v18;
  float v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  int v35;
  unint64_t v36;
  int v37;
  void *v38;
  int v39;
  uint64_t v40;
  int v41;
  const void **v42;
  int v43;
  id v44;
  int v45;
  const void **v46;
  int v47;
  id v48;
  id v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  id *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const void **v62;
  int v63;
  id v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  const void **v76;
  int v77;
  id v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  id v89;
  id *v90;
  unint64_t v91;
  id v92;
  id v93;
  void *v94;
  unint64_t v95;
  int v96;
  id v97;
  int32x4_t v98;
  float32x4_t v99;
  unint64_t v100;
  id v101;
  void *v102;
  unint64_t v103;
  id v104;
  id v105;
  void *v106;
  unint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  id *v120;
  char *v121;
  _DWORD *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  BOOL v128;
  BOOL v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  float *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  float *v138;
  float *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  id *v146;
  float *v147;
  float *v148;
  uint64_t v149;
  float v150;
  float v151;
  int v152;
  BOOL v154;
  BOOL v155;
  float32x4_t *v156;
  __int128 *v157;
  uint64_t v158;
  float *v159;
  __int128 v160;
  float32x4_t v161;
  float *v162;
  float *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float32x4_t v168;
  unint64_t v169;
  uint64_t v170;
  id *v171;
  float *v172;
  BOOL v174;
  BOOL v175;
  float32x4_t *v176;
  __int128 *v177;
  uint64_t v178;
  float *v179;
  float32x4_t v180;
  __int128 v181;
  float *v182;
  float *v183;
  float *v184;
  uint64_t v185;
  float v186;
  float v187;
  int v188;
  void *v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  id v193;
  void *v194;
  uint64_t *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  _DWORD *v210;
  int v211;
  int v212;
  int v213;
  BOOL v215;
  BOOL v216;
  __int128 *v217;
  __int128 *v218;
  float *v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  float *v223;
  float *v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  float *v231;
  int v232;
  int v233;
  float v234;
  float v235;
  unint64_t v236;
  char *v237;
  char *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  id v248;
  unint64_t v249;
  size_t v250;
  unint64_t v251;
  size_t v252;
  uint64_t v253;
  char *v254;
  void *v255;
  int64x2_t *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  int64_t v260;
  int64x2_t *v261;
  uint64_t v262;
  int64x2_t v263;
  int64_t v264;
  BOOL v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  float v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  int64x2_t *v279;
  uint64_t *v280;
  uint64_t v281;
  float v282;
  int64x2_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  float v301;
  uint64_t *v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  float v306;
  float v307;
  double v308;
  float v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t *v313;
  char *v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  int v323;
  char *v324;
  unint64_t v325;
  int v326;
  _DWORD *v327;
  uint64_t v328;
  _QWORD *v329;
  unsigned int *v330;
  int v331;
  int v332;
  unsigned int v333;
  unint64_t v334;
  _DWORD *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  int v344;
  void *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  float *v349;
  char *v350;
  uint64_t v351;
  float *v352;
  float v353;
  float v354;
  int v355;
  BOOL v357;
  BOOL v358;
  __int128 *v359;
  float32x4_t *v360;
  float *v361;
  uint64_t v362;
  __int128 v363;
  float32x4_t v364;
  float *v365;
  float *v366;
  uint64_t v367;
  float32x4_t v368;
  unint64_t v369;
  uint64_t v370;
  float *v371;
  char *v372;
  float *v373;
  uint64_t v374;
  float v375;
  float v376;
  int v377;
  BOOL v379;
  __int128 *v381;
  float32x4_t *v382;
  uint64_t v383;
  float *v384;
  float32x4_t v385;
  __int128 v386;
  float *v387;
  float *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  void *v392;
  void *v393;
  unsigned int v394;
  id v395;
  int64x2_t v396;
  int v397;
  unsigned int v398;
  unint64_t v399;
  id v400;
  int v401;
  id v402;
  id v403;
  id v404;
  id v405;
  id v406;
  id v407;
  id v408;
  id v409;
  id v410;
  int __len;
  int v412;
  uint64_t v413;
  unint64_t v414;
  char v415;
  uint64_t *v416;
  id v417;
  id v418;
  id v420;
  unint64_t v421;
  uint64_t v422;
  int v423;
  unint64_t v424;
  unint64_t v425;
  unsigned __int8 v426;
  int v427;
  unint64_t v428;
  int v429;
  void *__p;
  void *v431;
  uint64_t v432;
  void *v433;
  char *v434;
  uint64_t v435;
  void *v436;
  char *v437;
  uint64_t v438;
  void *v439;
  std::__shared_weak_count *v440;
  uint64_t v441;
  id *v442;
  id *v443;
  uint64_t v444;
  void *v445;
  std::__shared_weak_count *v446;
  id *v447;
  std::__shared_weak_count *v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  char *v451;
  char *v452;
  char *v453;
  char *v454;
  float32x4x3_t v455;
  float32x4x3_t v456;
  float32x4x3_t v457;
  float32x4x3_t v458;
  float32x4x3_t v459;

  v17 = *(_QWORD *)(a1 + 8);
  v423 = *(unsigned __int8 *)(v17 + 8);
  v18 = *(unsigned __int8 *)(v17 + 48);
  v19 = *(float *)(v17 + 44);
  v426 = *(_BYTE *)(v17 + 49);
  sub_239429CA8(a2, a7, &v453);
  sub_239429CA8(a3, a7, &v451);
  v20 = (unint64_t)(v454 - v453) >> 2;
  v21 = *(_DWORD *)(v17 + 20);
  if (v21 >= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v451;
  v24 = (unint64_t)(v452 - v451) >> 2;
  if (v21 >= v24)
    v25 = v24;
  else
    v25 = v21;
  if ((_DWORD)v22)
    v26 = (_DWORD)v25 == 0;
  else
    v26 = 1;
  if (v26)
  {
    v27 = 0;
    if (!v451)
      goto LABEL_14;
    goto LABEL_13;
  }
  v415 = a8;
  __len = v18;
  v29 = *(_QWORD *)(a1 + 8);
  v422 = v25;
  if (v25 >= *(_DWORD *)(v29 + 28))
    LODWORD(v25) = *(_DWORD *)(v29 + 28);
  if (v22 >= *(_DWORD *)(v29 + 32))
    LODWORD(v30) = *(_DWORD *)(v29 + 32);
  else
    LODWORD(v30) = v22;
  if (v25 > 0x10)
    v30 = 1;
  else
    v30 = v30;
  v413 = v30;
  if (v25 > 0x10)
    v31 = 1;
  else
    v31 = v25;
  v425 = v31;
  v33 = *(_QWORD *)(v29 + 64);
  v32 = *(std::__shared_weak_count **)(v29 + 72);
  v449 = v33;
  v450 = v32;
  v398 = v25;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v35 = a6;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    v29 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v35 = a6;
  }
  v408 = *(id *)(v29 + 128);
  v407 = *(id *)(*(_QWORD *)(a1 + 8) + 136);
  v406 = *(id *)(*(_QWORD *)(a1 + 8) + 176);
  v409 = *(id *)(*(_QWORD *)(a1 + 8) + 160);
  v405 = *(id *)(*(_QWORD *)(a1 + 8) + 168);
  v404 = *(id *)(*(_QWORD *)(a1 + 8) + 184);
  v403 = *(id *)(*(_QWORD *)(a1 + 8) + 208);
  v417 = *(id *)(*(_QWORD *)(a1 + 8) + 192);
  v418 = *(id *)(*(_QWORD *)(a1 + 8) + 216);
  v37 = a7 | (4 * a5);
  v412 = a7 | (4 * v35);
  if (v33)
  {
    v397 = a7 | (4 * a5);
    if (a5 < 0)
    {
      v442 = 0;
      v443 = 0;
      v38 = v404;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_36;
    }
    else
    {
      v38 = v404;
      sub_23947F614(v33, v37, &v442);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_36:
        sub_23947F614(v33, v412, &v439);
LABEL_49:
        v410 = *(id *)(*(_QWORD *)(a1 + 8) + 280);
        v50 = *(_DWORD *)(v17 + 12) * *(_DWORD *)(v17 + 20);
        if (!v442)
        {
          v57 = objc_msgSend(v410, "newBufferWithLength:options:", v50, 0);
          v58 = (id *)operator new(0x20uLL);
          v58[2] = 0;
          *v58 = &unk_250ADC3D8;
          v58[1] = 0;
          v58[3] = (id)v57;
          v59 = (std::__shared_weak_count *)v443;
          v442 = v58 + 3;
          v443 = v58;
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v401 = v50;
          v62 = (const void **)(*(_QWORD *)(a1 + 8) + 80);
          sub_23947F3A0(a2, (uint64_t)v62, (uint64_t *)&v453, v22);
          v63 = *(_DWORD *)(v17 + 12);
          v64 = objc_retainAutorelease(*v442);
          memcpy((void *)objc_msgSend(v64, "contents"), *v62, (v63 * v22));
          nullsub_4(v64);

          v38 = v404;
          v50 = v401;
          if ((a5 & 0x80000000) == 0)
          {
            v65 = v449;
            v447 = v442;
            v448 = (std::__shared_weak_count *)v443;
            if (v443)
            {
              v66 = (unint64_t *)(v443 + 1);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            sub_23947F8B8(v65, (uint64_t *)&v447, v397);
            v68 = v448;
            if (v448)
            {
              v69 = (unint64_t *)&v448->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
          }
        }
        if (!v439)
        {
          v71 = objc_msgSend(v410, "newBufferWithLength:options:", v50, 0);
          v72 = (std::__shared_weak_count *)operator new(0x20uLL);
          v72->__shared_weak_owners_ = 0;
          v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_250ADC3D8;
          v72->__shared_owners_ = 0;
          v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
          v73 = v440;
          v439 = &v72[1];
          v440 = v72;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v76 = (const void **)(*(_QWORD *)(a1 + 8) + 104);
          sub_23947F3A0(a3, (uint64_t)v76, (uint64_t *)&v451, v422);
          v77 = *(_DWORD *)(v17 + 12);
          v78 = objc_retainAutorelease(*(id *)v439);
          memcpy((void *)objc_msgSend(v78, "contents"), *v76, (v77 * v422));
          nullsub_4(v78);

          if ((a6 & 0x80000000) == 0)
          {
            v79 = v449;
            v445 = v439;
            v446 = v440;
            if (v440)
            {
              v80 = (unint64_t *)&v440->__shared_owners_;
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
            }
            sub_23947F8B8(v79, (uint64_t *)&v445, v412);
            v82 = v446;
            if (v446)
            {
              v83 = (unint64_t *)&v446->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
          }
        }
        v49 = *v442;
        v48 = *(id *)v439;

        v51 = v440;
        if (v440)
        {
          v52 = (unint64_t *)&v440->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = (std::__shared_weak_count *)v443;
        if (v443)
        {
          v55 = (unint64_t *)(v443 + 1);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        goto LABEL_90;
      }
    }
    v439 = 0;
    v440 = 0;
    goto LABEL_49;
  }
  v39 = a7 | (4 * a5);
  v420 = *(id *)(*(_QWORD *)(a1 + 8) + 144);
  v400 = *(id *)(*(_QWORD *)(a1 + 8) + 152);
  v40 = *(_QWORD *)(a1 + 8);
  if (a5 == -1 || (v41 = *(_DWORD *)(v40 + 56), v41 == -1) || (v41 & 0x80000000) == 0 && v41 != v39)
  {
    v42 = (const void **)(v40 + 80);
    sub_23947F3A0(a2, v40 + 80, (uint64_t *)&v453, v22);
    v43 = *(_DWORD *)(v17 + 12);
    v44 = objc_retainAutorelease(v420);
    memcpy((void *)objc_msgSend(v44, "contents"), *v42, (v43 * v22));
    nullsub_4(v44);

    v40 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v40 + 56) = v39;
  }
  if (v35 != -1 && (v45 = *(_DWORD *)(v40 + 60), v45 != -1) && (v45 < 0 || v45 == v412))
  {
    v49 = v420;
    v38 = v404;
    v48 = v400;
  }
  else
  {
    v46 = (const void **)(v40 + 104);
    sub_23947F3A0(a3, v40 + 104, (uint64_t *)&v451, v422);
    v47 = *(_DWORD *)(v17 + 12);
    v48 = objc_retainAutorelease(v400);
    memcpy((void *)objc_msgSend(v48, "contents"), *v46, (v47 * v422));
    nullsub_4(v48);

    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 60) = v412;
    v49 = v420;
    v38 = v404;
  }
LABEL_90:
  v421 = (v422 * v22);
  kdebug_trace();
  v85 = v403;
  v86 = *(_QWORD *)(a1 + 8);
  v87 = sub_239479E54(*(void **)(v86 + 280), *(void **)(v86 + 288), v49, v48, v406, v408, v407, v409, v405, v38, v403, v417, v418, *(void **)(v86 + 240), *(void **)(v86 + 224), *(void **)(v86 + 232), v22, v422, *(_DWORD *)(v17 + 12),
          v425,
          v413,
          v426,
          v423 != 0,
          v415,
          *(_BYTE *)(v86 + 24),
          a9,
          a10);
  v27 = v87;
  if (!(_DWORD)v87)
    goto LABEL_429;
  v394 = v87;
  v402 = v48;
  kdebug_trace();
  v442 = 0;
  v443 = 0;
  v444 = 0;
  v439 = 0;
  v440 = 0;
  v441 = 0;
  v436 = 0;
  v437 = 0;
  v438 = 0;
  v433 = 0;
  v434 = 0;
  v88 = (int)v425 * (int)v22;
  v435 = 0;
  v89 = v403;
  v90 = v442;
  v91 = ((char *)v443 - (char *)v442) >> 2;
  v395 = v49;
  if (v88 <= v91)
  {
    if (v88 < v91)
      v443 = (id *)((char *)v442 + 4 * v88);
  }
  else
  {
    sub_23942CB44((uint64_t)&v442, v88 - v91);
    v90 = v442;
  }
  v92 = objc_retainAutorelease(v89);
  memcpy(v90, (const void *)objc_msgSend(v92, "contents"), 4 * v88);

  v93 = v38;
  v94 = v436;
  v95 = (v437 - (_BYTE *)v436) >> 2;
  if (v88 <= v95)
  {
    if (v88 < v95)
      v437 = (char *)v436 + 4 * v88;
    v96 = __len;
  }
  else
  {
    sub_2394807B4((uint64_t)&v436, v88 - v95);
    v96 = __len;
    v94 = v436;
  }
  v97 = objc_retainAutorelease(v93);
  memcpy(v94, (const void *)objc_msgSend(v97, "contents"), 4 * v88);

  if (v423)
  {
    v100 = (int)v413 * (int)v422;
    v101 = v418;
    v102 = v439;
    v103 = ((char *)v440 - (_BYTE *)v439) >> 2;
    if (v100 <= v103)
    {
      if (v100 < v103)
        v440 = (std::__shared_weak_count *)((char *)v439 + 4 * v100);
    }
    else
    {
      sub_23942CB44((uint64_t)&v439, v100 - v103);
      v102 = v439;
    }
    v104 = objc_retainAutorelease(v101);
    memcpy(v102, (const void *)objc_msgSend(v104, "contents"), 4 * v100);

    v105 = v417;
    v106 = v433;
    v107 = (v434 - (_BYTE *)v433) >> 2;
    if (v100 <= v107)
    {
      if (v100 < v107)
        v434 = (char *)v433 + 4 * v100;
      v96 = __len;
    }
    else
    {
      sub_2394807B4((uint64_t)&v433, v100 - v107);
      v96 = __len;
      v106 = v433;
    }
    v108 = objc_retainAutorelease(v105);
    memcpy(v106, (const void *)objc_msgSend(v108, "contents"), 4 * v100);

  }
  v109 = *(_QWORD *)(a1 + 8);
  v110 = v422;
  if ((_DWORD)v425)
  {
    if (v426 > 2u)
    {
      sub_239A444D4((uint64_t)"unknown file", 1710, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v111 = v442;
    v112 = (char *)v436;
    v113 = *(_QWORD *)(v109 + 296);
    if (v426 != 2)
    {
      if (v426 == 1)
      {
        v114 = 0;
        v115 = 4 * (v425 + 2 * v425);
        v116 = 4 * v425;
        v117 = 4 * (v425 & 0xFFFFFFF8);
        while (1)
        {
          v118 = *(_QWORD *)(v113 + 24 * v114);
          if (v425 >= 8)
          {
            v119 = 0;
            v128 = v118 + 8 < (unint64_t)&v112[v116] && (unint64_t)v112 < v118 + v115;
            v129 = (unint64_t)v111 >= v118 + v115 - 4 || v118 >= (unint64_t)v111 + v116;
            if (v129 && !v128)
            {
              v120 = (id *)((char *)v111 + v117);
              v121 = &v112[v117];
              v98.i32[0] = v114;
              v98 = vdupq_lane_s32(*(int32x2_t *)v98.i8, 0);
              v130 = (__int128 *)(v112 + 16);
              v131 = (__int128 *)(v111 + 2);
              v132 = v425 & 0xFFFFFFF8;
              v133 = *(float **)(v113 + 24 * v114);
              do
              {
                v135 = *(v131 - 1);
                v134 = *v131;
                v137 = *(v130 - 1);
                v136 = *v130;
                v99 = (float32x4_t)v98;
                v138 = v133 + 24;
                vst3q_f32(v133, *(float32x4x3_t *)v99.f32);
                v139 = v133 + 12;
                vst3q_f32(v139, *(float32x4x3_t *)v98.i8);
                v130 += 2;
                v131 += 2;
                v133 = v138;
                v132 -= 8;
              }
              while (v132);
              v119 = v425 & 0xFFFFFFF8;
              if (v119 == v425)
                goto LABEL_116;
              goto LABEL_120;
            }
          }
          else
          {
            v119 = 0;
          }
          v120 = v111;
          v121 = v112;
LABEL_120:
          v122 = (_DWORD *)(v118 + 12 * v119 + 8);
          v123 = v425 - v119;
          do
          {
            v125 = *(_DWORD *)v120;
            v120 = (id *)((char *)v120 + 4);
            v124 = v125;
            v126 = *(_DWORD *)v121;
            v121 += 4;
            *(v122 - 2) = v114;
            *(v122 - 1) = v124;
            *v122 = v126;
            v122 += 3;
            --v123;
          }
          while (v123);
LABEL_116:
          ++v114;
          v111 = v120;
          v112 = v121;
          if (v114 == v22)
            goto LABEL_187;
        }
      }
      v164 = 0;
      v165 = 4 * (v425 + 2 * v425);
      v166 = 4 * v425;
      v167 = 4 * (v425 & 0xFFFFFFF8);
      v168 = (float32x4_t)vdupq_n_s32(0x46800000u);
      while (1)
      {
        v169 = *(_QWORD *)(v113 + 24 * v164);
        if (v425 >= 8)
        {
          v170 = 0;
          v174 = v169 + 8 < (unint64_t)&v112[v166] && (unint64_t)v112 < v169 + v165;
          v175 = (unint64_t)v111 >= v169 + v165 - 4 || v169 >= (unint64_t)v111 + v166;
          if (!v175 || v174)
          {
            v171 = v111;
            v172 = (float *)v112;
            v110 = v422;
          }
          else
          {
            v171 = (id *)((char *)v111 + v167);
            v172 = (float *)&v112[v167];
            v99.i32[0] = v164;
            v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 0);
            v176 = (float32x4_t *)(v112 + 16);
            v177 = (__int128 *)(v111 + 2);
            v178 = v425 & 0xFFFFFFF8;
            v179 = *(float **)(v113 + 24 * v164);
            v110 = v422;
            do
            {
              v458.val[2] = vmaxnmq_f32(vsubq_f32(v168, v176[-1]), (float32x4_t)0);
              v180 = vmaxnmq_f32(vsubq_f32(v168, *v176), (float32x4_t)0);
              v458.val[1] = (float32x4_t)*(v177 - 1);
              v181 = *v177;
              v458.val[0] = v99;
              v182 = v179 + 24;
              vst3q_f32(v179, v458);
              v183 = v179 + 12;
              vst3q_f32(v183, *(float32x4x3_t *)v99.f32);
              v176 += 2;
              v177 += 2;
              v179 = v182;
              v178 -= 8;
            }
            while (v178);
            v170 = v425 & 0xFFFFFFF8;
            if (v170 == v425)
              goto LABEL_164;
          }
        }
        else
        {
          v170 = 0;
          v171 = v111;
          v172 = (float *)v112;
        }
        v184 = (float *)(v169 + 12 * v170 + 8);
        v185 = v425 - v170;
        do
        {
          v186 = *v172++;
          v187 = 16384.0 - v186;
          v188 = *(_DWORD *)v171;
          v171 = (id *)((char *)v171 + 4);
          *((_DWORD *)v184 - 2) = v164;
          *((_DWORD *)v184 - 1) = v188;
          *v184 = fmaxf(v187, 0.0);
          v184 += 3;
          --v185;
        }
        while (v185);
LABEL_164:
        ++v164;
        v111 = v171;
        v112 = (char *)v172;
        if (v164 == v22)
          goto LABEL_187;
      }
    }
    v140 = 0;
    v141 = 4 * (v425 + 2 * v425);
    v142 = 4 * v425;
    v143 = 4 * (v425 & 0xFFFFFFF8);
    do
    {
      v144 = *(_QWORD *)(v113 + 24 * v140);
      if (v425 >= 8)
      {
        v145 = 0;
        v154 = v144 + 8 < (unint64_t)&v112[v142] && (unint64_t)v112 < v144 + v141;
        v155 = (unint64_t)v111 >= v144 + v141 - 4 || v144 >= (unint64_t)v111 + v142;
        if (v155 && !v154)
        {
          v146 = (id *)((char *)v111 + v143);
          v147 = (float *)&v112[v143];
          v98.i32[0] = v140;
          v98 = vdupq_lane_s32(*(int32x2_t *)v98.i8, 0);
          v156 = (float32x4_t *)(v112 + 16);
          v157 = (__int128 *)(v111 + 2);
          v158 = v425 & 0xFFFFFFF8;
          v159 = *(float **)(v113 + 24 * v140);
          do
          {
            v99 = v156[-1];
            v456.val[1] = (float32x4_t)*(v157 - 1);
            v160 = *v157;
            v161 = vnegq_f32(*v156);
            v456.val[2] = vnegq_f32(v99);
            v456.val[0] = (float32x4_t)v98;
            v162 = v159 + 24;
            vst3q_f32(v159, v456);
            v163 = v159 + 12;
            vst3q_f32(v163, *(float32x4x3_t *)v98.i8);
            v156 += 2;
            v157 += 2;
            v159 = v162;
            v158 -= 8;
          }
          while (v158);
          v145 = v425 & 0xFFFFFFF8;
          if (v145 == v425)
            goto LABEL_140;
          goto LABEL_144;
        }
      }
      else
      {
        v145 = 0;
      }
      v146 = v111;
      v147 = (float *)v112;
LABEL_144:
      v148 = (float *)(v144 + 12 * v145 + 8);
      v149 = v425 - v145;
      do
      {
        v150 = *v147++;
        v151 = v150;
        v152 = *(_DWORD *)v146;
        v146 = (id *)((char *)v146 + 4);
        *((_DWORD *)v148 - 2) = v140;
        *((_DWORD *)v148 - 1) = v152;
        *v148 = -v151;
        v148 += 3;
        --v149;
      }
      while (v149);
LABEL_140:
      ++v140;
      v111 = v146;
      v112 = (char *)v147;
    }
    while (v140 != v22);
  }
LABEL_187:
  v416 = (uint64_t *)(v109 + 296);
  if (!v96)
  {
    if (!v423)
    {
      if (v426 == 1)
        sub_23943F2C4(&v453, &v451, v416, a4, 0, 0, *(float *)(v17 + 4));
      else
        sub_23943EFB8(&v453, &v451, v416, a4, 0, 0, *(float *)v17 * *(float *)v17);
      goto LABEL_421;
    }
    v195 = (uint64_t *)(v109 + 320);
    if (!(_DWORD)v413)
    {
LABEL_418:
      if (v426 == 1)
        sub_23943F2C4(&v453, &v451, v416, a4, v195, 1u, *(float *)(v17 + 4));
      else
        sub_23943EFB8(&v453, &v451, v416, a4, v195, 1u, *(float *)v17 * *(float *)v17);
      goto LABEL_421;
    }
    if (v426 > 2u)
    {
      sub_239A444D4((uint64_t)"unknown file", 1730, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v196 = (char *)v439;
    v197 = (char *)v433;
    v198 = *v195;
    v199 = 4 * (v413 + 2 * v413);
    v200 = v199 - 4;
    v201 = 4 * v413;
    v202 = v413 & 0xFFFFFFF8;
    v203 = 4 * v202;
    if (v426 != 2)
    {
      if (v426 == 1)
      {
        v204 = 0;
        while (1)
        {
          v205 = *(_QWORD *)(v198 + 24 * v204);
          if (v413 > 7)
          {
            v206 = 0;
            v215 = v205 + 8 < (unint64_t)&v197[v201] && (unint64_t)v197 < v205 + v199;
            v216 = (unint64_t)v196 >= v205 + v200 || v205 >= (unint64_t)&v196[v201];
            if (v216 && !v215)
            {
              v207 = &v197[v203];
              v208 = &v196[v203];
              v98.i32[0] = v204;
              v98 = vdupq_lane_s32(*(int32x2_t *)v98.i8, 0);
              v217 = (__int128 *)(v196 + 16);
              v218 = (__int128 *)(v197 + 16);
              v219 = *(float **)(v198 + 24 * v204);
              v220 = v413 & 0xFFFFFFF8;
              do
              {
                v455.val[1] = (float32x4_t)*(v217 - 1);
                v221 = *v217;
                v455.val[2] = (float32x4_t)*(v218 - 1);
                v222 = *v218;
                v455.val[0] = (float32x4_t)v98;
                v223 = v219 + 24;
                vst3q_f32(v219, v455);
                v224 = v219 + 12;
                vst3q_f32(v224, *(float32x4x3_t *)v98.i8);
                v217 += 2;
                v218 += 2;
                v219 = v223;
                v220 -= 8;
              }
              while (v220);
              v206 = v413 & 0xFFFFFFF8;
              if (v202 == v413)
                goto LABEL_201;
              goto LABEL_205;
            }
          }
          else
          {
            v206 = 0;
          }
          v207 = v197;
          v208 = v196;
LABEL_205:
          v209 = v413 - v206;
          v210 = (_DWORD *)(v205 + 12 * v206 + 8);
          do
          {
            v212 = *(_DWORD *)v208;
            v208 += 4;
            v211 = v212;
            v213 = *(_DWORD *)v207;
            v207 += 4;
            *(v210 - 2) = v204;
            *(v210 - 1) = v211;
            *v210 = v213;
            v210 += 3;
            --v209;
          }
          while (v209);
LABEL_201:
          ++v204;
          v197 = v207;
          v196 = v208;
          if (v204 == v110)
            goto LABEL_418;
        }
      }
      v367 = 0;
      v368 = (float32x4_t)vdupq_n_s32(0x46800000u);
      while (1)
      {
        v369 = *(_QWORD *)(v198 + 24 * v367);
        if (v413 < 8)
          break;
        v370 = 0;
        v379 = v369 + 8 < (unint64_t)&v197[v201] && (unint64_t)v197 < v369 + v199;
        if ((unint64_t)v196 >= v369 + v200 || v369 >= (unint64_t)&v196[v201])
        {
          v110 = v422;
          if (!v379)
          {
            v371 = (float *)&v197[v203];
            v372 = &v196[v203];
            v99.i32[0] = v367;
            v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 0);
            v381 = (__int128 *)(v196 + 16);
            v382 = (float32x4_t *)(v197 + 16);
            v383 = v413 & 0xFFFFFFF8;
            v384 = *(float **)(v198 + 24 * v367);
            do
            {
              v459.val[2] = vmaxnmq_f32(vsubq_f32(v368, v382[-1]), (float32x4_t)0);
              v385 = vmaxnmq_f32(vsubq_f32(v368, *v382), (float32x4_t)0);
              v459.val[1] = (float32x4_t)*(v381 - 1);
              v386 = *v381;
              v459.val[0] = v99;
              v387 = v384 + 24;
              vst3q_f32(v384, v459);
              v388 = v384 + 12;
              vst3q_f32(v388, *(float32x4x3_t *)v99.f32);
              v381 += 2;
              v382 += 2;
              v384 = v387;
              v383 -= 8;
            }
            while (v383);
            v370 = v413 & 0xFFFFFFF8;
            if (v202 == v413)
              goto LABEL_395;
            goto LABEL_399;
          }
          goto LABEL_398;
        }
        v371 = (float *)v197;
        v372 = v196;
        v110 = v422;
LABEL_399:
        v373 = (float *)(v369 + 12 * v370 + 8);
        v374 = v413 - v370;
        do
        {
          v375 = *v371++;
          v376 = 16384.0 - v375;
          v377 = *(_DWORD *)v372;
          v372 += 4;
          *((_DWORD *)v373 - 2) = v367;
          *((_DWORD *)v373 - 1) = v377;
          *v373 = fmaxf(v376, 0.0);
          v373 += 3;
          --v374;
        }
        while (v374);
LABEL_395:
        ++v367;
        v197 = (char *)v371;
        v196 = v372;
        if (v367 == v110)
          goto LABEL_418;
      }
      v370 = 0;
LABEL_398:
      v371 = (float *)v197;
      v372 = v196;
      goto LABEL_399;
    }
    v346 = 0;
    while (1)
    {
      v347 = *(_QWORD *)(v198 + 24 * v346);
      if (v413 > 7)
      {
        v348 = 0;
        v357 = v347 + 8 < (unint64_t)&v197[v201] && (unint64_t)v197 < v347 + v199;
        v358 = (unint64_t)v196 >= v347 + v200 || v347 >= (unint64_t)&v196[v201];
        if (v358 && !v357)
        {
          v349 = (float *)&v197[v203];
          v350 = &v196[v203];
          v98.i32[0] = v346;
          v98 = vdupq_lane_s32(*(int32x2_t *)v98.i8, 0);
          v359 = (__int128 *)(v196 + 16);
          v360 = (float32x4_t *)(v197 + 16);
          v361 = *(float **)(v198 + 24 * v346);
          v362 = v413 & 0xFFFFFFF8;
          do
          {
            v457.val[1] = (float32x4_t)*(v359 - 1);
            v363 = *v359;
            v364 = vnegq_f32(*v360);
            v457.val[2] = vnegq_f32(v360[-1]);
            v457.val[0] = (float32x4_t)v98;
            v365 = v361 + 24;
            vst3q_f32(v361, v457);
            v366 = v361 + 12;
            vst3q_f32(v366, *(float32x4x3_t *)v98.i8);
            v359 += 2;
            v360 += 2;
            v361 = v365;
            v362 -= 8;
          }
          while (v362);
          v348 = v413 & 0xFFFFFFF8;
          if (v202 == v413)
            goto LABEL_371;
          goto LABEL_375;
        }
      }
      else
      {
        v348 = 0;
      }
      v349 = (float *)v197;
      v350 = v196;
LABEL_375:
      v351 = v413 - v348;
      v352 = (float *)(v347 + 12 * v348 + 8);
      do
      {
        v353 = *v349++;
        v354 = v353;
        v355 = *(_DWORD *)v350;
        v350 += 4;
        *((_DWORD *)v352 - 2) = v346;
        *((_DWORD *)v352 - 1) = v355;
        *v352 = -v354;
        v352 += 3;
        --v351;
      }
      while (v351);
LABEL_371:
      ++v346;
      v197 = (char *)v349;
      v196 = v350;
      if (v346 == v110)
        goto LABEL_418;
    }
  }
  v189 = (void *)*a4;
  a4[1] = *a4;
  v190 = v425;
  v191 = ((v454 - v453) >> 2) * v425;
  if (0xAAAAAAAAAAAAAAABLL * ((a4[2] - (uint64_t)v189) >> 2) < v191)
  {
    if (v191 > 0x1555555555555555)
      sub_2394189F8();
    v192 = (char *)operator new(12 * v191);
    *a4 = (uint64_t)v192;
    a4[1] = (uint64_t)v192;
    a4[2] = (uint64_t)&v192[12 * v191];
    if (v189)
      operator delete(v189);
  }
  if (v398 > 0x10)
  {
    __p = 0;
    v431 = 0;
    v432 = 0;
    v193 = v409;
    if ((_DWORD)v422 * (_DWORD)v22)
    {
      sub_2394807B4((uint64_t)&__p, v421);
      v194 = __p;
    }
    else
    {
      v194 = 0;
    }
    v248 = objc_retainAutorelease(v193);
    memcpy(v194, (const void *)objc_msgSend(v248, "contents"), 4 * v421);

    v249 = v422;
    if (!(_DWORD)v421)
    {
LABEL_345:
      if (__p)
      {
        v431 = __p;
        operator delete(__p);
      }
      goto LABEL_421;
    }
    v250 = 4 * v422;
    if (v426)
    {
      v392 = __p;
      v393 = operator new(4 * v422);
      memmove(v393, v392, 4 * v422);
      sub_239A444D4((uint64_t)"unknown file", 1829, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v251 = 0;
    v252 = 8 * v422;
    if (v425 <= 1)
      v253 = 1;
    else
      v253 = v425;
    v414 = v252 - 8;
    v399 = ((v252 - 8) >> 3) + 1;
    v396 = vdupq_n_s64(4uLL);
    while (1)
    {
      v254 = (char *)__p;
      v255 = operator new(v250);
      memmove(v255, &v254[4 * v251], v250);
      v256 = (int64x2_t *)operator new(v252);
      bzero(v256, v252);
      v257 = &v256->i64[v252 / 8];
      if (v414 < 0x18)
        break;
      v259 = &v256->i64[v399 & 0x3FFFFFFFFFFFFFFCLL];
      v261 = v256 + 1;
      v262 = v399 & 0x3FFFFFFFFFFFFFFCLL;
      v263 = (int64x2_t)xmmword_239EC6860;
      v260 = (v425 - 2) >> 1;
      do
      {
        v261[-1] = v263;
        *v261 = vaddq_s64(v263, vdupq_n_s64(2uLL));
        v263 = vaddq_s64(v263, v396);
        v261 += 2;
        v262 -= 4;
      }
      while (v262);
      v258 = v399 & 0x3FFFFFFFFFFFFFFCLL;
      if (v399 != (v399 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_267;
LABEL_268:
      if (v190 >= 2)
      {
        v264 = v260;
        do
        {
          if (v260 >= v264)
          {
            v266 = (2 * v264) | 1;
            v267 = &v256->i64[v266];
            if (2 * v264 + 2 < v190 && *((float *)v255 + *v267) > *((float *)v255 + v267[1]))
            {
              ++v267;
              v266 = 2 * v264 + 2;
            }
            v268 = &v256->i64[v264];
            v269 = *v267;
            v270 = *v268;
            v271 = *((float *)v255 + *v268);
            if (*((float *)v255 + *v267) <= v271)
            {
              do
              {
                *v268 = v269;
                v268 = v267;
                if (v260 < v266)
                  break;
                v272 = 2 * v266;
                v266 = (2 * v266) | 1;
                v267 = &v256->i64[v266];
                v273 = v272 + 2;
                if (v273 < v190 && *((float *)v255 + *v267) > *((float *)v255 + v267[1]))
                {
                  ++v267;
                  v266 = v273;
                }
                v269 = *v267;
              }
              while (*((float *)v255 + *v267) <= v271);
              *v268 = v270;
            }
          }
          v265 = v264-- <= 0;
        }
        while (!v265);
      }
      v274 = &v256->i64[v190];
      if (v274 == v257)
        goto LABEL_304;
      if (v190 >= 2)
      {
        v278 = &v256->i64[1];
        v279 = v256 + 1;
        v280 = &v256->i64[v190];
        while (1)
        {
          v281 = *v280;
          v282 = *((float *)v255 + *v280);
          if (v282 > *((float *)v255 + v256->i64[0]))
          {
            *v280 = v256->i64[0];
            v256->i64[0] = v281;
            if ((_DWORD)v190 == 2 || *((float *)v255 + *v278) <= *((float *)v255 + v279->i64[0]))
            {
              v283 = (int64x2_t *)&v256->u64[1];
              v284 = 1;
              v285 = *v278;
              if (*((float *)v255 + *v278) <= v282)
              {
LABEL_298:
                v286 = (uint64_t *)v256;
                do
                {
                  *v286 = v285;
                  v286 = (uint64_t *)v283;
                  if (v260 < v284)
                    break;
                  v287 = 2 * v284;
                  v284 = (2 * v284) | 1;
                  v283 = (int64x2_t *)((char *)v256 + 8 * v284);
                  v288 = v287 + 2;
                  if (v288 < v190 && *((float *)v255 + v283->i64[0]) > *((float *)v255 + v283->i64[1]))
                  {
                    v283 = (int64x2_t *)((char *)v283 + 8);
                    v284 = v288;
                  }
                  v285 = v283->i64[0];
                }
                while (*((float *)v255 + v283->i64[0]) <= v282);
                *v286 = v281;
              }
            }
            else
            {
              v283 = v256 + 1;
              v284 = 2;
              v285 = v279->i64[0];
              if (*((float *)v255 + v279->i64[0]) <= v282)
                goto LABEL_298;
            }
          }
          if (++v280 == v257)
            goto LABEL_304;
        }
      }
      v275 = v256->i64[0];
      v276 = 8 * v425;
      do
      {
        v277 = v256->i64[(unint64_t)v276 / 8];
        if (*((float *)v255 + v277) > *((float *)v255 + v275))
        {
          v256->i64[(unint64_t)v276 / 8] = v275;
          v256->i64[0] = v277;
          v275 = v277;
        }
        v276 += 8;
      }
      while (v252 != v276);
LABEL_304:
      v424 = v251;
      if (v190 >= 2)
      {
        v289 = v190;
        do
        {
          v290 = 0;
          v291 = v256->i64[0];
          v292 = (uint64_t *)v256;
          do
          {
            v293 = v292;
            v292 += v290 + 1;
            v294 = 2 * v290;
            v290 = (2 * v290) | 1;
            v295 = v294 + 2;
            if (v295 < v289 && *((float *)v255 + *v292) > *((float *)v255 + v292[1]))
            {
              ++v292;
              v290 = v295;
            }
            *v293 = *v292;
          }
          while (v290 <= (uint64_t)((unint64_t)(v289 - 2) >> 1));
          if (v292 == --v274)
          {
            *v292 = v291;
          }
          else
          {
            *v292 = *v274;
            *v274 = v291;
            v296 = (char *)v292 - (char *)v256 + 8;
            if (v296 >= 9)
            {
              v297 = (((unint64_t)v296 >> 3) - 2) >> 1;
              v298 = &v256->i64[v297];
              v299 = *v298;
              v300 = *v292;
              v301 = *((float *)v255 + *v292);
              if (*((float *)v255 + *v298) > v301)
              {
                do
                {
                  v302 = v298;
                  *v292 = v299;
                  if (!v297)
                    break;
                  v297 = (v297 - 1) >> 1;
                  v298 = &v256->i64[v297];
                  v299 = *v298;
                  v292 = v302;
                }
                while (*((float *)v255 + *v298) > v301);
                *v302 = v300;
              }
            }
          }
          v265 = v289-- <= 2;
        }
        while (!v265);
      }
      v303 = 0;
      v428 = v251 / v249;
      do
      {
        v305 = v256->i64[v303];
        v306 = *((float *)v255 + v305);
        if (v306 > 16384.0)
          v306 = 16384.0;
        if (v306 >= -16384.0)
          v307 = v306 * 0.000061035;
        else
          v307 = -1.0;
        if (v19 > 0.0)
        {
          v308 = (float)(v307 + (float)(*((float *)v255 + v256->i64[1]) * -0.000061035));
          v309 = exp(-(v308 * v308) / (v19 * v19 + v19 * v19));
          v307 = v307 * v309;
        }
        v311 = (char *)a4[1];
        v310 = a4[2];
        if ((unint64_t)v311 < v310)
        {
          *(_DWORD *)v311 = v428;
          *((_DWORD *)v311 + 1) = v305;
          v304 = v311 + 12;
          *((float *)v311 + 2) = v307;
        }
        else
        {
          v312 = v253;
          v313 = a4;
          v314 = (char *)*a4;
          v315 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v311[-*a4] >> 2);
          v316 = v315 + 1;
          if (v315 + 1 > 0x1555555555555555)
            sub_2394189F8();
          v317 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v310 - (_QWORD)v314) >> 2);
          if (2 * v317 > v316)
            v316 = 2 * v317;
          if (v317 >= 0xAAAAAAAAAAAAAAALL)
            v318 = 0x1555555555555555;
          else
            v318 = v316;
          if (v318)
          {
            if (v318 > 0x1555555555555555)
              sub_239418A80();
            v319 = (char *)operator new(12 * v318);
          }
          else
          {
            v319 = 0;
          }
          v320 = &v319[12 * v315];
          *(_DWORD *)v320 = v428;
          *((_DWORD *)v320 + 1) = v305;
          *((float *)v320 + 2) = v307;
          v321 = v320;
          a4 = v313;
          if (v311 != v314)
          {
            do
            {
              v322 = *(_QWORD *)(v311 - 12);
              v311 -= 12;
              v323 = *((_DWORD *)v311 + 2);
              *(_QWORD *)(v321 - 12) = v322;
              v321 -= 12;
              *((_DWORD *)v321 + 2) = v323;
            }
            while (v311 != v314);
            v311 = (char *)*v313;
          }
          v324 = &v319[12 * v318];
          v304 = v320 + 12;
          *v313 = (uint64_t)v321;
          v313[1] = (uint64_t)(v320 + 12);
          v313[2] = (uint64_t)v324;
          v253 = v312;
          if (v311)
            operator delete(v311);
        }
        a4[1] = (uint64_t)v304;
        ++v303;
      }
      while (v303 != v253);
      operator delete(v256);
      operator delete(v255);
      v249 = v422;
      v251 = v424 + v422;
      v190 = v425;
      v252 = 8 * v422;
      v250 = 4 * v422;
      if (v424 + v422 >= v421)
        goto LABEL_345;
    }
    v258 = 0;
    v259 = (uint64_t *)v256;
    v260 = (v425 - 2) >> 1;
    do
LABEL_267:
      *v259++ = v258++;
    while (v259 != v257);
    goto LABEL_268;
  }
  if (v454 == v453 || !(_DWORD)v425)
    goto LABEL_421;
  if (v426 == 2)
  {
    v325 = 0;
    v326 = 0;
    v327 = (_DWORD *)a4[1];
    while (1)
    {
      v429 = v326;
      v328 = 0;
      v329 = (_QWORD *)(*v416 + 24 * v325);
      do
      {
        v330 = (unsigned int *)(*v329 + 12 * v328);
        v331 = *(_DWORD *)&v453[4 * *v330];
        v332 = *(_DWORD *)&v451[4 * v330[1]];
        v333 = v330[2];
        v334 = a4[2];
        if ((unint64_t)v327 < v334)
        {
          *v327 = v331;
          v327[1] = v332;
          v327[2] = v333;
          v327 += 3;
          goto LABEL_352;
        }
        v335 = (_DWORD *)*a4;
        v336 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v327 - *a4) >> 2);
        v337 = v336 + 1;
        if (v336 + 1 > 0x1555555555555555)
          sub_2394189F8();
        v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v334 - (_QWORD)v335) >> 2);
        if (2 * v338 > v337)
          v337 = 2 * v338;
        if (v338 >= 0xAAAAAAAAAAAAAAALL)
          v339 = 0x1555555555555555;
        else
          v339 = v337;
        if (v339)
        {
          if (v339 > 0x1555555555555555)
            sub_239418A80();
          v340 = (char *)operator new(12 * v339);
          v341 = &v340[12 * v336];
          *(_DWORD *)v341 = v331;
          *((_DWORD *)v341 + 1) = v332;
          *((_DWORD *)v341 + 2) = v333;
          if (v327 == v335)
          {
LABEL_368:
            v345 = v327;
            v327 = v341 + 12;
            *a4 = (uint64_t)v341;
            a4[1] = (uint64_t)(v341 + 12);
            a4[2] = (uint64_t)&v340[12 * v339];
            v190 = v425;
            if (v345)
              goto LABEL_366;
            goto LABEL_352;
          }
        }
        else
        {
          v340 = 0;
          v341 = (char *)(4 * (((uint64_t)v327 - *a4) >> 2));
          *(_DWORD *)v341 = v331;
          *((_DWORD *)v341 + 1) = v332;
          *((_DWORD *)v341 + 2) = v333;
          if (v327 == v335)
            goto LABEL_368;
        }
        v342 = v341;
        do
        {
          v343 = *(_QWORD *)(v327 - 3);
          v327 -= 3;
          v344 = v327[2];
          *(_QWORD *)(v342 - 12) = v343;
          v342 -= 12;
          *((_DWORD *)v342 + 2) = v344;
        }
        while (v327 != v335);
        v345 = (void *)*a4;
        v327 = v341 + 12;
        *a4 = (uint64_t)v342;
        a4[1] = (uint64_t)(v341 + 12);
        a4[2] = (uint64_t)&v340[12 * v339];
        v190 = v425;
        if (v345)
LABEL_366:
          operator delete(v345);
LABEL_352:
        a4[1] = (uint64_t)v327;
        ++v328;
      }
      while (v328 != v190);
      v325 = (v429 + 1);
      v326 = v429 + 1;
      if (v325 >= (v454 - v453) >> 2)
        goto LABEL_421;
    }
  }
  if (v426)
  {
    sub_239A444D4((uint64_t)"unknown file", 1784, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v225 = 0;
  v226 = 0;
  while (2)
  {
    v427 = v226;
    v227 = 0;
    v228 = *v416 + 24 * v225;
    do
    {
      v231 = (float *)(*(_QWORD *)v228 + 12 * v227);
      v232 = *(_DWORD *)&v453[4 * *(unsigned int *)v231];
      v233 = *(_DWORD *)&v451[4 * *((unsigned int *)v231 + 1)];
      v234 = (float)(16384.0 - v231[2]) * 0.000061035;
      if (v19 > 0.0)
      {
        v235 = exp(-((float)(v234 + (float)((float)(16384.0 - *(float *)(*(_QWORD *)v228 + 20)) * -0.000061035))* (float)(v234 + (float)((float)(16384.0 - *(float *)(*(_QWORD *)v228 + 20)) * -0.000061035)))/ (v19 * v19 + v19 * v19));
        v234 = v234 * v235;
      }
      v237 = (char *)a4[1];
      v236 = a4[2];
      if ((unint64_t)v237 < v236)
      {
        *(_DWORD *)v237 = v232;
        *((_DWORD *)v237 + 1) = v233;
        v229 = v237 + 12;
        *((float *)v237 + 2) = v234;
        v230 = v425;
        goto LABEL_232;
      }
      v238 = (char *)*a4;
      v239 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v237[-*a4] >> 2);
      v240 = v239 + 1;
      if (v239 + 1 > 0x1555555555555555)
        sub_2394189F8();
      v241 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v236 - (_QWORD)v238) >> 2);
      if (2 * v241 > v240)
        v240 = 2 * v241;
      if (v241 >= 0xAAAAAAAAAAAAAAALL)
        v242 = 0x1555555555555555;
      else
        v242 = v240;
      if (v242)
      {
        if (v242 > 0x1555555555555555)
          sub_239418A80();
        v243 = (char *)operator new(12 * v242);
        v244 = (uint64_t)&v243[12 * v239];
        *(_DWORD *)v244 = v232;
        *(_DWORD *)(v244 + 4) = v233;
        *(float *)(v244 + 8) = v234;
        v245 = v244;
        if (v237 == v238)
        {
LABEL_250:
          v230 = v425;
          v229 = (char *)(v244 + 12);
          *a4 = v245;
          a4[1] = v244 + 12;
          a4[2] = (uint64_t)&v243[12 * v242];
          if (v237)
            goto LABEL_248;
          goto LABEL_232;
        }
      }
      else
      {
        v243 = 0;
        v244 = 4 * ((uint64_t)&v237[-*a4] >> 2);
        *(_DWORD *)v244 = v232;
        *(_DWORD *)(v244 + 4) = v233;
        *(float *)(v244 + 8) = v234;
        v245 = 12 * v239;
        if (v237 == v238)
          goto LABEL_250;
      }
      v230 = v425;
      do
      {
        v246 = *(_QWORD *)(v237 - 12);
        v237 -= 12;
        v247 = *((_DWORD *)v237 + 2);
        *(_QWORD *)(v245 - 12) = v246;
        v245 -= 12;
        *(_DWORD *)(v245 + 8) = v247;
      }
      while (v237 != v238);
      v237 = (char *)*a4;
      v229 = (char *)(v244 + 12);
      *a4 = v245;
      a4[1] = v244 + 12;
      a4[2] = (uint64_t)&v243[12 * v242];
      if (v237)
LABEL_248:
        operator delete(v237);
LABEL_232:
      a4[1] = (uint64_t)v229;
      ++v227;
    }
    while (v227 != v230);
    v225 = (v427 + 1);
    v226 = v427 + 1;
    if (v225 < (v454 - v453) >> 2)
      continue;
    break;
  }
LABEL_421:
  if (v433)
  {
    v434 = (char *)v433;
    operator delete(v433);
  }
  v85 = v403;
  v38 = v404;
  v48 = v402;
  v49 = v395;
  v27 = v394;
  if (v436)
  {
    v437 = (char *)v436;
    operator delete(v436);
  }
  if (v439)
  {
    v440 = (std::__shared_weak_count *)v439;
    operator delete(v439);
  }
  if (v442)
  {
    v443 = v442;
    operator delete(v442);
  }
LABEL_429:

  v389 = v450;
  if (!v450)
    goto LABEL_433;
  v390 = (unint64_t *)&v450->__shared_owners_;
  do
    v391 = __ldaxr(v390);
  while (__stlxr(v391 - 1, v390));
  if (v391)
  {
LABEL_433:
    v23 = v451;
    if (!v451)
      goto LABEL_14;
LABEL_13:
    v452 = v23;
    operator delete(v23);
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
  std::__shared_weak_count::__release_weak(v389);
  v23 = v451;
  if (v451)
    goto LABEL_13;
LABEL_14:
  if (v453)
  {
    v454 = v453;
    operator delete(v453);
  }
  return v27;
}

void sub_23947F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  uint64_t v61;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;

  if (__p)
  {
    operator delete(__p);
    v63 = a57;
    if (!a57)
    {
LABEL_3:
      v64 = a60;
      if (!a60)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v63 = a57;
    if (!a57)
      goto LABEL_3;
  }
  operator delete(v63);
  v64 = a60;
  if (!a60)
  {
LABEL_4:
    v65 = *(void **)(v61 - 240);
    if (!v65)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  operator delete(v64);
  v65 = *(void **)(v61 - 240);
  if (!v65)
  {
LABEL_6:

    sub_239416DA0(v61 - 184);
    v66 = *(void **)(v61 - 168);
    if (v66)
    {
      *(_QWORD *)(v61 - 160) = v66;
      operator delete(v66);
      v67 = *(void **)(v61 - 144);
      if (!v67)
LABEL_8:
        _Unwind_Resume(a1);
    }
    else
    {
      v67 = *(void **)(v61 - 144);
      if (!v67)
        goto LABEL_8;
    }
    *(_QWORD *)(v61 - 136) = v67;
    operator delete(v67);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(_QWORD *)(v61 - 232) = v65;
  operator delete(v65);
  goto LABEL_6;
}

void sub_23947F3A0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t *v4;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  char *v42;
  char *v43;

  v4 = a3;
  if (a4)
    v7 = a4;
  else
    v7 = ((unint64_t)(a3[1] - *a3) >> 2);
  v8 = *(unsigned int *)(a1 + 16);
  v9 = (v7 * v8);
  v11 = *(char **)a2;
  v10 = *(char **)(a2 + 8);
  v12 = &v10[-*(_QWORD *)a2];
  v13 = v9 - (_QWORD)v12;
  if (v9 <= (unint64_t)v12)
    goto LABEL_33;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14 - (uint64_t)v10 >= v13)
  {
    bzero(*(void **)(a2 + 8), v9 - (_QWORD)v12);
    *(_QWORD *)(a2 + 8) = &v10[v13];
    goto LABEL_33;
  }
  v15 = v14 - (_QWORD)v11;
  v16 = 2 * v15;
  if (2 * v15 <= v9)
    v16 = (v7 * v8);
  if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  v18 = (unint64_t)&v10[-*(_QWORD *)a2];
  v19 = (char *)operator new(v17);
  v43 = &v19[v17];
  v20 = v19;
  v41 = v18;
  v42 = &v19[v9];
  v21 = &v19[v18];
  bzero(&v19[v18], v13);
  if (v10 != v11)
  {
    if (v18 < 8)
    {
      v4 = a3;
      goto LABEL_29;
    }
    v4 = a3;
    if ((unint64_t)(v11 - v20) >= 0x20)
    {
      if (v41 < 0x20)
      {
        v22 = 0;
        goto LABEL_24;
      }
      v22 = v41 & 0xFFFFFFFFFFFFFFE0;
      v23 = v10 - 16;
      v24 = &v20[v10 - 16 - v11];
      v25 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v26 = *(_OWORD *)v23;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)v24 = v26;
        v24 -= 32;
        v23 -= 32;
        v25 -= 32;
      }
      while (v25);
      if (v41 == v22)
        goto LABEL_31;
      if ((v41 & 0x18) != 0)
      {
LABEL_24:
        v21 -= v41 & 0xFFFFFFFFFFFFFFF8;
        v27 = &v10[-v22 - 8];
        v28 = (char *)(v27 - v11);
        v29 = v22 - (v41 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v30 = *(_QWORD *)v27;
          v27 -= 8;
          *(_QWORD *)&v28[(_QWORD)v20] = v30;
          v28 -= 8;
          v29 += 8;
        }
        while (v29);
        v10 -= v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 != (v41 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_29;
LABEL_31:
        v10 = v11;
        *(_QWORD *)a2 = v20;
        *(_QWORD *)(a2 + 8) = v42;
        *(_QWORD *)(a2 + 16) = v43;
        if (!v11)
          goto LABEL_33;
        goto LABEL_32;
      }
      v21 -= v22;
      v10 -= v22;
    }
LABEL_29:
    v31 = v21 - 1;
    do
    {
      v32 = *--v10;
      *v31-- = v32;
    }
    while (v10 != v11);
    goto LABEL_31;
  }
  v4 = a3;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v42;
  *(_QWORD *)(a2 + 16) = v43;
  if (v10)
LABEL_32:
    operator delete(v10);
LABEL_33:
  v33 = *v4;
  v34 = v4[1];
  if (v33 != v34 && (_DWORD)v7 != 0 && (_DWORD)v8 != 0)
  {
    v37 = 0;
    v38 = v33 + 4;
    v39 = 1;
    do
    {
      memmove((void *)(*(_QWORD *)a2 + v37), *(const void **)(*(_QWORD *)(a1 + 72) + 24 * *(unsigned int *)(v38 - 4)), v8);
      if (v38 == v34)
        break;
      v37 += v8;
      v38 += 4;
    }
    while (v39++ < v7);
  }
}

void sub_23947F614(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  unsigned __int8 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v27 = a2;
  v5 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  ++*(_QWORD *)(a1 + 208);
  v26 = 0uLL;
  if (sub_23946A940(a1, &v27, &v26))
  {
    ++*(_QWORD *)(a1 + 216);
    *(_OWORD *)a3 = v26;
    v26 = 0uLL;
    goto LABEL_32;
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_32;
  }
  v22[0] = v27;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(&v25, v6, v22);
  if ((_QWORD)v25)
  {
    sub_239480950(a1, &v27, (uint64_t *)&v25, (uint64_t)v22);
    v7 = v24;
    if (!v24)
      goto LABEL_19;
    v8 = *(_QWORD *)(a1 + 200);
    if (v8 && (v9 = v22[0], v22[0] != v27))
    {
      v21[0] = v22[1];
      v21[1] = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v8 = *(_QWORD *)(a1 + 200);
        v28 = v9;
        if (!v8)
          sub_2394172E0();
      }
      else
      {
        v28 = v22[0];
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v21, &v28);
      sub_239416DA0((uint64_t)v21);
      v7 = v24;
      if (!v24)
      {
LABEL_19:
        *(_OWORD *)a3 = v25;
        v25 = 0uLL;
        if (!v7)
          goto LABEL_27;
LABEL_22:
        v12 = v23;
        if (v23)
        {
          v13 = (unint64_t *)&v23->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_27;
      }
    }
    else
    {
      v7 = 1;
    }
    if (v22[0] == v27)
      goto LABEL_19;
    sub_239480D38(a1, &v27, a3);
    if (v24)
      goto LABEL_22;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
LABEL_27:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_32:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::mutex::unlock(v5);
}

void sub_23947F854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_23946B010((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_23947F898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::mutex *v9;
  va_list va;

  va_start(va, a9);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

BOOL sub_23947F8B8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;

  v22 = a3;
  v3 = *a2;
  if (*a2)
  {
    v6 = (std::mutex *)(a1 + 224);
    std::mutex::lock((std::mutex *)(a1 + 224));
    sub_239480950(a1, &v22, a2, (uint64_t)v19);
    if (v21)
    {
      v7 = *(_QWORD *)(a1 + 200);
      if (v7)
      {
        v17 = v19[1];
        v18 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          v7 = *(_QWORD *)(a1 + 200);
          v23 = v19[0];
          if (!v7)
            sub_2394172E0();
        }
        else
        {
          v23 = v19[0];
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v17, &v23);
        v10 = v18;
        if (v18)
        {
          v11 = (unint64_t *)&v18->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      if (v21)
      {
        v13 = v20;
        if (v20)
        {
          v14 = (unint64_t *)&v20->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
    }
    std::mutex::unlock(v6);
  }
  return v3 != 0;
}

void sub_23947FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  sub_239416DA0((uint64_t)&a9);
  sub_23946B010((uint64_t)&a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_23947FA24(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23947FA38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, int a5, int a6, uint64_t a7, int a8, float a9, float64x2_t *a10, char a11, double *a12, char a13, unsigned int *a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v25;
  int v26;
  _QWORD *v27;
  char v28;
  int v29;
  uint64_t *v30;
  int v31;
  char v32;
  uint64_t v33;
  _QWORD *v35;
  void *context;

  context = (void *)MEMORY[0x23B83EC40]();
  if (a15)
  {
    sub_23947C380(a1, a14);
    v35 = a2;
    v26 = sub_23947CE1C((uint64_t)a2, a7);
    v27 = (_QWORD *)a3;
    v28 = *a14 == sub_23947CE1C(a3, a7) && a14[1] == v26;
    v29 = a6;
    a2 = v35;
    v30 = a4;
  }
  else
  {
    v29 = a6;
    v30 = a4;
    v27 = (_QWORD *)a3;
    if (a8)
    {
      v31 = v29;
      v32 = sub_23947CBD0(a1, a2, v27, a7, 1, a10, a11, v25, a9, a12, a13, 0, 0, 0, 0, a16, a17);
      v29 = v31;
      v28 = v32;
    }
    else
    {
      v28 = 0;
    }
  }
  v33 = sub_23947D1C4(a1, (uint64_t)a2, (uint64_t)v27, v30, a5, v29, a7, v28, a16, a17);
  objc_autoreleasePoolPop(context);
  return v33;
}

uint64_t sub_23947FBA8(uint64_t result)
{
  if (result)
  {
    sub_23947FBD4(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_23947FBD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v2 = *(_QWORD *)(a1 + 320);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 328);
    v4 = *(void **)(a1 + 320);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 328);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 320);
    }
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v4);
  }
  v8 = *(_QWORD *)(a1 + 296);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 304);
    v10 = *(void **)(a1 + 296);
    if (v9 != v8)
    {
      v11 = *(_QWORD *)(a1 + 304);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *(void **)(a1 + 296);
    }
    *(_QWORD *)(a1 + 304) = v8;
    operator delete(v10);
  }

  sub_23947FCE4(a1 + 56);
  return a1;
}

uint64_t sub_23947FCE4(uint64_t a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t *sub_23947FDCC(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2394800D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394800EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394800FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948012C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23948013C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250ADC350;
  v3 = (_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 850045863;
  v4 = (std::mutex *)(a1 + 224);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v10[0] = &off_250ADC390;
  v11 = v10;
  std::mutex::lock((std::mutex *)(a1 + 224));
  if (v11)
  {
    if (v11 == v10)
    {
      v13 = v12;
      (*(void (**)(uint64_t, _QWORD *))(v10[0] + 24))((uint64_t)v10, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(void))(*v11 + 16))();
    }
    sub_2394804EC(v12, v3);
    v5 = v13;
    if (v13 == v12)
    {
      v6 = 4;
      v5 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_10;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_10:
  std::mutex::unlock(v4);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_14;
  }
  if (v11)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_2394802F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD **v16;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  std::mutex::unlock(v15);
  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::mutex::~mutex(v15);
  v20 = *v16;
  if (*v16 == (_QWORD *)(v13 + 176))
  {
    v21 = 4;
    v20 = (_QWORD *)(v13 + 176);
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:
  v22 = *(_QWORD **)(v13 + 168);
  if (v22 == v14)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v23 = 5;
    v14 = *(_QWORD **)(v13 + 168);
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v23))(v14);
LABEL_16:
  sub_2394803AC(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_2394803AC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250ADC370;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_2394804A0(uint64_t a1)
{
  sub_2394806E8(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2394804C8(uint64_t a1)
{
  sub_2394803AC(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2394804EC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239480680(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239480690()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2394806A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250ADC390;
  return result;
}

void sub_2394806C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250ADC390;
}

void sub_2394806E0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_2394806E8(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_250ADC350;
  v2 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_239467C88(a1);
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  v3 = *(_QWORD **)(a1 + 200);
  if (v3 == (_QWORD *)(a1 + 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 168);
  if (v5 == (_QWORD *)(a1 + 144))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 144);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return sub_2394803AC(a1);
}

void sub_23948079C(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  sub_239416A48(a1);
}

void sub_2394807B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_2394189F8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_239418A80();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_239480950(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  _QWORD *v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51[2];
  unint64_t v52;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (_QWORD *)(a1 + 8);
  v10 = *a2;
  v11 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v11)
    goto LABEL_21;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a2;
    if (v10 >= *(_QWORD *)&v11)
      v13 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*v9 + 8 * v13);
  if (!v14 || (v15 = (_QWORD *)*v14) == 0)
  {
LABEL_21:
    if ((unint64_t)(*(_QWORD *)(a1 + 32) + 1) <= *(_QWORD *)(a1 + 48))
    {
      v22 = operator new(0x18uLL);
      v23 = *(_QWORD **)(a1 + 64);
      *v22 = a1 + 56;
      v22[1] = v23;
      v22[2] = v10;
      *v23 = v22;
      v24 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v24;
      sub_239480EA8(a1 + 8, a2, a2, a3);
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
    {
      v19 = *(uint64_t **)(a1 + 56);
      v20 = v19[2];
      v52 = v20;
      if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
      {
        v29 = v20;
        if (v20 >= *(_QWORD *)&v11)
          v29 = v20 % *(_QWORD *)&v11;
        v21 = *(_QWORD **)(*v9 + 8 * v29);
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      else
      {
        v21 = *(_QWORD **)(*v9 + 8 * (v20 & (*(_QWORD *)&v11 - 1)));
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      v31 = (_QWORD *)v21[3];
      v30 = (std::__shared_weak_count *)v21[4];
      v51[0] = v31;
      v51[1] = &v30->__vftable;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v19 = *(uint64_t **)(a1 + 56);
        v18 = *(_QWORD *)(a1 + 72);
      }
      v34 = *v19;
      *(_QWORD *)(v34 + 8) = v19[1];
      *(_QWORD *)v19[1] = v34;
      *(_QWORD *)(a1 + 72) = v18 - 1;
      operator delete(v19);
      sub_23946B080((_QWORD *)(a1 + 8), &v52);
      v35 = operator new(0x18uLL);
      v36 = *a2;
      v37 = *(_QWORD **)(a1 + 64);
      *v35 = a1 + 56;
      v35[1] = v37;
      v35[2] = v36;
      *v37 = v35;
      v38 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v35;
      *(_QWORD *)(a1 + 72) = v38;
      sub_239480EA8(a1 + 8, a2, a2, a3);
      v39 = v52;
      if (v30)
      {
        v40 = (unint64_t *)&v30->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_QWORD *)a4 = v39;
        *(_QWORD *)(a4 + 8) = v31;
        *(_QWORD *)(a4 + 16) = v30;
        *(_BYTE *)(a4 + 24) = 1;
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        goto LABEL_52;
      }
      *(_QWORD *)a4 = v52;
      *(_QWORD *)(a4 + 8) = v31;
      *(_QWORD *)(a4 + 16) = 0;
    }
    else
    {
      v26 = *a3;
      v25 = a3[1];
      if (v25)
      {
        v27 = (unint64_t *)(v25 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      *(_QWORD *)a4 = v10;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v25;
    }
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_52;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == v10)
      {
        if (v15[2] == v10)
          goto LABEL_53;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_21;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == v10)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_21;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_21;
  }
  if (v15[2] != v10)
    goto LABEL_11;
LABEL_53:
  v51[0] = a2;
  v43 = sub_2394811F4(a1 + 8, a2, (uint64_t)&unk_239EC6E98, v51);
  v45 = *a3;
  v44 = a3[1];
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)v43[4];
  v43[3] = v45;
  v43[4] = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_29:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_52:
  std::mutex::unlock(v8);
}

void sub_239480D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_239480D24(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239480D38(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v7 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_25:
    sub_239A444D4((uint64_t)"unknown file", 230, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_21;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_25;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_21:
  v16 = v12[4];
  *a3 = v12[3];
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::mutex::unlock(v6);
}

void sub_239480E94(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239480EA8(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v12[2] = *a3;
  v12[3] = v17;
  v12[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_2394811E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2394811F4(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239481510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239481524(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250ADC3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239481538(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250ADC3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23948156C(uint64_t a1)
{

}

uint64_t sub_239481578(_QWORD *a1, uint32x2_t *a2, float32x2_t *a3, int a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float v6;
  float v7;
  unint64_t v8;
  int v9;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float32x2_t *v15;
  unint64_t v16;
  int v17;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  float32x2_t *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  int v27;
  int v28;
  float32x2_t *v29;
  _QWORD *v30;
  float32x2_t v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float32x2_t *v40;

  v4 = a3[1];
  v5 = vmul_f32(*a3, vcvt_f32_u32(*a2));
  if (a4)
  {
    if (v4.f32[0] != 1.0)
    {
      v6 = v4.f32[0] + -1.0;
      if (v4.f32[0] < 1.0)
        v6 = 1.0 - v4.f32[0];
      if (v6 > 0.000001)
        goto LABEL_10;
    }
    if (v4.f32[1] != 1.0)
    {
      v7 = v4.f32[1] + -1.0;
      if (v4.f32[1] < 1.0)
        v7 = 1.0 - v4.f32[1];
      if (v7 > 0.000001)
      {
LABEL_10:
        v8 = a1[4];
        v9 = v8 & 0x3F;
        if (v8 > 0x3F || v9 != 0)
        {
          v11 = 0;
          v12 = (_QWORD *)a1[3];
          v13 = &v12[v8 >> 6];
          v14 = vaddv_f32(v4) * 0.5;
          v15 = (float32x2_t *)a1[6];
          do
          {
            if (((*v12 >> v11) & 1) != 0)
            {
              *v15 = vmul_f32(v4, *v15);
              v15[1].f32[1] = v14 * v15[1].f32[1];
            }
            v12 += v11 == 63;
            if (v11 == 63)
              v11 = 0;
            else
              ++v11;
            v15 += 3;
          }
          while (v11 != v9 || v12 != v13);
        }
      }
    }
    v16 = a1[4];
    v17 = v16 & 0x3F;
    if (v16 > 0x3F || v17 != 0)
    {
      v19 = 0;
      v20 = (_QWORD *)a1[3];
      v21 = &v20[v16 >> 6];
      v22 = (float32x2_t *)a1[6];
      do
      {
        if (((*v20 >> v19) & 1) != 0)
          *v22 = vadd_f32(v5, *v22);
        v20 += v19 == 63;
        if (v19 == 63)
          v19 = 0;
        else
          ++v19;
        v22 += 3;
      }
      while (v19 != v17 || v20 != v21);
    }
  }
  else
  {
    v23 = (_QWORD *)a1[3];
    v24 = a1[4];
    v25 = &v23[v24 >> 6];
    v26 = v24 < 0x40;
    v27 = v24 & 0x3F;
    if (v27)
      v26 = 0;
    if (!v26)
    {
      v28 = 0;
      v29 = (float32x2_t *)a1[6];
      v30 = (_QWORD *)a1[3];
      do
      {
        if (((*v30 >> v28) & 1) != 0)
          *v29 = vsub_f32(*v29, v5);
        v30 += v28 == 63;
        if (v28 == 63)
          v28 = 0;
        else
          ++v28;
        v29 += 3;
      }
      while (v28 != v27 || v30 != v25);
    }
    __asm { FMOV            V0.2S, #1.0 }
    v35 = vdiv_f32(_D0, v4);
    if (v35.f32[0] == 1.0)
      goto LABEL_50;
    v36 = v35.f32[0] + -1.0;
    if (v35.f32[0] < 1.0)
      v36 = 1.0 - v35.f32[0];
    if (v36 <= 0.000001)
    {
LABEL_50:
      if (v35.f32[1] == 1.0)
        return 1;
      v37 = v35.f32[1] + -1.0;
      if (v35.f32[1] < 1.0)
        v37 = 1.0 - v35.f32[1];
      if (v37 <= 0.000001)
        v26 = 1;
    }
    if (!v26)
    {
      v38 = 0;
      v39 = vaddv_f32(v35) * 0.5;
      v40 = (float32x2_t *)a1[6];
      do
      {
        if (((*v23 >> v38) & 1) != 0)
        {
          *v40 = vmul_f32(v35, *v40);
          v40[1].f32[1] = v39 * v40[1].f32[1];
        }
        v23 += v38 == 63;
        if (v38 == 63)
          v38 = 0;
        else
          ++v38;
        v40 += 3;
      }
      while (v38 != v27 || v23 != v25);
    }
  }
  return 1;
}

uint64_t sub_239481820(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p;
  char v6;
  char v7;
  _BYTE v8[48];
  uint64_t v9;

  LOBYTE(__p) = 0;
  v7 = 0;
  sub_239497108((uint64_t)v8, a1, a2, (uint64_t)&__p, 0);
  if (v7 && v6 < 0)
    operator delete(__p);
  if (!*(_BYTE *)(v9 + 80) || !*(_BYTE *)(v9 + 60) || !*(_BYTE *)(v9 + 52) || !*(_BYTE *)(v9 + 68))
    sub_2394875CC();
  v2 = *(unsigned int *)(v9 + 56);
  v3 = *(unsigned int *)(v9 + 48);
  sub_23949710C((uint64_t)v8);
  return v2 | (v3 << 32);
}

void sub_2394818C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239481900(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p;
  char v6;
  char v7;
  _BYTE v8[48];
  uint64_t v9;

  LOBYTE(__p) = 0;
  v7 = 0;
  sub_239495634((uint64_t)v8, a1, a2, (uint64_t)&__p, 0);
  if (v7 && v6 < 0)
    operator delete(__p);
  if (!*(_BYTE *)(v9 + 80) || !*(_BYTE *)(v9 + 60) || !*(_BYTE *)(v9 + 52) || !*(_BYTE *)(v9 + 68))
    sub_2394875CC();
  v2 = *(unsigned int *)(v9 + 56);
  v3 = *(unsigned int *)(v9 + 48);
  sub_239495638((uint64_t)v8);
  return v2 | (v3 << 32);
}

void sub_2394819A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2394819E0(int a1@<W0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  float *v7;
  unsigned int v8;
  char *v9;
  float v10;
  float v11;
  unint64_t v12;
  float *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  v4 = sub_239481900(a1, a2);
  v5 = HIDWORD(v4);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v6 = HIDWORD(v4) * v4;
  if (HIDWORD(v4) * (_DWORD)v4)
  {
    v7 = (float *)operator new(24 * v6);
    v8 = 0;
    *a3 = v7;
    a3[1] = v7;
    a3[2] = &v7[6 * v6];
    do
    {
      v10 = (float)(v8 % v5);
      v11 = (float)(v8 / v5);
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v7 < v12)
      {
        *v7 = v10;
        v7[1] = v11;
        *((_QWORD *)v7 + 1) = 0;
        v7[4] = 0.0;
        v7[5] = -1.0;
        v9 = (char *)(v7 + 6);
      }
      else
      {
        v13 = (float *)*a3;
        v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a3) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v13) >> 3);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v18 = (char *)operator new(24 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[24 * v14];
        v20 = &v18[24 * v17];
        *(float *)v19 = v10;
        *((float *)v19 + 1) = v11;
        *((_QWORD *)v19 + 1) = 0;
        *((_DWORD *)v19 + 4) = 0;
        *((_DWORD *)v19 + 5) = -1082130432;
        v9 = v19 + 24;
        if (v7 == v13)
        {
          *a3 = v19;
          a3[1] = v9;
          a3[2] = v20;
        }
        else
        {
          do
          {
            v21 = *(_OWORD *)(v7 - 6);
            *((_QWORD *)v19 - 1) = *((_QWORD *)v7 - 1);
            *(_OWORD *)(v19 - 24) = v21;
            v19 -= 24;
            v7 -= 6;
          }
          while (v7 != v13);
          v7 = (float *)*a3;
          *a3 = v19;
          a3[1] = v9;
          a3[2] = v20;
          if (!v7)
            goto LABEL_4;
        }
        operator delete(v7);
      }
LABEL_4:
      a3[1] = v9;
      ++v8;
      v7 = (float *)v9;
    }
    while (v8 != v6);
  }
}

void sub_239481BEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_239481C14(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int *a4, char a5, _QWORD *a6, uint64_t a7)
{
  _QWORD *v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  float v18;
  float v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v53;
  char *v56;
  unsigned int v57;
  char *v58;
  char *v59;
  unsigned int *v60;

  v8 = a6;
  if (a6[3])
  {
    v12 = (_QWORD *)a6[2];
    if (v12)
    {
      do
      {
        v20 = (_QWORD *)*v12;
        v21 = (void *)v12[3];
        if (v21)
        {
          v12[4] = v21;
          operator delete(v21);
        }
        operator delete(v12);
        v12 = v20;
      }
      while (v20);
    }
    v8[2] = 0;
    v13 = v8[1];
    if (v13)
    {
      for (i = 0; i != v13; ++i)
        *(_QWORD *)(*v8 + 8 * i) = 0;
    }
    v8[3] = 0;
  }
  v15 = *a4;
  v16 = a4[1];
  sub_239429CA8((uint64_t)a1, a5, &v58);
  v17 = v58;
  v56 = v59;
  if (v58 != v59)
  {
    v18 = (float)v15 / (float)a2;
    v53 = a3 - 1;
    v19 = (float)v16 / (float)a3;
    v51 = v8;
    v52 = a7;
    while (1)
    {
      v23 = *(unsigned int *)v17;
      if (a1[4] <= v23 || ((*(_QWORD *)(a1[3] + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v24 = (float *)(a1[6] + 24 * v23);
      v26 = *v24;
      v25 = v24[1];
      if (*(_BYTE *)(a7 + 16))
      {
        v27 = (float)*a4;
        v26 = (float)(v26 * *(float *)(a7 + 8)) + (float)(*(float *)a7 * v27);
        if (v26 < 0.0 || v26 >= v27)
          goto LABEL_14;
        v28 = (float)a4[1];
        v25 = (float)(v25 * *(float *)(a7 + 12)) + (float)(*(float *)(a7 + 4) * v28);
        if (v25 < 0.0 || v25 >= v28)
          goto LABEL_14;
      }
      v30 = ((float)(v26 / v18) + 0.5);
      v31 = ((float)(v25 / v19) + 0.5);
      if (a2 - 1 < v30)
        v30 = a2 - 1;
      if (v53 < v31)
        v31 = v53;
      v57 = v30 + v31 * a2;
      v60 = &v57;
      v32 = sub_239489E40((uint64_t)v8, &v57, (uint64_t)&unk_239EC6E98, &v60);
      v34 = (char *)v32[4];
      v33 = v32[5];
      if ((unint64_t)v34 >= v33)
        break;
      *(_DWORD *)v34 = v23;
      v22 = (uint64_t)(v34 + 4);
LABEL_13:
      v32[4] = v22;
      v8 = v51;
      a7 = v52;
LABEL_14:
      v17 += 4;
      if (v17 == v56)
      {
        v17 = v58;
        goto LABEL_50;
      }
    }
    v35 = (char *)v32[3];
    v36 = (v34 - v35) >> 2;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
      sub_2394189F8();
    v38 = v33 - (_QWORD)v35;
    if (v38 >> 1 > v37)
      v37 = v38 >> 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 62)
        sub_239418A80();
      v40 = operator new(4 * v39);
      v41 = &v40[4 * v36];
      *v41 = v23;
      v22 = (uint64_t)(v41 + 1);
      if (v34 == v35)
        goto LABEL_47;
    }
    else
    {
      v40 = 0;
      v41 = (_DWORD *)(4 * v36);
      *(_DWORD *)(4 * v36) = v23;
      v22 = 4 * v36 + 4;
      if (v34 == v35)
      {
LABEL_47:
        v32[3] = v41;
        v32[4] = v22;
        v32[5] = &v40[4 * v39];
        if (v35)
          operator delete(v35);
        goto LABEL_13;
      }
    }
    v42 = v34 - 4 - v35;
    if (v42 < 0x2C)
      goto LABEL_58;
    if ((unint64_t)(v35 - v40) < 0x20)
      goto LABEL_58;
    v43 = (v42 >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v34[-v44];
    v41 = (_DWORD *)((char *)v41 - v44);
    v46 = &v40[4 * v36 - 16];
    v47 = v34 - 16;
    v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v49 = *(_OWORD *)v47;
      *(v46 - 1) = *((_OWORD *)v47 - 1);
      *v46 = v49;
      v46 -= 2;
      v47 -= 32;
      v48 -= 8;
    }
    while (v48);
    v34 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        v50 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *--v41 = v50;
      }
      while (v34 != v35);
    }
    goto LABEL_47;
  }
LABEL_50:
  if (v17)
  {
    v59 = v17;
    operator delete(v17);
  }
}

void sub_239481FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239481FF8(_QWORD *a1, _QWORD *a2, uint64_t *a3, unsigned int a4, unsigned int a5, char a6, unsigned int *a7, unsigned int *a8, uint64_t a9, __int128 *a10, __int128 *a11)
{
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned int *v32;
  unsigned int *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unsigned int v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  unsigned int v71;
  void *__p;
  _DWORD *v73;
  void *v74;
  _DWORD *v75;
  void *v76[3];
  _BYTE v77[28];
  _QWORD v78[3];
  __int128 v79;
  __int128 v80;
  char v81;
  __int128 v82;
  char v83;
  void *v84[2];
  void *v85[2];
  int v86;
  __int128 v87;
  __int128 v88;
  int v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;

  sub_239429CA8((uint64_t)a1, a6, &v92);
  sub_239429CA8((uint64_t)a2, a6, &v90);
  v18 = v93 - v92;
  v19 = v90;
  v20 = v91 - v90;
  v21 = (unint64_t)(v91 - v90) >> 2;
  v22 = ((v93 - v92) & 0x3FFFFFFFCLL) == 0 || (_DWORD)v21 == 0;
  v23 = !v22;
  v71 = v23;
  if (!v22)
  {
    v87 = 0u;
    v88 = 0u;
    v89 = 1065353216;
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)v85 = 0u;
    v86 = 1065353216;
    LOBYTE(v82) = 0;
    v83 = 0;
    if (*((_BYTE *)a10 + 16))
    {
      v82 = *a10;
      v83 = 1;
    }
    sub_239481C14(a1, a4, a5, a7, a6, &v87, (uint64_t)&v82);
    LOBYTE(v80) = 0;
    v81 = 0;
    if (*((_BYTE *)a11 + 16))
    {
      v80 = *a11;
      v81 = 1;
    }
    sub_239481C14(a2, a4, a5, a8, a6, v84, (uint64_t)&v80);
    LOBYTE(__p) = 0;
    v24 = (v20 >> 2);
    v25 = (void *)(v24 | (v18 >> 2 << 32));
    *(_QWORD *)v77 = v25;
    *(_QWORD *)&v77[8] = ((v20 >> 2) != 0) | (v20 << 30);
    v77[16] = 0;
    v77[24] = 0;
    v76[0] = *(void **)&v77[8];
    if (!(v20 >> 2))
      v25 = 0;
    v74 = v25;
    if (((v20 >> 2) & ((v20 >> 2) - 1)) != 0)
      v26 = 1;
    else
      v26 = (v20 >> 2);
    sub_2394604BC(v78, &v74, (unint64_t *)v76, 1, &__p, 1, v26);
    *(_OWORD *)a9 = *(_OWORD *)v77;
    *(_OWORD *)(a9 + 12) = *(_OWORD *)&v77[12];
    *(_OWORD *)(a9 + 56) = v79;
    sub_23991693C((_QWORD *)(a9 + 32), v78);
    v27 = (v18 >> 2);
    sub_239916980((uint64_t)v78);
    *(_QWORD *)v77 = operator new(8 * (((v27 - 1) >> 6) + 1));
    *(_QWORD *)&v77[8] = 0;
    *(_QWORD *)&v77[16] = ((v27 - 1) >> 6) + 1;
    sub_23942D8C8(v77, v27, 0);
    v76[0] = operator new(8 * (((unint64_t)(v24 - 1) >> 6) + 1));
    v76[1] = 0;
    v76[2] = (void *)(((unint64_t)(v24 - 1) >> 6) + 1);
    sub_23942D8C8(v76, (v20 >> 2), 0);
    v28 = *a3;
    v29 = a3[1];
    if (*a3 != v29)
    {
      do
      {
        v74 = (void *)v28;
        v30 = sub_239489E40((uint64_t)&v87, (unsigned int *)v28, (uint64_t)&unk_239EC6E98, (_DWORD **)&v74);
        v74 = (void *)(v28 + 4);
        v31 = sub_239489E40((uint64_t)v84, (unsigned int *)(v28 + 4), (uint64_t)&unk_239EC6E98, (_DWORD **)&v74);
        v32 = (unsigned int *)v30[3];
        v33 = (unsigned int *)v30[4];
        while (v32 != v33)
        {
          if (v93 == v92)
            goto LABEL_82;
          v34 = (v93 - v92) >> 2;
          v35 = v92;
          do
          {
            v36 = v34 >> 1;
            v37 = &v35[4 * (v34 >> 1)];
            v39 = *(_DWORD *)v37;
            v38 = v37 + 4;
            v34 += ~(v34 >> 1);
            if (v39 < *v32)
              v35 = v38;
            else
              v34 = v36;
          }
          while (v34);
          if (v93 == v35)
          {
LABEL_82:
            sub_239A444D4((uint64_t)"unknown file", 162, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v40 = (unsigned int *)v31[3];
          v41 = (unsigned int *)v31[4];
          if (v40 != v41)
          {
            v42 = (v35 - v92) >> 2;
            v43 = v42 * v24;
            v44 = v42 >> 6;
            v45 = 1 << v42;
            do
            {
              if (v91 == v90)
                goto LABEL_81;
              v46 = (v91 - v90) >> 2;
              v47 = v90;
              do
              {
                v48 = v46 >> 1;
                v49 = &v47[4 * (v46 >> 1)];
                v51 = *(_DWORD *)v49;
                v50 = v49 + 4;
                v46 += ~(v46 >> 1);
                if (v51 < *v40)
                  v47 = v50;
                else
                  v46 = v48;
              }
              while (v46);
              if (v91 == v47)
              {
LABEL_81:
                sub_239A444D4((uint64_t)"unknown file", 167, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              v52 = (v47 - v90) >> 2;
              *(_BYTE *)(*(_QWORD *)(a9 + 40) + v52 + v43) = 1;
              *(_QWORD *)(*(_QWORD *)v77 + 8 * v44) |= v45;
              *(_QWORD *)((char *)v76[0] + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
              ++v40;
            }
            while (v40 != v41);
          }
          ++v32;
        }
        v28 += 12;
      }
      while (v28 != v29);
    }
    sub_239482794((char **)&v74, v77);
    sub_239482794((char **)&__p, v76);
    v53 = v74;
    v54 = v75;
    v55 = __p;
    if (v74 != v75 && __p != v73)
    {
      do
      {
        v56 = __p;
        v57 = v73;
        if (__p != v73)
        {
          v58 = *v53 * v21;
          do
          {
            v59 = (*v56 + v58);
            v60 = *(_QWORD *)(a9 + 40);
            if (*(_BYTE *)(v60 + v59))
            {
              sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            *(_BYTE *)(v60 + v59) = 1;
            ++v56;
          }
          while (v56 != v57);
        }
        ++v53;
      }
      while (v53 != v54);
      v55 = __p;
    }
    if (v55)
    {
      v73 = v55;
      operator delete(v55);
    }
    if (v74)
    {
      v75 = v74;
      operator delete(v74);
    }
    if (v76[0])
      operator delete(v76[0]);
    if (*(_QWORD *)v77)
      operator delete(*(void **)v77);
    v61 = v85[0];
    if (v85[0])
    {
      do
      {
        v66 = (_QWORD *)*v61;
        v67 = (void *)v61[3];
        if (v67)
        {
          v61[4] = v67;
          operator delete(v67);
        }
        operator delete(v61);
        v61 = v66;
      }
      while (v66);
    }
    v62 = v84[0];
    v84[0] = 0;
    if (v62)
      operator delete(v62);
    v63 = (_QWORD *)v88;
    if ((_QWORD)v88)
    {
      do
      {
        v68 = (_QWORD *)*v63;
        v69 = (void *)v63[3];
        if (v69)
        {
          v63[4] = v69;
          operator delete(v69);
        }
        operator delete(v63);
        v63 = v68;
      }
      while (v68);
    }
    v64 = (void *)v87;
    *(_QWORD *)&v87 = 0;
    if (v64)
      operator delete(v64);
    v19 = v90;
  }
  if (v19)
  {
    v91 = v19;
    operator delete(v19);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  return v71;
}

void sub_2394825AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,_QWORD *a39)
{
  uint64_t v39;
  void *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  void *v51;

  if (__p)
  {
    operator delete(__p);
    v41 = a17;
    if (!a17)
    {
LABEL_3:
      v42 = a20;
      if (!a20)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v41 = a17;
    if (!a17)
      goto LABEL_3;
  }
  operator delete(v41);
  v42 = a20;
  if (!a20)
  {
LABEL_4:
    v43 = a39;
    if (!a39)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_8:
  operator delete(v42);
  v43 = a39;
  if (!a39)
    goto LABEL_9;
  do
  {
LABEL_17:
    v48 = (_QWORD *)*v43;
    v49 = (void *)v43[3];
    if (v49)
    {
      v43[4] = v49;
      operator delete(v49);
    }
    operator delete(v43);
    v43 = v48;
  }
  while (v48);
LABEL_9:
  if (a37)
    operator delete(a37);
  v44 = *(_QWORD **)(v39 - 160);
  if (v44)
  {
    do
    {
      v50 = (_QWORD *)*v44;
      v51 = (void *)v44[3];
      if (v51)
      {
        v44[4] = v51;
        operator delete(v51);
      }
      operator delete(v44);
      v44 = v50;
    }
    while (v50);
  }
  v45 = *(void **)(v39 - 176);
  *(_QWORD *)(v39 - 176) = 0;
  if (v45)
  {
    operator delete(v45);
    v46 = *(void **)(v39 - 136);
    if (!v46)
    {
LABEL_14:
      v47 = *(void **)(v39 - 112);
      if (!v47)
        goto LABEL_15;
      goto LABEL_24;
    }
  }
  else
  {
    v46 = *(void **)(v39 - 136);
    if (!v46)
      goto LABEL_14;
  }
  *(_QWORD *)(v39 - 128) = v46;
  operator delete(v46);
  v47 = *(void **)(v39 - 112);
  if (!v47)
LABEL_15:
    _Unwind_Resume(exception_object);
LABEL_24:
  *(_QWORD *)(v39 - 104) = v47;
  operator delete(v47);
  _Unwind_Resume(exception_object);
}

void sub_239482794(char **a1, _QWORD *a2)
{
  unint64_t v2;
  char *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = a2[1];
  if (v2)
  {
    if (v2 >> 62)
      sub_2394189F8();
    v5 = (char *)operator new(4 * v2);
    v6 = 0;
    v7 = 0;
    *a1 = v5;
    a1[1] = v5;
    a1[2] = &v5[4 * v2];
    while (1)
    {
      if (((*(_QWORD *)(*a2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        goto LABEL_6;
      v9 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v9)
        break;
      *(_DWORD *)v5 = v7;
      v8 = (uint64_t)(v5 + 4);
LABEL_5:
      a1[1] = (char *)v8;
      v5 = (char *)v8;
LABEL_6:
      v6 = ++v7;
      if (v2 <= v7)
        return;
    }
    v10 = *a1;
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      sub_2394189F8();
    v14 = v9 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        sub_239418A80();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v12];
      *(_DWORD *)v17 = v7;
      v8 = (uint64_t)(v17 + 4);
      if (v5 == v10)
        goto LABEL_23;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(4 * v12);
      *(_DWORD *)(4 * v12) = v7;
      v8 = 4 * v12 + 4;
      if (v5 == v10)
        goto LABEL_23;
    }
    v18 = v5 - 4 - v10;
    if (v18 >= 0xBC)
    {
      if (&v16[v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v11 - 4])
      {
        v19 = v5;
      }
      else if (&v5[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
      {
        v19 = v5;
      }
      else if ((unint64_t)(v5 - v16 - v11) >= 0x20)
      {
        v21 = (v18 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v19 = &v5[-v22];
        v17 -= v22;
        v23 = &v16[4 * v12 - 16];
        v24 = v5 - 16;
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
      }
      else
      {
        v19 = v5;
      }
    }
    else
    {
      v19 = v5;
    }
    do
    {
      v20 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v17 - 1) = v20;
      v17 -= 4;
    }
    while (v19 != v10);
LABEL_23:
    *a1 = v17;
    a1[1] = (char *)v8;
    a1[2] = &v16[4 * v15];
    if (v10)
    {
      operator delete(v10);
      v2 = a2[1];
    }
    goto LABEL_5;
  }
}

void sub_2394829D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394829F4(unsigned int *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  _BYTE v24[36];
  int v25;
  unsigned int v26;
  _BOOL4 v27;

  v6 = a2[1] - *a2;
  v8 = *a1;
  v7 = a1[1];
  v9 = *a1 != 0;
  if (v7 >= 0)
    v10 = a1[1];
  else
    v10 = v7 + 3;
  v25 = 0;
  v26 = v8;
  *(_QWORD *)&v23 = v8 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)v9 << 32);
  v11 = (int)(v6 >> 2);
  BYTE8(v23) = 0;
  BYTE12(v23) = 0;
  v27 = v9;
  sub_23948A154((uint64_t)v24, &v26, (int *)&v27, 1, (const float *)&v25, 1, 4 * v9);
  v12 = a3[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a3) >> 4);
  if (v11 <= v13)
  {
    if (v11 < v13)
    {
      v14 = *a3 + 48 * (int)v11;
      if (v12 != v14)
      {
        do
        {
          v15 = v12 - 48;
          sub_239916980(v12 - 32);
          v12 = v15;
        }
        while (v15 != v14);
      }
      a3[1] = v14;
    }
  }
  else
  {
    sub_23948A31C(a3, v11 - v13, &v23);
  }
  sub_239916980((uint64_t)v24);
  if ((int)((unint64_t)v6 >> 2) >= 1)
  {
    v16 = 0;
    v17 = (int)v8;
    v18 = v10 >> 2;
    v19 = 4 * v17;
    v20 = v6 & 0x3FFFFFFFCLL;
    v21 = 24;
    do
    {
      memcpy(*(void **)(*a3 + v21), (const void *)(*((_QWORD *)a1 + 8)+ 16 * (a1[5] * (*(_DWORD *)(*a2 + v16) % v18) + a1[6] * (*(_DWORD *)(*a2 + v16) / v18))), v19);
      v16 += 4;
      v21 += 48;
    }
    while (v20 != v16);
  }
  return 1;
}

void sub_239482B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239482B94(uint32x2_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (***v15)();
  uint64_t v16;
  uint32x2_t *v17;
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t v20;
  unsigned int v22;
  _QWORD v23[2];
  uint64_t (**v24)();
  unsigned int *v25;
  _QWORD *v26;
  uint64_t (***v27)();
  uint64_t v28;

  v9 = a4;
  v28 = *MEMORY[0x24BDAC8D0];
  v23[0] = a3;
  v23[1] = a4;
  v22 = a5;
  v24 = &off_250ADC460;
  v25 = &v22;
  v26 = a2;
  v27 = &v24;
  sub_23948A8D4(&v24, &a1[11]);
  v15 = v27;
  if (v27 == &v24)
  {
    v16 = 4;
    v15 = &v24;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v16 = 5;
  }
  (*v15)[v16]();
LABEL_6:
  v17 = (uint32x2_t *)a1[22];
  a1[22] = 0;
  if (v17 == &a1[19])
  {
    v18 = 4;
    v17 = a1 + 19;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_11:
  if (v9)
  {
    v24 = &off_250ADC4E0;
    v25 = &v22;
    v26 = v23;
    v27 = &v24;
    sub_23948AB98(&v24, &a1[19]);
    v19 = v27;
    if (v27 == &v24)
    {
      v20 = 4;
      v19 = &v24;
      goto LABEL_16;
    }
    if (v27)
    {
      v20 = 5;
LABEL_16:
      (*v19)[v20]();
    }
  }
  return sub_239482D04(a1, v22, a6, a7, v11, v12, v13, v14);
}

uint64_t sub_239482D04(uint32x2_t *a1, unsigned int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  float32x2_t *v20;
  std::__shared_weak_count *v21;

  if (!a1[34].i32[0])
    return 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  if (sub_239482E54(a1, a2, &v20, &v18, a3, 0, 0, a8, 0, 0) && (v9 = v18) != 0)
  {
    sub_239487600(a4, v18);
    *(_QWORD *)(a4 + 112) = *(_QWORD *)(v9 + 112);
    v10 = 1;
    v11 = v19;
    if (!v19)
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
    v11 = v19;
    if (!v19)
      goto LABEL_10;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
LABEL_10:
    v14 = v21;
    if (v21)
      goto LABEL_11;
    return v10;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = v21;
  if (!v21)
    return v10;
LABEL_11:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v10;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v10;
}

void sub_239482E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_239482E54(uint32x2_t *a1, unint64_t a2, float32x2_t **a3, uint64_t *a4, char a5, float32x2_t *a6, char a7, uint64_t a8, _OWORD *a9, char a10)
{
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint32x2_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint32x2_t v47;
  uint32x2_t *v48;
  int v49;
  char v50;
  uint32x2_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float32x2_t v60;
  std::__shared_weak_count **v61;
  char v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  float32x2_t *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int32 v83;
  float32x2_t *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];
  uint64_t v89[2];
  __int128 v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  int32x2_t *v93;
  std::__shared_weak_count *v94;
  uint64_t (**v95)();
  uint64_t v96;
  std::__shared_weak_count *v97;
  _BYTE v98[32];
  uint64_t (***v99)();
  std::__shared_weak_count *v100;

  if (!*(_QWORD *)&a1[14])
    return 0;
  v17 = (uint64_t)a1[7];
  if (v17)
  {
    sub_239486BB8(v17, a2, &v90);
    v18 = v90;
    v90 = 0uLL;
    v19 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
    if (!*((_QWORD *)&v90 + 1))
    {
LABEL_16:
      v26 = (uint64_t)a1[9];
      if (v26)
        goto LABEL_17;
LABEL_27:
      v31 = (std::__shared_weak_count *)a4[1];
      *a4 = 0;
      a4[1] = 0;
      if (!v31)
        goto LABEL_31;
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v34);
      while (__stlxr(v33 - 1, v34));
      goto LABEL_30;
    }
    v23 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
  }
  else
  {
    v22 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v22)
      goto LABEL_16;
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v25);
    while (__stlxr(v24 - 1, v25));
  }
  if (v24)
    goto LABEL_16;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  v26 = (uint64_t)a1[9];
  if (!v26)
    goto LABEL_27;
LABEL_17:
  sub_239486E5C(v26, a2, &v90);
  v27 = v90;
  v90 = 0uLL;
  v28 = (std::__shared_weak_count *)a4[1];
  *(_OWORD *)a4 = v27;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (!*((_QWORD *)&v90 + 1))
    goto LABEL_31;
  v32 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
LABEL_30:
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (*a3)
      goto LABEL_32;
LABEL_37:
    if (*a4 && a1[34].i32[0] == 1)
      return 1;
    goto LABEL_39;
  }
LABEL_31:
  if (!*a3)
    goto LABEL_37;
LABEL_32:
  v35 = a1[34].u32[0];
  if (!v35 || *a4 && v35 < 3)
    return 1;
LABEL_39:
  kdebug_trace();
  v95 = &off_250ADB778;
  sub_239469138((uint64_t)&v96);
  v87 = a1[26].u32[1];
  v86 = a1[26].u32[0];
  v36 = (char *)operator new(0x108uLL);
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *(_QWORD *)v36 = &off_250ADC800;
  *(_OWORD *)(v36 + 56) = 0u;
  *(_OWORD *)(v36 + 72) = 0u;
  *(_OWORD *)(v36 + 88) = 0u;
  *(_OWORD *)(v36 + 104) = 0u;
  *(_OWORD *)(v36 + 120) = 0u;
  *(_OWORD *)(v36 + 136) = 0u;
  *(_OWORD *)(v36 + 152) = 0u;
  *(_OWORD *)(v36 + 168) = 0u;
  *(_OWORD *)(v36 + 184) = 0u;
  *(_OWORD *)(v36 + 200) = 0u;
  *(_OWORD *)(v36 + 216) = 0u;
  *(_OWORD *)(v36 + 232) = 0u;
  *(_OWORD *)(v36 + 248) = 0u;
  *(_OWORD *)(v36 + 24) = 0u;
  LODWORD(v93) = 0;
  v36[72] = 0;
  v36[56] = 0;
  *(_OWORD *)(v36 + 40) = 0u;
  v90 = 0uLL;
  v99 = 0;
  v100 = 0;
  sub_23948C444((uint64_t)(v36 + 80), (unsigned int *)&v99, (unint64_t *)&v90, 1, &v93, 1, 0);
  v36[136] = 0;
  v36[224] = 0;
  *((_QWORD *)v36 + 29) = 0;
  v36[240] = 0;
  v36[256] = 0;
  v37 = (std::__shared_weak_count *)a3[1];
  *a3 = (float32x2_t *)(v36 + 24);
  a3[1] = (float32x2_t *)v36;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (char *)operator new(0x90uLL);
  *((_QWORD *)v40 + 1) = 0;
  *((_QWORD *)v40 + 2) = 0;
  *(_QWORD *)v40 = &off_250ADC838;
  *(_OWORD *)(v40 + 56) = 0u;
  *(_OWORD *)(v40 + 72) = 0u;
  *(_OWORD *)(v40 + 88) = 0u;
  *(_OWORD *)(v40 + 104) = 0u;
  *(_OWORD *)(v40 + 120) = 0u;
  *((_QWORD *)v40 + 17) = 0;
  *(_OWORD *)(v40 + 24) = 0u;
  LODWORD(v93) = 0;
  v40[72] = 0;
  v40[56] = 0;
  *(_OWORD *)(v40 + 40) = 0u;
  v90 = 0uLL;
  v99 = 0;
  v100 = 0;
  sub_23948C444((uint64_t)(v40 + 80), (unsigned int *)&v99, (unint64_t *)&v90, 1, &v93, 1, 0);
  v41 = (std::__shared_weak_count *)a4[1];
  *a4 = (uint64_t)(v40 + 24);
  a4[1] = (uint64_t)v40;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_QWORD *)&v90 = a2;
  v44 = a1[14];
  if (!*(_QWORD *)&v44)
    sub_2394172E0();
  (*(void (**)(uint64_t (****__return_ptr)(), uint32x2_t, __int128 *))(**(_QWORD **)&v44 + 48))(&v99, v44, &v90);
  v45 = v99;
  if (!v99)
    goto LABEL_101;
  v46 = 0;
  (*a3)[26] = (float32x2_t)v99[4];
  v47 = a1[22];
  if (!*(_QWORD *)&v47 || (a5 & 1) != 0)
  {
    v50 = 0;
  }
  else
  {
    *(_QWORD *)&v90 = a2;
    (*(void (**)(int32x2_t **__return_ptr, uint32x2_t, __int128 *))(**(_QWORD **)&v47 + 48))(&v93, v47, &v90);
    if (v93)
    {
      kdebug_trace();
      if (a10)
      {
        sub_239487100((uint64_t)&(*a3)[14], (uint64_t)v93);
        v48 = (uint32x2_t *)*a3;
        v49 = (*a3)[29].u8[0];
        *(_OWORD *)(*a3)[27].f32 = *a9;
        if (!v49)
          v48[29].i8[0] = 1;
      }
      else
      {
        sub_239487188((uint64_t)&v90);
        sub_2394871D0((uint64_t)&(*a3)[14], (uint64_t)&v90);
        sub_239416DA0((uint64_t)&v90 + 8);
        nullsub_4(&v90);
        if (!(*a3)[29].i8[0])
          (*a3)[29].i8[0] = 1;
        v51 = (uint32x2_t *)*a3;
        if (!(*a3)[25].i8[0] || !v51[29].i8[0])
          sub_2394875CC();
        v45 = &v95;
        sub_23949A2D8((uint32x2_t *)v99, v93, (uint64_t)&v95, (uint64_t)&v51[14], (float *)&v51[27], v87 | (v86 << 32), 1, 8u);
      }
      kdebug_trace();
      if (!(*a3)[25].i8[0])
        sub_2394875CC();
      v46 = (uint64_t)&(*a3)[14];
      v50 = 1;
    }
    else
    {
      v46 = 0;
      v50 = 0;
    }
    if (a7)
      (*a3)[26] = *a6;
    v52 = v94;
    if (v94)
    {
      v53 = (unint64_t *)&v94->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  __asm { FMOV            V1.2S, #0.25 }
  v60 = vmul_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)(*a3)[26]), (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_u32(a1[27]))), _D1);
  if ((*a3)[29].i8[0])
    v60 = vdiv_f32(v60, (*a3)[28]);
  *(float32x2_t *)(*a4 + 112) = v60;
  v61 = (std::__shared_weak_count **)a1[1];
  *(_QWORD *)&v90 = &off_250ADB210;
  sub_23948E51C((uint64_t)v45, (uint64_t)&v90 + 8);
  v62 = sub_239491570(v61, (uint64_t)&v90, (uint64_t)*a3, *a4, v46, v50);
  nullsub_4(&v92);
  v63 = v91;
  if (v91)
  {
    v64 = (unint64_t *)&v91->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      nullsub_4(&v90);
      if ((v62 & 1) != 0)
        goto LABEL_80;
LABEL_101:
      v76 = 0;
      v77 = v100;
      if (!v100)
        goto LABEL_105;
      goto LABEL_102;
    }
  }
  nullsub_4(&v90);
  if ((v62 & 1) == 0)
    goto LABEL_101;
LABEL_80:
  v66 = (uint64_t)a1[7];
  if (v66)
  {
    v67 = *a3;
    if ((*a3)->i32[0])
    {
      if (v67->i32[1] && v67[1].i32[0] && v67[1].i32[1])
      {
        v68 = (uint64_t)a3[1];
        v89[0] = (uint64_t)*a3;
        v89[1] = v68;
        if (v68)
        {
          v69 = (unint64_t *)(v68 + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        sub_2394872CC(v66, v89, a2);
        sub_239416DA0((uint64_t)v89);
      }
    }
  }
  v71 = (uint64_t)a1[9];
  if (v71)
  {
    v72 = (_DWORD *)*a4;
    if (*(_DWORD *)*a4)
    {
      if (v72[1] && v72[2] && v72[3])
      {
        v73 = a4[1];
        v88[0] = *a4;
        v88[1] = v73;
        if (v73)
        {
          v74 = (unint64_t *)(v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        sub_23948744C(v71, v88, a2);
        sub_239416DA0((uint64_t)v88);
      }
    }
  }
  kdebug_trace();
  v76 = 1;
  v77 = v100;
  if (!v100)
  {
LABEL_105:
    nullsub_4(v98);
    v80 = v97;
    if (!v97)
      goto LABEL_109;
    goto LABEL_106;
  }
LABEL_102:
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
    goto LABEL_105;
  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
  std::__shared_weak_count::__release_weak(v77);
  nullsub_4(v98);
  v80 = v97;
  if (!v97)
    goto LABEL_109;
LABEL_106:
  v81 = (unint64_t *)&v80->__shared_owners_;
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (v82)
  {
LABEL_109:
    j_nullsub_4_89(&v95);
    if ((v76 & 1) == 0)
      return 0;
    goto LABEL_110;
  }
  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
  std::__shared_weak_count::__release_weak(v80);
  j_nullsub_4_89(&v95);
  if ((v76 & 1) == 0)
    return 0;
LABEL_110:
  v83 = a1[34].i32[0];
  if (v83 != 1)
  {
    if (!v83)
    {
      v84 = *a3;
      if (!*a3 || !v84->i32[0] || !v84->i32[1] || !v84[1].i32[0] || !v84[1].i32[1])
        return 0;
    }
    return 1;
  }
  return *a4 != 0;
}

void sub_2394836F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_239416DA0((uint64_t)&a11);
  sub_239416DA0(v28 - 104);
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_239483718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_239416DA0((uint64_t)&a13);
  sub_239416DA0(v28 - 104);
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_23948373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  sub_239416DA0(v28 + 8);
  nullsub_4(&a15);
  sub_239416DA0((uint64_t)&a26);
  sub_239416DA0(v29 - 104);
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_2394837A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_239416FF8((uint64_t)&a15);
  sub_239416DA0(v28 - 104);
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_2394837CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  nullsub_4(&a15);
  sub_239416DA0(v28 - 104);
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_2394837F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_239483828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_23948383C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  j_nullsub_4_89(&a28);
  _Unwind_Resume(a1);
}

void sub_239483854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_239422DD0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_239483868(uint64_t *a1, uint64_t a2, _QWORD *a3, float **a4)
{
  return sub_23949B0D0(a1, (int *)a2, a3, a4, 4, *(float *)(a2 + 112), *(float *)(a2 + 116));
}

uint64_t sub_239483874(int32x4_t *a1, uint64_t a2, uint64_t a3, float **a4)
{
  int32x4_t v4;
  uint64_t v5;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unsigned __int32 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  __int32 v52;
  _DWORD *v55;
  void *__p;
  uint64_t v57;
  uint64_t *v58;
  void *v59;
  char *v60;
  char *v61;

  v4 = *a1;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqzq_s32(*a1), (int16x8_t)vceqzq_s32(*(int32x4_t *)a2)))) & 1) != 0)
    return 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v7 = *(_DWORD **)a3;
  v55 = *(_DWORD **)(a3 + 8);
  v8 = (uint64_t)v55 - *(_QWORD *)a3;
  if (v8)
  {
    v52 = v4.i32[1];
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    if (v9 >> 62)
      sub_2394189F8();
    v59 = operator new(0xAAAAAAAAAAAAAAACLL * (v8 >> 2));
    v60 = (char *)v59;
    v61 = (char *)v59 + 4 * v9;
    v10 = (uint64_t *)operator new(8 * v9);
    __p = v10;
    v57 = (uint64_t)v10;
    v58 = &v10[v9];
    v4.i32[1] = v52;
    if (v55 == v7)
      goto LABEL_61;
    goto LABEL_8;
  }
  v10 = 0;
  __p = 0;
  v57 = 0;
  v58 = 0;
  if (v55 != v7)
  {
LABEL_8:
    v11 = (unsigned __int32)v4.i32[1] >> 2;
    while (1)
    {
      v13 = a1[4].i64[0] + 16 * (a1[1].i32[1] * (*v7 % v11) + a1[1].i32[2] * (*v7 / v11));
      if (v10 < v58)
      {
        *v10++ = v13;
        v57 = (uint64_t)v10;
        v15 = v60;
        v14 = v61;
        if (v60 >= v61)
          goto LABEL_26;
        goto LABEL_9;
      }
      v16 = (uint64_t *)__p;
      v17 = (char *)v10 - (_BYTE *)__p;
      v18 = ((char *)v10 - (_BYTE *)__p) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        sub_2394189F8();
      v20 = (char *)v58 - (_BYTE *)__p;
      if (((char *)v58 - (_BYTE *)__p) >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_239418A80();
        v22 = operator new(8 * v21);
        v23 = (uint64_t *)&v22[8 * v18];
        *v23 = v13;
        v24 = (uint64_t)(v23 + 1);
        if (v10 == v16)
        {
LABEL_23:
          __p = v23;
          v58 = (uint64_t *)&v22[8 * v21];
          if (!v10)
            goto LABEL_25;
LABEL_24:
          operator delete(v10);
          goto LABEL_25;
        }
      }
      else
      {
        v22 = 0;
        v23 = (uint64_t *)(8 * v18);
        *(_QWORD *)(8 * v18) = v13;
        v24 = 8 * v18 + 8;
        if (v10 == v16)
          goto LABEL_23;
      }
      v33 = (char *)(v10 - 1) - (char *)v16;
      if (v33 < 0x168)
      {
        v34 = v10;
        goto LABEL_39;
      }
      if (&v22[v17 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8])
        break;
      if ((uint64_t *)((char *)v10 - (v33 & 0xFFFFFFFFFFFFFFF8) - 8) > v10 - 1)
      {
        v34 = v10;
        goto LABEL_39;
      }
      if ((unint64_t)((char *)v10 - v22 - v17) < 0x20)
      {
        v34 = v10;
        goto LABEL_39;
      }
      v45 = (v33 >> 3) + 1;
      v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &v10[v46 / 0xFFFFFFFFFFFFFFF8];
      v23 = (uint64_t *)((char *)v23 - v46);
      v47 = &v22[8 * v18 - 16];
      v48 = v10 - 2;
      v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        *v47 = v50;
        v47 -= 2;
        v48 -= 4;
        v49 -= 4;
      }
      while (v49);
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_39;
LABEL_40:
      v10 = (uint64_t *)__p;
      __p = v23;
      v58 = (uint64_t *)&v22[8 * v21];
      if (v10)
        goto LABEL_24;
LABEL_25:
      v10 = (uint64_t *)v24;
      v57 = v24;
      v15 = v60;
      v14 = v61;
      if (v60 >= v61)
      {
LABEL_26:
        v25 = (char *)v59;
        v26 = v15 - (_BYTE *)v59;
        v27 = (v15 - (_BYTE *)v59) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          sub_2394189F8();
        v29 = v14 - (_BYTE *)v59;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 62)
            sub_239418A80();
          v31 = operator new(4 * v30);
          v32 = &v31[4 * v27];
          *v32 = v7[1];
          v12 = (uint64_t)(v32 + 1);
          if (v15 == v25)
            goto LABEL_49;
LABEL_43:
          v36 = v15 - 4 - v25;
          if (v36 < 0x2C)
            goto LABEL_73;
          if ((unint64_t)(v15 - &v31[v26]) < 0x20)
            goto LABEL_73;
          v37 = (v36 >> 2) + 1;
          v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
          v39 = &v15[-v38];
          v32 = (_DWORD *)((char *)v32 - v38);
          v40 = &v31[4 * v27 - 16];
          v41 = v15 - 16;
          v42 = v37 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v43 = *(_OWORD *)v41;
            *(v40 - 1) = *((_OWORD *)v41 - 1);
            *v40 = v43;
            v40 -= 2;
            v41 -= 32;
            v42 -= 8;
          }
          while (v42);
          v15 = v39;
          if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_73:
            do
            {
              v44 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *--v32 = v44;
            }
            while (v15 != v25);
          }
        }
        else
        {
          v31 = 0;
          v32 = (_DWORD *)(4 * v27);
          *(_DWORD *)(4 * v27) = v7[1];
          v12 = 4 * v27 + 4;
          if (v15 != v25)
            goto LABEL_43;
        }
LABEL_49:
        v59 = v32;
        v61 = &v31[4 * v30];
        if (v25)
          operator delete(v25);
        goto LABEL_10;
      }
LABEL_9:
      *(_DWORD *)v15 = v7[1];
      v12 = (uint64_t)(v15 + 4);
LABEL_10:
      v60 = (char *)v12;
      v7 += 3;
      if (v7 == v55)
        goto LABEL_61;
    }
    v34 = v10;
    do
    {
LABEL_39:
      v35 = *--v34;
      *--v23 = v35;
    }
    while (v34 != v16);
    goto LABEL_40;
  }
LABEL_61:
  v5 = sub_23949B0D0((uint64_t *)&__p, (int *)a2, &v59, a4, 4, *(float *)(a2 + 112), *(float *)(a2 + 116));
  if (__p)
  {
    v57 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v59)
  {
    v60 = (char *)v59;
    operator delete(v59);
  }
  return v5;
}

void sub_239483D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a18;
    if (!a18)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a18;
    if (!a18)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_239483D68(uint64_t a1)
{
  uint64_t *v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  _BOOL4 v22;

  v2 = (uint64_t *)(a1 + 268);
  v3 = *(_DWORD *)(a1 + 276) == 1;
  v21 = *(_QWORD *)(a1 + 268);
  v22 = v3;
  v4 = operator new();
  sub_23949156C(v4, (unsigned int *)&v21);
  v5 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    sub_239416DA0((uint64_t)(v5 + 32));
    nullsub_4(v5 + 31);
    sub_239420C38(v5 + 3);
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      v7 = sub_23964F698(v6);
      MEMORY[0x23B83E31C](v7, 0x60C40CE5A77A8);
    }
    MEMORY[0x23B83E31C](v5, 0x10F0C4094E5B797);
  }
  v19 = *v2;
  v20 = v3;
  v8 = operator new();
  sub_23948EB3C(v8, (unsigned int *)&v19);
  v9 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
  {
    v10 = *v9;
    *v9 = 0;
    if (v10)
    {
      v11 = sub_23964F698(v10);
      MEMORY[0x23B83E31C](v11, 0x60C40CE5A77A8);
    }
    MEMORY[0x23B83E31C](v9, 0x1020C405AF6BDC9);
  }
  if (*(_DWORD *)(a1 + 272))
  {
    v12 = operator new(0x138uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_250ADC528;
    v13 = sub_23948AD88((uint64_t)(v12 + 3), 2);
    v14 = *(std::__shared_weak_count **)(a1 + 80);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v12;
    if (!v14)
      return;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (v16)
      return;
LABEL_19:
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    return;
  }
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      goto LABEL_19;
  }
}

void sub_239483F5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_239483F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1020C405AF6BDC9);
  _Unwind_Resume(a1);
}

void sub_239483F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10F0C4094E5B797);
  _Unwind_Resume(a1);
}

uint64_t **sub_239483FBC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_239416DA0((uint64_t)(v2 + 32));
    nullsub_4(v2 + 31);
    sub_239420C38(v2 + 3);
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = sub_23964F698(v3);
      MEMORY[0x23B83E31C](v4, 0x60C40CE5A77A8);
    }
    MEMORY[0x23B83E31C](v2, 0x10F0C4094E5B797);
  }
  return a1;
}

uint64_t **sub_239484048(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = sub_23964F698(v3);
      MEMORY[0x23B83E31C](v4, 0x60C40CE5A77A8);
    }
    MEMORY[0x23B83E31C](v2, 0x1020C405AF6BDC9);
  }
  return a1;
}

uint64_t sub_2394840B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  __int128 v46;
  uint64_t v47;

  *(_QWORD *)a1 = &off_250ADC410;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v15 = *(_QWORD *)(a2 + 24);
  if (!v15)
    goto LABEL_4;
  if (v15 != a2)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_4:
    *(_QWORD *)(a1 + 112) = v15;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 112) = a1 + 88;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 88);
LABEL_6:
  v16 = *(_QWORD *)(a9 + 24);
  if (!v16)
  {
LABEL_9:
    *(_QWORD *)(a1 + 144) = v16;
    goto LABEL_11;
  }
  if (v16 != a9)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 144) = a1 + 120;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24), a1 + 120);
LABEL_11:
  v17 = *(_QWORD *)(a10 + 24);
  if (v17)
  {
    if (v17 == a10)
    {
      *(_QWORD *)(a1 + 176) = a1 + 152;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a10 + 24) + 24))(*(_QWORD *)(a10 + 24), a1 + 152);
      goto LABEL_16;
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  }
  *(_QWORD *)(a1 + 176) = v17;
LABEL_16:
  *(_QWORD *)(a1 + 184) = 0;
  v18 = (void **)(a1 + 184);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v19 = *a7;
  v20 = a7[1];
  v21 = a7[3];
  *(_OWORD *)(a1 + 260) = a7[2];
  *(_OWORD *)(a1 + 276) = v21;
  *(_OWORD *)(a1 + 244) = v20;
  *(_OWORD *)(a1 + 228) = v19;
  sub_239483D68(a1);
  *(_QWORD *)(a1 + 208) = sub_239481820(*(_DWORD *)(a1 + 268), *(unsigned int *)(a1 + 272));
  v22 = sub_239481900(*(_DWORD *)(a1 + 268), *(unsigned int *)(a1 + 272));
  v24 = v23;
  *(_QWORD *)(a1 + 216) = v22;
  *(_DWORD *)(a1 + 224) = v23;
  *(_DWORD *)(a1 + 252) = HIDWORD(v22) * v22;
  v25 = operator new(0x30uLL);
  v25[1] = 0;
  v25[2] = 0;
  *v25 = &off_250ADC038;
  v26 = sub_23947B708(v25 + 3, v24, a3, a4, a5, a6, a1 + 228);
  v27 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 32) = v25;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = operator new(0x30uLL);
  v30[1] = 0;
  v30[2] = 0;
  *v30 = &off_250ADC038;
  v31 = sub_23947B708(v30 + 3, *((_DWORD *)a7 + 15), a3, a4, a5, a6, a8);
  v32 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v31;
  *(_QWORD *)(a1 + 48) = v30;
  if (!v32)
    goto LABEL_25;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = *((unsigned int *)a7 + 7);
    if (v35 >= 2)
      goto LABEL_26;
  }
  else
  {
LABEL_25:
    v35 = *((unsigned int *)a7 + 7);
    if (v35 >= 2)
    {
LABEL_26:
      v36 = operator new(0x138uLL);
      v36[1] = 0;
      v36[2] = 0;
      *v36 = &off_250ADC5E8;
      v37 = sub_23948B450((uint64_t)(v36 + 3), v35);
      v38 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v37;
      *(_QWORD *)(a1 + 64) = v36;
      if (!v38)
        goto LABEL_36;
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_34;
    }
  }
  v38 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v38)
    goto LABEL_36;
  v41 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v41);
  while (__stlxr(v40 - 1, v41));
LABEL_34:
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_36:
  sub_2394819E0(*(_DWORD *)(a1 + 268), *(unsigned int *)(a1 + 272), (void **)&v46);
  v42 = *v18;
  if (*v18)
  {
    *(_QWORD *)(a1 + 192) = v42;
    operator delete(v42);
    *v18 = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
  }
  *(_OWORD *)(a1 + 184) = v46;
  *(_QWORD *)(a1 + 200) = v47;
  if (*(_DWORD *)(a1 + 268) == 1)
    *(_DWORD *)(a1 + 284) = 2;
  return a1;
}

void sub_239484444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13, _QWORD *a14, _QWORD *a15, _QWORD *a16)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  void **v18;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);
  v21 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v16 + 192) = v21;
    operator delete(v21);
  }
  v22 = *(_QWORD **)(v16 + 176);
  if (v22 == a14)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v23 = 5;
    a14 = *(_QWORD **)(v16 + 176);
  }
  (*(void (**)(void))(*a14 + 8 * v23))();
LABEL_8:
  v24 = *(_QWORD **)(v16 + 144);
  if (v24 == a15)
  {
    v25 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_13;
    v25 = 5;
    a15 = *(_QWORD **)(v16 + 144);
  }
  (*(void (**)(void))(*a15 + 8 * v25))();
LABEL_13:
  v26 = *(_QWORD **)(v16 + 112);
  if (v26 == a16)
  {
    v27 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_18;
    v27 = 5;
    a16 = *(_QWORD **)(v16 + 112);
  }
  (*(void (**)(void))(*a16 + 8 * v27))();
LABEL_18:
  sub_239416DA0(v16 + 72);
  sub_239416DA0(a10);
  sub_239416DA0(a11);
  sub_239416DA0(a12);
  sub_239484048((uint64_t **)(v16 + 16));
  sub_239483FBC(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_239484584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_2394840B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

_QWORD *sub_239484590(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = &off_250ADC410;
  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[22];
  if (v3 == a1 + 19)
  {
    v4 = 4;
    v3 = a1 + 19;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = (_QWORD *)a1[18];
  if (v5 == a1 + 15)
  {
    v6 = 4;
    v5 = a1 + 15;
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = (_QWORD *)a1[14];
  if (v7 == a1 + 11)
  {
    v8 = 4;
    v7 = a1 + 11;
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = (std::__shared_weak_count *)a1[10];
  if (!v9)
    goto LABEL_22;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)a1[8];
    if (!v12)
      goto LABEL_28;
  }
  else
  {
LABEL_22:
    v12 = (std::__shared_weak_count *)a1[8];
    if (!v12)
      goto LABEL_28;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_28:
  v15 = (std::__shared_weak_count *)a1[6];
  if (!v15)
    goto LABEL_32;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)a1[4];
    if (!v18)
      goto LABEL_38;
  }
  else
  {
LABEL_32:
    v18 = (std::__shared_weak_count *)a1[4];
    if (!v18)
      goto LABEL_38;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_38:
  v21 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v21)
  {
    v22 = *v21;
    *v21 = 0;
    if (v22)
    {
      v23 = sub_23964F698(v22);
      MEMORY[0x23B83E31C](v23, 0x60C40CE5A77A8);
    }
    MEMORY[0x23B83E31C](v21, 0x1020C405AF6BDC9);
  }
  v24 = (uint64_t *)a1[1];
  a1[1] = 0;
  if (v24)
  {
    sub_239416DA0((uint64_t)(v24 + 32));
    nullsub_4(v24 + 31);
    sub_239420C38(v24 + 3);
    v25 = *v24;
    *v24 = 0;
    if (v25)
    {
      v26 = sub_23964F698(v25);
      MEMORY[0x23B83E31C](v26, 0x60C40CE5A77A8);
    }
    MEMORY[0x23B83E31C](v24, 0x10F0C4094E5B797);
  }
  return a1;
}

void sub_23948480C(_QWORD *a1)
{
  sub_239484590(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239484830(uint64_t result, float a2)
{
  *(float *)(result + 228) = a2;
  return result;
}

void sub_239484838(uint64_t a1@<X0>, uint32x2_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  uint64_t v11;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int32x2_t v25;
  unsigned __int32 v26;
  uint64_t v27;
  unint64_t v28;
  float32x2_t v29;
  uint64_t v30;
  unint64_t v31;
  float32x2_t v32;
  int32x2_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  char v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  float v39;
  int v40;
  float v41;
  BOOL v42;
  size_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::bad_alloc *exception;
  std::bad_alloc *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *__src[2];
  unsigned int v64;
  __int128 v65;
  unint64_t v66;
  void *memptr;
  __int128 v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  int32x2_t v71;
  uint64_t v72;

  LOBYTE(v11) = a8;
  v72 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a9 = xmmword_239EC65B0;
  *(_OWORD *)(a9 + 16) = 0u;
  v15 = (unsigned int *)(a9 + 16);
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  v65 = 0uLL;
  v66 = 0xBF80000000000000;
  v16 = a4;
  v62 = a4;
  if (a4)
    v16 = *(_DWORD *)(a1 + 224);
  __src[0] = 0;
  __src[1] = 0;
  v64 = v16;
  sub_23941D1E8((uint64_t)__src, v16);
  if (v62
    && *(_DWORD *)(a1 + 216) * *(_DWORD *)(a1 + 220) * *(_DWORD *)(a1 + 224) != *(_DWORD *)(a3 + 4)
                                                                              * *(_DWORD *)a3
                                                                              * *(_DWORD *)(a3 + 8))
  {
    v54 = 425;
    goto LABEL_58;
  }
  v17 = (*(_DWORD *)(a1 + 216) * *(_DWORD *)(a1 + 220));
  v61 = a6;
  if (a6 && (_DWORD)v17 != *(_DWORD *)(a5 + 4) * *(_DWORD *)a5 * *(_DWORD *)(a5 + 8))
  {
    v54 = 430;
LABEL_58:
    sub_239A444D4((uint64_t)"unknown file", v54, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v60 = (uint64_t *)(a9 + 24);
  sub_2394187EC(a9 + 24, v17);
  v18 = *(_BYTE **)(a9 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a9 + 64) - (_QWORD)v18) >> 3) < v17)
  {
    v19 = *(_BYTE **)(a9 + 56);
    v20 = (char *)operator new(24 * v17);
    v21 = &v20[24 * ((v19 - v18) / 24)];
    v22 = v21;
    if (v19 != v18)
    {
      v23 = &v20[24 * ((v19 - v18) / 24)];
      do
      {
        v22 = v23 - 24;
        v24 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v23 - 1) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v19 -= 24;
        v23 -= 24;
      }
      while (v19 != v18);
    }
    *(_QWORD *)(a9 + 48) = v22;
    *(_QWORD *)(a9 + 56) = v21;
    *(_QWORD *)(a9 + 64) = &v20[24 * v17];
    if (v18)
      operator delete(v18);
  }
  sub_2394188EC((char **)(a9 + 72), v17);
  v25 = *(int32x2_t *)(a1 + 216);
  v26 = vmul_lane_s32(v25, v25, 1).u32[0];
  v27 = v26;
  if (v26)
  {
    v28 = 0;
    v11 = v11;
    v29 = vdiv_f32(vcvt_f32_u32(*a2), (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_u32((uint32x2_t)v25)));
    v55 = v11;
    do
    {
      v30 = *(_QWORD *)(a1 + 184) + 24 * v28;
      v31 = *(_QWORD *)(v30 + 16);
      v65 = *(_OWORD *)v30;
      v66 = v31;
      v32 = vmul_f32(v29, *(float32x2_t *)&v65);
      *(float32x2_t *)&v65 = v32;
      if (v11)
      {
        *(_QWORD *)&v68 = &off_250ADB468;
        sub_239425F30(a7, (uint64_t *)&v68 + 1);
        v33 = vmul_s32(v71, vmovn_s64((int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(vrnda_f32(v32)))));
        v34 = v69;
        v35 = v70 + vadd_s32(vdup_lane_s32(v33, 1), v33).u32[0];
        v36 = *(_BYTE *)(v35 + 2);
        WORD4(v65) = *(_WORD *)v35;
        BYTE10(v65) = v36;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        nullsub_4(&v68);
      }
      if (a11)
      {
        if (sub_239417460((float32x2_t *)&v65, a10, a2, 0.0))
          v39 = 1.0;
        else
          v39 = 0.0;
        *((float *)&v66 + 1) = v39;
      }
      if (v61)
      {
        v40 = 0;
        if (*(float *)(*(_QWORD *)(a5 + 64) + 4 * v28) < *(float *)(a1 + 280))
          goto LABEL_31;
        v41 = *((float *)&v66 + 1);
        if (*((float *)&v66 + 1) != 0.0)
        {
          if (*((float *)&v66 + 1) < 0.0)
            v41 = 0.0 - *((float *)&v66 + 1);
          v42 = v41 > 0.000001;
          v40 = *(_DWORD *)(*(_QWORD *)(a5 + 64) + 4 * v28);
          if (v42)
LABEL_31:
            HIDWORD(v66) = v40;
        }
      }
      if (v62)
      {
        if (*(_BYTE *)(a1 + 265) == 1)
        {
          sub_2396F5A90((float32x4_t *)(*(_QWORD *)(a3 + 64) + 4 * (*(_DWORD *)(a1 + 224) * v28)), (unint64_t)__src[0], *(unsigned int *)(a1 + 224), 128.0);
        }
        else
        {
          if (*(_BYTE *)(a1 + 265))
          {
            sub_239A444D4((uint64_t)"unknown file", 471, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          sub_2396F5754((float32x4_t *)(*(_QWORD *)(a3 + 64) + 4 * (*(_DWORD *)(a1 + 224) * v28)), (uint64_t)__src[0], *(unsigned int *)(a1 + 224), 5.62950094e14);
        }
      }
      v68 = v65;
      v69 = (std::__shared_weak_count *)v66;
      v43 = v64;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, (v64 + 31) & 0x1FFFFFFE0, 0x100BBD03uLL);
      v44 = memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v53 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v53, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v43)
        memcpy(memptr, __src[0], v43);
      v45 = v64;
      if (*v15)
      {
        if (*v15 != v64)
          goto LABEL_16;
        if (*(_QWORD *)(a9 + 32) <= v28)
          goto LABEL_50;
      }
      else
      {
        *v15 = v64;
        if (*(_QWORD *)(a9 + 32) <= v28)
        {
LABEL_50:
          sub_23941C4FC(a9, v28 + 1);
          v46 = *v60;
          v47 = v28 >> 6;
          v49 = *(_QWORD *)(*v60 + 8 * (v28 >> 6));
          v48 = 1 << v28;
LABEL_51:
          *(_QWORD *)(v46 + 8 * v47) = v49 | v48;
          v50 = *(_QWORD *)(a9 + 48) + 24 * v28;
          *(_OWORD *)v50 = v68;
          *(_QWORD *)(v50 + 16) = v69;
          v51 = *(_QWORD *)(a9 + 72) + 24 * v28;
          sub_23941D1E8(v51, v45);
          if ((_DWORD)v45)
            memcpy(*(void **)v51, v44, v45);
          *(_DWORD *)(v51 + 16) = v45;
          ++*(_DWORD *)(a9 + 8);
          v11 = v55;
          goto LABEL_16;
        }
      }
      v46 = *v60;
      v47 = v28 >> 6;
      v48 = 1 << v28;
      v49 = *(_QWORD *)(*v60 + 8 * (v28 >> 6));
      if ((v49 & (1 << v28)) == 0)
        goto LABEL_51;
LABEL_16:
      free(v44);
      ++v28;
    }
    while (v28 != v27);
  }
  free(__src[0]);
}

void sub_239484E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  free(a20);
  sub_239484E80(v27);
  _Unwind_Resume(a1);
}

_QWORD *sub_239484E80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a1[9];
  if (v2)
  {
    v3 = a1[10];
    v4 = (void *)a1[9];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        v3 -= 24;
        free(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[6];
  if (v6)
  {
    a1[7] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[3];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_239484EF8(uint32x2_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int32x2_t *a6@<X5>, unsigned __int8 a7@<W6>, uint64_t a8@<X8>)
{
  int32x2_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint32x2_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float32x2_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  float32x2_t v36;
  float v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  char v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  float v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::bad_alloc *exception;
  std::bad_alloc *v48;
  uint64_t *v50;
  uint32x2_t *v51;
  float v53;
  float32x2_t v54[2];
  char v55;
  __int128 v56;
  unint64_t v57;
  void *__p[3];
  void *memptr;
  __int128 v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  sub_2394819E0(a2, a3, __p);
  v15 = sub_239481900(a2, a3);
  v14.i32[0] = HIDWORD(v15);
  *(_OWORD *)a8 = xmmword_239EC65B0;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  v16 = vmul_s32(vdup_n_s32(v15), v14).u32[0];
  v50 = (uint64_t *)(a8 + 24);
  sub_2394187EC(a8 + 24, v16);
  v17 = *(_BYTE **)(a8 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a8 + 64) - (_QWORD)v17) >> 3) < v16)
  {
    v18 = *(_BYTE **)(a8 + 56);
    v19 = (char *)operator new(24 * v16);
    v20 = &v19[24 * ((v18 - v17) / 24)];
    v21 = v20;
    if (v18 != v17)
    {
      v22 = &v19[24 * ((v18 - v17) / 24)];
      do
      {
        v21 = v22 - 24;
        v23 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v22 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v22 - 24) = v23;
        v18 -= 24;
        v22 -= 24;
      }
      while (v18 != v17);
    }
    *(_QWORD *)(a8 + 48) = v21;
    *(_QWORD *)(a8 + 56) = v20;
    *(_QWORD *)(a8 + 64) = &v19[24 * v16];
    if (v17)
      operator delete(v17);
  }
  sub_2394188EC((char **)(a8 + 72), v16);
  v56 = 0uLL;
  v57 = 0xBF80000000000000;
  v24 = *a1;
  v54[0].i8[0] = 0;
  v55 = 0;
  v26 = a7;
  v25 = a7 == 0;
  v27 = (uint64_t)a6;
  if (!v25)
  {
    v55 = 1;
    sub_23949A0FC(a1, a6, (float *)v54, 0, 0, 8u);
    if (!v55)
      sub_2394875CC();
    v54[0] = vmul_f32(v54[0], vcvt_f32_u32(*a1));
  }
  v51 = a1;
  if ((_DWORD)v16)
  {
    v28 = 0;
    v29 = vdiv_f32(vcvt_f32_u32(v24), vcvt_f32_u32((uint32x2_t)__PAIR64__(v15, HIDWORD(v15))));
    while (1)
    {
      v34 = (char *)__p[0] + 24 * v28;
      v35 = *((_QWORD *)v34 + 2);
      v56 = *(_OWORD *)v34;
      v57 = v35;
      v36 = vmul_f32(v29, *(float32x2_t *)&v56);
      *(float32x2_t *)&v56 = v36;
      if (v55)
      {
        v36 = vdiv_f32(vsub_f32(v36, v54[0]), v54[1]);
        *(float32x2_t *)&v56 = v36;
      }
      v37 = v36.f32[1];
      if (a5)
      {
        v53 = v36.f32[0];
        *(_QWORD *)&v60 = &off_250ADB468;
        sub_239425F30(a4, (uint64_t *)&v60 + 1);
        v38 = v61;
        v39 = v62 + v63 * vcvtas_u32_f32(v53) + v64 * vcvtas_u32_f32(v37);
        v40 = *(_BYTE *)(v39 + 2);
        WORD4(v56) = *(_WORD *)v39;
        BYTE10(v56) = v40;
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        nullsub_4(&v60);
      }
      if (v26)
      {
        if (sub_239417460((float32x2_t *)&v56, v27, v51, 0.0))
          v43 = 1.0;
        else
          v43 = 0.0;
        *((float *)&v57 + 1) = v43;
      }
      v60 = v56;
      v61 = (std::__shared_weak_count *)v57;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0, 0x100BBD03uLL);
      v44 = memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v48 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v48, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if (*(_DWORD *)(a8 + 16))
        goto LABEL_13;
      *(_DWORD *)(a8 + 16) = 0;
      if (*(_QWORD *)(a8 + 32) <= v28)
        break;
      v30 = *v50;
      v31 = v28 >> 6;
      v32 = 1 << v28;
      v33 = *(_QWORD *)(*v50 + 8 * (v28 >> 6));
      if ((v33 & (1 << v28)) == 0)
        goto LABEL_32;
LABEL_13:
      free(v44);
      if (++v28 == v16)
        goto LABEL_33;
    }
    sub_23941C4FC(a8, v28 + 1);
    v30 = *v50;
    v31 = v28 >> 6;
    v33 = *(_QWORD *)(*v50 + 8 * (v28 >> 6));
    v32 = 1 << v28;
LABEL_32:
    *(_QWORD *)(v30 + 8 * v31) = v33 | v32;
    v45 = *(_QWORD *)(a8 + 48) + 24 * v28;
    *(_OWORD *)v45 = v60;
    *(_QWORD *)(v45 + 16) = v61;
    v46 = *(_QWORD *)(a8 + 72) + 24 * v28;
    sub_23941D1E8(v46, 0);
    *(_DWORD *)(v46 + 16) = 0;
    ++*(_DWORD *)(a8 + 8);
    v27 = (uint64_t)a6;
    goto LABEL_13;
  }
LABEL_33:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_239485378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394853E0(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v48;
  char v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  uint64_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;

  v18 = a10;
  v19 = a9;
  v20 = a14;
  v21 = a12;
  v65 = *MEMORY[0x24BDAC8D0];
  v60 = a8;
  v59[0] = a11;
  v59[1] = a12;
  v58[0] = a13;
  v58[1] = a14;
  v57[0] = a15;
  v57[1] = a16;
  v56[0] = a17;
  v56[1] = a18;
  if (*(_DWORD *)(a2 + 56) != *(_DWORD *)(a3 + 56))
    sub_239EBF4DC();
  v22 = a8;
  v53 = a16;
  v48 = a18;
  v26 = BYTE4(a8);
  v27 = a1[7];
  if (v27 && (!BYTE4(a8) || !a10))
  {
    std::mutex::lock((std::mutex *)(v27 + 224));
    *(_QWORD *)(v27 + 208) = 0;
    *(_QWORD *)(v27 + 216) = 0;
    sub_239467C88(v27);
    std::mutex::unlock((std::mutex *)(v27 + 224));
    v26 = BYTE4(v60);
    v22 = v60;
    v18 = a10;
    v19 = a9;
  }
  v28 = operator new(0x28uLL);
  *v28 = &off_250ADC6A8;
  v28[1] = a1;
  v28[2] = &v60;
  v28[3] = &a9;
  v62 = v28;
  if (v26)
    v29 = v22;
  else
    v29 = 0;
  if (v18)
    v30 = v19;
  else
    v30 = 1;
  v54 = v30;
  v55 = v29;
  v31 = operator new(0x28uLL);
  *v31 = &off_250ADC6F0;
  v31[1] = &v55;
  v31[2] = a2;
  v31[3] = &v54;
  v31[4] = a3;
  v64 = v31;
  sub_23948A8D4(v63, a1 + 11);
  v32 = v64;
  if (v64 == v63)
  {
    v33 = 4;
    v32 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_17;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_17:
  v34 = (_QWORD *)a1[18];
  a1[18] = 0;
  if (v34 == a1 + 15)
  {
    v35 = 4;
    v34 = a1 + 15;
    goto LABEL_21;
  }
  if (v34)
  {
    v35 = 5;
LABEL_21:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  if (v21 && v20)
  {
    v36 = operator new(0x28uLL);
    *v36 = &off_250ADC770;
    v36[1] = &v55;
    v36[2] = v59;
    v36[3] = &v54;
    v36[4] = v58;
    v64 = v36;
    sub_239467AE8(v63, a1 + 15);
    v37 = v64;
    if (v64 == v63)
    {
      v38 = 4;
      v37 = v63;
    }
    else
    {
      if (!v64)
        goto LABEL_29;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
LABEL_29:
  v39 = (_QWORD *)a1[22];
  a1[22] = 0;
  if (v39 == a1 + 19)
  {
    v40 = 4;
    v39 = a1 + 19;
    goto LABEL_33;
  }
  if (v39)
  {
    v40 = 5;
LABEL_33:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  if (v53 && v48)
  {
    v41 = operator new(0x28uLL);
    *v41 = &off_250ADC7B8;
    v41[1] = &v55;
    v41[2] = v57;
    v41[3] = &v54;
    v41[4] = v56;
    v64 = v41;
    sub_23948AB98(v63, a1 + 19);
    v42 = v64;
    if (v64 == v63)
    {
      v43 = 4;
      v42 = v63;
    }
    else
    {
      if (!v64)
        goto LABEL_41;
      v43 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
LABEL_41:
  v44 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 32))(a1, v55, v54, a4, a5, a6, a7);
  if (!v62)
    sub_2394172E0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v62 + 48))(v62);
  v45 = v62;
  if (v62 == v61)
  {
    v46 = 4;
    v45 = v61;
    goto LABEL_46;
  }
  if (v62)
  {
    v46 = 5;
LABEL_46:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  return v44;
}

void sub_239485784(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239485798(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_2394857AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_2394857C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_2394857D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_2394857EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t sub_239485804(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x2_t *a9, char a10, float32x2_t *a11, char a12, _OWORD *a13, char a14, _OWORD *a15, char a16)
{
  uint64_t v16;
  uint64_t v24;
  float32x2_t *v25;
  float32x2_t *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char *v30;
  void **v31;
  char *v32;
  void *v33;
  void *v34;
  void *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char *v40;
  void **v41;
  char *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  float *v48;
  float *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  float *v55;
  float v56;
  uint64_t v57;
  BOOL v58;
  float32x2_t v59;
  char *v60;
  char *v61;
  void *v62;
  void *v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint32x2_t *v80;
  float32x2_t *v81;
  uint32x2_t *v82;
  float32x2_t *v83;
  __int128 v84;
  char v85;
  __int128 v86;
  char v87;
  uint32x2_t v88;
  float32x2_t v89;
  void *v90;
  float *v91;
  uint64_t v92;
  __int128 v93;
  void *v94[2];
  __int128 v95;
  void *v96[2];
  void *v97[2];
  __int128 v98;
  void *v99[2];
  void *__p[2];
  __int128 v101;
  void *v102[2];
  void *v103[4];
  _OWORD v104[2];
  char v105;
  char v106;
  _BYTE v107[56];
  _OWORD v108[2];
  char v109;
  char v110;
  _BYTE v111[56];
  _OWORD v112[2];
  char v113;
  char v114;
  _BYTE v115[56];
  _OWORD v116[2];
  char v117;
  char v118;
  _BYTE v119[56];
  uint64_t v120;
  std::__shared_weak_count *v121;
  int32x4_t *v122;
  std::__shared_weak_count *v123;
  float32x2_t *v124;
  std::__shared_weak_count *v125;
  float32x2_t *v126;
  std::__shared_weak_count *v127;

  if (*(_DWORD *)(a1 + 272) == 1)
    return 0;
  v126 = 0;
  v127 = 0;
  v124 = 0;
  v125 = 0;
  v122 = 0;
  v123 = 0;
  v120 = 0;
  v121 = 0;
  if (sub_239482E54((uint32x2_t *)a1, a2, &v126, (uint64_t *)&v122, a4, a9, a10, a8, a13, a14)
    && sub_239482E54((uint32x2_t *)a1, a3, &v124, &v120, a4, a11, a12, v24, a15, a16))
  {
    kdebug_trace();
    v25 = v126;
    v26 = v124;
    v82 = (uint32x2_t *)&v126[26];
    if (v124->i32[1] * v126->i32[0] != *(_DWORD *)(a1 + 220) * *(_DWORD *)(a1 + 216))
    {
      sub_239A444D4((uint64_t)"unknown file", 631, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (v126[1].i32[0] != *(_DWORD *)(a1 + 224))
    {
      sub_239A444D4((uint64_t)"unknown file", 633, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    LODWORD(v104[0]) = 0;
    v118 = 0;
    memset(v116, 0, sizeof(v116));
    v117 = 0;
    v112[0] = 0uLL;
    v108[0] = 0uLL;
    sub_23948C444((uint64_t)v119, (unsigned int *)v108, (unint64_t *)v112, 1, v104, 1, 0);
    LODWORD(v99[0]) = 0;
    v114 = 0;
    memset(v112, 0, sizeof(v112));
    v113 = 0;
    v108[0] = 0uLL;
    v104[0] = 0uLL;
    sub_23948C444((uint64_t)v115, (unsigned int *)v104, (unint64_t *)v108, 1, v99, 1, 0);
    LODWORD(v93) = 0;
    v110 = 0;
    memset(v108, 0, sizeof(v108));
    v109 = 0;
    v104[0] = 0uLL;
    v99[0] = 0;
    v99[1] = 0;
    sub_23948C444((uint64_t)v111, (unsigned int *)v99, (unint64_t *)v104, 1, &v93, 1, 0);
    LODWORD(v90) = 0;
    v106 = 0;
    memset(v104, 0, sizeof(v104));
    v105 = 0;
    v99[0] = 0;
    v99[1] = 0;
    v93 = 0uLL;
    sub_23948C444((uint64_t)v107, (unsigned int *)&v93, (unint64_t *)v99, 1, &v90, 1, 0);
    sub_23948EB40(*(uint64_t **)(a1 + 16), (uint64_t)v25, (uint64_t)v26, (uint64_t)v116, (uint64_t)v112, (uint64_t)v108, (uint64_t)v104);
    kdebug_trace();
    kdebug_trace();
    v83 = v26;
    v27 = (uint64_t)&v25[14];
    v81 = v25;
    if (!v25[25].i8[0])
      v27 = 0;
    sub_239484838(a1, v82, (uint64_t)v116, 1u, (uint64_t)v108, 1u, 0, 0, (uint64_t)v99, v27, v25[25].i8[0]);
    *(_OWORD *)a5 = *(_OWORD *)v99;
    *(void **)(a5 + 16) = __p[0];
    v28 = *(void **)(a5 + 24);
    if (v28)
    {
      operator delete(v28);
      *(_QWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 32) = 0;
      *(_QWORD *)(a5 + 40) = 0;
    }
    v29 = *(void **)(a5 + 48);
    *(void **)(a5 + 24) = __p[1];
    *(_OWORD *)(a5 + 32) = v101;
    v101 = 0uLL;
    __p[1] = 0;
    if (v29)
    {
      *(_QWORD *)(a5 + 56) = v29;
      operator delete(v29);
      *(_QWORD *)(a5 + 48) = 0;
      *(_QWORD *)(a5 + 56) = 0;
      *(_QWORD *)(a5 + 64) = 0;
    }
    v31 = (void **)(a5 + 72);
    v30 = *(char **)(a5 + 72);
    *(_OWORD *)(a5 + 48) = *(_OWORD *)v102;
    *(void **)(a5 + 64) = v103[0];
    v102[1] = 0;
    v103[0] = 0;
    v102[0] = 0;
    if (v30)
    {
      v32 = *(char **)(a5 + 80);
      v33 = v30;
      if (v32 != v30)
      {
        do
        {
          v34 = (void *)*((_QWORD *)v32 - 3);
          v32 -= 24;
          free(v34);
        }
        while (v32 != v30);
        v33 = *v31;
      }
      *(_QWORD *)(a5 + 80) = v30;
      operator delete(v33);
      *v31 = 0;
      *(_QWORD *)(a5 + 80) = 0;
      *(_QWORD *)(a5 + 88) = 0;
      v35 = v102[0];
    }
    else
    {
      v35 = 0;
    }
    *(_OWORD *)(a5 + 72) = *(_OWORD *)&v103[1];
    *(void **)(a5 + 88) = v103[3];
    memset(&v103[1], 0, 24);
    if (v35)
    {
      v102[1] = v35;
      operator delete(v35);
    }
    if (__p[1])
      operator delete(__p[1]);
    v37 = (uint64_t)&v83[14];
    if (!v83[25].i8[0])
      v37 = 0;
    v80 = (uint32x2_t *)&v83[26];
    sub_239484838(a1, (uint32x2_t *)&v83[26], (uint64_t)v112, 1u, (uint64_t)v104, 1u, 0, 0, (uint64_t)v99, v37, v83[25].i8[0]);
    *(_OWORD *)a6 = *(_OWORD *)v99;
    *(void **)(a6 + 16) = __p[0];
    v38 = *(void **)(a6 + 24);
    if (v38)
    {
      operator delete(v38);
      *(_QWORD *)(a6 + 24) = 0;
      *(_QWORD *)(a6 + 32) = 0;
      *(_QWORD *)(a6 + 40) = 0;
    }
    v39 = *(void **)(a6 + 48);
    *(void **)(a6 + 24) = __p[1];
    *(_OWORD *)(a6 + 32) = v101;
    v101 = 0uLL;
    __p[1] = 0;
    if (v39)
    {
      *(_QWORD *)(a6 + 56) = v39;
      operator delete(v39);
      *(_QWORD *)(a6 + 48) = 0;
      *(_QWORD *)(a6 + 56) = 0;
      *(_QWORD *)(a6 + 64) = 0;
    }
    v41 = (void **)(a6 + 72);
    v40 = *(char **)(a6 + 72);
    *(_OWORD *)(a6 + 48) = *(_OWORD *)v102;
    *(void **)(a6 + 64) = v103[0];
    v102[1] = 0;
    v103[0] = 0;
    v102[0] = 0;
    if (v40)
    {
      v42 = *(char **)(a6 + 80);
      v43 = v40;
      if (v42 != v40)
      {
        do
        {
          v44 = (void *)*((_QWORD *)v42 - 3);
          v42 -= 24;
          free(v44);
        }
        while (v42 != v40);
        v43 = *v41;
      }
      *(_QWORD *)(a6 + 80) = v40;
      operator delete(v43);
      *v41 = 0;
      *(_QWORD *)(a6 + 80) = 0;
      *(_QWORD *)(a6 + 88) = 0;
      v45 = v102[0];
    }
    else
    {
      v45 = 0;
    }
    *(_OWORD *)(a6 + 72) = *(_OWORD *)&v103[1];
    *(void **)(a6 + 88) = v103[3];
    memset(&v103[1], 0, 24);
    if (v45)
    {
      v102[1] = v45;
      operator delete(v45);
    }
    if (__p[1])
      operator delete(__p[1]);
    kdebug_trace();
    kdebug_trace();
    v46 = *(void **)a7;
    if (*(_QWORD *)a7)
    {
      *(_QWORD *)(a7 + 8) = v46;
      operator delete(v46);
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
    }
    *(_QWORD *)(a7 + 16) = 0;
    *(_OWORD *)a7 = 0u;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, float, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a5, a6, a7, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a4, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0);
    sub_2394863EC((_DWORD *)a1, a7);
    if (v81[29].i8[0])
      sub_239481578((_QWORD *)a5, v82, v81 + 27, 0);
    if (v83[29].i8[0])
      sub_239481578((_QWORD *)a6, v80, v83 + 27, 0);
    kdebug_trace();
    if (*(_DWORD *)(a1 + 272) == 2)
    {
      kdebug_trace();
      v99[0] = 0;
      v99[1] = 0;
      __p[0] = 0;
      sub_239483874(v122, v120, a7, (float **)v99);
      v47 = *(_QWORD *)(a7 + 8);
      v48 = (float *)v99[0];
      v49 = (float *)v99[1];
      if (*(_QWORD *)a7 != v47 || v99[0] != v99[1])
      {
        v51 = *(_QWORD *)(a6 + 24);
        v50 = *(_QWORD *)(a6 + 32);
        v52 = *(_QWORD *)a7 + 12;
        v53 = *(_QWORD *)(a6 + 48);
        while (1)
        {
          v54 = *(unsigned int *)(v52 - 8);
          if (v50 <= v54 || ((*(_QWORD *)(v51 + ((v54 >> 3) & 0x1FFFFFF8)) >> v54) & 1) == 0)
          {
            sub_239A444D4((uint64_t)"unknown file", 117, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v55 = (float *)(v53 + 24 * v54);
          v56 = v55[1];
          *v55 = *v48 + *v55;
          v55[1] = v48[1] + v56;
          v48 += 2;
          v57 = v52 + 12;
          v58 = v52 == v47;
          v52 += 12;
          if (v58)
          {
            v52 = v57;
            if (v48 == v49)
              break;
          }
        }
      }
      kdebug_trace();
      if (v99[0])
      {
        v99[1] = v99[0];
        operator delete(v99[0]);
      }
    }
    if (*(_QWORD *)(a1 + 144))
    {
      kdebug_trace();
      *(_OWORD *)v99 = xmmword_239EC65B0;
      *(_OWORD *)__p = 0u;
      v101 = 0u;
      *(_OWORD *)v102 = 0u;
      memset(v103, 0, sizeof(v103));
      v93 = xmmword_239EC65B0;
      *(_OWORD *)v94 = 0u;
      v95 = 0u;
      *(_OWORD *)v96 = 0u;
      *(_OWORD *)v97 = 0u;
      v98 = 0u;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v59 = v81[26];
      v88 = *v80;
      v89 = v59;
      LOBYTE(v86) = 0;
      v87 = 0;
      if (v81[29].i8[0])
      {
        v86 = *(_OWORD *)v81[27].f32;
        v87 = 1;
      }
      LOBYTE(v84) = 0;
      v85 = 0;
      if (v83[29].i8[0])
      {
        v84 = *(_OWORD *)v83[27].f32;
        v85 = 1;
      }
      if (sub_2394868F4(a1, a2, a3, (uint64_t *)a7, (unsigned int *)&v89, (unsigned int *)&v88, a4, v99, &v93, &v90, (uint64_t)&v86, (uint64_t)&v84))
      {
        sub_239488940(a5, (__int128 *)v99);
        sub_239488940(a6, &v93);
        if (&v90 != (void **)a7)
          sub_23948D4FC(a7, (unint64_t)v90, v91, 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (_BYTE *)v90) >> 2));
      }
      kdebug_trace();
      if (v90)
      {
        v91 = (float *)v90;
        operator delete(v90);
      }
      v60 = (char *)v97[1];
      if (v97[1])
      {
        v61 = (char *)v98;
        v62 = v97[1];
        if ((void *)v98 != v97[1])
        {
          do
          {
            v63 = (void *)*((_QWORD *)v61 - 3);
            v61 -= 24;
            free(v63);
          }
          while (v61 != v60);
          v62 = v97[1];
        }
        *(_QWORD *)&v98 = v60;
        operator delete(v62);
      }
      if (v96[0])
      {
        v96[1] = v96[0];
        operator delete(v96[0]);
      }
      if (v94[1])
        operator delete(v94[1]);
      v64 = (char *)v103[1];
      if (v103[1])
      {
        v65 = (char *)v103[2];
        v66 = v103[1];
        if (v103[2] != v103[1])
        {
          do
          {
            v67 = (void *)*((_QWORD *)v65 - 3);
            v65 -= 24;
            free(v67);
          }
          while (v65 != v64);
          v66 = v103[1];
        }
        v103[2] = v64;
        operator delete(v66);
      }
      if (v102[0])
      {
        v102[1] = v102[0];
        operator delete(v102[0]);
      }
      if (__p[1])
        operator delete(__p[1]);
    }
    sub_239916980((uint64_t)v107);
    sub_239916980((uint64_t)v111);
    sub_239916980((uint64_t)v115);
    sub_239916980((uint64_t)v119);
    v16 = 1;
    v36 = v121;
    if (!v121)
      goto LABEL_91;
    goto LABEL_87;
  }
  v16 = 0;
  v36 = v121;
  if (v121)
  {
LABEL_87:
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_91:
  v70 = v123;
  if (v123)
  {
    v71 = (unint64_t *)&v123->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v125;
  if (v125)
  {
    v74 = (unint64_t *)&v125->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v127;
  if (v127)
  {
    v77 = (unint64_t *)&v127->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  return v16;
}

void sub_2394862FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  uint64_t v50;

  if (__p)
    operator delete(__p);
  sub_239916980(a18);
  sub_239916980(a19);
  sub_239916980(a20);
  sub_239916980(a21);
  sub_239416DA0(v50 - 160);
  sub_239416DA0(v50 - 144);
  sub_239416DA0(v50 - 128);
  sub_239416DA0(v50 - 112);
  _Unwind_Resume(a1);
}

void sub_2394863EC(_DWORD *a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int i;
  unsigned int v11;
  uint64_t v12;
  int v13;
  float v14;
  unsigned int v15;
  uint64_t j;
  float v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *__p;
  char *v47;
  char *v48;
  void *v49[2];
  void *v50[2];
  int v51;

  if (a1[71] < 2u)
    return;
  v4 = a1[54] * a1[55];
  if (v4)
  {
    v5 = operator new(4 * (a1[54] * a1[55]));
    memset_pattern16(v5, &unk_239EC6A70, 4 * v4);
    v7 = *(unsigned int **)a2;
    v6 = *(unsigned int **)(a2 + 8);
    if (*(unsigned int **)a2 == v6)
      goto LABEL_10;
  }
  else
  {
    v5 = 0;
    v7 = *(unsigned int **)a2;
    v6 = *(unsigned int **)(a2 + 8);
    if (*(unsigned int **)a2 == v6)
      goto LABEL_10;
  }
  v8 = v7;
  do
  {
    v9 = *v8;
    if (v9 < v4)
      *((_DWORD *)v5 + v9) = v8[2];
    v8 += 3;
  }
  while (v8 != v6);
LABEL_10:
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)v50 = 0u;
  v51 = 1065353216;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v11 = a1[55];
      v12 = a1[71];
      if (!(i / v11 % v12) && !(i % v11 % v12))
      {
        LODWORD(__p) = i;
        if ((_DWORD)v12)
        {
          v13 = 0;
          v14 = -1.0;
          v15 = i;
          do
          {
            for (j = 0; j != v12; ++j)
            {
              if (v15 + j < v4)
              {
                v17 = *((float *)v5 + v15 + j);
                if (v17 > v14)
                {
                  LODWORD(__p) = v15 + j;
                  v14 = v17;
                }
              }
            }
            ++v13;
            v15 += v11;
          }
          while (v13 != (_DWORD)v12);
          if (v14 > -1.0)
            sub_239456168((uint64_t)v49, (unsigned int *)&__p, &__p);
        }
      }
    }
    v7 = *(unsigned int **)a2;
    v6 = *(unsigned int **)(a2 + 8);
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  v18 = (char *)v6 - (char *)v7;
  if (v6 == v7)
  {
    v20 = 0;
  }
  else
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 2);
    if (v19 > 0x1555555555555555)
      sub_2394189F8();
    v20 = (char *)operator new(v18);
    __p = v20;
    v47 = v20;
    v48 = &v20[12 * v19];
    if (v6 != v7)
    {
      v21 = (int8x8_t)v49[1];
      if (v49[1])
      {
LABEL_34:
        v22 = *v7;
        v23 = (uint8x8_t)vcnt_s8(v21);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          v24 = *v7;
          if (*(_QWORD *)&v21 <= v22)
            v24 = v22 % *(_QWORD *)&v21;
        }
        else
        {
          v24 = (v21.i32[0] - 1) & v22;
        }
        v25 = (uint64_t **)*((_QWORD *)v49[0] + v24);
        if (v25)
        {
          v26 = *v25;
          if (v26)
          {
            if (v23.u32[0] < 2uLL)
            {
              v27 = *(_QWORD *)&v21 - 1;
              while (1)
              {
                v29 = v26[1];
                if (v29 == v22)
                {
                  if (*((_DWORD *)v26 + 4) == (_DWORD)v22)
                    goto LABEL_54;
                }
                else if ((v29 & v27) != v24)
                {
                  goto LABEL_72;
                }
                v26 = (uint64_t *)*v26;
                if (!v26)
                  goto LABEL_72;
              }
            }
            do
            {
              v28 = v26[1];
              if (v28 == v22)
              {
                if (*((_DWORD *)v26 + 4) == (_DWORD)v22)
                {
LABEL_54:
                  if (v20 >= v48)
                  {
                    v32 = (char *)__p;
                    v33 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)__p) >> 2);
                    v34 = v33 + 1;
                    if (v33 + 1 > 0x1555555555555555)
                      sub_2394189F8();
                    if (0x5555555555555556 * ((v48 - (_BYTE *)__p) >> 2) > v34)
                      v34 = 0x5555555555555556 * ((v48 - (_BYTE *)__p) >> 2);
                    if (0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                      v35 = 0x1555555555555555;
                    else
                      v35 = v34;
                    if (v35)
                    {
                      if (v35 > 0x1555555555555555)
                        sub_239418A80();
                      v36 = (char *)operator new(12 * v35);
                    }
                    else
                    {
                      v36 = 0;
                    }
                    v37 = *(_QWORD *)v7;
                    v38 = &v36[12 * v33];
                    *((_DWORD *)v38 + 2) = v7[2];
                    *(_QWORD *)v38 = v37;
                    v39 = v38;
                    if (v20 != v32)
                    {
                      do
                      {
                        v40 = *(_QWORD *)(v20 - 12);
                        v20 -= 12;
                        v41 = *((_DWORD *)v20 + 2);
                        *(_QWORD *)(v39 - 12) = v40;
                        v39 -= 12;
                        *((_DWORD *)v39 + 2) = v41;
                      }
                      while (v20 != v32);
                      v20 = (char *)__p;
                    }
                    v31 = v38 + 12;
                    __p = v39;
                    v47 = v38 + 12;
                    v48 = &v36[12 * v35];
                    if (v20)
                      operator delete(v20);
                  }
                  else
                  {
                    v30 = *(_QWORD *)v7;
                    *((_DWORD *)v20 + 2) = v7[2];
                    *(_QWORD *)v20 = v30;
                    v31 = v20 + 12;
                  }
                  v47 = v31;
                  v20 = v31;
                  break;
                }
              }
              else
              {
                if (v28 >= *(_QWORD *)&v21)
                  v28 %= *(_QWORD *)&v21;
                if (v28 != v24)
                  break;
              }
              v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
        }
LABEL_72:
        while (1)
        {
          v7 += 3;
          if (v7 == v6)
            break;
          v21 = (int8x8_t)v49[1];
          if (v49[1])
            goto LABEL_34;
        }
        v42 = (char *)__p;
        if (&__p == (void **)a2)
          goto LABEL_77;
        goto LABEL_76;
      }
    }
  }
  v42 = v20;
  if (&__p != (void **)a2)
  {
LABEL_76:
    sub_23948D4FC(a2, (unint64_t)v42, (float *)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - v42) >> 2));
    v42 = (char *)__p;
  }
LABEL_77:
  if (v42)
  {
    v47 = v42;
    operator delete(v42);
  }
  v43 = v50[0];
  if (v50[0])
  {
    do
    {
      v44 = (_QWORD *)*v43;
      operator delete(v43);
      v43 = v44;
    }
    while (v44);
  }
  v45 = v49[0];
  v49[0] = 0;
  if (v45)
    operator delete(v45);
  if (v5)
    operator delete(v5);
}

void sub_239486894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  if (__p)
  {
    operator delete(__p);
    sub_239420950((uint64_t)&a13);
    if (!v13)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_239420950((uint64_t)&a13);
    if (!v13)
      goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_2394868F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5, unsigned int *a6, char a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v31;
  char v32;
  __int128 v33;
  char v34;
  _QWORD v35[2];
  char v36;
  char v37;
  _QWORD v38[5];
  __int128 *v39;
  std::__shared_weak_count *v40;
  __int128 *v41;
  std::__shared_weak_count *v42;
  char v43;
  uint64_t v44;
  unint64_t v45;

  v13 = *(_QWORD *)(a1 + 144);
  if (!v13)
    return 0;
  v35[0] = a2;
  (*(void (**)(__int128 **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(&v41, v13, v35);
  if (v41)
  {
    v35[0] = a3;
    v20 = *(_QWORD *)(a1 + 144);
    if (!v20)
      sub_2394172E0();
    (*(void (**)(__int128 **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v20 + 48))(&v39, v20, v35);
    if (v39)
    {
      sub_239488940((uint64_t)a8, v41);
      sub_239488940((uint64_t)a9, v39);
      v43 = 0;
      v37 = 0;
      v35[0] = 0;
      v35[1] = 0;
      v36 = 0;
      v44 = 0;
      v45 = 0;
      sub_2394604BC(v38, &v44, &v45, 1, (void **)&v43, 1, 0);
      v22 = *(_DWORD *)(a1 + 216);
      v21 = *(_DWORD *)(a1 + 220);
      LOBYTE(v33) = 0;
      v34 = 0;
      if (*(_BYTE *)(a11 + 16))
      {
        v33 = *(_OWORD *)a11;
        v34 = 1;
      }
      LOBYTE(v31) = 0;
      v32 = 0;
      if (*(_BYTE *)(a12 + 16))
      {
        v31 = *(_OWORD *)a12;
        v32 = 1;
      }
      if ((sub_239481FF8(a8, a9, a4, v21, v22, a7, a5, a6, (uint64_t)v35, &v33, &v31) & 1) != 0)
      {
        a10[1] = *a10;
        v23 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, float))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a8, a9, 0.0);
      }
      else
      {
        v23 = 0;
      }
      sub_239916980((uint64_t)v38);
      v24 = v40;
      if (!v40)
        goto LABEL_21;
      goto LABEL_17;
    }
    v23 = 0;
    v24 = v40;
    if (v40)
    {
LABEL_17:
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v23 = 0;
  }
LABEL_21:
  v27 = v42;
  if (v42)
  {
    v28 = (unint64_t *)&v42->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v23;
}

void sub_239486B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1 - 136);
  sub_239416DA0(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_239486BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_239486BB8(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  unsigned __int8 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v27 = a2;
  v5 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  ++*(_QWORD *)(a1 + 208);
  v26 = 0uLL;
  if (sub_23946A940(a1, &v27, &v26))
  {
    ++*(_QWORD *)(a1 + 216);
    *(_OWORD *)a3 = v26;
    v26 = 0uLL;
    goto LABEL_32;
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_32;
  }
  v22[0] = v27;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(&v25, v6, v22);
  if ((_QWORD)v25)
  {
    sub_23948926C(a1, &v27, (uint64_t *)&v25, (uint64_t)v22);
    v7 = v24;
    if (!v24)
      goto LABEL_19;
    v8 = *(_QWORD *)(a1 + 200);
    if (v8 && (v9 = v22[0], v22[0] != v27))
    {
      v21[0] = v22[1];
      v21[1] = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v8 = *(_QWORD *)(a1 + 200);
        v28 = v9;
        if (!v8)
          sub_2394172E0();
      }
      else
      {
        v28 = v22[0];
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v21, &v28);
      sub_239416DA0((uint64_t)v21);
      v7 = v24;
      if (!v24)
      {
LABEL_19:
        *(_OWORD *)a3 = v25;
        v25 = 0uLL;
        if (!v7)
          goto LABEL_27;
LABEL_22:
        v12 = v23;
        if (v23)
        {
          v13 = (unint64_t *)&v23->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_27;
      }
    }
    else
    {
      v7 = 1;
    }
    if (v22[0] == v27)
      goto LABEL_19;
    sub_239489654(a1, &v27, a3);
    if (v24)
      goto LABEL_22;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
LABEL_27:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_32:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::mutex::unlock(v5);
}

void sub_239486DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_23946B010((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_239486E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::mutex *v9;
  va_list va;

  va_start(va, a9);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_239486E5C(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  unsigned __int8 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v27 = a2;
  v5 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  ++*(_QWORD *)(a1 + 208);
  v26 = 0uLL;
  if (sub_23946A940(a1, &v27, &v26))
  {
    ++*(_QWORD *)(a1 + 216);
    *(_OWORD *)a3 = v26;
    v26 = 0uLL;
    goto LABEL_32;
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_32;
  }
  v22[0] = v27;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(&v25, v6, v22);
  if ((_QWORD)v25)
  {
    sub_23948D87C(a1, &v27, (uint64_t *)&v25, (uint64_t)v22);
    v7 = v24;
    if (!v24)
      goto LABEL_19;
    v8 = *(_QWORD *)(a1 + 200);
    if (v8 && (v9 = v22[0], v22[0] != v27))
    {
      v21[0] = v22[1];
      v21[1] = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v8 = *(_QWORD *)(a1 + 200);
        v28 = v9;
        if (!v8)
          sub_2394172E0();
      }
      else
      {
        v28 = v22[0];
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v21, &v28);
      sub_239416DA0((uint64_t)v21);
      v7 = v24;
      if (!v24)
      {
LABEL_19:
        *(_OWORD *)a3 = v25;
        v25 = 0uLL;
        if (!v7)
          goto LABEL_27;
LABEL_22:
        v12 = v23;
        if (v23)
        {
          v13 = (unint64_t *)&v23->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_27;
      }
    }
    else
    {
      v7 = 1;
    }
    if (v22[0] == v27)
      goto LABEL_19;
    sub_23948DC64(a1, &v27, a3);
    if (v24)
      goto LABEL_22;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
LABEL_27:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_32:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::mutex::unlock(v5);
}

void sub_23948709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_23946B010((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_2394870E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::mutex *v9;
  va_list va;

  va_start(va, a9);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239487100(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;

  v4 = *(unsigned __int8 *)(a1 + 88);
  v5 = (_QWORD *)(a1 + 8);
  if (v4)
  {
    sub_2398263BC(v5, a2 + 8);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  }
  else
  {
    *(_QWORD *)a1 = &off_250ADB628;
    sub_23982619C((uint64_t)v5, a2 + 8);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return a1;
}

void sub_239487174(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239487188(uint64_t a1)
{
  *(_QWORD *)a1 = &off_250ADB628;
  sub_239422F30((_WORD *)(a1 + 8));
  return a1;
}

void sub_2394871BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1);
  _Unwind_Resume(a1);
}

__n128 sub_2394871D0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(_BYTE *)(a1 + 88))
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    result = *(__n128 *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 40) = v9;
    *(__n128 *)(a1 + 24) = result;
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  }
  else
  {
    *(_QWORD *)a1 = &off_250ADB628;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    result = *(__n128 *)(a2 + 24);
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v12;
    *(_OWORD *)(a1 + 40) = v11;
    *(__n128 *)(a1 + 24) = result;
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

BOOL sub_2394872CC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;

  v22 = a3;
  v3 = *a2;
  if (*a2)
  {
    v6 = (std::mutex *)(a1 + 224);
    std::mutex::lock((std::mutex *)(a1 + 224));
    sub_23948926C(a1, &v22, a2, (uint64_t)v19);
    if (v21)
    {
      v7 = *(_QWORD *)(a1 + 200);
      if (v7)
      {
        v17 = v19[1];
        v18 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          v7 = *(_QWORD *)(a1 + 200);
          v23 = v19[0];
          if (!v7)
            sub_2394172E0();
        }
        else
        {
          v23 = v19[0];
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v17, &v23);
        v10 = v18;
        if (v18)
        {
          v11 = (unint64_t *)&v18->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      if (v21)
      {
        v13 = v20;
        if (v20)
        {
          v14 = (unint64_t *)&v20->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
    }
    std::mutex::unlock(v6);
  }
  return v3 != 0;
}

void sub_239487414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  sub_239416DA0((uint64_t)&a9);
  sub_23946B010((uint64_t)&a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_239487438(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_23948744C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  std::mutex *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[2];
  std::__shared_weak_count *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;

  v22 = a3;
  v3 = *a2;
  if (*a2)
  {
    v6 = (std::mutex *)(a1 + 224);
    std::mutex::lock((std::mutex *)(a1 + 224));
    sub_23948D87C(a1, &v22, a2, (uint64_t)v19);
    if (v21)
    {
      v7 = *(_QWORD *)(a1 + 200);
      if (v7)
      {
        v17 = v19[1];
        v18 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          v7 = *(_QWORD *)(a1 + 200);
          v23 = v19[0];
          if (!v7)
            sub_2394172E0();
        }
        else
        {
          v23 = v19[0];
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v17, &v23);
        v10 = v18;
        if (v18)
        {
          v11 = (unint64_t *)&v18->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      if (v21)
      {
        v13 = v20;
        if (v20)
        {
          v14 = (unint64_t *)&v20->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
    }
    std::mutex::unlock(v6);
  }
  return v3 != 0;
}

void sub_239487594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  sub_239416DA0((uint64_t)&a9);
  sub_23946B010((uint64_t)&a11);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_2394875B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2394875CC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADC438, MEMORY[0x24BEDABA8]);
}

uint64_t sub_239487600(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  _QWORD v17[3];
  __int128 v18;
  __int128 v19;
  char v20;

  if (!*(_QWORD *)(a1 + 64)
    || (v3 = *(_DWORD *)a2, *(_DWORD *)a2 != *(_DWORD *)a1)
    || (v4 = *(_DWORD *)(a2 + 4), v4 != *(_DWORD *)(a1 + 4))
    || (v5 = *(_DWORD *)(a2 + 8), v5 != *(_DWORD *)(a1 + 8))
    || (v6 = *(_DWORD *)(a2 + 12), v6 != *(_DWORD *)(a1 + 12))
    || (v7 = *(_DWORD *)(a2 + 16), v7 != *(_DWORD *)(a1 + 16))
    || (v8 = *(_DWORD *)(a2 + 20), v8 != *(_DWORD *)(a1 + 20))
    || *(_DWORD *)(a2 + 24) != *(_DWORD *)(a1 + 24)
    || *(_DWORD *)(a2 + 28) != *(_DWORD *)(a1 + 28))
  {
    v10 = *(_OWORD *)(a2 + 16);
    v13 = *(_OWORD *)a2;
    v14 = v10;
    v15 = *(_OWORD *)(a2 + 32);
    v16 = *(_DWORD *)(a2 + 48);
    sub_239488338((uint64_t)v17, a2 + 56);
    v11 = v14;
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v15;
    *(_DWORD *)(a1 + 48) = v16;
    v12 = v19;
    *(_OWORD *)(a1 + 80) = v18;
    *(_OWORD *)(a1 + 96) = v12;
    sub_23991693C((_QWORD *)(a1 + 56), v17);
    sub_239916980((uint64_t)v17);
    return a1;
  }
  *(_QWORD *)&v13 = a2;
  *((_QWORD *)&v13 + 1) = a1;
  if (v7 != 1)
  {
    if (v3 && v4 && v5 && v6)
    {
      sub_239487F98((uint64_t)&v20, a2, a1);
      return a1;
    }
    return a1;
  }
  if (v8 == v3)
    sub_2394877A4((unsigned int *)&v13);
  else
    sub_239487C20((_DWORD *)a2, a1);
  return a1;
}

void sub_239487790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_2394877A4(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  const void *v8;
  int v9;
  BOOL v10;
  uint64_t v13;

  v1 = *(_QWORD *)result;
  v2 = *((_QWORD *)result + 1);
  v3 = *(_DWORD *)(*(_QWORD *)result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 4);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return sub_239487884(*(_DWORD **)result, v2);
      v6 = *(_DWORD *)(v1 + 8);
      if (v5 != v6 * v3)
        return sub_239487884(*(_DWORD **)result, v2);
      v7 = (*(_DWORD *)v1 * v6 * v4 * *(_DWORD *)(v1 + 12));
      v8 = *(const void **)(v1 + 64);
      if (!v8 && (_DWORD)v7)
        sub_239EBF50C((uint64_t)result, 0);
      if ((_DWORD)v7)
        return (unsigned int *)memmove(*(void **)(v2 + 64), v8, 4 * v7);
      return result;
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 4);
  }
  v9 = *(_DWORD *)v1;
  v13 = (v4 * *(_DWORD *)v1);
  if (v9)
    v10 = v4 == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 8) != 0 && *(_DWORD *)(v1 + 12) != 0)
    return sub_239487A34((unsigned int *)&v13, v1, v2);
  return result;
}

_DWORD *sub_239487884(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _OWORD v25[3];

  v3 = *result;
  v2 = result[1];
  v5 = result[2];
  v4 = result[3];
  v15 = (v5 * v2 * *result);
  if (v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v17 = v3 - 1;
    v9 = result[5];
    v10 = *(unsigned int *)(a2 + 20);
    v18 = result[4] | ((unint64_t)*(unsigned int *)(a2 + 16) << 32);
    v16 = 0;
    v19 = v2 - 1;
    v20 = v9 | (v10 << 32);
    v21 = v5 - 1;
    v11 = result[7];
    v12 = *(unsigned int *)(a2 + 28);
    v22 = result[6] | ((unint64_t)*(unsigned int *)(a2 + 24) << 32);
    v23 = v4 - 1;
    v24 = v11 | (v12 << 32);
    v13 = (char *)*((_QWORD *)result + 8);
    v14 = *(char **)(a2 + 64);
    memset(v25, 0, sizeof(v25));
    return sub_23948793C(&v16, (uint64_t)v25, &v15, v13, v14);
  }
  return result;
}

_DWORD *sub_23948793C(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int i;
  uint64_t v18;
  uint64_t v19;

  v5 = __dst;
  v6 = __src;
  v9 = result[9];
  v10 = result[10];
  v11 = result[6];
  v12 = result[7];
  v13 = result[3];
  v14 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v15 = result[11];
  if (v15)
  {
    v16 = result;
    for (i = 0; i < v15; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v18 = *a3;
      if (!v6 && v18)
        sub_239EBF50C((uint64_t)result, a2);
      if (v18)
      {
        result = memmove(v5, v6, 4 * v18);
        v15 = v16[11];
      }
      v6 += 4 * v16[12];
      v5 += 4 * v16[13];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v19 = *a3;
  if (!v6 && v19)
    sub_239EBF50C((uint64_t)result, a2);
  if (v19)
    return memmove(v5, v6, 4 * v19);
  return result;
}

unsigned int *sub_239487A34(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 4);
  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)a2)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v9 = (uint64_t *)result;
    v18 = *(_DWORD *)a2 - 1;
    v10 = *(unsigned int *)(a2 + 20);
    v11 = *(unsigned int *)(a3 + 20);
    v19 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a3 + 16) << 32);
    v17 = 0;
    v20 = v3 - 1;
    v21 = v10 | (v11 << 32);
    v22 = v5 - 1;
    v12 = *(unsigned int *)(a2 + 28);
    v13 = *(unsigned int *)(a3 + 28);
    v23 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v25 = v12 | (v13 << 32);
    v14 = *(char **)(a2 + 64);
    v15 = *(char **)(a3 + 64);
    memset(v26, 0, sizeof(v26));
    v24 = v4 - 1;
    if (v4 != 1)
    {
      v16 = 0;
      do
      {
        sub_239487B34((unsigned int *)&v17, (char **)v26, v9, v14, v15);
        v14 += 4 * v25;
        v15 += 4 * HIDWORD(v25);
        ++v16;
      }
      while (v16 < v24);
    }
    return sub_239487B34((unsigned int *)&v17, (char **)v26, v9, v14, v15);
  }
  return result;
}

unsigned int *sub_239487B34(unsigned int *result, char **a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int i;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3] | ((unint64_t)result[6] << 32);
  v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = __dst;
  a2[3] = (char *)v10;
  v11 = result[8];
  if (v11)
  {
    v12 = result;
    for (i = 0; i < v11; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      v14 = *a3;
      if (!v6 && v14)
        sub_239EBF50C((uint64_t)result, (uint64_t)a2);
      if (v14)
      {
        result = (unsigned int *)memmove(v5, v6, 4 * v14);
        v11 = v12[8];
      }
      v6 += 4 * v12[9];
      v5 += 4 * v12[10];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  v15 = *a3;
  if (!v6 && v15)
    sub_239EBF50C((uint64_t)result, (uint64_t)a2);
  if (v15)
    return (unsigned int *)memmove(v5, v6, 4 * v15);
  return result;
}

_DWORD *sub_239487C20(_DWORD *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _OWORD v25[2];

  v3 = *result;
  v2 = result[1];
  v15 = v3;
  v5 = result[2];
  v4 = result[3];
  if ((_DWORD)v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v17 = v3 - 1;
    v9 = result[5];
    v10 = *(unsigned int *)(a2 + 20);
    v18 = result[4] | ((unint64_t)*(unsigned int *)(a2 + 16) << 32);
    v16 = 0;
    v19 = v2 - 1;
    v20 = v9 | (v10 << 32);
    v21 = v5 - 1;
    v11 = result[7];
    v12 = *(unsigned int *)(a2 + 28);
    v22 = result[6] | ((unint64_t)*(unsigned int *)(a2 + 24) << 32);
    v23 = v4 - 1;
    v24 = v11 | (v12 << 32);
    v13 = (char *)*((_QWORD *)result + 8);
    v14 = *(char **)(a2 + 64);
    memset(v25, 0, sizeof(v25));
    return sub_239487CCC(&v16, (uint64_t)v25, &v15, v13, v14);
  }
  return result;
}

_DWORD *sub_239487CCC(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  _DWORD *v9;
  int v10;
  char *v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v23;
  char *__dsta;

  v9 = a1;
  if (a1[11])
  {
    v10 = 0;
    do
    {
      v23 = v10;
      __dsta = __dst;
      v11 = __src;
      if (v9[8])
      {
        v12 = 0;
        v11 = __src;
        do
        {
          v13 = v9[3];
          v14 = v9[4];
          *(_QWORD *)a2 = v11;
          *(_DWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = __dst;
          *(_DWORD *)(a2 + 24) = v14;
          v15 = v9[5];
          v16 = __dst;
          v17 = v11;
          if (v15)
          {
            v18 = 0;
            v17 = v11;
            v16 = __dst;
            do
            {
              *(_QWORD *)a2 = v17;
              *(_QWORD *)(a2 + 16) = v16;
              v19 = *a3;
              if (!v17 && v19)
                sub_239EBF50C((uint64_t)a1, a2);
              if (v19)
              {
                a1 = memmove(v16, v17, 4 * v19);
                v15 = v9[5];
              }
              v17 += 4 * v9[6];
              v16 += 4 * v9[7];
              ++v18;
            }
            while (v18 < v15);
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17 && v20)
            sub_239EBF50C((uint64_t)a1, a2);
          if (v20)
            a1 = memmove(v16, v17, 4 * v20);
          v11 += 4 * v9[9];
          __dst += 4 * v9[10];
          ++v12;
        }
        while (v12 < v9[8]);
      }
      a1 = sub_239487EB0(v9, a2, a3, v11, __dst);
      __src += 4 * v9[12];
      __dst = &__dsta[4 * v9[13]];
      v10 = v23 + 1;
    }
    while ((v23 + 1) < v9[11]);
  }
  if (v9[8])
  {
    v21 = 0;
    do
    {
      sub_239487EB0(v9, a2, a3, __src, __dst);
      __src += 4 * v9[9];
      __dst += 4 * v9[10];
      ++v21;
    }
    while (v21 < v9[8]);
  }
  return sub_239487EB0(v9, a2, a3, __src, __dst);
}

_DWORD *sub_239487EB0(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int i;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    for (i = 0; i < v11; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6 && v14)
        sub_239EBF50C((uint64_t)result, a2);
      if (v14)
      {
        result = memmove(v5, v6, 4 * v14);
        v11 = v12[5];
      }
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
    sub_239EBF50C((uint64_t)result, a2);
  if (v15)
    return memmove(v5, v6, 4 * v15);
  return result;
}

float sub_239487F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  float result;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;

  v3 = *(_DWORD *)(a2 + 4);
  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)a2)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v19 = *(_DWORD *)a2 - 1;
    v10 = *(unsigned int *)(a2 + 20);
    v11 = *(unsigned int *)(a3 + 20);
    v20 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a3 + 16) << 32);
    v18 = 0;
    v21 = v3 - 1;
    v22 = v10 | (v11 << 32);
    v23 = v5 - 1;
    v12 = *(unsigned int *)(a2 + 28);
    v13 = *(unsigned int *)(a3 + 28);
    v24 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v26 = v12 | (v13 << 32);
    v14 = *(_DWORD **)(a2 + 64);
    v15 = *(_DWORD **)(a3 + 64);
    v27 = 0;
    v25 = v4 - 1;
    if (v4 != 1)
    {
      v16 = 0;
      do
      {
        sub_239488094(&v18, (uint64_t)&v27, a1, v14, v15);
        v14 += v26;
        v15 += HIDWORD(v26);
        ++v16;
      }
      while (v16 < v25);
    }
    return sub_239488094(&v18, (uint64_t)&v27, a1, v14, v15);
  }
  return result;
}

float sub_239488094(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        v52 = 4 * v8;
        v53 = 4 * v10;
        v54 = 4 * v9;
        v55 = 4 * v11;
        do
        {
          v56 = a5;
          v57 = a4;
          v58 = v6;
          do
          {
            *v56 = *v57;
            v57 = (_DWORD *)((char *)v57 + v53);
            v56 = (_DWORD *)((char *)v56 + v55);
            --v58;
          }
          while (v58);
          *v56 = *v57;
          a4 = (_DWORD *)((char *)a4 + v52);
          a5 = (_DWORD *)((char *)a5 + v54);
          ++v7;
        }
        while (v7 != v5);
        v32 = a1[6];
        v33 = a1[7];
        goto LABEL_34;
      }
      v12 = 0;
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_DWORD *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_DWORD *)((char *)v25 + v14 * 4);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_DWORD *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_DWORD *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v32 = a1[6];
      v33 = a1[7];
      if (v7)
      {
        v34 = 0;
        v35 = 4 * v32;
        v36 = 4 * a1[3];
        v37 = 4 * v33;
        v38 = 4 * a1[4];
        do
        {
          v39 = a5;
          v40 = a4;
          v41 = v7;
          do
          {
            *v39 = *v40;
            v40 = (_DWORD *)((char *)v40 + v36);
            v39 = (_DWORD *)((char *)v39 + v38);
            --v41;
          }
          while (v41);
          *v39 = *v40;
          a4 = (_DWORD *)((char *)a4 + v35);
          a5 = (_DWORD *)((char *)a5 + v37);
          ++v34;
        }
        while (v34 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_34:
        *a5 = *a4;
        a4 += v32;
        a5 += v33;
        --v6;
      }
      while (v6);
      goto LABEL_37;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_37;
    }
    v42 = 0;
    v43 = 4 * v8;
    v44 = 4 * a1[3];
    v45 = 4 * v9;
    v46 = 4 * a1[4];
    do
    {
      v47 = a5;
      v48 = a4;
      v49 = v7;
      do
      {
        *v47 = *v48;
        v48 = (_DWORD *)((char *)v48 + v44);
        v47 = (_DWORD *)((char *)v47 + v46);
        --v49;
      }
      while (v49);
      *v47 = *v48;
      a4 = (_DWORD *)((char *)a4 + v43);
      a5 = (_DWORD *)((char *)a5 + v45);
      ++v42;
    }
    while (v42 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v50 = 4 * a1[3];
    v51 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v50);
      a5 = (_DWORD *)((char *)a5 + v51);
      --v7;
    }
    while (v7);
  }
LABEL_37:
  result = *(float *)a4;
  *a5 = *a4;
  return result;
}

uint64_t sub_239488338(uint64_t a1, uint64_t a2)
{
  size_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  unsigned int v13;
  int v14;

  v4 = sub_2399169B0(a2);
  sub_2399168C0((_QWORD *)a1, v4, *(_QWORD *)(a2 + 16));
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = (*(_QWORD *)(a2 + 40) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
  v8 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(a2 + 24)), (int8x16_t)xmmword_239EC6A60));
  if ((v8 & 0xF) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 24);
  if ((v8 & 0xF) != 0)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 32);
  v12[0] = *(_QWORD *)(a2 + 8);
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v7;
  v13 = v6 >> 2;
  v14 = v6 >> 34;
  if (HIDWORD(v10) * v14 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239488438(a1, (uint64_t)v12);
  return a1;
}

void sub_239488424(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void sub_239488438(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[4];
  int v21;
  int v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  _OWORD v34[2];

  v3 = *(unsigned int *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 20);
  if ((_DWORD)v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v9 = *(char **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(a1 + 24)), (int8x16_t)xmmword_239EC6A60)) & 0xF) != 0)
    {
      v12 = 0;
      v13 = 0;
    }
    v14 = v10 >> 2;
    v15 = v10 >> 34;
    v20[0] = *(_QWORD *)(a1 + 8);
    v20[1] = v12;
    v20[2] = v13;
    v20[3] = (v11 >> 2) & 0x3FFFFFFF3FFFFFFFLL;
    v21 = v14;
    v22 = v15;
    if (HIDWORD(v13) * (_DWORD)v15 == -1)
      sub_239EBF538();
    v23[0] = a2;
    v23[1] = v20;
    if (*(_DWORD *)(a2 + 24) == 1 && (v11 & 0xFFFFFFFC) == 4)
    {
      v16 = v11 >> 34;
      v17 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v17 == (_DWORD)v3 && (_DWORD)v17 == (_DWORD)v16)
      {
        sub_239488598((unsigned int *)v23);
      }
      else
      {
        v24 = v3;
        v25 = 0;
        v26 = v3 - 1;
        v27 = 0x100000001;
        v28 = v2 - 1;
        v29 = v17 | (v16 << 32);
        v30 = v5 - 1;
        v18 = *(unsigned int *)(a2 + 36);
        v31 = *(unsigned int *)(a2 + 32) | (unint64_t)(v14 << 32);
        v32 = v4 - 1;
        v33 = v18 | (v15 << 32);
        v19 = *(char **)a2;
        memset(v34, 0, sizeof(v34));
        sub_239487CCC(&v25, (uint64_t)v34, &v24, v19, v9);
      }
    }
    else
    {
      sub_239488844((uint64_t)&v25, a2, (uint64_t)v20);
    }
  }
}

unsigned int *sub_239488598(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  int32x4_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)result;
  v2 = *((_QWORD *)result + 1);
  v3 = *(_DWORD *)(*(_QWORD *)result + 32);
  v4 = *(_DWORD *)(*(_QWORD *)result + 12);
  if (v3 == *(_DWORD *)(v2 + 32) && v3 == *(_DWORD *)(v1 + 28) * v4)
  {
    v5 = *(_DWORD *)(v1 + 36);
    if (v5 == *(_DWORD *)(v2 + 36) && (v6 = *(_DWORD *)(v1 + 16), v5 == v6 * v3))
    {
      v7 = *(_DWORD *)(v1 + 8) * v6 * v4 * *(_DWORD *)(v1 + 20);
      v8 = *(const void **)v1;
      if (!v8 && (_DWORD)v7)
        sub_239EBF50C((uint64_t)result, 0);
      if ((_DWORD)v7)
        return (unsigned int *)memmove(*(void **)v2, v8, 4 * v7);
    }
    else
    {
      return sub_23948868C(*(_DWORD **)result, v2);
    }
  }
  else
  {
    v9 = *(_DWORD *)(v1 + 8);
    v11 = v4 * v9;
    v10.i64[0] = __PAIR64__(v4, v9);
    v10.i64[1] = *(_QWORD *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v10))) & 1) == 0)
      return sub_239488744((unsigned int *)&v11, v1, v2);
  }
  return result;
}

_DWORD *sub_23948868C(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _OWORD v25[3];

  v3 = result[2];
  v2 = result[3];
  v5 = result[4];
  v4 = result[5];
  v15 = (v5 * v2 * v3);
  if (v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v17 = v3 - 1;
    v9 = result[7];
    v10 = *(unsigned int *)(a2 + 28);
    v18 = result[6] | ((unint64_t)*(unsigned int *)(a2 + 24) << 32);
    v16 = 0;
    v19 = v2 - 1;
    v20 = v9 | (v10 << 32);
    v21 = v5 - 1;
    v11 = result[9];
    v12 = *(unsigned int *)(a2 + 36);
    v22 = result[8] | ((unint64_t)*(unsigned int *)(a2 + 32) << 32);
    v23 = v4 - 1;
    v24 = v11 | (v12 << 32);
    v13 = *(char **)result;
    v14 = *(char **)a2;
    memset(v25, 0, sizeof(v25));
    return sub_23948793C(&v16, (uint64_t)v25, &v15, v13, v14);
  }
  return result;
}

unsigned int *sub_239488744(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _OWORD v27[2];

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v6 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  if (v4)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7 && v6 != 0 && v5 != 0)
  {
    v10 = (uint64_t *)result;
    v19 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 28);
    v12 = *(unsigned int *)(a3 + 28);
    v20 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v18 = 0;
    v21 = v3 - 1;
    v22 = v11 | (v12 << 32);
    v23 = v6 - 1;
    v13 = *(unsigned int *)(a2 + 36);
    v14 = *(unsigned int *)(a3 + 36);
    v24 = *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned int *)(a3 + 32) << 32);
    v26 = v13 | (v14 << 32);
    v15 = *(char **)a2;
    v16 = *(char **)a3;
    memset(v27, 0, sizeof(v27));
    v25 = v5 - 1;
    if (v5 != 1)
    {
      v17 = 0;
      do
      {
        sub_239487B34((unsigned int *)&v18, (char **)v27, v10, v15, v16);
        v15 += 4 * v26;
        v16 += 4 * HIDWORD(v26);
        ++v17;
      }
      while (v17 < v25);
    }
    return sub_239487B34((unsigned int *)&v18, (char **)v27, v10, v15, v16);
  }
  return result;
}

float sub_239488844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  float result;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v6 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  if (v4)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7 && v6 != 0 && v5 != 0)
  {
    v20 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 28);
    v12 = *(unsigned int *)(a3 + 28);
    v21 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v19 = 0;
    v22 = v3 - 1;
    v23 = v11 | (v12 << 32);
    v24 = v6 - 1;
    v13 = *(unsigned int *)(a2 + 36);
    v14 = *(unsigned int *)(a3 + 36);
    v25 = *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned int *)(a3 + 32) << 32);
    v27 = v13 | (v14 << 32);
    v15 = *(_DWORD **)a2;
    v16 = *(_DWORD **)a3;
    v28 = 0;
    v26 = v5 - 1;
    if (v5 != 1)
    {
      v17 = 0;
      do
      {
        sub_239488094(&v19, (uint64_t)&v28, a1, v15, v16);
        v15 += v27;
        v16 += HIDWORD(v27);
        ++v17;
      }
      while (v17 < v26);
    }
    return sub_239488094(&v19, (uint64_t)&v28, a1, v15, v16);
  }
  return result;
}

uint64_t sub_239488940(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;

  if ((__int128 *)a1 != a2)
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    v5 = *((_QWORD *)a2 + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(void **)(a1 + 24);
      if (v5 > v6 << 6)
      {
        if (v7)
        {
          operator delete(v7);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v5 = *((_QWORD *)a2 + 4);
        }
        if ((v5 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v8 = ((v5 - 1) >> 6) + 1;
        v7 = operator new(8 * v8);
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = v8;
        v5 = *((_QWORD *)a2 + 4);
      }
      memmove(v7, *((const void **)a2 + 3), (((v5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v5 = *((_QWORD *)a2 + 4);
    }
    *(_QWORD *)(a1 + 32) = v5;
    sub_239488A38((_QWORD *)(a1 + 48), *((char **)a2 + 6), *((char **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
    sub_239488C3C((uint64_t *)(a1 + 72), *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  }
  return a1;
}

_QWORD *sub_239488A38(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 3) >= __sz)
    {
      v24 = *result;
      if (a2 != a3)
      {
        v25 = *result;
        do
        {
          v26 = *(_OWORD *)v6;
          *(_QWORD *)(v25 + 16) = *((_QWORD *)v6 + 2);
          *(_OWORD *)v25 = v26;
          v25 += 24;
          v6 += 24;
          v24 += 24;
        }
        while (v6 != a3);
      }
      v15 = v24 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[8 * ((v17 - v9) >> 3)];
      if (v17 != v9)
      {
        v19 = 8 * ((v17 - v9) >> 3);
        do
        {
          v20 = *(_OWORD *)v6;
          *((_QWORD *)v9 + 2) = *((_QWORD *)v6 + 2);
          *(_OWORD *)v9 = v20;
          v9 += 24;
          v6 += 24;
          v19 -= 24;
        }
        while (v19);
        v9 = *v16;
      }
      v21 = v9;
      if (v18 != a3)
      {
        v21 = v9;
        v22 = v9;
        do
        {
          v23 = *(_OWORD *)v18;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v18 += 24;
          v21 += 24;
        }
        while (v18 != a3);
      }
      v15 = v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_28;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_28:
      sub_2394189F8();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v14 = &v9[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_239488C3C(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          free(v13);
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_38;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= __sz)
      v15 = __sz;
    v16 = v14 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v15;
    if (v16 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
      sub_2394189F8();
    v17 = 24 * v16;
    v18 = operator new(24 * v16);
    *a1 = (uint64_t)v18;
    a1[1] = (uint64_t)v18;
    a1[2] = (uint64_t)v18 + v17;
    v19 = sub_239488EA4(v9, v6, a3, (uint64_t)v18);
LABEL_32:
    a1[1] = v19;
    return;
  }
  v20 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v20 - v10) >> 3) < __sz)
  {
    v21 = a2 + 8 * ((v20 - v10) >> 3);
    if (v20 != v10)
    {
      v22 = 8 * ((v20 - v10) >> 3);
      do
      {
        if (v6 != v10)
        {
          v23 = *(unsigned int *)(v6 + 16);
          sub_23941D1E8(v10, v23);
          if ((_DWORD)v23)
            memcpy(*(void **)v10, *(const void **)v6, v23);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(v6 + 16);
        }
        v6 += 24;
        v10 += 24;
        v22 -= 24;
      }
      while (v22);
      v10 = a1[1];
    }
    v19 = sub_239488EA4(v9, v21, a3, v10);
    goto LABEL_32;
  }
  if (a2 == a3)
  {
    v24 = *a1;
  }
  else
  {
    v24 = *a1;
    do
    {
      if (v6 != v10)
      {
        v25 = *(unsigned int *)(v6 + 16);
        sub_23941D1E8(v10, v25);
        if ((_DWORD)v25)
          memcpy(*(void **)v10, *(const void **)v6, v25);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v6 + 16);
      }
      v6 += 24;
      v10 += 24;
      v24 += 24;
    }
    while (v6 != a3);
    v20 = a1[1];
  }
  while (v20 != v24)
  {
    v26 = *(void **)(v20 - 24);
    v20 -= 24;
    free(v26);
  }
  a1[1] = v24;
}

void sub_239488E94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_239488E9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_239488EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  uint64_t v13;
  void *memptr;

  v4 = a4;
  v13 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *(unsigned int *)(v6 + 16);
      v8 = (v7 + 31) & 0x1FFFFFFE0;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = v8;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x100BBD03uLL);
      v9 = memptr;
      *(_QWORD *)v4 = memptr;
      if (!v9)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v12 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v12, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v7)
        memcpy(v9, *(const void **)v6, v7);
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v6 + 16);
      v6 += 24;
      v4 = v13 + 24;
      v13 += 24;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_239488F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239488FB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239488FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239488FB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239488FB4(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    v6 = *v4;
    while (v5 != v6)
    {
      v7 = *(void **)(v5 - 24);
      v5 -= 24;
      free(v7);
    }
  }
  return a1;
}

std::string *sub_23948900C(std::string *this, std::string *__src, std::string *a3)
{
  unint64_t v6;
  size_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **p_dst;
  std::string *v13;
  std::string::value_type *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  char *v20;
  _OWORD *v21;
  std::string::size_type *v22;
  unint64_t v23;
  __int128 v24;
  std::string::value_type v25;
  std::string::size_type v26;
  void **__dst;
  std::string::size_type v29;
  int64_t v30;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v13 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          v14 = (char *)v13 + size;
          if (a3 == __src)
            goto LABEL_38;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_14;
      }
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src)
        goto LABEL_38;
LABEL_18:
      if (v7 >= 0x20)
      {
        v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          v21 = v20 + 16;
          v22 = &__src->__r_.__value_.__r.__words[2];
          v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_38;
        }
        else
        {
          v15 = __src;
        }
      }
      else
      {
        v15 = __src;
      }
      do
      {
        v25 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      *v14 = 0;
      v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v26;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v7 > 0x16)
  {
    v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v16 = v7 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v29 = v7;
    v30 = v17 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(_BYTE *)p_dst = 0;
  if (v30 >= 0)
    v18 = (const std::string::value_type *)&__dst;
  else
    v18 = (const std::string::value_type *)__dst;
  if (v30 >= 0)
    v19 = HIBYTE(v30);
  else
    v19 = v29;
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  return this;
}

void sub_239489250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23948926C(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  _QWORD *v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51[2];
  unint64_t v52;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (_QWORD *)(a1 + 8);
  v10 = *a2;
  v11 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v11)
    goto LABEL_21;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a2;
    if (v10 >= *(_QWORD *)&v11)
      v13 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*v9 + 8 * v13);
  if (!v14 || (v15 = (_QWORD *)*v14) == 0)
  {
LABEL_21:
    if ((unint64_t)(*(_QWORD *)(a1 + 32) + 1) <= *(_QWORD *)(a1 + 48))
    {
      v22 = operator new(0x18uLL);
      v23 = *(_QWORD **)(a1 + 64);
      *v22 = a1 + 56;
      v22[1] = v23;
      v22[2] = v10;
      *v23 = v22;
      v24 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v24;
      sub_2394897C4(a1 + 8, a2, a2, a3);
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
    {
      v19 = *(uint64_t **)(a1 + 56);
      v20 = v19[2];
      v52 = v20;
      if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
      {
        v29 = v20;
        if (v20 >= *(_QWORD *)&v11)
          v29 = v20 % *(_QWORD *)&v11;
        v21 = *(_QWORD **)(*v9 + 8 * v29);
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      else
      {
        v21 = *(_QWORD **)(*v9 + 8 * (v20 & (*(_QWORD *)&v11 - 1)));
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      v31 = (_QWORD *)v21[3];
      v30 = (std::__shared_weak_count *)v21[4];
      v51[0] = v31;
      v51[1] = &v30->__vftable;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v19 = *(uint64_t **)(a1 + 56);
        v18 = *(_QWORD *)(a1 + 72);
      }
      v34 = *v19;
      *(_QWORD *)(v34 + 8) = v19[1];
      *(_QWORD *)v19[1] = v34;
      *(_QWORD *)(a1 + 72) = v18 - 1;
      operator delete(v19);
      sub_23946B080((_QWORD *)(a1 + 8), &v52);
      v35 = operator new(0x18uLL);
      v36 = *a2;
      v37 = *(_QWORD **)(a1 + 64);
      *v35 = a1 + 56;
      v35[1] = v37;
      v35[2] = v36;
      *v37 = v35;
      v38 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v35;
      *(_QWORD *)(a1 + 72) = v38;
      sub_2394897C4(a1 + 8, a2, a2, a3);
      v39 = v52;
      if (v30)
      {
        v40 = (unint64_t *)&v30->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_QWORD *)a4 = v39;
        *(_QWORD *)(a4 + 8) = v31;
        *(_QWORD *)(a4 + 16) = v30;
        *(_BYTE *)(a4 + 24) = 1;
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        goto LABEL_52;
      }
      *(_QWORD *)a4 = v52;
      *(_QWORD *)(a4 + 8) = v31;
      *(_QWORD *)(a4 + 16) = 0;
    }
    else
    {
      v26 = *a3;
      v25 = a3[1];
      if (v25)
      {
        v27 = (unint64_t *)(v25 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      *(_QWORD *)a4 = v10;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v25;
    }
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_52;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == v10)
      {
        if (v15[2] == v10)
          goto LABEL_53;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_21;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == v10)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_21;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_21;
  }
  if (v15[2] != v10)
    goto LABEL_11;
LABEL_53:
  v51[0] = a2;
  v43 = sub_239489B10(a1 + 8, a2, (uint64_t)&unk_239EC6E98, v51);
  v45 = *a3;
  v44 = a3[1];
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)v43[4];
  v43[3] = v45;
  v43[4] = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_29:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_52:
  std::mutex::unlock(v8);
}

void sub_239489624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_239489640(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239489654(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v7 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_25:
    sub_239A444D4((uint64_t)"unknown file", 230, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_21;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_25;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_21:
  v16 = v12[4];
  *a3 = v12[3];
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::mutex::unlock(v6);
}

void sub_2394897B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2394897C4(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v12[2] = *a3;
  v12[3] = v17;
  v12[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_239489AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239489B10(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239489E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239489E40(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    v26 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23948A140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23948A154(uint64_t a1, unsigned int *a2, int *a3, char a4, const float *a5, char a6, uint64_t a7)
{
  int v11;
  int v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  __int32 *v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;

  if (a4)
  {
    v11 = *a3;
    v12 = *a2;
  }
  else
  {
    v12 = *a2;
    v11 = *a2 != 0;
  }
  v13 = 4 * (v12 * v11);
  v14 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = v15 | (v15 >> 16) | ((v15 | (v15 >> 16)) >> 32);
  if (v16 + 1 > 8)
    v17 = v16 + 1;
  else
    v17 = 8;
  sub_2399168C0((_QWORD *)a1, v13, v17);
  v18 = *a2;
  *(_DWORD *)(a1 + 24) = v18;
  *(_DWORD *)(a1 + 28) = 4 * v11;
  v19 = *(float32x4_t **)(a1 + 8);
  if (!v19 || !a6)
    return a1;
  v20 = v11 & 0x3FFFFFFF;
  if ((_DWORD)v18 * (_DWORD)v20 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((_DWORD)v20 == 1)
  {
    if ((_DWORD)v18)
    {
      if (v18 >= 8 && (v19 >= (float32x4_t *)(a5 + 1) || &v19->f32[v18] <= a5))
      {
        v21 = &v19->i32[v18 & 0xFFFFFFF8];
        v22 = v18 & 7;
        v27 = vld1q_dup_f32(a5);
        v28 = v19 + 1;
        v29 = v18 & 0xFFFFFFF8;
        do
        {
          v28[-1] = v27;
          *v28 = v27;
          v28 += 2;
          v29 -= 8;
        }
        while (v29);
        if ((v18 & 0xFFFFFFF8) == v18)
          return a1;
      }
      else
      {
        v21 = *(__int32 **)(a1 + 8);
        v22 = v18;
      }
      v23 = v22 + 1;
      do
      {
        *v21++ = *(_DWORD *)a5;
        --v23;
      }
      while (v23 > 1);
    }
    return a1;
  }
  if (!(_DWORD)v18)
    return a1;
  v25 = v18 - 1;
  if (v25)
  {
    v26 = 4 * v20;
    do
    {
      v19->f32[0] = *a5;
      v19 = (float32x4_t *)((char *)v19 + v26);
      --v25;
    }
    while (v25);
  }
  v19->f32[0] = *a5;
  return a1;
}

void sub_23948A308(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void sub_23948A31C(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t i;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;

  v6 = a1[2];
  v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      v14 = 48 * a2;
      do
      {
        *(_OWORD *)v7 = *a3;
        sub_23948A5BC((_QWORD *)(v7 + 16), (uint64_t)(a3 + 1));
        v7 += 48;
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x555555555555555)
        sub_239418A80();
      v12 = (char *)operator new(48 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[48 * v8];
    v26 = v15;
    *((_QWORD *)&v27 + 1) = &v12[48 * v11];
    v16 = 48 * a2;
    v17 = &v15[48 * a2];
    do
    {
      *(_OWORD *)v15 = *a3;
      sub_23948A5BC((_QWORD *)v15 + 2, (uint64_t)(a3 + 1));
      v15 += 48;
      v16 -= 48;
    }
    while (v16);
    *(_QWORD *)&v27 = v17;
    v19 = (char *)*a1;
    v18 = a1[1];
    for (i = 64; ; i -= 48)
    {
      v21 = v18 + i;
      if ((char *)(v18 + i - 64) == v19)
        break;
      *(_OWORD *)&v26[i - 112] = *(_OWORD *)(v21 - 112);
      v22 = &v26[i - 96];
      sub_23948A5BC(v22, v21 - 96);
    }
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = &v26[i - 64];
    *(_OWORD *)(a1 + 1) = v27;
    if (v23 != v24)
    {
      do
      {
        v25 = v23 - 48;
        sub_239916980((uint64_t)(v23 - 32));
        v23 = v25;
      }
      while (v25 != v24);
    }
    if (v24)
      operator delete(v24);
  }
}

void sub_23948A524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23948A568(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_239916980(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_23948A5BC(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[2];

  v4 = sub_2399169B0(a2);
  sub_2399168C0(a1, v4, *(_QWORD *)(a2 + 16));
  a1[3] = *(_QWORD *)(a2 + 24);
  v5 = *(unsigned int *)(a2 + 24);
  v6 = (unint64_t)*(unsigned int *)(a2 + 28) >> 2;
  if ((_DWORD)v6 * (_DWORD)v5 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v8[0] = *(_QWORD *)(a2 + 8);
  v8[1] = v5 | (v6 << 32);
  sub_23948A674(a1, (uint64_t)v8);
  return a1;
}

void sub_23948A660(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_23948A674(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unint64_t)result[7] >> 2;
    if ((_DWORD)v3 * result[6] == -1)
      sub_239EBF538();
    result = (_DWORD *)*((_QWORD *)result + 1);
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
    {
      v10 = *(_DWORD **)a2;
      if (!v10)
        sub_239EBF50C((uint64_t)result, 0);
      return memmove(result, v10, 4 * v2);
    }
    else
    {
      v6 = *(_DWORD **)a2;
      v7 = v2 - 1;
      if (v7)
      {
        v8 = 4 * v4;
        v9 = 4 * v3;
        do
        {
          *result = *v6;
          v6 = (_DWORD *)((char *)v6 + v8);
          result = (_DWORD *)((char *)result + v9);
          --v7;
        }
        while (v7);
      }
      *result = *v6;
    }
  }
  return result;
}

void sub_23948A708()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23948A71C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADC460;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23948A754(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC460;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_23948A774@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  if (*a2 == **(_DWORD **)(a1 + 8))
  {
    v4 = *(_QWORD *)(a1 + 16);
    result = operator new(0x58uLL);
    result[1] = 0;
    result[2] = 0;
    *result = &off_250ADC4A8;
    result[3] = &off_250ADB778;
    v6 = *(_QWORD *)(v4 + 16);
    result[4] = *(_QWORD *)(v4 + 8);
    result[5] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(_OWORD *)(v4 + 24);
    v10 = *(_OWORD *)(v4 + 40);
    *(_QWORD *)((char *)result + 78) = *(_QWORD *)(v4 + 54);
    *((_OWORD *)result + 3) = v9;
    *((_OWORD *)result + 4) = v10;
    *a3 = result + 3;
    a3[1] = result;
  }
  else
  {
    result = 0;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_23948A820(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23948A830(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948A860(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    return j_nullsub_4_89(a1 + 24);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return j_nullsub_4_89(a1 + 24);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return j_nullsub_4_89(a1 + 24);
}

_QWORD *sub_23948A8D4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23948AA68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_23948AA78()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23948AA8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADC4E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23948AAC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC4E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23948AAE4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;

  if (*a2 == **(_DWORD **)(result + 8))
  {
    v4 = **(_QWORD **)(result + 16);
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_250ADBE30;
    v5[3] = &off_250ADB628;
    result = sub_23982619C((uint64_t)(v5 + 4), v4 + 8);
    *((_WORD *)v5 + 52) = *(_WORD *)(v4 + 80);
    *a3 = v5 + 3;
    a3[1] = v5;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_23948AB78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  nullsub_4(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_23948AB98(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23948AD2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_23948AD38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23948AD48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948AD78(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23948AD88(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250ADC560;
  v3 = (_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 850045863;
  v4 = (std::mutex *)(a1 + 224);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v10[0] = &off_250ADC5A0;
  v11 = v10;
  std::mutex::lock((std::mutex *)(a1 + 224));
  if (v11)
  {
    if (v11 == v10)
    {
      v13 = v12;
      (*(void (**)(uint64_t, _QWORD *))(v10[0] + 24))((uint64_t)v10, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(void))(*v11 + 16))();
    }
    sub_23948B138(v12, v3);
    v5 = v13;
    if (v13 == v12)
    {
      v6 = 4;
      v5 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_10;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_10:
  std::mutex::unlock(v4);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_14;
  }
  if (v11)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_23948AF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD **v16;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  std::mutex::unlock(v15);
  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::mutex::~mutex(v15);
  v20 = *v16;
  if (*v16 == (_QWORD *)(v13 + 176))
  {
    v21 = 4;
    v20 = (_QWORD *)(v13 + 176);
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:
  v22 = *(_QWORD **)(v13 + 168);
  if (v22 == v14)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v23 = 5;
    v14 = *(_QWORD **)(v13 + 168);
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v23))(v14);
LABEL_16:
  sub_23948AFF8(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_23948AFF8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250ADC580;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_23948B0EC(uint64_t a1)
{
  sub_23948B334(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23948B114(uint64_t a1)
{
  sub_23948AFF8(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23948B138(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23948B2CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_23948B2DC()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23948B2F0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250ADC5A0;
  return result;
}

void sub_23948B314(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250ADC5A0;
}

void sub_23948B32C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_23948B334(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_250ADC560;
  v2 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_239467C88(a1);
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  v3 = *(_QWORD **)(a1 + 200);
  if (v3 == (_QWORD *)(a1 + 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 168);
  if (v5 == (_QWORD *)(a1 + 144))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 144);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return sub_23948AFF8(a1);
}

void sub_23948B3E8(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  sub_239416A48(a1);
}

void sub_23948B400(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23948B410(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948B440(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23948B450(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250ADC620;
  v3 = (_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 850045863;
  v4 = (std::mutex *)(a1 + 224);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v10[0] = &off_250ADC660;
  v11 = v10;
  std::mutex::lock((std::mutex *)(a1 + 224));
  if (v11)
  {
    if (v11 == v10)
    {
      v13 = v12;
      (*(void (**)(uint64_t, _QWORD *))(v10[0] + 24))((uint64_t)v10, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(void))(*v11 + 16))();
    }
    sub_23948B800(v12, v3);
    v5 = v13;
    if (v13 == v12)
    {
      v6 = 4;
      v5 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_10;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
LABEL_10:
  std::mutex::unlock(v4);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_14;
  }
  if (v11)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_23948B604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD **v16;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  std::mutex::unlock(v15);
  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::mutex::~mutex(v15);
  v20 = *v16;
  if (*v16 == (_QWORD *)(v13 + 176))
  {
    v21 = 4;
    v20 = (_QWORD *)(v13 + 176);
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:
  v22 = *(_QWORD **)(v13 + 168);
  if (v22 == v14)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_16;
    v23 = 5;
    v14 = *(_QWORD **)(v13 + 168);
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v23))(v14);
LABEL_16:
  sub_23948B6C0(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_23948B6C0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250ADC640;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_23948B7B4(uint64_t a1)
{
  sub_23948B9FC(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23948B7DC(uint64_t a1)
{
  sub_23948B6C0(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23948B800(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23948B994(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_23948B9A4()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23948B9B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250ADC660;
  return result;
}

void sub_23948B9DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250ADC660;
}

void sub_23948B9F4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_23948B9FC(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_250ADC620;
  v2 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_239467C88(a1);
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  v3 = *(_QWORD **)(a1 + 200);
  if (v3 == (_QWORD *)(a1 + 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 168);
  if (v5 == (_QWORD *)(a1 + 144))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 144);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return sub_23948B6C0(a1);
}

void sub_23948BAB0(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  sub_239416A48(a1);
}

void sub_23948BACC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23948BAE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADC6A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_23948BB20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC6A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23948BB48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[1];
  if (!*(_BYTE *)(a1[2] + 4) || !*(_BYTE *)(a1[3] + 4))
  {
    v2 = *(_QWORD *)(v1 + 56);
    if (v2)
    {
      std::mutex::lock((std::mutex *)(v2 + 224));
      *(_QWORD *)(v2 + 208) = 0;
      *(_QWORD *)(v2 + 216) = 0;
      sub_239467C88(v2);
      std::mutex::unlock((std::mutex *)(v2 + 224));
    }
    v3 = *(_QWORD *)(v1 + 72);
    if (v3)
    {
      std::mutex::lock((std::mutex *)(v3 + 224));
      *(_QWORD *)(v3 + 208) = 0;
      *(_QWORD *)(v3 + 216) = 0;
      sub_239467C88(v3);
      std::mutex::unlock((std::mutex *)(v3 + 224));
    }
  }
}

void sub_23948BBDC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23948BBF0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23948BC08()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23948BC1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADC6F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_23948BC5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC6F0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_23948BC84@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  if (*a2 == *(_DWORD *)result[1])
  {
    v4 = result[2];
    result = operator new(0x58uLL);
    result[1] = 0;
    result[2] = 0;
    *result = &off_250ADC738;
    result[3] = &off_250ADB778;
    v5 = (char *)(result + 3);
    v6 = *(_QWORD *)(v4 + 16);
    result[4] = *(_QWORD *)(v4 + 8);
    result[5] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
LABEL_10:
    v12 = *(_OWORD *)(v4 + 24);
    v13 = *(_OWORD *)(v4 + 40);
    *(_QWORD *)((char *)result + 78) = *(_QWORD *)(v4 + 54);
    *((_OWORD *)result + 3) = v12;
    *((_OWORD *)result + 4) = v13;
    *a3 = v5;
    a3[1] = result;
    return result;
  }
  if (*a2 == *(_DWORD *)result[3])
  {
    v4 = result[4];
    result = operator new(0x58uLL);
    result[1] = 0;
    result[2] = 0;
    *result = &off_250ADC738;
    result[3] = &off_250ADB778;
    v5 = (char *)(result + 3);
    v9 = *(_QWORD *)(v4 + 16);
    result[4] = *(_QWORD *)(v4 + 8);
    result[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    goto LABEL_10;
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_23948BD88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23948BD98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948BDC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    return j_nullsub_4_89(a1 + 24);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return j_nullsub_4_89(a1 + 24);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return j_nullsub_4_89(a1 + 24);
}

void sub_23948BE40()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23948BE54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADC770;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_23948BE94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC770;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23948BEBC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v4;
  _QWORD *v5;
  __int128 *v6;

  if (*a2 == **(_DWORD **)(result + 8))
  {
    v4 = **(__int128 ***)(result + 16);
    v5 = operator new(0x78uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_250ADB7B8;
    result = sub_23948BFA8((uint64_t)(v5 + 3), v4);
LABEL_5:
    *a3 = result;
    a3[1] = (uint64_t)v5;
    return result;
  }
  if (*a2 == **(_DWORD **)(result + 24))
  {
    v6 = **(__int128 ***)(result + 32);
    v5 = operator new(0x78uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_250ADB7B8;
    result = sub_23948BFA8((uint64_t)(v5 + 3), v6);
    goto LABEL_5;
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_23948BF78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_23948BF90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_23948BFA8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  size_t v9;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_23948C0E0((_QWORD *)(a1 + 24), (uint64_t)a2 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v5 = (_BYTE *)*((_QWORD *)a2 + 7);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v8 = (char *)operator new(v7);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = &v8[8 * (v7 >> 3)];
    v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 56) = &v8[v9];
  }
  sub_23948C1E8((_QWORD *)(a1 + 72), (uint64_t *)a2 + 9);
  return a1;
}

void sub_23948C0A4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v5;
    operator delete(v5);
    v6 = *v1;
    if (!*v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v1;
    if (!*v1)
      goto LABEL_3;
  }
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23948C0E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      sub_2394189F8();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

_QWORD *sub_23948C1E8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    a1[1] = sub_239488EA4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_23948C290(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_239EBF568((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_23948C2C0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23948C2D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADC7B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_23948C314(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADC7B8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23948C33C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;

  if (*a2 == **(_DWORD **)(result + 8))
  {
    v4 = **(_QWORD **)(result + 16);
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_250ADBE30;
    v5[3] = &off_250ADB628;
    v6 = (char *)(v5 + 3);
    result = sub_23982619C((uint64_t)(v5 + 4), v4 + 8);
LABEL_5:
    *((_WORD *)v5 + 52) = *(_WORD *)(v4 + 80);
    *a3 = v6;
    a3[1] = v5;
    return result;
  }
  if (*a2 == **(_DWORD **)(result + 24))
  {
    v4 = **(_QWORD **)(result + 32);
    v5 = operator new(0x70uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_250ADBE30;
    v5[3] = &off_250ADB628;
    v6 = (char *)(v5 + 3);
    result = sub_23982619C((uint64_t)(v5 + 4), v4 + 8);
    goto LABEL_5;
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_23948C420(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  nullsub_4(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_23948C444(uint64_t a1, unsigned int *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v35;
  _QWORD v37[4];
  unsigned int v38;
  int v39;
  _QWORD v40[2];
  _DWORD *v41;
  _DWORD v42[7];
  unsigned int v43;
  unsigned int v44;
  char v45;

  if (a4)
  {
    v11 = *a3;
    v12 = a3[1];
    v13 = a2[3];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    LODWORD(v17) = v15 * v14;
    v18 = a2[2];
    v13 = a2[3];
    v32 = v18 == 0;
    LODWORD(v19) = v17 * v18;
    if (v32)
      v17 = 0;
    else
      v17 = v17;
    if (v13)
      v19 = v19;
    else
      v19 = 0;
    v12 = v17 | (v19 << 32);
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v20 = 4 * v13 * HIDWORD(v12);
  v21 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
  v23 = v22 | (v22 >> 16) | ((v22 | (v22 >> 16)) >> 32);
  if (v23 + 1 > 8)
    v24 = v23 + 1;
  else
    v24 = 8;
  sub_2399168C0((_QWORD *)a1, v20, v24);
  v25 = 4 * v12;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 40) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_QWORD *)(a1 + 48) = (4 * v12) & 0xFFFFFFFCFFFFFFFCLL;
  v26 = *(_DWORD **)(a1 + 8);
  if (v26 && a6)
  {
    v27 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(a1 + 24)), (int8x16_t)xmmword_239EC6A60));
    v28 = *(_QWORD *)(a1 + 32);
    if ((v27 & 0xF) != 0)
      v29 = 0;
    else
      v29 = *(_QWORD *)(a1 + 24);
    if ((v27 & 0xF) != 0)
      v28 = 0;
    v30 = v25 >> 2;
    v31 = v25 >> 34;
    v37[0] = *(_QWORD *)(a1 + 8);
    v37[1] = v29;
    v37[2] = v28;
    v37[3] = v11 & 0x3FFFFFFF3FFFFFFFLL;
    v38 = v30;
    v39 = v31;
    if (HIDWORD(v28) * (_DWORD)v31 == -1)
    {
      sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v40[0] = v37;
    v40[1] = a5;
    if ((v11 & 0x3FFFFFFF) == 1)
    {
      sub_23948C690((unsigned int *)v40);
    }
    else
    {
      v41 = a5;
      if ((_DWORD)v29)
        v32 = HIDWORD(v29) == 0;
      else
        v32 = 1;
      if (!v32 && (_DWORD)v28 != 0 && HIDWORD(v28) != 0)
      {
        v42[0] = 0;
        v42[1] = v29 - 1;
        v42[2] = v11 & 0x3FFFFFFF;
        v42[3] = HIDWORD(v29) - 1;
        v42[4] = HIDWORD(v11) & 0x3FFFFFFF;
        v42[5] = v28 - 1;
        v45 = 0;
        v42[6] = v30;
        v43 = HIDWORD(v28) - 1;
        v44 = v31;
        if (HIDWORD(v28) != 1)
        {
          v35 = 0;
          do
          {
            sub_23948D2DC(v42, (uint64_t)&v45, &v41, v26);
            v26 += v44;
            ++v35;
          }
          while (v35 < v43);
        }
        sub_23948D2DC(v42, (uint64_t)&v45, &v41, v26);
      }
    }
  }
  return a1;
}

void sub_23948C668(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void sub_23948C67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_23948C690(unsigned int *result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(_DWORD *)(*(_QWORD *)result + 8);
  v4 = *(_DWORD *)(*(_QWORD *)result + 24);
  v3 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v3 == v4 * v2)
  {
    v5 = *(_DWORD *)(v1 + 12);
    if (*(_DWORD *)(v1 + 32) == v5 * v3)
    {
      return (unsigned int *)sub_23948C7C8(result, v1);
    }
    else
    {
      v10 = *((_QWORD *)result + 1);
      v16[0] = v5 * v2;
      v17 = v23;
      v18 = v16;
      v19 = v10;
      v11.i64[0] = __PAIR64__(v5, v2);
      v11.i64[1] = *(_QWORD *)(v1 + 16);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0)
        return sub_23948CB48((unsigned int *)&v17, v1);
    }
  }
  else
  {
    v6 = *((_QWORD *)result + 1);
    v14 = *(unsigned int *)(*(_QWORD *)result + 8);
    v16[0] = &v15;
    v16[1] = &v14;
    v16[2] = v6;
    v7 = *(_DWORD *)(v1 + 12);
    v8 = *(_QWORD *)(v1 + 16);
    v9.i64[0] = __PAIR64__(v7, v2);
    v9.i64[1] = v8;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v9))) & 1) == 0)
    {
      LODWORD(v17) = 0;
      HIDWORD(v17) = v2 - 1;
      LODWORD(v18) = v4;
      HIDWORD(v18) = v7 - 1;
      LODWORD(v19) = v3;
      HIDWORD(v19) = v8 - 1;
      v12 = *(_DWORD *)(v1 + 36);
      v20 = *(_DWORD *)(v1 + 32);
      v21 = HIDWORD(v8) - 1;
      v22 = v12;
      v13 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_23948CE18((uint64_t)&v17, (uint64_t)v23, (uint64_t)v16, v13);
    }
  }
  return result;
}

_QWORD *sub_23948C7C8(_QWORD *result, uint64_t a2)
{
  const float *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int32x4_t v14;
  int v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  _DWORD v23[9];
  _QWORD v24[3];

  v3 = *result;
  v2 = (const float *)result[1];
  v4 = *(_DWORD *)(*result + 16);
  v6 = *(_DWORD *)(*result + 32);
  v5 = *(_DWORD *)(*result + 36);
  if (v5 == v6 * v4)
  {
    v7 = *(_DWORD *)(v3 + 12) * *(_DWORD *)(v3 + 8) * v4 * *(_DWORD *)(v3 + 20);
    v8 = *(_QWORD *)v3;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
      sub_239EBF50C((uint64_t)result, a2);
    if ((_DWORD)v7)
    {
      if (v7 < 8 || v8 < (unint64_t)(v2 + 1) && v8 + 4 * v7 > (unint64_t)v2)
      {
        v10 = *(_DWORD **)v3;
        v11 = v7;
LABEL_11:
        v12 = v11 + 1;
        do
        {
          *v10++ = *(_DWORD *)v2;
          --v12;
        }
        while (v12 > 1);
        return result;
      }
      v10 = (_DWORD *)(v8 + 4 * (v7 & 0xFFFFFFF8));
      v11 = v7 & 7;
      v17 = vld1q_dup_f32(v2);
      v18 = (float32x4_t *)(v8 + 16);
      v19 = v7 & 0xFFFFFFF8;
      do
      {
        v18[-1] = v17;
        *v18 = v17;
        v18 += 2;
        v19 -= 8;
      }
      while (v19);
      if ((v7 & 0xFFFFFFF8) != v7)
        goto LABEL_11;
    }
  }
  else
  {
    v14.i64[0] = *(_QWORD *)(v3 + 8);
    v20 = v14.i32[1] * v14.i32[0] * v4;
    v22[0] = &v21;
    v22[1] = &v20;
    v22[2] = v2;
    v13 = *(_DWORD *)(v3 + 20);
    v14.i64[1] = __PAIR64__(v13, v4);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v14))) & 1) == 0)
    {
      v23[0] = 0;
      v23[1] = v14.i32[0] - 1;
      v15 = *(_DWORD *)(v3 + 28);
      v23[2] = *(_DWORD *)(v3 + 24);
      v23[3] = v14.i32[1] - 1;
      v23[4] = v15;
      v23[5] = v4 - 1;
      v23[6] = v6;
      v23[7] = v13 - 1;
      v23[8] = v5;
      v16 = *(_QWORD *)v3;
      memset(v24, 0, sizeof(v24));
      return sub_23948C930(v23, (uint64_t)v24, (uint64_t)v22, v16);
    }
  }
  return result;
}

_DWORD *sub_23948C930(_DWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  const float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  unint64_t v32;

  v4 = result[6];
  v5 = result[4];
  v6 = result[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  v7 = result[7];
  v8 = *(const float **)(a3 + 16);
  v9 = **(_QWORD **)(a3 + 8);
  if (v7)
  {
    if (v9 >= 1)
    {
      v10 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      v11 = 4 * v9;
      if ((v9 & 0x3FFFFFFFFFFFFFFFLL) != 0)
      {
        v12 = 1;
      }
      else
      {
        v11 = 4;
        v12 = 0;
      }
      v13 = v10 - v12 + 1;
      if (v13 >= 8)
      {
        v18 = 0;
        while (a4)
        {
          if (a4 < (unint64_t)(v8 + 1))
          {
            v19 = (_DWORD *)a4;
            v20 = v9 & 0x3FFFFFFFFFFFFFFFLL;
            if ((unint64_t)v8 < a4 + v11)
              goto LABEL_25;
          }
          v19 = (_DWORD *)(a4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
          v21 = vld1q_dup_f32(v8);
          v22 = (float32x4_t *)(a4 + 16);
          v23 = v13 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v22[-1] = v21;
            *v22 = v21;
            v22 += 2;
            v23 -= 8;
          }
          while (v23);
          v20 = v10 - (v13 & 0xFFFFFFFFFFFFFFF8);
          if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_25:
            v24 = v20 + 1;
            do
            {
              *v19++ = *(_DWORD *)v8;
              --v24;
            }
            while (v24 > 1);
          }
          a4 += 4 * result[8];
          if (++v18 == v7)
            goto LABEL_29;
        }
      }
      else
      {
        v14 = 0;
        v15 = v10 + 1;
        while (a4)
        {
          v16 = v15;
          v17 = (_DWORD *)a4;
          do
          {
            *v17++ = *(_DWORD *)v8;
            --v16;
          }
          while (v16 > 1);
          a4 += 4 * result[8];
          if (++v14 == v7)
            goto LABEL_29;
        }
      }
      goto LABEL_45;
    }
    if (v9)
    {
      while (a4)
      {
        a4 += 4 * result[8];
        if (!--v7)
          goto LABEL_29;
      }
LABEL_45:
      sub_239EBF5BC((_QWORD *)a2, a2);
    }
    a4 += (4 * (v7 - 1) + 4) * result[8];
  }
LABEL_29:
  *(_QWORD *)a2 = a4;
  if (!a4 && v9)
    sub_239EBF50C((uint64_t)result, a2);
  if (v9 >= 1)
  {
    v25 = v9 & 0x3FFFFFFFFFFFFFFFLL;
    v26 = v25 - (v25 != 0) + 1;
    if (v26 < 0x10)
      goto LABEL_37;
    v27 = 4 * v25;
    if (!v25)
      v27 = 4;
    if (a4 < (unint64_t)(v8 + 1) && (unint64_t)v8 < a4 + v27)
    {
LABEL_37:
      v28 = (_DWORD *)a4;
LABEL_38:
      v29 = v25 + 1;
      do
      {
        *v28++ = *(_DWORD *)v8;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v28 = (_DWORD *)(a4 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
    v30 = vld1q_dup_f32(v8);
    v31 = (float32x4_t *)(a4 + 16);
    v32 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v31[-1] = v30;
      *v31 = v30;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_38;
  }
  return result;
}

unsigned int *sub_23948CB48(unsigned int *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15[7];
  unsigned int v16;
  unsigned int v17;
  unint64_t v18[2];

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 20);
  if (v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0 && v4 != 0)
  {
    v9 = (uint64_t)result;
    v15[0] = 0;
    v15[1] = v3 - 1;
    v10 = *(_DWORD *)(a2 + 28);
    v15[2] = *(_DWORD *)(a2 + 24);
    v15[3] = v2 - 1;
    v15[4] = v10;
    v15[5] = v5 - 1;
    v11 = *(_DWORD *)(a2 + 32);
    v12 = *(_DWORD *)(a2 + 36);
    v13 = *(_QWORD *)a2;
    v18[0] = 0;
    v18[1] = 0;
    v15[6] = v11;
    v16 = v4 - 1;
    v17 = v12;
    if (v4 != 1)
    {
      v14 = 0;
      do
      {
        sub_23948CC08(v15, v18, v9, v13);
        v13 += 4 * v17;
        ++v14;
      }
      while (v14 < v16);
    }
    return sub_23948CC08(v15, v18, v9, v13);
  }
  return result;
}

unsigned int *sub_23948CC08(unsigned int *result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v5;
  const float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;

  v4 = result[2] | ((unint64_t)result[4] << 32);
  *a2 = a4;
  a2[1] = v4;
  v5 = result[5];
  v6 = *(const float **)(a3 + 16);
  v7 = **(_QWORD **)(a3 + 8);
  if (v5)
  {
    if (v7 >= 1)
    {
      v8 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      v9 = 4 * v7;
      if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
      {
        v10 = 1;
      }
      else
      {
        v9 = 4;
        v10 = 0;
      }
      v11 = v8 - v10 + 1;
      if (v11 >= 8)
      {
        v16 = 0;
        while (a4)
        {
          if (a4 < (unint64_t)(v6 + 1))
          {
            v17 = (_DWORD *)a4;
            v18 = v7 & 0x3FFFFFFFFFFFFFFFLL;
            if ((unint64_t)v6 < a4 + v9)
              goto LABEL_25;
          }
          v17 = (_DWORD *)(a4 + 4 * (v11 & 0xFFFFFFFFFFFFFFF8));
          v19 = vld1q_dup_f32(v6);
          v20 = (float32x4_t *)(a4 + 16);
          v21 = v11 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v20[-1] = v19;
            *v20 = v19;
            v20 += 2;
            v21 -= 8;
          }
          while (v21);
          v18 = v8 - (v11 & 0xFFFFFFFFFFFFFFF8);
          if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_25:
            v22 = v18 + 1;
            do
            {
              *v17++ = *(_DWORD *)v6;
              --v22;
            }
            while (v22 > 1);
          }
          a4 += 4 * result[6];
          if (++v16 == v5)
            goto LABEL_29;
        }
      }
      else
      {
        v12 = 0;
        v13 = v8 + 1;
        while (a4)
        {
          v14 = v13;
          v15 = (_DWORD *)a4;
          do
          {
            *v15++ = *(_DWORD *)v6;
            --v14;
          }
          while (v14 > 1);
          a4 += 4 * result[6];
          if (++v12 == v5)
            goto LABEL_29;
        }
      }
      goto LABEL_45;
    }
    if (v7)
    {
      while (a4)
      {
        a4 += 4 * result[6];
        if (!--v5)
          goto LABEL_29;
      }
LABEL_45:
      sub_239EBF5BC(a2, (uint64_t)a2);
    }
    a4 += (4 * (v5 - 1) + 4) * result[6];
  }
LABEL_29:
  *a2 = a4;
  if (!a4 && v7)
    sub_239EBF50C((uint64_t)result, (uint64_t)a2);
  if (v7 >= 1)
  {
    v23 = v7 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = v23 - (v23 != 0) + 1;
    if (v24 < 0x10)
      goto LABEL_37;
    v25 = 4 * v23;
    if (!v23)
      v25 = 4;
    if (a4 < (unint64_t)(v6 + 1) && (unint64_t)v6 < a4 + v25)
    {
LABEL_37:
      v26 = (_DWORD *)a4;
LABEL_38:
      v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v6;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v26 = (_DWORD *)(a4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = vld1q_dup_f32(v6);
    v29 = (float32x4_t *)(a4 + 16);
    v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_38;
  }
  return result;
}

_DWORD *sub_23948CE18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  const float *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  unint64_t v35;
  unsigned int v36;

  v6 = a2;
  v7 = (_DWORD *)a1;
  if (*(_DWORD *)(a1 + 28))
  {
    v8 = 0;
    while (1)
    {
      v9 = a4;
      if (v7[5])
        break;
LABEL_3:
      a1 = (uint64_t)sub_23948D0D0(v7, v6, a3, v9);
      a4 += 4 * v7[8];
      if (++v8 >= v7[7])
        goto LABEL_47;
    }
    v10 = 0;
    v9 = a4;
    while (1)
    {
      v11 = v7[2];
      *(_QWORD *)v6 = v9;
      *(_DWORD *)(v6 + 8) = v11;
      v12 = v7[3];
      v13 = *(const float **)(a3 + 16);
      v14 = **(_QWORD **)(a3 + 8);
      v15 = v9;
      if (v12)
      {
        if (v14 >= 1)
        {
          v16 = 0;
          v17 = v14 & 0x3FFFFFFFFFFFFFFFLL;
          if ((v14 & 0x3FFFFFFFFFFFFFFFLL) != 0)
            v18 = -4;
          else
            v18 = 0;
          v19 = v18 + 4 * v14;
          v20 = v17 - ((v14 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
          a1 = v20 & 0xFFFFFFFFFFFFFFF8;
          a2 = 4 * (v20 & 0xFFFFFFFFFFFFFFF8);
          v15 = v9;
          while (v15)
          {
            v21 = (_DWORD *)v15;
            v22 = v14 & 0x3FFFFFFFFFFFFFFFLL;
            if (v20 < 8)
              goto LABEL_22;
            if (v15 < (unint64_t)(v13 + 1))
            {
              v21 = (_DWORD *)v15;
              v22 = v14 & 0x3FFFFFFFFFFFFFFFLL;
              if ((unint64_t)v13 < v15 + v19 + 4)
                goto LABEL_22;
            }
            v21 = (_DWORD *)(v15 + a2);
            v23 = vld1q_dup_f32(v13);
            v24 = (float32x4_t *)(v15 + 16);
            v25 = v20 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v24[-1] = v23;
              *v24 = v23;
              v24 += 2;
              v25 -= 8;
            }
            while (v25);
            v22 = v17 - (v20 & 0xFFFFFFFFFFFFFFF8);
            if (v20 != a1)
            {
LABEL_22:
              v26 = v22 + 1;
              do
              {
                *v21++ = *(_DWORD *)v13;
                --v26;
              }
              while (v26 > 1);
            }
            v15 += 4 * v7[4];
            if (++v16 == v12)
              goto LABEL_28;
          }
          goto LABEL_51;
        }
        v15 = v9;
        if (v14)
        {
          while (v15)
          {
            v15 += 4 * v7[4];
            if (!--v12)
              goto LABEL_28;
          }
LABEL_51:
          sub_239EBF5BC((_QWORD *)v6, a2);
        }
        *(_QWORD *)v6 = v9 + (4 * (v12 - 1) + 4) * v7[4];
      }
      else
      {
LABEL_28:
        *(_QWORD *)v6 = v15;
        if (v14)
          v27 = v15 == 0;
        else
          v27 = 0;
        if (v27)
          sub_239EBF50C(a1, a2);
        if (v14 < 1)
          goto LABEL_7;
        v28 = v14 & 0x3FFFFFFFFFFFFFFFLL;
        v29 = v28 - (v28 != 0) + 1;
        if (v29 >= 0x10
          && (v28 ? (v30 = -4) : (v30 = 0),
              v15 >= (unint64_t)(v13 + 1) || (unint64_t)v13 >= v15 + v30 + 4 * v28 + 4))
        {
          v31 = (_DWORD *)(v15 + 4 * (v29 & 0xFFFFFFFFFFFFFFF8));
          v28 -= v29 & 0xFFFFFFFFFFFFFFF8;
          v33 = vld1q_dup_f32(v13);
          v34 = (float32x4_t *)(v15 + 16);
          v35 = v29 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v34[-1] = v33;
            *v34 = v33;
            v34 += 2;
            v35 -= 8;
          }
          while (v35);
          if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_7;
        }
        else
        {
          v31 = (_DWORD *)v15;
        }
        v32 = v28 + 1;
        do
        {
          *v31++ = *(_DWORD *)v13;
          --v32;
        }
        while (v32 > 1);
      }
LABEL_7:
      v9 += 4 * v7[6];
      if (++v10 >= v7[5])
        goto LABEL_3;
    }
  }
LABEL_47:
  if (v7[5])
  {
    v36 = 0;
    do
    {
      sub_23948D0D0(v7, v6, a3, a4);
      a4 += 4 * v7[6];
      ++v36;
    }
    while (v36 < v7[5]);
  }
  return sub_23948D0D0(v7, v6, a3, a4);
}

_DWORD *sub_23948D0D0(_DWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  const float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;

  v4 = result[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = result[3];
  v6 = *(const float **)(a3 + 16);
  v7 = **(_QWORD **)(a3 + 8);
  if (v5)
  {
    if (v7 >= 1)
    {
      v8 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      v9 = 4 * v7;
      if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
      {
        v10 = 1;
      }
      else
      {
        v9 = 4;
        v10 = 0;
      }
      v11 = v8 - v10 + 1;
      if (v11 >= 8)
      {
        v16 = 0;
        while (a4)
        {
          if (a4 < (unint64_t)(v6 + 1))
          {
            v17 = (_DWORD *)a4;
            v18 = v7 & 0x3FFFFFFFFFFFFFFFLL;
            if ((unint64_t)v6 < a4 + v9)
              goto LABEL_25;
          }
          v17 = (_DWORD *)(a4 + 4 * (v11 & 0xFFFFFFFFFFFFFFF8));
          v19 = vld1q_dup_f32(v6);
          v20 = (float32x4_t *)(a4 + 16);
          v21 = v11 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v20[-1] = v19;
            *v20 = v19;
            v20 += 2;
            v21 -= 8;
          }
          while (v21);
          v18 = v8 - (v11 & 0xFFFFFFFFFFFFFFF8);
          if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_25:
            v22 = v18 + 1;
            do
            {
              *v17++ = *(_DWORD *)v6;
              --v22;
            }
            while (v22 > 1);
          }
          a4 += 4 * result[4];
          if (++v16 == v5)
            goto LABEL_29;
        }
      }
      else
      {
        v12 = 0;
        v13 = v8 + 1;
        while (a4)
        {
          v14 = v13;
          v15 = (_DWORD *)a4;
          do
          {
            *v15++ = *(_DWORD *)v6;
            --v14;
          }
          while (v14 > 1);
          a4 += 4 * result[4];
          if (++v12 == v5)
            goto LABEL_29;
        }
      }
      goto LABEL_45;
    }
    if (v7)
    {
      while (a4)
      {
        a4 += 4 * result[4];
        if (!--v5)
          goto LABEL_29;
      }
LABEL_45:
      sub_239EBF5BC((_QWORD *)a2, a2);
    }
    a4 += (4 * (v5 - 1) + 4) * result[4];
  }
LABEL_29:
  *(_QWORD *)a2 = a4;
  if (!a4 && v7)
    sub_239EBF50C((uint64_t)result, a2);
  if (v7 >= 1)
  {
    v23 = v7 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = v23 - (v23 != 0) + 1;
    if (v24 < 0x10)
      goto LABEL_37;
    v25 = 4 * v23;
    if (!v23)
      v25 = 4;
    if (a4 < (unint64_t)(v6 + 1) && (unint64_t)v6 < a4 + v25)
    {
LABEL_37:
      v26 = (_DWORD *)a4;
LABEL_38:
      v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v6;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v26 = (_DWORD *)(a4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = vld1q_dup_f32(v6);
    v29 = (float32x4_t *)(a4 + 16);
    v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_38;
  }
  return result;
}

float sub_23948D2DC(_DWORD *a1, uint64_t a2, _DWORD **a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  float result;

  v4 = a1[5];
  v5 = a1[3];
  if (!v4)
  {
    v6 = a1[1];
    if (v5)
      goto LABEL_14;
LABEL_25:
    v22 = *a3;
    if (!v6)
      goto LABEL_35;
    goto LABEL_26;
  }
  v6 = a1[1];
  v7 = *a3;
  v8 = a1[6];
  if (v5)
  {
    v9 = a1[4];
    if (!v6)
    {
      v35 = 4 * v8;
      v36 = 4 * v9;
      do
      {
        v37 = a4;
        v38 = v5;
        do
        {
          *v37 = *v7;
          v37 = (_DWORD *)((char *)v37 + v36);
          --v38;
        }
        while (v38);
        *v37 = *v7;
        a4 = (_DWORD *)((char *)a4 + v35);
        ++v6;
      }
      while (v6 != v4);
      v22 = *a3;
      v23 = a1[4];
      do
      {
LABEL_34:
        *a4 = *v22;
        a4 += v23;
        --v5;
      }
      while (v5);
      goto LABEL_35;
    }
    v10 = 0;
    v11 = 4 * v8;
    v12 = v9;
    v13 = 4 * a1[2];
    v14 = &a4[v12];
    do
    {
      v15 = 0;
      v16 = v14;
      v17 = a4;
      do
      {
        v18 = v16;
        v19 = v17;
        v20 = v6;
        do
        {
          *v19 = *v7;
          v19 = (_DWORD *)((char *)v19 + v13);
          --v20;
        }
        while (v20);
        *v19 = *v7;
        v17 = (_DWORD *)((char *)v17 + v12 * 4);
        ++v15;
        v16 = &v18[v12];
      }
      while (v15 != v5);
      v21 = v6;
      do
      {
        *v18 = *v7;
        v18 = (_DWORD *)((char *)v18 + v13);
        --v21;
      }
      while (v21);
      *v18 = *v7;
      a4 = (_DWORD *)((char *)a4 + v11);
      ++v10;
      v14 = (_DWORD *)((char *)v14 + v11);
    }
    while (v10 != v4);
LABEL_14:
    v22 = *a3;
    v23 = a1[4];
    if (v6)
    {
      v24 = 0;
      v25 = 4 * v23;
      v26 = 4 * a1[2];
      do
      {
        v27 = a4;
        v28 = v6;
        do
        {
          *v27 = *v22;
          v27 = (_DWORD *)((char *)v27 + v26);
          --v28;
        }
        while (v28);
        *v27 = *v22;
        a4 = (_DWORD *)((char *)a4 + v25);
        ++v24;
      }
      while (v24 != v5);
LABEL_26:
      v34 = 4 * a1[2];
      do
      {
        *a4 = *v22;
        a4 = (_DWORD *)((char *)a4 + v34);
        --v6;
      }
      while (v6);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v6)
  {
    v29 = 0;
    v30 = 4 * v8;
    v31 = 4 * a1[2];
    do
    {
      v32 = a4;
      v33 = v6;
      do
      {
        *v32 = *v7;
        v32 = (_DWORD *)((char *)v32 + v31);
        --v33;
      }
      while (v33);
      *v32 = *v7;
      a4 = (_DWORD *)((char *)a4 + v30);
      ++v29;
    }
    while (v29 != v4);
    goto LABEL_25;
  }
  do
  {
    *a4 = *v7;
    a4 += v8;
    --v4;
  }
  while (v4);
  v22 = *a3;
LABEL_35:
  result = *(float *)v22;
  *a4 = *v22;
  return result;
}

float *sub_23948D4FC(uint64_t a1, unint64_t a2, float *a3, size_t __sz)
{
  float *v6;
  uint64_t v8;
  float *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  int64_t v16;
  _QWORD *v17;
  float *v18;
  int64_t v19;
  unint64_t v20;
  float *v21;
  unint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const float *v39;
  float *v40;
  float *v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  const float *v51;
  float *v52;
  float *v53;
  float32x4x3_t v54;
  float32x4x3_t v55;
  float32x4x3_t v56;
  float32x4x3_t v57;

  v6 = (float *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(float **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) < __sz)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_63;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_63:
      sub_2394189F8();
    v13 = 3 * v12;
    result = (float *)operator new(12 * v12);
    v14 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (float *)memcpy(result, v6, 12 * (((char *)a3 - (char *)v6 - 12) / 0xCuLL) + 12);
      v15 = &v14[3 * (((char *)a3 - (char *)v6 - 12) / 0xCuLL) + 3];
    }
    v16 = (char *)v15 - (char *)v14;
    v17 = (_QWORD *)(a1 + 8);
    goto LABEL_30;
  }
  v18 = *(float **)(a1 + 8);
  v17 = (_QWORD *)(a1 + 8);
  v14 = v18;
  v19 = (char *)v18 - (char *)result;
  v20 = 0xAAAAAAAAAAAAAAABLL * (v18 - result);
  if (v20 >= __sz)
  {
    if ((float *)a2 == a3)
    {
      v29 = (char *)result;
    }
    else
    {
      v28 = (unint64_t)a3 - a2 - 12;
      if (v28 < 0xB4
        || ((v42 = v28 / 0xC, v43 = 12 * v42 + 12, (unint64_t)(result + 2) < a2 + v43)
          ? (v44 = a2 + 8 >= (unint64_t)result + v43)
          : (v44 = 1),
            v44 ? (v45 = 0) : (v45 = 1),
            (unint64_t)&result[3 * v42 + 2] > a2
          ? (v46 = (unint64_t)result >= a2 + 12 * v42 + 8)
          : (v46 = 1),
            !v46 || (v45 & 1) != 0))
      {
        v29 = (char *)result;
        v30 = (float *)a2;
      }
      else
      {
        v47 = v42 + 1;
        v48 = (v42 + 1) & 0x3FFFFFFFFFFFFFF8;
        v29 = (char *)&result[3 * v48];
        v30 = (float *)(a2 + 12 * v48);
        v49 = v48;
        v50 = result;
        do
        {
          v51 = v6;
          v55 = vld3q_f32(v51);
          v51 += 12;
          v57 = vld3q_f32(v51);
          v52 = v50 + 24;
          vst3q_f32(v50, v55);
          v53 = v50 + 12;
          vst3q_f32(v53, v57);
          v6 += 24;
          v50 = v52;
          v49 -= 8;
        }
        while (v49);
        if (v47 == v48)
          goto LABEL_29;
      }
      do
      {
        *(float *)v29 = *v30;
        *((float *)v29 + 1) = v30[1];
        *((float *)v29 + 2) = v30[2];
        v29 += 12;
        v30 += 3;
      }
      while (v30 != a3);
    }
LABEL_29:
    v16 = v29 - (char *)result;
    v14 = result;
    goto LABEL_30;
  }
  v21 = (float *)(a2 + 12 * v20);
  if (v14 != result)
  {
    v22 = v19 - 12;
    if (v22 < 0xB4
      || ((v31 = v22 / 0xC, v32 = 12 * v31 + 12, (unint64_t)(result + 2) < a2 + v32)
        ? (v33 = a2 + 8 >= (unint64_t)result + v32)
        : (v33 = 1),
          v33 ? (v34 = 0) : (v34 = 1),
          (unint64_t)&result[3 * v31 + 2] > a2
        ? (v35 = (unint64_t)result >= a2 + 12 * v31 + 8)
        : (v35 = 1),
          !v35 || (v34 & 1) != 0))
    {
      v23 = result;
      v24 = (float *)a2;
    }
    else
    {
      v36 = v31 + 1;
      v37 = (v31 + 1) & 0x3FFFFFFFFFFFFFF8;
      v23 = &result[3 * v37];
      v24 = (float *)(a2 + 12 * v37);
      v38 = v37;
      do
      {
        v39 = v6;
        v54 = vld3q_f32(v39);
        v39 += 12;
        v56 = vld3q_f32(v39);
        v40 = result + 24;
        vst3q_f32(result, v54);
        v41 = result + 12;
        vst3q_f32(v41, v56);
        v6 += 24;
        result = v40;
        v38 -= 8;
      }
      while (v38);
      if (v36 == v37)
        goto LABEL_19;
    }
    do
    {
      *v23 = *v24;
      v23[1] = v24[1];
      v23[2] = v24[2];
      v24 += 3;
      v23 += 3;
    }
    while (v24 != v21);
  }
LABEL_19:
  v25 = v14;
  if (v21 != a3)
  {
    v26 = v14;
    do
    {
      v27 = *(_QWORD *)v21;
      v26[2] = v21[2];
      *(_QWORD *)v26 = v27;
      v26 += 3;
      v21 += 3;
      v25 += 3;
    }
    while (v21 != a3);
  }
  v16 = (char *)v25 - (char *)v14;
LABEL_30:
  *v17 = (char *)v14 + v16;
  return result;
}

void sub_23948D87C(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  _QWORD *v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51[2];
  unint64_t v52;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (_QWORD *)(a1 + 8);
  v10 = *a2;
  v11 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v11)
    goto LABEL_21;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a2;
    if (v10 >= *(_QWORD *)&v11)
      v13 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*v9 + 8 * v13);
  if (!v14 || (v15 = (_QWORD *)*v14) == 0)
  {
LABEL_21:
    if ((unint64_t)(*(_QWORD *)(a1 + 32) + 1) <= *(_QWORD *)(a1 + 48))
    {
      v22 = operator new(0x18uLL);
      v23 = *(_QWORD **)(a1 + 64);
      *v22 = a1 + 56;
      v22[1] = v23;
      v22[2] = v10;
      *v23 = v22;
      v24 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v24;
      sub_23948DDD4(a1 + 8, a2, a2, a3);
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
    {
      v19 = *(uint64_t **)(a1 + 56);
      v20 = v19[2];
      v52 = v20;
      if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
      {
        v29 = v20;
        if (v20 >= *(_QWORD *)&v11)
          v29 = v20 % *(_QWORD *)&v11;
        v21 = *(_QWORD **)(*v9 + 8 * v29);
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      else
      {
        v21 = *(_QWORD **)(*v9 + 8 * (v20 & (*(_QWORD *)&v11 - 1)));
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      v31 = (_QWORD *)v21[3];
      v30 = (std::__shared_weak_count *)v21[4];
      v51[0] = v31;
      v51[1] = &v30->__vftable;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v19 = *(uint64_t **)(a1 + 56);
        v18 = *(_QWORD *)(a1 + 72);
      }
      v34 = *v19;
      *(_QWORD *)(v34 + 8) = v19[1];
      *(_QWORD *)v19[1] = v34;
      *(_QWORD *)(a1 + 72) = v18 - 1;
      operator delete(v19);
      sub_23946B080((_QWORD *)(a1 + 8), &v52);
      v35 = operator new(0x18uLL);
      v36 = *a2;
      v37 = *(_QWORD **)(a1 + 64);
      *v35 = a1 + 56;
      v35[1] = v37;
      v35[2] = v36;
      *v37 = v35;
      v38 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v35;
      *(_QWORD *)(a1 + 72) = v38;
      sub_23948DDD4(a1 + 8, a2, a2, a3);
      v39 = v52;
      if (v30)
      {
        v40 = (unint64_t *)&v30->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_QWORD *)a4 = v39;
        *(_QWORD *)(a4 + 8) = v31;
        *(_QWORD *)(a4 + 16) = v30;
        *(_BYTE *)(a4 + 24) = 1;
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        goto LABEL_52;
      }
      *(_QWORD *)a4 = v52;
      *(_QWORD *)(a4 + 8) = v31;
      *(_QWORD *)(a4 + 16) = 0;
    }
    else
    {
      v26 = *a3;
      v25 = a3[1];
      if (v25)
      {
        v27 = (unint64_t *)(v25 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      *(_QWORD *)a4 = v10;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v25;
    }
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_52;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == v10)
      {
        if (v15[2] == v10)
          goto LABEL_53;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_21;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == v10)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_21;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_21;
  }
  if (v15[2] != v10)
    goto LABEL_11;
LABEL_53:
  v51[0] = a2;
  v43 = sub_23948E120(a1 + 8, a2, (uint64_t)&unk_239EC6E98, v51);
  v45 = *a3;
  v44 = a3[1];
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)v43[4];
  v43[3] = v45;
  v43[4] = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_29:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_52:
  std::mutex::unlock(v8);
}

void sub_23948DC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_23948DC50(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23948DC64(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v7 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_25:
    sub_239A444D4((uint64_t)"unknown file", 230, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_21;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_25;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_21:
  v16 = v12[4];
  *a3 = v12[3];
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::mutex::unlock(v6);
}

void sub_23948DDC0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23948DDD4(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v12[2] = *a3;
  v12[3] = v17;
  v12[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23948E10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23948E120(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23948E43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23948E450(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23948E460(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948E490(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 224))
  {
    sub_239416DA0(a1 + 144);
    nullsub_4(a1 + 136);
  }
  return sub_239916980(a1 + 80);
}

void sub_23948E4D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23948E4E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23948E510(uint64_t a1)
{
  return sub_239916980(a1 + 80);
}

void sub_23948E51C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v4;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v18 = v4;
    v19 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v18 = v4;
    v19 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  sub_239423D38(a2, &v18, (uint64_t)&v16, v9, *(_DWORD *)(a1 + 56));
  nullsub_4(&v16);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23948E62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nullsub_4(&a9);
  sub_239416DA0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_23948E650(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 248, a3, a4);
}

uint64_t sub_23948E658(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t (**v17)();
  char v18;
  std::__shared_weak_count *v19;
  void *__p;
  char v21;
  char v22;
  _BYTE v23[176];

  *(_QWORD *)a1 = 0;
  v3 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *a2;
  v4 = a2[1];
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_239495940(v23, v5, v4, &__p, 0);
  if (v22 && v21 < 0)
    operator delete(__p);
  sub_23948E834((uint64_t)v23, (uint64_t)&v14);
  if (v18)
  {
    sub_239A444D4((uint64_t)"unknown file", 31, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v6 = operator new();
  *(_OWORD *)v6 = v14;
  v7 = v15;
  v15 = 0;
  v14 = 0uLL;
  *(_QWORD *)(v6 + 16) = v7;
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v6;
  if (v8)
  {
    v9 = sub_23964F698(v8);
    MEMORY[0x23B83E31C](v9, 0x60C40CE5A77A8);
  }
  v17 = &off_250ADC870;
  v10 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  nullsub_4(&v17);
  if (v16)
    sub_23964F698((uint64_t)&v14);
  sub_239495944(v23);
  return a1;
}

void sub_23948E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t *v21;

  sub_23948EA5C((uint64_t)&a9);
  sub_239495944(&a21);
  sub_23948EAF8(v21);
  _Unwind_Resume(a1);
}

void sub_23948E808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t *v23;

  if (a23)
  {
    if (a22 < 0)
    {
      operator delete(__p);
      sub_23948EAF8(v23);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x23948E7F8);
}

uint64_t sub_23948E834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  sub_239650328(a1, (uint64_t)&v27);
  v4 = v29;
  if (v29)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = &off_250ADC870;
    *(_BYTE *)(a2 + 40) = v4;
    v5 = v31;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = (std::__shared_weak_count *)operator new(0xC8uLL);
    sub_2394900BC((uint64_t)v8, a1);
    v23 = v8 + 1;
    v24 = v8;
    v9 = v27;
    v27 = 0;
    v22 = v9;
    sub_239490A74(&v25, (uint64_t *)&v23, &v22);
    *(_OWORD *)a2 = v25;
    v10 = v26;
    v26 = 0;
    v25 = 0uLL;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
    *(_QWORD *)(a2 + 32) = &off_250ADC870;
    *(_BYTE *)(a2 + 40) = v29;
    v11 = v31;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_23964F698((uint64_t)&v25);
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v28 = &off_250ADC870;
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  nullsub_4(&v28);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23948E9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_239416DA0((uint64_t)va);
  sub_239490014((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23948EA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_239490014(&a16);
  _Unwind_Resume(a1);
}

void sub_23948EA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239490014((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23948EA5C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = &off_250ADC870;
  v2 = a1 + 32;
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      nullsub_4(v2);
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
  }
  nullsub_4(a1 + 32);
  if (*(_BYTE *)(a1 + 24))
LABEL_6:
    sub_23964F698(a1);
  return a1;
}

uint64_t *sub_23948EAF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_23964F698(v2);
    MEMORY[0x23B83E31C](v3, 0x60C40CE5A77A8);
  }
  return a1;
}

BOOL sub_23948EB40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v13;
  int v14;
  int v15;
  _BOOL8 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  int v47;
  char *v48;
  int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  __int16 v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  int v71;
  char *v72;
  char *v73;
  char *v74;
  void *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  BOOL v82;
  int v83;
  BOOL v84;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v96;
  BOOL v98;
  int v99;
  BOOL v100;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  BOOL v114;
  int v115;
  BOOL v116;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  BOOL v128;
  BOOL v130;
  int v131;
  BOOL v132;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  uint64_t (**v159)();
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  __int16 v166;
  char v167;
  int v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int v172;
  uint64_t (**v173)();
  uint64_t v174;
  std::__shared_weak_count *v175;
  __int128 v176;
  __int128 v177;
  char v178;
  int v179;
  void *__p;
  char *v181;
  unint64_t v182;
  __int128 v183;
  char v184;
  _OWORD v185[3];
  int v186;
  _QWORD v187[2];
  std::__shared_weak_count *v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  __int16 v193;
  unsigned __int8 v194;
  __int128 v195;
  char v196;
  _OWORD v197[3];
  int v198;
  _QWORD v199[2];
  std::__shared_weak_count *v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  __int16 v205;
  unsigned __int8 v206;
  uint64_t v207;
  _BYTE v208[12];
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;

  if (!*a1)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)*a1 + 48);
  if (!*(_BYTE *)(v7 + 80))
    return 0;
  if (*(_BYTE *)(v7 + 52))
  {
    v13 = *(_DWORD *)(v7 + 48);
    if (*(_BYTE *)(v7 + 60))
      goto LABEL_5;
  }
  else
  {
    v13 = 0;
    if (*(_BYTE *)(v7 + 60))
    {
LABEL_5:
      v14 = *(_DWORD *)(v7 + 56);
      if (*(_BYTE *)(v7 + 68))
        goto LABEL_6;
LABEL_11:
      v15 = 0;
      v149 = a7;
      if (!*(_BYTE *)(v7 + 76))
        goto LABEL_275;
      goto LABEL_12;
    }
  }
  v14 = 0;
  if (!*(_BYTE *)(v7 + 68))
    goto LABEL_11;
LABEL_6:
  v15 = *(_DWORD *)(v7 + 64);
  v149 = a7;
  if (!*(_BYTE *)(v7 + 76))
LABEL_275:
    sub_239EBF5EC();
LABEL_12:
  if (*(_DWORD *)(v7 + 72) != 1)
    goto LABEL_275;
  v17 = *(_QWORD *)(a2 + 64);
  sub_239644B14(&v155, v13, v14, v15, 1);
  LOBYTE(v195) = 0;
  v196 = 0;
  LODWORD(v185[0]) = 65;
  LOBYTE(v169) = 0;
  LOBYTE(v173) = 0;
  sub_23964417C((uint64_t)v197, v17, &v155, &v195, (int *)v185, (uint64_t)&v169);
  if ((_BYTE)v173)
  {
    nullsub_4((char *)&v170 + 8);
    v18 = (std::__shared_weak_count *)v170;
    if ((_QWORD)v170)
    {
      v19 = (unint64_t *)(v170 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    nullsub_4(&v169);
  }
  v21 = *(_QWORD *)(a3 + 64);
  sub_239644B14(&v155, v13, v14, v15, 1);
  LOBYTE(v183) = 0;
  v184 = 0;
  LODWORD(v207) = 65;
  LOBYTE(v169) = 0;
  LOBYTE(v173) = 0;
  sub_23964417C((uint64_t)v185, v21, &v155, &v183, (int *)&v207, (uint64_t)&v169);
  if ((_BYTE)v173)
  {
    nullsub_4((char *)&v170 + 8);
    v22 = (std::__shared_weak_count *)v170;
    if ((_QWORD)v170)
    {
      v23 = (unint64_t *)(v170 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    nullsub_4(&v169);
  }
  __p = 0;
  v181 = 0;
  v182 = 0;
  v155 = v197[0];
  v156 = v197[1];
  v157 = v197[2];
  v158 = v198;
  LOBYTE(v159) = 0;
  v167 = 0;
  v25 = v206;
  if (v206)
  {
    v159 = &off_250ADB210;
    v26 = v199[1];
    v27 = v200;
    if (v200)
    {
      p_shared_owners = (unint64_t *)&v200->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
      v30 = v203;
      v31 = v204;
      v32 = v205;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    else
    {
      v30 = v203;
      v31 = v204;
      v32 = v205;
    }
    v160 = v26;
    v161 = v27;
    v162 = v201;
    v163 = v202;
    v164 = v30;
    v165 = v31;
    v166 = v32;
    if (v27)
    {
      v34 = (unint64_t *)&v27->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v167 = 1;
  }
  v168 = 1;
  v179 = -1;
  v169 = v155;
  v170 = v156;
  v171 = v157;
  v172 = v158;
  LOBYTE(v173) = 0;
  v178 = 0;
  if (v25)
  {
    v173 = &off_250ADB210;
    v36 = v160;
    v37 = v161;
    if (v161)
    {
      v38 = (unint64_t *)&v161->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v40 = v164;
      v41 = v165;
      v42 = v166;
      do
        v43 = __ldxr(v38);
      while (__stxr(v43 + 1, v38));
    }
    else
    {
      v40 = v164;
      v41 = v165;
      v42 = v166;
    }
    v174 = v36;
    v175 = v37;
    *(_QWORD *)&v176 = v162;
    DWORD2(v176) = v163;
    *(_QWORD *)&v177 = v40;
    DWORD2(v177) = v41;
    WORD6(v177) = v42;
    if (v37)
    {
      v44 = (unint64_t *)&v37->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v178 = 1;
  }
  v179 = 1;
  v46 = v181;
  if ((unint64_t)v181 >= v182)
  {
    v48 = sub_239490B68((char **)&__p, (uint64_t)&v169);
  }
  else
  {
    *v181 = 0;
    *((_DWORD *)v46 + 30) = -1;
    v47 = v179;
    if (v179 != -1)
    {
      ((void (*)(uint64_t *, char *, __int128 *))off_250ADC900[v179])(&v207, v46, &v169);
      *((_DWORD *)v46 + 30) = v47;
    }
    v48 = v46 + 128;
  }
  v181 = v48;
  if (v179 != -1)
    ((void (*)(uint64_t *, __int128 *))off_250ADC888[v179])(&v207, &v169);
  v179 = -1;
  if (v168 != -1)
    ((void (*)(uint64_t *, __int128 *))off_250ADC888[v168])(&v207, &v155);
  v155 = v185[0];
  v156 = v185[1];
  v157 = v185[2];
  v158 = v186;
  LOBYTE(v159) = 0;
  v167 = 0;
  v49 = v194;
  if (v194)
  {
    v159 = &off_250ADB210;
    v50 = v187[1];
    v51 = v188;
    if (v188)
    {
      v52 = (unint64_t *)&v188->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v54 = v191;
      v55 = v192;
      v56 = v193;
      do
        v57 = __ldxr(v52);
      while (__stxr(v57 + 1, v52));
    }
    else
    {
      v54 = v191;
      v55 = v192;
      v56 = v193;
    }
    v160 = v50;
    v161 = v51;
    v162 = v189;
    v163 = v190;
    v164 = v54;
    v165 = v55;
    v166 = v56;
    if (v51)
    {
      v58 = (unint64_t *)&v51->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v167 = 1;
  }
  v168 = 1;
  v179 = -1;
  v169 = v155;
  v170 = v156;
  v171 = v157;
  v172 = v158;
  LOBYTE(v173) = 0;
  v178 = 0;
  if (v49)
  {
    v173 = &off_250ADB210;
    v60 = v160;
    v61 = v161;
    if (v161)
    {
      v62 = (unint64_t *)&v161->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      v64 = v164;
      v65 = v165;
      v66 = v166;
      do
        v67 = __ldxr(v62);
      while (__stxr(v67 + 1, v62));
    }
    else
    {
      v64 = v164;
      v65 = v165;
      v66 = v166;
    }
    v174 = v60;
    v175 = v61;
    *(_QWORD *)&v176 = v162;
    DWORD2(v176) = v163;
    *(_QWORD *)&v177 = v64;
    DWORD2(v177) = v65;
    WORD6(v177) = v66;
    if (v61)
    {
      v68 = (unint64_t *)&v61->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v178 = 1;
  }
  v179 = 1;
  v70 = v181;
  if ((unint64_t)v181 >= v182)
  {
    v72 = sub_239490B68((char **)&__p, (uint64_t)&v169);
  }
  else
  {
    *v181 = 0;
    *((_DWORD *)v70 + 30) = -1;
    v71 = v179;
    if (v179 != -1)
    {
      ((void (*)(uint64_t *, char *, __int128 *))off_250ADC900[v179])(&v207, v70, &v169);
      *((_DWORD *)v70 + 30) = v71;
    }
    v72 = v70 + 128;
  }
  v181 = v72;
  if (v179 != -1)
    ((void (*)(uint64_t *, __int128 *))off_250ADC888[v179])(&v207, &v169);
  v179 = -1;
  if (v168 != -1)
    ((void (*)(uint64_t *, __int128 *))off_250ADC888[v168])(&v207, &v155);
  sub_23964F5CC(*a1, &__p, 0, 0, (uint64_t)&v155);
  v16 = BYTE8(v155) == 0;
  if (BYTE8(v155))
  {
    sub_23948FF04((uint64_t)&v155);
    v73 = (char *)__p;
    if (__p)
      goto LABEL_103;
LABEL_261:
    if (!v194)
      goto LABEL_110;
    goto LABEL_262;
  }
  sub_239490E34(v157, (uint64_t)&v207);
  v78 = *(_QWORD *)&v208[4];
  v79 = v209;
  if (*(_DWORD *)&v208[8])
    v80 = *(_DWORD *)&v208[4] == 0;
  else
    v80 = 1;
  v82 = v80 || (_DWORD)v209 == 0 || HIDWORD(v209) == 0;
  v83 = v82;
  if (v82)
  {
    v78 = 0;
    v79 = 0;
  }
  v150 = v207;
  v151 = v78;
  v152 = v79;
  v153 = v210;
  v154 = v211;
  if (HIDWORD(v79) * HIDWORD(v211) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((_DWORD)v78)
    v84 = (_DWORD)v79 == 0;
  else
    v84 = 1;
  if (v84 || HIDWORD(v79) == 0)
    v83 = 1;
  if (v83)
  {
    v78 = 0;
    v79 = 0;
  }
  v86 = HIDWORD(v78) * v78;
  if ((_DWORD)v79)
    v87 = v86;
  else
    v87 = 0;
  v88 = (unint64_t)(v86 * v79) << 32;
  if (!HIDWORD(v79))
    v88 = 0;
  v89 = v88 | v87;
  if (HIDWORD(v78))
    v90 = v78 << 32;
  else
    v90 = 0;
  *(_QWORD *)&v169 = v78;
  *((_QWORD *)&v169 + 1) = v79;
  *(_QWORD *)&v170 = v90 | ((_DWORD)v78 != 0);
  *((_QWORD *)&v170 + 1) = v89;
  LOBYTE(v171) = 0;
  LOBYTE(v172) = 0;
  v207 = v170;
  *(_QWORD *)v208 = v89;
  if (((v88 >> 30) & ((v88 >> 30) - 1)) != 0)
    v91 = 4;
  else
    v91 = v88 >> 30;
  sub_239490F90((uint64_t)&v173, &v150, &v207, 1, v91);
  v92 = v170;
  *(_OWORD *)a4 = v169;
  *(_OWORD *)(a4 + 16) = v92;
  *(_OWORD *)(a4 + 32) = v171;
  *(_DWORD *)(a4 + 48) = v172;
  v93 = v177;
  *(_OWORD *)(a4 + 80) = v176;
  *(_OWORD *)(a4 + 96) = v93;
  sub_23991693C((_QWORD *)(a4 + 56), &v173);
  sub_239916980((uint64_t)&v173);
  sub_239490E34(v157 + 120, (uint64_t)&v207);
  v94 = *(_QWORD *)&v208[4];
  v95 = v209;
  if (*(_DWORD *)&v208[8])
    v96 = *(_DWORD *)&v208[4] == 0;
  else
    v96 = 1;
  v98 = v96 || (_DWORD)v209 == 0 || HIDWORD(v209) == 0;
  v99 = v98;
  if (v98)
  {
    v94 = 0;
    v95 = 0;
  }
  v150 = v207;
  v151 = v94;
  v152 = v95;
  v153 = v210;
  v154 = v211;
  if (HIDWORD(v95) * HIDWORD(v211) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((_DWORD)v94)
    v100 = (_DWORD)v95 == 0;
  else
    v100 = 1;
  if (v100 || HIDWORD(v95) == 0)
    v99 = 1;
  if (v99)
  {
    v94 = 0;
    v95 = 0;
  }
  v102 = HIDWORD(v94) * v94;
  if ((_DWORD)v95)
    v103 = v102;
  else
    v103 = 0;
  v104 = (unint64_t)(v102 * v95) << 32;
  if (!HIDWORD(v95))
    v104 = 0;
  v105 = v104 | v103;
  if (HIDWORD(v94))
    v106 = v94 << 32;
  else
    v106 = 0;
  *(_QWORD *)&v169 = v94;
  *((_QWORD *)&v169 + 1) = v95;
  *(_QWORD *)&v170 = v106 | ((_DWORD)v94 != 0);
  *((_QWORD *)&v170 + 1) = v105;
  LOBYTE(v171) = 0;
  LOBYTE(v172) = 0;
  v207 = v170;
  *(_QWORD *)v208 = v105;
  if (((v104 >> 30) & ((v104 >> 30) - 1)) != 0)
    v107 = 4;
  else
    v107 = v104 >> 30;
  sub_239490F90((uint64_t)&v173, &v150, &v207, 1, v107);
  v108 = v170;
  *(_OWORD *)a5 = v169;
  *(_OWORD *)(a5 + 16) = v108;
  *(_OWORD *)(a5 + 32) = v171;
  *(_DWORD *)(a5 + 48) = v172;
  v109 = v177;
  *(_OWORD *)(a5 + 80) = v176;
  *(_OWORD *)(a5 + 96) = v109;
  sub_23991693C((_QWORD *)(a5 + 56), &v173);
  sub_239916980((uint64_t)&v173);
  sub_239490E34(v157 + 240, (uint64_t)&v207);
  v110 = *(_QWORD *)&v208[4];
  v111 = v209;
  if (*(_DWORD *)&v208[8])
    v112 = *(_DWORD *)&v208[4] == 0;
  else
    v112 = 1;
  v114 = v112 || (_DWORD)v209 == 0 || HIDWORD(v209) == 0;
  v115 = v114;
  if (v114)
  {
    v110 = 0;
    v111 = 0;
  }
  v150 = v207;
  v151 = v110;
  v152 = v111;
  v153 = v210;
  v154 = v211;
  if (HIDWORD(v111) * HIDWORD(v211) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((_DWORD)v110)
    v116 = (_DWORD)v111 == 0;
  else
    v116 = 1;
  if (v116 || HIDWORD(v111) == 0)
    v115 = 1;
  if (v115)
  {
    v110 = 0;
    v111 = 0;
  }
  v118 = HIDWORD(v110) * v110;
  if ((_DWORD)v111)
    v119 = v118;
  else
    v119 = 0;
  v120 = (unint64_t)(v118 * v111) << 32;
  if (!HIDWORD(v111))
    v120 = 0;
  v121 = v120 | v119;
  if (HIDWORD(v110))
    v122 = v110 << 32;
  else
    v122 = 0;
  *(_QWORD *)&v169 = v110;
  *((_QWORD *)&v169 + 1) = v111;
  *(_QWORD *)&v170 = v122 | ((_DWORD)v110 != 0);
  *((_QWORD *)&v170 + 1) = v121;
  LOBYTE(v171) = 0;
  LOBYTE(v172) = 0;
  v207 = v170;
  *(_QWORD *)v208 = v121;
  if (((v120 >> 30) & ((v120 >> 30) - 1)) != 0)
    v123 = 4;
  else
    v123 = v120 >> 30;
  sub_239490F90((uint64_t)&v173, &v150, &v207, 1, v123);
  v124 = v170;
  *(_OWORD *)a6 = v169;
  *(_OWORD *)(a6 + 16) = v124;
  *(_OWORD *)(a6 + 32) = v171;
  *(_DWORD *)(a6 + 48) = v172;
  v125 = v177;
  *(_OWORD *)(a6 + 80) = v176;
  *(_OWORD *)(a6 + 96) = v125;
  sub_23991693C((_QWORD *)(a6 + 56), &v173);
  sub_239916980((uint64_t)&v173);
  sub_239490E34(v157 + 360, (uint64_t)&v207);
  v126 = *(_QWORD *)&v208[4];
  v127 = v209;
  if (*(_DWORD *)&v208[8])
    v128 = *(_DWORD *)&v208[4] == 0;
  else
    v128 = 1;
  v130 = v128 || (_DWORD)v209 == 0 || HIDWORD(v209) == 0;
  v131 = v130;
  if (v130)
  {
    v126 = 0;
    v127 = 0;
  }
  v150 = v207;
  v151 = v126;
  v152 = v127;
  v153 = v210;
  v154 = v211;
  if (HIDWORD(v127) * HIDWORD(v211) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((_DWORD)v126)
    v132 = (_DWORD)v127 == 0;
  else
    v132 = 1;
  if (v132 || HIDWORD(v127) == 0)
    v131 = 1;
  if (v131)
  {
    v126 = 0;
    v127 = 0;
  }
  v134 = HIDWORD(v126) * v126;
  if ((_DWORD)v127)
    v135 = v134;
  else
    v135 = 0;
  v136 = (unint64_t)(v134 * v127) << 32;
  if (!HIDWORD(v127))
    v136 = 0;
  v137 = v136 | v135;
  if (HIDWORD(v126))
    v138 = v126 << 32;
  else
    v138 = 0;
  *(_QWORD *)&v169 = v126;
  *((_QWORD *)&v169 + 1) = v127;
  *(_QWORD *)&v170 = v138 | ((_DWORD)v126 != 0);
  *((_QWORD *)&v170 + 1) = v137;
  LOBYTE(v171) = 0;
  LOBYTE(v172) = 0;
  v207 = v170;
  *(_QWORD *)v208 = v137;
  if (((v136 >> 30) & ((v136 >> 30) - 1)) != 0)
    v139 = 4;
  else
    v139 = v136 >> 30;
  sub_239490F90((uint64_t)&v173, &v150, &v207, 1, v139);
  v140 = v170;
  *(_OWORD *)v149 = v169;
  *(_OWORD *)(v149 + 16) = v140;
  *(_OWORD *)(v149 + 32) = v171;
  *(_DWORD *)(v149 + 48) = v172;
  v141 = v177;
  *(_OWORD *)(v149 + 80) = v176;
  *(_OWORD *)(v149 + 96) = v141;
  sub_23991693C((_QWORD *)(v149 + 56), &v173);
  sub_239916980((uint64_t)&v173);
  sub_23948FF04((uint64_t)&v155);
  v73 = (char *)__p;
  if (!__p)
    goto LABEL_261;
LABEL_103:
  v74 = v181;
  v75 = v73;
  if (v181 != v73)
  {
    do
    {
      v76 = v74 - 128;
      v77 = *((unsigned int *)v74 - 2);
      if ((_DWORD)v77 != -1)
        ((void (*)(__int128 *, char *))off_250ADC888[v77])(&v169, v74 - 128);
      *((_DWORD *)v74 - 2) = -1;
      v74 -= 128;
    }
    while (v76 != v73);
    v75 = __p;
  }
  v181 = v73;
  operator delete(v75);
  if (!v194)
  {
LABEL_110:
    if (!v206)
      return v16;
    goto LABEL_268;
  }
LABEL_262:
  nullsub_4(&v189);
  v142 = v188;
  if (v188)
  {
    v143 = (unint64_t *)&v188->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  nullsub_4(v187);
  if (v206)
  {
LABEL_268:
    nullsub_4(&v201);
    v145 = v200;
    if (v200)
    {
      v146 = (unint64_t *)&v200->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    nullsub_4(v199);
  }
  return v16;
}

void sub_23948F944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  sub_239916980(v72);
  sub_23948FF04((uint64_t)&a15);
  sub_23948FB4C(&a48);
  sub_23948FBF0((uint64_t)&a54);
  sub_23948FBF0((uint64_t)&a72);
  _Unwind_Resume(a1);
}

uint64_t sub_23948FA2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    nullsub_4(a1 + 24);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_4(a1);
  }
  return a1;
}

uint64_t sub_23948FA9C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250ADC888[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_23948FAF4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250ADC888[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void **sub_23948FB4C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_250ADC888[v6])(&v8, v3 - 128);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_23948FBF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 112))
  {
    nullsub_4(a1 + 80);
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_4(a1 + 56);
  }
  return a1;
}

uint64_t sub_23948FC6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250ADC870;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

void sub_23948FCE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250ADC870;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23948FD58@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = (__int128 *)result[2];
  if (*((char *)v2 + 23) < 0)
    return sub_23941A7F8((_BYTE *)a2, *(void **)v2, *((_QWORD *)v2 + 1));
  v3 = *v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return result;
}

void sub_23948FD84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_4(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_4(v3);
    }
    else
    {
LABEL_6:
      nullsub_4(v3);
    }
  }
}

void sub_23948FE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_4(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_4(v3);
    }
    else
    {
LABEL_6:
      nullsub_4(v3);
    }
  }
}

uint64_t sub_23948FE94(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  nullsub_4(a2 + 24);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v3)
    return nullsub_4(a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_4(a2);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_4(a2);
}

uint64_t sub_23948FF04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(void **)(a1 + 32);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8))
          {
            nullsub_4(v3 - 40);
            v5 = *(std::__shared_weak_count **)(v3 - 48);
            if (v5)
            {
              p_shared_owners = (unint64_t *)&v5->__shared_owners_;
              do
                v7 = __ldaxr(p_shared_owners);
              while (__stlxr(v7 - 1, p_shared_owners));
              if (!v7)
              {
                ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                std::__shared_weak_count::__release_weak(v5);
              }
            }
            nullsub_4(v3 - 64);
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = &off_250ADC870;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v8)
    return nullsub_4(a1);
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return nullsub_4(a1);
}

uint64_t *sub_239490014(uint64_t *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  a1[1] = (uint64_t)&off_250ADC870;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      nullsub_4(v2);
      v6 = *a1;
      *a1 = 0;
      if (!v6)
        return a1;
      goto LABEL_6;
    }
  }
  nullsub_4(a1 + 1);
  v6 = *a1;
  *a1 = 0;
  if (v6)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t sub_2394900BC(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250ADC8B0;
  *(_QWORD *)(a1 + 24) = off_250AE2350;
  sub_23949021C(a1 + 32, (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 24) = off_250AE2310;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    if (*(char *)(a2 + 151) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 152), *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = v4;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 24) = &off_250ADC8E8;
  return a1;
}

void sub_239490184(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(_BYTE *)(v1 + 176))
  {
    if (*(char *)(v1 + 175) < 0)
      operator delete(*v3);
  }
  sub_2396504E0(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

void sub_2394901B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2394901CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394901DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23949020C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23949021C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  char *v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  sub_2394904A4(a1 + 40, a2 + 5);
  sub_2394907B8((_QWORD *)(a1 + 64), a2 + 8);
  *(_BYTE *)(a1 + 88) = 0;
  v6 = (char *)(a1 + 88);
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    sub_239490944(v6, a2[11], a2[12], 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 3));
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_2394902F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(v1 + 112))
    sub_239EBF61C((void **)(v1 + 88));
  sub_239490340(v4);
  sub_2394903B8(v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void **sub_239490340(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_2394903B8(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_21;
  v5 = (uint64_t)v3 - 80;
  do
  {
    if (!*(_BYTE *)(v5 + 72))
      goto LABEL_11;
    v7 = *(_QWORD **)(v5 + 64);
    if ((_QWORD *)(v5 + 40) == v7)
    {
      v7 = (_QWORD *)(v5 + 40);
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_11;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
    if (*(_BYTE *)(v5 + 32))
    {
      v9 = *(_QWORD **)(v5 + 24);
      if ((_QWORD *)v5 == v9)
      {
        v9 = (_QWORD *)v5;
        v10 = 4;
        goto LABEL_16;
      }
      if (v9)
      {
        v10 = 5;
LABEL_16:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
    }
    if (*(_BYTE *)(v5 - 64) && *(char *)(v5 - 65) < 0)
      operator delete(*(void **)(v5 - 88));
    v6 = (void *)(v5 - 88);
    v5 -= 168;
  }
  while (v6 != v2);
  v4 = *a1;
LABEL_21:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_2394904A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xCF3CF3CF3CF3CF3DLL * (v5 >> 3);
    if (v6 >= 0x186186186186187)
      sub_2394189F8();
    v7 = (char *)operator new(v5);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[168 * v6];
    sub_239490564((char *)a1, v3, v4);
  }
  return a1;
}

void sub_239490544(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    sub_239EBF684();
  _Unwind_Resume(exception_object);
}

char *sub_239490564(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_2394905EC((char *)(v4 + v7), (__int128 *)(a2 + v7));
      v7 += 168;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_2394905CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    sub_239EBF744(v2 + v3, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_2394905EC(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_DWORD *)a2 + 20);
  __dst[88] = 0;
  *((_DWORD *)__dst + 20) = v8;
  *((_OWORD *)__dst + 4) = v7;
  *((_OWORD *)__dst + 3) = v6;
  *((_OWORD *)__dst + 2) = v5;
  __dst[120] = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v9 = *((_QWORD *)a2 + 14);
    if (v9)
    {
      if ((__int128 *)v9 == (__int128 *)((char *)a2 + 88))
      {
        *((_QWORD *)__dst + 14) = __dst + 88;
        (*(void (**)(_QWORD, char *))(**((_QWORD **)a2 + 14) + 24))(*((_QWORD *)a2 + 14), __dst + 88);
        goto LABEL_12;
      }
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    *((_QWORD *)__dst + 14) = v9;
LABEL_12:
    __dst[120] = 1;
  }
  __dst[128] = 0;
  __dst[160] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v10 = *((_QWORD *)a2 + 19);
    if (v10)
    {
      if ((__int128 *)v10 == a2 + 8)
      {
        *((_QWORD *)__dst + 19) = __dst + 128;
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 19) + 24))(*((_QWORD *)a2 + 19));
        goto LABEL_19;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    *((_QWORD *)__dst + 19) = v10;
LABEL_19:
    __dst[160] = 1;
  }
  return __dst;
}

void sub_239490728(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394907B8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    a1[1] = sub_239490870(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_239490844(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    sub_239EBF81C();
  _Unwind_Resume(exception_object);
}

uint64_t sub_239490870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v9 = a4 + v7;
      v10 = (__int128 *)(a2 + v7);
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (*(_BYTE *)(a2 + v7 + 24))
      {
        if (*((char *)v10 + 23) < 0)
        {
          sub_23941A7F8((_BYTE *)(a4 + v7), *(void **)(a2 + v7), *(_QWORD *)(a2 + v7 + 8));
        }
        else
        {
          v8 = *v10;
          *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v9 = v8;
        }
        *(_BYTE *)(v9 + 24) = 1;
      }
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_239490918(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + v2 + 24))
    sub_239EBF8C0(v1 + v2);
  sub_239EBF878(v1 + v2, v1);
  _Unwind_Resume(a1);
}

char *sub_239490944(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_23941A7F8(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_239490A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23941B79C(&a9);
  _Unwind_Resume(a1);
}

void sub_239490A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_23941B79C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239490A74(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  *a3 = 0;
  v13 = v7;
  sub_23964F5DC(a1, &v14, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15;
  if (!v15)
    return a1;
  v10 = (unint64_t *)&v15->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_239490B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_239490B68(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_2394189F8();
  v8 = a1[2] - v3;
  if (v8 >> 6 > v6)
    v6 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 57)
      sub_239418A80();
    v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[128 * v5];
  *v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_250ADC900[v12])(&v21, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    v3 = *a1;
    v4 = a1[1];
  }
  v13 = &v10[128 * v9];
  v14 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_25;
  }
  v15 = 0;
  do
  {
    v11[v15 - 128] = 0;
    *(_DWORD *)&v11[v15 - 8] = -1;
    v16 = *(unsigned int *)&v4[v15 - 8];
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, char *, char *))off_250ADC900[v16])(&v22, &v11[v15 - 128], &v4[v15 - 128]);
      *(_DWORD *)&v11[v15 - 8] = v16;
    }
    v15 -= 128;
  }
  while (&v4[v15] != v3);
  v17 = *a1;
  v3 = a1[1];
  v14 = v11 + 128;
  *a1 = &v11[v15];
  a1[1] = v11 + 128;
  a1[2] = v13;
  if (v3 != v17)
  {
    do
    {
      v18 = v3 - 128;
      v19 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, char *))off_250ADC888[v19])(&v23, v3 - 128);
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 128;
    }
    while (v18 != v17);
    v3 = v17;
  }
  if (v3)
LABEL_25:
    operator delete(v3);
  return v14;
}

__n128 sub_239490D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_239490DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_239490E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADB210;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_239490E34@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
    sub_239EBF8D4();
  v3 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v4 = *(_QWORD *)(result + 64);
      v5 = *(std::__shared_weak_count **)(result + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "unknown location");
    }
    v9 = (uint64_t *)(v3 + 96);
  }
  else
  {
    v9 = (uint64_t *)(result + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v3 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v3))) & 1) != 0 || (v12 = *(_DWORD *)(v3 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v3;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v3 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
    sub_239EBF538();
  return result;
}

uint64_t sub_239490F90(uint64_t a1, _DWORD *a2, uint64_t *a3, char a4, uint64_t a5)
{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;

  v7 = a2 + 2;
  if (a4)
  {
    v9 = *a3;
    v8 = a3[1];
    v10 = a2[5];
  }
  else
  {
    v11 = a2[2];
    v12 = a2[3];
    v13 = v11 != 0;
    if (v12)
      v14 = v11;
    else
      v14 = 0;
    LODWORD(v15) = v12 * v11;
    v16 = a2[4];
    v10 = a2[5];
    v17 = v16 == 0;
    LODWORD(v18) = v15 * v16;
    if (v17)
      v15 = 0;
    else
      v15 = v15;
    if (v10)
      v18 = v18;
    else
      v18 = 0;
    v8 = v15 | (v18 << 32);
    v9 = v13 | (v14 << 32);
  }
  v19 = 4 * (v10 * HIDWORD(v8));
  v20 = (a5 - 1) | ((unint64_t)(a5 - 1) >> 1) | (((a5 - 1) | ((unint64_t)(a5 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  v24 = sub_2399168C0((_QWORD *)a1, v19, v23);
  *(_OWORD *)(a1 + 24) = *v7;
  *(_QWORD *)(a1 + 40) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_QWORD *)(a1 + 48) = (4 * v8) & 0xFFFFFFFCFFFFFFFCLL;
  sub_239488438((uint64_t)v24, (uint64_t)a2);
  return a1;
}

void sub_239491078(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void sub_23949108C(void *__p)
{
  operator delete(__p);
}

uint64_t sub_239491098@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t sub_2394910B0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t (**v21)();
  char v22;
  std::__shared_weak_count *v23;
  void *__p;
  char v25;
  char v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;

  *(_QWORD *)a1 = 0;
  v4 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 8) = v4;
  sub_2397A9868(&v27);
  sub_23971AF90(a1 + 24, &v27);
  v5 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)(a1 + 248) = &off_250ADBC88;
  sub_239467E48(a1 + 256);
  v8 = *a2;
  v9 = a2[1];
  LOBYTE(__p) = 0;
  v26 = 0;
  sub_239497414(&v27, v8, v9, &__p, 0);
  if (v26 && v25 < 0)
    operator delete(__p);
  sub_239491344((uint64_t)&v27, (uint64_t)&v18);
  if (v22)
  {
    sub_239A444D4((uint64_t)"unknown file", 40, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v10 = operator new();
  *(_OWORD *)v10 = v18;
  v11 = v19;
  v19 = 0;
  v18 = 0uLL;
  *(_QWORD *)(v10 + 16) = v11;
  v12 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v10;
  if (v12)
  {
    v13 = sub_23964F698(v12);
    MEMORY[0x23B83E31C](v13, 0x60C40CE5A77A8);
  }
  v21 = &off_250ADC870;
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  nullsub_4(&v21);
  if (v20)
    sub_23964F698((uint64_t)&v18);
  sub_239497418(&v27);
  return a1;
}

void sub_2394912A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  sub_23948EA5C((uint64_t)&a9);
  sub_239497418(&a25);
  sub_239416DA0(v30);
  nullsub_4(v29);
  sub_239420C38(v28);
  sub_23948EAF8(v27);
  _Unwind_Resume(a1);
}

void sub_239491314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t *v13;
  va_list va;

  va_start(va, a13);
  sub_239416DA0((uint64_t)va);
  sub_23948EAF8(v13);
  _Unwind_Resume(a1);
}

void sub_239491330(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_23948EAF8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239491344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  sub_239650328(a1, (uint64_t)&v27);
  v4 = v29;
  if (v29)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = &off_250ADC870;
    *(_BYTE *)(a2 + 40) = v4;
    v5 = v31;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = (std::__shared_weak_count *)operator new(0xC8uLL);
    sub_23949513C((uint64_t)v8, a1);
    v23 = v8 + 1;
    v24 = v8;
    v9 = v27;
    v27 = 0;
    v22 = v9;
    sub_23949529C(&v25, (uint64_t *)&v23, &v22);
    *(_OWORD *)a2 = v25;
    v10 = v26;
    v26 = 0;
    v25 = 0uLL;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
    *(_QWORD *)(a2 + 32) = &off_250ADC870;
    *(_BYTE *)(a2 + 40) = v29;
    v11 = v31;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_23964F698((uint64_t)&v25);
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v28 = &off_250ADC870;
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  nullsub_4(&v28);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_239491508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_239416DA0((uint64_t)va);
  sub_239490014((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23949153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_239490014(&a16);
  _Unwind_Resume(a1);
}

void sub_239491558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239490014((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239491570(std::__shared_weak_count **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v9;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void (__cdecl *v21)(std::__shared_weak_count *__hidden);
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  __int16 v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  int v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  size_t prime;
  _QWORD *v68;
  void **v69;
  unsigned int v70;
  void **v71;
  int8x8_t v72;
  BOOL v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  void **v79;
  void *v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  float v85;
  char *v86;
  void **v87;
  void *v88;
  char *v89;
  void **v90;
  void **v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  __int16 v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  int v126;
  int v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t shared_weak_owners;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  double v148;
  unsigned __int8 v149;
  __int16 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  float v157;
  float v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  unsigned __int8 v174;
  __int16 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  __int16 v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  char *v192;
  int v193;
  char *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  void *v201;
  void **v202;
  void *v203;
  void **v204;
  uint64_t v205;
  unint64_t *v206;
  void (__cdecl *v207)(std::__shared_weak_count *__hidden);
  int v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _OWORD *v213;
  _OWORD *v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t (***v234)();
  int v235;
  __int128 v236;
  __int128 v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t (***v247)();
  uint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t (***v254)();
  unint64_t *v255;
  char *v256;
  void *v257;
  char *v258;
  uint64_t v259;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  unint64_t v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  uint64_t (**v288)();
  int v289;
  unint64_t v290;
  uint64_t v291;
  BOOL v292;
  BOOL v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  BOOL v298;
  int v300;
  BOOL v301;
  unint64_t v302;
  unint64_t v303;
  _BOOL8 v304;
  unsigned int v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  size_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  size_t v316;
  uint64_t (**v317)();
  int v318;
  unint64_t v319;
  uint64_t v320;
  BOOL v321;
  BOOL v323;
  int v324;
  unint64_t v325;
  unint64_t v326;
  BOOL v327;
  int v329;
  BOOL v330;
  unint64_t v331;
  unint64_t v332;
  _BOOL8 v333;
  unsigned int v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  size_t v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t (***v353)();
  unint64_t v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  uint64_t (**v358)();
  int v359;
  unint64_t v360;
  uint64_t v361;
  BOOL v362;
  BOOL v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  BOOL v368;
  int v370;
  BOOL v371;
  unint64_t v372;
  unint64_t v373;
  _BOOL8 v374;
  unsigned int v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  size_t v385;
  __int128 v386;
  __int128 v387;
  uint64_t (**v388)();
  int v389;
  unint64_t v390;
  uint64_t v391;
  BOOL v392;
  BOOL v394;
  int v395;
  unint64_t v396;
  unint64_t v397;
  BOOL v398;
  int v400;
  BOOL v401;
  unint64_t v402;
  unint64_t v403;
  _BOOL8 v404;
  unsigned int v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int v427;
  int v428;
  __int128 v429;
  std::__shared_weak_count *v430;
  _BYTE v431[30];
  void *v432[2];
  _BYTE v433[38];
  char v434;
  int v435;
  uint64_t v436;
  void *v437;
  char *v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t (**v441)();
  __int128 v442;
  uint64_t v443;
  int v444;
  int v445;
  uint64_t v446;
  __int16 v447;
  unsigned int v448;
  unsigned int v449;
  __int16 v450;
  void *v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  int v455;
  std::__shared_weak_count *v456;
  std::__shared_weak_count *v457;
  std::__shared_weak_count *v458;
  std::__shared_weak_count *v459;
  _BYTE v460[56];
  __int128 v461;
  std::__shared_weak_count *v462;
  __int128 v463;
  __int128 v464;
  int v465;
  uint64_t v466;

  v466 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
    return 0;
  v451 = 0;
  v452 = 0;
  v453 = 0;
  v9 = *(_DWORD *)(a2 + 48);
  if (v9 == 1)
  {
    v441 = &off_250ADB350;
    sub_2394949FC(a2, (uint64_t)&v442);
    v25 = v442;
    if (!(_QWORD)v442)
      goto LABEL_49;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
    if (*((_QWORD *)&v442 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      v25 = v442;
      if (*((_QWORD *)&v442 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    if (HIBYTE(v447))
    {
      (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v25 + 96))(&v458, v25, 0);
      v432[0] = &off_250ADB210;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      v35 = (void *)v442;
      v429 = v442;
      if (!*((_QWORD *)&v442 + 1))
        goto LABEL_52;
    }
    else
    {
LABEL_49:
      v458 = 0;
      v432[0] = &off_250ADB210;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
      v35 = (void *)v442;
      v429 = v442;
      if (!*((_QWORD *)&v442 + 1))
        goto LABEL_52;
    }
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
LABEL_52:
    sub_2398EB464((uint64_t)&v437, 2, (uint64_t)&v444, 2, (uint64_t)&v446, 1);
    v43 = v443;
    v44 = v447;
    if (v34)
    {
      v45 = (unint64_t *)&v34->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      do
        v47 = __ldxr(v45);
      while (__stxr(v47 + 1, v45));
    }
    v432[1] = v35;
    *(_QWORD *)v433 = v34;
    *(_QWORD *)&v433[8] = v437;
    *(_DWORD *)&v433[16] = (_DWORD)v438;
    *(_QWORD *)&v433[24] = v43;
    *(_DWORD *)&v433[32] = 1;
    *(_WORD *)&v433[36] = v44;
    if (v34)
    {
      v48 = (unint64_t *)&v34->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    nullsub_4(&v437);
    if (*((_QWORD *)&v429 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v429 + 1) + 16))(*((_QWORD *)&v429 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v429 + 1));
      }
    }
    v435 = 2;
    v465 = -1;
    *(_QWORD *)v460 = &off_250ADB210;
    if (*(_QWORD *)v433)
    {
      v52 = (unint64_t *)(*(_QWORD *)v433 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v54 = *(_QWORD *)&v433[24];
      v55 = *(_DWORD *)&v433[32];
      v56 = *(_WORD *)&v433[36];
      do
        v57 = __ldxr(v52);
      while (__stxr(v57 + 1, v52));
    }
    else
    {
      v54 = *(_QWORD *)&v433[24];
      v55 = *(_DWORD *)&v433[32];
      v56 = *(_WORD *)&v433[36];
    }
    *(void **)&v460[8] = v432[1];
    *(_QWORD *)&v460[16] = *(_QWORD *)v433;
    *(_QWORD *)&v460[24] = *(_QWORD *)&v433[8];
    *(_DWORD *)&v460[32] = *(_DWORD *)&v433[16];
    *(_QWORD *)&v460[40] = v54;
    *(_DWORD *)&v460[48] = v55;
    *(_WORD *)&v460[52] = v56;
    if (!*(_QWORD *)v433)
      goto LABEL_77;
    v58 = (unint64_t *)(*(_QWORD *)v433 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)v433 + 16))(*(_QWORD *)v433);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v433);
      v465 = 2;
      v60 = v452;
      if ((unint64_t)v452 < v453)
        goto LABEL_78;
    }
    else
    {
LABEL_77:
      v465 = 2;
      v60 = v452;
      if ((unint64_t)v452 < v453)
      {
LABEL_78:
        *v60 = 0;
        *((_DWORD *)v60 + 30) = -1;
        v61 = v465;
        if (v465 != -1)
        {
          ((void (*)(__int128 *, char *, _BYTE *))off_250ADC9A8[v465])(&v429, v60, v460);
          *((_DWORD *)v60 + 30) = v61;
        }
        v62 = v60 + 128;
LABEL_98:
        v452 = v62;
        if (v465 != -1)
          ((void (*)(__int128 *, _BYTE *))off_250ADC918[v465])(&v429, v460);
        v465 = -1;
        if (v435 != -1)
          ((void (*)(__int128 *, void **))off_250ADC918[v435])(&v429, v432);
        v74 = v458;
        v458 = 0;
        if (v74)
          ((void (*)(std::__shared_weak_count *))v74->~__shared_weak_count_0)(v74);
        v75 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
        if (*((_QWORD *)&v442 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
LABEL_322:
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
LABEL_324:
        nullsub_4(&v441);
        v207 = (*a1)->__vftable[1].~__shared_weak_count_0;
        if (!*((_BYTE *)v207 + 80))
          goto LABEL_406;
        if (!*((_BYTE *)v207 + 76) || *((_DWORD *)v207 + 18) != 1)
        {
          sub_239A444D4((uint64_t)"unknown file", 166, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v208 = *((_DWORD *)a1 + 2);
        LODWORD(v429) = 0;
        v460[48] = 0;
        memset(v460, 0, 33);
        v432[0] = 0;
        v432[1] = 0;
        v441 = 0;
        *(_QWORD *)&v442 = 0;
        sub_23948C444((uint64_t)&v461, (unsigned int *)&v441, (unint64_t *)v432, 1, &v429, 1, 0);
        v209 = *(_OWORD *)&v460[16];
        *(_OWORD *)a3 = *(_OWORD *)v460;
        *(_OWORD *)(a3 + 16) = v209;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v460[32];
        *(_DWORD *)(a3 + 48) = *(_DWORD *)&v460[48];
        v210 = v464;
        *(_OWORD *)(a3 + 80) = v463;
        *(_OWORD *)(a3 + 96) = v210;
        sub_23991693C((_QWORD *)(a3 + 56), &v461);
        sub_239916980((uint64_t)&v461);
        LODWORD(v429) = 0;
        v460[48] = 0;
        memset(v460, 0, 33);
        v432[0] = 0;
        v432[1] = 0;
        v441 = 0;
        *(_QWORD *)&v442 = 0;
        sub_23948C444((uint64_t)&v461, (unsigned int *)&v441, (unint64_t *)v432, 1, &v429, 1, 0);
        v211 = *(_OWORD *)&v460[16];
        *(_OWORD *)a4 = *(_OWORD *)v460;
        *(_OWORD *)(a4 + 16) = v211;
        *(_OWORD *)(a4 + 32) = *(_OWORD *)&v460[32];
        *(_DWORD *)(a4 + 48) = *(_DWORD *)&v460[48];
        v212 = v464;
        *(_OWORD *)(a4 + 80) = v463;
        *(_OWORD *)(a4 + 96) = v212;
        sub_23991693C((_QWORD *)(a4 + 56), &v461);
        v213 = (_OWORD *)(a3 + 80);
        v214 = (_OWORD *)(a4 + 80);
        sub_239916980((uint64_t)&v461);
        if (!v208)
        {
          sub_23964F5D4((uint64_t)*a1, &v451, 0, 0, (uint64_t)v432);
          if (LOBYTE(v432[1]))
          {
            if (v434)
            {
              v222 = *(_QWORD *)&v433[16];
              if (*(_QWORD *)&v433[16])
              {
                v223 = *(_QWORD *)&v433[24];
                v224 = *(void **)&v433[16];
                if (*(_QWORD *)&v433[24] != *(_QWORD *)&v433[16])
                {
                  do
                  {
                    v225 = v223 - 128;
                    v226 = *(unsigned int *)(v223 - 8);
                    if ((_DWORD)v226 != -1)
                      ((void (*)(_BYTE *, uint64_t))off_250ADC930[v226])(v460, v223 - 128);
                    *(_DWORD *)(v223 - 8) = -1;
                    v223 -= 128;
                  }
                  while (v225 != v222);
                  v224 = *(void **)&v433[16];
                }
                *(_QWORD *)&v433[24] = v222;
                operator delete(v224);
              }
            }
            v432[0] = &off_250ADC870;
            v238 = *(std::__shared_weak_count **)&v433[8];
            if (!*(_QWORD *)&v433[8])
              goto LABEL_405;
            v255 = (unint64_t *)(*(_QWORD *)&v433[8] + 8);
            do
              v240 = __ldaxr(v255);
            while (__stlxr(v240 - 1, v255));
            goto LABEL_403;
          }
          v235 = *((_DWORD *)a1 + 3);
          if (v235 == 2)
          {
            sub_23949934C(*(__int128 **)&v433[16], v221, (uint64_t)v460);
            v263 = *(_OWORD *)&v460[16];
            *(_OWORD *)a3 = *(_OWORD *)v460;
            *(_OWORD *)(a3 + 16) = v263;
            *(_OWORD *)(a3 + 32) = *(_OWORD *)&v460[32];
            *(_DWORD *)(a3 + 48) = *(_DWORD *)&v460[48];
            v264 = v464;
            *v213 = v463;
            *(_OWORD *)(a3 + 96) = v264;
            sub_23991693C((_QWORD *)(a3 + 56), &v461);
            sub_239916980((uint64_t)&v461);
            sub_23949934C((__int128 *)(*(_QWORD *)&v433[16] + 128), v265, (uint64_t)v460);
            v266 = *(_OWORD *)&v460[16];
            *(_OWORD *)a4 = *(_OWORD *)v460;
            *(_OWORD *)(a4 + 16) = v266;
            *(_OWORD *)(a4 + 32) = *(_OWORD *)&v460[32];
            *(_DWORD *)(a4 + 48) = *(_DWORD *)&v460[48];
            v267 = v464;
            *v214 = v463;
            *(_OWORD *)(a4 + 96) = v267;
            sub_23991693C((_QWORD *)(a4 + 56), &v461);
          }
          else if (v235 == 1)
          {
            sub_23949934C((__int128 *)(*(_QWORD *)&v433[16] + 128), v221, (uint64_t)v460);
            v261 = *(_OWORD *)&v460[16];
            *(_OWORD *)a4 = *(_OWORD *)v460;
            *(_OWORD *)(a4 + 16) = v261;
            *(_OWORD *)(a4 + 32) = *(_OWORD *)&v460[32];
            *(_DWORD *)(a4 + 48) = *(_DWORD *)&v460[48];
            v262 = v464;
            *v214 = v463;
            *(_OWORD *)(a4 + 96) = v262;
            sub_23991693C((_QWORD *)(a4 + 56), &v461);
          }
          else
          {
            if (v235)
            {
              sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            sub_23949934C(*(__int128 **)&v433[16], v221, (uint64_t)v460);
            v236 = *(_OWORD *)&v460[16];
            *(_OWORD *)a3 = *(_OWORD *)v460;
            *(_OWORD *)(a3 + 16) = v236;
            *(_OWORD *)(a3 + 32) = *(_OWORD *)&v460[32];
            *(_DWORD *)(a3 + 48) = *(_DWORD *)&v460[48];
            v237 = v464;
            *v213 = v463;
            *(_OWORD *)(a3 + 96) = v237;
            sub_23991693C((_QWORD *)(a3 + 56), &v461);
          }
          sub_239916980((uint64_t)&v461);
          if (v434)
          {
            v268 = *(_QWORD *)&v433[16];
            if (*(_QWORD *)&v433[16])
            {
              v269 = *(_QWORD *)&v433[24];
              v270 = *(void **)&v433[16];
              if (*(_QWORD *)&v433[24] != *(_QWORD *)&v433[16])
              {
                do
                {
                  v271 = v269 - 128;
                  v272 = *(unsigned int *)(v269 - 8);
                  if ((_DWORD)v272 != -1)
                    ((void (*)(_BYTE *, uint64_t))off_250ADC930[v272])(v460, v269 - 128);
                  *(_DWORD *)(v269 - 8) = -1;
                  v269 -= 128;
                }
                while (v271 != v268);
                v270 = *(void **)&v433[16];
              }
              *(_QWORD *)&v433[24] = v268;
              operator delete(v270);
            }
          }
          v432[0] = &off_250ADC870;
          v273 = *(std::__shared_weak_count **)&v433[8];
          if (!*(_QWORD *)&v433[8])
            goto LABEL_676;
          v274 = (unint64_t *)(*(_QWORD *)&v433[8] + 8);
          do
            v275 = __ldaxr(v274);
          while (__stlxr(v275 - 1, v274));
          goto LABEL_674;
        }
        sub_23964F5CC((uint64_t)*a1, &v451, 0, 0, (uint64_t)v432);
        if (LOBYTE(v432[1]))
        {
          if (v434)
          {
            v215 = *(_QWORD *)&v433[16];
            if (*(_QWORD *)&v433[16])
            {
              v216 = *(_QWORD *)&v433[24];
              v217 = *(void **)&v433[16];
              if (*(_QWORD *)&v433[24] != *(_QWORD *)&v433[16])
              {
                do
                {
                  if (*(_BYTE *)(v216 - 8))
                  {
                    nullsub_4(v216 - 40);
                    v218 = *(std::__shared_weak_count **)(v216 - 48);
                    if (v218)
                    {
                      v219 = (unint64_t *)&v218->__shared_owners_;
                      do
                        v220 = __ldaxr(v219);
                      while (__stlxr(v220 - 1, v219));
                      if (!v220)
                      {
                        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                        std::__shared_weak_count::__release_weak(v218);
                      }
                    }
                    nullsub_4(v216 - 64);
                  }
                  v216 -= 120;
                }
                while (v216 != v215);
                v217 = *(void **)&v433[16];
              }
              *(_QWORD *)&v433[24] = v215;
              operator delete(v217);
            }
          }
          v432[0] = &off_250ADC870;
          v238 = *(std::__shared_weak_count **)&v433[8];
          if (!*(_QWORD *)&v433[8])
            goto LABEL_405;
          v239 = (unint64_t *)(*(_QWORD *)&v433[8] + 8);
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
LABEL_403:
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
LABEL_405:
          nullsub_4(v432);
LABEL_406:
          v24 = 0;
          v40 = (char *)v451;
          if (!v451)
            return v24;
          goto LABEL_407;
        }
        v227 = *((_DWORD *)a1 + 3);
        if (v227 != 2)
        {
          if (v227 != 1)
          {
            if (v227)
            {
              sub_239A444D4((uint64_t)"unknown file", 220, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            v228 = *(_QWORD *)&v433[16];
            if ((*(_BYTE *)(*(_QWORD *)&v433[16] + 48) & 0x40) != 0)
            {
              if (*(_BYTE *)(*(_QWORD *)&v433[16] + 112))
              {
                if (*(_BYTE *)(*(_QWORD *)&v433[16] + 108) && *(_QWORD *)(*(_QWORD *)&v433[16] + 96))
                {
                  v229 = *(_QWORD *)(*(_QWORD *)&v433[16] + 64);
                  v230 = *(std::__shared_weak_count **)(*(_QWORD *)&v433[16] + 72);
                  if (v230)
                  {
                    v231 = (unint64_t *)&v230->__shared_owners_;
                    do
                      v232 = __ldxr(v231);
                    while (__stxr(v232 + 1, v231));
                    do
                      v233 = __ldaxr(v231);
                    while (__stlxr(v233 - 1, v231));
                    if (!v233)
                    {
                      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                      std::__shared_weak_count::__release_weak(v230);
                    }
                  }
                  (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v229 + 88))(v229, 0, "unknown location");
                }
                v234 = (uint64_t (***)())(v228 + 96);
              }
              else
              {
                v234 = (uint64_t (***)())(*(_QWORD *)&v433[16] + 40);
              }
              v284 = 0;
              v285 = 0;
              v286 = *(_DWORD *)(v228 + 36);
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v228))) & 1) != 0)
              {
                v287 = 0;
              }
              else
              {
                v287 = 0;
                if (*(_DWORD *)(v228 + 16))
                {
                  v284 = *(_QWORD *)(v228 + 4);
                  v285 = HIDWORD(*(_OWORD *)v228);
                  v287 = *(_DWORD *)(v228 + 16);
                }
              }
              if (v287 * v286 != -1)
              {
                v358 = *v234;
                v359 = *(_DWORD *)(v228 + 32);
                v360 = v285 | ((unint64_t)v287 << 32);
                v361 = *(_QWORD *)(v228 + 24);
                if (HIDWORD(v284))
                  v362 = (_DWORD)v284 == 0;
                else
                  v362 = 1;
                v364 = v362 || v285 == 0 || v287 == 0;
                v365 = v364;
                if (v364)
                  v366 = 0;
                else
                  v366 = v284;
                if (v364)
                  v360 = 0;
                v367 = HIDWORD(v360);
                v441 = v358;
                *(_QWORD *)&v442 = v366;
                *((_QWORD *)&v442 + 1) = v360;
                v443 = v361;
                v444 = v359;
                v445 = v286;
                if (v286 * HIDWORD(v360) != -1)
                {
                  if ((_DWORD)v366)
                    v368 = (_DWORD)v360 == 0;
                  else
                    v368 = 1;
                  if (v368 || HIDWORD(v360) == 0)
                    v370 = 1;
                  else
                    v370 = v365;
                  v371 = v370 == 0;
                  if (v370)
                    v372 = 0;
                  else
                    v372 = v366;
                  if (v371)
                    v373 = v360;
                  else
                    v373 = 0;
                  v374 = (_DWORD)v372 != 0;
                  v375 = HIDWORD(v372) * v372;
                  if ((_DWORD)v373)
                    v376 = v375;
                  else
                    v376 = 0;
                  v377 = (unint64_t)(v375 * v373) << 32;
                  if (!HIDWORD(v373))
                    v377 = 0;
                  v378 = v377 | v376;
                  if (HIDWORD(v372))
                    v379 = v372 << 32;
                  else
                    v379 = 0;
                  v380 = v379 | v374;
                  *(_QWORD *)v460 = v372;
                  *(_QWORD *)&v460[8] = v373;
                  *(_QWORD *)&v460[16] = v379 | v374;
                  *(_QWORD *)&v460[24] = v377 | v376;
                  v460[32] = 0;
                  v460[48] = 0;
                  v381 = 3;
                  if (((v377 >> 30) & ((v377 >> 30) - 1)) == 0)
                    v381 = (v377 >> 30) - 1;
                  v382 = v381 | (v381 >> 1) | ((v381 | (v381 >> 1)) >> 2);
                  v383 = v382 | (v382 >> 4) | ((v382 | (v382 >> 4)) >> 8);
                  v384 = v383 | (v383 >> 16) | ((v383 | (v383 >> 16)) >> 32);
                  if (v384 + 1 > 8)
                    v385 = v384 + 1;
                  else
                    v385 = 8;
                  sub_2399168C0(&v461, 4 * (v367 * HIDWORD(v377)), v385);
                  v463 = v442;
                  *(_QWORD *)&v464 = 4 * v380;
                  *((_QWORD *)&v464 + 1) = (4 * v378) & 0xFFFFFFFCFFFFFFFCLL;
                  sub_239488438((uint64_t)&v461, (uint64_t)&v441);
                  v386 = *(_OWORD *)&v460[16];
                  *(_OWORD *)a3 = *(_OWORD *)v460;
                  *(_OWORD *)(a3 + 16) = v386;
                  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v460[32];
                  *(_DWORD *)(a3 + 48) = *(_DWORD *)&v460[48];
                  v387 = v464;
                  *v213 = v463;
                  *(_OWORD *)(a3 + 96) = v387;
                  sub_23991693C((_QWORD *)(a3 + 56), &v461);
                  goto LABEL_657;
                }
              }
              v424 = 983;
            }
            else
            {
              v424 = 724;
            }
            sub_239A444D4((uint64_t)"unknown file", v424, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v241 = *(_QWORD *)&v433[16];
          if ((*(_BYTE *)(*(_QWORD *)&v433[16] + 168) & 0x40) != 0)
          {
            if (*(_BYTE *)(*(_QWORD *)&v433[16] + 232))
            {
              if (*(_BYTE *)(*(_QWORD *)&v433[16] + 228) && *(_QWORD *)(*(_QWORD *)&v433[16] + 216))
              {
                v242 = *(_QWORD *)(*(_QWORD *)&v433[16] + 184);
                v243 = *(std::__shared_weak_count **)(*(_QWORD *)&v433[16] + 192);
                if (v243)
                {
                  v244 = (unint64_t *)&v243->__shared_owners_;
                  do
                    v245 = __ldxr(v244);
                  while (__stxr(v245 + 1, v244));
                  do
                    v246 = __ldaxr(v244);
                  while (__stlxr(v246 - 1, v244));
                  if (!v246)
                  {
                    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                    std::__shared_weak_count::__release_weak(v243);
                  }
                }
                (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v242 + 88))(v242, 0, "unknown location");
              }
              v247 = (uint64_t (***)())(v241 + 216);
            }
            else
            {
              v247 = (uint64_t (***)())(*(_QWORD *)&v433[16] + 160);
            }
            v276 = 0;
            v277 = 0;
            v278 = *(_DWORD *)(v241 + 156);
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v241 + 120)))) & 1) != 0)
            {
              v279 = 0;
            }
            else
            {
              v279 = 0;
              if (*(_DWORD *)(v241 + 136))
              {
                v276 = *(_QWORD *)(v241 + 124);
                v277 = HIDWORD(*(_OWORD *)(v241 + 120));
                v279 = *(_DWORD *)(v241 + 136);
              }
            }
            if (v279 * v278 != -1)
            {
              v288 = *v247;
              v289 = *(_DWORD *)(v241 + 152);
              v290 = v277 | ((unint64_t)v279 << 32);
              v291 = *(_QWORD *)(v241 + 144);
              if (HIDWORD(v276))
                v292 = (_DWORD)v276 == 0;
              else
                v292 = 1;
              v294 = v292 || v277 == 0 || v279 == 0;
              v295 = v294;
              if (v294)
                v296 = 0;
              else
                v296 = v276;
              if (v294)
                v290 = 0;
              v297 = HIDWORD(v290);
              v441 = v288;
              *(_QWORD *)&v442 = v296;
              *((_QWORD *)&v442 + 1) = v290;
              v443 = v291;
              v444 = v289;
              v445 = v278;
              if (v278 * HIDWORD(v290) != -1)
              {
                if ((_DWORD)v296)
                  v298 = (_DWORD)v290 == 0;
                else
                  v298 = 1;
                if (v298 || HIDWORD(v290) == 0)
                  v300 = 1;
                else
                  v300 = v295;
                v301 = v300 == 0;
                if (v300)
                  v302 = 0;
                else
                  v302 = v296;
                if (v301)
                  v303 = v290;
                else
                  v303 = 0;
                v304 = (_DWORD)v302 != 0;
                v305 = HIDWORD(v302) * v302;
                if ((_DWORD)v303)
                  v306 = v305;
                else
                  v306 = 0;
                v307 = (unint64_t)(v305 * v303) << 32;
                if (!HIDWORD(v303))
                  v307 = 0;
                v308 = v307 | v306;
                if (HIDWORD(v302))
                  v309 = v302 << 32;
                else
                  v309 = 0;
                v310 = v309 | v304;
                *(_QWORD *)v460 = v302;
                *(_QWORD *)&v460[8] = v303;
                *(_QWORD *)&v460[16] = v309 | v304;
                *(_QWORD *)&v460[24] = v307 | v306;
                v460[32] = 0;
                v460[48] = 0;
                v311 = 4 * (v297 * HIDWORD(v307));
                v312 = 3;
                if (((v307 >> 30) & ((v307 >> 30) - 1)) == 0)
                  v312 = (v307 >> 30) - 1;
                v313 = v312 | (v312 >> 1) | ((v312 | (v312 >> 1)) >> 2);
                v314 = v313 | (v313 >> 4) | ((v313 | (v313 >> 4)) >> 8);
                v315 = v314 | (v314 >> 16) | ((v314 | (v314 >> 16)) >> 32);
                if (v315 + 1 > 8)
                  v316 = v315 + 1;
                else
                  v316 = 8;
LABEL_656:
                sub_2399168C0(&v461, v311, v316);
                v463 = v442;
                *(_QWORD *)&v464 = 4 * v310;
                *((_QWORD *)&v464 + 1) = (4 * v308) & 0xFFFFFFFCFFFFFFFCLL;
                sub_239488438((uint64_t)&v461, (uint64_t)&v441);
                v413 = *(_OWORD *)&v460[16];
                *(_OWORD *)a4 = *(_OWORD *)v460;
                *(_OWORD *)(a4 + 16) = v413;
                *(_OWORD *)(a4 + 32) = *(_OWORD *)&v460[32];
                *(_DWORD *)(a4 + 48) = *(_DWORD *)&v460[48];
                v414 = v464;
                *v214 = v463;
                *(_OWORD *)(a4 + 96) = v414;
                sub_23991693C((_QWORD *)(a4 + 56), &v461);
LABEL_657:
                sub_239916980((uint64_t)&v461);
                if (v434)
                {
                  v415 = *(_QWORD *)&v433[16];
                  if (*(_QWORD *)&v433[16])
                  {
                    v416 = *(_QWORD *)&v433[24];
                    v417 = *(void **)&v433[16];
                    if (*(_QWORD *)&v433[24] != *(_QWORD *)&v433[16])
                    {
                      do
                      {
                        if (*(_BYTE *)(v416 - 8))
                        {
                          nullsub_4(v416 - 40);
                          v418 = *(std::__shared_weak_count **)(v416 - 48);
                          if (v418)
                          {
                            v419 = (unint64_t *)&v418->__shared_owners_;
                            do
                              v420 = __ldaxr(v419);
                            while (__stlxr(v420 - 1, v419));
                            if (!v420)
                            {
                              ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
                              std::__shared_weak_count::__release_weak(v418);
                            }
                          }
                          nullsub_4(v416 - 64);
                        }
                        v416 -= 120;
                      }
                      while (v416 != v415);
                      v417 = *(void **)&v433[16];
                    }
                    *(_QWORD *)&v433[24] = v415;
                    operator delete(v417);
                  }
                }
                v432[0] = &off_250ADC870;
                v273 = *(std::__shared_weak_count **)&v433[8];
                if (!*(_QWORD *)&v433[8])
                {
LABEL_676:
                  nullsub_4(v432);
                  v24 = 1;
                  v40 = (char *)v451;
                  if (!v451)
                    return v24;
                  goto LABEL_407;
                }
                v421 = (unint64_t *)(*(_QWORD *)&v433[8] + 8);
                do
                  v275 = __ldaxr(v421);
                while (__stlxr(v275 - 1, v421));
LABEL_674:
                if (!v275)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
                goto LABEL_676;
              }
            }
            v422 = 983;
          }
          else
          {
            v422 = 724;
          }
          sub_239A444D4((uint64_t)"unknown file", v422, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v248 = *(_QWORD *)&v433[16];
        if ((*(_BYTE *)(*(_QWORD *)&v433[16] + 48) & 0x40) != 0)
        {
          if (*(_BYTE *)(*(_QWORD *)&v433[16] + 112))
          {
            if (*(_BYTE *)(*(_QWORD *)&v433[16] + 108) && *(_QWORD *)(*(_QWORD *)&v433[16] + 96))
            {
              v249 = *(_QWORD *)(*(_QWORD *)&v433[16] + 64);
              v250 = *(std::__shared_weak_count **)(*(_QWORD *)&v433[16] + 72);
              if (v250)
              {
                v251 = (unint64_t *)&v250->__shared_owners_;
                do
                  v252 = __ldxr(v251);
                while (__stxr(v252 + 1, v251));
                do
                  v253 = __ldaxr(v251);
                while (__stlxr(v253 - 1, v251));
                if (!v253)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
              }
              (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v249 + 88))(v249, 0, "unknown location");
            }
            v254 = (uint64_t (***)())(v248 + 96);
          }
          else
          {
            v254 = (uint64_t (***)())(*(_QWORD *)&v433[16] + 40);
          }
          v280 = 0;
          v281 = 0;
          v282 = *(_DWORD *)(v248 + 36);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v248))) & 1) != 0)
          {
            v283 = 0;
          }
          else
          {
            v283 = 0;
            if (*(_DWORD *)(v248 + 16))
            {
              v280 = *(_QWORD *)(v248 + 4);
              v281 = HIDWORD(*(_OWORD *)v248);
              v283 = *(_DWORD *)(v248 + 16);
            }
          }
          if (v283 * v282 != -1)
          {
            v317 = *v254;
            v318 = *(_DWORD *)(v248 + 32);
            v319 = v281 | ((unint64_t)v283 << 32);
            v320 = *(_QWORD *)(v248 + 24);
            if (HIDWORD(v280))
              v321 = (_DWORD)v280 == 0;
            else
              v321 = 1;
            v323 = v321 || v281 == 0 || v283 == 0;
            v324 = v323;
            if (v323)
              v325 = 0;
            else
              v325 = v280;
            if (v323)
              v319 = 0;
            v326 = HIDWORD(v319);
            v441 = v317;
            *(_QWORD *)&v442 = v325;
            *((_QWORD *)&v442 + 1) = v319;
            v443 = v320;
            v444 = v318;
            v445 = v282;
            if (v282 * HIDWORD(v319) != -1)
            {
              if ((_DWORD)v325)
                v327 = (_DWORD)v319 == 0;
              else
                v327 = 1;
              if (v327 || HIDWORD(v319) == 0)
                v329 = 1;
              else
                v329 = v324;
              v330 = v329 == 0;
              if (v329)
                v331 = 0;
              else
                v331 = v325;
              if (v330)
                v332 = v319;
              else
                v332 = 0;
              v333 = (_DWORD)v331 != 0;
              v334 = HIDWORD(v331) * v331;
              if ((_DWORD)v332)
                v335 = v334;
              else
                v335 = 0;
              v336 = (unint64_t)(v334 * v332) << 32;
              if (!HIDWORD(v332))
                v336 = 0;
              v337 = v336 | v335;
              if (HIDWORD(v331))
                v338 = v331 << 32;
              else
                v338 = 0;
              v339 = v338 | v333;
              *(_QWORD *)v460 = v331;
              *(_QWORD *)&v460[8] = v332;
              *(_QWORD *)&v460[16] = v338 | v333;
              *(_QWORD *)&v460[24] = v336 | v335;
              v460[32] = 0;
              v460[48] = 0;
              v340 = 3;
              if (((v336 >> 30) & ((v336 >> 30) - 1)) == 0)
                v340 = (v336 >> 30) - 1;
              v341 = v340 | (v340 >> 1) | ((v340 | (v340 >> 1)) >> 2);
              v342 = v341 | (v341 >> 4) | ((v341 | (v341 >> 4)) >> 8);
              v343 = v342 | (v342 >> 16) | ((v342 | (v342 >> 16)) >> 32);
              if (v343 + 1 > 8)
                v344 = v343 + 1;
              else
                v344 = 8;
              sub_2399168C0(&v461, 4 * (v326 * HIDWORD(v336)), v344);
              v463 = v442;
              *(_QWORD *)&v464 = 4 * v339;
              *((_QWORD *)&v464 + 1) = (4 * v337) & 0xFFFFFFFCFFFFFFFCLL;
              sub_239488438((uint64_t)&v461, (uint64_t)&v441);
              v345 = *(_OWORD *)&v460[16];
              *(_OWORD *)a3 = *(_OWORD *)v460;
              *(_OWORD *)(a3 + 16) = v345;
              *(_OWORD *)(a3 + 32) = *(_OWORD *)&v460[32];
              *(_DWORD *)(a3 + 48) = *(_DWORD *)&v460[48];
              v346 = v464;
              *v213 = v463;
              *(_OWORD *)(a3 + 96) = v346;
              sub_23991693C((_QWORD *)(a3 + 56), &v461);
              sub_239916980((uint64_t)&v461);
              v347 = *(_QWORD *)&v433[16];
              if ((*(_BYTE *)(*(_QWORD *)&v433[16] + 168) & 0x40) != 0)
              {
                if (*(_BYTE *)(*(_QWORD *)&v433[16] + 232))
                {
                  if (*(_BYTE *)(*(_QWORD *)&v433[16] + 228) && *(_QWORD *)(*(_QWORD *)&v433[16] + 216))
                  {
                    v348 = *(_QWORD *)(*(_QWORD *)&v433[16] + 184);
                    v349 = *(std::__shared_weak_count **)(*(_QWORD *)&v433[16] + 192);
                    if (v349)
                    {
                      v350 = (unint64_t *)&v349->__shared_owners_;
                      do
                        v351 = __ldxr(v350);
                      while (__stxr(v351 + 1, v350));
                      do
                        v352 = __ldaxr(v350);
                      while (__stlxr(v352 - 1, v350));
                      if (!v352)
                      {
                        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                        std::__shared_weak_count::__release_weak(v349);
                      }
                    }
                    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v348 + 88))(v348, 0, "unknown location");
                  }
                  v353 = (uint64_t (***)())(v347 + 216);
                }
                else
                {
                  v353 = (uint64_t (***)())(*(_QWORD *)&v433[16] + 160);
                }
                v354 = 0;
                v355 = 0;
                v356 = *(_DWORD *)(v347 + 156);
                if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v347 + 120)))) & 1) != 0)
                {
                  v357 = 0;
                }
                else
                {
                  v357 = 0;
                  if (*(_DWORD *)(v347 + 136))
                  {
                    v354 = *(_QWORD *)(v347 + 124);
                    v355 = HIDWORD(*(_OWORD *)(v347 + 120));
                    v357 = *(_DWORD *)(v347 + 136);
                  }
                }
                if (v357 * v356 != -1)
                {
                  v388 = *v353;
                  v389 = *(_DWORD *)(v347 + 152);
                  v390 = v355 | ((unint64_t)v357 << 32);
                  v391 = *(_QWORD *)(v347 + 144);
                  if (HIDWORD(v354))
                    v392 = (_DWORD)v354 == 0;
                  else
                    v392 = 1;
                  v394 = v392 || v355 == 0 || v357 == 0;
                  v395 = v394;
                  if (v394)
                    v396 = 0;
                  else
                    v396 = v354;
                  if (v394)
                    v390 = 0;
                  v397 = HIDWORD(v390);
                  v441 = v388;
                  *(_QWORD *)&v442 = v396;
                  *((_QWORD *)&v442 + 1) = v390;
                  v443 = v391;
                  v444 = v389;
                  v445 = v356;
                  if (v356 * HIDWORD(v390) != -1)
                  {
                    if ((_DWORD)v396)
                      v398 = (_DWORD)v390 == 0;
                    else
                      v398 = 1;
                    if (v398 || HIDWORD(v390) == 0)
                      v400 = 1;
                    else
                      v400 = v395;
                    v401 = v400 == 0;
                    if (v400)
                      v402 = 0;
                    else
                      v402 = v396;
                    if (v401)
                      v403 = v390;
                    else
                      v403 = 0;
                    v404 = (_DWORD)v402 != 0;
                    v405 = HIDWORD(v402) * v402;
                    if ((_DWORD)v403)
                      v406 = v405;
                    else
                      v406 = 0;
                    v407 = (unint64_t)(v405 * v403) << 32;
                    if (!HIDWORD(v403))
                      v407 = 0;
                    v308 = v407 | v406;
                    if (HIDWORD(v402))
                      v408 = v402 << 32;
                    else
                      v408 = 0;
                    v310 = v408 | v404;
                    *(_QWORD *)v460 = v402;
                    *(_QWORD *)&v460[8] = v403;
                    *(_QWORD *)&v460[16] = v408 | v404;
                    *(_QWORD *)&v460[24] = v407 | v406;
                    v460[32] = 0;
                    v460[48] = 0;
                    v311 = 4 * (v397 * HIDWORD(v407));
                    v409 = 3;
                    if (((v407 >> 30) & ((v407 >> 30) - 1)) == 0)
                      v409 = (v407 >> 30) - 1;
                    v410 = v409 | (v409 >> 1) | ((v409 | (v409 >> 1)) >> 2);
                    v411 = v410 | (v410 >> 4) | ((v410 | (v410 >> 4)) >> 8);
                    v412 = v411 | (v411 >> 16) | ((v411 | (v411 >> 16)) >> 32);
                    if (v412 + 1 > 8)
                      v316 = v412 + 1;
                    else
                      v316 = 8;
                    goto LABEL_656;
                  }
                }
                v425 = 983;
              }
              else
              {
                v425 = 724;
              }
              sub_239A444D4((uint64_t)"unknown file", v425, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
          }
          v423 = 983;
        }
        else
        {
          v423 = 724;
        }
        sub_239A444D4((uint64_t)"unknown file", v423, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
    }
    v62 = sub_239490B68((char **)&v451, (uint64_t)v460);
    goto LABEL_98;
  }
  if (v9 != 21)
    return 0;
  v441 = &off_250ADB468;
  sub_239494110(a2, (uint64_t)&v442);
  v12 = v442;
  if (!(_QWORD)v442)
    goto LABEL_39;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
    v12 = v442;
    if (*((_QWORD *)&v442 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (HIBYTE(v450))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 96))(&v440, v12, 0);
    v21 = (*a1)->__vftable[1].~__shared_weak_count_0;
    if (*((_BYTE *)v21 + 80))
      goto LABEL_19;
  }
  else
  {
LABEL_39:
    v440 = 0;
    v21 = (*a1)->__vftable[1].~__shared_weak_count_0;
    if (*((_BYTE *)v21 + 80))
    {
LABEL_19:
      if (*((_BYTE *)v21 + 52))
      {
        v22 = *((_DWORD *)v21 + 12);
        if (*((_BYTE *)v21 + 60))
        {
LABEL_21:
          v23 = *((_DWORD *)v21 + 14);
          goto LABEL_83;
        }
      }
      else
      {
        v22 = 0;
        if (*((_BYTE *)v21 + 60))
          goto LABEL_21;
      }
      v23 = 0;
LABEL_83:
      *(_OWORD *)v432 = 0u;
      *(_OWORD *)v433 = 0u;
      *(_DWORD *)&v433[16] = 1065353216;
      sub_239719E98((uint64_t)v460, 4, (uint64_t)v432, 0.0, 0.0);
      v426 = v23;
      v427 = v22;
      v437 = 0;
      v438 = 0;
      v439 = 0;
      v63 = (char *)operator new(0x38uLL);
      v437 = v63;
      v438 = v63;
      v64 = v63 + 56;
      v439 = (unint64_t)(v63 + 56);
      *(_QWORD *)v63 = *(_QWORD *)v460;
      v65 = *(_DWORD *)&v460[8];
      *((_OWORD *)v63 + 1) = 0u;
      v66 = (uint64_t)(v63 + 16);
      *((_DWORD *)v63 + 2) = v65;
      *((_OWORD *)v63 + 2) = 0u;
      *((_DWORD *)v63 + 12) = *(_DWORD *)&v460[48];
      prime = *(_QWORD *)&v460[24];
      if (*(_QWORD *)&v460[24] == 1)
      {
        prime = 2;
      }
      else
      {
        if ((*(_QWORD *)&v460[24] & (*(_QWORD *)&v460[24] - 1)) != 0)
        {
          prime = std::__next_prime(*(size_t *)&v460[24]);
          v72 = *(int8x8_t *)(v63 + 24);
          v73 = prime >= *(_QWORD *)&v72;
          if (prime > *(_QWORD *)&v72)
            goto LABEL_85;
        }
        else
        {
          v72 = 0;
          v73 = 1;
          if (*(_QWORD *)&v460[24])
            goto LABEL_85;
        }
        if (v73)
          goto LABEL_86;
        v92 = vcvtps_u32_f32((float)*((unint64_t *)v63 + 5) / *((float *)v63 + 12));
        if (*(_QWORD *)&v72 < 3uLL || (v93 = (uint8x8_t)vcnt_s8(v72), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
        {
          v92 = std::__next_prime(v92);
        }
        else
        {
          v94 = 1 << -(char)__clz(v92 - 1);
          if (v92 >= 2)
            v92 = v94;
        }
        if (prime <= v92)
          prime = v92;
        if (prime >= *(_QWORD *)&v72)
        {
LABEL_86:
          v68 = *(_QWORD **)&v460[32];
          if (*(_QWORD *)&v460[32])
          {
            do
            {
              sub_239428484(v66, (uint64_t)(v68 + 2), (uint64_t)(v68 + 2));
              v68 = (_QWORD *)*v68;
            }
            while (v68);
            v69 = *(void ***)&v460[32];
            v438 = v64;
            v70 = v426;
            if (*(_QWORD *)&v460[32])
            {
              do
              {
                v71 = (void **)*v69;
                if (*((char *)v69 + 39) < 0)
                  operator delete(v69[2]);
                operator delete(v69);
                v69 = v71;
              }
              while (v71);
            }
          }
          else
          {
            v438 = v63 + 56;
            v70 = v426;
          }
          v78 = *(void **)&v460[16];
          *(_QWORD *)&v460[16] = 0;
          if (v78)
            operator delete(v78);
          v79 = *(void ***)v433;
          if (*(_QWORD *)v433)
          {
            do
            {
              v90 = (void **)*v79;
              if (*((char *)v79 + 39) < 0)
                operator delete(v79[2]);
              operator delete(v79);
              v79 = v90;
            }
            while (v90);
          }
          v80 = v432[0];
          v432[0] = 0;
          if (v80)
            operator delete(v80);
          v81 = v427;
          v82 = (float)v427 / (float)v448;
          *(float *)v432 = v82;
          v83 = (float)v70 / (float)v449;
          *(float *)&v429 = v83;
          if (v82 != 1.0)
          {
            v84 = v82 + -1.0;
            if (v82 < 1.0)
              v84 = 1.0 - v82;
            if (v84 > 0.000001)
              goto LABEL_122;
          }
          if (v83 != 1.0)
          {
            v85 = v83 + -1.0;
            if (v83 < 1.0)
              v85 = 1.0 - v83;
            if (v85 > 0.000001)
            {
LABEL_122:
              LODWORD(v458) = 9;
              v86 = v438;
              if ((unint64_t)v438 >= v439)
              {
                v89 = (char *)sub_239428D8C(&v437, (int *)&v458, (float *)v432, (float *)&v429);
              }
              else
              {
                memset(v460, 0, 32);
                *(_DWORD *)&v460[32] = 1065353216;
                sub_239719E98((uint64_t)v438, 9, (uint64_t)v460, v82, v83);
                v87 = *(void ***)&v460[16];
                if (*(_QWORD *)&v460[16])
                {
                  do
                  {
                    v91 = (void **)*v87;
                    if (*((char *)v87 + 39) < 0)
                      operator delete(v87[2]);
                    operator delete(v87);
                    v87 = v91;
                  }
                  while (v91);
                }
                v88 = *(void **)v460;
                *(_QWORD *)v460 = 0;
                v81 = v427;
                if (v88)
                  operator delete(v88);
                v89 = v86 + 56;
                v70 = v426;
              }
              v438 = v89;
            }
          }
          if (!*((_DWORD *)a1 + 78) || !*((_DWORD *)a1 + 79))
          {
            v432[0] = (void *)__PAIR64__(v70, v81);
            *(_QWORD *)v460 = &off_250ADBC88;
            sub_239469E68(v432, (uint64_t)&v460[8]);
            v95 = *(_OWORD *)&v460[8];
            *(_QWORD *)&v460[8] = 0;
            *(_QWORD *)&v460[16] = 0;
            v96 = a1[33];
            *((_OWORD *)a1 + 16) = v95;
            if (v96)
            {
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            v99 = *(_OWORD *)&v460[40];
            *((_OWORD *)a1 + 17) = *(_OWORD *)&v460[24];
            *((_OWORD *)a1 + 18) = v99;
            *((_OWORD *)a1 + 19) = v461;
            a1[40] = v462;
            sub_239416DA0((uint64_t)&v460[8]);
            nullsub_4(v460);
          }
          v101 = a1[32];
          v100 = a1[33];
          if (v100)
          {
            v102 = (unint64_t *)&v100->__shared_owners_;
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
            do
              v104 = __ldxr(v102);
            while (__stxr(v104 + 1, v102));
            do
              v105 = __ldaxr(v102);
            while (__stlxr(v105 - 1, v102));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            do
              v106 = __ldxr(v102);
            while (__stxr(v106 + 1, v102));
            do
              v107 = __ldaxr(v102);
            while (__stlxr(v107 - 1, v102));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            do
              v108 = __ldaxr(v102);
            while (__stlxr(v108 - 1, v102));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          if (v101)
          {
            ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *, uint64_t))a1[32]->__vftable[2].__on_zero_shared)(&v436, a1[32], 1);
            *(_QWORD *)v460 = &off_250ADB210;
            v109 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
            v110 = v442;
            *(_OWORD *)v432 = v442;
            if (!*((_QWORD *)&v442 + 1))
              goto LABEL_170;
          }
          else
          {
            v436 = 0;
            *(_QWORD *)v460 = &off_250ADB210;
            v109 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
            v110 = v442;
            *(_OWORD *)v432 = v442;
            if (!*((_QWORD *)&v442 + 1))
              goto LABEL_170;
          }
          v111 = (unint64_t *)&v109->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
LABEL_170:
          sub_2398EB464((uint64_t)&v429, 3, (uint64_t)&v444, 3, (uint64_t)&v446 + 4, 1);
          v113 = v443;
          v114 = v450;
          if (v109)
          {
            v115 = (unint64_t *)&v109->__shared_owners_;
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
            do
              v117 = __ldxr(v115);
            while (__stxr(v117 + 1, v115));
          }
          *(_QWORD *)&v460[8] = v110;
          *(_QWORD *)&v460[16] = v109;
          *(_QWORD *)&v460[24] = v429;
          *(_DWORD *)&v460[32] = DWORD2(v429);
          *(_QWORD *)&v460[40] = v113;
          *(_DWORD *)&v460[48] = 21;
          *(_WORD *)&v460[52] = v114;
          if (v109)
          {
            v118 = (unint64_t *)&v109->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          nullsub_4(&v429);
          v120 = (std::__shared_weak_count *)v432[1];
          if (v432[1])
          {
            v121 = (unint64_t *)((char *)v432[1] + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          sub_239719BC8((uint64_t *)&v437, (int32x2_t *)v460, (uint64_t)(a1 + 31), (uint64_t)(a1 + 3));
          nullsub_4(&v460[24]);
          v123 = *(std::__shared_weak_count **)&v460[16];
          if (*(_QWORD *)&v460[16])
          {
            v124 = (unint64_t *)(*(_QWORD *)&v460[16] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          nullsub_4(v460);
          if (a6)
          {
            v126 = *((_DWORD *)a1 + 79);
            v127 = *((_DWORD *)a1 + 78);
            v428 = *((_DWORD *)a1 + 81);
            *(_QWORD *)v460 = &off_250ADB350;
            v128 = *(void **)(a5 + 8);
            v129 = *(std::__shared_weak_count **)(a5 + 16);
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldxr(v130);
              while (__stxr(v131 + 1, v130));
              v432[0] = v128;
              v432[1] = v129;
              do
                v132 = __ldxr(v130);
              while (__stxr(v132 + 1, v130));
              do
                v133 = __ldaxr(v130);
              while (__stlxr(v133 - 1, v130));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            else
            {
              v432[0] = v128;
              v432[1] = 0;
            }
            v134 = v432[0];
            v135 = (std::__shared_weak_count *)v432[1];
            v429 = *(_OWORD *)v432;
            if (v432[1])
            {
              v136 = (unint64_t *)((char *)v432[1] + 8);
              do
                v137 = __ldxr(v136);
              while (__stxr(v137 + 1, v136));
              do
                v138 = __ldxr(v136);
              while (__stxr(v138 + 1, v136));
              *(_QWORD *)&v460[8] = v134;
              *(_QWORD *)&v460[16] = v135;
              do
                v139 = __ldxr(v136);
              while (__stxr(v139 + 1, v136));
              do
                v140 = __ldaxr(v136);
              while (__stlxr(v140 - 1, v136));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            else
            {
              *(void **)&v460[8] = v432[0];
              *(_QWORD *)&v460[16] = 0;
            }
            (*(void (**)(std::__shared_weak_count **__return_ptr, void *, uint64_t))(*(_QWORD *)v134 + 72))(&v458, v134, 1);
            shared_weak_owners = v458->__shared_weak_owners_;
            *(std::__shared_count *)&v460[24] = v458->std::__shared_count;
            *(_QWORD *)&v460[40] = shared_weak_owners;
            v458 = 0;
            MEMORY[0x23B83E31C]();
            v142 = *(_QWORD *)&v460[8];
            v143 = *(std::__shared_weak_count **)&v460[16];
            if (*(_QWORD *)&v460[16])
            {
              v144 = (unint64_t *)(*(_QWORD *)&v460[16] + 8);
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
              do
                v146 = __ldaxr(v144);
              while (__stlxr(v146 - 1, v144));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 104))(v142);
            v149 = v147;
            if ((v147 & 0xFFFFFF) <= 0x10000)
              v149 = 0;
            v150 = v147 & 0xFF00;
            if ((v147 & 0xFF0000) == 0)
              v150 = 0;
            *(_WORD *)&v460[48] = v150 & 0xFF00 | v149;
            v151 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
            if (*((_QWORD *)&v429 + 1))
            {
              v152 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            v154 = (std::__shared_weak_count *)v432[1];
            if (v432[1])
            {
              v155 = (unint64_t *)((char *)v432[1] + 8);
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            *(_QWORD *)&v429 = a1[39];
            if (v126 >= 1 && v127 >= 1)
            {
              v157 = 0.0;
              do
              {
                v158 = 0.0;
                do
                {
                  *(double *)v432 = v158;
                  *(double *)&v432[1] = v157;
                  if (sub_239417534((uint64_t)v460, (double *)v432, &v429, 1uLL, v158, v148) < 0.5)
                    *((_BYTE *)&a1[35]->__vftable + (int)v158 + (int)(float)(v157 * (float)v428)) = 0;
                  v158 = v158 + 1.0;
                }
                while (v158 < (float)v127);
                v157 = v157 + 1.0;
              }
              while (v157 < (float)v126);
            }
            v159 = *(std::__shared_weak_count **)&v460[16];
            if (*(_QWORD *)&v460[16])
            {
              v160 = (unint64_t *)(*(_QWORD *)&v460[16] + 8);
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
            nullsub_4(v460);
          }
          *(_QWORD *)&v429 = &off_250ADB210;
          v162 = a1[32];
          v163 = a1[33];
          v458 = v162;
          v459 = v163;
          if (v163)
          {
            v164 = (unint64_t *)&v163->__shared_owners_;
            do
              v165 = __ldxr(v164);
            while (__stxr(v165 + 1, v164));
            v456 = v162;
            v457 = v163;
            do
              v166 = __ldxr(v164);
            while (__stxr(v166 + 1, v164));
          }
          else
          {
            v456 = v162;
            v457 = 0;
          }
          v167 = a1[35];
          sub_2398EB464((uint64_t)&v454, 2, (uint64_t)(a1 + 39), 2, (uint64_t)(a1 + 40), 1);
          if (v163)
          {
            v168 = (unint64_t *)&v163->__shared_owners_;
            do
              v169 = __ldxr(v168);
            while (__stxr(v169 + 1, v168));
          }
          *((_QWORD *)&v429 + 1) = v162;
          v430 = v163;
          *(_QWORD *)v431 = v454;
          *(_DWORD *)&v431[8] = v455;
          *(_QWORD *)&v431[16] = v167;
          *(_DWORD *)&v431[24] = 1;
          if (v162)
          {
            if (v163)
            {
              v170 = (unint64_t *)&v163->__shared_owners_;
              do
                v171 = __ldxr(v170);
              while (__stxr(v171 + 1, v170));
              do
                v172 = __ldaxr(v170);
              while (__stlxr(v172 - 1, v170));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                std::__shared_weak_count::__release_weak(v163);
              }
            }
            v173 = ((uint64_t (*)(std::__shared_weak_count *))v162->__vftable[2].__get_deleter)(v162);
            if ((v173 & 0xFFFFFFu) <= 0x10000)
              v174 = 0;
            else
              v174 = v173;
            v175 = v173 & 0xFF00;
            if ((v173 & 0xFF0000) == 0)
              v175 = 0;
            *(_WORD *)&v431[28] = v175 & 0xFF00 | v174;
            nullsub_4(&v454);
            v176 = v457;
            if (!v457)
            {
LABEL_272:
              v179 = v459;
              if (v459)
              {
                v180 = (unint64_t *)&v459->__shared_owners_;
                do
                  v181 = __ldaxr(v180);
                while (__stlxr(v181 - 1, v180));
                if (!v181)
                {
                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                  std::__shared_weak_count::__release_weak(v179);
                }
              }
              v182 = *((_QWORD *)&v429 + 1);
              v183 = v430;
              v432[0] = &off_250ADB210;
              v432[1] = *((void **)&v429 + 1);
              *(_QWORD *)v433 = v430;
              *((_QWORD *)&v429 + 1) = 0;
              v430 = 0;
              *(_OWORD *)&v433[8] = *(_OWORD *)v431;
              *(_OWORD *)&v433[22] = *(_OWORD *)&v431[14];
              v435 = 2;
              v465 = -1;
              *(_QWORD *)v460 = &off_250ADB210;
              if (v183)
              {
                v184 = (unint64_t *)&v183->__shared_owners_;
                do
                  v185 = __ldxr(v184);
                while (__stxr(v185 + 1, v184));
                v186 = *(_QWORD *)&v433[24];
                v187 = *(_DWORD *)&v433[32];
                v188 = *(_WORD *)&v433[36];
                do
                  v189 = __ldxr(v184);
                while (__stxr(v189 + 1, v184));
              }
              else
              {
                v186 = *(_QWORD *)&v433[24];
                v187 = *(_DWORD *)&v433[32];
                v188 = *(_WORD *)&v433[36];
              }
              *(_QWORD *)&v460[8] = v182;
              *(_QWORD *)&v460[16] = v183;
              *(_QWORD *)&v460[24] = *(_QWORD *)&v433[8];
              *(_DWORD *)&v460[32] = *(_DWORD *)&v433[16];
              *(_QWORD *)&v460[40] = v186;
              *(_DWORD *)&v460[48] = v187;
              *(_WORD *)&v460[52] = v188;
              if (!v183)
                goto LABEL_288;
              v190 = (unint64_t *)&v183->__shared_owners_;
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                std::__shared_weak_count::__release_weak(v183);
                v465 = 2;
                v192 = v452;
                if ((unint64_t)v452 < v453)
                  goto LABEL_289;
              }
              else
              {
LABEL_288:
                v465 = 2;
                v192 = v452;
                if ((unint64_t)v452 < v453)
                {
LABEL_289:
                  *v192 = 0;
                  *((_DWORD *)v192 + 30) = -1;
                  v193 = v465;
                  if (v465 != -1)
                  {
                    ((void (*)(std::__shared_weak_count **, char *, _BYTE *))off_250ADC9A8[v465])(&v458, v192, v460);
                    *((_DWORD *)v192 + 30) = v193;
                  }
                  v194 = v192 + 128;
LABEL_294:
                  v452 = v194;
                  if (v465 != -1)
                    ((void (*)(std::__shared_weak_count **, _BYTE *))off_250ADC918[v465])(&v458, v460);
                  v465 = -1;
                  if (v435 != -1)
                    ((void (*)(std::__shared_weak_count **, void **))off_250ADC918[v435])(&v458, v432);
                  v435 = -1;
                  nullsub_4(v431);
                  v195 = v430;
                  if (v430)
                  {
                    v196 = (unint64_t *)&v430->__shared_owners_;
                    do
                      v197 = __ldaxr(v196);
                    while (__stlxr(v197 - 1, v196));
                    if (!v197)
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                    }
                  }
                  nullsub_4(&v429);
                  v198 = v436;
                  v436 = 0;
                  if (v198)
                    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
                  v199 = (char *)v437;
                  if (v437)
                  {
                    v200 = v438;
                    v201 = v437;
                    if (v438 != v437)
                    {
                      do
                      {
                        v202 = (void **)*((_QWORD *)v200 - 3);
                        if (v202)
                        {
                          do
                          {
                            v204 = (void **)*v202;
                            if (*((char *)v202 + 39) < 0)
                              operator delete(v202[2]);
                            operator delete(v202);
                            v202 = v204;
                          }
                          while (v204);
                        }
                        v203 = (void *)*((_QWORD *)v200 - 5);
                        *((_QWORD *)v200 - 5) = 0;
                        if (v203)
                          operator delete(v203);
                        v200 -= 56;
                      }
                      while (v200 != v199);
                      v201 = v437;
                    }
                    v438 = v199;
                    operator delete(v201);
                  }
                  v205 = v440;
                  v440 = 0;
                  if (v205)
                    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
                  v75 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
                  if (*((_QWORD *)&v442 + 1))
                  {
                    v206 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
                    do
                      v77 = __ldaxr(v206);
                    while (__stlxr(v77 - 1, v206));
                    goto LABEL_322;
                  }
                  goto LABEL_324;
                }
              }
              v194 = sub_239490B68((char **)&v451, (uint64_t)v460);
              goto LABEL_294;
            }
          }
          else
          {
            *(_WORD *)&v431[28] = 0;
            nullsub_4(&v454);
            v176 = v457;
            if (!v457)
              goto LABEL_272;
          }
          v177 = (unint64_t *)&v176->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
          goto LABEL_272;
        }
      }
LABEL_85:
      sub_239427FE0(v66, prime);
      goto LABEL_86;
    }
  }
  v36 = v440;
  v440 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  nullsub_4(&v441);
  v24 = 0;
  v40 = (char *)v451;
  if (v451)
  {
LABEL_407:
    v256 = v452;
    v257 = v40;
    if (v452 != v40)
    {
      do
      {
        v258 = v256 - 128;
        v259 = *((unsigned int *)v256 - 2);
        if ((_DWORD)v259 != -1)
          ((void (*)(_BYTE *, char *))off_250ADC918[v259])(v460, v256 - 128);
        *((_DWORD *)v256 - 2) = -1;
        v256 -= 128;
      }
      while (v258 != v40);
      v257 = v451;
    }
    v452 = v40;
    operator delete(v257);
  }
  return v24;
}

void sub_239493AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v48;

  sub_239916980(v48);
  sub_23949401C((uint64_t)&a17);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  sub_23949401C((uint64_t)&a17);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v48;

  sub_239916980(v48);
  sub_23948FF04((uint64_t)&a17);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493B80(_Unwind_Exception *a1, _Unwind_Exception *exception_object, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t exception_objecta, uint64_t exception_object_8, uint64_t exception_object_16, uint64_t exception_object_24, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,void *a48)
{
  sub_23948FF04((uint64_t)&a17);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  nullsub_4(&a57);
  JUMPOUT(0x239493ED4);
}

void sub_239493C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,int a51,char a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  nullsub_4(v56);
  if (a12)
    sub_239EBF904(a12);
  nullsub_4(&a52);
  sub_239416DA0((uint64_t)&a54);
  sub_239416DA0((uint64_t)&a56);
  nullsub_4(&a10);
  v57 = a33;
  a33 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  sub_239493F74(&a34);
  v58 = a37;
  a37 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_2394183B0((uint64_t)&a38);
  sub_23948FB4C(&a48);
  JUMPOUT(0x239493F04);
}

void sub_239493CB8()
{
  JUMPOUT(0x239493CC0);
}

void sub_239493CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  uint64_t v58;

  sub_239416DA0((uint64_t)&a17);
  nullsub_4(&a57);
  v57 = a33;
  a33 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  sub_239493F74(&a34);
  v58 = a37;
  a37 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_2394183B0((uint64_t)&a38);
  sub_23948FB4C(&a48);
  JUMPOUT(0x239493F04);
}

void sub_239493D2C(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v1 = va_arg(va1, _QWORD);
  v3 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  nullsub_4(va1);
  JUMPOUT(0x239493D40);
}

void sub_239493D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  nullsub_4(&a38);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v48;

  sub_239916980(v48);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  uint64_t v48;

  sub_239916980(v48);
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  sub_23948FB4C(&a48);
  _Unwind_Resume(a1);
}

void sub_239493EA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239493EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_2394176A0((uint64_t)&a57);
  JUMPOUT(0x239493EBCLL);
}

uint64_t sub_239493F0C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 32);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void **sub_239493F74(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void **)*((_QWORD *)v3 - 3);
        if (v5)
        {
          do
          {
            v7 = (void **)*v5;
            if (*((char *)v5 + 39) < 0)
              operator delete(v5[2]);
            operator delete(v5);
            v5 = v7;
          }
          while (v7);
        }
        v6 = (void *)*((_QWORD *)v3 - 5);
        *((_QWORD *)v3 - 5) = 0;
        if (v6)
          operator delete(v6);
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_23949401C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(void **)(a1 + 32);
      if (v3 != v2)
      {
        do
        {
          v5 = v3 - 128;
          v6 = *(unsigned int *)(v3 - 8);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_250ADC930[v6])(&v11, v3 - 128);
          *(_DWORD *)(v3 - 8) = -1;
          v3 -= 128;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = &off_250ADC870;
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return nullsub_4(a1);
}

void sub_239494110(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::logic_error *exception;
  std::string v27;
  _BYTE v28[12];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 21)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2394943DC(a1, &v27);
    std::logic_error::logic_error(exception, &v27);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v27.__r_.__value_.__r.__words[0] = v4;
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24))
    v12 = 3;
  else
    v12 = 0;
  if (!*(_DWORD *)(a1 + 28))
    v11 = 1;
  v13 = !v11;
  if (v11)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v15 = v14 | v12;
  v16 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v16 = 0;
  *(_QWORD *)&v28[4] = v16;
  *(_DWORD *)v28 = 3;
  v17 = *(_QWORD *)v28;
  *(_DWORD *)v28 = 1;
  *(_QWORD *)&v28[4] = v15;
  v18 = HIDWORD(v14);
  if (HIDWORD(v16) * (_DWORD)v18 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v19 = *(_QWORD *)v28;
  v20 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
  if (v27.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(v27.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)a2 = v27.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 32) = HIDWORD(v16);
  *(_QWORD *)(a2 + 36) = v19;
  *(_DWORD *)(a2 + 44) = v18;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v15;
  *(_WORD *)(a2 + 64) = v20;
  if (size)
  {
    v24 = (unint64_t *)&size->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_239494390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_2394943DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239494454();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_239494454()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569307B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569307B8))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_239469DC0();
    sub_239494658((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239494658((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569307A0, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569307A0, &dword_23940C000);
          __cxa_guard_release(&qword_2569307B8);
          return &stru_2569307A0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569307A0;
}

void sub_2394945A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569307B8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569307B8);
  _Unwind_Resume(a1);
}

void sub_239494658(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_2394946EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *sub_239494728()
{
  unsigned __int8 v0;
  _QWORD *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569307D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569307D8))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23941BB04();
    sub_23949492C((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23949492C((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569307C0, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569307C0, &dword_23940C000);
          __cxa_guard_release(&qword_2569307D8);
          return &stru_2569307C0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569307C0;
}

void sub_239494878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569307D8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569307D8);
  _Unwind_Resume(a1);
}

void sub_23949492C(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_2394949C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_2394949FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _BOOL8 v11;
  _BOOL4 v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::logic_error *exception;
  std::string v24;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239494C58(a1, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v24.__r_.__value_.__r.__words[0] = v4;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_DWORD *)(a1 + 24);
  v11 = v10 != 0;
  v12 = v10 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v12 = 1;
  v13 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v14 = !v12;
  if (v12)
    v13 = 0;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v15 = 0;
  if (HIDWORD(v15) * HIDWORD(v13) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = v13 | v11;
  v18 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
  }
}

void sub_239494C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_239494C58(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239494CD0();
  v5 = sub_239494728();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_239494CD0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569307F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569307F8))
  {
    sub_23941A4FC(v7, "ConstImageView");
    v2 = sub_23941B3D0();
    sub_239494ED4((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239494ED4((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569307E0, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569307E0, &dword_23940C000);
          __cxa_guard_release(&qword_2569307F8);
          return &stru_2569307E0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569307E0;
}

void sub_239494E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569307F8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569307F8);
  _Unwind_Resume(a1);
}

void sub_239494ED4(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_239494F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_239494FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_4(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_4(v3);
    }
    else
    {
LABEL_6:
      nullsub_4(v3);
    }
  }
}

void sub_23949502C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_4(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_4(v3);
    }
    else
    {
LABEL_6:
      nullsub_4(v3);
    }
  }
}

void sub_2394950B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_4(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_4(v3);
    }
    else
    {
LABEL_6:
      nullsub_4(v3);
    }
  }
}

uint64_t sub_23949513C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250ADC958;
  *(_QWORD *)(a1 + 24) = off_250AE2350;
  sub_23949021C(a1 + 32, (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 24) = off_250AE2310;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    if (*(char *)(a2 + 151) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 152), *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = v4;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 24) = &off_250ADC990;
  return a1;
}

void sub_239495204(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(_BYTE *)(v1 + 176))
  {
    if (*(char *)(v1 + 175) < 0)
      operator delete(*v3);
  }
  sub_2396504E0(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

void sub_239495238(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_23949524C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23949525C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23949528C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_23949529C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  *a3 = 0;
  v13 = v7;
  sub_23964F5DC(a1, &v14, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15;
  if (!v15)
    return a1;
  v10 = (unint64_t *)&v15->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_239495364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239495390(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v10[2];
  uint64_t v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int16 v29;
  void *__p[3];
  char v31;
  uint64_t v32;
  __int16 v33;
  __int128 __dst;
  uint64_t v35;
  char v36;
  uint64_t v37[15];

  LOBYTE(v10[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_23941A7F8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a4;
      v11 = *(_QWORD *)(a4 + 16);
    }
    v12 = 1;
    LOBYTE(__dst) = 0;
    v36 = 0;
    if (SHIBYTE(v11) < 0)
    {
      sub_23941A7F8(&__dst, v10[0], (unint64_t)v10[1]);
    }
    else
    {
      __dst = *(_OWORD *)v10;
      v35 = v11;
    }
    v36 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    v36 = 0;
  }
  sub_23949596C((uint64_t)v37, a2, (uint64_t)&__dst);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)__dst);
  LOBYTE(__p[0]) = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if ((a5 & 0xFF00000000) != 0)
    LODWORD(v32) = a5;
  sub_23964F7CC((uint64_t)v13, v37, (uint64_t)__p);
  if (v31 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_239496C54((uint64_t)v37);
  v8 = v14;
  *(_QWORD *)a1 = off_250AE2350;
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  v16 = 0uLL;
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  v19 = 0;
  v17 = 0;
  v18 = 0uLL;
  *(_OWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 88) = v21;
  v20 = 0uLL;
  v21 = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (v24)
  {
    *(_OWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 112) = v23;
    v23 = 0;
    v22 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)a1 = &off_250AE22B8;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (v27)
  {
    *(_OWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 144) = v26;
    v26 = 0;
    v25 = 0uLL;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_QWORD *)(a1 + 160) = v28;
  *(_WORD *)(a1 + 168) = v29;
  sub_23964F870((uint64_t)v13);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  *(_QWORD *)a1 = &off_250ADC9D0;
  return a1;
}

void sub_2394955CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (*(_BYTE *)(v41 - 168) && *(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23949563C(uint64_t a1)
{
  sub_23964F82C(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239495660(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v10[2];
  uint64_t v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 __p;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  __int128 __dst;
  uint64_t v35;
  char v36;
  uint64_t v37[15];

  LOBYTE(v10[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_23941A7F8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a4;
      v11 = *(_QWORD *)(a4 + 16);
    }
    v12 = 1;
    LOBYTE(__dst) = 0;
    v36 = 0;
    if (SHIBYTE(v11) < 0)
    {
      sub_23941A7F8(&__dst, v10[0], (unint64_t)v10[1]);
    }
    else
    {
      __dst = *(_OWORD *)v10;
      v35 = v11;
    }
    v36 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    v36 = 0;
  }
  sub_23949596C((uint64_t)v37, a2, (uint64_t)&__dst);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)__dst);
  if ((a5 & 0xFF00000000) != 0 && (_DWORD)a5)
  {
    sub_239A444D4((uint64_t)"unknown file", 115, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  LOBYTE(__p) = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_239650174((uint64_t)v13, v37, &__p);
  if (v31 && v30 < 0)
    operator delete((void *)__p);
  sub_239496C54((uint64_t)v37);
  v8 = v14;
  *(_QWORD *)a1 = off_250AE2350;
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  v16 = 0uLL;
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  v19 = 0;
  v17 = 0;
  v18 = 0uLL;
  *(_OWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 88) = v21;
  v20 = 0uLL;
  v21 = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (v24)
  {
    *(_OWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 112) = v23;
    v23 = 0;
    v22 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)a1 = off_250AE2310;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (v27)
  {
    *(_OWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 144) = v26;
    v26 = 0;
    v25 = 0uLL;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_OWORD *)(a1 + 160) = v28;
  sub_23965027C((uint64_t)v13);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  *(_QWORD *)a1 = &off_250ADC8E8;
  return a1;
}

void sub_2394958C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  uint64_t v44;

  if (*(_BYTE *)(v44 - 168) && *(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v44 - 192));
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_239495948(uint64_t a1)
{
  sub_239650228(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23949596C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  unint64_t *p_size;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  void *v23;
  _BYTE *v24;
  _BYTE *v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *v48[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;
  void *v52[2];
  uint64_t v53;
  std::string __src;
  void *v55[2];
  _BYTE *v56;
  void *__dst[2];
  uint64_t v58;
  std::string v59;
  void *__p[2];
  _BYTE *v61;
  __int128 v62;
  uint64_t v63;
  void *v64[2];
  __int128 v65;
  void *v66[2];
  __int128 v67;
  _BYTE v68[24];
  uint64_t v69;
  _BYTE v70[24];
  _BYTE v71[24];
  _BYTE v72[24];
  _BYTE v73[24];
  std::string v74;
  int v75;
  char v76;
  int v77;
  char v78;
  int v79;
  char v80;
  int v81;
  char v82;
  char v83;
  _BYTE v84[24];
  _BYTE *v85;
  char v86;
  _BYTE v87[24];
  _BYTE *v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  memset(&__src, 0, sizeof(__src));
  v62 = 0uLL;
  v63 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v61 = 0;
  if (a2 == 1)
  {
    MEMORY[0x23B83DBFC](&v62, "DenseFeatureMatcherModel_SMO");
    MEMORY[0x23B83DBFC](__p, "dense_transformer");
    v5 = 60;
    v6 = 45;
  }
  else
  {
    if (a2)
    {
      sub_239A444D4((uint64_t)"unknown file", 64, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    MEMORY[0x23B83DBFC](&v62, "DenseFeatureMatcherModel_General");
    MEMORY[0x23B83DBFC](__p, "dense_transformer");
    v5 = 80;
    v6 = 60;
  }
  v7 = (void *)sub_239498B44();
  v9 = v8;
  if (SHIBYTE(v63) < 0)
  {
    sub_23941A7F8(__dst, (void *)v62, *((unint64_t *)&v62 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v62;
    v58 = v63;
  }
  if (SHIBYTE(v61) < 0)
  {
    sub_23941A7F8(v55, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v55 = *(_OWORD *)__p;
    v56 = v61;
  }
  sub_2394980D0((const void **)__dst, (__int128 *)v55, &v59);
  if (SHIBYTE(v56) < 0)
  {
    operator delete(v55[0]);
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(v58) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
LABEL_13:
  v64[0] = v7;
  LODWORD(v64[1]) = v9;
  *(_QWORD *)&v65 = v5;
  *((_QWORD *)&v65 + 1) = v6;
  *(_OWORD *)v66 = xmmword_239EC6A80;
  strcpy((char *)&v67, "input_feature0");
  HIBYTE(v67) = 0;
  v68[7] = 14;
  strcpy(&v68[8], "input_feature1");
  v68[23] = 0;
  HIBYTE(v69) = 14;
  strcpy(v70, "output_descriptor0");
  v70[23] = 18;
  strcpy(v71, "output_descriptor1");
  v71[23] = 18;
  strcpy(v72, "output_confidence0");
  v72[23] = 18;
  strcpy(v73, "output_confidence1");
  v73[23] = 18;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v74, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v61) & 0x80000000) == 0)
        goto LABEL_21;
    }
    else if ((SHIBYTE(v61) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
LABEL_15:
    operator delete(__p[0]);
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_16;
  }
  v74 = v59;
  if (SHIBYTE(v61) < 0)
    goto LABEL_15;
LABEL_21:
  if (SHIBYTE(v63) < 0)
LABEL_16:
    operator delete((void *)v62);
LABEL_22:
  v39 = *(_OWORD *)v64;
  v40 = v65;
  v41 = *(_OWORD *)v66;
  *(_OWORD *)v42 = v67;
  v43 = *(_QWORD *)v68;
  v68[7] = 0;
  LOBYTE(v67) = 0;
  v38 = a1;
  *(_OWORD *)v44 = *(_OWORD *)&v68[8];
  v45 = v69;
  HIBYTE(v69) = 0;
  v68[8] = 0;
  *(_OWORD *)v46 = *(_OWORD *)v70;
  v47 = *(_QWORD *)&v70[16];
  v70[23] = 0;
  v70[0] = 0;
  *(_OWORD *)v48 = *(_OWORD *)v71;
  v49 = *(_QWORD *)&v71[16];
  v71[23] = 0;
  v71[0] = 0;
  *(_OWORD *)v50 = *(_OWORD *)v72;
  v51 = *(_QWORD *)&v72[16];
  v72[23] = 0;
  v72[0] = 0;
  *(_OWORD *)v52 = *(_OWORD *)v73;
  v53 = *(_QWORD *)&v73[16];
  v73[23] = 0;
  v73[0] = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    __src = v74;
    *((_BYTE *)&v74.__r_.__value_.__s + 23) = 0;
    v74.__r_.__value_.__s.__data_[0] = 0;
    if ((v73[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v73);
      if ((v72[23] & 0x80000000) == 0)
        goto LABEL_33;
    }
    else if ((v72[23] & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
LABEL_24:
    operator delete(*(void **)v72);
    if ((v71[23] & 0x80000000) != 0)
      goto LABEL_25;
    goto LABEL_34;
  }
  __src = v74;
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 0;
  v74.__r_.__value_.__s.__data_[0] = 0;
  if ((v72[23] & 0x80000000) != 0)
    goto LABEL_24;
LABEL_33:
  if ((v71[23] & 0x80000000) != 0)
  {
LABEL_25:
    operator delete(*(void **)v71);
    if ((v70[23] & 0x80000000) != 0)
      goto LABEL_26;
    goto LABEL_35;
  }
LABEL_34:
  if ((v70[23] & 0x80000000) != 0)
  {
LABEL_26:
    operator delete(*(void **)v70);
    if (SHIBYTE(v69) < 0)
      goto LABEL_27;
    goto LABEL_36;
  }
LABEL_35:
  if (SHIBYTE(v69) < 0)
  {
LABEL_27:
    operator delete(*(void **)&v68[8]);
    if ((v68[7] & 0x80000000) != 0)
      goto LABEL_28;
LABEL_37:
    if (!*(_BYTE *)(a3 + 24))
      goto LABEL_29;
    goto LABEL_38;
  }
LABEL_36:
  if ((v68[7] & 0x80000000) == 0)
    goto LABEL_37;
LABEL_28:
  operator delete((void *)v67);
  if (!*(_BYTE *)(a3 + 24))
  {
LABEL_29:
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(_OWORD *)v64 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
      *(_QWORD *)&v65 = *((_QWORD *)&__src.__r_.__value_.__l + 2);
      goto LABEL_45;
    }
    v10 = (void *)__src.__r_.__value_.__r.__words[0];
    p_size = &__src.__r_.__value_.__l.__size_;
    goto LABEL_42;
  }
LABEL_38:
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)v64 = *(_OWORD *)a3;
    *(_QWORD *)&v65 = *(_QWORD *)(a3 + 16);
    goto LABEL_43;
  }
  v12 = *(void **)a3;
  p_size = (unint64_t *)(a3 + 8);
  v10 = v12;
LABEL_42:
  sub_23941A7F8(v64, v10, *p_size);
LABEL_43:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
LABEL_45:
  *(_OWORD *)&__src.__r_.__value_.__l.__data_ = *(_OWORD *)v64;
  __src.__r_.__value_.__r.__words[2] = v65;
  if (SHIBYTE(v43) < 0)
  {
    sub_23941A7F8(v64, v42[0], (unint64_t)v42[1]);
  }
  else
  {
    *(_OWORD *)v64 = *(_OWORD *)v42;
    *(_QWORD *)&v65 = v43;
  }
  BYTE8(v65) = 1;
  LODWORD(v66[0]) = 65;
  BYTE4(v66[0]) = 1;
  LODWORD(v66[1]) = 1;
  BYTE4(v66[1]) = 1;
  LODWORD(v67) = v40;
  BYTE4(v67) = 1;
  DWORD2(v67) = DWORD2(v40);
  BYTE12(v67) = 1;
  *(_DWORD *)v68 = DWORD2(v41);
  v68[4] = 1;
  *(_DWORD *)&v68[8] = v41;
  v68[12] = 1;
  v68[16] = 1;
  LOBYTE(v69) = 0;
  v71[0] = 0;
  v71[8] = 0;
  v72[16] = 0;
  if (SHIBYTE(v45) < 0)
  {
    sub_23941A7F8(v73, v44[0], (unint64_t)v44[1]);
  }
  else
  {
    *(_OWORD *)v73 = *(_OWORD *)v44;
    *(_QWORD *)&v73[16] = v45;
  }
  v74.__r_.__value_.__s.__data_[0] = 1;
  LODWORD(v74.__r_.__value_.__r.__words[1]) = 65;
  v74.__r_.__value_.__s.__data_[12] = 1;
  LODWORD(v74.__r_.__value_.__r.__words[2]) = 1;
  v74.__r_.__value_.__s.__data_[20] = 1;
  v75 = v40;
  v76 = 1;
  v77 = DWORD2(v40);
  v78 = 1;
  v79 = DWORD2(v41);
  v80 = 1;
  v81 = v41;
  v82 = 1;
  v83 = 1;
  v84[0] = 0;
  v86 = 0;
  v87[0] = 0;
  v89 = 0;
  sub_239496B18((uint64_t)&v62, (uint64_t)v64, 2uLL);
  if (v89)
  {
    v13 = v88;
    if (v88 == v87)
    {
      v14 = 4;
      v13 = v87;
    }
    else
    {
      if (!v88)
        goto LABEL_57;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
LABEL_57:
  if (v86)
  {
    v15 = v85;
    if (v85 == v84)
    {
      v16 = 4;
      v15 = v84;
      goto LABEL_62;
    }
    if (v85)
    {
      v16 = 5;
LABEL_62:
      (*(void (**)(void))(*v15 + 8 * v16))();
    }
  }
  if (v74.__r_.__value_.__s.__data_[0] && (v73[23] & 0x80000000) != 0)
    operator delete(*(void **)v73);
  if (v72[16])
  {
    v17 = *(_QWORD **)&v72[8];
    if (*(_BYTE **)&v72[8] == &v71[8])
    {
      v18 = 4;
      v17 = &v71[8];
    }
    else
    {
      if (!*(_QWORD *)&v72[8])
        goto LABEL_72;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
LABEL_72:
  if (v71[0])
  {
    v19 = *(uint64_t **)&v70[16];
    if (*(uint64_t **)&v70[16] == &v69)
    {
      v20 = 4;
      v19 = &v69;
      goto LABEL_77;
    }
    if (*(_QWORD *)&v70[16])
    {
      v20 = 5;
LABEL_77:
      (*(void (**)(void))(*v19 + 8 * v20))();
    }
  }
  if (BYTE8(v65) && SBYTE7(v65) < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v47) < 0)
  {
    sub_23941A7F8(v64, v46[0], (unint64_t)v46[1]);
  }
  else
  {
    *(_OWORD *)v64 = *(_OWORD *)v46;
    *(_QWORD *)&v65 = v47;
  }
  BYTE8(v65) = 1;
  if (SHIBYTE(v49) < 0)
  {
    sub_23941A7F8(v66, v48[0], (unint64_t)v48[1]);
  }
  else
  {
    *(_OWORD *)v66 = *(_OWORD *)v48;
    *(_QWORD *)&v67 = v49;
  }
  BYTE8(v67) = 1;
  if (SHIBYTE(v51) < 0)
  {
    sub_23941A7F8(v68, v50[0], (unint64_t)v50[1]);
  }
  else
  {
    *(_OWORD *)v68 = *(_OWORD *)v50;
    *(_QWORD *)&v68[16] = v51;
  }
  LOBYTE(v69) = 1;
  if (SHIBYTE(v53) < 0)
  {
    sub_23941A7F8(v70, v52[0], (unint64_t)v52[1]);
  }
  else
  {
    *(_OWORD *)v70 = *(_OWORD *)v52;
    *(_QWORD *)&v70[16] = v53;
  }
  v71[0] = 1;
  v21 = operator new(0x80uLL);
  v22 = v21;
  *v21 = 0;
  v23 = v21 + 128;
  __p[0] = v21;
  __p[1] = v21;
  v61 = v21 + 128;
  v21[24] = 0;
  v24 = v21 + 24;
  if (BYTE8(v65))
  {
    if (SBYTE7(v65) < 0)
    {
      sub_23941A7F8(v21, v64[0], (unint64_t)v64[1]);
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v64;
      *((_QWORD *)v21 + 2) = v65;
    }
    *v24 = 1;
  }
  v22[32] = 0;
  v22[56] = 0;
  if (BYTE8(v67))
  {
    if (SBYTE7(v67) < 0)
    {
      sub_23941A7F8(v22 + 32, v66[0], (unint64_t)v66[1]);
    }
    else
    {
      *((_OWORD *)v22 + 2) = *(_OWORD *)v66;
      *((_QWORD *)v22 + 6) = v67;
    }
    v22[56] = 1;
  }
  v22[64] = 0;
  v22[88] = 0;
  if ((_BYTE)v69)
  {
    if ((v68[23] & 0x80000000) != 0)
    {
      sub_23941A7F8(v22 + 64, *(void **)v68, *(unint64_t *)&v68[8]);
    }
    else
    {
      *((_OWORD *)v22 + 4) = *(_OWORD *)v68;
      *((_QWORD *)v22 + 10) = *(_QWORD *)&v68[16];
    }
    v22[88] = 1;
  }
  v22[96] = 0;
  v22[120] = 0;
  v25 = v22 + 120;
  if (v71[0])
  {
    if ((v70[23] & 0x80000000) != 0)
    {
      sub_23941A7F8(v22 + 96, *(void **)v70, *(unint64_t *)&v70[8]);
      v37 = v71[0];
      *v25 = 1;
      __p[1] = v23;
      if (v37 && (v70[23] & 0x80000000) != 0)
        operator delete(*(void **)v70);
      goto LABEL_112;
    }
    *((_OWORD *)v22 + 6) = *(_OWORD *)v70;
    *((_QWORD *)v22 + 14) = *(_QWORD *)&v70[16];
    *v25 = 1;
  }
  __p[1] = v23;
LABEL_112:
  if ((_BYTE)v69 && (v68[23] & 0x80000000) != 0)
    operator delete(*(void **)v68);
  if (BYTE8(v67) && SBYTE7(v67) < 0)
    operator delete(v66[0]);
  if (BYTE8(v65) && SBYTE7(v65) < 0)
    operator delete(v64[0]);
  *(_QWORD *)v38 = v39;
  *(_DWORD *)(v38 + 8) = DWORD2(v39);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8((_BYTE *)(v38 + 16), __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v38 + 16) = __src;
  sub_2394904A4(v38 + 40, (uint64_t *)&v62);
  sub_2394907B8((_QWORD *)(v38 + 64), (uint64_t *)__p);
  *(_BYTE *)(v38 + 88) = 0;
  *(_BYTE *)(v38 + 112) = 0;
  v26 = (void **)__p[0];
  if (__p[0])
  {
    v27 = (void **)__p[1];
    v28 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((_BYTE *)v27 - 8) && *((char *)v27 - 9) < 0)
          operator delete(*(v27 - 4));
        v27 -= 4;
      }
      while (v27 != v26);
      v28 = __p[0];
    }
    __p[1] = v26;
    operator delete(v28);
  }
  v29 = v62;
  if (!(_QWORD)v62)
    goto LABEL_154;
  v30 = (void *)v62;
  if (*((_QWORD *)&v62 + 1) == (_QWORD)v62)
    goto LABEL_153;
  v31 = *((_QWORD *)&v62 + 1) - 80;
  do
  {
    if (!*(_BYTE *)(v31 + 72))
      goto LABEL_143;
    v33 = *(_QWORD **)(v31 + 64);
    if ((_QWORD *)(v31 + 40) == v33)
    {
      v33 = (_QWORD *)(v31 + 40);
      v34 = 4;
    }
    else
    {
      if (!v33)
        goto LABEL_143;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_143:
    if (!*(_BYTE *)(v31 + 32))
      goto LABEL_149;
    v35 = *(_QWORD **)(v31 + 24);
    if ((_QWORD *)v31 == v35)
    {
      v35 = (_QWORD *)v31;
      v36 = 4;
    }
    else
    {
      if (!v35)
        goto LABEL_149;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_149:
    if (*(_BYTE *)(v31 - 64))
    {
      if (*(char *)(v31 - 65) < 0)
        operator delete(*(void **)(v31 - 88));
    }
    v32 = v31 - 88;
    v31 -= 168;
  }
  while (v32 != v29);
  v30 = (void *)v62;
LABEL_153:
  *((_QWORD *)&v62 + 1) = v29;
  operator delete(v30);
LABEL_154:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53) < 0)
      goto LABEL_163;
LABEL_156:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_157;
LABEL_164:
    operator delete(v50[0]);
    if (SHIBYTE(v49) < 0)
      goto LABEL_165;
LABEL_158:
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_159;
LABEL_166:
    operator delete(v46[0]);
    if (SHIBYTE(v45) < 0)
      goto LABEL_167;
LABEL_160:
    if (SHIBYTE(v43) < 0)
LABEL_168:
      operator delete(v42[0]);
  }
  else
  {
    if ((SHIBYTE(v53) & 0x80000000) == 0)
      goto LABEL_156;
LABEL_163:
    operator delete(v52[0]);
    if (SHIBYTE(v51) < 0)
      goto LABEL_164;
LABEL_157:
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_158;
LABEL_165:
    operator delete(v48[0]);
    if (SHIBYTE(v47) < 0)
      goto LABEL_166;
LABEL_159:
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_160;
LABEL_167:
    operator delete(v44[0]);
    if (SHIBYTE(v43) < 0)
      goto LABEL_168;
  }
}

void sub_239496654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54)
{
  sub_239490340(&a51);
  sub_2394903B8(&a54);
  sub_239496990((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2394968C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  sub_239496A60(v57);
  sub_239496A60((uint64_t)&a57);
  sub_239496990((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2394968E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a46 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  JUMPOUT(0x239496948);
}

void sub_239496914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  sub_239EBF978(v57, (uint64_t)&a57);
  JUMPOUT(0x239496928);
}

void sub_239496944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a56 < 0)
  {
    operator delete(__p);
    if ((a62 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a62 & 0x80000000) == 0)
  {
LABEL_3:
    sub_239496990((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  operator delete(a57);
  sub_239496990((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_239496990(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 168));
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_14:
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    goto LABEL_14;
LABEL_7:
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t sub_239496A60(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(_QWORD **)(a1 + 152);
    if (v2 == (_QWORD *)(a1 + 128))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 128);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 120))
  {
    v4 = *(_QWORD **)(a1 + 112);
    if (v4 == (_QWORD *)(a1 + 88))
    {
      v5 = 4;
      v4 = (_QWORD *)(a1 + 88);
      goto LABEL_12;
    }
    if (v4)
    {
      v5 = 5;
LABEL_12:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }
  }
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239496B18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a3)
  {
    if (a3 >= 0x186186186186187)
      sub_2394189F8();
    v6 = (char *)operator new(168 * a3);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v6[168 * a3];
    sub_239496BCC((char *)a1, a2, a2 + 168 * a3);
  }
  return a1;
}

void sub_239496BAC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EBF9B8((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

char *sub_239496BCC(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_2394905EC((char *)(v4 + v7), (__int128 *)(a2 + v7));
      v7 += 168;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_239496C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    sub_239EBFA68(v2 + v3, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_239496C54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 96);
      v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v4);
    }
  }
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(void **)(a1 + 64);
    if (v6 != v5)
    {
      do
      {
        if (*(_BYTE *)(v6 - 8) && *(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
    goto LABEL_40;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(void **)(a1 + 40);
  if (v9 == v8)
    goto LABEL_39;
  v11 = v9 - 80;
  do
  {
    if (!*(_BYTE *)(v11 + 72))
      goto LABEL_29;
    v13 = *(_QWORD **)(v11 + 64);
    if ((_QWORD *)(v11 + 40) == v13)
    {
      v13 = (_QWORD *)(v11 + 40);
      v14 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_29;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_29:
    if (*(_BYTE *)(v11 + 32))
    {
      v15 = *(_QWORD **)(v11 + 24);
      if ((_QWORD *)v11 == v15)
      {
        v15 = (_QWORD *)v11;
        v16 = 4;
        goto LABEL_34;
      }
      if (v15)
      {
        v16 = 5;
LABEL_34:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
    }
    if (*(_BYTE *)(v11 - 64) && *(char *)(v11 - 65) < 0)
      operator delete(*(void **)(v11 - 88));
    v12 = v11 - 88;
    v11 -= 168;
  }
  while (v12 != v8);
  v10 = *(void **)(a1 + 40);
LABEL_39:
  *(_QWORD *)(a1 + 48) = v8;
  operator delete(v10);
LABEL_40:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_239496E04(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_239496E1C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_239496E28(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v8;
  uint64_t v9;
  void *v11[2];
  uint64_t v12;
  char v13;
  _BYTE v14[8];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  void *__p;
  void *v32;
  char *v33;
  char v34;
  uint64_t v35;
  __int16 v36;
  __int128 __dst;
  uint64_t v38;
  char v39;
  uint64_t v40[15];

  LOBYTE(v11[0]) = 0;
  v13 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_23941A7F8(v11, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)a4;
      v12 = *(_QWORD *)(a4 + 16);
    }
    v13 = 1;
    LOBYTE(__dst) = 0;
    v39 = 0;
    if (SHIBYTE(v12) < 0)
    {
      sub_23941A7F8(&__dst, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      __dst = *(_OWORD *)v11;
      v38 = v12;
    }
    v39 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    v39 = 0;
  }
  sub_239497440((uint64_t)v40, a2, &__dst);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)__dst);
  v36 = 0;
  v35 = 0;
  v8 = operator new(0x1CuLL);
  *v8 = xmmword_239EC6A90;
  *(_OWORD *)((char *)v8 + 10) = *(__int128 *)((char *)&xmmword_239EC6A90 + 10);
  __p = v8;
  v32 = (char *)v8 + 28;
  v33 = (char *)v8 + 28;
  v34 = 1;
  if ((a5 & 0xFF00000000) != 0)
    LODWORD(v35) = a5;
  sub_23964F7CC((uint64_t)v14, v40, (uint64_t)&__p);
  if (v34 && __p)
  {
    v32 = __p;
    operator delete(__p);
  }
  sub_239496C54((uint64_t)v40);
  v9 = v15;
  *(_QWORD *)a1 = off_250AE2350;
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 40) = v18;
  v17 = 0uLL;
  *(_OWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  v20 = 0;
  v18 = 0;
  v19 = 0uLL;
  *(_OWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 88) = v22;
  v21 = 0uLL;
  v22 = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (v25)
  {
    *(_OWORD *)(a1 + 96) = v23;
    *(_QWORD *)(a1 + 112) = v24;
    v24 = 0;
    v23 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)a1 = &off_250AE22B8;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (v28)
  {
    *(_OWORD *)(a1 + 128) = v26;
    *(_QWORD *)(a1 + 144) = v27;
    v27 = 0;
    v26 = 0uLL;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_QWORD *)(a1 + 160) = v29;
  *(_WORD *)(a1 + 168) = v30;
  sub_23964F870((uint64_t)v14);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  *(_QWORD *)a1 = &off_250ADC9F8;
  return a1;
}

void sub_239497090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (*(_BYTE *)(v41 - 168) && *(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_239497110(uint64_t a1)
{
  sub_23964F82C(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239497134(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v10[2];
  uint64_t v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 __p;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  __int128 __dst;
  uint64_t v35;
  char v36;
  uint64_t v37[15];

  LOBYTE(v10[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_23941A7F8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a4;
      v11 = *(_QWORD *)(a4 + 16);
    }
    v12 = 1;
    LOBYTE(__dst) = 0;
    v36 = 0;
    if (SHIBYTE(v11) < 0)
    {
      sub_23941A7F8(&__dst, v10[0], (unint64_t)v10[1]);
    }
    else
    {
      __dst = *(_OWORD *)v10;
      v35 = v11;
    }
    v36 = 1;
  }
  else
  {
    LOBYTE(__dst) = 0;
    v36 = 0;
  }
  sub_239497440((uint64_t)v37, a2, &__dst);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)__dst);
  if ((a5 & 0xFF00000000) != 0 && (_DWORD)a5)
  {
    sub_239A444D4((uint64_t)"unknown file", 126, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  LOBYTE(__p) = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_239650174((uint64_t)v13, v37, &__p);
  if (v31 && v30 < 0)
    operator delete((void *)__p);
  sub_239496C54((uint64_t)v37);
  v8 = v14;
  *(_QWORD *)a1 = off_250AE2350;
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  v16 = 0uLL;
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  v19 = 0;
  v17 = 0;
  v18 = 0uLL;
  *(_OWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 88) = v21;
  v20 = 0uLL;
  v21 = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (v24)
  {
    *(_OWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 112) = v23;
    v23 = 0;
    v22 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_QWORD *)a1 = off_250AE2310;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (v27)
  {
    *(_OWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 144) = v26;
    v26 = 0;
    v25 = 0uLL;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_OWORD *)(a1 + 160) = v28;
  sub_23965027C((uint64_t)v13);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  *(_QWORD *)a1 = &off_250ADC990;
  return a1;
}

void sub_23949739C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  uint64_t v44;

  if (*(_BYTE *)(v44 - 168) && *(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v44 - 192));
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23949741C(uint64_t a1)
{
  sub_239650228(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239497440(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v10;
  unint64_t *p_size;
  void *v12;
  std::string::size_type *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void *v19;
  char *v20;
  __int128 v21;
  void *v22;
  void *v23;
  char v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  int64x2_t v39;
  void *v40[2];
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  void *v44[2];
  uint64_t __src;
  std::string __src_8;
  void *v47[2];
  void *v48;
  void *__dst[2];
  uint64_t v50;
  std::string v51;
  void *__p[2];
  void *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int64x2_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[24];
  _BYTE v62[24];
  std::string v63;
  std::string *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&__src_8.__r_.__value_.__r.__words[1] = 0u;
  v54 = 0uLL;
  v55 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  if (a2 == 1)
  {
    MEMORY[0x23B83DBFC](&v54, "DenseFeatureMatcherModel_SMO");
    MEMORY[0x23B83DBFC](__p, "dense_backbone");
    v5 = 480;
    v6 = 360;
  }
  else
  {
    if (a2)
    {
      sub_239A444D4((uint64_t)"unknown file", 63, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    MEMORY[0x23B83DBFC](&v54, "DenseFeatureMatcherModel_General");
    MEMORY[0x23B83DBFC](__p, "dense_backbone");
    v5 = 640;
    v6 = 480;
  }
  v7 = sub_239498B44();
  v9 = v8;
  if (SHIBYTE(v55) < 0)
  {
    sub_23941A7F8(__dst, (void *)v54, *((unint64_t *)&v54 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v54;
    v50 = v55;
  }
  if (SHIBYTE(v53) < 0)
  {
    sub_23941A7F8(v47, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v47 = *(_OWORD *)__p;
    v48 = v53;
  }
  sub_239498B50((const void **)__dst, (__int128 *)v47, &v51);
  if (SHIBYTE(v48) < 0)
  {
    operator delete(v47[0]);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
LABEL_13:
  *(_QWORD *)&v56 = v7;
  DWORD2(v56) = v9;
  *(_QWORD *)&v57 = v5;
  *((_QWORD *)&v57 + 1) = v6;
  v58 = vdupq_n_s64(1uLL);
  *(_QWORD *)&v59 = 0x6D695F7475706E69;
  *((_QWORD *)&v59 + 1) = 6645601;
  HIBYTE(v60) = 11;
  strcpy(v61, "output_coarse_features");
  v61[23] = 22;
  strcpy(v62, "output_fine_features");
  v62[23] = 20;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v63, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v51.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v53) & 0x80000000) == 0)
        goto LABEL_21;
    }
    else if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
LABEL_15:
    operator delete(__p[0]);
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_16;
  }
  v63 = v51;
  if (SHIBYTE(v53) < 0)
    goto LABEL_15;
LABEL_21:
  if (SHIBYTE(v55) < 0)
LABEL_16:
    operator delete((void *)v54);
LABEL_22:
  v37 = v56;
  v38 = v57;
  v39 = v58;
  *(_OWORD *)v40 = v59;
  v41 = v60;
  v43 = *(_QWORD *)&v61[16];
  *(_OWORD *)v42 = *(_OWORD *)v61;
  __src = *(_QWORD *)&v62[16];
  *(_OWORD *)v44 = *(_OWORD *)v62;
  __src_8 = v63;
  if (*((_BYTE *)a3 + 24))
  {
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      v56 = *a3;
      *(_QWORD *)&v57 = *((_QWORD *)a3 + 2);
      goto LABEL_30;
    }
    v12 = *(void **)a3;
    p_size = (unint64_t *)a3 + 1;
    v10 = v12;
  }
  else
  {
    if ((SHIBYTE(__src_8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v56 = *(_OWORD *)&__src_8.__r_.__value_.__l.__data_;
      *(_QWORD *)&v57 = *((_QWORD *)&__src_8.__r_.__value_.__l + 2);
      goto LABEL_32;
    }
    v10 = (void *)__src_8.__r_.__value_.__r.__words[0];
    p_size = &__src_8.__r_.__value_.__l.__size_;
  }
  sub_23941A7F8(&v56, v10, *p_size);
LABEL_30:
  if (SHIBYTE(__src_8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src_8.__r_.__value_.__l.__data_);
LABEL_32:
  *(_OWORD *)&__src_8.__r_.__value_.__l.__data_ = v56;
  __src_8.__r_.__value_.__r.__words[2] = v57;
  if (SHIBYTE(v41) < 0)
  {
    sub_23941A7F8(&v56, v40[0], (unint64_t)v40[1]);
  }
  else
  {
    v56 = *(_OWORD *)v40;
    *(_QWORD *)&v57 = v41;
  }
  BYTE8(v57) = 1;
  v58.i32[0] = 17;
  v58.i8[4] = 1;
  v58.i32[2] = 1;
  v58.i8[12] = 1;
  LODWORD(v59) = v38;
  BYTE4(v59) = 1;
  DWORD2(v59) = DWORD2(v38);
  BYTE12(v59) = 1;
  LODWORD(v60) = v39.i32[2];
  BYTE4(v60) = 1;
  *(_DWORD *)v61 = v39.i32[0];
  v61[4] = 1;
  v61[8] = 1;
  v61[16] = 0;
  v63.__r_.__value_.__s.__data_[0] = 0;
  v63.__r_.__value_.__s.__data_[8] = 0;
  v65 = 0;
  sub_239496B18((uint64_t)&v54, (uint64_t)&v56, 1uLL);
  if (v65)
  {
    v13 = (std::string::size_type *)v64;
    if (v64 == (std::string *)&v63.__r_.__value_.__r.__words[1])
    {
      v14 = 4;
      v13 = &v63.__r_.__value_.__l.__size_;
    }
    else
    {
      if (!v64)
        goto LABEL_41;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
LABEL_41:
  if (v63.__r_.__value_.__s.__data_[0])
  {
    v15 = *(_QWORD **)&v62[16];
    if (*(_BYTE **)&v62[16] == &v61[16])
    {
      v16 = 4;
      v15 = &v61[16];
      goto LABEL_46;
    }
    if (*(_QWORD *)&v62[16])
    {
      v16 = 5;
LABEL_46:
      (*(void (**)(void))(*v15 + 8 * v16))();
    }
  }
  if (BYTE8(v57) && SBYTE7(v57) < 0)
    operator delete((void *)v56);
  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  if (SHIBYTE(v43) < 0)
  {
    if (!v42[1])
      goto LABEL_62;
    sub_23941A7F8(&v56, v42[0], (unint64_t)v42[1]);
    v17 = (char *)__p[1];
    BYTE8(v57) = 1;
    if (__p[1] < v53)
    {
      *(_BYTE *)__p[1] = 0;
      v17[24] = 0;
      if (BYTE8(v57))
      {
        v18 = v56;
        *((_QWORD *)v17 + 2) = v57;
        *(_OWORD *)v17 = v18;
        *(_QWORD *)&v57 = 0;
        v56 = 0uLL;
        v17[24] = 1;
      }
      v19 = v17 + 32;
      goto LABEL_59;
    }
  }
  else
  {
    if (!HIBYTE(v43))
      goto LABEL_62;
    v56 = *(_OWORD *)v42;
    *(_QWORD *)&v57 = v43;
    BYTE8(v57) = 1;
  }
  v19 = (void *)sub_239497F2C((uint64_t)__p, (uint64_t)&v56);
LABEL_59:
  __p[1] = v19;
  if (BYTE8(v57) && SBYTE7(v57) < 0)
    operator delete((void *)v56);
LABEL_62:
  if (SHIBYTE(__src) < 0)
  {
    if (v44[1])
    {
      sub_23941A7F8(&v56, v44[0], (unint64_t)v44[1]);
      goto LABEL_67;
    }
  }
  else if (HIBYTE(__src))
  {
    v56 = *(_OWORD *)v44;
    *(_QWORD *)&v57 = __src;
LABEL_67:
    BYTE8(v57) = 1;
    v20 = (char *)__p[1];
    if (__p[1] >= v53)
    {
      v22 = (void *)sub_239497F2C((uint64_t)__p, (uint64_t)&v56);
    }
    else
    {
      *(_BYTE *)__p[1] = 0;
      v20[24] = 0;
      if (BYTE8(v57))
      {
        v21 = v56;
        *((_QWORD *)v20 + 2) = v57;
        *(_OWORD *)v20 = v21;
        *(_QWORD *)&v57 = 0;
        v56 = 0uLL;
        v20[24] = 1;
      }
      v22 = v20 + 32;
    }
    __p[1] = v22;
    if (BYTE8(v57) && SBYTE7(v57) < 0)
      operator delete((void *)v56);
  }
  v23 = (void *)HIBYTE(v43);
  if (v43 < 0)
    v23 = v42[1];
  if (!v23 && !(__src >= 0 ? (void *)HIBYTE(__src) : v44[1]))
  {
    sub_239A444D4((uint64_t)"unknown file", 39, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_QWORD *)a1 = v37;
  *(_DWORD *)(a1 + 8) = DWORD2(v37);
  v25 = HIBYTE(__src_8.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__src_8.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8((_BYTE *)(a1 + 16), __src_8.__r_.__value_.__l.__data_, __src_8.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a1 + 16) = __src_8;
  sub_2394904A4(a1 + 40, (uint64_t *)&v54);
  sub_2394907B8((_QWORD *)(a1 + 64), (uint64_t *)__p);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v26 = (void **)__p[0];
  if (__p[0])
  {
    v27 = (void **)__p[1];
    v28 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((_BYTE *)v27 - 8) && *((char *)v27 - 9) < 0)
          operator delete(*(v27 - 4));
        v27 -= 4;
      }
      while (v27 != v26);
      v28 = __p[0];
    }
    __p[1] = v26;
    operator delete(v28);
  }
  v29 = v54;
  if (!(_QWORD)v54)
    goto LABEL_115;
  v30 = (void *)v54;
  if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
    goto LABEL_114;
  v31 = *((_QWORD *)&v54 + 1) - 80;
  do
  {
    if (!*(_BYTE *)(v31 + 72))
      goto LABEL_104;
    v33 = *(_QWORD **)(v31 + 64);
    if ((_QWORD *)(v31 + 40) == v33)
    {
      v33 = (_QWORD *)(v31 + 40);
      v34 = 4;
    }
    else
    {
      if (!v33)
        goto LABEL_104;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_104:
    if (!*(_BYTE *)(v31 + 32))
      goto LABEL_110;
    v35 = *(_QWORD **)(v31 + 24);
    if ((_QWORD *)v31 == v35)
    {
      v35 = (_QWORD *)v31;
      v36 = 4;
    }
    else
    {
      if (!v35)
        goto LABEL_110;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_110:
    if (*(_BYTE *)(v31 - 64))
    {
      if (*(char *)(v31 - 65) < 0)
        operator delete(*(void **)(v31 - 88));
    }
    v32 = v31 - 88;
    v31 -= 168;
  }
  while (v32 != v29);
  v30 = (void *)v54;
  v25 = HIBYTE(__src_8.__r_.__value_.__r.__words[2]);
LABEL_114:
  *((_QWORD *)&v54 + 1) = v29;
  operator delete(v30);
LABEL_115:
  if ((v25 & 0x80) == 0)
  {
    if ((SHIBYTE(__src) & 0x80000000) == 0)
      goto LABEL_117;
LABEL_121:
    operator delete(v44[0]);
    if (SHIBYTE(v43) < 0)
      goto LABEL_122;
LABEL_118:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      return;
LABEL_123:
    operator delete(v40[0]);
    return;
  }
  operator delete(__src_8.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src) < 0)
    goto LABEL_121;
LABEL_117:
  if ((SHIBYTE(v43) & 0x80000000) == 0)
    goto LABEL_118;
LABEL_122:
  operator delete(v42[0]);
  if (SHIBYTE(v41) < 0)
    goto LABEL_123;
}

void sub_239497D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_239490340(&a43);
  sub_2394903B8(&a49);
  sub_239497EA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239497E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_239496A60(v9 - 256);
  sub_239497EA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239497E2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  JUMPOUT(0x239497E5CLL);
}

void sub_239497E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a42 < 0)
  {
    operator delete(a37);
    if ((a48 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a48 & 0x80000000) == 0)
  {
LABEL_3:
    sub_239497EA4(&a9);
    _Unwind_Resume(a1);
  }
  operator delete(a43);
  sub_239497EA4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239497EA4(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 72));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t sub_239497F2C(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  void **v17;

  v3 = *(void ***)a1;
  v4 = *(void ***)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_2394189F8();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      sub_239418A80();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v5];
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
    v11 = 32 * v5;
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
    {
LABEL_10:
      *(_OWORD *)v11 = *(_OWORD *)a2;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(v11 + 24) = 1;
      v3 = *(void ***)a1;
      v4 = *(void ***)(a1 + 8);
    }
  }
  v12 = &v10[32 * v9];
  v13 = v11 + 32;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    if (!v3)
      return v13;
    goto LABEL_24;
  }
  v14 = v11;
  do
  {
    *(_BYTE *)(v14 - 32) = 0;
    v14 -= 32;
    v15 = v4 - 4;
    *(_BYTE *)(v14 + 24) = 0;
    if (*((_BYTE *)v4 - 8))
    {
      v16 = *(_OWORD *)v15;
      *(_QWORD *)(v14 + 16) = *(v4 - 2);
      *(_OWORD *)v14 = v16;
      *(v4 - 3) = 0;
      *(v4 - 2) = 0;
      *v15 = 0;
      *(_BYTE *)(v11 - 8) = 1;
    }
    v11 = v14;
    v4 -= 4;
  }
  while (v15 != v3);
  v17 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v12;
  if (v3 != v17)
  {
    do
    {
      if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v17);
    v3 = v17;
  }
  if (v3)
LABEL_24:
    operator delete(v3);
  return v13;
}

void sub_2394980D0(const void **a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  int v9;
  size_t v10;
  unint64_t v11;
  char *p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  int v21;
  std::__fs::filesystem::path::__string_view v22;
  _BYTE *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v24;
  std::basic_string_view<_CharT, _Traits>::size_type v25;
  std::__fs::filesystem::path::__string_view v26;
  int v27;
  std::__fs::filesystem::path::__string_view v28;
  void *v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::basic_string_view<_CharT, _Traits>::size_type v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  void *exception;
  std::__fs::filesystem::path v36;
  std::__fs::filesystem::path v37;
  std::__fs::filesystem::path v38;
  Dl_info v39;
  std::string pn;
  char v41;
  std::string __dst;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  int64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  int64_t v52;
  std::__fs::filesystem::path __p;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(&v49, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v49 = *a2;
    v50 = *((_QWORD *)a2 + 2);
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, ".bundle");
  if (v50 >= 0)
    v5 = (const std::string::value_type *)&v49;
  else
    v5 = (const std::string::value_type *)v49;
  if (v50 >= 0)
    v6 = HIBYTE(v50);
  else
    v6 = *((_QWORD *)&v49 + 1);
  v7 = std::string::insert(&__dst, 0, v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v52 = v7->__r_.__value_.__r.__words[2];
  v51 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete((void *)v49);
LABEL_12:
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  v11 = v10 + 1;
  if (v10 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (char *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10 + 1;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
    if (!v10)
      goto LABEL_26;
  }
  if (v9 >= 0)
    v15 = a1;
  else
    v15 = *a1;
  memmove(p_dst, v15, v10);
LABEL_26:
  *(_WORD *)&p_dst[v10] = 47;
  if (v52 >= 0)
    v16 = (const std::string::value_type *)&v51;
  else
    v16 = (const std::string::value_type *)v51;
  if (v52 >= 0)
    v17 = HIBYTE(v52);
  else
    v17 = *((_QWORD *)&v51 + 1);
  v18 = std::string::append(&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v48 = v18->__r_.__value_.__r.__words[2];
  v47 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_2394988CC((uint64_t)&__dst);
  sub_2396431C8(&v47, &__dst.__r_.__value_.__r.__words[2], 1, &pn);
  if (!v41)
  {
    if (!dladdr(sub_2394980D0, &v39))
    {
LABEL_100:
      if (!v41)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x23B83DB6C](exception, "Failed to access model resource path");
        __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_101;
    }
    memset(&__p, 0, sizeof(__p));
    v20 = (std::string *)(v39.dli_fname - 1);
    do
    {
      v21 = v20->__r_.__value_.__s.__data_[1];
      v20 = (std::string *)((char *)v20 + 1);
    }
    while (v21);
    sub_23948900C(&__p.__pn_, (std::string *)v39.dli_fname, v20);
    std::__fs::filesystem::__weakly_canonical(&v38, &__p, 0);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    v22 = std::__fs::filesystem::path::__extension(&v38);
    if (v22.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    if (v22.__size_ >= 0x17)
    {
      v24 = (v22.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22.__size_ | 7) != 0x17)
        v24 = v22.__size_ | 7;
      v25 = v24 + 1;
      p_p = operator new(v24 + 1);
      __p.__pn_.__r_.__value_.__l.__size_ = v22.__size_;
      __p.__pn_.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v22.__size_;
      p_p = &__p;
      if (!v22.__size_)
      {
LABEL_50:
        p_p[v22.__size_] = 0;
        v37 = __p;
        memset(&__p, 0, sizeof(__p));
        sub_23948900C(&__p.__pn_, (std::string *)".so", (std::string *)"");
        if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26.__data_ = (const std::string_view::value_type *)&__p;
        else
          v26.__data_ = (const std::string_view::value_type *)__p.__pn_.__r_.__value_.__r.__words[0];
        if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26.__size_ = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
        else
          v26.__size_ = __p.__pn_.__r_.__value_.__l.__size_;
        v27 = std::__fs::filesystem::path::__compare(&v37, v26);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_58:
            if (!v27)
            {
LABEL_62:
              v28 = std::__fs::filesystem::path::__parent_path(&v38);
              if (v28.__size_ > 0x7FFFFFFFFFFFFFF7)
                sub_23941A5AC();
              if (v28.__size_ >= 0x17)
              {
                v30 = (v28.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28.__size_ | 7) != 0x17)
                  v30 = v28.__size_ | 7;
                v31 = v30 + 1;
                v29 = operator new(v30 + 1);
                __p.__pn_.__r_.__value_.__l.__size_ = v28.__size_;
                __p.__pn_.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
              }
              else
              {
                *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v28.__size_;
                v29 = &__p;
                if (!v28.__size_)
                  goto LABEL_70;
              }
              memmove(v29, v28.__data_, v28.__size_);
LABEL_70:
              *((_BYTE *)v29 + v28.__size_) = 0;
              v36 = __p;
              memset(&__p, 0, sizeof(__p));
              sub_23948900C(&__p.__pn_, (std::string *)"resources", (std::string *)"");
              sub_239498A04(&__p, (uint64_t)&v36, &v37);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__pn_.__r_.__value_.__l.__data_);
              memset(&__p, 0, sizeof(__p));
              v32 = HIBYTE(v48);
              if (v48 >= 0)
                v33 = (std::string *)&v47;
              else
                v33 = (std::string *)v47;
              if (v48 < 0)
                v32 = *((_QWORD *)&v47 + 1);
              sub_23948900C(&__p.__pn_, v33, (std::string *)((char *)v33 + v32));
              sub_239498A04(&__p, (uint64_t)&v37, &v36);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__pn_.__r_.__value_.__l.__data_);
              std::__fs::filesystem::__status(&v36, 0);
              if (__p.__pn_.__r_.__value_.__s.__data_[0]
                && __p.__pn_.__r_.__value_.__s.__data_[0] != 255)
              {
                if (v41)
                {
                  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    sub_23941A7F8(&__p, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
                  else
                    __p = v36;
                  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(pn.__r_.__value_.__l.__data_);
                  pn = __p.__pn_;
                }
                else
                {
                  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    sub_23941A7F8(&pn, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
                  else
                    pn = v36.__pn_;
                  v41 = 1;
                }
              }
              if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v37.__pn_.__r_.__value_.__l.__data_);
            }
LABEL_98:
            if (SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v38.__pn_.__r_.__value_.__l.__data_);
            goto LABEL_100;
          }
        }
        else if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_58;
        }
        operator delete(v37.__pn_.__r_.__value_.__l.__data_);
        if (!v27)
          goto LABEL_62;
        goto LABEL_98;
      }
    }
    memmove(p_p, v22.__data_, v22.__size_);
    goto LABEL_50;
  }
LABEL_101:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(a3, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    if (v41 && SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = pn;
  }
  __dst.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                            + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
  __dst.__r_.__value_.__r.__words[2] = v34;
  v43 = MEMORY[0x24BEDB848] + 16;
  if (v45 < 0)
    operator delete(v44);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v46);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      return;
LABEL_112:
    operator delete((void *)v51);
    return;
  }
  operator delete((void *)v47);
  if (SHIBYTE(v52) < 0)
    goto LABEL_112;
}

void sub_239498750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a38 && a37 < 0)
  {
    operator delete(a32);
    sub_239498ABC((uint64_t)&a40);
    if ((*(char *)(v45 - 185) & 0x80000000) == 0)
    {
LABEL_13:
      if (*(char *)(v45 - 121) < 0)
        operator delete(*(void **)(v45 - 144));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_239498ABC((uint64_t)&a40);
    if ((*(char *)(v45 - 185) & 0x80000000) == 0)
      goto LABEL_13;
  }
  operator delete(*(void **)(v45 - 208));
  goto LABEL_13;
}

uint64_t sub_2394988CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2394989D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](v1);
  _Unwind_Resume(a1);
}

std::string *sub_239498A04@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
    return std::string::operator=(&a3->__pn_, &this->__pn_);
  if (std::__fs::filesystem::path::__filename(a3).__size_)
    std::string::push_back(&a3->__pn_, 47);
  v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = this->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(&a3->__pn_, (const std::string::value_type *)v7, size);
}

void sub_239498AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239498ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](a1 + 128);
  return a1;
}

uint64_t sub_239498B44()
{
  return 1;
}

void sub_239498B50(const void **a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  int v9;
  size_t v10;
  unint64_t v11;
  char *p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  int v21;
  std::__fs::filesystem::path::__string_view v22;
  _BYTE *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v24;
  std::basic_string_view<_CharT, _Traits>::size_type v25;
  std::__fs::filesystem::path::__string_view v26;
  int v27;
  std::__fs::filesystem::path::__string_view v28;
  void *v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::basic_string_view<_CharT, _Traits>::size_type v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  void *exception;
  std::__fs::filesystem::path v36;
  std::__fs::filesystem::path v37;
  std::__fs::filesystem::path v38;
  Dl_info v39;
  std::string pn;
  char v41;
  std::string __dst;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  int64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  int64_t v52;
  std::__fs::filesystem::path __p;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(&v49, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v49 = *a2;
    v50 = *((_QWORD *)a2 + 2);
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, ".bundle");
  if (v50 >= 0)
    v5 = (const std::string::value_type *)&v49;
  else
    v5 = (const std::string::value_type *)v49;
  if (v50 >= 0)
    v6 = HIBYTE(v50);
  else
    v6 = *((_QWORD *)&v49 + 1);
  v7 = std::string::insert(&__dst, 0, v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v52 = v7->__r_.__value_.__r.__words[2];
  v51 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete((void *)v49);
LABEL_12:
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  v11 = v10 + 1;
  if (v10 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (char *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10 + 1;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
    if (!v10)
      goto LABEL_26;
  }
  if (v9 >= 0)
    v15 = a1;
  else
    v15 = *a1;
  memmove(p_dst, v15, v10);
LABEL_26:
  *(_WORD *)&p_dst[v10] = 47;
  if (v52 >= 0)
    v16 = (const std::string::value_type *)&v51;
  else
    v16 = (const std::string::value_type *)v51;
  if (v52 >= 0)
    v17 = HIBYTE(v52);
  else
    v17 = *((_QWORD *)&v51 + 1);
  v18 = std::string::append(&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v48 = v18->__r_.__value_.__r.__words[2];
  v47 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_2394988CC((uint64_t)&__dst);
  sub_2396431C8(&v47, &__dst.__r_.__value_.__r.__words[2], 1, &pn);
  if (!v41)
  {
    if (!dladdr(sub_239498B50, &v39))
    {
LABEL_100:
      if (!v41)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x23B83DB6C](exception, "Failed to access model resource path");
        __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_101;
    }
    memset(&__p, 0, sizeof(__p));
    v20 = (std::string *)(v39.dli_fname - 1);
    do
    {
      v21 = v20->__r_.__value_.__s.__data_[1];
      v20 = (std::string *)((char *)v20 + 1);
    }
    while (v21);
    sub_23948900C(&__p.__pn_, (std::string *)v39.dli_fname, v20);
    std::__fs::filesystem::__weakly_canonical(&v38, &__p, 0);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    v22 = std::__fs::filesystem::path::__extension(&v38);
    if (v22.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    if (v22.__size_ >= 0x17)
    {
      v24 = (v22.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22.__size_ | 7) != 0x17)
        v24 = v22.__size_ | 7;
      v25 = v24 + 1;
      p_p = operator new(v24 + 1);
      __p.__pn_.__r_.__value_.__l.__size_ = v22.__size_;
      __p.__pn_.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v22.__size_;
      p_p = &__p;
      if (!v22.__size_)
      {
LABEL_50:
        p_p[v22.__size_] = 0;
        v37 = __p;
        memset(&__p, 0, sizeof(__p));
        sub_23948900C(&__p.__pn_, (std::string *)".so", (std::string *)"");
        if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26.__data_ = (const std::string_view::value_type *)&__p;
        else
          v26.__data_ = (const std::string_view::value_type *)__p.__pn_.__r_.__value_.__r.__words[0];
        if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26.__size_ = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
        else
          v26.__size_ = __p.__pn_.__r_.__value_.__l.__size_;
        v27 = std::__fs::filesystem::path::__compare(&v37, v26);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_58:
            if (!v27)
            {
LABEL_62:
              v28 = std::__fs::filesystem::path::__parent_path(&v38);
              if (v28.__size_ > 0x7FFFFFFFFFFFFFF7)
                sub_23941A5AC();
              if (v28.__size_ >= 0x17)
              {
                v30 = (v28.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28.__size_ | 7) != 0x17)
                  v30 = v28.__size_ | 7;
                v31 = v30 + 1;
                v29 = operator new(v30 + 1);
                __p.__pn_.__r_.__value_.__l.__size_ = v28.__size_;
                __p.__pn_.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
              }
              else
              {
                *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v28.__size_;
                v29 = &__p;
                if (!v28.__size_)
                  goto LABEL_70;
              }
              memmove(v29, v28.__data_, v28.__size_);
LABEL_70:
              *((_BYTE *)v29 + v28.__size_) = 0;
              v36 = __p;
              memset(&__p, 0, sizeof(__p));
              sub_23948900C(&__p.__pn_, (std::string *)"resources", (std::string *)"");
              sub_239498A04(&__p, (uint64_t)&v36, &v37);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__pn_.__r_.__value_.__l.__data_);
              memset(&__p, 0, sizeof(__p));
              v32 = HIBYTE(v48);
              if (v48 >= 0)
                v33 = (std::string *)&v47;
              else
                v33 = (std::string *)v47;
              if (v48 < 0)
                v32 = *((_QWORD *)&v47 + 1);
              sub_23948900C(&__p.__pn_, v33, (std::string *)((char *)v33 + v32));
              sub_239498A04(&__p, (uint64_t)&v37, &v36);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__pn_.__r_.__value_.__l.__data_);
              std::__fs::filesystem::__status(&v36, 0);
              if (__p.__pn_.__r_.__value_.__s.__data_[0]
                && __p.__pn_.__r_.__value_.__s.__data_[0] != 255)
              {
                if (v41)
                {
                  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    sub_23941A7F8(&__p, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
                  else
                    __p = v36;
                  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(pn.__r_.__value_.__l.__data_);
                  pn = __p.__pn_;
                }
                else
                {
                  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    sub_23941A7F8(&pn, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
                  else
                    pn = v36.__pn_;
                  v41 = 1;
                }
              }
              if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v37.__pn_.__r_.__value_.__l.__data_);
            }
LABEL_98:
            if (SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v38.__pn_.__r_.__value_.__l.__data_);
            goto LABEL_100;
          }
        }
        else if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_58;
        }
        operator delete(v37.__pn_.__r_.__value_.__l.__data_);
        if (!v27)
          goto LABEL_62;
        goto LABEL_98;
      }
    }
    memmove(p_p, v22.__data_, v22.__size_);
    goto LABEL_50;
  }
LABEL_101:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(a3, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    if (v41 && SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = pn;
  }
  __dst.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                            + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
  __dst.__r_.__value_.__r.__words[2] = v34;
  v43 = MEMORY[0x24BEDB848] + 16;
  if (v45 < 0)
    operator delete(v44);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v46);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      return;
LABEL_112:
    operator delete((void *)v51);
    return;
  }
  operator delete((void *)v47);
  if (SHIBYTE(v52) < 0)
    goto LABEL_112;
}

void sub_2394991D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a38 && a37 < 0)
  {
    operator delete(a32);
    sub_239498ABC((uint64_t)&a40);
    if ((*(char *)(v45 - 185) & 0x80000000) == 0)
    {
LABEL_13:
      if (*(char *)(v45 - 121) < 0)
        operator delete(*(void **)(v45 - 144));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_239498ABC((uint64_t)&a40);
    if ((*(char *)(v45 - 185) & 0x80000000) == 0)
      goto LABEL_13;
  }
  operator delete(*(void **)(v45 - 208));
  goto LABEL_13;
}

void sub_23949934C(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int32x4_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v49;
  int v50;
  BOOL v51;
  unint64_t v53;
  unint64_t v54;
  _BOOL8 v55;
  unsigned int v56;
  unint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  BOOL v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  BOOL v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int32x4_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  BOOL v97;
  int v98;
  BOOL v99;
  unint64_t v101;
  unint64_t v102;
  _BOOL8 v103;
  unsigned int v104;
  unint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  BOOL v117;
  BOOL v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  BOOL v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int32x4_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  BOOL v144;
  int v145;
  BOOL v146;
  unint64_t v148;
  unint64_t v149;
  _BOOL8 v150;
  unsigned int v151;
  unint64_t v152;
  _BOOL4 v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  BOOL v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  BOOL v166;
  BOOL v168;
  char v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  int v182;
  uint64_t (**v183)();
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  __int16 v190;
  char v191;
  char v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  _BYTE v199[40];
  char *v200;

  v4 = *((_DWORD *)a1 + 30);
  if (v4 == 2)
  {
    v23 = a1[1];
    v179 = *a1;
    v180 = v23;
    v181 = a1[2];
    v182 = *((_DWORD *)a1 + 12);
    LOBYTE(v183) = 0;
    v191 = 0;
    if (*((_BYTE *)a1 + 112))
    {
      v183 = &off_250ADB210;
      v24 = *((_QWORD *)a1 + 8);
      v25 = (std::__shared_weak_count *)*((_QWORD *)a1 + 9);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v28 = *((_QWORD *)a1 + 12);
        v29 = *((_DWORD *)a1 + 26);
        v30 = *((_WORD *)a1 + 54);
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      else
      {
        v28 = *((_QWORD *)a1 + 12);
        v29 = *((_DWORD *)a1 + 26);
        v30 = *((_WORD *)a1 + 54);
      }
      v184 = v24;
      v185 = v25;
      v186 = *((_QWORD *)a1 + 10);
      v187 = *((_DWORD *)a1 + 22);
      v188 = v28;
      v189 = v29;
      v190 = v30;
      if (v25)
      {
        v82 = (unint64_t *)&v25->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v191 = 1;
    }
    sub_239490E34((uint64_t)&v179, (uint64_t)&v198);
    v84 = *(_QWORD *)&v199[4];
    if (HIDWORD(*(_QWORD *)&v199[4]))
      v85 = *(_DWORD *)&v199[4] == 0;
    else
      v85 = 1;
    v87 = v85 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
    v88 = v87;
    if (v87)
      v89 = 0;
    else
      v89 = *(_QWORD *)&v199[12];
    if (HIDWORD(v89) * *(_DWORD *)&v199[36] != -1)
    {
      sub_239490E34((uint64_t)&v179, (uint64_t)&v198);
      v90 = 0;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v199))) & 1) == 0 && *(_DWORD *)&v199[16])
      {
        v91.i64[0] = -1;
        v91.i64[1] = -1;
        v90 = (vaddvq_s32(vmulq_s32(*(int32x4_t *)&v199[20], vaddq_s32(*(int32x4_t *)v199, v91)))
                           + *(_DWORD *)&v199[36] * (*(_DWORD *)&v199[16] - 1)
                           + 1);
      }
      if (v88)
        v92 = 0;
      else
        v92 = v84;
      if (v90 != (_DWORD)v89 * (_DWORD)v92 * HIDWORD(v92) * HIDWORD(v89))
      {
        v177 = 43;
LABEL_413:
        sub_239A444D4((uint64_t)"unknown file", v177, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_239490E34((uint64_t)&v179, (uint64_t)&v198);
      v93 = *(_QWORD *)&v199[4];
      v94 = *(_QWORD *)&v199[12];
      if (HIDWORD(*(_QWORD *)&v199[4]))
        v95 = *(_DWORD *)&v199[4] == 0;
      else
        v95 = 1;
      v97 = v95 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
      v98 = v97;
      if (v97)
        v94 = 0;
      if (HIDWORD(v94) * *(_DWORD *)&v199[36] != -1)
      {
        if (v98)
          v93 = 0;
        LODWORD(v200) = 0;
        if ((_DWORD)v93)
          v99 = (_DWORD)v94 == 0;
        else
          v99 = 1;
        if (v99 || HIDWORD(v94) == 0)
          v98 = 1;
        if (v98)
          v101 = 0;
        else
          v101 = v93;
        if (v98)
          v102 = 0;
        else
          v102 = v94;
        v103 = (_DWORD)v101 != 0;
        v104 = HIDWORD(v101) * v101;
        if (HIDWORD(v101))
          v105 = v101 << 32;
        else
          v105 = 0;
        if (HIDWORD(v101))
          v106 = v101 == 0;
        else
          v106 = 1;
        if ((_DWORD)v102)
          v107 = v104;
        else
          v107 = 0;
        v108 = v104 * v102;
        v109 = v108 << 32;
        v110 = HIDWORD(v102);
        if (!(_DWORD)v102)
          v106 = 1;
        *(_QWORD *)a3 = v101;
        *(_QWORD *)(a3 + 8) = v102;
        if (!v110)
          v109 = 0;
        v111 = v105 | v103;
        *(_QWORD *)(a3 + 16) = v105 | v103;
        *(_QWORD *)(a3 + 24) = v109 | v107;
        *(_BYTE *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 48) = 0;
        v198 = v105 | v103;
        *(_QWORD *)v199 = v109 | v107;
        if (v110)
          v112 = v106;
        else
          v112 = 1;
        v113 = v112 == 0;
        if (v112)
          v114 = 0;
        else
          v114 = v101;
        if (v113)
          v115 = v102;
        else
          v115 = 0;
        v193 = v114;
        v194 = v115;
        if (((v109 >> 30) & ((v109 >> 30) - 1)) != 0)
          v116 = 4;
        else
          v116 = v109 >> 30;
        sub_23948C444(a3 + 56, (unsigned int *)&v193, &v198, 1, &v200, 1, v116);
        sub_239490E34((uint64_t)&v179, (uint64_t)&v198);
        if (HIDWORD(*(_QWORD *)&v199[4]))
          v117 = *(_DWORD *)&v199[4] == 0;
        else
          v117 = 1;
        v119 = v117 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
        v120 = v119;
        if (v119)
          v121 = 0;
        else
          v121 = *(_QWORD *)&v199[4];
        if (v119)
          v122 = 0;
        else
          v122 = *(_QWORD *)&v199[12];
        v193 = v198;
        v194 = v121;
        v195 = v122;
        v196 = *(_QWORD *)&v199[24];
        v197 = *(_QWORD *)&v199[32];
        if (HIDWORD(v122) * *(_DWORD *)&v199[36] == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (HIDWORD(v102))
          v123 = v108;
        else
          v123 = 0;
        v198 = *(_QWORD *)(a3 + 64);
        *(_QWORD *)v199 = v101;
        *(_QWORD *)&v199[8] = v102;
        *(_QWORD *)&v199[16] = v111;
        *(_QWORD *)&v199[24] = v107 | (v123 << 32);
        if ((_DWORD)v123 * HIDWORD(v102) == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v200 = &v192;
        if ((_DWORD)v121)
          v124 = (_DWORD)v122 == 0;
        else
          v124 = 1;
        if (v124 || HIDWORD(v122) == 0)
          v120 = 1;
        if ((v120 & 1) == 0)
          sub_239488844((uint64_t)&v200, (uint64_t)&v193, (uint64_t)&v198);
        if (v191)
        {
          nullsub_4(&v186);
          v79 = v185;
          if (v185)
          {
            v126 = (unint64_t *)&v185->__shared_owners_;
            do
              v81 = __ldaxr(v126);
            while (__stlxr(v81 - 1, v126));
            goto LABEL_402;
          }
          goto LABEL_404;
        }
        return;
      }
    }
    v177 = 983;
    goto LABEL_413;
  }
  if (v4 != 1)
  {
    if (v4)
      sub_239EBFB04();
    v5 = a1[1];
    v179 = *a1;
    v180 = v5;
    v181 = a1[2];
    v182 = *((_DWORD *)a1 + 12);
    LOBYTE(v183) = 0;
    v191 = 0;
    if (*((_BYTE *)a1 + 112))
    {
      v183 = &off_250ADB210;
      v6 = *((_QWORD *)a1 + 8);
      v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 9);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v10 = *((_QWORD *)a1 + 12);
        v11 = *((_DWORD *)a1 + 26);
        v12 = *((_WORD *)a1 + 54);
        do
          v13 = __ldxr(v8);
        while (__stxr(v13 + 1, v8));
      }
      else
      {
        v10 = *((_QWORD *)a1 + 12);
        v11 = *((_DWORD *)a1 + 26);
        v12 = *((_WORD *)a1 + 54);
      }
      v184 = v6;
      v185 = v7;
      v186 = *((_QWORD *)a1 + 10);
      v187 = *((_DWORD *)a1 + 22);
      v188 = v10;
      v189 = v11;
      v190 = v12;
      if (v7)
      {
        v127 = (unint64_t *)&v7->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v191 = 1;
    }
    sub_23949BB44((uint64_t)&v179, a2, (uint64_t)&v198);
    v130 = *(_QWORD *)&v199[4];
    if (HIDWORD(*(_QWORD *)&v199[4]))
      v131 = *(_DWORD *)&v199[4] == 0;
    else
      v131 = 1;
    v133 = v131 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
    v134 = v133;
    if (v133)
      v135 = 0;
    else
      v135 = *(_QWORD *)&v199[12];
    if (HIDWORD(v135) * *(_DWORD *)&v199[36] != -1)
    {
      sub_23949BB44((uint64_t)&v179, v129, (uint64_t)&v198);
      v137 = 0;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v199))) & 1) == 0 && *(_DWORD *)&v199[16])
      {
        v138.i64[0] = -1;
        v138.i64[1] = -1;
        v137 = (vaddvq_s32(vmulq_s32(*(int32x4_t *)&v199[20], vaddq_s32(*(int32x4_t *)v199, v138)))
                            + *(_DWORD *)&v199[36] * (*(_DWORD *)&v199[16] - 1)
                            + 1);
      }
      if (v134)
        v139 = 0;
      else
        v139 = v130;
      if (v137 != (_DWORD)v135 * (_DWORD)v139 * HIDWORD(v139) * HIDWORD(v135))
      {
        v178 = 35;
LABEL_415:
        sub_239A444D4((uint64_t)"unknown file", v178, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_23949BB44((uint64_t)&v179, v136, (uint64_t)&v198);
      v140 = *(_QWORD *)&v199[4];
      v141 = *(_QWORD *)&v199[12];
      if (HIDWORD(*(_QWORD *)&v199[4]))
        v142 = *(_DWORD *)&v199[4] == 0;
      else
        v142 = 1;
      v144 = v142 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
      v145 = v144;
      if (v144)
        v141 = 0;
      if (HIDWORD(v141) * *(_DWORD *)&v199[36] != -1)
      {
        if (v145)
          v140 = 0;
        LODWORD(v200) = 0;
        if ((_DWORD)v140)
          v146 = (_DWORD)v141 == 0;
        else
          v146 = 1;
        if (v146 || HIDWORD(v141) == 0)
          v145 = 1;
        if (v145)
          v148 = 0;
        else
          v148 = v140;
        if (v145)
          v149 = 0;
        else
          v149 = v141;
        v150 = (_DWORD)v148 != 0;
        v151 = HIDWORD(v148) * v148;
        if (HIDWORD(v148))
          v152 = v148 << 32;
        else
          v152 = 0;
        if (HIDWORD(v148))
          v153 = v148 == 0;
        else
          v153 = 1;
        if ((_DWORD)v149)
          v154 = v151;
        else
          v154 = 0;
        v155 = v151 * v149;
        v156 = v155 << 32;
        v157 = HIDWORD(v149);
        if (!(_DWORD)v149)
          v153 = 1;
        *(_QWORD *)a3 = v148;
        *(_QWORD *)(a3 + 8) = v149;
        if (!v157)
          v156 = 0;
        v158 = v152 | v150;
        *(_QWORD *)(a3 + 16) = v152 | v150;
        *(_QWORD *)(a3 + 24) = v156 | v154;
        *(_BYTE *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 48) = 0;
        v198 = v152 | v150;
        *(_QWORD *)v199 = v156 | v154;
        if (v157)
          v159 = v153;
        else
          v159 = 1;
        v160 = v159 == 0;
        if (v159)
          v161 = 0;
        else
          v161 = v148;
        if (v160)
          v162 = v149;
        else
          v162 = 0;
        v193 = v161;
        v194 = v162;
        if (((v156 >> 30) & ((v156 >> 30) - 1)) != 0)
          v163 = 4;
        else
          v163 = v156 >> 30;
        sub_23948C444(a3 + 56, (unsigned int *)&v193, &v198, 1, &v200, 1, v163);
        sub_23949BB44((uint64_t)&v179, v164, (uint64_t)&v198);
        if (HIDWORD(*(_QWORD *)&v199[4]))
          v166 = *(_DWORD *)&v199[4] == 0;
        else
          v166 = 1;
        v168 = v166 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
        v169 = v168;
        if (v168)
          v170 = 0;
        else
          v170 = *(_QWORD *)&v199[4];
        if (v168)
          v171 = 0;
        else
          v171 = *(_QWORD *)&v199[12];
        v193 = v198;
        v194 = v170;
        v195 = v171;
        v196 = *(_QWORD *)&v199[24];
        v197 = *(_QWORD *)&v199[32];
        if (HIDWORD(v171) * *(_DWORD *)&v199[36] == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (HIDWORD(v149))
          v172 = v155;
        else
          v172 = 0;
        v198 = *(_QWORD *)(a3 + 64);
        *(_QWORD *)v199 = v148;
        *(_QWORD *)&v199[8] = v149;
        *(_QWORD *)&v199[16] = v158;
        *(_QWORD *)&v199[24] = v154 | (v172 << 32);
        if ((_DWORD)v172 * HIDWORD(v149) == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v200 = &v192;
        if ((_DWORD)v170)
          v173 = (_DWORD)v171 == 0;
        else
          v173 = 1;
        if (v173 || HIDWORD(v171) == 0)
          v169 = 1;
        if ((v169 & 1) == 0)
          sub_23949BCA0((uint64_t)&v200, (uint64_t)&v193, (uint64_t)&v198, v165);
        if (v191)
        {
          nullsub_4(&v186);
          v79 = v185;
          if (v185)
          {
            v175 = (unint64_t *)&v185->__shared_owners_;
            do
              v81 = __ldaxr(v175);
            while (__stlxr(v81 - 1, v175));
LABEL_402:
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
            goto LABEL_404;
          }
          goto LABEL_404;
        }
        return;
      }
    }
    v178 = 983;
    goto LABEL_415;
  }
  v14 = a1[1];
  v179 = *a1;
  v180 = v14;
  v181 = a1[2];
  v182 = *((_DWORD *)a1 + 12);
  LOBYTE(v183) = 0;
  v191 = 0;
  if (*((_BYTE *)a1 + 112))
  {
    v183 = &off_250ADB210;
    v15 = *((_QWORD *)a1 + 8);
    v16 = (std::__shared_weak_count *)*((_QWORD *)a1 + 9);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *((_QWORD *)a1 + 12);
      v20 = *((_DWORD *)a1 + 26);
      v21 = *((_WORD *)a1 + 54);
      do
        v22 = __ldxr(v17);
      while (__stxr(v22 + 1, v17));
    }
    else
    {
      v19 = *((_QWORD *)a1 + 12);
      v20 = *((_DWORD *)a1 + 26);
      v21 = *((_WORD *)a1 + 54);
    }
    v184 = v15;
    v185 = v16;
    v186 = *((_QWORD *)a1 + 10);
    v187 = *((_DWORD *)a1 + 22);
    v188 = v19;
    v189 = v20;
    v190 = v21;
    if (v16)
    {
      v32 = (unint64_t *)&v16->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v191 = 1;
  }
  sub_23949C02C((uint64_t)&v179, a2, (uint64_t)&v198);
  v35 = *(_QWORD *)&v199[4];
  if (HIDWORD(*(_QWORD *)&v199[4]))
    v36 = *(_DWORD *)&v199[4] == 0;
  else
    v36 = 1;
  v38 = v36 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
  v39 = v38;
  if (v38)
    v40 = 0;
  else
    v40 = *(_QWORD *)&v199[12];
  if (HIDWORD(v40) * *(_DWORD *)&v199[36] == -1)
    goto LABEL_406;
  sub_23949C02C((uint64_t)&v179, v34, (uint64_t)&v198);
  v42 = 0;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v199))) & 1) == 0 && *(_DWORD *)&v199[16])
  {
    v43.i64[0] = -1;
    v43.i64[1] = -1;
    v42 = (vaddvq_s32(vmulq_s32(*(int32x4_t *)&v199[20], vaddq_s32(*(int32x4_t *)v199, v43)))
                       + *(_DWORD *)&v199[36] * (*(_DWORD *)&v199[16] - 1)
                       + 1);
  }
  if (v39)
    v44 = 0;
  else
    v44 = v35;
  if (v42 != (_DWORD)v40 * (_DWORD)v44 * HIDWORD(v44) * HIDWORD(v40))
  {
    v176 = 39;
LABEL_411:
    sub_239A444D4((uint64_t)"unknown file", v176, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23949C02C((uint64_t)&v179, v41, (uint64_t)&v198);
  v45 = *(_QWORD *)&v199[4];
  v46 = *(_QWORD *)&v199[12];
  if (HIDWORD(*(_QWORD *)&v199[4]))
    v47 = *(_DWORD *)&v199[4] == 0;
  else
    v47 = 1;
  v49 = v47 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
  v50 = v49;
  if (v49)
    v46 = 0;
  if (HIDWORD(v46) * *(_DWORD *)&v199[36] == -1)
  {
LABEL_406:
    v176 = 983;
    goto LABEL_411;
  }
  if (v50)
    v45 = 0;
  LODWORD(v200) = 0;
  if ((_DWORD)v45)
    v51 = (_DWORD)v46 == 0;
  else
    v51 = 1;
  if (v51 || HIDWORD(v46) == 0)
    v50 = 1;
  if (v50)
    v53 = 0;
  else
    v53 = v45;
  if (v50)
    v54 = 0;
  else
    v54 = v46;
  v55 = (_DWORD)v53 != 0;
  v56 = HIDWORD(v53) * v53;
  if (HIDWORD(v53))
    v57 = v53 << 32;
  else
    v57 = 0;
  if (HIDWORD(v53))
    v58 = v53 == 0;
  else
    v58 = 1;
  if ((_DWORD)v54)
    v59 = v56;
  else
    v59 = 0;
  v60 = v56 * v54;
  v61 = v60 << 32;
  v62 = HIDWORD(v54);
  if (!(_DWORD)v54)
    v58 = 1;
  *(_QWORD *)a3 = v53;
  *(_QWORD *)(a3 + 8) = v54;
  if (!v62)
    v61 = 0;
  v63 = v57 | v55;
  *(_QWORD *)(a3 + 16) = v57 | v55;
  *(_QWORD *)(a3 + 24) = v61 | v59;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  v198 = v57 | v55;
  *(_QWORD *)v199 = v61 | v59;
  if (v62)
    v64 = v58;
  else
    v64 = 1;
  v65 = v64 == 0;
  if (v64)
    v66 = 0;
  else
    v66 = v53;
  if (v65)
    v67 = v54;
  else
    v67 = 0;
  v193 = v66;
  v194 = v67;
  if (((v61 >> 30) & ((v61 >> 30) - 1)) != 0)
    v68 = 4;
  else
    v68 = v61 >> 30;
  sub_23948C444(a3 + 56, (unsigned int *)&v193, &v198, 1, &v200, 1, v68);
  sub_23949C02C((uint64_t)&v179, v69, (uint64_t)&v198);
  if (HIDWORD(*(_QWORD *)&v199[4]))
    v70 = *(_DWORD *)&v199[4] == 0;
  else
    v70 = 1;
  v72 = v70 || *(_DWORD *)&v199[12] == 0 || HIDWORD(*(_QWORD *)&v199[12]) == 0;
  v73 = v72;
  if (v72)
    v74 = 0;
  else
    v74 = *(_QWORD *)&v199[4];
  if (v72)
    v75 = 0;
  else
    v75 = *(_QWORD *)&v199[12];
  v193 = v198;
  v194 = v74;
  v195 = v75;
  v196 = *(_QWORD *)&v199[24];
  v197 = *(_QWORD *)&v199[32];
  if (HIDWORD(v75) * *(_DWORD *)&v199[36] == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (HIDWORD(v54))
    v76 = v60;
  else
    v76 = 0;
  v198 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)v199 = v53;
  *(_QWORD *)&v199[8] = v54;
  *(_QWORD *)&v199[16] = v63;
  *(_QWORD *)&v199[24] = v59 | (v76 << 32);
  if ((_DWORD)v76 * HIDWORD(v54) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v200 = &v192;
  if ((_DWORD)v74)
    v77 = (_DWORD)v75 == 0;
  else
    v77 = 1;
  if (v77 || HIDWORD(v75) == 0)
    v73 = 1;
  if ((v73 & 1) == 0)
    sub_23949C188((uint64_t)&v200, (uint64_t)&v193, (uint64_t)&v198);
  if (v191)
  {
    nullsub_4(&v186);
    v79 = v185;
    if (v185)
    {
      v80 = (unint64_t *)&v185->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      goto LABEL_402;
    }
LABEL_404:
    nullsub_4(&v183);
  }
}

void sub_23949A054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_239916980(v9);
  sub_23948FBF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23949A0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FBF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23949A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FBF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23949A0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23948FBF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float sub_23949A0FC(uint32x2_t *a1, int32x2_t *a2, float *a3, uint32x2_t *a4, char a5, unsigned int a6)
{
  int32x2_t v6;
  unsigned __int32 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int32 v10;
  int8x8_t v11;
  int8x8_t v12;
  unsigned int v13;
  unsigned int v14;
  int8x8_t v15;
  float32x2_t v16;
  int32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint32x2_t v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  float v30;
  float result;

  v6 = a2[8];
  if (v6.i32[1] >= (unsigned __int32)v6.i32[0])
    v7 = (unsigned __int32)a2[8];
  else
    v7 = v6.u32[1];
  v8 = v7 >> 7;
  if (v8 >= a6)
    v8 = a6;
  if (v8 <= 1)
    v8 = 1;
  if (!v6.i32[1])
  {
    v12 = (int8x8_t)v6.u32[0];
LABEL_18:
    v11 = 0;
    goto LABEL_19;
  }
  if (!v6.i32[0])
  {
    v12 = (int8x8_t)__PAIR64__(v6.u32[1], 0);
    goto LABEL_18;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (int8x8_t)a2[8];
  do
  {
    v13 = 0;
    v14 = v9;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)&a2[7] + v14))
      {
        v11 = (int8x8_t)vmax_u32((uint32x2_t)__PAIR64__(v10, v13), (uint32x2_t)v11);
        v12 = (int8x8_t)vmin_u32((uint32x2_t)v12, (uint32x2_t)__PAIR64__(v10, v13));
      }
      v13 += v8;
      v14 += a2[9].i32[0] * v8;
    }
    while (v13 < v6.i32[0]);
    v10 += v8;
    v9 += a2[9].i32[1] * v8;
  }
  while (v10 < v6.i32[1]);
LABEL_19:
  v15 = (int8x8_t)vcgt_u32((uint32x2_t)v11, (uint32x2_t)v12);
  v16 = vcvt_f32_u32((uint32x2_t)v6);
  v17 = (int32x2_t)vand_s8(v12, v15);
  v18 = vcvt_f32_u32((uint32x2_t)vsub_s32((int32x2_t)vbsl_s8(v15, v11, (int8x8_t)vadd_s32(v6, (int32x2_t)-1)), v17));
  v19 = vcvt_f32_u32(*a1);
  v20 = vcvt_u32_f32(vdiv_f32(vmul_f32(v18, v19), v16));
  v21 = v19.f32[1];
  if ((float)((float)((float)((float)v20.u32[1] * v19.f32[0]) / v19.f32[1]) + 1.0) <= v20.i32[0])
    v22 = v20.i32[0];
  else
    v22 = (float)((float)((float)((float)v20.u32[1] * v19.f32[0]) / v19.f32[1]) + 1.0);
  v23 = (float)v22;
  v24 = (float)((float)(vmuls_lane_f32((float)v22, v19, 1) / v19.f32[0]) + 1.0);
  if (v24 <= v20.i32[1])
    v24 = v20.u32[1];
  v25 = (v24 - v20.i32[1]) >> 1;
  v26 = (v22 - v20.i32[0]) >> 1;
  v27 = (float)((float)((float)v17.u32[0] * v19.f32[0]) / v16.f32[0]);
  v28 = (float)(vmuls_lane_f32((float)v17.u32[1], v19, 1) / v16.f32[1]);
  if (a5)
  {
    a4->i32[0] = v27;
    a4->i32[1] = v28;
    a4[1].i32[0] = v26;
    a4[1].i32[1] = v25;
    a4[2].i32[0] = v22;
    a4[2].i32[1] = v24;
    a4[3] = v20;
    v19.f32[0] = (float)a1->u32[0];
    v21 = (float)a1->u32[1];
  }
  v29 = v19.f32[0] / v23;
  v30 = v21 / (float)v24;
  result = (float)((float)v26 / v23) + (float)((float)((float)-(float)v27 / v19.f32[0]) * (float)(v19.f32[0] / v23));
  *a3 = result;
  a3[1] = (float)((float)v25 / (float)v24) + (float)((float)((float)-(float)v28 / v21) * v30);
  a3[2] = v29;
  a3[3] = v30;
  return result;
}

uint64_t sub_23949A2D8(uint32x2_t *a1, int32x2_t *a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, int a7, unsigned int a8)
{
  __int32 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t *v37;
  uint64_t result;
  unsigned int v39;
  unsigned int v40;
  int i;
  unsigned int v42;
  int k;
  char v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int j;
  uint32x2_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t (**v54)();
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t (**v57)();
  _OWORD v58[4];
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint32x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a6;
  v67 = a7;
  sub_23949A0FC(a1 + 4, a2, a5, &v62, 1, a8);
  v61 = v64;
  v13 = a1[7].i32[0];
  if (v13 == 1)
  {
    LOBYTE(v54) = 0;
    v57 = &off_250ADB628;
    sub_23949E6D4(&v61, (void **)&v54, v58);
    v54 = &off_250ADB350;
    sub_23949C788((uint64_t)a1, &v55);
    v48 = v62;
    v49 = v65;
    v51 = &off_250ADB350;
    sub_23949E928((uint64_t)&v54, &v48, (uint64_t)&v52);
    v68 = v63;
    v69 = v65;
    sub_23949EC84((uint64_t)&v57, &v68, &v48);
    sub_23949AD64((uint64_t)&v51, (uint64_t)&v48);
    v27 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    nullsub_4(&v48);
    v30 = v53;
    if (v53)
    {
      v31 = (unint64_t *)&v53->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    nullsub_4(&v51);
    sub_23949AFCC(a3, (uint64_t)&v57);
    v33 = v56;
    if (v56)
    {
      v34 = (unint64_t *)&v56->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    nullsub_4(&v54);
    sub_239416DA0((uint64_t)v58);
    nullsub_4(&v57);
    if ((_BYTE)v67)
      goto LABEL_19;
LABEL_39:
    LOBYTE(v54) = 0;
    v57 = &off_250ADB628;
    sub_23949E6D4(&a2[8], (void **)&v54, v58);
    v36 = v58[0];
    v58[0] = 0uLL;
    v24 = *(std::__shared_weak_count **)(a4 + 16);
    *(_OWORD *)(a4 + 8) = v36;
    if (!v24)
      goto LABEL_44;
    v37 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v37);
    while (__stlxr(v26 - 1, v37));
    goto LABEL_42;
  }
  if (v13 != 21)
    sub_239EBFB34();
  LOBYTE(v54) = 0;
  v57 = &off_250ADBEA0;
  sub_23949C9B0(&v61, &v54, v58);
  v54 = &off_250ADB468;
  sub_23949C560((uint64_t)a1, &v55);
  v48 = v62;
  v49 = v65;
  v51 = &off_250ADB468;
  sub_23949D31C((uint64_t)&v54, &v48, (uint64_t)&v52);
  v68 = v63;
  v69 = v65;
  sub_23949D6C0((uint64_t)&v57, &v68, &v48);
  sub_23949A990((uint64_t)&v51, (uint64_t)&v48);
  v14 = v50;
  if (v50)
  {
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  nullsub_4(&v48);
  v17 = v53;
  if (v53)
  {
    v18 = (unint64_t *)&v53->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  nullsub_4(&v51);
  sub_23949AC60(a3, (uint64_t)&v57);
  v20 = v56;
  if (v56)
  {
    v21 = (unint64_t *)&v56->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  nullsub_4(&v54);
  sub_239416DA0((uint64_t)v58);
  nullsub_4(&v57);
  if (!(_BYTE)v67)
    goto LABEL_39;
LABEL_19:
  LOBYTE(v54) = 0;
  v57 = &off_250ADB628;
  sub_23949E6D4(&v66, (void **)&v54, v58);
  v23 = v58[0];
  v58[0] = 0uLL;
  v24 = *(std::__shared_weak_count **)(a4 + 16);
  *(_OWORD *)(a4 + 8) = v23;
  if (!v24)
    goto LABEL_44;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
LABEL_42:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_44:
  *(_OWORD *)(a4 + 24) = v58[1];
  *(_OWORD *)(a4 + 40) = v58[2];
  *(_OWORD *)(a4 + 56) = v58[3];
  *(_QWORD *)(a4 + 72) = v59;
  *(_WORD *)(a4 + 80) = v60;
  sub_239416DA0((uint64_t)v58);
  result = nullsub_4(&v57);
  v39 = *(_DWORD *)(a4 + 68);
  if (v39)
  {
    v40 = *(_DWORD *)(a4 + 64);
    if (v40)
    {
      for (i = 0; i < v39; ++i)
      {
        if (v40)
        {
          v42 = (int)(float)((float)((float)((float)((float)i / (float)v39) - a5[1]) / a5[3]) * (float)a2[8].u32[1]);
          if ((v42 & 0x80000000) != 0)
          {
            for (j = 0; j < v40; ++j)
            {
              *(_BYTE *)(*(_QWORD *)(a4 + 32) + *(_DWORD *)(a4 + 72) * j + *(_DWORD *)(a4 + 76) * i) = 0;
              v40 = *(_DWORD *)(a4 + 64);
            }
          }
          else
          {
            for (k = 0; k < v40; ++k)
            {
              v44 = 0;
              v45 = a2[8].u32[0];
              v46 = (int)(float)((float)((float)((float)((float)k / (float)v40) - *a5) / a5[2]) * (float)v45);
              if (v45 > v46 && (v46 & 0x80000000) == 0 && a2[8].i32[1] > v42)
                v44 = *(_BYTE *)(*(_QWORD *)&a2[7] + a2[9].i32[0] * v46 + a2[9].i32[1] * v42);
              *(_BYTE *)(*(_QWORD *)(a4 + 32) + (*(_DWORD *)(a4 + 72) * k + *(_DWORD *)(a4 + 76) * i)) = v44;
              v40 = *(_DWORD *)(a4 + 64);
            }
          }
        }
        v39 = *(_DWORD *)(a4 + 68);
      }
    }
  }
  return result;
}

void sub_23949A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_2394176A0((uint64_t)&a30);
  sub_239416DA0(v40);
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  nullsub_4(&a30);
  sub_239416DA0(v40);
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_2394183B0((uint64_t)&a30);
  sub_239416DA0(v40);
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  nullsub_4(&a30);
  sub_239416DA0(v40);
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

void sub_23949A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  nullsub_4(&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_23949A990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_39;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_39;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_17:
    v25 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_32;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v25, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
    goto LABEL_32;
LABEL_18:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_40;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_40;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (*(_BYTE *)(a2 + 73))
      goto LABEL_30;
  }
  else
  {
LABEL_40:
    if (*(_BYTE *)(a2 + 73))
    {
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v24, v13, 1);
      goto LABEL_33;
    }
  }
LABEL_32:
  v24 = 0;
LABEL_33:
  sub_23949DFEC(a1, a2);
  v22 = v24;
  v24 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23949AB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23949ABF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

uint64_t sub_23949AC60(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  __int128 v12;
  __int128 v13;
  _BYTE v14[22];

  v11 = &off_250ADB778;
  sub_23946936C(a2, (uint64_t)&v12);
  v3 = v12;
  v12 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v14;
  *(_QWORD *)(a1 + 54) = *(_QWORD *)&v14[14];
  nullsub_4((char *)&v13 + 8);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  j_nullsub_4_89(&v11);
  return a1;
}

void sub_23949AD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  j_nullsub_4_89(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23949AD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_39;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_39;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_17:
    v25 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_32;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v25, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
    goto LABEL_32;
LABEL_18:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_40;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_40;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (*(_BYTE *)(a2 + 49))
      goto LABEL_30;
  }
  else
  {
LABEL_40:
    if (*(_BYTE *)(a2 + 49))
    {
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v24, v13, 1);
      goto LABEL_33;
    }
  }
LABEL_32:
  v24 = 0;
LABEL_33:
  sub_23949F44C(a1, a2);
  v22 = v24;
  v24 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23949AF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23949AFCC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  __int128 v12;
  __int128 v13;
  _BYTE v14[22];

  v11 = &off_250ADB778;
  sub_2394247FC(a2, (uint64_t)&v12);
  v3 = v12;
  v12 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v14;
  *(_QWORD *)(a1 + 54) = *(_QWORD *)&v14[14];
  nullsub_4((char *)&v13 + 8);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  j_nullsub_4_89(&v11);
  return a1;
}

void sub_23949B0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  j_nullsub_4_89(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23949B0D0(uint64_t *a1, int *a2, _QWORD *a3, float **a4, int a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  float *v38;
  size_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  float *v61;
  int v62;
  float v63;
  float *v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float **v97;
  float v98;
  float v99;
  unint64_t v100;
  int v101;
  float v102;
  float v103;
  float v104;
  unint64_t v105;
  unint64_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  unint64_t v109;
  float *v110;
  unint64_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  unint64_t v114;
  float *v115;
  int v116;
  float *v117;
  int *v118;
  int v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  unint64_t v125;
  float *v126;
  float *v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  float *v136;
  unint64_t v137;
  float *v138;
  float *v139;
  uint64_t v140;
  uint64_t v141;
  float *v142;
  _OWORD *v143;
  float *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  float *v148;
  int v150;
  uint64_t v151;
  float **v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  int *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  int v165;
  _DWORD *v166;
  uint64_t v167;
  unint64_t v168;

  v7 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return 0;
  v9 = a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v168 = *a2;
  v13 = !(_DWORD)v168 || v10 == 0;
  v14 = v13 || v12 == 0;
  if (v14 || v11 == 0)
    return 0;
  if (v11 != 1)
    sub_239EBFB64();
  v20 = v8 - v7;
  v21 = (int)((v8 - v7) >> 3);
  v22 = *a4;
  if (v21 > ((char *)a4[2] - (char *)*a4) >> 3)
  {
    if (((v20 << 29) & 0x8000000000000000) != 0)
      sub_2394189F8();
    v23 = a4[1];
    v24 = 8 * v21;
    v25 = (char *)operator new(8 * v21);
    v26 = (char *)v23 - (char *)v22;
    v27 = &v25[((char *)v23 - (char *)v22) & 0xFFFFFFFFFFFFFFF8];
    v28 = v27;
    if (v23 == v22)
      goto LABEL_25;
    if ((unint64_t)(v26 - 8) >= 0x58)
    {
      v28 = &v25[((char *)v23 - (char *)v22) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v23 - (v26 & 0xFFFFFFFFFFFFFFF8) - v25) >= 0x20)
      {
        v29 = v26 >> 3;
        v30 = ((unint64_t)(v26 - 8) >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v32 = &v23[v31 / 0xFFFFFFFFFFFFFFFCLL];
        v28 = &v27[-v31];
        v33 = &v25[8 * v29 - 16];
        v34 = (__int128 *)(v23 - 4);
        v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *v34;
          *((_OWORD *)v33 - 1) = *(v34 - 1);
          *(_OWORD *)v33 = v36;
          v33 -= 32;
          v34 -= 2;
          v35 -= 4;
        }
        while (v35);
        v23 = v32;
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          *a4 = (float *)v28;
          a4[1] = (float *)v27;
          a4[2] = (float *)&v25[v24];
          if (v22)
            operator delete(v22);
          goto LABEL_27;
        }
      }
    }
    else
    {
      v28 = &v25[((char *)v23 - (char *)v22) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v37 = *((_QWORD *)v23 - 1);
      v23 -= 2;
      *((_QWORD *)v28 - 1) = v37;
      v28 -= 8;
    }
    while (v23 != v22);
    goto LABEL_25;
  }
LABEL_27:
  if (a5 == -1)
  {
    v38 = 0;
    if ((v20 & 0x7FFFFFFF8) == 0)
      goto LABEL_150;
    goto LABEL_31;
  }
  v39 = 4 * ((a5 + 1) * (a5 + 1));
  v38 = (float *)operator new(v39);
  bzero(v38, v39);
  if ((v20 & 0x7FFFFFFF8) != 0)
  {
LABEL_31:
    v40 = 0;
    if (a5 >= 0)
      v41 = a5;
    else
      v41 = a5 + 1;
    v155 = v10 - 1;
    v156 = v12 - 1;
    v160 = v41 >> 1;
    v150 = a5 + 1 - (v41 >> 1);
    v151 = (v20 >> 3);
    v152 = a4;
    v153 = v10 / a5;
    v154 = (v41 >> 1) + 1;
    v159 = v9;
    while (1)
    {
      v161 = v40;
      v42 = *(_DWORD *)(*a3 + 4 * v40);
      v43 = v42 % v153 * a5;
      v44 = v42 / v153 * a5;
      v46 = v155;
      v45 = v156;
      if (v156 >= v44 - v160)
        v45 = v44 - v160;
      if (v44 - v160 >= 0)
        v47 = v45;
      else
        v47 = 0;
      if (v155 >= v43 - v160)
        v46 = v43 - v160;
      if (v43 - v160 >= 0)
        v48 = v46;
      else
        v48 = 0;
      v49 = v154 + v44;
      v162 = (v43 + v160 - v48);
      v50 = v9[7];
      if ((_DWORD)v162 != -1 && v49 != v47 && v50 == -1)
      {
        sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v163 = v162 + 1;
      v167 = (v49 - v47);
      v164 = (v162 + 1) * v167;
      if (v49 == v47)
        goto LABEL_60;
      if ((_DWORD)v162 != -1)
        break;
      v61 = v38;
      v62 = 0;
LABEL_67:
      v68 = *v61;
      v69 = operator new(0x24uLL);
      v70 = (unint64_t)((char *)v61 - (char *)v38) >> 2;
      *v69 = v70 - v162 - 2;
      v69[1] = v70 - v163;
      v69[2] = v70 - v162;
      v69[3] = v70 - 1;
      v69[4] = v70;
      v69[5] = v70 + 1;
      v69[6] = v162 + v70;
      v69[7] = v163 + v70;
      v69[8] = v163 + v70 + 1;
      v166 = v69;
      if (v62)
      {
        v71 = (v62 * v62);
        v72 = (char *)operator new(4 * v71);
        v73 = &v72[4 * v71];
      }
      else
      {
        v72 = 0;
        v73 = 0;
      }
      v74 = 0;
      v75 = v72;
      do
      {
        v76 = v69[v74];
        if ((v76 & 0x80000000) == 0 && (int)v76 < v62)
        {
          v38[v74] = expf(v38[v76] - v68);
          if (v72 < v73)
          {
            *(_DWORD *)v72 = v76;
            v72 += 4;
            goto LABEL_72;
          }
          v77 = (v72 - v75) >> 2;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 62)
            sub_2394189F8();
          if ((v73 - v75) >> 1 > v78)
            v78 = (v73 - v75) >> 1;
          if ((unint64_t)(v73 - v75) >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          if (v79)
          {
            if (v79 >> 62)
              sub_239418A80();
            v80 = operator new(4 * v79);
            v81 = &v80[4 * v77];
            *(_DWORD *)v81 = v76;
            v82 = (uint64_t)(v81 + 4);
            if (v72 != v75)
            {
LABEL_85:
              v83 = v72 - 4 - v75;
              if (v83 < 0xBC
                || &v80[v72 - v75 - 4 - (v83 & 0xFFFFFFFFFFFFFFFCLL)] > &v80[v72 - v75 - 4]
                || &v72[-(v83 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v72 - 4
                || (unint64_t)(v75 - v80) < 0x20)
              {
                v84 = v72;
                v69 = v166;
                v85 = (char *)v82;
              }
              else
              {
                v87 = (v83 >> 2) + 1;
                v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
                v84 = &v72[-v88];
                v81 -= v88;
                v89 = &v80[4 * v77 - 16];
                v90 = (__int128 *)(v72 - 16);
                v91 = v87 & 0x7FFFFFFFFFFFFFF8;
                v85 = (char *)v82;
                do
                {
                  v92 = *v90;
                  *(v89 - 1) = *(v90 - 1);
                  *v89 = v92;
                  v89 -= 2;
                  v90 -= 2;
                  v91 -= 8;
                }
                while (v91);
                v69 = v166;
                if (v87 == (v87 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_88:
                  v73 = &v80[4 * v79];
                  if (v75)
                    goto LABEL_89;
                  goto LABEL_90;
                }
              }
              do
              {
                v86 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v81 - 1) = v86;
                v81 -= 4;
              }
              while (v84 != v75);
              goto LABEL_88;
            }
          }
          else
          {
            v80 = 0;
            v81 = (char *)(4 * v77);
            *(_DWORD *)(4 * v77) = v76;
            v82 = 4 * v77 + 4;
            if (v72 != v75)
              goto LABEL_85;
          }
          v69 = v166;
          v85 = (char *)v82;
          v73 = &v80[4 * v79];
          if (v75)
LABEL_89:
            operator delete(v75);
LABEL_90:
          v72 = v85;
          v75 = v81;
          v62 = (v162 + 1) * v167;
        }
LABEL_72:
        ++v74;
      }
      while (v74 != 9);
      v93 = v72 - v75;
      if (v72 == v75)
      {
        v102 = 0.0;
        v103 = 0.0;
        v97 = v152;
      }
      else
      {
        v94 = 0;
        v95 = v93 >> 2;
        v96 = 0.0;
        v97 = v152;
        do
          v96 = v96 + v38[v94++];
        while (v95 != v94);
        v98 = fabsf(v96);
        v99 = -3.4028e38;
        if (v96 >= 0.0)
          v99 = 3.4028e38;
        if (v98 >= 0.00000011921)
        {
          v104 = 1.0 / v96;
          if ((unint64_t)v93 >= 0x20)
          {
            v105 = v95 & 0xFFFFFFFFFFFFFFF8;
            v111 = v95 & 0xFFFFFFFFFFFFFFF8;
            v112 = (float32x4_t *)(v38 + 4);
            do
            {
              v113 = vmulq_n_f32(*v112, v104);
              v112[-1] = vmulq_n_f32(v112[-1], v104);
              *v112 = v113;
              v112 += 2;
              v111 -= 8;
            }
            while (v111);
            v101 = a5 + 1;
            if (v95 == v105)
              goto LABEL_123;
          }
          else
          {
            v105 = 0;
            v101 = a5 + 1;
          }
          v114 = v95 - v105;
          v115 = &v38[v105];
          do
          {
            *v115 = v104 * *v115;
            ++v115;
            --v114;
          }
          while (v114);
          goto LABEL_123;
        }
        if ((unint64_t)v93 < 0x20)
        {
          v100 = 0;
          v101 = a5 + 1;
          goto LABEL_115;
        }
        v100 = v95 & 0xFFFFFFFFFFFFFFF8;
        v106 = v95 & 0xFFFFFFFFFFFFFFF8;
        v107 = (float32x4_t *)(v38 + 4);
        do
        {
          v108 = vmulq_n_f32(*v107, v99);
          v107[-1] = vmulq_n_f32(v107[-1], v99);
          *v107 = v108;
          v107 += 2;
          v106 -= 8;
        }
        while (v106);
        v101 = a5 + 1;
        if (v95 != v100)
        {
LABEL_115:
          v109 = v95 - v100;
          v110 = &v38[v100];
          do
          {
            *v110 = v99 * *v110;
            ++v110;
            --v109;
          }
          while (v109);
        }
LABEL_123:
        v116 = v101 - (v160 + v167);
        v103 = 0.0;
        v117 = v38;
        v102 = 0.0;
        v118 = (int *)v75;
        do
        {
          v119 = *v118++;
          v120 = v119 / v163;
          v121 = (float)(v150 + ~(_DWORD)v162 + v119 % v163);
          v122 = *v117++;
          v102 = v102 + (float)(v121 * v122);
          v103 = v103 + (float)((float)(v116 + v120) * v122);
        }
        while (v118 != (int *)v72);
      }
      v123 = v102 * a6;
      v124 = v103 * a7;
      v126 = v97[1];
      v125 = (unint64_t)v97[2];
      if ((unint64_t)v126 < v125)
      {
        *v126 = v123;
        v126[1] = v124;
        v127 = v126 + 2;
        v9 = v159;
        v128 = v161;
        goto LABEL_148;
      }
      v129 = *v97;
      v130 = (char *)v126 - (char *)*v97;
      v131 = v130 >> 3;
      v132 = (v130 >> 3) + 1;
      if (v132 >> 61)
        sub_2394189F8();
      v133 = v125 - (_QWORD)v129;
      if (v133 >> 2 > v132)
        v132 = v133 >> 2;
      if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8)
        v134 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v134 = v132;
      if (!v134)
      {
        v135 = 0;
        v136 = (float *)(8 * v131);
        *v136 = v123;
        v136[1] = v124;
        v9 = v159;
        v128 = v161;
        if (v126 != v129)
          goto LABEL_136;
LABEL_139:
        v139 = (float *)&v135[8 * v134];
        v127 = v136 + 2;
        *v97 = v136;
        v97[1] = v136 + 2;
        v97[2] = v139;
        v69 = v166;
        if (v126)
          goto LABEL_147;
        goto LABEL_148;
      }
      if (v134 >> 61)
        sub_239418A80();
      v135 = operator new(8 * v134);
      v136 = (float *)&v135[8 * v131];
      *v136 = v123;
      v136[1] = v124;
      v9 = v159;
      v128 = v161;
      if (v126 == v129)
        goto LABEL_139;
LABEL_136:
      v137 = (char *)(v126 - 2) - (char *)v129;
      if (v137 < 0x58)
      {
        v138 = v136;
        goto LABEL_145;
      }
      v138 = v136;
      if ((unint64_t)((char *)v126 - &v135[v130]) < 0x20)
        goto LABEL_163;
      v140 = (v137 >> 3) + 1;
      v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
      v142 = &v126[v141 / 0xFFFFFFFFFFFFFFFCLL];
      v138 = &v136[v141 / 0xFFFFFFFFFFFFFFFCLL];
      v143 = &v135[8 * v131 - 16];
      v144 = v126 - 4;
      v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v146 = *(_OWORD *)v144;
        *(v143 - 1) = *((_OWORD *)v144 - 1);
        *v143 = v146;
        v143 -= 2;
        v144 -= 8;
        v145 -= 4;
      }
      while (v145);
      v126 = v142;
      if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_163:
        do
        {
LABEL_145:
          v147 = *((_QWORD *)v126 - 1);
          v126 -= 2;
          *((_QWORD *)v138 - 1) = v147;
          v138 -= 2;
        }
        while (v126 != v129);
      }
      v126 = *v97;
      v148 = (float *)&v135[8 * v134];
      v127 = v136 + 2;
      *v97 = v138;
      v97[1] = v136 + 2;
      v97[2] = v148;
      v69 = v166;
      if (v126)
LABEL_147:
        operator delete(v126);
LABEL_148:
      v97[1] = v127;
      if (v75)
        operator delete(v75);
      operator delete(v69);
      v40 = v128 + 1;
      if (v40 == v151)
        goto LABEL_150;
    }
    if (v50 == -1)
    {
      sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v53 = 0;
    v54 = 0;
    v55 = *(_QWORD *)(*a1 + 8 * v40);
    v56 = v159[5];
    v165 = v159[6];
    v57 = *((_QWORD *)v159 + 8) + 4 * (v48 * v56 + v47 * v165);
    do
    {
      v58 = 0;
      v59 = v162 + 1;
      v60 = v53;
      do
      {
        v38[v58 + v54 * v163] = sub_2396F5038(v55, v57 + 4 * v60, v168);
        ++v58;
        v60 += v56;
        --v59;
      }
      while (v59);
      ++v54;
      v53 += v165;
    }
    while (v54 != v167);
LABEL_60:
    v61 = v38;
    v62 = (v162 + 1) * v167;
    if (v164 >= 2)
    {
      v63 = *v38;
      v64 = v38 + 1;
      v61 = v38;
      v65 = v38 + 1;
      do
      {
        v66 = *v65++;
        v67 = v66;
        if (v63 < v66)
        {
          v63 = v67;
          v61 = v64;
        }
        v64 = v65;
      }
      while (v65 != &v38[v164]);
    }
    goto LABEL_67;
  }
LABEL_150:
  if (v38)
    operator delete(v38);
  return 1;
}

void sub_23949BAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;

  if (v32)
    operator delete(v32);
  operator delete(__p);
  if (v31)
    operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_23949BB44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int32x4_t v14;

  if ((*(_BYTE *)(result + 48) & 0x10) == 0)
    sub_239EBFB94();
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v5 + 88))(v5, 0, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = *(_DWORD *)(v4 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v13 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v13 = 0;
    v14 = 0uLL;
  }
  else
  {
    v14 = *(int32x4_t *)v4;
  }
  *(_OWORD *)(a3 + 28) = *(_OWORD *)(v4 + 20);
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 24) = v13;
  *(_DWORD *)(a3 + 44) = v12;
  if (v13 * v12 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

float sub_23949BCA0(uint64_t a1, uint64_t a2, uint64_t a3, float result)
{
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  float *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;

  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  if (v5)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8 && v7 != 0 && v6 != 0)
  {
    v20 = v5 - 1;
    v12 = *(unsigned int *)(a2 + 28);
    v13 = *(unsigned int *)(a3 + 28);
    v21 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v19 = 0;
    v22 = v4 - 1;
    v23 = v12 | (v13 << 32);
    v24 = v7 - 1;
    v14 = *(unsigned int *)(a2 + 36);
    v15 = *(unsigned int *)(a3 + 36);
    v25 = *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned int *)(a3 + 32) << 32);
    v27 = v14 | (v15 << 32);
    v16 = *(_BYTE **)a2;
    v17 = *(float **)a3;
    v28 = 0;
    v26 = v6 - 1;
    if (v6 != 1)
    {
      v18 = 0;
      do
      {
        result = sub_23949BD9C(&v19, result, (uint64_t)&v28, a1, v16, v17);
        v16 += v27;
        v17 += HIDWORD(v27);
        ++v18;
      }
      while (v18 < v26);
    }
    return sub_23949BD9C(&v19, result, (uint64_t)&v28, a1, v16, v17);
  }
  return result;
}

float sub_23949BD9C(_DWORD *a1, float a2, uint64_t a3, uint64_t a4, _BYTE *a5, float *a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  int v19;
  float *v20;
  float *v21;
  _BYTE *v22;
  float *v23;
  float *v24;
  int v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  int v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  int v49;
  _BYTE *v50;
  float result;

  v6 = a1[8];
  v7 = a1[5];
  if (v6)
  {
    v8 = a1[2];
    v9 = a1[9];
    v10 = a1[10];
    if (v7)
    {
      v11 = a1[6];
      v12 = a1[7];
      if (!v8)
      {
        v46 = 4 * v10;
        v47 = 4 * v12;
        do
        {
          v48 = a6;
          v49 = v7;
          v50 = a5;
          do
          {
            LOBYTE(a2) = *v50;
            a2 = (float)LODWORD(a2);
            *v48 = a2;
            v50 += v11;
            v48 = (float *)((char *)v48 + v47);
            --v49;
          }
          while (v49);
          LOBYTE(a2) = *v50;
          a2 = (float)LODWORD(a2);
          *v48 = a2;
          a5 += v9;
          a6 = (float *)((char *)a6 + v46);
          ++v8;
        }
        while (v8 != v6);
        v28 = a1[6];
        v29 = a1[7];
        goto LABEL_34;
      }
      v13 = 0;
      v14 = a1[3];
      v15 = 4 * v10;
      v16 = v12;
      v17 = 4 * a1[4];
      v18 = &a6[v16];
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = a6;
        v22 = a5;
        do
        {
          v23 = v20;
          v24 = v21;
          v25 = v8;
          v26 = v22;
          do
          {
            LOBYTE(a2) = *v26;
            a2 = (float)LODWORD(a2);
            *v24 = a2;
            v26 += v14;
            v24 = (float *)((char *)v24 + v17);
            --v25;
          }
          while (v25);
          LOBYTE(a2) = *v26;
          a2 = (float)LODWORD(a2);
          *v24 = a2;
          v22 += v11;
          v21 = (float *)((char *)v21 + v16 * 4);
          ++v19;
          v20 = &v23[v16];
        }
        while (v19 != v7);
        v27 = v8;
        do
        {
          LOBYTE(a2) = *v22;
          a2 = (float)LODWORD(a2);
          *v23 = a2;
          v22 += v14;
          v23 = (float *)((char *)v23 + v17);
          --v27;
        }
        while (v27);
        LOBYTE(a2) = *v22;
        a2 = (float)LODWORD(a2);
        *v23 = a2;
        a5 += v9;
        a6 = (float *)((char *)a6 + v15);
        ++v13;
        v18 = (float *)((char *)v18 + v15);
      }
      while (v13 != v6);
LABEL_14:
      v28 = a1[6];
      v29 = a1[7];
      if (v8)
      {
        v30 = 0;
        v31 = a1[3];
        v32 = 4 * v29;
        v33 = 4 * a1[4];
        do
        {
          v34 = a6;
          v35 = v8;
          v36 = a5;
          do
          {
            LOBYTE(a2) = *v36;
            a2 = (float)LODWORD(a2);
            *v34 = a2;
            v36 += v31;
            v34 = (float *)((char *)v34 + v33);
            --v35;
          }
          while (v35);
          LOBYTE(a2) = *v36;
          a2 = (float)LODWORD(a2);
          *v34 = a2;
          a5 += v28;
          a6 = (float *)((char *)a6 + v32);
          ++v30;
        }
        while (v30 != v7);
        goto LABEL_25;
      }
      do
      {
LABEL_34:
        LOBYTE(a2) = *a5;
        a2 = (float)LODWORD(a2);
        *a6 = a2;
        a5 += v28;
        a6 += v29;
        --v7;
      }
      while (v7);
      goto LABEL_37;
    }
    if (!v8)
    {
      do
      {
        LOBYTE(a2) = *a5;
        a2 = (float)LODWORD(a2);
        *a6 = a2;
        a5 += v9;
        a6 += v10;
        --v6;
      }
      while (v6);
      goto LABEL_37;
    }
    v37 = 0;
    v38 = a1[3];
    v39 = 4 * v10;
    v40 = 4 * a1[4];
    do
    {
      v41 = a6;
      v42 = v8;
      v43 = a5;
      do
      {
        LOBYTE(a2) = *v43;
        a2 = (float)LODWORD(a2);
        *v41 = a2;
        v43 += v38;
        v41 = (float *)((char *)v41 + v40);
        --v42;
      }
      while (v42);
      LOBYTE(a2) = *v43;
      a2 = (float)LODWORD(a2);
      *v41 = a2;
      a5 += v9;
      a6 = (float *)((char *)a6 + v39);
      ++v37;
    }
    while (v37 != v6);
  }
  else
  {
    v8 = a1[2];
    if (v7)
      goto LABEL_14;
  }
LABEL_25:
  if (v8)
  {
    v44 = a1[3];
    v45 = 4 * a1[4];
    do
    {
      LOBYTE(a2) = *a5;
      a2 = (float)LODWORD(a2);
      *a6 = a2;
      a5 += v44;
      a6 = (float *)((char *)a6 + v45);
      --v8;
    }
    while (v8);
  }
LABEL_37:
  LOBYTE(a2) = *a5;
  result = (float)LODWORD(a2);
  *a6 = result;
  return result;
}

uint64_t sub_23949C02C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int32x4_t v14;

  if ((*(_BYTE *)(result + 48) & 0x20) == 0)
    sub_239EBFBF0();
  v4 = result;
  if (*(_BYTE *)(result + 112))
  {
    if (*(_BYTE *)(result + 108) && *(_QWORD *)(result + 96))
    {
      v5 = *(_QWORD *)(result + 64);
      v6 = *(std::__shared_weak_count **)(result + 72);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v5 + 88))(v5, 0, "unknown location");
    }
    v10 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v10 = (uint64_t *)(result + 40);
  }
  v11 = *v10;
  v12 = *(_DWORD *)(v4 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v4))) & 1) != 0 || (v13 = *(_DWORD *)(v4 + 16)) == 0)
  {
    v13 = 0;
    v14 = 0uLL;
  }
  else
  {
    v14 = *(int32x4_t *)v4;
  }
  *(_OWORD *)(a3 + 28) = *(_OWORD *)(v4 + 20);
  *(_QWORD *)a3 = v11;
  *(int32x4_t *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 24) = v13;
  *(_DWORD *)(a3 + 44) = v12;
  if (v13 * v12 == -1)
    sub_239EBFBC4(result, a2);
  return result;
}

float sub_23949C188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  _DWORD *v16;
  unsigned int v17;
  float result;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v6 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  if (v4)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7 && v6 != 0 && v5 != 0)
  {
    v20 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 28);
    v12 = *(unsigned int *)(a3 + 28);
    v21 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v19 = 0;
    v22 = v3 - 1;
    v23 = v11 | (v12 << 32);
    v24 = v6 - 1;
    v13 = *(unsigned int *)(a2 + 36);
    v14 = *(unsigned int *)(a3 + 36);
    v25 = *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned int *)(a3 + 32) << 32);
    v27 = v13 | (v14 << 32);
    v15 = *(__int16 **)a2;
    v16 = *(_DWORD **)a3;
    v28 = 0;
    v26 = v5 - 1;
    if (v5 != 1)
    {
      v17 = 0;
      do
      {
        sub_23949C284(&v19, (uint64_t)&v28, a1, v15, v16);
        v15 += v27;
        v16 += HIDWORD(v27);
        ++v17;
      }
      while (v17 < v26);
    }
    return sub_23949C284(&v19, (uint64_t)&v28, a1, v15, v16);
  }
  return result;
}

float sub_23949C284(_DWORD *a1, uint64_t a2, uint64_t a3, __int16 *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  __int16 *v23;
  _DWORD *v24;
  __int16 *v25;
  __int16 *v26;
  _DWORD *v27;
  _DWORD *v28;
  __int16 *v29;
  int v30;
  int v39;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  __int16 *v52;
  int v53;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  __int16 *v64;
  int v65;
  uint64_t v70;
  uint64_t v71;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  __int16 *v79;
  int v80;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        v74 = 2 * v8;
        v75 = 2 * v10;
        v76 = 4 * v9;
        v77 = 4 * v11;
        do
        {
          v78 = a5;
          v79 = a4;
          v80 = v6;
          do
          {
            _H0 = *v79;
            __asm { FCVT            S0, H0 }
            *v78 = _S0;
            v79 = (__int16 *)((char *)v79 + v75);
            v78 = (_DWORD *)((char *)v78 + v77);
            --v80;
          }
          while (v80);
          _H0 = *v79;
          __asm { FCVT            S0, H0 }
          *v78 = _S0;
          a4 = (__int16 *)((char *)a4 + v74);
          a5 = (_DWORD *)((char *)a5 + v76);
          ++v7;
        }
        while (v7 != v5);
        v44 = a1[6];
        v45 = a1[7];
        goto LABEL_34;
      }
      v12 = 0;
      v13 = 2 * v8;
      v14 = v10;
      v15 = 2 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            _H0 = *v29;
            __asm { FCVT            S0, H0 }
            *v28 = _S0;
            v29 = (__int16 *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          _H0 = *v29;
          __asm { FCVT            S0, H0 }
          *v28 = _S0;
          v25 = (__int16 *)((char *)v25 + v14 * 2);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v39 = v7;
        do
        {
          _H0 = *v26;
          __asm { FCVT            S0, H0 }
          *v27 = _S0;
          v26 = (__int16 *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v39;
        }
        while (v39);
        _H0 = *v26;
        __asm { FCVT            S0, H0 }
        *v27 = _S0;
        a4 = (__int16 *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (__int16 *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v44 = a1[6];
      v45 = a1[7];
      if (v7)
      {
        v46 = 0;
        v47 = 2 * v44;
        v48 = 2 * a1[3];
        v49 = 4 * v45;
        v50 = 4 * a1[4];
        do
        {
          v51 = a5;
          v52 = a4;
          v53 = v7;
          do
          {
            _H0 = *v52;
            __asm { FCVT            S0, H0 }
            *v51 = _S0;
            v52 = (__int16 *)((char *)v52 + v48);
            v51 = (_DWORD *)((char *)v51 + v50);
            --v53;
          }
          while (v53);
          _H0 = *v52;
          __asm { FCVT            S0, H0 }
          *v51 = _S0;
          a4 = (__int16 *)((char *)a4 + v47);
          a5 = (_DWORD *)((char *)a5 + v49);
          ++v46;
        }
        while (v46 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_34:
        _H0 = *a4;
        __asm { FCVT            S0, H0 }
        *a5 = _S0;
        a4 += v44;
        a5 += v45;
        --v6;
      }
      while (v6);
      goto LABEL_37;
    }
    if (!v7)
    {
      do
      {
        _H0 = *a4;
        __asm { FCVT            S0, H0 }
        *a5 = _S0;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_37;
    }
    v58 = 0;
    v59 = 2 * v8;
    v60 = 2 * a1[3];
    v61 = 4 * v9;
    v62 = 4 * a1[4];
    do
    {
      v63 = a5;
      v64 = a4;
      v65 = v7;
      do
      {
        _H0 = *v64;
        __asm { FCVT            S0, H0 }
        *v63 = _S0;
        v64 = (__int16 *)((char *)v64 + v60);
        v63 = (_DWORD *)((char *)v63 + v62);
        --v65;
      }
      while (v65);
      _H0 = *v64;
      __asm { FCVT            S0, H0 }
      *v63 = _S0;
      a4 = (__int16 *)((char *)a4 + v59);
      a5 = (_DWORD *)((char *)a5 + v61);
      ++v58;
    }
    while (v58 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v70 = 2 * a1[3];
    v71 = 4 * a1[4];
    do
    {
      _H0 = *a4;
      __asm { FCVT            S0, H0 }
      *a5 = _S0;
      a4 = (__int16 *)((char *)a4 + v70);
      a5 = (_DWORD *)((char *)a5 + v71);
      --v7;
    }
    while (v7);
  }
LABEL_37:
  _H0 = *a4;
  __asm { FCVT            S0, H0 }
  *(float *)a5 = result;
  return result;
}

void sub_23949C560(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 21)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23949C710(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_239426080(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23949C6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_23949C710(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239494454();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

void sub_23949C788(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23949C938(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_23941CCF8(a2, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23949C8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_23949C938(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239494CD0();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

uint64_t sub_23949C9B0@<X0>(_DWORD *a1@<X0>, _BYTE *a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_23949CB18(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCAC0;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_2398277C4((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[60] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_239817224(result);
    return MEMORY[0x23B83E31C](v13, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_23949CAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23949CAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23949CAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23949CB18@<X0>(_DWORD *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = &off_250ADCA20;
  sub_2398221A8(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_250ADCA40;
  *(_OWORD *)(v4 + 8) = v7;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 40) = v9;
  *(_QWORD *)(v4 + 56) = v10;
  sub_239916924((__n128 *)(v4 + 64), (__n128 *)v11);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v11[3];
  *(_QWORD *)(v4 + 104) = v11[5];
  *a3 = v4;
  return sub_239817224((uint64_t)v6);
}

void sub_23949CBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4, 0x1091C40A44A61E0);
  sub_239817224((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23949CC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239817224((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23949CC1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239817224(v2);
    MEMORY[0x23B83E31C](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_23949CC64()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23949CC78()
{
  return 21;
}

__int128 *sub_23949CC84()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930818);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930818))
  {
    v2 = sub_23949CD5C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930800, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930810 = *((_QWORD *)v2 + 2);
      xmmword_256930800 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930800, &dword_23940C000);
    __cxa_guard_release(&qword_256930818);
  }
  if (byte_256930817 >= 0)
    return &xmmword_256930800;
  else
    return (__int128 *)xmmword_256930800;
}

void sub_23949CD44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930818);
  _Unwind_Resume(a1);
}

__int128 *sub_23949CD5C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930838))
    return &xmmword_256930820;
  v2 = sub_23949CE38();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930820, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930830 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930820 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930820, &dword_23940C000);
  __cxa_guard_release(&qword_256930838);
  return &xmmword_256930820;
}

void sub_23949CE20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930838);
  _Unwind_Resume(a1);
}

std::string *sub_23949CE38()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930858);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930858))
    return &stru_256930840;
  sub_23949D0D8((uint64_t)__p);
  sub_23949CF28((uint64_t)__p, &stru_256930840);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930840, &dword_23940C000);
  __cxa_guard_release(&qword_256930858);
  return &stru_256930840;
}

void sub_23949CEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930858);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930858);
  _Unwind_Resume(a1);
}

void sub_23949CF28(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930798);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930798))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", &xmmword_256930780);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930780, &dword_23940C000);
    __cxa_guard_release(&qword_256930798);
  }
  if (byte_256930797 < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930780, *((unint64_t *)&xmmword_256930780 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930780;
    v13 = unk_256930790;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_23949D090(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930798);
  _Unwind_Resume(a1);
}

void sub_23949D0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23949D0D8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930878))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb8u>]", qword_256930860);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930860, &dword_23940C000);
    __cxa_guard_release(&qword_256930878);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_256930898);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_256930898))
  {
    v5 = sub_239423A18(qword_256930860, "<", 0);
    sub_239423914(qword_256930860, 0, v5, qword_256930880);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930880, &dword_23940C000);
    __cxa_guard_release(&qword_256930898);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2569308B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2569308B8))
  {
    sub_239A44118((std::string::size_type)qword_256930880, (std::string *)&xmmword_2569308A0);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_2569308A0, &dword_23940C000);
    __cxa_guard_release(&qword_2569308B8);
  }
  if (byte_2569308B7 < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_2569308A0, *((unint64_t *)&xmmword_2569308A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2569308A0;
    *(_QWORD *)(a1 + 16) = unk_2569308B0;
  }
}

void sub_23949D274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569308B8);
  _Unwind_Resume(a1);
}

void sub_23949D28C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930898);
  _Unwind_Resume(a1);
}

void sub_23949D2A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930878);
  _Unwind_Resume(a1);
}

void sub_23949D2C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23949D2E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_239817224(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_23949D31C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_39;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v36, v6, 0);
        v12 = *(_QWORD *)(a1 + 8);
        v11 = *(std::__shared_weak_count **)(a1 + 16);
        v34 = v12;
        v35 = v11;
        if (!v11)
          goto LABEL_19;
        goto LABEL_17;
      }
    }
    else
    {
LABEL_39:
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_8;
    }
    v36 = 0;
    v12 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v34 = v12;
    v35 = v11;
    if (!v11)
    {
LABEL_19:
      sub_23949D5D8(a1 + 24, a2, (uint64_t)&v31);
      v18 = *(_WORD *)(a1 + 72);
      if (v11)
      {
        v19 = (unint64_t *)&v11->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v37 = v31;
        v38 = v32;
        v39 = v33;
        do
          v21 = __ldxr(v19);
        while (__stxr(v21 + 1, v19));
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = v11;
        v22 = v38;
        v23 = v39;
        *(_OWORD *)(a3 + 16) = v37;
        *(_OWORD *)(a3 + 32) = v22;
        *(_OWORD *)(a3 + 48) = v23;
        *(_WORD *)(a3 + 64) = v18;
        do
          v24 = __ldaxr(v19);
        while (__stlxr(v24 - 1, v19));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = 0;
        v25 = v32;
        *(_OWORD *)(a3 + 16) = v31;
        *(_OWORD *)(a3 + 32) = v25;
        *(_OWORD *)(a3 + 48) = v33;
        *(_WORD *)(a3 + 64) = v18;
      }
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v36;
      v36 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      return;
    }
LABEL_17:
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    goto LABEL_19;
  }
  v37 = 0uLL;
  sub_23949D5D8(a1 + 24, a2, (uint64_t)v30);
  sub_23941D0C4(a3, (uint64_t *)&v37, v30);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23949D598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;

  va_start(va, a14);
  sub_239416DA0((uint64_t)va);
  v16 = *(_QWORD *)(v14 - 104);
  *(_QWORD *)(v14 - 104) = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23949D5D8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (a2[3])
    v3 = a2[2] == 0;
  else
    v3 = 1;
  v4 = *((_QWORD *)a2 + 1);
  if (v3)
    v4 = 0;
  DWORD1(v6) = v4;
  LODWORD(v6) = 3;
  v5 = v6;
  LODWORD(v6) = 1;
  *(_QWORD *)((char *)&v6 + 4) = *(_QWORD *)(result + 40);
  *(_QWORD *)a3 = *(_QWORD *)result + (*a2 * *(_DWORD *)(result + 40) + a2[1] * *(_DWORD *)(result + 44));
  *(_QWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = HIDWORD(v4);
  *(_QWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 28) = DWORD2(v6);
  *(_QWORD *)(a3 + 32) = v4;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)((char *)&v6 + 4);
  if (DWORD2(v6) * HIDWORD(v4) == -1)
    sub_239EBFBC4(result, (uint64_t)a2);
  return result;
}

uint64_t sub_23949D6C0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;

  v9 = &off_250ADCAF8;
  sub_23949D79C(a1, &v10);
  *a3 = &off_250ADCAF8;
  sub_23949DB24((uint64_t)&v9, a2, (uint64_t)(a3 + 1));
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return nullsub_4(&v9);
}

void sub_23949D75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  v12 = v11;
  nullsub_4(v12);
  if (a11)
  {
    sub_239EBEB78();
    nullsub_4(&a9);
    _Unwind_Resume(a1);
  }
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

void sub_23949D79C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_23949D9C0(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_23949D888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_23949D8A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23949D910()
{
  return 21;
}

uint64_t sub_23949D918(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_23949D920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_23949D93C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_23949D9C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 21);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x23B83E31C]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_23949DB10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

void sub_23949DB24(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_39;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 73))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v36, v6, 0);
        v12 = *(_QWORD *)(a1 + 8);
        v11 = *(std::__shared_weak_count **)(a1 + 16);
        v34 = v12;
        v35 = v11;
        if (!v11)
          goto LABEL_19;
        goto LABEL_17;
      }
    }
    else
    {
LABEL_39:
      if (*(_BYTE *)(a1 + 73))
        goto LABEL_8;
    }
    v36 = 0;
    v12 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v34 = v12;
    v35 = v11;
    if (!v11)
    {
LABEL_19:
      sub_23949DF04(a1 + 24, a2, (uint64_t)&v31);
      v18 = *(_WORD *)(a1 + 72);
      if (v11)
      {
        v19 = (unint64_t *)&v11->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v37 = v31;
        v38 = v32;
        v39 = v33;
        do
          v21 = __ldxr(v19);
        while (__stxr(v21 + 1, v19));
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = v11;
        v22 = v38;
        v23 = v39;
        *(_OWORD *)(a3 + 16) = v37;
        *(_OWORD *)(a3 + 32) = v22;
        *(_OWORD *)(a3 + 48) = v23;
        *(_WORD *)(a3 + 64) = v18;
        do
          v24 = __ldaxr(v19);
        while (__stlxr(v24 - 1, v19));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        *(_QWORD *)a3 = v12;
        *(_QWORD *)(a3 + 8) = 0;
        v25 = v32;
        *(_OWORD *)(a3 + 16) = v31;
        *(_OWORD *)(a3 + 32) = v25;
        *(_OWORD *)(a3 + 48) = v33;
        *(_WORD *)(a3 + 64) = v18;
      }
      v26 = v35;
      if (v35)
      {
        v27 = (unint64_t *)&v35->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v36;
      v36 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      return;
    }
LABEL_17:
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    goto LABEL_19;
  }
  v37 = 0uLL;
  sub_23949DF04(a1 + 24, a2, (uint64_t)v30);
  sub_23949DDE0(a3, (uint64_t *)&v37, v30);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23949DDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;

  va_start(va, a14);
  sub_239416DA0((uint64_t)va);
  v16 = *(_QWORD *)(v14 - 104);
  *(_QWORD *)(v14 - 104) = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23949DDE0(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_23949DEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

uint64_t sub_23949DF04@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (a2[3])
    v3 = a2[2] == 0;
  else
    v3 = 1;
  v4 = *((_QWORD *)a2 + 1);
  if (v3)
    v4 = 0;
  DWORD1(v6) = v4;
  LODWORD(v6) = 3;
  v5 = v6;
  LODWORD(v6) = 1;
  *(_QWORD *)((char *)&v6 + 4) = *(_QWORD *)(result + 40);
  *(_QWORD *)a3 = *(_QWORD *)result + (*a2 * *(_DWORD *)(result + 40) + a2[1] * *(_DWORD *)(result + 44));
  *(_QWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = HIDWORD(v4);
  *(_QWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 28) = DWORD2(v6);
  *(_QWORD *)(a3 + 32) = v4;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)((char *)&v6 + 4);
  if (DWORD2(v6) * HIDWORD(v4) == -1)
    sub_239EBFBC4(result, (uint64_t)a2);
  return result;
}

void *sub_23949DFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  void *result;
  size_t v8;
  const void *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 52);
  v5 = 3 * *(_DWORD *)(a1 + 56);
  if (v4 == *(_DWORD *)(a2 + 52) && v4 == v5)
  {
    v8 = *(unsigned int *)(a1 + 60) * (unint64_t)v5;
    v9 = *(const void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      a1 = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "unknown location");
      v9 = *(const void **)(v3 + 24);
    }
    if (v8 && !v9)
      sub_239EBF50C(a1, a2);
    result = *(void **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && result)
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "unknown location");
      result = *(void **)(a2 + 24);
    }
    if (v8 && !result)
      sub_239EBF50C(0, a2);
    if (v8)
      return memmove(result, v9, v8);
  }
  else
  {
    v21 = (3 * *(_DWORD *)(a1 + 56));
    return (void *)sub_23949E18C(a1, a2, (unsigned int *)&v21);
  }
  return result;
}

uint64_t sub_23949E18C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_17;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_43;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v6 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11)
    goto LABEL_43;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_43:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_14;
LABEL_17:
    v27 = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (!v15)
      goto LABEL_33;
LABEL_18:
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v16)
      goto LABEL_29;
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v15 = *(_QWORD *)(a2 + 8);
    v20 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v20)
      goto LABEL_29;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_33;
    }
    else
    {
LABEL_29:
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_33;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 96))(&v26, v15, 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_37;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v27, v6, 0);
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
    goto LABEL_18;
LABEL_33:
  v26 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_37;
LABEL_34:
  if (*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40))
    sub_23949E424(a3, a1, a2);
LABEL_37:
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23949E3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_23949E424(unsigned int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  size_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  _QWORD v32[6];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  v5 = *(_DWORD *)(a2 + 40);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v10 = (size_t *)result;
    v26 = v4 - 1;
    v11 = *(unsigned int *)(a2 + 48);
    v12 = *(unsigned int *)(a3 + 48);
    v27 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
    v25 = 0;
    v28 = v3 - 1;
    v29 = v11 | (v12 << 32);
    v30 = v5 - 1;
    v31 = *(unsigned int *)(a2 + 52) | ((unint64_t)*(unsigned int *)(a3 + 52) << 32);
    v13 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v13)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v14 + 88))(v14, 0, "unknown location");
      v13 = *(char **)(a2 + 24);
    }
    v19 = *(char **)(a3 + 24);
    if (*(_BYTE *)(a3 + 72) && v19)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v21 = *(std::__shared_weak_count **)(a3 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v20 + 88))(v20, 1, "unknown location");
      v19 = *(char **)(a3 + 24);
    }
    v32[2] = 0;
    v32[3] = 0;
    v32[0] = 0;
    v32[1] = 1;
    v32[4] = 1;
    v32[5] = 0;
    return sub_23949E5D0((unsigned int *)&v25, (uint64_t)v32, v10, v13, v19);
  }
  return result;
}

unsigned int *sub_23949E5D0(unsigned int *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int i;
  size_t v16;
  size_t v17;

  v5 = __dst;
  v6 = __src;
  v9 = result[6];
  v10 = result[7];
  v11 = result[3] | (unint64_t)(v9 << 32);
  v12 = result[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = __src;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = __dst;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v13 = result[8];
  if (v13)
  {
    v14 = result;
    for (i = 0; i < v13; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v16 = *a3;
      if (!v6 && v16)
        sub_239EBF50C((uint64_t)result, a2);
      if (!v5 && v16)
        sub_239EBF50C((uint64_t)result, a2);
      if (v16)
      {
        result = (unsigned int *)memmove(v5, v6, v16);
        v13 = v14[8];
      }
      v6 += v14[9];
      v5 += v14[10];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v17 = *a3;
  if (!v6 && v17)
    sub_239EBF50C((uint64_t)result, a2);
  if (!v5 && v17)
    sub_239EBF50C((uint64_t)result, a2);
  if (v17)
    return (unsigned int *)memmove(v5, v6, v17);
  return result;
}

uint64_t sub_23949E6D4@<X0>(_DWORD *a1@<X0>, void **a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_23949E83C(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB708;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_2398263E0((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[36] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_23980F8F0(result);
    return MEMORY[0x23B83E31C](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_23949E7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23949E7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23949E820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23949E83C@<X0>(_DWORD *a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  _OWORD v7[2];
  _QWORD v8[6];

  v8[5] = &off_250ADB668;
  sub_23981E490(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_250ADB688;
  *(_OWORD *)(v4 + 8) = v7[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v7 + 12);
  sub_239916924((__n128 *)(v4 + 40), (__n128 *)v8);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v8[3];
  *a3 = v4;
  return sub_23980F8F0((uint64_t)v6);
}

void sub_23949E8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4, 0x1091C406A8758A4);
  sub_23980F8F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23949E914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23980F8F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23949E928(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_53;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v37, v6, 0);
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(std::__shared_weak_count **)(a1 + 16);
        v35 = v11;
        v36 = v12;
        if (!v12)
          goto LABEL_25;
LABEL_23:
        v19 = (unint64_t *)&v12->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
LABEL_25:
        if (a2[3])
          v21 = a2[2] == 0;
        else
          v21 = 1;
        if (v21)
          v22 = 0;
        else
          v22 = *((_QWORD *)a2 + 1);
        v23 = *(_QWORD *)(a1 + 40);
        if (HIDWORD(v22) * HIDWORD(v23) == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v24 = *(_QWORD *)(a1 + 24) + (*a2 * *(_DWORD *)(a1 + 40) + a2[1] * *(_DWORD *)(a1 + 44));
        v25 = *(_WORD *)(a1 + 48);
        if (v12)
        {
          v26 = (unint64_t *)&v12->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          do
            v28 = __ldxr(v26);
          while (__stxr(v28 + 1, v26));
          *(_QWORD *)a3 = v11;
          *(_QWORD *)(a3 + 8) = v12;
          *(_QWORD *)(a3 + 16) = v24;
          *(_QWORD *)(a3 + 24) = v22;
          *(_QWORD *)(a3 + 32) = v23;
          *(_WORD *)(a3 + 40) = v25;
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        else
        {
          *(_QWORD *)a3 = v11;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v24;
          *(_QWORD *)(a3 + 24) = v22;
          *(_QWORD *)(a3 + 32) = v23;
          *(_WORD *)(a3 + 40) = v25;
        }
        if (v36)
        {
          v30 = &v36->__shared_owners_;
          do
            v31 = __ldaxr((unint64_t *)v30);
          while (__stlxr(v31 - 1, (unint64_t *)v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v32 = v37;
        v37 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        return;
      }
    }
    else
    {
LABEL_53:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_8;
    }
    v37 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    v35 = v11;
    v36 = v12;
    if (!v12)
      goto LABEL_25;
    goto LABEL_23;
  }
  v35 = 0;
  v36 = 0;
  if (a2[3])
    v13 = a2[2] == 0;
  else
    v13 = 1;
  v14 = *((_QWORD *)a2 + 1);
  if (v13)
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v33 = *(_QWORD *)(a1 + 24) + (*a2 * *(_DWORD *)(a1 + 40) + a2[1] * *(_DWORD *)(a1 + 44));
  *((_QWORD *)&v33 + 1) = v14;
  v34 = v15;
  if (HIDWORD(v14) * HIDWORD(v15) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239418C7C(a3, &v35, &v33);
  v16 = v36;
  if (v36)
  {
    v17 = &v36->__shared_owners_;
    do
      v18 = __ldaxr((unint64_t *)v17);
    while (__stlxr(v18 - 1, (unint64_t *)v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_23949EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23949EC84@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;

  v9 = &off_250ADB3D0;
  sub_23949ED60(a1, &v10);
  *a3 = &off_250ADB3D0;
  sub_23949EFCC((uint64_t)&v9, a2, (uint64_t)(a3 + 1));
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return nullsub_4(&v9);
}

void sub_23949ED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  v13 = v12;
  nullsub_4(v13);
  if (a12)
  {
    sub_239EBEB78();
    nullsub_4(&a10);
    _Unwind_Resume(a1);
  }
  nullsub_4(&a10);
  _Unwind_Resume(a1);
}

void sub_23949ED60(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_23949EE68(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_23949EE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_23949EE68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v19, v3, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x23B83E31C]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_23949EFB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

void sub_23949EFCC(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7)
      goto LABEL_53;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*(_BYTE *)(a1 + 49))
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v37, v6, 0);
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(std::__shared_weak_count **)(a1 + 16);
        v35 = v11;
        v36 = v12;
        if (!v12)
          goto LABEL_25;
LABEL_23:
        v19 = (unint64_t *)&v12->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
LABEL_25:
        if (a2[3])
          v21 = a2[2] == 0;
        else
          v21 = 1;
        if (v21)
          v22 = 0;
        else
          v22 = *((_QWORD *)a2 + 1);
        v23 = *(_QWORD *)(a1 + 40);
        if (HIDWORD(v22) * HIDWORD(v23) == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v24 = *(_QWORD *)(a1 + 24) + (*a2 * *(_DWORD *)(a1 + 40) + a2[1] * *(_DWORD *)(a1 + 44));
        v25 = *(_WORD *)(a1 + 48);
        if (v12)
        {
          v26 = (unint64_t *)&v12->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          do
            v28 = __ldxr(v26);
          while (__stxr(v28 + 1, v26));
          *(_QWORD *)a3 = v11;
          *(_QWORD *)(a3 + 8) = v12;
          *(_QWORD *)(a3 + 16) = v24;
          *(_QWORD *)(a3 + 24) = v22;
          *(_QWORD *)(a3 + 32) = v23;
          *(_WORD *)(a3 + 40) = v25;
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        else
        {
          *(_QWORD *)a3 = v11;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v24;
          *(_QWORD *)(a3 + 24) = v22;
          *(_QWORD *)(a3 + 32) = v23;
          *(_WORD *)(a3 + 40) = v25;
        }
        if (v36)
        {
          v30 = &v36->__shared_owners_;
          do
            v31 = __ldaxr((unint64_t *)v30);
          while (__stlxr(v31 - 1, (unint64_t *)v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v32 = v37;
        v37 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        return;
      }
    }
    else
    {
LABEL_53:
      if (*(_BYTE *)(a1 + 49))
        goto LABEL_8;
    }
    v37 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    v35 = v11;
    v36 = v12;
    if (!v12)
      goto LABEL_25;
    goto LABEL_23;
  }
  v35 = 0;
  v36 = 0;
  if (a2[3])
    v13 = a2[2] == 0;
  else
    v13 = 1;
  v14 = *((_QWORD *)a2 + 1);
  if (v13)
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v33 = *(_QWORD *)(a1 + 24) + (*a2 * *(_DWORD *)(a1 + 40) + a2[1] * *(_DWORD *)(a1 + 44));
  *((_QWORD *)&v33 + 1) = v14;
  v34 = v15;
  if (HIDWORD(v14) * HIDWORD(v15) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23949F328(a3, &v35, &v33);
  v16 = v36;
  if (v36)
  {
    v17 = &v36->__shared_owners_;
    do
      v18 = __ldaxr((unint64_t *)v17);
    while (__stlxr(v18 - 1, (unint64_t *)v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_23949F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23949F328(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_23949F434(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void *sub_23949F44C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  void *result;
  size_t v8;
  const void *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 44);
  if (v5 == *(_DWORD *)(a2 + 44) && v5 == v4)
  {
    v8 = *(unsigned int *)(a1 + 36) * (unint64_t)v4;
    v9 = *(const void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      a1 = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "unknown location");
      v9 = *(const void **)(v3 + 24);
    }
    if (v8 && !v9)
      sub_239EBF50C(a1, a2);
    result = *(void **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && result)
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "unknown location");
      result = *(void **)(a2 + 24);
    }
    if (v8 && !result)
      sub_239EBF50C(0, a2);
    if (v8)
      return memmove(result, v9, v8);
  }
  else
  {
    v21 = *(unsigned int *)(a1 + 32);
    return (void *)sub_23949F5EC(a1, a2, &v21);
  }
  return result;
}

uint64_t sub_23949F5EC(uint64_t a1, uint64_t a2, size_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_17;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_42;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v6 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11)
    goto LABEL_42;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_42:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_17:
    v27 = 0;
    v15 = *(_QWORD *)(a2 + 8);
    if (!v15)
      goto LABEL_33;
LABEL_18:
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v16)
      goto LABEL_29;
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v15 = *(_QWORD *)(a2 + 8);
    v20 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v20)
      goto LABEL_29;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!*(_BYTE *)(a2 + 49))
        goto LABEL_33;
    }
    else
    {
LABEL_29:
      if (!*(_BYTE *)(a2 + 49))
        goto LABEL_33;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 96))(&v26, v15, 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_36;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v27, v6, 0);
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
    goto LABEL_18;
LABEL_33:
  v26 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_36;
LABEL_34:
  if (*(_DWORD *)(a1 + 36))
    sub_23949F87C(a3, a1, a2);
LABEL_36:
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  result = v27;
  v27 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23949F818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

size_t *sub_23949F87C(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _OWORD v28[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = result;
    v24 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(unsigned int *)(a3 + 44);
    v25 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 40) << 32);
    v23 = 0;
    v26 = v3 - 1;
    v27 = v9 | (v10 << 32);
    v11 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "unknown location");
      v11 = *(char **)(a2 + 24);
    }
    v17 = *(char **)(a3 + 24);
    if (*(_BYTE *)(a3 + 48) && v17)
    {
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(std::__shared_weak_count **)(a3 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "unknown location");
      v17 = *(char **)(a3 + 24);
    }
    memset(v28, 0, sizeof(v28));
    return (size_t *)sub_23949FA00(&v23, (uint64_t)v28, v8, v11, v17);
  }
  return result;
}

_DWORD *sub_23949FA00(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int i;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    for (i = 0; i < v11; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6 && v14)
        sub_239EBF50C((uint64_t)result, a2);
      if (!v5 && v14)
        sub_239EBF50C((uint64_t)result, a2);
      if (v14)
      {
        result = memmove(v5, v6, v14);
        v11 = v12[5];
      }
      v6 += v12[6];
      v5 += v12[7];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
    sub_239EBF50C((uint64_t)result, a2);
  if (!v5 && v15)
    sub_239EBF50C((uint64_t)result, a2);
  if (v15)
    return memmove(v5, v6, v15);
  return result;
}

void sub_23949FAF8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 983, a3, a4);
}

uint64_t sub_23949FB00(unint64_t a1, unint64_t a2, _QWORD *a3, double a4)
{
  unsigned int v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  void **v32;
  __int32 *v33;
  __int32 *v35;
  __int32 *v36;
  unint64_t v37;
  uint64_t v38;
  __int32 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _DWORD *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  __int32 *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int32 *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  unint64_t v58;
  float *v59;
  float v60;
  float *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  float *v68;
  char *v69;
  float v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  _OWORD *v75;
  float *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  unsigned int v80;
  unsigned int *v81;

  if (a1 >= a2)
    sub_239EBFC20();
  v7 = a1;
  v8 = (char *)a3[5];
  v9 = (char *)a3[6];
  if (v8 != v9)
  {
    v10 = (char *)a3[5];
    while (*(_DWORD *)v10 != a1 || *((_DWORD *)v10 + 1) != a2)
    {
      v10 += 8;
      if (v10 == v9)
        goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v11 = a3[7];
  if ((unint64_t)v9 >= v11)
  {
    v13 = v9 - v8;
    v14 = (v9 - v8) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_2394189F8();
    v16 = v11 - (_QWORD)v8;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
    v18 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v17)
      v18 = v15;
    if (v18 >> 61)
      goto LABEL_78;
    v19 = 8 * v18;
    v20 = operator new(8 * v18);
    v21 = (unsigned int *)&v20[8 * v14];
    v22 = &v20[v19];
    *v21 = v7;
    v21[1] = a2;
    v12 = v21 + 2;
    if (v8 != v9)
    {
      if ((unint64_t)(v13 - 8) < 0x58)
        goto LABEL_84;
      if ((unint64_t)(v8 - v20) < 0x20)
        goto LABEL_84;
      v23 = ((unint64_t)(v13 - 8) >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v9[-v24];
      v21 = (unsigned int *)((char *)v21 - v24);
      v26 = &v20[8 * v14 - 16];
      v27 = v9 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v9 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_84:
        do
        {
          v30 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v21 - 1) = v30;
          v21 -= 2;
        }
        while (v9 != v8);
      }
    }
    a3[5] = v21;
    a3[6] = v12;
    a3[7] = v22;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v9 = a1;
    *((_DWORD *)v9 + 1) = a2;
    v12 = v9 + 8;
  }
  a3[6] = v12;
  v80 = v7;
  v81 = &v80;
  v31 = sub_239434A44((uint64_t)a3, &v80, (uint64_t)&unk_239EC6E98, &v81);
  v32 = (void **)(v31 + 24);
  v33 = (__int32 *)*((_QWORD *)v31 + 4);
  if (!HIDWORD(a2))
  {
    v35 = wmemchr(*((__int32 **)v31 + 3), a2, ((uint64_t)v33 - *((_QWORD *)v31 + 3)) >> 2);
    v36 = v35 ? v35 : v33;
    v33 = (__int32 *)*((_QWORD *)v31 + 4);
    if (v36 != v33)
      return 0;
  }
  v37 = *((_QWORD *)v31 + 5);
  if ((unint64_t)v33 < v37)
  {
    *v33 = a2;
    v38 = (uint64_t)(v33 + 1);
    goto LABEL_55;
  }
  v39 = (__int32 *)*v32;
  v40 = (char *)v33 - (_BYTE *)*v32;
  v41 = v40 >> 2;
  v42 = (v40 >> 2) + 1;
  if (v42 >> 62)
    sub_2394189F8();
  v43 = v37 - (_QWORD)v39;
  if (v43 >> 1 > v42)
    v42 = v43 >> 1;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
    v44 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    if (v44 >> 62)
      goto LABEL_78;
    v45 = operator new(4 * v44);
    v46 = &v45[4 * v41];
    v47 = &v45[4 * v44];
    *v46 = a2;
    v38 = (uint64_t)(v46 + 1);
    v48 = (char *)v33 - (char *)v39;
    if (v33 == v39)
      goto LABEL_53;
  }
  else
  {
    v45 = 0;
    v46 = (_DWORD *)(4 * v41);
    v47 = 0;
    *(_DWORD *)(4 * v41) = a2;
    v38 = 4 * v41 + 4;
    v48 = (char *)v33 - (char *)v39;
    if (v33 == v39)
      goto LABEL_53;
  }
  v49 = v48 - 4;
  if (v49 < 0x2C)
  {
    v50 = v33;
    goto LABEL_52;
  }
  if ((unint64_t)((char *)v33 - v45 - v40) < 0x20)
  {
    v50 = v33;
    do
    {
LABEL_52:
      v57 = *--v50;
      *--v46 = v57;
    }
    while (v50 != v39);
    goto LABEL_53;
  }
  v51 = (v49 >> 2) + 1;
  v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
  v50 = &v33[v52 / 0xFFFFFFFFFFFFFFFCLL];
  v46 = (_DWORD *)((char *)v46 - v52);
  v53 = &v45[4 * v41 - 16];
  v54 = v33 - 4;
  v55 = v51 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v56 = *(_OWORD *)v54;
    *(v53 - 1) = *((_OWORD *)v54 - 1);
    *v53 = v56;
    v53 -= 2;
    v54 -= 8;
    v55 -= 8;
  }
  while (v55);
  if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_52;
LABEL_53:
  *((_QWORD *)v31 + 3) = v46;
  *((_QWORD *)v31 + 4) = v38;
  *((_QWORD *)v31 + 5) = v47;
  if (v39)
    operator delete(v39);
LABEL_55:
  *((_QWORD *)v31 + 4) = v38;
  v59 = (float *)*((_QWORD *)v31 + 7);
  v58 = *((_QWORD *)v31 + 8);
  if ((unint64_t)v59 >= v58)
  {
    v62 = (float *)*((_QWORD *)v31 + 6);
    v63 = v59 - v62;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62)
      sub_2394189F8();
    v65 = v58 - (_QWORD)v62;
    if (v65 >> 1 > v64)
      v64 = v65 >> 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (!v66)
    {
      v67 = 0;
LABEL_67:
      v68 = (float *)&v67[4 * v63];
      v69 = &v67[4 * v66];
      v70 = a4;
      *v68 = v70;
      v61 = v68 + 1;
      if (v59 != v62)
      {
        v71 = (char *)v59 - (char *)v62 - 4;
        if (v71 < 0x2C)
          goto LABEL_85;
        if ((unint64_t)((char *)v62 - v67) < 0x20)
          goto LABEL_85;
        v72 = (v71 >> 2) + 1;
        v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        v74 = &v59[v73 / 0xFFFFFFFFFFFFFFFCLL];
        v68 = (float *)((char *)v68 - v73);
        v75 = &v67[4 * v63 - 16];
        v76 = v59 - 4;
        v77 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 8;
          v77 -= 8;
        }
        while (v77);
        v59 = v74;
        if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_85:
          do
          {
            v79 = *((_DWORD *)v59-- - 1);
            *((_DWORD *)v68-- - 1) = v79;
          }
          while (v59 != v62);
        }
      }
      *((_QWORD *)v31 + 6) = v68;
      *((_QWORD *)v31 + 7) = v61;
      *((_QWORD *)v31 + 8) = v69;
      if (v62)
        operator delete(v62);
      goto LABEL_76;
    }
    if (!(v66 >> 62))
    {
      v67 = operator new(4 * v66);
      goto LABEL_67;
    }
LABEL_78:
    sub_239418A80();
  }
  v60 = a4;
  *v59 = v60;
  v61 = v59 + 1;
LABEL_76:
  *((_QWORD *)v31 + 7) = v61;
  return 1;
}

uint64_t sub_23949FF8C(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, unsigned __int8 a6)
{
  _BYTE *v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t **v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  uint64_t v101;
  void *v102;
  unint64_t *v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  void *v125;
  char v126;
  __int128 __p;
  char *v128;
  void *v129[2];
  char v130;
  void *v131;
  unint64_t *v132;
  uint64_t v133;
  void *v134;
  unint64_t *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  char *v139;
  void *v140;
  _BYTE *v141;
  uint64_t v142;
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[568];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v111 = *(_QWORD *)(a2 + 8);
  v140 = 0;
  v141 = 0;
  v142 = 0;
  sub_239433C1C((uint64_t)a1, (uint64_t)&v140, 1);
  v10 = v140;
  v9 = v141;
  sub_2396FD800(a4, (uint64_t)v143);
  v129[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v145, (v9 - v10) >> 3, v143, v129, 1.0);
  v11 = v144;
  if (v144 == v143)
  {
    v12 = 4;
    v11 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v118 = a6;
  v13 = v141 - (_BYTE *)v140;
  if (v141 != v140)
  {
    v121 = 0;
    v14 = 0;
    v15 = v13 >> 3;
    v106 = (v13 >> 3) - 1;
    v107 = a5 + 48;
    while (1)
    {
      v16 = v14;
      while (1)
      {
        HIBYTE(v128) = 0;
        LOBYTE(__p) = 0;
        sub_2396FD394(v129, (uint64_t)v145, &__p);
        if (SHIBYTE(v128) < 0)
          operator delete((void *)__p);
        __p = 0uLL;
        v128 = 0;
        v17 = v16 + 1;
        if (v16 + 1 != (v141 - (_BYTE *)v140) >> 3)
          break;
        sub_2396FD3E8((uint64_t)v129);
        ++v16;
        if (v15 == v17)
          goto LABEL_142;
      }
      v117 = *((_QWORD *)v140 + v16);
      v105 = v16 + 1;
      v124 = v16 + 1;
      v122 = v16;
      v115 = (v141 - (_BYTE *)v140) >> 3;
      v109 = a4;
      v110 = a5;
      v120 = v15;
      do
      {
        v123 = sub_2396FD7B0((uint64_t)a4);
        if (v123)
        {
          v126 = 0;
          LOBYTE(v125) = 0;
          sub_2396FCC6C((uint64_t)v145, (uint64_t)&v125);
          if (v126 < 0)
            operator delete(v125);
          if (!v118)
          {
            v101 = 0;
            v15 = v120;
            v102 = (void *)__p;
            if ((_QWORD)__p)
              goto LABEL_135;
LABEL_138:
            sub_2396FD3E8((uint64_t)v129);
            if (!(_DWORD)v101)
              goto LABEL_151;
            goto LABEL_139;
          }
          v19 = *(char **)(a5 + 232);
          v18 = *(char **)(a5 + 240);
          v20 = v19;
          if (v19 != v18)
          {
            while (*(_DWORD *)v20 != 3006)
            {
              v20 += 4;
              if (v20 == v18)
              {
                v20 = *(char **)(a5 + 240);
                break;
              }
            }
          }
          if (v20 != v18)
          {
            v15 = v120;
LABEL_134:
            v101 = 0;
            v102 = (void *)__p;
            if ((_QWORD)__p)
              goto LABEL_135;
            goto LABEL_138;
          }
          v55 = *(_QWORD *)(a5 + 248);
          if ((unint64_t)v18 < v55)
          {
            *(_DWORD *)v18 = 3006;
            v56 = (uint64_t)(v18 + 4);
LABEL_129:
            v15 = v120;
            *(_QWORD *)(a5 + 240) = v56;
            goto LABEL_130;
          }
          v66 = (v18 - v19) >> 2;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 62)
            sub_2394189F8();
          v68 = v55 - (_QWORD)v19;
          if (v68 >> 1 > v67)
            v67 = v68 >> 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
            v69 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          if (v69)
          {
            if (v69 >> 62)
              sub_239418A80();
            v70 = operator new(4 * v69);
            v71 = &v70[4 * v66];
            *v71 = 3006;
            v56 = (uint64_t)(v71 + 1);
            if (v19 == v18)
              goto LABEL_127;
LABEL_121:
            v92 = v18 - 4 - v19;
            if (v92 < 0x2C)
              goto LABEL_173;
            if ((unint64_t)(v19 - v70) < 0x20)
              goto LABEL_173;
            v93 = (v92 >> 2) + 1;
            v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
            v95 = &v18[-v94];
            v71 = (_DWORD *)((char *)v71 - v94);
            v96 = &v70[4 * v66 - 16];
            v97 = v18 - 16;
            v98 = v93 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v99 = *(_OWORD *)v97;
              *(v96 - 1) = *((_OWORD *)v97 - 1);
              *v96 = v99;
              v96 -= 2;
              v97 -= 32;
              v98 -= 8;
            }
            while (v98);
            v18 = v95;
            if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_173:
              do
              {
                v100 = *((_DWORD *)v18 - 1);
                v18 -= 4;
                *--v71 = v100;
              }
              while (v18 != v19);
            }
          }
          else
          {
            v70 = 0;
            v71 = (_DWORD *)(4 * v66);
            *(_DWORD *)(4 * v66) = 3006;
            v56 = 4 * v66 + 4;
            if (v19 != v18)
              goto LABEL_121;
          }
LABEL_127:
          *(_QWORD *)(a5 + 232) = v71;
          *(_QWORD *)(a5 + 240) = v56;
          *(_QWORD *)(a5 + 248) = &v70[4 * v69];
          if (v19)
            operator delete(v19);
          goto LABEL_129;
        }
        v21 = *((_QWORD *)v140 + v124);
        v135 = (unint64_t *)v134;
        v132 = (unint64_t *)v131;
        sub_2394A0AE8(a1, v117, (uint64_t)&v134, 1);
        sub_2394A0AE8(a1, v21, (uint64_t)&v131, 1);
        v116 = v21;
        v23 = (unint64_t *)v134;
        v22 = v135;
        v24 = (unint64_t *)v131;
        v25 = v132;
        v26 = ((char *)v135 - (_BYTE *)v134) >> 3;
        v27 = ((char *)v132 - (_BYTE *)v131) >> 3;
        v119 = v26 + v27 != 0;
        v28 = v137;
        v138 = (char *)v137;
        v113 = v27;
        v114 = v26;
        if (v27 >= v26)
          v29 = ((char *)v135 - (_BYTE *)v134) >> 3;
        else
          v29 = ((char *)v132 - (_BYTE *)v131) >> 3;
        if (v29 <= (v139 - (_BYTE *)v137) >> 3)
          goto LABEL_34;
        if (v29 >> 61)
          sub_2394189F8();
        v137 = operator new(8 * v29);
        v138 = (char *)v137;
        v139 = (char *)v137 + 8 * v29;
        if (!v28)
          goto LABEL_34;
        operator delete(v28);
        v23 = (unint64_t *)v134;
        v22 = v135;
        v24 = (unint64_t *)v131;
        v25 = v132;
        if (v134 != v135)
        {
          while (1)
          {
            while (1)
            {
              if (v24 == v25)
                goto LABEL_62;
              v30 = *v23;
              if (*v23 >= *v24)
                break;
              ++v23;
LABEL_34:
              if (v23 == v22)
                goto LABEL_62;
            }
            if (*v24 >= v30)
              break;
LABEL_61:
            ++v24;
            if (v23 == v22)
              goto LABEL_62;
          }
          v31 = v138;
          if (v138 < v139)
          {
            *(_QWORD *)v138 = v30;
            v32 = (uint64_t)(v31 + 8);
LABEL_60:
            v138 = (char *)v32;
            ++v23;
            goto LABEL_61;
          }
          v33 = (char *)v137;
          v34 = v138 - (_BYTE *)v137;
          v35 = (v138 - (_BYTE *)v137) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            sub_2394189F8();
          v37 = v139 - (_BYTE *)v137;
          if ((v139 - (_BYTE *)v137) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            if (v38 >> 61)
              sub_239418A80();
            v39 = (char *)operator new(8 * v38);
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = *v23;
            v32 = (uint64_t)(v40 + 8);
            if (v31 != v33)
            {
LABEL_49:
              v41 = v31 - 8 - v33;
              if (v41 < 0x58)
              {
                v16 = v122;
                goto LABEL_57;
              }
              v42 = v31 - &v39[v34];
              v16 = v122;
              if (v42 < 0x20)
                goto LABEL_174;
              v43 = (v41 >> 3) + 1;
              v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v31[-v44];
              v40 -= v44;
              v46 = &v39[8 * v35 - 16];
              v47 = v31 - 16;
              v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = *(_OWORD *)v47;
                *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
                *(_OWORD *)v46 = v49;
                v46 -= 32;
                v47 -= 32;
                v48 -= 4;
              }
              while (v48);
              v31 = v45;
              if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_174:
                do
                {
LABEL_57:
                  v50 = *((_QWORD *)v31 - 1);
                  v31 -= 8;
                  *((_QWORD *)v40 - 1) = v50;
                  v40 -= 8;
                }
                while (v31 != v33);
              }
LABEL_58:
              v137 = v40;
              v138 = (char *)v32;
              v139 = &v39[8 * v38];
              if (v33)
                operator delete(v33);
              goto LABEL_60;
            }
          }
          else
          {
            v39 = 0;
            v40 = (char *)(8 * v35);
            *(_QWORD *)(8 * v35) = v30;
            v32 = 8 * v35 + 8;
            if (v31 != v33)
              goto LABEL_49;
          }
          v16 = v122;
          goto LABEL_58;
        }
LABEL_62:
        v121 |= v119;
        v51 = (v138 - (_BYTE *)v137) >> 3;
        if (v51 < v111)
        {
          a4 = v109;
          a5 = v110;
          v15 = v120;
          goto LABEL_130;
        }
        v52 = (_BYTE *)*((_QWORD *)&__p + 1);
        a4 = v109;
        a5 = v110;
        v15 = v120;
        if (*((_QWORD *)&__p + 1) < (unint64_t)v128)
        {
          v53 = v116;
          **((_QWORD **)&__p + 1) = v116;
          v54 = (uint64_t)(v52 + 8);
          goto LABEL_99;
        }
        v57 = (_BYTE *)__p;
        v58 = *((_QWORD *)&__p + 1) - __p;
        v59 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          sub_2394189F8();
        v61 = (uint64_t)&v128[-__p];
        if ((uint64_t)&v128[-__p] >> 2 > v60)
          v60 = v61 >> 2;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          if (v62 >> 61)
            sub_239418A80();
          v63 = (char *)operator new(8 * v62);
          v64 = (unint64_t *)&v63[8 * v59];
          *v64 = v116;
          v54 = (uint64_t)(v64 + 1);
          if (v52 == v57)
          {
LABEL_90:
            v16 = v122;
            goto LABEL_96;
          }
        }
        else
        {
          v63 = 0;
          v64 = (unint64_t *)(8 * v59);
          *(_QWORD *)(8 * v59) = v116;
          v54 = 8 * v59 + 8;
          if (v52 == v57)
            goto LABEL_90;
        }
        v65 = v52 - 8 - v57;
        if (v65 >= 0x58)
        {
          v72 = v52 - &v63[v58];
          v16 = v122;
          if (v72 >= 0x20)
          {
            v73 = (v65 >> 3) + 1;
            v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
            v75 = &v52[-v74];
            v64 = (unint64_t *)((char *)v64 - v74);
            v76 = &v63[8 * v59 - 16];
            v77 = (__int128 *)(v52 - 16);
            v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v79 = *v77;
              *((_OWORD *)v76 - 1) = *(v77 - 1);
              *(_OWORD *)v76 = v79;
              v76 -= 32;
              v77 -= 2;
              v78 -= 4;
            }
            while (v78);
            v52 = v75;
            if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_96;
          }
        }
        else
        {
          v16 = v122;
        }
        do
        {
          v80 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v64 = v80;
        }
        while (v52 != v57);
LABEL_96:
        *(_QWORD *)&__p = v64;
        v128 = &v63[8 * v62];
        if (v57)
          operator delete(v57);
        v53 = v116;
LABEL_99:
        *((_QWORD *)&__p + 1) = v54;
        v81 = sub_23949FB00(v117, v53, a3, (float)((float)v51 / (float)(v113 + v114 - v51)));
        if (v118)
          v82 = v81;
        else
          v82 = 0;
        if (v82 == 1)
        {
          if (v53 >= v117)
            v83 = v117;
          else
            v83 = v53;
          if (v53 <= v117)
            v84 = v117;
          else
            v84 = v53;
          v85 = v107;
LABEL_110:
          while (1)
          {
            v86 = *(_QWORD *)v85;
            v87 = (uint64_t **)v85;
            if (!*(_QWORD *)v85)
              break;
            while (1)
            {
              v85 = v86;
              v88 = *(_DWORD *)(v86 + 28);
              if (v88 > v83)
                break;
              if (v88 >= v83)
              {
                v89 = *(_DWORD *)(v85 + 32);
                if (v89 > v84)
                  goto LABEL_110;
                if (v89 >= v84)
                  goto LABEL_130;
              }
              v86 = *(_QWORD *)(v85 + 8);
              if (!v86)
              {
                v87 = (uint64_t **)(v85 + 8);
                goto LABEL_117;
              }
            }
          }
LABEL_117:
          v90 = (uint64_t *)operator new(0x28uLL);
          *(uint64_t *)((char *)v90 + 28) = v83 | ((unint64_t)v84 << 32);
          *v90 = 0;
          v90[1] = 0;
          v90[2] = v85;
          *v87 = v90;
          v91 = **(_QWORD **)(v110 + 40);
          if (v91)
          {
            *(_QWORD *)(v110 + 40) = v91;
            v90 = *v87;
          }
          sub_2394213B8(*(uint64_t **)(v110 + 48), v90);
          ++*(_QWORD *)(v110 + 56);
        }
LABEL_130:
        if (v123)
          goto LABEL_134;
        ++v124;
      }
      while (v124 != v115);
      v101 = 1;
      v102 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_138;
LABEL_135:
      operator delete(v102);
      sub_2396FD3E8((uint64_t)v129);
      if ((v101 & 1) == 0)
        goto LABEL_162;
LABEL_139:
      v14 = v105;
      if (v106 == v16)
        goto LABEL_142;
    }
  }
  v121 = 0;
LABEL_142:
  if (sub_2396FD7B0((uint64_t)a4))
  {
    v130 = 0;
    LOBYTE(v129[0]) = 0;
    sub_2396FCC6C((uint64_t)v145, (uint64_t)v129);
    if (v130 < 0)
    {
      operator delete(v129[0]);
      if (!v118)
        goto LABEL_162;
    }
    else if (!v118)
    {
LABEL_162:
      v101 = 0;
      v103 = (unint64_t *)v131;
      if (!v131)
        goto LABEL_153;
LABEL_152:
      v132 = v103;
      operator delete(v103);
      goto LABEL_153;
    }
    sub_2394202DC((_QWORD *)(a5 + 192), 3006);
    goto LABEL_162;
  }
  v130 = 0;
  LOBYTE(v129[0]) = 0;
  sub_2396FCC6C((uint64_t)v145, (uint64_t)v129);
  if (v130 < 0)
    operator delete(v129[0]);
  if (v118)
    *(_BYTE *)(a5 + 268) = v121 & 1;
  v101 = 1;
LABEL_151:
  v103 = (unint64_t *)v131;
  if (v131)
    goto LABEL_152;
LABEL_153:
  if (v134)
  {
    v135 = (unint64_t *)v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = (char *)v137;
    operator delete(v137);
  }
  sub_2396FCD14((uint64_t)v145);
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  return v101;
}

void sub_2394A0980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v63;
  void *v64;

  if (a44 < 0)
    operator delete(__p);
  if (a46)
  {
    operator delete(a46);
    v63 = a49;
    if (!a49)
    {
LABEL_6:
      v64 = a52;
      if (!a52)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    v63 = a49;
    if (!a49)
      goto LABEL_6;
  }
  operator delete(v63);
  v64 = a52;
  if (!a52)
  {
LABEL_8:
    sub_2396FCD14((uint64_t)&a62);
    if (a55)
    {
      operator delete(a55);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v64);
  goto LABEL_8;
}

void sub_2394A0AD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  JUMPOUT(0x2394A0A6CLL);
}

uint64_t sub_2394A0AE8(uint64_t *a1, unsigned int a2, uint64_t a3, char a4)
{
  char *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v7 = *(char **)a3;
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    *(_QWORD *)(a3 + 8) = v7;
  v8 = a1[10];
  if (!v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = a2;
    if (v8 <= a2)
      v10 = a2 % v8;
  }
  else
  {
    v10 = ((_DWORD)v8 - 1) & a2;
  }
  v11 = *(uint64_t ***)(a1[9] + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (!*v11)
    return 0;
  if (v9.u32[0] < 2uLL)
  {
    v13 = v8 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == a2)
      {
        if (*((_DWORD *)v12 + 4) == a2)
          goto LABEL_25;
      }
      else if ((v15 & v13) != v10)
      {
        return 0;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        return 0;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == a2)
      break;
    if (v14 >= v8)
      v14 %= v8;
    if (v14 != v10)
      return 0;
LABEL_13:
    v12 = (uint64_t *)*v12;
    if (!v12)
      return 0;
  }
  if (*((_DWORD *)v12 + 4) != a2)
    goto LABEL_13;
LABEL_25:
  v17 = v12[57];
  if (v17 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v7) >> 3)
  {
    if (v17 >> 61)
LABEL_64:
      sub_2394189F8();
    v18 = 8 * v17;
    v19 = (char *)operator new(8 * v17);
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v19;
    *(_QWORD *)(a3 + 16) = &v19[v18];
    if (v7)
      operator delete(v7);
  }
  v20 = (uint64_t *)v12[56];
  if (v20)
  {
    while (1)
    {
      if (*((_BYTE *)sub_2394A2EA8((uint64_t)a1, *((_DWORD *)v20 + 4)) + 27) != 2)
        goto LABEL_35;
      v22 = *((unsigned int *)v20 + 5);
      v23 = *a1;
      if (v22 >= (a1[1] - *a1) >> 6
        || ((_DWORD)v22 != -1 ? (v24 = *(_DWORD *)(v23 + (v22 << 6)) == -1) : (v24 = 1), v24))
      {
        sub_239EBFC50();
      }
      if (*(_BYTE *)(v23 + (v22 << 6) + 59) != 2)
        goto LABEL_35;
      v26 = *(char **)(a3 + 8);
      v25 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v26 >= v25)
        break;
      *(_QWORD *)v26 = *((unsigned int *)v20 + 4);
      v21 = (uint64_t)(v26 + 8);
LABEL_34:
      *(_QWORD *)(a3 + 8) = v21;
LABEL_35:
      v20 = (uint64_t *)*v20;
      if (!v20)
        goto LABEL_30;
    }
    v27 = *(char **)a3;
    v28 = (uint64_t)&v26[-*(_QWORD *)a3];
    v29 = v28 >> 3;
    v30 = (v28 >> 3) + 1;
    if (v30 >> 61)
      goto LABEL_64;
    v31 = v25 - (_QWORD)v27;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
        sub_239418A80();
      v33 = operator new(8 * v32);
      v34 = &v33[8 * v29];
      *v34 = *((unsigned int *)v20 + 4);
      v21 = (uint64_t)(v34 + 1);
      if (v26 == v27)
        goto LABEL_61;
    }
    else
    {
      v33 = 0;
      v34 = (_QWORD *)(8 * v29);
      *(_QWORD *)(8 * v29) = *((unsigned int *)v20 + 4);
      v21 = 8 * v29 + 8;
      if (v26 == v27)
      {
LABEL_61:
        *(_QWORD *)a3 = v34;
        *(_QWORD *)(a3 + 8) = v21;
        *(_QWORD *)(a3 + 16) = &v33[8 * v32];
        if (v27)
          operator delete(v27);
        goto LABEL_34;
      }
    }
    v35 = v26 - 8 - v27;
    if (v35 < 0x58)
      goto LABEL_68;
    if ((unint64_t)(v26 - &v33[v28]) < 0x20)
      goto LABEL_68;
    v36 = (v35 >> 3) + 1;
    v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
    v38 = &v26[-v37];
    v34 = (_QWORD *)((char *)v34 - v37);
    v39 = &v33[8 * v29 - 16];
    v40 = v26 - 16;
    v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42 = *(_OWORD *)v40;
      *(v39 - 1) = *((_OWORD *)v40 - 1);
      *v39 = v42;
      v39 -= 2;
      v40 -= 32;
      v41 -= 4;
    }
    while (v41);
    v26 = v38;
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_68:
      do
      {
        v43 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v43;
      }
      while (v26 != v27);
    }
    goto LABEL_61;
  }
LABEL_30:
  if ((a4 & 1) != 0)
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  return 1;
}

uint64_t sub_2394A0E1C(unsigned int a1, unsigned int a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64_t *v29;
  float64x2_t v30;
  double v32;
  float64x2_t v34;
  float64_t v35;
  float64x2_t v36;
  int64x2_t v41;
  int64x2_t v42;
  double v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v48;
  float64x2_t v51;
  float64x2_t v53;
  double v54;
  double v57;
  float64x2_t v60;
  double v61;
  double v64;
  double v67;
  float64x2_t v68;
  double v69;

  v5 = 0;
  if (a4 > 0.0 && a5 > 0.0)
  {
    v10 = a1;
    v11 = sub_239470FCC(a3, a1);
    v12 = sub_239470FCC(a3, a2);
    v13 = *(uint64_t **)(a3 + 88);
    if (v13)
    {
      v14 = -1;
      do
      {
        v15 = *((_DWORD *)v13 + 55);
        if ((v15 & 0x80000000) == 0)
        {
          v16 = v14 >= v15 ? *((_DWORD *)v13 + 55) : v14;
          v14 = v14 == -1 ? *((_DWORD *)v13 + 55) : v16;
          if (!v14)
            break;
        }
        v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      v14 = -1;
    }
    if (*((_BYTE *)v11 + 236))
      _ZF = *((_BYTE *)v11 + 237) == 0;
    else
      _ZF = 1;
    if (_ZF || *((_BYTE *)v12 + 236) == 0 || *((_BYTE *)v12 + 237) == 0)
      return 0;
    if (v14 == -1 || (v5 = 0, v20 = *((_DWORD *)v11 + 49), (v20 & 0x80000000) == 0) && v20 == *((_DWORD *)v12 + 49))
    {
      v21 = sub_2394650AC(a3, v10);
      v22 = sub_2394650AC(a3, a2);
      v29 = (float64_t *)v22;
      if (a5 >= 181.0)
        goto LABEL_39;
      *(_QWORD *)&v30.f64[0] = v21[10];
      *(_QWORD *)&v23.f64[0] = v21[18];
      _Q5 = *((float64x2_t *)v21 + 8);
      *(_QWORD *)&v25.f64[0] = v21[22];
      *(_QWORD *)&v32 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v25);
      _Q7 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v21 + 10));
      v34.f64[0] = v30.f64[0];
      v35 = v30.f64[0] * v30.f64[0];
      *(_QWORD *)&v30.f64[1] = v21[14];
      v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v21 + 4), *((int64x2_t *)v21 + 6)), _Q7.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v21 + 4), *((int64x2_t *)v21 + 6)), _Q7, 1), v30, v32);
      _Q3 = vmulq_f64(_Q5, _Q7);
      _Q7.f64[0] = _Q7.f64[1];
      __asm { FMLA            D3, D7, V5.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v23.f64[0], v32);
      *(_QWORD *)&_Q5.f64[0] = v22[10];
      v41 = *((int64x2_t *)v22 + 4);
      v42 = *((int64x2_t *)v22 + 6);
      *(_QWORD *)&v27.f64[0] = v22[18];
      *(_QWORD *)&v28.f64[0] = v22[22];
      *(_QWORD *)&v43 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v28);
      _Q4 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v22 + 10));
      v45 = (float64x2_t)vzip1q_s64(v41, v42);
      v46 = (float64x2_t)vzip2q_s64(v41, v42);
      _Q18 = *((float64x2_t *)v22 + 8);
      v48 = vmlaq_laneq_f64(vmulq_n_f64(v45, _Q4.f64[0]), v46, _Q4, 1);
      _Q6 = vmulq_f64(_Q18, _Q4);
      _Q4.f64[0] = _Q4.f64[1];
      __asm { FMLA            D6, D4, V18.D[1] }
      _Q4.f64[0] = _Q5.f64[0];
      _Q18.f64[0] = _Q5.f64[0] * _Q5.f64[0];
      *(_QWORD *)&_Q5.f64[1] = v22[14];
      _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v27.f64[0], v43);
      _Q2 = vsubq_f64(v36, vmlaq_n_f64(v48, _Q5, v43));
      v51 = vsubq_f64(_Q3, _Q6);
      _Q5 = vmulq_f64(_Q2, _Q2);
      _Q6.f64[0] = _Q2.f64[1];
      __asm { FMLA            D5, D6, V2.D[1] }
      _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v51.f64[0], v51.f64[0]));
      v51.f64[0] = vmulq_f64(v51, _Q5).f64[0];
      v53 = vmulq_n_f64(_Q2, _Q5.f64[0]);
      *(_QWORD *)&v34.f64[1] = v21[14];
      v24.f64[0] = 1.0 / sqrt(v35 + v34.f64[1] * v34.f64[1] + v23.f64[0] * v23.f64[0]);
      v54 = vmulq_f64(v23, v24).f64[0];
      _Q1 = vmulq_n_f64(v34, v24.f64[0]);
      *(_QWORD *)&_Q4.f64[1] = v22[14];
      _Q2.f64[0] = 1.0 / sqrt(_Q18.f64[0] + _Q4.f64[1] * _Q4.f64[1] + v27.f64[0] * v27.f64[0]);
      *(_QWORD *)&v69 = *(_OWORD *)&vmulq_f64(v27, _Q2);
      v67 = v51.f64[0];
      v68 = vmulq_n_f64(_Q4, _Q2.f64[0]);
      _D10 = v53.f64[1];
      __asm { FMLA            D2, D10, V1.D[1] }
      v57 = acos(-(_Q2.f64[0] + v54 * v51.f64[0])) * 180.0 / 3.14159265;
      _V1.D[1] = v68.f64[1];
      __asm { FMLA            D0, D10, V1.D[1] }
      if (vabdd_f64(v57, acos(vmlad_n_f64(_D0, v67, v69)) * 180.0 / 3.14159265) <= a5)
      {
LABEL_39:
        if (a4 >= 181.0)
          return 1;
        *(_QWORD *)&v23.f64[0] = v21[18];
        *(_QWORD *)&v60.f64[0] = v21[10];
        *(_QWORD *)&v60.f64[1] = v21[14];
        v25.f64[0] = 1.0 / sqrt(v60.f64[0] * v60.f64[0] + v60.f64[1] * v60.f64[1] + v23.f64[0] * v23.f64[0]);
        *(_QWORD *)&v61 = *(_OWORD *)&vmulq_f64(v23, v25);
        _Q1 = vmulq_n_f64(v60, v25.f64[0]);
        v23.f64[0] = v29[18];
        _Q2.f64[0] = v29[10];
        _Q2.f64[1] = v29[14];
        v26.f64[0] = 1.0 / sqrt(_Q2.f64[0] * _Q2.f64[0] + _Q2.f64[1] * _Q2.f64[1] + v23.f64[0] * v23.f64[0]);
        *(_QWORD *)&v64 = *(_OWORD *)&vmulq_f64(v23, v26);
        _Q2.f64[0] = vmulq_n_f64(_Q2, *(double *)&v26).f64[1];
        __asm { FMLA            D0, D2, V1.D[1] }
        if (fabs(acos(vmlad_n_f64(_D0, v64, v61)) * 180.0 / 3.14159265) <= a4)
          return 1;
      }
      return 0;
    }
  }
  return v5;
}

void sub_2394A1198(unsigned int **a1, uint64_t a2, _QWORD *a3, char **a4, char a5, double a6)
{
  uint64_t *v11;
  int32x4_t *v12;
  uint64_t v13;
  int32x4_t *v14;
  int32x4_t *v15;
  __int8 *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int32x4_t *v20;
  int32x4_t *v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  BOOL v43;
  unsigned int *v45;
  unsigned int *v46;
  int8x8_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _DWORD *v83;
  _DWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  _QWORD *v94;
  float64_t v95;
  int8x16_t v96;
  double v97;
  unsigned int *v98;
  unsigned int **v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  void *__p;
  unsigned int *v104;
  __int8 *v105;

  a3[1] = *a3;
  if (a6 <= 0.0 || a1[1] == *a1)
    return;
  __p = 0;
  v104 = 0;
  v105 = 0;
  if (!a5)
  {
    v100 = 0;
    v101 = 0;
    v102 = 0;
    sub_239433C1C(a2, (uint64_t)&v100, 1);
    v12 = (int32x4_t *)v100;
    v11 = v101;
    v13 = (char *)v101 - (char *)v100;
    if (v101 == v100)
    {
      v16 = 0;
      v15 = 0;
      v28 = (unsigned int *)__p;
      if (!__p)
      {
LABEL_17:
        __p = v15;
        v104 = (unsigned int *)v13;
        v105 = v16;
        if (v12)
        {
          v101 = (uint64_t *)v12;
          operator delete(v12);
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (v13 < 0)
        sub_2394189F8();
      v14 = (int32x4_t *)operator new((unint64_t)v13 >> 1);
      v15 = v14;
      v16 = &v14->i8[4 * (v13 >> 3)];
      v17 = v13 - 8;
      v18 = (uint64_t *)v12;
      v13 = (uint64_t)v14;
      if (v17 < 0x38)
        goto LABEL_135;
      v19 = (v17 >> 3) + 1;
      v18 = &v12->i64[v19 & 0x3FFFFFFFFFFFFFF8];
      v13 = (uint64_t)v14->i64 + 4 * (v19 & 0x3FFFFFFFFFFFFFF8);
      v20 = v14 + 1;
      v21 = v12 + 2;
      v22 = v19 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v24 = v21[-2];
        v23 = v21[-1];
        v26 = *v21;
        v25 = v21[1];
        v21 += 4;
        v20[-1] = vuzp1q_s32(v24, v23);
        *v20 = vuzp1q_s32(v26, v25);
        v20 += 2;
        v22 -= 8;
      }
      while (v22);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_135:
        do
        {
          v27 = *v18++;
          *(_DWORD *)v13 = v27;
          v13 += 4;
        }
        while (v18 != v11);
      }
      v28 = (unsigned int *)__p;
      if (!__p)
        goto LABEL_17;
    }
    v104 = v28;
    operator delete(v28);
    v12 = (int32x4_t *)v100;
    goto LABEL_17;
  }
  if (&__p != (void **)a4)
    sub_23942156C(&__p, *a4, a4[1], (a4[1] - *a4) >> 2);
LABEL_19:
  v29 = (unsigned int *)__p;
  v30 = v104;
  if (__p != v104)
  {
    v31 = *(int8x8_t *)(a2 + 80);
    if (v31)
    {
      v99 = a1;
      v94 = a3;
LABEL_22:
      v32 = *v29;
      v33 = (uint8x8_t)vcnt_s8(v31);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        v34 = *v29;
        if (*(_QWORD *)&v31 <= v32)
          v34 = v32 % *(_QWORD *)&v31;
      }
      else
      {
        v34 = (v31.i32[0] - 1) & v32;
      }
      v35 = *(uint64_t ***)(*(_QWORD *)(a2 + 72) + 8 * v34);
      if (v35)
      {
        v36 = *v35;
        if (v36)
        {
          if (v33.u32[0] < 2uLL)
          {
            v37 = *(_QWORD *)&v31 - 1;
            while (1)
            {
              v39 = v36[1];
              if (v39 == v32)
              {
                if (*((_DWORD *)v36 + 4) == (_DWORD)v32)
                  goto LABEL_42;
              }
              else if ((v39 & v37) != v34)
              {
                goto LABEL_120;
              }
              v36 = (uint64_t *)*v36;
              if (!v36)
                goto LABEL_120;
            }
          }
          do
          {
            v38 = v36[1];
            if (v38 == v32)
            {
              if (*((_DWORD *)v36 + 4) == (_DWORD)v32)
              {
LABEL_42:
                v40 = sub_239470FCC(a2, *v29);
                if (*((_BYTE *)v40 + 237))
                  v43 = *((_BYTE *)v40 + 236) == 0;
                else
                  v43 = 1;
                if (v43 && *((_BYTE *)v40 + 232) != 2)
                  break;
                v46 = *v99;
                v45 = v99[1];
                if (*v99 == v45)
                  break;
                v47 = *(int8x8_t *)(a2 + 80);
                if (!*(_QWORD *)&v47)
                  break;
                *(int8x8_t *)&v41.f64[0] = vcnt_s8(v47);
                LOWORD(v41.f64[0]) = vaddlv_u8(*(uint8x8_t *)&v41.f64[0]);
                v48 = LODWORD(v41.f64[0]);
                v49 = *(_QWORD *)&v47 + 0xFFFFFFFFLL;
                v50 = *(_QWORD *)(a2 + 72);
                v51 = *(_QWORD *)&v47 - 1;
                *(_QWORD *)&v41.f64[0] = v40[18];
                *(_QWORD *)&v52.f64[0] = v40[10];
                *(_QWORD *)&v52.f64[1] = v40[14];
                v42.f64[0] = 1.0 / sqrt(v52.f64[0] * v52.f64[0] + v52.f64[1] * v52.f64[1] + v41.f64[0] * v41.f64[0]);
                v96 = (int8x16_t)vmulq_n_f64(v52, v42.f64[0]);
                *(_QWORD *)&v97 = *(_OWORD *)&vmulq_f64(v41, v42);
                v53 = (float64x2_t)vextq_s8(v96, v96, 8uLL);
                v95 = v53.f64[0];
                v98 = v30;
LABEL_55:
                v63 = *v46;
                if (v48 > 1)
                {
                  v64 = *v46;
                  if (*(_QWORD *)&v47 <= v63)
                    v64 = v63 % *(_QWORD *)&v47;
                }
                else
                {
                  v64 = v49 & v63;
                }
                v65 = *(uint64_t ***)(v50 + 8 * v64);
                if (!v65)
                  goto LABEL_54;
                v66 = *v65;
                if (!v66)
                  goto LABEL_54;
                if (v48 < 2)
                {
                  while (1)
                  {
                    v67 = v66[1];
                    if (v67 == v63)
                    {
                      if (*((_DWORD *)v66 + 4) == (_DWORD)v63)
                        goto LABEL_75;
                    }
                    else if ((v67 & v51) != v64)
                    {
                      goto LABEL_54;
                    }
                    v66 = (uint64_t *)*v66;
                    if (!v66)
                      goto LABEL_54;
                  }
                }
                while (1)
                {
                  v68 = v66[1];
                  if (v68 == v63)
                  {
                    if (*((_DWORD *)v66 + 4) == (_DWORD)v63)
                    {
LABEL_75:
                      if (v48 > 1)
                      {
                        v69 = *v46;
                        if (*(_QWORD *)&v47 <= v63)
                          v69 = v63 % *(_QWORD *)&v47;
                      }
                      else
                      {
                        v69 = v49 & v63;
                      }
                      v70 = *(uint64_t ***)(v50 + 8 * v69);
                      if (!v70 || (v71 = *v70) == 0)
                      {
LABEL_129:
                        sub_239A444D4((uint64_t)"unknown file", 779, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                        sub_239A4475C();
                        abort();
                      }
                      if (v48 < 2)
                      {
                        while (1)
                        {
                          v72 = v71[1];
                          if (v72 == v63)
                          {
                            if (*((_DWORD *)v71 + 4) == (_DWORD)v63)
                              goto LABEL_87;
                          }
                          else if ((v72 & v51) != v69)
                          {
                            goto LABEL_129;
                          }
                          v71 = (uint64_t *)*v71;
                          if (!v71)
                            goto LABEL_129;
                        }
                      }
                      while (1)
                      {
                        v73 = v71[1];
                        if (v73 == v63)
                        {
                          if (*((_DWORD *)v71 + 4) == (_DWORD)v63)
                          {
LABEL_87:
                            if (*((_BYTE *)v71 + 260) && *((_BYTE *)v71 + 261) || *((_BYTE *)v71 + 256) == 2)
                            {
                              *(_QWORD *)&v53.f64[0] = v71[21];
                              *(_QWORD *)&v54.f64[0] = v71[13];
                              *(_QWORD *)&v54.f64[1] = v71[17];
                              v42.f64[0] = 1.0
                                         / sqrt(v54.f64[0] * v54.f64[0] + v54.f64[1] * v54.f64[1] + v53.f64[0] * v53.f64[0]);
                              *(_QWORD *)&v55 = *(_OWORD *)&vmulq_f64(v53, v42);
                              _Q1 = vmulq_n_f64(v54, v42.f64[0]);
                              _D2 = v95;
                              __asm { FMLA            D0, D2, V1.D[1] }
                              v62 = v50;
                              v53.f64[0] = acos(vmlad_n_f64(_D0, v97, v55));
                              v50 = v62;
                              v30 = v98;
                              if (fabs(v53.f64[0] * 180.0 / 3.14159265) <= a6)
                              {
                                v75 = (char *)v94[1];
                                v74 = v94[2];
                                if ((unint64_t)v75 >= v74)
                                {
                                  v76 = (char *)*v94;
                                  v77 = (uint64_t)&v75[-*v94];
                                  v78 = v77 >> 2;
                                  v79 = (v77 >> 2) + 1;
                                  if (v79 >> 62)
                                    sub_2394189F8();
                                  v80 = v74 - (_QWORD)v76;
                                  if (v80 >> 1 > v79)
                                    v79 = v80 >> 1;
                                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v81 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v81 = v79;
                                  if (v81)
                                  {
                                    if (v81 >> 62)
                                      sub_239418A80();
                                    v82 = operator new(4 * v81);
                                  }
                                  else
                                  {
                                    v82 = 0;
                                  }
                                  v83 = &v82[4 * v78];
                                  *v83 = v32;
                                  v84 = v83 + 1;
                                  if (v75 != v76)
                                  {
                                    v85 = v75 - 4 - v76;
                                    if (v85 < 0x2C)
                                      goto LABEL_136;
                                    if ((unint64_t)(v75 - &v82[v77]) < 0x20)
                                      goto LABEL_136;
                                    v86 = (v85 >> 2) + 1;
                                    v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
                                    v88 = &v75[-v87];
                                    v83 = (_DWORD *)((char *)v83 - v87);
                                    v89 = &v82[4 * v78 - 16];
                                    v90 = v75 - 16;
                                    v91 = v86 & 0x7FFFFFFFFFFFFFF8;
                                    do
                                    {
                                      v92 = *(_OWORD *)v90;
                                      *(v89 - 1) = *((_OWORD *)v90 - 1);
                                      *v89 = v92;
                                      v89 -= 2;
                                      v90 -= 32;
                                      v91 -= 8;
                                    }
                                    while (v91);
                                    v75 = v88;
                                    if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
                                    {
LABEL_136:
                                      do
                                      {
                                        v93 = *((_DWORD *)v75 - 1);
                                        v75 -= 4;
                                        *--v83 = v93;
                                      }
                                      while (v75 != v76);
                                    }
                                  }
                                  *v94 = v83;
                                  v94[1] = v84;
                                  v94[2] = &v82[4 * v81];
                                  if (v76)
                                    operator delete(v76);
                                  v94[1] = v84;
                                }
                                else
                                {
                                  *(_DWORD *)v75 = v32;
                                  v94[1] = v75 + 4;
                                }
                                goto LABEL_120;
                              }
                            }
LABEL_54:
                            if (++v46 == v45)
                              goto LABEL_120;
                            goto LABEL_55;
                          }
                        }
                        else
                        {
                          if (v73 >= *(_QWORD *)&v47)
                            v73 %= *(_QWORD *)&v47;
                          if (v73 != v69)
                            goto LABEL_129;
                        }
                        v71 = (uint64_t *)*v71;
                        if (!v71)
                          goto LABEL_129;
                      }
                    }
                  }
                  else
                  {
                    if (v68 >= *(_QWORD *)&v47)
                      v68 %= *(_QWORD *)&v47;
                    if (v68 != v64)
                      goto LABEL_54;
                  }
                  v66 = (uint64_t *)*v66;
                  if (!v66)
                    goto LABEL_54;
                }
              }
            }
            else
            {
              if (v38 >= *(_QWORD *)&v31)
                v38 %= *(_QWORD *)&v31;
              if (v38 != v34)
                break;
            }
            v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
      }
LABEL_120:
      while (++v29 != v30)
      {
        v31 = *(int8x8_t *)(a2 + 80);
        if (v31)
          goto LABEL_22;
      }
      v29 = (unsigned int *)__p;
    }
  }
  if (v29)
  {
    v104 = v29;
    operator delete(v29);
  }
}

void sub_2394A1864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2394A18E8(unsigned int a1, uint64_t a2, double *a3, char **a4, unint64_t **a5, char a6, _QWORD *a7, unsigned __int8 a8, char **a9, char a10, uint64_t a11, char a12)
{
  char **v12;
  uint64_t v13;
  double v14;
  uint64_t *v15;
  int i;
  int v17;
  int v18;
  double v19;
  double v20;
  unsigned int *v21;
  uint64_t **v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  BOOL v28;
  int v30;
  unsigned int *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  int64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unsigned int *v71;
  char *v72;
  unsigned int *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t *v84;
  unsigned int *v85;
  unsigned int *v86;
  unint64_t v87;
  char **v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  unsigned int *v92;
  unsigned int *v93;
  unint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t **v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  _DWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  int v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  char **v170;
  int v171;
  unint64_t *v175;
  void *__p;
  unint64_t *v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  char *v183;
  void *v184;
  unsigned int *v185;
  char *v186;
  void **v187;
  uint64_t v188[2];

  v12 = a4;
  v13 = a2;
  v14 = a3[3];
  v15 = *(uint64_t **)(a2 + 88);
  v171 = a8;
  for (i = -1; v15; v15 = (uint64_t *)*v15)
  {
    v17 = *((_DWORD *)v15 + 55);
    if ((v17 & 0x80000000) == 0)
    {
      v18 = i >= v17 ? *((_DWORD *)v15 + 55) : i;
      i = i == -1 ? *((_DWORD *)v15 + 55) : v18;
      if (!i)
        break;
    }
  }
  v19 = a3[4];
  v20 = a3[2];
  if (v14 > 0.0 && v20 > 0.0)
  {
    v21 = (unsigned int *)*a4;
    if (*a4 != a4[1])
    {
      v23 = (uint64_t **)(a11 + 96);
      while (1)
      {
        v24 = *v21;
        v25 = sub_239470FCC(v13, a1);
        v26 = sub_239470FCC(v13, v24);
        v27 = !*((_BYTE *)v25 + 236) || *((_BYTE *)v25 + 237) == 0;
        v28 = v27 || *((_BYTE *)v26 + 236) == 0;
        if (!v28 && *((_BYTE *)v26 + 237) != 0)
        {
          if (i == -1 || (v30 = *((_DWORD *)v25 + 49), (v30 & 0x80000000) == 0) && v30 == *((_DWORD *)v26 + 49))
          {
            if ((sub_2394A0E1C(a1, v24, v13, v14, v20) & 1) == 0)
              break;
          }
        }
        ++v21;
LABEL_17:
        if (v21 == (unsigned int *)v12[1])
          goto LABEL_73;
      }
      v31 = (unsigned int *)v12[1];
      v32 = (char *)v31 - (char *)(v21 + 1);
      if (v31 != v21 + 1)
        memmove(v21, v21 + 1, (char *)v31 - (char *)(v21 + 1));
      v12[1] = (char *)v21 + v32;
      if (a1 >= v24)
        v33 = v24;
      else
        v33 = a1;
      if (a1 <= v24)
        v34 = v24;
      else
        v34 = a1;
      if (!a12)
      {
LABEL_54:
        if (v171)
        {
          v44 = (char *)((char *)v21 - *v12);
          v45 = (char *)a7[1];
          v46 = &v44[*a7];
          v47 = v45 - (v46 + 4);
          if (v45 != v46 + 4)
            memmove(&v44[*a7], v46 + 4, v45 - (v46 + 4));
          a7[1] = &v46[v47];
        }
        if (a10)
        {
          v49 = *a9;
          v48 = a9[1];
          v50 = *a9;
          if (*a9 != v48)
          {
            while (*(_DWORD *)v50 != (_DWORD)v33 || (_DWORD)v34 != *((_DWORD *)v50 + 1))
            {
              v50 += 8;
              if (v50 == v48)
                goto LABEL_72;
            }
          }
          v13 = a2;
          if (v50 != v48)
          {
            v51 = v50 + 8;
            if (v50 + 8 != v48)
            {
              v52 = v48 - v50 - 16;
              if (v52 < 0x38)
                goto LABEL_244;
              v53 = (v50 - v49) >> 3;
              v54 = (v52 >> 3) + 1;
              v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFF8);
              v50 += v55;
              v51 += v55;
              v56 = &v49[8 * v53 + 40];
              v57 = v54 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v58 = *((_OWORD *)v56 - 1);
                v60 = *(_OWORD *)v56;
                v59 = *((_OWORD *)v56 + 1);
                *(_OWORD *)(v56 - 40) = *((_OWORD *)v56 - 2);
                *(_OWORD *)(v56 - 24) = v58;
                *(_OWORD *)(v56 - 8) = v60;
                *(_OWORD *)(v56 + 8) = v59;
                v56 += 64;
                v57 -= 8;
              }
              while (v57);
              if (v54 != (v54 & 0x3FFFFFFFFFFFFFF8))
              {
LABEL_244:
                do
                {
                  *(_DWORD *)v50 = *(_DWORD *)v51;
                  *((_DWORD *)v50 + 1) = *((_DWORD *)v51 + 1);
                  v50 += 8;
                  v51 += 8;
                }
                while (v51 != v48);
              }
            }
            a9[1] = v50;
          }
        }
        else
        {
LABEL_72:
          v13 = a2;
        }
        goto LABEL_17;
      }
      v181 = (unint64_t *)a1;
      v184 = &v181;
      v35 = sub_2394A2F94(a11 + 136, (unint64_t *)&v181, (uint64_t)&unk_239EC6E98, (_QWORD **)&v184);
      ++*((_QWORD *)v35 + 7);
      v36 = *v23;
      v37 = (uint64_t **)(a11 + 96);
      v38 = a11 + 96;
      if (!*v23)
      {
LABEL_50:
        v41 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v41 + 28) = (v34 << 32) | v33;
        *v41 = 0;
        v41[1] = 0;
        v41[2] = v38;
        *v37 = v41;
        v42 = **(_QWORD **)(a11 + 88);
        if (v42)
        {
          *(_QWORD *)(a11 + 88) = v42;
          v43 = *v37;
        }
        else
        {
          v43 = v41;
        }
        sub_2394213B8(*(uint64_t **)(a11 + 96), v43);
        ++*(_QWORD *)(a11 + 104);
        goto LABEL_54;
      }
      while (1)
      {
        v38 = (uint64_t)v36;
        v39 = *((_DWORD *)v36 + 7);
        if (v33 < v39)
          goto LABEL_43;
        if (v39 < v33)
        {
LABEL_48:
          v36 = *(uint64_t **)(v38 + 8);
          if (!v36)
          {
            v37 = (uint64_t **)(v38 + 8);
            goto LABEL_50;
          }
        }
        else
        {
          v40 = *(_DWORD *)(v38 + 32);
          if (v34 >= v40)
          {
            if (v40 >= v34)
              goto LABEL_54;
            goto LABEL_48;
          }
LABEL_43:
          v36 = *(uint64_t **)v38;
          v37 = (uint64_t **)v38;
          if (!*(_QWORD *)v38)
            goto LABEL_50;
        }
      }
    }
  }
LABEL_73:
  if (v19 <= 0.0 || v20 <= 0.0)
    return;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v62 = *v12;
  v61 = v12[1];
  v63 = v61 - *v12;
  if (v61 == *v12)
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 1;
  }
  else
  {
    if (v63 < 0)
      sub_2394189F8();
    v64 = (char *)operator new(v61 - *v12);
    v184 = v64;
    v185 = (unsigned int *)v64;
    v65 = &v64[4 * (v63 >> 2)];
    v186 = v65;
    memcpy(v64, v62, v63);
    v185 = (unsigned int *)v65;
    v66 = 4 * (v63 >> 2);
    v67 = v66 >> 2;
    v68 = (v66 >> 2) + 1;
    if (v68 >> 62)
      sub_2394189F8();
  }
  if (v66 >> 1 > v68)
    v68 = v66 >> 1;
  if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
    v69 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v69 = v68;
  if (v69)
  {
    if (v69 >> 62)
      sub_239418A80();
    v70 = (char *)operator new(4 * v69);
  }
  else
  {
    v70 = 0;
  }
  v71 = (unsigned int *)&v70[4 * v67];
  v72 = &v70[4 * v69];
  *v71 = a1;
  v73 = v71 + 1;
  if (v65 == v64)
    goto LABEL_96;
  v74 = v65 - v64 - 4;
  if (v74 >= 0x1C)
  {
    v76 = (v74 >> 2) + 1;
    v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
    v75 = &v65[-v77];
    v71 = (unsigned int *)((char *)v71 - v77);
    v78 = &v70[4 * v67 - 16];
    v79 = v65 - 16;
    v80 = v76 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v81 = *(_OWORD *)v79;
      *((_OWORD *)v78 - 1) = *((_OWORD *)v79 - 1);
      *(_OWORD *)v78 = v81;
      v78 -= 32;
      v79 -= 32;
      v80 -= 8;
    }
    while (v80);
    if (v76 == (v76 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_96;
  }
  else
  {
    v75 = v65;
  }
  do
  {
    v82 = *((_DWORD *)v75 - 1);
    v75 -= 4;
    *--v71 = v82;
  }
  while (v75 != v64);
LABEL_96:
  v184 = v71;
  v185 = v73;
  v186 = v72;
  if (v64)
    operator delete(v64);
  v185 = v73;
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v182 = 0;
  v183 = 0;
  v181 = 0;
  v84 = *a5;
  v83 = a5[1];
  v86 = (unsigned int *)v184;
  v85 = v185;
  if (v83 - *a5 <= (unint64_t)(((char *)v185 - (_BYTE *)v184) >> 2))
    v87 = ((char *)v185 - (_BYTE *)v184) >> 2;
  else
    v87 = v83 - *a5;
  v88 = a9;
  if (v87)
  {
    if (v87 >> 61)
      sub_2394189F8();
    v181 = (unint64_t *)operator new(8 * v87);
    v182 = (unint64_t)v181;
    v183 = (char *)&v181[v87];
  }
  if (a6)
  {
    v188[0] = (uint64_t)&v181;
    if (v84 != v83)
    {
      while (v86 != v85)
      {
        v89 = *v86;
        if (*v84 >= v89)
        {
          ++v86;
          if (*v84 <= v89)
            ++v84;
          if (v84 == v83)
            goto LABEL_130;
        }
        else
        {
          sub_2394340F0(v188, v84++);
          if (v84 == v83)
            goto LABEL_130;
        }
      }
      for (__p = (void *)v188[0]; v84 != v83; ++v84)
        sub_2394340F0((uint64_t *)&__p, v84);
    }
  }
  else
  {
    __p = 0;
    v179 = 0;
    v180 = 0;
    sub_239433C1C(v13, (uint64_t)&__p, 1);
    v91 = (unint64_t *)__p;
    v90 = v179;
    v93 = (unsigned int *)v184;
    v92 = v185;
    v187 = (void **)&v181;
    if (__p != v179)
    {
      while (v93 != v92)
      {
        v94 = *v93;
        if (*v91 >= v94)
        {
          ++v93;
          if (*v91 <= v94)
            ++v91;
          if (v91 == v90)
            goto LABEL_128;
        }
        else
        {
          sub_2394340F0((uint64_t *)&v187, v91++);
          if (v91 == v90)
            goto LABEL_128;
        }
      }
      for (v188[0] = (uint64_t)v187; v91 != v90; ++v91)
        sub_2394340F0(v188, v91);
    }
LABEL_128:
    if (__p)
    {
      v179 = (unint64_t *)__p;
      operator delete(__p);
    }
  }
LABEL_130:
  v95 = v181;
  v175 = (unint64_t *)v182;
  if (v181 == (unint64_t *)v182)
    goto LABEL_228;
  v170 = v12;
  do
  {
    v97 = *v95;
    if (!sub_2394A0E1C(a1, *v95, v13, v19, v20))
      goto LABEL_134;
    v99 = v12[1];
    v98 = (unint64_t)v12[2];
    if ((unint64_t)v99 < v98)
    {
      *(_DWORD *)v99 = v97;
      v100 = (uint64_t)(v99 + 4);
      goto LABEL_157;
    }
    v101 = *v12;
    v102 = v99 - *v12;
    v103 = v102 >> 2;
    v104 = (v102 >> 2) + 1;
    if (v104 >> 62)
      sub_2394189F8();
    v105 = v98 - (_QWORD)v101;
    if (v105 >> 1 > v104)
      v104 = v105 >> 1;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
      v106 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    if (v106)
    {
      if (v106 >> 62)
        sub_239418A80();
      v107 = operator new(4 * v106);
      v108 = &v107[4 * v103];
      *(_DWORD *)v108 = v97;
      v100 = (uint64_t)(v108 + 4);
      if (v99 == v101)
        goto LABEL_155;
LABEL_149:
      v109 = v99 - 4 - v101;
      if (v109 < 0x2C)
        goto LABEL_245;
      if ((unint64_t)(v99 - &v107[v102]) < 0x20)
        goto LABEL_245;
      v110 = (v109 >> 2) + 1;
      v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
      v112 = &v99[-v111];
      v108 -= v111;
      v113 = &v107[4 * v103 - 16];
      v114 = v99 - 16;
      v115 = v110 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v116 = *(_OWORD *)v114;
        *(v113 - 1) = *((_OWORD *)v114 - 1);
        *v113 = v116;
        v113 -= 2;
        v114 -= 32;
        v115 -= 8;
      }
      while (v115);
      v99 = v112;
      if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_245:
        do
        {
          v117 = *((_DWORD *)v99 - 1);
          v99 -= 4;
          *((_DWORD *)v108 - 1) = v117;
          v108 -= 4;
        }
        while (v99 != v101);
      }
      goto LABEL_155;
    }
    v107 = 0;
    v108 = (char *)(4 * v103);
    *(_DWORD *)(4 * v103) = v97;
    v100 = 4 * v103 + 4;
    if (v99 != v101)
      goto LABEL_149;
LABEL_155:
    *v12 = v108;
    v12[1] = (char *)v100;
    v12[2] = &v107[4 * v106];
    if (v101)
      operator delete(v101);
LABEL_157:
    v12[1] = (char *)v100;
    if (v97 >= a1)
      v118 = a1;
    else
      v118 = v97;
    if (v97 <= a1)
      v119 = a1;
    else
      v119 = v97;
    v120 = v119 << 32;
    if (a12)
    {
      v188[0] = a1;
      __p = v188;
      v121 = sub_2394A2F94(a11 + 136, (unint64_t *)v188, (uint64_t)&unk_239EC6E98, (_QWORD **)&__p);
      ++*((_QWORD *)v121 + 8);
      v122 = a11 + 72;
LABEL_165:
      while (1)
      {
        v123 = *(_QWORD *)v122;
        v124 = (uint64_t **)v122;
        if (!*(_QWORD *)v122)
          break;
        while (1)
        {
          v122 = v123;
          v125 = *(_DWORD *)(v123 + 28);
          if (v125 > v118)
            break;
          if (v125 >= v118)
          {
            v126 = *(_DWORD *)(v122 + 32);
            if (v126 > v119)
              goto LABEL_165;
            if (v126 >= v119)
              goto LABEL_175;
          }
          v123 = *(_QWORD *)(v122 + 8);
          if (!v123)
          {
            v124 = (uint64_t **)(v122 + 8);
            goto LABEL_172;
          }
        }
      }
LABEL_172:
      v127 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v127 + 28) = v120 | v118;
      *v127 = 0;
      v127[1] = 0;
      v127[2] = v122;
      *v124 = v127;
      v128 = **(_QWORD **)(a11 + 64);
      if (v128)
      {
        *(_QWORD *)(a11 + 64) = v128;
        v127 = *v124;
      }
      sub_2394213B8(*(uint64_t **)(a11 + 72), v127);
      ++*(_QWORD *)(a11 + 80);
    }
LABEL_175:
    if (v171)
    {
      v129 = a7;
      v131 = (char *)a7[1];
      v130 = a7[2];
      if ((unint64_t)v131 < v130)
      {
        *(_DWORD *)v131 = 1065353216;
        v132 = (uint64_t)(v131 + 4);
        v88 = a9;
LABEL_198:
        v129[1] = v132;
        goto LABEL_199;
      }
      v133 = (char *)*a7;
      v134 = (uint64_t)&v131[-*a7];
      v135 = v134 >> 2;
      v136 = (v134 >> 2) + 1;
      if (v136 >> 62)
        sub_2394189F8();
      v137 = v130 - (_QWORD)v133;
      if (v137 >> 1 > v136)
        v136 = v137 >> 1;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
        v138 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        if (v138 >> 62)
          sub_239418A80();
        v139 = operator new(4 * v138);
        v140 = &v139[4 * v135];
        *v140 = 1065353216;
        v132 = (uint64_t)(v140 + 1);
        if (v131 == v133)
          goto LABEL_195;
      }
      else
      {
        v139 = 0;
        v140 = (_DWORD *)(4 * v135);
        *(_DWORD *)(4 * v135) = 1065353216;
        v132 = 4 * v135 + 4;
        if (v131 == v133)
        {
LABEL_195:
          v150 = &v139[4 * v138];
          v129 = a7;
          *a7 = v140;
          a7[1] = v132;
          a7[2] = v150;
          if (v133)
            operator delete(v133);
          v88 = a9;
          v120 = v119 << 32;
          v12 = v170;
          goto LABEL_198;
        }
      }
      v141 = v131 - 4 - v133;
      if (v141 < 0x2C)
        goto LABEL_246;
      if ((unint64_t)(v131 - &v139[v134]) < 0x20)
        goto LABEL_246;
      v142 = (v141 >> 2) + 1;
      v143 = 4 * (v142 & 0x7FFFFFFFFFFFFFF8);
      v144 = &v131[-v143];
      v140 = (_DWORD *)((char *)v140 - v143);
      v145 = &v139[4 * v135 - 16];
      v146 = v131 - 16;
      v147 = v142 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v148 = *(_OWORD *)v146;
        *(v145 - 1) = *((_OWORD *)v146 - 1);
        *v145 = v148;
        v145 -= 2;
        v146 -= 32;
        v147 -= 8;
      }
      while (v147);
      v131 = v144;
      if (v142 != (v142 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_246:
        do
        {
          v149 = *((_DWORD *)v131 - 1);
          v131 -= 4;
          *--v140 = v149;
        }
        while (v131 != v133);
      }
      goto LABEL_195;
    }
LABEL_199:
    if (a10)
    {
      v152 = *v88;
      v151 = v88[1];
      v153 = *v88;
      if (*v88 != v151)
      {
        v153 = *v88;
        while (*(_DWORD *)v153 != (_DWORD)v118 || *((_DWORD *)v153 + 1) != (_DWORD)v119)
        {
          v153 += 8;
          if (v153 == v151)
            goto LABEL_206;
        }
      }
      if (v153 == v151)
      {
LABEL_206:
        v154 = (unint64_t)v88[2];
        if ((unint64_t)v151 < v154)
        {
          *(_QWORD *)v151 = v120 | v118;
          v96 = (uint64_t)(v151 + 8);
          goto LABEL_133;
        }
        v155 = (v151 - v152) >> 3;
        v156 = v155 + 1;
        if ((unint64_t)(v155 + 1) >> 61)
          sub_2394189F8();
        v157 = v154 - (_QWORD)v152;
        if (v157 >> 2 > v156)
          v156 = v157 >> 2;
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
          v158 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v158 = v156;
        if (v158)
        {
          if (v158 >> 61)
            sub_239418A80();
          v159 = operator new(8 * v158);
          v160 = (unint64_t *)&v159[8 * v155];
          *v160 = v120 | v118;
          v96 = (uint64_t)(v160 + 1);
          if (v152 != v151)
          {
LABEL_216:
            v161 = v151 - 8 - v152;
            v12 = v170;
            if (v161 < 0x58)
              goto LABEL_247;
            if ((unint64_t)(v152 - v159) < 0x20)
              goto LABEL_247;
            v162 = (v161 >> 3) + 1;
            v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
            v164 = &v151[-v163];
            v160 = (unint64_t *)((char *)v160 - v163);
            v165 = &v159[8 * v155 - 16];
            v166 = v151 - 16;
            v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v168 = *(_OWORD *)v166;
              *(v165 - 1) = *((_OWORD *)v166 - 1);
              *v165 = v168;
              v165 -= 2;
              v166 -= 32;
              v167 -= 4;
            }
            while (v167);
            v151 = v164;
            if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_247:
              do
              {
                v169 = *((_QWORD *)v151 - 1);
                v151 -= 8;
                *--v160 = v169;
              }
              while (v151 != v152);
            }
            v152 = *v88;
            *v88 = (char *)v160;
            v88[1] = (char *)v96;
            v88[2] = &v159[8 * v158];
            if (!v152)
              goto LABEL_133;
LABEL_226:
            operator delete(v152);
LABEL_133:
            v88[1] = (char *)v96;
            goto LABEL_134;
          }
        }
        else
        {
          v159 = 0;
          v160 = (unint64_t *)(8 * v155);
          *(_QWORD *)(8 * v155) = v120 | v118;
          v96 = 8 * v155 + 8;
          if (v152 != v151)
            goto LABEL_216;
        }
        v12 = v170;
        *v88 = (char *)v160;
        v88[1] = (char *)v96;
        v88[2] = &v159[8 * v158];
        if (v152)
          goto LABEL_226;
        goto LABEL_133;
      }
    }
LABEL_134:
    ++v95;
    v13 = a2;
  }
  while (v95 != v175);
  v95 = v181;
LABEL_228:
  if (v95)
  {
    v182 = (unint64_t)v95;
    operator delete(v95);
  }
  if (v184)
  {
    v185 = (unsigned int *)v184;
    operator delete(v184);
  }
}

void sub_2394A25E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v29;
  void *v30;

  if (a21)
  {
    operator delete(a21);
    v29 = a24;
    if (!a24)
    {
LABEL_3:
      v30 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v29 = a24;
    if (!a24)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v30);
  goto LABEL_5;
}

uint64_t sub_2394A2688(uint64_t a1, double *a2, uint64_t a3, _QWORD *a4, char **a5, char a6, uint64_t a7, char a8)
{
  _BYTE *v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  BOOL v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  char *i;
  int v49;
  char *v51;
  uint64_t v52;
  int64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v71;
  BOOL v73;
  BOOL v75;
  BOOL v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unsigned int v92;
  void *__p[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  _BYTE *v98;
  uint64_t v99;
  void *v100;
  char *v101;
  uint64_t v102;
  _BYTE v103[24];
  _BYTE *v104;
  _BYTE v105[568];
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v100 = 0;
  v101 = 0;
  v102 = 0;
  sub_239433C1C(a1, (uint64_t)&v100, 1);
  v97 = 0;
  v98 = 0;
  v99 = 0;
  if (a6)
  {
    if (&v97 != (void **)a5)
      sub_23945D3D0(&v97, *a5, a5[1], (a5[1] - *a5) >> 3);
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  }
  else
  {
    sub_23945D3D0(&v97, (char *)v100, v101, (v101 - (_BYTE *)v100) >> 3);
  }
  v13 = v97;
  v12 = v98;
  sub_2396FD800(a4, (uint64_t)v103);
  v95[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v105, (v12 - v13) >> 3, v103, v95, 1.0);
  v14 = v104;
  if (v104 == v103)
  {
    v15 = 4;
    v14 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  v16 = (uint64_t *)v97;
  v17 = (uint64_t *)v98;
  if (v97 != v98)
  {
    v18 = 0;
    while (1)
    {
      v19 = *v16;
      if (sub_2396FD7B0((uint64_t)a4))
        break;
      v94 = 0;
      LOBYTE(__p[0]) = 0;
      sub_2396FD394(v95, (uint64_t)v105, (__int128 *)__p);
      if (v94 < 0)
        operator delete(__p[0]);
      v92 = v19;
      __p[0] = &v92;
      v20 = sub_239434A44(a3, &v92, (uint64_t)&unk_239EC6E98, (_DWORD **)__p);
      v92 = v19;
      __p[0] = &v92;
      v21 = sub_239434A44(a3, &v92, (uint64_t)&unk_239EC6E98, (_DWORD **)__p);
      if ((v18 & 1) != 0)
      {
        v18 = 1;
      }
      else
      {
        v22 = sub_239470FCC(a1, v19);
        if (*((_BYTE *)v22 + 236))
          v23 = *((_BYTE *)v22 + 237) == 0;
        else
          v23 = 1;
        v18 = !v23;
      }
      sub_2394A18E8(v19, a1, a2, (char **)v20 + 3, (unint64_t **)&v100, 1, (_QWORD *)v21 + 6, 1u, (char **)(a3 + 40), 1, a7, a8);
      v24 = *(_QWORD *)(a3 + 8);
      if (v24)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v26 = v19;
          if (v24 <= v19)
            v26 = v19 % v24;
        }
        else
        {
          v26 = ((_DWORD)v24 - 1) & v19;
        }
        v27 = *(uint64_t ***)(*(_QWORD *)a3 + 8 * v26);
        if (v27)
        {
          v28 = *v27;
          if (v28)
          {
            if (v25.u32[0] < 2uLL)
            {
              v29 = v24 - 1;
              while (1)
              {
                v31 = v28[1];
                if (v31 == v19)
                {
                  if (*((_DWORD *)v28 + 4) == (_DWORD)v19)
                    goto LABEL_46;
                }
                else if ((v31 & v29) != v26)
                {
                  goto LABEL_13;
                }
                v28 = (uint64_t *)*v28;
                if (!v28)
                  goto LABEL_13;
              }
            }
            do
            {
              v30 = v28[1];
              if (v30 == v19)
              {
                if (*((_DWORD *)v28 + 4) == (_DWORD)v19)
                {
LABEL_46:
                  v33 = v28[3];
                  v32 = v28[4];
                  v36 = v28 + 6;
                  v35 = v28[6];
                  v34 = v36[1];
                  if (v32 - v33 != v34 - v35)
                  {
                    sub_239A444D4((uint64_t)"unknown file", 382, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                  if (v32 == v33 || v34 == v35)
                  {
                    LODWORD(__p[0]) = v19;
                    sub_2394A32C8((_QWORD *)a3, (unsigned int *)__p);
                  }
                  break;
                }
              }
              else
              {
                if (v30 >= v24)
                  v30 %= v24;
                if (v30 != v26)
                  break;
              }
              v28 = (uint64_t *)*v28;
            }
            while (v28);
          }
        }
      }
LABEL_13:
      sub_2396FD3E8((uint64_t)v95);
      if (++v16 == v17)
        goto LABEL_54;
    }
    v96 = 0;
    LOBYTE(v95[0]) = 0;
    sub_2396FCC6C((uint64_t)v105, (uint64_t)v95);
    if (v96 < 0)
    {
      operator delete(v95[0]);
      if (!a8)
        goto LABEL_136;
    }
    else if (!a8)
    {
      goto LABEL_136;
    }
    goto LABEL_135;
  }
  v18 = 0;
LABEL_54:
  v38 = *(_QWORD *)(a3 + 40);
  v39 = *(unsigned int **)(a3 + 48);
  v40 = 126 - 2 * __clz(((uint64_t)v39 - v38) >> 3);
  if (v39 == (unsigned int *)v38)
    v41 = 0;
  else
    v41 = v40;
  sub_239434DC0(v38, v39, (uint64_t)v95, v41, 1);
  v43 = *(char **)(a3 + 40);
  v42 = *(char **)(a3 + 48);
  if (v43 != v42)
  {
    v44 = v43 - 8;
    do
    {
      if (v44 + 16 == v42)
        goto LABEL_85;
      v46 = *((_DWORD *)v44 + 2);
      v44 += 8;
      v45 = v46;
    }
    while (v46 != *((_DWORD *)v44 + 2) || *((_DWORD *)v44 + 1) != *((_DWORD *)v44 + 3));
    for (i = v44 + 16; i != v42; i += 8)
    {
      v49 = v45;
      v45 = *(_DWORD *)i;
      if (v49 != *(_DWORD *)i || *((_DWORD *)v44 + 1) != *((_DWORD *)i + 1))
      {
        *((_DWORD *)v44 + 2) = v45;
        v44 += 8;
        *((_DWORD *)v44 + 1) = *((_DWORD *)i + 1);
      }
    }
    v51 = v44 + 8;
    v52 = v42 - v51;
    if (v42 != v51)
    {
      v53 = v51 - v43;
      v54 = &v43[(v51 - v43) & 0xFFFFFFFFFFFFFFF8];
      v55 = &v54[v52];
      if (&v54[v52] == v42)
      {
        v58 = v54;
      }
      else
      {
        v56 = v53 & 0xFFFFFFFFFFFFFFF8;
        v57 = v42 - &v43[v52 + (v53 & 0xFFFFFFFFFFFFFFF8)] - 8;
        if (v57 >= 0x138)
        {
          v61 = v56 + (v57 & 0xFFFFFFFFFFFFFFF8);
          v62 = (unint64_t)&v43[v61 | 4];
          v63 = (unint64_t)&v43[v56 | 4];
          v64 = (unint64_t)&v43[v61 + 8];
          v65 = &v43[v52 + v56];
          v66 = &v65[v57 & 0xFFFFFFFFFFFFFFF8];
          v67 = (unint64_t)(v66 + 4);
          v68 = (unint64_t)(v65 + 4);
          v69 = (unint64_t)(v66 + 8);
          v71 = v54 < v66 + 4 && (unint64_t)v55 < v62;
          v73 = (unint64_t)v54 < v69 && v68 < v62;
          v75 = v63 < v67 && (unint64_t)v55 < v64;
          v77 = v63 < v69 && v68 < v64;
          if (v63 >= v62 || (unint64_t)v54 >= v64)
          {
            if (v71)
            {
              v58 = v54;
            }
            else if (v73)
            {
              v58 = v54;
            }
            else if (v75)
            {
              v58 = v54;
            }
            else if (v77)
            {
              v58 = v54;
            }
            else
            {
              v79 = v52 >> 3;
              v80 = (v57 >> 3) + 1;
              v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFF8);
              v58 = &v54[v81];
              v55 += v81;
              v82 = 8 * v79;
              v83 = v80 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v84 = *(_OWORD *)&v54[v82 + 16];
                v86 = *(_OWORD *)&v54[v82 + 32];
                v85 = *(_OWORD *)&v54[v82 + 48];
                *(_OWORD *)v54 = *(_OWORD *)&v54[v82];
                *((_OWORD *)v54 + 1) = v84;
                *((_OWORD *)v54 + 2) = v86;
                *((_OWORD *)v54 + 3) = v85;
                v54 += 64;
                v83 -= 8;
              }
              while (v83);
              if (v80 == (v80 & 0x3FFFFFFFFFFFFFF8))
                goto LABEL_84;
            }
          }
          else
          {
            v58 = v54;
          }
        }
        else
        {
          v58 = v54;
        }
        do
        {
          *(_DWORD *)v58 = *(_DWORD *)v55;
          *((_DWORD *)v58 + 1) = *((_DWORD *)v55 + 1);
          v58 += 8;
          v55 += 8;
        }
        while (v55 != v42);
      }
LABEL_84:
      *(_QWORD *)(a3 + 48) = v58;
    }
  }
LABEL_85:
  if (sub_2396FD7B0((uint64_t)a4))
  {
    v96 = 0;
    LOBYTE(v95[0]) = 0;
    sub_2396FCC6C((uint64_t)v105, (uint64_t)v95);
    if (v96 < 0)
    {
      operator delete(v95[0]);
      if (!a8)
        goto LABEL_136;
    }
    else if (!a8)
    {
LABEL_136:
      v59 = 0;
      sub_2396FCD14((uint64_t)v105);
      v60 = v97;
      if (!v97)
        goto LABEL_138;
      goto LABEL_137;
    }
LABEL_135:
    sub_2394202DC((_QWORD *)(a7 + 192), 3007);
    goto LABEL_136;
  }
  v96 = 0;
  LOBYTE(v95[0]) = 0;
  sub_2396FCC6C((uint64_t)v105, (uint64_t)v95);
  if (v96 < 0)
    operator delete(v95[0]);
  if (a8)
    *(_BYTE *)(a7 + 266) = v18;
  v59 = 1;
  sub_2396FCD14((uint64_t)v105);
  v60 = v97;
  if (v97)
  {
LABEL_137:
    v98 = v60;
    operator delete(v60);
  }
LABEL_138:
  if (v100)
  {
    v101 = (char *)v100;
    operator delete(v100);
  }
  return v59;
}

void sub_2394A2D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;

  sub_2396FCD14((uint64_t)&a44);
  if (__p)
  {
    operator delete(__p);
    v44 = a36;
    if (a36)
    {
LABEL_6:
      operator delete(v44);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v44 = a36;
    if (a36)
      goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2394A2EA8(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EBFC80();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

char *sub_2394A2F94(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return (char *)v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return (char *)v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0x48uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = **a4;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *(_QWORD *)v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2394A32B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394A32C8(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *__p;
  char v16;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != (_DWORD)v3)
    goto LABEL_11;
LABEL_22:
  sub_23946B1E4(a1, v7, (uint64_t)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
  {
    if (v16)
    {
      v13 = (void *)v12[6];
      if (v13)
      {
        v12[7] = v13;
        operator delete(v13);
      }
      v14 = (void *)v12[3];
      if (v14)
      {
        v12[4] = v14;
        operator delete(v14);
      }
    }
    operator delete(v12);
  }
  return 1;
}

double sub_2394A3414(uint64_t a1)
{
  float *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  double result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v1 = *(float **)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0.0;
    v7 = 0.0;
    LODWORD(result) = 0;
    v9 = 0.0;
    do
    {
      v10 = v1[8];
      v11 = v1[9];
      if (v10 < 0.0)
        v10 = -0.0;
      else
        ++v2;
      v6 = v6 + v10;
      v12 = v1[6];
      v13 = v1[7];
      _NF = v12 < 0.0;
      if (v12 < 0.0)
        v12 = -0.0;
      v7 = v7 + v12;
      if (!_NF)
        ++v3;
      if (v11 < 0.0)
        v15 = -0.0;
      else
        v15 = v1[9];
      v9 = v9 + v15;
      if (v11 >= 0.0)
        ++v5;
      if (v13 < 0.0)
        v16 = -0.0;
      else
        v16 = v1[7];
      *(float *)&result = *(float *)&result + v16;
      if (v13 >= 0.0)
        ++v4;
      v1 = *(float **)v1;
    }
    while (v1);
    v17 = -1.0;
    v18 = -1.0;
    if (v2)
      v18 = v6 * (float)(1.0 / (float)v2);
    *(float *)(a1 + 92) = v18;
    if (v3)
      v17 = v7 * (float)(1.0 / (float)v3);
    *(float *)(a1 + 84) = v17;
    v19 = -1.0;
    v20 = -1.0;
    if (v5)
      v20 = v9 * (float)(1.0 / (float)v5);
    *(float *)(a1 + 96) = v20;
    if (v4)
      v19 = *(float *)&result * (float)(1.0 / (float)v4);
    *(float *)(a1 + 88) = v19;
  }
  else
  {
    *(_DWORD *)(a1 + 84) = -1082130432;
    __asm { FMOV            V0.2S, #-1.0 }
    *(double *)(a1 + 92) = result;
    *(float *)(a1 + 88) = -1.0;
  }
  return result;
}

void sub_2394A3520(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  float v3;
  std::string *v4;
  std::string v5;

  v3 = (float)*a1 * 0.00000095367;
  if (v3 > 1024.0)
  {
    std::to_string(&v5, v3 * 0.0009765625);
    v4 = std::string::append(&v5, "GB");
  }
  else
  {
    std::to_string(&v5, v3);
    v4 = std::string::append(&v5, "MB");
  }
  *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_2394A35E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394A3608(void ***a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, signed int a6, uint64_t a7, char a8, float a9, _BYTE *a10, uint64_t a11)
{
  void **v17;
  void **v18;
  uint64_t v19;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  void **v27;
  void **v28;
  int64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  unint64_t v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, unint64_t, rusage *, _QWORD, _QWORD);
  int v39;
  unsigned int v40;
  char *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char v46;
  uint64_t ru_majflt;
  uint64_t ru_nswap;
  void *v49;
  void *v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;
  int32x4_t *v73;
  void **v74;
  int32x4_t *v75;
  unint64_t v76;
  int32x4_t *v77;
  int32x4_t *v78;
  uint64_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  char v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  __darwin_time_t v118;
  uint64_t v119;
  unsigned int v120;
  char *v121;
  char *v122;
  int v123;
  int v124;
  std::__shared_weak_count *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _OWORD *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  _BOOL4 v142;
  unsigned int *tv_sec;
  unsigned int *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  size_t v150;
  size_t v151;
  void *v152;
  char *v153;
  _QWORD *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _DWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  int v172;
  uint64_t v173;
  float v174;
  _BOOL4 v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t v181;
  BOOL v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  _DWORD *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  _DWORD *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  _OWORD *v199;
  char *v200;
  uint64_t v201;
  __int128 v202;
  int v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  char *v207;
  char *v208;
  void *v209;
  void *v210;
  unint64_t v212;
  uint64_t v213;
  __int16 v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  std::bad_alloc *exception;
  std::bad_alloc *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v228;
  int v229;
  void **v230;
  uint64_t v231;
  BOOL v232;
  unsigned int v233;
  unsigned int v234;
  int v236;
  unsigned __int8 *v238;
  rusage v239;
  rusage v240;
  rusage v241;
  _QWORD *v242;
  void *v243;
  char *v244;
  unint64_t v245;
  void *v246;
  char v247;
  void *v248;
  std::__shared_weak_count *v249;
  char v250;
  uint64_t v251;
  void *__p;
  uint64_t *v253;
  _QWORD *v254;
  char *v255;
  char *v256;
  char *v257;
  void *memptr;
  _QWORD v259[3];
  _QWORD *v260;
  _BYTE v261[24];
  _BYTE *v262;
  _BYTE v263[24];
  _BYTE *v264;
  uint64_t v265;

  v265 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (a9 <= 0.0)
    sub_239EBFD10();
  v17 = *a1;
  v18 = a1[1];
  v19 = (uint64_t)(*a1 + 1);
  if (*a1 == v18 || v19 == (_QWORD)v18)
  {
    v22 = *a1;
  }
  else
  {
    v21 = (unint64_t)*v17;
    v22 = *a1;
    v23 = (unint64_t *)(*a1 + 1);
    do
    {
      v25 = *v23++;
      v24 = v25;
      v26 = v21 >= v25;
      if (v21 <= v25)
        v21 = v24;
      if (!v26)
        v22 = (_QWORD *)v19;
      v19 = (uint64_t)v23;
    }
    while (v23 != (unint64_t *)v18);
  }
  if (*((_DWORD *)v22 + 1))
    sub_239EBFCB0();
  if (v17 == v18)
    return 0;
  v228 = a5;
  v234 = a4;
  if (!a6 || (int)std::thread::hardware_concurrency() < a6)
  {
    a6 = std::thread::hardware_concurrency();
    if (!a6)
      sub_239EBFCE0();
  }
  v233 = a6;
  v255 = 0;
  v256 = 0;
  v257 = 0;
  v28 = *a1;
  v27 = a1[1];
  v29 = (char *)v27 - (char *)*a1;
  v30 = v29 >> 3;
  if (v27 != *a1)
  {
    if (v29 < 0)
      sub_2394189F8();
    v255 = (char *)operator new((char *)v27 - (char *)*a1);
    v256 = v255;
    v257 = &v255[8 * v30];
  }
  v238 = (unsigned __int8 *)a2;
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_22;
  v253 = 0;
  __p = 0;
  v254 = 0;
  if (v27 == v28)
  {
    v88 = 0;
    v87 = 0;
    v89 = a3;
    v90 = *(_QWORD *)(a3 + 24);
    v91 = a5;
    if (!v90)
    {
LABEL_113:
      v264 = (_BYTE *)v90;
      goto LABEL_115;
    }
  }
  else
  {
    if (v29 < 0)
      sub_2394189F8();
    v87 = operator new(v29);
    v88 = &v87[v30];
    __p = v87;
    v254 = v88;
    memcpy(v87, v28, v29);
    v253 = v88;
    v89 = a3;
    v90 = *(_QWORD *)(a3 + 24);
    v91 = a5;
    if (!v90)
      goto LABEL_113;
  }
  if (v90 != v89)
  {
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 16))(v90);
    goto LABEL_113;
  }
  v264 = v263;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v89 + 24))(v89, v263);
LABEL_115:
  if (v87 != v88)
  {
    v232 = 0;
    v92 = 0;
    while (1)
    {
      v240.ru_utime.tv_sec = *v87;
      if (!v264)
        sub_2394172E0();
      (*(void (**)(rusage *__return_ptr, _BYTE *, rusage *))(*(_QWORD *)v264 + 48))(&v241, v264, &v240);
      if (v241.ru_utime.tv_sec && *(_DWORD *)(v241.ru_utime.tv_sec + 8))
      {
        v92 = *(int *)(v241.ru_utime.tv_sec + 16);
        v93 = v92 != 0;
        v232 = *(_DWORD *)(v241.ru_utime.tv_sec + 20) != 0;
        v94 = *(std::__shared_weak_count **)&v241.ru_utime.tv_usec;
        if (!*(_QWORD *)&v241.ru_utime.tv_usec)
          goto LABEL_127;
      }
      else
      {
        v93 = 3;
        v94 = *(std::__shared_weak_count **)&v241.ru_utime.tv_usec;
        if (!*(_QWORD *)&v241.ru_utime.tv_usec)
          goto LABEL_127;
      }
      p_shared_owners = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldaxr(p_shared_owners);
      while (__stlxr(v96 - 1, p_shared_owners));
      if (v96)
      {
LABEL_127:
        if (v93 == 3)
          goto LABEL_117;
        goto LABEL_128;
      }
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
      if (v93 == 3)
        goto LABEL_117;
LABEL_128:
      if (v93)
      {
        v97 = 1;
        v98 = v264;
        if (v264 == v263)
          goto LABEL_137;
LABEL_134:
        if (v98)
        {
          v99 = 5;
          goto LABEL_138;
        }
        goto LABEL_139;
      }
LABEL_117:
      if (++v87 == v88)
        goto LABEL_133;
    }
  }
  v232 = 0;
  v92 = 0;
LABEL_133:
  v97 = 0;
  v98 = v264;
  if (v264 != v263)
    goto LABEL_134;
LABEL_137:
  v99 = 4;
  v98 = v263;
LABEL_138:
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_139:
  if ((v97 & 1) == 0)
  {
    v108 = 1;
    v109 = __p;
    if (!__p)
      goto LABEL_297;
LABEL_296:
    operator delete(v109);
    goto LABEL_297;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)a2 + 48))(a2, v232, v92);
  v100 = v253;
  v101 = (uint64_t *)__p;
  v102 = sub_2396F5E40();
  v251 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v238 + 16))(v238, 0, 0);
  sub_2394A3520((unint64_t *)&v251, (uint64_t)&v248);
  v241.ru_utime.tv_sec = (*(uint64_t (**)(unsigned __int8 *, int64_t, _QWORD))(*(_QWORD *)v238 + 16))(v238, a1[1] - *a1, 0);
  sub_2394A3520((unint64_t *)&v241, (uint64_t)&v246);
  v103 = (char *)v100 - (char *)v101;
  LODWORD(v239.ru_utime.tv_sec) = 1;
  if ((char *)v100 - (char *)v101 >= 9)
  {
    v241.ru_utime = (timeval)xmmword_239EC6600;
    if (v100 - 1 > v101)
    {
      v104 = (v103 >> 3) - 1;
      v105 = v101;
      do
      {
        v240.ru_utime.tv_sec = 0;
        *(_QWORD *)&v240.ru_utime.tv_usec = v104;
        v106 = sub_23942CCE0((uint64_t)&v241, (uint64_t)&v239, &v240);
        if (v106)
        {
          v107 = *v105;
          *v105 = v105[v106];
          v105[v106] = v107;
        }
        ++v105;
        --v104;
      }
      while (v105 < v100 - 1);
    }
  }
  v225 = a7;
  v244 = 0;
  v243 = 0;
  v245 = 0;
  v242 = 0;
  v110 = (uint64_t)v103 >> 3;
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v238 + 64))(v238)
    || (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v238 + 64))(v238) == 1)
  {
    v111 = operator new();
    *(_OWORD *)(v111 + 32) = 0u;
    *(_OWORD *)(v111 + 48) = 0u;
    *(_OWORD *)(v111 + 16) = 0u;
    v242 = (_QWORD *)v111;
    *(_QWORD *)v111 = a10;
    *(_QWORD *)(v111 + 8) = a11;
    if (v103 >= 8)
    {
      if ((v103 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v112 = (char *)operator new(v103 >> 1);
      *(_QWORD *)(v111 + 40) = v112;
      *(_QWORD *)(v111 + 48) = v112;
      *(_QWORD *)(v111 + 56) = &v112[4 * v110];
    }
  }
  v236 = v238[33];
  getrusage(0, &v241);
  if (v100 != v101)
  {
    v114 = 0;
    v229 = 0;
    v115 = 0;
    v116 = fminf((float)(unint64_t)v102 * 0.00000095367, a9) * 1048600.0;
    v117 = v110 <= 1 ? 1 : v110;
    v226 = v117;
    v222 = v92;
LABEL_159:
    if (v91 < 1 || v229 < v91)
    {
      v118 = *((_QWORD *)__p + v115);
      v240.ru_utime.tv_sec = v118;
      v119 = *(_QWORD *)(a3 + 24);
      if (!v119)
        sub_2394172E0();
      (*(void (**)(rusage *__return_ptr, uint64_t, rusage *))(*(_QWORD *)v119 + 48))(&v239, v119, &v240);
      v113 = v234;
      v231 = v115;
      if (!v239.ru_utime.tv_sec || (v120 = *(_DWORD *)(v239.ru_utime.tv_sec + 8)) == 0)
      {
        v124 = 10;
        v125 = *(std::__shared_weak_count **)&v239.ru_utime.tv_usec;
        if (*(_QWORD *)&v239.ru_utime.tv_usec)
          goto LABEL_237;
        goto LABEL_240;
      }
      v121 = v256;
      v223 = v114;
      if (v256 < v257)
      {
        *(_QWORD *)v256 = v118 | ((unint64_t)v120 << 32);
        v122 = v121 + 8;
        v123 = v236;
        goto LABEL_191;
      }
      v126 = v255;
      v127 = (v256 - v255) >> 3;
      v128 = v127 + 1;
      if ((unint64_t)(v127 + 1) >> 61)
        sub_2394189F8();
      v129 = v257 - v255;
      if ((v257 - v255) >> 2 > v128)
        v128 = v129 >> 2;
      if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
        v130 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v130 = v128;
      if (v130)
      {
        if (v130 >> 61)
          sub_239418A80();
        v131 = operator new(8 * v130);
      }
      else
      {
        v131 = 0;
      }
      v132 = &v131[8 * v127];
      *(_QWORD *)v132 = v118 | ((unint64_t)v120 << 32);
      v122 = v132 + 8;
      if (v121 == v126)
      {
        v92 = v222;
        v255 = &v131[8 * v127];
        v256 = v132 + 8;
        v257 = &v131[8 * v130];
        v123 = v236;
        if (!v121)
          goto LABEL_190;
        goto LABEL_189;
      }
      v133 = v121 - 8 - v126;
      if (v133 >= 0x58)
      {
        v92 = v222;
        if ((unint64_t)(v126 - v131) >= 0x20)
        {
          v134 = (v133 >> 3) + 1;
          v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
          v136 = &v121[-v135];
          v132 -= v135;
          v137 = &v131[8 * v127 - 16];
          v138 = v121 - 16;
          v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v140 = *(_OWORD *)v138;
            *(v137 - 1) = *((_OWORD *)v138 - 1);
            *v137 = v140;
            v137 -= 2;
            v138 -= 32;
            v139 -= 4;
          }
          while (v139);
          v121 = v136;
          if (v134 == (v134 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_188:
            v121 = v255;
            v255 = v132;
            v256 = v122;
            v257 = &v131[8 * v130];
            v123 = v236;
            if (!v121)
            {
LABEL_190:
              LOBYTE(v113) = v234;
LABEL_191:
              v256 = v122;
              if (v92 == *(_DWORD *)(v239.ru_utime.tv_sec + 16))
              {
                v142 = *(_DWORD *)(v239.ru_utime.tv_sec + 20) != 0;
                if (v142 == v232 && v92 != 0)
                {
                  sub_239429CA8(v239.ru_utime.tv_sec, v113, (char **)&v240);
                  tv_sec = (unsigned int *)v240.ru_utime.tv_sec;
                  v145 = *(unsigned int **)&v240.ru_utime.tv_usec;
                  while (1)
                  {
                    if (tv_sec == v145)
                    {
                      v91 = v228;
                      v92 = v222;
                      v114 = v223;
                      if ((v234 & 1) == 0)
                      {
                        if (v236)
                        {
                          v179 = v242;
                          if (v242)
                          {
                            v180 = *(_QWORD *)(v239.ru_utime.tv_sec + 32);
                            if (v180)
                            {
                              v181 = 0;
                              v182 = 1;
                              v183 = 20;
                              do
                              {
                                if (((*(_QWORD *)(*(_QWORD *)(v239.ru_utime.tv_sec + 24)
                                                 + ((v181 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v181) & 1) != 0
                                  && *(float *)(*(_QWORD *)(v239.ru_utime.tv_sec + 48) + v183) > -0.00000011921)
                                {
                                  break;
                                }
                                v182 = ++v181 < v180;
                                v183 += 24;
                              }
                              while (v180 != v181);
                              if (v182)
                              {
                                v185 = (char *)v242[6];
                                v184 = v242[7];
                                if ((unint64_t)v185 >= v184)
                                {
                                  v187 = (char *)v242[5];
                                  v188 = (v185 - v187) >> 2;
                                  v189 = v188 + 1;
                                  if ((unint64_t)(v188 + 1) >> 62)
                                    sub_2394189F8();
                                  v190 = v184 - (_QWORD)v187;
                                  if (v190 >> 1 > v189)
                                    v189 = v190 >> 1;
                                  if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v191 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v191 = v189;
                                  if (v191)
                                  {
                                    if (v191 >> 62)
                                      sub_239418A80();
                                    v192 = v191;
                                    v193 = operator new(4 * v191);
                                    v191 = v192;
                                  }
                                  else
                                  {
                                    v193 = 0;
                                  }
                                  v194 = &v193[4 * v188];
                                  *v194 = v118;
                                  v186 = v194 + 1;
                                  if (v185 != v187)
                                  {
                                    v195 = v185 - 4 - v187;
                                    if (v195 < 0x2C)
                                      goto LABEL_345;
                                    if ((unint64_t)(v187 - v193) < 0x20)
                                      goto LABEL_345;
                                    v196 = (v195 >> 2) + 1;
                                    v197 = 4 * (v196 & 0x7FFFFFFFFFFFFFF8);
                                    v198 = &v185[-v197];
                                    v194 = (_DWORD *)((char *)v194 - v197);
                                    v199 = &v193[4 * v188 - 16];
                                    v200 = v185 - 16;
                                    v201 = v196 & 0x7FFFFFFFFFFFFFF8;
                                    do
                                    {
                                      v202 = *(_OWORD *)v200;
                                      *(v199 - 1) = *((_OWORD *)v200 - 1);
                                      *v199 = v202;
                                      v199 -= 2;
                                      v200 -= 32;
                                      v201 -= 8;
                                    }
                                    while (v201);
                                    v185 = v198;
                                    if (v196 != (v196 & 0x7FFFFFFFFFFFFFF8))
                                    {
LABEL_345:
                                      do
                                      {
                                        v203 = *((_DWORD *)v185 - 1);
                                        v185 -= 4;
                                        *--v194 = v203;
                                      }
                                      while (v185 != v187);
                                    }
                                  }
                                  v179[5] = v194;
                                  v179[6] = v186;
                                  v179[7] = &v193[4 * v191];
                                  if (v187)
                                    operator delete(v187);
                                }
                                else
                                {
                                  *(_DWORD *)v185 = v118;
                                  v186 = v185 + 4;
                                }
                                v179[6] = v186;
                              }
                            }
                          }
                        }
                      }
                      v173 = v223
                           + ((unint64_t)(*(_QWORD *)&v240.ru_utime.tv_usec - v240.ru_utime.tv_sec) >> 2);
                      v174 = (float)(unint64_t)(float)((float)(unint64_t)(*(uint64_t (**)(unsigned __int8 *, _QWORD, uint64_t))(*(_QWORD *)v238 + 16))(v238, 0, v173)+ (float)((float)(unint64_t)(v222 * v173) * 7.0));
                      v175 = v116 <= v174;
                      if (v116 > v174)
                        v114 = v173;
                      if (v240.ru_utime.tv_sec)
                      {
                        *(_QWORD *)&v240.ru_utime.tv_usec = v240.ru_utime.tv_sec;
                        operator delete((void *)v240.ru_utime.tv_sec);
                      }
                      ++v229;
                      v124 = 8 * v175;
                      v125 = *(std::__shared_weak_count **)&v239.ru_utime.tv_usec;
                      if (*(_QWORD *)&v239.ru_utime.tv_usec)
                      {
LABEL_237:
                        v176 = (unint64_t *)&v125->__shared_owners_;
                        do
                          v177 = __ldaxr(v176);
                        while (__stlxr(v177 - 1, v176));
                        if (v177)
                          goto LABEL_240;
                        ((void (*)(std::__shared_weak_count *, uint64_t))v125->__on_zero_shared)(v125, v113);
                        std::__shared_weak_count::__release_weak(v125);
                        v178 = v231;
                        if (v124 == 10)
                        {
LABEL_158:
                          v115 = v178 + 1;
                          if (v115 != v226)
                            goto LABEL_159;
                          goto LABEL_277;
                        }
LABEL_241:
                        if (!v124)
                          goto LABEL_158;
                        goto LABEL_277;
                      }
LABEL_240:
                      v178 = v231;
                      if (v124 == 10)
                        goto LABEL_158;
                      goto LABEL_241;
                    }
                    v147 = *tv_sec;
                    if (*(_QWORD *)(v239.ru_utime.tv_sec + 32) <= v147
                      || ((*(_QWORD *)(*(_QWORD *)(v239.ru_utime.tv_sec + 24) + ((v147 >> 3) & 0x1FFFFFF8)) >> v147) & 1) == 0)
                    {
                      sub_239A444D4((uint64_t)"unknown file", 131, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                      sub_239A4475C();
                      abort();
                    }
                    v148 = *(_QWORD *)(v239.ru_utime.tv_sec + 72) + 24 * v147;
                    v149 = v244;
                    if ((unint64_t)v244 >= v245)
                    {
                      v153 = sub_23942A8DC(&v243, v148);
                    }
                    else
                    {
                      v150 = *(unsigned int *)(v148 + 16);
                      v151 = (v150 + 31) & 0x1FFFFFFE0;
                      *(_QWORD *)v244 = 0;
                      *((_QWORD *)v149 + 1) = v151;
                      memptr = 0;
                      malloc_type_posix_memalign(&memptr, 0x20uLL, v151, 0x100BBD03uLL);
                      v152 = memptr;
                      *(_QWORD *)v149 = memptr;
                      if (!v152)
                      {
                        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                        v220 = std::bad_alloc::bad_alloc(exception);
                        __cxa_throw(v220, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                      }
                      if ((_DWORD)v150)
                        memcpy(v152, *(const void **)v148, v150);
                      *((_DWORD *)v149 + 4) = *(_DWORD *)(v148 + 16);
                      v153 = v149 + 24;
                    }
                    v244 = v153;
                    if (v123)
                    {
                      v154 = v242;
                      if (v242)
                        break;
                    }
LABEL_199:
                    ++tv_sec;
                  }
                  v156 = (char *)v242[3];
                  v155 = v242[4];
                  if ((unint64_t)v156 < v155)
                  {
                    *(_DWORD *)v156 = v118;
                    v146 = (uint64_t)(v156 + 4);
LABEL_198:
                    v154[3] = v146;
                    v123 = v236;
                    goto LABEL_199;
                  }
                  v157 = (char *)v242[2];
                  v158 = (v156 - v157) >> 2;
                  v159 = v158 + 1;
                  if ((unint64_t)(v158 + 1) >> 62)
                    sub_2394189F8();
                  v160 = v155 - (_QWORD)v157;
                  if (v160 >> 1 > v159)
                    v159 = v160 >> 1;
                  if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                    v161 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v161 = v159;
                  if (v161)
                  {
                    if (v161 >> 62)
                      sub_239418A80();
                    v162 = operator new(4 * v161);
                    v163 = &v162[4 * v158];
                    *v163 = v118;
                    v146 = (uint64_t)(v163 + 1);
                    if (v156 == v157)
                      goto LABEL_229;
                  }
                  else
                  {
                    v162 = 0;
                    v163 = (_DWORD *)(4 * v158);
                    *(_DWORD *)(4 * v158) = v118;
                    v146 = 4 * v158 + 4;
                    if (v156 == v157)
                    {
LABEL_229:
                      v154[2] = v163;
                      v154[3] = v146;
                      v154[4] = &v162[4 * v161];
                      if (v157)
                        operator delete(v157);
                      goto LABEL_198;
                    }
                  }
                  v164 = v156 - 4 - v157;
                  if (v164 < 0x2C)
                    goto LABEL_346;
                  if ((unint64_t)(v157 - v162) < 0x20)
                    goto LABEL_346;
                  v165 = (v164 >> 2) + 1;
                  v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
                  v167 = &v156[-v166];
                  v163 = (_DWORD *)((char *)v163 - v166);
                  v168 = &v162[4 * v158 - 16];
                  v169 = v156 - 16;
                  v170 = v165 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v171 = *(_OWORD *)v169;
                    *(v168 - 1) = *((_OWORD *)v169 - 1);
                    *v168 = v171;
                    v168 -= 2;
                    v169 -= 32;
                    v170 -= 8;
                  }
                  while (v170);
                  v156 = v167;
                  if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_346:
                    do
                    {
                      v172 = *((_DWORD *)v156 - 1);
                      v156 -= 4;
                      *--v163 = v172;
                    }
                    while (v156 != v157);
                  }
                  goto LABEL_229;
                }
                if (v142 == v232)
                  v221 = 223;
                else
                  v221 = 222;
              }
              else
              {
                v221 = 220;
              }
              sub_239A444D4((uint64_t)"unknown file", v221, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
LABEL_189:
            operator delete(v121);
            goto LABEL_190;
          }
        }
      }
      else
      {
        v92 = v222;
      }
      do
      {
        v141 = *((_QWORD *)v121 - 1);
        v121 -= 8;
        *((_QWORD *)v132 - 1) = v141;
        v132 -= 8;
      }
      while (v121 != v126);
      goto LABEL_188;
    }
  }
LABEL_277:
  (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v238 + 40))(v238, v113);
  getrusage(0, &v240);
  v204 = v242;
  a2 = (uint64_t)v238;
  a7 = v225;
  if (((*(uint64_t (**)(unsigned __int8 *, void **, _QWORD, _QWORD *))(*(_QWORD *)v238 + 72))(v238, &v243, v233, v242) & 1) == 0)
  {
    v108 = 1;
    if (!v204)
      goto LABEL_288;
    goto LABEL_283;
  }
  getrusage(0, &v239);
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v238 + 24))(v238);
  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v238 + 64))(v238))
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v238 + 64))(v238);
  kdebug_trace();
  v108 = 0;
  if (v204)
  {
LABEL_283:
    v205 = (void *)v204[5];
    if (v205)
    {
      v204[6] = v205;
      operator delete(v205);
    }
    v206 = (void *)v204[2];
    if (v206)
    {
      v204[3] = v206;
      operator delete(v206);
    }
    MEMORY[0x23B83E31C](v204, 0x1032C4039E87B41);
  }
LABEL_288:
  v207 = (char *)v243;
  if (v243)
  {
    v208 = v244;
    v209 = v243;
    if (v244 != v243)
    {
      do
      {
        v210 = (void *)*((_QWORD *)v208 - 3);
        v208 -= 24;
        free(v210);
      }
      while (v208 != v207);
      v209 = v243;
    }
    v244 = v207;
    operator delete(v209);
  }
  if (v247 < 0)
  {
    operator delete(v246);
    if ((v250 & 0x80000000) == 0)
    {
LABEL_295:
      v109 = __p;
      if (!__p)
        goto LABEL_297;
      goto LABEL_296;
    }
  }
  else if ((v250 & 0x80000000) == 0)
  {
    goto LABEL_295;
  }
  operator delete(v248);
  v109 = __p;
  if (__p)
    goto LABEL_296;
LABEL_297:
  if (v108)
    goto LABEL_298;
LABEL_22:
  getrusage(0, &v241);
  v31 = *a1;
  v32 = a1[1];
  if (*a1 != v32)
  {
    v224 = a7;
    v230 = a1[1];
    while (1)
    {
      v33 = (unint64_t)*v31;
      if ((sub_2396FD7B0(a7) & 1) != 0)
        goto LABEL_298;
      kdebug_trace();
      v239.ru_utime = (timeval)xmmword_239EC65B0;
      memset(&v239.ru_stime, 0, 80);
      v34 = *(__int32 **)(a2 + 16);
      if (!HIDWORD(v33))
      {
        v35 = wmemchr(*(__int32 **)(a2 + 8), v33, ((uint64_t)v34 - *(_QWORD *)(a2 + 8)) >> 2);
        v36 = v35 ? v35 : v34;
        if (v36 != *(__int32 **)(a2 + 16))
          goto LABEL_44;
      }
      __p = (void *)v33;
      v37 = *(_QWORD *)(a3 + 24);
      if (!v37)
        sub_2394172E0();
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v37 + 48))(&v248, v37, &__p);
      v38 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 96);
      if (v248)
        break;
      v39 = v38(a2, v33, &v239, v234, v233);
      v43 = v249;
      if (!v249)
        goto LABEL_43;
LABEL_40:
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (v45)
      {
LABEL_43:
        if (!v39)
          goto LABEL_68;
        goto LABEL_44;
      }
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (!v39)
      {
LABEL_68:
        v46 = 0;
        ru_majflt = v239.ru_majflt;
        if (!v239.ru_majflt)
          goto LABEL_49;
        goto LABEL_45;
      }
LABEL_44:
      kdebug_trace();
      v46 = 1;
      ru_majflt = v239.ru_majflt;
      if (!v239.ru_majflt)
        goto LABEL_49;
LABEL_45:
      ru_nswap = v239.ru_nswap;
      v49 = (void *)ru_majflt;
      if (v239.ru_nswap != ru_majflt)
      {
        do
        {
          v50 = *(void **)(ru_nswap - 24);
          ru_nswap -= 24;
          free(v50);
        }
        while (ru_nswap != ru_majflt);
        v49 = (void *)v239.ru_majflt;
      }
      v239.ru_nswap = ru_majflt;
      operator delete(v49);
      a2 = (uint64_t)v238;
LABEL_49:
      if (v239.ru_idrss)
      {
        v239.ru_isrss = v239.ru_idrss;
        operator delete((void *)v239.ru_idrss);
      }
      if (*(_QWORD *)&v239.ru_stime.tv_usec)
        operator delete(*(void **)&v239.ru_stime.tv_usec);
      if ((v46 & 1) == 0)
        goto LABEL_298;
      if (++v31 == v32)
        goto LABEL_83;
    }
    v39 = v38(a2, v33, v248, v234, v233);
    sub_239429CA8((uint64_t)v248, v234, (char **)&__p);
    v40 = *((_DWORD *)v248 + 2);
    v41 = v256;
    if (v256 < v257)
    {
      *(_QWORD *)v256 = v33 | ((unint64_t)v40 << 32);
      v256 = v41 + 8;
      v42 = (uint64_t *)__p;
      if (!__p)
        goto LABEL_37;
      goto LABEL_36;
    }
    v51 = v255;
    v52 = (v256 - v255) >> 3;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 61)
      sub_2394189F8();
    v54 = v257 - v255;
    if ((v257 - v255) >> 2 > v53)
      v53 = v54 >> 2;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 >> 61)
        sub_239418A80();
      v56 = v55;
      v57 = operator new(8 * v55);
      v55 = v56;
      v58 = &v57[8 * v52];
      *(_QWORD *)v58 = v33 | ((unint64_t)v40 << 32);
      v59 = v58 + 8;
      if (v41 != v51)
      {
LABEL_65:
        v60 = v41 - 8 - v51;
        if (v60 >= 0x58)
        {
          a2 = (uint64_t)v238;
          if ((unint64_t)(v51 - v57) >= 0x20)
          {
            v61 = (v60 >> 3) + 1;
            v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v41[-v62];
            v58 -= v62;
            v64 = &v57[8 * v52 - 16];
            v65 = v41 - 16;
            v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *(_OWORD *)v65;
              *(v64 - 1) = *((_OWORD *)v65 - 1);
              *v64 = v67;
              v64 -= 2;
              v65 -= 32;
              v66 -= 4;
            }
            while (v66);
            v41 = v63;
            if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_78:
              v41 = v255;
              v255 = v58;
              v256 = v59;
              v257 = &v57[8 * v55];
              if (!v41)
                goto LABEL_80;
              goto LABEL_79;
            }
          }
        }
        else
        {
          a2 = (uint64_t)v238;
        }
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v58 - 1) = v68;
          v58 -= 8;
        }
        while (v41 != v51);
        goto LABEL_78;
      }
    }
    else
    {
      v57 = 0;
      v58 = (char *)(8 * v52);
      *(_QWORD *)(8 * v52) = v33 | ((unint64_t)v40 << 32);
      v59 = (char *)(8 * v52 + 8);
      if (v41 != v51)
        goto LABEL_65;
    }
    a2 = (uint64_t)v238;
    v255 = v58;
    v256 = v59;
    v257 = &v57[8 * v55];
    if (!v41)
    {
LABEL_80:
      a7 = v224;
      v256 = v59;
      v42 = (uint64_t *)__p;
      if (!__p)
      {
LABEL_37:
        v32 = v230;
        v43 = v249;
        if (!v249)
          goto LABEL_43;
        goto LABEL_40;
      }
LABEL_36:
      v253 = v42;
      operator delete(v42);
      goto LABEL_37;
    }
LABEL_79:
    operator delete(v41);
    goto LABEL_80;
  }
LABEL_83:
  getrusage(0, &v240);
  if (a1[1] - *a1 > (unint64_t)((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2)
    || (sub_2396FD7B0(a7) & 1) != 0)
  {
LABEL_298:
    v69 = 0;
    v86 = v255;
    if (!v255)
      return v69;
LABEL_299:
    v256 = v86;
    operator delete(v86);
    return v69;
  }
  v71 = *a1;
  v70 = a1[1];
  memset(&v239, 0, 24);
  v72 = (char *)v70 - (char *)v71;
  if (v70 != v71)
  {
    if (v72 < 0)
      sub_2394189F8();
    v73 = (int32x4_t *)operator new((unint64_t)v72 >> 1);
    v239.ru_utime.tv_sec = (__darwin_time_t)v73;
    v239.ru_stime.tv_sec = (__darwin_time_t)v73->i64 + 4 * (v72 >> 3);
    v74 = v71;
    v75 = v73;
    if ((unint64_t)(v72 - 8) < 0x38)
      goto LABEL_347;
    v76 = ((unint64_t)(v72 - 8) >> 3) + 1;
    v74 = &v71[v76 & 0x3FFFFFFFFFFFFFF8];
    v75 = (int32x4_t *)((char *)v73 + 4 * (v76 & 0x3FFFFFFFFFFFFFF8));
    v77 = v73 + 1;
    v78 = (int32x4_t *)(v71 + 4);
    v79 = v76 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v81 = v78[-2];
      v80 = v78[-1];
      v83 = *v78;
      v82 = v78[1];
      v78 += 4;
      v77[-1] = vuzp1q_s32(v81, v80);
      *v77 = vuzp1q_s32(v83, v82);
      v77 += 2;
      v79 -= 8;
    }
    while (v79);
    if (v76 != (v76 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_347:
      do
      {
        v84 = (uint64_t)*v74++;
        v75->i32[0] = v84;
        v75 = (int32x4_t *)((char *)v75 + 4);
      }
      while (v74 != v70);
    }
    *(_QWORD *)&v239.ru_utime.tv_usec = v75;
  }
  (*(void (**)(uint64_t, rusage *, uint64_t))(*(_QWORD *)a2 + 112))(a2, &v239, 1);
  if (v239.ru_utime.tv_sec)
  {
    *(_QWORD *)&v239.ru_utime.tv_usec = v239.ru_utime.tv_sec;
    operator delete((void *)v239.ru_utime.tv_sec);
  }
  if ((a8 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)
    && v256 != v255
    && *(unsigned __int16 *)(a2 + 138) <= 0xFFu)
  {
    v212 = (4 * ((v256 - v255) >> 3)) & 0xFFFFFFFFFFFFFFF8;
    sub_2394A4EAC(v255, &v255[v212], v256);
    v213 = *(unsigned int *)&v255[v212];
    sub_2394A4DCC((uint64_t)v259, a3);
    sub_2394A5654((uint64_t)v261, v259);
    v214 = sub_2394A53F8(a2, v213, (uint64_t)v261, v234, v233);
    v215 = v262;
    if (v262 == v261)
    {
      v216 = 4;
      v215 = v261;
    }
    else
    {
      if (!v262)
        goto LABEL_311;
      v216 = 5;
    }
    (*(void (**)(void))(*v215 + 8 * v216))();
LABEL_311:
    v217 = v260;
    if (v260 == v259)
    {
      v218 = 4;
      v217 = v259;
    }
    else
    {
      if (!v260)
        goto LABEL_316;
      v218 = 5;
    }
    (*(void (**)(void))(*v217 + 8 * v218))();
LABEL_316:
    *(_WORD *)(a2 + 138) = v214 | 0x100;
    if ((_BYTE)a11)
      *a10 = v214;
  }
  if ((!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2) == 1)
    && *(_BYTE *)(a2 + 137))
  {
    v85 = *(_QWORD *)(a2 + 64);
    if (v85)
      sub_2394AB118(v85);
    *(_BYTE *)(a2 + 137) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v69 = sub_2396FD7B0(a7) ^ 1;
  v86 = v255;
  if (v255)
    goto LABEL_299;
  return v69;
}

void sub_2394A4B58(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD **)(v2 - 168);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 192);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v2 - 200);
  if (v6 == (_QWORD *)(v2 - 224))
  {
    v7 = 4;
    v6 = (_QWORD *)(v2 - 224);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(void **)(v2 - 256);
  if (!v8)
    _Unwind_Resume(a1);
  *(_QWORD *)(v2 - 248) = v8;
  operator delete(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_2394A4DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
    return a1;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    return a1;
  }
}

_QWORD *sub_2394A4E48(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[5];
    if (v3)
    {
      v2[6] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[2];
    if (v4)
    {
      v2[3] = v4;
      operator delete(v4);
    }
    MEMORY[0x23B83E31C](v2, 0x1032C4039E87B41);
  }
  return a1;
}

char *sub_2394A4EAC(char *result, char *a2, char *a3)
{
  unint64_t v3;
  char *v4;
  char *v5;
  unsigned int v6;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  unsigned int v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  char *v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int *v49;
  unsigned int v50;
  int *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char *v56;
  int *v57;
  int v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;

  while (a3 != a2)
  {
    v3 = (a3 - result) >> 3;
    if (v3 < 2)
      return result;
    if (v3 == 3)
    {
      v49 = (int *)(result + 4);
      v50 = *((_DWORD *)result + 1);
      v51 = (int *)(result + 12);
      v52 = *((_DWORD *)result + 3);
      v53 = *((_DWORD *)a3 - 1);
      if (v52 >= v50)
      {
        if (v53 < v52)
        {
          v65 = *((_DWORD *)result + 2);
          *((_DWORD *)result + 2) = *((_DWORD *)a3 - 2);
          *((_DWORD *)a3 - 2) = v65;
          v66 = *((_DWORD *)result + 3);
          *((_DWORD *)result + 3) = *((_DWORD *)a3 - 1);
          *((_DWORD *)a3 - 1) = v66;
          if (*((_DWORD *)result + 3) < *((_DWORD *)result + 1))
          {
            v67 = *(_DWORD *)result;
            *(_DWORD *)result = *((_DWORD *)result + 2);
            *((_DWORD *)result + 2) = v67;
            v68 = *v49;
            *v49 = *v51;
            *v51 = v68;
          }
        }
      }
      else
      {
        v54 = *(_DWORD *)result;
        if (v53 >= v52)
        {
          *(_DWORD *)result = *((_DWORD *)result + 2);
          *((_DWORD *)result + 1) = v52;
          *((_DWORD *)result + 2) = v54;
          *((_DWORD *)result + 3) = v50;
          if (*((_DWORD *)a3 - 1) < v50)
          {
            *((_DWORD *)result + 2) = *((_DWORD *)a3 - 2);
            *((_DWORD *)a3 - 2) = v54;
            v69 = *((_DWORD *)result + 3);
            *((_DWORD *)result + 3) = *((_DWORD *)a3 - 1);
            *((_DWORD *)a3 - 1) = v69;
          }
        }
        else
        {
          *(_DWORD *)result = *((_DWORD *)a3 - 2);
          *((_DWORD *)a3 - 2) = v54;
          v55 = *v49;
          *v49 = *((_DWORD *)a3 - 1);
          *((_DWORD *)a3 - 1) = v55;
        }
      }
      return result;
    }
    if (v3 == 2)
    {
      v56 = a3 - 4;
      v57 = (int *)(result + 4);
      if (*((_DWORD *)a3 - 1) < *((_DWORD *)result + 1))
      {
        v58 = *(_DWORD *)result;
        *(_DWORD *)result = *((_DWORD *)a3 - 2);
        *((_DWORD *)a3 - 2) = v58;
        v59 = *v57;
        *v57 = *(_DWORD *)v56;
        *(_DWORD *)v56 = v59;
      }
      return result;
    }
    if (a3 - result <= 63)
    {
      while (result != a3 - 8)
      {
        v60 = result;
        result += 8;
        if (v60 != a3 && result != a3)
        {
          v61 = result;
          v62 = v60;
          do
          {
            if (*((_DWORD *)v61 + 1) < *((_DWORD *)v62 + 1))
              v62 = v61;
            v61 += 8;
          }
          while (v61 != a3);
          if (v62 != v60)
          {
            v63 = *(_DWORD *)v60;
            *(_DWORD *)v60 = *(_DWORD *)v62;
            *(_DWORD *)v62 = v63;
            v64 = *((_DWORD *)v60 + 1);
            *((_DWORD *)v60 + 1) = *((_DWORD *)v62 + 1);
            *((_DWORD *)v62 + 1) = v64;
          }
        }
      }
      return result;
    }
    v4 = &result[8 * (v3 >> 1)];
    v5 = a3 - 4;
    v6 = *((_DWORD *)a3 - 1);
    v7 = a3 - 8;
    v8 = (unsigned int *)(v4 + 4);
    v9 = *((_DWORD *)v4 + 1);
    v10 = (unsigned int *)(result + 4);
    v11 = *((_DWORD *)result + 1);
    if (v9 >= v11)
    {
      if (v6 >= v9)
      {
        v13 = 0;
        v20 = *v10;
        if (*v10 >= v9)
          goto LABEL_27;
      }
      else
      {
        v15 = *(_DWORD *)v4;
        *(_DWORD *)v4 = *(_DWORD *)v7;
        *(_DWORD *)v7 = v15;
        v16 = *((_DWORD *)v4 + 1);
        *((_DWORD *)v4 + 1) = *(_DWORD *)v5;
        *(_DWORD *)v5 = v16;
        v9 = *((_DWORD *)v4 + 1);
        if (v9 < *v10)
        {
          v17 = *(_DWORD *)result;
          *(_DWORD *)result = *(_DWORD *)v4;
          *(_DWORD *)v4 = v17;
          v13 = 2;
          v14 = (int *)(result + 4);
          v18 = v4 + 4;
          goto LABEL_15;
        }
        v13 = 1;
        v20 = *v10;
        if (*v10 >= v9)
          goto LABEL_27;
      }
    }
    else
    {
      v12 = *(_DWORD *)result;
      if (v6 < v9)
      {
        *(_DWORD *)result = *(_DWORD *)v7;
        *(_DWORD *)v7 = v12;
        v13 = 1;
        v14 = (int *)(result + 4);
        goto LABEL_14;
      }
      *(_DWORD *)result = *(_DWORD *)v4;
      *((_DWORD *)result + 1) = v9;
      *(_DWORD *)v4 = v12;
      *((_DWORD *)v4 + 1) = v11;
      if (*(_DWORD *)v5 < v11)
      {
        *(_DWORD *)v4 = *(_DWORD *)v7;
        *(_DWORD *)v7 = v12;
        v13 = 2;
        v14 = (int *)(v4 + 4);
LABEL_14:
        v18 = a3 - 4;
LABEL_15:
        v19 = *v14;
        *v14 = *(_DWORD *)v18;
        *(_DWORD *)v18 = v19;
        v9 = *v8;
        v20 = *v10;
        if (*v10 >= *v8)
          goto LABEL_27;
        goto LABEL_16;
      }
      v13 = 1;
      v9 = v11;
      v20 = *v10;
      if (*v10 >= v9)
      {
LABEL_27:
        v30 = a3 - 8;
        while (1)
        {
          v21 = v30 - 8;
          if (v30 - 8 == result)
            break;
          v31 = *((_DWORD *)v30 - 1);
          v30 -= 8;
          if (v31 < v9)
          {
            v32 = *(_DWORD *)result;
            *(_DWORD *)result = *(_DWORD *)v21;
            *(_DWORD *)v21 = v32;
            v33 = *((_DWORD *)result + 1);
            *((_DWORD *)result + 1) = *((_DWORD *)v21 + 1);
            *((_DWORD *)v21 + 1) = v33;
            ++v13;
            v22 = result + 8;
            if (result + 8 < v21)
              goto LABEL_17;
            goto LABEL_31;
          }
        }
        v38 = result + 8;
        if (v20 >= *(_DWORD *)v5)
        {
          if (v38 == v7)
            return result;
          while (v20 >= *((_DWORD *)v38 + 1))
          {
            v38 += 8;
            if (v38 == v7)
              return result;
          }
          v42 = *(_DWORD *)v38;
          *(_DWORD *)v38 = *(_DWORD *)v7;
          *(_DWORD *)v7 = v42;
          v43 = *((_DWORD *)v38 + 1);
          *((_DWORD *)v38 + 1) = *(_DWORD *)v5;
          *(_DWORD *)v5 = v43;
          v38 += 8;
        }
        if (v38 == v7)
          return result;
        while (1)
        {
          v46 = *v10;
          result = v38 - 8;
          do
          {
            v47 = *((_DWORD *)result + 3);
            result += 8;
          }
          while (v46 >= v47);
          v38 = result + 8;
          do
          {
            v48 = *((_DWORD *)v7 - 1);
            v7 -= 8;
          }
          while (v46 < v48);
          if (result >= v7)
            break;
          v44 = *(_DWORD *)result;
          *(_DWORD *)result = *(_DWORD *)v7;
          *(_DWORD *)v7 = v44;
          v45 = *((_DWORD *)result + 1);
          *((_DWORD *)result + 1) = *((_DWORD *)v7 + 1);
          *((_DWORD *)v7 + 1) = v45;
        }
        if (result > a2)
          return result;
        continue;
      }
    }
LABEL_16:
    v21 = a3 - 8;
    v22 = result + 8;
    if (result + 8 >= a3 - 8)
    {
LABEL_31:
      v25 = v22;
    }
    else
    {
LABEL_17:
      v23 = v22;
      while (1)
      {
        v24 = *((_DWORD *)v4 + 1);
        v25 = v23 - 8;
        do
        {
          v26 = *((_DWORD *)v25 + 3);
          v25 += 8;
        }
        while (v26 < v24);
        v23 = v25 + 8;
        do
        {
          v27 = *((_DWORD *)v21 - 1);
          v21 -= 8;
        }
        while (v27 >= v24);
        if (v25 >= v21)
          break;
        v28 = *(_DWORD *)v25;
        *(_DWORD *)v25 = *(_DWORD *)v21;
        *(_DWORD *)v21 = v28;
        v29 = *((_DWORD *)v25 + 1);
        *((_DWORD *)v25 + 1) = *((_DWORD *)v21 + 1);
        *((_DWORD *)v21 + 1) = v29;
        ++v13;
        if (v25 == v4)
          v4 = v21;
      }
    }
    if (v25 != v4 && *((_DWORD *)v4 + 1) < *((_DWORD *)v25 + 1))
    {
      v34 = *(_DWORD *)v25;
      *(_DWORD *)v25 = *(_DWORD *)v4;
      *(_DWORD *)v4 = v34;
      v35 = *((_DWORD *)v25 + 1);
      *((_DWORD *)v25 + 1) = *((_DWORD *)v4 + 1);
      *((_DWORD *)v4 + 1) = v35;
      ++v13;
    }
    if (v25 == a2)
      return result;
    if (!v13)
    {
      if (v25 <= a2)
      {
        v39 = v25 + 8;
        while (v39 != a3)
        {
          v40 = *((_DWORD *)v39 + 1);
          v41 = *((_DWORD *)v39 - 1);
          v39 += 8;
          if (v40 < v41)
            goto LABEL_37;
        }
      }
      else
      {
        while (v22 != v25)
        {
          v36 = *((_DWORD *)v22 + 1);
          v37 = *((_DWORD *)v22 - 1);
          v22 += 8;
          if (v36 < v37)
            goto LABEL_37;
        }
      }
      return result;
    }
LABEL_37:
    if (v25 <= a2)
      result = v25 + 8;
    else
      a3 = v25;
  }
  return result;
}

BOOL sub_2394A53F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  std::chrono::system_clock::time_point v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  std::chrono::system_clock::time_point v20;
  std::chrono::system_clock::time_point v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  void *v31[2];
  void *__p[2];
  int v33;
  int v34;

  if (*(_BYTE *)(a1 + 139))
    return *(_BYTE *)(a1 + 138) != 0;
  v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)__p = 0u;
  v33 = 1065353216;
  v12 = *(_QWORD *)(a3 + 24);
  if (v12)
  {
    v34 = a2;
    (*(void (**)(_QWORD **__return_ptr, uint64_t, int *))(*(_QWORD *)v12 + 48))(&v29, v12, &v34);
    if (v29)
    {
      v13 = sub_2394A9E64(a1, v29, a4, a5, v31) ^ 1;
      v14 = v30;
      if (!v30)
        goto LABEL_13;
    }
    else
    {
      v13 = 1;
      v14 = v30;
      if (!v30)
      {
LABEL_13:
        v17 = __p[0];
        if (__p[0])
        {
          do
          {
            v18 = (_QWORD *)*v17;
            operator delete(v17);
            v17 = v18;
          }
          while (v18);
        }
        v19 = v31[0];
        v31[0] = 0;
        if (v19)
          operator delete(v19);
        goto LABEL_17;
      }
    }
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_13;
  }
  v13 = 1;
  v31[0] = 0;
LABEL_17:
  if (v13)
    return 1;
  v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v21.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)__p = 0u;
  v33 = 1065353216;
  v22 = *(__int32 **)(a1 + 16);
  v23 = wmemchr(*(__int32 **)(a1 + 8), a2, ((uint64_t)v22 - *(_QWORD *)(a1 + 8)) >> 2);
  if (v23)
    v22 = v23;
  v24 = *(__int32 **)(a1 + 16);
  if (v22 != v24)
  {
    v25 = *(uint64_t **)(a1 + 64);
    if (v25)
    {
      sub_2394AAAA4(v25, a2, (uint64_t)v31);
      v26 = __p[0];
      if (__p[0])
      {
        do
        {
          v27 = (_QWORD *)*v26;
          operator delete(v26);
          v26 = v27;
        }
        while (v27);
      }
    }
  }
  v28 = v31[0];
  v31[0] = 0;
  if (v28)
    operator delete(v28);
  return v22 == v24
      || (double)(std::chrono::system_clock::now().__d_.__rep_ - v21.__d_.__rep_) / 1000000.0 <= (double)(v20.__d_.__rep_ - v11.__d_.__rep_)
                                                                                               / 1000000.0;
}

void sub_2394A5610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394A5624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239420950((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2394A5640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394A5654(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    v5 = operator new(0x28uLL);
    v6 = v5;
    *v5 = &off_250ADCB38;
    if (v3 == a2)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v5[4] = v3;
      a2[3] = 0;
    }
    *(_QWORD *)(a1 + 24) = v6;
  }
  return a1;
}

void sub_2394A56D8(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, unint64_t **a7, uint64_t a8)
{
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  std::thread *v52;
  int v53;
  std::__thread_struct *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  char *v60;
  char *v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  std::thread *v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  _opaque_pthread_t *v81;
  std::thread *v82;
  std::thread *v83;
  std::thread *v84;
  std::thread *v85;
  void *v86;
  _QWORD *v88;
  unint64_t v89;
  std::thread v91;
  void *__p;
  std::thread *v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD *v101;
  unsigned __int8 v102;
  _QWORD v103[2];
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  _DWORD *v108;
  char *v109;
  unint64_t **v110;
  uint64_t v111;
  std::mutex v112;
  _BYTE v113[24];
  _BYTE *v114;
  uint64_t v115[71];
  _QWORD v116[3];
  _QWORD *v117;
  _BYTE v118[24];
  _BYTE *v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v110 = a7;
  v111 = a8;
  LODWORD(v12) = *(_DWORD *)(a2 + 8);
  if (!(_DWORD)v12 || (int)v12 > (int)std::thread::hardware_concurrency())
  {
    LODWORD(v12) = std::thread::hardware_concurrency();
    if (!(_DWORD)v12)
      sub_239EBFD40();
  }
  v14 = *(_BYTE **)(a4 + 8);
  v13 = *(_BYTE **)(a4 + 16);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = (char *)operator new(v13 - v14);
    v17 = &v16[4 * (v15 >> 2)];
    v107 = v16;
    v109 = v17;
    memcpy(v16, v14, v15);
    v108 = v17;
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v19 = v107;
  v18 = v108;
  if ((_BYTE)v111)
  {
    v21 = *v110;
    v20 = v110[1];
    *(_QWORD *)&v95 = &v104;
    if (v107 != v108)
    {
      while (v21 != v20)
      {
        v22 = *v19;
        v23 = *v21 >= v22;
        if (*v21 <= v22)
        {
          ++v21;
          if (v23)
            ++v19;
          if (v19 == v18)
            goto LABEL_19;
        }
        else
        {
          sub_2394AB184((uint64_t *)&v95, v19++);
          if (v19 == v18)
            goto LABEL_19;
        }
      }
      for (v115[0] = v95; v19 != v18; ++v19)
        sub_2394AB184(v115, v19);
    }
LABEL_19:
    v19 = v107;
    v18 = v108;
  }
  v103[0] = &v104;
  v103[1] = &v110;
  if (((unint64_t)v15 >> 2) < (unint64_t)(v18 - v19))
  {
    sub_239A444D4((uint64_t)"unknown file", 506, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  v24 = a1[1] - *a1;
  if (!v24)
    goto LABEL_109;
  v25 = v24 >> 3;
  v26 = (unint64_t)v24 >> 3;
  if (v24 >> 3 >= (unint64_t)v12)
    v12 = v12;
  else
    v12 = v26;
  v102 = 1;
  v27 = (char *)(a2 + 117);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 64))(a4))
  {
    if (*(unsigned __int16 *)(a4 + 138) >= 0x100u)
    {
      atomic_store(*(_WORD *)(a4 + 138) != 0, &v102);
      goto LABEL_50;
    }
    srand(0);
    v28 = rand();
    v29 = (uint64_t)(a1[1] - *a1) >> 3;
    v30 = (float)((float)v28 * 4.6566e-10) * (float)(unint64_t)v29;
    v31 = v29 - 1;
    if (v31 >= (unint64_t)v30)
      v31 = (unint64_t)v30;
    v32 = *(_QWORD *)(*a1 + 8 * v31);
    v33 = (_QWORD *)a3[3];
    if (!v33)
    {
      v117 = 0;
      v119 = 0;
      goto LABEL_40;
    }
    if (v33 == a3)
    {
      v117 = v116;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v116);
      v119 = 0;
      v88 = v117;
      if (!v117)
        goto LABEL_40;
    }
    else
    {
      v117 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
      v119 = 0;
      v88 = v117;
      if (!v117)
        goto LABEL_40;
    }
    v34 = operator new(0x28uLL);
    v35 = v34;
    *v34 = &off_250ADCB38;
    if (v88 == v116)
    {
      v34[4] = v34 + 1;
      (*(void (**)(_QWORD *))(v116[0] + 24))(v116);
    }
    else
    {
      v34[4] = v88;
      v117 = 0;
    }
    v119 = v35;
LABEL_40:
    atomic_store(sub_2394A53F8(a4, v32, (uint64_t)v118, *v27, v12), &v102);
    v36 = v119;
    if (v119 == v118)
    {
      v37 = 4;
      v36 = v118;
    }
    else
    {
      if (!v119)
      {
LABEL_45:
        v38 = v117;
        if (v117 == v116)
        {
          v39 = 4;
          v38 = v116;
          goto LABEL_49;
        }
        if (v117)
        {
          v39 = 5;
LABEL_49:
          (*(void (**)(void))(*v38 + 8 * v39))();
        }
LABEL_50:
        atomic_load(&v102);
        goto LABEL_51;
      }
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
    goto LABEL_45;
  }
LABEL_51:
  sub_2396FD800(a6, (uint64_t)v113);
  v89 = v12;
  *(_QWORD *)&v95 = 0x42C8000000000000;
  sub_2396FCC68(v115, v25, v113, &v95, 1.0);
  v40 = a2 + 128;
  v41 = a2 + 112;
  v42 = a2 + 116;
  v43 = v114;
  if (v114 == v113)
  {
    v44 = 4;
    v43 = v113;
    goto LABEL_55;
  }
  if (v114)
  {
    v44 = 5;
LABEL_55:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  *(_QWORD *)&v95 = &v107;
  *((_QWORD *)&v95 + 1) = a1;
  v45 = (uint64_t)a6;
  *(_QWORD *)&v96 = a6;
  *((_QWORD *)&v96 + 1) = v115;
  *(_QWORD *)&v97 = &v102;
  *((_QWORD *)&v97 + 1) = a4;
  *(_QWORD *)&v98 = &unk_239EC6AB8;
  *((_QWORD *)&v98 + 1) = v40;
  *(_QWORD *)&v99 = a3;
  *((_QWORD *)&v99 + 1) = v27;
  *(_QWORD *)&v100 = v42;
  *((_QWORD *)&v100 + 1) = v41;
  v101 = v103;
  v46 = v89;
  v47 = (v89 - 1);
  if ((_DWORD)v89 == 1)
  {
    sub_2394A6140((__int32 ***)&v95, 0, v26, (char **)a5, 0);
    goto LABEL_106;
  }
  memset(v112.__m_.__opaque, 0, sizeof(v112.__m_.__opaque));
  v112.__m_.__sig = 850045863;
  __p = 0;
  v93 = 0;
  v94 = 0;
  if (!(_DWORD)v89)
    goto LABEL_105;
  v48 = 0;
  v49 = 0;
  v50 = v25 / v89;
  v51 = v26 - v47 * (v25 / v89);
  do
  {
    if (v48 == v47)
      v53 = v51;
    else
      v53 = v50;
    v54 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v54);
    v55 = (char *)operator new();
    v56 = v97;
    *(_OWORD *)(v55 + 56) = v98;
    v57 = v100;
    *(_OWORD *)(v55 + 72) = v99;
    *(_OWORD *)(v55 + 88) = v57;
    v58 = v96;
    *(_OWORD *)(v55 + 8) = v95;
    *(_OWORD *)(v55 + 24) = v58;
    *(_QWORD *)v55 = v54;
    *((_QWORD *)v55 + 13) = v101;
    *(_OWORD *)(v55 + 40) = v56;
    *((_DWORD *)v55 + 28) = v49;
    *((_DWORD *)v55 + 29) = v53;
    *((_QWORD *)v55 + 15) = a5;
    *((_QWORD *)v55 + 16) = &v112;
    v59 = pthread_create(&v91.__t_, 0, (void *(__cdecl *)(void *))sub_2394AB2F4, v55);
    if (v59)
    {
      std::__throw_system_error(v59, "thread constructor failed");
      __break(1u);
      return;
    }
    v60 = (char *)v93;
    if ((unint64_t)v93 < v94)
    {
      v93->__t_ = v91.__t_;
      v91.__t_ = 0;
      v52 = (std::thread *)(v60 + 8);
      goto LABEL_61;
    }
    v61 = (char *)__p;
    v62 = (char *)v93 - (_BYTE *)__p;
    v63 = ((char *)v93 - (_BYTE *)__p) >> 3;
    v64 = v63 + 1;
    v65 = 0uLL;
    if ((unint64_t)(v63 + 1) >> 61)
      sub_2394189F8();
    v66 = v94 - (_QWORD)__p;
    if ((uint64_t)(v94 - (_QWORD)__p) >> 2 > v64)
      v64 = v66 >> 2;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v64;
    if (v67)
    {
      if (v67 >> 61)
        sub_239418A80();
      v68 = (char *)operator new(8 * v67);
      v65 = 0uLL;
    }
    else
    {
      v68 = 0;
    }
    v69 = (std::thread *)&v68[8 * v63];
    v70 = &v68[8 * v67];
    v69->__t_ = v91.__t_;
    v52 = v69 + 1;
    v91.__t_ = 0;
    v71 = v60 - v61;
    if (v60 == v61)
    {
      __p = &v68[8 * v63];
      v93 = v69 + 1;
      v94 = (unint64_t)v70;
      v47 = (v89 - 1);
      v46 = v89;
      if (v60)
        goto LABEL_92;
    }
    else
    {
      v72 = v71 - 8;
      if ((unint64_t)(v71 - 8) < 0x78)
        goto LABEL_122;
      v73 = v72 >> 3;
      if (&v68[v62 - (v72 & 0xFFFFFFFFFFFFFFF8) - 8] < v60 && &v60[-8 * v73 - 8] < (char *)v69)
        goto LABEL_122;
      v74 = v73 + 1;
      v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
      v76 = &v60[-v75];
      v69 = (std::thread *)((char *)v69 - v75);
      v77 = &v68[8 * v63 - 16];
      v78 = v60 - 16;
      v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v80 = *(_OWORD *)v78;
        *((_OWORD *)v77 - 1) = *((_OWORD *)v78 - 1);
        *(_OWORD *)v77 = v80;
        *((_OWORD *)v78 - 1) = v65;
        *(_OWORD *)v78 = v65;
        v77 -= 32;
        v78 -= 32;
        v79 -= 4;
      }
      while (v79);
      v60 = v76;
      if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_122:
        do
        {
          v81 = (_opaque_pthread_t *)*((_QWORD *)v60 - 1);
          v60 -= 8;
          v69[-1].__t_ = v81;
          --v69;
          *(_QWORD *)v60 = 0;
        }
        while (v60 != v61);
      }
      v60 = (char *)__p;
      v82 = v93;
      __p = v69;
      v93 = v52;
      v94 = (unint64_t)v70;
      if (v82 == (std::thread *)v60)
      {
        v47 = (v89 - 1);
        v46 = v89;
        if (v60)
          goto LABEL_92;
      }
      else
      {
        v47 = (v89 - 1);
        v46 = v89;
        do
          std::thread::~thread(v82 - 1);
        while (v82 != (std::thread *)v60);
        if (v60)
LABEL_92:
          operator delete(v60);
      }
    }
LABEL_61:
    v93 = v52;
    std::thread::~thread(&v91);
    v49 += v53;
    ++v48;
  }
  while (v48 != v46);
  v83 = (std::thread *)__p;
  v84 = v93;
  if (__p == v93)
  {
    v45 = (uint64_t)a6;
    if (!v93)
      goto LABEL_105;
  }
  else
  {
    v45 = (uint64_t)a6;
    do
      std::thread::join(v83++);
    while (v83 != v84);
    v84 = (std::thread *)__p;
    if (!__p)
      goto LABEL_105;
  }
  v85 = v93;
  v86 = v84;
  if (v93 != v84)
  {
    do
      std::thread::~thread(v85 - 1);
    while (v85 != v84);
    v86 = __p;
  }
  v93 = v84;
  operator delete(v86);
LABEL_105:
  std::mutex::~mutex(&v112);
LABEL_106:
  sub_2396FD7B0(v45);
  v112.__m_.__opaque[15] = 0;
  LOBYTE(v112.__m_.__sig) = 0;
  sub_2396FCC6C((uint64_t)v115, (uint64_t)&v112);
  if (v112.__m_.__opaque[15] < 0)
    operator delete((void *)v112.__m_.__sig);
  sub_2396FD7B0(v45);
  sub_2396FCD14((uint64_t)v115);
LABEL_109:
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
}

void sub_2394A5F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::thread a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::mutex *a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2394A6140(__int32 ***a1, unsigned int a2, int a3, char **a4, std::mutex *a5)
{
  __int32 **v9;
  __int32 *v10;
  __int32 *v11;
  int64_t v12;
  char *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  __int32 *v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  __int32 *v27;
  __int32 *v28;
  __int32 **v29;
  __int32 *v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  __int32 *v41;
  __int32 *v42;
  uint64_t v43;
  int v44;
  __int32 **v46;
  __int32 *v47;
  __int32 *v48;
  __int32 *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  char **v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v82;
  std::mutex *v83;
  void **v84;
  std::__shared_weak_count *v85;
  void *__p[2];
  __int128 v87;
  int v88;
  _QWORD v89[4];
  void *v90;
  char *v91;
  unsigned int *v92;
  unint64_t v93;

  v9 = *a1;
  v91 = 0;
  v92 = 0;
  v90 = 0;
  v11 = *v9;
  v10 = v9[1];
  v12 = (char *)v10 - (char *)v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)operator new((char *)v10 - (char *)v11);
    v14 = (unsigned int *)&v13[4 * (v12 >> 2)];
    v90 = v13;
    v92 = v14;
    memcpy(v13, v11, v12);
    v91 = (char *)v14;
  }
  v15 = a3 + a2;
  if (v15 > a2)
  {
    v16 = a2;
    v82 = a3 + a2;
    v83 = a5;
    do
    {
      v18 = *(_QWORD *)&(*a1[1])[2 * v16];
      kdebug_trace();
      if (sub_2396FD7B0((uint64_t)a1[2]))
      {
        v80 = (uint64_t)a1[3];
        BYTE7(v87) = 0;
        LOBYTE(__p[0]) = 0;
        sub_2396FCC6C(v80, (uint64_t)__p);
        if (SBYTE7(v87) < 0)
          operator delete(__p[0]);
        break;
      }
      v19 = (uint64_t)a1[3];
      BYTE7(v87) = 0;
      LOBYTE(__p[0]) = 0;
      sub_2396FD394(v89, v19, (__int128 *)__p);
      if (SBYTE7(v87) < 0)
      {
        operator delete(__p[0]);
        *(_OWORD *)__p = 0u;
        v87 = 0u;
        v88 = 1065353216;
        v21 = atomic_load((unsigned __int8 *)a1[4]);
        if ((v21 & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        *(_OWORD *)__p = 0u;
        v87 = 0u;
        v88 = 1065353216;
        v20 = atomic_load((unsigned __int8 *)a1[4]);
        if ((v20 & 1) == 0)
          goto LABEL_26;
      }
      v22 = (*a1)[1];
      if (!HIDWORD(v18))
      {
        v27 = wmemchr(**a1, v18, v22 - **a1);
        v28 = v27 ? v27 : v22;
        if (v28 != (*a1)[1])
        {
          if (!(*((unsigned int (**)(__int32 **, unint64_t, uint64_t, _QWORD, void **, __int32 **))*a1[5]
                 + 16))(a1[5], v18, 1, *(unsigned __int8 *)a1[6], __p, a1[7]))goto LABEL_18;
          goto LABEL_35;
        }
      }
LABEL_26:
      v29 = a1[8];
      v93 = v18;
      v30 = v29[3];
      if (!v30)
        sub_2394172E0();
      (*(void (**)(void ***__return_ptr, __int32 *, unint64_t *))(*(_QWORD *)v30 + 48))(&v84, v30, &v93);
      if (v84)
      {
        v31 = (*((uint64_t (**)(__int32 **, void **, _QWORD, uint64_t, void **, __int32 **))*a1[5] + 15))(a1[5], v84, *(unsigned __int8 *)a1[9], 1, __p, a1[7]);
        v32 = v85;
        if (!v85)
          goto LABEL_34;
      }
      else
      {
        v31 = 0;
        v32 = v85;
        if (!v85)
          goto LABEL_34;
      }
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (v34)
      {
LABEL_34:
        if ((v31 & 1) == 0)
          goto LABEL_18;
        goto LABEL_35;
      }
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if ((v31 & 1) == 0)
      {
LABEL_18:
        v23 = 1;
        v24 = (_QWORD *)v87;
        if ((_QWORD)v87)
          goto LABEL_19;
        goto LABEL_20;
      }
LABEL_35:
      v36 = (char *)v90;
      v35 = v91;
      v37 = 126 - 2 * __clz((v91 - (_BYTE *)v90) >> 2);
      v84 = __p;
      if (v91 == v90)
        v38 = 0;
      else
        v38 = v37;
      sub_2394A77DC((uint64_t)v90, (unsigned int *)v91, &v84, v38, 1);
      if (a5)
        std::mutex::lock(a5);
      if (v35 != v36)
      {
        v39 = 0;
        v40 = 0;
        do
        {
          if (*(_BYTE *)a1[10])
          {
            LODWORD(v43) = *(_DWORD *)&v36[4 * v39];
          }
          else
          {
            v44 = *(_DWORD *)a1[11];
            if (v44 >= 1 && v40 >= v44)
              break;
            v43 = *(unsigned int *)&v36[4 * v39];
            if (v18 == v43)
              goto LABEL_46;
          }
          v46 = a1[12];
          v47 = v46[1];
          if (*((_BYTE *)v47 + 8))
          {
            v48 = *(__int32 **)*v46;
            v49 = (__int32 *)*((_QWORD *)*v46 + 1);
            v50 = v49 - v48;
            v52 = **(_QWORD **)v47;
            v51 = *(_QWORD *)(*(_QWORD *)v47 + 8);
            v53 = (v51 - v52) >> 3;
            if (v50 <= v53)
            {
              v41 = wmemchr(v48, v43, v50);
              if (v41)
                v42 = v41;
              else
                v42 = v49;
              if (v42 != *((__int32 **)*v46 + 1))
                goto LABEL_46;
              LODWORD(v43) = *(_DWORD *)&v36[4 * v39];
              v55 = (unint64_t)__p[1];
              if (!__p[1])
                goto LABEL_46;
              goto LABEL_63;
            }
            if (v52 == v51)
            {
LABEL_61:
              if (v52 + 8 * v53 == v51)
                goto LABEL_46;
            }
            else
            {
              v54 = 0;
              while (*(_QWORD *)(v52 + v54) != v43)
              {
                v54 += 8;
                if (v52 + v54 == v51)
                  goto LABEL_61;
              }
              if (v52 + 8 * (v54 >> 3) == v51)
                goto LABEL_46;
            }
          }
          v55 = (unint64_t)__p[1];
          if (!__p[1])
            goto LABEL_46;
LABEL_63:
          v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
          v56.i16[0] = vaddlv_u8(v56);
          if (v56.u32[0] > 1uLL)
          {
            v57 = v43;
            if (v55 <= v43)
              v57 = v43 % v55;
          }
          else
          {
            v57 = ((_DWORD)v55 - 1) & v43;
          }
          v58 = (uint64_t **)*((_QWORD *)__p[0] + v57);
          if (!v58)
            goto LABEL_46;
          v59 = *v58;
          if (!v59)
            goto LABEL_46;
          if (v56.u32[0] < 2uLL)
          {
            v60 = v55 - 1;
            while (1)
            {
              v62 = v59[1];
              if (v62 == v43)
              {
                if (*((_DWORD *)v59 + 4) == (_DWORD)v43)
                  goto LABEL_87;
              }
              else if ((v62 & v60) != v57)
              {
                goto LABEL_46;
              }
              v59 = (uint64_t *)*v59;
              if (!v59)
                goto LABEL_46;
            }
          }
          while (1)
          {
            v61 = v59[1];
            if (v61 == v43)
              break;
            if (v61 >= v55)
              v61 %= v55;
            if (v61 != v57)
              goto LABEL_46;
LABEL_72:
            v59 = (uint64_t *)*v59;
            if (!v59)
              goto LABEL_46;
          }
          if (*((_DWORD *)v59 + 4) != (_DWORD)v43)
            goto LABEL_72;
LABEL_87:
          v63 = *((_DWORD *)v59 + 5);
          v64 = a4;
          v66 = a4[1];
          v65 = (unint64_t)a4[2];
          if ((unint64_t)v66 < v65)
          {
            *(_DWORD *)v66 = v18;
            *((_DWORD *)v66 + 1) = v43;
            v67 = v66 + 12;
            *((_DWORD *)v66 + 2) = v63;
            goto LABEL_103;
          }
          v68 = *a4;
          v69 = 0xAAAAAAAAAAAAAAABLL * ((v66 - *a4) >> 2);
          v70 = v69 + 1;
          if (v69 + 1 > 0x1555555555555555)
            sub_2394189F8();
          v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v68) >> 2);
          if (2 * v71 > v70)
            v70 = 2 * v71;
          if (v71 >= 0xAAAAAAAAAAAAAAALL)
            v72 = 0x1555555555555555;
          else
            v72 = v70;
          if (v72)
          {
            if (v72 > 0x1555555555555555)
              sub_239418A80();
            v73 = (char *)operator new(12 * v72);
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[12 * v69];
          *(_DWORD *)v74 = v18;
          *((_DWORD *)v74 + 1) = v43;
          *((_DWORD *)v74 + 2) = v63;
          v75 = v74;
          if (v66 == v68)
          {
            v64 = a4;
            v79 = &v73[12 * v72];
            v67 = v74 + 12;
            *a4 = v74;
            a4[1] = v74 + 12;
            a4[2] = v79;
            if (v66)
              goto LABEL_102;
          }
          else
          {
            do
            {
              v76 = *(_QWORD *)(v66 - 12);
              v66 -= 12;
              v77 = *((_DWORD *)v66 + 2);
              *(_QWORD *)(v75 - 12) = v76;
              v75 -= 12;
              *((_DWORD *)v75 + 2) = v77;
            }
            while (v66 != v68);
            v64 = a4;
            v66 = *a4;
            v78 = &v73[12 * v72];
            v67 = v74 + 12;
            *a4 = v75;
            a4[1] = v74 + 12;
            a4[2] = v78;
            if (v66)
LABEL_102:
              operator delete(v66);
          }
LABEL_103:
          v64[1] = v67;
          ++v40;
          v36 = (char *)v90;
          v35 = v91;
LABEL_46:
          ++v39;
        }
        while (v39 < (v35 - v36) >> 2);
      }
      a5 = v83;
      if (v83)
        std::mutex::unlock(v83);
      kdebug_trace();
      v15 = v82;
      v23 = 0;
      v24 = (_QWORD *)v87;
      if ((_QWORD)v87)
      {
        do
        {
LABEL_19:
          v25 = (_QWORD *)*v24;
          operator delete(v24);
          v24 = v25;
        }
        while (v25);
      }
LABEL_20:
      v26 = __p[0];
      __p[0] = 0;
      if (v26)
        operator delete(v26);
      sub_2396FD3E8((uint64_t)v89);
      if (++v16 == v15)
        v17 = 1;
      else
        v17 = v23;
    }
    while ((v17 & 1) == 0);
  }
  if (v90)
    operator delete(v90);
}

void sub_2394A67D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (a20 < 0)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394A685C(_QWORD *a1, void *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, int a6, char a7, int a8)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t *v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _DWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  char *i;
  int v88;
  int64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *v98;
  _QWORD *v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v112;
  BOOL v114;
  BOOL v116;
  BOOL v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t *v129;
  void **v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  void *v135[2];
  void *v136[2];
  int v137;
  void *__p[2];
  void *v139[2];
  _QWORD *v140;
  __int128 v141;
  uint64_t v142;
  int v143;
  char v144;
  _BYTE v145[24];
  _BYTE *v146;
  _BYTE v147[568];
  uint64_t v148;

  v10 = (uint64_t)a5;
  v148 = *MEMORY[0x24BDAC8D0];
  v144 = a7;
  v16 = *a3;
  v15 = a3[1];
  sub_2396FD800(a5, (uint64_t)v145);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 2);
  __p[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v147, 0x5555555555555556 * ((v15 - v16) >> 2), v145, __p, 1.0);
  v18 = v146;
  if (v146 == v145)
  {
    v19 = 4;
    v18 = v145;
    goto LABEL_5;
  }
  if (v146)
  {
    v19 = 5;
LABEL_5:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  kdebug_trace();
  v20 = (a1[1] - *a1) >> 3;
  if ((int)v20 >= a6 && a6 >= 0)
    LODWORD(v20) = a6;
  v143 = v20;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v139 = 0u;
  LODWORD(v140) = 1065353216;
  v142 = 0;
  v141 = 0uLL;
  sub_239433E6C((uint64_t)a4, (uint64_t *)__p);
  v22 = (void *)a4[5];
  if (v22)
  {
    a4[6] = v22;
    operator delete(v22);
    a4[5] = 0;
    a4[6] = 0;
    a4[7] = 0;
  }
  v130 = (void **)(a4 + 5);
  *(_OWORD *)(a4 + 5) = v141;
  a4[7] = v142;
  v142 = 0;
  v141 = 0uLL;
  v23 = v139[0];
  if (v139[0])
  {
    do
    {
      v28 = (_QWORD *)*v23;
      v29 = (void *)v23[6];
      if (v29)
      {
        v23[7] = v29;
        operator delete(v29);
      }
      v30 = (void *)v23[3];
      if (v30)
      {
        v23[4] = v30;
        operator delete(v30);
      }
      operator delete(v23);
      v23 = v28;
    }
    while (v28);
  }
  v24 = __p[0];
  __p[0] = 0;
  if (v24)
    operator delete(v24);
  v25 = *a3;
  v26 = a3[1];
  if (v26 == *a3)
  {
    HIBYTE(v139[0]) = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C((uint64_t)v147, (uint64_t)__p);
    if (SHIBYTE(v139[0]) < 0)
      operator delete(__p[0]);
    v32 = 1;
    goto LABEL_124;
  }
  *(_OWORD *)v135 = 0u;
  *(_OWORD *)v136 = 0u;
  v137 = 1065353216;
  __p[0] = a2;
  __p[1] = a1;
  v139[0] = v135;
  v139[1] = &v143;
  v27 = v25 + 4;
  v140 = a4;
  *(_QWORD *)&v141 = &v144;
  while (!sub_2396FD7B0(v10))
  {
    v132 = 0;
    LOBYTE(v131[0]) = 0;
    sub_2396FD394(v133, (uint64_t)v147, (__int128 *)v131);
    if (v132 < 0)
    {
      operator delete(v131[0]);
      if (*(_DWORD *)(v27 - 4) != *(_DWORD *)v27)
      {
LABEL_29:
        sub_2394A72B0((uint64_t)__p, (uint64_t *)(v27 - 4), (_DWORD *)v27, (float *)(v27 + 4));
        if (a8)
          sub_2394A72B0((uint64_t)__p, (uint64_t *)v27, (_DWORD *)(v27 - 4), (float *)(v27 + 4));
      }
    }
    else if (*(_DWORD *)(v27 - 4) != *(_DWORD *)v27)
    {
      goto LABEL_29;
    }
    sub_2396FD3E8((uint64_t)v133);
    v31 = v27 + 8;
    v27 += 12;
    if (v31 == v26)
    {
      v33 = (_BYTE *)a4[5];
      if (v17 > (uint64_t)(a4[7] - (_QWORD)v33) >> 3)
      {
        if (v17 >> 61)
          sub_2394189F8();
        v34 = (_BYTE *)a4[6];
        v35 = (char *)operator new(8 * v17);
        v36 = v34 - v33;
        v37 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
        v38 = v37;
        if (v34 != v33)
        {
          if ((unint64_t)(v36 - 8) < 0x58)
          {
            v38 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
            goto LABEL_44;
          }
          v38 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
          if (v34 - v35 - (v36 & 0xFFFFFFFFFFFFFFF8) < 0x20)
            goto LABEL_174;
          v39 = v36 >> 3;
          v40 = ((unint64_t)(v36 - 8) >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v34[-v41];
          v38 = &v37[-v41];
          v43 = &v35[8 * v39 - 16];
          v44 = (__int128 *)(v34 - 16);
          v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v46 = *v44;
            *((_OWORD *)v43 - 1) = *(v44 - 1);
            *(_OWORD *)v43 = v46;
            v43 -= 32;
            v44 -= 2;
            v45 -= 4;
          }
          while (v45);
          v34 = v42;
          if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_174:
            do
            {
LABEL_44:
              v47 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *((_QWORD *)v38 - 1) = v47;
              v38 -= 8;
            }
            while (v34 != v33);
          }
        }
        a4[5] = v38;
        a4[6] = v37;
        a4[7] = &v35[8 * v17];
        if (v33)
          operator delete(v33);
      }
      v48 = v136[0];
      if (v136[0])
      {
        v128 = v10;
        while (1)
        {
          v50 = (unint64_t *)v48[3];
          v49 = (unint64_t *)v48[4];
          if (v50 != v49)
            break;
LABEL_49:
          v48 = (_QWORD *)*v48;
          if (!v48)
            goto LABEL_90;
        }
        v129 = (unint64_t *)v48[4];
LABEL_59:
        if (sub_2396FD7B0(v10))
          break;
        v132 = 0;
        LOBYTE(v131[0]) = 0;
        sub_2396FD394(v133, (uint64_t)v147, (__int128 *)v131);
        if (v132 < 0)
        {
          operator delete(v131[0]);
          v53 = *v50;
          v54 = v48[2];
          v56 = (char *)a4[6];
          v55 = a4[7];
          if ((unint64_t)v56 < v55)
          {
LABEL_52:
            if (v53 >= v54)
              v51 = v54;
            else
              v51 = v53;
            if (v53 <= v54)
              v52 = v54;
            else
              v52 = v53;
            *(_DWORD *)v56 = v51;
            *((_DWORD *)v56 + 1) = v52;
            a4[6] = v56 + 8;
            sub_2396FD3E8((uint64_t)v133);
            v50 += 2;
            if (v50 == v49)
              goto LABEL_49;
            goto LABEL_59;
          }
        }
        else
        {
          v53 = *v50;
          v54 = v48[2];
          v56 = (char *)a4[6];
          v55 = a4[7];
          if ((unint64_t)v56 < v55)
            goto LABEL_52;
        }
        v57 = (char *)*v130;
        v58 = v56 - (_BYTE *)*v130;
        v59 = v58 >> 3;
        v60 = (v58 >> 3) + 1;
        if (v60 >> 61)
          sub_2394189F8();
        v61 = v55 - (_QWORD)v57;
        if (v61 >> 2 > v60)
          v60 = v61 >> 2;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62 >> 61)
          sub_239418A80();
        v63 = operator new(8 * v62);
        v64 = &v63[2 * v59];
        if (v53 < v54)
        {
          *v64 = v53;
          v63[2 * v59 + 1] = v48[2];
          if (v56 != v57)
            goto LABEL_73;
LABEL_76:
          v66 = (char *)&v63[2 * v59];
LABEL_82:
          v75 = v64 + 2;
          a4[5] = v66;
          a4[6] = v64 + 2;
          a4[7] = &v63[2 * v62];
          if (v57)
            operator delete(v57);
          a4[6] = v75;
          sub_2396FD3E8((uint64_t)v133);
          v10 = v128;
          v49 = v129;
          v50 += 2;
          if (v50 == v129)
            goto LABEL_49;
          goto LABEL_59;
        }
        *v64 = v48[2];
        v63[2 * v59 + 1] = v53;
        if (v56 == v57)
          goto LABEL_76;
LABEL_73:
        v65 = v56 - 8 - v57;
        if (v65 >= 0x58)
        {
          v66 = (char *)&v63[2 * v59];
          if ((unint64_t)(v56 - ((char *)v63 + v58)) >= 0x20)
          {
            v67 = (v65 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v69 = &v56[-v68];
            v66 = (char *)&v64[v68 / 0xFFFFFFFFFFFFFFFCLL];
            v70 = &v63[2 * v59 - 4];
            v71 = v56 - 16;
            v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v73 = *(_OWORD *)v71;
              *(v70 - 1) = *((_OWORD *)v71 - 1);
              *v70 = v73;
              v70 -= 2;
              v71 -= 32;
              v72 -= 4;
            }
            while (v72);
            v56 = v69;
            if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_82;
          }
        }
        else
        {
          v66 = (char *)&v63[2 * v59];
        }
        do
        {
          v74 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *((_QWORD *)v66 - 1) = v74;
          v66 -= 8;
        }
        while (v56 != v57);
        goto LABEL_82;
      }
LABEL_90:
      v77 = a4[5];
      v78 = (unsigned int *)a4[6];
      v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
      if (v78 == (unsigned int *)v77)
        v80 = 0;
      else
        v80 = v79;
      sub_239434DC0(v77, v78, (uint64_t)v133, v80, 1);
      v81 = (char *)a4[5];
      v82 = (char *)a4[6];
      if (v81 == v82)
        goto LABEL_119;
      v83 = v81 - 8;
      do
      {
        if (v83 + 16 == v82)
          goto LABEL_119;
        v85 = *((_DWORD *)v83 + 2);
        v83 += 8;
        v84 = v85;
      }
      while (v85 != *((_DWORD *)v83 + 2) || *((_DWORD *)v83 + 1) != *((_DWORD *)v83 + 3));
      for (i = v83 + 16; i != v82; i += 8)
      {
        v88 = v84;
        v84 = *(_DWORD *)i;
        if (v88 != *(_DWORD *)i || *((_DWORD *)v83 + 1) != *((_DWORD *)i + 1))
        {
          *((_DWORD *)v83 + 2) = v84;
          v83 += 8;
          *((_DWORD *)v83 + 1) = *((_DWORD *)i + 1);
        }
      }
      v96 = v83 + 8;
      v97 = v82 - v96;
      if (v82 == v96)
      {
LABEL_119:
        kdebug_trace();
        sub_2396FD7B0(v10);
        v134 = 0;
        LOBYTE(v133[0]) = 0;
        sub_2396FCC6C((uint64_t)v147, (uint64_t)v133);
        if (v134 < 0)
          operator delete(v133[0]);
        v32 = sub_2396FD7B0(v10) ^ 1;
        v76 = v136[0];
        if (!v136[0])
          goto LABEL_122;
        do
        {
LABEL_126:
          v100 = (_QWORD *)*v76;
          v101 = (void *)v76[3];
          if (v101)
          {
            v76[4] = v101;
            operator delete(v101);
          }
          operator delete(v76);
          v76 = v100;
        }
        while (v100);
        goto LABEL_122;
      }
      v90 = v96 - v81;
      v91 = &v81[(v96 - v81) & 0xFFFFFFFFFFFFFFF8];
      v92 = &v91[v97];
      if (&v91[v97] == v82)
      {
        v95 = v91;
      }
      else
      {
        v93 = v90 & 0xFFFFFFFFFFFFFFF8;
        v94 = v82 - &v81[v97 + (v90 & 0xFFFFFFFFFFFFFFF8)] - 8;
        if (v94 < 0x138)
        {
          v95 = v91;
          goto LABEL_113;
        }
        v102 = v93 + (v94 & 0xFFFFFFFFFFFFFFF8);
        v103 = (unint64_t)&v81[v102 | 4];
        v104 = (unint64_t)&v81[v93 | 4];
        v105 = (unint64_t)&v81[v102 + 8];
        v106 = &v81[v97 + v93];
        v107 = &v106[v94 & 0xFFFFFFFFFFFFFFF8];
        v108 = (unint64_t)(v107 + 4);
        v109 = (unint64_t)(v106 + 4);
        v110 = (unint64_t)(v107 + 8);
        v112 = v91 < v107 + 4 && (unint64_t)v92 < v103;
        v114 = (unint64_t)v91 < v110 && v109 < v103;
        v116 = v104 < v108 && (unint64_t)v92 < v105;
        v118 = v104 < v110 && v109 < v105;
        if (v104 < v103 && (unint64_t)v91 < v105)
        {
          v95 = v91;
          goto LABEL_113;
        }
        if (v112)
        {
          v95 = v91;
          goto LABEL_113;
        }
        if (v114)
        {
          v95 = v91;
          goto LABEL_113;
        }
        if (v116)
        {
          v95 = v91;
          goto LABEL_113;
        }
        if (v118)
        {
          v95 = v91;
          goto LABEL_113;
        }
        v120 = v97 >> 3;
        v121 = (v94 >> 3) + 1;
        v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFF8);
        v95 = &v91[v122];
        v92 += v122;
        v123 = 8 * v120;
        v124 = v121 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v125 = *(_OWORD *)&v91[v123 + 16];
          v127 = *(_OWORD *)&v91[v123 + 32];
          v126 = *(_OWORD *)&v91[v123 + 48];
          *(_OWORD *)v91 = *(_OWORD *)&v91[v123];
          *((_OWORD *)v91 + 1) = v125;
          *((_OWORD *)v91 + 2) = v127;
          *((_OWORD *)v91 + 3) = v126;
          v91 += 64;
          v124 -= 8;
        }
        while (v124);
        if (v121 != (v121 & 0x3FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_113:
            *(_DWORD *)v95 = *(_DWORD *)v92;
            *((_DWORD *)v95 + 1) = *((_DWORD *)v92 + 1);
            v95 += 8;
            v92 += 8;
          }
          while (v92 != v82);
        }
      }
      a4[6] = v95;
      goto LABEL_119;
    }
  }
  v134 = 0;
  LOBYTE(v133[0]) = 0;
  sub_2396FCC6C((uint64_t)v147, (uint64_t)v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v32 = 0;
  v76 = v136[0];
  if (v136[0])
    goto LABEL_126;
LABEL_122:
  v98 = v135[0];
  v135[0] = 0;
  if (v98)
    operator delete(v98);
LABEL_124:
  sub_2396FCD14((uint64_t)v147);
  return v32;
}

void sub_2394A71A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a23 < 0)
    operator delete(__p);
  sub_2394630E4((uint64_t)&a25);
  sub_2396FCD14((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2394A72B0(uint64_t a1, uint64_t *a2, _DWORD *a3, float *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  float v64;
  unint64_t v65;
  float *v66;
  char *v67;
  float *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  float *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t *v80;

  v9 = **(_QWORD ***)a1;
  v8 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  if (v9 != v8)
  {
    while (*v9 != *(_DWORD *)a2)
    {
      if (++v9 == v8)
      {
        v9 = *(_QWORD **)(*(_QWORD *)a1 + 8);
        break;
      }
    }
  }
  if (v9 != v8)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD **)v10;
    v11 = *(_QWORD **)(v10 + 8);
    if (v12 != v11)
    {
      while (*v12 != *a3)
      {
        if (++v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
    if (v12 != v11)
    {
      v13 = *(_QWORD *)(a1 + 16);
      v79 = *(unsigned int *)a2;
      v80 = &v79;
      v14 = sub_2394A9814(v13, &v79, (uint64_t)&unk_239EC6E98, (uint64_t **)&v80);
      v15 = *a4 <= 0.0 || **(_DWORD **)(a1 + 24) <= (int)((v14[4] - v14[3]) >> 4);
      v16 = !v15;
      if (!v15 || **(_BYTE **)(a1 + 40))
      {
        v17 = *(_QWORD *)(a1 + 32);
        v80 = (unint64_t *)a2;
        v18 = sub_2394A9B44(v17, (unsigned int *)a2, (uint64_t)&unk_239EC6E98, (_DWORD **)&v80);
        v20 = (char *)*((_QWORD *)v18 + 4);
        v19 = *((_QWORD *)v18 + 5);
        if ((unint64_t)v20 >= v19)
        {
          v22 = (char *)*((_QWORD *)v18 + 3);
          v23 = (v20 - v22) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            sub_2394189F8();
          v25 = v19 - (_QWORD)v22;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            if (v26 >> 62)
              goto LABEL_83;
            v27 = operator new(4 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          v29 = &v27[4 * v26];
          *v28 = *a3;
          v21 = v28 + 1;
          if (v20 != v22)
          {
            v30 = v20 - v22 - 4;
            if (v30 < 0x2C)
              goto LABEL_89;
            if ((unint64_t)(v22 - v27) < 0x20)
              goto LABEL_89;
            v31 = (v30 >> 2) + 1;
            v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            v33 = &v20[-v32];
            v28 = (_DWORD *)((char *)v28 - v32);
            v34 = &v27[4 * v23 - 16];
            v35 = v20 - 16;
            v36 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 8;
            }
            while (v36);
            v20 = v33;
            if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_89:
              do
              {
                v38 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *--v28 = v38;
              }
              while (v20 != v22);
            }
          }
          *((_QWORD *)v18 + 3) = v28;
          *((_QWORD *)v18 + 4) = v21;
          *((_QWORD *)v18 + 5) = v29;
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v20 = *a3;
          v21 = v20 + 4;
        }
        *((_QWORD *)v18 + 4) = v21;
        v39 = *(_QWORD *)(a1 + 32);
        v80 = (unint64_t *)a2;
        v40 = sub_2394A9B44(v39, (unsigned int *)a2, (uint64_t)&unk_239EC6E98, (_DWORD **)&v80);
        v42 = (char *)*((_QWORD *)v40 + 7);
        v41 = *((_QWORD *)v40 + 8);
        if ((unint64_t)v42 >= v41)
        {
          v44 = (char *)*((_QWORD *)v40 + 6);
          v45 = (v42 - v44) >> 2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62)
            sub_2394189F8();
          v47 = v41 - (_QWORD)v44;
          if (v47 >> 1 > v46)
            v46 = v47 >> 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v48 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            if (v48 >> 62)
              goto LABEL_83;
            v49 = operator new(4 * v48);
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[4 * v45];
          v51 = &v49[4 * v48];
          *v50 = *(_DWORD *)a4;
          v43 = v50 + 1;
          if (v42 != v44)
          {
            v52 = v42 - v44 - 4;
            if (v52 < 0x2C)
              goto LABEL_90;
            if ((unint64_t)(v44 - v49) < 0x20)
              goto LABEL_90;
            v53 = (v52 >> 2) + 1;
            v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            v55 = &v42[-v54];
            v50 = (_DWORD *)((char *)v50 - v54);
            v56 = &v49[4 * v45 - 16];
            v57 = v42 - 16;
            v58 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 8;
            }
            while (v58);
            v42 = v55;
            if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_90:
              do
              {
                v60 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *--v50 = v60;
              }
              while (v42 != v44);
            }
          }
          *((_QWORD *)v40 + 6) = v50;
          *((_QWORD *)v40 + 7) = v43;
          *((_QWORD *)v40 + 8) = v51;
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(float *)v42 = *a4;
          v43 = v42 + 4;
        }
        *((_QWORD *)v40 + 7) = v43;
        if (!v16)
          return;
        v61 = *(_QWORD *)(a1 + 16);
        v79 = *(unsigned int *)a2;
        v80 = &v79;
        v62 = sub_2394A9814(v61, &v79, (uint64_t)&unk_239EC6E98, (uint64_t **)&v80);
        v63 = *a3;
        v64 = *a4;
        v66 = (float *)v62[4];
        v65 = v62[5];
        if ((unint64_t)v66 < v65)
        {
          *(_QWORD *)v66 = v63;
          v66[2] = v64;
          v67 = (char *)(v66 + 4);
          goto LABEL_79;
        }
        v68 = (float *)v62[3];
        v69 = ((char *)v66 - (char *)v68) >> 4;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 60)
          sub_2394189F8();
        v71 = v65 - (_QWORD)v68;
        if (v71 >> 3 > v70)
          v70 = v71 >> 3;
        v72 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0;
        v73 = 0xFFFFFFFFFFFFFFFLL;
        if (!v72)
          v73 = v70;
        if (!(v73 >> 60))
        {
          v74 = 16 * v73;
          v75 = (char *)operator new(16 * v73);
          v76 = (float *)&v75[16 * v69];
          v77 = &v75[v74];
          *(_QWORD *)v76 = v63;
          v76[2] = v64;
          v67 = (char *)(v76 + 4);
          if (v66 == v68)
          {
            v62[3] = v76;
            v62[4] = v67;
            v62[5] = v77;
            if (!v68)
              goto LABEL_79;
          }
          else
          {
            do
            {
              v78 = (char *)(v76 - 4);
              *((_OWORD *)v76 - 1) = *((_OWORD *)v66 - 1);
              v66 -= 4;
              v76 -= 4;
            }
            while (v66 != v68);
            v62[3] = v78;
            v62[4] = v67;
            v62[5] = v77;
            if (!v68)
              goto LABEL_79;
          }
          operator delete(v68);
LABEL_79:
          v62[4] = v67;
          return;
        }
LABEL_83:
        sub_239418A80();
      }
    }
  }
}

uint64_t sub_2394A77DC(uint64_t result, unsigned int *a2, _QWORD **a3, uint64_t a4, char a5)
{
  _QWORD **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  _BOOL4 v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  _BOOL4 v60;
  unsigned int v61;
  uint64_t *v62;
  int8x8_t v63;
  unsigned int *v64;
  unsigned int *v65;
  uint8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t **v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint8x8_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t **v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t **v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  BOOL v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  int8x8_t v124;
  uint64_t v125;
  uint8x8_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float **v141;
  float *v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t **v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t **v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  _QWORD **v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  unsigned int v159;
  unsigned int v160;
  BOOL v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t *v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int *v174;
  unint64_t v175;
  unsigned int v176;
  int8x8_t v177;
  uint8x8_t v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t **v184;
  uint64_t *v185;
  unsigned int *v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t **v190;
  uint64_t *v191;
  uint64_t v192;
  unint64_t v193;
  int64_t v194;
  _QWORD *v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  _BOOL4 v202;
  unsigned int *v203;
  unsigned int v204;
  _BOOL4 v205;
  unsigned int *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  unsigned int v212;
  _QWORD *v213;
  unsigned int *v214;
  unint64_t v215;
  unsigned int *v216;
  unsigned int *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  int8x8_t v221;
  uint8x8_t v222;
  unint64_t v223;
  uint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t **v230;
  uint64_t *v231;
  uint64_t v232;
  unint64_t v233;
  unsigned int *v234;
  uint64_t v235;
  uint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  unint64_t v241;
  int8x8_t v242;
  uint8x8_t v243;
  uint64_t v244;
  uint64_t v245;
  BOOL v247;
  unint64_t v248;
  unsigned int *v249;
  unint64_t v250;
  uint64_t **v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t **v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  unsigned int v260;
  unsigned int *v261;
  unsigned int *v262;
  unint64_t v263;
  unsigned int v264;
  int8x8_t v265;
  uint8x8_t v266;
  BOOL v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t **v272;
  uint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t **v277;
  uint64_t *v278;
  uint64_t v279;
  unint64_t v280;
  unsigned int v281;
  int64_t v282;
  _QWORD *v284;
  unsigned int v286;
  int64_t v288;
  unsigned int *v289;

  v5 = a3;
  v6 = (unsigned int *)result;
LABEL_2:
  v7 = v6;
  v8 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)v8 - (char *)v7;
    v11 = v8 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v155 = v5;
        v156 = *(a2 - 1);
        v157 = *v7;
        result = sub_2394A9198(*v155, v156, *v7);
        if ((_DWORD)result)
        {
          *v7 = v156;
          *(a2 - 1) = v157;
        }
        return result;
      case 3:
        v158 = *v5;
        v159 = *v7;
        v160 = v7[1];
        v161 = sub_2394A9198(v158, v160, *v7);
        v162 = *(a2 - 1);
        result = sub_2394A9198(v158, v162, v160);
        if (v161)
        {
          if ((_DWORD)result)
          {
            *v7 = v162;
          }
          else
          {
            *v7 = v160;
            v7[1] = v159;
            v281 = *(a2 - 1);
            result = sub_2394A9198(v158, v281, v159);
            if (!(_DWORD)result)
              return result;
            v7[1] = v281;
          }
          *(a2 - 1) = v159;
        }
        else if ((_DWORD)result)
        {
          v7[1] = v162;
          *(a2 - 1) = v160;
          v167 = v7[1];
          goto LABEL_505;
        }
        return result;
      case 4:
        return sub_2394A9670(v7, v7 + 1, v7 + 2, a2 - 1, *v5);
      case 5:
        v163 = v7 + 2;
        v164 = v7 + 3;
        sub_2394A9670(v7, v7 + 1, v7 + 2, v7 + 3, *v5);
        v165 = *(a2 - 1);
        v166 = v7[3];
        v158 = *v5;
        result = sub_2394A9198(*v5, v165, v9[3]);
        if ((_DWORD)result)
        {
          *v164 = v165;
          *(a2 - 1) = v166;
          v167 = *v164;
          v168 = *v163;
          result = sub_2394A9198(v158, *v164, *v163);
          if ((_DWORD)result)
          {
            *v163 = v167;
            *v164 = v168;
            v169 = v9[1];
            result = sub_2394A9198(v158, v167, v169);
            if ((_DWORD)result)
            {
              v9[1] = v167;
              v9[2] = v169;
LABEL_505:
              v260 = *v9;
              result = sub_2394A9198(v158, v167, *v9);
              if ((_DWORD)result)
              {
                *v9 = v167;
                v9[1] = v260;
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 95)
        {
          v289 = v7;
          if (!a4)
          {
            if (v7 != v8)
            {
              v194 = (unint64_t)(v11 - 2) >> 1;
              v195 = *v5;
              v288 = v194;
              do
              {
                v196 = v194;
                if (v288 >= v194)
                {
                  v197 = (2 * v194) | 1;
                  v198 = &v9[v197];
                  v199 = 2 * v194 + 2;
                  v200 = *v198;
                  v282 = v194;
                  if (v199 < v11)
                  {
                    v201 = v198[1];
                    v202 = sub_2394A9198(v195, v200, v201);
                    if (v202)
                      v200 = v201;
                    v196 = v282;
                    if (v202)
                    {
                      ++v198;
                      v197 = v199;
                    }
                  }
                  v203 = &v9[v196];
                  v286 = *v203;
                  result = sub_2394A9198(v195, v200, *v203);
                  if ((result & 1) != 0)
                  {
                    v5 = a3;
                  }
                  else
                  {
                    v284 = v195;
                    while (1)
                    {
                      v206 = v198;
                      *v203 = v200;
                      if (v288 < v197)
                        break;
                      v207 = (2 * v197) | 1;
                      v198 = &v9[v207];
                      v208 = 2 * v197 + 2;
                      v200 = *v198;
                      if (v208 < v11)
                      {
                        v204 = v198[1];
                        v205 = sub_2394A9198(v284, *v198, v204);
                        if (v205)
                        {
                          v200 = v204;
                          ++v198;
                        }
                        v9 = v289;
                        if (v205)
                          v197 = v208;
                        else
                          v197 = v207;
                        result = sub_2394A9198(v284, v200, v286);
                        v203 = v206;
                        if ((_DWORD)result)
                          break;
                      }
                      else
                      {
                        v197 = (2 * v197) | 1;
                        result = sub_2394A9198(v284, v200, v286);
                        v203 = v206;
                        if ((_DWORD)result)
                          break;
                      }
                    }
                    *v206 = v286;
                    v196 = v282;
                    v5 = a3;
                    v195 = *a3;
                  }
                }
                v194 = v196 - 1;
              }
              while (v196);
              v209 = (unint64_t)v10 >> 2;
              do
              {
                v211 = 0;
                v212 = *v9;
                v213 = *v5;
                v214 = v9;
                do
                {
                  v216 = v214;
                  v217 = &v214[v211];
                  v218 = v217[1];
                  v214 = v217 + 1;
                  v215 = v218;
                  v219 = 2 * v211;
                  v211 = (2 * v211) | 1;
                  v220 = v219 + 2;
                  if (v220 < v209)
                  {
                    v221 = (int8x8_t)v213[1];
                    if (v221)
                    {
                      v222 = (uint8x8_t)vcnt_s8(v221);
                      v222.i16[0] = vaddlv_u8(v222);
                      if (v222.u32[0] > 1uLL)
                      {
                        v223 = v215;
                        if (*(_QWORD *)&v221 <= v215)
                          v223 = v215 % *(_QWORD *)&v221;
                      }
                      else
                      {
                        v223 = (v221.i32[0] - 1) & v215;
                      }
                      v224 = *(uint64_t **)(*v213 + 8 * v223);
                      if (v224)
                      {
                        result = *v224;
                        if (*v224)
                        {
                          v225 = v214[1];
                          v226 = *(_QWORD *)&v221 - 1;
                          if (v222.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v227 = *(_QWORD *)(result + 8);
                              if (v227 == v215)
                              {
                                if (*(_DWORD *)(result + 16) == (_DWORD)v215)
                                  goto LABEL_426;
                              }
                              else if ((v227 & v226) != v223)
                              {
                                goto LABEL_403;
                              }
                              result = *(_QWORD *)result;
                              if (!result)
                                goto LABEL_403;
                            }
                          }
                          do
                          {
                            v228 = *(_QWORD *)(result + 8);
                            if (v228 == v215)
                            {
                              if (*(_DWORD *)(result + 16) == (_DWORD)v215)
                              {
LABEL_426:
                                if (v222.u32[0] > 1uLL)
                                {
                                  v229 = v214[1];
                                  if (*(_QWORD *)&v221 <= v225)
                                    v229 = v225 % *(_QWORD *)&v221;
                                }
                                else
                                {
                                  v229 = (v221.i32[0] - 1) & v225;
                                }
                                v230 = *(uint64_t ***)(*v213 + 8 * v229);
                                if (!v230)
                                  goto LABEL_402;
                                v231 = *v230;
                                if (!v231)
                                  goto LABEL_402;
                                if (v222.u32[0] < 2uLL)
                                {
                                  while (1)
                                  {
                                    v232 = v231[1];
                                    if (v232 == v225)
                                    {
                                      if (*((_DWORD *)v231 + 4) == (_DWORD)v225)
                                        goto LABEL_446;
                                    }
                                    else if ((v232 & v226) != v229)
                                    {
                                      goto LABEL_402;
                                    }
                                    v231 = (uint64_t *)*v231;
                                    if (!v231)
                                      goto LABEL_402;
                                  }
                                }
                                while (1)
                                {
                                  v233 = v231[1];
                                  if (v233 == v225)
                                  {
                                    if (*((_DWORD *)v231 + 4) == (_DWORD)v225)
                                    {
LABEL_446:
                                      if (*(float *)(result + 20) <= *((float *)v231 + 5))
                                        goto LABEL_403;
LABEL_402:
                                      LODWORD(v215) = v214[1];
                                      ++v214;
                                      v211 = v220;
                                      goto LABEL_403;
                                    }
                                  }
                                  else
                                  {
                                    if (v233 >= *(_QWORD *)&v221)
                                      v233 %= *(_QWORD *)&v221;
                                    if (v233 != v229)
                                      goto LABEL_402;
                                  }
                                  v231 = (uint64_t *)*v231;
                                  if (!v231)
                                    goto LABEL_402;
                                }
                              }
                            }
                            else
                            {
                              if (v228 >= *(_QWORD *)&v221)
                                v228 %= *(_QWORD *)&v221;
                              if (v228 != v223)
                                break;
                            }
                            result = *(_QWORD *)result;
                          }
                          while (result);
                        }
                      }
                    }
                  }
LABEL_403:
                  *v216 = v215;
                }
                while (v211 <= (uint64_t)((unint64_t)(v209 - 2) >> 1));
                v234 = a2 - 1;
                a2 = v234;
                if (v214 == v234)
                {
                  *v214 = v212;
                  goto LABEL_400;
                }
                *v214 = *v234;
                *v234 = v212;
                v235 = (char *)v214 - (char *)v9 + 4;
                if (v235 >= 5)
                {
                  v236 = *a3;
                  v237 = ((unint64_t)v235 >> 2) - 2;
                  v238 = v237 >> 1;
                  v239 = &v289[v237 >> 1];
                  v240 = *v239;
                  v241 = *v214;
                  result = sub_2394A9198(*a3, *v239, *v214);
                  if ((_DWORD)result)
                  {
                    *v214 = v240;
                    if (v237 < 2)
                      goto LABEL_501;
                    v242 = (int8x8_t)v236[1];
                    if (!*(_QWORD *)&v242)
                      goto LABEL_501;
                    v243 = (uint8x8_t)vcnt_s8(v242);
                    v243.i16[0] = vaddlv_u8(v243);
                    v244 = *(_QWORD *)&v242 - 1;
                    v245 = *v236;
                    v247 = *(_QWORD *)&v242 > v241 || v243.u32[0] < 2uLL;
LABEL_459:
                    v248 = v238 - 1;
                    v238 = (v238 - 1) >> 1;
                    v249 = &v289[v238];
                    v250 = *v249;
                    if (v243.u32[0] > 1uLL)
                    {
                      result = *v249;
                      if (*(_QWORD *)&v242 <= v250)
                        result = v250 % *(_QWORD *)&v242;
                    }
                    else
                    {
                      result = (*(_QWORD *)&v242 + 0xFFFFFFFFLL) & v250;
                    }
                    v251 = *(uint64_t ***)(v245 + 8 * result);
                    if (!v251)
                      goto LABEL_501;
                    v252 = *v251;
                    if (!v252)
                      goto LABEL_501;
                    if (v243.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v253 = v252[1];
                        if (v253 == v250)
                        {
                          if (*((_DWORD *)v252 + 4) == (_DWORD)v250)
                          {
                            v254 = *(_QWORD *)&v242 + 0xFFFFFFFFLL;
                            goto LABEL_479;
                          }
                        }
                        else if ((v253 & v244) != result)
                        {
                          goto LABEL_501;
                        }
                        v252 = (uint64_t *)*v252;
                        if (!v252)
                          goto LABEL_501;
                      }
                    }
                    while (1)
                    {
                      v255 = v252[1];
                      if (v255 == v250)
                      {
                        if (*((_DWORD *)v252 + 4) == (_DWORD)v250)
                        {
                          v254 = -1;
LABEL_479:
                          if (v247)
                            result = v254 & v241;
                          else
                            result = v241 % *(_QWORD *)&v242;
                          v256 = *(uint64_t ***)(v245 + 8 * result);
                          if (v256)
                          {
                            v257 = *v256;
                            if (v257)
                            {
                              if (v243.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v258 = v257[1];
                                  if (v258 == v241)
                                  {
                                    if (*((_DWORD *)v257 + 4) == (_DWORD)v241)
                                      goto LABEL_498;
                                  }
                                  else if ((v258 & v244) != result)
                                  {
                                    goto LABEL_499;
                                  }
                                  v257 = (uint64_t *)*v257;
                                  if (!v257)
                                    goto LABEL_499;
                                }
                              }
                              do
                              {
                                v259 = v257[1];
                                if (v259 == v241)
                                {
                                  if (*((_DWORD *)v257 + 4) == (_DWORD)v241)
                                  {
LABEL_498:
                                    if (*((float *)v252 + 5) > *((float *)v257 + 5))
                                      break;
LABEL_501:
                                    v249 = v239;
LABEL_502:
                                    *v249 = v241;
                                    goto LABEL_400;
                                  }
                                }
                                else
                                {
                                  if (v259 >= *(_QWORD *)&v242)
                                    v259 %= *(_QWORD *)&v242;
                                  if (v259 != result)
                                    break;
                                }
                                v257 = (uint64_t *)*v257;
                              }
                              while (v257);
                            }
                          }
LABEL_499:
                          *v239 = v250;
                          v239 = &v289[v238];
                          if (v248 <= 1)
                            goto LABEL_502;
                          goto LABEL_459;
                        }
                      }
                      else
                      {
                        if (v255 >= *(_QWORD *)&v242)
                          v255 %= *(_QWORD *)&v242;
                        if (v255 != result)
                          goto LABEL_501;
                      }
                      v252 = (uint64_t *)*v252;
                      if (!v252)
                        goto LABEL_501;
                    }
                  }
                }
LABEL_400:
                v210 = v209-- <= 2;
                v9 = v289;
                v5 = a3;
              }
              while (!v210);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          v14 = *v5;
          if ((unint64_t)v10 < 0x201)
          {
            v21 = *v7;
            v22 = *v13;
            v23 = sub_2394A9198(*v5, *v9, *v13);
            v8 = a2;
            v24 = *(a2 - 1);
            v25 = sub_2394A9198(v14, v24, v21);
            if (v23)
            {
              if (v25)
              {
                *v13 = v24;
                goto LABEL_31;
              }
              *v13 = v21;
              *v9 = v22;
              v43 = *(a2 - 1);
              if (sub_2394A9198(v14, v43, v22))
              {
                *v9 = v43;
LABEL_31:
                *(a2 - 1) = v22;
              }
            }
            else if (v25)
            {
              *v9 = v24;
              *(a2 - 1) = v21;
              v28 = *v9;
              v29 = *v13;
              if (sub_2394A9198(v14, *v9, *v13))
              {
                *v13 = v28;
                *v9 = v29;
                --a4;
                v30 = v29;
                if ((a5 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_54;
              }
            }
            --a4;
            v30 = *v9;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v15 = *v13;
          v16 = *v9;
          v17 = sub_2394A9198(*v5, *v13, *v9);
          v18 = *(a2 - 1);
          v19 = sub_2394A9198(v14, v18, v15);
          if (v17)
          {
            if (v19)
            {
              *v9 = v18;
              v20 = a2;
            }
            else
            {
              *v9 = v15;
              *v13 = v16;
              v20 = a2;
              v31 = *(a2 - 1);
              if (!sub_2394A9198(v14, v31, v16))
                goto LABEL_23;
              *v13 = v31;
            }
            *(v20 - 1) = v16;
          }
          else
          {
            v20 = a2;
            if (v19)
            {
              *v13 = v18;
              *(a2 - 1) = v15;
              v26 = *v13;
              v27 = *v9;
              if (sub_2394A9198(v14, *v13, *v9))
              {
                *v9 = v26;
                *v13 = v27;
              }
            }
          }
LABEL_23:
          v32 = &v9[v12];
          v35 = *(v32 - 1);
          v33 = v32 - 1;
          v34 = v35;
          v36 = v9[1];
          v37 = sub_2394A9198(v14, v35, v36);
          v38 = *(v20 - 2);
          v39 = sub_2394A9198(v14, v38, v35);
          if (v37)
          {
            if (v39)
            {
              v9[1] = v38;
              v40 = a2;
            }
            else
            {
              v9[1] = v34;
              *v33 = v36;
              v40 = a2;
              v44 = *(a2 - 2);
              if (!sub_2394A9198(v14, v44, v36))
                goto LABEL_37;
              *v33 = v44;
            }
            *(v40 - 2) = v36;
          }
          else
          {
            v40 = a2;
            if (v39)
            {
              *v33 = v38;
              *(a2 - 2) = v34;
              v41 = *v33;
              v42 = v9[1];
              if (sub_2394A9198(v14, *v33, v42))
              {
                v9[1] = v41;
                *v33 = v42;
              }
            }
          }
LABEL_37:
          v45 = &v9[v12];
          v48 = v45[1];
          v46 = v45 + 1;
          v47 = v48;
          v49 = v9[2];
          v50 = sub_2394A9198(v14, v48, v49);
          v51 = *(v40 - 3);
          v52 = sub_2394A9198(v14, v51, v48);
          if (v50)
          {
            v5 = a3;
            if (v52)
            {
              v9[2] = v51;
            }
            else
            {
              v9[2] = v47;
              *v46 = v49;
              v55 = *(a2 - 3);
              if (!sub_2394A9198(v14, v55, v49))
                goto LABEL_46;
              *v46 = v55;
            }
            *(a2 - 3) = v49;
          }
          else
          {
            v5 = a3;
            if (v52)
            {
              *v46 = v51;
              *(a2 - 3) = v47;
              v53 = *v46;
              v54 = v9[2];
              if (sub_2394A9198(v14, *v46, v54))
              {
                v9[2] = v53;
                *v46 = v54;
              }
            }
          }
LABEL_46:
          v56 = *v13;
          v57 = *v33;
          v58 = sub_2394A9198(v14, *v13, *v33);
          v59 = *v46;
          v60 = sub_2394A9198(v14, *v46, v56);
          if (v58)
          {
            if (!v60)
            {
              *v33 = v56;
              *v13 = v57;
              v33 = v13;
              v56 = v59;
              if (!sub_2394A9198(v14, v59, v57))
              {
                v56 = v57;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v33 = v59;
            *v46 = v57;
            goto LABEL_53;
          }
          if (!v60)
            goto LABEL_53;
          *v13 = v59;
          *v46 = v56;
          v46 = v13;
          v56 = v57;
          if (sub_2394A9198(v14, v59, v57))
            goto LABEL_52;
          v56 = v59;
LABEL_53:
          v61 = *v9;
          *v9 = v56;
          *v13 = v61;
          v8 = a2;
          --a4;
          v30 = *v9;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (!sub_2394A9198(v14, *(v9 - 1), v30))
          {
            result = sub_2394A9198(v14, v30, *(v8 - 1));
            if ((result & 1) != 0)
            {
              v7 = v9;
              do
              {
                v120 = v7[1];
                ++v7;
                result = sub_2394A9198(v14, v30, v120);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v121 = v9 + 1;
              do
              {
                v7 = v121;
                if (v121 >= v8)
                  break;
                ++v121;
                result = sub_2394A9198(v14, v30, *v7);
              }
              while (!(_DWORD)result);
            }
            v122 = v8;
            if (v7 < v8)
            {
              v122 = v8;
              do
              {
                v123 = *--v122;
                result = sub_2394A9198(v14, v30, v123);
              }
              while ((result & 1) != 0);
            }
            if (v7 < v122)
            {
              v125 = *v14;
              v124 = (int8x8_t)v14[1];
              v126 = (uint8x8_t)vcnt_s8(v124);
              v126.i16[0] = vaddlv_u8(v126);
              v127 = *(_QWORD *)&v124 > v30;
              v128 = 0xFFFFFFFFLL;
              v129 = *(_QWORD *)&v124 + 0xFFFFFFFFLL;
              v130 = *(_QWORD *)&v124 - 1;
              LODWORD(v131) = *v7;
              LODWORD(v132) = *v122;
              if (v126.u32[0] < 2uLL)
              {
                v127 = 1;
                v128 = *(_QWORD *)&v124 + 0xFFFFFFFFLL;
              }
              v133 = v128 & v30;
              do
              {
                *v7 = v132;
                *v122 = v131;
                do
                {
                  do
                  {
LABEL_224:
                    while (1)
                    {
                      v134 = v7[1];
                      ++v7;
                      v131 = v134;
                      v135 = v133;
                      if (!v127)
                        break;
                      v136 = *(uint64_t ***)(v125 + 8 * v133);
                      if (v136)
                        goto LABEL_226;
                    }
                    v135 = v30 % *(_QWORD *)&v124;
                    v136 = *(uint64_t ***)(v125 + 8 * (v30 % *(_QWORD *)&v124));
                  }
                  while (!v136);
LABEL_226:
                  v137 = *v136;
                }
                while (!v137);
                if (v126.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v138 = v137[1];
                    if (v138 == v30)
                    {
                      if (*((_DWORD *)v137 + 4) == (_DWORD)v30)
                        goto LABEL_243;
                    }
                    else if ((v138 & v130) != v135)
                    {
                      goto LABEL_224;
                    }
                    v137 = (uint64_t *)*v137;
                    if (!v137)
                      goto LABEL_224;
                  }
                }
                while (1)
                {
                  v139 = v137[1];
                  if (v139 == v30)
                    break;
                  if (v139 >= *(_QWORD *)&v124)
                    v139 %= *(_QWORD *)&v124;
                  if (v139 != v135)
                    goto LABEL_224;
LABEL_235:
                  v137 = (uint64_t *)*v137;
                  if (!v137)
                    goto LABEL_224;
                }
                if (*((_DWORD *)v137 + 4) != (_DWORD)v30)
                  goto LABEL_235;
LABEL_243:
                if (v126.u32[0] > 1uLL)
                {
                  v140 = v131;
                  if (*(_QWORD *)&v124 <= v131)
                    v140 = v131 % *(_QWORD *)&v124;
                }
                else
                {
                  v140 = v129 & v131;
                }
                v141 = *(float ***)(v125 + 8 * v140);
                if (!v141)
                  goto LABEL_266;
                v142 = *v141;
                if (!v142)
                  goto LABEL_266;
                if (v126.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    v144 = *((_QWORD *)v142 + 1);
                    if (v144 == v131)
                    {
                      if (*((_DWORD *)v142 + 4) == (_DWORD)v131)
                      {
LABEL_263:
                        if (*((float *)v137 + 5) > v142[5])
                          goto LABEL_266;
                        goto LABEL_224;
                      }
                    }
                    else
                    {
                      if (v144 >= *(_QWORD *)&v124)
                        v144 %= *(_QWORD *)&v124;
                      if (v144 != v140)
                        goto LABEL_266;
                    }
                    v142 = *(float **)v142;
                    if (!v142)
                      goto LABEL_266;
                  }
                }
                while (2)
                {
                  v143 = *((_QWORD *)v142 + 1);
                  if (v143 == v131)
                  {
                    if (*((_DWORD *)v142 + 4) == (_DWORD)v131)
                      goto LABEL_263;
LABEL_252:
                    v142 = *(float **)v142;
                    if (!v142)
                      goto LABEL_266;
                    continue;
                  }
                  break;
                }
                if ((v143 & v130) == v140)
                  goto LABEL_252;
LABEL_266:
                v145 = *--v122;
                v132 = v145;
                result = v133;
                if (!v127)
                  result = v30 % *(_QWORD *)&v124;
                v146 = *(uint64_t ***)(v125 + 8 * result);
                if (!v146)
                  continue;
                v147 = *v146;
                if (!v147)
                  continue;
                if (v126.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v148 = v147[1];
                    if (v148 == v30)
                    {
                      if (*((_DWORD *)v147 + 4) == (_DWORD)v30)
                        goto LABEL_284;
                    }
                    else if ((v148 & v130) != result)
                    {
                      goto LABEL_222;
                    }
                    v147 = (uint64_t *)*v147;
                    if (!v147)
                      goto LABEL_222;
                  }
                }
LABEL_279:
                v149 = v147[1];
                if (v149 != v30)
                {
                  if (v149 >= *(_QWORD *)&v124)
                    v149 %= *(_QWORD *)&v124;
                  if (v149 != result)
                    continue;
                  goto LABEL_278;
                }
                if (*((_DWORD *)v147 + 4) != (_DWORD)v30)
                {
LABEL_278:
                  v147 = (uint64_t *)*v147;
                  if (!v147)
                    continue;
                  goto LABEL_279;
                }
LABEL_284:
                if (v126.u32[0] > 1uLL)
                {
                  result = v132;
                  if (*(_QWORD *)&v124 <= v132)
                    result = v132 % *(_QWORD *)&v124;
                }
                else
                {
                  result = v129 & v132;
                }
                v150 = *(uint64_t ***)(v125 + 8 * result);
                if (!v150)
                  goto LABEL_266;
                v151 = *v150;
                if (!v151)
                  goto LABEL_266;
                if (v126.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v152 = v151[1];
                    if (v152 == v132)
                    {
                      if (*((_DWORD *)v151 + 4) == (_DWORD)v132)
                        goto LABEL_265;
                    }
                    else if ((v152 & v130) != result)
                    {
                      goto LABEL_266;
                    }
                    v151 = (uint64_t *)*v151;
                    if (!v151)
                      goto LABEL_266;
                  }
                }
                while (2)
                {
                  v153 = v151[1];
                  if (v153 != v132)
                  {
                    if (v153 >= *(_QWORD *)&v124)
                      v153 %= *(_QWORD *)&v124;
                    if (v153 != result)
                      goto LABEL_266;
                    goto LABEL_298;
                  }
                  if (*((_DWORD *)v151 + 4) != (_DWORD)v132)
                  {
LABEL_298:
                    v151 = (uint64_t *)*v151;
                    if (!v151)
                      goto LABEL_266;
                    continue;
                  }
                  break;
                }
LABEL_265:
                if (*((float *)v147 + 5) > *((float *)v151 + 5))
                  goto LABEL_266;
LABEL_222:
                ;
              }
              while (v7 < v122);
            }
            v154 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v154;
            a5 = 0;
            *v154 = v30;
            continue;
          }
LABEL_55:
          v62 = *v5;
          v63 = (int8x8_t)(*v5)[1];
          v64 = v9;
          v65 = v9 + 1;
          if (!*(_QWORD *)&v63)
          {
            v69 = v64;
            goto LABEL_105;
          }
          v66 = (uint8x8_t)vcnt_s8(v63);
          v66.i16[0] = vaddlv_u8(v66);
          v67 = *v62;
          v68 = *(_QWORD *)&v63 - 1;
          v69 = v64;
          v70 = v65;
          v71 = v69[1];
          if (v66.u32[0] <= 1uLL)
            goto LABEL_57;
LABEL_58:
          v72 = v71;
          v6 = v289;
          if (*(_QWORD *)&v63 <= v71)
            v72 = v71 % *(_QWORD *)&v63;
LABEL_60:
          v73 = *(uint64_t ***)(v67 + 8 * v72);
          if (!v73)
            goto LABEL_99;
          v74 = *v73;
          if (!v74)
            goto LABEL_99;
          if (v66.u32[0] >= 2uLL)
          {
            while (1)
            {
              v78 = v74[1];
              if (v78 == v71)
              {
                if (*((_DWORD *)v74 + 4) == (_DWORD)v71)
                {
                  if (*(_QWORD *)&v63 <= v30)
                  {
                    v76 = v30 % *(_QWORD *)&v63;
                    v77 = *(uint64_t ***)(v67 + 8 * (v30 % *(_QWORD *)&v63));
                    if (!v77)
                      goto LABEL_97;
                    goto LABEL_81;
                  }
                  v76 = v30;
                  v77 = *(uint64_t ***)(v67 + 8 * v30);
                  if (v77)
                    goto LABEL_81;
LABEL_97:
                  v69 = v70++;
                  v71 = v69[1];
                  if (v66.u32[0] <= 1uLL)
                  {
LABEL_57:
                    v72 = (*(_QWORD *)&v63 + 0xFFFFFFFFLL) & v71;
                    v6 = v289;
                    goto LABEL_60;
                  }
                  goto LABEL_58;
                }
              }
              else
              {
                if (v78 >= *(_QWORD *)&v63)
                  v78 %= *(_QWORD *)&v63;
                if (v78 != v72)
                  goto LABEL_99;
              }
              v74 = (uint64_t *)*v74;
              if (!v74)
                goto LABEL_99;
            }
          }
          while (1)
          {
            v75 = v74[1];
            if (v75 != v71)
            {
              if ((v75 & v68) != v72)
                goto LABEL_99;
              goto LABEL_65;
            }
            if (*((_DWORD *)v74 + 4) == (_DWORD)v71)
              break;
LABEL_65:
            v74 = (uint64_t *)*v74;
            if (!v74)
              goto LABEL_99;
          }
          v76 = (*(_QWORD *)&v63 + 0xFFFFFFFFLL) & v30;
          v77 = *(uint64_t ***)(v67 + 8 * v76);
          if (!v77)
            goto LABEL_97;
LABEL_81:
          v79 = *v77;
          if (!v79)
            goto LABEL_97;
          if (v66.u32[0] < 2uLL)
          {
            while (1)
            {
              v80 = v79[1];
              if (v80 == v30)
              {
                if (*((_DWORD *)v79 + 4) == (_DWORD)v30)
                  goto LABEL_96;
              }
              else if ((v80 & v68) != v76)
              {
                goto LABEL_97;
              }
              v79 = (uint64_t *)*v79;
              if (!v79)
                goto LABEL_97;
            }
          }
          while (2)
          {
            v81 = v79[1];
            if (v81 != v30)
            {
              if (v81 >= *(_QWORD *)&v63)
                v81 %= *(_QWORD *)&v63;
              if (v81 != v76)
                goto LABEL_97;
              goto LABEL_90;
            }
            if (*((_DWORD *)v79 + 4) != (_DWORD)v30)
            {
LABEL_90:
              v79 = (uint64_t *)*v79;
              if (!v79)
                goto LABEL_97;
              continue;
            }
            break;
          }
LABEL_96:
          if (*((float *)v74 + 5) > *((float *)v79 + 5))
            goto LABEL_97;
LABEL_99:
          v82 = v8;
          if (v69 != v6)
          {
            do
              v83 = *--v82;
            while (!sub_2394A9198(v62, v83, v30));
            if (v70 >= v82)
              goto LABEL_201;
LABEL_109:
            v85 = (uint8x8_t)vcnt_s8(v63);
            v85.i16[0] = vaddlv_u8(v85);
            v86 = *(_QWORD *)&v63 + 0xFFFFFFFFLL;
            v87 = *(_QWORD *)&v63 - 1;
            LODWORD(v88) = *v82;
            v90 = *(_QWORD *)&v63 > v30 || v85.u32[0] < 2uLL;
            v91 = *v62;
            LODWORD(v92) = *v70;
            v93 = v70;
            v94 = v82;
LABEL_117:
            *v93 = v88;
            *v94 = v92;
            while (1)
            {
LABEL_118:
              v69 = v93;
              v95 = v93[1];
              ++v93;
              v92 = v95;
              if (v85.u32[0] > 1uLL)
              {
                v96 = v92;
                if (*(_QWORD *)&v63 <= v92)
                  v96 = v92 % *(_QWORD *)&v63;
              }
              else
              {
                v96 = v86 & v92;
              }
              v97 = *(uint64_t ***)(v91 + 8 * v96);
              if (!v97)
                break;
              v98 = *v97;
              if (!v98)
                break;
              if (v85.u32[0] < 2uLL)
              {
                while (1)
                {
                  v99 = v98[1];
                  if (v99 == v92)
                  {
                    if (*((_DWORD *)v98 + 4) == (_DWORD)v92)
                    {
                      v100 = *(_QWORD *)&v63 + 0xFFFFFFFFLL;
                      if (!v90)
                        goto LABEL_131;
LABEL_141:
                      v101 = v100 & v30;
                      v102 = *(uint64_t ***)(v91 + 8 * v101);
                      if (v102)
                        goto LABEL_142;
                      goto LABEL_118;
                    }
                  }
                  else if ((v99 & v87) != v96)
                  {
                    goto LABEL_160;
                  }
                  v98 = (uint64_t *)*v98;
                  if (!v98)
                    goto LABEL_160;
                }
              }
              while (1)
              {
                v103 = v98[1];
                if (v103 == v92)
                  break;
                if (v103 >= *(_QWORD *)&v63)
                  v103 %= *(_QWORD *)&v63;
                if (v103 != v96)
                  goto LABEL_160;
LABEL_134:
                v98 = (uint64_t *)*v98;
                if (!v98)
                  goto LABEL_160;
              }
              if (*((_DWORD *)v98 + 4) != (_DWORD)v92)
                goto LABEL_134;
              v100 = -1;
              if (v90)
                goto LABEL_141;
LABEL_131:
              v101 = v30 % *(_QWORD *)&v63;
              v102 = *(uint64_t ***)(v91 + 8 * (v30 % *(_QWORD *)&v63));
              if (v102)
              {
LABEL_142:
                v104 = *v102;
                if (!v104)
                  continue;
                if (v85.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v105 = v104[1];
                    if (v105 == v30)
                    {
                      if (*((_DWORD *)v104 + 4) == (_DWORD)v30)
                        goto LABEL_157;
                    }
                    else if ((v105 & v87) != v101)
                    {
                      goto LABEL_118;
                    }
                    v104 = (uint64_t *)*v104;
                    if (!v104)
                      goto LABEL_118;
                  }
                }
                while (1)
                {
                  v106 = v104[1];
                  if (v106 == v30)
                  {
                    if (*((_DWORD *)v104 + 4) == (_DWORD)v30)
                    {
LABEL_157:
                      if (*((float *)v98 + 5) <= *((float *)v104 + 5))
                        goto LABEL_160;
                      goto LABEL_118;
                    }
                  }
                  else
                  {
                    if (v106 >= *(_QWORD *)&v63)
                      v106 %= *(_QWORD *)&v63;
                    if (v106 != v101)
                      goto LABEL_118;
                  }
                  v104 = (uint64_t *)*v104;
                  if (!v104)
                    goto LABEL_118;
                }
              }
            }
            while (1)
            {
LABEL_160:
              v107 = *--v94;
              v88 = v107;
              if (v85.u32[0] > 1uLL)
              {
                v108 = v88;
                if (*(_QWORD *)&v63 <= v88)
                {
                  v108 = v88 % *(_QWORD *)&v63;
                  v109 = *(uint64_t ***)(v91 + 8 * (v88 % *(_QWORD *)&v63));
                  if (!v109)
                    continue;
                }
                else
                {
                  v109 = *(uint64_t ***)(v91 + 8 * v88);
                  if (!v109)
                    continue;
                }
              }
              else
              {
                v108 = v86 & v88;
                v109 = *(uint64_t ***)(v91 + 8 * (v86 & v88));
                if (!v109)
                  continue;
              }
              v110 = *v109;
              if (v110)
              {
                if (v85.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    v115 = v110[1];
                    if (v115 == v88)
                    {
                      if (*((_DWORD *)v110 + 4) == (_DWORD)v88)
                      {
                        v112 = -1;
                        if (!v90)
                          goto LABEL_173;
                        goto LABEL_185;
                      }
                    }
                    else
                    {
                      if (v115 >= *(_QWORD *)&v63)
                        v115 %= *(_QWORD *)&v63;
                      if (v115 != v108)
                        goto LABEL_160;
                    }
                    v110 = (uint64_t *)*v110;
                    if (!v110)
                      goto LABEL_160;
                  }
                }
LABEL_170:
                v111 = v110[1];
                if (v111 != v88)
                {
                  if ((v111 & v87) != v108)
                    continue;
LABEL_169:
                  v110 = (uint64_t *)*v110;
                  if (!v110)
                    continue;
                  goto LABEL_170;
                }
                if (*((_DWORD *)v110 + 4) != (_DWORD)v88)
                  goto LABEL_169;
                v112 = *(_QWORD *)&v63 + 0xFFFFFFFFLL;
                if (v90)
                {
LABEL_185:
                  v113 = v112 & v30;
                  v114 = *(uint64_t ***)(v91 + 8 * v113);
                  if (!v114)
                    goto LABEL_116;
                  goto LABEL_186;
                }
LABEL_173:
                v113 = v30 % *(_QWORD *)&v63;
                v114 = *(uint64_t ***)(v91 + 8 * (v30 % *(_QWORD *)&v63));
                if (!v114)
                  goto LABEL_116;
LABEL_186:
                v116 = *v114;
                if (!v116)
                  goto LABEL_116;
                if (v85.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v117 = v116[1];
                    if (v117 == v30)
                    {
                      if (*((_DWORD *)v116 + 4) == (_DWORD)v30)
                        goto LABEL_159;
                    }
                    else if ((v117 & v87) != v113)
                    {
                      goto LABEL_116;
                    }
                    v116 = (uint64_t *)*v116;
                    if (!v116)
                      goto LABEL_116;
                  }
                }
                while (2)
                {
                  v118 = v116[1];
                  if (v118 != v30)
                  {
                    if (v118 >= *(_QWORD *)&v63)
                      v118 %= *(_QWORD *)&v63;
                    if (v118 != v113)
                      goto LABEL_116;
                    goto LABEL_195;
                  }
                  if (*((_DWORD *)v116 + 4) != (_DWORD)v30)
                  {
LABEL_195:
                    v116 = (uint64_t *)*v116;
                    if (!v116)
                      goto LABEL_116;
                    continue;
                  }
                  break;
                }
LABEL_159:
                if (*((float *)v110 + 5) <= *((float *)v116 + 5))
                  continue;
LABEL_116:
                if (v93 >= v94)
                  goto LABEL_201;
                goto LABEL_117;
              }
            }
          }
          v65 = v70;
LABEL_105:
          v82 = v8;
          do
          {
            if (v65 >= v82)
              break;
            v84 = *--v82;
          }
          while (!sub_2394A9198(v62, v84, v30));
          v70 = v65;
          v6 = v289;
          if (v70 < v82)
            goto LABEL_109;
LABEL_201:
          if (v69 != v6)
            *v6 = *v69;
          *v69 = v30;
          if (v70 < v82)
            goto LABEL_206;
          v119 = sub_2394A9340(v6, v69, v5);
          v7 = v69 + 1;
          result = sub_2394A9340(v69 + 1, v8, v5);
          if (!(_DWORD)result)
          {
            if (v119)
              continue;
LABEL_206:
            result = sub_2394A77DC(v6, v69, v5, a4, a5 & 1);
            a5 = 0;
            v7 = v69 + 1;
            continue;
          }
          a2 = v69;
          if (v119)
            return result;
          goto LABEL_2;
        }
        v170 = *v5;
        if ((a5 & 1) == 0)
        {
          if (v7 == v8)
            return result;
          v261 = v7 + 1;
          if (v7 + 1 == a2)
            return result;
LABEL_512:
          v262 = v261;
          v264 = *v9;
          v263 = v9[1];
          result = sub_2394A9198(v170, v9[1], *v9);
          if (!(_DWORD)result)
            goto LABEL_511;
          v265 = (int8x8_t)v170[1];
          *v262 = v264;
          if (!*(_QWORD *)&v265)
            goto LABEL_510;
          v266 = (uint8x8_t)vcnt_s8(v265);
          v266.i16[0] = vaddlv_u8(v266);
          v267 = *(_QWORD *)&v265 > v263;
          v268 = *v170;
          v269 = *(_QWORD *)&v265 - 1;
          if (v266.u32[0] >= 2uLL)
          {
            v270 = 0xFFFFFFFFLL;
          }
          else
          {
            v267 = 1;
            v270 = *(_QWORD *)&v265 + 0xFFFFFFFFLL;
          }
          v271 = v270 & v263;
          result = v271;
          if (!v267)
            goto LABEL_518;
          while (1)
          {
            v272 = *(uint64_t ***)(v268 + 8 * result);
            if (!v272)
              goto LABEL_510;
            v273 = *v272;
            if (!*v272)
              goto LABEL_510;
            v274 = *(v9 - 1);
            if (v266.u32[0] < 2uLL)
            {
              while (1)
              {
                v275 = v273[1];
                if (v275 == v263)
                {
                  if (*((_DWORD *)v273 + 4) == (_DWORD)v263)
                    goto LABEL_535;
                }
                else if ((v275 & v269) != result)
                {
                  goto LABEL_510;
                }
                v273 = (uint64_t *)*v273;
                if (!v273)
                  goto LABEL_510;
              }
            }
            while (1)
            {
              v276 = v273[1];
              if (v276 == v263)
                break;
              if (v276 >= *(_QWORD *)&v265)
                v276 %= *(_QWORD *)&v265;
              if (v276 != result)
                goto LABEL_510;
LABEL_529:
              v273 = (uint64_t *)*v273;
              if (!v273)
                goto LABEL_510;
            }
            if (*((_DWORD *)v273 + 4) != (_DWORD)v263)
              goto LABEL_529;
LABEL_535:
            if (v266.u32[0] > 1uLL)
            {
              result = *(v9 - 1);
              if (*(_QWORD *)&v265 <= v274)
                result = v274 % *(_QWORD *)&v265;
            }
            else
            {
              result = (*(_QWORD *)&v265 + 0xFFFFFFFFLL) & v274;
            }
            v277 = *(uint64_t ***)(v268 + 8 * result);
            if (v277)
            {
              v278 = *v277;
              if (v278)
              {
                if (v266.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v279 = v278[1];
                    if (v279 == v274)
                    {
                      if (*((_DWORD *)v278 + 4) == (_DWORD)v274)
                        goto LABEL_555;
                    }
                    else if ((v279 & v269) != result)
                    {
                      goto LABEL_556;
                    }
                    v278 = (uint64_t *)*v278;
                    if (!v278)
                      goto LABEL_556;
                  }
                }
                do
                {
                  v280 = v278[1];
                  if (v280 == v274)
                  {
                    if (*((_DWORD *)v278 + 4) == (_DWORD)v274)
                    {
LABEL_555:
                      if (*((float *)v273 + 5) > *((float *)v278 + 5))
                        break;
LABEL_510:
                      *v9 = v263;
LABEL_511:
                      v261 = v262 + 1;
                      v9 = v262;
                      if (v262 + 1 == a2)
                        return result;
                      goto LABEL_512;
                    }
                  }
                  else
                  {
                    if (v280 >= *(_QWORD *)&v265)
                      v280 %= *(_QWORD *)&v265;
                    if (v280 != result)
                      break;
                  }
                  v278 = (uint64_t *)*v278;
                }
                while (v278);
              }
            }
LABEL_556:
            *v9-- = v274;
            result = v271;
            if (v267)
              continue;
LABEL_518:
            result = v263 % *(_QWORD *)&v265;
          }
        }
        if (v7 == v8)
          return result;
        v171 = v7 + 1;
        if (v7 + 1 == a2)
          return result;
        v172 = v7;
        while (2)
        {
          v174 = v171;
          v176 = *v172;
          v175 = v172[1];
          result = sub_2394A9198(v170, v172[1], *v172);
          if (!(_DWORD)result)
            goto LABEL_327;
          v172[1] = v176;
          v173 = v7;
          if (v172 == v7)
            goto LABEL_326;
          v177 = (int8x8_t)v170[1];
          if (!*(_QWORD *)&v177)
            goto LABEL_325;
          v178 = (uint8x8_t)vcnt_s8(v177);
          v178.i16[0] = vaddlv_u8(v178);
          v179 = *(_QWORD *)&v177 - 1;
          v180 = *(_QWORD *)&v177 > v175;
          v181 = *v170;
          if (v178.u32[0] >= 2uLL)
          {
            v182 = 0xFFFFFFFFLL;
          }
          else
          {
            v180 = 1;
            v182 = *(_QWORD *)&v177 + 0xFFFFFFFFLL;
          }
          v183 = v182 & v175;
          while (2)
          {
            result = v183;
            if (!v180)
              result = v175 % *(_QWORD *)&v177;
            v184 = *(uint64_t ***)(v181 + 8 * result);
            if (!v184)
              goto LABEL_325;
            v185 = *v184;
            if (!*v184)
              goto LABEL_325;
            v186 = v172 - 1;
            v187 = *(v172 - 1);
            if (v178.u32[0] < 2uLL)
            {
              while (1)
              {
                v188 = v185[1];
                if (v188 == v175)
                {
                  if (*((_DWORD *)v185 + 4) == (_DWORD)v175)
                    goto LABEL_353;
                }
                else if ((v188 & v179) != result)
                {
                  goto LABEL_325;
                }
                v185 = (uint64_t *)*v185;
                if (!v185)
                  goto LABEL_325;
              }
            }
            while (1)
            {
              v189 = v185[1];
              if (v189 == v175)
                break;
              if (v189 >= *(_QWORD *)&v177)
                v189 %= *(_QWORD *)&v177;
              if (v189 != result)
                goto LABEL_325;
LABEL_347:
              v185 = (uint64_t *)*v185;
              if (!v185)
                goto LABEL_325;
            }
            if (*((_DWORD *)v185 + 4) != (_DWORD)v175)
              goto LABEL_347;
LABEL_353:
            if (v178.u32[0] > 1uLL)
            {
              result = *(v172 - 1);
              if (*(_QWORD *)&v177 <= v187)
                result = v187 % *(_QWORD *)&v177;
            }
            else
            {
              result = (*(_QWORD *)&v177 + 0xFFFFFFFFLL) & v187;
            }
            v190 = *(uint64_t ***)(v181 + 8 * result);
            if (!v190 || (v191 = *v190) == 0)
            {
LABEL_374:
              *v172-- = v187;
              if (v186 == v7)
              {
                v173 = v7;
                goto LABEL_326;
              }
              continue;
            }
            break;
          }
          if (v178.u32[0] < 2uLL)
          {
            while (1)
            {
              v192 = v191[1];
              if (v192 == v187)
              {
                if (*((_DWORD *)v191 + 4) == (_DWORD)v187)
                  goto LABEL_373;
              }
              else if ((v192 & v179) != result)
              {
                goto LABEL_374;
              }
              v191 = (uint64_t *)*v191;
              if (!v191)
                goto LABEL_374;
            }
          }
          while (2)
          {
            v193 = v191[1];
            if (v193 != v187)
            {
              if (v193 >= *(_QWORD *)&v177)
                v193 %= *(_QWORD *)&v177;
              if (v193 != result)
                goto LABEL_374;
              goto LABEL_367;
            }
            if (*((_DWORD *)v191 + 4) != (_DWORD)v187)
            {
LABEL_367:
              v191 = (uint64_t *)*v191;
              if (!v191)
                goto LABEL_374;
              continue;
            }
            break;
          }
LABEL_373:
          if (*((float *)v185 + 5) > *((float *)v191 + 5))
            goto LABEL_374;
LABEL_325:
          v173 = v172;
LABEL_326:
          *v173 = v175;
LABEL_327:
          v171 = v174 + 1;
          v172 = v174;
          if (v174 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_2394A9198(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 result;
  unint64_t v12;
  float **v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;

  v3 = a1[1];
  if (!v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!v7)
    return 0;
  v8 = v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v9 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v10 = v7[1];
    if (v10 == a2)
      break;
    if (v10 >= v3)
      v10 %= v3;
    if (v10 != v5)
      return 0;
LABEL_16:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_16;
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    v12 = a3;
    if (v3 <= a3)
      v12 = a3 % v3;
  }
  else
  {
    v12 = ((_DWORD)v3 - 1) & a3;
  }
  v13 = *(float ***)(*a1 + 8 * v12);
  if (!v13)
    return 1;
  v14 = *v13;
  if (!v14)
    return 1;
  result = 1;
  if (v4.u32[0] >= 2uLL)
  {
    while (1)
    {
      v16 = *((_QWORD *)v14 + 1);
      if (v16 == a3)
      {
        if (*((_DWORD *)v14 + 4) == a3)
          return *((float *)v7 + 5) > v14[5];
      }
      else
      {
        if (v16 >= v3)
          v16 %= v3;
        if (v16 != v12)
          return 1;
      }
      v14 = *(float **)v14;
      if (!v14)
        return result;
    }
  }
  while (2)
  {
    v15 = *((_QWORD *)v14 + 1);
    if (v15 != a3)
    {
      if ((v15 & v8) != v12)
        return 1;
      goto LABEL_31;
    }
    if (*((_DWORD *)v14 + 4) != a3)
    {
LABEL_31:
      v14 = *(float **)v14;
      if (!v14)
        return result;
      continue;
    }
    return *((float *)v7 + 5) > v14[5];
  }
}

BOOL sub_2394A9340(unsigned int *a1, unsigned int *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int *v28;
  _BOOL4 v29;
  unsigned int *v30;
  unsigned int *v31;
  _BOOL4 v32;
  unsigned int v33;
  BOOL v34;
  unsigned int *v35;
  int v36;
  uint64_t i;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unsigned int v43;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_2394A9198(*a3, v8, *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      v10 = *a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = sub_2394A9198(*a3, v12, *a1);
      v14 = *(a2 - 1);
      v15 = sub_2394A9198(v10, v14, v12);
      if (v13)
      {
        if (v15)
        {
          *a1 = v14;
        }
        else
        {
          *a1 = v12;
          a1[1] = v11;
          v43 = *(a2 - 1);
          if (!sub_2394A9198(v10, v43, v11))
            return 1;
          a1[1] = v43;
        }
        *(a2 - 1) = v11;
      }
      else if (v15)
      {
        a1[1] = v14;
        *(a2 - 1) = v12;
        v20 = a1[1];
LABEL_18:
        v33 = *a1;
        if (sub_2394A9198(v10, v20, *a1))
        {
          *a1 = v20;
          a1[1] = v33;
        }
      }
      return 1;
    case 4:
      sub_2394A9670(a1, a1 + 1, a1 + 2, a2 - 1, *a3);
      return 1;
    case 5:
      v16 = a1 + 2;
      v17 = a1 + 3;
      sub_2394A9670(a1, a1 + 1, a1 + 2, a1 + 3, *a3);
      v18 = *(a2 - 1);
      v19 = a1[3];
      v10 = *a3;
      if (!sub_2394A9198(v10, v18, v19))
        return 1;
      *v17 = v18;
      *(a2 - 1) = v19;
      v20 = *v17;
      v21 = *v16;
      if (!sub_2394A9198(v10, *v17, *v16))
        return 1;
      *v16 = v20;
      *v17 = v21;
      v22 = a1[1];
      if (!sub_2394A9198(v10, v20, v22))
        return 1;
      a1[1] = v20;
      a1[2] = v22;
      goto LABEL_18;
    default:
      v23 = *a3;
      v24 = a1[1];
      v25 = *a1;
      v26 = sub_2394A9198(*a3, v24, *a1);
      v28 = a1 + 2;
      v27 = a1[2];
      v29 = sub_2394A9198(v23, v27, v24);
      if (v26)
      {
        v30 = a1;
        v31 = a1 + 2;
        if (!v29)
        {
          *a1 = v24;
          a1[1] = v25;
          v32 = sub_2394A9198(v23, v27, v25);
          v30 = a1 + 1;
          v31 = a1 + 2;
          if (!v32)
            goto LABEL_23;
        }
LABEL_22:
        *v30 = v27;
        *v31 = v25;
        goto LABEL_23;
      }
      if (v29)
      {
        a1[1] = v27;
        *v28 = v24;
        v34 = sub_2394A9198(v23, v27, v25);
        v30 = a1;
        v31 = a1 + 1;
        if (v34)
          goto LABEL_22;
      }
LABEL_23:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      for (i = 12; ; i += 4)
      {
        v38 = *v35;
        v39 = *v28;
        if (sub_2394A9198(v23, *v35, *v28))
          break;
LABEL_26:
        v28 = v35++;
        if (v35 == a2)
          return 1;
      }
      v40 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v40) = v39;
        v41 = v40 - 4;
        if (v40 == 4)
        {
          *a1 = v38;
          if (++v36 != 8)
            goto LABEL_26;
          return v35 + 1 == a2;
        }
        v39 = *(unsigned int *)((char *)a1 + v40 - 8);
        v42 = sub_2394A9198(v23, v38, v39);
        v40 = v41;
      }
      while (v42);
      *(unsigned int *)((char *)a1 + v41) = v38;
      if (++v36 != 8)
        goto LABEL_26;
      return v35 + 1 == a2;
  }
}

BOOL sub_2394A9670(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL8 result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v10 = *a2;
  v11 = *a2;
  v12 = *a1;
  v13 = sub_2394A9198(a5, *a2, *a1);
  v14 = *a3;
  v15 = sub_2394A9198(a5, *a3, v10);
  if (v13)
  {
    if (v15)
    {
      *a1 = v14;
    }
    else
    {
      *a1 = v11;
      *a2 = v12;
      v10 = *a3;
      v11 = *a3;
      if (!sub_2394A9198(a5, *a3, v12))
        goto LABEL_11;
      *a2 = v11;
    }
    *a3 = v12;
    v10 = v12;
    v11 = v12;
LABEL_11:
    v18 = *a4;
    result = sub_2394A9198(a5, *a4, v10);
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (v15)
  {
    *a2 = v14;
    *a3 = v11;
    v16 = *a2;
    v17 = *a1;
    if (!sub_2394A9198(a5, *a2, *a1))
      goto LABEL_11;
    *a1 = v16;
    *a2 = v17;
    v11 = *a3;
    v18 = *a4;
    result = sub_2394A9198(a5, *a4, *a3);
    if (!result)
      return result;
  }
  else
  {
    v11 = v14;
    v18 = *a4;
    result = sub_2394A9198(a5, *a4, v14);
    if (!result)
      return result;
  }
LABEL_14:
  *a3 = v18;
  *a4 = v11;
  v20 = *a3;
  v21 = *a2;
  result = sub_2394A9198(a5, *a3, *a2);
  if (result)
  {
    *a2 = v20;
    *a3 = v21;
    v22 = *a2;
    v23 = *a1;
    result = sub_2394A9198(a5, *a2, *a1);
    if (result)
    {
      *a1 = v22;
      *a2 = v23;
    }
  }
  return result;
}

_QWORD *sub_2394A9814(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2394A9B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2394A9B44(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x50uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2394A9E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239434D64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394A9E64(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint8x8_t v13;
  int8x16_t v14;
  float32x4_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  float *v30;
  float v31;
  float *v32;
  float *v33;
  float v34;
  float *v35;
  uint64_t v36;
  unsigned int *v37;
  float v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  unsigned int *v50;

  if (a5[3])
  {
    v9 = (_QWORD *)a5[2];
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    a5[2] = 0;
    v11 = a5[1];
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  sub_239429CA8((uint64_t)a2, a3, (char **)&__p);
  v16 = (unsigned int *)__p;
  v17 = v50;
  if (__p != v50)
  {
    while (1)
    {
      v18 = *v16;
      if (a2[4] <= v18 || ((*(_QWORD *)(a2[3] + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) == 0)
        break;
      v19 = sub_2394AA214(*(_QWORD *)(a1 + 64), (uint64_t *)(a2[9] + 24 * v18), *(double *)&v13, v14, v15);
      v20 = *(_QWORD *)(a1 + 80);
      if (v19 >= (unint64_t)((*(_QWORD *)(a1 + 88) - v20) >> 3))
      {
        v47 = 472;
LABEL_68:
        sub_239A444D4((uint64_t)"unknown file", v47, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v21 = *(_QWORD *)(v20 + 8 * v19);
      if (!v21)
      {
        sub_239A444D4((uint64_t)"unknown file", 474, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v22 = a5[1];
      if (v22)
      {
        v13 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          v23 = v19;
          if (v22 <= v19)
            v23 = v19 % v22;
        }
        else
        {
          v23 = ((_DWORD)v22 - 1) & v19;
        }
        v24 = *(uint64_t ***)(*a5 + 8 * v23);
        if (v24)
        {
          v25 = *v24;
          if (v25)
          {
            if (v13.u32[0] < 2uLL)
            {
              v26 = v22 - 1;
              while (1)
              {
                v28 = v25[1];
                if (v28 == v19)
                {
                  if (*((_DWORD *)v25 + 4) == v19)
                    goto LABEL_34;
                }
                else if ((v28 & v26) != v23)
                {
                  goto LABEL_33;
                }
                v25 = (uint64_t *)*v25;
                if (!v25)
                  goto LABEL_33;
              }
            }
            do
            {
              v27 = v25[1];
              if (v27 == v19)
              {
                if (*((_DWORD *)v25 + 4) == v19)
                  goto LABEL_34;
              }
              else
              {
                if (v27 >= v22)
                  v27 %= v22;
                if (v27 != v23)
                  break;
              }
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_33:
      v48 = v19;
      v25 = sub_2394AA7A4((uint64_t)a5, (unsigned int *)&v48, &v48);
LABEL_34:
      v14.i32[0] = *((_DWORD *)v25 + 5);
      *(float *)v13.i32 = *(float *)(v21 + 8) + *(float *)v14.i32;
      *((_DWORD *)v25 + 5) = v13.i32[0];
      if (++v16 == v17)
        goto LABEL_35;
    }
    v47 = 124;
    goto LABEL_68;
  }
LABEL_35:
  v29 = *(_DWORD *)(a1 + 44);
  if (v29 == 1)
  {
    v33 = (float *)a5[2];
    if (v33)
    {
      v34 = 0.0;
      v35 = (float *)a5[2];
      do
      {
        v34 = v34 + v35[5];
        v35 = *(float **)v35;
      }
      while (v35);
    }
    else
    {
      v34 = 0.0;
    }
    v43 = fabsf(v34);
    v44 = 1.0 / v34;
    v41 = v34 < 0.0;
    v45 = -3.4028e38;
    if (!v41)
      v45 = 3.4028e38;
    if (v43 >= 0.00000011921)
      v45 = v44;
    for (; v33; v33 = *(float **)v33)
      v33[5] = v45 * v33[5];
  }
  else
  {
    if (v29 != 2)
    {
      v36 = 0;
      v37 = (unsigned int *)__p;
      if (!__p)
        return v36;
      goto LABEL_63;
    }
    v30 = (float *)a5[2];
    if (v30)
    {
      v31 = 0.0;
      v32 = (float *)a5[2];
      do
      {
        v31 = v31 + (float)(v32[5] * v32[5]);
        v32 = *(float **)v32;
      }
      while (v32);
    }
    else
    {
      v31 = 0.0;
    }
    v38 = sqrtf(v31);
    v39 = fabsf(v38);
    v40 = 1.0 / v38;
    v41 = v38 < 0.0;
    v42 = -3.4028e38;
    if (!v41)
      v42 = 3.4028e38;
    if (v39 >= 0.00000011921)
      v42 = v40;
    for (; v30; v30 = *(float **)v30)
      v30[5] = v42 * v30[5];
  }
  v36 = 1;
  v37 = (unsigned int *)__p;
  if (__p)
  {
LABEL_63:
    v50 = v37;
    operator delete(v37);
  }
  return v36;
}

void sub_2394AA1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394AA214(uint64_t a1, uint64_t *a2, double a3, int8x16_t a4, float32x4_t a5)
{
  uint64_t i;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;

  for (i = a1; *(_BYTE *)(i + 1); i = *(_QWORD *)(v8 + 16 * v7))
  {
    v8 = *(_QWORD *)(i + 56);
    v9 = *(_QWORD *)(i + 64);
    if (v9 == v8)
    {
      v7 = 0;
      v8 = *(_QWORD *)(i + 64);
    }
    else
    {
      v10 = 0;
      v7 = 0;
      v11 = 0;
      v12 = 3.4028e38;
      do
      {
        v13 = *(_QWORD *)(v8 + v10);
        if (v13)
        {
          v14 = *((unsigned int *)a2 + 4);
          if ((_DWORD)v14 != *(_DWORD *)(v13 + 48))
            sub_239EBFDA0();
          if (*(_BYTE *)i)
          {
            if ((_DWORD)v14 != 64)
              sub_239EBFD70();
            *(float *)&a3 = (float)sub_2394AA30C((_QWORD *)*a2, *(_QWORD **)(v13 + 32));
          }
          else
          {
            *(float *)&a3 = sub_2396F480C(*a2, *(_QWORD *)(v13 + 32), v14, a3, a4, a5);
          }
          if (*(float *)&a3 < v12)
          {
            v12 = *(float *)&a3;
            v7 = v11;
          }
          v8 = *(_QWORD *)(i + 56);
          v9 = *(_QWORD *)(i + 64);
        }
        ++v11;
        v10 += 16;
      }
      while (v11 < (v9 - v8) >> 4);
    }
  }
  return *(unsigned int *)(i + 4);
}

unint64_t sub_2394AA30C(_QWORD *a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t v12;
  _BYTE v13[6];
  char v14;

  v12 = *a2 ^ *a1;
  v14 = 1;
  v11 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[1] ^ a1[1];
  v14 = 1;
  v4 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[2] ^ a1[2];
  v14 = 1;
  v5 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[3] ^ a1[3];
  v14 = 1;
  v6 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[4] ^ a1[4];
  v14 = 1;
  v7 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[5] ^ a1[5];
  v14 = 1;
  v8 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[6] ^ a1[6];
  v14 = 1;
  v9 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[7] ^ a1[7];
  v14 = 1;
  return v4
       + (unint64_t)v11
       + v5
       + v6
       + v7
       + v8
       + v9
       + sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
}

uint64_t sub_2394AA530(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  int8x16_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t result;
  unint64_t v11;
  int8x8_t *v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int8x16_t *v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8x8_t v31;
  uint8x8_t v32;

  v5 = (int8x16_t *)a1;
  v6 = a4 - (unint64_t)a2;
  v7 = v6 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
  {
    if (a2)
    {
      if (64 - a2 >= v7)
        v8 = v6 + 8 * (a3 - (_QWORD)a1);
      else
        v8 = 64 - a2;
      v5 = (int8x16_t *)(a1 + 1);
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *a1));
      v9.i16[0] = vaddlv_u8(v9);
      result = v9.u32[0];
      v7 -= v8;
      v11 = v7 - 64;
      if (v7 >= 0x40)
        goto LABEL_7;
    }
    else
    {
      result = 0;
      v11 = v7 - 64;
      if (v7 >= 0x40)
      {
LABEL_7:
        if (v11 >= 0xC0)
        {
          v17 = (v11 >> 6) + 1;
          v12 = (int8x8_t *)v5 + (v17 & 0x7FFFFFFFFFFFFFCLL);
          v7 -= (v17 & 0x7FFFFFFFFFFFFFCLL) << 6;
          v18 = 0uLL;
          v19 = (int64x2_t)(unint64_t)result;
          v20 = v5 + 1;
          v21 = v17 & 0x7FFFFFFFFFFFFFCLL;
          do
          {
            v19 = (int64x2_t)vpadalq_u32((uint64x2_t)v19, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20[-1]))));
            v18 = (int64x2_t)vpadalq_u32((uint64x2_t)v18, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v20))));
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          result = vaddvq_s64(vaddq_s64(v18, v19));
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFCLL))
            goto LABEL_22;
        }
        else
        {
          v12 = (int8x8_t *)v5;
        }
        do
        {
          v22 = *v12++;
          v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          result += v23.u32[0];
          v7 -= 64;
        }
        while (v7 > 0x3F);
LABEL_22:
        if (!v7)
          return result;
        v24 = *(_QWORD *)v12 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
        goto LABEL_32;
      }
    }
    v12 = (int8x8_t *)v5;
    goto LABEL_22;
  }
  if (a2)
  {
    if (64 - a2 >= v7)
      v13 = v6 + 8 * (a3 - (_QWORD)a1);
    else
      v13 = 64 - a2;
    v5 = (int8x16_t *)(a1 + 1);
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v13)) & (-1 << a2) & ~*a1));
    v14.i16[0] = vaddlv_u8(v14);
    result = v14.u32[0];
    v7 -= v13;
    v15 = v7 - 64;
    if (v7 >= 0x40)
      goto LABEL_14;
LABEL_25:
    v16 = (uint64_t *)v5;
    goto LABEL_30;
  }
  result = 0;
  v15 = v7 - 64;
  if (v7 < 0x40)
    goto LABEL_25;
LABEL_14:
  if (v15 >= 0xC0)
  {
    v25 = (v15 >> 6) + 1;
    v16 = &v5->i64[v25 & 0x7FFFFFFFFFFFFFCLL];
    v7 -= (v25 & 0x7FFFFFFFFFFFFFCLL) << 6;
    v26 = 0uLL;
    v27 = (int64x2_t)(unint64_t)result;
    v28 = v5 + 1;
    v29 = v25 & 0x7FFFFFFFFFFFFFCLL;
    do
    {
      v27 = (int64x2_t)vpadalq_u32((uint64x2_t)v27, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(v28[-1])))));
      v26 = (int64x2_t)vpadalq_u32((uint64x2_t)v26, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(*v28)))));
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    result = vaddvq_s64(vaddq_s64(v26, v27));
    if (v25 == (v25 & 0x7FFFFFFFFFFFFFCLL))
      goto LABEL_30;
  }
  else
  {
    v16 = (uint64_t *)v5;
  }
  do
  {
    v30 = *v16++;
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)~v30);
    v31.i16[0] = vaddlv_u8(v31);
    result += v31.u32[0];
    v7 -= 64;
  }
  while (v7 > 0x3F);
LABEL_30:
  if (!v7)
    return result;
  v24 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v7) & ~*v16;
LABEL_32:
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v32.i16[0] = vaddlv_u8(v32);
  result += v32.u32[0];
  return result;
}

uint64_t *sub_2394AA7A4(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2394AAA90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2394AAAA4(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;

  v5 = result;
  if (*((_BYTE *)result + 1))
  {
    v7 = result[7];
    v6 = result[8];
    if (v6 != v7)
    {
      v8 = 0;
      v9 = 1;
      do
      {
        result = *(uint64_t **)(v7 + 16 * v8);
        if (result)
        {
          result = (uint64_t *)sub_2394AAAA4(result, a2, a3);
          v7 = v5[7];
          v6 = v5[8];
        }
        v8 = v9++;
      }
      while (v8 < (v6 - v7) >> 4);
    }
  }
  else
  {
    v10 = result + 12;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (*((_DWORD *)v10 + 4) == (_DWORD)a2)
      {
        v11 = *((_DWORD *)v10 + 5);
        v12 = (_DWORD *)result + 1;
        result = sub_2394AAB74(a3, (unsigned int *)result + 1, (uint64_t)&unk_239EC6E98, &v12);
        *((_DWORD *)result + 5) = v11;
        return result;
      }
    }
  }
  return result;
}

uint64_t *sub_2394AAB74(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2394AAE64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2394AAE78(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADCB38;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2394AAED4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADCB38;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2394AAF40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_250ADCB38;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_2394AAFC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394AAFD4(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_250ADCB38;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_2394AB050(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2394AB08C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_2394AB0DC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_2394172E0();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

pthread_rwlock_t *sub_2394AB118(uint64_t a1)
{
  pthread_rwlock_t *result;
  pthread_rwlock_t *v3;
  pthread_rwlock_t **v4;
  pthread_rwlock_t **v5;

  result = *(pthread_rwlock_t **)(a1 + 16);
  if (result)
  {
    *(_QWORD *)(a1 + 16) = 0;
    v3 = sub_2397A15B0(result);
    result = (pthread_rwlock_t *)MEMORY[0x23B83E31C](v3, 0x1000C40BEF03554);
  }
  if (*(_BYTE *)(a1 + 1))
  {
    v5 = *(pthread_rwlock_t ***)(a1 + 56);
    v4 = *(pthread_rwlock_t ***)(a1 + 64);
    while (v5 != v4)
    {
      result = *v5;
      if (*v5)
        result = (pthread_rwlock_t *)sub_2394AB118();
      v5 += 2;
    }
  }
  return result;
}

uint64_t *sub_2394AB184(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_2394189F8();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_239418A80();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_2394AB2F4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_2394A6140((__int32 ***)(a1 + 8), *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 116), *(char ***)(a1 + 120), *(std::mutex **)(a1 + 128));
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v5, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1070C405C753CE9);
  return 0;
}

void sub_2394AB380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394AB394((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2394AB394(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1070C405C753CE9);
  }
  return a1;
}

void sub_2394AB3FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  float v8;
  float v9;
  int v10;
  uint32x2_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  int32x2_t v17;
  unint64_t prime;
  int8x8_t v19;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  float v24;

  v2 = (_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 144))
  {
    v3 = *(_QWORD **)(a1 + 136);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    *(_QWORD *)(a1 + 136) = 0;
    v5 = *(_QWORD *)(a1 + 128);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 144) = 0;
  }
  v24 = *(float *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 92) = v7;
  v8 = log2f(*(float *)(a1 + 12) / *(float *)(a1 + 16));
  v9 = ceilf(v8);
  v10 = vcvtps_s32_f32(v8);
  v11 = *(uint32x2_t *)(a1 + 40);
  v12 = vmul_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 32)), (float32x2_t)0x3F0000003F000000);
  v13 = (float)-v10;
  v14 = (float)(int)v9;
  *(float *)(a1 + 68) = v13;
  *(float *)(a1 + 72) = v14;
  v10 *= 2;
  *(_DWORD *)(a1 + 96) = v10;
  *(float32x2_t *)(a1 + 76) = v12;
  v15 = vcvt_f32_u32(v11);
  v16 = vmla_n_f32(v15, v15, v24);
  *(_DWORD *)(a1 + 56) = v16.i32[0];
  *(float *)(a1 + 60) = -v16.f32[1];
  *(float *)(a1 + 52) = -v16.f32[0];
  *(_DWORD *)(a1 + 64) = v16.i32[1];
  v17 = *(int32x2_t *)a1;
  *(_QWORD *)(a1 + 84) = *(_QWORD *)a1;
  *(float32x2_t *)(a1 + 100) = vdiv_f32(vcvt_f32_s32(v17), vadd_f32(v16, v16));
  v16.f32[0] = (float)v7 / 6.28318531;
  *(_DWORD *)(a1 + 108) = v16.i32[0];
  *(float *)(a1 + 112) = (float)v10 / (float)(v14 - v13);
  prime = vcvtps_u32_f32((float)(unint64_t)(int)(vmul_lane_s32(v17, v17, 1).u32[0] * v7 * v7) / *(float *)(a1 + 152));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v19 = *(int8x8_t *)(a1 + 128);
  if (prime > *(_QWORD *)&v19)
    goto LABEL_25;
  if (prime >= *(_QWORD *)&v19)
    return;
  v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 144) / *(float *)(a1 + 152));
  if (*(_QWORD *)&v19 >= 3uLL)
  {
    v21 = (uint8x8_t)vcnt_s8(v19);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] <= 1uLL)
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
      if (prime <= v20)
        prime = v20;
      if (prime >= *(_QWORD *)&v19)
        return;
LABEL_25:
      sub_239427FE0((uint64_t)v2, prime);
      return;
    }
  }
  v23 = std::__next_prime(v20);
  if (prime <= v23)
    prime = v23;
  if (prime < *(_QWORD *)&v19)
    goto LABEL_25;
}

uint64_t sub_2394AB618(uint64_t a1)
{
  __int128 v2;

  *(_QWORD *)a1 = 0xA0000000ALL;
  *(_DWORD *)(a1 + 8) = 10;
  *(_QWORD *)(a1 + 12) = 0x4000000042000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 5;
  *(_DWORD *)(a1 + 48) = 1056964608;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)&v2 = 0xA0000000ALL;
  *((_QWORD *)&v2 + 1) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 84) = v2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  sub_2394AB3FC(a1);
  return a1;
}

void sub_2394AB69C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(v1 + 136);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  sub_239EBFDD0(v2);
  _Unwind_Resume(a1);
}

void sub_2394AB6C8(uint64_t a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v2;
  sub_2394AB3FC(a1);
}

void sub_2394AB6D4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if ((_QWORD *)(a1 + 40) != a2)
    *(_QWORD *)(a1 + 40) = *a2;
  if ((_QWORD *)(a1 + 32) != a3)
    *(_QWORD *)(a1 + 32) = *a3;
  sub_2394AB3FC(a1);
}

uint64_t sub_2394AB700(uint64_t a1, float32x2_t *a2, float *a3, float32x4_t *a4)
{
  float v8;
  double i;
  float v10;
  __float2 v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  double v16;
  float v17;
  float32_t v18;
  float32_t v19;
  float32x2_t v21;

  v8 = a2[2].f32[0] - a3[4];
  for (i = v8; v8 < -3.14159265; i = v8)
    v8 = i + 6.28318531;
  if (i >= 3.14159265)
  {
    do
    {
      v8 = i + -6.28318531;
      i = v8;
    }
    while (v8 >= 3.14159265);
  }
  if (i < -3.14159265)
    sub_239EBFDE8();
  if (i >= 3.14159265)
    sub_239EBFE18();
  v10 = a2[1].f32[1] / a3[3];
  v11 = __sincosf_stret(v8);
  v12.f32[0] = v11.__cosval * v10;
  v13.f32[0] = -(float)(v11.__sinval * v10);
  v13.f32[1] = v11.__cosval * v10;
  v12.f32[1] = v11.__sinval * v10;
  v21 = vadd_f32(*a2, vmla_n_f32(vmul_n_f32(v12, *(float *)(a1 + 76) - *a3), v13, *(float *)(a1 + 80) - a3[1]));
  *(float32x2_t *)a4->f32 = v21;
  a4->f32[2] = v8;
  v14 = log2f(v10);
  a4->f32[3] = v14;
  v15.i32[0] = *(_DWORD *)(a1 + 52);
  if (v21.f32[0] < v15.f32[0])
    return 0;
  if (v21.f32[0] >= *(float *)(a1 + 56))
    return 0;
  if (v21.f32[1] < *(float *)(a1 + 60))
    return 0;
  if (v21.f32[1] >= *(float *)(a1 + 64))
    return 0;
  v16 = v8;
  if (v8 < -3.14159265)
    return 0;
  if (v16 >= 3.14159265)
    return 0;
  v17 = *(float *)(a1 + 68);
  if (v14 < v17 || v14 >= *(float *)(a1 + 72))
    return 0;
  v15.i32[1] = *(_DWORD *)(a1 + 60);
  *(float32x2_t *)a4->f32 = vmul_f32(vsub_f32(v21, v15), *(float32x2_t *)(a1 + 100));
  v18 = (v16 + 3.14159265) * *(float *)(a1 + 108);
  v19 = (float)(v14 - v17) * *(float *)(a1 + 112);
  a4->f32[2] = v18;
  a4->f32[3] = v19;
  return sub_2394AB8E8(a1, a4);
}

uint64_t sub_2394AB8E8(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  signed int v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;

  LODWORD(v4) = vcvtms_s32_f32(a2->f32[0] + -0.5);
  v6 = vcvtms_s32_f32(a2->f32[2] + -0.5);
  if (v6 < 0)
    v6 += *(_DWORD *)(a1 + 92);
  v7 = 0;
  if ((v4 & 0x80000000) == 0 && (int)v4 + 1 < *(_DWORD *)(a1 + 84))
  {
    LODWORD(v3) = vcvtms_s32_f32(a2->f32[1] + -0.5);
    if ((v3 & 0x80000000) == 0)
    {
      v7 = 0;
      if ((int)v3 + 1 < *(_DWORD *)(a1 + 88))
      {
        LODWORD(v2) = vcvtms_s32_f32(a2->f32[3] + -0.5);
        if ((v2 & 0x80000000) == 0)
        {
          if ((int)v2 + 1 >= *(_DWORD *)(a1 + 96))
          {
            return 0;
          }
          else
          {
            v8 = v6 + 1;
            if (v6 + 1 >= *(_DWORD *)(a1 + 92))
              v9 = *(_DWORD *)(a1 + 92);
            else
              v9 = 0;
            v62 = v4;
            v63 = v3;
            v45 = v6;
            v64 = v6;
            v65 = v2;
            v10 = (_QWORD *)(a1 + 120);
            v11 = sub_2394AD918((_QWORD *)(a1 + 120), &v62);
            if (v11)
            {
              *(float32x4_t *)(v11 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v11 + 7));
              ++v11[6];
            }
            else
            {
              v46 = *a2;
              v66 = &v62;
              v12 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v12[6] = 1;
              *(float32x4_t *)(v12 + 7) = v46;
            }
            v13 = v8 - v9;
            v62 = v4;
            v63 = v3;
            v64 = v45;
            v65 = (v2 + 1);
            v14 = sub_2394AD918(v10, &v62);
            if (v14)
            {
              *(float32x4_t *)(v14 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v14 + 7));
              ++v14[6];
            }
            else
            {
              v47 = *a2;
              v66 = &v62;
              v15 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v15[6] = 1;
              *(float32x4_t *)(v15 + 7) = v47;
            }
            v62 = v4;
            v63 = v3;
            v64 = v13;
            v65 = v2;
            v16 = sub_2394AD918(v10, &v62);
            if (v16)
            {
              *(float32x4_t *)(v16 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v16 + 7));
              ++v16[6];
            }
            else
            {
              v48 = *a2;
              v66 = &v62;
              v17 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v17[6] = 1;
              *(float32x4_t *)(v17 + 7) = v48;
            }
            v62 = v4;
            v63 = v3;
            v64 = v13;
            v65 = (v2 + 1);
            v18 = sub_2394AD918(v10, &v62);
            if (v18)
            {
              *(float32x4_t *)(v18 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v18 + 7));
              ++v18[6];
            }
            else
            {
              v49 = *a2;
              v66 = &v62;
              v19 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v19[6] = 1;
              *(float32x4_t *)(v19 + 7) = v49;
            }
            v62 = v4;
            v63 = (v3 + 1);
            v64 = v45;
            v65 = v2;
            v20 = sub_2394AD918(v10, &v62);
            if (v20)
            {
              *(float32x4_t *)(v20 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v20 + 7));
              ++v20[6];
            }
            else
            {
              v50 = *a2;
              v66 = &v62;
              v21 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v21[6] = 1;
              *(float32x4_t *)(v21 + 7) = v50;
            }
            v62 = v4;
            v63 = (v3 + 1);
            v64 = v45;
            v65 = (v2 + 1);
            v22 = sub_2394AD918(v10, &v62);
            if (v22)
            {
              *(float32x4_t *)(v22 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v22 + 7));
              ++v22[6];
            }
            else
            {
              v51 = *a2;
              v66 = &v62;
              v23 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v23[6] = 1;
              *(float32x4_t *)(v23 + 7) = v51;
            }
            v62 = v4;
            v63 = (v3 + 1);
            v64 = v13;
            v65 = v2;
            v24 = sub_2394AD918(v10, &v62);
            if (v24)
            {
              *(float32x4_t *)(v24 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v24 + 7));
              ++v24[6];
            }
            else
            {
              v52 = *a2;
              v66 = &v62;
              v25 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v25[6] = 1;
              *(float32x4_t *)(v25 + 7) = v52;
            }
            v62 = v4;
            v63 = (v3 + 1);
            v64 = v13;
            v65 = (v2 + 1);
            v26 = sub_2394AD918(v10, &v62);
            if (v26)
            {
              *(float32x4_t *)(v26 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v26 + 7));
              ++v26[6];
            }
            else
            {
              v53 = *a2;
              v66 = &v62;
              v27 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v27[6] = 1;
              *(float32x4_t *)(v27 + 7) = v53;
            }
            v62 = (v4 + 1);
            v63 = v3;
            v64 = v45;
            v65 = v2;
            v28 = sub_2394AD918(v10, &v62);
            if (v28)
            {
              *(float32x4_t *)(v28 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v28 + 7));
              ++v28[6];
            }
            else
            {
              v54 = *a2;
              v66 = &v62;
              v29 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v29[6] = 1;
              *(float32x4_t *)(v29 + 7) = v54;
            }
            v62 = (v4 + 1);
            v63 = v3;
            v64 = v45;
            v65 = (v2 + 1);
            v30 = sub_2394AD918(v10, &v62);
            if (v30)
            {
              *(float32x4_t *)(v30 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v30 + 7));
              ++v30[6];
            }
            else
            {
              v55 = *a2;
              v66 = &v62;
              v31 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v31[6] = 1;
              *(float32x4_t *)(v31 + 7) = v55;
            }
            v62 = (v4 + 1);
            v63 = v3;
            v64 = v13;
            v65 = v2;
            v32 = sub_2394AD918(v10, &v62);
            if (v32)
            {
              *(float32x4_t *)(v32 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v32 + 7));
              ++v32[6];
            }
            else
            {
              v56 = *a2;
              v66 = &v62;
              v33 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v33[6] = 1;
              *(float32x4_t *)(v33 + 7) = v56;
            }
            v62 = (v4 + 1);
            v63 = v3;
            v64 = v13;
            v65 = (v2 + 1);
            v34 = sub_2394AD918(v10, &v62);
            if (v34)
            {
              *(float32x4_t *)(v34 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v34 + 7));
              ++v34[6];
            }
            else
            {
              v57 = *a2;
              v66 = &v62;
              v35 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v35[6] = 1;
              *(float32x4_t *)(v35 + 7) = v57;
            }
            v62 = (v4 + 1);
            v63 = (v3 + 1);
            v64 = v45;
            v65 = v2;
            v36 = sub_2394AD918(v10, &v62);
            if (v36)
            {
              *(float32x4_t *)(v36 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v36 + 7));
              ++v36[6];
            }
            else
            {
              v58 = *a2;
              v66 = &v62;
              v37 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v37[6] = 1;
              *(float32x4_t *)(v37 + 7) = v58;
            }
            v62 = (v4 + 1);
            v63 = (v3 + 1);
            v64 = v45;
            v65 = (v2 + 1);
            v38 = sub_2394AD918(v10, &v62);
            if (v38)
            {
              *(float32x4_t *)(v38 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v38 + 7));
              ++v38[6];
            }
            else
            {
              v59 = *a2;
              v66 = &v62;
              v39 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v39[6] = 1;
              *(float32x4_t *)(v39 + 7) = v59;
            }
            v62 = (v4 + 1);
            v63 = (v3 + 1);
            v64 = v13;
            v65 = v2;
            v40 = sub_2394AD918(v10, &v62);
            if (v40)
            {
              *(float32x4_t *)(v40 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v40 + 7));
              ++v40[6];
            }
            else
            {
              v60 = *a2;
              v66 = &v62;
              v41 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v41[6] = 1;
              *(float32x4_t *)(v41 + 7) = v60;
            }
            v62 = (v4 + 1);
            v63 = (v3 + 1);
            v64 = v13;
            v65 = (v2 + 1);
            v42 = sub_2394AD918(v10, &v62);
            if (v42)
            {
              *(float32x4_t *)(v42 + 7) = vaddq_f32(*a2, *(float32x4_t *)(v42 + 7));
              ++v42[6];
            }
            else
            {
              v61 = *a2;
              v66 = &v62;
              v43 = sub_2394ADA70((uint64_t)v10, &v62, (uint64_t)&unk_239EC6E98, (_OWORD **)&v66);
              v43[6] = 1;
              *(float32x4_t *)(v43 + 7) = v61;
            }
            return 1;
          }
        }
      }
    }
  }
  return v7;
}

BOOL sub_2394AC144(_QWORD *a1, uint64_t a2, __n128 a3)
{
  __n128 *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v26;

  v5 = *(__n128 **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = a1[18];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v5) >> 3) < v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
LABEL_32:
      sub_2394189F8();
    v7 = 24 * v6;
    v8 = (char *)operator new(24 * v6);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = &v8[v7];
    if (v5)
      operator delete(v5);
  }
  v9 = (uint64_t *)a1[17];
  if (v9)
  {
    while (1)
    {
      v11 = v9[6];
      if (v11 < a1[3])
        goto LABEL_9;
      a3.n128_f32[0] = (float)v11;
      a3 = (__n128)vdivq_f32(*(float32x4_t *)(v9 + 7), (float32x4_t)vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0));
      v13 = *(__n128 **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
        break;
      v13->n128_u64[0] = v11;
      *(__n128 *)((char *)v13 + 8) = a3;
      v10 = &v13[1].n128_i8[8];
LABEL_8:
      *(_QWORD *)(a2 + 8) = v10;
LABEL_9:
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_28;
    }
    v14 = *(__n128 **)a2;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(_QWORD *)a2) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_32;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    if (v18)
    {
      v26 = a3;
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v19 = (char *)operator new(24 * v18);
      a3 = v26;
      v20 = (uint64_t)&v19[24 * v15];
      *(_QWORD *)v20 = v11;
      *(__n128 *)(v20 + 8) = v26;
      v21 = v20;
      if (v13 == v14)
        goto LABEL_25;
    }
    else
    {
      v19 = 0;
      v20 = 8 * (((uint64_t)v13 - *(_QWORD *)a2) >> 3);
      *(_QWORD *)v20 = v11;
      *(__n128 *)(v20 + 8) = a3;
      v21 = 24 * v15;
      if (v13 == v14)
        goto LABEL_25;
    }
    do
    {
      a3 = *(__n128 *)((char *)v13 - 24);
      *(_QWORD *)(v21 - 8) = v13[-1].n128_u64[1];
      *(__n128 *)(v21 - 24) = a3;
      v21 -= 24;
      v13 = (__n128 *)((char *)v13 - 24);
    }
    while (v13 != v14);
    v13 = *(__n128 **)a2;
LABEL_25:
    v10 = (__int8 *)(v20 + 24);
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = v20 + 24;
    *(_QWORD *)(a2 + 16) = &v19[24 * v18];
    if (v13)
      operator delete(v13);
    goto LABEL_8;
  }
LABEL_28:
  v22 = *(__n128 **)(a2 + 8);
  v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *(_QWORD *)a2) >> 3));
  if (v22 == *(__n128 **)a2)
    v24 = 0;
  else
    v24 = v23;
  sub_2394AC3F8(*(__n128 **)a2, v22, v24, 1, a3);
  return *(_QWORD *)(a2 + 8) != *(_QWORD *)a2;
}

BOOL sub_2394AC384(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v5;
  float v6;
  _BOOL4 v7;

  if (vabds_f32(*a2, *a3) > *a4)
    return 0;
  v5 = vabds_f32(a2[2], a3[2]);
  if ((float)((float)*(int *)(a1 + 92) - v5) < v5)
    v5 = (float)*(int *)(a1 + 92) - v5;
  v6 = vabds_f32(a2[3], a3[3]);
  v7 = vabds_f32(a2[1], a3[1]) <= a4[1];
  if (v5 > a4[2])
    v7 = 0;
  return v6 <= a4[3] && v7;
}

__n128 sub_2394AC3F8(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t *v9;
  __n128 *v10;
  unint64_t *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  __n128 *v48;
  uint64_t v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __n128 *v71;
  unint64_t v72;
  unint64_t v73;
  __n128 *v74;
  __n128 v75;
  unint64_t v76;
  unint64_t v77;
  __n128 v78;
  BOOL v79;
  __n128 v80;
  unint64_t v81;
  __n128 *v82;
  __n128 *v83;
  unint64_t v84;
  __n128 v85;
  unint64_t v86;
  unint64_t v87;
  __n128 v88;
  __n128 *v89;
  unint64_t v90;
  __n128 *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __n128 v95;
  __n128 *v96;
  __n128 *v97;
  __n128 *v98;
  __n128 *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 *v105;
  BOOL v107;
  uint64_t v108;
  __n128 *v109;
  uint64_t v110;
  __n128 *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  __int128 v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __n128 *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __int128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;

LABEL_1:
  v9 = &a2[-2].n128_u64[1];
  v10 = a2 - 3;
  v11 = &a2[-5].n128_u64[1];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v90 = a2[-2].n128_u64[1];
        v89 = (__n128 *)((char *)a2 - 24);
        if (v90 > v12->n128_u64[0])
          goto LABEL_100;
        return result;
      case 3:
        v91 = (__n128 *)((char *)v12 + 24);
        v92 = v12[1].n128_u64[1];
        v94 = a2[-2].n128_i64[1];
        v89 = (__n128 *)((char *)a2 - 24);
        v93 = v94;
        if (v92 > v12->n128_u64[0])
        {
          if (v93 <= v92)
          {
            v202 = v12[1].n128_i64[0];
            v178 = *v12;
            *v12 = *v91;
            v12[1].n128_u64[0] = v12[2].n128_u64[1];
            result = v178;
            *v91 = v178;
            v12[2].n128_u64[1] = v202;
            if (v89->n128_u64[0] <= v12[1].n128_u64[1])
              return result;
            result = *v91;
            v147 = v12[2].n128_i64[1];
            v148 = v89[1].n128_i64[0];
            *v91 = *v89;
            v12[2].n128_u64[1] = v148;
            v89[1].n128_u64[0] = v147;
          }
          else
          {
LABEL_100:
            v198 = v12[1].n128_i64[0];
            v171 = *v12;
            v95 = *v89;
            v12[1].n128_u64[0] = v89[1].n128_u64[0];
            *v12 = v95;
            result = v171;
            v89[1].n128_u64[0] = v198;
          }
          *v89 = result;
          return result;
        }
        if (v93 > v92)
        {
          result = *v91;
          v142 = v12[2].n128_i64[1];
          v143 = v89[1].n128_i64[0];
          *v91 = *v89;
          v12[2].n128_u64[1] = v143;
          v89[1].n128_u64[0] = v142;
          *v89 = result;
          if (v12[1].n128_u64[1] > v12->n128_u64[0])
          {
            v201 = v12[1].n128_i64[0];
            v176 = *v12;
            *v12 = *v91;
            v12[1].n128_u64[0] = v12[2].n128_u64[1];
            result = v176;
            *v91 = v176;
            v12[2].n128_u64[1] = v201;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = sub_2394AD790(v12, (__n128 *)((char *)v12 + 24), v12[3].n128_u64, (uint64_t)&a2[-2].n128_i64[1], result).n128_u64[0];
        return result;
      case 5:
        v96 = (__n128 *)((char *)v12 + 24);
        v97 = v12 + 3;
        v98 = (__n128 *)((char *)v12 + 72);
        result.n128_u64[0] = sub_2394AD790(v12, (__n128 *)((char *)v12 + 24), v12[3].n128_u64, (uint64_t)&v12[4].n128_i64[1], result).n128_u64[0];
        v100 = a2[-2].n128_u64[1];
        v99 = (__n128 *)((char *)a2 - 24);
        if (v100 > v12[4].n128_u64[1])
        {
          result = *v98;
          v101 = v12[5].n128_u64[1];
          v102 = v99[1].n128_u64[0];
          *v98 = *v99;
          v12[5].n128_u64[1] = v102;
          v99[1].n128_u64[0] = v101;
          *v99 = result;
          if (v98->n128_u64[0] > v97->n128_u64[0])
          {
            v103 = v12[4].n128_i64[0];
            result = *v97;
            *v97 = *v98;
            v12[4].n128_u64[0] = v12[5].n128_u64[1];
            *v98 = result;
            v12[5].n128_u64[1] = v103;
            if (v97->n128_u64[0] > v96->n128_u64[0])
            {
              v104 = v12[2].n128_i64[1];
              result = *v96;
              *v96 = *v97;
              v12[2].n128_u64[1] = v12[4].n128_u64[0];
              *v97 = result;
              v12[4].n128_u64[0] = v104;
              if (v12[1].n128_u64[1] > v12->n128_u64[0])
              {
                v199 = v12[1].n128_i64[0];
                v172 = *v12;
                *v12 = *v96;
                v12[1].n128_u64[0] = v12[2].n128_u64[1];
                result = v172;
                *v96 = v172;
                v12[2].n128_u64[1] = v199;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if (v12 == a2)
              return result;
            v115 = (unint64_t)(v14 - 2) >> 1;
            v116 = v115;
            while (1)
            {
              if (v115 >= v116)
              {
                v117 = (2 * v116) | 1;
                v118 = &v12->n128_u64[3 * v117];
                if (2 * v116 + 2 >= v14)
                {
                  v121 = &v12->n128_u64[3 * v116];
                  v122 = *v121;
                  if (*v118 <= *v121)
                    goto LABEL_138;
                }
                else
                {
                  v119 = v118[3];
                  v120 = *v118 > v119;
                  if (*v118 < v119)
                    v119 = *v118;
                  if (v120)
                  {
                    v118 += 3;
                    v117 = 2 * v116 + 2;
                  }
                  v121 = &v12->n128_u64[3 * v116];
                  v122 = *v121;
                  if (v119 <= *v121)
                  {
LABEL_138:
                    v174 = *(_OWORD *)(v121 + 1);
                    while (1)
                    {
                      v125 = v121;
                      v121 = v118;
                      v126 = *(_OWORD *)v118;
                      v125[2] = v118[2];
                      *(_OWORD *)v125 = v126;
                      if (v115 < v117)
                        break;
                      v127 = (2 * v117) | 1;
                      v118 = &v12->n128_u64[3 * v127];
                      v117 = 2 * v117 + 2;
                      if (v117 < v14)
                      {
                        v123 = *v118;
                        v124 = v118[3];
                        if (*v118 >= v124)
                          v123 = v118[3];
                        if (*v118 <= v124)
                          v117 = v127;
                        else
                          v118 += 3;
                        if (v123 > v122)
                          break;
                      }
                      else
                      {
                        v117 = v127;
                        if (*v118 > v122)
                          break;
                      }
                    }
                    *v121 = v122;
                    *(_OWORD *)(v121 + 1) = v174;
                  }
                }
              }
              v120 = v116-- <= 0;
              if (v120)
              {
                v128 = v13 / 0x18uLL;
                do
                {
                  v129 = 0;
                  v200 = v12[1].n128_i64[0];
                  v175 = *v12;
                  v130 = (uint64_t)v12;
                  do
                  {
                    v132 = v130 + 24 * v129 + 24;
                    v133 = (2 * v129) | 1;
                    v134 = 2 * v129 + 2;
                    if (v134 < v128 && *(_QWORD *)v132 > *(_QWORD *)(v132 + 24))
                    {
                      v132 += 24;
                      v133 = v134;
                    }
                    v131 = *(_OWORD *)v132;
                    *(_QWORD *)(v130 + 16) = *(_QWORD *)(v132 + 16);
                    *(_OWORD *)v130 = v131;
                    v130 = v132;
                    v129 = v133;
                  }
                  while (v133 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                  a2 = (__n128 *)((char *)a2 - 24);
                  if ((__n128 *)v132 == a2)
                  {
                    result = v175;
                    *(_QWORD *)(v132 + 16) = v200;
                    *(__n128 *)v132 = v175;
                  }
                  else
                  {
                    v135 = *a2;
                    *(_QWORD *)(v132 + 16) = a2[1].n128_u64[0];
                    *(__n128 *)v132 = v135;
                    result = v175;
                    a2[1].n128_u64[0] = v200;
                    *a2 = v175;
                    v136 = v132 - (_QWORD)v12 + 24;
                    if (v136 >= 25)
                    {
                      v137 = (v136 / 0x18uLL - 2) >> 1;
                      v138 = (uint64_t)v12 + 24 * v137;
                      v139 = *(_QWORD *)v132;
                      if (*(_QWORD *)v138 > *(_QWORD *)v132)
                      {
                        v151 = *(__n128 *)(v132 + 8);
                        do
                        {
                          v140 = v132;
                          v132 = v138;
                          v141 = *(_OWORD *)v138;
                          *(_QWORD *)(v140 + 16) = *(_QWORD *)(v138 + 16);
                          *(_OWORD *)v140 = v141;
                          if (!v137)
                            break;
                          v137 = (v137 - 1) >> 1;
                          v138 = (uint64_t)v12 + 24 * v137;
                        }
                        while (*(_QWORD *)v138 > v139);
                        *(_QWORD *)v132 = v139;
                        result = v151;
                        *(__n128 *)(v132 + 8) = v151;
                      }
                    }
                  }
                  v120 = v128-- <= 2;
                }
                while (!v120);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)((char *)v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = *v9;
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = v12->n128_u64[0];
            if (v12->n128_u64[0] <= v16->n128_u64[0])
            {
              if (v17 > v20)
              {
                v183 = v12[1].n128_i64[0];
                v156 = *v12;
                v24 = *(__n128 *)v9;
                v12[1].n128_u64[0] = a2[-1].n128_u64[1];
                *v12 = v24;
                a2[-1].n128_u64[1] = v183;
                *(__n128 *)v9 = v156;
                if (v12->n128_u64[0] > v16->n128_u64[0])
                {
                  v184 = v16[1].n128_u64[0];
                  v157 = *v16;
                  v25 = *v12;
                  v16[1].n128_u64[0] = v12[1].n128_u64[0];
                  *v16 = v25;
                  v12[1].n128_u64[0] = v184;
                  *v12 = v157;
                  --a3;
                  v26 = v12->n128_u64[0];
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 <= v20)
            {
              v187 = v16[1].n128_u64[0];
              v160 = *v16;
              v42 = *v12;
              v16[1].n128_u64[0] = v12[1].n128_u64[0];
              *v16 = v42;
              v12[1].n128_u64[0] = v187;
              *v12 = v160;
              if (*v9 <= v12->n128_u64[0])
                goto LABEL_31;
              v180 = v12[1].n128_u64[0];
              v153 = *v12;
              v43 = *(__n128 *)v9;
              v12[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v12 = v43;
            }
            else
            {
              v180 = v16[1].n128_u64[0];
              v153 = *v16;
              v21 = *(__n128 *)v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v21;
            }
            a2[-1].n128_u64[1] = v180;
            *(__n128 *)v9 = v153;
LABEL_31:
            --a3;
            v26 = v12->n128_u64[0];
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] <= v12->n128_u64[0])
          {
            if (v17 > v18)
            {
              v181 = v16[1].n128_u64[0];
              v154 = *v16;
              v22 = *(__n128 *)v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v22;
              a2[-1].n128_u64[1] = v181;
              *(__n128 *)v9 = v154;
              if (v16->n128_u64[0] > v12->n128_u64[0])
              {
                v182 = v12[1].n128_u64[0];
                v155 = *v12;
                v23 = *v16;
                v12[1].n128_u64[0] = v16[1].n128_u64[0];
                *v12 = v23;
                v16[1].n128_u64[0] = v182;
                *v16 = v155;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v185 = v12[1].n128_u64[0];
              v158 = *v12;
              v27 = *v16;
              v12[1].n128_u64[0] = v16[1].n128_u64[0];
              *v12 = v27;
              v16[1].n128_u64[0] = v185;
              *v16 = v158;
              if (*v9 <= v16->n128_u64[0])
                goto LABEL_22;
              v179 = v16[1].n128_u64[0];
              v152 = *v16;
              v28 = *(__n128 *)v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v28;
            }
            else
            {
              v179 = v12[1].n128_u64[0];
              v152 = *v12;
              v19 = *(__n128 *)v9;
              v12[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v12 = v19;
            }
            a2[-1].n128_u64[1] = v179;
            *(__n128 *)v9 = v152;
          }
LABEL_22:
          v29 = (__n128 *)((char *)v12 + 24);
          v30 = (uint64_t)v12 + 24 * v15;
          v33 = *(_QWORD *)(v30 - 24);
          v31 = (__n128 *)(v30 - 24);
          v32 = v33;
          v34 = v10->n128_u64[0];
          if (v33 <= v12[1].n128_u64[1])
          {
            if (v34 > v32)
            {
              v186 = v31[1].n128_i64[0];
              v159 = *v31;
              v38 = *v10;
              v31[1].n128_u64[0] = a2[-2].n128_u64[0];
              *v31 = v38;
              a2[-2].n128_u64[0] = v186;
              *v10 = v159;
              if (v31->n128_u64[0] > v29->n128_u64[0])
              {
                v39 = *v29;
                v40 = v12[2].n128_i64[1];
                v41 = v31[1].n128_i64[0];
                *v29 = *v31;
                v12[2].n128_u64[1] = v41;
                v31[1].n128_u64[0] = v40;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v34 <= v32)
            {
              v44 = *v29;
              v45 = v12[2].n128_i64[1];
              v46 = v31[1].n128_i64[0];
              *v29 = *v31;
              v12[2].n128_u64[1] = v46;
              v31[1].n128_u64[0] = v45;
              *v31 = v44;
              if (v10->n128_u64[0] <= v31->n128_u64[0])
                goto LABEL_36;
              v188 = v31[1].n128_i64[0];
              v161 = *v31;
              v47 = *v10;
              v31[1].n128_u64[0] = a2[-2].n128_u64[0];
              *v31 = v47;
              v35 = v161;
              a2[-2].n128_u64[0] = v188;
            }
            else
            {
              v35 = *v29;
              v36 = v12[2].n128_i64[1];
              v37 = a2[-2].n128_i64[0];
              *v29 = *v10;
              v12[2].n128_u64[1] = v37;
              a2[-2].n128_u64[0] = v36;
            }
            *v10 = v35;
          }
LABEL_36:
          v48 = v12 + 3;
          v49 = (uint64_t)v12 + 24 * v15;
          v52 = *(_QWORD *)(v49 + 24);
          v50 = (__n128 *)(v49 + 24);
          v51 = v52;
          v53 = *v11;
          if (v52 <= v12[3].n128_u64[0])
          {
            if (v53 > v51)
            {
              v189 = v50[1].n128_i64[0];
              v162 = *v50;
              v57 = *(__n128 *)v11;
              v50[1].n128_u64[0] = a2[-4].n128_u64[1];
              *v50 = v57;
              a2[-4].n128_u64[1] = v189;
              *(__n128 *)v11 = v162;
              if (v50->n128_u64[0] > v48->n128_u64[0])
              {
                v58 = *v48;
                v59 = v12[4].n128_i64[0];
                v60 = v50[1].n128_i64[0];
                *v48 = *v50;
                v12[4].n128_u64[0] = v60;
                v50[1].n128_u64[0] = v59;
                *v50 = v58;
              }
            }
          }
          else
          {
            if (v53 <= v51)
            {
              v61 = *v48;
              v62 = v12[4].n128_i64[0];
              v63 = v50[1].n128_i64[0];
              *v48 = *v50;
              v12[4].n128_u64[0] = v63;
              v50[1].n128_u64[0] = v62;
              *v50 = v61;
              if (*v11 <= v50->n128_u64[0])
                goto LABEL_45;
              v190 = v50[1].n128_i64[0];
              v163 = *v50;
              v64 = *(__n128 *)v11;
              v50[1].n128_u64[0] = a2[-4].n128_u64[1];
              *v50 = v64;
              v54 = v163;
              a2[-4].n128_u64[1] = v190;
            }
            else
            {
              v54 = *v48;
              v55 = v12[4].n128_i64[0];
              v56 = a2[-4].n128_i64[1];
              *v48 = *(__n128 *)v11;
              v12[4].n128_u64[0] = v56;
              a2[-4].n128_u64[1] = v55;
            }
            *(__n128 *)v11 = v54;
          }
LABEL_45:
          v65 = v16->n128_u64[0];
          v66 = v50->n128_u64[0];
          if (v16->n128_u64[0] <= v31->n128_u64[0])
          {
            if (v66 > v65)
            {
              v192 = v16[1].n128_u64[0];
              v165 = *v16;
              *v16 = *v50;
              v16[1].n128_u64[0] = v50[1].n128_u64[0];
              v50[1].n128_u64[0] = v192;
              *v50 = v165;
              if (v16->n128_u64[0] > v31->n128_u64[0])
              {
                v193 = v31[1].n128_u64[0];
                v166 = *v31;
                *v31 = *v16;
                v31[1].n128_u64[0] = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v193;
                *v16 = v166;
              }
            }
          }
          else
          {
            if (v66 <= v65)
            {
              v194 = v31[1].n128_u64[0];
              v167 = *v31;
              *v31 = *v16;
              v31[1].n128_u64[0] = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v194;
              *v16 = v167;
              if (v50->n128_u64[0] <= v16->n128_u64[0])
                goto LABEL_54;
              v191 = v16[1].n128_u64[0];
              v164 = *v16;
              *v16 = *v50;
              v16[1].n128_u64[0] = v50[1].n128_u64[0];
            }
            else
            {
              v191 = v31[1].n128_u64[0];
              v164 = *v31;
              *v31 = *v50;
              v31[1].n128_u64[0] = v50[1].n128_u64[0];
            }
            v50[1].n128_u64[0] = v191;
            *v50 = v164;
          }
LABEL_54:
          v195 = v12[1].n128_u64[0];
          v168 = *v12;
          v67 = *v16;
          v12[1].n128_u64[0] = v16[1].n128_u64[0];
          *v12 = v67;
          v16[1].n128_u64[0] = v195;
          *v16 = v168;
          --a3;
          v26 = v12->n128_u64[0];
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (v12[-2].n128_u64[1] <= v26)
          {
            v150 = *(__n128 *)((char *)v12 + 8);
            if (v26 <= *v9)
            {
              v82 = (__n128 *)((char *)v12 + 24);
              do
              {
                v12 = v82;
                if (v82 >= a2)
                  break;
                v82 = (__n128 *)((char *)v82 + 24);
              }
              while (v26 <= v12->n128_u64[0]);
            }
            else
            {
              do
              {
                v81 = v12[1].n128_u64[1];
                v12 = (__n128 *)((char *)v12 + 24);
              }
              while (v26 <= v81);
            }
            v83 = a2;
            if (v12 < a2)
            {
              v83 = a2;
              do
              {
                v84 = v83[-2].n128_u64[1];
                v83 = (__n128 *)((char *)v83 - 24);
              }
              while (v26 > v84);
            }
            while (v12 < v83)
            {
              v197 = v12[1].n128_i64[0];
              v170 = *v12;
              v85 = *v83;
              v12[1].n128_u64[0] = v83[1].n128_u64[0];
              *v12 = v85;
              v83[1].n128_u64[0] = v197;
              *v83 = v170;
              do
              {
                v86 = v12[1].n128_u64[1];
                v12 = (__n128 *)((char *)v12 + 24);
              }
              while (v26 <= v86);
              do
              {
                v87 = v83[-2].n128_u64[1];
                v83 = (__n128 *)((char *)v83 - 24);
              }
              while (v26 > v87);
            }
            if (&v12[-2].n128_i8[8] != (__int8 *)a1)
            {
              v88 = *(__n128 *)((char *)v12 - 24);
              a1[1].n128_u64[0] = v12[-1].n128_u64[1];
              *a1 = v88;
            }
            a4 = 0;
            v12[-2].n128_u64[1] = v26;
            result = v150;
            v12[-1] = v150;
            continue;
          }
LABEL_56:
          v68 = 0;
          v149 = *(__n128 *)((char *)v12 + 8);
          do
          {
            v69 = v12[1].n128_u64[v68 + 1];
            v68 += 3;
          }
          while (v69 > v26);
          v70 = (unint64_t)&v12->n128_u64[v68];
          v71 = a2;
          if (v68 == 3)
          {
            v71 = a2;
            do
            {
              if (v70 >= (unint64_t)v71)
                break;
              v73 = v71[-2].n128_u64[1];
              v71 = (__n128 *)((char *)v71 - 24);
            }
            while (v73 <= v26);
          }
          else
          {
            do
            {
              v72 = v71[-2].n128_u64[1];
              v71 = (__n128 *)((char *)v71 - 24);
            }
            while (v72 <= v26);
          }
          v12 = (__n128 *)((char *)v12 + v68 * 8);
          if (v70 < (unint64_t)v71)
          {
            v74 = v71;
            do
            {
              v196 = v12[1].n128_i64[0];
              v169 = *v12;
              v75 = *v74;
              v12[1].n128_u64[0] = v74[1].n128_u64[0];
              *v12 = v75;
              v74[1].n128_u64[0] = v196;
              *v74 = v169;
              do
              {
                v76 = v12[1].n128_u64[1];
                v12 = (__n128 *)((char *)v12 + 24);
              }
              while (v76 > v26);
              do
              {
                v77 = v74[-2].n128_u64[1];
                v74 = (__n128 *)((char *)v74 - 24);
              }
              while (v77 <= v26);
            }
            while (v12 < v74);
          }
          if (&v12[-2].n128_i8[8] != (__int8 *)a1)
          {
            v78 = *(__n128 *)((char *)v12 - 24);
            a1[1].n128_u64[0] = v12[-1].n128_u64[1];
            *a1 = v78;
          }
          v12[-2].n128_u64[1] = v26;
          v12[-1] = v149;
          if (v70 < (unint64_t)v71)
            goto LABEL_75;
          v79 = sub_2394AD300(a1, &v12[-2].n128_i8[8], v149);
          if (!sub_2394AD300(v12, (char *)a2, v80))
          {
            if (v79)
              continue;
LABEL_75:
            sub_2394AC3F8(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)((char *)v12 - 24);
          if (v79)
            return result;
          goto LABEL_1;
        }
        v105 = (__n128 *)((char *)v12 + 24);
        v107 = v12 == a2 || v105 == a2;
        if ((a4 & 1) != 0)
        {
          if (v107)
            return result;
          v108 = 0;
          v109 = v12;
          while (1)
          {
            v111 = v105;
            v112 = v109[1].n128_u64[1];
            if (v112 > v109->n128_u64[0])
            {
              v173 = v109[2];
              v113 = v108;
              do
              {
                v114 = (uint64_t)v12 + v113;
                *(__n128 *)(v114 + 24) = *(__n128 *)((char *)v12 + v113);
                *(_QWORD *)(v114 + 40) = *(unint64_t *)((char *)v12[1].n128_u64 + v113);
                if (!v113)
                {
                  v110 = (uint64_t)v12;
                  goto LABEL_118;
                }
                v113 -= 24;
              }
              while (v112 > *(_QWORD *)(v114 - 24));
              v110 = (uint64_t)&v12[1].n128_i64[1] + v113;
LABEL_118:
              *(_QWORD *)v110 = v112;
              result = v173;
              *(__n128 *)(v110 + 8) = v173;
            }
            v105 = (__n128 *)((char *)v111 + 24);
            v108 += 24;
            v109 = v111;
            if (&v111[1].n128_i8[8] == (__int8 *)a2)
              return result;
          }
        }
        if (!v107)
        {
          do
          {
            v144 = v105;
            v145 = a1[1].n128_u64[1];
            if (v145 > a1->n128_u64[0])
            {
              v177 = a1[2];
              do
              {
                *v105 = *(__n128 *)((char *)v105 - 24);
                v105[1].n128_u64[0] = v105[-1].n128_u64[1];
                v146 = v105[-3].n128_u64[0];
                v105 = (__n128 *)((char *)v105 - 24);
              }
              while (v145 > v146);
              v105->n128_u64[0] = v145;
              result = v177;
              *(__n128 *)((char *)v105 + 8) = v177;
            }
            v105 = (__n128 *)((char *)v144 + 24);
            a1 = v144;
          }
          while (&v144[1].n128_i8[8] != (__int8 *)a2);
        }
        return result;
    }
  }
}

  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v9 + 24))
        {
          v46 = *(_QWORD *)(v9 + 16);
          a5 = *(__n128 *)v9;
          *(_QWORD *)v9 = *(_QWORD *)(a2 - 32);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 16);
          *(__n128 *)(a2 - 32) = a5;
          *(_QWORD *)(a2 - 16) = v46;
          LODWORD(v46) = *(_DWORD *)(v9 + 24);
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v46;
        }
        return a5.n128_f64[0];
      case 3uLL:
        sub_2394E2BD0((uint64_t *)v9, (__int128 *)(v9 + 32), (uint64_t *)(a2 - 32));
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = sub_2394E2F44(v9, v9 + 32, v9 + 64, a2 - 32).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = sub_2394E2A70((__n128 *)v9, (__n128 *)(v9 + 32), (__n128 *)(v9 + 64), (__n128 *)(v9 + 96), a2 - 32).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v10 > 767)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v58 = (v11 - 2) >> 1;
              v59 = v58;
              do
              {
                if (v58 >= v59)
                {
                  v61 = (2 * v59) | 1;
                  v62 = (__n128 *)(v9 + 32 * v61);
                  if (2 * v59 + 2 < (uint64_t)v11)
                  {
                    v63 = v62[1].n128_i32[2];
                    v64 = v62[3].n128_i32[2];
                    v62 += 2 * (v63 < v64);
                    if (v63 < v64)
                      v61 = 2 * v59 + 2;
                  }
                  v65 = (__n128 *)(v9 + 32 * v59);
                  v66 = v65[1].n128_i32[2];
                  if ((signed __int32)v62[1].n128_u32[2] >= v66)
                  {
                    a5 = *v65;
                    v67 = v65[1].n128_u64[0];
                    do
                    {
                      v68 = v65;
                      v65 = v62;
                      v68->n128_u64[0] = v62->n128_u64[0];
                      v68->n128_u64[1] = v62->n128_u64[1];
                      v68[1].n128_u64[0] = v62[1].n128_u64[0];
                      v68[1].n128_u32[2] = v62[1].n128_u32[2];
                      if (v58 < v61)
                        break;
                      v69 = (2 * v61) | 1;
                      v62 = (__n128 *)(v9 + 32 * v69);
                      v70 = 2 * v61 + 2;
                      if (v70 < (uint64_t)v11)
                      {
                        v71 = v62[1].n128_i32[2];
                        v72 = v62[3].n128_i32[2];
                        v62 += 2 * (v71 < v72);
                        if (v71 < v72)
                          v69 = v70;
                      }
                      v61 = v69;
                    }
                    while ((signed __int32)v62[1].n128_u32[2] >= v66);
                    *v65 = a5;
                    v65[1].n128_u64[0] = v67;
                    v65[1].n128_u32[2] = v66;
                  }
                }
                v60 = v59-- <= 0;
              }
              while (!v60);
              v73 = (unint64_t)v10 >> 5;
              do
              {
                v74 = 0;
                v75 = *(_QWORD *)v9;
                v76 = *(_QWORD *)(v9 + 8);
                v77 = *(_QWORD *)(v9 + 16);
                v78 = *(_DWORD *)(v9 + 24);
                v79 = v9;
                do
                {
                  v80 = v79 + 32 * v74 + 32;
                  v81 = (2 * v74) | 1;
                  v82 = 2 * v74 + 2;
                  if (v82 < v73)
                  {
                    v83 = *(_DWORD *)(v80 + 24);
                    v84 = *(_DWORD *)(v80 + 56);
                    v80 += 32 * (v83 < v84);
                    if (v83 < v84)
                      v81 = v82;
                  }
                  *(_QWORD *)v79 = *(_QWORD *)v80;
                  *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 8);
                  *(_QWORD *)(v79 + 16) = *(_QWORD *)(v80 + 16);
                  *(_DWORD *)(v79 + 24) = *(_DWORD *)(v80 + 24);
                  v79 = v80;
                  v74 = v81;
                }
                while (v81 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if (v80 == a2 - 32)
                {
                  *(_QWORD *)v80 = v75;
                  *(_QWORD *)(v80 + 8) = v76;
                  *(_QWORD *)(v80 + 16) = v77;
                  *(_DWORD *)(v80 + 24) = v78;
                }
                else
                {
                  *(_QWORD *)v80 = *(_QWORD *)(a2 - 32);
                  *(_QWORD *)(v80 + 8) = *(_QWORD *)(a2 - 24);
                  *(_QWORD *)(v80 + 16) = *(_QWORD *)(a2 - 16);
                  *(_DWORD *)(v80 + 24) = *(_DWORD *)(a2 - 8);
                  *(_QWORD *)(a2 - 32) = v75;
                  *(_QWORD *)(a2 - 24) = v76;
                  *(_QWORD *)(a2 - 16) = v77;
                  *(_DWORD *)(a2 - 8) = v78;
                  v85 = v80 - v9 + 32;
                  if (v85 >= 33)
                  {
                    v86 = (((unint64_t)v85 >> 5) - 2) >> 1;
                    v87 = v9 + 32 * v86;
                    v88 = *(_DWORD *)(v80 + 24);
                    if (*(_DWORD *)(v87 + 24) < v88)
                    {
                      a5 = *(__n128 *)v80;
                      v89 = *(_QWORD *)(v80 + 16);
                      do
                      {
                        v90 = v80;
                        v80 = v87;
                        *(_QWORD *)v90 = *(_QWORD *)v87;
                        *(_QWORD *)(v90 + 8) = *(_QWORD *)(v87 + 8);
                        *(_QWORD *)(v90 + 16) = *(_QWORD *)(v87 + 16);
                        *(_DWORD *)(v90 + 24) = *(_DWORD *)(v87 + 24);
                        if (!v86)
                          break;
                        v86 = (v86 - 1) >> 1;
                        v87 = v9 + 32 * v86;
                      }
                      while (*(_DWORD *)(v87 + 24) < v88);
                      *(__n128 *)v80 = a5;
                      *(_QWORD *)(v80 + 16) = v89;
                      *(_DWORD *)(v80 + 24) = v88;
                    }
                  }
                }
                a2 -= 32;
                v60 = v73-- <= 2;
              }
              while (!v60);
            }
            return a5.n128_f64[0];
          }
          v12 = v11 >> 1;
          v13 = v9 + 32 * (v11 >> 1);
          if ((unint64_t)v10 > 0x1000)
          {
            sub_2394E2BD0((uint64_t *)a1, (__int128 *)(a1 + 32 * (v11 >> 1)), (uint64_t *)(a2 - 32));
            v14 = a1 + 32 * v12;
            sub_2394E2BD0((uint64_t *)(a1 + 32), (__int128 *)(v14 - 32), (uint64_t *)(a2 - 64));
            sub_2394E2BD0((uint64_t *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v12), (uint64_t *)(a2 - 96));
            sub_2394E2BD0((uint64_t *)(v14 - 32), (__int128 *)v13, (uint64_t *)(a1 + 32 + 32 * v12));
            v15 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v13 + 16);
            v16 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(__n128 *)v13 = v16;
            *(_QWORD *)(v13 + 16) = v15;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v14 + 24) = v15;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v17 = *(_DWORD *)(a1 + 24);
            if (*(_DWORD *)(a1 - 8) < v17)
              goto LABEL_14;
            if (v17 >= *(_DWORD *)(a2 - 8))
            {
              v36 = a1 + 32;
              do
              {
                v9 = v36;
                if (v36 >= a2)
                  break;
                v37 = *(_DWORD *)(v36 + 24);
                v36 += 32;
              }
              while (v17 >= v37);
            }
            else
            {
              v18 = a1;
              do
              {
                v9 = v18 + 32;
                v19 = *(_DWORD *)(v18 + 56);
                v18 += 32;
              }
              while (v17 >= v19);
            }
            v38 = a2;
            if (v9 < a2)
            {
              v39 = a2;
              do
              {
                v38 = v39 - 32;
                v40 = *(_DWORD *)(v39 - 8);
                v39 -= 32;
              }
              while (v17 < v40);
            }
            a5 = *(__n128 *)a1;
            v41 = *(_QWORD *)(a1 + 16);
            while (v9 < v38)
            {
              v42 = *(_QWORD *)(v9 + 16);
              v43 = *(__n128 *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v38;
              *(_QWORD *)(v9 + 8) = *(_QWORD *)(v38 + 8);
              *(_QWORD *)(v9 + 16) = *(_QWORD *)(v38 + 16);
              *(__n128 *)v38 = v43;
              *(_QWORD *)(v38 + 16) = v42;
              LODWORD(v42) = *(_DWORD *)(v9 + 24);
              *(_DWORD *)(v9 + 24) = *(_DWORD *)(v38 + 24);
              *(_DWORD *)(v38 + 24) = v42;
              do
              {
                v44 = *(_DWORD *)(v9 + 56);
                v9 += 32;
              }
              while (v17 >= v44);
              do
              {
                v45 = *(_DWORD *)(v38 - 8);
                v38 -= 32;
              }
              while (v17 < v45);
            }
            if (v9 - 32 != a1)
            {
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 32);
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(v9 - 24);
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 16);
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(v9 - 8);
            }
            a4 = 0;
            *(__n128 *)(v9 - 32) = a5;
            *(_QWORD *)(v9 - 16) = v41;
            *(_DWORD *)(v9 - 8) = v17;
            continue;
          }
          sub_2394E2BD0((uint64_t *)(a1 + 32 * (v11 >> 1)), (__int128 *)a1, (uint64_t *)(a2 - 32));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v17 = *(_DWORD *)(a1 + 24);
LABEL_14:
          v20 = 0;
          v21 = *(__n128 *)a1;
          v22 = *(_QWORD *)(a1 + 16);
          do
          {
            v23 = *(_DWORD *)(a1 + v20 + 56);
            v20 += 32;
          }
          while (v23 < v17);
          v24 = a1 + v20;
          v25 = a2;
          if (v20 == 32)
          {
            v28 = a2;
            while (v24 < v28)
            {
              v26 = v28 - 32;
              v29 = *(_DWORD *)(v28 - 8);
              v28 -= 32;
              if (v29 < v17)
                goto LABEL_22;
            }
            v26 = v28;
            v9 = v24;
          }
          else
          {
            do
            {
              v26 = v25 - 32;
              v27 = *(_DWORD *)(v25 - 8);
              v25 -= 32;
            }
            while (v27 >= v17);
LABEL_22:
            v9 = v24;
            if (v24 < v26)
            {
              v30 = v26;
              do
              {
                v31 = *(_QWORD *)(v9 + 16);
                v32 = *(__n128 *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v30;
                *(_QWORD *)(v9 + 8) = *(_QWORD *)(v30 + 8);
                *(_QWORD *)(v9 + 16) = *(_QWORD *)(v30 + 16);
                *(__n128 *)v30 = v32;
                *(_QWORD *)(v30 + 16) = v31;
                LODWORD(v31) = *(_DWORD *)(v9 + 24);
                *(_DWORD *)(v9 + 24) = *(_DWORD *)(v30 + 24);
                *(_DWORD *)(v30 + 24) = v31;
                do
                {
                  v33 = *(_DWORD *)(v9 + 56);
                  v9 += 32;
                }
                while (v33 < v17);
                do
                {
                  v34 = *(_DWORD *)(v30 - 8);
                  v30 -= 32;
                }
                while (v34 >= v17);
              }
              while (v9 < v30);
            }
          }
          if (v9 - 32 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 32);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 16);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v9 - 8);
          }
          *(__n128 *)(v9 - 32) = v21;
          *(_QWORD *)(v9 - 16) = v22;
          *(_DWORD *)(v9 - 8) = v17;
          if (v24 < v26)
            goto LABEL_33;
          v35 = sub_2394E2D20(a1, v9 - 32);
          if (!sub_2394E2D20(v9, a2))
          {
            if (v35)
              continue;
LABEL_33:
            sub_2394E2204(a1, v9 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v9 - 32;
          if (v35)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v47 = (__n128 *)(v9 + 32);
        v49 = v9 == a2 || v47 == (__n128 *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v49)
          {
            v50 = 0;
            v51 = v9;
            do
            {
              v53 = v47;
              v54 = *(_DWORD *)(v51 + 56);
              if (v54 < *(_DWORD *)(v51 + 24))
              {
                a5 = *v53;
                v55 = *(_QWORD *)(v51 + 48);
                v56 = v50;
                do
                {
                  v57 = v9 + v56;
                  *(_OWORD *)(v57 + 32) = *(_OWORD *)(v9 + v56);
                  *(_QWORD *)(v57 + 48) = *(_QWORD *)(v9 + v56 + 16);
                  *(_DWORD *)(v57 + 56) = *(_DWORD *)(v9 + v56 + 24);
                  if (!v56)
                  {
                    v52 = (__n128 *)v9;
                    goto LABEL_69;
                  }
                  v56 -= 32;
                }
                while (v54 < *(_DWORD *)(v57 - 8));
                v52 = (__n128 *)(v9 + v56 + 32);
LABEL_69:
                *v52 = a5;
                v52[1].n128_u64[0] = v55;
                v52[1].n128_u32[2] = v54;
              }
              v47 = v53 + 2;
              v50 += 32;
              v51 = (unint64_t)v53;
            }
            while (&v53[2] != (__n128 *)a2);
          }
        }
        else if (!v49)
        {
          v91 = (_DWORD *)(v9 + 56);
          do
          {
            v92 = v47;
            v93 = *(_DWORD *)(a1 + 56);
            if (v93 < *(_DWORD *)(a1 + 24))
            {
              a5 = *v92;
              v94 = *(_QWORD *)(a1 + 48);
              v95 = v91;
              do
              {
                v96 = v95;
                *(_OWORD *)(v95 - 6) = *(_OWORD *)(v95 - 14);
                *((_QWORD *)v95 - 1) = *((_QWORD *)v95 - 5);
                v97 = *(v95 - 8);
                v95 -= 8;
                *v96 = v97;
              }
              while (v93 < *(v96 - 16));
              *(__n128 *)(v95 - 6) = a5;
              *((_QWORD *)v95 - 1) = v94;
              *v95 = v93;
            }
            v47 = v92 + 2;
            v91 += 8;
            a1 = (uint64_t)v92;
          }
          while (&v92[2] != (__n128 *)a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v295 = a2 - 3;
  v290 = a2 - 9;
  v291 = a2 - 6;
  v7 = a1;
  v306 = (unint64_t)a2;
  while (2)
  {
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (a2 - v7);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v129 = (_BYTE *)*(a2 - 3);
        v128 = (_BYTE *)*(a2 - 2);
        v130 = v128 - v129;
        if (v128 == v129)
        {
          v132 = 0;
          v131 = 0;
          v289 = v7[1];
          v134 = v289 - *v7;
          if (v289 != *v7)
            goto LABEL_186;
        }
        else
        {
          if (v130 < 0)
            sub_2394189F8();
          v131 = (char *)operator new(v128 - v129);
          v132 = &v131[4 * (v130 >> 2)];
          memcpy(v131, v129, v130);
          v133 = v7[1];
          v134 = v133 - *v7;
          if (v133 != *v7)
          {
LABEL_186:
            if ((v134 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v316 = operator new(v134);
            v135 = v132 - v131 > v134;
            operator delete(v316);
            if (v131)
              goto LABEL_188;
            goto LABEL_189;
          }
        }
        v135 = v132 != v131;
        if (v131)
LABEL_188:
          operator delete(v131);
LABEL_189:
        if (v135)
        {
          v136 = *v7;
          *v7 = *(a2 - 3);
          *(a2 - 3) = v136;
          v137 = v7[1];
          v7[1] = *(a2 - 2);
          *(a2 - 2) = v137;
          v138 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v138;
        }
        return;
      case 3uLL:
        sub_2394F70B0(v7, v7 + 3, v295);
        return;
      case 4uLL:
        sub_2394F7BA4(v7, v7 + 3, v7 + 6, v295);
        return;
      case 5uLL:
        sub_2394F6BF8(v7, v7 + 3, v7 + 6, v7 + 9, v295);
        return;
      default:
        v313 = v7;
        if (v8 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 == a2)
              return;
            v139 = v7 + 3;
            if (v7 + 3 == a2)
              return;
            v140 = 0;
            v141 = v7;
            while (1)
            {
              v243 = v139;
              v245 = (_BYTE *)v141[3];
              v244 = (_BYTE *)v141[4];
              v246 = v244 - v245;
              if (v244 == v245)
              {
                v248 = 0;
                v247 = 0;
                v259 = v141[1];
                v250 = v259 - *v141;
                if (v259 == *v141)
                  goto LABEL_326;
              }
              else
              {
                if (v246 < 0)
                  sub_2394189F8();
                v247 = (char *)operator new(v244 - v245);
                v248 = &v247[4 * (v246 >> 2)];
                memcpy(v247, v245, v246);
                v249 = v141[1];
                v250 = v249 - *v141;
                if (v249 == *v141)
                {
LABEL_326:
                  v251 = v248 != v247;
                  if (!v247)
                    goto LABEL_317;
                  goto LABEL_316;
                }
              }
              if ((v250 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v338 = operator new(v250);
              v251 = v248 - v247 > v250;
              operator delete(v338);
              if (!v247)
                goto LABEL_317;
LABEL_316:
              operator delete(v247);
LABEL_317:
              if (v251)
              {
                v252 = (_BYTE *)*v243;
                v253 = (_BYTE *)v141[4];
                v254 = v141[5];
                v243[1] = 0;
                v243[2] = 0;
                *v243 = 0;
                v255 = v253 - v252;
                if (v253 != v252)
                {
                  if ((v255 & 0x8000000000000000) != 0)
                  {
                    *(_OWORD *)(v141 + 3) = *(_OWORD *)v141;
                    v243[2] = v141[2];
                    *v141 = 0;
                    v141[1] = 0;
                    v141[2] = 0;
                    v242 = v7;
                    if (v141 != v7)
                      sub_2394189F8();
                    goto LABEL_309;
                  }
                  v312 = v254;
                  v260 = 0;
                  for (i = v140; ; i -= 24)
                  {
                    v262 = (char *)v313 + i;
                    if (v260)
                    {
                      *((_QWORD *)v262 + 4) = v260;
                      operator delete(v260);
                      *((_QWORD *)v262 + 3) = 0;
                      *((_QWORD *)v262 + 4) = 0;
                      *((_QWORD *)v262 + 5) = 0;
                    }
                    *(_OWORD *)(v262 + 24) = *(_OWORD *)v262;
                    *((_QWORD *)v262 + 5) = *((_QWORD *)v262 + 2);
                    *((_QWORD *)v262 + 1) = 0;
                    *((_QWORD *)v262 + 2) = 0;
                    *(_QWORD *)v262 = 0;
                    if (!i)
                    {
                      v7 = v313;
                      v242 = v313;
                      a2 = (uint64_t *)v306;
                      v254 = v312;
                      goto LABEL_309;
                    }
                    v263 = operator new(v253 - v252);
                    memcpy(v263, v252, v253 - v252);
                    v265 = *(uint64_t *)((char *)v313 + i - 24);
                    v264 = *(uint64_t *)((char *)v313 + i - 16);
                    v266 = v264 - v265;
                    if (v264 == v265)
                    {
                      operator delete(v263);
                      if (!v255)
                        goto LABEL_338;
                    }
                    else
                    {
                      if ((v266 & 0x8000000000000000) != 0)
                        goto LABEL_418;
                      v331 = operator new(v264 - v265);
                      operator delete(v331);
                      operator delete(v263);
                      if (v255 <= v266)
                      {
LABEL_338:
                        v7 = v313;
                        v141 = (uint64_t *)((char *)v313 + i);
                        a2 = (uint64_t *)v306;
                        v254 = v312;
                        v258 = *(void **)((char *)v313 + i);
                        if (v258)
                          goto LABEL_324;
LABEL_339:
                        v242 = v141;
                        goto LABEL_309;
                      }
                    }
                    v260 = *(void **)v262;
                  }
                }
                *(_OWORD *)(v141 + 3) = *(_OWORD *)v141;
                v243[2] = v141[2];
                *v141 = 0;
                v141[1] = 0;
                v141[2] = 0;
                v242 = v7;
                if (v141 != v7)
                {
                  v256 = *(v141 - 3);
                  v257 = *(v141 - 2);
                  if (v257 != v256)
                  {
                    if (v257 - v256 < 0)
LABEL_418:
                      sub_2394189F8();
                    v330 = operator new(v257 - v256);
                    operator delete(v330);
                  }
                  v258 = (void *)*v141;
                  if (!*v141)
                    goto LABEL_339;
LABEL_324:
                  v141[1] = (uint64_t)v258;
                  operator delete(v258);
                  *v141 = 0;
                  v141[1] = 0;
                  v242 = v141;
                  v141[2] = 0;
                }
LABEL_309:
                *v242 = (uint64_t)v252;
                v242[1] = (uint64_t)v253;
                v242[2] = v254;
              }
              v139 = v243 + 3;
              v140 += 24;
              v141 = v243;
              if (v243 + 3 == a2)
                return;
            }
          }
          if (v7 == a2)
            return;
          v267 = v7 + 3;
          while (1)
          {
            if (v267 == a2)
              return;
            v268 = v267;
            v270 = (_BYTE *)v7[3];
            v269 = (_BYTE *)v7[4];
            v271 = v269 - v270;
            if (v269 == v270)
            {
              v273 = 0;
              v272 = 0;
              v282 = v7[1];
              v275 = v282 - *v7;
              if (v282 == *v7)
                goto LABEL_358;
            }
            else
            {
              if (v271 < 0)
                sub_2394189F8();
              v272 = (char *)operator new(v269 - v270);
              v273 = &v272[4 * (v271 >> 2)];
              memcpy(v272, v270, v271);
              v274 = v7[1];
              v275 = v274 - *v7;
              if (v274 == *v7)
              {
LABEL_358:
                v276 = v273 != v272;
                if (v272)
                  goto LABEL_351;
                goto LABEL_352;
              }
            }
            if ((v275 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v339 = operator new(v275);
            v276 = v273 - v272 > v275;
            operator delete(v339);
            if (v272)
LABEL_351:
              operator delete(v272);
LABEL_352:
            if (v276)
            {
              v277 = (const void *)*v268;
              v278 = *((_OWORD *)v7 + 2);
              v268[1] = 0;
              v268[2] = 0;
              *v268 = 0;
              v314 = v278;
              v279 = v278 - (_QWORD)v277;
              if ((const void *)v278 != v277)
              {
                if ((v279 & 0x8000000000000000) != 0)
                {
                  *(_OWORD *)v268 = *(_OWORD *)v7;
                  v268[2] = v7[2];
                  *v7 = 0;
                  v7[1] = 0;
                  v7[2] = 0;
                  sub_2394189F8();
                }
                v283 = 0;
                while (1)
                {
                  if (v283)
                  {
                    v7[4] = (uint64_t)v283;
                    operator delete(v283);
                    v7[3] = 0;
                    v7[4] = 0;
                    v7[5] = 0;
                  }
                  *(_OWORD *)(v7 + 3) = *(_OWORD *)v7;
                  v7[5] = v7[2];
                  v7[1] = 0;
                  v7[2] = 0;
                  *v7 = 0;
                  v284 = operator new(v279);
                  memcpy(v284, v277, v279);
                  v285 = *(v7 - 3);
                  v286 = *(v7 - 2);
                  v287 = v286 - v285;
                  if (v286 == v285)
                  {
                    operator delete(v284);
                    if (!v279)
                      goto LABEL_369;
                  }
                  else
                  {
                    if ((v287 & 0x8000000000000000) != 0)
                      goto LABEL_415;
                    v333 = operator new(v286 - v285);
                    operator delete(v333);
                    operator delete(v284);
                    if (v279 <= v287)
                      goto LABEL_369;
                  }
                  v283 = (void *)*v7;
                  v7 -= 3;
                }
              }
              *(_OWORD *)v268 = *(_OWORD *)v7;
              v268[2] = v7[2];
              *v7 = 0;
              v7[1] = 0;
              v7[2] = 0;
              v280 = *(v7 - 3);
              v281 = *(v7 - 2);
              if (v281 != v280)
              {
                if (v281 - v280 < 0)
LABEL_415:
                  sub_2394189F8();
                v332 = operator new(v281 - v280);
                operator delete(v332);
              }
LABEL_369:
              v288 = (void *)*v7;
              if (*v7)
              {
                v7[1] = (uint64_t)v288;
                operator delete(v288);
                *v7 = 0;
                v7[1] = 0;
                v7[2] = 0;
              }
              *v7 = (uint64_t)v277;
              *(_OWORD *)(v7 + 1) = v314;
            }
            v267 = v268 + 3;
            v7 = v268;
          }
        }
        if (a3)
        {
          v10 = &v7[3 * (v9 >> 1)];
          if ((unint64_t)v8 >= 0xC01)
          {
            sub_2394F70B0(v7, &v7[3 * (v9 >> 1)], v295);
            v11 = 3 * (v9 >> 1);
            sub_2394F70B0(v7 + 3, &v7[v11 - 3], v291);
            sub_2394F70B0(v7 + 6, &v7[v11 + 3], v290);
            sub_2394F70B0(&v7[v11 - 3], &v7[v11], &v7[v11 + 3]);
            v12 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v10;
            *(_OWORD *)v10 = v12;
            v13 = v7[2];
            v7[2] = v7[v11 + 2];
            v7[v11 + 2] = v13;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_16;
LABEL_9:
            v15 = (_BYTE *)*(v7 - 3);
            v14 = (_BYTE *)*(v7 - 2);
            v16 = v14 - v15;
            if (v14 == v15)
            {
              v18 = 0;
              v17 = 0;
              v71 = v7[1];
              v20 = v71 - *v7;
              if (v71 == *v7)
                goto LABEL_96;
            }
            else
            {
              if (v16 < 0)
                sub_2394189F8();
              v17 = (char *)operator new(v14 - v15);
              v18 = &v17[4 * (v16 >> 2)];
              memcpy(v17, v15, v16);
              v19 = v7[1];
              v20 = v19 - *v7;
              if (v19 == *v7)
              {
LABEL_96:
                v21 = v18 != v17;
                if (v17)
                  goto LABEL_14;
                goto LABEL_15;
              }
            }
            if ((v20 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v315 = operator new(v20);
            v21 = v18 - v17 > v20;
            operator delete(v315);
            if (v17)
LABEL_14:
              operator delete(v17);
LABEL_15:
            if (v21)
              goto LABEL_16;
            v72 = (const void *)*v7;
            v73 = *(_OWORD *)(v7 + 1);
            v7[1] = 0;
            v7[2] = 0;
            *v7 = 0;
            v309 = v73;
            v74 = (const void *)v73;
            v75 = v73 - (_QWORD)v72;
            v76 = (uint64_t)(v73 - (_QWORD)v72) >> 2;
            if ((const void *)v73 == v72)
            {
              v78 = 0;
              v77 = 0;
              v126 = *(_QWORD *)(v306 - 24);
              v127 = *(_QWORD *)(v306 - 16);
              v81 = v127 - v126;
              if (v127 == v126)
                goto LABEL_172;
            }
            else
            {
              if ((v75 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v77 = (char *)operator new(v73 - (_QWORD)v72);
              v78 = &v77[4 * v76];
              memcpy(v77, v72, v75);
              v79 = *(_QWORD *)(v306 - 24);
              v80 = *(_QWORD *)(v306 - 16);
              v81 = v80 - v79;
              if (v80 == v79)
              {
LABEL_172:
                v82 = v78 != v77;
                if (v77)
                  goto LABEL_103;
                goto LABEL_104;
              }
            }
            if ((v81 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v335 = operator new(v81);
            v82 = v78 - v77 > v81;
            operator delete(v335);
            if (v77)
LABEL_103:
              operator delete(v77);
LABEL_104:
            if (v82)
            {
              v7 = v313;
              while (1)
              {
                if (v74 == v72)
                {
                  v85 = 0;
                  v84 = 0;
                  v89 = v7[3];
                  v90 = v7[4];
                  v88 = v90 - v89;
                  if (v90 != v89)
                    goto LABEL_114;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    sub_2394189F8();
                  v84 = (char *)operator new(v75);
                  v85 = &v84[4 * v76];
                  memcpy(v84, v72, v75);
                  v86 = v7[3];
                  v87 = v7[4];
                  v88 = v87 - v86;
                  if (v87 != v86)
                  {
LABEL_114:
                    if ((v88 & 0x8000000000000000) != 0)
                      sub_2394189F8();
                    v326 = operator new(v88);
                    v83 = v85 - v84 > v88;
                    operator delete(v326);
                    if (!v84)
                      goto LABEL_108;
LABEL_107:
                    operator delete(v84);
                    goto LABEL_108;
                  }
                }
                v83 = v85 != v84;
                if (v84)
                  goto LABEL_107;
LABEL_108:
                v7 += 3;
                if (v83)
                  goto LABEL_130;
              }
            }
            v7 = v313 + 3;
            if ((unint64_t)(v313 + 3) < v306)
            {
              while (1)
              {
                if (v74 == v72)
                {
                  v92 = 0;
                  v91 = 0;
                  v96 = v7[1];
                  v94 = v96 - *v7;
                  if (v96 != *v7)
                    goto LABEL_121;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    sub_2394189F8();
                  v91 = (char *)operator new(v75);
                  v92 = &v91[4 * v76];
                  memcpy(v91, v72, v75);
                  v93 = v7[1];
                  v94 = v93 - *v7;
                  if (v93 != *v7)
                  {
LABEL_121:
                    if ((v94 & 0x8000000000000000) != 0)
                      sub_2394189F8();
                    v327 = operator new(v94);
                    v95 = v92 - v91 > v94;
                    operator delete(v327);
                    if (!v91)
                      goto LABEL_124;
LABEL_123:
                    operator delete(v91);
                    goto LABEL_124;
                  }
                }
                v95 = v92 != v91;
                if (v91)
                  goto LABEL_123;
LABEL_124:
                if (!v95)
                {
                  v7 += 3;
                  if ((unint64_t)v7 < v306)
                    continue;
                }
                break;
              }
            }
LABEL_130:
            v97 = (uint64_t *)v306;
            if ((unint64_t)v7 < v306)
            {
              v97 = (uint64_t *)v306;
              do
              {
                if (v74 == v72)
                {
                  v100 = 0;
                  v99 = 0;
                  v104 = *(v97 - 3);
                  v105 = *(v97 - 2);
                  v103 = v105 - v104;
                  if (v105 != v104)
                    goto LABEL_140;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    sub_2394189F8();
                  v99 = (char *)operator new(v75);
                  v100 = &v99[4 * v76];
                  memcpy(v99, v72, v75);
                  v101 = *(v97 - 3);
                  v102 = *(v97 - 2);
                  v103 = v102 - v101;
                  if (v102 != v101)
                  {
LABEL_140:
                    if ((v103 & 0x8000000000000000) != 0)
                      sub_2394189F8();
                    v322 = operator new(v103);
                    v98 = v100 - v99 > v103;
                    operator delete(v322);
                    if (!v99)
                      goto LABEL_134;
LABEL_133:
                    operator delete(v99);
                    goto LABEL_134;
                  }
                }
                v98 = v100 != v99;
                if (v99)
                  goto LABEL_133;
LABEL_134:
                v97 -= 3;
              }
              while (v98);
            }
LABEL_143:
            if (v7 < v97)
            {
              v106 = *v7;
              *v7 = *v97;
              *v97 = v106;
              v107 = v7[1];
              v7[1] = v97[1];
              v97[1] = v107;
              v108 = v7[2];
              v7[2] = v97[2];
              v97[2] = v108;
              while (1)
              {
                if (v74 == v72)
                {
                  v111 = 0;
                  v110 = 0;
                  v115 = v7[3];
                  v116 = v7[4];
                  v114 = v116 - v115;
                  if (v116 != v115)
                    goto LABEL_153;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    sub_2394189F8();
                  v110 = (char *)operator new(v75);
                  v111 = &v110[4 * v76];
                  memcpy(v110, v72, v75);
                  v112 = v7[3];
                  v113 = v7[4];
                  v114 = v113 - v112;
                  if (v113 != v112)
                  {
LABEL_153:
                    if ((v114 & 0x8000000000000000) != 0)
                      sub_2394189F8();
                    v319 = operator new(v114);
                    v109 = v111 - v110 > v114;
                    operator delete(v319);
                    if (!v110)
                      goto LABEL_147;
LABEL_146:
                    operator delete(v110);
                    goto LABEL_147;
                  }
                }
                v109 = v111 != v110;
                if (v110)
                  goto LABEL_146;
LABEL_147:
                v7 += 3;
                if (v109)
                {
                  while (1)
                  {
                    if (v74 == v72)
                    {
                      v119 = 0;
                      v118 = 0;
                      v123 = *(v97 - 3);
                      v124 = *(v97 - 2);
                      v122 = v124 - v123;
                      if (v124 != v123)
                        goto LABEL_164;
                    }
                    else
                    {
                      if ((v75 & 0x8000000000000000) != 0)
                        sub_2394189F8();
                      v118 = (char *)operator new(v75);
                      v119 = &v118[4 * v76];
                      memcpy(v118, v72, v75);
                      v120 = *(v97 - 3);
                      v121 = *(v97 - 2);
                      v122 = v121 - v120;
                      if (v121 != v120)
                      {
LABEL_164:
                        if ((v122 & 0x8000000000000000) != 0)
                          sub_2394189F8();
                        v317 = operator new(v122);
                        v117 = v119 - v118 > v122;
                        operator delete(v317);
                        if (!v118)
                          goto LABEL_158;
LABEL_157:
                        operator delete(v118);
                        goto LABEL_158;
                      }
                    }
                    v117 = v119 != v118;
                    if (v118)
                      goto LABEL_157;
LABEL_158:
                    v97 -= 3;
                    if (!v117)
                      goto LABEL_143;
                  }
                }
              }
            }
            v125 = (void *)*v313;
            if (v7 - 3 == v313)
            {
              a2 = (uint64_t *)v306;
              if (!v125)
                goto LABEL_177;
              *(v7 - 2) = (uint64_t)v125;
              operator delete(v125);
            }
            else
            {
              a2 = (uint64_t *)v306;
              if (v125)
              {
                v313[1] = (uint64_t)v125;
                operator delete(v125);
                *v313 = 0;
                v313[1] = 0;
                v313[2] = 0;
              }
              *(_OWORD *)v313 = *(_OWORD *)(v7 - 3);
              v313[2] = *(v7 - 1);
            }
            *(v7 - 3) = 0;
            *(v7 - 2) = 0;
            *(v7 - 1) = 0;
LABEL_177:
            a4 = 0;
            *(v7 - 3) = (uint64_t)v72;
            *((_OWORD *)v7 - 1) = v309;
            continue;
          }
          sub_2394F70B0(&v7[3 * (v9 >> 1)], v7, v295);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_9;
LABEL_16:
          v22 = 0;
          v23 = *v7;
          v24 = *(_OWORD *)(v7 + 1);
          v7[1] = 0;
          v7[2] = 0;
          *v7 = 0;
          v303 = v24;
          v25 = v24;
          v26 = v24 - v23;
          do
          {
            v29 = (_BYTE *)v313[v22 + 3];
            v28 = (_BYTE *)v313[v22 + 4];
            v30 = v28 - v29;
            if (v28 == v29)
            {
              v32 = 0;
              v31 = 0;
              if (v25 == v23)
                goto LABEL_17;
            }
            else
            {
              if (v30 < 0)
                sub_2394189F8();
              v31 = (char *)operator new(v28 - v29);
              v32 = &v31[4 * (v30 >> 2)];
              memcpy(v31, v29, v30);
              if (v25 == v23)
              {
LABEL_17:
                v27 = v32 != v31;
                if (!v31)
                  goto LABEL_19;
LABEL_18:
                operator delete(v31);
                goto LABEL_19;
              }
            }
            if ((v26 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v334 = operator new(v26);
            v27 = v32 - v31 > v26;
            operator delete(v334);
            if (v31)
              goto LABEL_18;
LABEL_19:
            v22 += 3;
          }
          while (v27);
          v33 = &v313[v22];
          v34 = (uint64_t *)v306;
          if (v22 != 3)
          {
            while (1)
            {
              v37 = (_BYTE *)*(v34 - 3);
              v38 = v34 - 3;
              v39 = (_BYTE *)*(v34 - 2);
              v40 = v39 - v37;
              if (v39 == v37)
              {
                v42 = 0;
                v41 = 0;
                v34 = v38;
                if (v25 != v23)
                  goto LABEL_39;
              }
              else
              {
                if (v40 < 0)
                  sub_2394189F8();
                v41 = (char *)operator new(v39 - v37);
                v42 = &v41[4 * (v40 >> 2)];
                memcpy(v41, v37, v40);
                v34 = v38;
                if (v25 != v23)
                {
LABEL_39:
                  if ((v26 & 0x8000000000000000) != 0)
                    sub_2394189F8();
                  v324 = operator new(v26);
                  v36 = v42 - v41 > v26;
                  operator delete(v324);
                  if (!v41)
                    goto LABEL_33;
LABEL_32:
                  operator delete(v41);
                  goto LABEL_33;
                }
              }
              v36 = v42 != v41;
              if (v41)
                goto LABEL_32;
LABEL_33:
              if (v36)
                goto LABEL_58;
            }
          }
          v34 = (uint64_t *)v306;
          if ((unint64_t)v33 < v306)
          {
            for (j = v295; ; j = v34 - 3)
            {
              v45 = (const void *)*j;
              v46 = j;
              v47 = j[1] - *j;
              if (v47)
              {
                if (v47 < 0)
                  sub_2394189F8();
                v48 = (char *)operator new(v47);
                v49 = &v48[4 * (v47 >> 2)];
                memcpy(v48, v45, v47);
                v34 = v46;
                if (v25 == v23)
                {
LABEL_42:
                  v43 = v49 == v48;
                  if (v48)
                    goto LABEL_43;
                  goto LABEL_55;
                }
              }
              else
              {
                v49 = 0;
                v48 = 0;
                v34 = v46;
                if (v25 == v23)
                  goto LABEL_42;
              }
              if ((v26 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v325 = operator new(v26);
              v43 = v49 - v48 <= v26;
              operator delete(v325);
              if (v48)
              {
LABEL_43:
                operator delete(v48);
                if (v33 >= v34 || !v43)
                  break;
                continue;
              }
LABEL_55:
              v50 = !v43;
              if (v33 >= v34)
                v50 = 1;
              if ((v50 & 1) != 0)
                break;
            }
          }
LABEL_58:
          v297 = v34;
          __sz = v33;
          v7 = v33;
          if (v33 < v34)
          {
            v51 = v34;
            do
            {
              v52 = *v7;
              *v7 = *v51;
              *v51 = v52;
              v53 = v7[1];
              v7[1] = v51[1];
              v51[1] = v53;
              v54 = v7[2];
              v7[2] = v51[2];
              v51[2] = v54;
              do
              {
                v57 = (_BYTE *)v7[3];
                v56 = (_BYTE *)v7[4];
                v7 += 3;
                v58 = v56 - v57;
                if (v56 == v57)
                {
                  v60 = 0;
                  v59 = 0;
                  if (v25 == v23)
                    goto LABEL_62;
                }
                else
                {
                  if (v58 < 0)
                    sub_2394189F8();
                  v59 = (char *)operator new(v56 - v57);
                  v60 = &v59[4 * (v58 >> 2)];
                  memcpy(v59, v57, v58);
                  if (v25 == v23)
                  {
LABEL_62:
                    v55 = v60 != v59;
                    if (!v59)
                      continue;
LABEL_63:
                    operator delete(v59);
                    continue;
                  }
                }
                if ((v26 & 0x8000000000000000) != 0)
                  sub_2394189F8();
                v321 = operator new(v26);
                v55 = v60 - v59 > v26;
                operator delete(v321);
                if (v59)
                  goto LABEL_63;
              }
              while (v55);
              do
              {
                v63 = (_BYTE *)*(v51 - 3);
                v62 = (_BYTE *)*(v51 - 2);
                v51 -= 3;
                v64 = v62 - v63;
                if (v62 == v63)
                {
                  v66 = 0;
                  v65 = 0;
                  if (v25 == v23)
                    goto LABEL_73;
                }
                else
                {
                  if (v64 < 0)
                    sub_2394189F8();
                  v65 = (char *)operator new(v62 - v63);
                  v66 = &v65[4 * (v64 >> 2)];
                  memcpy(v65, v63, v64);
                  if (v25 == v23)
                  {
LABEL_73:
                    v61 = v66 != v65;
                    if (!v65)
                      continue;
LABEL_74:
                    operator delete(v65);
                    continue;
                  }
                }
                if ((v26 & 0x8000000000000000) != 0)
                  sub_2394189F8();
                v318 = operator new(v26);
                v61 = v66 - v65 > v26;
                operator delete(v318);
                if (v65)
                  goto LABEL_74;
              }
              while (!v61);
            }
            while (v7 < v51);
          }
          a1 = v313;
          v67 = (void *)*v313;
          if (v7 - 3 == v313)
          {
            a2 = (uint64_t *)v306;
            v69 = v297;
            v68 = __sz;
            if (v67)
            {
              *(v7 - 2) = (uint64_t)v67;
              operator delete(v67);
              goto LABEL_90;
            }
          }
          else
          {
            a2 = (uint64_t *)v306;
            if (v67)
            {
              v313[1] = (uint64_t)v67;
              operator delete(v67);
              *v313 = 0;
              v313[1] = 0;
              v313[2] = 0;
            }
            *(_OWORD *)v313 = *(_OWORD *)(v7 - 3);
            v313[2] = *(v7 - 1);
            v69 = v297;
            v68 = __sz;
LABEL_90:
            *(v7 - 3) = 0;
            *(v7 - 2) = 0;
            *(v7 - 1) = 0;
          }
          *(v7 - 3) = v23;
          *((_OWORD *)v7 - 1) = v303;
          if (v68 < v69)
          {
LABEL_94:
            sub_2394F46B8(v313, v7 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v70 = sub_2394F7650(v313, v7 - 3);
          if (!sub_2394F7650(v7, a2))
          {
            if (!v70)
              goto LABEL_94;
            continue;
          }
          a2 = v7 - 3;
          if (v70)
            return;
          goto LABEL_1;
        }
        if (v7 != a2)
        {
          v292 = (char *)a2 - (char *)v7;
          v142 = (v9 - 2) >> 1;
          v310 = v142;
          while (1)
          {
            v143 = v142;
            if (v310 < v142)
              goto LABEL_200;
            v144 = (2 * v142) | 1;
            v145 = &v313[3 * v144];
            if (2 * v142 + 2 >= (uint64_t)v9)
              goto LABEL_210;
            v146 = (const void *)*v145;
            v147 = v313[3 * v144 + 1];
            v148 = v147 - *v145;
            if (v147 == *v145)
            {
              v150 = 0;
              v149 = 0;
              v190 = v145[3];
              v191 = v145[4];
              v153 = v145 + 3;
              v154 = v191 - v190;
              if (v191 != v190)
                goto LABEL_206;
            }
            else
            {
              if (v148 < 0)
                sub_2394189F8();
              v149 = (char *)operator new(v147 - *v145);
              v150 = &v149[4 * (v148 >> 2)];
              memcpy(v149, v146, v148);
              v151 = v145[3];
              v152 = v145[4];
              v153 = v145 + 3;
              v154 = v152 - v151;
              if (v152 != v151)
              {
LABEL_206:
                if ((v154 & 0x8000000000000000) != 0)
                  sub_2394189F8();
                v336 = operator new(v154);
                v155 = v150 - v149 > v154;
                operator delete(v336);
                if (v149)
                {
LABEL_208:
                  operator delete(v149);
                  if (!v155)
                    goto LABEL_210;
LABEL_209:
                  v145 = v153;
                  v144 = 2 * v143 + 2;
                  goto LABEL_210;
                }
                goto LABEL_253;
              }
            }
            v155 = v150 != v149;
            if (v149)
              goto LABEL_208;
LABEL_253:
            if (v155)
              goto LABEL_209;
LABEL_210:
            v157 = (const void *)*v145;
            v156 = v145[1];
            v158 = v156 - *v145;
            if (v156 == *v145)
            {
              v160 = 0;
              v159 = 0;
            }
            else
            {
              if (v158 < 0)
                sub_2394189F8();
              v159 = (char *)operator new(v156 - *v145);
              v160 = &v159[4 * (v158 >> 2)];
              memcpy(v159, v157, v158);
            }
            v161 = &v313[3 * v143];
            v162 = v161[1];
            v163 = v162 - *v161;
            if (v162 == *v161)
            {
              v164 = v160 != v159;
              if (!v159)
                goto LABEL_218;
            }
            else
            {
              if ((v163 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v328 = operator new(v162 - *v161);
              v164 = v160 - v159 > v163;
              operator delete(v328);
              if (!v159)
                goto LABEL_218;
            }
            operator delete(v159);
LABEL_218:
            if (v164)
              goto LABEL_200;
            v165 = 0;
            v166 = *v161;
            v167 = *(_OWORD *)(v161 + 1);
            v161[1] = 0;
            v161[2] = 0;
            *v161 = 0;
            v294 = v167;
            v304 = v167;
            v296 = v143;
            __sza = v167 - v166;
            do
            {
              v169 = v145;
              if (v165)
              {
                v161[1] = (uint64_t)v165;
                operator delete(v165);
                *v161 = 0;
                v161[1] = 0;
                v161[2] = 0;
              }
              *(_OWORD *)v161 = *(_OWORD *)v145;
              v161[2] = v145[2];
              *v145 = 0;
              v145[1] = 0;
              v145[2] = 0;
              if (v310 < v144)
                goto LABEL_199;
              v170 = (2 * v144) | 1;
              v145 = &v313[3 * v170];
              v171 = 2 * v144 + 2;
              v172 = v9;
              if (v171 >= (uint64_t)v9)
              {
                v144 = (2 * v144) | 1;
                goto LABEL_239;
              }
              v173 = (const void *)*v145;
              v174 = v313[3 * v170 + 1];
              v175 = v174 - *v145;
              if (v174 == *v145)
              {
                v177 = 0;
                v176 = 0;
                v183 = v145[3];
                v184 = v145[4];
                v180 = v145 + 3;
                v181 = v184 - v183;
                if (v184 == v183)
                  goto LABEL_236;
              }
              else
              {
                if (v175 < 0)
                  sub_2394189F8();
                v176 = (char *)operator new(v174 - *v145);
                v177 = &v176[4 * (v175 >> 2)];
                memcpy(v176, v173, v175);
                v178 = v145[3];
                v179 = v145[4];
                v180 = v145 + 3;
                v181 = v179 - v178;
                if (v179 == v178)
                {
LABEL_236:
                  v182 = v177 != v176;
                  if (!v176)
                    goto LABEL_237;
                  goto LABEL_232;
                }
              }
              if ((v181 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v323 = operator new(v181);
              v182 = v177 - v176 > v181;
              operator delete(v323);
              if (!v176)
              {
LABEL_237:
                v144 = v170;
                if (!v182)
                  goto LABEL_239;
LABEL_238:
                v145 = v180;
                v144 = v171;
                goto LABEL_239;
              }
LABEL_232:
              operator delete(v176);
              v144 = v170;
              if (v182)
                goto LABEL_238;
LABEL_239:
              v186 = (const void *)*v145;
              v185 = v145[1];
              v187 = v185 - *v145;
              if (v185 == *v145)
              {
                v189 = 0;
                v188 = 0;
                v9 = v172;
                if (v304 == v166)
                  goto LABEL_220;
              }
              else
              {
                if (v187 < 0)
                  sub_2394189F8();
                v188 = (char *)operator new(v185 - *v145);
                v189 = &v188[4 * (v187 >> 2)];
                memcpy(v188, v186, v187);
                v9 = v172;
                if (v304 == v166)
                {
LABEL_220:
                  v168 = v189 != v188;
                  if (!v188)
                    goto LABEL_222;
LABEL_221:
                  operator delete(v188);
                  goto LABEL_222;
                }
              }
              if ((__sza & 0x8000000000000000) != 0)
                sub_2394189F8();
              v320 = operator new(__sza);
              v168 = v189 - v188 > __sza;
              operator delete(v320);
              if (v188)
                goto LABEL_221;
LABEL_222:
              v165 = (void *)*v169;
              v161 = v169;
            }
            while (!v168);
            if (v165)
            {
              v169[1] = (uint64_t)v165;
              operator delete(v165);
              *v169 = 0;
              v169[1] = 0;
              v169[2] = 0;
            }
LABEL_199:
            *v169 = v166;
            *(_OWORD *)(v169 + 1) = v294;
            v143 = v296;
LABEL_200:
            v142 = v143 - 1;
            if (!v143)
            {
              v192 = v292 / 0x18;
              v193 = v313;
              v194 = v306;
              while (1)
              {
                v307 = v194;
                v311 = v192;
                v195 = 0;
                v196 = *v193;
                v305 = v193[1];
                __szb = v193[2];
                v193[1] = 0;
                v193[2] = 0;
                v197 = (v192 - 2) >> 1;
                v198 = v193;
                *v193 = 0;
                v199 = v192;
                do
                {
                  v200 = v195 + 1;
                  v201 = &v198[3 * v195 + 3];
                  v202 = 2 * v195;
                  v195 = (2 * v195) | 1;
                  v203 = v202 + 2;
                  if (v202 + 2 >= v199)
                    goto LABEL_268;
                  v204 = (const void *)*v201;
                  v205 = v198[3 * v200 + 1];
                  v206 = v205 - *v201;
                  if (v205 == *v201)
                  {
                    v208 = 0;
                    v207 = 0;
                    v215 = v201[3];
                    v216 = v201[4];
                    v211 = v201 + 3;
                    v212 = v216 - v215;
                    if (v216 == v215)
                      goto LABEL_271;
                  }
                  else
                  {
                    if (v206 < 0)
                      sub_2394189F8();
                    v207 = (char *)operator new(v205 - *v201);
                    v208 = &v207[4 * (v206 >> 2)];
                    memcpy(v207, v204, v206);
                    v209 = v201[3];
                    v210 = v201[4];
                    v211 = v201 + 3;
                    v212 = v210 - v209;
                    if (v210 == v209)
                    {
LABEL_271:
                      v213 = v208 != v207;
                      v199 = v311;
                      if (v207)
                        goto LABEL_266;
                      goto LABEL_272;
                    }
                  }
                  if ((v212 & 0x8000000000000000) != 0)
                    sub_2394189F8();
                  v337 = operator new(v212);
                  v213 = v208 - v207 > v212;
                  operator delete(v337);
                  v199 = v311;
                  if (v207)
                  {
LABEL_266:
                    operator delete(v207);
                    if (!v213)
                      goto LABEL_268;
LABEL_267:
                    v201 = v211;
                    v195 = v203;
                    goto LABEL_268;
                  }
LABEL_272:
                  if (v213)
                    goto LABEL_267;
LABEL_268:
                  v214 = (void *)*v198;
                  if (*v198)
                  {
                    v198[1] = (uint64_t)v214;
                    operator delete(v214);
                    *v198 = 0;
                    v198[1] = 0;
                    v198[2] = 0;
                  }
                  *(_OWORD *)v198 = *(_OWORD *)v201;
                  v198[2] = v201[2];
                  *v201 = 0;
                  v201[1] = 0;
                  v201[2] = 0;
                  v198 = v201;
                }
                while (v195 <= v197);
                v217 = v307 - 24;
                v218 = (void *)*v201;
                if (v201 == (uint64_t *)(v307 - 24))
                {
                  v193 = v313;
                  if (v218)
                  {
                    v201[1] = (uint64_t)v218;
                    operator delete(v218);
                    *v201 = 0;
                    v201[1] = 0;
                    v201[2] = 0;
                  }
                  *v201 = v196;
                  v201[1] = v305;
                  v201[2] = __szb;
                }
                else
                {
                  v193 = v313;
                  if (v218)
                  {
                    v201[1] = (uint64_t)v218;
                    operator delete(v218);
                    *v201 = 0;
                    v201[1] = 0;
                    v201[2] = 0;
                  }
                  *(_OWORD *)v201 = *(_OWORD *)(v307 - 24);
                  v201[2] = *(_QWORD *)(v307 - 8);
                  *(_QWORD *)(v307 - 24) = v196;
                  *(_QWORD *)(v307 - 16) = v305;
                  *(_QWORD *)(v307 - 8) = __szb;
                  v219 = (char *)v201 - (char *)v313 + 24;
                  if (v219 >= 25)
                  {
                    v220 = (v219 / 0x18uLL - 2) >> 1;
                    v221 = &v313[3 * v220];
                    v223 = (const void *)*v221;
                    v222 = v221[1];
                    v224 = v222 - *v221;
                    if (v222 == *v221)
                    {
                      v226 = 0;
                      v225 = 0;
                      v241 = v201[1];
                      v228 = v241 - *v201;
                      if (v241 != *v201)
                        goto LABEL_281;
                    }
                    else
                    {
                      if (v224 < 0)
                        sub_2394189F8();
                      v225 = (char *)operator new(v222 - *v221);
                      v226 = &v225[4 * (v224 >> 2)];
                      memcpy(v225, v223, v224);
                      v227 = v201[1];
                      v228 = v227 - *v201;
                      if (v227 != *v201)
                      {
LABEL_281:
                        if ((v228 & 0x8000000000000000) != 0)
                          sub_2394189F8();
                        v229 = v226 - v225 > v228;
                        if (v225)
LABEL_283:
                          operator delete(v225);
LABEL_284:
                        if (!v229)
                          goto LABEL_257;
                        v298 = v307 - 24;
                        v230 = 0;
                        v231 = (const void *)*v201;
                        v232 = *(_OWORD *)(v201 + 1);
                        v201[1] = 0;
                        v201[2] = 0;
                        *v201 = 0;
                        *(_OWORD *)__szc = v232;
                        v308 = (const void *)v232;
                        v233 = v232 - (_QWORD)v231;
                        while (2)
                        {
                          v235 = v221;
                          if (v230)
                          {
                            v201[1] = (uint64_t)v230;
                            operator delete(v230);
                            *v201 = 0;
                            v201[1] = 0;
                            v201[2] = 0;
                          }
                          *(_OWORD *)v201 = *(_OWORD *)v221;
                          v201[2] = v221[2];
                          *v221 = 0;
                          v221[1] = 0;
                          v221[2] = 0;
                          if (!v220)
                          {
LABEL_307:
                            *v235 = (uint64_t)v231;
                            *(_OWORD *)(v235 + 1) = *(_OWORD *)__szc;
                            v217 = v298;
                            goto LABEL_257;
                          }
                          v220 = (v220 - 1) >> 1;
                          v221 = &v313[3 * v220];
                          v237 = (const void *)*v221;
                          v236 = v221[1];
                          v238 = v236 - *v221;
                          if (v236 == *v221)
                          {
                            v240 = 0;
                            v239 = 0;
                            if (v308 == v231)
                              goto LABEL_286;
                          }
                          else
                          {
                            if (v238 < 0)
                              sub_2394189F8();
                            v239 = (char *)operator new(v236 - *v221);
                            v240 = &v239[4 * (v238 >> 2)];
                            memcpy(v239, v237, v238);
                            if (v308 == v231)
                            {
LABEL_286:
                              v234 = v240 != v239;
                              if (v239)
                                goto LABEL_287;
                              goto LABEL_288;
                            }
                          }
                          if ((v233 & 0x8000000000000000) != 0)
                            sub_2394189F8();
                          v329 = operator new(v233);
                          v234 = v240 - v239 > v233;
                          operator delete(v329);
                          if (v239)
LABEL_287:
                            operator delete(v239);
LABEL_288:
                          v230 = (void *)*v235;
                          v201 = v235;
                          if (!v234)
                          {
                            if (v230)
                            {
                              v235[1] = (uint64_t)v230;
                              operator delete(v230);
                              *v235 = 0;
                              v235[1] = 0;
                              v235[2] = 0;
                            }
                            goto LABEL_307;
                          }
                          continue;
                        }
                      }
                    }
                    v229 = v226 != v225;
                    if (v225)
                      goto LABEL_283;
                    goto LABEL_284;
                  }
                }
LABEL_257:
                v194 = v217;
                v192 = v311 - 1;
                if (v311 <= 2)
                  return;
              }
            }
          }
        }
        return;
    }
  }
}

  v7 = a2;
  v8 = (__int128 *)&a2[-6];
  __str = (std::string *)&a2[-5];
  v9 = (const std::string *)a1;
  while (2)
  {
    a1 = (uint64_t)v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = 0x8E38E38E38E38E39 * (((char *)v7 - (char *)v9) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v46 = std::stof(__str, 0);
        if (v46 < std::stof((const std::string *)(a1 + 24), 0))
          sub_2395FE7BC(a1, v8);
        return;
      case 3uLL:
        sub_2395FE370((const std::string *)a1, a1 + 144, (uint64_t)v8);
        return;
      case 4uLL:
        sub_2395FEA10((const std::string *)a1, a1 + 144, a1 + 288, (uint64_t)v8);
        return;
      case 5uLL:
        sub_2395FE248((const std::string *)a1, a1 + 144, a1 + 288, a1 + 432, (uint64_t)v8);
        return;
      default:
        if (v10 <= 3455)
        {
          if ((a4 & 1) != 0)
          {
            if ((const std::string *)a1 == v7)
              return;
            v47 = a1 + 144;
            if ((const std::string *)(a1 + 144) == a2)
              return;
            v48 = 0;
            v49 = a1;
            while (1)
            {
              v50 = v47;
              v51 = (_OWORD *)(v49 + 168);
              v52 = std::stof((const std::string *)(v49 + 168), 0);
              if (v52 < std::stof((const std::string *)(v49 + 24), 0))
              {
                v53 = *(_OWORD *)v50;
                v176 = *(_QWORD *)(v50 + 16);
                *(_OWORD *)v175 = v53;
                *(_QWORD *)(v50 + 8) = 0;
                *(_QWORD *)(v50 + 16) = 0;
                *(_QWORD *)v50 = 0;
                *(_OWORD *)&v177.__r_.__value_.__l.__data_ = *v51;
                v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(v49 + 184);
                *(_QWORD *)(v49 + 176) = 0;
                *(_QWORD *)(v49 + 184) = 0;
                *(_QWORD *)v51 = 0;
                *(_OWORD *)v178 = *(_OWORD *)(v49 + 192);
                v54 = *(_QWORD *)(v49 + 208);
                *(_QWORD *)(v49 + 192) = 0;
                *(_QWORD *)(v49 + 200) = 0;
                v180 = *(_OWORD *)(v49 + 216);
                v55 = *(_QWORD *)(v49 + 232);
                v179 = v54;
                v181 = v55;
                *(_QWORD *)(v49 + 224) = 0;
                *(_QWORD *)(v49 + 232) = 0;
                *(_QWORD *)(v49 + 208) = 0;
                *(_QWORD *)(v49 + 216) = 0;
                *(_OWORD *)__p = *(_OWORD *)(v49 + 240);
                v183 = *(_QWORD *)(v49 + 256);
                *(_QWORD *)(v49 + 240) = 0;
                *(_QWORD *)(v49 + 248) = 0;
                *(_QWORD *)(v49 + 256) = 0;
                v56 = *(_OWORD *)(v49 + 264);
                v185 = *(_DWORD *)(v49 + 280);
                v57 = v48;
                v184 = v56;
                while (1)
                {
                  v58 = a1 + v57;
                  v59 = (void **)(a1 + v57 + 144);
                  if (*(char *)(a1 + v57 + 167) < 0)
                    operator delete(*v59);
                  *(_OWORD *)v59 = *(_OWORD *)v58;
                  *(_QWORD *)(a1 + v57 + 160) = *(_QWORD *)(v58 + 16);
                  *(_BYTE *)(v58 + 23) = 0;
                  *(_BYTE *)v58 = 0;
                  v60 = v58 + 168;
                  if (*(char *)(v58 + 191) < 0)
                    operator delete(*(void **)v60);
                  v61 = v58 + 24;
                  v62 = a1 + v57;
                  *(_OWORD *)v60 = *(_OWORD *)v61;
                  *(_QWORD *)(v60 + 16) = *(_QWORD *)(v61 + 16);
                  v64 = (void **)(a1 + v57 + 192);
                  v63 = *v64;
                  *(_BYTE *)(a1 + v57 + 47) = 0;
                  *(_BYTE *)v61 = 0;
                  if (v63)
                  {
                    *(_QWORD *)(v62 + 200) = v63;
                    operator delete(v63);
                    *v64 = 0;
                    *(_QWORD *)(a1 + v57 + 200) = 0;
                    *(_QWORD *)(a1 + v57 + 208) = 0;
                  }
                  v65 = a1 + v57 + 48;
                  v68 = *(void **)(v62 + 216);
                  v67 = (_QWORD *)(v62 + 216);
                  v66 = v68;
                  *(_OWORD *)v64 = *(_OWORD *)v65;
                  *(v67 - 1) = *(v67 - 19);
                  *(_QWORD *)v65 = 0;
                  *(_QWORD *)(v65 + 8) = 0;
                  *(_QWORD *)(v65 + 16) = 0;
                  if (v68)
                  {
                    *(_QWORD *)(a1 + v57 + 224) = v66;
                    operator delete(v66);
                    *v67 = 0;
                    v67[1] = 0;
                    v67[2] = 0;
                  }
                  v69 = v67 - 18;
                  v70 = a1 + v57;
                  v72 = (void **)(a1 + v57 + 240);
                  v71 = *v72;
                  *(_OWORD *)v67 = *((_OWORD *)v67 - 9);
                  *(_QWORD *)(a1 + v57 + 232) = *(_QWORD *)(a1 + v57 + 88);
                  *v69 = 0;
                  v69[1] = 0;
                  v69[2] = 0;
                  if (v71)
                  {
                    *(_QWORD *)(v70 + 248) = v71;
                    operator delete(v71);
                    *v72 = 0;
                    *(_QWORD *)(a1 + v57 + 248) = 0;
                    *(_QWORD *)(a1 + v57 + 256) = 0;
                  }
                  *(_OWORD *)v72 = *(_OWORD *)(v70 + 96);
                  *(_QWORD *)(v70 + 256) = *(_QWORD *)(v70 + 112);
                  *(_QWORD *)(v70 + 104) = 0;
                  *(_QWORD *)(v70 + 112) = 0;
                  *(_QWORD *)(v70 + 96) = 0;
                  *(_OWORD *)(v70 + 264) = *(_OWORD *)(v70 + 120);
                  *(_DWORD *)(v70 + 280) = *(_DWORD *)(v70 + 136);
                  if (!v57)
                    break;
                  v73 = std::stof(&v177, 0);
                  v74 = std::stof((const std::string *)(a1 + v57 - 120), 0);
                  v57 -= 144;
                  if (v73 >= v74)
                  {
                    sub_2395FE8D8(a1 + v57 + 144, (__int128 *)v175);
                    v75 = __p[0];
                    if (!__p[0])
                      goto LABEL_103;
                    goto LABEL_102;
                  }
                }
                sub_2395FE8D8(a1, (__int128 *)v175);
                v75 = __p[0];
                if (!__p[0])
                  goto LABEL_103;
LABEL_102:
                __p[1] = v75;
                operator delete(v75);
LABEL_103:
                if ((_QWORD)v180)
                {
                  *((_QWORD *)&v180 + 1) = v180;
                  operator delete((void *)v180);
                }
                if (v178[0])
                {
                  v178[1] = v178[0];
                  operator delete(v178[0]);
                }
                if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v177.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v176) < 0)
LABEL_111:
                    operator delete(v175[0]);
                }
                else if (SHIBYTE(v176) < 0)
                {
                  goto LABEL_111;
                }
              }
              v47 = v50 + 144;
              v48 += 144;
              v49 = v50;
              if ((const std::string *)(v50 + 144) == a2)
                return;
            }
          }
          if ((const std::string *)a1 == v7)
            return;
          v137 = a1 + 144;
          if ((const std::string *)(a1 + 144) == a2)
            return;
          for (i = a1 + 72; ; i += 144)
          {
            v139 = v137;
            v140 = (_OWORD *)(a1 + 168);
            v141 = std::stof((const std::string *)(a1 + 168), 0);
            if (v141 < std::stof((const std::string *)(a1 + 24), 0))
            {
              v142 = *(_OWORD *)v139;
              v176 = *(_QWORD *)(v139 + 16);
              *(_OWORD *)v175 = v142;
              *(_QWORD *)(v139 + 8) = 0;
              *(_QWORD *)(v139 + 16) = 0;
              *(_QWORD *)v139 = 0;
              *(_OWORD *)&v177.__r_.__value_.__l.__data_ = *v140;
              v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 184);
              *(_QWORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 184) = 0;
              *(_QWORD *)v140 = 0;
              *(_OWORD *)v178 = *(_OWORD *)(a1 + 192);
              v143 = *(_QWORD *)(a1 + 208);
              *(_QWORD *)(a1 + 192) = 0;
              *(_QWORD *)(a1 + 200) = 0;
              v180 = *(_OWORD *)(a1 + 216);
              v144 = *(_QWORD *)(a1 + 232);
              v179 = v143;
              v181 = v144;
              *(_QWORD *)(a1 + 224) = 0;
              *(_QWORD *)(a1 + 232) = 0;
              *(_QWORD *)(a1 + 208) = 0;
              *(_QWORD *)(a1 + 216) = 0;
              *(_OWORD *)__p = *(_OWORD *)(a1 + 240);
              v183 = *(_QWORD *)(a1 + 256);
              *(_QWORD *)(a1 + 240) = 0;
              *(_QWORD *)(a1 + 248) = 0;
              *(_QWORD *)(a1 + 256) = 0;
              v145 = *(_OWORD *)(a1 + 264);
              v185 = *(_DWORD *)(a1 + 280);
              v146 = i;
              v184 = v145;
              do
              {
                v147 = (void **)(v146 + 72);
                if (*(char *)(v146 + 95) < 0)
                  operator delete(*v147);
                *(_OWORD *)v147 = *(_OWORD *)(v146 - 72);
                *(_QWORD *)(v146 + 88) = *(_QWORD *)(v146 - 56);
                *(_BYTE *)(v146 - 49) = 0;
                *(_BYTE *)(v146 - 72) = 0;
                v148 = (void **)(v146 + 96);
                if (*(char *)(v146 + 119) < 0)
                  operator delete(*v148);
                *(_OWORD *)v148 = *(_OWORD *)(v146 - 48);
                *(_QWORD *)(v146 + 112) = *(_QWORD *)(v146 - 32);
                v149 = *(void **)(v146 + 120);
                *(_BYTE *)(v146 - 25) = 0;
                *(_BYTE *)(v146 - 48) = 0;
                if (v149)
                {
                  *(_QWORD *)(v146 + 128) = v149;
                  operator delete(v149);
                  *(_QWORD *)(v146 + 120) = 0;
                  *(_QWORD *)(v146 + 128) = 0;
                  *(_QWORD *)(v146 + 136) = 0;
                }
                v150 = (_QWORD *)(v146 - 24);
                v151 = *(void **)(v146 + 144);
                *(_OWORD *)(v146 + 120) = *(_OWORD *)(v146 - 24);
                *(_QWORD *)(v146 + 136) = *(_QWORD *)(v146 - 8);
                v150[1] = 0;
                v150[2] = 0;
                *v150 = 0;
                if (v151)
                {
                  *(_QWORD *)(v146 + 152) = v151;
                  operator delete(v151);
                  *(_QWORD *)(v146 + 144) = 0;
                  *(_QWORD *)(v146 + 152) = 0;
                  *(_QWORD *)(v146 + 160) = 0;
                }
                *(_OWORD *)(v146 + 144) = *(_OWORD *)v146;
                *(_QWORD *)(v146 + 160) = *(_QWORD *)(v146 + 16);
                *(_QWORD *)(v146 + 8) = 0;
                *(_QWORD *)(v146 + 16) = 0;
                *(_QWORD *)v146 = 0;
                v152 = *(void **)(v146 + 168);
                if (v152)
                {
                  *(_QWORD *)(v146 + 176) = v152;
                  operator delete(v152);
                  *(_QWORD *)(v146 + 168) = 0;
                  *(_QWORD *)(v146 + 176) = 0;
                  *(_QWORD *)(v146 + 184) = 0;
                }
                *(_OWORD *)(v146 + 168) = *(_OWORD *)(v146 + 24);
                *(_QWORD *)(v146 + 184) = *(_QWORD *)(v146 + 40);
                *(_QWORD *)(v146 + 32) = 0;
                *(_QWORD *)(v146 + 40) = 0;
                *(_QWORD *)(v146 + 24) = 0;
                *(_OWORD *)(v146 + 192) = *(_OWORD *)(v146 + 48);
                *(_DWORD *)(v146 + 208) = *(_DWORD *)(v146 + 64);
                v153 = std::stof(&v177, 0);
                v154 = std::stof((const std::string *)(v146 - 192), 0);
                v146 -= 144;
              }
              while (v153 < v154);
              sub_2395FE8D8(v146 + 72, (__int128 *)v175);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if ((_QWORD)v180)
              {
                *((_QWORD *)&v180 + 1) = v180;
                operator delete((void *)v180);
              }
              if (v178[0])
              {
                v178[1] = v178[0];
                operator delete(v178[0]);
              }
              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v177.__r_.__value_.__l.__data_);
                if (SHIBYTE(v176) < 0)
LABEL_222:
                  operator delete(v175[0]);
              }
              else if (SHIBYTE(v176) < 0)
              {
                goto LABEL_222;
              }
            }
            v137 = v139 + 144;
            a1 = v139;
            if ((const std::string *)(v139 + 144) == a2)
              return;
          }
        }
        if (!a3)
        {
          if ((const std::string *)a1 == v7)
            return;
          v76 = (v11 - 2) >> 1;
          v77 = v76;
          while (1)
          {
            v78 = v77;
            if (v76 < v77)
              goto LABEL_114;
            v79 = (2 * v77) | 1;
            v80 = a1 + 144 * v79;
            if (2 * v77 + 2 < (uint64_t)v11)
            {
              v81 = std::stof((const std::string *)(a1 + 144 * v79 + 24), 0);
              if (v81 < std::stof((const std::string *)(v80 + 168), 0))
              {
                v80 += 144;
                v79 = 2 * v78 + 2;
              }
            }
            v82 = std::stof((const std::string *)(v80 + 24), 0);
            v83 = (const std::string *)(a1 + 144 * v78 + 24);
            if (v82 < std::stof(v83, 0))
              goto LABEL_114;
            v84 = a1 + 144 * v78;
            v85 = *(_OWORD *)v84;
            v176 = *(_QWORD *)(v84 + 16);
            *(_OWORD *)v175 = v85;
            *(_QWORD *)(v84 + 8) = 0;
            *(_QWORD *)(v84 + 16) = 0;
            *(_QWORD *)v84 = 0;
            v86 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 40);
            *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v86;
            *(_QWORD *)(v84 + 32) = 0;
            *(_QWORD *)(v84 + 40) = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)v178 = *(_OWORD *)(v84 + 48);
            v179 = *(_QWORD *)(v84 + 64);
            *(_QWORD *)(v84 + 48) = 0;
            *(_QWORD *)(v84 + 56) = 0;
            *(_QWORD *)(v84 + 64) = 0;
            v180 = *(_OWORD *)(v84 + 72);
            v181 = *(_QWORD *)(v84 + 88);
            *(_QWORD *)(v84 + 72) = 0;
            *(_QWORD *)(v84 + 80) = 0;
            *(_QWORD *)(v84 + 88) = 0;
            *(_OWORD *)__p = *(_OWORD *)(v84 + 96);
            v183 = *(_QWORD *)(v84 + 112);
            *(_QWORD *)(v84 + 96) = 0;
            *(_QWORD *)(v84 + 104) = 0;
            *(_QWORD *)(v84 + 112) = 0;
            v87 = *(_OWORD *)(v84 + 120);
            v185 = *(_DWORD *)(v84 + 136);
            v184 = v87;
            do
            {
              v88 = v80;
              sub_2395FE8D8(v84, (__int128 *)v80);
              if (v76 < v79)
                break;
              v89 = (2 * v79) | 1;
              v80 = a1 + 144 * v89;
              v79 = 2 * v79 + 2;
              if (v79 >= (uint64_t)v11)
              {
                v79 = v89;
              }
              else
              {
                v90 = std::stof((const std::string *)(a1 + 144 * v89 + 24), 0);
                if (v90 >= std::stof((const std::string *)(v80 + 168), 0))
                  v79 = v89;
                else
                  v80 += 144;
              }
              v91 = std::stof((const std::string *)(v80 + 24), 0);
              v92 = std::stof(&v177, 0);
              v84 = v88;
            }
            while (v91 >= v92);
            sub_2395FE8D8(v88, (__int128 *)v175);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if ((_QWORD)v180)
            {
              *((_QWORD *)&v180 + 1) = v180;
              operator delete((void *)v180);
            }
            if (v178[0])
            {
              v178[1] = v178[0];
              operator delete(v178[0]);
            }
            if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v177.__r_.__value_.__l.__data_);
              if (SHIBYTE(v176) < 0)
LABEL_138:
                operator delete(v175[0]);
            }
            else if (SHIBYTE(v176) < 0)
            {
              goto LABEL_138;
            }
LABEL_114:
            v77 = v78 - 1;
            if (!v78)
            {
              v93 = v10 / 0x90uLL;
              v160 = a1 + 24;
              v157 = (_QWORD *)(a1 + 72);
              __stra = (std::string *)(a1 + 48);
              v156 = (_QWORD *)(a1 + 96);
              v155 = a1 + 120;
              v162 = a1;
              while (1)
              {
                v95 = 0;
                v96 = *(_OWORD *)a1;
                v164 = *(_QWORD *)(a1 + 16);
                *(_OWORD *)v163 = v96;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v97 = *(_OWORD *)v160;
                v166 = *(_QWORD *)(v160 + 16);
                v165 = v97;
                *(_QWORD *)(v160 + 8) = 0;
                *(_QWORD *)(v160 + 16) = 0;
                *(_QWORD *)v160 = 0;
                *(_OWORD *)v167 = *(_OWORD *)(a1 + 48);
                v168 = *(_QWORD *)(a1 + 64);
                __stra->__r_.__value_.__r.__words[0] = 0;
                __stra->__r_.__value_.__l.__size_ = 0;
                __stra->__r_.__value_.__r.__words[2] = 0;
                *(_OWORD *)v169 = *(_OWORD *)(a1 + 72);
                v170 = *(_QWORD *)(a1 + 88);
                *v157 = 0;
                v157[1] = 0;
                v157[2] = 0;
                *(_OWORD *)v171 = *(_OWORD *)(a1 + 96);
                v172 = *(_QWORD *)(a1 + 112);
                *v156 = 0;
                v156[1] = 0;
                v156[2] = 0;
                v98 = *(_OWORD *)v155;
                v174 = *(_DWORD *)(v155 + 16);
                v99 = (unint64_t)(v93 - 2) >> 1;
                v100 = a1;
                v173 = v98;
                do
                {
                  v102 = v95 + 1;
                  v103 = v100 + 144 * (v95 + 1);
                  v104 = 2 * v95;
                  v95 = (2 * v95) | 1;
                  v105 = v104 + 2;
                  v106 = v93;
                  if (v104 + 2 < v93)
                  {
                    v107 = std::stof((const std::string *)(v100 + 144 * v102 + 24), 0);
                    if (v107 < std::stof((const std::string *)(v103 + 168), 0))
                    {
                      v103 += 144;
                      v95 = v105;
                    }
                  }
                  if (*(char *)(v100 + 23) < 0)
                    operator delete(*(void **)v100);
                  v108 = *(_OWORD *)v103;
                  *(_QWORD *)(v100 + 16) = *(_QWORD *)(v103 + 16);
                  *(_OWORD *)v100 = v108;
                  *(_BYTE *)(v103 + 23) = 0;
                  *(_BYTE *)v103 = 0;
                  v109 = (void **)(v100 + 24);
                  if (*(char *)(v100 + 47) < 0)
                    operator delete(*v109);
                  v110 = (__int128 *)(v103 + 24);
                  v111 = *(_OWORD *)(v103 + 24);
                  *(_QWORD *)(v100 + 40) = *(_QWORD *)(v103 + 40);
                  *(_OWORD *)v109 = v111;
                  *(_BYTE *)(v103 + 47) = 0;
                  *(_BYTE *)(v103 + 24) = 0;
                  v112 = *(void **)(v100 + 48);
                  if (v112)
                  {
                    *(_QWORD *)(v100 + 56) = v112;
                    operator delete(v112);
                    *(_QWORD *)(v100 + 48) = 0;
                    *(_QWORD *)(v100 + 56) = 0;
                    *(_QWORD *)(v100 + 64) = 0;
                  }
                  *(_OWORD *)(v100 + 48) = *(_OWORD *)(v103 + 48);
                  *(_QWORD *)(v100 + 64) = *(_QWORD *)(v103 + 64);
                  *(_QWORD *)(v103 + 48) = 0;
                  *(_QWORD *)(v103 + 56) = 0;
                  *(_QWORD *)(v103 + 64) = 0;
                  v113 = *(void **)(v100 + 72);
                  if (v113)
                  {
                    *(_QWORD *)(v100 + 80) = v113;
                    operator delete(v113);
                    *(_QWORD *)(v100 + 72) = 0;
                    *(_QWORD *)(v100 + 80) = 0;
                    *(_QWORD *)(v100 + 88) = 0;
                  }
                  *(_OWORD *)(v100 + 72) = *(_OWORD *)(v103 + 72);
                  *(_QWORD *)(v100 + 88) = *(_QWORD *)(v103 + 88);
                  *(_QWORD *)(v103 + 72) = 0;
                  *(_QWORD *)(v103 + 80) = 0;
                  *(_QWORD *)(v103 + 88) = 0;
                  v114 = *(void **)(v100 + 96);
                  if (v114)
                  {
                    *(_QWORD *)(v100 + 104) = v114;
                    operator delete(v114);
                    *(_QWORD *)(v100 + 96) = 0;
                    *(_QWORD *)(v100 + 104) = 0;
                    *(_QWORD *)(v100 + 112) = 0;
                  }
                  *(_OWORD *)(v100 + 96) = *(_OWORD *)(v103 + 96);
                  *(_QWORD *)(v100 + 112) = *(_QWORD *)(v103 + 112);
                  *(_QWORD *)(v103 + 96) = 0;
                  *(_QWORD *)(v103 + 104) = 0;
                  *(_QWORD *)(v103 + 112) = 0;
                  v101 = *(_OWORD *)(v103 + 120);
                  *(_DWORD *)(v100 + 136) = *(_DWORD *)(v103 + 136);
                  *(_OWORD *)(v100 + 120) = v101;
                  v100 = v103;
                  v93 = v106;
                }
                while (v95 <= v99);
                v115 = (__int128 *)&a2[-6];
                v116 = v103 == (_QWORD)(a2 - 6);
                a2 -= 6;
                if (v116)
                {
                  sub_2395FE8D8(v103, (__int128 *)v163);
                  goto LABEL_182;
                }
                sub_2395FE8D8(v103, v115);
                sub_2395FE8D8((uint64_t)v115, (__int128 *)v163);
                v117 = v103 - v162 + 144;
                if (v117 >= 145)
                {
                  v118 = (v117 / 0x90uLL - 2) >> 1;
                  v119 = std::stof((const std::string *)(v162 + 144 * v118 + 24), 0);
                  if (v119 < std::stof((const std::string *)(v103 + 24), 0))
                  {
                    v120 = *(_OWORD *)v103;
                    v176 = *(_QWORD *)(v103 + 16);
                    *(_OWORD *)v175 = v120;
                    *(_QWORD *)(v103 + 8) = 0;
                    *(_QWORD *)(v103 + 16) = 0;
                    *(_QWORD *)v103 = 0;
                    v121 = *v110;
                    v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(v103 + 40);
                    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v121;
                    *(_QWORD *)(v103 + 32) = 0;
                    *(_QWORD *)(v103 + 40) = 0;
                    *(_QWORD *)v110 = 0;
                    *(_OWORD *)v178 = *(_OWORD *)(v103 + 48);
                    v179 = *(_QWORD *)(v103 + 64);
                    *(_QWORD *)(v103 + 48) = 0;
                    *(_QWORD *)(v103 + 56) = 0;
                    *(_QWORD *)(v103 + 64) = 0;
                    v180 = *(_OWORD *)(v103 + 72);
                    v181 = *(_QWORD *)(v103 + 88);
                    *(_QWORD *)(v103 + 72) = 0;
                    *(_QWORD *)(v103 + 80) = 0;
                    *(_QWORD *)(v103 + 88) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v103 + 96);
                    v183 = *(_QWORD *)(v103 + 112);
                    *(_QWORD *)(v103 + 96) = 0;
                    *(_QWORD *)(v103 + 104) = 0;
                    *(_QWORD *)(v103 + 112) = 0;
                    v122 = *(_OWORD *)(v103 + 120);
                    v185 = *(_DWORD *)(v103 + 136);
                    v184 = v122;
                    do
                    {
                      if (*(char *)(v103 + 23) < 0)
                        operator delete(*(void **)v103);
                      v123 = v162 + 144 * v118;
                      v124 = *(_OWORD *)v123;
                      *(_QWORD *)(v103 + 16) = *(_QWORD *)(v123 + 16);
                      *(_OWORD *)v103 = v124;
                      *(_BYTE *)(v123 + 23) = 0;
                      *(_BYTE *)v123 = 0;
                      v125 = (void **)(v103 + 24);
                      if (*(char *)(v103 + 47) < 0)
                        operator delete(*v125);
                      v126 = v162 + 144 * v118;
                      v127 = *(_OWORD *)(v126 + 24);
                      v126 += 24;
                      *(_QWORD *)(v103 + 40) = *(_QWORD *)(v126 + 16);
                      *(_OWORD *)v125 = v127;
                      *(_BYTE *)(v123 + 47) = 0;
                      *(_BYTE *)v126 = 0;
                      v128 = *(void **)(v103 + 48);
                      if (v128)
                      {
                        *(_QWORD *)(v103 + 56) = v128;
                        operator delete(v128);
                        *(_QWORD *)(v103 + 48) = 0;
                        *(_QWORD *)(v103 + 56) = 0;
                        *(_QWORD *)(v103 + 64) = 0;
                      }
                      v129 = v162 + 144 * v118;
                      v130 = *(_OWORD *)(v129 + 48);
                      v129 += 48;
                      *(_OWORD *)(v103 + 48) = v130;
                      v131 = v162 + 144 * v118;
                      *(_QWORD *)(v103 + 64) = *(_QWORD *)(v131 + 64);
                      *(_QWORD *)v129 = 0;
                      *(_QWORD *)(v129 + 8) = 0;
                      *(_QWORD *)(v129 + 16) = 0;
                      v132 = *(void **)(v103 + 72);
                      if (v132)
                      {
                        *(_QWORD *)(v103 + 80) = v132;
                        operator delete(v132);
                        *(_QWORD *)(v103 + 72) = 0;
                        *(_QWORD *)(v103 + 80) = 0;
                        *(_QWORD *)(v103 + 88) = 0;
                      }
                      *(_OWORD *)(v103 + 72) = *(_OWORD *)(v131 + 72);
                      *(_QWORD *)(v103 + 88) = *(_QWORD *)(v162 + 144 * v118 + 88);
                      *(_QWORD *)(v131 + 72) = 0;
                      *(_QWORD *)(v131 + 80) = 0;
                      *(_QWORD *)(v131 + 88) = 0;
                      v133 = *(void **)(v103 + 96);
                      if (v133)
                      {
                        *(_QWORD *)(v103 + 104) = v133;
                        operator delete(v133);
                        *(_QWORD *)(v103 + 96) = 0;
                        *(_QWORD *)(v103 + 104) = 0;
                        *(_QWORD *)(v103 + 112) = 0;
                      }
                      v134 = v162 + 144 * v118;
                      *(_OWORD *)(v103 + 96) = *(_OWORD *)(v134 + 96);
                      *(_QWORD *)(v103 + 112) = *(_QWORD *)(v134 + 112);
                      *(_QWORD *)(v134 + 96) = 0;
                      *(_QWORD *)(v134 + 104) = 0;
                      *(_QWORD *)(v134 + 112) = 0;
                      v135 = *(_OWORD *)(v134 + 120);
                      *(_DWORD *)(v103 + 136) = *(_DWORD *)(v134 + 136);
                      *(_OWORD *)(v103 + 120) = v135;
                      if (!v118)
                        break;
                      v118 = (v118 - 1) >> 1;
                      v136 = std::stof((const std::string *)(v162 + 144 * v118 + 24), 0);
                      v103 = v123;
                    }
                    while (v136 < std::stof(&v177, 0));
                    sub_2395FE8D8(v123, (__int128 *)v175);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if ((_QWORD)v180)
                    {
                      *((_QWORD *)&v180 + 1) = v180;
                      operator delete((void *)v180);
                    }
                    if (v178[0])
                    {
                      v178[1] = v178[0];
                      operator delete(v178[0]);
                    }
                    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v177.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v176) & 0x80000000) == 0)
                        goto LABEL_182;
                    }
                    else if ((SHIBYTE(v176) & 0x80000000) == 0)
                    {
                      goto LABEL_182;
                    }
                    operator delete(v175[0]);
                  }
                }
LABEL_182:
                if (v171[0])
                {
                  v171[1] = v171[0];
                  operator delete(v171[0]);
                }
                if (v169[0])
                {
                  v169[1] = v169[0];
                  operator delete(v169[0]);
                }
                if (v167[0])
                {
                  v167[1] = v167[0];
                  operator delete(v167[0]);
                }
                if (SHIBYTE(v166) < 0)
                {
                  operator delete((void *)v165);
                  if (SHIBYTE(v164) < 0)
LABEL_192:
                    operator delete(v163[0]);
                }
                else if (SHIBYTE(v164) < 0)
                {
                  goto LABEL_192;
                }
                v93 = v106 - 1;
                v94 = v106 <= 2;
                a1 = v162;
                if (v94)
                  return;
              }
            }
          }
        }
        if ((unint64_t)v10 < 0x4801)
        {
          sub_2395FE370((const std::string *)(a1 + 144 * (v11 >> 1)), a1, (uint64_t)v8);
          --a3;
          v7 = a2;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_2395FE370((const std::string *)a1, a1 + 144 * (v11 >> 1), (uint64_t)v8);
          v12 = 144 * (v11 >> 1);
          sub_2395FE370((const std::string *)(a1 + 144), v12 + a1 - 144, (uint64_t)&a2[-12]);
          sub_2395FE370((const std::string *)(a1 + 288), a1 + 144 + v12, (uint64_t)&a2[-18]);
          sub_2395FE370((const std::string *)(v12 + a1 - 144), a1 + v12, a1 + 144 + v12);
          sub_2395FE7BC(a1, (__int128 *)(a1 + v12));
          --a3;
          v7 = a2;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        v13 = std::stof((const std::string *)(a1 - 120), 0);
        v14 = (__int128 *)(a1 + 24);
        if (v13 >= std::stof((const std::string *)(a1 + 24), 0))
        {
          v30 = *(_OWORD *)a1;
          v176 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v175 = v30;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v31 = *v14;
          v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
          *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v31;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)v14 = 0;
          *(_OWORD *)v178 = *(_OWORD *)(a1 + 48);
          v179 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v180 = *(_OWORD *)(a1 + 72);
          v181 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_OWORD *)__p = *(_OWORD *)(a1 + 96);
          v183 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 112) = 0;
          v32 = *(_OWORD *)(a1 + 120);
          v185 = *(_DWORD *)(a1 + 136);
          v184 = v32;
          v33 = std::stof(&v177, 0);
          if (v33 >= std::stof(__str, 0))
          {
            v36 = (const std::string *)(a1 + 168);
            do
            {
              v9 = v36 - 1;
              if (&v36[-1] >= v7)
                break;
              v37 = std::stof(&v177, 0);
              v38 = std::stof(v36, 0);
              v36 += 6;
            }
            while (v37 >= v38);
          }
          else
          {
            v9 = (const std::string *)a1;
            do
            {
              v34 = std::stof(&v177, 0);
              v35 = std::stof(v9 + 7, 0);
              v9 += 6;
            }
            while (v34 >= v35);
          }
          v39 = (__int128 *)v7;
          if (v9 < v7)
          {
            v39 = (__int128 *)v7;
            do
            {
              v40 = std::stof(&v177, 0);
              v41 = std::stof((const std::string *)v39 - 5, 0);
              v39 -= 9;
            }
            while (v40 < v41);
          }
          while (v9 < (const std::string *)v39)
          {
            sub_2395FE7BC((uint64_t)v9, v39);
            do
            {
              v42 = std::stof(&v177, 0);
              v43 = std::stof(v9 + 7, 0);
              v9 += 6;
            }
            while (v42 >= v43);
            do
            {
              v44 = std::stof(&v177, 0);
              v45 = std::stof((const std::string *)v39 - 5, 0);
              v39 -= 9;
            }
            while (v44 < v45);
          }
          if (&v9[-6] != (const std::string *)a1)
            sub_2395FE8D8(a1, (__int128 *)&v9[-6]);
          sub_2395FE8D8((uint64_t)&v9[-6], (__int128 *)v175);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if ((_QWORD)v180)
          {
            *((_QWORD *)&v180 + 1) = v180;
            operator delete((void *)v180);
          }
          if (v178[0])
          {
            v178[1] = v178[0];
            operator delete(v178[0]);
          }
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(v176) < 0)
            operator delete(v175[0]);
          a4 = 0;
          continue;
        }
LABEL_10:
        v15 = 0;
        v16 = *(_OWORD *)a1;
        v176 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)v175 = v16;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v17 = *(_OWORD *)(a1 + 24);
        v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
        *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v17;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_OWORD *)v178 = *(_OWORD *)(a1 + 48);
        v179 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        v180 = *(_OWORD *)(a1 + 72);
        v181 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        *(_OWORD *)__p = *(_OWORD *)(a1 + 96);
        v183 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v18 = *(_OWORD *)(a1 + 120);
        v185 = *(_DWORD *)(a1 + 136);
        v184 = v18;
        do
        {
          v19 = std::stof((const std::string *)(a1 + v15 + 168), 0);
          v15 += 144;
        }
        while (v19 < std::stof(&v177, 0));
        v20 = a1 + v15;
        if (v15 == 144)
        {
          v7 = a2;
          do
          {
            if (v20 >= (unint64_t)v7)
              break;
            v22 = std::stof(v7 - 5, 0);
            v7 -= 6;
          }
          while (v22 >= std::stof(&v177, 0));
        }
        else
        {
          do
          {
            v21 = std::stof(v7 - 5, 0);
            v7 -= 6;
          }
          while (v21 >= std::stof(&v177, 0));
        }
        if (v20 >= (unint64_t)v7)
        {
          v27 = v20 - 144;
          if (v20 - 144 == a1)
            goto LABEL_28;
LABEL_27:
          sub_2395FE8D8(a1, (__int128 *)v27);
          goto LABEL_28;
        }
        v23 = (const std::string *)(a1 + v15);
        v24 = (__int128 *)v7;
        do
        {
          sub_2395FE7BC((uint64_t)v23, v24);
          do
          {
            v25 = std::stof(v23 + 7, 0);
            v23 += 6;
          }
          while (v25 < std::stof(&v177, 0));
          do
          {
            v26 = std::stof((const std::string *)v24 - 5, 0);
            v24 -= 9;
          }
          while (v26 >= std::stof(&v177, 0));
        }
        while (v23 < (const std::string *)v24);
        v27 = (uint64_t)&v23[-6];
        if (v27 != a1)
          goto LABEL_27;
LABEL_28:
        sub_2395FE8D8(v27, (__int128 *)v175);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((_QWORD)v180)
        {
          *((_QWORD *)&v180 + 1) = v180;
          operator delete((void *)v180);
        }
        if (v178[0])
        {
          v178[1] = v178[0];
          operator delete(v178[0]);
        }
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(v176) < 0)
            goto LABEL_39;
LABEL_36:
          v28 = v20 >= (unint64_t)v7;
          v7 = a2;
          if (!v28)
          {
LABEL_43:
            sub_2395FCBB4(a1, v27, a3, a4 & 1);
            a4 = 0;
            v9 = (const std::string *)(v27 + 144);
            continue;
          }
        }
        else
        {
          if ((SHIBYTE(v176) & 0x80000000) == 0)
            goto LABEL_36;
LABEL_39:
          operator delete(v175[0]);
          v28 = v20 >= (unint64_t)v7;
          v7 = a2;
          if (!v28)
            goto LABEL_43;
        }
        v29 = sub_2395FE4A4((const std::string *)a1, (const std::string *)v27);
        v9 = (const std::string *)(v27 + 144);
        if (!sub_2395FE4A4((const std::string *)(v27 + 144), v7))
        {
          if (v29)
            continue;
          goto LABEL_43;
        }
        a2 = (const std::string *)v27;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 1;
  v136 = a2 - 3;
  v137 = a2 - 2;
  j = a1;
  v138 = a2;
  while (2)
  {
    a1 = j;
    v11 = (char *)a2 - (char *)j;
    v12 = a2 - j;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v60 = *(a2 - 1);
        v61 = *j;
        v62 = **a3;
        v63 = *(float *)(v62 + 20 * v60 + 12);
        v64 = *(float *)(v62 + 20 * *j + 12);
        if (v63 > v64 || v63 >= v64 && *(float *)(v62 + 20 * v60 + 16) > *(float *)(v62 + 20 * v61 + 16))
        {
          *j = v60;
          *(a2 - 1) = v61;
        }
        return;
      case 3:
        sub_239636020(j, j + 1, v9, **a3);
        return;
      case 4:
        sub_2396363FC(j, j + 1, j + 2, v9, a3);
        return;
      case 5:
        sub_239635E88(j, j + 1, j + 2, j + 3, v9, a3);
        return;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (j != a2)
            {
              v79 = (unint64_t)(v12 - 2) >> 1;
              v80 = v79;
              do
              {
                v82 = v80;
                if (v79 >= v80)
                {
                  v83 = (2 * v80) | 1;
                  v84 = &j[v83];
                  v85 = **a3;
                  if (2 * v82 + 2 < v12)
                  {
                    v86 = v84[1];
                    v87 = *(float *)(v85 + 20 * *v84 + 12);
                    v88 = *(float *)(v85 + 20 * v86 + 12);
                    if (v87 > v88
                      || v87 >= v88 && *(float *)(v85 + 20 * *v84 + 16) > *(float *)(v85 + 20 * v86 + 16))
                    {
                      ++v84;
                      v83 = 2 * v82 + 2;
                    }
                  }
                  v89 = j[v82];
                  v90 = *v84;
                  v91 = *(float *)(v85 + 20 * *v84 + 12);
                  v92 = *(float *)(v85 + 20 * v89 + 12);
                  if (v91 <= v92
                    && (v91 < v92 || *(float *)(v85 + 20 * v90 + 16) <= *(float *)(v85 + 20 * v89 + 16)))
                  {
                    j[v82] = v90;
                    if (v79 >= v83)
                    {
                      while (1)
                      {
                        v93 = 2 * v83;
                        v83 = (2 * v83) | 1;
                        v81 = &j[v83];
                        v94 = v93 + 2;
                        if (v94 < v12)
                        {
                          v95 = v81[1];
                          v96 = *(float *)(v85 + 20 * *v81 + 12);
                          v97 = *(float *)(v85 + 20 * v95 + 12);
                          if (v96 > v97
                            || v96 >= v97 && *(float *)(v85 + 20 * *v81 + 16) > *(float *)(v85 + 20 * v95 + 16))
                          {
                            ++v81;
                            v83 = v94;
                          }
                        }
                        v98 = *v81;
                        v99 = *(float *)(v85 + 20 * *v81 + 12);
                        if (v99 > v92
                          || v99 >= v92 && *(float *)(v85 + 20 * v98 + 16) > *(float *)(v85 + 20 * v89 + 16))
                        {
                          break;
                        }
                        *v84 = v98;
                        v84 = v81;
                        if (v79 < v83)
                          goto LABEL_117;
                      }
                    }
                    v81 = v84;
LABEL_117:
                    *v81 = v89;
                  }
                }
                v80 = v82 - 1;
              }
              while (v82);
              v100 = (unint64_t)v11 >> 2;
              do
              {
                v102 = 0;
                v103 = *j;
                v104 = *a3;
                v105 = j;
                do
                {
                  v106 = v105;
                  v105 += v102 + 1;
                  v107 = 2 * v102;
                  v102 = (2 * v102) | 1;
                  v108 = v107 + 2;
                  if (v108 < v100)
                  {
                    v109 = v105[1];
                    v110 = *(float *)(*v104 + 20 * *v105 + 12);
                    v111 = *(float *)(*v104 + 20 * v109 + 12);
                    if (v110 > v111
                      || v110 >= v111 && *(float *)(*v104 + 20 * *v105 + 16) > *(float *)(*v104 + 20 * v109 + 16))
                    {
                      ++v105;
                      v102 = v108;
                    }
                  }
                  *v106 = *v105;
                }
                while (v102 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                if (v105 == --a2)
                {
                  *v105 = v103;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v103;
                  v112 = (char *)v105 - (char *)j + 4;
                  if (v112 >= 5)
                  {
                    v113 = ((unint64_t)v112 >> 2) - 2;
                    v114 = v113 >> 1;
                    v115 = &j[v113 >> 1];
                    v116 = *v115;
                    v117 = *v105;
                    v118 = **a3;
                    v119 = *(float *)(v118 + 20 * *v115 + 12);
                    v120 = *(float *)(v118 + 20 * *v105 + 12);
                    if (v119 > v120
                      || v119 >= v120 && *(float *)(v118 + 20 * v116 + 16) > *(float *)(v118 + 20 * v117 + 16))
                    {
                      *v105 = v116;
                      if (v113 >= 2)
                      {
                        while (1)
                        {
                          v121 = v114 - 1;
                          v114 = (v114 - 1) >> 1;
                          v122 = &j[v114];
                          v123 = *v122;
                          v124 = *(float *)(v118 + 20 * *v122 + 12);
                          if (v124 <= v120
                            && (v124 < v120 || *(float *)(v118 + 20 * v123 + 16) <= *(float *)(v118 + 20 * v117 + 16)))
                          {
                            break;
                          }
                          *v115 = v123;
                          v115 = &j[v114];
                          if (v121 <= 1)
                            goto LABEL_163;
                        }
                      }
                      v122 = v115;
LABEL_163:
                      *v122 = v117;
                    }
                  }
                }
              }
              while (v100-- > 2);
            }
            return;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &j[(unint64_t)v12 >> 1];
          v15 = **a3;
          if ((unint64_t)v11 < 0x201)
          {
            sub_239636020(v14, a1, v9, v15);
          }
          else
          {
            sub_239636020(a1, v14, v9, v15);
            v16 = &a1[v13];
            sub_239636020(a1 + 1, v16 - 1, v137, **a3);
            sub_239636020(a1 + 2, &a1[v13 + 1], v136, **a3);
            sub_239636020(v16 - 1, v14, &a1[v13 + 1], **a3);
            v17 = *a1;
            *a1 = *v16;
            *v16 = v17;
            a2 = v138;
          }
          --a4;
          v18 = *a1;
          v19 = **a3;
          if ((a5 & 1) == 0)
          {
            v21 = *(a1 - 1);
            v22 = *(float *)(v19 + 20 * v21 + 12);
            v20 = *(float *)(v19 + 20 * v18 + 12);
            if (v22 > v20 || v22 >= v20 && *(float *)(v19 + 20 * v21 + 16) > *(float *)(v19 + 20 * v18 + 16))
              goto LABEL_13;
            v44 = *v9;
            v45 = *(float *)(v19 + 20 * v44 + 12);
            if (v20 > v45
              || v20 >= v45 && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * v44 + 16))
            {
              j = a1 + 1;
              v46 = a1[1];
              for (i = *(float *)(v19 + 20 * v46 + 12); v20 <= i; i = *(float *)(v19 + 20 * v48 + 12))
              {
                if (v20 >= i && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * v46 + 16))
                  break;
                v48 = j[1];
                ++j;
                v46 = v48;
              }
            }
            else
            {
              for (j = a1 + 1; j < a2; ++j)
              {
                v49 = *(float *)(v19 + 20 * *j + 12);
                if (v20 > v49 || v20 >= v49 && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * *j + 16))
                  break;
              }
            }
            v50 = a2;
            if (j < a2)
            {
              v50 = v9;
              while (v20 > v45 || v20 >= v45 && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * v44 + 16))
              {
                v51 = *--v50;
                v44 = v51;
                v45 = *(float *)(v19 + 20 * v51 + 12);
              }
            }
            if (j < v50)
            {
              v52 = (float *)(v19 + 20 * v18 + 16);
              LODWORD(v53) = *j;
              v54 = *v50;
              do
              {
                *j = v54;
                *v50 = v53;
                do
                {
                  v55 = j[1];
                  ++j;
                  v53 = v55;
                  v56 = *(float *)(v19 + 20 * v55 + 12);
                }
                while (v20 <= v56 && (v20 < v56 || *v52 <= *(float *)(v19 + 20 * v53 + 16)));
                do
                {
                  do
                  {
                    v57 = *--v50;
                    v54 = v57;
                    v58 = *(float *)(v19 + 20 * v57 + 12);
                  }
                  while (v20 > v58);
                }
                while (v20 >= v58 && *v52 > *(float *)(v19 + 20 * v54 + 16));
              }
              while (j < v50);
            }
            v59 = j - 1;
            if (j - 1 != a1)
              *a1 = *v59;
            a5 = 0;
            *v59 = v18;
            continue;
          }
          v20 = *(float *)(v19 + 20 * v18 + 12);
LABEL_13:
          v23 = 0;
          v24 = (float *)(v19 + 20 * v18 + 16);
          while (1)
          {
            v25 = a1[v23 + 1];
            v26 = *(float *)(v19 + 20 * v25 + 12);
            if (v26 <= v20 && (v26 < v20 || *(float *)(v19 + 20 * v25 + 16) <= *v24))
              break;
            ++v23;
          }
          v27 = &a1[v23];
          v28 = (unint64_t)&a1[v23 + 1];
          if (v23 * 4)
          {
            v29 = *v9;
            v30 = *(float *)(v19 + 20 * v29 + 12);
            for (k = v9; v30 <= v20; v30 = *(float *)(v19 + 20 * v32 + 12))
            {
              if (v30 >= v20 && *(float *)(v19 + 20 * v29 + 16) > *v24)
                break;
              v32 = *--k;
              v29 = v32;
            }
          }
          else
          {
            k = a2;
            if (v28 < (unint64_t)a2)
            {
              v33 = *v9;
              v34 = *(float *)(v19 + 20 * v33 + 12);
              k = v9;
              if (v34 <= v20)
              {
                k = v9;
                do
                {
                  if (v34 < v20)
                  {
                    if (v28 >= (unint64_t)k)
                      break;
                  }
                  else if (v28 >= (unint64_t)k || *(float *)(v19 + 20 * v33 + 16) > *v24)
                  {
                    break;
                  }
                  v43 = *--k;
                  v33 = v43;
                  v34 = *(float *)(v19 + 20 * v43 + 12);
                }
                while (v34 <= v20);
              }
            }
          }
          if (v28 < (unint64_t)k)
          {
            LODWORD(v35) = *k;
            v36 = v25;
            v37 = (unsigned int *)v28;
            v38 = k;
            do
            {
              *v37++ = v35;
              *v38 = v36;
              while (1)
              {
                v36 = *v37;
                v39 = *(float *)(v19 + 20 * *v37 + 12);
                if (v39 <= v20 && (v39 < v20 || *(float *)(v19 + 20 * v36 + 16) <= *v24))
                  break;
                ++v37;
              }
              do
              {
                v40 = *--v38;
                v35 = v40;
                v41 = *(float *)(v19 + 20 * v40 + 12);
              }
              while (v41 <= v20 && (v41 < v20 || *(float *)(v19 + 20 * v35 + 16) <= *v24));
            }
            while (v37 < v38);
            v27 = v37 - 1;
          }
          if (v27 != a1)
            *a1 = *v27;
          *v27 = v18;
          if (v28 < (unint64_t)k)
          {
LABEL_45:
            sub_2396352D4(a1, v27, a3, a4, a5 & 1);
            a5 = 0;
            j = v27 + 1;
            continue;
          }
          v42 = sub_23963617C(a1, v27, a3);
          j = v27 + 1;
          if (!sub_23963617C(v27 + 1, a2, a3))
          {
            if (v42)
              continue;
            goto LABEL_45;
          }
          a2 = v27;
          if (v42)
            return;
          goto LABEL_1;
        }
        v65 = *a3;
        if ((a5 & 1) == 0)
        {
          if (j != a2)
          {
            v125 = j + 1;
            if (j + 1 != a2)
            {
              v126 = *v65;
              do
              {
                v127 = a1;
                a1 = v125;
                v128 = v127[1];
                v129 = *(float *)(v126 + 20 * v128 + 12);
                v130 = *(float *)(v126 + 20 * *v127 + 12);
                if (v129 > v130
                  || v129 >= v130 && *(float *)(v126 + 20 * v128 + 16) > *(float *)(v126 + 20 * *v127 + 16))
                {
                  v131 = *v127;
                  do
                  {
                    do
                    {
                      v132 = v127;
                      v133 = v131;
                      v134 = *--v127;
                      v131 = v134;
                      v127[2] = v133;
                      v135 = *(float *)(v126 + 20 * v134 + 12);
                    }
                    while (v129 > v135);
                  }
                  while (v129 >= v135 && *(float *)(v126 + 20 * v128 + 16) > *(float *)(v126 + 20 * v131 + 16));
                  *v132 = v128;
                }
                v125 = a1 + 1;
              }
              while (a1 + 1 != a2);
            }
          }
          return;
        }
        if (j == a2)
          return;
        v66 = j + 1;
        if (j + 1 == a2)
          return;
        v67 = 0;
        v68 = *v65;
        v69 = j;
        while (2)
        {
          v71 = v69;
          v69 = v66;
          v73 = *v71;
          v72 = v71[1];
          v74 = *(float *)(v68 + 20 * v72 + 12);
          v75 = *(float *)(v68 + 20 * *v71 + 12);
          if (v74 <= v75 && (v74 < v75 || *(float *)(v68 + 20 * v72 + 16) <= *(float *)(v68 + 20 * v73 + 16)))
            goto LABEL_102;
          v71[1] = v73;
          v70 = j;
          if (v71 == j)
            goto LABEL_101;
          v76 = v67;
          while (1)
          {
            v77 = *(unsigned int *)((char *)j + v76 - 4);
            v78 = *(float *)(v68 + 20 * v77 + 12);
            if (v74 > v78)
              goto LABEL_108;
            if (v74 < v78)
              break;
            if (*(float *)(v68 + 20 * v72 + 16) <= *(float *)(v68 + 20 * v77 + 16))
            {
              v70 = v71;
              goto LABEL_101;
            }
LABEL_108:
            --v71;
            *(unsigned int *)((char *)j + v76) = v77;
            v76 -= 4;
            if (!v76)
            {
              v70 = j;
              goto LABEL_101;
            }
          }
          v70 = (unsigned int *)((char *)j + v76);
LABEL_101:
          *v70 = v72;
LABEL_102:
          v66 = v69 + 1;
          v67 += 4;
          if (v69 + 1 != a2)
            continue;
          return;
        }
    }
  }
}

  v9 = a2 - 1;
  v136 = a2 - 3;
  v137 = a2 - 2;
  j = a1;
  v138 = a2;
  while (2)
  {
    a1 = j;
    v11 = (char *)a2 - (char *)j;
    v12 = a2 - j;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v60 = *(a2 - 1);
        v61 = *j;
        v62 = **a3;
        v63 = *(float *)(v62 + 20 * v60 + 12);
        v64 = *(float *)(v62 + 20 * *j + 12);
        if (v63 > v64 || v63 >= v64 && *(float *)(v62 + 20 * v60 + 16) > *(float *)(v62 + 20 * v61 + 16))
        {
          *j = v60;
          *(a2 - 1) = v61;
        }
        return;
      case 3:
        sub_239636020(j, j + 1, v9, **a3);
        return;
      case 4:
        sub_2396363FC(j, j + 1, j + 2, v9, a3);
        return;
      case 5:
        sub_239635E88(j, j + 1, j + 2, j + 3, v9, a3);
        return;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (j != a2)
            {
              v79 = (unint64_t)(v12 - 2) >> 1;
              v80 = v79;
              do
              {
                v82 = v80;
                if (v79 >= v80)
                {
                  v83 = (2 * v80) | 1;
                  v84 = &j[v83];
                  v85 = **a3;
                  if (2 * v82 + 2 < v12)
                  {
                    v86 = v84[1];
                    v87 = *(float *)(v85 + 20 * *v84 + 12);
                    v88 = *(float *)(v85 + 20 * v86 + 12);
                    if (v87 > v88
                      || v87 >= v88 && *(float *)(v85 + 20 * *v84 + 16) > *(float *)(v85 + 20 * v86 + 16))
                    {
                      ++v84;
                      v83 = 2 * v82 + 2;
                    }
                  }
                  v89 = j[v82];
                  v90 = *v84;
                  v91 = *(float *)(v85 + 20 * *v84 + 12);
                  v92 = *(float *)(v85 + 20 * v89 + 12);
                  if (v91 <= v92
                    && (v91 < v92 || *(float *)(v85 + 20 * v90 + 16) <= *(float *)(v85 + 20 * v89 + 16)))
                  {
                    j[v82] = v90;
                    if (v79 >= v83)
                    {
                      while (1)
                      {
                        v93 = 2 * v83;
                        v83 = (2 * v83) | 1;
                        v81 = &j[v83];
                        v94 = v93 + 2;
                        if (v94 < v12)
                        {
                          v95 = v81[1];
                          v96 = *(float *)(v85 + 20 * *v81 + 12);
                          v97 = *(float *)(v85 + 20 * v95 + 12);
                          if (v96 > v97
                            || v96 >= v97 && *(float *)(v85 + 20 * *v81 + 16) > *(float *)(v85 + 20 * v95 + 16))
                          {
                            ++v81;
                            v83 = v94;
                          }
                        }
                        v98 = *v81;
                        v99 = *(float *)(v85 + 20 * *v81 + 12);
                        if (v99 > v92
                          || v99 >= v92 && *(float *)(v85 + 20 * v98 + 16) > *(float *)(v85 + 20 * v89 + 16))
                        {
                          break;
                        }
                        *v84 = v98;
                        v84 = v81;
                        if (v79 < v83)
                          goto LABEL_117;
                      }
                    }
                    v81 = v84;
LABEL_117:
                    *v81 = v89;
                  }
                }
                v80 = v82 - 1;
              }
              while (v82);
              v100 = (unint64_t)v11 >> 2;
              do
              {
                v102 = 0;
                v103 = *j;
                v104 = *a3;
                v105 = j;
                do
                {
                  v106 = v105;
                  v105 += v102 + 1;
                  v107 = 2 * v102;
                  v102 = (2 * v102) | 1;
                  v108 = v107 + 2;
                  if (v108 < v100)
                  {
                    v109 = v105[1];
                    v110 = *(float *)(*v104 + 20 * *v105 + 12);
                    v111 = *(float *)(*v104 + 20 * v109 + 12);
                    if (v110 > v111
                      || v110 >= v111 && *(float *)(*v104 + 20 * *v105 + 16) > *(float *)(*v104 + 20 * v109 + 16))
                    {
                      ++v105;
                      v102 = v108;
                    }
                  }
                  *v106 = *v105;
                }
                while (v102 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                if (v105 == --a2)
                {
                  *v105 = v103;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v103;
                  v112 = (char *)v105 - (char *)j + 4;
                  if (v112 >= 5)
                  {
                    v113 = ((unint64_t)v112 >> 2) - 2;
                    v114 = v113 >> 1;
                    v115 = &j[v113 >> 1];
                    v116 = *v115;
                    v117 = *v105;
                    v118 = **a3;
                    v119 = *(float *)(v118 + 20 * *v115 + 12);
                    v120 = *(float *)(v118 + 20 * *v105 + 12);
                    if (v119 > v120
                      || v119 >= v120 && *(float *)(v118 + 20 * v116 + 16) > *(float *)(v118 + 20 * v117 + 16))
                    {
                      *v105 = v116;
                      if (v113 >= 2)
                      {
                        while (1)
                        {
                          v121 = v114 - 1;
                          v114 = (v114 - 1) >> 1;
                          v122 = &j[v114];
                          v123 = *v122;
                          v124 = *(float *)(v118 + 20 * *v122 + 12);
                          if (v124 <= v120
                            && (v124 < v120 || *(float *)(v118 + 20 * v123 + 16) <= *(float *)(v118 + 20 * v117 + 16)))
                          {
                            break;
                          }
                          *v115 = v123;
                          v115 = &j[v114];
                          if (v121 <= 1)
                            goto LABEL_163;
                        }
                      }
                      v122 = v115;
LABEL_163:
                      *v122 = v117;
                    }
                  }
                }
              }
              while (v100-- > 2);
            }
            return;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &j[(unint64_t)v12 >> 1];
          v15 = **a3;
          if ((unint64_t)v11 < 0x201)
          {
            sub_239636020(v14, a1, v9, v15);
          }
          else
          {
            sub_239636020(a1, v14, v9, v15);
            v16 = &a1[v13];
            sub_239636020(a1 + 1, v16 - 1, v137, **a3);
            sub_239636020(a1 + 2, &a1[v13 + 1], v136, **a3);
            sub_239636020(v16 - 1, v14, &a1[v13 + 1], **a3);
            v17 = *a1;
            *a1 = *v16;
            *v16 = v17;
            a2 = v138;
          }
          --a4;
          v18 = *a1;
          v19 = **a3;
          if ((a5 & 1) == 0)
          {
            v21 = *(a1 - 1);
            v22 = *(float *)(v19 + 20 * v21 + 12);
            v20 = *(float *)(v19 + 20 * v18 + 12);
            if (v22 > v20 || v22 >= v20 && *(float *)(v19 + 20 * v21 + 16) > *(float *)(v19 + 20 * v18 + 16))
              goto LABEL_13;
            v44 = *v9;
            v45 = *(float *)(v19 + 20 * v44 + 12);
            if (v20 > v45
              || v20 >= v45 && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * v44 + 16))
            {
              j = a1 + 1;
              v46 = a1[1];
              for (i = *(float *)(v19 + 20 * v46 + 12); v20 <= i; i = *(float *)(v19 + 20 * v48 + 12))
              {
                if (v20 >= i && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * v46 + 16))
                  break;
                v48 = j[1];
                ++j;
                v46 = v48;
              }
            }
            else
            {
              for (j = a1 + 1; j < a2; ++j)
              {
                v49 = *(float *)(v19 + 20 * *j + 12);
                if (v20 > v49 || v20 >= v49 && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * *j + 16))
                  break;
              }
            }
            v50 = a2;
            if (j < a2)
            {
              v50 = v9;
              while (v20 > v45 || v20 >= v45 && *(float *)(v19 + 20 * v18 + 16) > *(float *)(v19 + 20 * v44 + 16))
              {
                v51 = *--v50;
                v44 = v51;
                v45 = *(float *)(v19 + 20 * v51 + 12);
              }
            }
            if (j < v50)
            {
              v52 = (float *)(v19 + 20 * v18 + 16);
              LODWORD(v53) = *j;
              v54 = *v50;
              do
              {
                *j = v54;
                *v50 = v53;
                do
                {
                  v55 = j[1];
                  ++j;
                  v53 = v55;
                  v56 = *(float *)(v19 + 20 * v55 + 12);
                }
                while (v20 <= v56 && (v20 < v56 || *v52 <= *(float *)(v19 + 20 * v53 + 16)));
                do
                {
                  do
                  {
                    v57 = *--v50;
                    v54 = v57;
                    v58 = *(float *)(v19 + 20 * v57 + 12);
                  }
                  while (v20 > v58);
                }
                while (v20 >= v58 && *v52 > *(float *)(v19 + 20 * v54 + 16));
              }
              while (j < v50);
            }
            v59 = j - 1;
            if (j - 1 != a1)
              *a1 = *v59;
            a5 = 0;
            *v59 = v18;
            continue;
          }
          v20 = *(float *)(v19 + 20 * v18 + 12);
LABEL_13:
          v23 = 0;
          v24 = (float *)(v19 + 20 * v18 + 16);
          while (1)
          {
            v25 = a1[v23 + 1];
            v26 = *(float *)(v19 + 20 * v25 + 12);
            if (v26 <= v20 && (v26 < v20 || *(float *)(v19 + 20 * v25 + 16) <= *v24))
              break;
            ++v23;
          }
          v27 = &a1[v23];
          v28 = (unint64_t)&a1[v23 + 1];
          if (v23 * 4)
          {
            v29 = *v9;
            v30 = *(float *)(v19 + 20 * v29 + 12);
            for (k = v9; v30 <= v20; v30 = *(float *)(v19 + 20 * v32 + 12))
            {
              if (v30 >= v20 && *(float *)(v19 + 20 * v29 + 16) > *v24)
                break;
              v32 = *--k;
              v29 = v32;
            }
          }
          else
          {
            k = a2;
            if (v28 < (unint64_t)a2)
            {
              v33 = *v9;
              v34 = *(float *)(v19 + 20 * v33 + 12);
              k = v9;
              if (v34 <= v20)
              {
                k = v9;
                do
                {
                  if (v34 < v20)
                  {
                    if (v28 >= (unint64_t)k)
                      break;
                  }
                  else if (v28 >= (unint64_t)k || *(float *)(v19 + 20 * v33 + 16) > *v24)
                  {
                    break;
                  }
                  v43 = *--k;
                  v33 = v43;
                  v34 = *(float *)(v19 + 20 * v43 + 12);
                }
                while (v34 <= v20);
              }
            }
          }
          if (v28 < (unint64_t)k)
          {
            LODWORD(v35) = *k;
            v36 = v25;
            v37 = (unsigned int *)v28;
            v38 = k;
            do
            {
              *v37++ = v35;
              *v38 = v36;
              while (1)
              {
                v36 = *v37;
                v39 = *(float *)(v19 + 20 * *v37 + 12);
                if (v39 <= v20 && (v39 < v20 || *(float *)(v19 + 20 * v36 + 16) <= *v24))
                  break;
                ++v37;
              }
              do
              {
                v40 = *--v38;
                v35 = v40;
                v41 = *(float *)(v19 + 20 * v40 + 12);
              }
              while (v41 <= v20 && (v41 < v20 || *(float *)(v19 + 20 * v35 + 16) <= *v24));
            }
            while (v37 < v38);
            v27 = v37 - 1;
          }
          if (v27 != a1)
            *a1 = *v27;
          *v27 = v18;
          if (v28 < (unint64_t)k)
          {
LABEL_45:
            sub_239637300(a1, v27, a3, a4, a5 & 1);
            a5 = 0;
            j = v27 + 1;
            continue;
          }
          v42 = sub_239637EB4(a1, v27, a3);
          j = v27 + 1;
          if (!sub_239637EB4(v27 + 1, a2, a3))
          {
            if (v42)
              continue;
            goto LABEL_45;
          }
          a2 = v27;
          if (v42)
            return;
          goto LABEL_1;
        }
        v65 = *a3;
        if ((a5 & 1) == 0)
        {
          if (j != a2)
          {
            v125 = j + 1;
            if (j + 1 != a2)
            {
              v126 = *v65;
              do
              {
                v127 = a1;
                a1 = v125;
                v128 = v127[1];
                v129 = *(float *)(v126 + 20 * v128 + 12);
                v130 = *(float *)(v126 + 20 * *v127 + 12);
                if (v129 > v130
                  || v129 >= v130 && *(float *)(v126 + 20 * v128 + 16) > *(float *)(v126 + 20 * *v127 + 16))
                {
                  v131 = *v127;
                  do
                  {
                    do
                    {
                      v132 = v127;
                      v133 = v131;
                      v134 = *--v127;
                      v131 = v134;
                      v127[2] = v133;
                      v135 = *(float *)(v126 + 20 * v134 + 12);
                    }
                    while (v129 > v135);
                  }
                  while (v129 >= v135 && *(float *)(v126 + 20 * v128 + 16) > *(float *)(v126 + 20 * v131 + 16));
                  *v132 = v128;
                }
                v125 = a1 + 1;
              }
              while (a1 + 1 != a2);
            }
          }
          return;
        }
        if (j == a2)
          return;
        v66 = j + 1;
        if (j + 1 == a2)
          return;
        v67 = 0;
        v68 = *v65;
        v69 = j;
        while (2)
        {
          v71 = v69;
          v69 = v66;
          v73 = *v71;
          v72 = v71[1];
          v74 = *(float *)(v68 + 20 * v72 + 12);
          v75 = *(float *)(v68 + 20 * *v71 + 12);
          if (v74 <= v75 && (v74 < v75 || *(float *)(v68 + 20 * v72 + 16) <= *(float *)(v68 + 20 * v73 + 16)))
            goto LABEL_102;
          v71[1] = v73;
          v70 = j;
          if (v71 == j)
            goto LABEL_101;
          v76 = v67;
          while (1)
          {
            v77 = *(unsigned int *)((char *)j + v76 - 4);
            v78 = *(float *)(v68 + 20 * v77 + 12);
            if (v74 > v78)
              goto LABEL_108;
            if (v74 < v78)
              break;
            if (*(float *)(v68 + 20 * v72 + 16) <= *(float *)(v68 + 20 * v77 + 16))
            {
              v70 = v71;
              goto LABEL_101;
            }
LABEL_108:
            --v71;
            *(unsigned int *)((char *)j + v76) = v77;
            v76 -= 4;
            if (!v76)
            {
              v70 = j;
              goto LABEL_101;
            }
          }
          v70 = (unsigned int *)((char *)j + v76);
LABEL_101:
          *v70 = v72;
LABEL_102:
          v66 = v69 + 1;
          v67 += 4;
          if (v69 + 1 != a2)
            continue;
          return;
        }
    }
  }
}

  v9 = (__int128 *)((char *)a2 - 24);
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v30 = *a3;
        v31 = *((_QWORD *)a2 - 1);
        v82 = *(__int128 *)((char *)a2 - 24);
        v83 = v31;
        v32 = *((_QWORD *)v10 + 2);
        v80 = *v10;
        v81 = v32;
        if (v30(&v82, &v80))
        {
          v33 = *v10;
          v97 = *((_QWORD *)v10 + 2);
          v96 = v33;
          v34 = *v9;
          *((_QWORD *)v10 + 2) = *((_QWORD *)a2 - 1);
          *v10 = v34;
          *v9 = v96;
          *((_QWORD *)a2 - 1) = v97;
        }
        return;
      case 3uLL:
        sub_2399434B4(v10, (__int128 *)((char *)v10 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        v35 = (__int128 *)((char *)v10 + 24);
        v36 = v10 + 3;
        sub_2399434B4(v10, (__int128 *)((char *)v10 + 24), v10 + 3, a3);
        v37 = *a3;
        v38 = *((_QWORD *)a2 - 1);
        v94 = *(__int128 *)((char *)a2 - 24);
        v95 = v38;
        v92 = v10[3];
        v93 = *((_QWORD *)v10 + 8);
        if (v37(&v94, &v92))
        {
          v39 = *((_QWORD *)v10 + 8);
          v40 = *v36;
          v41 = *((_QWORD *)a2 - 1);
          *v36 = *v9;
          *((_QWORD *)v10 + 8) = v41;
          *v9 = v40;
          *((_QWORD *)a2 - 1) = v39;
          v42 = *a3;
          v90 = *v36;
          v91 = *((_QWORD *)v10 + 8);
          v88 = *v35;
          v89 = *((_QWORD *)v10 + 5);
          if (v42(&v90, &v88))
          {
            v43 = *((_QWORD *)v10 + 5);
            v44 = *v35;
            *v35 = *v36;
            v45 = *((_QWORD *)v10 + 8);
            *((_QWORD *)v10 + 5) = v45;
            *v36 = v44;
            *((_QWORD *)v10 + 8) = v43;
            v46 = *a3;
            v87 = v45;
            v86 = *v35;
            v47 = *((_QWORD *)v10 + 2);
            v84 = *v10;
            v85 = v47;
            if (v46(&v86, &v84))
            {
              v48 = *v10;
              v97 = *((_QWORD *)v10 + 2);
              v96 = v48;
              *v10 = *v35;
              *((_QWORD *)v10 + 2) = *((_QWORD *)v10 + 5);
              *v35 = v96;
              *((_QWORD *)v10 + 5) = v97;
            }
          }
        }
        return;
      case 5uLL:
        sub_239943E64((uint64_t)v10, (uint64_t)v10 + 24, (uint64_t)(v10 + 3), (__int128 *)((char *)v10 + 72), (__int128 *)((char *)a2 - 24), a3);
        return;
      default:
        if (v13 > 575)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              sub_239944108((uint64_t)v10, a2, a2, (unsigned int (**)(__n128 *, __int128 *))a3);
            return;
          }
          v15 = v14 >> 1;
          v16 = (__int128 *)((char *)v10 + 24 * (v14 >> 1));
          if ((unint64_t)v13 < 0xC01)
          {
            sub_2399434B4((__int128 *)((char *)v10 + 24 * v15), v10, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_2399434B4(v10, (__int128 *)((char *)v10 + 24 * v15), (__int128 *)((char *)a2 - 24), a3);
            v17 = 24 * v15;
            v18 = (__int128 *)((char *)v10 + 24 * v15 - 24);
            sub_2399434B4((__int128 *)((char *)v10 + 24), v18, a2 - 3, a3);
            v19 = v10 + 3;
            v20 = (__int128 *)((char *)v10 + v17 + 24);
            sub_2399434B4(v19, v20, (__int128 *)((char *)a2 - 72), a3);
            sub_2399434B4(v18, v16, v20, a3);
            v21 = *(_OWORD *)a1;
            v97 = *(_QWORD *)(a1 + 16);
            v96 = v21;
            v22 = *v16;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v16 + 2);
            *(_OWORD *)a1 = v22;
            v23 = v96;
            *((_QWORD *)v16 + 2) = v97;
            *v16 = v23;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v24 = *a3;
          v25 = *(_QWORD *)(a1 - 8);
          v78 = *(_OWORD *)(a1 - 24);
          v79 = v25;
          v26 = *(_QWORD *)(a1 + 16);
          v76 = *(_OWORD *)a1;
          v77 = v26;
          if ((((uint64_t (*)(__int128 *, __int128 *))v24)(&v78, &v76) & 1) == 0)
          {
            v10 = sub_2399436D8((__int128 *)a1, a2, (uint64_t (**)(__int128 *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v27 = sub_239943904((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(__int128 *, __int128 *))a3);
          if ((v28 & 1) == 0)
            goto LABEL_14;
          v29 = sub_239943B18(a1, v27, a3);
          v10 = (__int128 *)(v27 + 24);
          if (!sub_239943B18(v27 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v29)
              continue;
LABEL_14:
            sub_239942EBC(a1, v27, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v27 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        v49 = (__int128 *)((char *)v10 + 24);
        v51 = v10 == a2 || v49 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v51)
          {
            v52 = 0;
            v53 = v10;
            do
            {
              v56 = v53;
              v53 = v49;
              v57 = *a3;
              v58 = *((_QWORD *)v53 + 2);
              v96 = *v53;
              v97 = v58;
              v59 = *((_QWORD *)v56 + 2);
              v94 = *v56;
              v95 = v59;
              if (v57(&v96, &v94))
              {
                v60 = *v53;
                v93 = *((_QWORD *)v53 + 2);
                v92 = v60;
                v61 = v52;
                do
                {
                  v62 = (char *)v10 + v61;
                  *(_OWORD *)(v62 + 24) = *(__int128 *)((char *)v10 + v61);
                  *((_QWORD *)v62 + 5) = *(_QWORD *)((char *)v10 + v61 + 16);
                  if (!v61)
                  {
                    v54 = (uint64_t)v10;
                    goto LABEL_38;
                  }
                  v63 = *a3;
                  v90 = v92;
                  v91 = v93;
                  v64 = *((_QWORD *)v62 - 1);
                  v88 = *(_OWORD *)(v62 - 24);
                  v89 = v64;
                  v61 -= 24;
                }
                while ((((uint64_t (*)(__int128 *, __int128 *))v63)(&v90, &v88) & 1) != 0);
                v54 = (uint64_t)v10 + v61 + 24;
LABEL_38:
                v55 = v92;
                *(_QWORD *)(v54 + 16) = v93;
                *(_OWORD *)v54 = v55;
              }
              v49 = (__int128 *)((char *)v53 + 24);
              v52 += 24;
            }
            while ((__int128 *)((char *)v53 + 24) != a2);
          }
        }
        else if (!v51)
        {
          do
          {
            v65 = a1;
            a1 = (uint64_t)v49;
            v66 = *a3;
            v67 = *(_QWORD *)(a1 + 16);
            v96 = *(_OWORD *)a1;
            v97 = v67;
            v68 = *(_QWORD *)(v65 + 16);
            v94 = *(_OWORD *)v65;
            v95 = v68;
            if (v66(&v96, &v94))
            {
              v69 = *(_OWORD *)a1;
              v93 = *(_QWORD *)(a1 + 16);
              v92 = v69;
              v70 = a1;
              do
              {
                v71 = v70 - 24;
                *(_OWORD *)v70 = *(_OWORD *)(v70 - 24);
                *(_QWORD *)(v70 + 16) = *(_QWORD *)(v70 - 8);
                v72 = *a3;
                v90 = v92;
                v91 = v93;
                v73 = *(_QWORD *)(v70 - 32);
                v88 = *(_OWORD *)(v70 - 48);
                v89 = v73;
                v74 = v72(&v90, &v88);
                v70 = v71;
              }
              while ((v74 & 1) != 0);
              v75 = v92;
              *(_QWORD *)(v71 + 16) = v93;
              *(_OWORD *)v71 = v75;
            }
            v49 = (__int128 *)(a1 + 24);
          }
          while ((__int128 *)(a1 + 24) != a2);
        }
        return;
    }
  }
}

  v9 = (float *)(a2 - 1);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v114 = *((_QWORD *)a2 - 1);
        v115 = *(_QWORD *)v10;
        result = *((float *)&v114 + 1);
        if (*((float *)&v114 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v10)))
        {
          *(_DWORD *)v10 = v114;
          *(a2 - 2) = v115;
          result = *(float *)(v10 + 4);
          *(_DWORD *)(v10 + 4) = *(a2 - 1);
          *((float *)a2 - 1) = result;
        }
        return result;
      case 3:
        v116 = *(_DWORD *)(v10 + 8);
        v117 = *(float *)(v10 + 4);
        result = *(float *)(v10 + 12);
        v118 = *((_QWORD *)a2 - 1);
        if (result > v117)
        {
          v119 = *(_DWORD *)v10;
          if (*((float *)&v118 + 1) <= result)
          {
            *(_DWORD *)(v10 + 4) = *(_DWORD *)(v10 + 12);
            *(_DWORD *)(v10 + 8) = v119;
            *(float *)(v10 + 12) = v117;
            *(_DWORD *)v10 = v116;
            v181 = *((_QWORD *)a2 - 1);
            v182 = *(_QWORD *)(v10 + 8);
            result = *((float *)&v181 + 1);
            if (*((float *)&v181 + 1) <= *((float *)&v182 + 1))
              return result;
            *(_DWORD *)(v10 + 8) = v181;
            *(a2 - 2) = v182;
            v120 = (float *)(v10 + 12);
          }
          else
          {
            *(_DWORD *)v10 = v118;
            v120 = (float *)(v10 + 4);
            *(a2 - 2) = v119;
          }
          goto LABEL_177;
        }
        if (*((float *)&v118 + 1) > result)
        {
          *(_DWORD *)(v10 + 8) = v118;
          *(a2 - 2) = v116;
          v9 = (float *)(v10 + 12);
          v170 = *(_DWORD *)(v10 + 12);
          *(_DWORD *)(v10 + 12) = *(a2 - 1);
          *(a2 - 1) = v170;
          v171 = *(_QWORD *)v10;
          v172 = *(_QWORD *)(v10 + 8);
          result = *((float *)&v172 + 1);
          if (*((float *)&v172 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v10)))
          {
            *(_DWORD *)v10 = v172;
            *(_DWORD *)(v10 + 8) = v171;
            v120 = (float *)(v10 + 4);
LABEL_177:
            result = *v120;
            *v120 = *v9;
            *v9 = result;
            return result;
          }
        }
        return result;
      case 4:
        return sub_2399867B0((uint64_t *)v10, (float *)(v10 + 8), (uint64_t *)(v10 + 16), (uint64_t)(a2 - 2));
      case 5:
        sub_2399867B0((uint64_t *)v10, (float *)(v10 + 8), (uint64_t *)(v10 + 16), v10 + 24);
        v121 = *((_QWORD *)a2 - 1);
        v122 = *(_QWORD *)(v10 + 24);
        result = *((float *)&v121 + 1);
        if (*((float *)&v121 + 1) > *((float *)&v122 + 1))
        {
          *(_DWORD *)(v10 + 24) = v121;
          *(a2 - 2) = v122;
          v123 = *(_DWORD *)(v10 + 28);
          *(_DWORD *)(v10 + 28) = *(a2 - 1);
          *(a2 - 1) = v123;
          v124 = *(_QWORD *)(v10 + 16);
          v125 = *(_QWORD *)(v10 + 24);
          v126 = HIDWORD(v125);
          result = *((float *)&v125 + 1);
          if (*((float *)&v125 + 1) > *((float *)&v124 + 1))
          {
            *(_QWORD *)(v10 + 16) = v125;
            *(_QWORD *)(v10 + 24) = v124;
            v127 = *(_QWORD *)(v10 + 8);
            v128 = *(_QWORD *)(v10 + 16);
            result = *((float *)&v128 + 1);
            if (*((float *)&v128 + 1) > *((float *)&v127 + 1))
            {
              *(_DWORD *)(v10 + 8) = v128;
              *(_DWORD *)(v10 + 12) = v126;
              *(_QWORD *)(v10 + 16) = v127;
              v129 = *(_QWORD *)v10;
              v130 = *(_QWORD *)(v10 + 8);
              result = *((float *)&v130 + 1);
              v131 = HIDWORD(*(_QWORD *)v10);
              if (*((float *)&v130 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v10)))
              {
                *(_DWORD *)v10 = v130;
                *(_DWORD *)(v10 + 4) = v126;
                *(_DWORD *)(v10 + 8) = v129;
                *(_DWORD *)(v10 + 12) = v131;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a3)
          {
            if ((int *)v10 != a2)
            {
              v144 = (unint64_t)(v12 - 2) >> 1;
              v145 = v144;
              do
              {
                if (v144 >= v145)
                {
                  v147 = (2 * v145) | 1;
                  v148 = v10 + 8 * v147;
                  if (2 * v145 + 2 < v12 && *(float *)(v148 + 4) > *(float *)(v148 + 12))
                  {
                    v148 += 8;
                    v147 = 2 * v145 + 2;
                  }
                  v149 = v10 + 8 * v145;
                  v150 = *(_QWORD *)v148;
                  v151 = *(float *)(v149 + 4);
                  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v148)) <= v151)
                  {
                    v152 = *(_DWORD *)v149;
                    do
                    {
                      v153 = (_DWORD *)v149;
                      v149 = v148;
                      *v153 = v150;
                      v153[1] = *(_DWORD *)(v148 + 4);
                      if (v144 < v147)
                        break;
                      v154 = 2 * v147;
                      v147 = (2 * v147) | 1;
                      v148 = v10 + 8 * v147;
                      v155 = v154 + 2;
                      if (v155 < v12 && *(float *)(v148 + 4) > *(float *)(v148 + 12))
                      {
                        v148 += 8;
                        v147 = v155;
                      }
                      v150 = *(_QWORD *)v148;
                    }
                    while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v148)) <= v151);
                    *(_DWORD *)v149 = v152;
                    *(float *)(v149 + 4) = v151;
                  }
                }
                v146 = v145-- <= 0;
              }
              while (!v146);
              v156 = (unint64_t)v11 >> 3;
              do
              {
                v157 = 0;
                v158 = *(_DWORD *)v10;
                result = *(float *)(v10 + 4);
                v159 = v10;
                do
                {
                  v160 = (_DWORD *)v159;
                  v159 += 8 * v157 + 8;
                  v161 = 2 * v157;
                  v157 = (2 * v157) | 1;
                  v162 = v161 + 2;
                  if (v162 < v156 && *(float *)(v159 + 4) > *(float *)(v159 + 12))
                  {
                    v159 += 8;
                    v157 = v162;
                  }
                  *v160 = *(_DWORD *)v159;
                  v160[1] = *(_DWORD *)(v159 + 4);
                }
                while (v157 <= (uint64_t)((unint64_t)(v156 - 2) >> 1));
                if ((int *)v159 == a2 - 2)
                {
                  *(_DWORD *)v159 = v158;
                  *(float *)(v159 + 4) = result;
                }
                else
                {
                  *(_DWORD *)v159 = *(a2 - 2);
                  *(_DWORD *)(v159 + 4) = *(a2 - 1);
                  *(a2 - 2) = v158;
                  *((float *)a2 - 1) = result;
                  v163 = v159 - v10 + 8;
                  if (v163 >= 9)
                  {
                    v164 = (((unint64_t)v163 >> 3) - 2) >> 1;
                    v165 = v10 + 8 * v164;
                    v166 = *(_QWORD *)v165;
                    v167 = *(float *)(v159 + 4);
                    result = v167;
                    if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v165)) > v167)
                    {
                      v168 = *(_DWORD *)v159;
                      do
                      {
                        v169 = (_DWORD *)v159;
                        v159 = v165;
                        *v169 = v166;
                        v169[1] = *(_DWORD *)(v165 + 4);
                        if (!v164)
                          break;
                        v164 = (v164 - 1) >> 1;
                        v165 = v10 + 8 * v164;
                        v166 = *(_QWORD *)v165;
                      }
                      while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v165)) > v167);
                      *(_DWORD *)v159 = v168;
                      *(float *)(v159 + 4) = v167;
                    }
                  }
                }
                a2 -= 2;
                v146 = v156-- <= 2;
              }
              while (!v146);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = v10 + 8 * v13;
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v21 = *(_DWORD *)v10;
            v22 = *(float *)(v10 + 4);
            v23 = *(float *)(v14 + 4);
            if (v22 > v23)
            {
              v24 = *(_DWORD *)v14;
              if (*((float *)&v15 + 1) <= v22)
              {
                *(_DWORD *)v14 = v21;
                *(_DWORD *)v10 = v24;
                *(float *)(v10 + 8 * v13 + 4) = v22;
                *(float *)(v10 + 4) = v23;
                v25 = (int *)(v10 + 4);
                v51 = *((_QWORD *)a2 - 1);
                v52 = *(_QWORD *)v10;
                if (*((float *)&v51 + 1) <= COERCE_FLOAT(HIDWORD(*(_QWORD *)v10)))
                  goto LABEL_32;
                *(_DWORD *)v10 = v51;
                *(a2 - 2) = v52;
              }
              else
              {
                *(_DWORD *)v14 = v15;
                *(a2 - 2) = v24;
                v25 = (int *)(v10 + 8 * v13 + 4);
              }
              v31 = a2 - 1;
              goto LABEL_31;
            }
            if (*((float *)&v15 + 1) > v22)
            {
              *(_DWORD *)v10 = v15;
              *(a2 - 2) = v21;
              v31 = (int *)(v10 + 4);
              v32 = *(_DWORD *)(v10 + 4);
              *(_DWORD *)(v10 + 4) = *(a2 - 1);
              *(a2 - 1) = v32;
              v33 = *(_QWORD *)v14;
              if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v10)) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v14)))
              {
                *(_DWORD *)v14 = *(_QWORD *)v10;
                *(_DWORD *)v10 = v33;
                v25 = (int *)(v10 + 8 * v13 + 4);
LABEL_31:
                v53 = *v25;
                *v25 = *v31;
                *v31 = v53;
              }
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_61:
            v54 = *(_DWORD *)v10;
            v55 = *(float *)(v10 + 4);
            result = v55;
            if (*(float *)(v10 - 4) > v55)
              goto LABEL_62;
            if (v55 <= *((float *)a2 - 1))
            {
              v104 = v10 + 8;
              do
              {
                v10 = v104;
                if (v104 >= (unint64_t)a2)
                  break;
                v105 = *(float *)(v104 + 4);
                v104 += 8;
              }
              while (v55 <= v105);
            }
            else
            {
              v102 = v10;
              do
              {
                v10 = v102 + 8;
                v103 = *(float *)(v102 + 12);
                v102 += 8;
              }
              while (v55 <= v103);
            }
            v106 = a2;
            if (v10 < (unint64_t)a2)
            {
              v107 = a2;
              do
              {
                v106 = v107 - 2;
                v108 = *((float *)v107 - 1);
                v107 -= 2;
              }
              while (v55 > v108);
            }
            if (v10 < (unint64_t)v106)
            {
              v109 = *(_DWORD *)v10;
              v110 = *v106;
              do
              {
                *(_DWORD *)v10 = v110;
                *v106 = v109;
                v111 = *(_DWORD *)(v10 + 4);
                *(_DWORD *)(v10 + 4) = v106[1];
                v106[1] = v111;
                do
                {
                  v112 = *(_QWORD *)(v10 + 8);
                  v10 += 8;
                  v109 = v112;
                }
                while (v55 <= *((float *)&v112 + 1));
                do
                {
                  v113 = *((_QWORD *)v106 - 1);
                  v106 -= 2;
                  v110 = v113;
                }
                while (v55 > *((float *)&v113 + 1));
              }
              while (v10 < (unint64_t)v106);
            }
            if (v10 - 8 != a1)
            {
              *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
              result = *(float *)(v10 - 4);
              *(float *)(a1 + 4) = result;
            }
            a4 = 0;
            *(_DWORD *)(v10 - 8) = v54;
            *(float *)(v10 - 4) = v55;
            continue;
          }
          v16 = *(_DWORD *)v14;
          v17 = *(float *)(v14 + 4);
          v18 = *(float *)(v10 + 4);
          if (v17 > v18)
          {
            v19 = *(_DWORD *)v10;
            if (*((float *)&v15 + 1) <= v17)
            {
              *(_DWORD *)v10 = v16;
              *(float *)(v10 + 4) = v17;
              *(_DWORD *)v14 = v19;
              v34 = v10 + 8 * v13;
              *(float *)(v34 + 4) = v18;
              v20 = (int *)(v34 + 4);
              v35 = *(_QWORD *)(v10 + 8 * v13);
              v36 = *((_QWORD *)a2 - 1);
              if (*((float *)&v36 + 1) <= *((float *)&v35 + 1))
                goto LABEL_22;
              *(_DWORD *)v14 = v36;
              *(a2 - 2) = v35;
            }
            else
            {
              *(_DWORD *)v10 = v15;
              v20 = (int *)(v10 + 4);
              *(a2 - 2) = v19;
            }
            v27 = a2 - 1;
            goto LABEL_21;
          }
          if (*((float *)&v15 + 1) > v17)
          {
            *(_DWORD *)v14 = v15;
            *(a2 - 2) = v16;
            v26 = v10 + 8 * v13;
            v28 = *(_DWORD *)(v26 + 4);
            v27 = (int *)(v26 + 4);
            *v27 = *(a2 - 1);
            *(a2 - 1) = v28;
            v29 = *(_QWORD *)(v10 + 8 * v13);
            v30 = *(_QWORD *)v10;
            if (*((float *)&v29 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v10)))
            {
              *(_DWORD *)v10 = v29;
              v20 = (int *)(v10 + 4);
              *(_DWORD *)v14 = v30;
LABEL_21:
              v37 = *v20;
              *v20 = *v27;
              *v27 = v37;
            }
          }
LABEL_22:
          v38 = v13 - 1;
          v39 = v10 + 8 * (v13 - 1);
          v40 = *(_DWORD *)v39;
          v41 = *(float *)(v39 + 4);
          v42 = *(float *)(v10 + 12);
          v43 = *((_QWORD *)a2 - 2);
          if (v41 > v42)
          {
            v44 = *(_DWORD *)(v10 + 8);
            if (*((float *)&v43 + 1) <= v41)
            {
              *(_DWORD *)(v10 + 8) = v40;
              *(float *)(v10 + 12) = v41;
              *(_DWORD *)v39 = v44;
              v56 = v10 + 8 * v38;
              *(float *)(v56 + 4) = v42;
              v45 = (int *)(v56 + 4);
              v57 = *(_QWORD *)(v10 + 8 * v38);
              v58 = *((_QWORD *)a2 - 2);
              if (*((float *)&v58 + 1) <= *((float *)&v57 + 1))
                goto LABEL_38;
              *(_DWORD *)v39 = v58;
              *(a2 - 4) = v57;
            }
            else
            {
              *(_DWORD *)(v10 + 8) = v43;
              *(a2 - 4) = v44;
              v45 = (int *)(v10 + 12);
            }
            v47 = a2 - 3;
            goto LABEL_37;
          }
          if (*((float *)&v43 + 1) > v41)
          {
            *(_DWORD *)v39 = v43;
            *(a2 - 4) = v40;
            v46 = v10 + 8 * v38;
            v48 = *(_DWORD *)(v46 + 4);
            v47 = (int *)(v46 + 4);
            *v47 = *(a2 - 3);
            *(a2 - 3) = v48;
            v49 = *(_QWORD *)(v10 + 8 * v38);
            v50 = *(_QWORD *)(v10 + 8);
            if (*((float *)&v49 + 1) > *((float *)&v50 + 1))
            {
              *(_DWORD *)(v10 + 8) = v49;
              *(_DWORD *)v39 = v50;
              v45 = (int *)(v10 + 12);
LABEL_37:
              v59 = *v45;
              *v45 = *v47;
              *v47 = v59;
            }
          }
LABEL_38:
          v60 = v13 + 1;
          v61 = (uint64_t *)(v10 + 8 * (v13 + 1));
          v62 = *v61;
          v63 = *(float *)(v10 + 20);
          v64 = HIDWORD(*v61);
          LODWORD(v65) = HIDWORD(*v61);
          v66 = *((_QWORD *)a2 - 3);
          if (v65 > v63)
          {
            v67 = *(_DWORD *)(v10 + 16);
            if (*((float *)&v66 + 1) <= v65)
            {
              *(_DWORD *)(v10 + 16) = v62;
              *(_DWORD *)(v10 + 20) = v64;
              *(_DWORD *)v61 = v67;
              v73 = v10 + 8 * v60;
              *(float *)(v73 + 4) = v63;
              v68 = (int *)(v73 + 4);
              v62 = *(_QWORD *)(v10 + 8 * v60);
              v74 = *((_QWORD *)a2 - 3);
              v65 = *((float *)&v62 + 1);
              if (*((float *)&v74 + 1) <= *((float *)&v62 + 1))
                goto LABEL_48;
              *(_DWORD *)v61 = v74;
              *(a2 - 6) = v62;
            }
            else
            {
              *(_DWORD *)(v10 + 16) = v66;
              *(a2 - 6) = v67;
              v68 = (int *)(v10 + 20);
            }
            v70 = a2 - 5;
            goto LABEL_47;
          }
          if (*((float *)&v66 + 1) > v65)
          {
            *(_DWORD *)v61 = v66;
            *(a2 - 6) = v62;
            v69 = v10 + 8 * v60;
            v71 = *(_DWORD *)(v69 + 4);
            v70 = (int *)(v69 + 4);
            *v70 = *(a2 - 5);
            *(a2 - 5) = v71;
            v62 = *(_QWORD *)(v10 + 8 * v60);
            v72 = *(_QWORD *)(v10 + 16);
            v65 = *((float *)&v62 + 1);
            if (*((float *)&v62 + 1) > *((float *)&v72 + 1))
            {
              *(_DWORD *)(v10 + 16) = v62;
              *(_DWORD *)v61 = v72;
              v68 = (int *)(v10 + 20);
LABEL_47:
              v75 = *v68;
              *v68 = *v70;
              *v70 = v75;
              v62 = *v61;
              LODWORD(v65) = HIDWORD(*v61);
            }
          }
LABEL_48:
          v76 = *(_DWORD *)v14;
          v77 = *(float *)(v14 + 4);
          v79 = *(_DWORD *)v39;
          v78 = *(float *)(v39 + 4);
          v80 = v78;
          if (v77 <= v78)
          {
            if (v65 > v77)
            {
              *(_DWORD *)v14 = v62;
              v82 = v10 + 8 * v13;
              *(float *)(v82 + 4) = v65;
              v83 = (float *)(v82 + 4);
              *(_DWORD *)v61 = v76;
              *(float *)(v10 + 8 * v60 + 4) = v77;
              v76 = *(_DWORD *)(v10 + 8 * v13);
              if (v65 <= v78)
                goto LABEL_60;
              *(_DWORD *)v39 = v76;
              *(_DWORD *)v14 = v79;
              v81 = (float *)(v10 + 8 * v38 + 4);
              goto LABEL_57;
            }
            v65 = *(float *)(v14 + 4);
          }
          else
          {
            if (v65 > v77)
            {
              *(_DWORD *)v39 = v62;
              *(_DWORD *)v61 = v79;
              v81 = (float *)(v10 + 8 * v38 + 4);
LABEL_56:
              v83 = (float *)(v10 + 8 * v60 + 4);
LABEL_57:
              *v81 = v65;
              *v83 = v80;
              v76 = *(_DWORD *)v14;
              v65 = *(float *)(v10 + 8 * v13 + 4);
              goto LABEL_60;
            }
            *(_DWORD *)v39 = v76;
            *(_DWORD *)v14 = v79;
            v84 = v10 + 8 * v13;
            *(float *)(v84 + 4) = v78;
            v81 = (float *)(v84 + 4);
            *(float *)(v10 + 8 * v38 + 4) = v77;
            v76 = *(_DWORD *)(v10 + 8 * v13);
            v80 = v78;
            if (v65 > v78)
            {
              *(_DWORD *)v14 = v62;
              *(_DWORD *)v61 = v76;
              goto LABEL_56;
            }
            v65 = v78;
          }
LABEL_60:
          v85 = *(_DWORD *)v10;
          *(_DWORD *)v10 = v76;
          *(_DWORD *)v14 = v85;
          v86 = *(_DWORD *)(v10 + 4);
          *(float *)(v10 + 4) = v65;
          *(_DWORD *)(v10 + 8 * v13 + 4) = v86;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_61;
LABEL_33:
          v54 = *(_DWORD *)v10;
          v55 = *(float *)(v10 + 4);
          result = v55;
LABEL_62:
          v87 = 0;
          do
          {
            v88 = *(_QWORD *)(v10 + v87 + 8);
            v87 += 8;
          }
          while (result < *((float *)&v88 + 1));
          v89 = v10 + v87;
          v90 = a2;
          if (v87 == 8)
          {
            v93 = a2;
            while (v89 < (unint64_t)v93)
            {
              v91 = v93 - 2;
              v94 = *((float *)v93 - 1);
              v93 -= 2;
              if (result < v94)
                goto LABEL_70;
            }
            v91 = v93;
LABEL_83:
            v10 = v89;
            v100 = (int *)(v89 - 8);
            if (v89 - 8 == a1)
              goto LABEL_78;
            goto LABEL_77;
          }
          do
          {
            v91 = v90 - 2;
            v92 = *((float *)v90 - 1);
            v90 -= 2;
          }
          while (result >= v92);
LABEL_70:
          if (v89 >= (unint64_t)v91)
            goto LABEL_83;
          v95 = *v91;
          v10 = v89;
          v96 = v91;
          do
          {
            *(_DWORD *)v10 = v95;
            *v96 = v88;
            v97 = *(_DWORD *)(v10 + 4);
            *(_DWORD *)(v10 + 4) = v96[1];
            v96[1] = v97;
            do
            {
              v98 = *(_QWORD *)(v10 + 8);
              v10 += 8;
              LODWORD(v88) = v98;
            }
            while (result < *((float *)&v98 + 1));
            do
            {
              v99 = *((_QWORD *)v96 - 1);
              v96 -= 2;
              v95 = v99;
            }
            while (result >= *((float *)&v99 + 1));
          }
          while (v10 < (unint64_t)v96);
          v100 = (int *)(v10 - 8);
          if (v10 - 8 == a1)
            goto LABEL_78;
LABEL_77:
          *(_DWORD *)a1 = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 4);
LABEL_78:
          *(_DWORD *)(v10 - 8) = v54;
          *(float *)(v10 - 4) = v55;
          if (v89 < (unint64_t)v91)
            goto LABEL_81;
          v101 = sub_2399863BC((int *)a1, v100);
          if (!sub_2399863BC((int *)v10, a2))
          {
            if (v101)
              continue;
LABEL_81:
            sub_2399856AC(a1, v100, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v100;
          if (v101)
            return result;
          goto LABEL_1;
        }
        v132 = (int *)(v10 + 8);
        v134 = (int *)v10 == a2 || v132 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v134)
          {
            v135 = 0;
            v136 = v10;
            do
            {
              v138 = v132;
              v139 = *(_QWORD *)v136;
              result = *(float *)(v136 + 12);
              if (result > COERCE_FLOAT(HIDWORD(*(_QWORD *)v136)))
              {
                v140 = *(_DWORD *)(v136 + 8);
                v141 = *(float *)(v136 + 12);
                result = v141;
                v142 = v135;
                do
                {
                  v143 = v10 + v142;
                  *(_DWORD *)(v143 + 8) = v139;
                  *(_DWORD *)(v143 + 12) = *(_DWORD *)(v10 + v142 + 4);
                  if (!v142)
                  {
                    v137 = v10;
                    goto LABEL_128;
                  }
                  v139 = *(_QWORD *)(v143 - 8);
                  v142 -= 8;
                }
                while (v141 > *((float *)&v139 + 1));
                v137 = v10 + v142 + 8;
LABEL_128:
                *(_DWORD *)v137 = v140;
                *(float *)(v137 + 4) = v141;
              }
              v132 = v138 + 2;
              v135 += 8;
              v136 = (unint64_t)v138;
            }
            while (v138 + 2 != a2);
          }
        }
        else if (!v134)
        {
          v173 = (float *)(v10 + 12);
          do
          {
            v174 = v132;
            v175 = *(_QWORD *)a1;
            result = *(float *)(a1 + 12);
            if (result > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
            {
              v176 = *(_DWORD *)(a1 + 8);
              v177 = *(float *)(a1 + 12);
              result = v177;
              v178 = v173;
              do
              {
                v179 = v178;
                v180 = *((_DWORD *)v178 - 2);
                v178 -= 2;
                *((_DWORD *)v179 - 1) = v175;
                *(_DWORD *)v179 = v180;
                v175 = *(_QWORD *)(v179 - 5);
              }
              while (v177 > *((float *)&v175 + 1));
              *((_DWORD *)v178 - 1) = v176;
              *v178 = v177;
            }
            v132 = v174 + 2;
            v173 += 2;
            a1 = (unint64_t)v174;
          }
          while (v174 + 2 != a2);
        }
        return result;
    }
  }
}

  v9 = j;
  v331 = j + 4;
  v332 = j + 2;
  while (2)
  {
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v148 = *(a2 - 2);
        v149 = *v9;
        v150 = (uint64_t)(*(_QWORD *)(v148 + 160) - *(_QWORD *)(v148 + 152)) >> 2;
        v151 = (uint64_t)(*(_QWORD *)(*v9 + 160) - *(_QWORD *)(*v9 + 152)) >> 2;
        if (v150 < v151)
          goto LABEL_258;
        if (v150 != v151)
          return;
        v299 = *(uint64_t **)(*a3 + 8);
        if (!v299)
          goto LABEL_554;
        v300 = *(uint64_t **)(*a3 + 8);
        while (1)
        {
          while (1)
          {
            v301 = v300[4];
            if (v301 <= v148)
              break;
            v300 = (uint64_t *)*v300;
            if (!v300)
              goto LABEL_554;
          }
          if (v301 >= v148)
            break;
          v300 = (uint64_t *)v300[1];
          if (!v300)
            goto LABEL_554;
        }
        v329 = *((_DWORD *)v300 + 10);
        while (1)
        {
          while (1)
          {
            v330 = v299[4];
            if (v330 <= v149)
              break;
            v299 = (uint64_t *)*v299;
            if (!v299)
              goto LABEL_554;
          }
          if (v330 >= v149)
            break;
          v299 = (uint64_t *)v299[1];
          if (!v299)
            goto LABEL_554;
        }
        if (v329 < *((_DWORD *)v299 + 10))
        {
LABEL_258:
          *v9 = v148;
          *(a2 - 2) = v149;
          v152 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v152;
        }
        return;
      case 3:
        sub_239991894(v9, v9 + 2, a2 - 2, a3);
        return;
      case 4:
        sub_239992054(v9, v9 + 2, v9 + 4, a2 - 2, a3);
        return;
      case 5:
        sub_239991554(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
        return;
      default:
        if (v10 <= 383)
        {
          v153 = v9 + 2;
          v155 = v9 == a2 || v153 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v155)
            {
              v156 = v9;
              while (1)
              {
                v157 = v156;
                v156 = v153;
                v158 = v157[2];
                v159 = *v157;
                v160 = (uint64_t)(*(_QWORD *)(v158 + 160) - *(_QWORD *)(v158 + 152)) >> 2;
                v161 = (uint64_t)(*(_QWORD *)(*v157 + 160) - *(_QWORD *)(*v157 + 152)) >> 2;
                if (v160 < v161)
                  goto LABEL_274;
                if (v160 == v161)
                {
                  v176 = *(uint64_t **)(*a3 + 8);
                  if (!v176)
                    goto LABEL_554;
                  v177 = *(uint64_t **)(*a3 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v178 = v177[4];
                      if (v178 <= v158)
                        break;
                      v177 = (uint64_t *)*v177;
                      if (!v177)
                        goto LABEL_554;
                    }
                    if (v178 >= v158)
                      break;
                    v177 = (uint64_t *)v177[1];
                    if (!v177)
                      goto LABEL_554;
                  }
                  v182 = *((_DWORD *)v177 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v183 = v176[4];
                      if (v183 <= v159)
                        break;
                      v176 = (uint64_t *)*v176;
                      if (!v176)
                        goto LABEL_554;
                    }
                    if (v183 >= v159)
                      break;
                    v176 = (uint64_t *)v176[1];
                    if (!v176)
                      goto LABEL_554;
                  }
                  if (v182 < *((_DWORD *)v176 + 10))
                  {
LABEL_274:
                    v162 = v157[3];
                    v163 = v156;
                    *v156 = 0;
                    v156[1] = 0;
                    while (1)
                    {
                      v164 = v163;
                      v163 = v157;
                      v165 = v157[1];
                      *v163 = 0;
                      v163[1] = 0;
                      v166 = (std::__shared_weak_count *)v164[1];
                      *v164 = v159;
                      v164[1] = v165;
                      if (v166)
                      {
                        p_shared_owners = (unint64_t *)&v166->__shared_owners_;
                        do
                          v168 = __ldaxr(p_shared_owners);
                        while (__stlxr(v168 - 1, p_shared_owners));
                        if (!v168)
                        {
                          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                          std::__shared_weak_count::__release_weak(v166);
                        }
                      }
                      if (v163 == v9)
                        break;
                      v157 = v163 - 2;
                      v159 = *(v163 - 2);
                      v169 = (uint64_t)(*(_QWORD *)(v158 + 160) - *(_QWORD *)(v158 + 152)) >> 2;
                      v170 = (uint64_t)(*(_QWORD *)(v159 + 160) - *(_QWORD *)(v159 + 152)) >> 2;
                      if (v169 >= v170)
                      {
                        if (v169 != v170)
                          goto LABEL_306;
                        v171 = *(uint64_t **)(*a3 + 8);
                        if (!v171)
LABEL_560:
                          sub_23941D898("map::at:  key not found");
                        v172 = *(uint64_t **)(*a3 + 8);
                        while (1)
                        {
                          while (1)
                          {
                            v173 = v172[4];
                            if (v173 <= v158)
                              break;
                            v172 = (uint64_t *)*v172;
                            if (!v172)
                              goto LABEL_560;
                          }
                          if (v173 >= v158)
                            break;
                          v172 = (uint64_t *)v172[1];
                          if (!v172)
                            goto LABEL_560;
                        }
                        v174 = *((_DWORD *)v172 + 10);
                        while (1)
                        {
                          while (1)
                          {
                            v175 = v171[4];
                            if (v175 <= v159)
                              break;
                            v171 = (uint64_t *)*v171;
                            if (!v171)
                              goto LABEL_560;
                          }
                          if (v175 >= v159)
                            break;
                          v171 = (uint64_t *)v171[1];
                          if (!v171)
                            goto LABEL_560;
                        }
                        if (v174 >= *((_DWORD *)v171 + 10))
                          goto LABEL_306;
                      }
                    }
                    v163 = v9;
LABEL_306:
                    v179 = (std::__shared_weak_count *)v163[1];
                    *v163 = v158;
                    v163[1] = v162;
                    if (v179)
                    {
                      v180 = (unint64_t *)&v179->__shared_owners_;
                      do
                        v181 = __ldaxr(v180);
                      while (__stlxr(v181 - 1, v180));
                      if (!v181)
                      {
                        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                        std::__shared_weak_count::__release_weak(v179);
                      }
                    }
                  }
                }
                v153 = v156 + 2;
                if (v156 + 2 == a2)
                  return;
              }
            }
          }
          else if (!v155)
          {
            while (1)
            {
              v302 = v9;
              v9 = v153;
              v303 = v302[2];
              v304 = *v302;
              v305 = (uint64_t)(*(_QWORD *)(v303 + 160) - *(_QWORD *)(v303 + 152)) >> 2;
              v306 = (uint64_t)(*(_QWORD *)(*v302 + 160) - *(_QWORD *)(*v302 + 152)) >> 2;
              if (v305 < v306)
                goto LABEL_506;
              if (v305 == v306)
              {
                v324 = *(uint64_t **)(*a3 + 8);
                if (!v324)
                  goto LABEL_554;
                v325 = *(uint64_t **)(*a3 + 8);
                while (1)
                {
                  while (1)
                  {
                    v326 = v325[4];
                    if (v326 <= v303)
                      break;
                    v325 = (uint64_t *)*v325;
                    if (!v325)
                      goto LABEL_554;
                  }
                  if (v326 >= v303)
                    break;
                  v325 = (uint64_t *)v325[1];
                  if (!v325)
                    goto LABEL_554;
                }
                v327 = *((_DWORD *)v325 + 10);
                while (1)
                {
                  while (1)
                  {
                    v328 = v324[4];
                    if (v328 <= v304)
                      break;
                    v324 = (uint64_t *)*v324;
                    if (!v324)
                      goto LABEL_554;
                  }
                  if (v328 >= v304)
                    break;
                  v324 = (uint64_t *)v324[1];
                  if (!v324)
                    goto LABEL_554;
                }
                if (v327 < *((_DWORD *)v324 + 10))
                {
LABEL_506:
                  v307 = v302[3];
                  v308 = v9;
                  *v9 = 0;
                  v9[1] = 0;
                  do
                  {
                    do
                    {
                      v309 = v308;
                      v308 = v302;
                      v310 = v302[1];
                      *v308 = 0;
                      v308[1] = 0;
                      v311 = (std::__shared_weak_count *)v309[1];
                      *v309 = v304;
                      v309[1] = v310;
                      if (v311)
                      {
                        v312 = (unint64_t *)&v311->__shared_owners_;
                        do
                          v313 = __ldaxr(v312);
                        while (__stlxr(v313 - 1, v312));
                        if (!v313)
                        {
                          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                          std::__shared_weak_count::__release_weak(v311);
                        }
                      }
                      v302 = v308 - 2;
                      v304 = *(v308 - 2);
                      v314 = (uint64_t)(*(_QWORD *)(v303 + 160) - *(_QWORD *)(v303 + 152)) >> 2;
                      v315 = (uint64_t)(*(_QWORD *)(v304 + 160) - *(_QWORD *)(v304 + 152)) >> 2;
                    }
                    while (v314 < v315);
                    if (v314 != v315)
                      break;
                    v316 = *(uint64_t **)(*a3 + 8);
                    if (!v316)
LABEL_559:
                      sub_23941D898("map::at:  key not found");
                    v317 = *(uint64_t **)(*a3 + 8);
                    while (1)
                    {
                      while (1)
                      {
                        v318 = v317[4];
                        if (v318 <= v303)
                          break;
                        v317 = (uint64_t *)*v317;
                        if (!v317)
                          goto LABEL_559;
                      }
                      if (v318 >= v303)
                        break;
                      v317 = (uint64_t *)v317[1];
                      if (!v317)
                        goto LABEL_559;
                    }
                    v319 = *((_DWORD *)v317 + 10);
                    while (1)
                    {
                      while (1)
                      {
                        v320 = v316[4];
                        if (v320 <= v304)
                          break;
                        v316 = (uint64_t *)*v316;
                        if (!v316)
                          goto LABEL_559;
                      }
                      if (v320 >= v304)
                        break;
                      v316 = (uint64_t *)v316[1];
                      if (!v316)
                        goto LABEL_559;
                    }
                  }
                  while (v319 < *((_DWORD *)v316 + 10));
                  v321 = (std::__shared_weak_count *)v308[1];
                  *v308 = v303;
                  v308[1] = v307;
                  if (v321)
                  {
                    v322 = (unint64_t *)&v321->__shared_owners_;
                    do
                      v323 = __ldaxr(v322);
                    while (__stlxr(v323 - 1, v322));
                    if (!v323)
                    {
                      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                      std::__shared_weak_count::__release_weak(v321);
                    }
                  }
                }
              }
              v153 = v9 + 2;
              if (v9 + 2 == a2)
                return;
            }
          }
          return;
        }
        v335 = a2;
        if (a4)
        {
          v12 = &v9[2 * ((unint64_t)v11 >> 1)];
          v13 = a2 - 2;
          if ((unint64_t)v10 < 0x801)
          {
            sub_239991894(v12, v9, a2 - 2, a3);
            --a4;
            v15 = *v9;
            if ((a5 & 1) != 0)
              goto LABEL_25;
          }
          else
          {
            sub_239991894(v9, v12, a2 - 2, a3);
            sub_239991894(v332, v12 - 2, a2 - 4, a3);
            sub_239991894(v331, v12 + 2, a2 - 6, a3);
            sub_239991894(v12 - 2, v12, v12 + 2, a3);
            v14 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v14;
            --a4;
            v15 = *v9;
            if ((a5 & 1) != 0)
              goto LABEL_25;
          }
          v16 = *(v9 - 2);
          v17 = (uint64_t)(*(_QWORD *)(v16 + 160) - *(_QWORD *)(v16 + 152)) >> 2;
          v18 = (uint64_t)(*(_QWORD *)(v15 + 160) - *(_QWORD *)(v15 + 152)) >> 2;
          if (v17 < v18)
            goto LABEL_25;
          if (v17 != v18)
            goto LABEL_137;
          v19 = *(uint64_t **)(*a3 + 8);
          if (!v19)
LABEL_554:
            sub_23941D898("map::at:  key not found");
          v20 = *(uint64_t **)(*a3 + 8);
          while (1)
          {
            while (1)
            {
              v21 = v20[4];
              if (v21 <= v16)
                break;
              v20 = (uint64_t *)*v20;
              if (!v20)
                goto LABEL_554;
            }
            if (v21 >= v16)
              break;
            v20 = (uint64_t *)v20[1];
            if (!v20)
              goto LABEL_554;
          }
          v22 = *((_DWORD *)v20 + 10);
          while (1)
          {
            while (1)
            {
              v23 = v19[4];
              if (v23 <= v15)
                break;
              v19 = (uint64_t *)*v19;
              if (!v19)
                goto LABEL_554;
            }
            if (v23 >= v15)
              break;
            v19 = (uint64_t *)v19[1];
            if (!v19)
              goto LABEL_554;
          }
          if (v22 < *((_DWORD *)v19 + 10))
          {
LABEL_25:
            v24 = a4;
            v25 = v9[1];
            *v9 = 0;
            v9[1] = 0;
            v26 = *a3;
            v27 = (uint64_t)(*(_QWORD *)(v15 + 160) - *(_QWORD *)(v15 + 152)) >> 2;
            v28 = v9;
            do
            {
              do
              {
                v29 = v28;
                v31 = v28[2];
                v28 += 2;
                v30 = v31;
                v32 = (uint64_t)(*(_QWORD *)(v31 + 160) - *(_QWORD *)(v31 + 152)) >> 2;
              }
              while (v32 < v27);
              if (v32 != v27)
                break;
              v33 = *(uint64_t **)(v26 + 8);
              if (!v33)
LABEL_557:
                sub_23941D898("map::at:  key not found");
              v34 = *(uint64_t **)(v26 + 8);
              while (1)
              {
                while (1)
                {
                  v35 = v34[4];
                  if (v35 <= v30)
                    break;
                  v34 = (uint64_t *)*v34;
                  if (!v34)
                    goto LABEL_557;
                }
                if (v35 >= v30)
                  break;
                v34 = (uint64_t *)v34[1];
                if (!v34)
                  goto LABEL_557;
              }
              v36 = *((_DWORD *)v34 + 10);
              while (1)
              {
                while (1)
                {
                  v37 = v33[4];
                  if (v37 <= v15)
                    break;
                  v33 = (uint64_t *)*v33;
                  if (!v33)
                    goto LABEL_557;
                }
                if (v37 >= v15)
                  break;
                v33 = (uint64_t *)v33[1];
                if (!v33)
                  goto LABEL_557;
              }
            }
            while (v36 < *((_DWORD *)v33 + 10));
            if (v29 == v9)
            {
              i = v335;
              if (v28 < v335)
              {
                v47 = *v13;
                v48 = (uint64_t)(*(_QWORD *)(*v13 + 160) - *(_QWORD *)(*v13 + 152)) >> 2;
                i = v13;
                while (v48 >= v27)
                {
                  if (v48 == v27)
                  {
                    v50 = *(uint64_t **)(v26 + 8);
                    if (!v50)
                      goto LABEL_557;
                    v51 = *(uint64_t **)(v26 + 8);
                    while (1)
                    {
                      while (1)
                      {
                        v52 = v51[4];
                        if (v52 <= v47)
                          break;
                        v51 = (uint64_t *)*v51;
                        if (!v51)
                          goto LABEL_557;
                      }
                      if (v52 >= v47)
                        break;
                      v51 = (uint64_t *)v51[1];
                      if (!v51)
                        goto LABEL_557;
                    }
                    v53 = *((_DWORD *)v51 + 10);
                    while (1)
                    {
                      while (1)
                      {
                        v54 = v50[4];
                        if (v54 <= v15)
                          break;
                        v50 = (uint64_t *)*v50;
                        if (!v50)
                          goto LABEL_557;
                      }
                      if (v54 >= v15)
                        break;
                      v50 = (uint64_t *)v50[1];
                      if (!v50)
                        goto LABEL_557;
                    }
                    if (v28 >= i || v53 < *((_DWORD *)v50 + 10))
                      break;
                  }
                  else if (v28 >= i)
                  {
                    break;
                  }
                  v49 = *(i - 2);
                  i -= 2;
                  v47 = v49;
                  v48 = (uint64_t)(*(_QWORD *)(v49 + 160) - *(_QWORD *)(v49 + 152)) >> 2;
                }
              }
            }
            else
            {
              v38 = *v13;
              v39 = (uint64_t)(*(_QWORD *)(*v13 + 160) - *(_QWORD *)(*v13 + 152)) >> 2;
              for (i = v13; v39 >= v27; i -= 2)
              {
                if (v39 == v27)
                {
                  v42 = *(uint64_t **)(v26 + 8);
                  if (!v42)
                    goto LABEL_557;
                  v43 = *(uint64_t **)(v26 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v44 = v43[4];
                      if (v44 <= v38)
                        break;
                      v43 = (uint64_t *)*v43;
                      if (!v43)
                        goto LABEL_557;
                    }
                    if (v44 >= v38)
                      break;
                    v43 = (uint64_t *)v43[1];
                    if (!v43)
                      goto LABEL_557;
                  }
                  v45 = *((_DWORD *)v43 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v46 = v42[4];
                      if (v46 <= v15)
                        break;
                      v42 = (uint64_t *)*v42;
                      if (!v42)
                        goto LABEL_557;
                    }
                    if (v46 >= v15)
                      break;
                    v42 = (uint64_t *)v42[1];
                    if (!v42)
                      goto LABEL_557;
                  }
                  if (v45 < *((_DWORD *)v42 + 10))
                    break;
                }
                v41 = *(i - 2);
                v38 = v41;
                v39 = (uint64_t)(*(_QWORD *)(v41 + 160) - *(_QWORD *)(v41 + 152)) >> 2;
              }
            }
            if (v28 >= i)
            {
              j = v28;
            }
            else
            {
              v55 = *i;
              j = v28;
              v56 = i;
              do
              {
                *j = v55;
                *v56 = v30;
                v57 = j[1];
                j[1] = v56[1];
                v56[1] = v57;
                v58 = *a3;
                v59 = (uint64_t)(*(_QWORD *)(v15 + 160) - *(_QWORD *)(v15 + 152)) >> 2;
                while (1)
                {
                  do
                  {
                    v60 = j[2];
                    j += 2;
                    v30 = v60;
                    v61 = (uint64_t)(*(_QWORD *)(v60 + 160) - *(_QWORD *)(v60 + 152)) >> 2;
                  }
                  while (v61 < v59);
                  if (v61 != v59)
                    break;
                  v62 = *(uint64_t **)(v58 + 8);
                  if (!v62)
LABEL_259:
                    sub_23941D898("map::at:  key not found");
                  v63 = *(uint64_t **)(v58 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v64 = v63[4];
                      if (v64 <= v30)
                        break;
                      v63 = (uint64_t *)*v63;
                      if (!v63)
                        goto LABEL_259;
                    }
                    if (v64 >= v30)
                      break;
                    v63 = (uint64_t *)v63[1];
                    if (!v63)
                      goto LABEL_259;
                  }
                  v65 = *((_DWORD *)v63 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v66 = v62[4];
                      if (v66 <= v15)
                        break;
                      v62 = (uint64_t *)*v62;
                      if (!v62)
                        goto LABEL_259;
                    }
                    if (v66 >= v15)
                      break;
                    v62 = (uint64_t *)v62[1];
                    if (!v62)
                      goto LABEL_259;
                  }
                  if (v65 >= *((_DWORD *)v62 + 10))
                    goto LABEL_103;
                }
                while (1)
                {
LABEL_103:
                  v67 = *(v56 - 2);
                  v56 -= 2;
                  v55 = v67;
                  v68 = (uint64_t)(*(_QWORD *)(v67 + 160) - *(_QWORD *)(v67 + 152)) >> 2;
                  if (v68 < v59)
                    break;
                  if (v68 == v59)
                  {
                    v69 = *(uint64_t **)(v58 + 8);
                    if (!v69)
                      goto LABEL_259;
                    v70 = *(uint64_t **)(v58 + 8);
                    while (1)
                    {
                      while (1)
                      {
                        v71 = v70[4];
                        if (v71 <= v55)
                          break;
                        v70 = (uint64_t *)*v70;
                        if (!v70)
                          goto LABEL_259;
                      }
                      if (v71 >= v55)
                        break;
                      v70 = (uint64_t *)v70[1];
                      if (!v70)
                        goto LABEL_259;
                    }
                    v72 = *((_DWORD *)v70 + 10);
                    while (1)
                    {
                      while (1)
                      {
                        v73 = v69[4];
                        if (v73 <= v15)
                          break;
                        v69 = (uint64_t *)*v69;
                        if (!v69)
                          goto LABEL_259;
                      }
                      if (v73 >= v15)
                        break;
                      v69 = (uint64_t *)v69[1];
                      if (!v69)
                        goto LABEL_259;
                    }
                    if (v72 < *((_DWORD *)v69 + 10))
                      break;
                  }
                }
              }
              while (j < v56);
            }
            v74 = v25;
            v75 = j - 2;
            if (j - 2 != v9)
            {
              v76 = *(_OWORD *)v75;
              *v75 = 0;
              *(j - 1) = 0;
              v77 = (std::__shared_weak_count *)v9[1];
              *(_OWORD *)v9 = v76;
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
            }
            v80 = (std::__shared_weak_count *)*(j - 1);
            *(j - 2) = v15;
            *(j - 1) = v74;
            a2 = v335;
            if (v80)
            {
              v81 = (unint64_t *)&v80->__shared_owners_;
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            v83 = v28 >= i;
            a4 = v24;
            if (!v83)
              goto LABEL_136;
            v84 = sub_239991C0C(v9, j - 2, a3);
            if (sub_239991C0C(j, v335, a3))
            {
              a2 = j - 2;
              if (v84)
                return;
              continue;
            }
            if (!v84)
            {
LABEL_136:
              sub_23998FB88(v9, j - 2, a3, a4, a5 & 1);
              a5 = 0;
            }
          }
          else
          {
LABEL_137:
            v85 = v9[1];
            *v9 = 0;
            v9[1] = 0;
            v86 = *a3;
            v87 = *v13;
            v88 = (uint64_t)(*(_QWORD *)(v15 + 160) - *(_QWORD *)(v15 + 152)) >> 2;
            v90 = *(_QWORD *)(*v13 + 152);
            v89 = *(_QWORD *)(*v13 + 160);
            v91 = (v89 - v90) >> 2;
            if (v88 < v91)
              goto LABEL_138;
            if (v88 != v91)
              goto LABEL_170;
            v100 = *(uint64_t **)(v86 + 8);
            if (!v100)
LABEL_558:
              sub_23941D898("map::at:  key not found");
            v101 = *(uint64_t **)(v86 + 8);
            while (1)
            {
              while (1)
              {
                v102 = v101[4];
                if (v102 <= v15)
                  break;
                v101 = (uint64_t *)*v101;
                if (!v101)
                  goto LABEL_558;
              }
              if (v102 >= v15)
                break;
              v101 = (uint64_t *)v101[1];
              if (!v101)
                goto LABEL_558;
            }
            v103 = *((_DWORD *)v101 + 10);
            while (1)
            {
              while (1)
              {
                v104 = v100[4];
                if (v104 <= v87)
                  break;
                v100 = (uint64_t *)*v100;
                if (!v100)
                  goto LABEL_558;
              }
              if (v104 >= v87)
                break;
              v100 = (uint64_t *)v100[1];
              if (!v100)
                goto LABEL_558;
            }
            if (v103 < *((_DWORD *)v100 + 10))
            {
LABEL_138:
              j = v9;
              while (1)
              {
                v93 = j[2];
                j += 2;
                v92 = v93;
                v94 = (uint64_t)(*(_QWORD *)(v93 + 160) - *(_QWORD *)(v93 + 152)) >> 2;
                if (v88 < v94)
                  break;
                if (v88 == v94)
                {
                  v95 = *(uint64_t **)(v86 + 8);
                  if (!v95)
                    goto LABEL_558;
                  v96 = *(uint64_t **)(v86 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v97 = v96[4];
                      if (v97 <= v15)
                        break;
                      v96 = (uint64_t *)*v96;
                      if (!v96)
                        goto LABEL_558;
                    }
                    if (v97 >= v15)
                      break;
                    v96 = (uint64_t *)v96[1];
                    if (!v96)
                      goto LABEL_558;
                  }
                  v98 = *((_DWORD *)v96 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v99 = v95[4];
                      if (v99 <= v92)
                        break;
                      v95 = (uint64_t *)*v95;
                      if (!v95)
                        goto LABEL_558;
                    }
                    if (v99 >= v92)
                      break;
                    v95 = (uint64_t *)v95[1];
                    if (!v95)
                      goto LABEL_558;
                  }
                  if (v98 < *((_DWORD *)v95 + 10))
                    break;
                }
              }
            }
            else
            {
LABEL_170:
              for (j = v9 + 2; j < v335; j += 2)
              {
                v105 = *j;
                v106 = (uint64_t)(*(_QWORD *)(*j + 160) - *(_QWORD *)(*j + 152)) >> 2;
                if (v88 < v106)
                  break;
                if (v88 == v106)
                {
                  v107 = *(uint64_t **)(v86 + 8);
                  if (!v107)
                    goto LABEL_558;
                  v108 = *(uint64_t **)(v86 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v109 = v108[4];
                      if (v109 <= v15)
                        break;
                      v108 = (uint64_t *)*v108;
                      if (!v108)
                        goto LABEL_558;
                    }
                    if (v109 >= v15)
                      break;
                    v108 = (uint64_t *)v108[1];
                    if (!v108)
                      goto LABEL_558;
                  }
                  v110 = *((_DWORD *)v108 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v111 = v107[4];
                      if (v111 <= v105)
                        break;
                      v107 = (uint64_t *)*v107;
                      if (!v107)
                        goto LABEL_558;
                    }
                    if (v111 >= v105)
                      break;
                    v107 = (uint64_t *)v107[1];
                    if (!v107)
                      goto LABEL_558;
                  }
                  if (v110 < *((_DWORD *)v107 + 10))
                    break;
                }
              }
            }
            v112 = v335;
            if (j < v335)
            {
              for (k = v335; ; k -= 2)
              {
                v112 = k - 2;
                v114 = (v89 - v90) >> 2;
                if (v88 >= v114)
                {
                  if (v88 != v114)
                    break;
                  v115 = *(uint64_t **)(v86 + 8);
                  if (!v115)
                    goto LABEL_558;
                  v116 = *(uint64_t **)(v86 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v117 = v116[4];
                      if (v117 <= v15)
                        break;
                      v116 = (uint64_t *)*v116;
                      if (!v116)
                        goto LABEL_558;
                    }
                    if (v117 >= v15)
                      break;
                    v116 = (uint64_t *)v116[1];
                    if (!v116)
                      goto LABEL_558;
                  }
                  v118 = *((_DWORD *)v116 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v119 = v115[4];
                      if (v119 <= v87)
                        break;
                      v115 = (uint64_t *)*v115;
                      if (!v115)
                        goto LABEL_558;
                    }
                    if (v119 >= v87)
                      break;
                    v115 = (uint64_t *)v115[1];
                    if (!v115)
                      goto LABEL_558;
                  }
                  if (v118 >= *((_DWORD *)v115 + 10))
                    break;
                }
                v87 = *(k - 4);
                v90 = *(_QWORD *)(v87 + 152);
                v89 = *(_QWORD *)(v87 + 160);
              }
            }
            if (j < v112)
            {
              v120 = *j;
              v121 = *v112;
              do
              {
                *j = v121;
                *v112 = v120;
                v122 = j[1];
                j[1] = v112[1];
                v112[1] = v122;
                v123 = *a3;
                v124 = j[2];
                j += 2;
                v120 = v124;
                v125 = (uint64_t)(*(_QWORD *)(v15 + 160) - *(_QWORD *)(v15 + 152)) >> 2;
                while (1)
                {
                  v127 = (uint64_t)(*(_QWORD *)(v120 + 160) - *(_QWORD *)(v120 + 152)) >> 2;
                  if (v125 < v127)
                    break;
                  if (v125 == v127)
                  {
                    v128 = *(uint64_t **)(v123 + 8);
                    if (!v128)
                      goto LABEL_558;
                    v129 = *(uint64_t **)(v123 + 8);
                    while (1)
                    {
                      while (1)
                      {
                        v130 = v129[4];
                        if (v130 <= v15)
                          break;
                        v129 = (uint64_t *)*v129;
                        if (!v129)
                          goto LABEL_558;
                      }
                      if (v130 >= v15)
                        break;
                      v129 = (uint64_t *)v129[1];
                      if (!v129)
                        goto LABEL_558;
                    }
                    v131 = *((_DWORD *)v129 + 10);
                    while (1)
                    {
                      while (1)
                      {
                        v132 = v128[4];
                        if (v132 <= v120)
                          break;
                        v128 = (uint64_t *)*v128;
                        if (!v128)
                          goto LABEL_558;
                      }
                      if (v132 >= v120)
                        break;
                      v128 = (uint64_t *)v128[1];
                      if (!v128)
                        goto LABEL_558;
                    }
                    if (v131 < *((_DWORD *)v128 + 10))
                      goto LABEL_230;
                  }
                  v126 = j[2];
                  j += 2;
                  v120 = v126;
                }
                do
                {
                  do
                  {
LABEL_230:
                    v133 = *(v112 - 2);
                    v112 -= 2;
                    v121 = v133;
                    v134 = (uint64_t)(*(_QWORD *)(v133 + 160) - *(_QWORD *)(v133 + 152)) >> 2;
                  }
                  while (v125 < v134);
                  if (v125 != v134)
                    break;
                  v135 = *(uint64_t **)(v123 + 8);
                  if (!v135)
                    goto LABEL_558;
                  v136 = *(uint64_t **)(v123 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v137 = v136[4];
                      if (v137 <= v15)
                        break;
                      v136 = (uint64_t *)*v136;
                      if (!v136)
                        goto LABEL_558;
                    }
                    if (v137 >= v15)
                      break;
                    v136 = (uint64_t *)v136[1];
                    if (!v136)
                      goto LABEL_558;
                  }
                  v138 = *((_DWORD *)v136 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v139 = v135[4];
                      if (v139 <= v121)
                        break;
                      v135 = (uint64_t *)*v135;
                      if (!v135)
                        goto LABEL_558;
                    }
                    if (v139 >= v121)
                      break;
                    v135 = (uint64_t *)v135[1];
                    if (!v135)
                      goto LABEL_558;
                  }
                }
                while (v138 < *((_DWORD *)v135 + 10));
              }
              while (j < v112);
            }
            v140 = j - 2;
            if (j - 2 != v9)
            {
              v141 = *(_OWORD *)v140;
              *v140 = 0;
              *(j - 1) = 0;
              v142 = (std::__shared_weak_count *)v9[1];
              *(_OWORD *)v9 = v141;
              if (v142)
              {
                v143 = (unint64_t *)&v142->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
            }
            a5 = 0;
            v145 = (std::__shared_weak_count *)*(j - 1);
            *(j - 2) = v15;
            *(j - 1) = v85;
            a2 = v335;
            if (v145)
            {
              v146 = (unint64_t *)&v145->__shared_owners_;
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 - 1, v146));
              a5 = 0;
              if (!v147)
              {
                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                std::__shared_weak_count::__release_weak(v145);
                a5 = 0;
              }
            }
          }
          goto LABEL_1;
        }
        if (v9 != a2)
        {
          v184 = (unint64_t)(v11 - 2) >> 1;
          v185 = v184;
          do
          {
            v186 = v185;
            if (v184 >= v185)
            {
              v187 = (2 * v185) | 1;
              v188 = &v9[2 * v187];
              v189 = *a3;
              if (2 * v186 + 2 < v11)
              {
                v190 = v188[2];
                v191 = *v188;
                v192 = (uint64_t)(*(_QWORD *)(*v188 + 160) - *(_QWORD *)(*v188 + 152)) >> 2;
                v193 = (uint64_t)(*(_QWORD *)(v190 + 160) - *(_QWORD *)(v190 + 152)) >> 2;
                if (v192 < v193)
                  goto LABEL_325;
                if (v192 == v193)
                {
                  v194 = *(uint64_t **)(v189 + 8);
                  if (!v194)
                    goto LABEL_554;
                  v195 = *(uint64_t **)(v189 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v196 = v195[4];
                      if (v196 <= v191)
                        break;
                      v195 = (uint64_t *)*v195;
                      if (!v195)
                        goto LABEL_554;
                    }
                    if (v196 >= v191)
                      break;
                    v195 = (uint64_t *)v195[1];
                    if (!v195)
                      goto LABEL_554;
                  }
                  v197 = *((_DWORD *)v195 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v198 = v194[4];
                      if (v198 <= v190)
                        break;
                      v194 = (uint64_t *)*v194;
                      if (!v194)
                        goto LABEL_554;
                    }
                    if (v198 >= v190)
                      break;
                    v194 = (uint64_t *)v194[1];
                    if (!v194)
                      goto LABEL_554;
                  }
                  if (v197 < *((_DWORD *)v194 + 10))
                  {
LABEL_325:
                    v188 += 2;
                    v187 = 2 * v186 + 2;
                  }
                }
              }
              v199 = &v9[2 * v186];
              v200 = *v188;
              v201 = *v199;
              v202 = (uint64_t)(*(_QWORD *)(*v188 + 160) - *(_QWORD *)(*v188 + 152)) >> 2;
              v203 = (uint64_t)(*(_QWORD *)(*v199 + 160) - *(_QWORD *)(*v199 + 152)) >> 2;
              if (v202 >= v203)
              {
                if (v202 != v203)
                  goto LABEL_357;
                v204 = *(uint64_t **)(v189 + 8);
                if (!v204)
                  goto LABEL_554;
                v205 = v204;
                while (1)
                {
                  while (1)
                  {
                    v206 = v205[4];
                    if (v206 <= v200)
                      break;
                    v205 = (uint64_t *)*v205;
                    if (!v205)
                      goto LABEL_554;
                  }
                  if (v206 >= v200)
                    break;
                  v205 = (uint64_t *)v205[1];
                  if (!v205)
                    goto LABEL_554;
                }
                v207 = *((_DWORD *)v205 + 10);
                while (1)
                {
                  while (1)
                  {
                    v208 = v204[4];
                    if (v208 <= v201)
                      break;
                    v204 = (uint64_t *)*v204;
                    if (!v204)
                      goto LABEL_554;
                  }
                  if (v208 >= v201)
                    break;
                  v204 = (uint64_t *)v204[1];
                  if (!v204)
                    goto LABEL_554;
                }
                if (v207 >= *((_DWORD *)v204 + 10))
                {
LABEL_357:
                  v334 = v9[2 * v186 + 1];
                  *v199 = 0;
                  v199[1] = 0;
                  v209 = *v188;
                  while (1)
                  {
                    v210 = v188;
                    v211 = v188[1];
                    *v210 = 0;
                    v210[1] = 0;
                    v212 = (std::__shared_weak_count *)v199[1];
                    *v199 = v209;
                    v199[1] = v211;
                    if (v212)
                    {
                      v213 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v214 = __ldaxr(v213);
                      while (__stlxr(v214 - 1, v213));
                      if (!v214)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                      }
                    }
                    if (v184 < v187)
                      break;
                    v215 = 2 * v187;
                    v187 = (2 * v187) | 1;
                    v188 = &v9[2 * v187];
                    v216 = v215 + 2;
                    v217 = *a3;
                    if (v216 < v11)
                    {
                      v218 = v188[2];
                      v219 = *v188;
                      v220 = (uint64_t)(*(_QWORD *)(*v188 + 160) - *(_QWORD *)(*v188 + 152)) >> 2;
                      v221 = (uint64_t)(*(_QWORD *)(v218 + 160) - *(_QWORD *)(v218 + 152)) >> 2;
                      if (v220 < v221)
                        goto LABEL_367;
                      if (v220 == v221)
                      {
                        v222 = *(uint64_t **)(v217 + 8);
                        if (!v222)
                          goto LABEL_562;
                        v223 = *(uint64_t **)(v217 + 8);
                        while (1)
                        {
                          while (1)
                          {
                            v224 = v223[4];
                            if (v224 <= v219)
                              break;
                            v223 = (uint64_t *)*v223;
                            if (!v223)
                              goto LABEL_562;
                          }
                          if (v224 >= v219)
                            break;
                          v223 = (uint64_t *)v223[1];
                          if (!v223)
                            goto LABEL_562;
                        }
                        v225 = *((_DWORD *)v223 + 10);
                        while (1)
                        {
                          while (1)
                          {
                            v226 = v222[4];
                            if (v226 <= v218)
                              break;
                            v222 = (uint64_t *)*v222;
                            if (!v222)
                              goto LABEL_562;
                          }
                          if (v226 >= v218)
                            break;
                          v222 = (uint64_t *)v222[1];
                          if (!v222)
                            goto LABEL_562;
                        }
                        if (v225 < *((_DWORD *)v222 + 10))
                        {
LABEL_367:
                          v188 += 2;
                          v187 = v216;
                        }
                      }
                    }
                    v209 = *v188;
                    v227 = (uint64_t)(*(_QWORD *)(*v188 + 160) - *(_QWORD *)(*v188 + 152)) >> 2;
                    v228 = (uint64_t)(*(_QWORD *)(v201 + 160) - *(_QWORD *)(v201 + 152)) >> 2;
                    v229 = v227 == v228;
                    if (v227 < v228)
                      break;
                    v199 = v210;
                    if (v229)
                    {
                      v230 = *(uint64_t **)(v217 + 8);
                      if (!v230)
LABEL_562:
                        sub_23941D898("map::at:  key not found");
                      v231 = v230;
                      while (1)
                      {
                        while (1)
                        {
                          v232 = v231[4];
                          if (v232 <= v209)
                            break;
                          v231 = (uint64_t *)*v231;
                          if (!v231)
                            goto LABEL_562;
                        }
                        if (v232 >= v209)
                          break;
                        v231 = (uint64_t *)v231[1];
                        if (!v231)
                          goto LABEL_562;
                      }
                      v233 = *((_DWORD *)v231 + 10);
                      while (1)
                      {
                        while (1)
                        {
                          v234 = v230[4];
                          if (v234 <= v201)
                            break;
                          v230 = (uint64_t *)*v230;
                          if (!v230)
                            goto LABEL_562;
                        }
                        if (v234 >= v201)
                          break;
                        v230 = (uint64_t *)v230[1];
                        if (!v230)
                          goto LABEL_562;
                      }
                      v199 = v210;
                      if (v233 < *((_DWORD *)v230 + 10))
                        break;
                    }
                  }
                  v235 = (std::__shared_weak_count *)v210[1];
                  *v210 = v201;
                  v210[1] = v334;
                  if (v235)
                  {
                    v236 = (unint64_t *)&v235->__shared_owners_;
                    do
                      v237 = __ldaxr(v236);
                    while (__stlxr(v237 - 1, v236));
                    if (!v237)
                    {
                      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                      std::__shared_weak_count::__release_weak(v235);
                    }
                  }
                }
              }
            }
            v185 = v186 - 1;
          }
          while (v186);
          v238 = (unint64_t)v10 >> 4;
          v239 = v335;
          do
          {
            v241 = 0;
            v242 = v239;
            v243 = *v9;
            v244 = v9[1];
            *v9 = 0;
            v9[1] = 0;
            v245 = (char *)v9;
            do
            {
              v246 = v245;
              v245 += 16 * v241 + 16;
              v247 = 2 * v241;
              v241 = (2 * v241) | 1;
              v248 = v247 + 2;
              if (v248 < v238)
              {
                v249 = *((_QWORD *)v245 + 2);
                v250 = *(_QWORD *)v245;
                v251 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v245 + 160) - *(_QWORD *)(*(_QWORD *)v245 + 152)) >> 2;
                v252 = (uint64_t)(*(_QWORD *)(v249 + 160) - *(_QWORD *)(v249 + 152)) >> 2;
                if (v251 < v252)
                  goto LABEL_410;
                if (v251 == v252)
                {
                  v253 = *(uint64_t **)(*a3 + 8);
                  if (!v253)
                    goto LABEL_563;
                  v254 = *(uint64_t **)(*a3 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v255 = v254[4];
                      if (v255 <= v250)
                        break;
                      v254 = (uint64_t *)*v254;
                      if (!v254)
                        goto LABEL_563;
                    }
                    if (v255 >= v250)
                      break;
                    v254 = (uint64_t *)v254[1];
                    if (!v254)
                      goto LABEL_563;
                  }
                  v256 = *((_DWORD *)v254 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v257 = v253[4];
                      if (v257 <= v249)
                        break;
                      v253 = (uint64_t *)*v253;
                      if (!v253)
                        goto LABEL_563;
                    }
                    if (v257 >= v249)
                      break;
                    v253 = (uint64_t *)v253[1];
                    if (!v253)
                      goto LABEL_563;
                  }
                  if (v256 < *((_DWORD *)v253 + 10))
                  {
LABEL_410:
                    v245 += 16;
                    v241 = v248;
                  }
                }
              }
              v258 = *(_OWORD *)v245;
              *(_QWORD *)v245 = 0;
              *((_QWORD *)v245 + 1) = 0;
              v259 = (std::__shared_weak_count *)*((_QWORD *)v246 + 1);
              *(_OWORD *)v246 = v258;
              if (v259)
              {
                v260 = (unint64_t *)&v259->__shared_owners_;
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                }
              }
            }
            while (v241 <= (uint64_t)((unint64_t)(v238 - 2) >> 1));
            v239 -= 2;
            if (v245 == (char *)(v242 - 2))
            {
              v290 = (std::__shared_weak_count *)*((_QWORD *)v245 + 1);
              *(_QWORD *)v245 = v243;
              *((_QWORD *)v245 + 1) = v244;
              if (v290)
              {
                v291 = (unint64_t *)&v290->__shared_owners_;
                do
                  v292 = __ldaxr(v291);
                while (__stlxr(v292 - 1, v291));
LABEL_472:
                if (!v292)
                {
                  ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                  std::__shared_weak_count::__release_weak(v290);
                }
              }
            }
            else
            {
              v262 = *((_OWORD *)v242 - 1);
              *v239 = 0;
              *(v242 - 1) = 0;
              v263 = (std::__shared_weak_count *)*((_QWORD *)v245 + 1);
              *(_OWORD *)v245 = v262;
              if (!v263)
                goto LABEL_436;
              v264 = (unint64_t *)&v263->__shared_owners_;
              do
                v265 = __ldaxr(v264);
              while (__stlxr(v265 - 1, v264));
              if (!v265)
              {
                ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                std::__shared_weak_count::__release_weak(v263);
                v266 = (std::__shared_weak_count *)*(v242 - 1);
                *(v242 - 2) = v243;
                *(v242 - 1) = v244;
                if (!v266)
                  goto LABEL_440;
              }
              else
              {
LABEL_436:
                v266 = (std::__shared_weak_count *)*(v242 - 1);
                *(v242 - 2) = v243;
                *(v242 - 1) = v244;
                if (!v266)
                  goto LABEL_440;
              }
              v267 = (unint64_t *)&v266->__shared_owners_;
              do
                v268 = __ldaxr(v267);
              while (__stlxr(v268 - 1, v267));
              if (v268)
              {
LABEL_440:
                v269 = v245 + 16 - (char *)v9;
                if (v269 >= 17)
                  goto LABEL_441;
                continue;
              }
              ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
              std::__shared_weak_count::__release_weak(v266);
              v269 = v245 + 16 - (char *)v9;
              if (v269 >= 17)
              {
LABEL_441:
                v270 = (((unint64_t)v269 >> 4) - 2) >> 1;
                v271 = &v9[2 * v270];
                v272 = *v271;
                v273 = *(_QWORD *)v245;
                v274 = (uint64_t)(*(_QWORD *)(*v271 + 160) - *(_QWORD *)(*v271 + 152)) >> 2;
                v275 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v245 + 160) - *(_QWORD *)(*(_QWORD *)v245 + 152)) >> 2;
                if (v274 >= v275)
                {
                  if (v274 != v275)
                    continue;
                  v294 = *(uint64_t **)(*a3 + 8);
                  if (!v294)
LABEL_563:
                    sub_23941D898("map::at:  key not found");
                  v295 = *(uint64_t **)(*a3 + 8);
                  while (1)
                  {
                    while (1)
                    {
                      v296 = v295[4];
                      if (v296 <= v272)
                        break;
                      v295 = (uint64_t *)*v295;
                      if (!v295)
                        goto LABEL_563;
                    }
                    if (v296 >= v272)
                      break;
                    v295 = (uint64_t *)v295[1];
                    if (!v295)
                      goto LABEL_563;
                  }
                  v297 = *((_DWORD *)v295 + 10);
                  while (1)
                  {
                    while (1)
                    {
                      v298 = v294[4];
                      if (v298 <= v273)
                        break;
                      v294 = (uint64_t *)*v294;
                      if (!v294)
                        goto LABEL_563;
                    }
                    if (v298 >= v273)
                      break;
                    v294 = (uint64_t *)v294[1];
                    if (!v294)
                      goto LABEL_563;
                  }
                  if (v297 >= *((_DWORD *)v294 + 10))
                    continue;
                }
                v276 = *((_QWORD *)v245 + 1);
                *(_QWORD *)v245 = 0;
                *((_QWORD *)v245 + 1) = 0;
                v277 = *v271;
                while (1)
                {
                  v278 = v271;
                  v279 = v271[1];
                  *v278 = 0;
                  v278[1] = 0;
                  v280 = (std::__shared_weak_count *)*((_QWORD *)v245 + 1);
                  *(_QWORD *)v245 = v277;
                  *((_QWORD *)v245 + 1) = v279;
                  if (v280)
                  {
                    v281 = (unint64_t *)&v280->__shared_owners_;
                    do
                      v282 = __ldaxr(v281);
                    while (__stlxr(v282 - 1, v281));
                    if (!v282)
                    {
                      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                      std::__shared_weak_count::__release_weak(v280);
                    }
                  }
                  if (!v270)
                    break;
                  v270 = (v270 - 1) >> 1;
                  v271 = &v9[2 * v270];
                  v277 = *v271;
                  v283 = (uint64_t)(*(_QWORD *)(*v271 + 160) - *(_QWORD *)(*v271 + 152)) >> 2;
                  v284 = (uint64_t)(*(_QWORD *)(v273 + 160) - *(_QWORD *)(v273 + 152)) >> 2;
                  v245 = (char *)v278;
                  if (v283 >= v284)
                  {
                    if (v283 != v284)
                      break;
                    v285 = *(uint64_t **)(*a3 + 8);
                    if (!v285)
LABEL_561:
                      sub_23941D898("map::at:  key not found");
                    v286 = *(uint64_t **)(*a3 + 8);
                    while (1)
                    {
                      while (1)
                      {
                        v287 = v286[4];
                        if (v287 <= v277)
                          break;
                        v286 = (uint64_t *)*v286;
                        if (!v286)
                          goto LABEL_561;
                      }
                      if (v287 >= v277)
                        break;
                      v286 = (uint64_t *)v286[1];
                      if (!v286)
                        goto LABEL_561;
                    }
                    v288 = *((_DWORD *)v286 + 10);
                    while (1)
                    {
                      while (1)
                      {
                        v289 = v285[4];
                        if (v289 <= v273)
                          break;
                        v285 = (uint64_t *)*v285;
                        if (!v285)
                          goto LABEL_561;
                      }
                      if (v289 >= v273)
                        break;
                      v285 = (uint64_t *)v285[1];
                      if (!v285)
                        goto LABEL_561;
                    }
                    v245 = (char *)v278;
                    if (v288 >= *((_DWORD *)v285 + 10))
                      break;
                  }
                }
                v290 = (std::__shared_weak_count *)v278[1];
                *v278 = v273;
                v278[1] = v276;
                if (!v290)
                  continue;
                v293 = (unint64_t *)&v290->__shared_owners_;
                do
                  v292 = __ldaxr(v293);
                while (__stlxr(v292 - 1, v293));
                goto LABEL_472;
              }
            }
          }
          while (v238-- > 2);
        }
        return;
    }
  }
}

  v9 = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return a5.n128_f32[0];
      case 2:
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] > *(float *)(v9 + 4))
        {
          v72 = *(_QWORD *)v9;
          goto LABEL_105;
        }
        return a5.n128_f32[0];
      case 3:
        a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
        v73 = *((float *)a2 - 1);
        if (a5.n128_f32[0] <= *(float *)(v9 + 4))
        {
          if (v73 > a5.n128_f32[0])
          {
            v111 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            *(a2 - 1) = v111;
            a5.n128_u32[0] = *(_DWORD *)(v9 + 12);
            if (a5.n128_f32[0] > *(float *)(v9 + 4))
            {
              a5 = (__n128)vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
              *(__n128 *)v9 = a5;
            }
          }
        }
        else
        {
          v72 = *(_QWORD *)v9;
          if (v73 > a5.n128_f32[0])
          {
LABEL_105:
            *(_QWORD *)v9 = *(a2 - 1);
LABEL_106:
            *(a2 - 1) = v72;
            return a5.n128_f32[0];
          }
          *(_QWORD *)v9 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v72;
          a5.n128_u32[0] = *((_DWORD *)a2 - 1);
          if (a5.n128_f32[0] > *((float *)&v72 + 1))
          {
            *(_QWORD *)(v9 + 8) = *(a2 - 1);
            goto LABEL_106;
          }
        }
        return a5.n128_f32[0];
      case 4:
        sub_2399E2E0C((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)a2 - 2);
        return a5.n128_f32[0];
      case 5:
        sub_2399E2E0C((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (float *)(v9 + 24));
        a5.n128_u32[0] = *((_DWORD *)a2 - 1);
        if (a5.n128_f32[0] > *(float *)(v9 + 28))
        {
          v74 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = *(a2 - 1);
          *(a2 - 1) = v74;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 28);
          if (a5.n128_f32[0] > *(float *)(v9 + 20))
          {
            v76 = *(_QWORD *)(v9 + 16);
            v75 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 16) = v75;
            *(_QWORD *)(v9 + 24) = v76;
            a5.n128_u32[0] = HIDWORD(v75);
            if (*(float *)(v9 + 12) < *((float *)&v75 + 1))
            {
              v77 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v75;
              *(_QWORD *)(v9 + 16) = v77;
              if (*(float *)(v9 + 4) < *((float *)&v75 + 1))
              {
                v78 = *(_QWORD *)v9;
                *(_QWORD *)v9 = v75;
                *(_QWORD *)(v9 + 8) = v78;
              }
            }
          }
        }
        return a5.n128_f32[0];
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((uint64_t *)v9 != a2)
            {
              v89 = (unint64_t)(v11 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = v9 + 8 * v92;
                  if (2 * v90 + 2 < v11 && *(float *)(v93 + 4) > *(float *)(v93 + 12))
                  {
                    v93 += 8;
                    v92 = 2 * v90 + 2;
                  }
                  v94 = (_DWORD *)(v9 + 8 * v90);
                  a5.n128_u32[0] = v94[1];
                  if (*(float *)(v93 + 4) <= a5.n128_f32[0])
                  {
                    v95 = *v94;
                    do
                    {
                      v96 = v94;
                      v94 = (_DWORD *)v93;
                      *v96 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v97 = 2 * v92;
                      v92 = (2 * v92) | 1;
                      v93 = v9 + 8 * v92;
                      v98 = v97 + 2;
                      if (v98 < v11 && *(float *)(v93 + 4) > *(float *)(v93 + 12))
                      {
                        v93 += 8;
                        v92 = v98;
                      }
                    }
                    while (*(float *)(v93 + 4) <= a5.n128_f32[0]);
                    *v94 = v95;
                    v94[1] = a5.n128_u32[0];
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v10 >> 3;
              do
              {
                v100 = 0;
                v101 = *(_QWORD *)v9;
                v102 = v9;
                do
                {
                  v103 = (_QWORD *)v102;
                  v102 += 8 * v100 + 8;
                  v104 = 2 * v100;
                  v100 = (2 * v100) | 1;
                  v105 = v104 + 2;
                  if (v105 < v99)
                  {
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (a5.n128_f32[0] > *(float *)(v102 + 12))
                    {
                      v102 += 8;
                      v100 = v105;
                    }
                  }
                  *v103 = *(_QWORD *)v102;
                }
                while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                if ((uint64_t *)v102 == --a2)
                {
                  *(_QWORD *)v102 = v101;
                }
                else
                {
                  *(_QWORD *)v102 = *a2;
                  *a2 = v101;
                  v106 = v102 - v9 + 8;
                  if (v106 >= 9)
                  {
                    v107 = (((unint64_t)v106 >> 3) - 2) >> 1;
                    v108 = v9 + 8 * v107;
                    a5.n128_u32[0] = *(_DWORD *)(v102 + 4);
                    if (*(float *)(v108 + 4) > a5.n128_f32[0])
                    {
                      v109 = *(_DWORD *)v102;
                      do
                      {
                        v110 = (_QWORD *)v102;
                        v102 = v108;
                        *v110 = *(_QWORD *)v108;
                        if (!v107)
                          break;
                        v107 = (v107 - 1) >> 1;
                        v108 = v9 + 8 * v107;
                      }
                      while (*(float *)(v108 + 4) > a5.n128_f32[0]);
                      *(_DWORD *)v102 = v109;
                      *(_DWORD *)(v102 + 4) = a5.n128_u32[0];
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return a5.n128_f32[0];
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = v9 + 8 * ((unint64_t)v11 >> 1);
          v14 = *((float *)a2 - 1);
          if ((unint64_t)v10 < 0x401)
          {
            v17 = *(float *)(v9 + 4);
            if (v17 <= *(float *)(v13 + 4))
            {
              if (v14 > v17)
              {
                v21 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(a2 - 1);
                *(a2 - 1) = v21;
                if (*(float *)(v9 + 4) > *(float *)(v13 + 4))
                {
                  v22 = *(_QWORD *)v13;
                  *(_QWORD *)v13 = *(_QWORD *)v9;
                  *(_QWORD *)v9 = v22;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_56;
                }
              }
              goto LABEL_31;
            }
            v18 = *(_QWORD *)v13;
            if (v14 <= v17)
            {
              *(_QWORD *)v13 = *(_QWORD *)v9;
              *(_QWORD *)v9 = v18;
              if (*((float *)a2 - 1) <= *((float *)&v18 + 1))
                goto LABEL_31;
              *(_QWORD *)v9 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v13 = *(a2 - 1);
            }
            *(a2 - 1) = v18;
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v15 = *(float *)(v13 + 4);
          if (v15 <= *(float *)(v9 + 4))
          {
            if (v14 > v15)
            {
              v19 = *(_QWORD *)v13;
              *(_QWORD *)v13 = *(a2 - 1);
              *(a2 - 1) = v19;
              if (*(float *)(v13 + 4) > *(float *)(v9 + 4))
              {
                v20 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v13;
                *(_QWORD *)v13 = v20;
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)v9;
            if (v14 <= v15)
            {
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v16;
              if (*((float *)a2 - 1) <= *((float *)&v16 + 1))
                goto LABEL_22;
              *(_QWORD *)v13 = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v9 = *(a2 - 1);
            }
            *(a2 - 1) = v16;
          }
LABEL_22:
          v23 = v9 + 8 * v12;
          v24 = v23 - 8;
          v25 = *(float *)(v23 - 4);
          v26 = *((float *)a2 - 3);
          if (v25 <= *(float *)(v9 + 12))
          {
            if (v26 > v25)
            {
              v28 = *(_QWORD *)v24;
              *(_QWORD *)v24 = *(a2 - 2);
              *(a2 - 2) = v28;
              if (*(float *)(v24 + 4) > *(float *)(v9 + 12))
              {
                v29 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
                *(_QWORD *)v24 = v29;
              }
            }
          }
          else
          {
            v27 = *(_QWORD *)(v9 + 8);
            if (v26 <= v25)
            {
              *(_QWORD *)(v9 + 8) = *(_QWORD *)v24;
              *(_QWORD *)v24 = v27;
              if (*((float *)a2 - 3) <= *((float *)&v27 + 1))
                goto LABEL_36;
              *(_QWORD *)v24 = *(a2 - 2);
            }
            else
            {
              *(_QWORD *)(v9 + 8) = *(a2 - 2);
            }
            *(a2 - 2) = v27;
          }
LABEL_36:
          v31 = v9 + 8 * v12;
          v32 = v31 + 8;
          v33 = *(float *)(v31 + 12);
          v34 = *((float *)a2 - 5);
          if (v33 <= *(float *)(v9 + 20))
          {
            if (v34 > v33)
            {
              v36 = *(_QWORD *)v32;
              *(_QWORD *)v32 = *(a2 - 3);
              *(a2 - 3) = v36;
              if (*(float *)(v32 + 4) > *(float *)(v9 + 20))
              {
                v37 = *(_QWORD *)(v9 + 16);
                *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
                *(_QWORD *)v32 = v37;
              }
            }
          }
          else
          {
            v35 = *(_QWORD *)(v9 + 16);
            if (v34 <= v33)
            {
              *(_QWORD *)(v9 + 16) = *(_QWORD *)v32;
              *(_QWORD *)v32 = v35;
              if (*((float *)a2 - 5) <= *((float *)&v35 + 1))
                goto LABEL_45;
              *(_QWORD *)v32 = *(a2 - 3);
            }
            else
            {
              *(_QWORD *)(v9 + 16) = *(a2 - 3);
            }
            *(a2 - 3) = v35;
          }
LABEL_45:
          v38 = *(float *)(v13 + 4);
          v39 = *(float *)(v24 + 4);
          v40 = *(float *)(v32 + 4);
          if (v38 > v39)
          {
            v41 = *(_QWORD *)v24;
            if (v40 > v38)
            {
              *(_QWORD *)v24 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v42 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v13;
              *(_QWORD *)v13 = v42;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_32;
              goto LABEL_56;
            }
            *(_QWORD *)v24 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v41;
            if (v40 > *((float *)&v41 + 1))
            {
              v46 = *(_QWORD *)v32;
              *(_QWORD *)v13 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v41 = v46;
            }
            goto LABEL_55;
          }
          v41 = *(_QWORD *)v13;
          if (v40 <= v38)
          {
LABEL_55:
            v47 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v41;
            *(_QWORD *)v13 = v47;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_56:
            a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
            v30 = *(_DWORD *)v9;
            if (*(float *)(v9 - 4) > a5.n128_f32[0])
              goto LABEL_57;
            if (*((float *)a2 - 1) >= a5.n128_f32[0])
            {
              v64 = v9 + 8;
              do
              {
                v9 = v64;
                if (v64 >= (unint64_t)a2)
                  break;
                v65 = *(float *)(v64 + 4);
                v64 += 8;
              }
              while (v65 >= a5.n128_f32[0]);
            }
            else
            {
              v62 = v9;
              do
              {
                v9 = v62 + 8;
                v63 = *(float *)(v62 + 12);
                v62 += 8;
              }
              while (v63 >= a5.n128_f32[0]);
            }
            v66 = a2;
            if (v9 < (unint64_t)a2)
            {
              v67 = a2;
              do
              {
                v66 = v67 - 1;
                v68 = *((float *)v67-- - 1);
              }
              while (v68 < a5.n128_f32[0]);
            }
            while (v9 < (unint64_t)v66)
            {
              v69 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *v66;
              *v66 = v69;
              do
              {
                v70 = *(float *)(v9 + 12);
                v9 += 8;
              }
              while (v70 >= a5.n128_f32[0]);
              do
                v71 = *((float *)v66-- - 1);
              while (v71 < a5.n128_f32[0]);
            }
            if ((float *)(v9 - 8) != a1)
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
            a4 = 0;
            *(_DWORD *)(v9 - 8) = v30;
            *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
            continue;
          }
          v43 = *(_QWORD *)v32;
          *(_QWORD *)v13 = *(_QWORD *)v32;
          *(_QWORD *)v32 = v41;
          if (v39 < *((float *)&v43 + 1))
          {
            v44 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v43;
            *(_QWORD *)v13 = v44;
            v45 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v44;
            *(_QWORD *)v13 = v45;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
            goto LABEL_56;
          }
          v61 = *(_QWORD *)v9;
          *(_QWORD *)v9 = v43;
          *(_QWORD *)v13 = v61;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_56;
LABEL_32:
          v30 = *(_DWORD *)v9;
          a5.n128_u32[0] = *(_DWORD *)(v9 + 4);
LABEL_57:
          v48 = 0;
          do
          {
            v49 = *(float *)(v9 + v48 + 12);
            v48 += 8;
          }
          while (v49 > a5.n128_f32[0]);
          v50 = v9 + v48;
          v51 = a2;
          if (v48 == 8)
          {
            v54 = a2;
            while (v50 < (unint64_t)v54)
            {
              v52 = v54 - 1;
              v55 = *((float *)v54-- - 1);
              if (v55 > a5.n128_f32[0])
                goto LABEL_65;
            }
            v52 = v54;
            v9 = v50;
          }
          else
          {
            do
            {
              v52 = v51 - 1;
              v53 = *((float *)v51-- - 1);
            }
            while (v53 <= a5.n128_f32[0]);
LABEL_65:
            v9 = v50;
            if (v50 < (unint64_t)v52)
            {
              v56 = (float *)v52;
              do
              {
                v57 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *(_QWORD *)v56;
                *(_QWORD *)v56 = v57;
                do
                {
                  v58 = *(float *)(v9 + 12);
                  v9 += 8;
                }
                while (v58 > a5.n128_f32[0]);
                do
                {
                  v59 = *(v56 - 1);
                  v56 -= 2;
                }
                while (v59 <= a5.n128_f32[0]);
              }
              while (v9 < (unint64_t)v56);
            }
          }
          if ((float *)(v9 - 8) != a1)
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 8);
          *(_DWORD *)(v9 - 8) = v30;
          *(_DWORD *)(v9 - 4) = a5.n128_u32[0];
          if (v50 < (unint64_t)v52)
            goto LABEL_76;
          v60 = sub_2399E2AFC(a1, (uint64_t *)(v9 - 8));
          if (!sub_2399E2AFC((float *)v9, a2))
          {
            if (v60)
              continue;
LABEL_76:
            sub_2399E20A0(a1, v9 - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(v9 - 8);
          if (v60)
            return a5.n128_f32[0];
          goto LABEL_1;
        }
        v79 = (uint64_t *)(v9 + 8);
        v81 = (uint64_t *)v9 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = (uint64_t *)v9;
            do
            {
              a5.n128_u32[0] = *((_DWORD *)v83 + 3);
              v85 = *((float *)v83 + 1);
              v83 = v79;
              if (a5.n128_f32[0] > v85)
              {
                v86 = *(_DWORD *)v79;
                v87 = v82;
                do
                {
                  *(_QWORD *)(v9 + v87 + 8) = *(_QWORD *)(v9 + v87);
                  if (!v87)
                  {
                    v84 = (_DWORD *)v9;
                    goto LABEL_123;
                  }
                  v88 = *(float *)(v9 + v87 - 4);
                  v87 -= 8;
                }
                while (v88 < a5.n128_f32[0]);
                v84 = (_DWORD *)(v9 + v87 + 8);
LABEL_123:
                *v84 = v86;
                v84[1] = a5.n128_u32[0];
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            a5.n128_f32[0] = a1[3];
            v112 = a1[1];
            a1 = (float *)v79;
            if (a5.n128_f32[0] > v112)
            {
              v113 = *(_DWORD *)v79;
              do
              {
                v114 = (float *)v79;
                v115 = *--v79;
                *(_QWORD *)v114 = v115;
              }
              while (*(v114 - 3) < a5.n128_f32[0]);
              *(_DWORD *)v79 = v113;
              *((_DWORD *)v79 + 1) = a5.n128_u32[0];
            }
            v79 = (uint64_t *)(a1 + 2);
          }
          while (a1 + 2 != (float *)a2);
        }
        return a5.n128_f32[0];
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 20);
  v10 = &a2[-3].n128_i8[8];
  v11 = &a2[-4].n128_u8[4];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (a2[-1].n128_f32[3] < *(float *)(v12 + 16))
        {
          v203 = *(_DWORD *)(v12 + 16);
          v175 = *(__n128 *)v12;
          v93 = *(__int128 *)((char *)&a2[-2] + 12);
          *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[3];
          *(_OWORD *)v12 = v93;
          a2[-1].n128_u32[3] = v203;
          *(__n128 *)((char *)a2 - 20) = v175;
        }
        return;
      case 3:
        v94 = (__n128 *)(v12 + 20);
        v95 = *(float *)(v12 + 36);
        v96 = a2[-1].n128_f32[3];
        if (v95 >= *(float *)(v12 + 16))
        {
          if (v96 < v95)
          {
            v144 = *v94;
            v145 = *(_DWORD *)(v12 + 36);
            v146 = a2[-1].n128_u32[3];
            *v94 = *v9;
            *(_DWORD *)(v12 + 36) = v146;
            a2[-1].n128_u32[3] = v145;
            *v9 = v144;
            if (*(float *)(v12 + 36) < *(float *)(v12 + 16))
            {
              v207 = *(_DWORD *)(v12 + 16);
              v181 = *(__n128 *)v12;
              *(__n128 *)v12 = *v94;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
              *v94 = v181;
              *(_DWORD *)(v12 + 36) = v207;
            }
          }
        }
        else
        {
          if (v96 >= v95)
          {
            v208 = *(_DWORD *)(v12 + 16);
            v183 = *(__n128 *)v12;
            *(__n128 *)v12 = *v94;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
            *v94 = v183;
            *(_DWORD *)(v12 + 36) = v208;
            if (a2[-1].n128_f32[3] >= *(float *)(v12 + 36))
              return;
            v98 = *v94;
            v151 = *(_DWORD *)(v12 + 36);
            v152 = a2[-1].n128_u32[3];
            *v94 = *v9;
            *(_DWORD *)(v12 + 36) = v152;
            a2[-1].n128_u32[3] = v151;
          }
          else
          {
            v204 = *(_DWORD *)(v12 + 16);
            v176 = *(__n128 *)v12;
            v97 = *v9;
            *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[3];
            *(__n128 *)v12 = v97;
            v98 = v176;
            a2[-1].n128_u32[3] = v204;
          }
          *v9 = v98;
        }
        return;
      case 4:
        sub_2399EBB60((__n128 *)v12, (__n128 *)(v12 + 20), (__n128 *)(v12 + 40), (__n128 *)((char *)a2 - 20), a5);
        return;
      case 5:
        v99 = (__n128 *)(v12 + 20);
        v100 = (__n128 *)(v12 + 40);
        v101 = (__n128 *)(v12 + 60);
        sub_2399EBB60((__n128 *)v12, (__n128 *)(v12 + 20), (__n128 *)(v12 + 40), (__n128 *)(v12 + 60), a5);
        if (a2[-1].n128_f32[3] < *(float *)(v12 + 76))
        {
          v102 = *v101;
          v103 = *(_DWORD *)(v12 + 76);
          v104 = a2[-1].n128_u32[3];
          *v101 = *(__n128 *)((char *)a2 - 20);
          *(_DWORD *)(v12 + 76) = v104;
          a2[-1].n128_u32[3] = v103;
          *(__n128 *)((char *)a2 - 20) = v102;
          if (*(float *)(v12 + 76) < *(float *)(v12 + 56))
          {
            v105 = *(_DWORD *)(v12 + 56);
            v106 = *v100;
            *v100 = *v101;
            *(_DWORD *)(v12 + 56) = *(_DWORD *)(v12 + 76);
            *v101 = v106;
            *(_DWORD *)(v12 + 76) = v105;
            if (*(float *)(v12 + 56) < *(float *)(v12 + 36))
            {
              v107 = *(_DWORD *)(v12 + 36);
              v108 = *v99;
              *v99 = *v100;
              *(_DWORD *)(v12 + 36) = *(_DWORD *)(v12 + 56);
              *v100 = v108;
              *(_DWORD *)(v12 + 56) = v107;
              if (*(float *)(v12 + 36) < *(float *)(v12 + 16))
              {
                v205 = *(_DWORD *)(v12 + 16);
                v177 = *(__n128 *)v12;
                *(__n128 *)v12 = *v99;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
                *v99 = v177;
                *(_DWORD *)(v12 + 36) = v205;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 479)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v119 = (unint64_t)(v14 - 2) >> 1;
              v120 = v119;
              do
              {
                if (v119 >= v120)
                {
                  v122 = (2 * v120) | 1;
                  v123 = v12 + 20 * v122;
                  if (2 * v120 + 2 < v14 && *(float *)(v123 + 16) < *(float *)(v123 + 36))
                  {
                    v123 += 20;
                    v122 = 2 * v120 + 2;
                  }
                  v124 = v12 + 20 * v120;
                  v125 = *(float *)(v124 + 16);
                  if (*(float *)(v123 + 16) >= v125)
                  {
                    v179 = *(_OWORD *)v124;
                    do
                    {
                      v126 = v124;
                      v124 = v123;
                      v127 = *(_OWORD *)v123;
                      *(_DWORD *)(v126 + 16) = *(_DWORD *)(v123 + 16);
                      *(_OWORD *)v126 = v127;
                      if (v119 < v122)
                        break;
                      v128 = 2 * v122;
                      v122 = (2 * v122) | 1;
                      v123 = v12 + 20 * v122;
                      v129 = v128 + 2;
                      if (v129 < v14 && *(float *)(v123 + 16) < *(float *)(v123 + 36))
                      {
                        v123 += 20;
                        v122 = v129;
                      }
                    }
                    while (*(float *)(v123 + 16) >= v125);
                    *(_OWORD *)v124 = v179;
                    *(float *)(v124 + 16) = v125;
                  }
                }
                v121 = v120-- <= 0;
              }
              while (!v121);
              v130 = v13 / 0x14uLL;
              do
              {
                v131 = 0;
                v206 = *(_DWORD *)(v12 + 16);
                v180 = *(__n128 *)v12;
                v132 = (__n128 *)v12;
                do
                {
                  v134 = v132;
                  v132 = (__n128 *)((char *)v132 + 20 * v131 + 20);
                  v135 = 2 * v131;
                  v131 = (2 * v131) | 1;
                  v136 = v135 + 2;
                  if (v136 < v130 && v132[1].n128_f32[0] < v132[2].n128_f32[1])
                  {
                    v132 = (__n128 *)((char *)v132 + 20);
                    v131 = v136;
                  }
                  v133 = *v132;
                  v134[1].n128_u32[0] = v132[1].n128_u32[0];
                  *v134 = v133;
                }
                while (v131 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 20);
                if (v132 == a2)
                {
                  v132[1].n128_u32[0] = v206;
                  *v132 = v180;
                }
                else
                {
                  v137 = *a2;
                  v132[1].n128_u32[0] = a2[1].n128_u32[0];
                  *v132 = v137;
                  a2[1].n128_u32[0] = v206;
                  *a2 = v180;
                  v138 = (uint64_t)v132[1].n128_i64 - v12 + 4;
                  if (v138 >= 21)
                  {
                    v139 = (v138 / 0x14uLL - 2) >> 1;
                    v140 = v12 + 20 * v139;
                    v141 = v132[1].n128_f32[0];
                    if (*(float *)(v140 + 16) < v141)
                    {
                      v155 = *v132;
                      do
                      {
                        v142 = v132;
                        v132 = (__n128 *)v140;
                        v143 = *(__n128 *)v140;
                        v142[1].n128_u32[0] = *(_DWORD *)(v140 + 16);
                        *v142 = v143;
                        if (!v139)
                          break;
                        v139 = (v139 - 1) >> 1;
                        v140 = v12 + 20 * v139;
                      }
                      while (*(float *)(v140 + 16) < v141);
                      *v132 = v155;
                      v132[1].n128_f32[0] = v141;
                    }
                  }
                }
                v121 = v130-- <= 2;
              }
              while (!v121);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 20 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f32[3];
          if ((unint64_t)v13 < 0xA01)
          {
            v20 = *(float *)(v12 + 16);
            if (v20 >= v16[1].n128_f32[0])
            {
              if (v17 < v20)
              {
                v188 = *(_DWORD *)(v12 + 16);
                v160 = *(__n128 *)v12;
                v24 = *v9;
                *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[3];
                *(__n128 *)v12 = v24;
                a5 = v160;
                a2[-1].n128_u32[3] = v188;
                *v9 = v160;
                if (*(float *)(v12 + 16) < v16[1].n128_f32[0])
                {
                  v189 = v16[1].n128_u32[0];
                  v161 = *v16;
                  v25 = *(__n128 *)v12;
                  v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                  *v16 = v25;
                  a5 = v161;
                  *(_DWORD *)(v12 + 16) = v189;
                  *(__n128 *)v12 = v161;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v192 = v16[1].n128_u32[0];
                v164 = *v16;
                v40 = *(__n128 *)v12;
                v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                *v16 = v40;
                a5 = v164;
                *(_DWORD *)(v12 + 16) = v192;
                *(__n128 *)v12 = v164;
                if (a2[-1].n128_f32[3] >= *(float *)(v12 + 16))
                  goto LABEL_31;
                v185 = *(_DWORD *)(v12 + 16);
                v157 = *(__n128 *)v12;
                v41 = *v9;
                *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[3];
                *(__n128 *)v12 = v41;
              }
              else
              {
                v185 = v16[1].n128_u32[0];
                v157 = *v16;
                v21 = *v9;
                v16[1].n128_u32[0] = a2[-1].n128_u32[3];
                *v16 = v21;
              }
              a5 = v157;
              a2[-1].n128_u32[3] = v185;
              *v9 = v157;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u32[0] = *(_DWORD *)(v12 + 16);
            if (*(float *)(v12 - 4) < a5.n128_f32[0])
              goto LABEL_56;
            a5 = *(__n128 *)v12;
            v154 = *(__n128 *)v12;
            a5.n128_u32[0] = *(_DWORD *)(v12 + 16);
            if (a5.n128_f32[0] >= a2[-1].n128_f32[3])
            {
              v83 = v12 + 20;
              do
              {
                v12 = v83;
                if (v83 >= (unint64_t)a2)
                  break;
                v84 = *(float *)(v83 + 16);
                v83 += 20;
              }
              while (a5.n128_f32[0] >= v84);
            }
            else
            {
              v81 = v12;
              do
              {
                v12 = v81 + 20;
                v82 = *(float *)(v81 + 36);
                v81 += 20;
              }
              while (a5.n128_f32[0] >= v82);
            }
            v85 = a2;
            if (v12 < (unint64_t)a2)
            {
              v86 = a2;
              do
              {
                v85 = (__n128 *)((char *)v86 - 20);
                v87 = v86[-1].n128_f32[3];
                v86 = (__n128 *)((char *)v86 - 20);
              }
              while (a5.n128_f32[0] < v87);
            }
            while (v12 < (unint64_t)v85)
            {
              v202 = *(_DWORD *)(v12 + 16);
              v174 = *(__n128 *)v12;
              v88 = *v85;
              *(_DWORD *)(v12 + 16) = v85[1].n128_u32[0];
              *(__n128 *)v12 = v88;
              v85[1].n128_u32[0] = v202;
              *v85 = v174;
              do
              {
                v89 = *(float *)(v12 + 36);
                v12 += 20;
              }
              while (a5.n128_f32[0] >= v89);
              do
              {
                v90 = v85[-1].n128_f32[3];
                v85 = (__n128 *)((char *)v85 - 20);
              }
              while (a5.n128_f32[0] < v90);
            }
            v91 = (__n128 *)(v12 - 20);
            if (v12 - 20 != a1)
            {
              v92 = *v91;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 4);
              *(__n128 *)a1 = v92;
            }
            a4 = 0;
            *v91 = v154;
            *(_DWORD *)(v12 - 4) = a5.n128_u32[0];
            continue;
          }
          v18 = v16[1].n128_f32[0];
          if (v18 >= *(float *)(v12 + 16))
          {
            if (v17 < v18)
            {
              v186 = v16[1].n128_u32[0];
              v158 = *v16;
              v22 = *v9;
              v16[1].n128_u32[0] = a2[-1].n128_u32[3];
              *v16 = v22;
              a2[-1].n128_u32[3] = v186;
              *v9 = v158;
              if (v16[1].n128_f32[0] < *(float *)(v12 + 16))
              {
                v187 = *(_DWORD *)(v12 + 16);
                v159 = *(__n128 *)v12;
                v23 = *v16;
                *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u32[0] = v187;
                *v16 = v159;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v190 = *(_DWORD *)(v12 + 16);
              v162 = *(__n128 *)v12;
              v26 = *v16;
              *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
              *(__n128 *)v12 = v26;
              v16[1].n128_u32[0] = v190;
              *v16 = v162;
              if (a2[-1].n128_f32[3] >= v16[1].n128_f32[0])
                goto LABEL_22;
              v184 = v16[1].n128_u32[0];
              v156 = *v16;
              v27 = *v9;
              v16[1].n128_u32[0] = a2[-1].n128_u32[3];
              *v16 = v27;
            }
            else
            {
              v184 = *(_DWORD *)(v12 + 16);
              v156 = *(__n128 *)v12;
              v19 = *v9;
              *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[3];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u32[3] = v184;
            *v9 = v156;
          }
LABEL_22:
          v28 = (__n128 *)(v12 + 20);
          v29 = v12 + 20 * v15;
          v30 = (__n128 *)(v29 - 20);
          v31 = *(float *)(v29 - 4);
          v32 = a2[-2].n128_f32[2];
          if (v31 >= *(float *)(v12 + 36))
          {
            if (v32 < v31)
            {
              v191 = *(_DWORD *)(v29 - 4);
              v163 = *v30;
              v36 = *(__n128 *)v10;
              *(_DWORD *)(v29 - 4) = a2[-2].n128_u32[2];
              *v30 = v36;
              a2[-2].n128_u32[2] = v191;
              *(__n128 *)v10 = v163;
              if (*(float *)(v29 - 4) < *(float *)(v12 + 36))
              {
                v37 = *v28;
                v38 = *(_DWORD *)(v12 + 36);
                v39 = v30[1].n128_i32[0];
                *v28 = *v30;
                *(_DWORD *)(v12 + 36) = v39;
                v30[1].n128_u32[0] = v38;
                *v30 = v37;
              }
            }
          }
          else
          {
            if (v32 >= v31)
            {
              v42 = *v28;
              v43 = *(_DWORD *)(v12 + 36);
              v44 = v30[1].n128_i32[0];
              *v28 = *v30;
              *(_DWORD *)(v12 + 36) = v44;
              v30[1].n128_u32[0] = v43;
              *v30 = v42;
              if (a2[-2].n128_f32[2] >= v30[1].n128_f32[0])
                goto LABEL_36;
              v193 = v30[1].n128_u32[0];
              v165 = *v30;
              v45 = *(__n128 *)v10;
              v30[1].n128_u32[0] = a2[-2].n128_u32[2];
              *v30 = v45;
              v33 = v165;
              a2[-2].n128_u32[2] = v193;
            }
            else
            {
              v33 = *v28;
              v34 = *(_DWORD *)(v12 + 36);
              v35 = a2[-2].n128_u32[2];
              *v28 = *(__n128 *)v10;
              *(_DWORD *)(v12 + 36) = v35;
              a2[-2].n128_u32[2] = v34;
            }
            *(__n128 *)v10 = v33;
          }
LABEL_36:
          v46 = (__n128 *)(v12 + 40);
          v47 = v12 + 20 * v15;
          v48 = (__n128 *)(v47 + 20);
          v49 = *(float *)(v47 + 36);
          v50 = a2[-3].n128_f32[1];
          if (v49 >= *(float *)(v12 + 56))
          {
            if (v50 < v49)
            {
              v194 = *(_DWORD *)(v47 + 36);
              v166 = *v48;
              v54 = *(__n128 *)v11;
              *(_DWORD *)(v47 + 36) = a2[-3].n128_u32[1];
              *v48 = v54;
              a2[-3].n128_u32[1] = v194;
              *(__n128 *)v11 = v166;
              if (*(float *)(v47 + 36) < *(float *)(v12 + 56))
              {
                v55 = *v46;
                v56 = *(_DWORD *)(v12 + 56);
                v57 = v48[1].n128_i32[0];
                *v46 = *v48;
                *(_DWORD *)(v12 + 56) = v57;
                v48[1].n128_u32[0] = v56;
                *v48 = v55;
              }
            }
          }
          else
          {
            if (v50 >= v49)
            {
              v58 = *v46;
              v59 = *(_DWORD *)(v12 + 56);
              v60 = v48[1].n128_i32[0];
              *v46 = *v48;
              *(_DWORD *)(v12 + 56) = v60;
              v48[1].n128_u32[0] = v59;
              *v48 = v58;
              if (a2[-3].n128_f32[1] >= v48[1].n128_f32[0])
                goto LABEL_45;
              v195 = v48[1].n128_u32[0];
              v167 = *v48;
              v61 = *(__n128 *)v11;
              v48[1].n128_u32[0] = a2[-3].n128_u32[1];
              *v48 = v61;
              v51 = v167;
              a2[-3].n128_u32[1] = v195;
            }
            else
            {
              v51 = *v46;
              v52 = *(_DWORD *)(v12 + 56);
              v53 = a2[-3].n128_u32[1];
              *v46 = *(__n128 *)v11;
              *(_DWORD *)(v12 + 56) = v53;
              a2[-3].n128_u32[1] = v52;
            }
            *(__n128 *)v11 = v51;
          }
LABEL_45:
          v62 = v16[1].n128_f32[0];
          v63 = v48[1].n128_f32[0];
          if (v62 >= v30[1].n128_f32[0])
          {
            if (v63 < v62)
            {
              v197 = v16[1].n128_u32[0];
              v169 = *v16;
              *v16 = *v48;
              v16[1].n128_u32[0] = v48[1].n128_u32[0];
              v48[1].n128_u32[0] = v197;
              *v48 = v169;
              if (v16[1].n128_f32[0] < v30[1].n128_f32[0])
              {
                v198 = v30[1].n128_u32[0];
                v170 = *v30;
                *v30 = *v16;
                v30[1].n128_u32[0] = v16[1].n128_u32[0];
                v16[1].n128_u32[0] = v198;
                *v16 = v170;
              }
            }
          }
          else
          {
            if (v63 >= v62)
            {
              v199 = v30[1].n128_u32[0];
              v171 = *v30;
              *v30 = *v16;
              v30[1].n128_u32[0] = v16[1].n128_u32[0];
              v16[1].n128_u32[0] = v199;
              *v16 = v171;
              if (v48[1].n128_f32[0] >= v16[1].n128_f32[0])
                goto LABEL_54;
              v196 = v16[1].n128_u32[0];
              v168 = *v16;
              *v16 = *v48;
              v16[1].n128_u32[0] = v48[1].n128_u32[0];
            }
            else
            {
              v196 = v30[1].n128_u32[0];
              v168 = *v30;
              *v30 = *v48;
              v30[1].n128_u32[0] = v48[1].n128_u32[0];
            }
            v48[1].n128_u32[0] = v196;
            *v48 = v168;
          }
LABEL_54:
          v200 = *(_DWORD *)(v12 + 16);
          v172 = *(__n128 *)v12;
          v64 = *v16;
          *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
          *(__n128 *)v12 = v64;
          a5 = v172;
          v16[1].n128_u32[0] = v200;
          *v16 = v172;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u32[0] = *(_DWORD *)(v12 + 16);
LABEL_56:
          v65 = 0;
          v153 = *(__n128 *)v12;
          do
          {
            v66 = *(float *)(v12 + v65 + 36);
            v65 += 20;
          }
          while (v66 < a5.n128_f32[0]);
          v67 = v12 + v65;
          v68 = a2;
          if (v65 == 20)
          {
            v71 = a2;
            while (v67 < (unint64_t)v71)
            {
              v69 = (__n128 *)((char *)v71 - 20);
              v72 = v71[-1].n128_f32[3];
              v71 = (__n128 *)((char *)v71 - 20);
              if (v72 < a5.n128_f32[0])
                goto LABEL_64;
            }
            v69 = v71;
            v12 = v67;
          }
          else
          {
            do
            {
              v69 = (__n128 *)((char *)v68 - 20);
              v70 = v68[-1].n128_f32[3];
              v68 = (__n128 *)((char *)v68 - 20);
            }
            while (v70 >= a5.n128_f32[0]);
LABEL_64:
            v12 = v67;
            if (v67 < (unint64_t)v69)
            {
              v73 = (unint64_t)v69;
              do
              {
                v201 = *(_DWORD *)(v12 + 16);
                v173 = *(__n128 *)v12;
                v74 = *(__n128 *)v73;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v73 + 16);
                *(__n128 *)v12 = v74;
                *(_DWORD *)(v73 + 16) = v201;
                *(__n128 *)v73 = v173;
                do
                {
                  v75 = *(float *)(v12 + 36);
                  v12 += 20;
                }
                while (v75 < a5.n128_f32[0]);
                do
                {
                  v76 = *(float *)(v73 - 4);
                  v73 -= 20;
                }
                while (v76 >= a5.n128_f32[0]);
              }
              while (v12 < v73);
            }
          }
          v77 = (__n128 *)(v12 - 20);
          if (v12 - 20 != a1)
          {
            v78 = *v77;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 4);
            *(__n128 *)a1 = v78;
          }
          *v77 = v153;
          *(_DWORD *)(v12 - 4) = a5.n128_u32[0];
          if (v67 < (unint64_t)v69)
            goto LABEL_75;
          v79 = sub_2399EB698(a1, (__n128 *)(v12 - 20), a5);
          if (!sub_2399EB698(v12, a2, v80))
          {
            if (v79)
              continue;
LABEL_75:
            sub_2399EA744(a1, v12 - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 20);
          if (v79)
            return;
          goto LABEL_1;
        }
        v109 = (__n128 *)(v12 + 20);
        v111 = (__n128 *)v12 == a2 || v109 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v111)
          {
            v112 = 0;
            v113 = (__n128 *)v12;
            do
            {
              v115 = v113[2].n128_f32[1];
              v116 = v113[1].n128_f32[0];
              v113 = v109;
              if (v115 < v116)
              {
                v178 = *v109;
                v117 = v112;
                do
                {
                  v118 = v12 + v117;
                  *(_OWORD *)(v118 + 20) = *(_OWORD *)(v12 + v117);
                  *(_DWORD *)(v118 + 36) = *(_DWORD *)(v12 + v117 + 16);
                  if (!v117)
                  {
                    v114 = v12;
                    goto LABEL_119;
                  }
                  v117 -= 20;
                }
                while (v115 < *(float *)(v118 - 4));
                v114 = v12 + v117 + 20;
LABEL_119:
                *(__n128 *)v114 = v178;
                *(float *)(v114 + 16) = v115;
              }
              v109 = (__n128 *)((char *)v113 + 20);
              v112 += 20;
            }
            while (&v113[1].n128_u8[4] != (unsigned __int8 *)a2);
          }
        }
        else if (!v111)
        {
          do
          {
            v147 = *(float *)(a1 + 36);
            v148 = *(float *)(a1 + 16);
            a1 = (uint64_t)v109;
            if (v147 < v148)
            {
              v182 = *v109;
              v149 = v109;
              do
              {
                *v149 = *(__n128 *)((char *)v149 - 20);
                v149[1].n128_u32[0] = v149[-1].n128_u32[3];
                v150 = v149[-2].n128_f32[2];
                v149 = (__n128 *)((char *)v149 - 20);
              }
              while (v147 < v150);
              *v149 = v182;
              v149[1].n128_f32[0] = v147;
            }
            v109 = (__n128 *)((char *)v109 + 20);
          }
          while ((__n128 *)(a1 + 20) != a2);
        }
        return;
    }
  }
}

  v257 = a2 - 2;
  v251 = a2 - 6;
  v253 = a2 - 4;
  v9 = (char *)a1;
  v263 = a2;
  while (2)
  {
    a1 = (unsigned int *)v9;
    v10 = (char *)a2 - v9;
    v11 = ((char *)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v103 = *(a2 - 2);
        v102 = a2 - 2;
        v104 = a3[2];
        v105 = a3[3]->i64[0];
        v106 = vsubq_f32(*(float32x4_t *)(v105 + 16 * v103), *v104);
        v268 = **a3;
        v107 = vmulq_f32(v106, v268);
        v107.i32[3] = 0;
        v283 = *a3[1];
        v297 = vsubq_f32(*(float32x4_t *)(v105 + 16 * *a1), *v104);
        v108 = vmulq_f32(v106, v283);
        v108.i32[3] = 0;
        v109 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v107, v107)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v108, v108)));
        v110 = vmulq_f32(v297, v268);
        v110.i32[3] = 0;
        v111 = vmulq_f32(v297, v283);
        v111.i32[3] = 0;
        if (v109 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v110, v110)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v111, v111))))
        {
          v112 = *(_QWORD *)a1;
          v113 = *v102;
          *((_WORD *)a1 + 2) = *((_WORD *)v102 + 2);
          *a1 = v113;
          *v102 = v112;
          *((_WORD *)v102 + 2) = WORD2(v112);
        }
        return;
      case 3:
        sub_2399EF510(a1, a1 + 2, v257, a3);
        return;
      case 4:
        sub_2399EFB78(a1, a1 + 2, a1 + 4, v257, a3);
        return;
      case 5:
        sub_2399EF1E8(a1, a1 + 2, a1 + 4, a1 + 6, v257, a3);
        return;
      default:
        if (v10 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v114 = a1 + 2;
              if (a1 + 2 != a2)
              {
                v115 = 0;
                v116 = *a3;
                v117 = a1;
                do
                {
                  v119 = v117[2];
                  v120 = *v117;
                  v117 = v114;
                  v121 = *a3[2];
                  v122 = a3[3]->i64[0];
                  v123 = vsubq_f32(*(float32x4_t *)(v122 + 16 * v119), v121);
                  v269 = *v116;
                  v284 = vsubq_f32(*(float32x4_t *)(v122 + 16 * v120), v121);
                  v124 = vmulq_f32(v123, *v116);
                  v124.i32[3] = 0;
                  v298 = *a3[1];
                  v125 = vmulq_f32(v123, v298);
                  v125.i32[3] = 0;
                  v126 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v124, v124)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v125, v125)));
                  v127 = vmulq_f32(v284, v269);
                  v127.i32[3] = 0;
                  v128 = vmulq_f32(v284, v298);
                  v128.i32[3] = 0;
                  if (v126 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v127, v127)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v128, v128))))
                  {
                    v129 = *(_QWORD *)v117;
                    v130 = *(_QWORD *)v117;
                    v131 = v115;
                    do
                    {
                      v132 = (char *)a1 + v131;
                      *((_DWORD *)v132 + 2) = *(unsigned int *)((char *)a1 + v131);
                      *((_WORD *)v132 + 6) = *(_WORD *)((char *)a1 + v131 + 4);
                      if (!v131)
                      {
                        v118 = (uint64_t)a1;
                        goto LABEL_61;
                      }
                      v133 = a3[2];
                      v134 = a3[3]->i64[0];
                      v135 = vsubq_f32(*(float32x4_t *)(v134 + 16 * v130), *v133);
                      v270 = **a3;
                      v136 = vmulq_f32(v135, v270);
                      v136.i32[3] = 0;
                      v285 = *a3[1];
                      v299 = vsubq_f32(*(float32x4_t *)(v134 + 16 * *((unsigned int *)v132 - 2)), *v133);
                      v137 = vmulq_f32(v135, v285);
                      v137.i32[3] = 0;
                      v138 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v136, v136)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v137, v137)));
                      v139 = vmulq_f32(v299, v270);
                      v139.i32[3] = 0;
                      v140 = vmulq_f32(v299, v285);
                      v140.i32[3] = 0;
                      v131 -= 8;
                    }
                    while (v138 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v139, v139)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v140, v140))));
                    v118 = (uint64_t)a1 + v131 + 8;
LABEL_61:
                    *(_DWORD *)v118 = v129;
                    *(_WORD *)(v118 + 4) = WORD2(v129);
                    v116 = *a3;
                  }
                  v114 = v117 + 2;
                  v115 += 8;
                }
                while (v117 + 2 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v226 = a1 + 2;
            if (a1 + 2 != a2)
            {
              v227 = *a3;
              do
              {
                v228 = a1[2];
                v229 = *a1;
                a1 = v226;
                v230 = *a3[2];
                v231 = a3[3]->i64[0];
                v232 = vsubq_f32(*(float32x4_t *)(v231 + 16 * v228), v230);
                v278 = *v227;
                v292 = vsubq_f32(*(float32x4_t *)(v231 + 16 * v229), v230);
                v233 = vmulq_f32(v232, *v227);
                v233.i32[3] = 0;
                v306 = *a3[1];
                v234 = vmulq_f32(v232, v306);
                v234.i32[3] = 0;
                v235 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v233, v233)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v234, v234)));
                v236 = vmulq_f32(v292, v278);
                v236.i32[3] = 0;
                v237 = vmulq_f32(v292, v306);
                v237.i32[3] = 0;
                if (v235 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v236, v236)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v237, v237))))
                {
                  v238 = *(_QWORD *)a1;
                  v239 = *(_QWORD *)a1;
                  v240 = a1;
                  do
                  {
                    v241 = v240;
                    v242 = *(v240 - 2);
                    v240 -= 2;
                    *v241 = v242;
                    *((_WORD *)v241 + 2) = *((_WORD *)v241 - 2);
                    v243 = a3[2];
                    v244 = a3[3]->i64[0];
                    v245 = vsubq_f32(*(float32x4_t *)(v244 + 16 * v239), *v243);
                    v279 = **a3;
                    v293 = vsubq_f32(*(float32x4_t *)(v244 + 16 * *(v241 - 4)), *v243);
                    v246 = vmulq_f32(v245, v279);
                    v246.i32[3] = 0;
                    v307 = *a3[1];
                    v247 = vmulq_f32(v245, v307);
                    v247.i32[3] = 0;
                    v248 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v246, v246)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v247, v247)));
                    v249 = vmulq_f32(v293, v279);
                    v249.i32[3] = 0;
                    v250 = vmulq_f32(v293, v307);
                    v250.i32[3] = 0;
                  }
                  while (v248 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v249, v249)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v250, v250))));
                  *v240 = v238;
                  *((_WORD *)v240 + 2) = WORD2(v238);
                  v227 = *a3;
                }
                v226 = a1 + 2;
              }
              while (a1 + 2 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v141 = (unint64_t)(v11 - 2) >> 1;
            v262 = v141;
            do
            {
              v142 = v141;
              if (v262 >= v141)
              {
                v143 = (2 * v141) | 1;
                v144 = &a1[2 * v143];
                v254 = v141;
                if (2 * v141 + 2 >= v11)
                {
                  v147 = a3[3]->i64[0];
                  v156 = *a3[2];
                  v155 = **a3;
                  v154 = *a3[1];
                }
                else
                {
                  v146 = a3[2];
                  v145 = a3[3];
                  v147 = v145->i64[0];
                  v148 = vsubq_f32(*(float32x4_t *)(v145->i64[0] + 16 * *v144), *v146);
                  v258 = *v146;
                  v271 = vsubq_f32(*(float32x4_t *)(v145->i64[0] + 16 * v144[2]), *v146);
                  v286 = **a3;
                  v149 = vmulq_f32(v148, v286);
                  v149.i32[3] = 0;
                  v300 = *a3[1];
                  v150 = vmulq_f32(v148, v300);
                  v150.i32[3] = 0;
                  v151 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v149, v149)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v150, v150)));
                  v152 = vmulq_f32(v271, v286);
                  v152.i32[3] = 0;
                  v153 = vmulq_f32(v271, v300);
                  v153.i32[3] = 0;
                  if (v151 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v152, v152)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v153, v153))))
                  {
                    v144 += 2;
                    v143 = 2 * v142 + 2;
                  }
                  v155 = v286;
                  v154 = v300;
                  v156 = v258;
                }
                v287 = v155;
                v301 = v154;
                v157 = &a1[2 * v142];
                v158 = vsubq_f32(*(float32x4_t *)(v147 + 16 * *v144), v156);
                v272 = vsubq_f32(*(float32x4_t *)(v147 + 16 * *v157), v156);
                v159 = vmulq_f32(v155, v158);
                v159.i32[3] = 0;
                v160 = vmulq_f32(v154, v158);
                v160.i32[3] = 0;
                v161 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v159, v159)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v160, v160)));
                v162 = vmulq_f32(v287, v272);
                v162.i32[3] = 0;
                v163 = vmulq_f32(v301, v272);
                v163.i32[3] = 0;
                if (v161 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v162, v162)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v163, v163))))
                {
                  v252 = *(_QWORD *)v157;
                  v259 = *(_QWORD *)v157;
                  do
                  {
                    v170 = v157;
                    v157 = v144;
                    v171 = *v144;
                    *((_WORD *)v170 + 2) = *((_WORD *)v144 + 2);
                    *v170 = v171;
                    if (v262 < v143)
                      break;
                    v172 = 2 * v143;
                    v173 = *a3[2];
                    v174 = **a3;
                    v143 = (2 * v143) | 1;
                    v144 = &a1[2 * v143];
                    v175 = v172 + 2;
                    v176 = a3[3]->i64[0];
                    v177 = *a3[1];
                    v288 = v174;
                    v302 = v177;
                    if (v172 + 2 < v11)
                    {
                      v178 = vsubq_f32(*(float32x4_t *)(v176 + 16 * *v144), v173);
                      v256 = vsubq_f32(*(float32x4_t *)(v176 + 16 * v144[2]), v173);
                      v179 = vmulq_f32(v174, v178);
                      v179.i32[3] = 0;
                      v180 = vmulq_f32(v177, v178);
                      v180.i32[3] = 0;
                      v274 = *a3[2];
                      v181 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v179, v179)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v180, v180)));
                      v182 = vmulq_f32(v288, v256);
                      v182.i32[3] = 0;
                      v183 = vmulq_f32(v302, v256);
                      v183.i32[3] = 0;
                      v184 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v182, v182)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v183, v183)));
                      v173 = v274;
                      v174 = v288;
                      v177 = v302;
                      if (v181 > v184)
                      {
                        v144 += 2;
                        v143 = v175;
                      }
                    }
                    v164 = vsubq_f32(*(float32x4_t *)(v176 + 16 * *v144), v173);
                    v273 = vsubq_f32(*(float32x4_t *)(v176 + 16 * v259), v173);
                    v165 = vmulq_f32(v174, v164);
                    v165.i32[3] = 0;
                    v166 = vmulq_f32(v177, v164);
                    v166.i32[3] = 0;
                    v167 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v165, v165)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v166, v166)));
                    v168 = vmulq_f32(v288, v273);
                    v168.i32[3] = 0;
                    v169 = vmulq_f32(v302, v273);
                    v169.i32[3] = 0;
                  }
                  while (v167 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v168, v168)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v169, v169))));
                  v142 = v254;
                  *v157 = v252;
                  *((_WORD *)v157 + 2) = WORD2(v252);
                  a2 = v263;
                }
              }
              v141 = v142 - 1;
            }
            while (v142);
            v185 = (unint64_t)v10 >> 3;
            do
            {
              v264 = a2;
              v187 = 0;
              v188 = *(_QWORD *)a1;
              v189 = a1;
              do
              {
                v191 = v189;
                v189 += 2 * v187 + 2;
                v192 = 2 * v187;
                v187 = (2 * v187) | 1;
                v193 = v192 + 2;
                if (v192 + 2 < v185)
                {
                  v194 = a3[2];
                  v195 = a3[3]->i64[0];
                  v196 = vsubq_f32(*(float32x4_t *)(v195 + 16 * *v189), *v194);
                  v275 = **a3;
                  v197 = vmulq_f32(v196, v275);
                  v197.i32[3] = 0;
                  v289 = *a3[1];
                  v303 = vsubq_f32(*(float32x4_t *)(v195 + 16 * v189[2]), *v194);
                  v198 = vmulq_f32(v196, v289);
                  v198.i32[3] = 0;
                  v199 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v197, v197)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v198, v198)));
                  v200 = vmulq_f32(v303, v275);
                  v200.i32[3] = 0;
                  v201 = vmulq_f32(v303, v289);
                  v201.i32[3] = 0;
                  if (v199 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v200, v200)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v201, v201))))
                  {
                    v189 += 2;
                    v187 = v193;
                  }
                }
                v190 = *v189;
                *((_WORD *)v191 + 2) = *((_WORD *)v189 + 2);
                *v191 = v190;
              }
              while (v187 <= (uint64_t)((unint64_t)(v185 - 2) >> 1));
              a2 = v264 - 2;
              if (v189 == v264 - 2)
              {
                *v189 = v188;
                *((_WORD *)v189 + 2) = WORD2(v188);
              }
              else
              {
                v202 = *a2;
                *((_WORD *)v189 + 2) = *((_WORD *)v264 - 2);
                *v189 = v202;
                *((_WORD *)v264 - 2) = WORD2(v188);
                *a2 = v188;
                v203 = (char *)v189 - (char *)a1 + 8;
                if (v203 >= 9)
                {
                  v204 = (((unint64_t)v203 >> 3) - 2) >> 1;
                  v205 = &a1[2 * v204];
                  v206 = a3[2];
                  v207 = a3[3]->i64[0];
                  v208 = vsubq_f32(*(float32x4_t *)(v207 + 16 * *v205), *v206);
                  v276 = **a3;
                  v209 = vmulq_f32(v208, v276);
                  v209.i32[3] = 0;
                  v290 = *a3[1];
                  v304 = vsubq_f32(*(float32x4_t *)(v207 + 16 * *v189), *v206);
                  v210 = vmulq_f32(v208, v290);
                  v210.i32[3] = 0;
                  v211 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v209, v209)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v210, v210)));
                  v212 = vmulq_f32(v304, v276);
                  v212.i32[3] = 0;
                  v213 = vmulq_f32(v304, v290);
                  v213.i32[3] = 0;
                  if (v211 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v212, v212)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v213, v213))))
                  {
                    v214 = *(_QWORD *)v189;
                    v215 = *(_QWORD *)v189;
                    do
                    {
                      v216 = v189;
                      v189 = v205;
                      v217 = *v205;
                      *((_WORD *)v216 + 2) = *((_WORD *)v205 + 2);
                      *v216 = v217;
                      if (!v204)
                        break;
                      v204 = (v204 - 1) >> 1;
                      v205 = &a1[2 * v204];
                      v218 = a3[2];
                      v219 = a3[3]->i64[0];
                      v220 = vsubq_f32(*(float32x4_t *)(v219 + 16 * *v205), *v218);
                      v277 = **a3;
                      v221 = vmulq_f32(v220, v277);
                      v221.i32[3] = 0;
                      v291 = *a3[1];
                      v305 = vsubq_f32(*(float32x4_t *)(v219 + 16 * v215), *v218);
                      v222 = vmulq_f32(v220, v291);
                      v222.i32[3] = 0;
                      v223 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v221, v221)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v222, v222)));
                      v224 = vmulq_f32(v305, v277);
                      v224.i32[3] = 0;
                      v225 = vmulq_f32(v305, v291);
                      v225.i32[3] = 0;
                    }
                    while (v223 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v224, v224)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v225, v225))));
                    *v189 = v214;
                    *((_WORD *)v189 + 2) = WORD2(v214);
                    a2 = v264 - 2;
                  }
                }
              }
            }
            while (v185-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          sub_2399EF510(v13, a1, v257, a3);
        }
        else
        {
          sub_2399EF510(a1, v13, v257, a3);
          v14 = 2 * v12;
          sub_2399EF510(a1 + 2, &a1[v14 - 2], v253, a3);
          sub_2399EF510(a1 + 4, &a1[v14 + 2], v251, a3);
          sub_2399EF510(&a1[v14 - 2], v13, &a1[v14 + 2], a3);
          v15 = *(_QWORD *)a1;
          v16 = *v13;
          *((_WORD *)a1 + 2) = *((_WORD *)v13 + 2);
          *a1 = v16;
          *v13 = v15;
          *((_WORD *)v13 + 2) = WORD2(v15);
        }
        --a4;
        v17 = a3[3]->i64[0];
        v18 = *a3[2];
        v19 = **a3;
        v20 = *a3[1];
        v265 = v18;
        v280 = v20;
        v294 = v19;
        if ((a5 & 1) == 0)
        {
          v21 = vsubq_f32(*(float32x4_t *)(v17 + 16 * *(a1 - 2)), v18);
          v255 = vsubq_f32(*(float32x4_t *)(v17 + 16 * *a1), v18);
          v22 = vmulq_f32(v21, v19);
          v22.i32[3] = 0;
          v23 = vmulq_f32(v21, v20);
          v23.i32[3] = 0;
          v24 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23)));
          v25 = vmulq_f32(v255, v294);
          v25.i32[3] = 0;
          v26 = vmulq_f32(v255, v280);
          v26.i32[3] = 0;
          v27 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)));
          v20 = v280;
          v19 = v294;
          v18 = v265;
          if (v24 <= v27)
          {
            v66 = *(_QWORD *)a1;
            v67 = vsubq_f32(*(float32x4_t *)(v17 + 16 * *(_QWORD *)a1), v265);
            v261 = vsubq_f32(*(float32x4_t *)(v17 + 16 * *v257), v265);
            v68 = vmulq_f32(v294, v67);
            v68.i32[3] = 0;
            v69 = vmulq_f32(v280, v67);
            v69.i32[3] = 0;
            v70 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v68, v68)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69)));
            v71 = vmulq_f32(v294, v261);
            v71.i32[3] = 0;
            v72 = vmulq_f32(v280, v261);
            v72.i32[3] = 0;
            if (v70 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v71, v71)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v72, v72))))
            {
              v77 = a1 + 2;
              do
              {
                v9 = (char *)v77;
                if (v77 >= a2)
                  break;
                v77 += 2;
                v78 = vsubq_f32(*(float32x4_t *)(v17 + 16 * *(unsigned int *)v9), v265);
                v79 = vmulq_f32(v294, v78);
                v79.i32[3] = 0;
                v80 = vmulq_f32(v280, v78);
                v80.i32[3] = 0;
              }
              while (v70 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v79, v79)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v80, v80))));
            }
            else
            {
              v9 = (char *)a1;
              do
              {
                v73 = *((_DWORD *)v9 + 2);
                v9 += 8;
                v74 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v73), v265);
                v75 = vmulq_f32(v294, v74);
                v75.i32[3] = 0;
                v76 = vmulq_f32(v280, v74);
                v76.i32[3] = 0;
              }
              while (v70 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v75, v75)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v76, v76))));
            }
            v81 = a2;
            if (v9 < (char *)a2)
            {
              v81 = a2;
              do
              {
                v82 = *(v81 - 2);
                v81 -= 2;
                v83 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v82), v265);
                v84 = vmulq_f32(v294, v83);
                v84.i32[3] = 0;
                v85 = vmulq_f32(v280, v83);
                v85.i32[3] = 0;
              }
              while (v70 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v84, v84)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v85, v85))));
            }
            while (v9 < (char *)v81)
            {
              v86 = *(_QWORD *)v9;
              v87 = *v81;
              *((_WORD *)v9 + 2) = *((_WORD *)v81 + 2);
              *(_DWORD *)v9 = v87;
              *v81 = v86;
              *((_WORD *)v81 + 2) = WORD2(v86);
              v88 = a3[3]->i64[0];
              v296 = *a3[2];
              v89 = vsubq_f32(*(float32x4_t *)(v88 + 16 * v66), v296);
              v282 = **a3;
              v90 = vmulq_f32(v89, v282);
              v90.i32[3] = 0;
              v267 = *a3[1];
              v91 = vmulq_f32(v89, v267);
              v91.i32[3] = 0;
              v92 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v90, v90)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v91, v91)));
              do
              {
                v93 = *((_DWORD *)v9 + 2);
                v9 += 8;
                v94 = vsubq_f32(*(float32x4_t *)(v88 + 16 * v93), v296);
                v95 = vmulq_f32(v282, v94);
                v95.i32[3] = 0;
                v96 = vmulq_f32(v267, v94);
                v96.i32[3] = 0;
              }
              while (v92 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v95, v95)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v96, v96))));
              do
              {
                v97 = *(v81 - 2);
                v81 -= 2;
                v98 = vsubq_f32(*(float32x4_t *)(v88 + 16 * v97), v296);
                v99 = vmulq_f32(v282, v98);
                v99.i32[3] = 0;
                v100 = vmulq_f32(v267, v98);
                v100.i32[3] = 0;
              }
              while (v92 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v99, v99)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v100, v100))));
            }
            if (v9 - 8 != (char *)a1)
            {
              v101 = *((_DWORD *)v9 - 2);
              *((_WORD *)a1 + 2) = *((_WORD *)v9 - 2);
              *a1 = v101;
            }
            a5 = 0;
            *((_DWORD *)v9 - 2) = v66;
            *((_WORD *)v9 - 2) = WORD2(v66);
            continue;
          }
        }
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD *)a1;
        v30 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v29), v18);
        v31 = vmulq_f32(v30, v19);
        v31.i32[3] = 0;
        v32 = vmulq_f32(v30, v20);
        v32.i32[3] = 0;
        v33 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)));
        v34 = 0;
        do
        {
          v35 = vsubq_f32(*(float32x4_t *)(v17 + 16 * a1[v34 + 2]), v265);
          v36 = vmulq_f32(v294, v35);
          v36.i32[3] = 0;
          v37 = vmulq_f32(v280, v35);
          v37.i32[3] = 0;
          v34 += 2;
        }
        while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37))) > v33);
        v38 = &a1[v34];
        v39 = v263;
        if (v34 == 2)
        {
          v39 = v263;
          do
          {
            if (v38 >= v39)
              break;
            v44 = *(v39 - 2);
            v39 -= 2;
            v45 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v44), v265);
            v46 = vmulq_f32(v294, v45);
            v46.i32[3] = 0;
            v47 = vmulq_f32(v280, v45);
            v47.i32[3] = 0;
          }
          while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47))) <= v33);
        }
        else
        {
          do
          {
            v40 = *(v39 - 2);
            v39 -= 2;
            v41 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v40), v265);
            v42 = vmulq_f32(v294, v41);
            v42.i32[3] = 0;
            v43 = vmulq_f32(v280, v41);
            v43.i32[3] = 0;
          }
          while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43))) <= v33);
        }
        v9 = (char *)&a1[v34];
        if (v38 < v39)
        {
          v48 = (unint64_t)v39;
          do
          {
            v49 = *(_QWORD *)v9;
            v50 = *(_DWORD *)v48;
            *((_WORD *)v9 + 2) = *(_WORD *)(v48 + 4);
            *(_DWORD *)v9 = v50;
            *(_DWORD *)v48 = v49;
            *(_WORD *)(v48 + 4) = WORD2(v49);
            v51 = a3[3]->i64[0];
            v295 = *a3[2];
            v52 = vsubq_f32(*(float32x4_t *)(v51 + 16 * v29), v295);
            v266 = *a3[1];
            v281 = **a3;
            v53 = vmulq_f32(v52, v281);
            v53.i32[3] = 0;
            v54 = vmulq_f32(v52, v266);
            v54.i32[3] = 0;
            v55 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v53, v53)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v54, v54)));
            do
            {
              v56 = *((_DWORD *)v9 + 2);
              v9 += 8;
              v57 = vsubq_f32(*(float32x4_t *)(v51 + 16 * v56), v295);
              v58 = vmulq_f32(v281, v57);
              v58.i32[3] = 0;
              v59 = vmulq_f32(v266, v57);
              v59.i32[3] = 0;
            }
            while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v58, v58)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59))) > v55);
            do
            {
              v60 = *(_DWORD *)(v48 - 8);
              v48 -= 8;
              v61 = vsubq_f32(*(float32x4_t *)(v51 + 16 * v60), v295);
              v62 = vmulq_f32(v281, v61);
              v62.i32[3] = 0;
              v63 = vmulq_f32(v266, v61);
              v63.i32[3] = 0;
            }
            while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63))) <= v55);
          }
          while ((unint64_t)v9 < v48);
        }
        if (v9 - 8 != (char *)a1)
        {
          v64 = *((_DWORD *)v9 - 2);
          *((_WORD *)a1 + 2) = *((_WORD *)v9 - 2);
          *a1 = v64;
        }
        *((_DWORD *)v9 - 2) = v28;
        *((_WORD *)v9 - 2) = WORD2(v28);
        a2 = v263;
        if (v38 < v39)
        {
LABEL_29:
          sub_2399EDFE8(a1, v9 - 8, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v65 = sub_2399EF804(a1, (unsigned int *)v9 - 2, a3);
        if (!sub_2399EF804((unsigned int *)v9, v263, a3))
        {
          if (v65)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int *)(v9 - 8);
        if (!v65)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < *(_QWORD *)v12)
          goto LABEL_98;
        return result;
      case 3:
        v91 = (__n128 *)(v12 + 32);
        v92 = *(_QWORD *)(v12 + 32);
        v93 = v9->n128_u64[0];
        if (v92 < *(_QWORD *)v12)
        {
          if (v93 >= v92)
          {
            v181 = *(__n128 *)v12;
            v215 = *(_OWORD *)(v12 + 16);
            v147 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v91;
            *(_OWORD *)(v12 + 16) = v147;
            result = v181;
            *v91 = v181;
            *(_OWORD *)(v12 + 48) = v215;
            if (v9->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v91;
            v95 = *(__n128 *)(v12 + 48);
            v148 = a2[-1];
            *v91 = *v9;
            *(__n128 *)(v12 + 48) = v148;
          }
          else
          {
LABEL_98:
            v174 = *(__n128 *)v12;
            v207 = *(__n128 *)(v12 + 16);
            v94 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v94;
            result = v174;
            v95 = v207;
          }
          *v9 = result;
          a2[-1] = v95;
          return result;
        }
        if (v93 < v92)
        {
          result = *v91;
          v211 = *(__n128 *)(v12 + 48);
          v125 = a2[-1];
          *v91 = *v9;
          *(__n128 *)(v12 + 48) = v125;
          *v9 = result;
          a2[-1] = v211;
          goto LABEL_180;
        }
        return result;
      case 4:
        v91 = (__n128 *)(v12 + 32);
        v96 = *(_QWORD *)(v12 + 32);
        v97 = (__n128 *)(v12 + 64);
        v98 = *(_QWORD *)(v12 + 64);
        if (v96 >= *(_QWORD *)v12)
        {
          if (v98 < v96)
          {
            v126 = *v91;
            result = *(__n128 *)(v12 + 48);
            v127 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v127;
            *v97 = v126;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v178 = *(__n128 *)v12;
              v212 = *(_OWORD *)(v12 + 16);
              v128 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v91;
              *(_OWORD *)(v12 + 16) = v128;
              result = v178;
              *v91 = v178;
              *(_OWORD *)(v12 + 48) = v212;
            }
          }
        }
        else if (v98 >= v96)
        {
          v182 = *(__n128 *)v12;
          v216 = *(_OWORD *)(v12 + 16);
          v149 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v91;
          *(_OWORD *)(v12 + 16) = v149;
          result = v182;
          *v91 = v182;
          *(_OWORD *)(v12 + 48) = v216;
          if (v98 < *(_QWORD *)(v12 + 32))
          {
            v150 = *v91;
            result = *(__n128 *)(v12 + 48);
            v151 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v151;
            *v97 = v150;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v175 = *(__n128 *)v12;
          v208 = *(_OWORD *)(v12 + 16);
          v99 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v97;
          *(_OWORD *)(v12 + 16) = v99;
          result = v175;
          *v97 = v175;
          *(_OWORD *)(v12 + 80) = v208;
        }
        if (v9->n128_u64[0] < v97->n128_u64[0])
        {
          result = *v97;
          v217 = *(__n128 *)(v12 + 80);
          v152 = a2[-1];
          *v97 = *v9;
          *(__n128 *)(v12 + 80) = v152;
          *v9 = result;
          a2[-1] = v217;
          if (v97->n128_u64[0] < v91->n128_u64[0])
          {
            v153 = *v91;
            result = *(__n128 *)(v12 + 48);
            v154 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v154;
            *v97 = v153;
            *(__n128 *)(v12 + 80) = result;
LABEL_180:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v183 = *(__n128 *)v12;
              v218 = *(__n128 *)(v12 + 16);
              v155 = v91[1];
              *(__n128 *)v12 = *v91;
              *(__n128 *)(v12 + 16) = v155;
              result = v183;
              *v91 = v183;
              v91[1] = v218;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_239C7F310((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 767)
        {
          v100 = (__n128 *)(v12 + 32);
          v102 = (__n128 *)v12 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v12;
              do
              {
                v106 = v100;
                v107 = *(_QWORD *)(v104 + 32);
                if (v107 < *(_QWORD *)v104)
                {
                  v176 = *(__n128 *)(v104 + 40);
                  v209 = *(_QWORD *)(v104 + 56);
                  v108 = v103;
                  do
                  {
                    v109 = v12 + v108;
                    v110 = *(_OWORD *)(v12 + v108 + 16);
                    *(_OWORD *)(v109 + 32) = *(_OWORD *)(v12 + v108);
                    *(_OWORD *)(v109 + 48) = v110;
                    if (!v108)
                    {
                      v105 = v12;
                      goto LABEL_114;
                    }
                    v108 -= 32;
                  }
                  while (v107 < *(_QWORD *)(v109 - 32));
                  v105 = v12 + v108 + 32;
LABEL_114:
                  *(_QWORD *)v105 = v107;
                  result = v176;
                  *(_QWORD *)(v105 + 24) = v209;
                  *(__n128 *)(v105 + 8) = v176;
                }
                v100 = v106 + 2;
                v103 += 32;
                v104 = (unint64_t)v106;
              }
              while (&v106[2] != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v129 = (uint64_t)v100;
              v130 = *(_QWORD *)(a1 + 32);
              if (v130 < *(_QWORD *)a1)
              {
                v179 = *(__n128 *)(a1 + 40);
                v213 = *(_QWORD *)(a1 + 56);
                do
                {
                  v131 = v100[-1];
                  *v100 = v100[-2];
                  v100[1] = v131;
                  v132 = v100[-4].n128_u64[0];
                  v100 -= 2;
                }
                while (v130 < v132);
                v100->n128_u64[0] = v130;
                result = v179;
                v100[1].n128_u64[1] = v213;
                *(__n128 *)((char *)v100 + 8) = v179;
              }
              v100 = (__n128 *)(v129 + 32);
              a1 = v129;
            }
            while ((__n128 *)(v129 + 32) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((__n128 *)v12 != a2)
          {
            v111 = (unint64_t)(v14 - 2) >> 1;
            v112 = v111;
            do
            {
              if (v111 >= v112)
              {
                v114 = (2 * v112) | 1;
                v115 = v12 + 32 * v114;
                if (2 * v112 + 2 >= v14)
                {
                  v116 = *(_QWORD *)v115;
                }
                else
                {
                  v116 = *(_QWORD *)(v115 + 32);
                  v117 = *(_QWORD *)v115 >= v116;
                  if (*(_QWORD *)v115 > v116)
                    v116 = *(_QWORD *)v115;
                  if (!v117)
                  {
                    v115 += 32;
                    v114 = 2 * v112 + 2;
                  }
                }
                v118 = v12 + 32 * v112;
                v119 = *(_QWORD *)v118;
                if (v116 >= *(_QWORD *)v118)
                {
                  v210 = *(_QWORD *)(v118 + 24);
                  v177 = *(_OWORD *)(v118 + 8);
                  while (1)
                  {
                    v122 = (_OWORD *)v118;
                    v118 = v115;
                    v123 = *(_OWORD *)(v115 + 16);
                    *v122 = *(_OWORD *)v115;
                    v122[1] = v123;
                    if (v111 < v114)
                      break;
                    v124 = (2 * v114) | 1;
                    v115 = v12 + 32 * v124;
                    v114 = 2 * v114 + 2;
                    if (v114 < v14)
                    {
                      v120 = *(_QWORD *)v115;
                      v121 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 <= v121)
                        v120 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 >= v121)
                        v114 = v124;
                      else
                        v115 += 32;
                      if (v120 < v119)
                        break;
                    }
                    else
                    {
                      v114 = v124;
                      if (*(_QWORD *)v115 < v119)
                        break;
                    }
                  }
                  *(_QWORD *)v118 = v119;
                  *(_QWORD *)(v118 + 24) = v210;
                  *(_OWORD *)(v118 + 8) = v177;
                }
              }
              v113 = v112-- <= 0;
            }
            while (!v113);
            v133 = (unint64_t)v13 >> 5;
            do
            {
              v134 = 0;
              v180 = *(__n128 *)v12;
              v214 = *(__n128 *)(v12 + 16);
              v135 = (_OWORD *)v12;
              do
              {
                v137 = (uint64_t)&v135[2 * v134 + 2];
                v138 = (2 * v134) | 1;
                v139 = 2 * v134 + 2;
                if (v139 < v133 && *(_QWORD *)v137 < *(_QWORD *)(v137 + 32))
                {
                  v137 += 32;
                  v138 = v139;
                }
                v136 = *(_OWORD *)(v137 + 16);
                *v135 = *(_OWORD *)v137;
                v135[1] = v136;
                v135 = (_OWORD *)v137;
                v134 = v138;
              }
              while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v137 == a2)
              {
                result = v180;
                *(__n128 *)v137 = v180;
                *(__n128 *)(v137 + 16) = v214;
              }
              else
              {
                v140 = a2[1];
                *(__n128 *)v137 = *a2;
                *(__n128 *)(v137 + 16) = v140;
                result = v180;
                *a2 = v180;
                a2[1] = v214;
                v141 = v137 - v12 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = (_OWORD *)(v12 + 32 * v142);
                  v144 = *(_QWORD *)v137;
                  if (*(_QWORD *)v143 < *(_QWORD *)v137)
                  {
                    v224 = *(_QWORD *)(v137 + 24);
                    v221 = *(__n128 *)(v137 + 8);
                    do
                    {
                      v145 = (_OWORD *)v137;
                      v137 = (uint64_t)v143;
                      v146 = v143[1];
                      *v145 = *v143;
                      v145[1] = v146;
                      if (!v142)
                        break;
                      v142 = (v142 - 1) >> 1;
                      v143 = (_OWORD *)(v12 + 32 * v142);
                    }
                    while (*(_QWORD *)v143 < v144);
                    *(_QWORD *)v137 = v144;
                    result = v221;
                    *(_QWORD *)(v137 + 24) = v224;
                    *(__n128 *)(v137 + 8) = v221;
                  }
                }
              }
              v113 = v133-- <= 2;
            }
            while (!v113);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = v12 + 32 * ((unint64_t)v14 >> 1);
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 > 0x1000)
        {
          v18 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v158 = *(__n128 *)v16;
              v186 = *(__n128 *)(v16 + 16);
              v22 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v22;
              *v9 = v158;
              a2[-1] = v186;
              if (*(_QWORD *)v16 < *(_QWORD *)v12)
              {
                v159 = *(__n128 *)v12;
                v187 = *(_OWORD *)(v12 + 16);
                v23 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)(v12 + 16) = v23;
                *(__n128 *)v16 = v159;
                *(_OWORD *)(v16 + 16) = v187;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v156 = *(__n128 *)v12;
              v184 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
              goto LABEL_20;
            }
            v162 = *(__n128 *)v12;
            v190 = *(_OWORD *)(v12 + 16);
            v26 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v26;
            *(__n128 *)v16 = v162;
            *(_OWORD *)(v16 + 16) = v190;
            if (v9->n128_u64[0] < *(_QWORD *)v16)
            {
              v156 = *(__n128 *)v16;
              v184 = *(__n128 *)(v16 + 16);
              v27 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v27;
LABEL_20:
              *v9 = v156;
              a2[-1] = v184;
            }
          }
          v28 = (__n128 *)(v12 + 32);
          v29 = v12 + 32 * v15;
          v32 = *(_QWORD *)(v29 - 32);
          v30 = (__n128 *)(v29 - 32);
          v31 = v32;
          v33 = v10->n128_u64[0];
          if (v32 >= *(_QWORD *)(v12 + 32))
          {
            if (v33 < v31)
            {
              v163 = *v30;
              v191 = v30[1];
              v37 = a2[-3];
              *v30 = *v10;
              v30[1] = v37;
              *v10 = v163;
              a2[-3] = v191;
              if (v30->n128_u64[0] < v28->n128_u64[0])
              {
                v38 = *v28;
                v192 = *(__n128 *)(v12 + 48);
                v39 = v30[1];
                *v28 = *v30;
                *(__n128 *)(v12 + 48) = v39;
                *v30 = v38;
                v30[1] = v192;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              v35 = *(__n128 *)(v12 + 48);
              v36 = a2[-3];
              *v28 = *v10;
              *(__n128 *)(v12 + 48) = v36;
              goto LABEL_32;
            }
            v42 = *v28;
            v194 = *(__n128 *)(v12 + 48);
            v43 = v30[1];
            *v28 = *v30;
            *(__n128 *)(v12 + 48) = v43;
            *v30 = v42;
            v30[1] = v194;
            if (v10->n128_u64[0] < v30->n128_u64[0])
            {
              v165 = *v30;
              v195 = v30[1];
              v44 = a2[-3];
              *v30 = *v10;
              v30[1] = v44;
              v34 = v165;
              v35 = v195;
LABEL_32:
              *v10 = v34;
              a2[-3] = v35;
            }
          }
          v45 = (__n128 *)(v12 + 64);
          v46 = v12 + 32 * v15;
          v49 = *(_QWORD *)(v46 + 32);
          v47 = (__n128 *)(v46 + 32);
          v48 = v49;
          v50 = v11->n128_u64[0];
          if (v49 >= *(_QWORD *)(v12 + 64))
          {
            if (v50 < v48)
            {
              v166 = *v47;
              v196 = v47[1];
              v54 = a2[-5];
              *v47 = *v11;
              v47[1] = v54;
              *v11 = v166;
              a2[-5] = v196;
              if (v47->n128_u64[0] < v45->n128_u64[0])
              {
                v55 = *v45;
                v197 = *(__n128 *)(v12 + 80);
                v56 = v47[1];
                *v45 = *v47;
                *(__n128 *)(v12 + 80) = v56;
                *v47 = v55;
                v47[1] = v197;
              }
            }
          }
          else
          {
            if (v50 < v48)
            {
              v51 = *v45;
              v52 = *(__n128 *)(v12 + 80);
              v53 = a2[-5];
              *v45 = *v11;
              *(__n128 *)(v12 + 80) = v53;
              goto LABEL_41;
            }
            v57 = *v45;
            v198 = *(__n128 *)(v12 + 80);
            v58 = v47[1];
            *v45 = *v47;
            *(__n128 *)(v12 + 80) = v58;
            *v47 = v57;
            v47[1] = v198;
            if (v11->n128_u64[0] < v47->n128_u64[0])
            {
              v167 = *v47;
              v199 = v47[1];
              v59 = a2[-5];
              *v47 = *v11;
              v47[1] = v59;
              v51 = v167;
              v52 = v199;
LABEL_41:
              *v11 = v51;
              a2[-5] = v52;
            }
          }
          v60 = *(_QWORD *)v16;
          v61 = v47->n128_u64[0];
          if (*(_QWORD *)v16 >= v30->n128_u64[0])
          {
            if (v61 < v60)
            {
              v169 = *(__n128 *)v16;
              v201 = *(__n128 *)(v16 + 16);
              v63 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v63;
              *v47 = v169;
              v47[1] = v201;
              if (*(_QWORD *)v16 < v30->n128_u64[0])
              {
                v170 = *v30;
                v202 = v30[1];
                v64 = *(__n128 *)(v16 + 16);
                *v30 = *(__n128 *)v16;
                v30[1] = v64;
                *(__n128 *)v16 = v170;
                *(__n128 *)(v16 + 16) = v202;
              }
            }
          }
          else
          {
            if (v61 < v60)
            {
              v168 = *v30;
              v200 = v30[1];
              v62 = v47[1];
              *v30 = *v47;
              v30[1] = v62;
              goto LABEL_50;
            }
            v171 = *v30;
            v203 = v30[1];
            v65 = *(__n128 *)(v16 + 16);
            *v30 = *(__n128 *)v16;
            v30[1] = v65;
            *(__n128 *)v16 = v171;
            *(__n128 *)(v16 + 16) = v203;
            if (v47->n128_u64[0] < *(_QWORD *)v16)
            {
              v168 = *(__n128 *)v16;
              v200 = *(__n128 *)(v16 + 16);
              v66 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v66;
LABEL_50:
              *v47 = v168;
              v47[1] = v200;
            }
          }
          v172 = *(__n128 *)v12;
          v204 = *(_OWORD *)(v12 + 16);
          v67 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v67;
          *(__n128 *)v16 = v172;
          *(_OWORD *)(v16 + 16) = v204;
          goto LABEL_52;
        }
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= *(_QWORD *)v16)
        {
          if (v17 < v20)
          {
            v160 = *(__n128 *)v12;
            v188 = *(__n128 *)(v12 + 16);
            v24 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v24;
            *v9 = v160;
            a2[-1] = v188;
            if (*(_QWORD *)v12 < *(_QWORD *)v16)
            {
              v161 = *(__n128 *)v16;
              v189 = *(_OWORD *)(v16 + 16);
              v25 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v25;
              *(__n128 *)v12 = v161;
              *(_OWORD *)(v12 + 16) = v189;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            v164 = *(__n128 *)v16;
            v193 = *(_OWORD *)(v16 + 16);
            v40 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v12;
            *(_OWORD *)(v16 + 16) = v40;
            *(__n128 *)v12 = v164;
            *(_OWORD *)(v12 + 16) = v193;
            if (v9->n128_u64[0] >= *(_QWORD *)v12)
              goto LABEL_52;
            v157 = *(__n128 *)v12;
            v185 = *(__n128 *)(v12 + 16);
            v41 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v41;
          }
          else
          {
            v157 = *(__n128 *)v16;
            v185 = *(__n128 *)(v16 + 16);
            v21 = a2[-1];
            *(__n128 *)v16 = *v9;
            *(__n128 *)(v16 + 16) = v21;
          }
          *v9 = v157;
          a2[-1] = v185;
        }
LABEL_52:
        --a3;
        v68 = *(_QWORD *)v12;
        if ((a4 & 1) == 0 && *(_QWORD *)(v12 - 32) >= v68)
        {
          v223 = *(_QWORD *)(v12 + 24);
          v220 = *(__n128 *)(v12 + 8);
          if (v68 >= v9->n128_u64[0])
          {
            v84 = v12 + 32;
            do
            {
              v12 = v84;
              if (v84 >= (unint64_t)a2)
                break;
              v84 += 32;
            }
            while (v68 >= *(_QWORD *)v12);
          }
          else
          {
            do
            {
              v83 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v83);
          }
          v85 = a2;
          if (v12 < (unint64_t)a2)
          {
            v85 = a2;
            do
            {
              v86 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v86);
          }
          while (v12 < (unint64_t)v85)
          {
            v173 = *(__n128 *)v12;
            v206 = *(__n128 *)(v12 + 16);
            v87 = v85[1];
            *(__n128 *)v12 = *v85;
            *(__n128 *)(v12 + 16) = v87;
            *v85 = v173;
            v85[1] = v206;
            do
            {
              v88 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v88);
            do
            {
              v89 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v89);
          }
          if (v12 - 32 != a1)
          {
            v90 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v90;
          }
          a4 = 0;
          *(_QWORD *)(v12 - 32) = v68;
          result = v220;
          *(_QWORD *)(v12 - 8) = v223;
          *(__n128 *)(v12 - 24) = v220;
          continue;
        }
        v222 = *(_QWORD *)(v12 + 24);
        v219 = *(__n128 *)(v12 + 8);
        v69 = v12;
        do
        {
          v70 = v69;
          v71 = *(_QWORD *)(v69 + 32);
          v69 += 32;
        }
        while (v71 < v68);
        v72 = a2;
        if (v70 == v12)
        {
          v72 = a2;
          do
          {
            if (v69 >= (unint64_t)v72)
              break;
            v74 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v74 >= v68);
        }
        else
        {
          do
          {
            v73 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v73 >= v68);
        }
        v12 = v69;
        if (v69 < (unint64_t)v72)
        {
          v75 = v72;
          do
          {
            v76 = *(__n128 *)v12;
            v205 = *(__n128 *)(v12 + 16);
            v77 = v75[1];
            *(__n128 *)v12 = *v75;
            *(__n128 *)(v12 + 16) = v77;
            *v75 = v76;
            v75[1] = v205;
            do
            {
              v78 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v78 < v68);
            do
            {
              v79 = v75[-2].n128_u64[0];
              v75 -= 2;
            }
            while (v79 >= v68);
          }
          while (v12 < (unint64_t)v75);
        }
        if (v12 - 32 != a1)
        {
          v80 = *(_OWORD *)(v12 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
          *(_OWORD *)(a1 + 16) = v80;
        }
        *(_QWORD *)(v12 - 32) = v68;
        *(_QWORD *)(v12 - 8) = v222;
        *(__n128 *)(v12 - 24) = v219;
        if (v69 < (unint64_t)v72)
        {
LABEL_73:
          sub_239C7E5EC(a1, v12 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v81 = sub_239C7F49C(a1, v12 - 32, v219);
        if (!sub_239C7F49C(v12, (uint64_t)a2, v82))
        {
          if (v81)
            continue;
          goto LABEL_73;
        }
        a2 = (__n128 *)(v12 - 32);
        if (!v81)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < *(_QWORD *)v12)
          goto LABEL_98;
        return result;
      case 3:
        v91 = (__n128 *)(v12 + 32);
        v92 = *(_QWORD *)(v12 + 32);
        v93 = v9->n128_u64[0];
        if (v92 < *(_QWORD *)v12)
        {
          if (v93 >= v92)
          {
            v181 = *(__n128 *)v12;
            v215 = *(_OWORD *)(v12 + 16);
            v147 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v91;
            *(_OWORD *)(v12 + 16) = v147;
            result = v181;
            *v91 = v181;
            *(_OWORD *)(v12 + 48) = v215;
            if (v9->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v91;
            v95 = *(__n128 *)(v12 + 48);
            v148 = a2[-1];
            *v91 = *v9;
            *(__n128 *)(v12 + 48) = v148;
          }
          else
          {
LABEL_98:
            v174 = *(__n128 *)v12;
            v207 = *(__n128 *)(v12 + 16);
            v94 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v94;
            result = v174;
            v95 = v207;
          }
          *v9 = result;
          a2[-1] = v95;
          return result;
        }
        if (v93 < v92)
        {
          result = *v91;
          v211 = *(__n128 *)(v12 + 48);
          v125 = a2[-1];
          *v91 = *v9;
          *(__n128 *)(v12 + 48) = v125;
          *v9 = result;
          a2[-1] = v211;
          goto LABEL_180;
        }
        return result;
      case 4:
        v91 = (__n128 *)(v12 + 32);
        v96 = *(_QWORD *)(v12 + 32);
        v97 = (__n128 *)(v12 + 64);
        v98 = *(_QWORD *)(v12 + 64);
        if (v96 >= *(_QWORD *)v12)
        {
          if (v98 < v96)
          {
            v126 = *v91;
            result = *(__n128 *)(v12 + 48);
            v127 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v127;
            *v97 = v126;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v178 = *(__n128 *)v12;
              v212 = *(_OWORD *)(v12 + 16);
              v128 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v91;
              *(_OWORD *)(v12 + 16) = v128;
              result = v178;
              *v91 = v178;
              *(_OWORD *)(v12 + 48) = v212;
            }
          }
        }
        else if (v98 >= v96)
        {
          v182 = *(__n128 *)v12;
          v216 = *(_OWORD *)(v12 + 16);
          v149 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v91;
          *(_OWORD *)(v12 + 16) = v149;
          result = v182;
          *v91 = v182;
          *(_OWORD *)(v12 + 48) = v216;
          if (v98 < *(_QWORD *)(v12 + 32))
          {
            v150 = *v91;
            result = *(__n128 *)(v12 + 48);
            v151 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v151;
            *v97 = v150;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v175 = *(__n128 *)v12;
          v208 = *(_OWORD *)(v12 + 16);
          v99 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v97;
          *(_OWORD *)(v12 + 16) = v99;
          result = v175;
          *v97 = v175;
          *(_OWORD *)(v12 + 80) = v208;
        }
        if (v9->n128_u64[0] < v97->n128_u64[0])
        {
          result = *v97;
          v217 = *(__n128 *)(v12 + 80);
          v152 = a2[-1];
          *v97 = *v9;
          *(__n128 *)(v12 + 80) = v152;
          *v9 = result;
          a2[-1] = v217;
          if (v97->n128_u64[0] < v91->n128_u64[0])
          {
            v153 = *v91;
            result = *(__n128 *)(v12 + 48);
            v154 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v154;
            *v97 = v153;
            *(__n128 *)(v12 + 80) = result;
LABEL_180:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v183 = *(__n128 *)v12;
              v218 = *(__n128 *)(v12 + 16);
              v155 = v91[1];
              *(__n128 *)v12 = *v91;
              *(__n128 *)(v12 + 16) = v155;
              result = v183;
              *v91 = v183;
              v91[1] = v218;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_239C7F310((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 767)
        {
          v100 = (__n128 *)(v12 + 32);
          v102 = (__n128 *)v12 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v12;
              do
              {
                v106 = v100;
                v107 = *(_QWORD *)(v104 + 32);
                if (v107 < *(_QWORD *)v104)
                {
                  v176 = *(__n128 *)(v104 + 40);
                  v209 = *(_QWORD *)(v104 + 56);
                  v108 = v103;
                  do
                  {
                    v109 = v12 + v108;
                    v110 = *(_OWORD *)(v12 + v108 + 16);
                    *(_OWORD *)(v109 + 32) = *(_OWORD *)(v12 + v108);
                    *(_OWORD *)(v109 + 48) = v110;
                    if (!v108)
                    {
                      v105 = v12;
                      goto LABEL_114;
                    }
                    v108 -= 32;
                  }
                  while (v107 < *(_QWORD *)(v109 - 32));
                  v105 = v12 + v108 + 32;
LABEL_114:
                  *(_QWORD *)v105 = v107;
                  result = v176;
                  *(_QWORD *)(v105 + 24) = v209;
                  *(__n128 *)(v105 + 8) = v176;
                }
                v100 = v106 + 2;
                v103 += 32;
                v104 = (unint64_t)v106;
              }
              while (&v106[2] != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v129 = (uint64_t)v100;
              v130 = *(_QWORD *)(a1 + 32);
              if (v130 < *(_QWORD *)a1)
              {
                v179 = *(__n128 *)(a1 + 40);
                v213 = *(_QWORD *)(a1 + 56);
                do
                {
                  v131 = v100[-1];
                  *v100 = v100[-2];
                  v100[1] = v131;
                  v132 = v100[-4].n128_u64[0];
                  v100 -= 2;
                }
                while (v130 < v132);
                v100->n128_u64[0] = v130;
                result = v179;
                v100[1].n128_u64[1] = v213;
                *(__n128 *)((char *)v100 + 8) = v179;
              }
              v100 = (__n128 *)(v129 + 32);
              a1 = v129;
            }
            while ((__n128 *)(v129 + 32) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((__n128 *)v12 != a2)
          {
            v111 = (unint64_t)(v14 - 2) >> 1;
            v112 = v111;
            do
            {
              if (v111 >= v112)
              {
                v114 = (2 * v112) | 1;
                v115 = v12 + 32 * v114;
                if (2 * v112 + 2 >= v14)
                {
                  v116 = *(_QWORD *)v115;
                }
                else
                {
                  v116 = *(_QWORD *)(v115 + 32);
                  v117 = *(_QWORD *)v115 >= v116;
                  if (*(_QWORD *)v115 > v116)
                    v116 = *(_QWORD *)v115;
                  if (!v117)
                  {
                    v115 += 32;
                    v114 = 2 * v112 + 2;
                  }
                }
                v118 = v12 + 32 * v112;
                v119 = *(_QWORD *)v118;
                if (v116 >= *(_QWORD *)v118)
                {
                  v210 = *(_QWORD *)(v118 + 24);
                  v177 = *(_OWORD *)(v118 + 8);
                  while (1)
                  {
                    v122 = (_OWORD *)v118;
                    v118 = v115;
                    v123 = *(_OWORD *)(v115 + 16);
                    *v122 = *(_OWORD *)v115;
                    v122[1] = v123;
                    if (v111 < v114)
                      break;
                    v124 = (2 * v114) | 1;
                    v115 = v12 + 32 * v124;
                    v114 = 2 * v114 + 2;
                    if (v114 < v14)
                    {
                      v120 = *(_QWORD *)v115;
                      v121 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 <= v121)
                        v120 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 >= v121)
                        v114 = v124;
                      else
                        v115 += 32;
                      if (v120 < v119)
                        break;
                    }
                    else
                    {
                      v114 = v124;
                      if (*(_QWORD *)v115 < v119)
                        break;
                    }
                  }
                  *(_QWORD *)v118 = v119;
                  *(_QWORD *)(v118 + 24) = v210;
                  *(_OWORD *)(v118 + 8) = v177;
                }
              }
              v113 = v112-- <= 0;
            }
            while (!v113);
            v133 = (unint64_t)v13 >> 5;
            do
            {
              v134 = 0;
              v180 = *(__n128 *)v12;
              v214 = *(__n128 *)(v12 + 16);
              v135 = (_OWORD *)v12;
              do
              {
                v137 = (uint64_t)&v135[2 * v134 + 2];
                v138 = (2 * v134) | 1;
                v139 = 2 * v134 + 2;
                if (v139 < v133 && *(_QWORD *)v137 < *(_QWORD *)(v137 + 32))
                {
                  v137 += 32;
                  v138 = v139;
                }
                v136 = *(_OWORD *)(v137 + 16);
                *v135 = *(_OWORD *)v137;
                v135[1] = v136;
                v135 = (_OWORD *)v137;
                v134 = v138;
              }
              while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v137 == a2)
              {
                result = v180;
                *(__n128 *)v137 = v180;
                *(__n128 *)(v137 + 16) = v214;
              }
              else
              {
                v140 = a2[1];
                *(__n128 *)v137 = *a2;
                *(__n128 *)(v137 + 16) = v140;
                result = v180;
                *a2 = v180;
                a2[1] = v214;
                v141 = v137 - v12 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = (_OWORD *)(v12 + 32 * v142);
                  v144 = *(_QWORD *)v137;
                  if (*(_QWORD *)v143 < *(_QWORD *)v137)
                  {
                    v224 = *(_QWORD *)(v137 + 24);
                    v221 = *(__n128 *)(v137 + 8);
                    do
                    {
                      v145 = (_OWORD *)v137;
                      v137 = (uint64_t)v143;
                      v146 = v143[1];
                      *v145 = *v143;
                      v145[1] = v146;
                      if (!v142)
                        break;
                      v142 = (v142 - 1) >> 1;
                      v143 = (_OWORD *)(v12 + 32 * v142);
                    }
                    while (*(_QWORD *)v143 < v144);
                    *(_QWORD *)v137 = v144;
                    result = v221;
                    *(_QWORD *)(v137 + 24) = v224;
                    *(__n128 *)(v137 + 8) = v221;
                  }
                }
              }
              v113 = v133-- <= 2;
            }
            while (!v113);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = v12 + 32 * ((unint64_t)v14 >> 1);
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 > 0x1000)
        {
          v18 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v158 = *(__n128 *)v16;
              v186 = *(__n128 *)(v16 + 16);
              v22 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v22;
              *v9 = v158;
              a2[-1] = v186;
              if (*(_QWORD *)v16 < *(_QWORD *)v12)
              {
                v159 = *(__n128 *)v12;
                v187 = *(_OWORD *)(v12 + 16);
                v23 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)(v12 + 16) = v23;
                *(__n128 *)v16 = v159;
                *(_OWORD *)(v16 + 16) = v187;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v156 = *(__n128 *)v12;
              v184 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
              goto LABEL_20;
            }
            v162 = *(__n128 *)v12;
            v190 = *(_OWORD *)(v12 + 16);
            v26 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v26;
            *(__n128 *)v16 = v162;
            *(_OWORD *)(v16 + 16) = v190;
            if (v9->n128_u64[0] < *(_QWORD *)v16)
            {
              v156 = *(__n128 *)v16;
              v184 = *(__n128 *)(v16 + 16);
              v27 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v27;
LABEL_20:
              *v9 = v156;
              a2[-1] = v184;
            }
          }
          v28 = (__n128 *)(v12 + 32);
          v29 = v12 + 32 * v15;
          v32 = *(_QWORD *)(v29 - 32);
          v30 = (__n128 *)(v29 - 32);
          v31 = v32;
          v33 = v10->n128_u64[0];
          if (v32 >= *(_QWORD *)(v12 + 32))
          {
            if (v33 < v31)
            {
              v163 = *v30;
              v191 = v30[1];
              v37 = a2[-3];
              *v30 = *v10;
              v30[1] = v37;
              *v10 = v163;
              a2[-3] = v191;
              if (v30->n128_u64[0] < v28->n128_u64[0])
              {
                v38 = *v28;
                v192 = *(__n128 *)(v12 + 48);
                v39 = v30[1];
                *v28 = *v30;
                *(__n128 *)(v12 + 48) = v39;
                *v30 = v38;
                v30[1] = v192;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              v35 = *(__n128 *)(v12 + 48);
              v36 = a2[-3];
              *v28 = *v10;
              *(__n128 *)(v12 + 48) = v36;
              goto LABEL_32;
            }
            v42 = *v28;
            v194 = *(__n128 *)(v12 + 48);
            v43 = v30[1];
            *v28 = *v30;
            *(__n128 *)(v12 + 48) = v43;
            *v30 = v42;
            v30[1] = v194;
            if (v10->n128_u64[0] < v30->n128_u64[0])
            {
              v165 = *v30;
              v195 = v30[1];
              v44 = a2[-3];
              *v30 = *v10;
              v30[1] = v44;
              v34 = v165;
              v35 = v195;
LABEL_32:
              *v10 = v34;
              a2[-3] = v35;
            }
          }
          v45 = (__n128 *)(v12 + 64);
          v46 = v12 + 32 * v15;
          v49 = *(_QWORD *)(v46 + 32);
          v47 = (__n128 *)(v46 + 32);
          v48 = v49;
          v50 = v11->n128_u64[0];
          if (v49 >= *(_QWORD *)(v12 + 64))
          {
            if (v50 < v48)
            {
              v166 = *v47;
              v196 = v47[1];
              v54 = a2[-5];
              *v47 = *v11;
              v47[1] = v54;
              *v11 = v166;
              a2[-5] = v196;
              if (v47->n128_u64[0] < v45->n128_u64[0])
              {
                v55 = *v45;
                v197 = *(__n128 *)(v12 + 80);
                v56 = v47[1];
                *v45 = *v47;
                *(__n128 *)(v12 + 80) = v56;
                *v47 = v55;
                v47[1] = v197;
              }
            }
          }
          else
          {
            if (v50 < v48)
            {
              v51 = *v45;
              v52 = *(__n128 *)(v12 + 80);
              v53 = a2[-5];
              *v45 = *v11;
              *(__n128 *)(v12 + 80) = v53;
              goto LABEL_41;
            }
            v57 = *v45;
            v198 = *(__n128 *)(v12 + 80);
            v58 = v47[1];
            *v45 = *v47;
            *(__n128 *)(v12 + 80) = v58;
            *v47 = v57;
            v47[1] = v198;
            if (v11->n128_u64[0] < v47->n128_u64[0])
            {
              v167 = *v47;
              v199 = v47[1];
              v59 = a2[-5];
              *v47 = *v11;
              v47[1] = v59;
              v51 = v167;
              v52 = v199;
LABEL_41:
              *v11 = v51;
              a2[-5] = v52;
            }
          }
          v60 = *(_QWORD *)v16;
          v61 = v47->n128_u64[0];
          if (*(_QWORD *)v16 >= v30->n128_u64[0])
          {
            if (v61 < v60)
            {
              v169 = *(__n128 *)v16;
              v201 = *(__n128 *)(v16 + 16);
              v63 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v63;
              *v47 = v169;
              v47[1] = v201;
              if (*(_QWORD *)v16 < v30->n128_u64[0])
              {
                v170 = *v30;
                v202 = v30[1];
                v64 = *(__n128 *)(v16 + 16);
                *v30 = *(__n128 *)v16;
                v30[1] = v64;
                *(__n128 *)v16 = v170;
                *(__n128 *)(v16 + 16) = v202;
              }
            }
          }
          else
          {
            if (v61 < v60)
            {
              v168 = *v30;
              v200 = v30[1];
              v62 = v47[1];
              *v30 = *v47;
              v30[1] = v62;
              goto LABEL_50;
            }
            v171 = *v30;
            v203 = v30[1];
            v65 = *(__n128 *)(v16 + 16);
            *v30 = *(__n128 *)v16;
            v30[1] = v65;
            *(__n128 *)v16 = v171;
            *(__n128 *)(v16 + 16) = v203;
            if (v47->n128_u64[0] < *(_QWORD *)v16)
            {
              v168 = *(__n128 *)v16;
              v200 = *(__n128 *)(v16 + 16);
              v66 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v66;
LABEL_50:
              *v47 = v168;
              v47[1] = v200;
            }
          }
          v172 = *(__n128 *)v12;
          v204 = *(_OWORD *)(v12 + 16);
          v67 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v67;
          *(__n128 *)v16 = v172;
          *(_OWORD *)(v16 + 16) = v204;
          goto LABEL_52;
        }
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= *(_QWORD *)v16)
        {
          if (v17 < v20)
          {
            v160 = *(__n128 *)v12;
            v188 = *(__n128 *)(v12 + 16);
            v24 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v24;
            *v9 = v160;
            a2[-1] = v188;
            if (*(_QWORD *)v12 < *(_QWORD *)v16)
            {
              v161 = *(__n128 *)v16;
              v189 = *(_OWORD *)(v16 + 16);
              v25 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v25;
              *(__n128 *)v12 = v161;
              *(_OWORD *)(v12 + 16) = v189;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            v164 = *(__n128 *)v16;
            v193 = *(_OWORD *)(v16 + 16);
            v40 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v12;
            *(_OWORD *)(v16 + 16) = v40;
            *(__n128 *)v12 = v164;
            *(_OWORD *)(v12 + 16) = v193;
            if (v9->n128_u64[0] >= *(_QWORD *)v12)
              goto LABEL_52;
            v157 = *(__n128 *)v12;
            v185 = *(__n128 *)(v12 + 16);
            v41 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v41;
          }
          else
          {
            v157 = *(__n128 *)v16;
            v185 = *(__n128 *)(v16 + 16);
            v21 = a2[-1];
            *(__n128 *)v16 = *v9;
            *(__n128 *)(v16 + 16) = v21;
          }
          *v9 = v157;
          a2[-1] = v185;
        }
LABEL_52:
        --a3;
        v68 = *(_QWORD *)v12;
        if ((a4 & 1) == 0 && *(_QWORD *)(v12 - 32) >= v68)
        {
          v223 = *(_QWORD *)(v12 + 24);
          v220 = *(__n128 *)(v12 + 8);
          if (v68 >= v9->n128_u64[0])
          {
            v84 = v12 + 32;
            do
            {
              v12 = v84;
              if (v84 >= (unint64_t)a2)
                break;
              v84 += 32;
            }
            while (v68 >= *(_QWORD *)v12);
          }
          else
          {
            do
            {
              v83 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v83);
          }
          v85 = a2;
          if (v12 < (unint64_t)a2)
          {
            v85 = a2;
            do
            {
              v86 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v86);
          }
          while (v12 < (unint64_t)v85)
          {
            v173 = *(__n128 *)v12;
            v206 = *(__n128 *)(v12 + 16);
            v87 = v85[1];
            *(__n128 *)v12 = *v85;
            *(__n128 *)(v12 + 16) = v87;
            *v85 = v173;
            v85[1] = v206;
            do
            {
              v88 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v88);
            do
            {
              v89 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v89);
          }
          if (v12 - 32 != a1)
          {
            v90 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v90;
          }
          a4 = 0;
          *(_QWORD *)(v12 - 32) = v68;
          result = v220;
          *(_QWORD *)(v12 - 8) = v223;
          *(__n128 *)(v12 - 24) = v220;
          continue;
        }
        v222 = *(_QWORD *)(v12 + 24);
        v219 = *(__n128 *)(v12 + 8);
        v69 = v12;
        do
        {
          v70 = v69;
          v71 = *(_QWORD *)(v69 + 32);
          v69 += 32;
        }
        while (v71 < v68);
        v72 = a2;
        if (v70 == v12)
        {
          v72 = a2;
          do
          {
            if (v69 >= (unint64_t)v72)
              break;
            v74 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v74 >= v68);
        }
        else
        {
          do
          {
            v73 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v73 >= v68);
        }
        v12 = v69;
        if (v69 < (unint64_t)v72)
        {
          v75 = v72;
          do
          {
            v76 = *(__n128 *)v12;
            v205 = *(__n128 *)(v12 + 16);
            v77 = v75[1];
            *(__n128 *)v12 = *v75;
            *(__n128 *)(v12 + 16) = v77;
            *v75 = v76;
            v75[1] = v205;
            do
            {
              v78 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v78 < v68);
            do
            {
              v79 = v75[-2].n128_u64[0];
              v75 -= 2;
            }
            while (v79 >= v68);
          }
          while (v12 < (unint64_t)v75);
        }
        if (v12 - 32 != a1)
        {
          v80 = *(_OWORD *)(v12 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
          *(_OWORD *)(a1 + 16) = v80;
        }
        *(_QWORD *)(v12 - 32) = v68;
        *(_QWORD *)(v12 - 8) = v222;
        *(__n128 *)(v12 - 24) = v219;
        if (v69 < (unint64_t)v72)
        {
LABEL_73:
          sub_239C7F7EC(a1, v12 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v81 = sub_239C803C4(a1, v12 - 32, v219);
        if (!sub_239C803C4(v12, (uint64_t)a2, v82))
        {
          if (v81)
            continue;
          goto LABEL_73;
        }
        a2 = (__n128 *)(v12 - 32);
        if (!v81)
          goto LABEL_1;
        return result;
    }
  }
}

  v479 = a2 - 36;
  v455 = (uint64_t)(a2 - 108);
  v456 = (uint64_t)(a2 - 72);
  v468 = (unint64_t)a2;
  while (2)
  {
    v9 = (char *)a2 - (char *)a1;
    v10 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 4);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v224 = sub_2395D7BEC(*(_QWORD *)a3, *v479);
        v225 = sub_2395D7BEC(*(_QWORD *)a3, *a1);
        v226 = *((_DWORD *)v224 + 49);
        v227 = **(_DWORD **)(a3 + 8);
        v228 = *((_DWORD *)v225 + 49);
        v229 = v226 != v227 || v228 == v227;
        if (!v229
          || (v226 != v227 ? (v230 = v228 == v227) : (v230 = 0), !v230 && *(a2 - 27) + *(a2 - 28) > a1[9] + a1[8]))
        {
          v231 = *a1;
          *a1 = *(a2 - 36);
          *(a2 - 36) = v231;
          v232 = *(_OWORD *)(a1 + 2);
          v233 = *((_QWORD *)a1 + 3);
          v234 = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 2) = 0;
          *((_QWORD *)a1 + 3) = 0;
          *((_QWORD *)a1 + 1) = 0;
          v545 = *(_OWORD *)(a1 + 14);
          v553 = *(_OWORD *)(a1 + 18);
          v513 = *(_OWORD *)(a1 + 22);
          v521 = *(_OWORD *)(a1 + 26);
          v529 = *(_OWORD *)(a1 + 30);
          v537 = *(_OWORD *)(a1 + 10);
          v235 = a1[34];
          *(_OWORD *)(a1 + 2) = *(_OWORD *)(a2 - 34);
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 - 15);
          *((_QWORD *)a2 - 17) = 0;
          *((_QWORD *)a2 - 16) = 0;
          *((_QWORD *)a2 - 15) = 0;
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 - 14);
          v236 = *(_OWORD *)(a2 - 26);
          v237 = *(_OWORD *)(a2 - 22);
          *(_OWORD *)(a1 + 18) = *(_OWORD *)(a2 - 18);
          *(_OWORD *)(a1 + 14) = v237;
          *(_OWORD *)(a1 + 10) = v236;
          v238 = *(_OWORD *)(a2 - 14);
          v239 = *(_OWORD *)(a2 - 10);
          *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 - 6);
          *(_OWORD *)(a1 + 26) = v239;
          *(_OWORD *)(a1 + 22) = v238;
          a1[34] = *(a2 - 2);
          v240 = (void *)*((_QWORD *)a2 - 17);
          if (v240)
          {
            *((_QWORD *)a2 - 16) = v240;
            v486 = v232;
            operator delete(v240);
            v232 = v486;
          }
          *(_OWORD *)(a2 - 34) = v232;
          *((_QWORD *)a2 - 15) = v233;
          *((_QWORD *)a2 - 14) = v234;
          *(_OWORD *)(a2 - 22) = v545;
          *(_OWORD *)(a2 - 18) = v553;
          *(_OWORD *)(a2 - 26) = v537;
          *(_OWORD *)(a2 - 10) = v521;
          *(_OWORD *)(a2 - 6) = v529;
          *(_OWORD *)(a2 - 14) = v513;
          *(a2 - 2) = v235;
        }
        return;
      case 3uLL:
        sub_239CA5290((uint64_t)a1, (uint64_t)(a1 + 36), (uint64_t)v479, a3);
        return;
      case 4uLL:
        sub_239CA5978((uint64_t)a1, (uint64_t)(a1 + 36), (uint64_t)(a1 + 72), (uint64_t)v479, a3);
        return;
      case 5uLL:
        sub_239CA5DCC((uint64_t)a1, (uint64_t)(a1 + 36), (uint64_t)(a1 + 72), (uint64_t)(a1 + 108), (uint64_t)v479, a3);
        return;
      default:
        v483 = (uint64_t)a1;
        if (v9 > 3455)
        {
          if (!a4)
          {
            if (a1 == a2)
              return;
            v283 = (v10 - 2) >> 1;
            v488 = v283;
            do
            {
              v284 = v283;
              if (v488 >= v283)
              {
                v285 = (2 * v283) | 1;
                v286 = &a1[36 * v285];
                if (2 * v283 + 2 < (uint64_t)v10)
                {
                  v287 = sub_2395D7BEC(*(_QWORD *)a3, *v286);
                  v288 = sub_2395D7BEC(*(_QWORD *)a3, v286[36]);
                  v289 = *((_DWORD *)v287 + 49);
                  v290 = **(_DWORD **)(a3 + 8);
                  v291 = *((_DWORD *)v288 + 49);
                  v292 = v289 != v290 || v291 == v290;
                  if (!v292
                    || (v289 != v290 ? (v293 = v291 == v290) : (v293 = 0),
                        !v293 && a1[36 * v285 + 9] + a1[36 * v285 + 8] > v286[45] + v286[44]))
                  {
                    v286 += 36;
                    v285 = 2 * v284 + 2;
                  }
                }
                v294 = &a1[36 * v284];
                v295 = sub_2395D7BEC(*(_QWORD *)a3, *v286);
                v296 = sub_2395D7BEC(*(_QWORD *)a3, *v294);
                v297 = *((_DWORD *)v295 + 49);
                v298 = **(_DWORD **)(a3 + 8);
                v299 = *((_DWORD *)v296 + 49);
                if (v297 != v298 || v299 == v298)
                {
                  v301 = v297 != v298 && v299 == v298;
                  if (v301 || v286[9] + v286[8] <= a1[36 * v284 + 9] + a1[36 * v284 + 8])
                  {
                    v302 = 0;
                    v480 = *v294;
                    v303 = &a1[36 * v284];
                    v471 = *(_OWORD *)(v303 + 2);
                    v463 = *((_QWORD *)v303 + 3);
                    v466 = v284;
                    v304 = *((_QWORD *)v303 + 4);
                    *((_QWORD *)v303 + 2) = 0;
                    *((_QWORD *)v303 + 3) = 0;
                    *((_QWORD *)v303 + 1) = 0;
                    v547 = *(_OWORD *)(v303 + 14);
                    v555 = *(_OWORD *)(v303 + 18);
                    v539 = *(_OWORD *)(v303 + 10);
                    v523 = *(_OWORD *)(v303 + 26);
                    v531 = *(_OWORD *)(v303 + 30);
                    v515 = *(_OWORD *)(v303 + 22);
                    v305 = v303[34];
                    v460 = v304;
                    v476 = HIDWORD(v304) + v304;
                    while (1)
                    {
                      v306 = v286;
                      *v294 = *v286;
                      if (v302)
                      {
                        *((_QWORD *)v294 + 2) = v302;
                        operator delete(v302);
                        *((_QWORD *)v294 + 1) = 0;
                        *((_QWORD *)v294 + 2) = 0;
                        *((_QWORD *)v294 + 3) = 0;
                      }
                      v307 = (void **)(v286 + 2);
                      *(_OWORD *)(v294 + 2) = *(_OWORD *)(v286 + 2);
                      *((_QWORD *)v294 + 3) = *((_QWORD *)v286 + 3);
                      *((_QWORD *)v286 + 1) = 0;
                      *((_QWORD *)v286 + 2) = 0;
                      *((_QWORD *)v286 + 3) = 0;
                      *((_QWORD *)v294 + 4) = *((_QWORD *)v286 + 4);
                      v308 = *(_OWORD *)(v286 + 10);
                      v309 = *(_OWORD *)(v286 + 14);
                      *(_OWORD *)(v294 + 18) = *(_OWORD *)(v286 + 18);
                      *(_OWORD *)(v294 + 14) = v309;
                      *(_OWORD *)(v294 + 10) = v308;
                      v310 = *(_OWORD *)(v286 + 22);
                      v311 = *(_OWORD *)(v286 + 26);
                      *(_OWORD *)(v294 + 30) = *(_OWORD *)(v286 + 30);
                      *(_OWORD *)(v294 + 26) = v311;
                      *(_OWORD *)(v294 + 22) = v310;
                      v294[34] = v286[34];
                      if (v488 < v285)
                        break;
                      v312 = (2 * v285) | 1;
                      v286 = (unsigned int *)(v483 + 144 * v312);
                      if (2 * v285 + 2 < (uint64_t)v10)
                      {
                        v313 = sub_2395D7BEC(*(_QWORD *)a3, *v286);
                        v314 = sub_2395D7BEC(*(_QWORD *)a3, v286[36]);
                        v315 = *((_DWORD *)v313 + 49);
                        v316 = **(_DWORD **)(a3 + 8);
                        v317 = *((_DWORD *)v314 + 49);
                        v318 = v315 != v316 || v317 == v316;
                        if (!v318
                          || (v315 != v316 ? (v319 = v317 == v316) : (v319 = 0),
                              !v319
                           && *(_DWORD *)(v483 + 144 * v312 + 36) + *(_DWORD *)(v483 + 144 * v312 + 32) > v286[45] + v286[44]))
                        {
                          v286 += 36;
                          v312 = 2 * v285 + 2;
                        }
                      }
                      v320 = sub_2395D7BEC(*(_QWORD *)a3, *v286);
                      v321 = sub_2395D7BEC(*(_QWORD *)a3, v480);
                      v322 = *((_DWORD *)v320 + 49);
                      v323 = **(_DWORD **)(a3 + 8);
                      v324 = *((_DWORD *)v321 + 49);
                      if (v322 == v323 && v324 != v323)
                        break;
                      v326 = v322 != v323 && v324 == v323;
                      if (!v326 && v286[9] + v286[8] > v476)
                        break;
                      v302 = *v307;
                      v294 = v306;
                      v285 = v312;
                    }
                    *v306 = v480;
                    v327 = (void *)*((_QWORD *)v306 + 1);
                    if (v327)
                    {
                      *((_QWORD *)v306 + 2) = v327;
                      operator delete(v327);
                      *v307 = 0;
                      *((_QWORD *)v306 + 2) = 0;
                      *((_QWORD *)v306 + 3) = 0;
                    }
                    *(_OWORD *)(v306 + 2) = v471;
                    *((_QWORD *)v306 + 3) = v463;
                    *((_QWORD *)v306 + 4) = v460;
                    *(_OWORD *)(v306 + 10) = v539;
                    *(_OWORD *)(v306 + 14) = v547;
                    *(_OWORD *)(v306 + 18) = v555;
                    *(_OWORD *)(v306 + 22) = v515;
                    *(_OWORD *)(v306 + 26) = v523;
                    *(_OWORD *)(v306 + 30) = v531;
                    v306[34] = v305;
                    a1 = (unsigned int *)v483;
                    v284 = v466;
                  }
                }
              }
              v283 = v284 - 1;
            }
            while (v284);
            v328 = v9 / 0x90uLL;
            v464 = (__int128 *)(a1 + 10);
            v467 = a1 + 2;
            v461 = (__int128 *)(a1 + 22);
            v329 = (_DWORD *)v468;
            while (1)
            {
              v331 = 0;
              v469 = *a1;
              v332 = v329;
              v489 = *((_QWORD *)a1 + 1);
              v481 = *((_QWORD *)a1 + 2);
              v477 = *((_QWORD *)a1 + 3);
              v472 = *((_QWORD *)a1 + 4);
              v467[1] = 0;
              v467[2] = 0;
              *v467 = 0;
              v503 = *v464;
              v506 = v464[1];
              v509 = v464[2];
              v494 = *v461;
              v497 = v461[1];
              v500 = v461[2];
              v333 = a1;
              v334 = a1[34];
              while (2)
              {
                v340 = v331 + 1;
                v341 = &v333[36 * v331 + 36];
                v342 = 2 * v331;
                v331 = (2 * v331) | 1;
                v343 = v342 + 2;
                if (v343 >= v328)
                  goto LABEL_577;
                v344 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
                if (!*(_QWORD *)&v344)
                  goto LABEL_727;
                v345 = v341 + 36;
                v346 = *v341;
                v347 = (uint8x8_t)vcnt_s8(v344);
                v347.i16[0] = vaddlv_u8(v347);
                if (v347.u32[0] > 1uLL)
                {
                  v348 = *v341;
                  if (*(_QWORD *)&v344 <= v346)
                    v348 = v346 % *(_QWORD *)&v344;
                }
                else
                {
                  v348 = (v344.i32[0] - 1) & v346;
                }
                v349 = *(_QWORD *)(*(_QWORD *)a3 + 72);
                v350 = *(uint64_t ***)(v349 + 8 * v348);
                if (!v350 || (v351 = *v350) == 0)
                {
LABEL_727:
                  sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v352 = *(_QWORD *)&v344 - 1;
                if (v347.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v353 = v351[1];
                    if (v353 == v346)
                    {
                      if (*((_DWORD *)v351 + 4) == (_DWORD)v346)
                        goto LABEL_547;
                    }
                    else if ((v353 & v352) != v348)
                    {
                      goto LABEL_727;
                    }
                    v351 = (uint64_t *)*v351;
                    if (!v351)
                      goto LABEL_727;
                  }
                }
                while (1)
                {
                  v356 = v351[1];
                  if (v356 == v346)
                    break;
                  if (v356 >= *(_QWORD *)&v344)
                    v356 %= *(_QWORD *)&v344;
                  if (v356 != v348)
                    goto LABEL_727;
LABEL_550:
                  v351 = (uint64_t *)*v351;
                  if (!v351)
                    goto LABEL_727;
                }
                if (*((_DWORD *)v351 + 4) != (_DWORD)v346)
                  goto LABEL_550;
LABEL_547:
                v354 = *v345;
                if (v347.u32[0] > 1uLL)
                {
                  v355 = *v345;
                  if (*(_QWORD *)&v344 <= v354)
                    v355 = v354 % *(_QWORD *)&v344;
                }
                else
                {
                  v355 = (v344.i32[0] - 1) & v354;
                }
                v357 = *(uint64_t ***)(v349 + 8 * v355);
                if (!v357)
                  goto LABEL_727;
                v358 = *v357;
                if (!v358)
                  goto LABEL_727;
                if (v347.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v359 = v358[1];
                    if (v359 == v354)
                    {
                      if (*((_DWORD *)v358 + 4) == (_DWORD)v354)
                        goto LABEL_566;
                    }
                    else if ((v359 & v352) != v355)
                    {
                      goto LABEL_727;
                    }
                    v358 = (uint64_t *)*v358;
                    if (!v358)
                      goto LABEL_727;
                  }
                }
                while (2)
                {
                  v366 = v358[1];
                  if (v366 != v354)
                  {
                    if (v366 >= *(_QWORD *)&v344)
                      v366 %= *(_QWORD *)&v344;
                    if (v366 != v355)
                      goto LABEL_727;
LABEL_580:
                    v358 = (uint64_t *)*v358;
                    if (!v358)
                      goto LABEL_727;
                    continue;
                  }
                  break;
                }
                if (*((_DWORD *)v358 + 4) != (_DWORD)v354)
                  goto LABEL_580;
LABEL_566:
                v360 = *((_DWORD *)v351 + 55);
                v361 = **(_DWORD **)(a3 + 8);
                v362 = *((_DWORD *)v358 + 55);
                v363 = v360 != v361 || v362 == v361;
                if (!v363
                  || (v360 != v361 ? (v364 = v362 == v361) : (v364 = 0),
                      !v364 && v333[36 * v340 + 9] + v333[36 * v340 + 8] > v341[45] + v341[44]))
                {
                  v341 += 36;
                  v331 = v343;
                }
LABEL_577:
                *v333 = *v341;
                v365 = (void *)*((_QWORD *)v333 + 1);
                if (v365)
                {
                  *((_QWORD *)v333 + 2) = v365;
                  operator delete(v365);
                  *((_QWORD *)v333 + 1) = 0;
                  *((_QWORD *)v333 + 2) = 0;
                  *((_QWORD *)v333 + 3) = 0;
                }
                v335 = v341 + 2;
                *(_OWORD *)(v333 + 2) = *(_OWORD *)(v341 + 2);
                *((_QWORD *)v333 + 3) = *((_QWORD *)v341 + 3);
                *((_QWORD *)v341 + 1) = 0;
                *((_QWORD *)v341 + 2) = 0;
                *((_QWORD *)v341 + 3) = 0;
                *((_QWORD *)v333 + 4) = *((_QWORD *)v341 + 4);
                v336 = *(_OWORD *)(v341 + 10);
                v337 = *(_OWORD *)(v341 + 14);
                *(_OWORD *)(v333 + 18) = *(_OWORD *)(v341 + 18);
                *(_OWORD *)(v333 + 14) = v337;
                *(_OWORD *)(v333 + 10) = v336;
                v338 = *(_OWORD *)(v341 + 22);
                v339 = *(_OWORD *)(v341 + 26);
                *(_OWORD *)(v333 + 30) = *(_OWORD *)(v341 + 30);
                *(_OWORD *)(v333 + 26) = v339;
                *(_OWORD *)(v333 + 22) = v338;
                v333[34] = v341[34];
                v333 = v341;
                if (v331 <= (uint64_t)((unint64_t)(v328 - 2) >> 1))
                  continue;
                break;
              }
              v367 = (__int128 *)(v341 + 10);
              v368 = v341 + 22;
              v329 -= 36;
              if (v341 == v332 - 36)
              {
                *v341 = v469;
                v413 = (void *)*((_QWORD *)v341 + 1);
                if (v413)
                {
                  *((_QWORD *)v341 + 2) = v413;
                  operator delete(v413);
                  *v335 = 0;
                  *((_QWORD *)v341 + 2) = 0;
                  *((_QWORD *)v341 + 3) = 0;
                }
                *((_QWORD *)v341 + 1) = v489;
                *((_QWORD *)v341 + 2) = v481;
                *((_QWORD *)v341 + 3) = v477;
                *((_QWORD *)v341 + 4) = v472;
                *(_OWORD *)(v341 + 14) = v506;
                *(_OWORD *)(v341 + 18) = v509;
                *v367 = v503;
                *(_OWORD *)(v341 + 26) = v497;
                *(_OWORD *)(v341 + 30) = v500;
                *v368 = v494;
                v341[34] = v334;
              }
              else
              {
                *v341 = *v329;
                v369 = (void *)*((_QWORD *)v341 + 1);
                if (v369)
                {
                  *((_QWORD *)v341 + 2) = v369;
                  operator delete(v369);
                  *v335 = 0;
                  *((_QWORD *)v341 + 2) = 0;
                  *((_QWORD *)v341 + 3) = 0;
                }
                v370 = v332 - 34;
                *(_OWORD *)(v341 + 2) = *(_OWORD *)(v332 - 34);
                *((_QWORD *)v341 + 3) = *((_QWORD *)v332 - 15);
                *v370 = 0;
                v370[1] = 0;
                v370[2] = 0;
                *((_QWORD *)v341 + 4) = *((_QWORD *)v332 - 14);
                v371 = *(_OWORD *)(v332 - 26);
                v372 = *(_OWORD *)(v332 - 18);
                *(_OWORD *)(v341 + 14) = *(_OWORD *)(v332 - 22);
                *(_OWORD *)(v341 + 18) = v372;
                *v367 = v371;
                v373 = *(_OWORD *)(v332 - 14);
                v374 = *(_OWORD *)(v332 - 6);
                *(_OWORD *)(v341 + 26) = *(_OWORD *)(v332 - 10);
                *(_OWORD *)(v341 + 30) = v374;
                *v368 = v373;
                v341[34] = *(v332 - 2);
                *(v332 - 36) = v469;
                v375 = (void *)*((_QWORD *)v332 - 17);
                if (v375)
                {
                  *((_QWORD *)v332 - 16) = v375;
                  operator delete(v375);
                  *v370 = 0;
                  *((_QWORD *)v332 - 16) = 0;
                  *((_QWORD *)v332 - 15) = 0;
                }
                *((_QWORD *)v332 - 17) = v489;
                *((_QWORD *)v332 - 16) = v481;
                *((_QWORD *)v332 - 15) = v477;
                *((_QWORD *)v332 - 14) = v472;
                *(_OWORD *)(v332 - 22) = v506;
                *(_OWORD *)(v332 - 18) = v509;
                *(_OWORD *)(v332 - 26) = v503;
                *(_OWORD *)(v332 - 10) = v497;
                *(_OWORD *)(v332 - 6) = v500;
                *(_OWORD *)(v332 - 14) = v494;
                *(v332 - 2) = v334;
                v376 = (uint64_t)v341 - v483 + 144;
                if (v376 >= 145)
                {
                  if ((v377 = (v376 / 0x90uLL - 2) >> 1,
                        v378 = (unsigned int *)(v483 + 144 * v377),
                        v379 = sub_2395D7BEC(*(_QWORD *)a3, *v378),
                        v380 = sub_2395D7BEC(*(_QWORD *)a3, *v341),
                        v381 = *((_DWORD *)v379 + 49),
                        v382 = **(_DWORD **)(a3 + 8),
                        v383 = *((_DWORD *)v380 + 49),
                        v381 == v382)
                    && v383 != v382
                    || (v381 == v382 || v383 != v382)
                    && *(_DWORD *)(v483 + 144 * v377 + 36) + *(_DWORD *)(v483 + 144 * v377 + 32) > v341[9] + v341[8])
                  {
                    v482 = *(_OWORD *)(v341 + 2);
                    *v335 = 0;
                    *((_QWORD *)v341 + 2) = 0;
                    v384 = *((_QWORD *)v341 + 4);
                    v478 = *((_QWORD *)v341 + 3);
                    *((_QWORD *)v341 + 3) = 0;
                    v385 = *v341;
                    v548 = *(_OWORD *)(v341 + 14);
                    v556 = *(_OWORD *)(v341 + 18);
                    v540 = *v367;
                    v524 = *(_OWORD *)(v341 + 26);
                    v532 = *(_OWORD *)(v341 + 30);
                    v516 = *(_OWORD *)(v341 + 22);
                    v386 = v341[34];
                    v473 = v384;
                    v490 = HIDWORD(v384) + v384;
                    LODWORD(v387) = *v378;
                    while (1)
                    {
                      v388 = v378;
                      *v341 = v387;
                      v389 = (void *)*((_QWORD *)v341 + 1);
                      if (v389)
                      {
                        *((_QWORD *)v341 + 2) = v389;
                        operator delete(v389);
                        *((_QWORD *)v341 + 1) = 0;
                        *((_QWORD *)v341 + 2) = 0;
                        *((_QWORD *)v341 + 3) = 0;
                      }
                      *(_OWORD *)(v341 + 2) = *(_OWORD *)(v378 + 2);
                      *((_QWORD *)v341 + 3) = *((_QWORD *)v378 + 3);
                      *((_QWORD *)v378 + 1) = 0;
                      *((_QWORD *)v378 + 2) = 0;
                      *((_QWORD *)v378 + 3) = 0;
                      *((_QWORD *)v341 + 4) = *((_QWORD *)v378 + 4);
                      v390 = *(_OWORD *)(v378 + 10);
                      v391 = *(_OWORD *)(v378 + 14);
                      *(_OWORD *)(v341 + 18) = *(_OWORD *)(v378 + 18);
                      *(_OWORD *)(v341 + 14) = v391;
                      *(_OWORD *)(v341 + 10) = v390;
                      v392 = *(_OWORD *)(v378 + 22);
                      v393 = *(_OWORD *)(v378 + 26);
                      *(_OWORD *)(v341 + 30) = *(_OWORD *)(v378 + 30);
                      *(_OWORD *)(v341 + 26) = v393;
                      *(_OWORD *)(v341 + 22) = v392;
                      v341[34] = v378[34];
                      if (!v377)
                      {
LABEL_650:
                        *v388 = v385;
                        v414 = (void *)*((_QWORD *)v388 + 1);
                        if (v414)
                        {
                          *((_QWORD *)v388 + 2) = v414;
                          operator delete(v414);
                          *((_QWORD *)v388 + 1) = 0;
                          *((_QWORD *)v388 + 2) = 0;
                          *((_QWORD *)v388 + 3) = 0;
                        }
                        *(_OWORD *)(v388 + 2) = v482;
                        *((_QWORD *)v388 + 3) = v478;
                        *((_QWORD *)v388 + 4) = v473;
                        *(_OWORD *)(v388 + 10) = v540;
                        *(_OWORD *)(v388 + 14) = v548;
                        *(_OWORD *)(v388 + 18) = v556;
                        *(_OWORD *)(v388 + 22) = v516;
                        *(_OWORD *)(v388 + 26) = v524;
                        *(_OWORD *)(v388 + 30) = v532;
                        v388[34] = v386;
                        break;
                      }
                      v394 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
                      if (!*(_QWORD *)&v394)
                        goto LABEL_733;
                      v377 = (v377 - 1) >> 1;
                      v378 = (unsigned int *)(v483 + 144 * v377);
                      v387 = *v378;
                      v395 = (uint8x8_t)vcnt_s8(v394);
                      v395.i16[0] = vaddlv_u8(v395);
                      if (v395.u32[0] > 1uLL)
                      {
                        v396 = *v378;
                        if (*(_QWORD *)&v394 <= v387)
                          v396 = v387 % *(_QWORD *)&v394;
                      }
                      else
                      {
                        v396 = (v394.i32[0] - 1) & v387;
                      }
                      v397 = *(_QWORD *)(*(_QWORD *)a3 + 72);
                      v398 = *(uint64_t ***)(v397 + 8 * v396);
                      if (!v398 || (v399 = *v398) == 0)
                      {
LABEL_733:
                        sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                        sub_239A4475C();
                        abort();
                      }
                      v400 = *(_QWORD *)&v394 - 1;
                      if (v395.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v401 = v399[1];
                          if (v401 == v387)
                          {
                            if (*((_DWORD *)v399 + 4) == (_DWORD)v387)
                              goto LABEL_611;
                          }
                          else if ((v401 & v400) != v396)
                          {
                            goto LABEL_733;
                          }
                          v399 = (uint64_t *)*v399;
                          if (!v399)
                            goto LABEL_733;
                        }
                      }
                      while (1)
                      {
                        v403 = v399[1];
                        if (v403 == v387)
                          break;
                        if (v403 >= *(_QWORD *)&v394)
                          v403 %= *(_QWORD *)&v394;
                        if (v403 != v396)
                          goto LABEL_733;
LABEL_614:
                        v399 = (uint64_t *)*v399;
                        if (!v399)
                          goto LABEL_733;
                      }
                      if (*((_DWORD *)v399 + 4) != (_DWORD)v387)
                        goto LABEL_614;
LABEL_611:
                      if (v395.u32[0] > 1uLL)
                      {
                        v402 = v385;
                        if (*(_QWORD *)&v394 <= v385)
                          v402 = v385 % *(_QWORD *)&v394;
                      }
                      else
                      {
                        v402 = (v394.i32[0] - 1) & v385;
                      }
                      v404 = *(uint64_t ***)(v397 + 8 * v402);
                      if (!v404)
                        goto LABEL_733;
                      v405 = *v404;
                      if (!v405)
                        goto LABEL_733;
                      if (v395.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v406 = v405[1];
                          if (v406 == v385)
                          {
                            if (*((_DWORD *)v405 + 4) == (_DWORD)v385)
                              goto LABEL_630;
                          }
                          else if ((v406 & v400) != v402)
                          {
                            goto LABEL_733;
                          }
                          v405 = (uint64_t *)*v405;
                          if (!v405)
                            goto LABEL_733;
                        }
                      }
                      while (2)
                      {
                        v412 = v405[1];
                        if (v412 != v385)
                        {
                          if (v412 >= *(_QWORD *)&v394)
                            v412 %= *(_QWORD *)&v394;
                          if (v412 != v402)
                            goto LABEL_733;
LABEL_642:
                          v405 = (uint64_t *)*v405;
                          if (!v405)
                            goto LABEL_733;
                          continue;
                        }
                        break;
                      }
                      if (*((_DWORD *)v405 + 4) != (_DWORD)v385)
                        goto LABEL_642;
LABEL_630:
                      v407 = *((_DWORD *)v399 + 55);
                      v408 = **(_DWORD **)(a3 + 8);
                      v409 = *((_DWORD *)v405 + 55);
                      v410 = v407 != v408 || v409 == v408;
                      v341 = v388;
                      if (v410)
                      {
                        if (v407 != v408 && v409 == v408)
                          goto LABEL_650;
                        v341 = v388;
                        if (*(_DWORD *)(v483 + 144 * v377 + 36) + *(_DWORD *)(v483 + 144 * v377 + 32) <= v490)
                          goto LABEL_650;
                      }
                    }
                  }
                }
              }
              v330 = v328-- <= 2;
              a1 = (unsigned int *)v483;
              if (v330)
                return;
            }
          }
          v11 = &a1[36 * (v10 >> 1)];
          if ((unint64_t)v9 < 0x4801)
          {
            sub_239CA5290((uint64_t)&a1[36 * (v10 >> 1)], (uint64_t)a1, (uint64_t)v479, a3);
          }
          else
          {
            sub_239CA5290((uint64_t)a1, (uint64_t)&a1[36 * (v10 >> 1)], (uint64_t)v479, a3);
            v12 = 36 * (v10 >> 1);
            v13 = &a1[v12];
            sub_239CA5290((uint64_t)(a1 + 36), (uint64_t)&a1[v12 - 36], v456, a3);
            sub_239CA5290((uint64_t)(a1 + 72), (uint64_t)&a1[v12 + 36], v455, a3);
            sub_239CA5290((uint64_t)&a1[v12 - 36], (uint64_t)v11, (uint64_t)&a1[v12 + 36], a3);
            v14 = *a1;
            *a1 = *v11;
            *v11 = v14;
            v15 = *(_OWORD *)(a1 + 2);
            v16 = *((_QWORD *)a1 + 3);
            v17 = *((_QWORD *)a1 + 4);
            *((_QWORD *)a1 + 2) = 0;
            *((_QWORD *)a1 + 3) = 0;
            *((_QWORD *)a1 + 1) = 0;
            v542 = *(_OWORD *)(a1 + 14);
            v550 = *(_OWORD *)(a1 + 18);
            v510 = *(_OWORD *)(a1 + 22);
            v518 = *(_OWORD *)(a1 + 26);
            v526 = *(_OWORD *)(a1 + 30);
            v534 = *(_OWORD *)(a1 + 10);
            v18 = a1[34];
            *(_OWORD *)(a1 + 2) = *(_OWORD *)&a1[v12 + 2];
            v19 = *(_QWORD *)&a1[v12 + 8];
            *((_QWORD *)a1 + 3) = *(_QWORD *)&a1[v12 + 6];
            *((_QWORD *)a1 + 4) = v19;
            v20 = *(_OWORD *)&a1[v12 + 10];
            v21 = *(_OWORD *)&a1[v12 + 14];
            *(_OWORD *)(a1 + 18) = *(_OWORD *)&a1[v12 + 18];
            *(_OWORD *)(a1 + 14) = v21;
            *(_OWORD *)(a1 + 10) = v20;
            v22 = *(_OWORD *)&a1[v12 + 22];
            v23 = *(_OWORD *)&a1[v12 + 26];
            *(_OWORD *)(a1 + 30) = *(_OWORD *)&a1[v12 + 30];
            *(_OWORD *)(a1 + 26) = v23;
            *(_OWORD *)(a1 + 22) = v22;
            a1[34] = a1[v12 + 34];
            *(_OWORD *)(v13 + 2) = v15;
            *((_QWORD *)v13 + 3) = 0;
            *((_QWORD *)v13 + 4) = v17;
            *((_QWORD *)v13 + 3) = v16;
            *(_OWORD *)(v13 + 18) = v550;
            *(_OWORD *)(v13 + 14) = v542;
            *(_OWORD *)(v13 + 10) = v534;
            *(_OWORD *)(v13 + 30) = v526;
            *(_OWORD *)(v13 + 26) = v518;
            *(_OWORD *)(v13 + 22) = v510;
            v13[34] = v18;
          }
          v470 = a4 - 1;
          if ((a5 & 1) == 0)
          {
            v24 = sub_2395D7BEC(*(_QWORD *)a3, *(a1 - 36));
            v25 = sub_2395D7BEC(*(_QWORD *)a3, *a1);
            v26 = *((_DWORD *)v24 + 49);
            v27 = **(_DWORD **)(a3 + 8);
            v28 = *((_DWORD *)v25 + 49);
            if (v26 != v27 || v28 == v27)
            {
              v30 = v26 != v27 && v28 == v27;
              if (v30 || *(a1 - 27) + *(a1 - 28) <= a1[9] + a1[8])
              {
                v133 = *a1;
                v134 = a1 + 2;
                v475 = *(_OWORD *)(a1 + 2);
                v135 = *((_QWORD *)a1 + 3);
                v136 = *((_QWORD *)a1 + 4);
                *((_QWORD *)a1 + 2) = 0;
                *((_QWORD *)a1 + 3) = 0;
                *((_QWORD *)a1 + 1) = 0;
                v505 = *(_OWORD *)(a1 + 14);
                v508 = *(_OWORD *)(a1 + 18);
                v493 = *(_OWORD *)(a1 + 22);
                v496 = *(_OWORD *)(a1 + 26);
                v499 = *(_OWORD *)(a1 + 30);
                v502 = *(_OWORD *)(a1 + 10);
                v137 = a1[34];
                v138 = sub_2395D7BEC(*(_QWORD *)a3, v133);
                v139 = sub_2395D7BEC(*(_QWORD *)a3, *v479);
                v140 = *((_DWORD *)v138 + 49);
                v141 = **(_DWORD **)(a3 + 8);
                v142 = *((_DWORD *)v139 + 49);
                if (v140 != v141 || v142 == v141)
                {
                  if (v140 != v141 && v142 == v141
                    || (v143 = HIDWORD(v136) + v136,
                        HIDWORD(v136) + (int)v136 <= (*(_DWORD *)(v468 - 108) + *(_DWORD *)(v468 - 112))))
                  {
                    for (a1 += 36; (unint64_t)a1 < v468; a1 += 36)
                    {
                      v151 = sub_2395D7BEC(*(_QWORD *)a3, v133);
                      v152 = sub_2395D7BEC(*(_QWORD *)a3, *a1);
                      v153 = *((_DWORD *)v151 + 49);
                      v154 = **(_DWORD **)(a3 + 8);
                      v155 = *((_DWORD *)v152 + 49);
                      if (v153 == v154 && v155 != v154)
                        break;
                      v157 = v153 != v154 && v155 == v154;
                      if (!v157 && HIDWORD(v136) + (int)v136 > a1[9] + a1[8])
                        break;
                    }
                    goto LABEL_245;
                  }
                }
                else
                {
                  v143 = HIDWORD(v136) + v136;
                }
                do
                {
                  a1 += 36;
                  v144 = sub_2395D7BEC(*(_QWORD *)a3, v133);
                  v145 = sub_2395D7BEC(*(_QWORD *)a3, *a1);
                  v146 = *((_DWORD *)v144 + 49);
                  v147 = **(_DWORD **)(a3 + 8);
                  v148 = *((_DWORD *)v145 + 49);
                  if (v146 == v147 && v148 != v147)
                    break;
                  v150 = v146 != v147 && v148 == v147;
                }
                while (v150 || v143 <= a1[9] + a1[8]);
LABEL_245:
                a2 = (unsigned int *)v468;
                i = v468;
                if ((unint64_t)a1 < v468)
                {
                  for (i = (unint64_t)v479; ; i -= 144)
                  {
                    v159 = sub_2395D7BEC(*(_QWORD *)a3, v133);
                    v160 = sub_2395D7BEC(*(_QWORD *)a3, *(_DWORD *)i);
                    v161 = *((_DWORD *)v159 + 49);
                    v162 = **(_DWORD **)(a3 + 8);
                    v163 = *((_DWORD *)v160 + 49);
                    if (v161 != v162 || v163 == v162)
                    {
                      v165 = v161 != v162 && v163 == v162;
                      if (v165
                        || HIDWORD(v136) + (int)v136 <= (*(_DWORD *)(i + 36) + *(_DWORD *)(i + 32)))
                      {
                        break;
                      }
                    }
                  }
                  a2 = (unsigned int *)v468;
                }
                if ((unint64_t)a1 >= i)
                  goto LABEL_364;
                v166 = HIDWORD(v136) + v136;
                LODWORD(v167) = *a1;
                LODWORD(v168) = *(_DWORD *)i;
                while (2)
                {
                  *a1 = v168;
                  *(_DWORD *)i = v167;
                  v169 = *(_OWORD *)(a1 + 2);
                  v170 = *((_QWORD *)a1 + 3);
                  v171 = *((_QWORD *)a1 + 4);
                  *((_QWORD *)a1 + 2) = 0;
                  *((_QWORD *)a1 + 3) = 0;
                  *((_QWORD *)a1 + 1) = 0;
                  v544 = *(_OWORD *)(a1 + 14);
                  v552 = *(_OWORD *)(a1 + 18);
                  v512 = *(_OWORD *)(a1 + 22);
                  v520 = *(_OWORD *)(a1 + 26);
                  v528 = *(_OWORD *)(a1 + 30);
                  v536 = *(_OWORD *)(a1 + 10);
                  v172 = a1[34];
                  *(_OWORD *)(a1 + 2) = *(_OWORD *)(i + 8);
                  *((_QWORD *)a1 + 3) = *(_QWORD *)(i + 24);
                  *(_QWORD *)(i + 8) = 0;
                  *(_QWORD *)(i + 16) = 0;
                  *(_QWORD *)(i + 24) = 0;
                  *((_QWORD *)a1 + 4) = *(_QWORD *)(i + 32);
                  v173 = *(_OWORD *)(i + 40);
                  v174 = *(_OWORD *)(i + 56);
                  *(_OWORD *)(a1 + 18) = *(_OWORD *)(i + 72);
                  *(_OWORD *)(a1 + 14) = v174;
                  *(_OWORD *)(a1 + 10) = v173;
                  v175 = *(_OWORD *)(i + 88);
                  v176 = *(_OWORD *)(i + 104);
                  *(_OWORD *)(a1 + 30) = *(_OWORD *)(i + 120);
                  *(_OWORD *)(a1 + 26) = v176;
                  *(_OWORD *)(a1 + 22) = v175;
                  a1[34] = *(_DWORD *)(i + 136);
                  v177 = *(void **)(i + 8);
                  if (v177)
                  {
                    *(_QWORD *)(i + 16) = v177;
                    v485 = v169;
                    operator delete(v177);
                    v169 = v485;
                  }
                  *(_OWORD *)(i + 8) = v169;
                  *(_QWORD *)(i + 24) = v170;
                  *(_QWORD *)(i + 32) = v171;
                  *(_OWORD *)(i + 40) = v536;
                  *(_OWORD *)(i + 56) = v544;
                  *(_OWORD *)(i + 72) = v552;
                  *(_OWORD *)(i + 88) = v512;
                  *(_OWORD *)(i + 104) = v520;
                  *(_OWORD *)(i + 120) = v528;
                  *(_DWORD *)(i + 136) = v172;
                  v178 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
                  a2 = (unsigned int *)v468;
                  if (!*(_QWORD *)&v178)
                  {
LABEL_728:
                    sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                  v179 = (uint8x8_t)vcnt_s8(v178);
                  v179.i16[0] = vaddlv_u8(v179);
                  v180 = *(_QWORD *)&v178 - 1;
                  v181 = v179.u32[0] < 2uLL;
                  v182 = *(_QWORD *)(*(_QWORD *)a3 + 72);
                  v183 = 0xFFFFFFFFLL;
                  v184 = *(_QWORD *)&v178 + 0xFFFFFFFFLL;
                  if (v179.u32[0] < 2uLL)
                    v183 = *(_QWORD *)&v178 + 0xFFFFFFFFLL;
                  if (*(_QWORD *)&v178 > v133)
                    v181 = 1;
                  v186 = v183 & v133;
                  while (2)
                  {
                    v187 = a1;
                    v188 = v186;
                    if (!v181)
                      v188 = v133 % *(_QWORD *)&v178;
                    v189 = *(uint64_t ***)(v182 + 8 * v188);
                    if (!v189)
                      goto LABEL_728;
                    v190 = *v189;
                    if (!v190)
                      goto LABEL_728;
                    if (v179.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v191 = v190[1];
                        if (v191 == v133)
                        {
                          if (*((_DWORD *)v190 + 4) == (_DWORD)v133)
                            goto LABEL_280;
                        }
                        else if ((v191 & v180) != v188)
                        {
                          goto LABEL_728;
                        }
                        v190 = (uint64_t *)*v190;
                        if (!v190)
                          goto LABEL_728;
                      }
                    }
                    while (1)
                    {
                      v193 = v190[1];
                      if (v193 == v133)
                        break;
                      if (v193 >= *(_QWORD *)&v178)
                        v193 %= *(_QWORD *)&v178;
                      if (v193 != v188)
                        goto LABEL_728;
LABEL_283:
                      v190 = (uint64_t *)*v190;
                      if (!v190)
                        goto LABEL_728;
                    }
                    if (*((_DWORD *)v190 + 4) != (_DWORD)v133)
                      goto LABEL_283;
LABEL_280:
                    a1 += 36;
                    v167 = v187[36];
                    if (v179.u32[0] > 1uLL)
                    {
                      v192 = v187[36];
                      if (*(_QWORD *)&v178 <= v167)
                        v192 = v167 % *(_QWORD *)&v178;
                    }
                    else
                    {
                      v192 = v184 & v167;
                    }
                    v194 = *(uint64_t ***)(v182 + 8 * v192);
                    if (!v194 || (v195 = *v194) == 0)
                    {
LABEL_732:
                      sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                      sub_239A4475C();
                      abort();
                    }
                    if (v179.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v196 = v195[1];
                        if (v196 == v167)
                        {
                          if (*((_DWORD *)v195 + 4) == (_DWORD)v167)
                            goto LABEL_299;
                        }
                        else if ((v196 & v180) != v192)
                        {
                          goto LABEL_732;
                        }
                        v195 = (uint64_t *)*v195;
                        if (!v195)
                          goto LABEL_732;
                      }
                    }
                    while (2)
                    {
                      v202 = v195[1];
                      if (v202 != v167)
                      {
                        if (v202 >= *(_QWORD *)&v178)
                          v202 %= *(_QWORD *)&v178;
                        if (v202 != v192)
                          goto LABEL_732;
LABEL_311:
                        v195 = (uint64_t *)*v195;
                        if (!v195)
                          goto LABEL_732;
                        continue;
                      }
                      break;
                    }
                    if (*((_DWORD *)v195 + 4) != (_DWORD)v167)
                      goto LABEL_311;
LABEL_299:
                    v197 = *((_DWORD *)v190 + 55);
                    v185 = *(int **)(a3 + 8);
                    v198 = *v185;
                    v199 = *((_DWORD *)v195 + 55);
                    if (v197 != *v185 || v199 == v198)
                    {
                      v201 = v197 != v198 && v199 == v198;
                      if (!v201 && v166 > v187[45] + v187[44])
                      {
                        v197 = *v185;
                        break;
                      }
                      continue;
                    }
                    break;
                  }
                  while (2)
                  {
                    while (2)
                    {
                      v205 = i;
                      v206 = v186;
                      if (!v181)
                        v206 = v133 % *(_QWORD *)&v178;
                      v207 = *(uint64_t ***)(v182 + 8 * v206);
                      if (!v207)
                        goto LABEL_728;
                      v208 = *v207;
                      if (!v208)
                        goto LABEL_728;
                      if (v179.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v209 = v208[1];
                          if (v209 == v133)
                          {
                            if (*((_DWORD *)v208 + 4) == (_DWORD)v133)
                              goto LABEL_334;
                          }
                          else if ((v209 & v180) != v206)
                          {
                            goto LABEL_728;
                          }
                          v208 = (uint64_t *)*v208;
                          if (!v208)
                            goto LABEL_728;
                        }
                      }
                      while (2)
                      {
                        v211 = v208[1];
                        if (v211 != v133)
                        {
                          if (v211 >= *(_QWORD *)&v178)
                            v211 %= *(_QWORD *)&v178;
                          if (v211 != v206)
                            goto LABEL_728;
LABEL_337:
                          v208 = (uint64_t *)*v208;
                          if (!v208)
                            goto LABEL_728;
                          continue;
                        }
                        break;
                      }
                      if (*((_DWORD *)v208 + 4) != (_DWORD)v133)
                        goto LABEL_337;
LABEL_334:
                      i -= 144;
                      v168 = *(unsigned int *)(v205 - 144);
                      if (v179.u32[0] > 1uLL)
                      {
                        v210 = *(unsigned int *)(v205 - 144);
                        if (*(_QWORD *)&v178 <= v168)
                          v210 = v168 % *(_QWORD *)&v178;
                      }
                      else
                      {
                        v210 = v184 & v168;
                      }
                      v212 = *(uint64_t ***)(v182 + 8 * v210);
                      if (!v212 || (v203 = *v212) == 0)
                      {
LABEL_729:
                        sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                        sub_239A4475C();
                        abort();
                      }
                      if (v179.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v213 = v203[1];
                          if (v213 == v168)
                          {
                            if (*((_DWORD *)v203 + 4) == (_DWORD)v168)
                              goto LABEL_353;
                          }
                          else if ((v213 & v180) != v210)
                          {
                            goto LABEL_729;
                          }
                          v203 = (uint64_t *)*v203;
                          if (!v203)
                            goto LABEL_729;
                        }
                      }
                      while (2)
                      {
                        v204 = v203[1];
                        if (v204 != v168)
                        {
                          if (v204 >= *(_QWORD *)&v178)
                            v204 %= *(_QWORD *)&v178;
                          if (v204 != v210)
                            goto LABEL_729;
LABEL_318:
                          v203 = (uint64_t *)*v203;
                          if (!v203)
                            goto LABEL_729;
                          continue;
                        }
                        break;
                      }
                      if (*((_DWORD *)v203 + 4) != (_DWORD)v168)
                        goto LABEL_318;
LABEL_353:
                      v214 = *((_DWORD *)v208 + 55);
                      v215 = *((_DWORD *)v203 + 55);
                      if (v214 == v197 && v215 != v197)
                        continue;
                      break;
                    }
                    v217 = v214 != v197 && v215 == v197;
                    if (!v217 && v166 > *(_DWORD *)(v205 - 108) + *(_DWORD *)(v205 - 112))
                      continue;
                    break;
                  }
                  if ((unint64_t)a1 < i)
                    continue;
                  break;
                }
LABEL_364:
                a4 = v470;
                if (a1 - 36 != (unsigned int *)v483)
                {
                  *(_DWORD *)v483 = *(a1 - 36);
                  v218 = *(void **)(v483 + 8);
                  if (v218)
                  {
                    *(_QWORD *)(v483 + 16) = v218;
                    operator delete(v218);
                    *v134 = 0;
                    v134[1] = 0;
                    v134[2] = 0;
                  }
                  *(_OWORD *)(v483 + 8) = *(_OWORD *)(a1 - 34);
                  *(_QWORD *)(v483 + 24) = *((_QWORD *)a1 - 15);
                  *((_QWORD *)a1 - 17) = 0;
                  *((_QWORD *)a1 - 16) = 0;
                  *((_QWORD *)a1 - 15) = 0;
                  *(_QWORD *)(v483 + 32) = *((_QWORD *)a1 - 14);
                  v219 = *(_OWORD *)(a1 - 26);
                  v220 = *(_OWORD *)(a1 - 18);
                  *(_OWORD *)(v483 + 56) = *(_OWORD *)(a1 - 22);
                  *(_OWORD *)(v483 + 72) = v220;
                  *(_OWORD *)(v483 + 40) = v219;
                  v221 = *(_OWORD *)(a1 - 14);
                  v222 = *(_OWORD *)(a1 - 6);
                  *(_OWORD *)(v483 + 104) = *(_OWORD *)(a1 - 10);
                  *(_OWORD *)(v483 + 120) = v222;
                  *(_OWORD *)(v483 + 88) = v221;
                  *(_DWORD *)(v483 + 136) = *(a1 - 2);
                }
                v223 = (void *)*((_QWORD *)a1 - 17);
                *(a1 - 36) = v133;
                if (v223)
                {
                  *((_QWORD *)a1 - 16) = v223;
                  operator delete(v223);
                  *((_QWORD *)a1 - 17) = 0;
                  *((_QWORD *)a1 - 16) = 0;
                  *((_QWORD *)a1 - 15) = 0;
                }
                a5 = 0;
                *(_OWORD *)(a1 - 34) = v475;
                *((_QWORD *)a1 - 15) = v135;
                *((_QWORD *)a1 - 14) = v136;
                *(_OWORD *)(a1 - 18) = v508;
                *(_OWORD *)(a1 - 22) = v505;
                *(_OWORD *)(a1 - 26) = v502;
                *(_OWORD *)(a1 - 6) = v499;
                *(_OWORD *)(a1 - 10) = v496;
                *(_OWORD *)(a1 - 14) = v493;
                *(a1 - 2) = v137;
                continue;
              }
            }
          }
          v31 = *a1;
          v32 = a1 + 2;
          v474 = *(_OWORD *)(a1 + 2);
          v33 = *((_QWORD *)a1 + 3);
          v34 = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 2) = 0;
          *((_QWORD *)a1 + 3) = 0;
          *((_QWORD *)a1 + 1) = 0;
          v504 = *(_OWORD *)(a1 + 14);
          v507 = *(_OWORD *)(a1 + 18);
          v492 = *(_OWORD *)(a1 + 22);
          v495 = *(_OWORD *)(a1 + 26);
          v498 = *(_OWORD *)(a1 + 30);
          v501 = *(_OWORD *)(a1 + 10);
          v35 = *(_QWORD *)a3;
          v36 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
          if (!*(_QWORD *)&v36)
          {
LABEL_726:
            sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v37 = a1[34];
          v38 = HIDWORD(v34) + v34;
          v39 = (uint8x8_t)vcnt_s8(v36);
          v39.i16[0] = vaddlv_u8(v39);
          v40 = *(_QWORD *)(v35 + 72);
          v41 = *(_QWORD *)&v36 - 1;
          v42 = a1;
          while (1)
          {
            v43 = v42;
            v45 = v42[36];
            v42 += 36;
            v44 = v45;
            if (v39.u32[0] > 1uLL)
            {
              v46 = v44;
              if (*(_QWORD *)&v36 <= v44)
                v46 = v44 % *(_QWORD *)&v36;
            }
            else
            {
              v46 = (*(_QWORD *)&v36 + 0xFFFFFFFFLL) & v44;
            }
            v47 = *(uint64_t ***)(v40 + 8 * v46);
            if (!v47)
              goto LABEL_726;
            v48 = *v47;
            if (!v48)
              goto LABEL_726;
            if (v39.u32[0] < 2uLL)
            {
              while (1)
              {
                v49 = v48[1];
                if (v49 == v44)
                {
                  if (*((_DWORD *)v48 + 4) == (_DWORD)v44)
                  {
                    v50 = (*(_QWORD *)&v36 + 0xFFFFFFFFLL) & v31;
                    goto LABEL_44;
                  }
                }
                else if ((v49 & v41) != v46)
                {
                  goto LABEL_726;
                }
                v48 = (uint64_t *)*v48;
                if (!v48)
                  goto LABEL_726;
              }
            }
            while (1)
            {
              v51 = v48[1];
              if (v51 == v44)
                break;
              if (v51 >= *(_QWORD *)&v36)
                v51 %= *(_QWORD *)&v36;
              if (v51 != v46)
                goto LABEL_726;
LABEL_35:
              v48 = (uint64_t *)*v48;
              if (!v48)
                goto LABEL_726;
            }
            if (*((_DWORD *)v48 + 4) != (_DWORD)v44)
              goto LABEL_35;
            if (*(_QWORD *)&v36 <= v31)
              v50 = v31 % *(_QWORD *)&v36;
            else
              v50 = v31;
LABEL_44:
            v52 = *(uint64_t ***)(v40 + 8 * v50);
            if (!v52)
              goto LABEL_726;
            v53 = *v52;
            if (!v53)
              goto LABEL_726;
            if (v39.u32[0] < 2uLL)
            {
              while (1)
              {
                v54 = v53[1];
                if (v54 == v31)
                {
                  if (*((_DWORD *)v53 + 4) == (_DWORD)v31)
                    goto LABEL_52;
                }
                else if ((v54 & v41) != v50)
                {
                  goto LABEL_726;
                }
                v53 = (uint64_t *)*v53;
                if (!v53)
                  goto LABEL_726;
              }
            }
            while (2)
            {
              v60 = v53[1];
              if (v60 != v31)
              {
                if (v60 >= *(_QWORD *)&v36)
                  v60 %= *(_QWORD *)&v36;
                if (v60 != v50)
                  goto LABEL_726;
LABEL_64:
                v53 = (uint64_t *)*v53;
                if (!v53)
                  goto LABEL_726;
                continue;
              }
              break;
            }
            if (*((_DWORD *)v53 + 4) != (_DWORD)v31)
              goto LABEL_64;
LABEL_52:
            v55 = *((_DWORD *)v48 + 55);
            v56 = **(_DWORD **)(a3 + 8);
            v57 = *((_DWORD *)v53 + 55);
            if (v55 != v56 || v57 == v56)
            {
              v59 = v55 != v56 && v57 == v56;
              if (v59 || v43[45] + v43[44] <= v38)
                break;
            }
          }
          v457 = a1 + 10;
          v458 = a1 + 22;
          v462 = v34;
          v465 = v33;
          if (v43 == a1)
          {
            j = a2;
            if (v42 < a2)
            {
              for (j = v479; ; j -= 36)
              {
                v69 = sub_2395D7BEC(v35, *j);
                v70 = sub_2395D7BEC(*(_QWORD *)a3, v31);
                v71 = *((_DWORD *)v69 + 49);
                v72 = **(_DWORD **)(a3 + 8);
                v73 = *((_DWORD *)v70 + 49);
                if (v71 == v72 && v73 != v72)
                  break;
                if (v71 != v72 && v73 == v72)
                {
                  if (v42 >= j)
                    break;
                }
                else if (v42 >= j || j[9] + j[8] > v38)
                {
                  break;
                }
                v35 = *(_QWORD *)a3;
              }
            }
          }
          else
          {
            for (j = v479; ; j -= 36)
            {
              v62 = sub_2395D7BEC(v35, *j);
              v63 = sub_2395D7BEC(*(_QWORD *)a3, v31);
              v64 = *((_DWORD *)v62 + 49);
              v65 = **(_DWORD **)(a3 + 8);
              v66 = *((_DWORD *)v63 + 49);
              if (v64 == v65 && v66 != v65)
                break;
              v68 = v64 != v65 && v66 == v65;
              if (!v68 && j[9] + j[8] > v38)
                break;
              v35 = *(_QWORD *)a3;
            }
          }
          if (v42 < j)
          {
            LODWORD(v76) = *v42;
            LODWORD(v77) = *j;
            a1 = v42;
            v78 = j;
            while (1)
            {
              *a1 = v77;
              *v78 = v76;
              v79 = *(_OWORD *)(a1 + 2);
              v80 = *((_QWORD *)a1 + 3);
              v81 = *((_QWORD *)a1 + 4);
              *((_QWORD *)a1 + 2) = 0;
              *((_QWORD *)a1 + 3) = 0;
              *((_QWORD *)a1 + 1) = 0;
              v543 = *(_OWORD *)(a1 + 14);
              v551 = *(_OWORD *)(a1 + 18);
              v511 = *(_OWORD *)(a1 + 22);
              v519 = *(_OWORD *)(a1 + 26);
              v527 = *(_OWORD *)(a1 + 30);
              v535 = *(_OWORD *)(a1 + 10);
              v82 = a1[34];
              *(_OWORD *)(a1 + 2) = *(_OWORD *)(v78 + 2);
              *((_QWORD *)a1 + 3) = *((_QWORD *)v78 + 3);
              *((_QWORD *)v78 + 1) = 0;
              *((_QWORD *)v78 + 2) = 0;
              *((_QWORD *)v78 + 3) = 0;
              *((_QWORD *)a1 + 4) = *((_QWORD *)v78 + 4);
              v83 = *(_OWORD *)(v78 + 10);
              v84 = *(_OWORD *)(v78 + 14);
              *(_OWORD *)(a1 + 18) = *(_OWORD *)(v78 + 18);
              *(_OWORD *)(a1 + 14) = v84;
              *(_OWORD *)(a1 + 10) = v83;
              v85 = *(_OWORD *)(v78 + 22);
              v86 = *(_OWORD *)(v78 + 26);
              *(_OWORD *)(a1 + 30) = *(_OWORD *)(v78 + 30);
              *(_OWORD *)(a1 + 26) = v86;
              *(_OWORD *)(a1 + 22) = v85;
              a1[34] = v78[34];
              v87 = (void *)*((_QWORD *)v78 + 1);
              if (v87)
              {
                *((_QWORD *)v78 + 2) = v87;
                v484 = v79;
                operator delete(v87);
                v79 = v484;
              }
              *(_OWORD *)(v78 + 2) = v79;
              *((_QWORD *)v78 + 3) = v80;
              *((_QWORD *)v78 + 4) = v81;
              *(_OWORD *)(v78 + 10) = v535;
              *(_OWORD *)(v78 + 14) = v543;
              *(_OWORD *)(v78 + 18) = v551;
              *(_OWORD *)(v78 + 22) = v511;
              *(_OWORD *)(v78 + 26) = v519;
              *(_OWORD *)(v78 + 30) = v527;
              v78[34] = v82;
              v88 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
              if (!*(_QWORD *)&v88)
              {
LABEL_387:
                sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              v89 = (uint8x8_t)vcnt_s8(v88);
              v89.i16[0] = vaddlv_u8(v89);
              v90 = *(_QWORD *)(*(_QWORD *)a3 + 72);
              v91 = *(_QWORD *)&v88 + 0xFFFFFFFFLL;
              v92 = *(_QWORD *)&v88 - 1;
              while (1)
              {
                v93 = a1;
                v94 = a1[36];
                a1 += 36;
                v76 = v94;
                if (v89.u32[0] > 1uLL)
                {
                  v95 = v76;
                  if (*(_QWORD *)&v88 <= v76)
                    v95 = v76 % *(_QWORD *)&v88;
                }
                else
                {
                  v95 = v91 & v76;
                }
                v96 = *(uint64_t ***)(v90 + 8 * v95);
                if (!v96)
                  goto LABEL_387;
                v97 = *v96;
                if (!v97)
                  goto LABEL_387;
                if (v89.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v98 = v97[1];
                    if (v98 == v76)
                    {
                      if (*((_DWORD *)v97 + 4) == (_DWORD)v76)
                      {
                        v99 = (*(_QWORD *)&v88 + 0xFFFFFFFFLL) & v31;
                        goto LABEL_129;
                      }
                    }
                    else if ((v98 & v92) != v95)
                    {
                      goto LABEL_387;
                    }
                    v97 = (uint64_t *)*v97;
                    if (!v97)
                      goto LABEL_387;
                  }
                }
                while (1)
                {
                  v100 = v97[1];
                  if (v100 == v76)
                    break;
                  if (v100 >= *(_QWORD *)&v88)
                    v100 %= *(_QWORD *)&v88;
                  if (v100 != v95)
                    goto LABEL_387;
LABEL_120:
                  v97 = (uint64_t *)*v97;
                  if (!v97)
                    goto LABEL_387;
                }
                if (*((_DWORD *)v97 + 4) != (_DWORD)v76)
                  goto LABEL_120;
                if (*(_QWORD *)&v88 <= v31)
                  v99 = v31 % *(_QWORD *)&v88;
                else
                  v99 = v31;
LABEL_129:
                v101 = *(uint64_t ***)(v90 + 8 * v99);
                if (!v101 || (v102 = *v101) == 0)
                {
LABEL_388:
                  sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                if (v89.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v103 = v102[1];
                    if (v103 == v31)
                    {
                      if (*((_DWORD *)v102 + 4) == (_DWORD)v31)
                        goto LABEL_137;
                    }
                    else if ((v103 & v92) != v99)
                    {
                      goto LABEL_388;
                    }
                    v102 = (uint64_t *)*v102;
                    if (!v102)
                      goto LABEL_388;
                  }
                }
                while (2)
                {
                  v109 = v102[1];
                  if (v109 != v31)
                  {
                    if (v109 >= *(_QWORD *)&v88)
                      v109 %= *(_QWORD *)&v88;
                    if (v109 != v99)
                      goto LABEL_388;
LABEL_149:
                    v102 = (uint64_t *)*v102;
                    if (!v102)
                      goto LABEL_388;
                    continue;
                  }
                  break;
                }
                if (*((_DWORD *)v102 + 4) != (_DWORD)v31)
                  goto LABEL_149;
LABEL_137:
                v104 = *((_DWORD *)v97 + 55);
                v105 = **(_DWORD **)(a3 + 8);
                v106 = *((_DWORD *)v102 + 55);
                if (v104 != v105 || v106 == v105)
                {
                  v108 = v104 != v105 && v106 == v105;
                  if (v108 || v93[45] + v93[44] <= v38)
                    break;
                }
              }
              while (2)
              {
                v112 = v78;
                v113 = *(v78 - 36);
                v78 -= 36;
                v77 = v113;
                if (v89.u32[0] > 1uLL)
                {
                  v114 = v77;
                  if (*(_QWORD *)&v88 <= v77)
                    v114 = v77 % *(_QWORD *)&v88;
                }
                else
                {
                  v114 = v91 & v77;
                }
                v115 = *(uint64_t ***)(v90 + 8 * v114);
                if (!v115)
                  goto LABEL_387;
                v116 = *v115;
                if (!v116)
                  goto LABEL_387;
                if (v89.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v117 = v116[1];
                    if (v117 == v77)
                    {
                      if (*((_DWORD *)v116 + 4) == (_DWORD)v77)
                      {
                        v118 = (*(_QWORD *)&v88 + 0xFFFFFFFFLL) & v31;
                        goto LABEL_185;
                      }
                    }
                    else if ((v117 & v92) != v114)
                    {
                      goto LABEL_387;
                    }
                    v116 = (uint64_t *)*v116;
                    if (!v116)
                      goto LABEL_387;
                  }
                }
                while (2)
                {
                  v119 = v116[1];
                  if (v119 != v77)
                  {
                    if (v119 >= *(_QWORD *)&v88)
                      v119 %= *(_QWORD *)&v88;
                    if (v119 != v114)
                      goto LABEL_387;
LABEL_176:
                    v116 = (uint64_t *)*v116;
                    if (!v116)
                      goto LABEL_387;
                    continue;
                  }
                  break;
                }
                if (*((_DWORD *)v116 + 4) != (_DWORD)v77)
                  goto LABEL_176;
                if (*(_QWORD *)&v88 <= v31)
                  v118 = v31 % *(_QWORD *)&v88;
                else
                  v118 = v31;
LABEL_185:
                v120 = *(uint64_t ***)(v90 + 8 * v118);
                if (!v120 || (v110 = *v120) == 0)
                {
LABEL_527:
                  sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                if (v89.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v121 = v110[1];
                    if (v121 == v31)
                    {
                      if (*((_DWORD *)v110 + 4) == (_DWORD)v31)
                        goto LABEL_193;
                    }
                    else if ((v121 & v92) != v118)
                    {
                      goto LABEL_527;
                    }
                    v110 = (uint64_t *)*v110;
                    if (!v110)
                      goto LABEL_527;
                  }
                }
                while (2)
                {
                  v111 = v110[1];
                  if (v111 != v31)
                  {
                    if (v111 >= *(_QWORD *)&v88)
                      v111 %= *(_QWORD *)&v88;
                    if (v111 != v118)
                      goto LABEL_527;
LABEL_156:
                    v110 = (uint64_t *)*v110;
                    if (!v110)
                      goto LABEL_527;
                    continue;
                  }
                  break;
                }
                if (*((_DWORD *)v110 + 4) != (_DWORD)v31)
                  goto LABEL_156;
LABEL_193:
                v122 = *((_DWORD *)v116 + 55);
                v123 = *((_DWORD *)v110 + 55);
                if (v122 != v105 || v123 == v105)
                {
                  v125 = v122 != v105 && v123 == v105;
                  if (v125 || *(v112 - 27) + *(v112 - 28) <= v38)
                    continue;
                }
                break;
              }
              if (a1 >= v78)
                goto LABEL_205;
            }
          }
          a1 = v42;
LABEL_205:
          a4 = v470;
          if (a1 - 36 != (unsigned int *)v483)
          {
            *(_DWORD *)v483 = *(a1 - 36);
            v126 = *(void **)(v483 + 8);
            if (v126)
            {
              *(_QWORD *)(v483 + 16) = v126;
              operator delete(v126);
              *v32 = 0;
              v32[1] = 0;
              v32[2] = 0;
            }
            *(_OWORD *)(v483 + 8) = *(_OWORD *)(a1 - 34);
            *(_QWORD *)(v483 + 24) = *((_QWORD *)a1 - 15);
            *((_QWORD *)a1 - 17) = 0;
            *((_QWORD *)a1 - 16) = 0;
            *((_QWORD *)a1 - 15) = 0;
            *(_QWORD *)(v483 + 32) = *((_QWORD *)a1 - 14);
            v127 = *(_OWORD *)(a1 - 26);
            v128 = *(_OWORD *)(a1 - 18);
            v457[1] = *(_OWORD *)(a1 - 22);
            v457[2] = v128;
            *v457 = v127;
            v129 = *(_OWORD *)(a1 - 14);
            v130 = *(_OWORD *)(a1 - 6);
            v458[1] = *(_OWORD *)(a1 - 10);
            v458[2] = v130;
            *v458 = v129;
            *(_DWORD *)(v483 + 136) = *(a1 - 2);
          }
          v131 = (void *)*((_QWORD *)a1 - 17);
          *(a1 - 36) = v31;
          if (v131)
          {
            *((_QWORD *)a1 - 16) = v131;
            operator delete(v131);
            *((_QWORD *)a1 - 17) = 0;
            *((_QWORD *)a1 - 16) = 0;
            *((_QWORD *)a1 - 15) = 0;
          }
          *(_OWORD *)(a1 - 34) = v474;
          a2 = (unsigned int *)v468;
          *((_QWORD *)a1 - 15) = v465;
          *((_QWORD *)a1 - 14) = v462;
          *(_OWORD *)(a1 - 18) = v507;
          *(_OWORD *)(a1 - 22) = v504;
          *(_OWORD *)(a1 - 26) = v501;
          *(_OWORD *)(a1 - 6) = v498;
          *(_OWORD *)(a1 - 10) = v495;
          *(_OWORD *)(a1 - 14) = v492;
          *(a1 - 2) = v37;
          if (v42 < j)
          {
LABEL_214:
            sub_239CA23BC(v483, a1 - 36, a3, v470, a5 & 1);
            a5 = 0;
            continue;
          }
          v132 = sub_239CA6370(v483, (uint64_t)(a1 - 36), a3);
          if (!sub_239CA6370((uint64_t)a1, v468, a3))
          {
            if (!v132)
              goto LABEL_214;
            continue;
          }
          a2 = a1 - 36;
          a1 = (unsigned int *)v483;
          if (v132)
            return;
          goto LABEL_1;
        }
        v241 = a1 + 36;
        v243 = a1 == a2 || v241 == a2;
        if ((a5 & 1) == 0)
        {
          if (v243)
            return;
          while (1)
          {
            v415 = a1;
            a1 = v241;
            v416 = sub_2395D7BEC(*(_QWORD *)a3, v415[36]);
            v417 = sub_2395D7BEC(*(_QWORD *)a3, *v415);
            v418 = *((_DWORD *)v416 + 49);
            v419 = **(_DWORD **)(a3 + 8);
            v420 = *((_DWORD *)v417 + 49);
            if (v418 == v419 && v420 != v419)
              break;
            v422 = v418 != v419 && v420 == v419;
            if (!v422 && v415[45] + v415[44] > v415[9] + v415[8])
              break;
LABEL_660:
            v241 = a1 + 36;
            if (a1 + 36 == a2)
              return;
          }
          v423 = *a1;
          v491 = *(_OWORD *)(v415 + 38);
          *((_QWORD *)v415 + 19) = 0;
          *((_QWORD *)v415 + 20) = 0;
          v424 = *((_QWORD *)v415 + 21);
          v425 = *((_QWORD *)v415 + 22);
          *((_QWORD *)v415 + 21) = 0;
          v549 = *(_OWORD *)(v415 + 50);
          v557 = *(_OWORD *)(v415 + 54);
          v517 = *(_OWORD *)(v415 + 58);
          v525 = *(_OWORD *)(v415 + 62);
          v533 = *(_OWORD *)(v415 + 66);
          v541 = *(_OWORD *)(v415 + 46);
          v426 = v415[70];
          v427 = a1;
          v428 = a1;
          LODWORD(v429) = *v415;
LABEL_672:
          v430 = v415;
          *v428 = v429;
          v431 = (void *)*((_QWORD *)v428 + 1);
          if (v431)
          {
            *((_QWORD *)v428 + 2) = v431;
            operator delete(v431);
            *((_QWORD *)v428 + 1) = 0;
            *((_QWORD *)v428 + 2) = 0;
            *((_QWORD *)v428 + 3) = 0;
          }
          v432 = v415 + 2;
          *(_OWORD *)(v428 + 2) = *(_OWORD *)(v415 + 2);
          *((_QWORD *)v428 + 3) = *((_QWORD *)v415 + 3);
          *((_QWORD *)v415 + 2) = 0;
          *((_QWORD *)v415 + 3) = 0;
          *((_QWORD *)v415 + 1) = 0;
          *((_QWORD *)v428 + 4) = *((_QWORD *)v415 + 4);
          *(_OWORD *)(v428 + 18) = *(_OWORD *)(v415 + 18);
          v433 = *(_OWORD *)(v415 + 10);
          *(_OWORD *)(v428 + 14) = *(_OWORD *)(v415 + 14);
          *(_OWORD *)(v428 + 10) = v433;
          *(_OWORD *)(v428 + 30) = *(_OWORD *)(v415 + 30);
          v434 = *(_OWORD *)(v415 + 22);
          *(_OWORD *)(v428 + 26) = *(_OWORD *)(v415 + 26);
          *(_OWORD *)(v428 + 22) = v434;
          v428[34] = v415[34];
          v435 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
          if (v435)
          {
            v436 = (uint8x8_t)vcnt_s8(v435);
            v436.i16[0] = vaddlv_u8(v436);
            if (v436.u32[0] > 1uLL)
            {
              v437 = v423;
              if (*(_QWORD *)&v435 <= v423)
                v437 = v423 % *(_QWORD *)&v435;
            }
            else
            {
              v437 = (v435.i32[0] - 1) & v423;
            }
            v438 = *(_QWORD *)(*(_QWORD *)a3 + 72);
            v439 = *(uint64_t ***)(v438 + 8 * v437);
            if (v439)
            {
              v440 = *v439;
              if (v440)
              {
                v441 = *(_QWORD *)&v435 - 1;
                if (v436.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v442 = v440[1];
                    if (v442 == v423)
                    {
                      if (*((_DWORD *)v440 + 4) == (_DWORD)v423)
                        goto LABEL_687;
                    }
                    else if ((v442 & v441) != v437)
                    {
                      goto LABEL_730;
                    }
                    v440 = (uint64_t *)*v440;
                    if (!v440)
                      goto LABEL_730;
                  }
                }
                do
                {
                  v444 = v440[1];
                  if (v444 == v423)
                  {
                    if (*((_DWORD *)v440 + 4) == (_DWORD)v423)
                    {
LABEL_687:
                      v415 -= 36;
                      v429 = *(v430 - 36);
                      if (v436.u32[0] > 1uLL)
                      {
                        v443 = *(v430 - 36);
                        if (*(_QWORD *)&v435 <= v429)
                          v443 = v429 % *(_QWORD *)&v435;
                      }
                      else
                      {
                        v443 = (v435.i32[0] - 1) & v429;
                      }
                      v445 = *(uint64_t ***)(v438 + 8 * v443);
                      if (!v445 || (v446 = *v445) == 0)
                      {
LABEL_731:
                        sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                        sub_239A4475C();
                        abort();
                      }
                      if (v436.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v447 = v446[1];
                          if (v447 == v429)
                          {
                            if (*((_DWORD *)v446 + 4) == (_DWORD)v429)
                              goto LABEL_706;
                          }
                          else if ((v447 & v441) != v443)
                          {
                            goto LABEL_731;
                          }
                          v446 = (uint64_t *)*v446;
                          if (!v446)
                            goto LABEL_731;
                        }
                      }
                      while (1)
                      {
                        v453 = v446[1];
                        if (v453 == v429)
                        {
                          if (*((_DWORD *)v446 + 4) == (_DWORD)v429)
                          {
LABEL_706:
                            v448 = *((_DWORD *)v440 + 55);
                            v449 = **(_DWORD **)(a3 + 8);
                            v450 = *((_DWORD *)v446 + 55);
                            v451 = v448 != v449 || v450 == v449;
                            v428 = v430;
                            if (v451)
                            {
                              v452 = v448 != v449 && v450 == v449;
                              if (v452 || (v428 = v430, HIDWORD(v425) + (int)v425 <= *(v430 - 27) + *(v430 - 28)))
                              {
                                *v430 = v423;
                                v454 = (void *)*((_QWORD *)v430 + 1);
                                if (v454)
                                {
                                  *((_QWORD *)v430 + 2) = v454;
                                  operator delete(v454);
                                  *v432 = 0;
                                  *((_QWORD *)v430 + 2) = 0;
                                  *((_QWORD *)v430 + 3) = 0;
                                }
                                *(_OWORD *)(v430 + 2) = v491;
                                *((_QWORD *)v430 + 3) = v424;
                                *((_QWORD *)v430 + 4) = v425;
                                *(_OWORD *)(v430 + 10) = v541;
                                *(_OWORD *)(v430 + 14) = v549;
                                *(_OWORD *)(v430 + 18) = v557;
                                *(_OWORD *)(v430 + 22) = v517;
                                *(_OWORD *)(v430 + 26) = v525;
                                *(_OWORD *)(v430 + 30) = v533;
                                v430[34] = v426;
                                a1 = v427;
                                a2 = (unsigned int *)v468;
                                goto LABEL_660;
                              }
                            }
                            goto LABEL_672;
                          }
                        }
                        else
                        {
                          if (v453 >= *(_QWORD *)&v435)
                            v453 %= *(_QWORD *)&v435;
                          if (v453 != v443)
                            goto LABEL_731;
                        }
                        v446 = (uint64_t *)*v446;
                        if (!v446)
                          goto LABEL_731;
                      }
                    }
                  }
                  else
                  {
                    if (v444 >= *(_QWORD *)&v435)
                      v444 %= *(_QWORD *)&v435;
                    if (v444 != v437)
                      break;
                  }
                  v440 = (uint64_t *)*v440;
                }
                while (v440);
              }
            }
          }
LABEL_730:
          sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (v243)
          return;
        v244 = a1;
        while (2)
        {
          v245 = v244;
          v244 = v241;
          v246 = sub_2395D7BEC(*(_QWORD *)a3, v245[36]);
          v247 = sub_2395D7BEC(*(_QWORD *)a3, *v245);
          v248 = *((_DWORD *)v246 + 49);
          v249 = **(_DWORD **)(a3 + 8);
          v250 = *((_DWORD *)v247 + 49);
          if (v248 != v249 || v250 == v249)
          {
            v252 = v248 != v249 && v250 == v249;
            if (v252 || v245[45] + v245[44] <= v245[9] + v245[8])
              goto LABEL_402;
          }
          v253 = *v244;
          v254 = *((_QWORD *)v245 + 19);
          v487 = *((_OWORD *)v245 + 10);
          *((_QWORD *)v245 + 20) = 0;
          *((_QWORD *)v245 + 21) = 0;
          *((_QWORD *)v245 + 19) = 0;
          v255 = *((_QWORD *)v245 + 22);
          v546 = *(_OWORD *)(v245 + 50);
          v554 = *(_OWORD *)(v245 + 54);
          v514 = *(_OWORD *)(v245 + 58);
          v522 = *(_OWORD *)(v245 + 62);
          v530 = *(_OWORD *)(v245 + 66);
          v538 = *(_OWORD *)(v245 + 46);
          v256 = v245[70];
          v257 = v244;
          LODWORD(v258) = *v245;
          while (1)
          {
            v259 = v245;
            *v257 = v258;
            v260 = (void *)*((_QWORD *)v257 + 1);
            if (v260)
            {
              *((_QWORD *)v257 + 2) = v260;
              operator delete(v260);
              *((_QWORD *)v257 + 1) = 0;
              *((_QWORD *)v257 + 2) = 0;
              *((_QWORD *)v257 + 3) = 0;
            }
            v261 = v245 + 2;
            *(_OWORD *)(v257 + 2) = *(_OWORD *)(v245 + 2);
            *((_QWORD *)v257 + 3) = *((_QWORD *)v245 + 3);
            *((_QWORD *)v245 + 2) = 0;
            *((_QWORD *)v245 + 3) = 0;
            *((_QWORD *)v245 + 1) = 0;
            *((_QWORD *)v257 + 4) = *((_QWORD *)v245 + 4);
            *(_OWORD *)(v257 + 18) = *(_OWORD *)(v245 + 18);
            *(_OWORD *)(v257 + 14) = *(_OWORD *)(v245 + 14);
            *(_OWORD *)(v257 + 10) = *(_OWORD *)(v245 + 10);
            *(_OWORD *)(v257 + 30) = *(_OWORD *)(v245 + 30);
            *(_OWORD *)(v257 + 26) = *(_OWORD *)(v245 + 26);
            *(_OWORD *)(v257 + 22) = *(_OWORD *)(v245 + 22);
            v257[34] = v245[34];
            if (v245 == (unsigned int *)v483)
            {
              v281 = v483;
              goto LABEL_469;
            }
            v262 = *(int8x8_t *)(*(_QWORD *)a3 + 80);
            if (!*(_QWORD *)&v262)
              goto LABEL_734;
            v263 = (uint8x8_t)vcnt_s8(v262);
            v263.i16[0] = vaddlv_u8(v263);
            if (v263.u32[0] > 1uLL)
            {
              v264 = v253;
              if (*(_QWORD *)&v262 <= v253)
                v264 = v253 % *(_QWORD *)&v262;
            }
            else
            {
              v264 = (v262.i32[0] - 1) & v253;
            }
            v265 = *(_QWORD *)(*(_QWORD *)a3 + 72);
            v266 = *(uint64_t ***)(v265 + 8 * v264);
            if (!v266 || (v267 = *v266) == 0)
            {
LABEL_734:
              sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            v268 = *(_QWORD *)&v262 - 1;
            if (v263.u32[0] < 2uLL)
            {
              while (1)
              {
                v269 = v267[1];
                if (v269 == v253)
                {
                  if (*((_DWORD *)v267 + 4) == (_DWORD)v253)
                    goto LABEL_430;
                }
                else if ((v269 & v268) != v264)
                {
                  goto LABEL_734;
                }
                v267 = (uint64_t *)*v267;
                if (!v267)
                  goto LABEL_734;
              }
            }
            while (1)
            {
              v271 = v267[1];
              if (v271 == v253)
                break;
              if (v271 >= *(_QWORD *)&v262)
                v271 %= *(_QWORD *)&v262;
              if (v271 != v264)
                goto LABEL_734;
LABEL_433:
              v267 = (uint64_t *)*v267;
              if (!v267)
                goto LABEL_734;
            }
            if (*((_DWORD *)v267 + 4) != (_DWORD)v253)
              goto LABEL_433;
LABEL_430:
            v245 -= 36;
            v258 = *(v259 - 36);
            if (v263.u32[0] > 1uLL)
            {
              v270 = *(v259 - 36);
              if (*(_QWORD *)&v262 <= v258)
                v270 = v258 % *(_QWORD *)&v262;
            }
            else
            {
              v270 = (v262.i32[0] - 1) & v258;
            }
            v272 = *(uint64_t ***)(v265 + 8 * v270);
            if (!v272 || (v273 = *v272) == 0)
            {
LABEL_735:
              sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            if (v263.u32[0] < 2uLL)
            {
              while (1)
              {
                v274 = v273[1];
                if (v274 == v258)
                {
                  if (*((_DWORD *)v273 + 4) == (_DWORD)v258)
                    goto LABEL_449;
                }
                else if ((v274 & v268) != v270)
                {
                  goto LABEL_735;
                }
                v273 = (uint64_t *)*v273;
                if (!v273)
                  goto LABEL_735;
              }
            }
            while (2)
            {
              v280 = v273[1];
              if (v280 != v258)
              {
                if (v280 >= *(_QWORD *)&v262)
                  v280 %= *(_QWORD *)&v262;
                if (v280 != v270)
                  goto LABEL_735;
LABEL_461:
                v273 = (uint64_t *)*v273;
                if (!v273)
                  goto LABEL_735;
                continue;
              }
              break;
            }
            if (*((_DWORD *)v273 + 4) != (_DWORD)v258)
              goto LABEL_461;
LABEL_449:
            v275 = *((_DWORD *)v267 + 55);
            v276 = **(_DWORD **)(a3 + 8);
            v277 = *((_DWORD *)v273 + 55);
            v278 = v275 != v276 || v277 == v276;
            v257 = v259;
            if (v278)
            {
              if (v275 != v276 && v277 == v276)
                break;
              v257 = v259;
              if (HIDWORD(v255) + (int)v255 <= *(v259 - 27) + *(v259 - 28))
                break;
            }
          }
          v281 = (uint64_t)v259;
LABEL_469:
          *(_DWORD *)v281 = v253;
          v282 = (void *)*((_QWORD *)v259 + 1);
          if (v282)
          {
            *(_QWORD *)(v281 + 16) = v282;
            operator delete(v282);
            *v261 = 0;
            *((_QWORD *)v259 + 2) = 0;
            *((_QWORD *)v259 + 3) = 0;
          }
          *v261 = v254;
          *(_OWORD *)(v281 + 16) = v487;
          *(_QWORD *)(v281 + 32) = v255;
          *(_OWORD *)(v259 + 10) = v538;
          *(_OWORD *)(v259 + 14) = v546;
          *(_OWORD *)(v259 + 18) = v554;
          *(_OWORD *)(v259 + 22) = v514;
          *(_OWORD *)(v259 + 26) = v522;
          *(_OWORD *)(v259 + 30) = v530;
          *(_DWORD *)(v281 + 136) = v256;
          a2 = (unsigned int *)v468;
LABEL_402:
          v241 = v244 + 36;
          if (v244 + 36 != a2)
            continue;
          return;
        }
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < *(_QWORD *)v12)
          goto LABEL_98;
        return result;
      case 3:
        v91 = (__n128 *)(v12 + 32);
        v92 = *(_QWORD *)(v12 + 32);
        v93 = v9->n128_u64[0];
        if (v92 < *(_QWORD *)v12)
        {
          if (v93 >= v92)
          {
            v181 = *(__n128 *)v12;
            v215 = *(_OWORD *)(v12 + 16);
            v147 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v91;
            *(_OWORD *)(v12 + 16) = v147;
            result = v181;
            *v91 = v181;
            *(_OWORD *)(v12 + 48) = v215;
            if (v9->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v91;
            v95 = *(__n128 *)(v12 + 48);
            v148 = a2[-1];
            *v91 = *v9;
            *(__n128 *)(v12 + 48) = v148;
          }
          else
          {
LABEL_98:
            v174 = *(__n128 *)v12;
            v207 = *(__n128 *)(v12 + 16);
            v94 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v94;
            result = v174;
            v95 = v207;
          }
          *v9 = result;
          a2[-1] = v95;
          return result;
        }
        if (v93 < v92)
        {
          result = *v91;
          v211 = *(__n128 *)(v12 + 48);
          v125 = a2[-1];
          *v91 = *v9;
          *(__n128 *)(v12 + 48) = v125;
          *v9 = result;
          a2[-1] = v211;
          goto LABEL_180;
        }
        return result;
      case 4:
        v91 = (__n128 *)(v12 + 32);
        v96 = *(_QWORD *)(v12 + 32);
        v97 = (__n128 *)(v12 + 64);
        v98 = *(_QWORD *)(v12 + 64);
        if (v96 >= *(_QWORD *)v12)
        {
          if (v98 < v96)
          {
            v126 = *v91;
            result = *(__n128 *)(v12 + 48);
            v127 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v127;
            *v97 = v126;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v178 = *(__n128 *)v12;
              v212 = *(_OWORD *)(v12 + 16);
              v128 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v91;
              *(_OWORD *)(v12 + 16) = v128;
              result = v178;
              *v91 = v178;
              *(_OWORD *)(v12 + 48) = v212;
            }
          }
        }
        else if (v98 >= v96)
        {
          v182 = *(__n128 *)v12;
          v216 = *(_OWORD *)(v12 + 16);
          v149 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v91;
          *(_OWORD *)(v12 + 16) = v149;
          result = v182;
          *v91 = v182;
          *(_OWORD *)(v12 + 48) = v216;
          if (v98 < *(_QWORD *)(v12 + 32))
          {
            v150 = *v91;
            result = *(__n128 *)(v12 + 48);
            v151 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v151;
            *v97 = v150;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v175 = *(__n128 *)v12;
          v208 = *(_OWORD *)(v12 + 16);
          v99 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v97;
          *(_OWORD *)(v12 + 16) = v99;
          result = v175;
          *v97 = v175;
          *(_OWORD *)(v12 + 80) = v208;
        }
        if (v9->n128_u64[0] < v97->n128_u64[0])
        {
          result = *v97;
          v217 = *(__n128 *)(v12 + 80);
          v152 = a2[-1];
          *v97 = *v9;
          *(__n128 *)(v12 + 80) = v152;
          *v9 = result;
          a2[-1] = v217;
          if (v97->n128_u64[0] < v91->n128_u64[0])
          {
            v153 = *v91;
            result = *(__n128 *)(v12 + 48);
            v154 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v154;
            *v97 = v153;
            *(__n128 *)(v12 + 80) = result;
LABEL_180:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v183 = *(__n128 *)v12;
              v218 = *(__n128 *)(v12 + 16);
              v155 = v91[1];
              *(__n128 *)v12 = *v91;
              *(__n128 *)(v12 + 16) = v155;
              result = v183;
              *v91 = v183;
              v91[1] = v218;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_239C7F310((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 767)
        {
          v100 = (__n128 *)(v12 + 32);
          v102 = (__n128 *)v12 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v12;
              do
              {
                v106 = v100;
                v107 = *(_QWORD *)(v104 + 32);
                if (v107 < *(_QWORD *)v104)
                {
                  v176 = *(__n128 *)(v104 + 40);
                  v209 = *(_QWORD *)(v104 + 56);
                  v108 = v103;
                  do
                  {
                    v109 = v12 + v108;
                    v110 = *(_OWORD *)(v12 + v108 + 16);
                    *(_OWORD *)(v109 + 32) = *(_OWORD *)(v12 + v108);
                    *(_OWORD *)(v109 + 48) = v110;
                    if (!v108)
                    {
                      v105 = v12;
                      goto LABEL_114;
                    }
                    v108 -= 32;
                  }
                  while (v107 < *(_QWORD *)(v109 - 32));
                  v105 = v12 + v108 + 32;
LABEL_114:
                  *(_QWORD *)v105 = v107;
                  result = v176;
                  *(_QWORD *)(v105 + 24) = v209;
                  *(__n128 *)(v105 + 8) = v176;
                }
                v100 = v106 + 2;
                v103 += 32;
                v104 = (unint64_t)v106;
              }
              while (&v106[2] != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v129 = (uint64_t)v100;
              v130 = *(_QWORD *)(a1 + 32);
              if (v130 < *(_QWORD *)a1)
              {
                v179 = *(__n128 *)(a1 + 40);
                v213 = *(_QWORD *)(a1 + 56);
                do
                {
                  v131 = v100[-1];
                  *v100 = v100[-2];
                  v100[1] = v131;
                  v132 = v100[-4].n128_u64[0];
                  v100 -= 2;
                }
                while (v130 < v132);
                v100->n128_u64[0] = v130;
                result = v179;
                v100[1].n128_u64[1] = v213;
                *(__n128 *)((char *)v100 + 8) = v179;
              }
              v100 = (__n128 *)(v129 + 32);
              a1 = v129;
            }
            while ((__n128 *)(v129 + 32) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((__n128 *)v12 != a2)
          {
            v111 = (unint64_t)(v14 - 2) >> 1;
            v112 = v111;
            do
            {
              if (v111 >= v112)
              {
                v114 = (2 * v112) | 1;
                v115 = v12 + 32 * v114;
                if (2 * v112 + 2 >= v14)
                {
                  v116 = *(_QWORD *)v115;
                }
                else
                {
                  v116 = *(_QWORD *)(v115 + 32);
                  v117 = *(_QWORD *)v115 >= v116;
                  if (*(_QWORD *)v115 > v116)
                    v116 = *(_QWORD *)v115;
                  if (!v117)
                  {
                    v115 += 32;
                    v114 = 2 * v112 + 2;
                  }
                }
                v118 = v12 + 32 * v112;
                v119 = *(_QWORD *)v118;
                if (v116 >= *(_QWORD *)v118)
                {
                  v210 = *(_QWORD *)(v118 + 24);
                  v177 = *(_OWORD *)(v118 + 8);
                  while (1)
                  {
                    v122 = (_OWORD *)v118;
                    v118 = v115;
                    v123 = *(_OWORD *)(v115 + 16);
                    *v122 = *(_OWORD *)v115;
                    v122[1] = v123;
                    if (v111 < v114)
                      break;
                    v124 = (2 * v114) | 1;
                    v115 = v12 + 32 * v124;
                    v114 = 2 * v114 + 2;
                    if (v114 < v14)
                    {
                      v120 = *(_QWORD *)v115;
                      v121 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 <= v121)
                        v120 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 >= v121)
                        v114 = v124;
                      else
                        v115 += 32;
                      if (v120 < v119)
                        break;
                    }
                    else
                    {
                      v114 = v124;
                      if (*(_QWORD *)v115 < v119)
                        break;
                    }
                  }
                  *(_QWORD *)v118 = v119;
                  *(_QWORD *)(v118 + 24) = v210;
                  *(_OWORD *)(v118 + 8) = v177;
                }
              }
              v113 = v112-- <= 0;
            }
            while (!v113);
            v133 = (unint64_t)v13 >> 5;
            do
            {
              v134 = 0;
              v180 = *(__n128 *)v12;
              v214 = *(__n128 *)(v12 + 16);
              v135 = (_OWORD *)v12;
              do
              {
                v137 = (uint64_t)&v135[2 * v134 + 2];
                v138 = (2 * v134) | 1;
                v139 = 2 * v134 + 2;
                if (v139 < v133 && *(_QWORD *)v137 < *(_QWORD *)(v137 + 32))
                {
                  v137 += 32;
                  v138 = v139;
                }
                v136 = *(_OWORD *)(v137 + 16);
                *v135 = *(_OWORD *)v137;
                v135[1] = v136;
                v135 = (_OWORD *)v137;
                v134 = v138;
              }
              while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v137 == a2)
              {
                result = v180;
                *(__n128 *)v137 = v180;
                *(__n128 *)(v137 + 16) = v214;
              }
              else
              {
                v140 = a2[1];
                *(__n128 *)v137 = *a2;
                *(__n128 *)(v137 + 16) = v140;
                result = v180;
                *a2 = v180;
                a2[1] = v214;
                v141 = v137 - v12 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = (_OWORD *)(v12 + 32 * v142);
                  v144 = *(_QWORD *)v137;
                  if (*(_QWORD *)v143 < *(_QWORD *)v137)
                  {
                    v224 = *(_QWORD *)(v137 + 24);
                    v221 = *(__n128 *)(v137 + 8);
                    do
                    {
                      v145 = (_OWORD *)v137;
                      v137 = (uint64_t)v143;
                      v146 = v143[1];
                      *v145 = *v143;
                      v145[1] = v146;
                      if (!v142)
                        break;
                      v142 = (v142 - 1) >> 1;
                      v143 = (_OWORD *)(v12 + 32 * v142);
                    }
                    while (*(_QWORD *)v143 < v144);
                    *(_QWORD *)v137 = v144;
                    result = v221;
                    *(_QWORD *)(v137 + 24) = v224;
                    *(__n128 *)(v137 + 8) = v221;
                  }
                }
              }
              v113 = v133-- <= 2;
            }
            while (!v113);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = v12 + 32 * ((unint64_t)v14 >> 1);
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 > 0x1000)
        {
          v18 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v158 = *(__n128 *)v16;
              v186 = *(__n128 *)(v16 + 16);
              v22 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v22;
              *v9 = v158;
              a2[-1] = v186;
              if (*(_QWORD *)v16 < *(_QWORD *)v12)
              {
                v159 = *(__n128 *)v12;
                v187 = *(_OWORD *)(v12 + 16);
                v23 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)(v12 + 16) = v23;
                *(__n128 *)v16 = v159;
                *(_OWORD *)(v16 + 16) = v187;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v156 = *(__n128 *)v12;
              v184 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
              goto LABEL_20;
            }
            v162 = *(__n128 *)v12;
            v190 = *(_OWORD *)(v12 + 16);
            v26 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v26;
            *(__n128 *)v16 = v162;
            *(_OWORD *)(v16 + 16) = v190;
            if (v9->n128_u64[0] < *(_QWORD *)v16)
            {
              v156 = *(__n128 *)v16;
              v184 = *(__n128 *)(v16 + 16);
              v27 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v27;
LABEL_20:
              *v9 = v156;
              a2[-1] = v184;
            }
          }
          v28 = (__n128 *)(v12 + 32);
          v29 = v12 + 32 * v15;
          v32 = *(_QWORD *)(v29 - 32);
          v30 = (__n128 *)(v29 - 32);
          v31 = v32;
          v33 = v10->n128_u64[0];
          if (v32 >= *(_QWORD *)(v12 + 32))
          {
            if (v33 < v31)
            {
              v163 = *v30;
              v191 = v30[1];
              v37 = a2[-3];
              *v30 = *v10;
              v30[1] = v37;
              *v10 = v163;
              a2[-3] = v191;
              if (v30->n128_u64[0] < v28->n128_u64[0])
              {
                v38 = *v28;
                v192 = *(__n128 *)(v12 + 48);
                v39 = v30[1];
                *v28 = *v30;
                *(__n128 *)(v12 + 48) = v39;
                *v30 = v38;
                v30[1] = v192;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              v35 = *(__n128 *)(v12 + 48);
              v36 = a2[-3];
              *v28 = *v10;
              *(__n128 *)(v12 + 48) = v36;
              goto LABEL_32;
            }
            v42 = *v28;
            v194 = *(__n128 *)(v12 + 48);
            v43 = v30[1];
            *v28 = *v30;
            *(__n128 *)(v12 + 48) = v43;
            *v30 = v42;
            v30[1] = v194;
            if (v10->n128_u64[0] < v30->n128_u64[0])
            {
              v165 = *v30;
              v195 = v30[1];
              v44 = a2[-3];
              *v30 = *v10;
              v30[1] = v44;
              v34 = v165;
              v35 = v195;
LABEL_32:
              *v10 = v34;
              a2[-3] = v35;
            }
          }
          v45 = (__n128 *)(v12 + 64);
          v46 = v12 + 32 * v15;
          v49 = *(_QWORD *)(v46 + 32);
          v47 = (__n128 *)(v46 + 32);
          v48 = v49;
          v50 = v11->n128_u64[0];
          if (v49 >= *(_QWORD *)(v12 + 64))
          {
            if (v50 < v48)
            {
              v166 = *v47;
              v196 = v47[1];
              v54 = a2[-5];
              *v47 = *v11;
              v47[1] = v54;
              *v11 = v166;
              a2[-5] = v196;
              if (v47->n128_u64[0] < v45->n128_u64[0])
              {
                v55 = *v45;
                v197 = *(__n128 *)(v12 + 80);
                v56 = v47[1];
                *v45 = *v47;
                *(__n128 *)(v12 + 80) = v56;
                *v47 = v55;
                v47[1] = v197;
              }
            }
          }
          else
          {
            if (v50 < v48)
            {
              v51 = *v45;
              v52 = *(__n128 *)(v12 + 80);
              v53 = a2[-5];
              *v45 = *v11;
              *(__n128 *)(v12 + 80) = v53;
              goto LABEL_41;
            }
            v57 = *v45;
            v198 = *(__n128 *)(v12 + 80);
            v58 = v47[1];
            *v45 = *v47;
            *(__n128 *)(v12 + 80) = v58;
            *v47 = v57;
            v47[1] = v198;
            if (v11->n128_u64[0] < v47->n128_u64[0])
            {
              v167 = *v47;
              v199 = v47[1];
              v59 = a2[-5];
              *v47 = *v11;
              v47[1] = v59;
              v51 = v167;
              v52 = v199;
LABEL_41:
              *v11 = v51;
              a2[-5] = v52;
            }
          }
          v60 = *(_QWORD *)v16;
          v61 = v47->n128_u64[0];
          if (*(_QWORD *)v16 >= v30->n128_u64[0])
          {
            if (v61 < v60)
            {
              v169 = *(__n128 *)v16;
              v201 = *(__n128 *)(v16 + 16);
              v63 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v63;
              *v47 = v169;
              v47[1] = v201;
              if (*(_QWORD *)v16 < v30->n128_u64[0])
              {
                v170 = *v30;
                v202 = v30[1];
                v64 = *(__n128 *)(v16 + 16);
                *v30 = *(__n128 *)v16;
                v30[1] = v64;
                *(__n128 *)v16 = v170;
                *(__n128 *)(v16 + 16) = v202;
              }
            }
          }
          else
          {
            if (v61 < v60)
            {
              v168 = *v30;
              v200 = v30[1];
              v62 = v47[1];
              *v30 = *v47;
              v30[1] = v62;
              goto LABEL_50;
            }
            v171 = *v30;
            v203 = v30[1];
            v65 = *(__n128 *)(v16 + 16);
            *v30 = *(__n128 *)v16;
            v30[1] = v65;
            *(__n128 *)v16 = v171;
            *(__n128 *)(v16 + 16) = v203;
            if (v47->n128_u64[0] < *(_QWORD *)v16)
            {
              v168 = *(__n128 *)v16;
              v200 = *(__n128 *)(v16 + 16);
              v66 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v66;
LABEL_50:
              *v47 = v168;
              v47[1] = v200;
            }
          }
          v172 = *(__n128 *)v12;
          v204 = *(_OWORD *)(v12 + 16);
          v67 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v67;
          *(__n128 *)v16 = v172;
          *(_OWORD *)(v16 + 16) = v204;
          goto LABEL_52;
        }
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= *(_QWORD *)v16)
        {
          if (v17 < v20)
          {
            v160 = *(__n128 *)v12;
            v188 = *(__n128 *)(v12 + 16);
            v24 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v24;
            *v9 = v160;
            a2[-1] = v188;
            if (*(_QWORD *)v12 < *(_QWORD *)v16)
            {
              v161 = *(__n128 *)v16;
              v189 = *(_OWORD *)(v16 + 16);
              v25 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v25;
              *(__n128 *)v12 = v161;
              *(_OWORD *)(v12 + 16) = v189;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            v164 = *(__n128 *)v16;
            v193 = *(_OWORD *)(v16 + 16);
            v40 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v12;
            *(_OWORD *)(v16 + 16) = v40;
            *(__n128 *)v12 = v164;
            *(_OWORD *)(v12 + 16) = v193;
            if (v9->n128_u64[0] >= *(_QWORD *)v12)
              goto LABEL_52;
            v157 = *(__n128 *)v12;
            v185 = *(__n128 *)(v12 + 16);
            v41 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v41;
          }
          else
          {
            v157 = *(__n128 *)v16;
            v185 = *(__n128 *)(v16 + 16);
            v21 = a2[-1];
            *(__n128 *)v16 = *v9;
            *(__n128 *)(v16 + 16) = v21;
          }
          *v9 = v157;
          a2[-1] = v185;
        }
LABEL_52:
        --a3;
        v68 = *(_QWORD *)v12;
        if ((a4 & 1) == 0 && *(_QWORD *)(v12 - 32) >= v68)
        {
          v223 = *(_QWORD *)(v12 + 24);
          v220 = *(__n128 *)(v12 + 8);
          if (v68 >= v9->n128_u64[0])
          {
            v84 = v12 + 32;
            do
            {
              v12 = v84;
              if (v84 >= (unint64_t)a2)
                break;
              v84 += 32;
            }
            while (v68 >= *(_QWORD *)v12);
          }
          else
          {
            do
            {
              v83 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v83);
          }
          v85 = a2;
          if (v12 < (unint64_t)a2)
          {
            v85 = a2;
            do
            {
              v86 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v86);
          }
          while (v12 < (unint64_t)v85)
          {
            v173 = *(__n128 *)v12;
            v206 = *(__n128 *)(v12 + 16);
            v87 = v85[1];
            *(__n128 *)v12 = *v85;
            *(__n128 *)(v12 + 16) = v87;
            *v85 = v173;
            v85[1] = v206;
            do
            {
              v88 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v88);
            do
            {
              v89 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v89);
          }
          if (v12 - 32 != a1)
          {
            v90 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v90;
          }
          a4 = 0;
          *(_QWORD *)(v12 - 32) = v68;
          result = v220;
          *(_QWORD *)(v12 - 8) = v223;
          *(__n128 *)(v12 - 24) = v220;
          continue;
        }
        v222 = *(_QWORD *)(v12 + 24);
        v219 = *(__n128 *)(v12 + 8);
        v69 = v12;
        do
        {
          v70 = v69;
          v71 = *(_QWORD *)(v69 + 32);
          v69 += 32;
        }
        while (v71 < v68);
        v72 = a2;
        if (v70 == v12)
        {
          v72 = a2;
          do
          {
            if (v69 >= (unint64_t)v72)
              break;
            v74 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v74 >= v68);
        }
        else
        {
          do
          {
            v73 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v73 >= v68);
        }
        v12 = v69;
        if (v69 < (unint64_t)v72)
        {
          v75 = v72;
          do
          {
            v76 = *(__n128 *)v12;
            v205 = *(__n128 *)(v12 + 16);
            v77 = v75[1];
            *(__n128 *)v12 = *v75;
            *(__n128 *)(v12 + 16) = v77;
            *v75 = v76;
            v75[1] = v205;
            do
            {
              v78 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v78 < v68);
            do
            {
              v79 = v75[-2].n128_u64[0];
              v75 -= 2;
            }
            while (v79 >= v68);
          }
          while (v12 < (unint64_t)v75);
        }
        if (v12 - 32 != a1)
        {
          v80 = *(_OWORD *)(v12 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
          *(_OWORD *)(a1 + 16) = v80;
        }
        *(_QWORD *)(v12 - 32) = v68;
        *(_QWORD *)(v12 - 8) = v222;
        *(__n128 *)(v12 - 24) = v219;
        if (v69 < (unint64_t)v72)
        {
LABEL_73:
          sub_239CBF45C(a1, v12 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v81 = sub_239CC0034(a1, v12 - 32, v219);
        if (!sub_239CC0034(v12, (uint64_t)a2, v82))
        {
          if (v81)
            continue;
          goto LABEL_73;
        }
        a2 = (__n128 *)(v12 - 32);
        if (!v81)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < *(_QWORD *)v12)
          goto LABEL_98;
        return result;
      case 3:
        v91 = (__n128 *)(v12 + 32);
        v92 = *(_QWORD *)(v12 + 32);
        v93 = v9->n128_u64[0];
        if (v92 < *(_QWORD *)v12)
        {
          if (v93 >= v92)
          {
            v181 = *(__n128 *)v12;
            v215 = *(_OWORD *)(v12 + 16);
            v147 = *(_OWORD *)(v12 + 48);
            *(__n128 *)v12 = *v91;
            *(_OWORD *)(v12 + 16) = v147;
            result = v181;
            *v91 = v181;
            *(_OWORD *)(v12 + 48) = v215;
            if (v9->n128_u64[0] >= *(_QWORD *)(v12 + 32))
              return result;
            result = *v91;
            v95 = *(__n128 *)(v12 + 48);
            v148 = a2[-1];
            *v91 = *v9;
            *(__n128 *)(v12 + 48) = v148;
          }
          else
          {
LABEL_98:
            v174 = *(__n128 *)v12;
            v207 = *(__n128 *)(v12 + 16);
            v94 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v94;
            result = v174;
            v95 = v207;
          }
          *v9 = result;
          a2[-1] = v95;
          return result;
        }
        if (v93 < v92)
        {
          result = *v91;
          v211 = *(__n128 *)(v12 + 48);
          v125 = a2[-1];
          *v91 = *v9;
          *(__n128 *)(v12 + 48) = v125;
          *v9 = result;
          a2[-1] = v211;
          goto LABEL_180;
        }
        return result;
      case 4:
        v91 = (__n128 *)(v12 + 32);
        v96 = *(_QWORD *)(v12 + 32);
        v97 = (__n128 *)(v12 + 64);
        v98 = *(_QWORD *)(v12 + 64);
        if (v96 >= *(_QWORD *)v12)
        {
          if (v98 < v96)
          {
            v126 = *v91;
            result = *(__n128 *)(v12 + 48);
            v127 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v127;
            *v97 = v126;
            *(__n128 *)(v12 + 80) = result;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v178 = *(__n128 *)v12;
              v212 = *(_OWORD *)(v12 + 16);
              v128 = *(_OWORD *)(v12 + 48);
              *(__n128 *)v12 = *v91;
              *(_OWORD *)(v12 + 16) = v128;
              result = v178;
              *v91 = v178;
              *(_OWORD *)(v12 + 48) = v212;
            }
          }
        }
        else if (v98 >= v96)
        {
          v182 = *(__n128 *)v12;
          v216 = *(_OWORD *)(v12 + 16);
          v149 = *(_OWORD *)(v12 + 48);
          *(__n128 *)v12 = *v91;
          *(_OWORD *)(v12 + 16) = v149;
          result = v182;
          *v91 = v182;
          *(_OWORD *)(v12 + 48) = v216;
          if (v98 < *(_QWORD *)(v12 + 32))
          {
            v150 = *v91;
            result = *(__n128 *)(v12 + 48);
            v151 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v151;
            *v97 = v150;
            *(__n128 *)(v12 + 80) = result;
          }
        }
        else
        {
          v175 = *(__n128 *)v12;
          v208 = *(_OWORD *)(v12 + 16);
          v99 = *(_OWORD *)(v12 + 80);
          *(__n128 *)v12 = *v97;
          *(_OWORD *)(v12 + 16) = v99;
          result = v175;
          *v97 = v175;
          *(_OWORD *)(v12 + 80) = v208;
        }
        if (v9->n128_u64[0] < v97->n128_u64[0])
        {
          result = *v97;
          v217 = *(__n128 *)(v12 + 80);
          v152 = a2[-1];
          *v97 = *v9;
          *(__n128 *)(v12 + 80) = v152;
          *v9 = result;
          a2[-1] = v217;
          if (v97->n128_u64[0] < v91->n128_u64[0])
          {
            v153 = *v91;
            result = *(__n128 *)(v12 + 48);
            v154 = *(_OWORD *)(v12 + 80);
            *v91 = *v97;
            *(_OWORD *)(v12 + 48) = v154;
            *v97 = v153;
            *(__n128 *)(v12 + 80) = result;
LABEL_180:
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)v12)
            {
              v183 = *(__n128 *)v12;
              v218 = *(__n128 *)(v12 + 16);
              v155 = v91[1];
              *(__n128 *)v12 = *v91;
              *(__n128 *)(v12 + 16) = v155;
              result = v183;
              *v91 = v183;
              v91[1] = v218;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_239C7F310((__n128 *)v12, (__n128 *)(v12 + 32), (__n128 *)(v12 + 64), (__n128 *)(v12 + 96), a2 - 2, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 767)
        {
          v100 = (__n128 *)(v12 + 32);
          v102 = (__n128 *)v12 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v12;
              do
              {
                v106 = v100;
                v107 = *(_QWORD *)(v104 + 32);
                if (v107 < *(_QWORD *)v104)
                {
                  v176 = *(__n128 *)(v104 + 40);
                  v209 = *(_QWORD *)(v104 + 56);
                  v108 = v103;
                  do
                  {
                    v109 = v12 + v108;
                    v110 = *(_OWORD *)(v12 + v108 + 16);
                    *(_OWORD *)(v109 + 32) = *(_OWORD *)(v12 + v108);
                    *(_OWORD *)(v109 + 48) = v110;
                    if (!v108)
                    {
                      v105 = v12;
                      goto LABEL_114;
                    }
                    v108 -= 32;
                  }
                  while (v107 < *(_QWORD *)(v109 - 32));
                  v105 = v12 + v108 + 32;
LABEL_114:
                  *(_QWORD *)v105 = v107;
                  result = v176;
                  *(_QWORD *)(v105 + 24) = v209;
                  *(__n128 *)(v105 + 8) = v176;
                }
                v100 = v106 + 2;
                v103 += 32;
                v104 = (unint64_t)v106;
              }
              while (&v106[2] != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v129 = (uint64_t)v100;
              v130 = *(_QWORD *)(a1 + 32);
              if (v130 < *(_QWORD *)a1)
              {
                v179 = *(__n128 *)(a1 + 40);
                v213 = *(_QWORD *)(a1 + 56);
                do
                {
                  v131 = v100[-1];
                  *v100 = v100[-2];
                  v100[1] = v131;
                  v132 = v100[-4].n128_u64[0];
                  v100 -= 2;
                }
                while (v130 < v132);
                v100->n128_u64[0] = v130;
                result = v179;
                v100[1].n128_u64[1] = v213;
                *(__n128 *)((char *)v100 + 8) = v179;
              }
              v100 = (__n128 *)(v129 + 32);
              a1 = v129;
            }
            while ((__n128 *)(v129 + 32) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((__n128 *)v12 != a2)
          {
            v111 = (unint64_t)(v14 - 2) >> 1;
            v112 = v111;
            do
            {
              if (v111 >= v112)
              {
                v114 = (2 * v112) | 1;
                v115 = v12 + 32 * v114;
                if (2 * v112 + 2 >= v14)
                {
                  v116 = *(_QWORD *)v115;
                }
                else
                {
                  v116 = *(_QWORD *)(v115 + 32);
                  v117 = *(_QWORD *)v115 >= v116;
                  if (*(_QWORD *)v115 > v116)
                    v116 = *(_QWORD *)v115;
                  if (!v117)
                  {
                    v115 += 32;
                    v114 = 2 * v112 + 2;
                  }
                }
                v118 = v12 + 32 * v112;
                v119 = *(_QWORD *)v118;
                if (v116 >= *(_QWORD *)v118)
                {
                  v210 = *(_QWORD *)(v118 + 24);
                  v177 = *(_OWORD *)(v118 + 8);
                  while (1)
                  {
                    v122 = (_OWORD *)v118;
                    v118 = v115;
                    v123 = *(_OWORD *)(v115 + 16);
                    *v122 = *(_OWORD *)v115;
                    v122[1] = v123;
                    if (v111 < v114)
                      break;
                    v124 = (2 * v114) | 1;
                    v115 = v12 + 32 * v124;
                    v114 = 2 * v114 + 2;
                    if (v114 < v14)
                    {
                      v120 = *(_QWORD *)v115;
                      v121 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 <= v121)
                        v120 = *(_QWORD *)(v115 + 32);
                      if (*(_QWORD *)v115 >= v121)
                        v114 = v124;
                      else
                        v115 += 32;
                      if (v120 < v119)
                        break;
                    }
                    else
                    {
                      v114 = v124;
                      if (*(_QWORD *)v115 < v119)
                        break;
                    }
                  }
                  *(_QWORD *)v118 = v119;
                  *(_QWORD *)(v118 + 24) = v210;
                  *(_OWORD *)(v118 + 8) = v177;
                }
              }
              v113 = v112-- <= 0;
            }
            while (!v113);
            v133 = (unint64_t)v13 >> 5;
            do
            {
              v134 = 0;
              v180 = *(__n128 *)v12;
              v214 = *(__n128 *)(v12 + 16);
              v135 = (_OWORD *)v12;
              do
              {
                v137 = (uint64_t)&v135[2 * v134 + 2];
                v138 = (2 * v134) | 1;
                v139 = 2 * v134 + 2;
                if (v139 < v133 && *(_QWORD *)v137 < *(_QWORD *)(v137 + 32))
                {
                  v137 += 32;
                  v138 = v139;
                }
                v136 = *(_OWORD *)(v137 + 16);
                *v135 = *(_OWORD *)v137;
                v135[1] = v136;
                v135 = (_OWORD *)v137;
                v134 = v138;
              }
              while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v137 == a2)
              {
                result = v180;
                *(__n128 *)v137 = v180;
                *(__n128 *)(v137 + 16) = v214;
              }
              else
              {
                v140 = a2[1];
                *(__n128 *)v137 = *a2;
                *(__n128 *)(v137 + 16) = v140;
                result = v180;
                *a2 = v180;
                a2[1] = v214;
                v141 = v137 - v12 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = (_OWORD *)(v12 + 32 * v142);
                  v144 = *(_QWORD *)v137;
                  if (*(_QWORD *)v143 < *(_QWORD *)v137)
                  {
                    v224 = *(_QWORD *)(v137 + 24);
                    v221 = *(__n128 *)(v137 + 8);
                    do
                    {
                      v145 = (_OWORD *)v137;
                      v137 = (uint64_t)v143;
                      v146 = v143[1];
                      *v145 = *v143;
                      v145[1] = v146;
                      if (!v142)
                        break;
                      v142 = (v142 - 1) >> 1;
                      v143 = (_OWORD *)(v12 + 32 * v142);
                    }
                    while (*(_QWORD *)v143 < v144);
                    *(_QWORD *)v137 = v144;
                    result = v221;
                    *(_QWORD *)(v137 + 24) = v224;
                    *(__n128 *)(v137 + 8) = v221;
                  }
                }
              }
              v113 = v133-- <= 2;
            }
            while (!v113);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = v12 + 32 * ((unint64_t)v14 >> 1);
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 > 0x1000)
        {
          v18 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v158 = *(__n128 *)v16;
              v186 = *(__n128 *)(v16 + 16);
              v22 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v22;
              *v9 = v158;
              a2[-1] = v186;
              if (*(_QWORD *)v16 < *(_QWORD *)v12)
              {
                v159 = *(__n128 *)v12;
                v187 = *(_OWORD *)(v12 + 16);
                v23 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)(v12 + 16) = v23;
                *(__n128 *)v16 = v159;
                *(_OWORD *)(v16 + 16) = v187;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v156 = *(__n128 *)v12;
              v184 = *(__n128 *)(v12 + 16);
              v19 = a2[-1];
              *(__n128 *)v12 = *v9;
              *(__n128 *)(v12 + 16) = v19;
              goto LABEL_20;
            }
            v162 = *(__n128 *)v12;
            v190 = *(_OWORD *)(v12 + 16);
            v26 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v26;
            *(__n128 *)v16 = v162;
            *(_OWORD *)(v16 + 16) = v190;
            if (v9->n128_u64[0] < *(_QWORD *)v16)
            {
              v156 = *(__n128 *)v16;
              v184 = *(__n128 *)(v16 + 16);
              v27 = a2[-1];
              *(__n128 *)v16 = *v9;
              *(__n128 *)(v16 + 16) = v27;
LABEL_20:
              *v9 = v156;
              a2[-1] = v184;
            }
          }
          v28 = (__n128 *)(v12 + 32);
          v29 = v12 + 32 * v15;
          v32 = *(_QWORD *)(v29 - 32);
          v30 = (__n128 *)(v29 - 32);
          v31 = v32;
          v33 = v10->n128_u64[0];
          if (v32 >= *(_QWORD *)(v12 + 32))
          {
            if (v33 < v31)
            {
              v163 = *v30;
              v191 = v30[1];
              v37 = a2[-3];
              *v30 = *v10;
              v30[1] = v37;
              *v10 = v163;
              a2[-3] = v191;
              if (v30->n128_u64[0] < v28->n128_u64[0])
              {
                v38 = *v28;
                v192 = *(__n128 *)(v12 + 48);
                v39 = v30[1];
                *v28 = *v30;
                *(__n128 *)(v12 + 48) = v39;
                *v30 = v38;
                v30[1] = v192;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              v35 = *(__n128 *)(v12 + 48);
              v36 = a2[-3];
              *v28 = *v10;
              *(__n128 *)(v12 + 48) = v36;
              goto LABEL_32;
            }
            v42 = *v28;
            v194 = *(__n128 *)(v12 + 48);
            v43 = v30[1];
            *v28 = *v30;
            *(__n128 *)(v12 + 48) = v43;
            *v30 = v42;
            v30[1] = v194;
            if (v10->n128_u64[0] < v30->n128_u64[0])
            {
              v165 = *v30;
              v195 = v30[1];
              v44 = a2[-3];
              *v30 = *v10;
              v30[1] = v44;
              v34 = v165;
              v35 = v195;
LABEL_32:
              *v10 = v34;
              a2[-3] = v35;
            }
          }
          v45 = (__n128 *)(v12 + 64);
          v46 = v12 + 32 * v15;
          v49 = *(_QWORD *)(v46 + 32);
          v47 = (__n128 *)(v46 + 32);
          v48 = v49;
          v50 = v11->n128_u64[0];
          if (v49 >= *(_QWORD *)(v12 + 64))
          {
            if (v50 < v48)
            {
              v166 = *v47;
              v196 = v47[1];
              v54 = a2[-5];
              *v47 = *v11;
              v47[1] = v54;
              *v11 = v166;
              a2[-5] = v196;
              if (v47->n128_u64[0] < v45->n128_u64[0])
              {
                v55 = *v45;
                v197 = *(__n128 *)(v12 + 80);
                v56 = v47[1];
                *v45 = *v47;
                *(__n128 *)(v12 + 80) = v56;
                *v47 = v55;
                v47[1] = v197;
              }
            }
          }
          else
          {
            if (v50 < v48)
            {
              v51 = *v45;
              v52 = *(__n128 *)(v12 + 80);
              v53 = a2[-5];
              *v45 = *v11;
              *(__n128 *)(v12 + 80) = v53;
              goto LABEL_41;
            }
            v57 = *v45;
            v198 = *(__n128 *)(v12 + 80);
            v58 = v47[1];
            *v45 = *v47;
            *(__n128 *)(v12 + 80) = v58;
            *v47 = v57;
            v47[1] = v198;
            if (v11->n128_u64[0] < v47->n128_u64[0])
            {
              v167 = *v47;
              v199 = v47[1];
              v59 = a2[-5];
              *v47 = *v11;
              v47[1] = v59;
              v51 = v167;
              v52 = v199;
LABEL_41:
              *v11 = v51;
              a2[-5] = v52;
            }
          }
          v60 = *(_QWORD *)v16;
          v61 = v47->n128_u64[0];
          if (*(_QWORD *)v16 >= v30->n128_u64[0])
          {
            if (v61 < v60)
            {
              v169 = *(__n128 *)v16;
              v201 = *(__n128 *)(v16 + 16);
              v63 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v63;
              *v47 = v169;
              v47[1] = v201;
              if (*(_QWORD *)v16 < v30->n128_u64[0])
              {
                v170 = *v30;
                v202 = v30[1];
                v64 = *(__n128 *)(v16 + 16);
                *v30 = *(__n128 *)v16;
                v30[1] = v64;
                *(__n128 *)v16 = v170;
                *(__n128 *)(v16 + 16) = v202;
              }
            }
          }
          else
          {
            if (v61 < v60)
            {
              v168 = *v30;
              v200 = v30[1];
              v62 = v47[1];
              *v30 = *v47;
              v30[1] = v62;
              goto LABEL_50;
            }
            v171 = *v30;
            v203 = v30[1];
            v65 = *(__n128 *)(v16 + 16);
            *v30 = *(__n128 *)v16;
            v30[1] = v65;
            *(__n128 *)v16 = v171;
            *(__n128 *)(v16 + 16) = v203;
            if (v47->n128_u64[0] < *(_QWORD *)v16)
            {
              v168 = *(__n128 *)v16;
              v200 = *(__n128 *)(v16 + 16);
              v66 = v47[1];
              *(__n128 *)v16 = *v47;
              *(__n128 *)(v16 + 16) = v66;
LABEL_50:
              *v47 = v168;
              v47[1] = v200;
            }
          }
          v172 = *(__n128 *)v12;
          v204 = *(_OWORD *)(v12 + 16);
          v67 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v67;
          *(__n128 *)v16 = v172;
          *(_OWORD *)(v16 + 16) = v204;
          goto LABEL_52;
        }
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= *(_QWORD *)v16)
        {
          if (v17 < v20)
          {
            v160 = *(__n128 *)v12;
            v188 = *(__n128 *)(v12 + 16);
            v24 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v24;
            *v9 = v160;
            a2[-1] = v188;
            if (*(_QWORD *)v12 < *(_QWORD *)v16)
            {
              v161 = *(__n128 *)v16;
              v189 = *(_OWORD *)(v16 + 16);
              v25 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v25;
              *(__n128 *)v12 = v161;
              *(_OWORD *)(v12 + 16) = v189;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            v164 = *(__n128 *)v16;
            v193 = *(_OWORD *)(v16 + 16);
            v40 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v12;
            *(_OWORD *)(v16 + 16) = v40;
            *(__n128 *)v12 = v164;
            *(_OWORD *)(v12 + 16) = v193;
            if (v9->n128_u64[0] >= *(_QWORD *)v12)
              goto LABEL_52;
            v157 = *(__n128 *)v12;
            v185 = *(__n128 *)(v12 + 16);
            v41 = a2[-1];
            *(__n128 *)v12 = *v9;
            *(__n128 *)(v12 + 16) = v41;
          }
          else
          {
            v157 = *(__n128 *)v16;
            v185 = *(__n128 *)(v16 + 16);
            v21 = a2[-1];
            *(__n128 *)v16 = *v9;
            *(__n128 *)(v16 + 16) = v21;
          }
          *v9 = v157;
          a2[-1] = v185;
        }
LABEL_52:
        --a3;
        v68 = *(_QWORD *)v12;
        if ((a4 & 1) == 0 && *(_QWORD *)(v12 - 32) >= v68)
        {
          v223 = *(_QWORD *)(v12 + 24);
          v220 = *(__n128 *)(v12 + 8);
          if (v68 >= v9->n128_u64[0])
          {
            v84 = v12 + 32;
            do
            {
              v12 = v84;
              if (v84 >= (unint64_t)a2)
                break;
              v84 += 32;
            }
            while (v68 >= *(_QWORD *)v12);
          }
          else
          {
            do
            {
              v83 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v83);
          }
          v85 = a2;
          if (v12 < (unint64_t)a2)
          {
            v85 = a2;
            do
            {
              v86 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v86);
          }
          while (v12 < (unint64_t)v85)
          {
            v173 = *(__n128 *)v12;
            v206 = *(__n128 *)(v12 + 16);
            v87 = v85[1];
            *(__n128 *)v12 = *v85;
            *(__n128 *)(v12 + 16) = v87;
            *v85 = v173;
            v85[1] = v206;
            do
            {
              v88 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v68 >= v88);
            do
            {
              v89 = v85[-2].n128_u64[0];
              v85 -= 2;
            }
            while (v68 < v89);
          }
          if (v12 - 32 != a1)
          {
            v90 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v90;
          }
          a4 = 0;
          *(_QWORD *)(v12 - 32) = v68;
          result = v220;
          *(_QWORD *)(v12 - 8) = v223;
          *(__n128 *)(v12 - 24) = v220;
          continue;
        }
        v222 = *(_QWORD *)(v12 + 24);
        v219 = *(__n128 *)(v12 + 8);
        v69 = v12;
        do
        {
          v70 = v69;
          v71 = *(_QWORD *)(v69 + 32);
          v69 += 32;
        }
        while (v71 < v68);
        v72 = a2;
        if (v70 == v12)
        {
          v72 = a2;
          do
          {
            if (v69 >= (unint64_t)v72)
              break;
            v74 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v74 >= v68);
        }
        else
        {
          do
          {
            v73 = v72[-2].n128_u64[0];
            v72 -= 2;
          }
          while (v73 >= v68);
        }
        v12 = v69;
        if (v69 < (unint64_t)v72)
        {
          v75 = v72;
          do
          {
            v76 = *(__n128 *)v12;
            v205 = *(__n128 *)(v12 + 16);
            v77 = v75[1];
            *(__n128 *)v12 = *v75;
            *(__n128 *)(v12 + 16) = v77;
            *v75 = v76;
            v75[1] = v205;
            do
            {
              v78 = *(_QWORD *)(v12 + 32);
              v12 += 32;
            }
            while (v78 < v68);
            do
            {
              v79 = v75[-2].n128_u64[0];
              v75 -= 2;
            }
            while (v79 >= v68);
          }
          while (v12 < (unint64_t)v75);
        }
        if (v12 - 32 != a1)
        {
          v80 = *(_OWORD *)(v12 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
          *(_OWORD *)(a1 + 16) = v80;
        }
        *(_QWORD *)(v12 - 32) = v68;
        *(_QWORD *)(v12 - 8) = v222;
        *(__n128 *)(v12 - 24) = v219;
        if (v69 < (unint64_t)v72)
        {
LABEL_73:
          sub_239CC0384(a1, v12 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v81 = sub_239CC0F5C(a1, v12 - 32, v219);
        if (!sub_239CC0F5C(v12, (uint64_t)a2, v82))
        {
          if (v81)
            continue;
          goto LABEL_73;
        }
        a2 = (__n128 *)(v12 - 32);
        if (!v81)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = (uint64_t)a2 - i;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = a2[-1].n128_u64[1];
        v72 = *(double *)(i + 16);
        if (a5.n128_f64[0] == v72)
          goto LABEL_257;
        v73 = a5.n128_f64[0] - v72;
        if (a5.n128_f64[0] < v72)
          v73 = v72 - a5.n128_f64[0];
        if (v73 <= 0.00000001)
        {
LABEL_257:
          v118 = v9->n128_u64[0] >= *(_QWORD *)i;
          if (v9->n128_u64[0] == *(_QWORD *)i)
            v118 = a2[-1].n128_u64[0] >= *(_QWORD *)(i + 8);
          if (v118)
            return a5.n128_f64[0];
        }
        else if (a5.n128_f64[0] >= v72)
        {
          return a5.n128_f64[0];
        }
        v167 = *(_QWORD *)(i + 16);
        v162 = *(__n128 *)i;
        a5 = *v9;
        *(_QWORD *)(i + 16) = a2[-1].n128_u64[1];
        *(__n128 *)i = a5;
        a5.n128_u64[0] = v162.n128_u64[0];
        a2[-1].n128_u64[1] = v167;
        *v9 = v162;
        return a5.n128_f64[0];
      case 3:
        a5.n128_u64[0] = sub_239E0BF44(i, (double *)(i + 24), (uint64_t)&a2[-2].n128_i64[1], a5).n128_u64[0];
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = sub_239E0C1A0((__n128 *)i, (__n128 *)(i + 24), i + 48, &a2[-2].n128_u64[1], a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        a5.n128_u64[0] = sub_239E0C344((__n128 *)i, (__n128 *)(i + 24), i + 48, i + 72, &a2[-2].n128_u64[1], a5).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 575)
        {
          v74 = (__n128 *)(i + 24);
          v76 = (__n128 *)i == a2 || v74 == a2;
          if ((a4 & 1) != 0)
          {
            if (v76)
              return a5.n128_f64[0];
            v77 = 0;
            n128_u64 = (_QWORD *)i;
            while (1)
            {
              v80 = (double *)n128_u64;
              n128_u64 = v74->n128_u64;
              a5.n128_f64[0] = v80[5];
              v81 = v80[2];
              if (a5.n128_f64[0] == v81)
                goto LABEL_190;
              v82 = a5.n128_f64[0] - v81;
              if (a5.n128_f64[0] < v81)
                v82 = v81 - a5.n128_f64[0];
              if (v82 <= 0.00000001)
              {
LABEL_190:
                v83 = v74->n128_u64[0];
                v84 = *n128_u64 >= *(_QWORD *)v80;
                if (*n128_u64 == *(_QWORD *)v80)
                  v84 = *((_QWORD *)v80 + 4) >= *((_QWORD *)v80 + 1);
                if (v84)
                  goto LABEL_183;
              }
              else
              {
                if (a5.n128_f64[0] >= v81)
                  goto LABEL_183;
                v83 = v74->n128_u64[0];
              }
              v85 = *((_QWORD *)v80 + 4);
              *(_OWORD *)n128_u64 = *(_OWORD *)v80;
              n128_u64[2] = *((_QWORD *)v80 + 2);
              v79 = (_QWORD *)i;
              if (v80 == (double *)i)
                goto LABEL_182;
              v86 = v77;
              while (1)
              {
                v87 = i + v86;
                v88 = (unint64_t *)(i + v86 - 24);
                v89 = *(double *)(i + v86 - 8);
                if (a5.n128_f64[0] != v89)
                {
                  v90 = a5.n128_f64[0] - v89;
                  if (a5.n128_f64[0] < v89)
                    v90 = v89 - a5.n128_f64[0];
                  if (v90 > 0.00000001)
                  {
                    if (a5.n128_f64[0] >= v89)
                      goto LABEL_205;
                    goto LABEL_196;
                  }
                }
                if (v83 != *v88)
                  break;
                if (v85 >= *(_QWORD *)(i + v86 - 16))
                {
LABEL_205:
                  v79 = v80;
                  goto LABEL_182;
                }
LABEL_196:
                v80 -= 3;
                *(_OWORD *)v87 = *(_OWORD *)v88;
                *(_QWORD *)(v87 + 16) = *(_QWORD *)(i + v86 - 8);
                v86 -= 24;
                if (!v86)
                {
                  v79 = (_QWORD *)i;
                  goto LABEL_182;
                }
              }
              if (v83 < *v88)
                goto LABEL_196;
              v79 = (_QWORD *)(i + v86);
LABEL_182:
              *v79 = v83;
              v79[1] = v85;
              v79[2] = a5.n128_u64[0];
LABEL_183:
              v74 = (__n128 *)(n128_u64 + 3);
              v77 += 24;
              if (n128_u64 + 3 == (_QWORD *)a2)
                return a5.n128_f64[0];
            }
          }
          if (v76)
            return a5.n128_f64[0];
          while (1)
          {
            v119 = a1;
            a1 = (uint64_t)v74;
            a5.n128_u64[0] = *(_QWORD *)(v119 + 40);
            v120 = *(double *)(v119 + 16);
            if (a5.n128_f64[0] == v120)
              goto LABEL_271;
            v121 = a5.n128_f64[0] - v120;
            if (a5.n128_f64[0] < v120)
              v121 = v120 - a5.n128_f64[0];
            if (v121 <= 0.00000001)
            {
LABEL_271:
              v122 = v74->n128_u64[0];
              v123 = v74->n128_u64[0] >= *(_QWORD *)v119;
              if (v74->n128_u64[0] == *(_QWORD *)v119)
                v123 = *(_QWORD *)(v119 + 32) >= *(_QWORD *)(v119 + 8);
              if (v123)
                goto LABEL_264;
            }
            else
            {
              if (a5.n128_f64[0] >= v120)
                goto LABEL_264;
              v122 = v74->n128_u64[0];
            }
            v124 = *(_QWORD *)(v119 + 32);
            do
            {
              while (1)
              {
                v125 = (double *)v119;
                *(_OWORD *)(v119 + 24) = *(_OWORD *)v119;
                *(_QWORD *)(v119 + 40) = *(_QWORD *)(v119 + 16);
                v119 -= 24;
                v126 = *(v125 - 1);
                if (a5.n128_f64[0] == v126)
                  break;
                v127 = a5.n128_f64[0] - v126;
                if (a5.n128_f64[0] < v126)
                  v127 = v126 - a5.n128_f64[0];
                if (v127 <= 0.00000001)
                  break;
                if (a5.n128_f64[0] >= v126)
                  goto LABEL_263;
              }
              v128 = *((_QWORD *)v125 - 3);
              v129 = v122 >= v128;
              if (v122 == v128)
                v129 = v124 >= *((_QWORD *)v125 - 2);
            }
            while (!v129);
LABEL_263:
            *(_QWORD *)v125 = v122;
            *((_QWORD *)v125 + 1) = v124;
            v125[2] = a5.n128_f64[0];
LABEL_264:
            v74 = (__n128 *)(a1 + 24);
            if ((__n128 *)(a1 + 24) == a2)
              return a5.n128_f64[0];
          }
        }
        if (!a3)
        {
          if ((__n128 *)i == a2)
            return a5.n128_f64[0];
          v91 = (unint64_t)(v12 - 2) >> 1;
          v92 = v91;
          while (1)
          {
            v94 = v92;
            if (v91 < v92)
              goto LABEL_211;
            v95 = (2 * v92) | 1;
            v93 = i + 24 * v95;
            if (2 * v94 + 2 >= v12)
              goto LABEL_224;
            v96 = *(double *)(i + 24 * v95 + 16);
            v97 = *(double *)(v93 + 40);
            if (v96 == v97)
              break;
            v98 = v96 - v97;
            if (v96 < v97)
              v98 = v97 - v96;
            if (v98 <= 0.00000001)
              break;
            if (v96 < v97)
              goto LABEL_223;
LABEL_224:
            v101 = i + 24 * v94;
            v102 = *(double *)(v93 + 16);
            v103 = *(double *)(v101 + 16);
            if (v102 == v103)
              goto LABEL_230;
            v104 = v102 - v103;
            if (v102 < v103)
              v104 = v103 - v102;
            if (v104 <= 0.00000001)
            {
LABEL_230:
              v105 = *(_QWORD *)v93;
              if (*(_QWORD *)v93 == *(_QWORD *)v101)
              {
                if (*(_QWORD *)(v93 + 8) < *(_QWORD *)(i + 24 * v94 + 8))
                  goto LABEL_211;
              }
              else
              {
                v105 = *(_QWORD *)v101;
                if (*(_QWORD *)v93 < *(_QWORD *)v101)
                  goto LABEL_211;
              }
            }
            else
            {
              if (v102 < v103)
                goto LABEL_211;
              v105 = *(_QWORD *)v101;
            }
            v106 = *(_QWORD *)(v101 + 8);
            do
            {
              while (1)
              {
                v107 = *(_OWORD *)v93;
                *(_QWORD *)(v101 + 16) = *(_QWORD *)(v93 + 16);
                *(_OWORD *)v101 = v107;
                if (v91 < v95)
                  goto LABEL_210;
                v101 = v93;
                v108 = 2 * v95;
                v95 = (2 * v95) | 1;
                v93 = i + 24 * v95;
                v109 = v108 + 2;
                if (v109 < v12)
                {
                  v110 = *(double *)(i + 24 * v95 + 16);
                  v111 = *(double *)(v93 + 40);
                  if (v110 != v111)
                  {
                    v112 = v110 - v111;
                    if (v110 < v111)
                      v112 = v111 - v110;
                    if (v112 > 0.00000001)
                    {
                      if (v110 >= v111)
                        goto LABEL_249;
LABEL_248:
                      v93 += 24;
                      v95 = v109;
                      goto LABEL_249;
                    }
                  }
                  v113 = *(_QWORD *)(v93 + 24);
                  v114 = *(_QWORD *)v93 >= v113;
                  if (*(_QWORD *)v93 == v113)
                    v114 = *(_QWORD *)(i + 24 * v95 + 8) >= *(_QWORD *)(v93 + 32);
                  if (!v114)
                    goto LABEL_248;
                }
LABEL_249:
                v115 = *(double *)(v93 + 16);
                if (v115 == v103)
                  break;
                v116 = v115 - v103;
                if (v115 < v103)
                  v116 = v103 - v115;
                if (v116 <= 0.00000001)
                  break;
                if (v115 < v103)
                  goto LABEL_209;
              }
              v117 = *(_QWORD *)v93 >= v105;
              if (*(_QWORD *)v93 == v105)
                v117 = *(_QWORD *)(v93 + 8) >= v106;
            }
            while (v117);
LABEL_209:
            v93 = v101;
LABEL_210:
            *(_QWORD *)v93 = v105;
            *(_QWORD *)(v93 + 8) = v106;
            *(double *)(v93 + 16) = v103;
LABEL_211:
            v92 = v94 - 1;
            if (!v94)
            {
              v130 = v11 / 0x18uLL;
              while (1)
              {
                v132 = 0;
                v168 = *(_QWORD *)(i + 16);
                v163 = *(__n128 *)i;
                v133 = (__n128 *)i;
                do
                {
                  v135 = v133;
                  v136 = v132 + 1;
                  v133 = (__n128 *)((char *)v133 + 24 * v132 + 24);
                  v137 = 2 * v132;
                  v132 = (2 * v132) | 1;
                  v138 = v137 + 2;
                  if (v138 < v130)
                  {
                    v139 = v135[1].n128_f64[3 * v136];
                    v140 = v133[2].n128_f64[1];
                    if (v139 == v140)
                      goto LABEL_297;
                    v141 = v139 - v140;
                    if (v139 < v140)
                      v141 = v140 - v139;
                    if (v141 <= 0.00000001)
                    {
LABEL_297:
                      v142 = v133[1].n128_u64[1];
                      v143 = v133->n128_u64[0] >= v142;
                      if (v133->n128_u64[0] == v142)
                        v143 = v135->n128_u64[3 * v136 + 1] >= v133[2].n128_u64[0];
                      if (!v143)
                      {
LABEL_288:
                        v133 = (__n128 *)((char *)v133 + 24);
                        v132 = v138;
                      }
                    }
                    else if (v139 < v140)
                    {
                      goto LABEL_288;
                    }
                  }
                  v134 = *v133;
                  v135[1].n128_u64[0] = v133[1].n128_u64[0];
                  *v135 = v134;
                }
                while (v132 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v133 == a2)
                {
                  a5.n128_u64[0] = v163.n128_u64[0];
                  v133[1].n128_u64[0] = v168;
                  *v133 = v163;
                }
                else
                {
                  a5 = *a2;
                  v133[1].n128_u64[0] = a2[1].n128_u64[0];
                  *v133 = a5;
                  a5.n128_u64[0] = v163.n128_u64[0];
                  a2[1].n128_u64[0] = v168;
                  *a2 = v163;
                  v144 = (uint64_t)&v133[1].n128_i64[1] - i;
                  if (v144 >= 25)
                  {
                    v145 = -2 - 0x5555555555555555 * (v144 >> 3);
                    v146 = v145 >> 1;
                    v147 = i + 24 * (v145 >> 1);
                    v148 = *(double *)(v147 + 16);
                    a5.n128_u64[0] = v133[1].n128_u64[0];
                    if (v148 == a5.n128_f64[0])
                      goto LABEL_310;
                    v149 = v148 - a5.n128_f64[0];
                    if (v148 < a5.n128_f64[0])
                      v149 = a5.n128_f64[0] - v148;
                    if (v149 <= 0.00000001)
                    {
LABEL_310:
                      v150 = *(_QWORD *)v147;
                      if (*(_QWORD *)v147 == v133->n128_u64[0])
                      {
                        if (*(_QWORD *)(i + 24 * v146 + 8) >= v133->n128_u64[1])
                          goto LABEL_286;
                      }
                      else
                      {
                        v150 = v133->n128_u64[0];
                        if (*(_QWORD *)v147 >= v133->n128_u64[0])
                          goto LABEL_286;
                      }
LABEL_314:
                      v151 = v133->n128_u64[1];
                      v152 = *(__n128 *)v147;
                      v133[1].n128_u64[0] = *(_QWORD *)(v147 + 16);
                      *v133 = v152;
                      if (v145 >= 2)
                      {
                        do
                        {
                          v154 = v147;
                          v155 = v146 - 1;
                          v146 = (v146 - 1) >> 1;
                          v147 = i + 24 * v146;
                          v156 = *(double *)(v147 + 16);
                          if (v156 == a5.n128_f64[0])
                            goto LABEL_324;
                          v157 = v156 - a5.n128_f64[0];
                          if (v156 < a5.n128_f64[0])
                            v157 = a5.n128_f64[0] - v156;
                          if (v157 <= 0.00000001)
                          {
LABEL_324:
                            if (*(_QWORD *)v147 == v150)
                            {
                              if (*(_QWORD *)(i + 24 * v146 + 8) >= v151)
                              {
LABEL_326:
                                v147 = v154;
                                break;
                              }
                            }
                            else if (*(_QWORD *)v147 >= v150)
                            {
                              goto LABEL_326;
                            }
                          }
                          else if (v156 >= a5.n128_f64[0])
                          {
                            goto LABEL_326;
                          }
                          v153 = *(__n128 *)v147;
                          *(_QWORD *)(v154 + 16) = *(_QWORD *)(v147 + 16);
                          *(__n128 *)v154 = v153;
                        }
                        while (v155 > 1);
                      }
                      *(_QWORD *)v147 = v150;
                      *(_QWORD *)(v147 + 8) = v151;
                      *(_QWORD *)(v147 + 16) = a5.n128_u64[0];
                    }
                    else if (v148 < a5.n128_f64[0])
                    {
                      v150 = v133->n128_u64[0];
                      goto LABEL_314;
                    }
                  }
                }
LABEL_286:
                if (v130-- <= 2)
                  return a5.n128_f64[0];
              }
            }
          }
          v99 = *(_QWORD *)(v93 + 24);
          v100 = *(_QWORD *)v93 >= v99;
          if (*(_QWORD *)v93 == v99)
            v100 = *(_QWORD *)(i + 24 * v95 + 8) >= *(_QWORD *)(v93 + 32);
          if (v100)
            goto LABEL_224;
LABEL_223:
          v93 += 24;
          v95 = 2 * v94 + 2;
          goto LABEL_224;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = i + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          a5 = sub_239E0BF44(a1 + 24 * v13, (double *)a1, (uint64_t)&a2[-2].n128_i64[1], a5);
          --a3;
          if ((a4 & 1) != 0)
          {
LABEL_14:
            v24 = *(double *)a1;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 16);
            goto LABEL_19;
          }
        }
        else
        {
          v15 = sub_239E0BF44(a1, (double *)(a1 + 24 * v13), (uint64_t)&a2[-2].n128_i64[1], a5);
          v16 = 24 * v13;
          v17 = (double *)(24 * v13 + a1 - 24);
          v18 = sub_239E0BF44(a1 + 24, v17, (uint64_t)&a2[-3], v15);
          v19 = (double *)(a1 + 24 + v16);
          v20 = sub_239E0BF44(a1 + 48, v19, (uint64_t)&a2[-5].n128_i64[1], v18);
          sub_239E0BF44((uint64_t)v17, (double *)v14, (uint64_t)v19, v20);
          v164 = *(_QWORD *)(a1 + 16);
          v159 = *(_OWORD *)a1;
          v21 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v21;
          a5.n128_u64[1] = *((_QWORD *)&v159 + 1);
          *(_QWORD *)(v14 + 16) = v164;
          *(_OWORD *)v14 = v159;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_14;
        }
        v22 = *(double *)(a1 - 8);
        a5.n128_u64[0] = *(_QWORD *)(a1 + 16);
        if (v22 != a5.n128_f64[0])
        {
          v23 = v22 - a5.n128_f64[0];
          if (v22 < a5.n128_f64[0])
            v23 = a5.n128_f64[0] - v22;
          if (v23 > 0.00000001)
          {
            v24 = *(double *)a1;
            if (v22 < a5.n128_f64[0])
              goto LABEL_19;
            goto LABEL_90;
          }
        }
        v25 = *(_QWORD *)(a1 - 24);
        v24 = *(double *)a1;
        if (v25 != *(_QWORD *)a1)
        {
          if (v25 < *(_QWORD *)a1)
            goto LABEL_19;
          goto LABEL_90;
        }
        if (*(_QWORD *)(a1 - 16) >= *(_QWORD *)(a1 + 8))
        {
LABEL_90:
          v51 = *(_QWORD *)(a1 + 8);
          v52 = a2[-1].n128_f64[1];
          if (a5.n128_f64[0] == v52)
            goto LABEL_108;
          v53 = a5.n128_f64[0] - v52;
          if (a5.n128_f64[0] < v52)
            v53 = v52 - a5.n128_f64[0];
          if (v53 <= 0.00000001)
          {
LABEL_108:
            v56 = *(_QWORD *)&v24 >= v9->n128_u64[0];
            if (*(_QWORD *)&v24 == v9->n128_u64[0])
              v56 = v51 >= a2[-1].n128_u64[0];
            if (!v56)
            {
LABEL_111:
              for (i = a1 + 24; ; i += 24)
              {
                v57 = *(double *)(i + 16);
                if (a5.n128_f64[0] == v57)
                  goto LABEL_120;
                v58 = a5.n128_f64[0] - v57;
                if (a5.n128_f64[0] < v57)
                  v58 = v57 - a5.n128_f64[0];
                if (v58 <= 0.00000001)
                {
LABEL_120:
                  if (*(_QWORD *)&v24 == *(_QWORD *)i)
                  {
                    if (v51 < *(_QWORD *)(i + 8))
                      goto LABEL_122;
                  }
                  else if (*(_QWORD *)&v24 < *(_QWORD *)i)
                  {
                    goto LABEL_122;
                  }
                }
                else if (a5.n128_f64[0] < v57)
                {
                  goto LABEL_122;
                }
              }
            }
          }
          else if (a5.n128_f64[0] < v52)
          {
            goto LABEL_111;
          }
          for (i = a1 + 24; i < (unint64_t)a2; i += 24)
          {
            v54 = *(double *)(i + 16);
            if (a5.n128_f64[0] == v54)
              goto LABEL_105;
            v55 = a5.n128_f64[0] - v54;
            if (a5.n128_f64[0] < v54)
              v55 = v54 - a5.n128_f64[0];
            if (v55 <= 0.00000001)
            {
LABEL_105:
              if (*(_QWORD *)&v24 == *(_QWORD *)i)
              {
                if (v51 < *(_QWORD *)(i + 8))
                  break;
              }
              else if (*(_QWORD *)&v24 < *(_QWORD *)i)
              {
                break;
              }
            }
            else if (a5.n128_f64[0] < v54)
            {
              break;
            }
          }
LABEL_122:
          v59 = a2;
          if (i >= (unint64_t)a2)
            goto LABEL_135;
          for (j = a2 - 1; a5.n128_f64[0] != v52; j = (__n128 *)((char *)j - 24))
          {
            v61 = a5.n128_f64[0] - v52;
            if (a5.n128_f64[0] < v52)
              v61 = v52 - a5.n128_f64[0];
            if (v61 <= 0.00000001)
              break;
            if (a5.n128_f64[0] >= v52)
              goto LABEL_134;
LABEL_125:
            v52 = j[-1].n128_f64[0];
          }
          v62 = j[-1].n128_u64[1];
          v63 = *(_QWORD *)&v24 >= v62;
          if (*(_QWORD *)&v24 == v62)
            v63 = v51 >= j->n128_u64[0];
          if (!v63)
            goto LABEL_125;
LABEL_134:
          v59 = (__n128 *)((char *)j - 8);
LABEL_135:
          while (i < (unint64_t)v59)
          {
            v166 = *(_QWORD *)(i + 16);
            v161 = *(__n128 *)i;
            v64 = *v59;
            *(_QWORD *)(i + 16) = v59[1].n128_u64[0];
            *(__n128 *)i = v64;
            v59[1].n128_u64[0] = v166;
            *v59 = v161;
            do
            {
              while (1)
              {
                i += 24;
                v65 = *(double *)(i + 16);
                if (a5.n128_f64[0] == v65)
                  break;
                v66 = a5.n128_f64[0] - v65;
                if (a5.n128_f64[0] < v65)
                  v66 = v65 - a5.n128_f64[0];
                if (v66 <= 0.00000001)
                  break;
                if (a5.n128_f64[0] < v65)
                  goto LABEL_148;
              }
              v67 = *(_QWORD *)&v24 >= *(_QWORD *)i;
              if (*(_QWORD *)&v24 == *(_QWORD *)i)
                v67 = v51 >= *(_QWORD *)(i + 8);
            }
            while (v67);
            do
            {
LABEL_148:
              while (1)
              {
                v59 = (__n128 *)((char *)v59 - 24);
                v68 = v59[1].n128_f64[0];
                if (a5.n128_f64[0] == v68)
                  break;
                v69 = a5.n128_f64[0] - v68;
                if (a5.n128_f64[0] < v68)
                  v69 = v68 - a5.n128_f64[0];
                if (v69 <= 0.00000001)
                  break;
                if (a5.n128_f64[0] >= v68)
                  goto LABEL_135;
              }
              v70 = *(_QWORD *)&v24 >= v59->n128_u64[0];
              if (*(_QWORD *)&v24 == v59->n128_u64[0])
                v70 = v51 >= v59->n128_u64[1];
            }
            while (!v70);
          }
          if (i - 24 != a1)
          {
            v71 = *(_OWORD *)(i - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 8);
            *(_OWORD *)a1 = v71;
          }
          a4 = 0;
          *(double *)(i - 24) = v24;
          *(_QWORD *)(i - 16) = v51;
          *(_QWORD *)(i - 8) = a5.n128_u64[0];
          continue;
        }
        v24 = *(double *)(a1 - 24);
LABEL_19:
        v26 = *(_QWORD *)(a1 + 8);
        v27 = a1 + 24;
        while (2)
        {
          v28 = *(double *)(v27 + 16);
          if (v28 != a5.n128_f64[0])
          {
            v29 = v28 - a5.n128_f64[0];
            if (v28 < a5.n128_f64[0])
              v29 = a5.n128_f64[0] - v28;
            if (v29 > 0.00000001)
            {
              if (v28 >= a5.n128_f64[0])
                break;
              goto LABEL_21;
            }
          }
          v30 = *(_QWORD *)v27 >= *(_QWORD *)&v24;
          if (*(_QWORD *)v27 == *(_QWORD *)&v24)
            v30 = *(_QWORD *)(v27 + 8) >= v26;
          if (!v30)
          {
LABEL_21:
            v27 += 24;
            continue;
          }
          break;
        }
        k = (__n128 *)((char *)a2 - 24);
        if (v27 - 24 != a1)
        {
          while (1)
          {
            v32 = k[1].n128_f64[0];
            if (v32 == a5.n128_f64[0])
              goto LABEL_42;
            v33 = v32 - a5.n128_f64[0];
            if (v32 < a5.n128_f64[0])
              v33 = a5.n128_f64[0] - v32;
            if (v33 <= 0.00000001)
            {
LABEL_42:
              v34 = k->n128_u64[0] >= *(_QWORD *)&v24;
              if (k->n128_u64[0] == *(_QWORD *)&v24)
                v34 = k->n128_u64[1] >= v26;
              if (!v34)
                goto LABEL_61;
            }
            else if (v32 < a5.n128_f64[0])
            {
              goto LABEL_61;
            }
            k = (__n128 *)((char *)k - 24);
          }
        }
        k = a2;
        if (v27 < (unint64_t)a2)
        {
          for (k = (__n128 *)((char *)a2 - 24); ; k = (__n128 *)((char *)k - 24))
          {
            v36 = k[1].n128_f64[0];
            if (v36 == a5.n128_f64[0])
              goto LABEL_59;
            v37 = v36 - a5.n128_f64[0];
            if (v36 < a5.n128_f64[0])
              v37 = a5.n128_f64[0] - v36;
            if (v37 <= 0.00000001)
            {
LABEL_59:
              v39 = k->n128_u64[0] >= *(_QWORD *)&v24;
              if (k->n128_u64[0] == *(_QWORD *)&v24)
                v39 = k->n128_u64[1] >= v26;
              if (!v39 || v27 >= (unint64_t)k)
                break;
            }
            else if (v36 < a5.n128_f64[0] || v27 >= (unint64_t)k)
            {
              break;
            }
          }
        }
LABEL_61:
        i = v27;
        if (v27 < (unint64_t)k)
        {
          i = v27;
          v40 = (unint64_t)k;
          do
          {
            v165 = *(_QWORD *)(i + 16);
            v160 = *(__n128 *)i;
            v41 = *(__n128 *)v40;
            *(_QWORD *)(i + 16) = *(_QWORD *)(v40 + 16);
            *(__n128 *)i = v41;
            *(_QWORD *)(v40 + 16) = v165;
            *(__n128 *)v40 = v160;
            do
            {
              while (1)
              {
                i += 24;
                v42 = *(double *)(i + 16);
                if (v42 == a5.n128_f64[0])
                  break;
                v43 = v42 - a5.n128_f64[0];
                if (v42 < a5.n128_f64[0])
                  v43 = a5.n128_f64[0] - v42;
                if (v43 <= 0.00000001)
                  break;
                if (v42 >= a5.n128_f64[0])
                  goto LABEL_76;
              }
              v44 = *(_QWORD *)i >= *(_QWORD *)&v24;
              if (*(_QWORD *)i == *(_QWORD *)&v24)
                v44 = *(_QWORD *)(i + 8) >= v26;
            }
            while (!v44);
            do
            {
LABEL_76:
              while (1)
              {
                v40 -= 24;
                v45 = *(double *)(v40 + 16);
                if (v45 == a5.n128_f64[0])
                  break;
                v46 = v45 - a5.n128_f64[0];
                if (v45 < a5.n128_f64[0])
                  v46 = a5.n128_f64[0] - v45;
                if (v46 <= 0.00000001)
                  break;
                if (v45 < a5.n128_f64[0])
                  goto LABEL_63;
              }
              v47 = *(_QWORD *)v40 >= *(_QWORD *)&v24;
              if (*(_QWORD *)v40 == *(_QWORD *)&v24)
                v47 = *(_QWORD *)(v40 + 8) >= v26;
            }
            while (v47);
LABEL_63:
            ;
          }
          while (i < v40);
        }
        if (i - 24 != a1)
        {
          v48 = *(_OWORD *)(i - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 8);
          *(_OWORD *)a1 = v48;
        }
        *(double *)(i - 24) = v24;
        *(_QWORD *)(i - 16) = v26;
        *(_QWORD *)(i - 8) = a5.n128_u64[0];
        if (v27 < (unint64_t)k)
        {
LABEL_89:
          sub_239E0B0C0(a1, i - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v49 = sub_239E0C56C(a1, i - 24, a5);
        if (!sub_239E0C56C(i, (uint64_t)a2, v50))
        {
          if (v49)
            continue;
          goto LABEL_89;
        }
        a2 = (__n128 *)(i - 24);
        if (!v49)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

BOOL sub_2394AD300(__n128 *a1, char *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  char *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  __n128 v60;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__int128 *)(a2 - 24);
      if (*((_QWORD *)a2 - 3) > a1->n128_u64[0])
        goto LABEL_7;
      return result;
    case 3uLL:
      v8 = (__int128 *)&a1[1].n128_i8[8];
      v9 = a1[1].n128_u64[1];
      v7 = (__int128 *)(a2 - 24);
      v10 = *((_QWORD *)a2 - 3);
      if (v9 <= a1->n128_u64[0])
      {
        if (v10 > v9)
        {
          v35 = a1[2].n128_i64[1];
          v36 = *v8;
          v37 = *((_QWORD *)a2 - 1);
          *v8 = *v7;
          a1[2].n128_u64[1] = v37;
          *v7 = v36;
          *((_QWORD *)a2 - 1) = v35;
          if (a1[1].n128_u64[1] > a1->n128_u64[0])
          {
            v38 = a1[1].n128_i64[0];
            v39 = (__int128)*a1;
            *a1 = (__n128)*v8;
            a1[1].n128_u64[0] = a1[2].n128_u64[1];
            *v8 = v39;
            a1[2].n128_u64[1] = v38;
          }
        }
      }
      else if (v10 <= v9)
      {
        v44 = a1[1].n128_i64[0];
        v45 = (__int128)*a1;
        *a1 = (__n128)*v8;
        a1[1].n128_u64[0] = a1[2].n128_u64[1];
        *v8 = v45;
        a1[2].n128_u64[1] = v44;
        if (*(_QWORD *)v7 > a1[1].n128_u64[1])
        {
          v46 = a1[2].n128_i64[1];
          v47 = *v8;
          v48 = *((_QWORD *)a2 - 1);
          *v8 = *v7;
          a1[2].n128_u64[1] = v48;
          *v7 = v47;
          *((_QWORD *)a2 - 1) = v46;
        }
      }
      else
      {
LABEL_7:
        v11 = a1[1].n128_i64[0];
        v12 = *a1;
        v13 = *((_QWORD *)v7 + 2);
        *a1 = (__n128)*v7;
        a1[1].n128_u64[0] = v13;
        *v7 = (__int128)v12;
        *((_QWORD *)v7 + 2) = v11;
      }
      return result;
    case 4uLL:
      sub_2394AD790(a1, (__n128 *)((char *)a1 + 24), a1[3].n128_u64, (uint64_t)(a2 - 24), a3);
      return 1;
    case 5uLL:
      v21 = (__n128 *)((char *)a1 + 24);
      v22 = a1 + 3;
      v23 = (__n128 *)((char *)a1 + 72);
      sub_2394AD790(a1, (__n128 *)((char *)a1 + 24), a1[3].n128_u64, (uint64_t)&a1[4].n128_i64[1], a3);
      v25 = *((_QWORD *)a2 - 3);
      v24 = (__n128 *)(a2 - 24);
      if (v25 > a1[4].n128_u64[1])
      {
        v26 = a1[5].n128_i64[1];
        v27 = *v23;
        v28 = v24[1].n128_i64[0];
        *v23 = *v24;
        a1[5].n128_u64[1] = v28;
        *v24 = v27;
        v24[1].n128_u64[0] = v26;
        if (v23->n128_u64[0] > v22->n128_u64[0])
        {
          v29 = a1[4].n128_i64[0];
          v30 = *v22;
          *v22 = *v23;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *v23 = v30;
          a1[5].n128_u64[1] = v29;
          if (v22->n128_u64[0] > v21->n128_u64[0])
          {
            v31 = a1[2].n128_i64[1];
            v32 = *v21;
            *v21 = *v22;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *v22 = v32;
            a1[4].n128_u64[0] = v31;
            if (a1[1].n128_u64[1] > a1->n128_u64[0])
            {
              v33 = a1[1].n128_i64[0];
              v34 = *a1;
              *a1 = *v21;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *v21 = v34;
              a1[2].n128_u64[1] = v33;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 3;
      v15 = a1[3].n128_u64[0];
      v16 = (__n128 *)((char *)a1 + 24);
      v17 = a1[1].n128_u64[1];
      v18 = a1->n128_u64[0];
      if (v17 <= a1->n128_u64[0])
      {
        if (v15 > v17)
        {
          v40 = a1[2].n128_i64[1];
          v41 = *v16;
          *v16 = *v14;
          a1[2].n128_u64[1] = a1[4].n128_u64[0];
          *v14 = v41;
          a1[4].n128_u64[0] = v40;
          if (v16->n128_u64[0] > v18)
          {
            v42 = a1[1].n128_i64[0];
            v43 = *a1;
            *a1 = *v16;
            a1[1].n128_u64[0] = a1[2].n128_u64[1];
            *v16 = v43;
            a1[2].n128_u64[1] = v42;
          }
        }
      }
      else if (v15 <= v17)
      {
        v49 = a1[1].n128_i64[0];
        v50 = *a1;
        *a1 = *v16;
        a1[1].n128_u64[0] = a1[2].n128_u64[1];
        *v16 = v50;
        a1[2].n128_u64[1] = v49;
        if (v15 > a1[1].n128_u64[1])
        {
          v51 = a1[2].n128_i64[1];
          v52 = *v16;
          *v16 = *v14;
          a1[2].n128_u64[1] = a1[4].n128_u64[0];
          *v14 = v52;
          a1[4].n128_u64[0] = v51;
        }
      }
      else
      {
        v19 = a1[1].n128_i64[0];
        v20 = *a1;
        *a1 = *v14;
        a1[1].n128_u64[0] = a1[4].n128_u64[0];
        *v14 = v20;
        a1[4].n128_u64[0] = v19;
      }
      v53 = &a1[4].n128_i8[8];
      if (&a1[4].n128_i8[8] == a2)
        return 1;
      v54 = 0;
      v55 = 0;
      break;
  }
  while (1)
  {
    v56 = *(_QWORD *)v53;
    if (*(_QWORD *)v53 > v14->n128_u64[0])
      break;
LABEL_36:
    v14 = (__n128 *)v53;
    v54 += 24;
    v53 += 24;
    if (v53 == a2)
      return 1;
  }
  v60 = *(__n128 *)(v53 + 8);
  v57 = v54;
  do
  {
    v58 = (uint64_t)a1 + v57;
    *(__n128 *)(v58 + 72) = *(__n128 *)((char *)a1 + v57 + 48);
    *(_QWORD *)(v58 + 88) = *(unint64_t *)((char *)a1[4].n128_u64 + v57);
    if (v57 == -48)
    {
      a1->n128_u64[0] = v56;
      *(__n128 *)((char *)a1 + 8) = v60;
      if (++v55 != 8)
        goto LABEL_36;
      return v53 + 24 == a2;
    }
    v57 -= 24;
  }
  while (v56 > *(_QWORD *)(v58 + 24));
  v59 = (__n128 *)((char *)a1 + v57);
  v59[4].n128_u64[1] = v56;
  v59[5] = v60;
  if (++v55 != 8)
    goto LABEL_36;
  return v53 + 24 == a2;
}

__n128 sub_2394AD790(__n128 *a1, __n128 *a2, unint64_t *a3, uint64_t a4, __n128 result)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2->n128_u64[0];
  v6 = *a3;
  if (a2->n128_u64[0] <= a1->n128_u64[0])
  {
    if (v6 > v5)
    {
      v9 = a2[1].n128_i64[0];
      result = *a2;
      v10 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v10;
      *(__n128 *)a3 = result;
      a3[2] = v9;
      if (a2->n128_u64[0] > a1->n128_u64[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[2];
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      a3[2] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if (*a3 > a2->n128_u64[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 > *a3)
  {
    v16 = a3[2];
    result = *(__n128 *)a3;
    v17 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v17;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v16;
    if (*a3 > a2->n128_u64[0])
    {
      v18 = a2[1].n128_i64[0];
      result = *a2;
      v19 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v19;
      *(__n128 *)a3 = result;
      a3[2] = v18;
      if (a2->n128_u64[0] > a1->n128_u64[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

_QWORD *sub_2394AD918(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4 + ((*a2 + 2654435769) << 6) + ((unint64_t)(*a2 + 2654435769) >> 2) + 2654435769u) ^ (*a2 + 2654435769);
  v6 = a2[2];
  v7 = a2[3];
  v8 = (v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = (v7 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
    if (v9 >= *(_QWORD *)&v2)
      v11 = v9 % *(_QWORD *)&v2;
  }
  else
  {
    v11 = v9 & (*(_QWORD *)&v2 - 1);
  }
  v12 = *(_QWORD **)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  result = (_QWORD *)*v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v17 = result[1];
        if (v17 == v9)
        {
          v18 = result[2] == v3 && result[3] == v4;
          if (v18 && result[4] == v6 && result[5] == v7)
            return result;
        }
        else if ((v17 & v14) != v11)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v15 = result[1];
      if (v15 == v9)
      {
        v16 = result[2] == v3 && result[3] == v4;
        if (v16 && result[4] == v6 && result[5] == v7)
          return result;
      }
      else
      {
        if (v15 >= *(_QWORD *)&v2)
          v15 %= *(_QWORD *)&v2;
        if (v15 != v11)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_2394ADA70(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  _QWORD *v23;
  __int128 v24;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v7 = *a2;
  v8 = a2[1];
  v9 = (v8 + ((*a2 + 2654435769) << 6) + ((unint64_t)(*a2 + 2654435769) >> 2) + 2654435769u) ^ (*a2 + 2654435769);
  v10 = a2[2];
  v11 = a2[3];
  v12 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  v13 = (v11 + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v4 = (v11 + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
      if (v13 >= v14)
        v4 = v13 % v14;
    }
    else
    {
      v4 = v13 & (v14 - 1);
    }
    v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v16)
    {
      v17 = (_QWORD *)*v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v17[1];
            if (v20 == v13)
            {
              v21 = v17[2] == v7 && v17[3] == v8;
              if (v21 && v17[4] == v10 && v17[5] == v11)
                return v17;
            }
            else if ((v20 & (v14 - 1)) != v4)
            {
              goto LABEL_35;
            }
            v17 = (_QWORD *)*v17;
            if (!v17)
              goto LABEL_35;
          }
        }
        do
        {
          v18 = v17[1];
          if (v18 == v13)
          {
            v19 = v17[2] == v7 && v17[3] == v8;
            if (v19 && v17[4] == v10 && v17[5] == v11)
              return v17;
          }
          else
          {
            if (v18 >= v14)
              v18 %= v14;
            if (v18 != v4)
              break;
          }
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_35:
  v23 = operator new(0x48uLL);
  *v23 = 0;
  v23[1] = v13;
  v24 = (*a4)[1];
  *((_OWORD *)v23 + 1) = **a4;
  *((_OWORD *)v23 + 2) = v24;
  v23[7] = 0;
  v23[8] = 0;
  v23[6] = 0;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (v14 && (float)(v26 * (float)v14) >= v25)
  {
    v27 = *(_QWORD *)a1;
    v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v28)
    {
LABEL_38:
      *v23 = *v28;
LABEL_73:
      *v28 = v23;
      goto LABEL_74;
    }
  }
  else
  {
    v29 = 1;
    if (v14 >= 3)
      v29 = (v14 & (v14 - 1)) != 0;
    v30 = v29 | (2 * v14);
    v31 = vcvtps_u32_f32(v25 / v26);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v14)
      goto LABEL_49;
    if (prime < v14)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < v14)
LABEL_49:
        sub_239427FE0(a1, prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    v36 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        v4 = v13 % v14;
        v27 = *(_QWORD *)a1;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v13 % v14));
        if (v28)
          goto LABEL_38;
      }
      else
      {
        v4 = v13;
        v27 = *(_QWORD *)a1;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
        if (v28)
          goto LABEL_38;
      }
    }
    else
    {
      v4 = v36 & v13;
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v36 & v13));
      if (v28)
        goto LABEL_38;
    }
  }
  *v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(v27 + 8 * v4) = a1 + 16;
  if (*v23)
  {
    v37 = *(_QWORD *)(*v23 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v37 >= v14)
        v37 %= v14;
    }
    else
    {
      v37 &= v14 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v23;
}

void sub_2394ADE00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394ADE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, char **a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::chrono::system_clock::time_point v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  _BOOL4 v48;
  _BOOL4 v49;
  char v50;
  char v51;
  std::chrono::system_clock::time_point v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  std::chrono::system_clock::time_point v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  _BOOL4 v87;
  _BOOL4 v88;
  char v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::chrono::system_clock::time_point v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  void *v107[2];
  __int128 v108;
  void *v109;
  void *v110;
  char v111;
  void *v112;
  void *v113;
  char v114;
  void *v115;
  void *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _QWORD v128[3];
  _QWORD *v129;
  _BYTE v130[24];
  _BYTE *v131;
  _BYTE v132[24];
  _BYTE *v133;
  _BYTE v134[24];
  _BYTE *v135;
  void *__p[3];
  void **v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  _BYTE v142[24];
  _BYTE *v143;
  _BYTE v144[568];
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v118 = a9;
  v119 = a10;
  v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  sub_2396FD800(a6, (uint64_t)v142);
  v106[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v144, 100, v142, v106, 1.0);
  v18 = v143;
  if (v143 == v142)
  {
    v19 = 4;
    v18 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = operator new(0x30uLL);
  *v20 = &off_250ADCB80;
  v20[1] = &v118;
  v20[2] = a2;
  v20[3] = a6;
  v20[4] = v144;
  v141 = v20;
  kdebug_trace();
  if (!*(_QWORD *)(a3 + 24))
  {
    v97 = 33;
    goto LABEL_185;
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    v97 = 34;
LABEL_185:
    sub_239A444D4((uint64_t)"unknown file", v97, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v111 = 0;
  LOBYTE(v112) = 0;
  v114 = 0;
  LOBYTE(v115) = 0;
  v117 = 0;
  *(_OWORD *)v106 = 0u;
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  LOBYTE(v109) = 0;
  sub_2396FDAA8(a6, (uint64_t)v134);
  sub_2396FD534(&v102, v144, 42);
  v133 = 0;
  v21 = (char *)operator new(0x40uLL);
  *(_QWORD *)v21 = &off_250ADB9D8;
  *(_OWORD *)(v21 + 8) = v102;
  *((_QWORD *)v21 + 3) = v103;
  *((_QWORD *)&v102 + 1) = 0;
  v103 = 0;
  v22 = v104;
  v104 = 0uLL;
  v23 = v105;
  *((_OWORD *)v21 + 2) = v22;
  *((_OWORD *)v21 + 3) = v23;
  v105 = 0uLL;
  v133 = v21;
  sub_2396FD600((uint64_t)__p, (uint64_t)v134, (uint64_t)v132);
  v24 = v133;
  if (v133 == v132)
  {
    v25 = 4;
    v24 = v132;
    goto LABEL_12;
  }
  if (v133)
  {
    v25 = 5;
LABEL_12:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (!*((_QWORD *)&v104 + 1))
    goto LABEL_22;
  v30 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = v103;
    if (!v103)
      goto LABEL_26;
  }
  else
  {
LABEL_22:
    v32 = v103;
    if (!v103)
      goto LABEL_26;
  }
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v135;
    if (v135 != v134)
      goto LABEL_27;
LABEL_32:
    v36 = 4;
    v35 = v134;
    goto LABEL_33;
  }
LABEL_26:
  v35 = v135;
  if (v135 == v134)
    goto LABEL_32;
LABEL_27:
  if (!v35)
    goto LABEL_34;
  v36 = 5;
LABEL_33:
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_34:
  v37 = (uint64_t)v137;
  if (!v137)
  {
LABEL_37:
    v129 = (_QWORD *)v37;
    goto LABEL_39;
  }
  if (v137 != __p)
  {
    v37 = (*((uint64_t (**)(void))*v137 + 2))();
    goto LABEL_37;
  }
  v129 = v128;
  (*((void (**)(void **, _QWORD *))__p[0] + 3))(__p, v128);
LABEL_39:
  v38 = v130;
  v39 = (uint64_t)v139;
  if (!v139)
  {
LABEL_42:
    v131 = (_BYTE *)v39;
    goto LABEL_44;
  }
  if (v139 != v138)
  {
    v39 = (*(uint64_t (**)(void))(*(_QWORD *)v139 + 16))();
    goto LABEL_42;
  }
  v131 = v130;
  (*(void (**)(void))(*(_QWORD *)v139 + 24))();
LABEL_44:
  v40 = sub_2394AF194(a1, a2, a5, v128, (uint64_t *)v106, v118, v119, a4);
  if (v131 == v130)
  {
    v41 = 4;
  }
  else
  {
    if (!v131)
      goto LABEL_49;
    v41 = 5;
    v38 = v131;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v41))(v38);
LABEL_49:
  v42 = v129;
  if (v129 == v128)
  {
    v43 = 4;
    v42 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_54;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_54:
  v44 = v139;
  if (v139 == v138)
  {
    v45 = 4;
    v44 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_59;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_59:
  v46 = v137;
  if (v137 == __p)
  {
    v47 = 4;
    v46 = __p;
  }
  else
  {
    if (!v137)
      goto LABEL_64;
    v47 = 5;
  }
  (*((void (**)(void))*v46 + v47))();
LABEL_64:
  if ((v40 & 1) == 0)
    goto LABEL_159;
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCDAC((uint64_t)v144, (__int128 *)__p, 5);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v48 = sub_2394AEBA4((float64x2_t *)(a1 + 536), 0.0001);
  if (*(_BYTE *)(a2 + 196))
    v49 = v48;
  else
    v49 = 0;
  if (v49)
  {
    v50 = sub_2394E9A90((float64x2_t *)(a1 + 536), (uint64_t)v106, *(_DWORD *)(a2 + 40));
    v51 = (_BYTE)v119 ? v50 : 1;
    if ((v51 & 1) == 0)
      sub_2394202DC((_QWORD *)(v118 + 120), 6005);
  }
  v52.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((_BYTE)v119)
  {
    *(double *)(v118 + 80) = (double)(v52.__d_.__rep_ - v17.__d_.__rep_) / 1000000.0;
    memset(__p, 0, sizeof(__p));
    sub_2396C4880(v106, (uint64_t)__p);
    v53 = __p[1];
    v54 = __p[0];
    *(_QWORD *)(v118 + 56) = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
    if (v54)
    {
      if (v53 != v54)
      {
        v55 = v53;
        do
        {
          v57 = (void *)*(v55 - 3);
          v55 -= 3;
          v56 = v57;
          if (v57)
          {
            *(v53 - 2) = v56;
            operator delete(v56);
          }
          v53 = v55;
        }
        while (v55 != v54);
        v53 = __p[0];
      }
      __p[1] = v54;
      operator delete(v53);
    }
  }
  v58.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  sub_2396FDAA8(a6, (uint64_t)v126);
  sub_2396FD534(&v98, v144, 50);
  v125 = 0;
  v59 = (char *)operator new(0x40uLL);
  *(_QWORD *)v59 = &off_250ADB9D8;
  *(_OWORD *)(v59 + 8) = v98;
  *((_QWORD *)v59 + 3) = v99;
  *((_QWORD *)&v98 + 1) = 0;
  v99 = 0;
  v60 = v100;
  v100 = 0uLL;
  v61 = v101;
  *((_OWORD *)v59 + 2) = v60;
  *((_OWORD *)v59 + 3) = v61;
  v101 = 0uLL;
  v125 = v59;
  sub_2396FD600((uint64_t)__p, (uint64_t)v126, (uint64_t)v124);
  v63 = v125;
  if (v125 == v124)
  {
    v64 = 4;
    v63 = v124;
    goto LABEL_89;
  }
  if (v125)
  {
    v64 = 5;
LABEL_89:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (!*((_QWORD *)&v100 + 1))
    goto LABEL_99;
  v69 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
    v71 = v99;
    if (!v99)
      goto LABEL_103;
  }
  else
  {
LABEL_99:
    v71 = v99;
    if (!v99)
      goto LABEL_103;
  }
  v72 = (unint64_t *)&v71->__shared_owners_;
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    v74 = v127;
    if (v127 != v126)
      goto LABEL_104;
LABEL_109:
    v75 = 4;
    v74 = v126;
    goto LABEL_110;
  }
LABEL_103:
  v74 = v127;
  if (v127 == v126)
    goto LABEL_109;
LABEL_104:
  if (!v74)
    goto LABEL_111;
  v75 = 5;
LABEL_110:
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_111:
  v76 = (uint64_t)v137;
  if (!v137)
  {
LABEL_114:
    v121 = (uint64_t *)v76;
    goto LABEL_116;
  }
  if (v137 != __p)
  {
    v76 = (*((uint64_t (**)(void))*v137 + 2))();
    goto LABEL_114;
  }
  v121 = &v120;
  (*((void (**)(void **, uint64_t *))__p[0] + 3))(__p, &v120);
LABEL_116:
  v77 = v122;
  v78 = (uint64_t)v139;
  if (!v139)
  {
LABEL_119:
    v123 = (_BYTE *)v78;
    goto LABEL_121;
  }
  if (v139 != v138)
  {
    v78 = (*(uint64_t (**)(void))(*(_QWORD *)v139 + 16))();
    goto LABEL_119;
  }
  v123 = v122;
  (*(void (**)(void))(*(_QWORD *)v139 + 24))();
LABEL_121:
  v79 = sub_2395050BC((_QWORD *)a1, a2 + 56, a3, a4, (uint64_t)v106, &v120, a7, v62, v118, v119);
  if (v123 == v122)
  {
    v80 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_126;
    v80 = 5;
    v77 = v123;
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v80))(v77);
LABEL_126:
  v81 = v121;
  if (v121 == &v120)
  {
    v82 = 4;
    v81 = &v120;
  }
  else
  {
    if (!v121)
      goto LABEL_131;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_131:
  v83 = v139;
  if (v139 == v138)
  {
    v84 = 4;
    v83 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_136;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_136:
  v85 = v137;
  if (v137 == __p)
  {
    v86 = 4;
    v85 = __p;
  }
  else
  {
    if (!v137)
      goto LABEL_141;
    v86 = 5;
  }
  (*((void (**)(void))*v85 + v86))();
LABEL_141:
  if ((v79 & 1) == 0)
    goto LABEL_159;
  v87 = sub_2394AEBA4((float64x2_t *)(a1 + 536), 0.0001);
  if (*(_BYTE *)(a2 + 196))
    v88 = v87;
  else
    v88 = 0;
  if (!v88)
  {
    if (!(_BYTE)v119)
      goto LABEL_154;
    v89 = 0;
    goto LABEL_153;
  }
  if ((sub_2394EA0D0((float64x2_t *)(a1 + 536), a7) & 1) == 0)
  {
    if (!(_BYTE)v119)
      goto LABEL_154;
    sub_2394202DC((_QWORD *)(v118 + 120), 6501);
  }
  if ((_BYTE)v119)
  {
    v89 = 1;
LABEL_153:
    *(_BYTE *)(v118 + 64) = v89;
  }
LABEL_154:
  *(_OWORD *)__p = xmmword_239EC6AF0;
  __p[2] = (void *)0x80000000800000;
  if (!sub_2396C3A58((float **)a7, (uint64_t)__p))
  {
    if (!(_BYTE)v119)
      goto LABEL_179;
    sub_2394202DC((_QWORD *)(v118 + 120), 6005);
LABEL_159:
    v92 = 0;
    if (!v117)
      goto LABEL_162;
    goto LABEL_160;
  }
  if ((_BYTE)v119)
  {
    v90 = v118;
    v91 = *((float *)&__p[2] + 1) - *(float *)&__p[1];
    *(float32x2_t *)(v118 + 68) = vsub_f32(*(float32x2_t *)((char *)&__p[1] + 4), (float32x2_t)__p[0]);
    *(float *)(v90 + 76) = v91;
  }
LABEL_179:
  v96.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((_BYTE)v119)
    *(double *)(v118 + 88) = (double)(v96.__d_.__rep_ - v58.__d_.__rep_) / 1000000.0;
  kdebug_trace();
  v92 = sub_2396FD7B0((uint64_t)a6) ^ 1;
  if (v117)
  {
LABEL_160:
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
  }
LABEL_162:
  if (v114 && v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v111 && v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  if (v107[1])
  {
    *(void **)&v108 = v107[1];
    operator delete(v107[1]);
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  if (!v141)
    sub_2394172E0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v141 + 48))(v141);
  v93 = v141;
  if (v141 == v140)
  {
    v94 = 4;
    v93 = v140;
    goto LABEL_177;
  }
  if (v141)
  {
    v94 = 5;
LABEL_177:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  sub_2396FCD14((uint64_t)v144);
  return v92;
}

void sub_2394AE940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2394AEEDC((uint64_t)&a27);
  sub_239416834(&STACK[0x278]);
  sub_2396FCD14((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_2394AEB10(_Unwind_Exception *a1)
{
  sub_2396FCD14((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_2394AEB24(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2B0];
  if (STACK[0x2B0] == v1)
  {
    (*(void (**)(unint64_t *))(STACK[0x298] + 32))(&STACK[0x298]);
    _Unwind_Resume(a1);
  }
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 40))(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394AEB78);
}

void sub_2394AEB70(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

void sub_2394AEB88(_Unwind_Exception *a1)
{
  sub_239416834(&STACK[0x278]);
  sub_2396FCD14((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

BOOL sub_2394AEBA4(float64x2_t *a1, double a2)
{
  int8x16_t v2;
  int64x2_t v3;
  double v4;
  float64x2_t v5;
  double v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v13;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int64x2_t v54;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;

  v4 = a1[1].f64[0];
  v5 = a1[1];
  v6 = a1[3].f64[0];
  v7 = a1[5].f64[0];
  v8 = a1[2];
  v9 = a1[3];
  v10 = a1[4];
  _Q18 = a1[5];
  v13 = a1[6];
  _Q17 = a1[7];
  __asm { FMOV            V20.2D, #-0.5 }
  v19 = vmulq_f64(*a1, _Q20);
  v20 = vmlaq_f64(v19, _Q20, v8);
  v21 = vmulq_f64(v5, _Q20);
  v22 = vmlaq_f64(v21, _Q20, v9);
  v23 = vaddq_f64(_Q17, vmlaq_f64(v22, _Q20, _Q18));
  v24 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v23, 1);
  v25 = vdivq_f64(vaddq_f64(v13, vmlaq_f64(v20, _Q20, v10)), v24);
  v26 = vdivq_f64(v23, v24);
  __asm { FMOV            V27.2D, #0.5 }
  v28 = vaddq_f64(_Q17, vmlaq_f64(v22, _Q27, _Q18));
  v29 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1);
  v30 = vdivq_f64(vaddq_f64(v13, vmlaq_f64(v20, _Q27, v10)), v29);
  v31 = vdivq_f64(v28, v29);
  v32 = vaddq_f64(_Q17, vmlaq_f64(vmlaq_f64(v21, _Q27, v9), _Q20, _Q18));
  v33 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1);
  v34 = vdivq_f64(vaddq_f64(v13, vmlaq_f64(vmlaq_f64(v19, _Q27, v8), _Q20, v10)), v33);
  v35 = vaddq_f64(_Q17, vmlaq_f64(vmlaq_f64(vmulq_f64(v5, _Q27), _Q20, v9), _Q20, _Q18));
  v36 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1);
  *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vsubq_f64(v26, vdivq_f64(v35, v36));
  _Q18.f64[0] = vsubq_f64(v25, vdivq_f64(vaddq_f64(v13, vmlaq_f64(vmlaq_f64(vmulq_f64(*a1, _Q27), _Q20, v8), _Q20, v10)), v36)).f64[1];
  __asm { FMLA            D17, D18, V16.D[1] }
  _Q27.f64[0] = sqrt(vmlad_n_f64(_Q17.f64[0], v35.f64[0], v35.f64[0]));
  *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vsubq_f64(v26, vdivq_f64(v32, v33));
  _Q18.f64[0] = vsubq_f64(v25, v34).f64[1];
  __asm { FMLA            D17, D18, V16.D[1] }
  v33.f64[0] = sqrt(vmlad_n_f64(_Q17.f64[0], v35.f64[0], v35.f64[0]));
  *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vsubq_f64(v26, v31);
  _Q18.f64[0] = vsubq_f64(v25, v30).f64[1];
  __asm { FMLA            D17, D18, V16.D[1] }
  v26.f64[0] = sqrt(vmlad_n_f64(_Q17.f64[0], v35.f64[0], v35.f64[0]));
  v37 = a1->f64[0] / _Q27.f64[0];
  v38 = v8.f64[0] / v33.f64[0];
  v39 = v10.f64[0] / v26.f64[0];
  v40 = a1->f64[1];
  v41 = v40 / _Q27.f64[0];
  v42 = a1[2].f64[1];
  v43 = v42 / v33.f64[0];
  v44 = a1[4].f64[1];
  v45 = v44 / v26.f64[0];
  v46 = v4 / _Q27.f64[0];
  v47 = v6 / v33.f64[0];
  v48 = v7 / v26.f64[0];
  _Q27.f64[0] = v37;
  _Q27.f64[1] = v38;
  v33.f64[0] = v41;
  v33.f64[1] = v43;
  v49.f64[0] = v46;
  v49.f64[1] = v47;
  v50 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q27, v37), v33, v41), v49, v46);
  *(double *)v3.i64 = v39 * v37 + v45 * v41 + v48 * v46;
  v51 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q27, v38), v33, v43), v49, v47);
  *(double *)v2.i64 = v39 * v38 + v45 * v43 + v48 * v47;
  v52 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q27, v39), v33, v45), v49, v48);
  v33.f64[0] = v39 * v39 + v45 * v45 + v48 * v48;
  v53 = vaddq_f64(v50, (float64x2_t)xmmword_239EC6820);
  v54 = (int64x2_t)vaddq_f64(v51, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V8.2D, #-1.0 }
  *(_QWORD *)&v33.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v33, _Q8));
  v33.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v53), v33), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v54, v2, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v3, v54)), vabsq_f64(v52)))) > a2|| fabs(v46 * (v45 * v38 - v43 * v39) + v37 * (v48 * v43 - v47 * v45) - v41 * (v48 * v38 - v47 * v39) + -1.0) > a2|| v4 * (v44 * v8.f64[0] - v42 * v10.f64[0])+ a1->f64[0] * (v7 * v42 - v6 * v44)- v40 * (v7 * v8.f64[0] - v6 * v10.f64[0]) < 0.0)
  {
    return 0;
  }
  v57 = a1[1].f64[1];
  v58 = a1[3].f64[1];
  v59 = a1[5].f64[1];
  v60 = a1[7].f64[1];
  if (v57 != 0.0)
  {
    if (v57 < 0.0)
      v57 = 0.0 - v57;
    if (v57 > a2)
      return 0;
  }
  if (v58 != 0.0)
  {
    if (v58 < 0.0)
      v58 = 0.0 - v58;
    if (v58 > a2)
      return 0;
  }
  if (v59 != 0.0)
  {
    if (v59 < 0.0)
      v59 = 0.0 - v59;
    if (v59 > a2)
      return 0;
  }
  if (v60 == 1.0)
    return 1;
  if (v60 >= 1.0)
    v61 = v60 + -1.0;
  else
    v61 = 1.0 - v60;
  return v61 <= a2;
}

uint64_t sub_2394AEEDC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(void **)(a1 + 112);
    if (v2)
    {
      *(_QWORD *)(a1 + 120) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(void **)(a1 + 80);
    if (v3)
    {
      *(_QWORD *)(a1 + 88) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(void **)(a1 + 48);
    if (v4)
    {
      *(_QWORD *)(a1 + 56) = v4;
      operator delete(v4);
    }
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_2394AEF68()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394AEF7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250ADCB80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_2394AEFC4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADCB80;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394AEFF4(_QWORD *a1)
{
  uint64_t *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  char v15;

  v2 = (uint64_t *)a1[1];
  if (*((_BYTE *)v2 + 8))
  {
    v3 = (__int128 *)a1[2];
    v4 = *v2;
    v5 = *v2 + 192;
    v6 = *v3;
    v7 = v3[1];
    v8 = v3[2];
    *(_QWORD *)(v4 + 237) = *(_QWORD *)((char *)v3 + 45);
    *(_OWORD *)(v4 + 208) = v7;
    *(_OWORD *)(v4 + 224) = v8;
    *(_OWORD *)(v4 + 192) = v6;
    v9 = *(__int128 *)((char *)v3 + 56);
    *(_OWORD *)(v5 + 72) = *(__int128 *)((char *)v3 + 72);
    *(_OWORD *)(v4 + 248) = v9;
    if ((__int128 *)v5 != v3)
      sub_23945D3D0((_QWORD *)(v4 + 280), *((char **)v3 + 11), *((char **)v3 + 12), (uint64_t)(*((_QWORD *)v3 + 12) - *((_QWORD *)v3 + 11)) >> 3);
    std::string::operator=((std::string *)(v4 + 304), (const std::string *)(v3 + 7));
    v10 = *((_QWORD *)v3 + 21);
    v11 = *(__int128 *)((char *)v3 + 152);
    *(_OWORD *)(v5 + 136) = *(__int128 *)((char *)v3 + 136);
    *(_OWORD *)(v5 + 152) = v11;
    *(_QWORD *)(v4 + 360) = v10;
    v12 = v3[11];
    *(_QWORD *)(v5 + 189) = *(_QWORD *)((char *)v3 + 189);
    *(_OWORD *)(v4 + 368) = v12;
    if (sub_2396FD7B0(a1[3]))
      sub_2394202DC((_QWORD *)(*(_QWORD *)a1[1] + 120), 2);
  }
  v13 = a1[4];
  v15 = 0;
  LOBYTE(__p) = 0;
  sub_2396FCC6C(v13, (uint64_t)&__p);
  if (v15 < 0)
    operator delete(__p);
}

void sub_2394AF108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2394AF124()
{
  unsigned __int8 v0;

  if ((byte_2542CF7A8 & 1) == 0)
  {
    byte_2542CF7A8 = 1;
    v0 = atomic_load((unsigned __int8 *)&qword_2542CF7B8);
    if ((v0 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_2542CF7B8))
      {
        qword_2542CF7B0 = ldexp(2.22507386e-308, 54);
        __cxa_guard_release(&qword_2542CF7B8);
      }
    }
  }
}

uint64_t sub_2394AF194(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::chrono::system_clock::time_point v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v32;
  char *v33;
  void *v34;
  char *v35;
  void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  BOOL v67;
  std::chrono::system_clock::time_point v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[7];
  __int128 v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  char v88;
  void *v89;
  void *v90;
  char v91;
  void *v92;
  char *v93;
  char v94;
  void *v95;
  void *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[8];
  _BYTE v101[24];
  _BYTE *v102;
  void *__p[2];
  char v104;
  _QWORD v105[8];
  _BYTE v106[24];
  _BYTE *v107;
  _BYTE v108[24];
  _BYTE *v109;
  _QWORD v110[8];
  _QWORD v111[3];
  _QWORD *v112;
  _BYTE v113[24];
  _BYTE *v114;
  _BYTE v115[24];
  _BYTE *v116;
  _BYTE v117[24];
  _BYTE *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _BYTE v121[24];
  _BYTE *v122;
  uint64_t v123[15];
  uint64_t v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[568];
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v98 = a6;
  v99 = a7;
  v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  sub_2396FD800(a4, (uint64_t)v127);
  __p[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v129, 100, v127, __p, 1.0);
  v15 = v128;
  if (v128 == v127)
  {
    v16 = 4;
    v15 = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  v17 = operator new(0x28uLL);
  *v17 = &off_250ADCBC8;
  v17[1] = v129;
  v17[2] = &v98;
  v17[3] = a4;
  v126 = v17;
  sub_2394B5838((uint64_t)v123);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2) <= 3)
  {
    if ((_BYTE)v99)
    {
      v20 = 6004;
LABEL_25:
      sub_2394202DC((_QWORD *)(v98 + 120), v20);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  v21 = *(uint64_t **)(a1 + 88);
  if (!v21)
    goto LABEL_23;
  v22 = 0;
  do
  {
    if (*((_BYTE *)v21 + 256) == 2)
      ++v22;
    v21 = (uint64_t *)*v21;
  }
  while (v21);
  if (!v22)
  {
LABEL_23:
    if ((_BYTE)v99)
    {
      v20 = 6008;
      goto LABEL_25;
    }
LABEL_26:
    v28 = 0;
    goto LABEL_27;
  }
  v88 = 0;
  LOBYTE(v89) = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  v94 = 0;
  LOBYTE(v95) = 0;
  v97 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  LOBYTE(v86) = 0;
  sub_2394B03C4((float32x2_t **)a3, (char **)&v83, 0.5, v18, v19);
  if ((sub_2396FD7B0((uint64_t)a4) & 1) != 0)
    goto LABEL_36;
  if (!sub_2394B0CF4((float **)a3, (uint64_t)&v124, (float **)&v83, 1u))
  {
    if ((_BYTE)v99)
      sub_2394202DC((_QWORD *)(v98 + 120), 6003);
    goto LABEL_36;
  }
  v104 = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 10);
  if (v104 < 0)
    operator delete(__p[0]);
  if ((sub_2396FD7B0((uint64_t)a4) & 1) != 0)
  {
LABEL_36:
    v28 = 0;
    goto LABEL_37;
  }
  sub_2396FDAA8(a4, (uint64_t)v117);
  sub_2396FD534(&v79, v129, 10);
  v116 = 0;
  v23 = (char *)operator new(0x40uLL);
  *(_QWORD *)v23 = &off_250ADB9D8;
  *(_OWORD *)(v23 + 8) = v79;
  *((_QWORD *)v23 + 3) = v80;
  *((_QWORD *)&v79 + 1) = 0;
  v80 = 0;
  v24 = v81;
  v81 = 0uLL;
  v25 = v82;
  *((_OWORD *)v23 + 2) = v24;
  *((_OWORD *)v23 + 3) = v25;
  v82 = 0uLL;
  v116 = v23;
  sub_2396FD600((uint64_t)v119, (uint64_t)v117, (uint64_t)v115);
  v26 = v116;
  if (v116 == v115)
  {
    v27 = 4;
    v26 = v115;
    goto LABEL_58;
  }
  if (v116)
  {
    v27 = 5;
LABEL_58:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v118;
  if (v118 == v117)
  {
    v48 = 4;
    v47 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_79;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_79:
  v49 = (uint64_t)v120;
  if (!v120)
  {
LABEL_82:
    v112 = (_QWORD *)v49;
    goto LABEL_84;
  }
  if (v120 != v119)
  {
    v49 = (*(uint64_t (**)(void))(*v120 + 16))();
    goto LABEL_82;
  }
  v112 = v111;
  (*(void (**)(_QWORD *, _QWORD *))(v119[0] + 24))(v119, v111);
LABEL_84:
  v50 = v113;
  v51 = (uint64_t)v122;
  if (!v122)
  {
LABEL_87:
    v114 = (_BYTE *)v51;
    goto LABEL_89;
  }
  if (v122 != v121)
  {
    v51 = (*(uint64_t (**)(void))(*(_QWORD *)v122 + 16))();
    goto LABEL_87;
  }
  v114 = v113;
  (*(void (**)(void))(*(_QWORD *)v122 + 24))();
LABEL_89:
  v52 = sub_2394B123C(a1, a3, a2, (uint64_t)v123, v111);
  if (v114 == v113)
  {
    v53 = 4;
  }
  else
  {
    if (!v114)
      goto LABEL_94;
    v53 = 5;
    v50 = v114;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v53))(v50);
LABEL_94:
  v54 = v112;
  if (v112 == v111)
  {
    v55 = 4;
    v54 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_99;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_99:
  if ((v52 & 1) != 0)
  {
    sub_2396FDAA8(a4, (uint64_t)v108);
    sub_2396FD534(v78, v129, 10);
    sub_2394B11D4((uint64_t)v106, (uint64_t)v78);
    sub_2396FD600((uint64_t)v110, (uint64_t)v108, (uint64_t)v106);
    v56 = v107;
    if (v107 == v106)
    {
      v57 = 4;
      v56 = v106;
    }
    else
    {
      if (!v107)
        goto LABEL_108;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_108:
    sub_23942FEFC(v78);
    v58 = v109;
    if (v109 == v108)
    {
      v59 = 4;
      v58 = v108;
    }
    else
    {
      if (!v109)
      {
LABEL_113:
        if (*(_BYTE *)(a2 + 36) && *(_QWORD *)(a8 + 24))
        {
          v60 = *(unsigned __int8 *)(a1 + 896);
          sub_2394B2548((uint64_t)v105, (uint64_t)v110);
          if ((_DWORD)v60)
            v61 = a1 + 856;
          else
            v61 = 0;
          v62 = sub_2394B2648(a1, a8, a2, (uint64_t)v123, v105, v61, v60);
          sub_23942FE80(v105);
          if ((_BYTE)v99)
          {
            if (*(_BYTE *)(v98 + 24))
              v63 = 1;
            else
              v63 = v62;
            *(_BYTE *)(v98 + 24) = v63;
          }
          goto LABEL_131;
        }
        sub_2396FD800(v110, (uint64_t)v101);
        v76[0] = (void *)0x42C8000000000000;
        sub_2396FCC68(__p, 1, v101, v76, 1.0);
        v64 = v102;
        if (v102 == v101)
        {
          v65 = 4;
          v64 = v101;
        }
        else
        {
          if (!v102)
          {
LABEL_128:
            sub_23941A4FC(v76, "");
            sub_2396FCC6C((uint64_t)__p, (uint64_t)v76);
            if (v77 < 0)
              operator delete(v76[0]);
            sub_2396FCD14((uint64_t)__p);
LABEL_131:
            if ((sub_2396FD7B0((uint64_t)a4) & 1) != 0)
              goto LABEL_180;
            LODWORD(v76[0]) = 0;
            sub_2394B2548((uint64_t)v100, (uint64_t)a4);
            v66 = sub_2394B2DA0(a2, (uint64_t)v123, v100, v76);
            sub_23942FE80(v100);
            if ((v66 & 1) != 0)
            {
              sub_23941A4FC(__p, "");
              sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 30);
              if (v104 < 0)
                operator delete(__p[0]);
              if ((sub_2396FD7B0((uint64_t)a4) & 1) != 0)
                goto LABEL_180;
              sub_2394B3568((uint64_t)&v124);
              kdebug_trace();
              if ((sub_2394DFECC((int *)v123) & 1) != 0
                && (sub_2394E0178(v123) & 1) != 0
                && (sub_2394E0020((int *)v123) & 1) != 0)
              {
                sub_23941A4FC(__p, "");
                sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 5);
                if (v104 < 0)
                  operator delete(__p[0]);
                kdebug_trace();
                if ((sub_2396FD7B0((uint64_t)a4) & 1) != 0)
                  goto LABEL_180;
                sub_2394B3568((uint64_t)&v124);
                kdebug_trace();
                if ((sub_2394B35EC((uint64_t)v123, (uint64_t)a5, 0) & 1) != 0)
                {
                  sub_23941A4FC(__p, "");
                  sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 3);
                  if (v104 < 0)
                    operator delete(__p[0]);
                  kdebug_trace();
                  if ((sub_2396FD7B0((uint64_t)a4) & 1) != 0)
                    goto LABEL_180;
                  kdebug_trace();
                  if ((sub_2394E716C((char **)a5, 1, 1, *(_DWORD *)(a2 + 40)) & 1) != 0)
                  {
                    sub_23941A4FC(__p, "");
                    sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 5);
                    if (v104 < 0)
                      operator delete(__p[0]);
                    if ((sub_2394EB79C((float **)&v83, (char **)a5) & 1) != 0)
                    {
                      sub_23941A4FC(__p, "");
                      sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 1);
                      if (v104 < 0)
                        operator delete(__p[0]);
                      kdebug_trace();
                      kdebug_trace();
                      if ((sub_2394EB268(a5, *(int *)(a2 + 20), 9999.9, 0.9) & 1) != 0)
                      {
                        sub_23941A4FC(__p, "");
                        sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 6);
                        if (v104 < 0)
                          operator delete(__p[0]);
                        kdebug_trace();
                        kdebug_trace();
                        if ((sub_2394E87E0((char **)a5, *(_DWORD *)(a2 + 40)) & 1) != 0)
                        {
                          sub_23941A4FC(__p, "");
                          sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 6);
                          if (v104 < 0)
                            operator delete(__p[0]);
                          kdebug_trace();
                          kdebug_trace();
                          if (*(_BYTE *)a2
                            && (sub_2394EAADC((uint64_t)a5, 1, (float)((float)((float)(1.0 - *(float *)(a2 + 4)) * 200.0) + 50.0), 10.0) & 1) == 0)
                          {
                            if (!(_BYTE)v99)
                              goto LABEL_180;
                            goto LABEL_193;
                          }
                          sub_23941A4FC(__p, "");
                          sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 6);
                          if (v104 < 0)
                            operator delete(__p[0]);
                          kdebug_trace();
                          kdebug_trace();
                          v67 = *(float *)(a2 + 28) <= 0.0 && *(float *)(a2 + 24) <= 0.0;
                          if (v67 || !*(_DWORD *)(a2 + 32) || (sub_2394B3F6C(a1, (_DWORD *)a2, a3, a5) & 1) != 0)
                          {
                            sub_23941A4FC(__p, "");
                            sub_2396FCDAC((uint64_t)v129, (__int128 *)__p, 6);
                            if (v104 < 0)
                              operator delete(__p[0]);
                            kdebug_trace();
                            v68.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                            if ((_BYTE)v99)
                            {
                              v69 = v98;
                              *(_QWORD *)v98 = 0xAAAAAAAAAAAAAAABLL
                                             * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
                              *(_QWORD *)(v69 + 8) = 0xAAAAAAAAAAAAAAABLL * ((a5[4] - a5[3]) >> 2);
                              *(_QWORD *)(v69 + 16) = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2);
                              *(double *)(v69 + 80) = (double)(v68.__d_.__rep_ - v14.__d_.__rep_) / 1000000.0;
                            }
                            v28 = sub_2396FD7B0((uint64_t)a4) ^ 1;
                            goto LABEL_181;
                          }
                        }
                      }
                    }
                  }
                  if ((_BYTE)v99)
LABEL_193:
                    sub_2394202DC((_QWORD *)(v98 + 120), 6003);
LABEL_180:
                  v28 = 0;
LABEL_181:
                  sub_23942FE80(v110);
                  goto LABEL_182;
                }
              }
              if (!(_BYTE)v99)
                goto LABEL_180;
              v70 = (_QWORD *)(v98 + 120);
              v71 = 6003;
            }
            else
            {
              if (!(_BYTE)v99)
                goto LABEL_180;
              v70 = (_QWORD *)(v98 + 120);
              if (LODWORD(v76[0]))
                v71 = (int)v76[0];
              else
                v71 = 6003;
            }
            sub_2394202DC(v70, v71);
            goto LABEL_180;
          }
          v65 = 5;
        }
        (*(void (**)(void))(*v64 + 8 * v65))();
        goto LABEL_128;
      }
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
    goto LABEL_113;
  }
  if ((_BYTE)v99)
    sub_2394202DC((_QWORD *)(v98 + 120), 6003);
  v28 = 0;
LABEL_182:
  v72 = v122;
  if (v122 == v121)
  {
    v73 = 4;
    v72 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_187;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_187:
  v74 = v120;
  if (v120 == v119)
  {
    v75 = 4;
    v74 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_37;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_37:
  if (v97 && v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v94)
  {
    v32 = (char *)v92;
    if (v92)
    {
      v33 = v93;
      v34 = v92;
      if (v93 != v92)
      {
        v35 = v93;
        do
        {
          v37 = (void *)*((_QWORD *)v35 - 3);
          v35 -= 24;
          v36 = v37;
          if (v37)
          {
            *((_QWORD *)v33 - 2) = v36;
            operator delete(v36);
          }
          v33 = v35;
        }
        while (v35 != v32);
        v34 = v92;
      }
      v93 = v32;
      operator delete(v34);
    }
  }
  if (v91 && v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v88 && v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
LABEL_27:
  sub_2394B68B4((uint64_t)v123);
  if (!v126)
    sub_2394172E0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v126 + 48))(v126);
  v29 = v126;
  if (v126 == v125)
  {
    v30 = 4;
    v29 = v125;
    goto LABEL_32;
  }
  if (v126)
  {
    v30 = 5;
LABEL_32:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  sub_2396FCD14((uint64_t)v129);
  return v28;
}

void sub_2394B0068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_23942FE80(&STACK[0x450]);
  sub_23942FE80(&STACK[0x510]);
  sub_2394B6764((uint64_t)&a27);
  sub_2394B68B4((uint64_t)&STACK[0x550]);
  sub_239416834(&STACK[0x718]);
  sub_2396FCD14((uint64_t)&STACK[0x758]);
  _Unwind_Resume(a1);
}

void sub_2394B0330(_Unwind_Exception *a1)
{
  sub_239416834(&STACK[0x718]);
  sub_2396FCD14((uint64_t)&STACK[0x758]);
  _Unwind_Resume(a1);
}

void sub_2394B034C(_Unwind_Exception *a1)
{
  sub_2396FCD14((uint64_t)&STACK[0x758]);
  _Unwind_Resume(a1);
}

void sub_2394B0360(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x750];
  if (STACK[0x750] == v1)
  {
    (*(void (**)(unint64_t *))(STACK[0x738] + 32))(&STACK[0x738]);
    _Unwind_Resume(a1);
  }
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 40))(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394B03B4);
}

uint64_t sub_2394B03C4(float32x2_t **a1, char **a2, float a3, float32x4_t a4, float32x4_t a5)
{
  float32x2_t *v6;
  float32x2_t *v7;
  int32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  float32x4_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  char *v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;

  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    a4 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    a5.i64[0] = 0x80000000800000;
    a5.i32[2] = 0x800000;
    a5.i32[3] = 0x800000;
  }
  else
  {
    v8 = vdupq_n_s32(0x7F7FFFFFu);
    v9.i64[0] = 0x80000000800000;
    v9.i32[2] = 0x800000;
    do
    {
      *(int8x8_t *)a4.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v8.i8, *v6), (int8x8_t)*v6, *(int8x8_t *)v8.i8);
      *(int8x8_t *)a5.f32 = vbsl_s8((int8x8_t)vcgt_f32(*v6, *(float32x2_t *)v9.f32), (int8x8_t)*v6, *(int8x8_t *)v9.f32);
      v9.i32[0] = v9.i32[2];
      v10 = v6[1].f32[0];
      if (v9.f32[2] < v10)
        v9.i32[0] = v6[1].i32[0];
      a5.i32[2] = v9.i32[0];
      v8.i32[0] = v8.i32[2];
      if (v10 < *(float *)&v8.i32[2])
        v8.i32[0] = v6[1].i32[0];
      a4.i32[2] = v8.i32[0];
      v6 = (float32x2_t *)((char *)v6 + 12);
      v8 = (int32x4_t)a4;
      v9 = a5;
    }
    while (v6 != v7);
  }
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vmulq_f32(vaddq_f32(a4, a5), v11);
  v13 = vmulq_n_f32(vsubq_f32(a5, v12), a3 + 1.0);
  v14 = vsubq_f32(v12, v13);
  v16 = a2[1];
  v15 = (unint64_t)a2[2];
  v101 = v14;
  if ((unint64_t)v16 >= v15)
  {
    v18 = *a2;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *a2) >> 2);
    v20 = v19 + 1;
    if (v19 + 1 > 0x1555555555555555)
      goto LABEL_154;
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 2);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0xAAAAAAAAAAAAAAALL)
      v22 = 0x1555555555555555;
    else
      v22 = v20;
    v102 = v12;
    v100 = v13;
    if (v22)
    {
      if (v22 > 0x1555555555555555)
        goto LABEL_155;
      v23 = (char *)operator new(12 * v22);
      v14 = v101;
      v12 = v102;
      v13 = v100;
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[12 * v19];
    v15 = (unint64_t)&v23[12 * v22];
    *(_QWORD *)v24 = v14.i64[0];
    *((_DWORD *)v24 + 2) = v14.i32[2];
    v17 = v24 + 12;
    if (v16 != v18)
    {
      do
      {
        v25 = *(_QWORD *)(v16 - 12);
        v16 -= 12;
        v26 = *((_DWORD *)v16 + 2);
        *(_QWORD *)(v24 - 12) = v25;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v26;
      }
      while (v16 != v18);
      v16 = *a2;
    }
    *a2 = v24;
    a2[1] = v17;
    a2[2] = (char *)v15;
    if (v16)
    {
      operator delete(v16);
      v13 = v100;
      v14 = v101;
      v12 = v102;
      v15 = (unint64_t)a2[2];
    }
  }
  else
  {
    *(_QWORD *)v16 = v14.i64[0];
    *((_DWORD *)v16 + 2) = v14.i32[2];
    v17 = v16 + 12;
  }
  v27 = vaddq_f32(v12, v13);
  a2[1] = v17;
  v103 = v27;
  if ((unint64_t)v17 >= v15)
  {
    v29 = *a2;
    v30 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a2) >> 2);
    v31 = v30 + 1;
    if (v30 + 1 > 0x1555555555555555)
      goto LABEL_154;
    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v29) >> 2);
    if (2 * v32 > v31)
      v31 = 2 * v32;
    if (v32 >= 0xAAAAAAAAAAAAAAALL)
      v33 = 0x1555555555555555;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 > 0x1555555555555555)
        goto LABEL_155;
      v34 = (char *)operator new(12 * v33);
      v14 = v101;
      v27 = v103;
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[12 * v30];
    v15 = (unint64_t)&v34[12 * v33];
    *(_QWORD *)v35 = v14.i64[0];
    *((_DWORD *)v35 + 2) = v27.i32[2];
    v28 = v35 + 12;
    if (v17 == v29)
    {
      *a2 = v35;
      a2[1] = v28;
      a2[2] = (char *)v15;
    }
    else
    {
      do
      {
        v36 = *(_QWORD *)(v17 - 12);
        v17 -= 12;
        v37 = *((_DWORD *)v17 + 2);
        *(_QWORD *)(v35 - 12) = v36;
        v35 -= 12;
        *((_DWORD *)v35 + 2) = v37;
      }
      while (v17 != v29);
      v17 = *a2;
      *a2 = v35;
      a2[1] = v28;
      a2[2] = (char *)v15;
      if (!v17)
      {
        a2[1] = v28;
        if ((unint64_t)v28 >= v15)
          goto LABEL_48;
        goto LABEL_44;
      }
    }
    operator delete(v17);
    v14 = v101;
    v27 = v103;
    v15 = (unint64_t)a2[2];
    a2[1] = v28;
    if ((unint64_t)v28 >= v15)
      goto LABEL_48;
LABEL_44:
    *(_QWORD *)v28 = __PAIR64__(v27.u32[1], v14.u32[0]);
    *((_DWORD *)v28 + 2) = v14.i32[2];
    v38 = v28 + 12;
    a2[1] = v28 + 12;
    if ((unint64_t)(v28 + 12) < v15)
      goto LABEL_62;
    goto LABEL_66;
  }
  *(_QWORD *)v17 = v14.i64[0];
  *((_DWORD *)v17 + 2) = v27.i32[2];
  v28 = v17 + 12;
  a2[1] = v17 + 12;
  if ((unint64_t)(v17 + 12) < v15)
    goto LABEL_44;
LABEL_48:
  v39 = *a2;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 2);
  v41 = v40 + 1;
  if (v40 + 1 > 0x1555555555555555)
    goto LABEL_154;
  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v39) >> 2);
  if (2 * v42 > v41)
    v41 = 2 * v42;
  if (v42 >= 0xAAAAAAAAAAAAAAALL)
    v43 = 0x1555555555555555;
  else
    v43 = v41;
  if (v43)
  {
    if (v43 > 0x1555555555555555)
      goto LABEL_155;
    v44 = (char *)operator new(12 * v43);
    v14 = v101;
    v27 = v103;
  }
  else
  {
    v44 = 0;
  }
  v45 = &v44[12 * v40];
  v15 = (unint64_t)&v44[12 * v43];
  *(_QWORD *)v45 = __PAIR64__(v27.u32[1], v14.u32[0]);
  *((_DWORD *)v45 + 2) = v14.i32[2];
  v38 = v45 + 12;
  if (v28 == v39)
  {
    *a2 = v45;
    a2[1] = v38;
    a2[2] = (char *)v15;
  }
  else
  {
    do
    {
      v46 = *(_QWORD *)(v28 - 12);
      v28 -= 12;
      v47 = *((_DWORD *)v28 + 2);
      *(_QWORD *)(v45 - 12) = v46;
      v45 -= 12;
      *((_DWORD *)v45 + 2) = v47;
    }
    while (v28 != v39);
    v28 = *a2;
    *a2 = v45;
    a2[1] = v38;
    a2[2] = (char *)v15;
    if (!v28)
    {
      a2[1] = v38;
      if ((unint64_t)v38 < v15)
        goto LABEL_62;
LABEL_66:
      v49 = *a2;
      v50 = 0xAAAAAAAAAAAAAAABLL * ((v38 - *a2) >> 2);
      v51 = v50 + 1;
      if (v50 + 1 > 0x1555555555555555)
        goto LABEL_154;
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v49) >> 2);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0xAAAAAAAAAAAAAAALL)
        v53 = 0x1555555555555555;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 > 0x1555555555555555)
          goto LABEL_155;
        v54 = (char *)operator new(12 * v53);
        v14 = v101;
        v27 = v103;
      }
      else
      {
        v54 = 0;
      }
      v55 = &v54[12 * v50];
      v15 = (unint64_t)&v54[12 * v53];
      *(_QWORD *)v55 = __PAIR64__(v27.u32[1], v14.u32[0]);
      *((_DWORD *)v55 + 2) = v27.i32[2];
      v48 = v55 + 12;
      if (v38 == v49)
      {
        *a2 = v55;
        a2[1] = v48;
        a2[2] = (char *)v15;
      }
      else
      {
        do
        {
          v56 = *(_QWORD *)(v38 - 12);
          v38 -= 12;
          v57 = *((_DWORD *)v38 + 2);
          *(_QWORD *)(v55 - 12) = v56;
          v55 -= 12;
          *((_DWORD *)v55 + 2) = v57;
        }
        while (v38 != v49);
        v38 = *a2;
        *a2 = v55;
        a2[1] = v48;
        a2[2] = (char *)v15;
        if (!v38)
        {
          a2[1] = v48;
          if ((unint64_t)v48 >= v15)
            goto LABEL_84;
          goto LABEL_80;
        }
      }
      operator delete(v38);
      v14 = v101;
      v27 = v103;
      v15 = (unint64_t)a2[2];
      a2[1] = v48;
      if ((unint64_t)v48 >= v15)
        goto LABEL_84;
LABEL_80:
      *(_QWORD *)v48 = __PAIR64__(v14.u32[1], v27.u32[0]);
      *((_DWORD *)v48 + 2) = v14.i32[2];
      v58 = v48 + 12;
      a2[1] = v48 + 12;
      if ((unint64_t)(v48 + 12) < v15)
        goto LABEL_98;
      goto LABEL_102;
    }
  }
  operator delete(v28);
  v14 = v101;
  v27 = v103;
  v15 = (unint64_t)a2[2];
  a2[1] = v38;
  if ((unint64_t)v38 >= v15)
    goto LABEL_66;
LABEL_62:
  *(_QWORD *)v38 = __PAIR64__(v27.u32[1], v14.u32[0]);
  *((_DWORD *)v38 + 2) = v27.i32[2];
  v48 = v38 + 12;
  a2[1] = v38 + 12;
  if ((unint64_t)(v38 + 12) < v15)
    goto LABEL_80;
LABEL_84:
  v59 = *a2;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v48 - *a2) >> 2);
  v61 = v60 + 1;
  if (v60 + 1 > 0x1555555555555555)
    goto LABEL_154;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v59) >> 2);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0xAAAAAAAAAAAAAAALL)
    v63 = 0x1555555555555555;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0x1555555555555555)
      goto LABEL_155;
    v64 = (char *)operator new(12 * v63);
    v14 = v101;
    v27 = v103;
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[12 * v60];
  v15 = (unint64_t)&v64[12 * v63];
  *(_QWORD *)v65 = __PAIR64__(v14.u32[1], v27.u32[0]);
  *((_DWORD *)v65 + 2) = v14.i32[2];
  v58 = v65 + 12;
  if (v48 == v59)
  {
    *a2 = v65;
    a2[1] = v58;
    a2[2] = (char *)v15;
  }
  else
  {
    do
    {
      v66 = *(_QWORD *)(v48 - 12);
      v48 -= 12;
      v67 = *((_DWORD *)v48 + 2);
      *(_QWORD *)(v65 - 12) = v66;
      v65 -= 12;
      *((_DWORD *)v65 + 2) = v67;
    }
    while (v48 != v59);
    v48 = *a2;
    *a2 = v65;
    a2[1] = v58;
    a2[2] = (char *)v15;
    if (!v48)
    {
      a2[1] = v58;
      if ((unint64_t)v58 < v15)
        goto LABEL_98;
      goto LABEL_102;
    }
  }
  operator delete(v48);
  v14 = v101;
  v27 = v103;
  v15 = (unint64_t)a2[2];
  a2[1] = v58;
  if ((unint64_t)v58 < v15)
  {
LABEL_98:
    *(_QWORD *)v58 = __PAIR64__(v14.u32[1], v27.u32[0]);
    *((_DWORD *)v58 + 2) = v27.i32[2];
    v68 = v58 + 12;
    a2[1] = v58 + 12;
    if ((unint64_t)(v58 + 12) >= v15)
    {
LABEL_120:
      v79 = *a2;
      v80 = 0xAAAAAAAAAAAAAAABLL * ((v68 - *a2) >> 2);
      v81 = v80 + 1;
      if (v80 + 1 > 0x1555555555555555)
        goto LABEL_154;
      v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v79) >> 2);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0xAAAAAAAAAAAAAAALL)
        v83 = 0x1555555555555555;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 > 0x1555555555555555)
          goto LABEL_155;
        v84 = (char *)operator new(12 * v83);
        v14.i32[2] = v101.i32[2];
        v27 = v103;
      }
      else
      {
        v84 = 0;
      }
      v85 = &v84[12 * v80];
      v15 = (unint64_t)&v84[12 * v83];
      *(_QWORD *)v85 = v27.i64[0];
      *((_DWORD *)v85 + 2) = v14.i32[2];
      v78 = v85 + 12;
      if (v68 == v79)
      {
        *a2 = v85;
        a2[1] = v78;
        a2[2] = (char *)v15;
      }
      else
      {
        do
        {
          v86 = *(_QWORD *)(v68 - 12);
          v68 -= 12;
          v87 = *((_DWORD *)v68 + 2);
          *(_QWORD *)(v85 - 12) = v86;
          v85 -= 12;
          *((_DWORD *)v85 + 2) = v87;
        }
        while (v68 != v79);
        v68 = *a2;
        *a2 = v85;
        a2[1] = v78;
        a2[2] = (char *)v15;
        if (!v68)
        {
          a2[1] = v78;
          if ((unint64_t)v78 < v15)
            goto LABEL_134;
          goto LABEL_137;
        }
      }
      operator delete(v68);
      v27 = v103;
      v15 = (unint64_t)a2[2];
      a2[1] = v78;
      if ((unint64_t)v78 < v15)
        goto LABEL_134;
      goto LABEL_137;
    }
    goto LABEL_116;
  }
LABEL_102:
  v69 = *a2;
  v70 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a2) >> 2);
  v71 = v70 + 1;
  if (v70 + 1 > 0x1555555555555555)
    goto LABEL_154;
  v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v69) >> 2);
  if (2 * v72 > v71)
    v71 = 2 * v72;
  if (v72 >= 0xAAAAAAAAAAAAAAALL)
    v73 = 0x1555555555555555;
  else
    v73 = v71;
  if (v73)
  {
    if (v73 > 0x1555555555555555)
      goto LABEL_155;
    v74 = (char *)operator new(12 * v73);
    v14 = v101;
    v27 = v103;
  }
  else
  {
    v74 = 0;
  }
  v75 = &v74[12 * v70];
  v15 = (unint64_t)&v74[12 * v73];
  *(_QWORD *)v75 = __PAIR64__(v14.u32[1], v27.u32[0]);
  *((_DWORD *)v75 + 2) = v27.i32[2];
  v68 = v75 + 12;
  if (v58 == v69)
  {
    *a2 = v75;
    a2[1] = v68;
    a2[2] = (char *)v15;
  }
  else
  {
    do
    {
      v76 = *(_QWORD *)(v58 - 12);
      v58 -= 12;
      v77 = *((_DWORD *)v58 + 2);
      *(_QWORD *)(v75 - 12) = v76;
      v75 -= 12;
      *((_DWORD *)v75 + 2) = v77;
    }
    while (v58 != v69);
    v58 = *a2;
    *a2 = v75;
    a2[1] = v68;
    a2[2] = (char *)v15;
    if (!v58)
    {
      a2[1] = v68;
      if ((unint64_t)v68 >= v15)
        goto LABEL_120;
      goto LABEL_116;
    }
  }
  operator delete(v58);
  v14.i32[2] = v101.i32[2];
  v27 = v103;
  v15 = (unint64_t)a2[2];
  a2[1] = v68;
  if ((unint64_t)v68 >= v15)
    goto LABEL_120;
LABEL_116:
  *(_QWORD *)v68 = v27.i64[0];
  *((_DWORD *)v68 + 2) = v14.i32[2];
  v78 = v68 + 12;
  a2[1] = v68 + 12;
  if ((unint64_t)(v68 + 12) < v15)
  {
LABEL_134:
    *(_QWORD *)v78 = v27.i64[0];
    *((_DWORD *)v78 + 2) = v27.i32[2];
    v88 = v78 + 12;
    goto LABEL_153;
  }
LABEL_137:
  v89 = *a2;
  v90 = 0xAAAAAAAAAAAAAAABLL * ((v78 - *a2) >> 2);
  v91 = v90 + 1;
  if (v90 + 1 > 0x1555555555555555)
LABEL_154:
    sub_2394189F8();
  v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v89) >> 2);
  if (2 * v92 > v91)
    v91 = 2 * v92;
  if (v92 >= 0xAAAAAAAAAAAAAAALL)
    v93 = 0x1555555555555555;
  else
    v93 = v91;
  if (v93)
  {
    if (v93 <= 0x1555555555555555)
    {
      v94 = (char *)operator new(12 * v93);
      v27 = v103;
      goto LABEL_147;
    }
LABEL_155:
    sub_239418A80();
  }
  v94 = 0;
LABEL_147:
  v95 = &v94[12 * v90];
  v96 = &v94[12 * v93];
  *(_QWORD *)v95 = v27.i64[0];
  *((_DWORD *)v95 + 2) = v27.i32[2];
  v88 = v95 + 12;
  if (v78 == v89)
  {
    *a2 = v95;
    a2[1] = v88;
    a2[2] = v96;
LABEL_152:
    operator delete(v78);
    goto LABEL_153;
  }
  do
  {
    v97 = *(_QWORD *)(v78 - 12);
    v78 -= 12;
    v98 = *((_DWORD *)v78 + 2);
    *(_QWORD *)(v95 - 12) = v97;
    v95 -= 12;
    *((_DWORD *)v95 + 2) = v98;
  }
  while (v78 != v89);
  v78 = *a2;
  *a2 = v95;
  a2[1] = v88;
  a2[2] = v96;
  if (v78)
    goto LABEL_152;
LABEL_153:
  a2[1] = v88;
  return 1;
}

BOOL sub_2394B0CF4(float **a1, uint64_t a2, float **a3, unsigned __int8 a4)
{
  float *v8;
  float *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  double v13;
  double v14;
  double v15;
  __int128 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  float *v26;
  float *v27;
  double v28;
  double v29;
  double v30;
  __int128 *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unint64_t v54;
  uint64_t i;
  __int128 *__p;
  __int128 *v57;

  kdebug_trace();
  v9 = *a1;
  v8 = a1[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a1);
  if (v10 < 4)
    return v10 > 3;
  v11 = a4;
  if (a4)
  {
    __p = 0;
    v57 = 0;
    v54 = v10;
    v10 += 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3);
    if (!v10)
    {
      v12 = 0;
      i = v11;
      if (v9 != v8)
        goto LABEL_12;
      goto LABEL_29;
    }
  }
  else
  {
    v54 = v10;
  }
  if (v10 >> 59)
    sub_2394189F8();
  v12 = (__int128 *)operator new(32 * v10);
  __p = v12;
  v57 = &v12[2 * v10];
  for (i = v11; v9 != v8; v9 += 3)
  {
LABEL_12:
    v13 = *v9;
    v14 = v9[1];
    v15 = v9[2];
    v16 = __p;
    v17 = ((char *)v12 - (char *)__p) >> 5;
    if (v12 < v57)
    {
      *(double *)v12 = v13;
      *((double *)v12 + 1) = v14;
      *((double *)v12 + 2) = v15;
      *((_DWORD *)v12 + 6) = v17;
      v12 += 2;
    }
    else
    {
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 59)
        sub_2394189F8();
      v19 = (char *)v57 - (char *)__p;
      if (v57 - __p > v18)
        v18 = v19 >> 4;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
        v20 = 0x7FFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 59)
          sub_239418A80();
        v21 = (char *)operator new(32 * v20);
        v22 = (uint64_t)&v21[32 * v17];
        *(double *)v22 = v13;
        *(double *)(v22 + 8) = v14;
        *(double *)(v22 + 16) = v15;
        *(_DWORD *)(v22 + 24) = v17;
        if (v12 != __p)
        {
LABEL_22:
          v23 = v22;
          do
          {
            v24 = (__int128 *)(v23 - 32);
            v25 = *(v12 - 1);
            *(_OWORD *)(v23 - 32) = *(v12 - 2);
            *(_OWORD *)(v23 - 16) = v25;
            v12 -= 2;
            v23 -= 32;
          }
          while (v12 != __p);
          v12 = (__int128 *)(v22 + 32);
          __p = v24;
          v57 = (__int128 *)&v21[32 * v20];
          if (!v16)
            continue;
LABEL_28:
          operator delete(v16);
          continue;
        }
      }
      else
      {
        v21 = 0;
        v22 = 32 * v17;
        *(double *)v22 = v13;
        *(double *)(v22 + 8) = v14;
        *(double *)(v22 + 16) = v15;
        *(_DWORD *)(v22 + 24) = v17;
        if (v12 != __p)
          goto LABEL_22;
      }
      v12 = (__int128 *)(v22 + 32);
      __p = (__int128 *)v22;
      v57 = (__int128 *)&v21[32 * v20];
      if (v16)
        goto LABEL_28;
    }
  }
LABEL_29:
  if (i)
  {
    v26 = *a3;
    v27 = a3[1];
    if (*a3 != v27)
    {
      do
      {
        v28 = *v26;
        v29 = v26[1];
        v30 = v26[2];
        v31 = __p;
        v32 = ((char *)v12 - (char *)__p) >> 5;
        if (v12 < v57)
        {
          *(double *)v12 = v28;
          *((double *)v12 + 1) = v29;
          *((double *)v12 + 2) = v30;
          *((_DWORD *)v12 + 6) = v32;
          v12 += 2;
        }
        else
        {
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 59)
            sub_2394189F8();
          v34 = (char *)v57 - (char *)__p;
          if (v57 - __p > v33)
            v33 = v34 >> 4;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
            v35 = 0x7FFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 59)
              sub_239418A80();
            v36 = (char *)operator new(32 * v35);
            v37 = (uint64_t)&v36[32 * v32];
            *(double *)v37 = v28;
            *(double *)(v37 + 8) = v29;
            *(double *)(v37 + 16) = v30;
            *(_DWORD *)(v37 + 24) = v32;
            if (v12 != __p)
            {
LABEL_44:
              v38 = v37;
              do
              {
                v39 = (__int128 *)(v38 - 32);
                v40 = *(v12 - 1);
                *(_OWORD *)(v38 - 32) = *(v12 - 2);
                *(_OWORD *)(v38 - 16) = v40;
                v12 -= 2;
                v38 -= 32;
              }
              while (v12 != __p);
              v12 = (__int128 *)(v37 + 32);
              __p = v39;
              v57 = (__int128 *)&v36[32 * v35];
              if (!v31)
                goto LABEL_33;
LABEL_50:
              operator delete(v31);
              goto LABEL_33;
            }
          }
          else
          {
            v36 = 0;
            v37 = 32 * v32;
            *(double *)v37 = v28;
            *(double *)(v37 + 8) = v29;
            *(double *)(v37 + 16) = v30;
            *(_DWORD *)(v37 + 24) = v32;
            if (v12 != __p)
              goto LABEL_44;
          }
          v12 = (__int128 *)(v37 + 32);
          __p = (__int128 *)v37;
          v57 = (__int128 *)&v36[32 * v35];
          if (v31)
            goto LABEL_50;
        }
LABEL_33:
        v26 += 3;
      }
      while (v26 != v27);
    }
  }
  sub_2394B7898(a2, __p, v12);
  if (__p)
    operator delete(__p);
  v10 = v54;
  if (*(int *)(a2 + 8) > 2)
  {
    v41 = *(_QWORD *)(a2 + 56);
    if (v41)
    {
      v42 = *(_QWORD *)(v41 + 72);
      v41 += 72;
      if ((v42 & 3) == 2)
      {
        do
        {
          while (1)
          {
            v44 = *(_QWORD *)(v41 + 72);
            v41 += 72;
            v43 = v44;
            v45 = v44 & 3;
            if (v45 != 1)
              break;
            v41 = v43 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v45)
            v46 = v45 == 3;
          else
            v46 = 1;
        }
        while (!v46);
      }
    }
  }
  else
  {
    v41 = *(_QWORD *)(a2 + 64);
  }
  v47 = *(_QWORD *)(a2 + 64);
  if (v41 != v47)
  {
    v48 = 0;
    do
    {
      *(_DWORD *)(v41 + 68) = v48++;
      do
      {
        while (1)
        {
          v50 = *(_QWORD *)(v41 + 72);
          v41 += 72;
          v49 = v50;
          v51 = v50 & 3;
          if (v51 != 1)
            break;
          v41 = v49 & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v51)
          v52 = v51 == 3;
        else
          v52 = 1;
      }
      while (!v52);
    }
    while (v41 != v47);
  }
  kdebug_trace();
  return v10 > 3;
}

void sub_2394B11A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394B11D4(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_250ADB9D8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_OWORD *)(a2 + 40);
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = v6;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t sub_2394B123C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v8;
  int v9;
  int *v10;
  unint64_t v11;
  float64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  int *v17;
  void **v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  float v37;
  size_t prime;
  unint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  float64x2_t v45;
  uint64_t *v46;
  float64x2_t v47;
  float64x2_t v50;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  float v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  __int128 v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  float64x2_t v76;
  double v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  unint64_t v108;
  uint8x8_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  char *v121;
  char *v122;
  char *v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v131;
  unint64_t v132;
  const double *v133;
  double *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  BOOL v147;
  _QWORD *v148;
  int v149;
  char *v150;
  _BYTE *v151;
  char *v152;
  _BYTE *v153;
  char **v154;
  _BYTE *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  __int128 *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  void **v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t i;
  __int128 *v181;
  uint64_t v182;
  unsigned int *v183;
  __int128 *v184;
  int v185;
  char *v186;
  char *v187;
  void *v188;
  char *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  _QWORD *v193;
  void *v194;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  float64x2_t v201;
  float64x2_t v202;
  int8x16_t v203;
  float64x2_t v204;
  float64_t v205;
  int8x16_t v206;
  void *v207;
  float64_t v208;
  float64_t v209;
  double v210;
  void *v211;
  uint64_t v212;
  unint64_t v213;
  void *v214;
  char *v215;
  uint64_t v216;
  void *v217[2];
  char *v218;
  unint64_t v219;
  uint64_t v220;
  void *v221[2];
  void *v222[2];
  float v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE v227[24];
  _BYTE *v228;
  void *__p[2];
  char *v230;
  int v231;
  float64x2_t v232;
  double v233;
  int v234;
  unsigned int *v235;
  __int128 v236;
  uint64_t v237;
  __int128 *v238;
  uint64_t v239;
  float64x2x3_t v240;

  v239 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v8 = *(_DWORD *)(a3 + 40);
  v226 = 0x4024000000000000;
  v198 = a3;
  v225 = *(_QWORD *)(a3 + 8);
  v10 = (int *)(a4 + 128);
  v9 = *(_DWORD *)(a4 + 128);
  if (v9 >= 3)
  {
    v11 = *(_QWORD *)(a4 + 152);
  }
  else
  {
    v11 = 0;
    v197 = 0;
    if (v9 != 2)
      goto LABEL_8;
  }
  sub_2394B775C((uint64_t)__p, a4 + 128);
  v233 = 0.0;
  v234 = 0;
  v12 = *(double *)(a4 + 184);
  *(_QWORD *)&v232.f64[0] = a4 + 128;
  v232.f64[1] = v12;
  if (*(_DWORD *)(a4 + 128) == 2)
    v234 = 3;
  v197 = sub_2394B75F4((uint64_t *)__p, (uint64_t)&v232);
LABEL_8:
  v212 = a4 + 120;
  v224 = sub_2394B530C(a4 + 120);
  v13 = *(_QWORD *)(a4 + 336);
  v14 = (*(_QWORD *)(a4 + 344) - v13) >> 4;
  if (v11 <= v14)
  {
    if (v11 < v14)
      *(_QWORD *)(a4 + 344) = v13 + 16 * v11;
  }
  else
  {
    sub_239441074((uint64_t *)(a4 + 336), v11 - v14);
  }
  v15 = *v10;
  if (*v10 <= 1)
  {
    v16 = 0;
    v231 = 0;
    v17 = *(int **)(a4 + 184);
    __p[0] = (void *)(a4 + 128);
    __p[1] = v17;
    v18 = (void **)(a4 + 128);
    v19 = v17;
    if (v15 == 2)
      v20 = 3;
    else
      v20 = 0;
    goto LABEL_20;
  }
  sub_2394B775C((uint64_t)__p, a4 + 128);
  v19 = *(int **)(a4 + 184);
  v18 = (void **)__p[0];
  v17 = (int *)__p[1];
  v16 = v231;
  if (*(_DWORD *)(a4 + 128) == 2)
    v20 = 3;
  else
    v20 = 0;
  if (__p[0] == v10)
  {
LABEL_20:
    if (v17 == v19 && v16 == v20)
      goto LABEL_62;
  }
  v21 = 0;
  v22 = *(_QWORD *)(a4 + 336);
  do
  {
    v23 = v17[17];
    v230 = (char *)v17;
    v24 = *(_QWORD *)&v17[2 * v16];
    if (v17 == *(int **)v24)
    {
      v25 = 0;
    }
    else if (v17 == *(int **)(v24 + 8))
    {
      v25 = 1;
    }
    else if (v17 == *(int **)(v24 + 16))
    {
      v25 = 2;
    }
    else
    {
      v25 = 3;
    }
    v26 = *(int *)(v24 + 68);
    *(_DWORD *)(v22 + 16 * v23 + 4 * v16) = v21;
    *(_DWORD *)(v22 + 16 * v26 + 4 * v25) = v21;
    if (*(int *)v18 > 1)
    {
      if (*(_DWORD *)v18 == 3)
      {
        v27 = v231;
        v17 = (int *)__p[1];
        while (1)
        {
          if (v27 == 3)
          {
            v231 = 0;
            do
            {
              while (1)
              {
                v29 = *((_QWORD *)v17 + 9);
                v17 += 18;
                v28 = v29;
                v30 = v29 & 3;
                if (v30 != 1)
                  break;
                v17 = (int *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
              }
              if (v30)
                _ZF = v30 == 3;
              else
                _ZF = 1;
            }
            while (!_ZF);
            v27 = 0;
            __p[1] = v17;
            if (v17 == v18[7])
              goto LABEL_56;
          }
          else
          {
            v231 = ++v27;
            if (v17 == v18[7])
              goto LABEL_56;
          }
          if (*(_QWORD *)&v17[2 * v27] >= (unint64_t)v17)
            goto LABEL_56;
        }
      }
      v17 = (int *)__p[1];
      do
      {
        while (1)
        {
          v33 = *((_QWORD *)v17 + 9);
          v17 += 18;
          v32 = v33;
          v34 = v33 & 3;
          if (v34 != 1)
            break;
          v17 = (int *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
        }
        if (v34)
          v35 = v34 == 3;
        else
          v35 = 1;
      }
      while (!v35);
      __p[1] = v17;
    }
    else
    {
      v17 = (int *)__p[1];
    }
LABEL_56:
    ++v21;
    if (*v10 == 2)
      v36 = 3;
    else
      v36 = 0;
    v16 = v231;
  }
  while (v18 != (void **)v10 || v17 != v19 || v231 != v36);
LABEL_62:
  *(_OWORD *)v221 = 0u;
  *(_OWORD *)v222 = 0u;
  v223 = 1.0;
  v37 = (float)*(unint64_t *)(a1 + 96);
  prime = (unint64_t)v37;
  if ((unint64_t)v37 == 1)
  {
    prime = 2;
LABEL_64:
    sub_239427FE0((uint64_t)v221, prime);
    goto LABEL_65;
  }
  if ((prime & ((unint64_t)v37 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v37);
    v67 = v221[1];
    _CF = (void *)prime >= v221[1];
    if ((void *)prime > v221[1])
      goto LABEL_64;
  }
  else
  {
    v67 = 0;
    _CF = 1;
    if (prime)
      goto LABEL_64;
  }
  if (!_CF)
  {
    v108 = vcvtps_u32_f32((float)(unint64_t)v222[1] / v223);
    if ((unint64_t)v67 < 3
      || (v109 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v109.i16[0] = vaddlv_u8(v109), v109.u32[0] > 1uLL))
    {
      v108 = std::__next_prime(v108);
    }
    else
    {
      v110 = 1 << -(char)__clz(v108 - 1);
      if (v108 >= 2)
        v108 = v110;
    }
    if (prime <= v108)
      prime = v108;
    if (prime < (unint64_t)v67)
      goto LABEL_64;
  }
LABEL_65:
  v39 = *(_QWORD *)(a1 + 96);
  __p[1] = 0;
  v230 = 0;
  __p[0] = 0;
  if (v39)
  {
    if (v39 >> 61)
      sub_2394189F8();
    v40 = (char *)operator new(8 * v39);
    __p[0] = v40;
    v230 = &v40[8 * v39];
    bzero(v40, 8 * v39);
    __p[1] = &v40[8 * v39];
  }
  sub_239433C1C(a1, (uint64_t)__p, 1);
  v42 = (unint64_t *)__p[0];
  v41 = (unint64_t *)__p[1];
  if (__p[0] != __p[1])
  {
    do
    {
      v43 = *v42;
      v44 = sub_2394650AC(a1, *v42);
      v208 = *((double *)v44 + 10);
      v204 = *((float64x2_t *)v44 + 4);
      v205 = *((double *)v44 + 14);
      v210 = *((double *)v44 + 18);
      v206 = *((int8x16_t *)v44 + 8);
      *(_QWORD *)&v45.f64[1] = v44[17];
      *(_QWORD *)&v45.f64[0] = v44[22];
      v202 = v45;
      v203 = *((int8x16_t *)v44 + 6);
      v201 = *((float64x2_t *)v44 + 10);
      LODWORD(v236) = v43;
      *(_QWORD *)&v232.f64[0] = &v236;
      v46 = sub_2394CEA4C((uint64_t)v221, (unsigned int *)&v236, (uint64_t)&unk_239EC6E98, &v232);
      v47 = v204;
      *(_QWORD *)&_Q0.f64[0] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
      _D2 = vextq_s8(v206, v206, 8uLL).u64[0];
      v50 = v201;
      *(_QWORD *)&v50.f64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
      _Q3 = vsubq_f64((float64x2_t)0, v50);
      *(_QWORD *)&v52 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v202);
      *(_QWORD *)&v47.f64[1] = v203.i64[0];
      *(_QWORD *)&_Q0.f64[1] = vextq_s8(v203, v203, 8uLL).u64[0];
      v53 = vmlaq_laneq_f64(vmulq_n_f64(v47, _Q3.f64[0]), _Q0, _Q3, 1);
      _Q0.f64[0] = v208;
      _Q0.f64[1] = v205;
      v54 = vmlaq_n_f64(v53, _Q0, v52);
      __asm { FMLA            D0, D2, V3.D[1] }
      *(float64x2_t *)(v46 + 3) = v54;
      *((double *)v46 + 5) = vmlad_n_f64(_Q0.f64[0], v210, v52);
      ++v42;
    }
    while (v42 != v41);
    v42 = (unint64_t *)__p[0];
  }
  if (v42)
  {
    __p[1] = v42;
    operator delete(v42);
  }
  sub_23941C5D8(a4 + 360, v11, 0);
  __p[0] = 0;
  __p[1] = 0;
  v230 = 0;
  sub_239433C1C(a1, (uint64_t)__p, 1);
  v58 = __p[0];
  v57 = __p[1];
  if (__p[0] != __p[1])
  {
    do
    {
      LODWORD(v217[0]) = *v58;
      *(_QWORD *)&v236 = v217;
      v59 = sub_2394CEA4C((uint64_t)v221, (unsigned int *)v217, (uint64_t)&unk_239EC6E98, (_DWORD **)&v236);
      v60 = *((double *)v59 + 5);
      v232 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(v59 + 3)));
      v233 = v60;
      LODWORD(v213) = 0;
      v220 = 0;
      v217[0] = 0;
      sub_2394CED50(v212, v232.f64, v217, 2500, 0, &v236);
      v214 = (void *)v236;
      sub_2394CF158(v212, v232.f64, &v213, (int *)&v220 + 1, (int *)&v220, &v214, 0, &v219);
      v61 = *(unsigned int *)(v219 + 68);
      if ((v61 & 0x80000000) != 0 || (int)v61 >= (int)v11)
      {
        sub_239A444D4((uint64_t)"unknown file", 470, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      *(_QWORD *)(*(_QWORD *)(a4 + 360) + ((v61 >> 3) & 0x1FFFFFF8)) |= 1 << v61;
      ++v58;
    }
    while (v58 != v57);
    v58 = __p[0];
  }
  if (v58)
  {
    __p[1] = v58;
    operator delete(v58);
  }
  if (v11 != (uint64_t)(*(_QWORD *)(a4 + 344) - *(_QWORD *)(a4 + 336)) >> 4)
  {
    v196 = 479;
    goto LABEL_284;
  }
  if (*(_QWORD *)(a4 + 368) != v11)
  {
    v196 = 480;
LABEL_284:
    sub_239A444D4((uint64_t)"unknown file", v196, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  __p[0] = 0;
  __p[1] = 0;
  v62 = v11 >> 62;
  v63 = 4 * v11;
  v230 = 0;
  if (v11)
  {
    if (v62)
      sub_2394189F8();
    v64 = (char *)operator new(4 * v11);
    v65 = &v64[4 * v11];
    bzero(v64, 4 * v11);
    v66 = &v64[v63];
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v64 = 0;
  }
  v69 = *(_OWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v64;
  *(_QWORD *)(a4 + 32) = v66;
  v211 = (void *)v69;
  *(_OWORD *)__p = v69;
  v70 = *(char **)(a4 + 40);
  *(_QWORD *)(a4 + 40) = v65;
  v230 = v70;
  v71 = v66 - v64;
  if (v71 >= 1)
  {
    v72 = ((unint64_t)v71 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v64);
      v64 += 4;
      --v72;
    }
    while (v72 > 1);
  }
  v232 = 0uLL;
  v233 = 0.0;
  if (v11)
  {
    if (v62)
      sub_2394189F8();
    v73 = (char *)operator new(4 * v11);
    v74 = &v73[4 * v11];
    bzero(v73, 4 * v11);
    v75 = &v73[v63];
  }
  else
  {
    v74 = 0;
    v75 = 0;
    v73 = 0;
  }
  v76 = *(float64x2_t *)(a4 + 48);
  *(_QWORD *)(a4 + 48) = v73;
  *(_QWORD *)(a4 + 56) = v75;
  v209 = v76.f64[0];
  v232 = v76;
  v77 = *(double *)(a4 + 64);
  *(_QWORD *)(a4 + 64) = v74;
  v233 = v77;
  v78 = v75 - v73;
  if (v78 >= 1)
  {
    v79 = ((unint64_t)v78 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v73);
      v73 += 4;
      --v79;
    }
    while (v79 > 1);
  }
  v236 = 0uLL;
  v80 = v197 >> 62;
  v81 = 4 * v197;
  v237 = 0;
  if (v197)
  {
    if (v80)
      sub_2394189F8();
    v82 = (char *)operator new(4 * v197);
    v83 = &v82[4 * v197];
    bzero(v82, 4 * v197);
    v84 = &v82[v81];
  }
  else
  {
    v83 = 0;
    v84 = 0;
    v82 = 0;
  }
  v85 = *(_OWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 72) = v82;
  *(_QWORD *)(a4 + 80) = v84;
  v207 = (void *)v85;
  v236 = v85;
  v86 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a4 + 88) = v83;
  v237 = v86;
  v87 = v84 - v82;
  if (v87 >= 1)
  {
    v88 = ((unint64_t)v87 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v82);
      v82 += 4;
      --v88;
    }
    while (v88 > 1);
  }
  v217[0] = 0;
  v217[1] = 0;
  v218 = 0;
  if (v197)
  {
    if (v80)
      sub_2394189F8();
    v89 = (char *)operator new(4 * v197);
    v90 = &v89[4 * v197];
    bzero(v89, 4 * v197);
    v91 = &v89[v81];
  }
  else
  {
    v90 = 0;
    v91 = 0;
    v89 = 0;
  }
  v92 = *(_OWORD *)(a4 + 96);
  *(_QWORD *)(a4 + 96) = v89;
  *(_QWORD *)(a4 + 104) = v91;
  *(_OWORD *)v217 = v92;
  v93 = *(char **)(a4 + 112);
  *(_QWORD *)(a4 + 112) = v90;
  v218 = v93;
  v94 = v91 - v89;
  if (v94 >= 1)
  {
    v95 = ((unint64_t)v94 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v89);
      v89 += 4;
      --v95;
    }
    while (v95 > 1);
  }
  if ((_QWORD)v92)
    operator delete((void *)v92);
  if (v207)
    operator delete(v207);
  if (v209 != 0.0)
    operator delete(*(void **)&v209);
  if (v211)
    operator delete(v211);
  v217[0] = 0;
  v217[1] = 0;
  v218 = 0;
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v96 = *(_QWORD *)(a4 + 240);
  if (v96 == 1)
    goto LABEL_167;
  v98 = *(_QWORD *)(a4 + 264);
  v97 = *(_QWORD *)(a4 + 272);
  if (v98)
  {
    v99 = *(_QWORD *)(v98 + 48);
    v98 += 48;
    if ((v99 & 3) == 2)
    {
      do
      {
        while (1)
        {
          v101 = *(_QWORD *)(v98 + 48);
          v98 += 48;
          v100 = v101;
          v102 = v101 & 3;
          if (v102 != 1)
            break;
          v98 = v100 & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v102)
          v103 = v102 == 3;
        else
          v103 = 1;
      }
      while (!v103);
    }
  }
  if (v98 == v97)
    goto LABEL_167;
  while (v98 == *(_QWORD *)(a4 + 320))
  {
    v98 = *(_QWORD *)(a4 + 320);
    do
    {
      while (1)
      {
        v105 = *(_QWORD *)(v98 + 48);
        v98 += 48;
        v104 = v105;
        v106 = v105 & 3;
        if (v106 != 1)
          break;
        v98 = v104 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (v106)
        v107 = v106 == 3;
      else
        v107 = 1;
    }
    while (!v107);
    if (v98 == v97)
      goto LABEL_167;
  }
  if (v98 == v97)
  {
LABEL_167:
    v111 = -1;
  }
  else
  {
    v111 = -1;
    do
    {
      v112 = *(_DWORD *)(v98 + 40);
      v113 = v98;
      do
      {
        while (1)
        {
          v98 = v113 + 48;
          v114 = *(_QWORD *)(v113 + 48);
          v115 = v114 & 3;
          if ((v114 & 3) == 0 || v115 == 3)
            break;
          v113 = v114 & 0xFFFFFFFFFFFFFFFCLL;
          if (v115 != 1)
            v113 = v98;
        }
        if (v98 == v97)
          break;
        v113 = *(_QWORD *)(a4 + 320);
      }
      while (v98 == v113);
      if (v111 <= v112)
        v111 = v112;
    }
    while (v98 != v97);
  }
  v117 = v96 - 1;
  if (v111 + 1 > v117)
    v117 = v111 + 1;
  __p[0] = 0;
  __p[1] = 0;
  v230 = 0;
  if (v117)
  {
    sub_2394CFD3C((char **)&v214, v117, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v118 = *(_QWORD *)(a4 + 240);
  v119 = v118 - 1;
  v120 = v217[0];
  if (0xAAAAAAAAAAAAAAABLL * ((v218 - (char *)v217[0]) >> 3) < v118 - 1)
  {
    if (v119 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v121 = (char *)v217[1];
    v122 = (char *)operator new(24 * v119);
    v123 = &v122[24 * v119];
    v124 = v121 - v120;
    v125 = (v121 - v120) / 24;
    v126 = (unint64_t)&v122[24 * v125];
    v127 = (char *)v126;
    v128 = (char *)(a4 + 120);
    if (v121 == v120)
      goto LABEL_188;
    v129 = v124 - 24;
    if ((unint64_t)(v124 - 24) >= 0x138)
    {
      v130 = v129 / 0x18;
      v131 = &v122[24 * v125 - 24 + -24 * (v129 / 0x18)] >= v121
          || (unint64_t)&v121[-24 * (v129 / 0x18) - 24] >= v126;
      v127 = &v122[24 * v125];
      if (v131)
      {
        v132 = v130 + 1;
        v127 = (char *)(v126 - 24 * (v132 & 0x1FFFFFFFFFFFFFFELL));
        v133 = (const double *)(v121 - 48);
        v134 = (double *)(v126 - 48);
        v135 = v132 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v240 = vld3q_f64(v133);
          vst3q_f64(v134, v240);
          v134 -= 6;
          v133 -= 6;
          v135 -= 2;
        }
        while (v135);
        v121 -= 24 * (v132 & 0x1FFFFFFFFFFFFFFELL);
        if (v132 == (v132 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_188:
          v217[0] = v127;
          v217[1] = &v122[24 * v125];
          v218 = v123;
          if (v120)
          {
            operator delete(v120);
            v118 = *(_QWORD *)(a4 + 240);
          }
          goto LABEL_190;
        }
      }
    }
    else
    {
      v127 = &v122[24 * v125];
    }
    do
    {
      v136 = *((_QWORD *)v121 - 3);
      v121 -= 24;
      *((_QWORD *)v127 - 3) = v136;
      v127 -= 24;
      *((_QWORD *)v127 + 1) = *((_QWORD *)v121 + 1);
      *((_QWORD *)v127 + 2) = *((_QWORD *)v121 + 2);
    }
    while (v121 != v120);
    goto LABEL_188;
  }
  v128 = (char *)(a4 + 120);
LABEL_190:
  if (v118 != 1)
  {
    v138 = *(_QWORD **)(a4 + 264);
    v137 = *(_QWORD **)(a4 + 272);
    if (v138)
    {
      v139 = v138[6];
      v138 += 6;
      if ((v139 & 3) == 2)
      {
        do
        {
          while (1)
          {
            v141 = v138[6];
            v138 += 6;
            v140 = v141;
            v142 = v141 & 3;
            if (v142 != 1)
              break;
            v138 = (_QWORD *)(v140 & 0xFFFFFFFFFFFFFFFCLL);
          }
          if (v142)
            v143 = v142 == 3;
          else
            v143 = 1;
        }
        while (!v143);
      }
    }
    if (v138 != v137)
    {
      while (v138 == *(_QWORD **)(a4 + 320))
      {
        v138 = *(_QWORD **)(a4 + 320);
        do
        {
          while (1)
          {
            v145 = v138[6];
            v138 += 6;
            v144 = v145;
            v146 = v145 & 3;
            if (v146 != 1)
              break;
            v138 = (_QWORD *)(v144 & 0xFFFFFFFFFFFFFFFCLL);
          }
          if (v146)
            v147 = v146 == 3;
          else
            v147 = 1;
        }
        while (!v147);
        if (v138 == v137)
          goto LABEL_239;
      }
      __p[0] = *(void **)(a4 + 272);
      __p[1] = v138;
      v230 = v128;
      if (v138 != v137)
      {
        do
        {
          sub_2394B5440((unint64_t *)v217, (uint64_t)__p);
          v149 = *((_DWORD *)__p[1] + 10);
          v150 = (char *)v214 + 24 * v149;
          v151 = *(_BYTE **)v150;
          if (*((_QWORD *)v150 + 2) - *(_QWORD *)v150 > 0x4FuLL)
            goto LABEL_228;
          v152 = (char *)v214 + 24 * v149;
          v155 = (_BYTE *)*((_QWORD *)v152 + 1);
          v154 = (char **)(v152 + 8);
          v153 = v155;
          v156 = (char *)operator new(0x50uLL);
          v157 = v155 - v151;
          v158 = &v156[(v155 - v151) & 0xFFFFFFFFFFFFFFF8];
          v159 = v158;
          if (v155 != v151)
          {
            v160 = v153 - 8 - v151;
            if (v160 < 0x58)
            {
              v159 = &v156[(v153 - v151) & 0xFFFFFFFFFFFFFFF8];
              do
              {
LABEL_225:
                v169 = *((_QWORD *)v153 - 1);
                v153 -= 8;
                *((_QWORD *)v159 - 1) = v169;
                v159 -= 8;
              }
              while (v153 != v151);
              goto LABEL_226;
            }
            v159 = &v156[(v153 - v151) & 0xFFFFFFFFFFFFFFF8];
            if (v153 - v156 - (v157 & 0xFFFFFFFFFFFFFFF8) < 0x20)
              goto LABEL_225;
            v161 = v157 >> 3;
            v162 = (v160 >> 3) + 1;
            v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
            v164 = &v153[-v163];
            v159 = &v158[-v163];
            v165 = &v156[8 * v161 - 16];
            v166 = (__int128 *)(v153 - 16);
            v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v168 = *v166;
              *((_OWORD *)v165 - 1) = *(v166 - 1);
              *(_OWORD *)v165 = v168;
              v165 -= 32;
              v166 -= 2;
              v167 -= 4;
            }
            while (v167);
            v153 = v164;
            if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_225;
          }
LABEL_226:
          *(_QWORD *)v150 = v159;
          *v154 = v158;
          *((_QWORD *)v150 + 2) = v156 + 80;
          if (v151)
            operator delete(v151);
LABEL_228:
          v170 = (void **)((char *)v214 + 24 * *((int *)__p[1] + 10));
          *(void **)&v232.f64[0] = __p[1];
          sub_2394D005C((int *)(a4 + 128), &v232, v170);
          v148 = __p[1];
          while (1)
          {
            while (1)
            {
              v173 = v148[6];
              v148 += 6;
              v172 = v173;
              v174 = v173 & 3;
              if ((v173 & 3) == 0 || v174 == 3)
                break;
              v171 = v172 & 0xFFFFFFFFFFFFFFFCLL;
              if (v174 == 1)
                v148 = (_QWORD *)v171;
            }
            if (v148 == __p[0])
              break;
            if (v148 != *((_QWORD **)v230 + 25))
              goto LABEL_216;
          }
          v148 = __p[0];
LABEL_216:
          __p[1] = v148;
        }
        while (v148 != *(_QWORD **)(a4 + 272));
      }
    }
  }
LABEL_239:
  if (v8 <= 0)
    v8 = std::thread::hardware_concurrency();
  v219 = 0xAAAAAAAAAAAAAAABLL * (((char *)v217[1] - (char *)v217[0]) >> 3);
  v176 = v219 / v8;
  if ((int)v176 <= 1)
    v176 = 1;
  else
    v176 = v176;
  v213 = v176;
  sub_2397A2A50((uint64_t)&v232, v8, 0);
  v177 = v219;
  sub_2396FD800(a5, (uint64_t)v227);
  *(_QWORD *)&v236 = 0x42C8000000000000;
  sub_2396FCC68(__p, v177, v227, &v236, 1.0);
  v178 = v228;
  if (v228 == v227)
  {
    v179 = 4;
    v178 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_249;
    v179 = 5;
  }
  (*(void (**)(void))(*v178 + 8 * v179))();
LABEL_249:
  if (v219)
  {
    for (i = 0; i < v219; i += v213)
    {
      v183 = v235;
      if (!v235)
      {
        sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v184 = (__int128 *)operator new(0x80uLL);
      *(_QWORD *)v184 = &off_250ADCD40;
      *((_QWORD *)v184 + 1) = &v219;
      *((_QWORD *)v184 + 2) = &v213;
      *((_QWORD *)v184 + 3) = __p;
      *((_QWORD *)v184 + 4) = a5;
      *((_QWORD *)v184 + 5) = v217;
      *((_QWORD *)v184 + 6) = a2;
      *((_QWORD *)v184 + 7) = v221;
      *((_QWORD *)v184 + 8) = v198;
      *((_QWORD *)v184 + 9) = &v214;
      *((_QWORD *)v184 + 10) = v212;
      *((_QWORD *)v184 + 11) = a4;
      *((_QWORD *)v184 + 12) = &v226;
      *((_QWORD *)v184 + 13) = &v224;
      *((_QWORD *)v184 + 14) = &v225;
      *((_QWORD *)v184 + 15) = i;
      v238 = v184;
      sub_2394D0CC4(v183, (uint64_t)&v236);
      v181 = v238;
      if (v238 == &v236)
      {
        v181 = &v236;
        v182 = 4;
      }
      else
      {
        if (!v238)
          continue;
        v182 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v181 + 8 * v182))();
    }
  }
  sub_2397A2D24((uint64_t)&v232);
  kdebug_trace();
  HIBYTE(v237) = 0;
  LOBYTE(v236) = 0;
  sub_2396FCC6C((uint64_t)__p, (uint64_t)&v236);
  if (SHIBYTE(v237) < 0)
    operator delete((void *)v236);
  v185 = sub_2396FD7B0((uint64_t)a5);
  sub_2396FCD14((uint64_t)__p);
  sub_2397A2E14(&v232);
  v186 = (char *)v214;
  if (v214)
  {
    v187 = v215;
    v188 = v214;
    if (v215 != v214)
    {
      v189 = v215;
      do
      {
        v191 = (void *)*((_QWORD *)v189 - 3);
        v189 -= 24;
        v190 = v191;
        if (v191)
        {
          *((_QWORD *)v187 - 2) = v190;
          operator delete(v190);
        }
        v187 = v189;
      }
      while (v189 != v186);
      v188 = v214;
    }
    v215 = v186;
    operator delete(v188);
  }
  if (v217[0])
  {
    v217[1] = v217[0];
    operator delete(v217[0]);
  }
  v192 = v222[0];
  if (v222[0])
  {
    do
    {
      v193 = (_QWORD *)*v192;
      operator delete(v192);
      v192 = v193;
    }
    while (v193);
  }
  v194 = v221[0];
  v221[0] = 0;
  if (v194)
    operator delete(v194);
  return v185 ^ 1u;
}

void sub_2394B2360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_23942A16C(&a32);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_239420950((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_2394B2548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
      v5 = *(_QWORD *)(a2 + 56);
      if (!v5)
      {
LABEL_10:
        *(_QWORD *)(a1 + 56) = v5;
        return a1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v5 = *(_QWORD *)(a2 + 56);
      if (!v5)
        goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    if (!v5)
      goto LABEL_10;
  }
  if (v5 != a2 + 32)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
  return a1;
}

void sub_2394B260C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_2394B2648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  float64x2_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  uint64_t *v42;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int v53;
  _QWORD *v54;
  unint64_t *v55;
  _BYTE *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  _BYTE *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v69;
  _QWORD *v71;
  void *v72;
  float64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78[2];
  void *__p[2];
  int v80;
  unsigned __int8 v81;
  void *v82;
  unint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  _QWORD *v91;
  _BYTE v92[24];
  _BYTE *v93;
  float64x2_t v94;
  double v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v87[0] = a6;
  v87[1] = a7;
  v11 = *(_DWORD *)(a3 + 40);
  v12 = a4 + 120;
  v86 = sub_2394B530C(a4 + 120);
  v13 = *(_DWORD *)(a4 + 128);
  if (v13 >= 3)
  {
    v14 = *(_QWORD *)(a4 + 152);
    v85 = v14;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v85 = 0;
    if (v13 != 2)
      goto LABEL_8;
  }
  sub_2394B775C((uint64_t)&v94, a4 + 128);
  v97 = 0;
  v98 = 0;
  v16 = *(_QWORD *)(a4 + 184);
  *(_QWORD *)&v96 = a4 + 128;
  *((_QWORD *)&v96 + 1) = v16;
  if (*(_DWORD *)(a4 + 128) == 2)
    v98 = 3;
  v15 = sub_2394B75F4((uint64_t *)&v94, (uint64_t)&v96);
LABEL_8:
  v82 = 0;
  v83 = 0;
  v84 = 0;
  sub_2394B5624(a1, (uint64_t)&v82, 1);
  v81 = 0;
  v94 = 0uLL;
  v95 = 0.0;
  v71 = a5;
  if (v14)
  {
    if (v14 >> 62)
      sub_2394189F8();
    v17 = (char *)operator new(4 * v14);
    v18 = &v17[4 * v14];
    bzero(v17, 4 * v14);
    v19 = v18;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v17 = 0;
  }
  v20 = *(float64x2_t *)(a4 + 384);
  *(_QWORD *)(a4 + 384) = v17;
  *(_QWORD *)(a4 + 392) = v19;
  v73 = v20.f64[0];
  v94 = v20;
  v21 = *(double *)(a4 + 400);
  *(_QWORD *)(a4 + 400) = v18;
  v95 = v21;
  v22 = v19 - v17;
  if (v22 >= 1)
  {
    v23 = ((unint64_t)v22 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v17);
      v17 += 4;
      --v23;
    }
    while (v23 > 1);
  }
  v96 = 0uLL;
  v24 = v15 >> 62;
  v25 = 4 * v15;
  v97 = 0;
  v69 = a3;
  if (v15)
  {
    if (v24)
      sub_2394189F8();
    v26 = (char *)operator new(4 * v15);
    v27 = &v26[4 * v15];
    bzero(v26, 4 * v15);
    v28 = &v26[v25];
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
  }
  v29 = *(_OWORD *)(a4 + 432);
  *(_QWORD *)(a4 + 432) = v26;
  *(_QWORD *)(a4 + 440) = v28;
  v72 = (void *)v29;
  v96 = v29;
  v30 = *(_QWORD *)(a4 + 448);
  *(_QWORD *)(a4 + 448) = v27;
  v97 = v30;
  v31 = v28 - v26;
  if (v31 >= 1)
  {
    v32 = ((unint64_t)v31 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v26);
      v26 += 4;
      --v32;
    }
    while (v32 > 1);
  }
  v78[0] = 0;
  v78[1] = 0;
  __p[0] = 0;
  if (v15)
  {
    if (v24)
      sub_2394189F8();
    v33 = (char *)operator new(4 * v15);
    v34 = &v33[4 * v15];
    bzero(v33, 4 * v15);
    v35 = &v33[v25];
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v33 = 0;
  }
  v36 = *(_OWORD *)(a4 + 408);
  *(_QWORD *)(a4 + 408) = v33;
  *(_QWORD *)(a4 + 416) = v35;
  *(_OWORD *)v78 = v36;
  v37 = *(void **)(a4 + 424);
  *(_QWORD *)(a4 + 424) = v34;
  __p[0] = v37;
  v38 = v35 - v33;
  if (v38 >= 1)
  {
    v39 = ((unint64_t)v38 >> 2) + 1;
    do
    {
      atomic_store(0, (unsigned int *)v33);
      v33 += 4;
      --v39;
    }
    while (v39 > 1);
  }
  if ((_QWORD)v36)
    operator delete((void *)v36);
  if (v72)
    operator delete(v72);
  if (v73 != 0.0)
    operator delete(*(void **)&v73);
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)__p = 0u;
  v80 = 1065353216;
  sub_23941C5D8(a4 + 360, v14, 0);
  v40 = (unint64_t *)v82;
  v41 = v83;
  if (v82 != v83)
  {
    do
    {
      v77 = 0;
      v77 = *v40;
      v42 = sub_2394650AC(a1, v77);
      *(_QWORD *)&_Q0.f64[0] = v42[10];
      _Q4 = *((_OWORD *)v42 + 8);
      *(_QWORD *)&v45.f64[0] = v42[22];
      *(_QWORD *)&v45.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v45);
      v46 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v42 + 10));
      *(_QWORD *)&_Q0.f64[1] = v42[14];
      v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v42 + 4), *((int64x2_t *)v42 + 6)), v46.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v42 + 4), *((int64x2_t *)v42 + 6)), v46, 1), _Q0, v45.f64[0]);
      _D1 = v46.f64[1];
      __asm { FMLA            D0, D1, V4.D[1] }
      *(float *)_Q0.f64 = vmlad_n_f64(_Q0.f64[0], *((double *)v42 + 18), v45.f64[0]);
      v94 = vcvtq_f64_f32(vcvt_f32_f64(v47));
      v95 = *(float *)_Q0.f64;
      v76 = 0;
      v75 = 0;
      v89 = 0;
      sub_2394CED50(v12, v94.f64, &v89, 2500, 0, &v96);
      v88 = v96;
      sub_2394CF158(v12, v94.f64, (_DWORD *)&v76 + 1, (int *)&v76, &v75, &v88, 0, &v74);
      v53 = *(_DWORD *)(v74 + 68);
      if (v53 < 0 || v53 >= (int)v14)
      {
        sub_239A444D4((uint64_t)"unknown file", 817, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      *(_QWORD *)&v96 = &v77;
      v54 = sub_2394D7D58((uint64_t)v78, &v77, (uint64_t)&unk_239EC6E98, (_QWORD **)&v96);
      v54[3] = v74;
      ++v40;
    }
    while (v40 != v41);
  }
  if (v11 <= 0)
    v11 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)&v96, v11, 0);
  v56 = v82;
  v55 = v83;
  sub_2396FD800(v71, (uint64_t)v92);
  v89 = 0x42C8000000000000;
  sub_2396FCC68(&v94, ((char *)v55 - v56) >> 3, v92, &v89, 1.0);
  v57 = v93;
  if (v93 == v92)
  {
    v58 = 4;
    v57 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_46;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_46:
  v60 = v82;
  v59 = v83;
  v91 = 0;
  v61 = operator new(0x70uLL);
  *v61 = &off_250ADCD88;
  v61[1] = &v94;
  v61[2] = v71;
  v61[3] = &v82;
  v61[4] = a2;
  v61[5] = a1;
  v61[6] = v78;
  v61[7] = v87;
  v61[8] = v69;
  v61[9] = v12;
  v61[10] = &v85;
  v61[11] = a4;
  v61[12] = &v86;
  v61[13] = &v81;
  v91 = v61;
  sub_2397A3340((unint64_t *)&v96, ((char *)v59 - v60) >> 3, v90, 0);
  v62 = v91;
  if (v91 == v90)
  {
    v63 = 4;
    v62 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_51;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_51:
  sub_2397A2D24((uint64_t)&v96);
  v64 = v81;
  sub_2396FCD14((uint64_t)&v94);
  sub_2397A2E14(&v96);
  v65 = __p[0];
  if (__p[0])
  {
    do
    {
      v66 = (_QWORD *)*v65;
      operator delete(v65);
      v65 = v66;
    }
    while (v66);
  }
  v67 = v78[0];
  v78[0] = 0;
  if (v67)
    operator delete(v67);
  if (v82)
  {
    v83 = (unint64_t *)v82;
    operator delete(v82);
  }
  return v64 != 0;
}

void sub_2394B2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  sub_239420950((uint64_t)&a21);
  if (!__p)
    _Unwind_Resume(a1);
  a29 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2394B2DA0(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  float v7;
  float v8;
  int v9;
  int *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  double v14;
  float32x4_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  float v43;
  float v44;
  int v45;
  uint64_t v46;
  int v47;
  __int32 v48;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int *v72;
  _DWORD *v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  int *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  _QWORD v83[3];
  _QWORD *v84;
  uint64_t v85[7];
  unsigned int v86;
  float v87;
  _DWORD *v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v7 = *(float *)(a1 + 16);
  v8 = *(float *)(a1 + 44);
  v10 = (int *)(a2 + 128);
  v9 = *(_DWORD *)(a2 + 128);
  if (v9 >= 3)
  {
    v11 = *(_QWORD *)(a2 + 152);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (v9 != 2)
      goto LABEL_8;
  }
  sub_2394B775C((uint64_t)v85, a2 + 128);
  v82 = 0;
  v13 = *(_QWORD *)(a2 + 184);
  v79 = v10;
  v80 = v13;
  v81 = 0;
  if (*(_DWORD *)(a2 + 128) == 2)
    v82 = 3;
  v12 = sub_2394B75F4(v85, (uint64_t)&v79);
LABEL_8:
  kdebug_trace();
  sub_2396FDAA8(a3, (uint64_t)v83);
  sub_2394D8F38((uint64_t)v85, v11, v12, v83);
  v16 = v84;
  if (v84 == v83)
  {
    v17 = 4;
    v16 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_13;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_13:
  if (v89)
  {
    if (v11)
    {
      v18 = 0;
      v19 = 16;
      LODWORD(v14) = 0.5;
      v15.i64[0] = 0x8000000080000000;
      do
      {
        v20 = *(_QWORD *)(a2 + 384);
        v21 = 0.0;
        if (v20 != *(_QWORD *)(a2 + 392))
        {
          v22 = atomic_load((unsigned int *)(v20 + 4 * v18));
          v21 = (float)v22;
        }
        v23 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 24) + 4 * v18));
        v24 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 48) + 4 * v18));
        if (v86 <= v18)
        {
          sub_239A444D4((uint64_t)"unknown file", 11, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v25 = (float)((float)v23 * 0.5) + (float)(v21 * 0.4);
        v26 = *(float *)(v85[0] + v19);
        if (v26 <= 0.0)
          v27 = -0.0;
        else
          v27 = *(float *)(v85[0] + v19);
        v28 = v25 + v27;
        if (v26 > 0.0)
          v26 = 0.0;
        v29 = (float)((float)v24 * 0.5) - v26;
        *(float *)(v85[0] + v19) = v28 - v29;
        if (v28 >= v29)
          v28 = (float)((float)v24 * 0.5) - v26;
        v87 = v87 + v28;
        ++v18;
        v19 += 32;
      }
      while (v11 != v18);
    }
    v30 = *v10;
    if (*v10 > 1)
    {
      sub_2394B775C((uint64_t)&v79, (uint64_t)v10);
      v33 = *(_QWORD *)(a2 + 184);
      v32 = v80;
      v31 = v82;
      v34 = (uint64_t)(v10 - 2);
      if (*(_DWORD *)(a2 + 128) == 2)
        v35 = 3;
      else
        v35 = 0;
      if (v79 != v10)
      {
        while (1)
        {
LABEL_38:
          v81 = v32;
          v37 = *(unsigned int *)(v32 + 68);
          if ((v37 & 0x80000000) == 0)
          {
            v38 = *(unsigned int *)(*(_QWORD *)(v32 + 8 * v31) + 68);
            if ((v38 & 0x80000000) == 0)
            {
              v39 = *(int *)(*(_QWORD *)(a2 + 336) + 16 * v37 + 4 * v31);
              v40 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v39));
              v41 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 72) + 4 * v39));
              v42 = *(_QWORD *)(a2 + 408);
              v43 = 0.0;
              v44 = 0.0;
              if (v42 != *(_QWORD *)(a2 + 416))
              {
                v45 = atomic_load((unsigned int *)(v42 + 4 * v39));
                v44 = (float)v45;
              }
              v46 = *(_QWORD *)(a2 + 432);
              if (v46 != *(_QWORD *)(a2 + 440))
              {
                v47 = atomic_load((unsigned int *)(v46 + 4 * v39));
                v43 = (float)v47;
              }
              sub_2396B9628(v34, (uint64_t)&v79, v14, v15);
              *(float *)&v14 = v7 * *(float *)&v14;
              v15.f32[0] = fmaxf((float)((float)v40 + (float)(v44 * v8)) + *(float *)&v14, 0.0);
              *(float *)&v14 = fmaxf((float)((float)v41 + (float)(v43 * v8)) + *(float *)&v14, 0.0);
              if (v37 >= v38)
              {
                v48 = LODWORD(v14);
                LODWORD(v14) = v15.i32[0];
                if (v86 <= v37)
                {
LABEL_110:
                  v77 = 31;
LABEL_111:
                  sub_239A444D4((uint64_t)"unknown file", v77, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
              }
              else
              {
                if (v86 <= v37)
                  goto LABEL_110;
                v48 = v15.i32[0];
                if (v86 <= v38)
                {
                  v77 = 33;
                  goto LABEL_111;
                }
              }
              v49 = v88;
              *v88 = v38;
              v49[1] = v37;
              v49[2] = v48;
              v49[3] = LODWORD(v14);
              v88 = v49 + 4;
              v50 = v85[0];
              ++*(_DWORD *)(v85[0] + 32 * v37 + 20);
              ++*(_DWORD *)(v50 + 32 * v38 + 20);
            }
          }
          if (*v79 > 1)
          {
            if (*v79 == 3)
            {
              v51 = v82;
              v32 = v80;
              while (1)
              {
                if (v51 == 3)
                {
                  v82 = 0;
                  do
                  {
                    while (1)
                    {
                      v53 = *(_QWORD *)(v32 + 72);
                      v32 += 72;
                      v52 = v53;
                      v54 = v53 & 3;
                      if (v54 != 1)
                        break;
                      v32 = v52 & 0xFFFFFFFFFFFFFFFCLL;
                    }
                    if (v54)
                      v55 = v54 == 3;
                    else
                      v55 = 1;
                  }
                  while (!v55);
                  v51 = 0;
                  v80 = v32;
                  if (v32 == *((_QWORD *)v79 + 7))
                    goto LABEL_77;
                }
                else
                {
                  v82 = ++v51;
                  if (v32 == *((_QWORD *)v79 + 7))
                    goto LABEL_77;
                }
                if (*(_QWORD *)(v32 + 8 * v51) >= v32)
                  goto LABEL_77;
              }
            }
            v32 = v80;
            do
            {
              while (1)
              {
                v57 = *(_QWORD *)(v32 + 72);
                v32 += 72;
                v56 = v57;
                v58 = v57 & 3;
                if (v58 != 1)
                  break;
                v32 = v56 & 0xFFFFFFFFFFFFFFFCLL;
              }
              if (v58)
                v59 = v58 == 3;
              else
                v59 = 1;
            }
            while (!v59);
            v80 = v32;
          }
          else
          {
            v32 = v80;
          }
LABEL_77:
          if (*(_DWORD *)(a2 + 128) == 2)
            v60 = 3;
          else
            v60 = 0;
          v31 = v82;
          if (v79 == v10 && v32 == *(_QWORD *)(a2 + 184) && v82 == v60)
            goto LABEL_83;
        }
      }
    }
    else
    {
      v31 = 0;
      v82 = 0;
      v32 = *(_QWORD *)(a2 + 184);
      v79 = v10;
      v80 = v32;
      v33 = v32;
      v34 = (uint64_t)(v10 - 2);
      if (v30 == 2)
        v35 = 3;
      else
        v35 = 0;
    }
    if (v32 != v33 || v31 != v35)
      goto LABEL_38;
LABEL_83:
    v61 = *(void **)(a2 + 24);
    v62 = *(void **)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v63 = *(void **)(a2 + 72);
    v64 = *(void **)(a2 + 96);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    v65 = *(void **)(a2 + 384);
    *(_QWORD *)(a2 + 384) = 0;
    *(_QWORD *)(a2 + 392) = 0;
    v66 = *(void **)(a2 + 408);
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 408) = 0;
    *(_QWORD *)(a2 + 416) = 0;
    *(_QWORD *)(a2 + 424) = 0;
    v67 = *(void **)(a2 + 432);
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0;
    *(_QWORD *)(a2 + 448) = 0;
    if (v67)
      operator delete(v67);
    if (v66)
      operator delete(v66);
    if (v63)
      operator delete(v63);
    if (v64)
      operator delete(v64);
    if (v65)
      operator delete(v65);
    if (v62)
      operator delete(v62);
    if (v61)
      operator delete(v61);
    sub_2394D98B0(v85);
    sub_2394D9CC4((uint64_t)v85, 1, 0);
    if ((sub_2396FD7B0((uint64_t)a3) & 1) != 0)
    {
      v36 = 0;
      goto LABEL_115;
    }
    LODWORD(v79) = -1;
    v68 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    if (v11 <= v68)
    {
      if (v11 < v68)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 4 * v11;
      if (!v11)
      {
LABEL_114:
        kdebug_trace();
        v36 = sub_2396FD7B0((uint64_t)a3) ^ 1;
        goto LABEL_115;
      }
    }
    else
    {
      sub_2394DE27C(a2, v11 - v68, (const float *)&v79);
    }
    v69 = v85[0];
    v70 = *(_QWORD *)a2;
    if (v11 - 0x100000001 >= 0xFFFFFFFF00000001)
    {
      v71 = v11 & 0xFFFFFFFFFFFFFFFELL;
      v72 = (int *)(v85[0] + 52);
      v73 = (_DWORD *)(v70 + 4);
      v74 = v11 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v75 = *(v72 - 8);
        v76 = *v72;
        v72 += 16;
        *(v73 - 1) = v75 > 0;
        *v73 = v76 > 0;
        v73 += 2;
        v74 -= 2;
      }
      while (v74);
      goto LABEL_113;
    }
    v71 = 0;
    do
    {
      *(_DWORD *)(v70 + 4 * v71) = *(_DWORD *)(v69 + 32 * v71 + 20) > 0;
      ++v71;
LABEL_113:
      ;
    }
    while (v11 != v71);
    goto LABEL_114;
  }
  v36 = 0;
  *a4 = 6007;
LABEL_115:
  sub_2394B6980((uint64_t)v85);
  return v36;
}

uint64_t sub_2394B3568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _QWORD v5[3];
  int v6;
  uint64_t v7[4];

  v1 = a1 + 8;
  if (*(int *)(a1 + 8) < 2)
    return 0;
  sub_2394B775C((uint64_t)v7, v1);
  v6 = 0;
  v4 = *(_QWORD *)(a1 + 64);
  v5[0] = v1;
  v5[1] = v4;
  v5[2] = 0;
  if (*(_DWORD *)(a1 + 8) == 2)
    v6 = 3;
  return sub_2394B75F4(v7, (uint64_t)v5);
}

uint64_t sub_2394B35EC(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  float **v42;
  float *v43;
  unint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  signed int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  int v84;
  _QWORD *v85;
  int v86;
  unint64_t v87;
  float v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  void *v97[2];
  void *__p[2];
  int v99;
  _QWORD *v100[2];

  if (*(_BYTE *)(a2 + 104))
  {
    v6 = *(void **)(a2 + 80);
    if (v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a2 + 104) = 0;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v7 = *(void **)(a2 + 48);
    if (v7)
    {
      *(_QWORD *)(a2 + 56) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a2 + 72) = 0;
  }
  v9 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a2 + 32) = v8;
  *(_OWORD *)v97 = 0u;
  *(_OWORD *)__p = 0u;
  v99 = 1065353216;
  v10 = a1 + 128;
  if (*(int *)(a1 + 128) > 1)
  {
    sub_2394B775C((uint64_t)&v93, a1 + 128);
    v14 = *(_QWORD *)(a1 + 184);
    v13 = v93;
    v12 = v94;
    v11 = v96;
    if (*(_DWORD *)(a1 + 128) == 2)
      v15 = 3;
    else
      v15 = 0;
    if (v93 != v10)
      goto LABEL_39;
  }
  else
  {
    v11 = 0;
    v96 = 0;
    v12 = *(_QWORD *)(a1 + 184);
    v93 = a1 + 128;
    v94 = v12;
    v13 = a1 + 128;
    v14 = v12;
    v15 = 0;
  }
  if (v12 != v14)
    goto LABEL_39;
  while (v11 != v15)
  {
    do
    {
LABEL_39:
      v95 = v12;
      v25 = *(_QWORD *)(a1 + 320);
      if (*(_QWORD *)(v12 + 32) != v25
        && *(_QWORD *)(v12 + 40) != v25
        && *(_QWORD *)(v12 + 48) != v25
        && *(_QWORD *)(v12 + 56) != v25)
      {
        v26 = *(_QWORD *)(v12 + 8 * (int)v11);
        if (*(_QWORD *)(v26 + 32) != v25
          && *(_QWORD *)(v26 + 40) != v25
          && *(_QWORD *)(v26 + 48) != v25
          && *(_QWORD *)(v26 + 56) != v25)
        {
          v27 = *(_DWORD *)(*(_QWORD *)a1 + 4 * *(int *)(v26 + 68));
          v86 = *(_DWORD *)(*(_QWORD *)a1 + 4 * *(int *)(v12 + 68));
          if (v86 != -1 && v27 != -1)
          {
            if ((a3 || v86 == v27) && a3 != 3)
            {
              if (a3 == 2)
              {
                if (v86 != 1 && v27 != 1)
                  goto LABEL_139;
              }
              else if (a3 != 1 || v86 && v27)
              {
                goto LABEL_139;
              }
            }
            if (v11 >= 5)
            {
              sub_239A444D4((uint64_t)"unknown file", 1142, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            v84 = a3;
            v85 = v9;
            if (v11 == 2)
            {
              v91 = 3;
              v29 = 1;
            }
            else if (v11 == 1)
            {
              v91 = 2;
              v29 = 3;
            }
            else if (v11)
            {
              v91 = 0;
              v29 = 0x200000001;
            }
            else
            {
              v91 = 1;
              v29 = 0x200000003;
            }
            v30 = 0;
            v92 = v29;
LABEL_68:
            while (2)
            {
              v31 = *(double **)(v12 + 8 * *(&v91 + v30) + 32);
              v32 = v31[2];
              v33 = v31[3];
              v87 = __PAIR64__(LODWORD(v33), LODWORD(v32));
              v34 = v31[4];
              v88 = v34;
              v35 = LODWORD(v32) + 2654435769;
              if (v32 == 0.0)
                v35 = 2654435769;
              v36 = LODWORD(v33) + 2654435769;
              if (v33 == 0.0)
                v36 = 2654435769;
              if (v34 == 0.0)
                v37 = 2654435769;
              else
                v37 = LODWORD(v34) + 2654435769;
              if (v97[1])
              {
                v38 = ((v35 << 6) + (v35 >> 2) + v36) ^ v35;
                v39 = (v37 + (v38 >> 2) + (v38 << 6)) ^ v38;
                v40 = (uint8x8_t)vcnt_s8((int8x8_t)v97[1]);
                v40.i16[0] = vaddlv_u8(v40);
                if (v40.u32[0] > 1uLL)
                {
                  v41 = v39;
                  if ((void *)v39 >= v97[1])
                    v41 = v39 % (unint64_t)v97[1];
                }
                else
                {
                  v41 = v39 & ((unint64_t)v97[1] - 1);
                }
                v42 = (float **)*((_QWORD *)v97[0] + v41);
                if (v42)
                {
                  v43 = *v42;
                  if (v43)
                  {
                    if (v40.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v45 = *((_QWORD *)v43 + 1);
                        if (v45 == v39)
                        {
                          if (v43[4] == v32 && v43[5] == v33 && v43[6] == v34)
                            goto LABEL_99;
                        }
                        else if ((v45 & ((unint64_t)v97[1] - 1)) != v41)
                        {
                          goto LABEL_101;
                        }
                        v43 = *(float **)v43;
                        if (!v43)
                          goto LABEL_101;
                      }
                    }
                    do
                    {
                      v44 = *((_QWORD *)v43 + 1);
                      if (v44 == v39)
                      {
                        if (v43[4] == v32 && v43[5] == v33 && v43[6] == v34)
                        {
LABEL_99:
                          v100[0] = &v87;
                          *((float *)&v89 + v30++) = sub_2394DE4DC((uint64_t)v97, (float *)&v87, (uint64_t)&unk_239EC6E98, v100)[7];
                          if (v30 == 3)
                            goto LABEL_119;
                          goto LABEL_68;
                        }
                      }
                      else
                      {
                        if ((void *)v44 >= v97[1])
                          v44 %= (unint64_t)v97[1];
                        if (v44 != v41)
                          break;
                      }
                      v43 = *(float **)v43;
                    }
                    while (v43);
                  }
                }
              }
LABEL_101:
              v46 = *(_DWORD **)a2;
              v47 = *(_DWORD **)(a2 + 8);
              v48 = ((uint64_t)v47 - *(_QWORD *)a2) / 12;
              *((_DWORD *)&v89 + v30) = v48;
              v49 = *(_QWORD *)(a2 + 16);
              if ((unint64_t)v47 >= v49)
              {
                v52 = v48 + 1;
                if ((unint64_t)(v48 + 1) > 0x1555555555555555)
                  sub_2394189F8();
                v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)v46) >> 2);
                if (2 * v53 > v52)
                  v52 = 2 * v53;
                if (v53 >= 0xAAAAAAAAAAAAAAALL)
                  v54 = 0x1555555555555555;
                else
                  v54 = v52;
                if (v54)
                {
                  if (v54 > 0x1555555555555555)
                    sub_239418A80();
                  v55 = (char *)operator new(12 * v54);
                }
                else
                {
                  v55 = 0;
                }
                v56 = &v55[12 * v48];
                *(_QWORD *)v56 = v87;
                *((float *)v56 + 2) = v88;
                v57 = v56;
                if (v47 != v46)
                {
                  do
                  {
                    v58 = *(_QWORD *)(v47 - 3);
                    v47 -= 3;
                    v59 = v47[2];
                    *(_QWORD *)(v57 - 12) = v58;
                    v57 -= 12;
                    *((_DWORD *)v57 + 2) = v59;
                  }
                  while (v47 != v46);
                  v47 = *(_DWORD **)a2;
                }
                v51 = v56 + 12;
                *(_QWORD *)a2 = v57;
                *(_QWORD *)(a2 + 8) = v56 + 12;
                *(_QWORD *)(a2 + 16) = &v55[12 * v54];
                if (v47)
                  operator delete(v47);
              }
              else
              {
                v50 = v87;
                *((float *)v47 + 2) = v88;
                *(_QWORD *)v47 = v50;
                v51 = v47 + 3;
              }
              *(_QWORD *)(a2 + 8) = v51;
              v60 = *((_DWORD *)&v89 + v30);
              v100[0] = &v87;
              *((_DWORD *)sub_2394DE4DC((uint64_t)v97, (float *)&v87, (uint64_t)&unk_239EC6E98, v100) + 7) = v60;
              if (++v30 != 3)
                continue;
              break;
            }
LABEL_119:
            if (v86)
            {
              v62 = *(_DWORD **)(a2 + 32);
              v61 = *(_QWORD *)(a2 + 40);
              v9 = v85;
              if ((unint64_t)v62 < v61)
                goto LABEL_121;
LABEL_123:
              v65 = (_DWORD *)*v9;
              v66 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - *v9) >> 2);
              v67 = v66 + 1;
              if (v66 + 1 > 0x1555555555555555)
                sub_2394189F8();
              v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)v65) >> 2);
              if (2 * v68 > v67)
                v67 = 2 * v68;
              if (v68 >= 0xAAAAAAAAAAAAAAALL)
                v69 = 0x1555555555555555;
              else
                v69 = v67;
              if (v69)
              {
                if (v69 > 0x1555555555555555)
                  sub_239418A80();
                v70 = (char *)operator new(12 * v69);
              }
              else
              {
                v70 = 0;
              }
              v71 = &v70[12 * v66];
              *(_QWORD *)v71 = v89;
              *((_DWORD *)v71 + 2) = v90;
              v72 = v71;
              if (v62 != v65)
              {
                do
                {
                  v73 = *(_QWORD *)(v62 - 3);
                  v62 -= 3;
                  v74 = v62[2];
                  *(_QWORD *)(v72 - 12) = v73;
                  v72 -= 12;
                  *((_DWORD *)v72 + 2) = v74;
                }
                while (v62 != v65);
                v62 = (_DWORD *)*v9;
              }
              v63 = v71 + 12;
              *(_QWORD *)(a2 + 24) = v72;
              *(_QWORD *)(a2 + 32) = v71 + 12;
              *(_QWORD *)(a2 + 40) = &v70[12 * v69];
              if (v62)
                operator delete(v62);
            }
            else
            {
              v64 = v89;
              LODWORD(v89) = v90;
              v90 = v64;
              v62 = *(_DWORD **)(a2 + 32);
              v61 = *(_QWORD *)(a2 + 40);
              v9 = v85;
              if ((unint64_t)v62 >= v61)
                goto LABEL_123;
LABEL_121:
              *(_QWORD *)v62 = v89;
              v62[2] = v90;
              v63 = v62 + 3;
            }
            *(_QWORD *)(a2 + 32) = v63;
            v13 = v93;
            a3 = v84;
          }
        }
      }
LABEL_139:
      if (*(int *)v13 > 1)
      {
        if (*(_DWORD *)v13 == 3)
        {
          v75 = v96;
          v12 = v94;
          while (1)
          {
            if (v75 == 3)
            {
              v96 = 0;
              do
              {
                while (1)
                {
                  v77 = *(_QWORD *)(v12 + 72);
                  v12 += 72;
                  v76 = v77;
                  v78 = v77 & 3;
                  if (v78 != 1)
                    break;
                  v12 = v76 & 0xFFFFFFFFFFFFFFFCLL;
                }
                if (v78)
                  v79 = v78 == 3;
                else
                  v79 = 1;
              }
              while (!v79);
              v75 = 0;
              v94 = v12;
              if (v12 == *(_QWORD *)(v13 + 56))
                goto LABEL_165;
            }
            else
            {
              v96 = ++v75;
              if (v12 == *(_QWORD *)(v13 + 56))
                goto LABEL_165;
            }
            if (*(_QWORD *)(v12 + 8 * v75) >= v12)
              goto LABEL_165;
          }
        }
        v12 = v94;
        do
        {
          while (1)
          {
            v81 = *(_QWORD *)(v12 + 72);
            v12 += 72;
            v80 = v81;
            v82 = v81 & 3;
            if (v82 != 1)
              break;
            v12 = v80 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v82)
            v83 = v82 == 3;
          else
            v83 = 1;
        }
        while (!v83);
        v94 = v12;
      }
      else
      {
        v12 = v94;
      }
LABEL_165:
      if (*(_DWORD *)(a1 + 128) == 2)
        v15 = 3;
      else
        v15 = 0;
      v11 = v96;
    }
    while (v13 != v10 || v12 != *(_QWORD *)(a1 + 184));
  }
  v16 = *(unsigned int **)(a2 + 24);
  v17 = *(unsigned int **)(a2 + 32);
  if (v16 == v17)
  {
LABEL_23:
    if ((!*(_BYTE *)(a2 + 104)
       || 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) == 0xAAAAAAAAAAAAAAABLL
                                                                                * ((uint64_t)(*(_QWORD *)(a2 + 8)
                                                                                           - *(_QWORD *)a2) >> 2))
      && (!*(_BYTE *)(a2 + 72) || *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
      && (!*(_BYTE *)(a2 + 136) || *(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112) == (char *)v17 - (char *)v16))
    {
      v20 = 1;
      v21 = __p[0];
      if (!__p[0])
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  else
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v19 = *(unsigned int **)(a2 + 24);
    while (v18 > *v19 && v18 > v19[1] && v18 > v19[2])
    {
      v19 += 3;
      if (v19 == v17)
        goto LABEL_23;
    }
  }
  v20 = 0;
  v21 = __p[0];
  if (!__p[0])
    goto LABEL_33;
  do
  {
LABEL_32:
    v22 = (_QWORD *)*v21;
    operator delete(v21);
    v21 = v22;
  }
  while (v22);
LABEL_33:
  v23 = v97[0];
  v97[0] = 0;
  if (v23)
    operator delete(v23);
  return v20;
}

void sub_2394B3F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394B3F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394B3F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394B3F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394B3F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394B3F6C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x2_t v13;
  unint64_t v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t *v18;
  uint64_t v19;
  float *v20;
  double *v21;
  uint64_t v22;
  double v23;
  double *v24;
  double *v25;
  double *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  double *v33;
  unint64_t v34;
  double *v35;
  uint64_t v36;
  double v37;
  double *v38;
  double *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  double *v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  double v50;
  double *v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  double *v58;
  unint64_t v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  double *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  double *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  double *v77;
  uint64_t v78;
  __int128 v79;
  char *v80;
  char *v81;
  void *v82;
  char *v83;
  void *v84;
  void *v85;
  _BYTE *v86;
  char *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  char *v94;
  float *v95;
  double *v96;
  uint64_t v97;
  double v98;
  double *v99;
  double *v100;
  double *v101;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  double *v108;
  unint64_t v109;
  double *v110;
  uint64_t v111;
  double v112;
  double *v113;
  double *v114;
  int64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  double *v121;
  unint64_t v122;
  double *v123;
  uint64_t v124;
  double v125;
  double *v126;
  int64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  double *v133;
  unint64_t v134;
  double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  double *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  double *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  double *v152;
  uint64_t v153;
  __int128 v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  void *v172;
  char *v173;
  void *v174;
  void *v175;
  char *v176;
  char *v177;
  void *v178;
  char *v179;
  void *v180;
  void *v181;
  char *v182;
  char *v183;
  void *v184;
  char *v185;
  void *v186;
  void *v187;
  uint64_t v189;
  uint64_t *v190;
  void *v191;
  void *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void *v197;
  double *v198;
  _QWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  void *v202;
  void *v203;
  double *v204;
  _QWORD v205[3];
  void *v206;
  _BYTE *v207;
  void *v208;
  void *v209;
  char v210;
  void *v211;
  void *v212;
  char v213;
  void *v214;
  char *v215;
  char v216;
  void *v217;
  void *v218;
  char v219;
  void *v220;
  _BYTE *v221;
  uint64_t v222;
  void *v223;
  void *v224;
  char v225;
  void *v226;
  void *v227;
  char v228;
  void *v229;
  char *v230;
  char v231;
  void *__p;
  void *v233;
  char v234;
  void *v235;
  void *v236;
  uint64_t v237;
  void *v238;
  void *v239;
  char v240;
  void *v241;
  void *v242;
  char v243;
  void *v244;
  char *v245;
  char v246;
  void *v247;
  void *v248;
  char v249;
  void *v250;
  char *v251;
  char *v252;
  _QWORD v253[3];
  _QWORD *v254;
  _QWORD v255[3];
  _QWORD *v256;
  unint64_t v257[46];

  v4 = a4;
  v257[44] = *MEMORY[0x24BDAC8D0];
  v9 = *a4;
  v8 = a4[1];
  v252 = 0;
  v250 = 0;
  v251 = 0;
  v10 = v8 - v9;
  if (v10)
  {
    v11 = v10 / 12;
    if ((unint64_t)(v10 / 12) >> 62)
      sub_2394189F8();
    v12 = (int32x4_t *)operator new(4 * v11);
    v250 = v12;
    v252 = &v12->i8[4 * v11];
    v13.i32[0] = a2[6];
    v14 = (v11 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v15 = v12;
    if (v14 < 7)
      goto LABEL_330;
    v16 = v14 + 1;
    v15 = (int32x4_t *)((char *)v12 + 4 * (v16 & 0x7FFFFFFFFFFFFFF8));
    v17 = vdupq_lane_s32(v13, 0);
    v18 = v12 + 1;
    v19 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_330:
      do
      {
        v15->i32[0] = v13.i32[0];
        v15 = (int32x4_t *)((char *)v15 + 4);
      }
      while (v15 != (int32x4_t *)((char *)v12 + 4 * v11));
    }
    v251 = &v12->i8[4 * v11];
  }
  if (*(_BYTE *)(a3 + 144))
  {
    v240 = 0;
    LOBYTE(v241) = 0;
    v243 = 0;
    LOBYTE(v244) = 0;
    v246 = 0;
    LOBYTE(v247) = 0;
    v249 = 0;
    v236 = 0;
    v237 = 0;
    v235 = 0;
    LOBYTE(v238) = 0;
    v225 = 0;
    LOBYTE(v226) = 0;
    v228 = 0;
    LOBYTE(v229) = 0;
    v231 = 0;
    LOBYTE(__p) = 0;
    v234 = 0;
    v221 = 0;
    v222 = 0;
    v220 = 0;
    LOBYTE(v223) = 0;
    if ((sub_2396DFD60((uint64_t *)a3, (uint64_t)&v235, (uint64_t)&v220, 1.0) & 1) == 0)
    {
      if (v234 && __p)
      {
        v233 = __p;
        operator delete(__p);
      }
      if (v231)
      {
        v80 = (char *)v229;
        if (v229)
        {
          v81 = v230;
          v82 = v229;
          if (v230 != v229)
          {
            v83 = v230;
            do
            {
              v85 = (void *)*((_QWORD *)v83 - 3);
              v83 -= 24;
              v84 = v85;
              if (v85)
              {
                *((_QWORD *)v81 - 2) = v84;
                operator delete(v84);
              }
              v81 = v83;
            }
            while (v83 != v80);
            v82 = v229;
          }
          v230 = v80;
          operator delete(v82);
        }
      }
      if (v228 && v226)
      {
        v227 = v226;
        operator delete(v226);
      }
      if (v225 && v223)
      {
        v224 = v223;
        operator delete(v223);
      }
      if (v220)
      {
        v221 = v220;
        operator delete(v220);
      }
      if (v249 && v247)
      {
        v248 = v247;
        operator delete(v247);
      }
      if (v246)
      {
        v87 = (char *)v244;
        if (v244)
        {
          v88 = v245;
          v89 = v244;
          if (v245 != v244)
          {
            v90 = v245;
            do
            {
              v92 = (void *)*((_QWORD *)v90 - 3);
              v90 -= 24;
              v91 = v92;
              if (v92)
              {
                *((_QWORD *)v88 - 2) = v91;
                operator delete(v91);
              }
              v88 = v90;
            }
            while (v90 != v87);
            v89 = v244;
          }
          v245 = v87;
          operator delete(v89);
        }
      }
      if (v243 && v241)
      {
        v242 = v241;
        operator delete(v241);
      }
      if (v240 && v238)
      {
        v239 = v238;
        operator delete(v238);
      }
      if (v235)
      {
        v236 = v235;
        operator delete(v235);
      }
      v93 = 0;
      v94 = (char *)v250;
      if (v250)
        goto LABEL_312;
      return v93;
    }
    if (v221 == v220)
      goto LABEL_271;
    sub_2394B6DC0((uint64_t)&v206, (uint64_t)&v235);
    sub_2396DB4C8();
    v189 = a1;
    v190 = v4;
    sub_2396B9AB0(v205);
    v202 = 0;
    v203 = 0;
    v204 = 0;
    v20 = (float *)v206;
    if (v207 != v206)
    {
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = v20[3 * v22];
        v24 = v204;
        if (v21 < v204)
        {
          *v21 = v23;
          v25 = v21 + 1;
          goto LABEL_34;
        }
        v26 = (double *)v202;
        v27 = (char *)v21 - (_BYTE *)v202;
        v28 = ((char *)v21 - (_BYTE *)v202) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          sub_2394189F8();
        v30 = (char *)v204 - (_BYTE *)v202;
        if (((char *)v204 - (_BYTE *)v202) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 61)
            sub_239418A80();
          v32 = operator new(8 * v31);
          v33 = (double *)&v32[8 * v28];
          *v33 = v23;
          v25 = v33 + 1;
          if (v21 == v26)
            goto LABEL_32;
        }
        else
        {
          v32 = 0;
          v33 = (double *)(8 * v28);
          *(double *)(8 * v28) = v23;
          v25 = (double *)(8 * v28 + 8);
          if (v21 == v26)
            goto LABEL_32;
        }
        v34 = (char *)(v21 - 1) - (char *)v26;
        if (v34 < 0x168)
        {
          v35 = v21;
          goto LABEL_31;
        }
        if (&v32[v27 - 8 - (v34 & 0xFFFFFFFFFFFFFFF8)] > &v32[v27 - 8])
          break;
        if ((double *)((char *)v21 - (v34 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
        {
          v35 = v21;
          goto LABEL_31;
        }
        if ((unint64_t)((char *)v21 - v32 - v27) < 0x20)
        {
          v35 = v21;
          goto LABEL_31;
        }
        v62 = (v34 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v35 = &v21[v63 / 0xFFFFFFFFFFFFFFF8];
        v33 = (double *)((char *)v33 - v63);
        v64 = &v32[8 * v28 - 16];
        v65 = v21 - 2;
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *(_OWORD *)v65;
          *(v64 - 1) = *((_OWORD *)v65 - 1);
          *v64 = v67;
          v64 -= 2;
          v65 -= 4;
          v66 -= 4;
        }
        while (v66);
        if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
LABEL_32:
        v24 = (double *)&v32[8 * v31];
        v202 = v33;
        v203 = v25;
        v204 = v24;
        if (v26)
        {
          operator delete(v26);
          v20 = (float *)v206;
          v24 = v204;
        }
LABEL_34:
        v203 = v25;
        v37 = v20[3 * v22 + 1];
        if (v25 < v24)
        {
          *v25 = v37;
          v38 = v25 + 1;
          goto LABEL_52;
        }
        v39 = (double *)v202;
        v40 = (char *)v25 - (_BYTE *)v202;
        v41 = ((char *)v25 - (_BYTE *)v202) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          sub_2394189F8();
        v43 = (char *)v24 - (_BYTE *)v202;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          if (v44 >> 61)
            sub_239418A80();
          v45 = operator new(8 * v44);
          v46 = (double *)&v45[8 * v41];
          *v46 = v37;
          v38 = v46 + 1;
          if (v25 == v39)
            goto LABEL_50;
        }
        else
        {
          v45 = 0;
          v46 = (double *)(8 * v41);
          *(double *)(8 * v41) = v37;
          v38 = (double *)(8 * v41 + 8);
          if (v25 == v39)
            goto LABEL_50;
        }
        v47 = (char *)(v25 - 1) - (char *)v39;
        if (v47 < 0x168)
        {
          v48 = v25;
          goto LABEL_49;
        }
        if (&v45[v40 - 8 - (v47 & 0xFFFFFFFFFFFFFFF8)] > &v45[v40 - 8])
        {
          v48 = v25;
          do
          {
LABEL_49:
            v49 = *((_QWORD *)v48-- - 1);
            *((_QWORD *)v46-- - 1) = v49;
          }
          while (v48 != v39);
          goto LABEL_50;
        }
        if ((double *)((char *)v25 - (v47 & 0xFFFFFFFFFFFFFFF8) - 8) > v25 - 1)
        {
          v48 = v25;
          goto LABEL_49;
        }
        if ((unint64_t)((char *)v25 - v45 - v40) < 0x20)
        {
          v48 = v25;
          goto LABEL_49;
        }
        v68 = (v47 >> 3) + 1;
        v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &v25[v69 / 0xFFFFFFFFFFFFFFF8];
        v46 = (double *)((char *)v46 - v69);
        v70 = &v45[8 * v41 - 16];
        v71 = v25 - 2;
        v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73 = *(_OWORD *)v71;
          *(v70 - 1) = *((_OWORD *)v71 - 1);
          *v70 = v73;
          v70 -= 2;
          v71 -= 4;
          v72 -= 4;
        }
        while (v72);
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_49;
LABEL_50:
        v24 = (double *)&v45[8 * v44];
        v202 = v46;
        v203 = v38;
        v204 = v24;
        if (v39)
        {
          operator delete(v39);
          v20 = (float *)v206;
          v24 = v204;
        }
LABEL_52:
        v203 = v38;
        v50 = v20[3 * v22 + 2];
        if (v38 >= v24)
        {
          v51 = (double *)v202;
          v52 = (char *)v38 - (_BYTE *)v202;
          v53 = ((char *)v38 - (_BYTE *)v202) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
            sub_2394189F8();
          v55 = (char *)v24 - (_BYTE *)v202;
          if (v55 >> 2 > v54)
            v54 = v55 >> 2;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            if (v56 >> 61)
              sub_239418A80();
            v57 = operator new(8 * v56);
            v58 = (double *)&v57[8 * v53];
            *v58 = v50;
            v21 = v58 + 1;
            if (v38 == v51)
              goto LABEL_67;
LABEL_64:
            v59 = (char *)(v38 - 1) - (char *)v51;
            if (v59 < 0x168)
            {
              v60 = v38;
              goto LABEL_66;
            }
            if (&v57[v52 - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] > &v57[v52 - 8])
            {
              v60 = v38;
              goto LABEL_66;
            }
            if ((double *)((char *)v38 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8) > v38 - 1)
            {
              v60 = v38;
              goto LABEL_66;
            }
            if ((unint64_t)((char *)v38 - v57 - v52) < 0x20)
            {
              v60 = v38;
              goto LABEL_66;
            }
            v74 = (v59 >> 3) + 1;
            v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
            v60 = &v38[v75 / 0xFFFFFFFFFFFFFFF8];
            v58 = (double *)((char *)v58 - v75);
            v76 = &v57[8 * v53 - 16];
            v77 = v38 - 2;
            v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v79 = *(_OWORD *)v77;
              *(v76 - 1) = *((_OWORD *)v77 - 1);
              *v76 = v79;
              v76 -= 2;
              v77 -= 4;
              v78 -= 4;
            }
            while (v78);
            if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_66:
                v61 = *((_QWORD *)v60-- - 1);
                *((_QWORD *)v58-- - 1) = v61;
              }
              while (v60 != v51);
            }
          }
          else
          {
            v57 = 0;
            v58 = (double *)(8 * v53);
            *(double *)(8 * v53) = v50;
            v21 = (double *)(8 * v53 + 8);
            if (v38 != v51)
              goto LABEL_64;
          }
LABEL_67:
          v202 = v58;
          v203 = v21;
          v204 = (double *)&v57[8 * v56];
          if (v51)
          {
            operator delete(v51);
            v20 = (float *)v206;
          }
          goto LABEL_15;
        }
        *v38 = v50;
        v21 = v38 + 1;
LABEL_15:
        v203 = v21;
        if (++v22 >= 0xAAAAAAAAAAAAAAABLL * ((v207 - (_BYTE *)v20) >> 2))
        {
          v86 = v202;
          goto LABEL_143;
        }
      }
      v35 = v21;
      do
      {
LABEL_31:
        v36 = *((_QWORD *)v35-- - 1);
        *((_QWORD *)v33-- - 1) = v36;
      }
      while (v35 != v26);
      goto LABEL_32;
    }
    v86 = 0;
    v21 = 0;
LABEL_143:
    sub_239644B14(&v200, 5, 3, 1, 0);
    sub_2396B9BC0((uint64_t)v205, (uint64_t)&v202, (((char *)v21 - v86) >> 3) / 3uLL, 3, v200, v201);
    sub_2396B9AB0(v199);
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v95 = (float *)v220;
    if (v221 != v220)
    {
      v96 = 0;
      v97 = 0;
      while (1)
      {
        v98 = v95[3 * v97];
        v99 = v198;
        if (v96 < v198)
        {
          *v96 = v98;
          v100 = v96 + 1;
          goto LABEL_165;
        }
        v101 = (double *)v196;
        v102 = (char *)v96 - (_BYTE *)v196;
        v103 = ((char *)v96 - (_BYTE *)v196) >> 3;
        v104 = v103 + 1;
        if ((unint64_t)(v103 + 1) >> 61)
          sub_2394189F8();
        v105 = (char *)v198 - (_BYTE *)v196;
        if (((char *)v198 - (_BYTE *)v196) >> 2 > v104)
          v104 = v105 >> 2;
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
          v106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v106 = v104;
        if (v106)
        {
          if (v106 >> 61)
            sub_239418A80();
          v107 = operator new(8 * v106);
          v108 = (double *)&v107[8 * v103];
          *v108 = v98;
          v100 = v108 + 1;
          if (v96 == v101)
            goto LABEL_163;
        }
        else
        {
          v107 = 0;
          v108 = (double *)(8 * v103);
          *(double *)(8 * v103) = v98;
          v100 = (double *)(8 * v103 + 8);
          if (v96 == v101)
            goto LABEL_163;
        }
        v109 = (char *)(v96 - 1) - (char *)v101;
        if (v109 < 0x168)
        {
          v110 = v96;
          goto LABEL_162;
        }
        if (&v107[v102 - 8 - (v109 & 0xFFFFFFFFFFFFFFF8)] > &v107[v102 - 8])
          break;
        if ((double *)((char *)v96 - (v109 & 0xFFFFFFFFFFFFFFF8) - 8) > v96 - 1)
        {
          v110 = v96;
          goto LABEL_162;
        }
        if ((unint64_t)((char *)v96 - v107 - v102) < 0x20)
        {
          v110 = v96;
          goto LABEL_162;
        }
        v137 = (v109 >> 3) + 1;
        v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
        v110 = &v96[v138 / 0xFFFFFFFFFFFFFFF8];
        v108 = (double *)((char *)v108 - v138);
        v139 = &v107[8 * v103 - 16];
        v140 = v96 - 2;
        v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v142 = *(_OWORD *)v140;
          *(v139 - 1) = *((_OWORD *)v140 - 1);
          *v139 = v142;
          v139 -= 2;
          v140 -= 4;
          v141 -= 4;
        }
        while (v141);
        if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_162;
LABEL_163:
        v99 = (double *)&v107[8 * v106];
        v196 = v108;
        v197 = v100;
        v198 = v99;
        if (v101)
        {
          operator delete(v101);
          v95 = (float *)v220;
          v99 = v198;
        }
LABEL_165:
        v197 = v100;
        v112 = v95[3 * v97 + 1];
        if (v100 < v99)
        {
          *v100 = v112;
          v113 = v100 + 1;
          goto LABEL_183;
        }
        v114 = (double *)v196;
        v115 = (char *)v100 - (_BYTE *)v196;
        v116 = ((char *)v100 - (_BYTE *)v196) >> 3;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 61)
          sub_2394189F8();
        v118 = (char *)v99 - (_BYTE *)v196;
        if (v118 >> 2 > v117)
          v117 = v118 >> 2;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        if (v119)
        {
          if (v119 >> 61)
            sub_239418A80();
          v120 = operator new(8 * v119);
          v121 = (double *)&v120[8 * v116];
          *v121 = v112;
          v113 = v121 + 1;
          if (v100 == v114)
            goto LABEL_181;
        }
        else
        {
          v120 = 0;
          v121 = (double *)(8 * v116);
          *(double *)(8 * v116) = v112;
          v113 = (double *)(8 * v116 + 8);
          if (v100 == v114)
            goto LABEL_181;
        }
        v122 = (char *)(v100 - 1) - (char *)v114;
        if (v122 < 0x168)
        {
          v123 = v100;
          goto LABEL_180;
        }
        if (&v120[v115 - 8 - (v122 & 0xFFFFFFFFFFFFFFF8)] > &v120[v115 - 8])
        {
          v123 = v100;
          do
          {
LABEL_180:
            v124 = *((_QWORD *)v123-- - 1);
            *((_QWORD *)v121-- - 1) = v124;
          }
          while (v123 != v114);
          goto LABEL_181;
        }
        if ((double *)((char *)v100 - (v122 & 0xFFFFFFFFFFFFFFF8) - 8) > v100 - 1)
        {
          v123 = v100;
          goto LABEL_180;
        }
        if ((unint64_t)((char *)v100 - v120 - v115) < 0x20)
        {
          v123 = v100;
          goto LABEL_180;
        }
        v143 = (v122 >> 3) + 1;
        v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
        v123 = &v100[v144 / 0xFFFFFFFFFFFFFFF8];
        v121 = (double *)((char *)v121 - v144);
        v145 = &v120[8 * v116 - 16];
        v146 = v100 - 2;
        v147 = v143 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          *v145 = v148;
          v145 -= 2;
          v146 -= 4;
          v147 -= 4;
        }
        while (v147);
        if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_180;
LABEL_181:
        v99 = (double *)&v120[8 * v119];
        v196 = v121;
        v197 = v113;
        v198 = v99;
        if (v114)
        {
          operator delete(v114);
          v95 = (float *)v220;
          v99 = v198;
        }
LABEL_183:
        v197 = v113;
        v125 = v95[3 * v97 + 2];
        if (v113 >= v99)
        {
          v126 = (double *)v196;
          v127 = (char *)v113 - (_BYTE *)v196;
          v128 = ((char *)v113 - (_BYTE *)v196) >> 3;
          v129 = v128 + 1;
          if ((unint64_t)(v128 + 1) >> 61)
            sub_2394189F8();
          v130 = (char *)v99 - (_BYTE *)v196;
          if (v130 >> 2 > v129)
            v129 = v130 >> 2;
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
            v131 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v131 = v129;
          if (v131)
          {
            if (v131 >> 61)
              sub_239418A80();
            v132 = operator new(8 * v131);
            v133 = (double *)&v132[8 * v128];
            *v133 = v125;
            v96 = v133 + 1;
            if (v113 == v126)
              goto LABEL_198;
LABEL_195:
            v134 = (char *)(v113 - 1) - (char *)v126;
            if (v134 < 0x168)
            {
              v135 = v113;
              goto LABEL_197;
            }
            if (&v132[v127 - 8 - (v134 & 0xFFFFFFFFFFFFFFF8)] > &v132[v127 - 8])
            {
              v135 = v113;
              goto LABEL_197;
            }
            if ((double *)((char *)v113 - (v134 & 0xFFFFFFFFFFFFFFF8) - 8) > v113 - 1)
            {
              v135 = v113;
              goto LABEL_197;
            }
            if ((unint64_t)((char *)v113 - v132 - v127) < 0x20)
            {
              v135 = v113;
              goto LABEL_197;
            }
            v149 = (v134 >> 3) + 1;
            v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
            v135 = &v113[v150 / 0xFFFFFFFFFFFFFFF8];
            v133 = (double *)((char *)v133 - v150);
            v151 = &v132[8 * v128 - 16];
            v152 = v113 - 2;
            v153 = v149 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v154 = *(_OWORD *)v152;
              *(v151 - 1) = *((_OWORD *)v152 - 1);
              *v151 = v154;
              v151 -= 2;
              v152 -= 4;
              v153 -= 4;
            }
            while (v153);
            if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_197:
                v136 = *((_QWORD *)v135-- - 1);
                *((_QWORD *)v133-- - 1) = v136;
              }
              while (v135 != v126);
            }
          }
          else
          {
            v132 = 0;
            v133 = (double *)(8 * v128);
            *(double *)(8 * v128) = v125;
            v96 = (double *)(8 * v128 + 8);
            if (v113 != v126)
              goto LABEL_195;
          }
LABEL_198:
          v196 = v133;
          v197 = v96;
          v198 = (double *)&v132[8 * v131];
          if (v126)
          {
            operator delete(v126);
            v95 = (float *)v220;
          }
          goto LABEL_146;
        }
        *v113 = v125;
        v96 = v113 + 1;
LABEL_146:
        v197 = v96;
        if (++v97 >= 0xAAAAAAAAAAAAAAABLL * ((v221 - (_BYTE *)v95) >> 2))
        {
          v155 = v196;
          goto LABEL_232;
        }
      }
      v110 = v96;
      do
      {
LABEL_162:
        v111 = *((_QWORD *)v110-- - 1);
        *((_QWORD *)v108-- - 1) = v111;
      }
      while (v110 != v101);
      goto LABEL_163;
    }
    v155 = 0;
    v96 = 0;
LABEL_232:
    sub_239644B14(&v194, 5, 3, 1, 0);
    v4 = v190;
    sub_2396B9BC0((uint64_t)v199, (uint64_t)&v196, (((char *)v96 - v155) >> 3) / 3uLL, 3, v194, v195);
    v157 = *v190;
    v156 = v190[1];
    v192 = 0;
    v193 = 0;
    v191 = 0;
    v158 = v156 - v157;
    if (v158)
    {
      v159 = v158 / 12;
      if ((unint64_t)(v158 / 12) >> 62)
        sub_2394189F8();
      v191 = operator new(4 * v159);
      v193 = (char *)v191 + 4 * v159;
      bzero(v191, 4 * v159);
      v192 = v193;
    }
    sub_2397A2A50((uint64_t)v257, a2[10], 0);
    v161 = *v190;
    v160 = v190[1];
    v256 = 0;
    v162 = operator new(0x38uLL);
    *v162 = &off_250ADCDD0;
    v162[1] = v189;
    v162[2] = v190;
    v162[3] = &v191;
    v162[4] = v199;
    v162[5] = &v220;
    v162[6] = a2;
    v256 = v162;
    sub_2397A376C(v257, 0xAAAAAAAAAAAAAAABLL * ((v160 - v161) >> 2), v255, 1uLL);
    v163 = v256;
    if (v256 == v255)
    {
      v164 = 4;
      v163 = v255;
    }
    else
    {
      if (!v256)
        goto LABEL_240;
      v164 = 5;
    }
    (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_240:
    v166 = *v190;
    v165 = v190[1];
    v254 = 0;
    v167 = operator new(0x38uLL);
    *v167 = &off_250ADCE18;
    v167[1] = v190;
    v167[2] = &v250;
    v167[3] = v205;
    v167[4] = v199;
    v167[5] = &v191;
    v167[6] = a2;
    v254 = v167;
    sub_2397A376C(v257, 0xAAAAAAAAAAAAAAABLL * ((v165 - v166) >> 2), v253, 1uLL);
    v168 = v254;
    if (v254 == v253)
    {
      v169 = 4;
      v168 = v253;
    }
    else
    {
      if (!v254)
      {
LABEL_245:
        sub_2397A2E14(v257);
        if (v191)
        {
          v192 = v191;
          operator delete(v191);
        }
        if (v196)
        {
          v197 = v196;
          operator delete(v196);
        }
        sub_2396B9B98(v199);
        if (v202)
        {
          v203 = v202;
          operator delete(v202);
        }
        sub_2396B9B98(v205);
        if (v219 && v217)
        {
          v218 = v217;
          operator delete(v217);
        }
        if (v216)
        {
          v170 = (char *)v214;
          if (v214)
          {
            v171 = v215;
            v172 = v214;
            if (v215 != v214)
            {
              v173 = v215;
              do
              {
                v175 = (void *)*((_QWORD *)v173 - 3);
                v173 -= 24;
                v174 = v175;
                if (v175)
                {
                  *((_QWORD *)v171 - 2) = v174;
                  operator delete(v174);
                }
                v171 = v173;
              }
              while (v173 != v170);
              v172 = v214;
            }
            v215 = v170;
            operator delete(v172);
          }
        }
        if (v213 && v211)
        {
          v212 = v211;
          operator delete(v211);
        }
        if (v210 && v208)
        {
          v209 = v208;
          operator delete(v208);
        }
        if (v206)
        {
          v207 = v206;
          operator delete(v206);
        }
LABEL_271:
        if (v234 && __p)
        {
          v233 = __p;
          operator delete(__p);
        }
        if (v231)
        {
          v176 = (char *)v229;
          if (v229)
          {
            v177 = v230;
            v178 = v229;
            if (v230 != v229)
            {
              v179 = v230;
              do
              {
                v181 = (void *)*((_QWORD *)v179 - 3);
                v179 -= 24;
                v180 = v181;
                if (v181)
                {
                  *((_QWORD *)v177 - 2) = v180;
                  operator delete(v180);
                }
                v177 = v179;
              }
              while (v179 != v176);
              v178 = v229;
            }
            v230 = v176;
            operator delete(v178);
          }
        }
        if (v228 && v226)
        {
          v227 = v226;
          operator delete(v226);
        }
        if (v225 && v223)
        {
          v224 = v223;
          operator delete(v223);
        }
        if (v220)
        {
          v221 = v220;
          operator delete(v220);
        }
        if (v249 && v247)
        {
          v248 = v247;
          operator delete(v247);
        }
        if (v246)
        {
          v182 = (char *)v244;
          if (v244)
          {
            v183 = v245;
            v184 = v244;
            if (v245 != v244)
            {
              v185 = v245;
              do
              {
                v187 = (void *)*((_QWORD *)v185 - 3);
                v185 -= 24;
                v186 = v187;
                if (v187)
                {
                  *((_QWORD *)v183 - 2) = v186;
                  operator delete(v186);
                }
                v183 = v185;
              }
              while (v185 != v182);
              v184 = v244;
            }
            v245 = v182;
            operator delete(v184);
          }
        }
        if (v243 && v241)
        {
          v242 = v241;
          operator delete(v241);
        }
        if (v240 && v238)
        {
          v239 = v238;
          operator delete(v238);
        }
        if (v235)
        {
          v236 = v235;
          operator delete(v235);
        }
        goto LABEL_311;
      }
      v169 = 5;
    }
    (*(void (**)(void))(*v168 + 8 * v169))();
    goto LABEL_245;
  }
LABEL_311:
  v93 = sub_2394EA7FC(v4, (uint64_t)&v250, a2[8], 0);
  v94 = (char *)v250;
  if (v250)
  {
LABEL_312:
    v251 = v94;
    operator delete(v94);
  }
  return v93;
}

void sub_2394B51A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;
  unint64_t *v71;
  uint64_t v72;
  void *v73;

  v71 = (unint64_t *)STACK[0x2A8];
  if (STACK[0x2A8] == v69)
  {
    v72 = 4;
    v71 = &STACK[0x290];
  }
  else
  {
    if (!v71)
      goto LABEL_6;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_6:
  sub_2397A2E14(&STACK[0x2D0]);
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  sub_2396B9B98(&a20);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  sub_2396B9B98(&a28);
  sub_2394B6764((uint64_t)&a31);
  sub_2394B6764((uint64_t)&a50);
  sub_2394B6764((uint64_t)&a69);
  v73 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

void sub_2394B52F4()
{
  JUMPOUT(0x2394B52ACLL);
}

void sub_2394B52FC()
{
  JUMPOUT(0x2394B52ACLL);
}

void sub_2394B5304()
{
  JUMPOUT(0x2394B52ACLL);
}

uint64_t sub_2394B530C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  if (*(int *)(a1 + 8) < 3)
    return 0;
  v2 = *(_QWORD **)(a1 + 56);
  v1 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    v3 = v2[9];
    v2 += 9;
    if ((v3 & 3) == 2)
    {
      do
      {
        while (1)
        {
          v5 = v2[9];
          v2 += 9;
          v4 = v5;
          v6 = v5 & 3;
          if (v6 != 1)
            break;
          v2 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
        }
        if (v6)
          v7 = v6 == 3;
        else
          v7 = 1;
      }
      while (!v7);
    }
  }
  if (v2 == v1)
    return 0;
  v8 = *(_QWORD *)(a1 + 200);
  while (v2[4] == v8 || v2[5] == v8 || v2[6] == v8 || v2[7] == v8)
  {
    do
    {
      while (1)
      {
        v10 = v2[9];
        v2 += 9;
        v9 = v10;
        v11 = v10 & 3;
        if (v11 != 1)
          break;
        v2 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      }
      if (v11)
        v12 = v11 == 3;
      else
        v12 = 1;
    }
    while (!v12);
    if (v2 == v1)
      return 0;
  }
  if (v2 == v1)
    return 0;
  v13 = 0;
LABEL_31:
  ++v13;
  while (1)
  {
    while (1)
    {
      v15 = v2;
      v17 = v2[9];
      v2 += 9;
      v16 = v17;
      v18 = v17 & 3;
      if ((v17 & 3) == 0 || v18 == 3)
        break;
      if (v18 == 1)
        v2 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    }
    if (v2 == v1)
      return v13;
    v20 = *(_QWORD *)(a1 + 200);
    if (v15[13] != v20 && v15[14] != v20 && v15[15] != v20 && v15[16] != v20)
      goto LABEL_31;
  }
}

_QWORD *sub_2394B5440(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  float64x2x3_t v26;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = (uint64_t)&v5[-*a1];
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (unint64_t)&v13[8 * (v9 >> 3)];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 + 16);
    v7 = (_QWORD *)(v14 + 24);
    if (v5 != v8)
    {
      v15 = v5 - v8 - 24;
      if (v15 < 0x138)
        goto LABEL_23;
      v16 = v15 / 0x18;
      if (&v13[v9 - 24 * v16 - 24] < v5 && (unint64_t)&v5[-24 * v16 - 24] < v14)
        goto LABEL_23;
      v18 = v16 + 1;
      v19 = (v16 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v6 = &v5[-24 * v19];
      v20 = v14 - 24 * v19;
      v21 = (const double *)(v5 - 48);
      v22 = (double *)(v14 - 48);
      v23 = v19;
      do
      {
        v26 = vld3q_f64(v21);
        vst3q_f64(v22, v26);
        v22 -= 6;
        v21 -= 6;
        v23 -= 2;
      }
      while (v23);
      v14 = v20;
      if (v18 != v19)
      {
LABEL_23:
        v20 = v14;
        do
        {
          v24 = *((_QWORD *)v6 - 3);
          v6 -= 24;
          *(_QWORD *)(v20 - 24) = v24;
          v20 -= 24;
          *(_QWORD *)(v20 + 8) = *((_QWORD *)v6 + 1);
          *(_QWORD *)(v20 + 16) = *((_QWORD *)v6 + 2);
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
      v14 = v20;
    }
    *a1 = v14;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v13[24 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v5 + 2) = *(_QWORD *)(a2 + 16);
    v7 = v5 + 24;
  }
  a1[1] = (unint64_t)v7;
  return v7 - 3;
}

void sub_2394B5624(uint64_t a1, uint64_t a2, char a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v6 = *(char **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a1 + 96);
  if (v7 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v6) >> 3)
  {
    if (v7 >> 61)
LABEL_34:
      sub_2394189F8();
    v8 = 8 * v7;
    v9 = (char *)operator new(8 * v7);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v9[v8];
    if (v6)
      operator delete(v6);
  }
  v31 = a3;
  v10 = *(uint64_t **)(a1 + 88);
  if (v10)
  {
    while (1)
    {
      if (*((_BYTE *)v10 + 256) != 2)
        goto LABEL_9;
      v13 = *(char **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
        break;
      *(_QWORD *)v13 = *((unsigned int *)v10 + 4);
      v11 = (uint64_t)(v13 + 8);
LABEL_8:
      *(_QWORD *)(a2 + 8) = v11;
LABEL_9:
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_31;
    }
    v14 = *(char **)a2;
    v15 = (uint64_t)&v13[-*(_QWORD *)a2];
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      goto LABEL_34;
    v18 = v12 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_239418A80();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      *v21 = *((unsigned int *)v10 + 4);
      v11 = (uint64_t)(v21 + 1);
      if (v13 == v14)
        goto LABEL_29;
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      *(_QWORD *)(8 * v16) = *((unsigned int *)v10 + 4);
      v11 = 8 * v16 + 8;
      if (v13 == v14)
      {
LABEL_29:
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = &v20[8 * v19];
        if (v14)
          operator delete(v14);
        goto LABEL_8;
      }
    }
    v22 = v13 - 8 - v14;
    if (v22 < 0x58)
      goto LABEL_38;
    if ((unint64_t)(v13 - &v20[v15]) < 0x20)
      goto LABEL_38;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v13[-v24];
    v21 = (_QWORD *)((char *)v21 - v24);
    v26 = &v20[8 * v16 - 16];
    v27 = v13 - 16;
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    v13 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_38:
      do
      {
        v30 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v21 = v30;
      }
      while (v13 != v14);
    }
    goto LABEL_29;
  }
LABEL_31:
  if ((v31 & 1) != 0)
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

uint64_t sub_2394B5838(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;

  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v2 = sub_2394B5950(a1 + 128);
  *(_QWORD *)(a1 + 320) = 0;
  v4 = 0;
  sub_2394B5B58(v2, &v4, &v5);
  *(_QWORD *)(a1 + 320) = v5;
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  return a1;
}

void sub_2394B58B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  sub_2394B6670((_QWORD *)(v1 + 224));
  sub_2394B5A64((_QWORD *)(v1 + 136));
  v3 = *(void **)(v1 + 96);
  if (v3)
  {
    *(_QWORD *)(v1 + 104) = v3;
    operator delete(v3);
    v4 = *(void **)(v1 + 72);
    if (!v4)
    {
LABEL_3:
      v5 = *(void **)(v1 + 48);
      if (!v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = *(void **)(v1 + 72);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 80) = v4;
  operator delete(v4);
  v5 = *(void **)(v1 + 48);
  if (!v5)
  {
LABEL_4:
    v6 = *(void **)(v1 + 24);
    if (!v6)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v1 + 56) = v5;
  operator delete(v5);
  v6 = *(void **)(v1 + 24);
  if (!v6)
  {
LABEL_5:
    v7 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_2394B5950(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_DWORD *)a1 = -2;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = operator new();
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 14;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = operator new();
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 14;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    *(_QWORD *)(a1 + 160) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_2394B5A1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 160) = v6;
    operator delete(v6);
  }
  sub_2394B5A64(v2);
  _Unwind_Resume(a1);
}

void sub_2394B5A44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394B5A64(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = (_QWORD *)a1[7];
  v4 = (_QWORD *)a1[8];
  v3 = a1 + 7;
  if (v2 != v4)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[1];
      if (v6 != 2)
      {
        v7 = v5 + 9;
        v8 = 72 * v6 - 144;
        do
        {
          if ((*(_BYTE *)v7 & 3) == 0)
            *v7 = 2;
          v7 += 9;
          v8 -= 72;
        }
        while (v8);
      }
      operator delete(v5);
      v2 += 2;
    }
    while (v2 != v4);
    v2 = (_QWORD *)*v3;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 14;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v9 = a1[10];
  if (v9)
  {
    MEMORY[0x23B83E31C](v9, 0xC400A2AC0F1);
    v10 = (_QWORD *)*v3;
    if (*v3)
    {
      a1[8] = v10;
      operator delete(v10);
    }
  }
  return a1;
}

void sub_2394B5B58(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;

  v6 = *(_QWORD *)(a1 + 128);
  if (!v6)
  {
    sub_2394B61FC((_QWORD *)(a1 + 96));
    v6 = *(_QWORD *)(a1 + 128);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 0;
  ++*(_QWORD *)(a1 + 112);
  *a3 = (uint64_t *)v6;
  v7 = (*(_DWORD *)a1)++;
  switch(v7)
  {
    case -2:
      v8 = *(_QWORD *)(a1 + 40);
      if (!v8)
      {
        sub_2394B6434((_QWORD *)(a1 + 8));
        v8 = *(_QWORD *)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFCLL;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_QWORD *)(v8 + 32) = v6;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_BYTE *)(v8 + 64) = 0;
      ++*(_QWORD *)(a1 + 24);
      *(_QWORD *)v6 = v8;
      return;
    case -1:
      v52 = *(_QWORD *)(a1 + 40);
      if (!v52)
      {
        sub_2394B6434((_QWORD *)(a1 + 8));
        v52 = *(_QWORD *)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFFCLL;
      *(_OWORD *)v52 = 0u;
      *(_OWORD *)(v52 + 16) = 0u;
      *(_QWORD *)(v52 + 32) = v6;
      *(_QWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_BYTE *)(v52 + 64) = 0;
      ++*(_QWORD *)(a1 + 24);
      *(_QWORD *)v6 = v52;
      v53 = (_QWORD *)**a2;
      *(_QWORD *)v52 = v53;
      *v53 = v52;
      return;
    case 0:
      v45 = (_QWORD *)**a2;
      v46 = (_QWORD *)*v45;
      v45[5] = *(_QWORD *)(*v45 + 32);
      v46[5] = v6;
      v46[1] = v45;
      v47 = *a2;
      v48 = *(_QWORD *)(a1 + 40);
      if (!v48)
      {
        sub_2394B6434((_QWORD *)(a1 + 8));
        v48 = *(_QWORD *)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFFCLL;
      *(_OWORD *)v48 = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_QWORD *)(v48 + 32) = v6;
      *(_QWORD *)(v48 + 40) = v47;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_BYTE *)(v48 + 64) = 0;
      ++*(_QWORD *)(a1 + 24);
      *(_QWORD *)v48 = v45;
      v45[1] = v48;
      *(_QWORD *)(v48 + 8) = v46;
      *v46 = v48;
      *(_QWORD *)v6 = v46;
      return;
    case 1:
      v49 = *a2;
      v50 = (_QWORD *)**a2;
      if (*a2 == (uint64_t *)v50[4])
      {
        v51 = 0;
      }
      else if (v49 == (uint64_t *)v50[5])
      {
        v51 = 1;
      }
      else if (v49 == (uint64_t *)v50[6])
      {
        v51 = 2;
      }
      else
      {
        v51 = 3;
      }
      v65 = v50[v51 == 0];
      v50[6] = v6;
      v66 = v51;
      v67 = v50[v51];
      v68 = 0uLL;
      v69 = 8 * (v51 == 0);
      v70 = 8 * v51;
      do
      {
        v73 = *(_QWORD *)(a1 + 40);
        if (!v73)
        {
          sub_2394B6434((_QWORD *)(a1 + 8));
          v68 = 0uLL;
          v73 = *(_QWORD *)(a1 + 40);
        }
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v73 & 0xFFFFFFFFFFFFFFFCLL;
        *(_BYTE *)(v73 + 64) = 0;
        *(_OWORD *)(v73 + 48) = v68;
        *(_OWORD *)v73 = v68;
        *(_OWORD *)(v73 + 16) = v68;
        *(_OWORD *)(v73 + 32) = v68;
        v71 = v73 + 32;
        ++*(_QWORD *)(a1 + 24);
        *(_QWORD *)(v71 + v70) = *(_QWORD *)(v67 + 32 + v69);
        *(_QWORD *)(v71 + v69) = *(_QWORD *)(v67 + 32 + v70);
        *(_QWORD *)(v73 + 48) = *a2;
        *(_QWORD *)(v73 + v70) = v50;
        v50[(unint64_t)v69 / 8] = v73;
        *(_QWORD *)(v73 + 16) = v67;
        *(_QWORD *)(v67 + 16) = v73;
        v72 = *a3;
        *(_QWORD *)(v67 + 48) = *a3;
        v67 = *(_QWORD *)(v67 + v70);
        v50 = (_QWORD *)v73;
      }
      while (v67 != v65);
      *(_QWORD *)(v65 + 48) = v72;
      *(_QWORD *)(v73 + v69) = v65;
      *(_QWORD *)(v65 + 16) = v73;
      v74 = **a2;
      *(_QWORD *)(v74 + 16) = *(_QWORD *)(*(_QWORD *)(v74 + 8 * v66) + 16);
      *(_QWORD *)(v74 + v69) = v65;
      *v72 = v65;
      return;
    case 2:
      v9 = (char *)operator new(0x80uLL);
      v10 = v9;
      v75 = v9;
      v76 = v9 + 128;
      v11 = *(uint64_t **)(a1 + 48);
      if (v11)
      {
        v12 = v11[9];
        v11 += 9;
        if ((v12 & 3) == 2)
        {
          do
          {
            while (1)
            {
              v14 = v11[9];
              v11 += 9;
              v13 = v14;
              v15 = v14 & 3;
              if (v15 != 1)
                break;
              v11 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
            }
            if (v15)
              v16 = v15 == 3;
            else
              v16 = 1;
          }
          while (!v16);
        }
      }
      *(_QWORD *)v6 = v11;
      if (v11 == *(uint64_t **)(a1 + 56))
        goto LABEL_91;
      v17 = *v11;
      break;
    default:
      return;
  }
  do
  {
    if (v17)
    {
      v11[3] = 0;
      v18 = *a3;
      v11[7] = (uint64_t)*a3;
      v19 = *a2;
      v20 = (uint64_t *)v11[4];
      if (v20 != *a2)
      {
        v21 = (uint64_t *)v11[5];
        if (v21 != v19)
        {
          v22 = (uint64_t *)v11[6];
          if (v22 != v19 && v18 != v19)
          {
            v24 = *(_QWORD *)(a1 + 40);
            if (!v24)
            {
              sub_2394B6434((_QWORD *)(a1 + 8));
              v24 = *(_QWORD *)(a1 + 40);
            }
            *(_QWORD *)(a1 + 40) = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFFCLL;
            *(_OWORD *)v24 = 0u;
            *(_OWORD *)(v24 + 16) = 0u;
            *(_QWORD *)(v24 + 32) = v20;
            *(_QWORD *)(v24 + 40) = v22;
            *(_QWORD *)(v24 + 48) = v21;
            *(_QWORD *)(v24 + 56) = v19;
            *(_BYTE *)(v24 + 64) = 0;
            ++*(_QWORD *)(a1 + 24);
            *(_QWORD *)(v24 + 24) = v11;
            v11[3] = v24;
            *(_QWORD *)v24 = 0;
            if (v10 < v76)
            {
              *(_QWORD *)v10 = v24;
              v25 = (uint64_t)(v10 + 8);
LABEL_47:
              v10 = (char *)v25;
              goto LABEL_49;
            }
            v26 = (v10 - v75) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              sub_2394189F8();
            v28 = v76 - v75;
            if ((v76 - v75) >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              if (v29 >> 61)
                sub_239418A80();
              v30 = v29;
              v31 = (char *)operator new(8 * v29);
              v29 = v30;
              v32 = &v31[8 * v26];
              *(_QWORD *)v32 = v24;
              v25 = (uint64_t)(v32 + 8);
              if (v10 == v75)
                goto LABEL_45;
            }
            else
            {
              v31 = 0;
              v32 = (char *)(8 * v26);
              *(_QWORD *)(8 * v26) = v24;
              v25 = 8 * v26 + 8;
              if (v10 == v75)
                goto LABEL_45;
            }
            v33 = v10 - 8 - v75;
            if (v33 >= 0x168)
            {
              if (&v31[v10 - v75 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v31[v10 - v75 - 8])
              {
                v34 = v10;
              }
              else if (&v10[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
              {
                v34 = v10;
              }
              else if ((unint64_t)(v75 - v31) >= 0x20)
              {
                v39 = (v33 >> 3) + 1;
                v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = &v10[-v40];
                v32 -= v40;
                v41 = &v31[8 * v26 - 16];
                v42 = v10 - 16;
                v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v44 = *(_OWORD *)v42;
                  *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
                  *(_OWORD *)v41 = v44;
                  v41 -= 32;
                  v42 -= 32;
                  v43 -= 4;
                }
                while (v43);
                if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_44;
              }
              else
              {
                v34 = v10;
              }
            }
            else
            {
              v34 = v10;
            }
            do
            {
              v35 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *((_QWORD *)v32 - 1) = v35;
              v32 -= 8;
            }
            while (v34 != v75);
LABEL_44:
            v10 = v75;
LABEL_45:
            v75 = v32;
            v76 = &v31[8 * v29];
            if (v10)
              operator delete(v10);
            goto LABEL_47;
          }
        }
      }
    }
    do
    {
LABEL_49:
      while (1)
      {
        v36 = v11[9];
        v11 += 9;
        v17 = v36;
        v37 = v36 & 3;
        if (v37 != 1)
          break;
        v11 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      }
      if (v37)
        v38 = v37 == 3;
      else
        v38 = 1;
    }
    while (!v38);
  }
  while (v11 != *(uint64_t **)(a1 + 56));
  v9 = v75;
  if (v75 != v10)
  {
    v54 = v75;
    while (1)
    {
      v55 = *(_QWORD **)v54;
      v56 = *(_QWORD **)(*(_QWORD *)v54 + 24);
      v57 = *v56;
      v58 = *(_QWORD *)(*v56 + 24);
      if (v58)
      {
        *v55 = v58;
        v59 = v56[1];
        v60 = *(_QWORD *)(v59 + 24);
        v61 = *(_QWORD *)v54;
        if (v60)
          goto LABEL_83;
LABEL_86:
        *(_QWORD *)(v61 + 16) = v59;
        *(_QWORD *)(v59 + 24) = v61;
        v62 = v56[2];
        v63 = *(_QWORD *)(v62 + 24);
        v64 = *(_QWORD *)v54;
        if (v63)
          goto LABEL_87;
LABEL_80:
        *(_QWORD *)(v64 + 8) = v62;
        *(_QWORD *)(v62 + 24) = v64;
        v54 += 8;
        if (v54 == v10)
          break;
      }
      else
      {
        *v55 = v57;
        *(_QWORD *)(v57 + 24) = v55;
        v59 = v56[1];
        v60 = *(_QWORD *)(v59 + 24);
        v61 = *(_QWORD *)v54;
        if (!v60)
          goto LABEL_86;
LABEL_83:
        *(_QWORD *)(v61 + 16) = v60;
        v62 = v56[2];
        v63 = *(_QWORD *)(v62 + 24);
        v64 = *(_QWORD *)v54;
        if (!v63)
          goto LABEL_80;
LABEL_87:
        *(_QWORD *)(v64 + 8) = v63;
        v54 += 8;
        if (v54 == v10)
          break;
      }
    }
  }
  if (v75)
LABEL_91:
    operator delete(v9);
}

void sub_2394B61CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2394B61FC(_QWORD *a1)
{
  unint64_t v1;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;

  v1 = a1[3] + 2;
  if (v1 >= 0x555555555555556)
    goto LABEL_32;
  v3 = (unint64_t *)operator new(48 * v1);
  v4 = v3;
  v6 = (char *)a1[8];
  v5 = a1[9];
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v3;
    *((_QWORD *)v6 + 1) = v1;
    v7 = (uint64_t)(v6 + 16);
    goto LABEL_19;
  }
  v8 = (char *)a1[7];
  v9 = (v6 - v8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_2394189F8();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (!(v12 >> 60))
    {
      v13 = (char *)operator new(16 * v12);
      v14 = &v13[16 * v9];
      v15 = &v13[16 * v12];
      *(_QWORD *)v14 = v4;
      *((_QWORD *)v14 + 1) = v1;
      v7 = (uint64_t)(v14 + 16);
      if (v6 == v8)
        goto LABEL_17;
      goto LABEL_15;
    }
LABEL_32:
    sub_239418A80();
  }
  v14 = (char *)(16 * v9);
  v15 = 0;
  *(_QWORD *)v14 = v3;
  *((_QWORD *)v14 + 1) = v1;
  v7 = 16 * v9 + 16;
  if (v6 == v8)
    goto LABEL_17;
  do
  {
LABEL_15:
    *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
    v14 -= 16;
    v6 -= 16;
  }
  while (v6 != v8);
  v6 = (char *)a1[7];
LABEL_17:
  a1[7] = v14;
  a1[8] = v7;
  a1[9] = v15;
  if (v6)
    operator delete(v6);
LABEL_19:
  a1[8] = v7;
  v16 = a1[3];
  a1[1] += v16;
  if (!v16)
    goto LABEL_28;
  v17 = a1[4];
  if (v16 == 1)
  {
    v18 = 1;
  }
  else
  {
    v18 = v16 & 1;
    v19 = (unint64_t)&v4[6 * v16];
    v20 = (unint64_t *)(v19 - 48);
    v21 = v16 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v20[6] = v17 & 0xFFFFFFFFFFFFFFFCLL | 2;
      *v20 = v19 & 0xFFFFFFFFFFFFFFFCLL | 2;
      v19 -= 96;
      v17 = (uint64_t)v20;
      v20 -= 12;
      v21 -= 2;
    }
    while (v21);
    v17 = (uint64_t)(v20 + 12);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_27;
  }
  v22 = v17;
  v17 = (uint64_t)&v4[6 * v18 + 6];
  do
  {
    *(_QWORD *)(v17 - 48) = v22 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v17 -= 48;
    v22 = (uint64_t)&v4[6 * v18--];
  }
  while (v18);
LABEL_27:
  a1[4] = v17;
LABEL_28:
  v23 = (unint64_t *)a1[6];
  if (v23)
  {
    *v23 = (unint64_t)v4 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v24 = a1[6] & 0xFFFFFFFFFFFFFFFCLL | 1;
  }
  else
  {
    a1[5] = v4;
    v24 = 3;
  }
  v25 = &v4[6 * v16];
  *v4 = v24;
  v25[6] = 3;
  a1[6] = v25 + 6;
  a1[3] = v16 + 16;
}

void sub_2394B6434(_QWORD *a1)
{
  unint64_t v1;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;

  v1 = a1[3] + 2;
  if (v1 >= 0x38E38E38E38E38FLL)
    goto LABEL_32;
  v3 = (unint64_t *)operator new(72 * v1);
  v4 = v3;
  v6 = (char *)a1[8];
  v5 = a1[9];
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v3;
    *((_QWORD *)v6 + 1) = v1;
    v7 = (uint64_t)(v6 + 16);
    goto LABEL_19;
  }
  v8 = (char *)a1[7];
  v9 = (v6 - v8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_2394189F8();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (!(v12 >> 60))
    {
      v13 = (char *)operator new(16 * v12);
      v14 = &v13[16 * v9];
      v15 = &v13[16 * v12];
      *(_QWORD *)v14 = v4;
      *((_QWORD *)v14 + 1) = v1;
      v7 = (uint64_t)(v14 + 16);
      if (v6 == v8)
        goto LABEL_17;
      goto LABEL_15;
    }
LABEL_32:
    sub_239418A80();
  }
  v14 = (char *)(16 * v9);
  v15 = 0;
  *(_QWORD *)v14 = v3;
  *((_QWORD *)v14 + 1) = v1;
  v7 = 16 * v9 + 16;
  if (v6 == v8)
    goto LABEL_17;
  do
  {
LABEL_15:
    *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
    v14 -= 16;
    v6 -= 16;
  }
  while (v6 != v8);
  v6 = (char *)a1[7];
LABEL_17:
  a1[7] = v14;
  a1[8] = v7;
  a1[9] = v15;
  if (v6)
    operator delete(v6);
LABEL_19:
  a1[8] = v7;
  v16 = a1[3];
  a1[1] += v16;
  if (!v16)
    goto LABEL_28;
  v17 = a1[4];
  if (v16 == 1)
  {
    v18 = 1;
  }
  else
  {
    v18 = v16 & 1;
    v19 = (unint64_t)&v4[9 * v16];
    v20 = (unint64_t *)(v19 - 72);
    v21 = v16 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v20[9] = v17 & 0xFFFFFFFFFFFFFFFCLL | 2;
      *v20 = v19 & 0xFFFFFFFFFFFFFFFCLL | 2;
      v19 -= 144;
      v17 = (uint64_t)v20;
      v20 -= 18;
      v21 -= 2;
    }
    while (v21);
    v17 = (uint64_t)(v20 + 18);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_27;
  }
  v22 = v17;
  v17 = (uint64_t)&v4[9 * v18 + 9];
  do
  {
    *(_QWORD *)(v17 - 72) = v22 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v17 -= 72;
    v22 = (uint64_t)&v4[9 * v18--];
  }
  while (v18);
LABEL_27:
  a1[4] = v17;
LABEL_28:
  v23 = (unint64_t *)a1[6];
  if (v23)
  {
    *v23 = (unint64_t)v4 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v24 = a1[6] & 0xFFFFFFFFFFFFFFFCLL | 1;
  }
  else
  {
    a1[5] = v4;
    v24 = 3;
  }
  v25 = &v4[9 * v16];
  *v4 = v24;
  v25[9] = 3;
  a1[6] = v25 + 9;
  a1[3] = v16 + 16;
}

_QWORD *sub_2394B6670(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = (_QWORD *)a1[7];
  v4 = (_QWORD *)a1[8];
  v3 = a1 + 7;
  if (v2 != v4)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[1];
      if (v6 != 2)
      {
        v7 = v5 + 6;
        v8 = 48 * v6 - 96;
        do
        {
          if ((*(_BYTE *)v7 & 3) == 0)
            *v7 = 2;
          v7 += 6;
          v8 -= 48;
        }
        while (v8);
      }
      operator delete(v5);
      v2 += 2;
    }
    while (v2 != v4);
    v2 = (_QWORD *)*v3;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 14;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v9 = a1[10];
  if (v9)
  {
    MEMORY[0x23B83E31C](v9, 0xC400A2AC0F1);
    v10 = (_QWORD *)*v3;
    if (*v3)
    {
      a1[8] = v10;
      operator delete(v10);
    }
  }
  return a1;
}

uint64_t sub_2394B6764(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(void **)(a1 + 120);
    if (v2)
    {
      *(_QWORD *)(a1 + 128) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 96);
      v5 = *(void **)(a1 + 88);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(a1 + 96);
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 96) = v3;
      operator delete(v5);
    }
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = *(void **)(a1 + 56);
    if (v9)
    {
      *(_QWORD *)(a1 + 64) = v9;
      operator delete(v9);
    }
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v10 = *(void **)(a1 + 24);
    if (v10)
    {
      *(_QWORD *)(a1 + 32) = v10;
      operator delete(v10);
    }
  }
  v11 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v11;
    operator delete(v11);
  }
  return a1;
}

char **sub_2394B6838(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        v5 = a1[1];
        do
        {
          v7 = (void *)*((_QWORD *)v5 - 3);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *((_QWORD *)v3 - 2) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_2394B68B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 408);
  if (v3)
  {
    *(_QWORD *)(a1 + 416) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 384);
  if (v4)
  {
    *(_QWORD *)(a1 + 392) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 360);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 336);
  if (v6)
  {
    *(_QWORD *)(a1 + 344) = v6;
    operator delete(v6);
  }
  sub_2394B6670((_QWORD *)(a1 + 224));
  sub_2394B5A64((_QWORD *)(a1 + 136));
  v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 104) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 32) = v10;
    operator delete(v10);
  }
  v11 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_2394B6980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  sub_2394B6ACC((uint64_t *)a1);
  v3 = *(_QWORD *)(a1 + 272);
  v2 = *(_QWORD *)(a1 + 280);
  if (v2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 280);
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  *(_QWORD *)(a1 + 280) = v3;
  sub_2394B6C84(a1 + 272);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  v7 = *(_QWORD *)(a1 + 272);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 280);
    v9 = *(void **)(a1 + 272);
    if (v8 != v7)
    {
      v10 = *(_QWORD *)(a1 + 280);
      do
      {
        v12 = *(void **)(v10 - 24);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v8 - 16) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = *(void **)(a1 + 272);
    }
    *(_QWORD *)(a1 + 280) = v7;
    operator delete(v9);
  }
  v13 = *(_QWORD *)(a1 + 240);
  if (v13)
    MEMORY[0x23B83E2F8](v13, 0x20C8093837F09);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_239EC6860;
  v14 = *(_QWORD *)(a1 + 208);
  if (v14)
    MEMORY[0x23B83E2F8](v14, 0x20C8093837F09);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v15 = *(_QWORD **)(a1 + 200);
  if (v15 == (_QWORD *)(a1 + 176))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 176);
    goto LABEL_22;
  }
  if (v15)
  {
    v16 = 5;
LABEL_22:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  return a1;
}

uint64_t sub_2394B6ACC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = *a1;
  if (v2)
    MEMORY[0x23B83E2F8](v2, 0x1000C808E5DAE1CLL);
  v3 = a1[3];
  if (v3)
    MEMORY[0x23B83E2F8](v3, 0x1000C80C46099A0);
  v4 = a1[6];
  if (v4)
    MEMORY[0x23B83E2F8](v4, 0x20C8093837F09);
  v5 = a1[20];
  if (v5)
    MEMORY[0x23B83E2F8](v5, 0x1000C80451B5BE8);
  a1[6] = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  a1[20] = 0;
  a1[21] = 0;
  v6 = a1[26];
  if (v6)
    MEMORY[0x23B83E2F8](v6, 0x20C8093837F09);
  a1[26] = 0;
  a1[28] = 0;
  a1[29] = 0;
  v7 = a1[30];
  if (v7)
    MEMORY[0x23B83E2F8](v7, 0x20C8093837F09);
  a1[30] = 0;
  *((_OWORD *)a1 + 16) = xmmword_239EC6860;
  v9 = a1[34];
  v8 = a1[35];
  if (v8 != v9)
  {
    v10 = a1[35];
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v8 - 16) = v11;
        operator delete(v11);
      }
      v8 = v10;
    }
    while (v10 != v9);
  }
  a1[35] = v9;
  sub_2394B6C84((uint64_t)(a1 + 34));
  a1[39] = 0;
  a1[40] = 1;
  a1[37] = 0;
  a1[38] = 0;
  v13 = a1[17];
  if (v13)
  {
    MEMORY[0x23B83E2F8](v13, 0x20C8093837F09);
    a1[17] = 0;
  }
  v14 = a1[11];
  if (v14)
  {
    MEMORY[0x23B83E2F8](v14, 0x20C8093837F09);
    a1[11] = 0;
  }
  result = a1[14];
  if (result)
  {
    result = MEMORY[0x23B83E2F8](result, 0x20C8093837F09);
    a1[14] = 0;
  }
  a1[10] = 0;
  *((_DWORD *)a1 + 18) = 0;
  *((_DWORD *)a1 + 14) = 0;
  return result;
}

void sub_2394B6C84(uint64_t a1)
{
  char *v1;
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;

  v1 = *(char **)a1;
  v2 = *(int64x2_t *)(a1 + 8);
  v3 = vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)a1));
  v4 = vshrq_n_s64(v3, 3uLL);
  v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5)
    return;
  v7 = *(char **)(a1 + 8);
  if ((char *)v2.i64[0] == v1)
  {
    *(_QWORD *)a1 = 24 * v5;
    *(_QWORD *)(a1 + 8) = 24 * v5;
    *(_QWORD *)(a1 + 16) = 24 * v5;
    if (!v1)
      return;
    goto LABEL_15;
  }
  if (v5 >= 0xAAAAAAAAAAAAAABLL)
    sub_239418A80();
  v8 = (char *)operator new(v3.u64[0]) + 24 * v5;
  v9 = v8;
  do
  {
    v10 = *(_OWORD *)(v7 - 24);
    v7 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
  }
  while (v7 != v1);
  v11 = *(_QWORD *)a1;
  v1 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  if (v1 != (char *)v11)
  {
    v12 = v1;
    do
    {
      v14 = (void *)*((_QWORD *)v12 - 3);
      v12 -= 24;
      v13 = v14;
      if (v14)
      {
        *((_QWORD *)v1 - 2) = v13;
        operator delete(v13);
      }
      v1 = v12;
    }
    while (v12 != (char *)v11);
    v1 = (char *)v11;
  }
  if (v1)
LABEL_15:
    operator delete(v1);
}

uint64_t sub_2394B6DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
      sub_2394189F8();
    v7 = (char *)operator new(v6);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[4 * (v6 >> 2)];
    v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
    memcpy(v7, v5, v8);
    *(_QWORD *)(a1 + 8) = &v7[v8];
  }
  sub_2394B6F74(a1 + 24, a2 + 24);
  sub_2394B7078(a1 + 56, a2 + 56);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    sub_2394B7184((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
    *(_BYTE *)(a1 + 112) = 1;
  }
  sub_2394B73C4(a1 + 120, a2 + 120);
  return a1;
}

void sub_2394B6EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  _Unwind_Exception *v12;
  void *v13;
  void *v14;
  void *v15;

  v12 = exception_object;
  if (*(_BYTE *)(v9 + 112))
  {
    sub_239EBFE48((void **)(v9 + 88), v9, (uint64_t)exception_object, a2, (uint64_t)&a9);
    v12 = a9;
  }
  if (*(_BYTE *)(v9 + 80))
  {
    v13 = *v11;
    if (*v11)
    {
      *(_QWORD *)(v9 + 64) = v13;
      operator delete(v13);
    }
  }
  if (*(_BYTE *)(v9 + 48))
  {
    v14 = *v10;
    if (*v10)
    {
      *(_QWORD *)(v9 + 32) = v14;
      operator delete(v14);
    }
  }
  v15 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(v12);
}

uint64_t sub_2394B6F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  size_t v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * v5 >= 0x5555555555555556)
        sub_2394189F8();
      v6 = (char *)operator new(v5);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[v5];
      v7 = 3 * ((v5 - 3) / 3) + 3;
      memcpy(v6, v4, v7);
      *(_QWORD *)(a1 + 8) = &v6[v7];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2394B7044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394B7078(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  size_t v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v5 >> 2) >= 0x1555555555555556)
        sub_2394189F8();
      v6 = (char *)operator new(v5);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v6[4 * (v5 >> 2)];
      v7 = 12 * ((v5 - 12) / 0xCuLL) + 12;
      memcpy(v6, v4, v7);
      *(_QWORD *)(a1 + 8) = &v6[v7];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2394B7150(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394B7184(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_2394B7258(v3, v4, v5, v8);
  }
  return a1;
}

void sub_2394B722C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    sub_239EBFED4((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394B7258(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_2394189F8();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2394B7320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394B7358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394B7334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_2394B7358((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2394B7358(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t sub_2394B73C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if (v5 < 0)
        sub_2394189F8();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[4 * (v5 >> 2)];
      *(_QWORD *)(a1 + 16) = v7;
      memcpy(v6, v4, v5);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2394B7450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2394B7488()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394B749C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADCBC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2394B74DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADCBC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394B7504(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  void *__p;
  char v6;

  if (sub_2396FD7B0(a1[3]))
  {
    v2 = (_BYTE *)a1[2];
    if (v2[8])
      sub_2394202DC((_QWORD *)(*(_QWORD *)v2 + 120), 2);
  }
  v3 = (_BYTE *)a1[2];
  if (v3[8])
    sub_2396F20BC((int **)(*(_QWORD *)v3 + 160));
  v4 = a1[1];
  v6 = 0;
  LOBYTE(__p) = 0;
  sub_2396FCC6C(v4, (uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
}

void sub_2394B75D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394B75F4(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;

  v3 = *a1;
  v2 = a1[1];
  v4 = *((_DWORD *)a1 + 6);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 24);
  if (*a1 == *(_QWORD *)a2 && v2 == v5 && v4 == v6)
    return 0;
  if (*(int *)v3 <= 1)
  {
    while (1)
      ;
  }
  if (*(_DWORD *)v3 == 3)
  {
    if (*a1 != *(_QWORD *)a2)
    {
      while (1)
      {
        v13 = v4 - 3;
        if (v4 != 3)
        {
          do
            ++v13;
          while (v13);
        }
        do
        {
          while (1)
          {
            v15 = *(_QWORD *)(v2 + 72);
            v2 += 72;
            v14 = v15;
            v16 = v15 & 3;
            if (v16 != 1)
              break;
            v2 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v16)
            v17 = v16 == 3;
          else
            v17 = 1;
        }
        while (!v17);
        v4 = 0;
      }
    }
    result = 0;
    v8 = *(_QWORD *)(v3 + 56);
    while (1)
    {
LABEL_10:
      ++result;
      while (1)
      {
        if (v4 != 3)
        {
          ++v4;
          if (v2 == v8)
            break;
          goto LABEL_22;
        }
        do
        {
          while (1)
          {
            v10 = *(_QWORD *)(v2 + 72);
            v2 += 72;
            v9 = v10;
            v11 = v10 & 3;
            if (v11 != 1)
              break;
            v2 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v11)
            v12 = v11 == 3;
          else
            v12 = 1;
        }
        while (!v12);
        v4 = 0;
        if (v2 == v8)
          break;
LABEL_22:
        if (*(_QWORD *)(v2 + 8 * v4) >= v2)
        {
          if (v2 == v5)
            goto LABEL_26;
          goto LABEL_10;
        }
      }
      v2 = v8;
      if (v8 == v5)
      {
LABEL_26:
        if (v4 == v6)
          return result;
      }
    }
  }
  if (v4 != v6 || *a1 != *(_QWORD *)a2)
  {
    while (1)
    {
      do
      {
        v22 = *(_QWORD *)(v2 + 72);
        v2 += 72;
        v23 = v22 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v22 & 3) != 1);
      v2 = v23;
    }
  }
  result = 0;
  do
  {
    ++result;
    do
    {
      while (1)
      {
        v19 = *(_QWORD *)(v2 + 72);
        v2 += 72;
        v18 = v19;
        v20 = v19 & 3;
        if (v20 != 1)
          break;
        v2 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (v20)
        v21 = v20 == 3;
      else
        v21 = 1;
    }
    while (!v21);
  }
  while (v2 != v5);
  return result;
}

uint64_t sub_2394B775C(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  v2 = (unint64_t *)(result + 8);
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (*(_DWORD *)a2 == 3)
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (v9)
    {
      v11 = *(_QWORD *)(v9 + 72);
      v10 = (_QWORD *)(v9 + 72);
      if ((v11 & 3) == 2)
      {
        do
        {
          while (1)
          {
            v13 = v10[9];
            v10 += 9;
            v12 = v13;
            v14 = v13 & 3;
            if (v14 != 1)
              break;
            v10 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
          }
          if (v14)
            v15 = v14 == 3;
          else
            v15 = 1;
        }
        while (!v15);
      }
      *v2 = (unint64_t)v10;
      if (*v10 < (unint64_t)v10)
      {
        LODWORD(v16) = 0;
        do
        {
          while ((_DWORD)v16 != 3)
          {
            v16 = (int)v16 + 1;
            *(_DWORD *)(result + 24) = v16;
            if (v10[v16] >= (unint64_t)v10)
              return result;
          }
          *(_DWORD *)(result + 24) = 0;
          do
          {
            while (1)
            {
              v17 = v10;
              v10 += 9;
              *v2 = (unint64_t)v10;
              v18 = v17[9];
              if ((v18 & 3) != 1)
                break;
              v10 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
              *v2 = v18 & 0xFFFFFFFFFFFFFFFCLL;
            }
          }
          while ((v18 & 3) != 0 && (v18 & 3) != 3);
          LODWORD(v16) = 0;
        }
        while (v18 < (unint64_t)v10);
      }
    }
  }
  else if (*(_DWORD *)a2 == 2)
  {
    v3 = *(_QWORD *)(a2 + 48);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 72);
      v3 += 72;
      if ((v4 & 3) == 2)
      {
        do
        {
          while (1)
          {
            v6 = *(_QWORD *)(v3 + 72);
            v3 += 72;
            v5 = v6;
            v7 = v6 & 3;
            if (v7 != 1)
              break;
            v3 = v5 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v7)
            v8 = v7 == 3;
          else
            v8 = 1;
        }
        while (!v8);
      }
    }
    *(_QWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 24) = 3;
  }
  else
  {
    *v2 = *(_QWORD *)(a2 + 56);
  }
  return result;
}

uint64_t sub_2394B7898(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  __int128 *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _OWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t *v75;
  void *__p;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  void *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 120);
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v72 = v3;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v90 = *v4;
      *(_QWORD *)&v91 = *((_QWORD *)v4 + 2);
      v10 = *((_DWORD *)v4 + 6);
      if (v7 < v81)
      {
        v11 = *v4;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
        *(_OWORD *)v7 = v11;
        v7 += 24;
        v6 = v77;
        v5 = v78;
        goto LABEL_22;
      }
      v12 = v79;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v79) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_2394189F8();
      if (0x5555555555555556 * ((v81 - v79) >> 3) > v14)
        v14 = 0x5555555555555556 * ((v81 - v79) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v81 - v79) >> 3) >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_97;
        v16 = (char *)operator new(24 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * ((v7 - v79) >> 3)];
      *(_OWORD *)v17 = v90;
      *((_QWORD *)v17 + 2) = v91;
      if (v7 == v12)
      {
        v12 = v7;
        v7 = v17 + 24;
        v79 = &v16[24 * v13];
        v81 = &v16[24 * v15];
        if (v12)
          goto LABEL_21;
      }
      else
      {
        v18 = &v16[24 * v13];
        do
        {
          v19 = *(_OWORD *)(v7 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v7 - 1);
          *(_OWORD *)(v18 - 24) = v19;
          v18 -= 24;
          v7 -= 24;
        }
        while (v7 != v12);
        v7 = v17 + 24;
        v79 = v18;
        v81 = &v16[24 * v15];
        if (v12)
LABEL_21:
          operator delete(v12);
      }
LABEL_22:
      v80 = v7;
      if (v6 < v5)
      {
        *(_DWORD *)v6 = v10;
        v6 += 4;
        v77 = v6;
        v21 = v83;
        v20 = v84;
        if (v83 >= v84)
          goto LABEL_42;
        goto LABEL_3;
      }
      v22 = (char *)__p;
      v23 = v6 - (_BYTE *)__p;
      v24 = (v6 - (_BYTE *)__p) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        sub_2394189F8();
      if ((v5 - (_BYTE *)__p) >> 1 > v25)
        v25 = (v5 - (_BYTE *)__p) >> 1;
      if ((unint64_t)(v5 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 62)
LABEL_97:
          sub_239418A80();
        v27 = operator new(4 * v26);
        v28 = &v27[4 * v24];
        *v28 = v10;
        v29 = (uint64_t)(v28 + 1);
        if (v6 == v22)
          goto LABEL_39;
      }
      else
      {
        v27 = 0;
        v28 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v10;
        v29 = 4 * v24 + 4;
        if (v6 == v22)
          goto LABEL_39;
      }
      v30 = v6 - 4 - v22;
      if (v30 < 0xBC)
      {
        v31 = v6;
        goto LABEL_38;
      }
      if (&v27[v23 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[v23 - 4])
      {
        v31 = v6;
        do
        {
LABEL_38:
          v32 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *--v28 = v32;
        }
        while (v31 != v22);
        goto LABEL_39;
      }
      if (&v6[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
      {
        v31 = v6;
        goto LABEL_38;
      }
      if ((unint64_t)(v6 - v27 - v23) < 0x20)
      {
        v31 = v6;
        goto LABEL_38;
      }
      v54 = (v30 >> 2) + 1;
      v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
      v31 = &v6[-v55];
      v28 = (_DWORD *)((char *)v28 - v55);
      v56 = &v27[4 * v24 - 16];
      v57 = v6 - 16;
      v58 = v54 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v59 = *(_OWORD *)v57;
        *(v56 - 1) = *((_OWORD *)v57 - 1);
        *v56 = v59;
        v56 -= 2;
        v57 -= 32;
        v58 -= 8;
      }
      while (v58);
      if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_38;
LABEL_39:
      v5 = &v27[4 * v26];
      __p = v28;
      v78 = v5;
      if (v22)
        operator delete(v22);
      v6 = (char *)v29;
      v77 = (char *)v29;
      v21 = v83;
      v20 = v84;
      if (v83 >= v84)
      {
LABEL_42:
        v33 = v6;
        v34 = v5;
        v35 = (uint64_t *)v82;
        v36 = (char *)v21 - (_BYTE *)v82;
        v37 = ((char *)v21 - (_BYTE *)v82) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          sub_2394189F8();
        v39 = (char *)v20 - (_BYTE *)v82;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 61)
            sub_239418A80();
          v41 = v40;
          v42 = operator new(8 * v40);
          v40 = v41;
          v43 = (uint64_t *)&v42[8 * v37];
          *v43 = v8;
          v9 = v43 + 1;
          if (v21 != v35)
          {
LABEL_51:
            v44 = (char *)(v21 - 1) - (char *)v35;
            if (v44 < 0x58)
            {
              v5 = v34;
              v6 = v33;
              goto LABEL_65;
            }
            v45 = (char *)v21 - &v42[v36];
            v5 = v34;
            v6 = v33;
            if (v45 < 0x20)
              goto LABEL_104;
            v46 = (v44 >> 3) + 1;
            v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v21[v47 / 0xFFFFFFFFFFFFFFF8];
            v43 = (uint64_t *)((char *)v43 - v47);
            v49 = &v42[8 * v37 - 16];
            v50 = v21 - 2;
            v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *v49 = v52;
              v49 -= 2;
              v50 -= 4;
              v51 -= 4;
            }
            while (v51);
            v21 = v48;
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_104:
              do
              {
LABEL_65:
                v53 = *--v21;
                *--v43 = v53;
              }
              while (v21 != v35);
            }
LABEL_66:
            v82 = v43;
            v84 = (uint64_t *)&v42[8 * v40];
            if (v35)
              operator delete(v35);
            goto LABEL_4;
          }
        }
        else
        {
          v42 = 0;
          v43 = (uint64_t *)(8 * v37);
          *(_QWORD *)(8 * v37) = v8;
          v9 = (uint64_t *)(8 * v37 + 8);
          if (v21 != v35)
            goto LABEL_51;
        }
        v5 = v34;
        v6 = v33;
        goto LABEL_66;
      }
LABEL_3:
      *v21 = v8;
      v9 = v21 + 1;
LABEL_4:
      v83 = v9;
      ++v8;
      v4 += 2;
      if (v4 == a3)
      {
        v60 = (uint64_t *)v82;
        v61 = v79;
        v3 = v72;
        goto LABEL_76;
      }
    }
  }
  v7 = 0;
  v61 = 0;
  v9 = 0;
  v60 = 0;
LABEL_76:
  if (v61 == v7)
    v62 = 0;
  else
    v62 = v61;
  v63 = 78606;
  v89 = 78606;
  if (v60 != v9)
  {
    v63 = (uint64_t)(v60 + 1);
    if (v60 + 1 != v9)
    {
      v64 = 1;
      do
      {
        v65 = sub_2394B8024(&v89, 0, (v64 * 8) >> 3);
        v66 = v60[v64];
        v60[v64] = v60[v65];
        v60[v65] = v66;
        v63 = (uint64_t)&v60[++v64];
      }
      while (&v60[v64] != v9);
    }
  }
  *(_QWORD *)&v90 = v62;
  *((_QWORD *)&v90 + 1) = v63;
  v91 = xmmword_239EC6CC0;
  v92 = 0x3FC0000000000000;
  sub_2394B7FBC((uint64_t)&v90, v60, v9);
  if (v60 != v9)
  {
    v67 = 0;
    do
    {
      if (!v67)
        v67 = *(uint64_t **)(a1 + 200);
      v68 = *v67;
      v69 = (double *)&v61[24 * *v60];
      v87 = 0;
      v86 = 0;
      v89 = v68;
      sub_2394CED50(a1, v69, &v89, 2500, 0, &v90);
      v88 = v90;
      sub_2394CF158(a1, v69, (_DWORD *)&v87 + 1, (int *)&v87, &v86, &v88, 0, &v85);
      *(_QWORD *)&v90 = v85;
      sub_2394BC2DC(a1, v69, SHIDWORD(v87), (uint64_t **)&v90, v87, 0, &v75);
      v67 = v75;
      if (v75)
        *((_DWORD *)v75 + 10) = *((_DWORD *)__p + *v60);
      ++v60;
    }
    while (v60 != v9);
  }
  v70 = *(_QWORD *)(a1 + 120);
  if (__p)
    operator delete(__p);
  if (v61)
    operator delete(v61);
  if (v82)
    operator delete(v82);
  return v70 - v3;
}

void sub_2394B7F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v21;
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v21 = a16;
    if (!a16)
    {
LABEL_3:
      v22 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v21 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v21);
  v22 = a19;
  if (!a19)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394B7FBC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = a3 - a2;
  if (v5 >= *(_QWORD *)(a1 + 24))
  {
    v6 = &a2[(uint64_t)(*(double *)(a1 + 32) * (double)v5)];
    sub_2394B7FBC(a1);
    a2 = v6;
  }
  return sub_2394B8344(a1, a2, a3);
}

uint64_t sub_2394B8024(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  v4 = a3 - a2;
  if (a3 == a2)
    return a2;
  if (v4 == 0x7FFFFFFF)
  {
    v6 = (0x5DEECE66DLL * *a1 + 11) & 0xFFFFFFFFFFFFLL;
    *a1 = v6;
    return a2 + (v6 >> 17);
  }
  else if (v4 >> 31)
  {
    if (v4 == -1)
      v8 = 0x200000000;
    else
      v8 = (v4 + 1) >> 31;
    if (v8)
    {
      while (1)
      {
        v7 = 0;
        v9 = *a1;
        v10 = 1;
        do
        {
          v11 = 0x5DEECE66DLL * v9 + 11;
          v9 = v11 & 0xFFFFFFFFFFFFLL;
          v7 += ((v11 >> 17) & 0x7FFFFFFF) * v10;
          v12 = v10 << 31;
          if (0x7FFFFFFF * v10 == v4 + 1 - v10)
          {
            *a1 = v9;
            return v7;
          }
          v10 <<= 31;
        }
        while (v12 <= v8);
        *a1 = v9;
        v13 = sub_2394B81B4(a1, 0, v4 / v12);
        if (is_mul_ok(v12, v13))
        {
          v14 = __CFADD__(v13 * v12, v7);
          v15 = v13 * v12 + v7;
          if (!v14 && v15 <= v4)
            break;
        }
      }
    }
    else
    {
      do
        v15 = sub_2394B81B4(a1, 0, v4);
      while (v15 > v4);
    }
    return v15 + a2;
  }
  else
  {
    v16 = *a1;
    do
    {
      v17 = 0x5DEECE66DLL * v16 + 11;
      v16 = v17 & 0xFFFFFFFFFFFFLL;
      v18 = ((v17 >> 17) & 0x7FFFFFFF) / (0x80000000 / ((int)v4 + 1));
    }
    while (v18 > v4);
    *a1 = v16;
    return a2 + v18;
  }
}

uint64_t sub_2394B81B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  v4 = a3 - a2;
  if (a3 == a2)
    return a2;
  if (v4 == 0x7FFFFFFF)
  {
    v6 = (0x5DEECE66DLL * *a1 + 11) & 0xFFFFFFFFFFFFLL;
    *a1 = v6;
    return a2 + (v6 >> 17);
  }
  else if (v4 >> 31)
  {
    if (v4 == -1)
      v8 = 0x200000000;
    else
      v8 = (v4 + 1) >> 31;
    if (v8)
    {
      while (1)
      {
        v7 = 0;
        v9 = *a1;
        v10 = 1;
        do
        {
          v11 = 0x5DEECE66DLL * v9 + 11;
          v9 = v11 & 0xFFFFFFFFFFFFLL;
          v7 += ((v11 >> 17) & 0x7FFFFFFF) * v10;
          v12 = v10 << 31;
          if (0x7FFFFFFF * v10 == v4 + 1 - v10)
          {
            *a1 = v9;
            return v7;
          }
          v10 <<= 31;
        }
        while (v12 <= v8);
        *a1 = v9;
        v13 = sub_2394B81B4(a1, 0, v4 / v12);
        if (is_mul_ok(v12, v13))
        {
          v14 = __CFADD__(v13 * v12, v7);
          v15 = v13 * v12 + v7;
          if (!v14 && v15 <= v4)
            break;
        }
      }
    }
    else
    {
      do
        v15 = sub_2394B81B4(a1, 0, v4);
      while (v15 > v4);
    }
    return v15 + a2;
  }
  else
  {
    v16 = *a1;
    do
    {
      v17 = 0x5DEECE66DLL * v16 + 11;
      v16 = v17 & 0xFFFFFFFFFFFFLL;
      v18 = ((v17 >> 17) & 0x7FFFFFFF) / (0x80000000 / ((int)v4 + 1));
    }
    while (v18 > v4);
    *a1 = v16;
    return a2 + v18;
  }
}

uint64_t sub_2394B8344(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394B94CC(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394B997C(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394BA2E4(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394B9E30(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394BA7B4(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394B9E30(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394BA2E4(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394B8630((uint64_t)v7, a2, v8);
  sub_2394B891C((uint64_t)v7, v8, v10);
  sub_2394B891C((uint64_t)v7, v10, v11);
  sub_2394B8C08((uint64_t)v7, v11, v9);
  sub_2394B8C08((uint64_t)v7, v9, v18);
  sub_2394B8EF4((uint64_t)v7, v18, v16);
  sub_2394B8EF4((uint64_t)v7, v16, v20);
  return sub_2394B91E0((uint64_t)v7, v20, a3);
}

uint64_t sub_2394B8630(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394B9E30(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394B94CC(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394BA7B4(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394B997C(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394BB548(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394B997C(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394BA7B4(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394B891C((uint64_t)v7, a2, v8);
  sub_2394B8344(v7, v8, v10);
  sub_2394B8344(v7, v10, v11);
  sub_2394BAC84((uint64_t)v7, v11, v9);
  sub_2394BAC84((uint64_t)v7, v9, v18);
  sub_2394BAF70((uint64_t)v7, v18, v16);
  sub_2394BAF70((uint64_t)v7, v16, v20);
  return sub_2394BB25C((uint64_t)v7, v20, a3);
}

uint64_t sub_2394B891C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394B997C(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394B9E30(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394BB548(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394B94CC(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394BA2E4(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394B94CC(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394BB548(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394B8344(v7, a2, v8);
  sub_2394B8630(v7, v8, v10);
  sub_2394B8630(v7, v10, v11);
  sub_2394BBD04((uint64_t)v7, v11, v9);
  sub_2394BBD04((uint64_t)v7, v9, v18);
  sub_2394BBFF0((uint64_t)v7, v18, v16);
  sub_2394BBFF0((uint64_t)v7, v16, v20);
  return sub_2394BBA18((uint64_t)v7, v20, a3);
}

uint64_t sub_2394B8C08(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394B94CC(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394BA7B4(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394B9E30(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394BA2E4(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394B997C(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394BA2E4(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394B9E30(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394BBFF0((uint64_t)v7, a2, v8);
  sub_2394BB25C(v7, v8, v10);
  sub_2394BB25C(v7, v10, v11);
  sub_2394B8344(v7, v11, v9);
  sub_2394B8344(v7, v9, v18);
  sub_2394BBD04((uint64_t)v7, v18, v16);
  sub_2394BBD04((uint64_t)v7, v16, v20);
  return sub_2394BAC84((uint64_t)v7, v20, a3);
}

uint64_t sub_2394B8EF4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394BA7B4(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394B9E30(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394B94CC(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394BB548(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394BA2E4(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394BB548(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394B94CC(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394BBA18(v7, a2, v8);
  sub_2394BAC84((uint64_t)v7, v8, v10);
  sub_2394BAC84((uint64_t)v7, v10, v11);
  sub_2394BB25C((uint64_t)v7, v11, v9);
  sub_2394BB25C((uint64_t)v7, v9, v18);
  sub_2394B91E0((uint64_t)v7, v18, v16);
  sub_2394B91E0((uint64_t)v7, v16, v20);
  return sub_2394B8344(v7, v20, a3);
}

uint64_t sub_2394B91E0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394BA2E4(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394BB548(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394BA7B4(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394B997C(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394B94CC(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394B997C(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394BA7B4(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394BBD04((uint64_t)v7, a2, v8);
  sub_2394BAF70((uint64_t)v7, v8, v10);
  sub_2394BAF70((uint64_t)v7, v10, v11);
  sub_2394BBFF0((uint64_t)v7, v11, v9);
  sub_2394BBFF0((uint64_t)v7, v9, v18);
  sub_2394B8344(v7, v18, v16);
  sub_2394B8344(v7, v16, v20);
  return sub_2394B8EF4(v7, v20, a3);
}

uint64_t *sub_2394B94CC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t *v30;
  double v31;
  uint64_t v32;
  uint64_t *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (a3 == a2)
    return result;
  v4 = *a4;
  while (1)
  {
    v5 = a3 - result;
    if (v5 < 2)
      return result;
    if (v5 == 3)
    {
      v42 = *result;
      v43 = result[1];
      v44 = *a4;
      v45 = *(double *)(*a4 + 24 * v43);
      v46 = *(double *)(*a4 + 24 * *result);
      v47 = *(a3 - 1);
      v48 = *(double *)(*a4 + 24 * v47);
      if (v45 >= v46)
      {
        if (v48 < v45)
        {
          result[1] = v47;
          *(a3 - 1) = v43;
          v60 = *result;
          v59 = result[1];
          if (*(double *)(v44 + 24 * v59) < *(double *)(v44 + 24 * *result))
          {
            *result = v59;
            result[1] = v60;
          }
        }
      }
      else if (v48 >= v45)
      {
        *result = v43;
        result[1] = v42;
        v61 = *(a3 - 1);
        if (*(double *)(v44 + 24 * v61) < v46)
        {
          result[1] = v61;
          *(a3 - 1) = v42;
        }
      }
      else
      {
        *result = v47;
        *(a3 - 1) = v42;
      }
      return result;
    }
    if (v5 == 2)
    {
      v49 = *(a3 - 1);
      v50 = *result;
      if (*(double *)(*a4 + 24 * v49) < *(double *)(*a4 + 24 * *result))
      {
        *result = v49;
        *(a3 - 1) = v50;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      if (a3 - 1 == result)
        return result;
      v51 = *a4;
      while (2)
      {
        v52 = a3;
        if (result == a3)
        {
LABEL_81:
          if (v52 != result)
          {
            v58 = *result;
            *result = *v52;
            *v52 = v58;
          }
        }
        else
        {
          v53 = result + 1;
          if (result + 1 != a3)
          {
            v54 = *result;
            v52 = result;
            v55 = result + 1;
            do
            {
              v57 = *v55++;
              v56 = v57;
              if (*(double *)(v51 + 24 * v57) < *(double *)(v51 + 24 * v54))
              {
                v54 = v56;
                v52 = v53;
              }
              v53 = v55;
            }
            while (v55 != a3);
            goto LABEL_81;
          }
        }
        if (++result == a3 - 1)
          return result;
        continue;
      }
    }
    v6 = &result[v5 >> 1];
    v7 = a3 - 1;
    v8 = *(a3 - 1);
    v9 = *v6;
    v10 = *result;
    v11 = *(double *)(v4 + 24 * *v6);
    v12 = *(double *)(v4 + 24 * *result);
    v13 = *(double *)(v4 + 24 * v8);
    if (v11 < v12)
    {
      if (v13 < v11)
      {
        *result = v8;
        *v7 = v10;
LABEL_16:
        v15 = 1;
        goto LABEL_18;
      }
      *result = v9;
      *v6 = v10;
      if (*(double *)(v4 + 24 * *v7) >= v12)
        goto LABEL_16;
      *v6 = *v7;
      *v7 = v10;
LABEL_15:
      v15 = 2;
      goto LABEL_18;
    }
    if (v13 < v11)
    {
      *v6 = v8;
      *v7 = v9;
      v14 = *result;
      if (*(double *)(v4 + 24 * *v6) >= *(double *)(v4 + 24 * *result))
        goto LABEL_16;
      *result = *v6;
      *v6 = v14;
      goto LABEL_15;
    }
    v15 = 0;
LABEL_18:
    v16 = *result;
    if (*(double *)(v4 + 24 * *result) < *(double *)(v4 + 24 * *v6))
      break;
    v26 = *a4;
    v17 = a3 - 1;
    while (--v17 != result)
    {
      if (*(double *)(v26 + 24 * *v17) < *(double *)(*a4 + 24 * *v6))
      {
        *result = *v17;
        *v17 = v16;
        ++v15;
        v18 = result + 1;
        if (result + 1 < v17)
          goto LABEL_20;
        goto LABEL_33;
      }
    }
    v30 = result + 1;
    v31 = *(double *)(v26 + 24 * v16);
    if (v31 >= *(double *)(v26 + 24 * *v7))
    {
      if (v30 == v7)
        return result;
      while (1)
      {
        v32 = *v30;
        if (v31 < *(double *)(v26 + 24 * *v30))
          break;
        if (++v30 == v7)
          return result;
      }
      *v30++ = *v7;
      *v7 = v32;
    }
    if (v30 == v7)
      return result;
    while (1)
    {
      v36 = *(double *)(v26 + 24 * *result);
      do
      {
        v38 = *v30++;
        v37 = v38;
      }
      while (v36 >= *(double *)(v26 + 24 * v38));
      v39 = v30 - 1;
      do
      {
        v41 = *--v7;
        v40 = v41;
      }
      while (v36 < *(double *)(v26 + 24 * v41));
      if (v39 >= v7)
        break;
      *v39 = v40;
      *v7 = v37;
    }
    result = v30 - 1;
    if (v39 > a2)
      return result;
LABEL_65:
    if (a3 == a2)
      return result;
  }
  v17 = a3 - 1;
  v18 = result + 1;
  if (result + 1 >= a3 - 1)
  {
LABEL_33:
    v23 = v18;
  }
  else
  {
LABEL_20:
    v19 = v18;
    while (1)
    {
      v20 = *(double *)(v4 + 24 * *v6);
      do
      {
        v22 = *v19++;
        v21 = v22;
      }
      while (*(double *)(v4 + 24 * v22) < v20);
      v23 = v19 - 1;
      do
      {
        v25 = *--v17;
        v24 = v25;
      }
      while (*(double *)(v4 + 24 * v25) >= v20);
      if (v23 >= v17)
        break;
      *v23 = v24;
      *v17 = v21;
      ++v15;
      if (v23 == v6)
        v6 = v17;
    }
  }
  if (v23 != v6)
  {
    v27 = *v23;
    if (*(double *)(v4 + 24 * *v6) < *(double *)(v4 + 24 * *v23))
    {
      *v23 = *v6;
      *v6 = v27;
      ++v15;
    }
  }
  if (v23 == a2)
    return result;
  if (v15)
  {
LABEL_39:
    if (v23 <= a2)
      result = v23 + 1;
    else
      a3 = v23;
    goto LABEL_65;
  }
  if (v23 <= a2)
  {
    v33 = v23 + 1;
    while (v33 != a3)
    {
      v34 = *(double *)(v4 + 24 * *v33);
      v35 = *(double *)(v4 + 24 * *(v33++ - 1));
      if (v34 < v35)
        goto LABEL_39;
    }
  }
  else
  {
    while (v18 != v23)
    {
      v28 = *(double *)(v4 + 24 * *v18);
      v29 = *(double *)(v4 + 24 * *(v18++ - 1));
      if (v28 < v29)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t *sub_2394B997C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t *v30;
  double v31;
  uint64_t v32;
  uint64_t *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (a3 == a2)
    return result;
  v4 = *a4;
  while (1)
  {
    v5 = a3 - result;
    if (v5 < 2)
      return result;
    if (v5 == 3)
    {
      v42 = *result;
      v43 = result[1];
      v44 = *a4;
      v45 = *(double *)(*a4 + 24 * v43 + 8);
      v46 = *(double *)(*a4 + 24 * *result + 8);
      v47 = *(a3 - 1);
      v48 = *(double *)(*a4 + 24 * v47 + 8);
      if (v45 >= v46)
      {
        if (v48 < v45)
        {
          result[1] = v47;
          *(a3 - 1) = v43;
          v60 = *result;
          v59 = result[1];
          if (*(double *)(v44 + 24 * v59 + 8) < *(double *)(v44 + 24 * *result + 8))
          {
            *result = v59;
            result[1] = v60;
          }
        }
      }
      else if (v48 >= v45)
      {
        *result = v43;
        result[1] = v42;
        v61 = *(a3 - 1);
        if (*(double *)(v44 + 24 * v61 + 8) < v46)
        {
          result[1] = v61;
          *(a3 - 1) = v42;
        }
      }
      else
      {
        *result = v47;
        *(a3 - 1) = v42;
      }
      return result;
    }
    if (v5 == 2)
    {
      v49 = *(a3 - 1);
      v50 = *result;
      if (*(double *)(*a4 + 24 * v49 + 8) < *(double *)(*a4 + 24 * *result + 8))
      {
        *result = v49;
        *(a3 - 1) = v50;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      if (a3 - 1 == result)
        return result;
      v51 = *a4;
      while (2)
      {
        v52 = a3;
        if (result == a3)
        {
LABEL_81:
          if (v52 != result)
          {
            v58 = *result;
            *result = *v52;
            *v52 = v58;
          }
        }
        else
        {
          v53 = result + 1;
          if (result + 1 != a3)
          {
            v54 = *result;
            v52 = result;
            v55 = result + 1;
            do
            {
              v57 = *v55++;
              v56 = v57;
              if (*(double *)(v51 + 24 * v57 + 8) < *(double *)(v51 + 24 * v54 + 8))
              {
                v54 = v56;
                v52 = v53;
              }
              v53 = v55;
            }
            while (v55 != a3);
            goto LABEL_81;
          }
        }
        if (++result == a3 - 1)
          return result;
        continue;
      }
    }
    v6 = &result[v5 >> 1];
    v7 = a3 - 1;
    v8 = *(a3 - 1);
    v9 = *v6;
    v10 = *result;
    v11 = *(double *)(v4 + 24 * *v6 + 8);
    v12 = *(double *)(v4 + 24 * *result + 8);
    v13 = *(double *)(v4 + 24 * v8 + 8);
    if (v11 < v12)
    {
      if (v13 < v11)
      {
        *result = v8;
        *v7 = v10;
LABEL_16:
        v15 = 1;
        goto LABEL_18;
      }
      *result = v9;
      *v6 = v10;
      if (*(double *)(v4 + 24 * *v7 + 8) >= v12)
        goto LABEL_16;
      *v6 = *v7;
      *v7 = v10;
LABEL_15:
      v15 = 2;
      goto LABEL_18;
    }
    if (v13 < v11)
    {
      *v6 = v8;
      *v7 = v9;
      v14 = *result;
      if (*(double *)(v4 + 24 * *v6 + 8) >= *(double *)(v4 + 24 * *result + 8))
        goto LABEL_16;
      *result = *v6;
      *v6 = v14;
      goto LABEL_15;
    }
    v15 = 0;
LABEL_18:
    v16 = *result;
    if (*(double *)(v4 + 24 * *result + 8) < *(double *)(v4 + 24 * *v6 + 8))
      break;
    v26 = *a4;
    v17 = a3 - 1;
    while (--v17 != result)
    {
      if (*(double *)(v26 + 24 * *v17 + 8) < *(double *)(*a4 + 24 * *v6 + 8))
      {
        *result = *v17;
        *v17 = v16;
        ++v15;
        v18 = result + 1;
        if (result + 1 < v17)
          goto LABEL_20;
        goto LABEL_33;
      }
    }
    v30 = result + 1;
    v31 = *(double *)(v26 + 24 * v16 + 8);
    if (v31 >= *(double *)(v26 + 24 * *v7 + 8))
    {
      if (v30 == v7)
        return result;
      while (1)
      {
        v32 = *v30;
        if (v31 < *(double *)(v26 + 24 * *v30 + 8))
          break;
        if (++v30 == v7)
          return result;
      }
      *v30++ = *v7;
      *v7 = v32;
    }
    if (v30 == v7)
      return result;
    while (1)
    {
      v36 = *(double *)(v26 + 24 * *result + 8);
      do
      {
        v38 = *v30++;
        v37 = v38;
      }
      while (v36 >= *(double *)(v26 + 24 * v38 + 8));
      v39 = v30 - 1;
      do
      {
        v41 = *--v7;
        v40 = v41;
      }
      while (v36 < *(double *)(v26 + 24 * v41 + 8));
      if (v39 >= v7)
        break;
      *v39 = v40;
      *v7 = v37;
    }
    result = v30 - 1;
    if (v39 > a2)
      return result;
LABEL_65:
    if (a3 == a2)
      return result;
  }
  v17 = a3 - 1;
  v18 = result + 1;
  if (result + 1 >= a3 - 1)
  {
LABEL_33:
    v23 = v18;
  }
  else
  {
LABEL_20:
    v19 = v18;
    while (1)
    {
      v20 = *(double *)(v4 + 24 * *v6 + 8);
      do
      {
        v22 = *v19++;
        v21 = v22;
      }
      while (*(double *)(v4 + 24 * v22 + 8) < v20);
      v23 = v19 - 1;
      do
      {
        v25 = *--v17;
        v24 = v25;
      }
      while (*(double *)(v4 + 24 * v25 + 8) >= v20);
      if (v23 >= v17)
        break;
      *v23 = v24;
      *v17 = v21;
      ++v15;
      if (v23 == v6)
        v6 = v17;
    }
  }
  if (v23 != v6)
  {
    v27 = *v23;
    if (*(double *)(v4 + 24 * *v6 + 8) < *(double *)(v4 + 24 * *v23 + 8))
    {
      *v23 = *v6;
      *v6 = v27;
      ++v15;
    }
  }
  if (v23 == a2)
    return result;
  if (v15)
  {
LABEL_39:
    if (v23 <= a2)
      result = v23 + 1;
    else
      a3 = v23;
    goto LABEL_65;
  }
  if (v23 <= a2)
  {
    v33 = v23 + 1;
    while (v33 != a3)
    {
      v34 = *(double *)(v4 + 24 * *v33 + 8);
      v35 = *(double *)(v4 + 24 * *(v33++ - 1) + 8);
      if (v34 < v35)
        goto LABEL_39;
    }
  }
  else
  {
    while (v18 != v23)
    {
      v28 = *(double *)(v4 + 24 * *v18 + 8);
      v29 = *(double *)(v4 + 24 * *(v18++ - 1) + 8);
      if (v28 < v29)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t *sub_2394B9E30(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t *v30;
  double v31;
  uint64_t v32;
  uint64_t *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (a3 == a2)
    return result;
  v4 = *a4;
  while (1)
  {
    v5 = a3 - result;
    if (v5 < 2)
      return result;
    if (v5 == 3)
    {
      v42 = *result;
      v43 = result[1];
      v44 = *a4;
      v45 = *(double *)(*a4 + 24 * v43 + 16);
      v46 = *(double *)(*a4 + 24 * *result + 16);
      v47 = *(a3 - 1);
      v48 = *(double *)(*a4 + 24 * v47 + 16);
      if (v45 >= v46)
      {
        if (v48 < v45)
        {
          result[1] = v47;
          *(a3 - 1) = v43;
          v60 = *result;
          v59 = result[1];
          if (*(double *)(v44 + 24 * v59 + 16) < *(double *)(v44 + 24 * *result + 16))
          {
            *result = v59;
            result[1] = v60;
          }
        }
      }
      else if (v48 >= v45)
      {
        *result = v43;
        result[1] = v42;
        v61 = *(a3 - 1);
        if (*(double *)(v44 + 24 * v61 + 16) < v46)
        {
          result[1] = v61;
          *(a3 - 1) = v42;
        }
      }
      else
      {
        *result = v47;
        *(a3 - 1) = v42;
      }
      return result;
    }
    if (v5 == 2)
    {
      v49 = *(a3 - 1);
      v50 = *result;
      if (*(double *)(*a4 + 24 * v49 + 16) < *(double *)(*a4 + 24 * *result + 16))
      {
        *result = v49;
        *(a3 - 1) = v50;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      if (a3 - 1 == result)
        return result;
      v51 = *a4;
      while (2)
      {
        v52 = a3;
        if (result == a3)
        {
LABEL_81:
          if (v52 != result)
          {
            v58 = *result;
            *result = *v52;
            *v52 = v58;
          }
        }
        else
        {
          v53 = result + 1;
          if (result + 1 != a3)
          {
            v54 = *result;
            v52 = result;
            v55 = result + 1;
            do
            {
              v57 = *v55++;
              v56 = v57;
              if (*(double *)(v51 + 24 * v57 + 16) < *(double *)(v51 + 24 * v54 + 16))
              {
                v54 = v56;
                v52 = v53;
              }
              v53 = v55;
            }
            while (v55 != a3);
            goto LABEL_81;
          }
        }
        if (++result == a3 - 1)
          return result;
        continue;
      }
    }
    v6 = &result[v5 >> 1];
    v7 = a3 - 1;
    v8 = *(a3 - 1);
    v9 = *v6;
    v10 = *result;
    v11 = *(double *)(v4 + 24 * *v6 + 16);
    v12 = *(double *)(v4 + 24 * *result + 16);
    v13 = *(double *)(v4 + 24 * v8 + 16);
    if (v11 < v12)
    {
      if (v13 < v11)
      {
        *result = v8;
        *v7 = v10;
LABEL_16:
        v15 = 1;
        goto LABEL_18;
      }
      *result = v9;
      *v6 = v10;
      if (*(double *)(v4 + 24 * *v7 + 16) >= v12)
        goto LABEL_16;
      *v6 = *v7;
      *v7 = v10;
LABEL_15:
      v15 = 2;
      goto LABEL_18;
    }
    if (v13 < v11)
    {
      *v6 = v8;
      *v7 = v9;
      v14 = *result;
      if (*(double *)(v4 + 24 * *v6 + 16) >= *(double *)(v4 + 24 * *result + 16))
        goto LABEL_16;
      *result = *v6;
      *v6 = v14;
      goto LABEL_15;
    }
    v15 = 0;
LABEL_18:
    v16 = *result;
    if (*(double *)(v4 + 24 * *result + 16) < *(double *)(v4 + 24 * *v6 + 16))
      break;
    v26 = *a4;
    v17 = a3 - 1;
    while (--v17 != result)
    {
      if (*(double *)(v26 + 24 * *v17 + 16) < *(double *)(*a4 + 24 * *v6 + 16))
      {
        *result = *v17;
        *v17 = v16;
        ++v15;
        v18 = result + 1;
        if (result + 1 < v17)
          goto LABEL_20;
        goto LABEL_33;
      }
    }
    v30 = result + 1;
    v31 = *(double *)(v26 + 24 * v16 + 16);
    if (v31 >= *(double *)(v26 + 24 * *v7 + 16))
    {
      if (v30 == v7)
        return result;
      while (1)
      {
        v32 = *v30;
        if (v31 < *(double *)(v26 + 24 * *v30 + 16))
          break;
        if (++v30 == v7)
          return result;
      }
      *v30++ = *v7;
      *v7 = v32;
    }
    if (v30 == v7)
      return result;
    while (1)
    {
      v36 = *(double *)(v26 + 24 * *result + 16);
      do
      {
        v38 = *v30++;
        v37 = v38;
      }
      while (v36 >= *(double *)(v26 + 24 * v38 + 16));
      v39 = v30 - 1;
      do
      {
        v41 = *--v7;
        v40 = v41;
      }
      while (v36 < *(double *)(v26 + 24 * v41 + 16));
      if (v39 >= v7)
        break;
      *v39 = v40;
      *v7 = v37;
    }
    result = v30 - 1;
    if (v39 > a2)
      return result;
LABEL_65:
    if (a3 == a2)
      return result;
  }
  v17 = a3 - 1;
  v18 = result + 1;
  if (result + 1 >= a3 - 1)
  {
LABEL_33:
    v23 = v18;
  }
  else
  {
LABEL_20:
    v19 = v18;
    while (1)
    {
      v20 = *(double *)(v4 + 24 * *v6 + 16);
      do
      {
        v22 = *v19++;
        v21 = v22;
      }
      while (*(double *)(v4 + 24 * v22 + 16) < v20);
      v23 = v19 - 1;
      do
      {
        v25 = *--v17;
        v24 = v25;
      }
      while (*(double *)(v4 + 24 * v25 + 16) >= v20);
      if (v23 >= v17)
        break;
      *v23 = v24;
      *v17 = v21;
      ++v15;
      if (v23 == v6)
        v6 = v17;
    }
  }
  if (v23 != v6)
  {
    v27 = *v23;
    if (*(double *)(v4 + 24 * *v6 + 16) < *(double *)(v4 + 24 * *v23 + 16))
    {
      *v23 = *v6;
      *v6 = v27;
      ++v15;
    }
  }
  if (v23 == a2)
    return result;
  if (v15)
  {
LABEL_39:
    if (v23 <= a2)
      result = v23 + 1;
    else
      a3 = v23;
    goto LABEL_65;
  }
  if (v23 <= a2)
  {
    v33 = v23 + 1;
    while (v33 != a3)
    {
      v34 = *(double *)(v4 + 24 * *v33 + 16);
      v35 = *(double *)(v4 + 24 * *(v33++ - 1) + 16);
      if (v34 < v35)
        goto LABEL_39;
    }
  }
  else
  {
    while (v18 != v23)
    {
      v28 = *(double *)(v4 + 24 * *v18 + 16);
      v29 = *(double *)(v4 + 24 * *(v18++ - 1) + 16);
      if (v28 < v29)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t *sub_2394BA2E4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a3 == a2)
    return result;
  while (1)
  {
    v4 = a3 - result;
    if (v4 < 2)
      return result;
    if (v4 == 3)
    {
      v44 = *result;
      v45 = result[1];
      v46 = *(double *)(*a4 + 24 * v45 + 16);
      v47 = *(a3 - 1);
      v48 = *(double *)(*a4 + 24 * v47 + 16);
      if (*(double *)(*a4 + 24 * *result + 16) >= v46)
      {
        if (v46 < v48)
        {
          result[1] = v47;
          *(a3 - 1) = v45;
          v58 = *result;
          v59 = result[1];
          if (*(double *)(*a4 + 24 * *result + 16) < *(double *)(*a4 + 24 * v59 + 16))
          {
            *result = v59;
            result[1] = v58;
          }
        }
      }
      else if (v46 >= v48)
      {
        *result = v45;
        result[1] = v44;
        v60 = *(a3 - 1);
        if (*(double *)(*a4 + 24 * v44 + 16) < *(double *)(*a4 + 24 * v60 + 16))
        {
          result[1] = v60;
          *(a3 - 1) = v44;
        }
      }
      else
      {
        *result = v47;
        *(a3 - 1) = v44;
      }
      return result;
    }
    if (v4 == 2)
    {
      v49 = *result;
      v50 = *(a3 - 1);
      if (*(double *)(*a4 + 24 * *result + 16) < *(double *)(*a4 + 24 * v50 + 16))
      {
        *result = v50;
        *(a3 - 1) = v49;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      if (a3 - 1 == result)
        return result;
      while (2)
      {
        v51 = a3;
        if (result == a3)
        {
LABEL_80:
          if (v51 != result)
          {
            v57 = *result;
            *result = *v51;
            *v51 = v57;
          }
        }
        else
        {
          v52 = result + 1;
          if (result + 1 != a3)
          {
            v53 = *result;
            v51 = result;
            v54 = result + 1;
            do
            {
              v56 = *v54++;
              v55 = v56;
              if (*(double *)(*a4 + 24 * v53 + 16) < *(double *)(*a4 + 24 * v56 + 16))
              {
                v53 = v55;
                v51 = v52;
              }
              v52 = v54;
            }
            while (v54 != a3);
            goto LABEL_80;
          }
        }
        if (++result == a3 - 1)
          return result;
        continue;
      }
    }
    v5 = &result[v4 >> 1];
    v6 = a3 - 1;
    v7 = *(a3 - 1);
    v8 = *result;
    v9 = *v5;
    v10 = *(double *)(*a4 + 24 * *v5 + 16);
    v11 = *(double *)(*a4 + 24 * v7 + 16);
    if (*(double *)(*a4 + 24 * *result + 16) < v10)
    {
      if (v10 < v11)
      {
        *result = v7;
        *v6 = v8;
LABEL_15:
        v13 = 1;
        goto LABEL_17;
      }
      *result = v9;
      *v5 = v8;
      if (*(double *)(*a4 + 24 * v8 + 16) >= *(double *)(*a4 + 24 * *v6 + 16))
        goto LABEL_15;
      *v5 = *v6;
      *v6 = v8;
LABEL_14:
      v13 = 2;
      goto LABEL_17;
    }
    if (v10 < v11)
    {
      *v5 = v7;
      *v6 = v9;
      v12 = *result;
      if (*(double *)(*a4 + 24 * *result + 16) >= *(double *)(*a4 + 24 * *v5 + 16))
        goto LABEL_15;
      *result = *v5;
      *v5 = v12;
      goto LABEL_14;
    }
    v13 = 0;
LABEL_17:
    v14 = *a4;
    v15 = *result;
    v16 = *(double *)(*a4 + 24 * *v5 + 16);
    v17 = *(double *)(*a4 + 24 * *result + 16);
    if (v16 < v17)
      break;
    v18 = a3 - 1;
    while (--v18 != result)
    {
      if (v16 < *(double *)(v14 + 24 * *v18 + 16))
      {
        *result = *v18;
        *v18 = v15;
        ++v13;
        v19 = result + 1;
        if (result + 1 < v18)
          goto LABEL_19;
        goto LABEL_32;
      }
    }
    v32 = result + 1;
    if (*(double *)(v14 + 24 * *v6 + 16) >= v17)
    {
      if (v32 == v6)
        return result;
      while (1)
      {
        v33 = *v32;
        if (*(double *)(v14 + 24 * *v32 + 16) < v17)
          break;
        if (++v32 == v6)
          return result;
      }
      *v32++ = *v6;
      *v6 = v33;
    }
    if (v32 == v6)
      return result;
    while (1)
    {
      v37 = *a4;
      v38 = *(double *)(*a4 + 24 * *result + 16);
      do
      {
        v40 = *v32++;
        v39 = v40;
      }
      while (*(double *)(v37 + 24 * v40 + 16) >= v38);
      v41 = v32 - 1;
      do
      {
        v43 = *--v6;
        v42 = v43;
      }
      while (*(double *)(v37 + 24 * v43 + 16) < v38);
      if (v41 >= v6)
        break;
      *v41 = v42;
      *v6 = v39;
    }
    result = v32 - 1;
    if (v41 > a2)
      return result;
LABEL_64:
    if (a3 == a2)
      return result;
  }
  v18 = a3 - 1;
  v19 = result + 1;
  if (result + 1 >= a3 - 1)
  {
LABEL_32:
    v25 = v19;
  }
  else
  {
LABEL_19:
    v20 = v19;
    while (1)
    {
      v21 = *a4;
      v22 = *(double *)(*a4 + 24 * *v5 + 16);
      do
      {
        v24 = *v20++;
        v23 = v24;
      }
      while (v22 < *(double *)(v21 + 24 * v24 + 16));
      v25 = v20 - 1;
      do
      {
        v27 = *--v18;
        v26 = v27;
      }
      while (v22 >= *(double *)(v21 + 24 * v27 + 16));
      if (v25 >= v18)
        break;
      *v25 = v26;
      *v18 = v23;
      ++v13;
      if (v25 == v5)
        v5 = v18;
    }
  }
  if (v25 != v5)
  {
    v28 = *v25;
    if (*(double *)(*a4 + 24 * *v25 + 16) < *(double *)(*a4 + 24 * *v5 + 16))
    {
      *v25 = *v5;
      *v5 = v28;
      ++v13;
    }
  }
  if (v25 == a2)
    return result;
  if (v13)
  {
LABEL_38:
    if (v25 <= a2)
      result = v25 + 1;
    else
      a3 = v25;
    goto LABEL_64;
  }
  v29 = *a4;
  if (v25 <= a2)
  {
    v34 = v25 + 1;
    while (v34 != a3)
    {
      v35 = *(double *)(v29 + 24 * *(v34 - 1) + 16);
      v36 = *(double *)(v29 + 24 * *v34++ + 16);
      if (v35 < v36)
        goto LABEL_38;
    }
  }
  else
  {
    while (v19 != v25)
    {
      v30 = *(double *)(v29 + 24 * *(v19 - 1) + 16);
      v31 = *(double *)(v29 + 24 * *v19++ + 16);
      if (v30 < v31)
        goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_2394BA7B4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a3 == a2)
    return result;
  while (1)
  {
    v4 = a3 - result;
    if (v4 < 2)
      return result;
    if (v4 == 3)
    {
      v44 = *result;
      v45 = result[1];
      v46 = *(double *)(*a4 + 24 * v45 + 8);
      v47 = *(a3 - 1);
      v48 = *(double *)(*a4 + 24 * v47 + 8);
      if (*(double *)(*a4 + 24 * *result + 8) >= v46)
      {
        if (v46 < v48)
        {
          result[1] = v47;
          *(a3 - 1) = v45;
          v58 = *result;
          v59 = result[1];
          if (*(double *)(*a4 + 24 * *result + 8) < *(double *)(*a4 + 24 * v59 + 8))
          {
            *result = v59;
            result[1] = v58;
          }
        }
      }
      else if (v46 >= v48)
      {
        *result = v45;
        result[1] = v44;
        v60 = *(a3 - 1);
        if (*(double *)(*a4 + 24 * v44 + 8) < *(double *)(*a4 + 24 * v60 + 8))
        {
          result[1] = v60;
          *(a3 - 1) = v44;
        }
      }
      else
      {
        *result = v47;
        *(a3 - 1) = v44;
      }
      return result;
    }
    if (v4 == 2)
    {
      v49 = *result;
      v50 = *(a3 - 1);
      if (*(double *)(*a4 + 24 * *result + 8) < *(double *)(*a4 + 24 * v50 + 8))
      {
        *result = v50;
        *(a3 - 1) = v49;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      if (a3 - 1 == result)
        return result;
      while (2)
      {
        v51 = a3;
        if (result == a3)
        {
LABEL_80:
          if (v51 != result)
          {
            v57 = *result;
            *result = *v51;
            *v51 = v57;
          }
        }
        else
        {
          v52 = result + 1;
          if (result + 1 != a3)
          {
            v53 = *result;
            v51 = result;
            v54 = result + 1;
            do
            {
              v56 = *v54++;
              v55 = v56;
              if (*(double *)(*a4 + 24 * v53 + 8) < *(double *)(*a4 + 24 * v56 + 8))
              {
                v53 = v55;
                v51 = v52;
              }
              v52 = v54;
            }
            while (v54 != a3);
            goto LABEL_80;
          }
        }
        if (++result == a3 - 1)
          return result;
        continue;
      }
    }
    v5 = &result[v4 >> 1];
    v6 = a3 - 1;
    v7 = *(a3 - 1);
    v8 = *result;
    v9 = *v5;
    v10 = *(double *)(*a4 + 24 * *v5 + 8);
    v11 = *(double *)(*a4 + 24 * v7 + 8);
    if (*(double *)(*a4 + 24 * *result + 8) < v10)
    {
      if (v10 < v11)
      {
        *result = v7;
        *v6 = v8;
LABEL_15:
        v13 = 1;
        goto LABEL_17;
      }
      *result = v9;
      *v5 = v8;
      if (*(double *)(*a4 + 24 * v8 + 8) >= *(double *)(*a4 + 24 * *v6 + 8))
        goto LABEL_15;
      *v5 = *v6;
      *v6 = v8;
LABEL_14:
      v13 = 2;
      goto LABEL_17;
    }
    if (v10 < v11)
    {
      *v5 = v7;
      *v6 = v9;
      v12 = *result;
      if (*(double *)(*a4 + 24 * *result + 8) >= *(double *)(*a4 + 24 * *v5 + 8))
        goto LABEL_15;
      *result = *v5;
      *v5 = v12;
      goto LABEL_14;
    }
    v13 = 0;
LABEL_17:
    v14 = *a4;
    v15 = *result;
    v16 = *(double *)(*a4 + 24 * *v5 + 8);
    v17 = *(double *)(*a4 + 24 * *result + 8);
    if (v16 < v17)
      break;
    v18 = a3 - 1;
    while (--v18 != result)
    {
      if (v16 < *(double *)(v14 + 24 * *v18 + 8))
      {
        *result = *v18;
        *v18 = v15;
        ++v13;
        v19 = result + 1;
        if (result + 1 < v18)
          goto LABEL_19;
        goto LABEL_32;
      }
    }
    v32 = result + 1;
    if (*(double *)(v14 + 24 * *v6 + 8) >= v17)
    {
      if (v32 == v6)
        return result;
      while (1)
      {
        v33 = *v32;
        if (*(double *)(v14 + 24 * *v32 + 8) < v17)
          break;
        if (++v32 == v6)
          return result;
      }
      *v32++ = *v6;
      *v6 = v33;
    }
    if (v32 == v6)
      return result;
    while (1)
    {
      v37 = *a4;
      v38 = *(double *)(*a4 + 24 * *result + 8);
      do
      {
        v40 = *v32++;
        v39 = v40;
      }
      while (*(double *)(v37 + 24 * v40 + 8) >= v38);
      v41 = v32 - 1;
      do
      {
        v43 = *--v6;
        v42 = v43;
      }
      while (*(double *)(v37 + 24 * v43 + 8) < v38);
      if (v41 >= v6)
        break;
      *v41 = v42;
      *v6 = v39;
    }
    result = v32 - 1;
    if (v41 > a2)
      return result;
LABEL_64:
    if (a3 == a2)
      return result;
  }
  v18 = a3 - 1;
  v19 = result + 1;
  if (result + 1 >= a3 - 1)
  {
LABEL_32:
    v25 = v19;
  }
  else
  {
LABEL_19:
    v20 = v19;
    while (1)
    {
      v21 = *a4;
      v22 = *(double *)(*a4 + 24 * *v5 + 8);
      do
      {
        v24 = *v20++;
        v23 = v24;
      }
      while (v22 < *(double *)(v21 + 24 * v24 + 8));
      v25 = v20 - 1;
      do
      {
        v27 = *--v18;
        v26 = v27;
      }
      while (v22 >= *(double *)(v21 + 24 * v27 + 8));
      if (v25 >= v18)
        break;
      *v25 = v26;
      *v18 = v23;
      ++v13;
      if (v25 == v5)
        v5 = v18;
    }
  }
  if (v25 != v5)
  {
    v28 = *v25;
    if (*(double *)(*a4 + 24 * *v25 + 8) < *(double *)(*a4 + 24 * *v5 + 8))
    {
      *v25 = *v5;
      *v5 = v28;
      ++v13;
    }
  }
  if (v25 == a2)
    return result;
  if (v13)
  {
LABEL_38:
    if (v25 <= a2)
      result = v25 + 1;
    else
      a3 = v25;
    goto LABEL_64;
  }
  v29 = *a4;
  if (v25 <= a2)
  {
    v34 = v25 + 1;
    while (v34 != a3)
    {
      v35 = *(double *)(v29 + 24 * *(v34 - 1) + 8);
      v36 = *(double *)(v29 + 24 * *v34++ + 8);
      if (v35 < v36)
        goto LABEL_38;
    }
  }
  else
  {
    while (v19 != v25)
    {
      v30 = *(double *)(v29 + 24 * *(v19 - 1) + 8);
      v31 = *(double *)(v29 + 24 * *v19++ + 8);
      if (v30 < v31)
        goto LABEL_38;
    }
  }
  return result;
}

uint64_t sub_2394BAC84(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394B9E30(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394BB548(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394B997C(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394BA7B4(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394B94CC(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394BA7B4(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394B997C(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394B8EF4(v7, a2, v8);
  sub_2394BBA18(v7, v8, v10);
  sub_2394BBA18(v7, v10, v11);
  sub_2394B8630(v7, v11, v9);
  sub_2394B8630(v7, v9, v18);
  sub_2394B8C08(v7, v18, v16);
  sub_2394B8C08(v7, v16, v20);
  return sub_2394BBD04((uint64_t)v7, v20, a3);
}

uint64_t sub_2394BAF70(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394BB548(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394B997C(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394B9E30(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394BA2E4(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394BA7B4(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394BA2E4(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394B9E30(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394B91E0(v7, a2, v8);
  sub_2394BBD04((uint64_t)v7, v8, v10);
  sub_2394BBD04((uint64_t)v7, v10, v11);
  sub_2394BBA18(v7, v11, v9);
  sub_2394BBA18(v7, v9, v18);
  sub_2394BB25C((uint64_t)v7, v18, v16);
  sub_2394BB25C((uint64_t)v7, v16, v20);
  return sub_2394B8630(v7, v20, a3);
}

uint64_t sub_2394BB25C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394BA7B4(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394BA2E4(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394BB548(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394B94CC(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394B9E30(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394B94CC(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394BB548(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394B8C08((uint64_t)v7, a2, v8);
  sub_2394BBFF0((uint64_t)v7, v8, v10);
  sub_2394BBFF0((uint64_t)v7, v10, v11);
  sub_2394B8EF4(v7, v11, v9);
  sub_2394B8EF4(v7, v9, v18);
  sub_2394B8630(v7, v18, v16);
  sub_2394B8630(v7, v16, v20);
  return sub_2394BAF70(v7, v20, a3);
}

