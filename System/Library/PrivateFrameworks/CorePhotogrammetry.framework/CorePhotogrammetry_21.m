void sub_239BC13F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_239416DA0((uint64_t)&a27);
  sub_239416DA0((uint64_t)&a21);
  if (a16 < 0)
    operator delete(__p);
  sub_239416DA0(v32);
  _Unwind_Resume(a1);
}

void sub_239BC1640()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1648()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1650()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1658()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1660()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1668()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1670()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1678()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1680()
{
  JUMPOUT(0x239BC1630);
}

void sub_239BC1688(uint64_t a1, const void *a2, char *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;
  char v21;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return;
  v21 = *a3;
  sub_2396297BC(&value, &v21);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_13;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_13:
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_239BC17D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239BC17EC(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38[2];
  void *value;
  std::__shared_weak_count *v40;
  CFMutableArrayRef theArray[2];

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!sub_23962C8DC(*(const __CFDictionary **)a1, a2))
  {
    sub_23962BDF8((std::__shared_weak_count_vtbl **)theArray);
    v12 = theArray[0];
    v11 = (std::__shared_weak_count *)theArray[1];
    if (!theArray[1])
      goto LABEL_13;
    v13 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v12)
      {
LABEL_14:
        v16 = *a3;
        v17 = a3[1];
        if (*a3 != v17)
        {
          do
          {
            sub_2396298C4(&value, v16);
            v19 = value;
            v18 = v40;
            if (!v40)
              goto LABEL_20;
            v20 = (unint64_t *)&v40->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
            do
              v22 = __ldaxr(v20);
            while (__stlxr(v22 - 1, v20));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              if (v19)
              {
LABEL_21:
                j__CFArrayAppendValue(theArray[0], value);
                v23 = v40;
                if (v40)
                  goto LABEL_25;
                goto LABEL_29;
              }
            }
            else
            {
LABEL_20:
              if (v19)
                goto LABEL_21;
            }
            v38[0] = 0;
            v38[1] = 0;
            v23 = v40;
            if (v40)
            {
LABEL_25:
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
LABEL_29:
            if (!v19)
              goto LABEL_37;
            v16 += 4;
          }
          while (v16 != v17);
        }
        *(_OWORD *)v38 = *(_OWORD *)theArray;
        v26 = theArray;
LABEL_36:
        *v26 = 0;
        v26[1] = 0;
LABEL_37:
        v27 = (std::__shared_weak_count *)theArray[1];
        if (theArray[1])
        {
          v28 = (unint64_t *)((char *)theArray[1] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v31 = v38[0];
        v30 = (std::__shared_weak_count *)v38[1];
        if (!v38[1])
          goto LABEL_47;
        v32 = (unint64_t *)((char *)v38[1] + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          if (!v31)
          {
LABEL_49:
            v35 = (std::__shared_weak_count *)v38[1];
            if (v38[1])
            {
              v36 = (unint64_t *)((char *)v38[1] + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            return;
          }
        }
        else
        {
LABEL_47:
          if (!v31)
            goto LABEL_49;
        }
        j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, v38[0]);
        goto LABEL_49;
      }
    }
    v26 = v38;
    goto LABEL_36;
  }
}

void sub_239BC1A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239BC1AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239BC1B34(uint64_t a1, char *a2)
{
  int8x16_t v4;
  double v5;
  int32x4_t v6;
  const char *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  double v15;
  int32x4_t v16;
  std::__shared_weak_count *v17;
  uint64_t *p_info;
  unint64_t v19;
  const char *v20;
  const char *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  double v28;
  int32x4_t v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  unint64_t v32;
  const char *v33;
  const char *v34;
  size_t v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  double v41;
  int32x4_t v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  unint64_t v45;
  const char *v46;
  const char *v47;
  size_t v48;
  size_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  int16x8_t v55;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  unint64_t v58;
  const char *v59;
  const char *v60;
  size_t v61;
  size_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  double v67;
  int32x4_t v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  unint64_t v71;
  const char *v72;
  const char *v73;
  size_t v74;
  size_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  double v80;
  int32x4_t v81;
  std::__shared_weak_count *v82;
  uint64_t *v83;
  unint64_t v84;
  const char *v85;
  const char *v86;
  size_t v87;
  size_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92;
  double v93;
  int32x4_t v94;
  std::__shared_weak_count *v95;
  uint64_t *v96;
  unint64_t v97;
  const char *v98;
  const char *v99;
  size_t v100;
  size_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  int16x8_t v107;
  std::__shared_weak_count *v108;
  uint64_t *v109;
  unint64_t v110;
  const char *v111;
  const char *v112;
  size_t v113;
  size_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t *v119;
  unint64_t v120;
  int8x16_t *v121;
  size_t v122;
  size_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  int8x16_t v127;
  double v128;
  int32x4_t v129;
  std::__shared_weak_count *v130;
  uint64_t *v131;
  unint64_t v132;
  const char *v133;
  const char *v134;
  size_t v135;
  size_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  int32x4_t v141;
  std::__shared_weak_count *v142;
  uint64_t *v143;
  unint64_t v144;
  const char *v145;
  const char *v146;
  size_t v147;
  size_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  int8x16_t v152;
  double v153;
  int32x4_t v154;
  std::__shared_weak_count *v155;
  uint64_t *v156;
  unint64_t v157;
  const char *v158;
  const char *v159;
  size_t v160;
  size_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  int16x8_t v166;
  std::__shared_weak_count *v167;
  uint64_t *v168;
  unint64_t v169;
  const char *v170;
  const char *v171;
  size_t v172;
  size_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  int8x16_t v177;
  double v178;
  int32x4_t v179;
  std::__shared_weak_count *v180;
  uint64_t *v181;
  unint64_t v182;
  const char *v183;
  const char *v184;
  size_t v185;
  size_t v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t *v191;
  unint64_t v192;
  int8x16_t *v193;
  size_t v194;
  size_t v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t *v200;
  unint64_t v201;
  const char *v202;
  size_t v203;
  size_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  int8x16_t v208;
  double v209;
  int32x4_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  const char *v214;
  const char *v215;
  size_t v216;
  size_t v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  int8x16_t v221;
  double v222;
  int32x4_t v223;
  std::__shared_weak_count *v224;
  uint64_t *v225;
  unint64_t v226;
  const char *v227;
  const char *v228;
  size_t v229;
  size_t v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t v234;
  double v235;
  int32x4_t v236;
  std::__shared_weak_count *v237;
  uint64_t *v238;
  unint64_t v239;
  const char *v240;
  const char *v241;
  size_t v242;
  size_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  int16x8_t v249;
  std::__shared_weak_count *v250;
  uint64_t *v251;
  unint64_t v252;
  const char *v253;
  const char *v254;
  size_t v255;
  size_t v256;
  _BYTE *v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  int16x8_t v261;
  std::__shared_weak_count *v262;
  uint64_t *v263;
  unint64_t v264;
  const char *v265;
  const char *v266;
  size_t v267;
  size_t v268;
  _BYTE *v269;
  uint64_t v270;
  uint64_t v271;
  int8x16_t v272;
  double v273;
  int32x4_t v274;
  std::__shared_weak_count *v275;
  uint64_t *v276;
  unint64_t v277;
  const char *v278;
  const char *v279;
  size_t v280;
  size_t v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  double v286;
  int16x8_t v287;
  std::__shared_weak_count *v288;
  uint64_t *v289;
  unint64_t v290;
  const char *v291;
  const char *v292;
  size_t v293;
  size_t v294;
  _BYTE *v295;
  uint64_t v296;
  uint64_t v297;
  double v298;
  int16x8_t v299;
  std::__shared_weak_count *v300;
  uint64_t *v301;
  unint64_t v302;
  const char *v303;
  const char *v304;
  size_t v305;
  size_t v306;
  _BYTE *v307;
  uint64_t v308;
  uint64_t v309;
  double v310;
  int32x4_t v311;
  std::__shared_weak_count *v312;
  uint64_t *v313;
  unint64_t v314;
  const char *v315;
  const char *v316;
  size_t v317;
  size_t v318;
  _BYTE *v319;
  uint64_t v320;
  uint64_t v321;
  int8x16_t v322;
  double v323;
  int32x4_t v324;
  std::__shared_weak_count *v325;
  uint64_t *v326;
  unint64_t v327;
  const char *v328;
  const char *v329;
  size_t v330;
  size_t v331;
  _BYTE *v332;
  uint64_t v333;
  uint64_t v334;
  int8x16_t v335;
  double v336;
  int32x4_t v337;
  std::__shared_weak_count *v338;
  uint64_t *v339;
  unint64_t v340;
  const char *v341;
  const char *v342;
  size_t v343;
  size_t v344;
  _BYTE *v345;
  uint64_t v346;
  uint64_t v347;
  int8x16_t v348;
  double v349;
  int32x4_t v350;
  std::__shared_weak_count *v351;
  uint64_t *v352;
  unint64_t v353;
  const char *v354;
  const char *v355;
  size_t v356;
  size_t v357;
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  int8x16_t v361;
  double v362;
  int32x4_t v363;
  std::__shared_weak_count *v364;
  uint64_t *v365;
  unint64_t v366;
  const char *v367;
  const char *v368;
  size_t v369;
  size_t v370;
  _BYTE *v371;
  uint64_t v372;
  uint64_t v373;
  int16x8_t v374;
  int16x8_t v375;
  std::__shared_weak_count *v376;
  uint64_t *v377;
  unint64_t v378;
  const char *v379;
  const char *v380;
  size_t v381;
  size_t v382;
  _BYTE *v383;
  uint64_t v384;
  uint64_t v385;
  int16x8_t v386;
  double v387;
  int16x8_t v388;
  std::__shared_weak_count *v389;
  uint64_t *v390;
  unint64_t v391;
  unsigned __int8 *v392;
  size_t v393;
  size_t v394;
  _BYTE *v395;
  uint64_t v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  uint64_t *v399;
  unint64_t v400;
  int8x16_t *v401;
  size_t v402;
  size_t v403;
  _BYTE *v404;
  uint64_t v405;
  uint64_t v406;
  int8x16_t v407;
  double v408;
  int32x4_t v409;
  CFStringRef v410;
  std::__shared_weak_count *v411;
  const __CFDictionary *v412;
  unint64_t *p_shared_owners;
  unint64_t v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  CFStringRef v417;
  uint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  std::__shared_weak_count *v421;
  uint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  const char *v427;
  const char *v428;
  size_t v429;
  size_t v430;
  _BYTE *v431;
  uint64_t v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  uint64_t *v435;
  unint64_t v436;
  const char *v437;
  size_t v438;
  size_t v439;
  _BYTE *v440;
  uint64_t v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  CFStringRef v446;
  std::__shared_weak_count *v447;
  char v448;
  _BYTE __dst[48];
  uint64_t v450;
  _BYTE __p[24];
  CFStringRef v452[3];

  v452[2] = *(CFStringRef *)MEMORY[0x24BDAC8D0];
  sub_23962C714((_OWORD *)a1);
  *(_OWORD *)__p = xmmword_239F11981;
  *(_QWORD *)&__p[15] = 0x19101E1D10151DLL;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F11981, v4, v5, v6);
  v8 = v7;
  v9 = strlen(v7);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)&__dst[8] = v10;
    *(_QWORD *)&__dst[16] = v13 | 0x8000000000000000;
    *(_QWORD *)__dst = v11;
  }
  else
  {
    __dst[23] = v9;
    v11 = __dst;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v11, v8, v10);
LABEL_9:
  v11[v10] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_2396B4EAC(a1, v452[0], a2 + 1);
  v17 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_13;
  p_info = &v452[1]->info;
  do
    v19 = __ldaxr((unint64_t *)p_info);
  while (__stlxr(v19 - 1, (unint64_t *)p_info));
  if (v19)
  {
LABEL_13:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_14:
    operator delete(*(void **)__dst);
LABEL_15:
  *(_OWORD *)__p = xmmword_239F11998;
  strcpy(&__p[15], "( %(+%,");
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F11998, v14, v15, v16);
  v21 = v20;
  v22 = strlen(v20);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *(_QWORD *)&__dst[8] = v23;
    *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
    *(_QWORD *)__dst = v24;
  }
  else
  {
    __dst[23] = v22;
    v24 = __dst;
    if (!v22)
      goto LABEL_23;
  }
  memmove(v24, v21, v23);
LABEL_23:
  v24[v23] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_2396B4EAC(a1, v452[0], a2 + 2);
  v30 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_27;
  v31 = &v452[1]->info;
  do
    v32 = __ldaxr((unint64_t *)v31);
  while (__stlxr(v32 - 1, (unint64_t *)v31));
  if (v32)
  {
LABEL_27:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_28:
    operator delete(*(void **)__dst);
LABEL_29:
  *(_OWORD *)__p = xmmword_239F119AF;
  *(_QWORD *)&__p[16] = 0x1F1605161F2C16;
  sub_2396F1A4C((uint64_t)__p, (int32x4_t)xmmword_239F119AF, v27, v28, v29);
  v34 = v33;
  v35 = strlen(v33);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    *(_QWORD *)&__dst[8] = v36;
    *(_QWORD *)&__dst[16] = v39 | 0x8000000000000000;
    *(_QWORD *)__dst = v37;
  }
  else
  {
    __dst[23] = v35;
    v37 = __dst;
    if (!v35)
      goto LABEL_37;
  }
  memmove(v37, v34, v36);
LABEL_37:
  v37[v36] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB4338(a1, v452[0], (uint64_t)(a2 + 24));
  v43 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_41;
  v44 = &v452[1]->info;
  do
    v45 = __ldaxr((unint64_t *)v44);
  while (__stlxr(v45 - 1, (unint64_t *)v44));
  if (v45)
  {
LABEL_41:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_42:
    operator delete(*(void **)__dst);
LABEL_43:
  v47 = v46;
  v48 = strlen(v46);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v49 = v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    *(_QWORD *)&__p[8] = v49;
    *(_QWORD *)&__p[16] = v52 | 0x8000000000000000;
    *(_QWORD *)__p = v50;
  }
  else
  {
    __p[23] = v48;
    v50 = __p;
    if (!v48)
      goto LABEL_51;
  }
  memmove(v50, v47, v49);
LABEL_51:
  v50[v49] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 4));
  v56 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_55;
  v57 = &v452[1]->info;
  do
    v58 = __ldaxr((unint64_t *)v57);
  while (__stlxr(v58 - 1, (unint64_t *)v57));
  if (v58)
  {
LABEL_55:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  if ((__p[23] & 0x80000000) != 0)
LABEL_56:
    operator delete(*(void **)__p);
LABEL_57:
  strcpy(__dst, "U10%!=\n%:<;!\n6:;3<10;60\n!='0&=:91");
  sub_2396F0120(__dst, *(int16x8_t *)"U10%!=\n%:<;!\n6:;3<10;60\n!='0&=:91",
    *(double *)"3<10;60\n!='0&=:91",
    v53,
    v54,
    v55);
  v60 = v59;
  v61 = strlen(v59);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v63 = operator new(v64 + 1);
    *(_QWORD *)&__p[8] = v62;
    *(_QWORD *)&__p[16] = v65 | 0x8000000000000000;
    *(_QWORD *)__p = v63;
  }
  else
  {
    __p[23] = v61;
    v63 = __p;
    if (!v61)
      goto LABEL_65;
  }
  memmove(v63, v60, v62);
LABEL_65:
  v63[v62] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 8));
  v69 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_69;
  v70 = &v452[1]->info;
  do
    v71 = __ldaxr((unint64_t *)v70);
  while (__stlxr(v71 - 1, (unint64_t *)v70));
  if (v71)
  {
LABEL_69:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if ((__p[23] & 0x80000000) != 0)
LABEL_70:
    operator delete(*(void **)__p);
LABEL_71:
  strcpy(__p, ":^_JNReJUSTNeIY[V_eWST");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)":^_JNReJUSTNeIY[V_eWST", v66, v67, v68);
  v73 = v72;
  v74 = strlen(v72);
  if (v74 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v75 = v74;
  if (v74 >= 0x17)
  {
    v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v74 | 7) != 0x17)
      v77 = v74 | 7;
    v78 = v77 + 1;
    v76 = operator new(v77 + 1);
    *(_QWORD *)&__dst[8] = v75;
    *(_QWORD *)&__dst[16] = v78 | 0x8000000000000000;
    *(_QWORD *)__dst = v76;
  }
  else
  {
    __dst[23] = v74;
    v76 = __dst;
    if (!v74)
      goto LABEL_79;
  }
  memmove(v76, v73, v75);
LABEL_79:
  v76[v75] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 32));
  v82 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_83;
  v83 = &v452[1]->info;
  do
    v84 = __ldaxr((unint64_t *)v83);
  while (__stlxr(v84 - 1, (unint64_t *)v83));
  if (v84)
  {
LABEL_83:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
  std::__shared_weak_count::__release_weak(v82);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_84:
    operator delete(*(void **)__dst);
LABEL_85:
  *(_OWORD *)__p = xmmword_239F11A1C;
  *(_QWORD *)&__p[15] = 0x31A16241E171ALL;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F11A1C, v79, v80, v81);
  v86 = v85;
  v87 = strlen(v85);
  if (v87 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v88 = v87;
  if (v87 >= 0x17)
  {
    v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17)
      v90 = v87 | 7;
    v91 = v90 + 1;
    v89 = operator new(v90 + 1);
    *(_QWORD *)&__dst[8] = v88;
    *(_QWORD *)&__dst[16] = v91 | 0x8000000000000000;
    *(_QWORD *)__dst = v89;
  }
  else
  {
    __dst[23] = v87;
    v89 = __dst;
    if (!v87)
      goto LABEL_93;
  }
  memmove(v89, v86, v88);
LABEL_93:
  v89[v88] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 36));
  v95 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_97;
  v96 = &v452[1]->info;
  do
    v97 = __ldaxr((unint64_t *)v96);
  while (__stlxr(v97 - 1, (unint64_t *)v96));
  if (v97)
  {
LABEL_97:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
  std::__shared_weak_count::__release_weak(v95);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_98:
    operator delete(*(void **)__dst);
LABEL_99:
  *(_OWORD *)__dst = xmmword_239F11A33;
  *(_OWORD *)&__dst[15] = *(__int128 *)((char *)&xmmword_239F11A33 + 15);
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11A33 + 15), v92, v93, v94);
  v99 = v98;
  v100 = strlen(v98);
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v101 = v100;
  if (v100 >= 0x17)
  {
    v103 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v103 = v100 | 7;
    v104 = v103 + 1;
    v102 = operator new(v103 + 1);
    *(_QWORD *)&__p[8] = v101;
    *(_QWORD *)&__p[16] = v104 | 0x8000000000000000;
    *(_QWORD *)__p = v102;
  }
  else
  {
    __p[23] = v100;
    v102 = __p;
    if (!v100)
      goto LABEL_107;
  }
  memmove(v102, v99, v101);
LABEL_107:
  v102[v101] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 40));
  v108 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_111;
  v109 = &v452[1]->info;
  do
    v110 = __ldaxr((unint64_t *)v109);
  while (__stlxr(v110 - 1, (unint64_t *)v109));
  if (v110)
  {
LABEL_111:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
  std::__shared_weak_count::__release_weak(v108);
  if ((__p[23] & 0x80000000) != 0)
LABEL_112:
    operator delete(*(void **)__p);
LABEL_113:
  *(_OWORD *)__dst = xmmword_239F11A52;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F11A62;
  *(_WORD *)&__dst[32] = 16;
  sub_2396F0120(__dst, (int16x8_t)xmmword_239F11A52, dbl_239F11A62[0], v105, v106, v107);
  v112 = v111;
  v113 = strlen(v111);
  if (v113 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v114 = v113;
  if (v113 >= 0x17)
  {
    v116 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17)
      v116 = v113 | 7;
    v117 = v116 + 1;
    v115 = operator new(v116 + 1);
    *(_QWORD *)&__p[8] = v114;
    *(_QWORD *)&__p[16] = v117 | 0x8000000000000000;
    *(_QWORD *)__p = v115;
  }
  else
  {
    __p[23] = v113;
    v115 = __p;
    if (!v113)
      goto LABEL_121;
  }
  memmove(v115, v112, v114);
LABEL_121:
  v115[v114] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 44));
  v118 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_125;
  v119 = &v452[1]->info;
  do
    v120 = __ldaxr((unint64_t *)v119);
  while (__stlxr(v120 - 1, (unint64_t *)v119));
  if (v120)
  {
LABEL_125:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
  std::__shared_weak_count::__release_weak(v118);
  if ((__p[23] & 0x80000000) != 0)
LABEL_126:
    operator delete(*(void **)__p);
LABEL_127:
  strcpy(__p, "6XC[iEYCDUSi@_SAE");
  v121 = sub_239A91B18((int8x16_t *)__p);
  v122 = strlen(v121->i8);
  if (v122 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v123 = v122;
  if (v122 >= 0x17)
  {
    v125 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v122 | 7) != 0x17)
      v125 = v122 | 7;
    v126 = v125 + 1;
    v124 = operator new(v125 + 1);
    *(_QWORD *)&__dst[8] = v123;
    *(_QWORD *)&__dst[16] = v126 | 0x8000000000000000;
    *(_QWORD *)__dst = v124;
  }
  else
  {
    __dst[23] = v122;
    v124 = __dst;
    if (!v122)
      goto LABEL_135;
  }
  memmove(v124, v121, v123);
LABEL_135:
  v124[v123] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB4A9C(a1, v452[0], (uint64_t)(a2 + 56));
  v130 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_139;
  v131 = &v452[1]->info;
  do
    v132 = __ldaxr((unint64_t *)v131);
  while (__stlxr(v132 - 1, (unint64_t *)v131));
  if (v132)
  {
LABEL_139:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
  std::__shared_weak_count::__release_weak(v130);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_140:
    operator delete(*(void **)__dst);
LABEL_141:
  *(_OWORD *)__dst = xmmword_239F11A86;
  *(_OWORD *)&__dst[12] = *(__int128 *)((char *)&xmmword_239F11A86 + 12);
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11A86 + 12), v127, v128, v129);
  v134 = v133;
  v135 = strlen(v133);
  if (v135 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v136 = v135;
  if (v135 >= 0x17)
  {
    v138 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v135 | 7) != 0x17)
      v138 = v135 | 7;
    v139 = v138 + 1;
    v137 = operator new(v138 + 1);
    *(_QWORD *)&__p[8] = v136;
    *(_QWORD *)&__p[16] = v139 | 0x8000000000000000;
    *(_QWORD *)__p = v137;
  }
  else
  {
    __p[23] = v135;
    v137 = __p;
    if (!v135)
      goto LABEL_149;
  }
  memmove(v137, v134, v136);
LABEL_149:
  v137[v136] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB4A9C(a1, v452[0], (uint64_t)(a2 + 64));
  v142 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_153;
  v143 = &v452[1]->info;
  do
    v144 = __ldaxr((unint64_t *)v143);
  while (__stlxr(v144 - 1, (unint64_t *)v143));
  if (v144)
  {
LABEL_153:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
  std::__shared_weak_count::__release_weak(v142);
  if ((__p[23] & 0x80000000) != 0)
LABEL_154:
    operator delete(*(void **)__p);
LABEL_155:
  strcpy(__dst, "U801<4;\n10;&<!,\n'4!<:\n!='0&=:91");
  sub_2396F06F0((uint64_t)__dst, *(int32x4_t *)"U801<4;\n10;&<!,\n'4!<:\n!='0&=:91",
    *(int8x16_t *)"'4!<:\n!='0&=:91",
    v140,
    v141);
  v146 = v145;
  v147 = strlen(v145);
  if (v147 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v148 = v147;
  if (v147 >= 0x17)
  {
    v150 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v147 | 7) != 0x17)
      v150 = v147 | 7;
    v151 = v150 + 1;
    v149 = operator new(v150 + 1);
    *(_QWORD *)&__p[8] = v148;
    *(_QWORD *)&__p[16] = v151 | 0x8000000000000000;
    *(_QWORD *)__p = v149;
  }
  else
  {
    __p[23] = v147;
    v149 = __p;
    if (!v147)
      goto LABEL_163;
  }
  memmove(v149, v146, v148);
LABEL_163:
  v149[v148] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 264));
  v155 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_167;
  v156 = &v452[1]->info;
  do
    v157 = __ldaxr((unint64_t *)v156);
  while (__stlxr(v157 - 1, (unint64_t *)v156));
  if (v157)
  {
LABEL_167:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_168;
  }
  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
  std::__shared_weak_count::__release_weak(v155);
  if ((__p[23] & 0x80000000) != 0)
LABEL_168:
    operator delete(*(void **)__p);
LABEL_169:
  *(_OWORD *)__dst = xmmword_239F11AC2;
  *(_OWORD *)&__dst[10] = *(__int128 *)((char *)&xmmword_239F11AC2 + 10);
  sub_239A93C04(__dst, *(int32x4_t *)((char *)&xmmword_239F11AC2 + 10), v152, v153, v154);
  v159 = v158;
  v160 = strlen(v158);
  if (v160 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v161 = v160;
  if (v160 >= 0x17)
  {
    v163 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v160 | 7) != 0x17)
      v163 = v160 | 7;
    v164 = v163 + 1;
    v162 = operator new(v163 + 1);
    *(_QWORD *)&__p[8] = v161;
    *(_QWORD *)&__p[16] = v164 | 0x8000000000000000;
    *(_QWORD *)__p = v162;
  }
  else
  {
    __p[23] = v160;
    v162 = __p;
    if (!v160)
      goto LABEL_177;
  }
  memmove(v162, v159, v161);
LABEL_177:
  v162[v161] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 284));
  v167 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_181;
  v168 = &v452[1]->info;
  do
    v169 = __ldaxr((unint64_t *)v168);
  while (__stlxr(v169 - 1, (unint64_t *)v168));
  if (v169)
  {
LABEL_181:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_182;
  }
  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
  std::__shared_weak_count::__release_weak(v167);
  if ((__p[23] & 0x80000000) != 0)
LABEL_182:
    operator delete(*(void **)__p);
LABEL_183:
  *(_OWORD *)__dst = xmmword_239F11ADC;
  *(int16x8_t *)&__dst[16] = xmmword_239F11AEC;
  *(_QWORD *)&__dst[31] = 0x7F777473687E69;
  sub_2396F0804(__dst, 5.25266663e208, xmmword_239F11AEC, v165, v166);
  v171 = v170;
  v172 = strlen(v170);
  if (v172 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v173 = v172;
  if (v172 >= 0x17)
  {
    v175 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17)
      v175 = v172 | 7;
    v176 = v175 + 1;
    v174 = operator new(v175 + 1);
    *(_QWORD *)&__p[8] = v173;
    *(_QWORD *)&__p[16] = v176 | 0x8000000000000000;
    *(_QWORD *)__p = v174;
  }
  else
  {
    __p[23] = v172;
    v174 = __p;
    if (!v172)
      goto LABEL_191;
  }
  memmove(v174, v171, v173);
LABEL_191:
  v174[v173] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 288));
  v180 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_195;
  v181 = &v452[1]->info;
  do
    v182 = __ldaxr((unint64_t *)v181);
  while (__stlxr(v182 - 1, (unint64_t *)v181));
  if (v182)
  {
LABEL_195:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_196;
  }
  ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
  std::__shared_weak_count::__release_weak(v180);
  if ((__p[23] & 0x80000000) != 0)
LABEL_196:
    operator delete(*(void **)__p);
LABEL_197:
  *(_OWORD *)__p = xmmword_239F11B03;
  *(_QWORD *)&__p[16] = 0x204190C1F321FLL;
  sub_2396F1A4C((uint64_t)__p, (int32x4_t)xmmword_239F11B03, v177, v178, v179);
  v184 = v183;
  v185 = strlen(v183);
  if (v185 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v186 = v185;
  if (v185 >= 0x17)
  {
    v188 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v185 | 7) != 0x17)
      v188 = v185 | 7;
    v189 = v188 + 1;
    v187 = operator new(v188 + 1);
    *(_QWORD *)&__dst[8] = v186;
    *(_QWORD *)&__dst[16] = v189 | 0x8000000000000000;
    *(_QWORD *)__dst = v187;
  }
  else
  {
    __dst[23] = v185;
    v187 = __dst;
    if (!v185)
      goto LABEL_205;
  }
  memmove(v187, v184, v186);
LABEL_205:
  v187[v186] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 292));
  v190 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_209;
  v191 = &v452[1]->info;
  do
    v192 = __ldaxr((unint64_t *)v191);
  while (__stlxr(v192 - 1, (unint64_t *)v191));
  if (v192)
  {
LABEL_209:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_210;
  }
  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
  std::__shared_weak_count::__release_weak(v190);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_210:
    operator delete(*(void **)__dst);
LABEL_211:
  *(_OWORD *)__p = xmmword_239F11B1B;
  strcpy(&__p[16], "\n");
  v193 = sub_239A91B18((int8x16_t *)__p);
  v194 = strlen(v193->i8);
  if (v194 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v195 = v194;
  if (v194 >= 0x17)
  {
    v197 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v194 | 7) != 0x17)
      v197 = v194 | 7;
    v198 = v197 + 1;
    v196 = operator new(v197 + 1);
    *(_QWORD *)&__dst[8] = v195;
    *(_QWORD *)&__dst[16] = v198 | 0x8000000000000000;
    *(_QWORD *)__dst = v196;
  }
  else
  {
    __dst[23] = v194;
    v196 = __dst;
    if (!v194)
      goto LABEL_219;
  }
  memmove(v196, v193, v195);
LABEL_219:
  v196[v195] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 296));
  v199 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_223;
  v200 = &v452[1]->info;
  do
    v201 = __ldaxr((unint64_t *)v200);
  while (__stlxr(v201 - 1, (unint64_t *)v200));
  if (v201)
  {
LABEL_223:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_225;
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
  std::__shared_weak_count::__release_weak(v199);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_224:
    operator delete(*(void **)__dst);
LABEL_225:
  strcpy((char *)v452, "D !*+-7-*#\x1B/");
  v202 = sub_239510ECC((uint64_t)v452);
  v203 = strlen(v202);
  if (v203 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v204 = v203;
  if (v203 >= 0x17)
  {
    v206 = (v203 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v203 | 7) != 0x17)
      v206 = v203 | 7;
    v207 = v206 + 1;
    v205 = operator new(v206 + 1);
    *(_QWORD *)&__dst[8] = v204;
    *(_QWORD *)&__dst[16] = v207 | 0x8000000000000000;
    *(_QWORD *)__dst = v205;
  }
  else
  {
    __dst[23] = v203;
    v205 = __dst;
    if (!v203)
      goto LABEL_233;
  }
  memmove(v205, v202, v204);
LABEL_233:
  v205[v204] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC(a1, *(const void **)__p, (uint64_t)(a2 + 300));
  v211 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_237;
  v212 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v213 = __ldaxr(v212);
  while (__stlxr(v213 - 1, v212));
  if (v213)
  {
LABEL_237:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_239;
    goto LABEL_238;
  }
  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
  std::__shared_weak_count::__release_weak(v211);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_238:
    operator delete(*(void **)__dst);
LABEL_239:
  strcpy(__p, "/Z\\JpHZFKJKpIFC[J]");
  sub_23958E450((uint64_t)__p, *(int32x4_t *)"/Z\\JpHZFKJKpIFC[J]", v208, v209, v210);
  v215 = v214;
  v216 = strlen(v214);
  if (v216 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v217 = v216;
  if (v216 >= 0x17)
  {
    v219 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17)
      v219 = v216 | 7;
    v220 = v219 + 1;
    v218 = operator new(v219 + 1);
    *(_QWORD *)&__dst[8] = v217;
    *(_QWORD *)&__dst[16] = v220 | 0x8000000000000000;
    *(_QWORD *)__dst = v218;
  }
  else
  {
    __dst[23] = v216;
    v218 = __dst;
    if (!v216)
      goto LABEL_247;
  }
  memmove(v218, v215, v217);
LABEL_247:
  v218[v217] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_2396B4EAC(a1, v452[0], a2 + 304);
  v224 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_251;
  v225 = &v452[1]->info;
  do
    v226 = __ldaxr((unint64_t *)v225);
  while (__stlxr(v226 - 1, (unint64_t *)v225));
  if (v226)
  {
LABEL_251:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_253;
    goto LABEL_252;
  }
  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
  std::__shared_weak_count::__release_weak(v224);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_252:
    operator delete(*(void **)__dst);
LABEL_253:
  strcpy(__p, "'@RNCBCxANKSBUxBWTNKHI");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)"'@RNCBCxANKSBUxBWTNKHI", v221, v222, v223);
  v228 = v227;
  v229 = strlen(v227);
  if (v229 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v230 = v229;
  if (v229 >= 0x17)
  {
    v232 = (v229 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v229 | 7) != 0x17)
      v232 = v229 | 7;
    v233 = v232 + 1;
    v231 = operator new(v232 + 1);
    *(_QWORD *)&__dst[8] = v230;
    *(_QWORD *)&__dst[16] = v233 | 0x8000000000000000;
    *(_QWORD *)__dst = v231;
  }
  else
  {
    __dst[23] = v229;
    v231 = __dst;
    if (!v229)
      goto LABEL_261;
  }
  memmove(v231, v228, v230);
LABEL_261:
  v231[v230] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 308));
  v237 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_265;
  v238 = &v452[1]->info;
  do
    v239 = __ldaxr((unint64_t *)v238);
  while (__stlxr(v239 - 1, (unint64_t *)v238));
  if (v239)
  {
LABEL_265:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_267;
    goto LABEL_266;
  }
  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
  std::__shared_weak_count::__release_weak(v237);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_266:
    operator delete(*(void **)__dst);
LABEL_267:
  strcpy(__p, ">HWMW\\WRWJGaN_J]VaMWD[");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)">HWMW\\WRWJGaN_J]VaMWD[", v234, v235, v236);
  v241 = v240;
  v242 = strlen(v240);
  if (v242 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v243 = v242;
  if (v242 >= 0x17)
  {
    v245 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v242 | 7) != 0x17)
      v245 = v242 | 7;
    v246 = v245 + 1;
    v244 = operator new(v245 + 1);
    *(_QWORD *)&__dst[8] = v243;
    *(_QWORD *)&__dst[16] = v246 | 0x8000000000000000;
    *(_QWORD *)__dst = v244;
  }
  else
  {
    __dst[23] = v242;
    v244 = __dst;
    if (!v242)
      goto LABEL_275;
  }
  memmove(v244, v241, v243);
LABEL_275:
  v244[v243] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB4A9C(a1, v452[0], (uint64_t)(a2 + 272));
  v250 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_279;
  v251 = &v452[1]->info;
  do
    v252 = __ldaxr((unint64_t *)v251);
  while (__stlxr(v252 - 1, (unint64_t *)v251));
  if (v252)
  {
LABEL_279:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_281;
    goto LABEL_280;
  }
  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
  std::__shared_weak_count::__release_weak(v250);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_280:
    operator delete(*(void **)__dst);
LABEL_281:
  *(_OWORD *)__dst = xmmword_239F11B6E;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F11B7E;
  strcpy(&__dst[32], ">");
  sub_2396F0120(__dst, (int16x8_t)xmmword_239F11B6E, dbl_239F11B7E[0], v247, v248, v249);
  v254 = v253;
  v255 = strlen(v253);
  if (v255 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v256 = v255;
  if (v255 >= 0x17)
  {
    v258 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v255 | 7) != 0x17)
      v258 = v255 | 7;
    v259 = v258 + 1;
    v257 = operator new(v258 + 1);
    *(_QWORD *)&__p[8] = v256;
    *(_QWORD *)&__p[16] = v259 | 0x8000000000000000;
    *(_QWORD *)__p = v257;
  }
  else
  {
    __p[23] = v255;
    v257 = __p;
    if (!v255)
      goto LABEL_289;
  }
  memmove(v257, v254, v256);
LABEL_289:
  v257[v256] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 280));
  v262 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_293;
  v263 = &v452[1]->info;
  do
    v264 = __ldaxr((unint64_t *)v263);
  while (__stlxr(v264 - 1, (unint64_t *)v263));
  if (v264)
  {
LABEL_293:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
  ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
  std::__shared_weak_count::__release_weak(v262);
  if ((__p[23] & 0x80000000) != 0)
LABEL_294:
    operator delete(*(void **)__p);
LABEL_295:
  *(_OWORD *)__dst = xmmword_239F11B90;
  v266 = v265;
  v267 = strlen(v265);
  if (v267 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v268 = v267;
  if (v267 >= 0x17)
  {
    v270 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v267 | 7) != 0x17)
      v270 = v267 | 7;
    v271 = v270 + 1;
    v269 = operator new(v270 + 1);
    *(_QWORD *)&__p[8] = v268;
    *(_QWORD *)&__p[16] = v271 | 0x8000000000000000;
    *(_QWORD *)__p = v269;
  }
  else
  {
    __p[23] = v267;
    v269 = __p;
    if (!v267)
      goto LABEL_303;
  }
  memmove(v269, v266, v268);
LABEL_303:
  v269[v268] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_2396B4EAC(a1, v452[0], a2 + 176);
  v275 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_307;
  v276 = &v452[1]->info;
  do
    v277 = __ldaxr((unint64_t *)v276);
  while (__stlxr(v277 - 1, (unint64_t *)v276));
  if (v277)
  {
LABEL_307:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_309;
    goto LABEL_308;
  }
  ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
  std::__shared_weak_count::__release_weak(v275);
  if ((__p[23] & 0x80000000) != 0)
LABEL_308:
    operator delete(*(void **)__p);
LABEL_309:
  *(_OWORD *)__p = xmmword_239F11BB3;
  *(_QWORD *)&__p[16] = 0x233E253230370ELL;
  sub_2396F1A4C((uint64_t)__p, (int32x4_t)xmmword_239F11BB3, v272, v273, v274);
  v279 = v278;
  v280 = strlen(v278);
  if (v280 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v281 = v280;
  if (v280 >= 0x17)
  {
    v283 = (v280 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v280 | 7) != 0x17)
      v283 = v280 | 7;
    v284 = v283 + 1;
    v282 = operator new(v283 + 1);
    *(_QWORD *)&__dst[8] = v281;
    *(_QWORD *)&__dst[16] = v284 | 0x8000000000000000;
    *(_QWORD *)__dst = v282;
  }
  else
  {
    __dst[23] = v280;
    v282 = __dst;
    if (!v280)
      goto LABEL_317;
  }
  memmove(v282, v279, v281);
LABEL_317:
  v282[v281] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 180));
  v288 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_321;
  v289 = &v452[1]->info;
  do
    v290 = __ldaxr((unint64_t *)v289);
  while (__stlxr(v290 - 1, (unint64_t *)v289));
  if (v290)
  {
LABEL_321:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_323;
    goto LABEL_322;
  }
  ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
  std::__shared_weak_count::__release_weak(v288);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_322:
    operator delete(*(void **)__dst);
LABEL_323:
  strcpy(__dst, "*D_GuIEZFKDKXuIEDY^XKCD^YuZOXuLXKGO");
  sub_2396F01D4(__dst, *(int16x8_t *)"*D_GuIEZFKDKXuIEDY^XKCD^YuZOXuLXKGO", *(double *)"DY^XKCD^YuZOXuLXKGO", v285, v286, v287);
  v292 = v291;
  v293 = strlen(v291);
  if (v293 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v294 = v293;
  if (v293 >= 0x17)
  {
    v296 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v293 | 7) != 0x17)
      v296 = v293 | 7;
    v297 = v296 + 1;
    v295 = operator new(v296 + 1);
    *(_QWORD *)&__p[8] = v294;
    *(_QWORD *)&__p[16] = v297 | 0x8000000000000000;
    *(_QWORD *)__p = v295;
  }
  else
  {
    __p[23] = v293;
    v295 = __p;
    if (!v293)
      goto LABEL_331;
  }
  memmove(v295, v292, v294);
LABEL_331:
  v295[v294] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB4A9C(a1, v452[0], (uint64_t)(a2 + 200));
  v300 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_335;
  v301 = &v452[1]->info;
  do
    v302 = __ldaxr((unint64_t *)v301);
  while (__stlxr(v302 - 1, (unint64_t *)v301));
  if (v302)
  {
LABEL_335:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_337;
    goto LABEL_336;
  }
  ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
  std::__shared_weak_count::__release_weak(v300);
  if ((__p[23] & 0x80000000) != 0)
LABEL_336:
    operator delete(*(void **)__p);
LABEL_337:
  *(_OWORD *)__dst = xmmword_239F11BEF;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F11BFF;
  strcpy(&__dst[31], "<?7");
  sub_2396F0060(__dst, (int16x8_t)xmmword_239F11BEF, dbl_239F11BFF[0], v298, v299);
  v304 = v303;
  v305 = strlen(v303);
  if (v305 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v306 = v305;
  if (v305 >= 0x17)
  {
    v308 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v305 | 7) != 0x17)
      v308 = v305 | 7;
    v309 = v308 + 1;
    v307 = operator new(v308 + 1);
    *(_QWORD *)&__p[8] = v306;
    *(_QWORD *)&__p[16] = v309 | 0x8000000000000000;
    *(_QWORD *)__p = v307;
  }
  else
  {
    __p[23] = v305;
    v307 = __p;
    if (!v305)
      goto LABEL_345;
  }
  memmove(v307, v304, v306);
LABEL_345:
  v307[v306] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 184));
  v312 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_349;
  v313 = &v452[1]->info;
  do
    v314 = __ldaxr((unint64_t *)v313);
  while (__stlxr(v314 - 1, (unint64_t *)v313));
  if (v314)
  {
LABEL_349:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_351;
    goto LABEL_350;
  }
  ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
  std::__shared_weak_count::__release_weak(v312);
  if ((__p[23] & 0x80000000) != 0)
LABEL_350:
    operator delete(*(void **)__p);
LABEL_351:
  strcpy(__dst, "W'8>9#\b89\b';692\b690;2\b#?%2$?8;3");
  sub_2396F06F0((uint64_t)__dst, *(int32x4_t *)"W'8>9#\b89\b';692\b690;2\b#?%2$?8;3",
    *(int8x16_t *)"690;2\b#?%2$?8;3",
    v310,
    v311);
  v316 = v315;
  v317 = strlen(v315);
  if (v317 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v318 = v317;
  if (v317 >= 0x17)
  {
    v320 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v317 | 7) != 0x17)
      v320 = v317 | 7;
    v321 = v320 + 1;
    v319 = operator new(v320 + 1);
    *(_QWORD *)&__p[8] = v318;
    *(_QWORD *)&__p[16] = v321 | 0x8000000000000000;
    *(_QWORD *)__p = v319;
  }
  else
  {
    __p[23] = v317;
    v319 = __p;
    if (!v317)
      goto LABEL_359;
  }
  memmove(v319, v316, v318);
LABEL_359:
  v319[v318] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 188));
  v325 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_363;
  v326 = &v452[1]->info;
  do
    v327 = __ldaxr((unint64_t *)v326);
  while (__stlxr(v327 - 1, (unint64_t *)v326));
  if (v327)
  {
LABEL_363:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_365;
    goto LABEL_364;
  }
  ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
  std::__shared_weak_count::__release_weak(v325);
  if ((__p[23] & 0x80000000) != 0)
LABEL_364:
    operator delete(*(void **)__p);
LABEL_365:
  strcpy(__dst, "\awkfifuXorebuXkhttXsoubtohkc");
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)"XkhttXsoubtohkc", v322, v323, v324);
  v329 = v328;
  v330 = strlen(v328);
  if (v330 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v331 = v330;
  if (v330 >= 0x17)
  {
    v333 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v330 | 7) != 0x17)
      v333 = v330 | 7;
    v334 = v333 + 1;
    v332 = operator new(v333 + 1);
    *(_QWORD *)&__p[8] = v331;
    *(_QWORD *)&__p[16] = v334 | 0x8000000000000000;
    *(_QWORD *)__p = v332;
  }
  else
  {
    __p[23] = v330;
    v332 = __p;
    if (!v330)
      goto LABEL_373;
  }
  memmove(v332, v329, v331);
LABEL_373:
  v332[v331] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_2397373B0(a1, v452[0], (uint64_t)(a2 + 192));
  v338 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_377;
  v339 = &v452[1]->info;
  do
    v340 = __ldaxr((unint64_t *)v339);
  while (__stlxr(v340 - 1, (unint64_t *)v339));
  if (v340)
  {
LABEL_377:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_379;
    goto LABEL_378;
  }
  ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
  std::__shared_weak_count::__release_weak(v338);
  if ((__p[23] & 0x80000000) != 0)
LABEL_378:
    operator delete(*(void **)__p);
LABEL_379:
  *(_OWORD *)__p = xmmword_239F11C4F;
  strcpy(&__p[16], "8+4");
  sub_23958E55C((uint64_t)__p, (int32x4_t)xmmword_239F11C4F, v335, v336, v337);
  v342 = v341;
  v343 = strlen(v341);
  if (v343 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v344 = v343;
  if (v343 >= 0x17)
  {
    v346 = (v343 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v343 | 7) != 0x17)
      v346 = v343 | 7;
    v347 = v346 + 1;
    v345 = operator new(v346 + 1);
    *(_QWORD *)&__dst[8] = v344;
    *(_QWORD *)&__dst[16] = v347 | 0x8000000000000000;
    *(_QWORD *)__dst = v345;
  }
  else
  {
    __dst[23] = v343;
    v345 = __dst;
    if (!v343)
      goto LABEL_387;
  }
  memmove(v345, v342, v344);
LABEL_387:
  v345[v344] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 340));
  v351 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_391;
  v352 = &v452[1]->info;
  do
    v353 = __ldaxr((unint64_t *)v352);
  while (__stlxr(v353 - 1, (unint64_t *)v352));
  if (v353)
  {
LABEL_391:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_393;
    goto LABEL_392;
  }
  ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
  std::__shared_weak_count::__release_weak(v351);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_392:
    operator delete(*(void **)__dst);
LABEL_393:
  strcpy(__p, "*\\EROFuLCF^OXuXK^CE");
  sub_23958E55C((uint64_t)__p, *(int32x4_t *)"*\\EROFuLCF^OXuXK^CE", v348, v349, v350);
  v355 = v354;
  v356 = strlen(v354);
  if (v356 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v357 = v356;
  if (v356 >= 0x17)
  {
    v359 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v356 | 7) != 0x17)
      v359 = v356 | 7;
    v360 = v359 + 1;
    v358 = operator new(v359 + 1);
    *(_QWORD *)&__dst[8] = v357;
    *(_QWORD *)&__dst[16] = v360 | 0x8000000000000000;
    *(_QWORD *)__dst = v358;
  }
  else
  {
    __dst[23] = v356;
    v358 = __dst;
    if (!v356)
      goto LABEL_401;
  }
  memmove(v358, v355, v357);
LABEL_401:
  v358[v357] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 344));
  v364 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_405;
  v365 = &v452[1]->info;
  do
    v366 = __ldaxr((unint64_t *)v365);
  while (__stlxr(v366 - 1, (unint64_t *)v365));
  if (v366)
  {
LABEL_405:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_407;
    goto LABEL_406;
  }
  ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
  std::__shared_weak_count::__release_weak(v364);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_406:
    operator delete(*(void **)__dst);
LABEL_407:
  *(_OWORD *)__dst = xmmword_239F11C77;
  *(_OWORD *)&__dst[10] = *(__int128 *)((char *)&xmmword_239F11C77 + 10);
  sub_239A93C04(__dst, *(int32x4_t *)((char *)&xmmword_239F11C77 + 10), v361, v362, v363);
  v368 = v367;
  v369 = strlen(v367);
  if (v369 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v370 = v369;
  if (v369 >= 0x17)
  {
    v372 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v369 | 7) != 0x17)
      v372 = v369 | 7;
    v373 = v372 + 1;
    v371 = operator new(v372 + 1);
    *(_QWORD *)&__p[8] = v370;
    *(_QWORD *)&__p[16] = v373 | 0x8000000000000000;
    *(_QWORD *)__p = v371;
  }
  else
  {
    __p[23] = v369;
    v371 = __p;
    if (!v369)
      goto LABEL_415;
  }
  memmove(v371, v368, v370);
LABEL_415:
  v371[v370] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_2396B4EAC(a1, v452[0], a2 + 348);
  v376 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_419;
  v377 = &v452[1]->info;
  do
    v378 = __ldaxr((unint64_t *)v377);
  while (__stlxr(v378 - 1, (unint64_t *)v377));
  if (v378)
  {
LABEL_419:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_421;
    goto LABEL_420;
  }
  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
  std::__shared_weak_count::__release_weak(v376);
  if ((__p[23] & 0x80000000) != 0)
LABEL_420:
    operator delete(*(void **)__p);
LABEL_421:
  *(_OWORD *)__dst = xmmword_239F11C91;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F11CA1;
  *(_OWORD *)&__dst[27] = *(_OWORD *)((char *)&dbl_239F11CA1[1] + 3);
  sub_2396F0B4C(__dst, *(double *)((char *)&dbl_239F11CA1[1] + 3), dbl_239F11CA1[0], v374, v375);
  v380 = v379;
  v381 = strlen(v379);
  if (v381 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v382 = v381;
  if (v381 >= 0x17)
  {
    v384 = (v381 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v381 | 7) != 0x17)
      v384 = v381 | 7;
    v385 = v384 + 1;
    v383 = operator new(v384 + 1);
    *(_QWORD *)&__p[8] = v382;
    *(_QWORD *)&__p[16] = v385 | 0x8000000000000000;
    *(_QWORD *)__p = v383;
  }
  else
  {
    __p[23] = v381;
    v383 = __p;
    if (!v381)
      goto LABEL_429;
  }
  memmove(v383, v380, v382);
LABEL_429:
  v383[v382] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB4338(a1, v452[0], (uint64_t)(a2 + 312));
  v389 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_433;
  v390 = &v452[1]->info;
  do
    v391 = __ldaxr((unint64_t *)v390);
  while (__stlxr(v391 - 1, (unint64_t *)v390));
  if (v391)
  {
LABEL_433:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_435;
    goto LABEL_434;
  }
  ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
  std::__shared_weak_count::__release_weak(v389);
  if ((__p[23] & 0x80000000) != 0)
LABEL_434:
    operator delete(*(void **)__p);
LABEL_435:
  *(_OWORD *)__dst = xmmword_239F11CBC;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F11CCC;
  *(_OWORD *)&__dst[32] = xmmword_239F11CDC;
  v450 = 0x3C35322F342D04;
  v392 = sub_239BC4420(__dst, 2.1675518e-57, dbl_239F11CCC[0], v386, v387, v388);
  v393 = strlen((const char *)v392);
  if (v393 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v394 = v393;
  if (v393 >= 0x17)
  {
    v396 = (v393 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v393 | 7) != 0x17)
      v396 = v393 | 7;
    v397 = v396 + 1;
    v395 = operator new(v396 + 1);
    *(_QWORD *)&__p[8] = v394;
    *(_QWORD *)&__p[16] = v397 | 0x8000000000000000;
    *(_QWORD *)__p = v395;
  }
  else
  {
    __p[23] = v393;
    v395 = __p;
    if (!v393)
      goto LABEL_443;
  }
  memmove(v395, v392, v394);
LABEL_443:
  v395[v394] = 0;
  sub_239629EF4((uint64_t)__p, v452);
  sub_239BB47DC(a1, v452[0], (uint64_t)(a2 + 316));
  v398 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_447;
  v399 = &v452[1]->info;
  do
    v400 = __ldaxr((unint64_t *)v399);
  while (__stlxr(v400 - 1, (unint64_t *)v399));
  if (v400)
  {
LABEL_447:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_449;
    goto LABEL_448;
  }
  ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
  std::__shared_weak_count::__release_weak(v398);
  if ((__p[23] & 0x80000000) != 0)
LABEL_448:
    operator delete(*(void **)__p);
LABEL_449:
  strcpy(__p, "+NHCDtMBG_NYt_R[N");
  v401 = sub_239A91B18((int8x16_t *)__p);
  v402 = strlen(v401->i8);
  if (v402 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v403 = v402;
  if (v402 >= 0x17)
  {
    v405 = (v402 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v402 | 7) != 0x17)
      v405 = v402 | 7;
    v406 = v405 + 1;
    v404 = operator new(v405 + 1);
    *(_QWORD *)&__dst[8] = v403;
    *(_QWORD *)&__dst[16] = v406 | 0x8000000000000000;
    *(_QWORD *)__dst = v404;
  }
  else
  {
    __dst[23] = v402;
    v404 = __dst;
    if (!v402)
      goto LABEL_457;
  }
  memmove(v404, v401, v403);
LABEL_457:
  v404[v403] = 0;
  sub_239629EF4((uint64_t)__dst, &v446);
  v410 = v446;
  v412 = *(const __CFDictionary **)a1;
  v411 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v411)
    goto LABEL_462;
  p_shared_owners = (unint64_t *)&v411->__shared_owners_;
  do
    v414 = __ldxr(p_shared_owners);
  while (__stxr(v414 + 1, p_shared_owners));
  do
    v415 = __ldaxr(p_shared_owners);
  while (__stlxr(v415 - 1, p_shared_owners));
  if (!v415)
  {
    ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
    std::__shared_weak_count::__release_weak(v411);
    if (!v412)
      goto LABEL_541;
  }
  else
  {
LABEL_462:
    if (!v412)
      goto LABEL_541;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, v410))
    goto LABEL_541;
  v448 = a2[20];
  sub_2396297BC(v452, &v448);
  v417 = v452[0];
  v416 = (std::__shared_weak_count *)v452[1];
  if (v452[1])
  {
    v418 = &v452[1]->info;
    do
      v419 = __ldxr((unint64_t *)v418);
    while (__stxr(v419 + 1, (unint64_t *)v418));
    do
      v420 = __ldaxr((unint64_t *)v418);
    while (__stlxr(v420 - 1, (unint64_t *)v418));
    if (!v420)
    {
      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
      std::__shared_weak_count::__release_weak(v416);
      if (!v417)
        goto LABEL_471;
      goto LABEL_470;
    }
  }
  if (v417)
LABEL_470:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v410, v452[0]);
LABEL_471:
  v421 = (std::__shared_weak_count *)v452[1];
  if (v452[1])
  {
    v422 = &v452[1]->info;
    do
      v423 = __ldaxr((unint64_t *)v422);
    while (__stlxr(v423 - 1, (unint64_t *)v422));
    if (!v423)
    {
      ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
      std::__shared_weak_count::__release_weak(v421);
    }
  }
LABEL_541:
  v424 = v447;
  if (!v447)
    goto LABEL_545;
  v425 = (unint64_t *)&v447->__shared_owners_;
  do
    v426 = __ldaxr(v425);
  while (__stlxr(v426 - 1, v425));
  if (v426)
  {
LABEL_545:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_547;
    goto LABEL_546;
  }
  ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
  std::__shared_weak_count::__release_weak(v424);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_546:
    operator delete(*(void **)__dst);
LABEL_547:
  strcpy(__p, "!EDQUI~RDORNS~BNOGHF");
  sub_2396EFB50((uint64_t)__p, *(int32x4_t *)"!EDQUI~RDORNS~BNOGHF", v407, v408, v409);
  v428 = v427;
  v429 = strlen(v427);
  if (v429 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v430 = v429;
  if (v429 >= 0x17)
  {
    v432 = (v429 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v429 | 7) != 0x17)
      v432 = v429 | 7;
    v433 = v432 + 1;
    v431 = operator new(v432 + 1);
    *(_QWORD *)&__dst[8] = v430;
    *(_QWORD *)&__dst[16] = v433 | 0x8000000000000000;
    *(_QWORD *)__dst = v431;
  }
  else
  {
    __dst[23] = v429;
    v431 = __dst;
    if (!v429)
      goto LABEL_555;
  }
  memmove(v431, v428, v430);
LABEL_555:
  v431[v430] = 0;
  sub_239629EF4((uint64_t)__dst, v452);
  sub_239BC4570(a1, v452[0], a2);
  v434 = (std::__shared_weak_count *)v452[1];
  if (!v452[1])
    goto LABEL_559;
  v435 = &v452[1]->info;
  do
    v436 = __ldaxr((unint64_t *)v435);
  while (__stlxr(v436 - 1, (unint64_t *)v435));
  if (v436)
  {
LABEL_559:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_561;
    goto LABEL_560;
  }
  ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
  std::__shared_weak_count::__release_weak(v434);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_560:
    operator delete(*(void **)__dst);
LABEL_561:
  v452[0] = (CFStringRef)0x7C667A51637B600ELL;
  strcpy((char *)&v452[1], "koj}");
  v437 = sub_239510ECC((uint64_t)v452);
  v438 = strlen(v437);
  if (v438 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v439 = v438;
  if (v438 >= 0x17)
  {
    v441 = (v438 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v438 | 7) != 0x17)
      v441 = v438 | 7;
    v442 = v441 + 1;
    v440 = operator new(v441 + 1);
    *(_QWORD *)&__dst[8] = v439;
    *(_QWORD *)&__dst[16] = v442 | 0x8000000000000000;
    *(_QWORD *)__dst = v440;
  }
  else
  {
    __dst[23] = v438;
    v440 = __dst;
    if (!v438)
      goto LABEL_569;
  }
  memmove(v440, v437, v439);
LABEL_569:
  v440[v439] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4338(a1, *(const void **)__p, (uint64_t)(a2 + 28));
  v443 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_573;
  v444 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v445 = __ldaxr(v444);
  while (__stlxr(v445 - 1, v444));
  if (v445)
  {
LABEL_573:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    goto LABEL_574;
  }
  ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
  std::__shared_weak_count::__release_weak(v443);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_574:
    operator delete(*(void **)__dst);
}

void sub_239BC4180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  sub_239416DA0(v30 - 88);
  sub_239416DA0((uint64_t)&a10);
  if (a18 < 0)
    operator delete(__p);
  sub_239416DA0(v29);
  _Unwind_Resume(a1);
}

void sub_239BC4308()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4310()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4318()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4320()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4328()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4330()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4338()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4340()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4348()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4350()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4358()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4360()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4368()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4370()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4378()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4380()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4388()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4390()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4398()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43A0()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43A8()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43B0()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43B8()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43C0()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43C8()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43D0()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43D8()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43E0()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43E8()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43F0()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC43F8()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4400()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4408()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4410()
{
  JUMPOUT(0x239BC42F8);
}

void sub_239BC4418()
{
  JUMPOUT(0x239BC42F8);
}

unsigned __int8 *sub_239BC4420(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int8x16_t v17;

  v6 = *a1;
  v7 = a1[10];
  a4.i32[0] = *a1;
  v8 = a4;
  v8.i8[1] = a1[9];
  v9 = a4;
  v9.i8[1] = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v10 = (int32x4_t)vzip1q_s16(v9, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v11 = (int8x16_t)vzip1q_s32(v10, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v12 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v13 = (int16x8_t)veorq_s8(vqtbl1q_s8(v11, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v12);
  *(int16x8_t *)(a1 + 17) = v13;
  *(__int16 *)((char *)a4.i16 + 1) = a1[41];
  v13.i32[0] = a1[42];
  v13.i8[4] = a1[43];
  v12.i32[0] = *((_DWORD *)a1 + 3);
  *(__int16 *)((char *)v13.i16 + 1) = v13.u8[4];
  v14 = (int32x4_t)vzip1q_s16(a4, v13);
  v13.i32[0] = *((_DWORD *)a1 + 11);
  v15 = (int8x16_t)vzip1q_s32(v14, (int32x4_t)v13);
  v13.i64[0] = *(_QWORD *)(a1 + 33);
  v13.i8[8] = v6;
  v13.i8[15] = a1[48];
  v16 = (int16x8_t)vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_239EC65D0);
  v17 = veorq_s8(vqtbl1q_s8(v15, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v16);
  *(int8x16_t *)(a1 + 33) = v17;
  a1[49] ^= v6;
  a1[50] ^= v6;
  a1[51] ^= v6;
  a1[52] ^= v6;
  a1[53] ^= v6;
  v17.i64[0] = *(_QWORD *)(a1 + 1);
  a1[54] ^= v6;
  v16.i32[0] = v7;
  v16.i8[4] = a1[11];
  v16.i8[1] = v16.i8[4];
  a1[55] = 0;
  v17.i8[8] = v6;
  v17.i8[15] = a1[16];
  *(int8x16_t *)(a1 + 1) = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32((int32x4_t)vzip1q_s16(v8, v16), v12), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(v17, (int8x16_t)xmmword_239EC65D0));
  return a1 + 1;
}

void sub_239BC4570(uint64_t a1, const void *a2, char *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;
  char v21;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return;
  v21 = *a3;
  sub_2396297BC(&value, &v21);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_13;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_13:
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_239BC46C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239BC46D4(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return;
  sub_239629EF4(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_13;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_13:
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_239BC481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239BC4830(_OWORD *a1, uint64_t a2)
{
  int8x16_t v4;
  double v5;
  int32x4_t v6;
  const char *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  double v25;
  int32x4_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  size_t v32;
  size_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  double v38;
  int32x4_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const char *v43;
  const char *v44;
  size_t v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  const char *v53;
  size_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t *v59;
  size_t v60;
  size_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  double v66;
  int32x4_t v67;
  std::__shared_weak_count *v68;
  uint64_t *p_info;
  unint64_t v70;
  const char *v71;
  const char *v72;
  size_t v73;
  size_t v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  double v79;
  int32x4_t v80;
  std::__shared_weak_count *v81;
  uint64_t *v82;
  unint64_t v83;
  const char *v84;
  const char *v85;
  size_t v86;
  size_t v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t v91;
  double v92;
  int32x4_t v93;
  std::__shared_weak_count *v94;
  uint64_t *v95;
  unint64_t v96;
  const char *v97;
  const char *v98;
  size_t v99;
  size_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t *v105;
  unint64_t v106;
  int8x16_t *v107;
  size_t v108;
  size_t v109;
  _OWORD *v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t *v114;
  unint64_t v115;
  int8x16_t *v116;
  size_t v117;
  size_t v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  int32x4_t v122;
  double v123;
  int32x4_t v124;
  std::__shared_weak_count *v125;
  uint64_t *v126;
  unint64_t v127;
  unsigned __int8 *v128;
  size_t v129;
  size_t v130;
  _OWORD *v131;
  uint64_t v132;
  uint64_t v133;
  int8x16_t v134;
  double v135;
  int32x4_t v136;
  std::__shared_weak_count *v137;
  uint64_t *v138;
  unint64_t v139;
  const char *v140;
  const char *v141;
  size_t v142;
  size_t v143;
  _OWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int8x16_t v147;
  double v148;
  int32x4_t v149;
  std::__shared_weak_count *v150;
  uint64_t *v151;
  unint64_t v152;
  const char *v153;
  const char *v154;
  size_t v155;
  size_t v156;
  _OWORD *v157;
  uint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t *v161;
  unint64_t v162;
  const char *v163;
  size_t v164;
  size_t v165;
  _OWORD *v166;
  uint64_t v167;
  uint64_t v168;
  int8x16_t v169;
  double v170;
  int32x4_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  const char *v175;
  const char *v176;
  size_t v177;
  size_t v178;
  _OWORD *v179;
  uint64_t v180;
  uint64_t v181;
  int8x16_t v182;
  double v183;
  int32x4_t v184;
  std::__shared_weak_count *v185;
  uint64_t *v186;
  unint64_t v187;
  const char *v188;
  const char *v189;
  size_t v190;
  size_t v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t *v196;
  unint64_t v197;
  int8x16_t v198;
  double v199;
  int32x4_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *p_shared_owners;
  unint64_t v206;
  const char *v207;
  const char *v208;
  size_t v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  size_t v215;
  size_t v216;
  _OWORD *v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  const char *v223;
  const char *v224;
  size_t v225;
  size_t v226;
  _OWORD *v227;
  uint64_t v228;
  uint64_t v229;
  int8x16_t v230;
  double v231;
  int32x4_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  const char *v236;
  const char *v237;
  size_t v238;
  size_t v239;
  _OWORD *v240;
  uint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  const char *v246;
  const char *v247;
  size_t v248;
  size_t v249;
  _OWORD *v250;
  uint64_t v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  int8x16_t *v256;
  size_t v257;
  size_t v258;
  _OWORD *v259;
  uint64_t v260;
  uint64_t v261;
  int8x16_t v262;
  double v263;
  int32x4_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  const char *v268;
  const char *v269;
  size_t v270;
  size_t v271;
  _OWORD *v272;
  uint64_t v273;
  uint64_t v274;
  int8x16_t v275;
  double v276;
  int32x4_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  const char *v281;
  const char *v282;
  size_t v283;
  size_t v284;
  _OWORD *v285;
  uint64_t v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  const char *v291;
  size_t v292;
  size_t v293;
  _OWORD *v294;
  uint64_t v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  const char *v300;
  size_t v301;
  size_t v302;
  _OWORD *v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  int8x16_t *v309;
  size_t v310;
  size_t v311;
  _OWORD *v312;
  uint64_t v313;
  uint64_t v314;
  int32x4_t v315;
  double v316;
  int32x4_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unsigned __int8 *v321;
  size_t v322;
  size_t v323;
  _OWORD *v324;
  uint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  const char *v330;
  size_t v331;
  size_t v332;
  _OWORD *v333;
  uint64_t v334;
  uint64_t v335;
  int8x16_t v336;
  double v337;
  int32x4_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  const char *v342;
  const char *v343;
  size_t v344;
  size_t v345;
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  int32x4_t v349;
  double v350;
  int32x4_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unsigned __int8 *v355;
  size_t v356;
  size_t v357;
  _OWORD *v358;
  uint64_t v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  __int128 v370;
  CFStringRef v371[4];
  void *v372[2];
  unint64_t v373;
  _OWORD __dst[2];
  _BYTE __p[24];
  __int128 v376;
  uint64_t v377;

  v377 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  *(_OWORD *)__p = xmmword_239F11FE1;
  strcpy(&__p[15], ">:=");
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F11FE1, v4, v5, v6);
  v8 = v7;
  v9 = strlen(v7);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *((_QWORD *)&__dst[0] + 1) = v10;
    *(_QWORD *)&__dst[1] = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v11;
  }
  else
  {
    BYTE7(__dst[1]) = v9;
    v11 = __dst;
    if (!v9)
      goto LABEL_9;
  }
  memmove(v11, v8, v10);
LABEL_9:
  *((_BYTE *)v11 + v10) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v372);
  sub_2396B4148((uint64_t)a1, v372[0], a2 + 176);
  v14 = (std::__shared_weak_count *)v372[1];
  if (!v372[1])
    goto LABEL_13;
  v15 = (unint64_t *)((char *)v372[1] + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_13:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (SBYTE7(__dst[1]) < 0)
LABEL_14:
    operator delete(*(void **)&__dst[0]);
LABEL_15:
  *(_OWORD *)v372 = xmmword_239F0C240;
  sub_23950F8E4((uint64_t)v372);
  v18 = v17;
  v19 = strlen(v17);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    *((_QWORD *)&__dst[0] + 1) = v20;
    *(_QWORD *)&__dst[1] = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v21;
  }
  else
  {
    BYTE7(__dst[1]) = v19;
    v21 = __dst;
    if (!v19)
      goto LABEL_23;
  }
  memmove(v21, v18, v20);
LABEL_23:
  *((_BYTE *)v21 + v20) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)a1, *(const void **)__p, a2 + 192);
  v27 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_27;
  v28 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_27:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SBYTE7(__dst[1]) < 0)
LABEL_28:
    operator delete(*(void **)&__dst[0]);
LABEL_29:
  strcpy(__p, "W\"$2\b558/\b>1\b6!6>;65;2");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)"W\"$2\b558/\b>1\b6!6>;65;2", v24, v25, v26);
  v31 = v30;
  v32 = strlen(v30);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    *((_QWORD *)&__dst[0] + 1) = v33;
    *(_QWORD *)&__dst[1] = v36 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v34;
  }
  else
  {
    BYTE7(__dst[1]) = v32;
    v34 = __dst;
    if (!v32)
      goto LABEL_37;
  }
  memmove(v34, v31, v33);
LABEL_37:
  *((_BYTE *)v34 + v33) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v372);
  sub_2396B4EAC((uint64_t)a1, v372[0], (_BYTE *)(a2 + 196));
  v40 = (std::__shared_weak_count *)v372[1];
  if (!v372[1])
    goto LABEL_41;
  v41 = (unint64_t *)((char *)v372[1] + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (v42)
  {
LABEL_41:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if (SBYTE7(__dst[1]) < 0)
LABEL_42:
    operator delete(*(void **)&__dst[0]);
LABEL_43:
  __dst[0] = xmmword_239F1200B;
  *(_OWORD *)((char *)__dst + 10) = *(__int128 *)((char *)&xmmword_239F1200B + 10);
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)((char *)&xmmword_239F1200B + 10), v37, v38, v39);
  v44 = v43;
  v45 = strlen(v43);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    *(_QWORD *)&__p[8] = v46;
    *(_QWORD *)&__p[16] = v49 | 0x8000000000000000;
    *(_QWORD *)__p = v47;
  }
  else
  {
    __p[23] = v45;
    v47 = __p;
    if (!v45)
      goto LABEL_51;
  }
  memmove(v47, v44, v46);
LABEL_51:
  v47[v46] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v372);
  sub_239BB4A9C((uint64_t)a1, v372[0], a2 + 184);
  v50 = (std::__shared_weak_count *)v372[1];
  if (!v372[1])
    goto LABEL_55;
  v51 = (unint64_t *)((char *)v372[1] + 8);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
LABEL_55:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
  std::__shared_weak_count::__release_weak(v50);
  if ((__p[23] & 0x80000000) != 0)
LABEL_56:
    operator delete(*(void **)__p);
LABEL_57:
  *(_QWORD *)&v370 = 0x3E0608070F0E0261;
  BYTE10(v370) = 0;
  WORD4(v370) = 5381;
  v53 = (const char *)sub_23958E518((uint64_t)&v370);
  v54 = strlen(v53);
  if (v54 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v55 = (void *)v54;
  if (v54 >= 0x17)
  {
    v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v57 = v54 | 7;
    v58 = v57 + 1;
    v56 = operator new(v57 + 1);
    v372[1] = v55;
    v373 = v58 | 0x8000000000000000;
    v372[0] = v56;
    goto LABEL_64;
  }
  HIBYTE(v373) = v54;
  v56 = v372;
  if (v54)
LABEL_64:
    memmove(v56, v53, (size_t)v55);
  *((_BYTE *)v55 + (_QWORD)v56) = 0;
  sub_23962C714(&v376);
  strcpy(__p, "'UBJHQBxKFU@BxSUN");
  v59 = sub_239A91B18((int8x16_t *)__p);
  v60 = strlen(v59->i8);
  if (v60 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v61 = v60;
  if (v60 >= 0x17)
  {
    v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v63 = v60 | 7;
    v64 = v63 + 1;
    v62 = operator new(v63 + 1);
    *((_QWORD *)&__dst[0] + 1) = v61;
    *(_QWORD *)&__dst[1] = v64 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v62;
  }
  else
  {
    BYTE7(__dst[1]) = v60;
    v62 = __dst;
    if (!v60)
      goto LABEL_73;
  }
  memmove(v62, v59, v61);
LABEL_73:
  *((_BYTE *)v62 + v61) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_2396B4EAC((uint64_t)&v376, v371[0], (_BYTE *)a2);
  v68 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_77;
  p_info = &v371[1]->info;
  do
    v70 = __ldaxr((unint64_t *)p_info);
  while (__stlxr(v70 - 1, (unint64_t *)p_info));
  if (v70)
  {
LABEL_77:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
  std::__shared_weak_count::__release_weak(v68);
  if (SBYTE7(__dst[1]) < 0)
LABEL_78:
    operator delete(*(void **)&__dst[0]);
LABEL_79:
  strcpy(__p, "X>14,=*\a9??*=++1.=6=++");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)"X>14,=*\a9??*=++1.=6=++", v65, v66, v67);
  v72 = v71;
  v73 = strlen(v71);
  if (v73 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v74 = v73;
  if (v73 >= 0x17)
  {
    v76 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v76 = v73 | 7;
    v77 = v76 + 1;
    v75 = operator new(v76 + 1);
    *((_QWORD *)&__dst[0] + 1) = v74;
    *(_QWORD *)&__dst[1] = v77 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v75;
  }
  else
  {
    BYTE7(__dst[1]) = v73;
    v75 = __dst;
    if (!v73)
      goto LABEL_87;
  }
  memmove(v75, v72, v74);
LABEL_87:
  *((_BYTE *)v75 + v74) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB47DC((uint64_t)&v376, v371[0], a2 + 4);
  v81 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_91;
  v82 = &v371[1]->info;
  do
    v83 = __ldaxr((unint64_t *)v82);
  while (__stlxr(v83 - 1, (unint64_t *)v82));
  if (v83)
  {
LABEL_91:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_93;
    goto LABEL_92;
  }
  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
  std::__shared_weak_count::__release_weak(v81);
  if (SBYTE7(__dst[1]) < 0)
LABEL_92:
    operator delete(*(void **)&__dst[0]);
LABEL_93:
  *(_OWORD *)__p = xmmword_239F11E78;
  strcpy(&__p[15], "gz|");
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F11E78, v78, v79, v80);
  v85 = v84;
  v86 = strlen(v84);
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v87 = v86;
  if (v86 >= 0x17)
  {
    v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v89 = v86 | 7;
    v90 = v89 + 1;
    v88 = operator new(v89 + 1);
    *((_QWORD *)&__dst[0] + 1) = v87;
    *(_QWORD *)&__dst[1] = v90 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v88;
  }
  else
  {
    BYTE7(__dst[1]) = v86;
    v88 = __dst;
    if (!v86)
      goto LABEL_101;
  }
  memmove(v88, v85, v87);
LABEL_101:
  *((_BYTE *)v88 + v87) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_2397373B0((uint64_t)&v376, v371[0], a2 + 8);
  v94 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_105;
  v95 = &v371[1]->info;
  do
    v96 = __ldaxr((unint64_t *)v95);
  while (__stlxr(v96 - 1, (unint64_t *)v95));
  if (v96)
  {
LABEL_105:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_107;
    goto LABEL_106;
  }
  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
  std::__shared_weak_count::__release_weak(v94);
  if (SBYTE7(__dst[1]) < 0)
LABEL_106:
    operator delete(*(void **)&__dst[0]);
LABEL_107:
  strcpy(__p, "\nor~xki~Uygee~bdoyy");
  sub_23958E55C((uint64_t)__p, *(int32x4_t *)"\nor~xki~Uygee~bdoyy", v91, v92, v93);
  v98 = v97;
  v99 = strlen(v97);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    *((_QWORD *)&__dst[0] + 1) = v100;
    *(_QWORD *)&__dst[1] = v103 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v101;
  }
  else
  {
    BYTE7(__dst[1]) = v99;
    v101 = __dst;
    if (!v99)
      goto LABEL_115;
  }
  memmove(v101, v98, v100);
LABEL_115:
  *((_BYTE *)v101 + v100) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB47DC((uint64_t)&v376, v371[0], a2 + 16);
  v104 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_119;
  v105 = &v371[1]->info;
  do
    v106 = __ldaxr((unint64_t *)v105);
  while (__stlxr(v106 - 1, (unint64_t *)v105));
  if (v106)
  {
LABEL_119:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_120;
  }
  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
  std::__shared_weak_count::__release_weak(v104);
  if (SBYTE7(__dst[1]) < 0)
LABEL_120:
    operator delete(*(void **)&__dst[0]);
LABEL_121:
  strcpy(__p, "-FHH]rNNr[H_YrCX@");
  v107 = sub_239A91B18((int8x16_t *)__p);
  v108 = strlen(v107->i8);
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v109 = v108;
  if (v108 >= 0x17)
  {
    v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v111 = v108 | 7;
    v112 = v111 + 1;
    v110 = operator new(v111 + 1);
    *((_QWORD *)&__dst[0] + 1) = v109;
    *(_QWORD *)&__dst[1] = v112 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v110;
  }
  else
  {
    BYTE7(__dst[1]) = v108;
    v110 = __dst;
    if (!v108)
      goto LABEL_129;
  }
  memmove(v110, v107, v109);
LABEL_129:
  *((_BYTE *)v110 + v109) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB4338((uint64_t)&v376, v371[0], a2 + 20);
  v113 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_133;
  v114 = &v371[1]->info;
  do
    v115 = __ldaxr((unint64_t *)v114);
  while (__stlxr(v115 - 1, (unint64_t *)v114));
  if (v115)
  {
LABEL_133:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_135;
    goto LABEL_134;
  }
  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if (SBYTE7(__dst[1]) < 0)
LABEL_134:
    operator delete(*(void **)&__dst[0]);
LABEL_135:
  *(_OWORD *)__p = xmmword_239F11EB1;
  *(_WORD *)&__p[16] = 27;
  v116 = sub_239A91B18((int8x16_t *)__p);
  v117 = strlen(v116->i8);
  if (v117 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v118 = v117;
  if (v117 >= 0x17)
  {
    v120 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v117 | 7) != 0x17)
      v120 = v117 | 7;
    v121 = v120 + 1;
    v119 = operator new(v120 + 1);
    *((_QWORD *)&__dst[0] + 1) = v118;
    *(_QWORD *)&__dst[1] = v121 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v119;
  }
  else
  {
    BYTE7(__dst[1]) = v117;
    v119 = __dst;
    if (!v117)
      goto LABEL_143;
  }
  memmove(v119, v116, v118);
LABEL_143:
  *((_BYTE *)v119 + v118) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB47DC((uint64_t)&v376, v371[0], a2 + 24);
  v125 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_147;
  v126 = &v371[1]->info;
  do
    v127 = __ldaxr((unint64_t *)v126);
  while (__stlxr(v127 - 1, (unint64_t *)v126));
  if (v127)
  {
LABEL_147:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_149;
    goto LABEL_148;
  }
  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
  std::__shared_weak_count::__release_weak(v125);
  if (SBYTE7(__dst[1]) < 0)
LABEL_148:
    operator delete(*(void **)&__dst[0]);
LABEL_149:
  *(_OWORD *)__p = xmmword_239F11EC3;
  *(_QWORD *)&__p[14] = 0x120B07350B0E08;
  v128 = sub_239A90BEC(__p, (int8x16_t)xmmword_239F11EC3, v122, v123, v124);
  v129 = strlen((const char *)v128);
  if (v129 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v130 = v129;
  if (v129 >= 0x17)
  {
    v132 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v129 | 7) != 0x17)
      v132 = v129 | 7;
    v133 = v132 + 1;
    v131 = operator new(v132 + 1);
    *((_QWORD *)&__dst[0] + 1) = v130;
    *(_QWORD *)&__dst[1] = v133 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v131;
  }
  else
  {
    BYTE7(__dst[1]) = v129;
    v131 = __dst;
    if (!v129)
      goto LABEL_157;
  }
  memmove(v131, v128, v130);
LABEL_157:
  *((_BYTE *)v131 + v130) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB47DC((uint64_t)&v376, v371[0], a2 + 28);
  v137 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_161;
  v138 = &v371[1]->info;
  do
    v139 = __ldaxr((unint64_t *)v138);
  while (__stlxr(v139 - 1, (unint64_t *)v138));
  if (v139)
  {
LABEL_161:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_163;
    goto LABEL_162;
  }
  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
  std::__shared_weak_count::__release_weak(v137);
  if (SBYTE7(__dst[1]) < 0)
LABEL_162:
    operator delete(*(void **)&__dst[0]);
LABEL_163:
  *(_OWORD *)__p = xmmword_239F11ED9;
  *(_QWORD *)&__p[13] = 0x1514120F1A091ELL;
  sub_2396EFB50((uint64_t)__p, (int32x4_t)xmmword_239F11ED9, v134, v135, v136);
  v141 = v140;
  v142 = strlen(v140);
  if (v142 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v143 = v142;
  if (v142 >= 0x17)
  {
    v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v142 | 7) != 0x17)
      v145 = v142 | 7;
    v146 = v145 + 1;
    v144 = operator new(v145 + 1);
    *((_QWORD *)&__dst[0] + 1) = v143;
    *(_QWORD *)&__dst[1] = v146 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v144;
  }
  else
  {
    BYTE7(__dst[1]) = v142;
    v144 = __dst;
    if (!v142)
      goto LABEL_171;
  }
  memmove(v144, v141, v143);
LABEL_171:
  *((_BYTE *)v144 + v143) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB4338((uint64_t)&v376, v371[0], a2 + 32);
  v150 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_175;
  v151 = &v371[1]->info;
  do
    v152 = __ldaxr((unint64_t *)v151);
  while (__stlxr(v152 - 1, (unint64_t *)v151));
  if (v152)
  {
LABEL_175:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_177;
    goto LABEL_176;
  }
  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
  std::__shared_weak_count::__release_weak(v150);
  if (SBYTE7(__dst[1]) < 0)
LABEL_176:
    operator delete(*(void **)&__dst[0]);
LABEL_177:
  *(_OWORD *)__p = xmmword_239F11EEE;
  *(_QWORD *)&__p[15] = 0x767F71727F7A72;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F11EEE, v147, v148, v149);
  v154 = v153;
  v155 = strlen(v153);
  if (v155 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v156 = v155;
  if (v155 >= 0x17)
  {
    v158 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v155 | 7) != 0x17)
      v158 = v155 | 7;
    v159 = v158 + 1;
    v157 = operator new(v158 + 1);
    *((_QWORD *)&__dst[0] + 1) = v156;
    *(_QWORD *)&__dst[1] = v159 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v157;
  }
  else
  {
    BYTE7(__dst[1]) = v155;
    v157 = __dst;
    if (!v155)
      goto LABEL_185;
  }
  memmove(v157, v154, v156);
LABEL_185:
  *((_BYTE *)v157 + v156) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_2396B4EAC((uint64_t)&v376, v371[0], (_BYTE *)(a2 + 36));
  v160 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_189;
  v161 = &v371[1]->info;
  do
    v162 = __ldaxr((unint64_t *)v161);
  while (__stlxr(v162 - 1, (unint64_t *)v161));
  if (v162)
  {
LABEL_189:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_191;
    goto LABEL_190;
  }
  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
  std::__shared_weak_count::__release_weak(v160);
  if (SBYTE7(__dst[1]) < 0)
LABEL_190:
    operator delete(*(void **)&__dst[0]);
LABEL_191:
  v371[0] = (CFStringRef)0x2F3529023028335DLL;
  strcpy((char *)&v371[1], "8<9.");
  v163 = sub_239510ECC((uint64_t)v371);
  v164 = strlen(v163);
  if (v164 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v165 = v164;
  if (v164 >= 0x17)
  {
    v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17)
      v167 = v164 | 7;
    v168 = v167 + 1;
    v166 = operator new(v167 + 1);
    *((_QWORD *)&__dst[0] + 1) = v165;
    *(_QWORD *)&__dst[1] = v168 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v166;
  }
  else
  {
    BYTE7(__dst[1]) = v164;
    v166 = __dst;
    if (!v164)
      goto LABEL_199;
  }
  memmove(v166, v163, v165);
LABEL_199:
  *((_BYTE *)v166 + v165) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4338((uint64_t)&v376, *(const void **)__p, a2 + 40);
  v172 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_203;
  v173 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v174 = __ldaxr(v173);
  while (__stlxr(v174 - 1, v173));
  if (v174)
  {
LABEL_203:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_205;
    goto LABEL_204;
  }
  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
  std::__shared_weak_count::__release_weak(v172);
  if (SBYTE7(__dst[1]) < 0)
LABEL_204:
    operator delete(*(void **)&__dst[0]);
LABEL_205:
  *(_OWORD *)__p = xmmword_239F11F05;
  strcpy(&__p[15], "8>)\"+8$");
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F11F05, v169, v170, v171);
  v176 = v175;
  v177 = strlen(v175);
  if (v177 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v178 = v177;
  if (v177 >= 0x17)
  {
    v180 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v177 | 7) != 0x17)
      v180 = v177 | 7;
    v181 = v180 + 1;
    v179 = operator new(v180 + 1);
    *((_QWORD *)&__dst[0] + 1) = v178;
    *(_QWORD *)&__dst[1] = v181 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v179;
  }
  else
  {
    BYTE7(__dst[1]) = v177;
    v179 = __dst;
    if (!v177)
      goto LABEL_213;
  }
  memmove(v179, v176, v178);
LABEL_213:
  *((_BYTE *)v179 + v178) = 0;
  sub_239629EF4((uint64_t)__dst, v371);
  sub_239BB47DC((uint64_t)&v376, v371[0], a2 + 44);
  v185 = (std::__shared_weak_count *)v371[1];
  if (!v371[1])
    goto LABEL_217;
  v186 = &v371[1]->info;
  do
    v187 = __ldaxr((unint64_t *)v186);
  while (__stlxr(v187 - 1, (unint64_t *)v186));
  if (v187)
  {
LABEL_217:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_219;
    goto LABEL_218;
  }
  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
  std::__shared_weak_count::__release_weak(v185);
  if (SBYTE7(__dst[1]) < 0)
LABEL_218:
    operator delete(*(void **)&__dst[0]);
LABEL_219:
  __dst[0] = xmmword_239F11F1C;
  *(_OWORD *)((char *)__dst + 9) = *(__int128 *)((char *)&xmmword_239F11F1C + 9);
  sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11F1C + 9), v182, v183, v184);
  v189 = v188;
  v190 = strlen(v188);
  if (v190 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v191 = v190;
  if (v190 >= 0x17)
  {
    v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17)
      v193 = v190 | 7;
    v194 = v193 + 1;
    v192 = operator new(v193 + 1);
    *(_QWORD *)&__p[8] = v191;
    *(_QWORD *)&__p[16] = v194 | 0x8000000000000000;
    *(_QWORD *)__p = v192;
  }
  else
  {
    __p[23] = v190;
    v192 = __p;
    if (!v190)
      goto LABEL_227;
  }
  memmove(v192, v189, v191);
LABEL_227:
  v192[v191] = 0;
  sub_239629EF4((uint64_t)__p, v371);
  sub_239BB4338((uint64_t)&v376, v371[0], a2 + 48);
  v195 = (std::__shared_weak_count *)v371[1];
  if (v371[1])
  {
    v196 = &v371[1]->info;
    do
      v197 = __ldaxr((unint64_t *)v196);
    while (__stlxr(v197 - 1, (unint64_t *)v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_233;
      goto LABEL_232;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_232:
    operator delete(*(void **)__p);
LABEL_233:
  sub_239629EF4((uint64_t)v372, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&v376);
  v201 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_237;
  v202 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
    std::__shared_weak_count::__release_weak(v201);
    v204 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
    if (!*((_QWORD *)&v376 + 1))
      goto LABEL_241;
  }
  else
  {
LABEL_237:
    v204 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
    if (!*((_QWORD *)&v376 + 1))
      goto LABEL_241;
  }
  p_shared_owners = (unint64_t *)&v204->__shared_owners_;
  do
    v206 = __ldaxr(p_shared_owners);
  while (__stlxr(v206 - 1, p_shared_owners));
  if (v206)
  {
LABEL_241:
    if ((SHIBYTE(v373) & 0x80000000) == 0)
      goto LABEL_243;
    goto LABEL_242;
  }
  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
  std::__shared_weak_count::__release_weak(v204);
  if (SHIBYTE(v373) < 0)
LABEL_242:
    operator delete(v372[0]);
LABEL_243:
  strcpy((char *)v371, "0S_^VYWoBUVY^U]U^D");
  sub_23958E450((uint64_t)v371, *(int32x4_t *)"0S_^VYWoBUVY^U]U^D", v198, v199, v200);
  v208 = v207;
  v209 = strlen(v207);
  if (v209 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v210 = (void *)v209;
  if (v209 >= 0x17)
  {
    v212 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17)
      v212 = v209 | 7;
    v213 = v212 + 1;
    v211 = operator new(v212 + 1);
    v372[1] = v210;
    v373 = v213 | 0x8000000000000000;
    v372[0] = v211;
    goto LABEL_250;
  }
  HIBYTE(v373) = v209;
  v211 = v372;
  if (v209)
LABEL_250:
    memmove(v211, v208, (size_t)v210);
  *((_BYTE *)v210 + (_QWORD)v211) = 0;
  sub_23962C714(&v370);
  strcpy((char *)&v376, "0YDUBQDY_^");
  v214 = (const char *)sub_23958E518((uint64_t)&v376);
  v215 = strlen(v214);
  if (v215 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v216 = v215;
  if (v215 >= 0x17)
  {
    v218 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17)
      v218 = v215 | 7;
    v219 = v218 + 1;
    v217 = operator new(v218 + 1);
    *((_QWORD *)&__dst[0] + 1) = v216;
    *(_QWORD *)&__dst[1] = v219 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v217;
  }
  else
  {
    BYTE7(__dst[1]) = v215;
    v217 = __dst;
    if (!v215)
      goto LABEL_259;
  }
  memmove(v217, v214, v216);
LABEL_259:
  *((_BYTE *)v217 + v216) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4338((uint64_t)&v370, *(const void **)__p, a2 + 56);
  v220 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_263;
  v221 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v222 = __ldaxr(v221);
  while (__stlxr(v222 - 1, v221));
  if (v222)
  {
LABEL_263:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_265;
    goto LABEL_264;
  }
  ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
  std::__shared_weak_count::__release_weak(v220);
  if (SBYTE7(__dst[1]) < 0)
LABEL_264:
    operator delete(*(void **)&__dst[0]);
LABEL_265:
  strcpy((char *)&v376, "2BK@S_[Vm^WDW^");
  sub_23958E5E0((uint64_t)&v376);
  v224 = v223;
  v225 = strlen(v223);
  if (v225 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v226 = v225;
  if (v225 >= 0x17)
  {
    v228 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17)
      v228 = v225 | 7;
    v229 = v228 + 1;
    v227 = operator new(v228 + 1);
    *((_QWORD *)&__dst[0] + 1) = v226;
    *(_QWORD *)&__dst[1] = v229 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v227;
  }
  else
  {
    BYTE7(__dst[1]) = v225;
    v227 = __dst;
    if (!v225)
      goto LABEL_273;
  }
  memmove(v227, v224, v226);
LABEL_273:
  *((_BYTE *)v227 + v226) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4338((uint64_t)&v370, *(const void **)__p, a2 + 60);
  v233 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_277;
  v234 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v235 = __ldaxr(v234);
  while (__stlxr(v235 - 1, v234));
  if (v235)
  {
LABEL_277:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_279;
    goto LABEL_278;
  }
  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
  std::__shared_weak_count::__release_weak(v233);
  if (SBYTE7(__dst[1]) < 0)
LABEL_278:
    operator delete(*(void **)&__dst[0]);
LABEL_279:
  *(_OWORD *)__p = xmmword_239F11F35;
  *(_QWORD *)&__p[15] = 0x18111F1C11141CLL;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F11F35, v230, v231, v232);
  v237 = v236;
  v238 = strlen(v236);
  if (v238 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v239 = v238;
  if (v238 >= 0x17)
  {
    v241 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17)
      v241 = v238 | 7;
    v242 = v241 + 1;
    v240 = operator new(v241 + 1);
    *((_QWORD *)&__dst[0] + 1) = v239;
    *(_QWORD *)&__dst[1] = v242 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v240;
  }
  else
  {
    BYTE7(__dst[1]) = v238;
    v240 = __dst;
    if (!v238)
      goto LABEL_287;
  }
  memmove(v240, v237, v239);
LABEL_287:
  *((_BYTE *)v240 + v239) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_2396B4EAC((uint64_t)&v370, (const void *)v376, (_BYTE *)(a2 + 64));
  v243 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_291;
  v244 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v245 = __ldaxr(v244);
  while (__stlxr(v245 - 1, v244));
  if (v245)
  {
LABEL_291:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_292;
  }
  ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
  std::__shared_weak_count::__release_weak(v243);
  if (SBYTE7(__dst[1]) < 0)
LABEL_292:
    operator delete(*(void **)&__dst[0]);
LABEL_293:
  *(_QWORD *)&v376 = 0x777369457F686A1ALL;
  strcpy((char *)&v376 + 8, "Eh{nsu");
  sub_23958E5E0((uint64_t)&v376);
  v247 = v246;
  v248 = strlen(v246);
  if (v248 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v249 = v248;
  if (v248 >= 0x17)
  {
    v251 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v248 | 7) != 0x17)
      v251 = v248 | 7;
    v252 = v251 + 1;
    v250 = operator new(v251 + 1);
    *((_QWORD *)&__dst[0] + 1) = v249;
    *(_QWORD *)&__dst[1] = v252 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v250;
  }
  else
  {
    BYTE7(__dst[1]) = v248;
    v250 = __dst;
    if (!v248)
      goto LABEL_301;
  }
  memmove(v250, v247, v249);
LABEL_301:
  *((_BYTE *)v250 + v249) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)&v370, *(const void **)__p, a2 + 68);
  v253 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_305;
  v254 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v255 = __ldaxr(v254);
  while (__stlxr(v255 - 1, v254));
  if (v255)
  {
LABEL_305:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_307;
    goto LABEL_306;
  }
  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
  std::__shared_weak_count::__release_weak(v253);
  if (SBYTE7(__dst[1]) < 0)
LABEL_306:
    operator delete(*(void **)&__dst[0]);
LABEL_307:
  *(_OWORD *)__p = xmmword_239F11F4C;
  *(_WORD *)&__p[16] = 13;
  v256 = sub_239A91B18((int8x16_t *)__p);
  v257 = strlen(v256->i8);
  if (v257 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v258 = v257;
  if (v257 >= 0x17)
  {
    v260 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v257 | 7) != 0x17)
      v260 = v257 | 7;
    v261 = v260 + 1;
    v259 = operator new(v260 + 1);
    *((_QWORD *)&__dst[0] + 1) = v258;
    *(_QWORD *)&__dst[1] = v261 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v259;
  }
  else
  {
    BYTE7(__dst[1]) = v257;
    v259 = __dst;
    if (!v257)
      goto LABEL_315;
  }
  memmove(v259, v256, v258);
LABEL_315:
  *((_BYTE *)v259 + v258) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_239BB4338((uint64_t)&v370, (const void *)v376, a2 + 72);
  v265 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_319;
  v266 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v267 = __ldaxr(v266);
  while (__stlxr(v267 - 1, v266));
  if (v267)
  {
LABEL_319:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_321;
    goto LABEL_320;
  }
  ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
  std::__shared_weak_count::__release_weak(v265);
  if (SBYTE7(__dst[1]) < 0)
LABEL_320:
    operator delete(*(void **)&__dst[0]);
LABEL_321:
  strcpy(__p, "3]F^l^RKlGAZR]T_V@");
  sub_23958E450((uint64_t)__p, *(int32x4_t *)"3]F^l^RKlGAZR]T_V@", v262, v263, v264);
  v269 = v268;
  v270 = strlen(v268);
  if (v270 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v271 = v270;
  if (v270 >= 0x17)
  {
    v273 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v270 | 7) != 0x17)
      v273 = v270 | 7;
    v274 = v273 + 1;
    v272 = operator new(v273 + 1);
    *((_QWORD *)&__dst[0] + 1) = v271;
    *(_QWORD *)&__dst[1] = v274 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v272;
  }
  else
  {
    BYTE7(__dst[1]) = v270;
    v272 = __dst;
    if (!v270)
      goto LABEL_329;
  }
  memmove(v272, v269, v271);
LABEL_329:
  *((_BYTE *)v272 + v271) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_239BB4A9C((uint64_t)&v370, (const void *)v376, a2 + 80);
  v278 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_333;
  v279 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v280 = __ldaxr(v279);
  while (__stlxr(v280 - 1, v279));
  if (v280)
  {
LABEL_333:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_335;
    goto LABEL_334;
  }
  ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
  std::__shared_weak_count::__release_weak(v278);
  if (SBYTE7(__dst[1]) < 0)
LABEL_334:
    operator delete(*(void **)&__dst[0]);
LABEL_335:
  *(_OWORD *)__p = xmmword_239F11F71;
  *(_DWORD *)&__p[15] = 3749380;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F11F71, v275, v276, v277);
  v282 = v281;
  v283 = strlen(v281);
  if (v283 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v284 = v283;
  if (v283 >= 0x17)
  {
    v286 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v283 | 7) != 0x17)
      v286 = v283 | 7;
    v287 = v286 + 1;
    v285 = operator new(v286 + 1);
    *((_QWORD *)&__dst[0] + 1) = v284;
    *(_QWORD *)&__dst[1] = v287 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v285;
  }
  else
  {
    BYTE7(__dst[1]) = v283;
    v285 = __dst;
    if (!v283)
      goto LABEL_343;
  }
  memmove(v285, v282, v284);
LABEL_343:
  *((_BYTE *)v285 + v284) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_239BB4A9C((uint64_t)&v370, (const void *)v376, a2 + 136);
  v288 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_347;
  v289 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v290 = __ldaxr(v289);
  while (__stlxr(v290 - 1, v289));
  if (v290)
  {
LABEL_347:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_349;
    goto LABEL_348;
  }
  ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
  std::__shared_weak_count::__release_weak(v288);
  if (SBYTE7(__dst[1]) < 0)
LABEL_348:
    operator delete(*(void **)&__dst[0]);
LABEL_349:
  *(_QWORD *)&v376 = 0x1304093F15100760;
  BYTE8(v376) = 0;
  v291 = sub_239513718((char *)&v376);
  v292 = strlen(v291);
  if (v292 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v293 = v292;
  if (v292 >= 0x17)
  {
    v295 = (v292 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v292 | 7) != 0x17)
      v295 = v292 | 7;
    v296 = v295 + 1;
    v294 = operator new(v295 + 1);
    *((_QWORD *)&__dst[0] + 1) = v293;
    *(_QWORD *)&__dst[1] = v296 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v294;
  }
  else
  {
    BYTE7(__dst[1]) = v292;
    v294 = __dst;
    if (!v292)
      goto LABEL_357;
  }
  memmove(v294, v291, v293);
LABEL_357:
  *((_BYTE *)v294 + v293) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4494((uint64_t)&v370, *(const void **)__p, (uint64_t *)(a2 + 88));
  v297 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_361;
  v298 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v299 = __ldaxr(v298);
  while (__stlxr(v299 - 1, v298));
  if (v299)
  {
LABEL_361:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_363;
    goto LABEL_362;
  }
  ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
  std::__shared_weak_count::__release_weak(v297);
  if (SBYTE7(__dst[1]) < 0)
LABEL_362:
    operator delete(*(void **)&__dst[0]);
LABEL_363:
  *(_QWORD *)&v376 = 0x1208143F0D150E60;
  BYTE12(v376) = 0;
  DWORD2(v376) = 319029509;
  v300 = sub_239510ECC((uint64_t)&v376);
  v301 = strlen(v300);
  if (v301 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v302 = v301;
  if (v301 >= 0x17)
  {
    v304 = (v301 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v301 | 7) != 0x17)
      v304 = v301 | 7;
    v305 = v304 + 1;
    v303 = operator new(v304 + 1);
    *((_QWORD *)&__dst[0] + 1) = v302;
    *(_QWORD *)&__dst[1] = v305 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v303;
  }
  else
  {
    BYTE7(__dst[1]) = v301;
    v303 = __dst;
    if (!v301)
      goto LABEL_371;
  }
  memmove(v303, v300, v302);
LABEL_371:
  *((_BYTE *)v303 + v302) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4338((uint64_t)&v370, *(const void **)__p, a2 + 144);
  v306 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_375;
  v307 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v308 = __ldaxr(v307);
  while (__stlxr(v308 - 1, v307));
  if (v308)
  {
LABEL_375:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_377;
    goto LABEL_376;
  }
  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
  std::__shared_weak_count::__release_weak(v306);
  if (SBYTE7(__dst[1]) < 0)
LABEL_376:
    operator delete(*(void **)&__dst[0]);
LABEL_377:
  *(_OWORD *)__p = xmmword_239F11F84;
  *(_WORD *)&__p[16] = 12;
  v309 = sub_239A91B18((int8x16_t *)__p);
  v310 = strlen(v309->i8);
  if (v310 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v311 = v310;
  if (v310 >= 0x17)
  {
    v313 = (v310 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v310 | 7) != 0x17)
      v313 = v310 | 7;
    v314 = v313 + 1;
    v312 = operator new(v313 + 1);
    *((_QWORD *)&__dst[0] + 1) = v311;
    *(_QWORD *)&__dst[1] = v314 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v312;
  }
  else
  {
    BYTE7(__dst[1]) = v310;
    v312 = __dst;
    if (!v310)
      goto LABEL_385;
  }
  memmove(v312, v309, v311);
LABEL_385:
  *((_BYTE *)v312 + v311) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_239BB47DC((uint64_t)&v370, (const void *)v376, a2 + 148);
  v318 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_389;
  v319 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v320 = __ldaxr(v319);
  while (__stlxr(v320 - 1, v319));
  if (v320)
  {
LABEL_389:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_391;
    goto LABEL_390;
  }
  ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
  std::__shared_weak_count::__release_weak(v318);
  if (SBYTE7(__dst[1]) < 0)
LABEL_390:
    operator delete(*(void **)&__dst[0]);
LABEL_391:
  *(_OWORD *)__p = xmmword_239F11F96;
  strcpy(&__p[14], "ctgroih");
  v321 = sub_239A90BEC(__p, (int8x16_t)xmmword_239F11F96, v315, v316, v317);
  v322 = strlen((const char *)v321);
  if (v322 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v323 = v322;
  if (v322 >= 0x17)
  {
    v325 = (v322 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v322 | 7) != 0x17)
      v325 = v322 | 7;
    v326 = v325 + 1;
    v324 = operator new(v325 + 1);
    *((_QWORD *)&__dst[0] + 1) = v323;
    *(_QWORD *)&__dst[1] = v326 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v324;
  }
  else
  {
    BYTE7(__dst[1]) = v322;
    v324 = __dst;
    if (!v322)
      goto LABEL_399;
  }
  memmove(v324, v321, v323);
LABEL_399:
  *((_BYTE *)v324 + v323) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_239BB4338((uint64_t)&v370, (const void *)v376, a2 + 152);
  v327 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_403;
  v328 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v329 = __ldaxr(v328);
  while (__stlxr(v329 - 1, v328));
  if (v329)
  {
LABEL_403:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_405;
    goto LABEL_404;
  }
  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
  std::__shared_weak_count::__release_weak(v327);
  if (SBYTE7(__dst[1]) < 0)
LABEL_404:
    operator delete(*(void **)&__dst[0]);
LABEL_405:
  *(_QWORD *)&v376 = 0x3D2D013F2A3F3A5ELL;
  strcpy((char *)&v376 + 8, "?2;");
  v330 = sub_23958E4C8((uint64_t)&v376);
  v331 = strlen(v330);
  if (v331 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v332 = v331;
  if (v331 >= 0x17)
  {
    v334 = (v331 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v331 | 7) != 0x17)
      v334 = v331 | 7;
    v335 = v334 + 1;
    v333 = operator new(v334 + 1);
    *((_QWORD *)&__dst[0] + 1) = v332;
    *(_QWORD *)&__dst[1] = v335 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v333;
  }
  else
  {
    BYTE7(__dst[1]) = v331;
    v333 = __dst;
    if (!v331)
      goto LABEL_413;
  }
  memmove(v333, v330, v332);
LABEL_413:
  *((_BYTE *)v333 + v332) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)&v370, *(const void **)__p, a2 + 156);
  v339 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_417;
  v340 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v341 = __ldaxr(v340);
  while (__stlxr(v341 - 1, v340));
  if (v341)
  {
LABEL_417:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_419;
    goto LABEL_418;
  }
  ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
  std::__shared_weak_count::__release_weak(v339);
  if (SBYTE7(__dst[1]) < 0)
LABEL_418:
    operator delete(*(void **)&__dst[0]);
LABEL_419:
  strcpy((char *)__dst, "\nxofckhcfc~sUki~c|k~cedUlki~ex");
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)"~c|k~cedUlki~ex", v336, v337, v338);
  v343 = v342;
  v344 = strlen(v342);
  if (v344 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v345 = v344;
  if (v344 >= 0x17)
  {
    v347 = (v344 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v344 | 7) != 0x17)
      v347 = v344 | 7;
    v348 = v347 + 1;
    v346 = operator new(v347 + 1);
    *(_QWORD *)&__p[8] = v345;
    *(_QWORD *)&__p[16] = v348 | 0x8000000000000000;
    *(_QWORD *)__p = v346;
  }
  else
  {
    __p[23] = v344;
    v346 = __p;
    if (!v344)
      goto LABEL_427;
  }
  memmove(v346, v343, v345);
LABEL_427:
  v346[v345] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v376);
  sub_239BB47DC((uint64_t)&v370, (const void *)v376, a2 + 160);
  v352 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (!*((_QWORD *)&v376 + 1))
    goto LABEL_431;
  v353 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
  do
    v354 = __ldaxr(v353);
  while (__stlxr(v354 - 1, v353));
  if (v354)
  {
LABEL_431:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_433;
    goto LABEL_432;
  }
  ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
  std::__shared_weak_count::__release_weak(v352);
  if ((__p[23] & 0x80000000) != 0)
LABEL_432:
    operator delete(*(void **)__p);
LABEL_433:
  *(_OWORD *)__p = xmmword_239F11FCB;
  *(_QWORD *)&__p[14] = 0x3B34063D372C36;
  v355 = sub_239A90BEC(__p, (int8x16_t)xmmword_239F11FCB, v349, v350, v351);
  v356 = strlen((const char *)v355);
  if (v356 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v357 = v356;
  if (v356 >= 0x17)
  {
    v359 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v356 | 7) != 0x17)
      v359 = v356 | 7;
    v360 = v359 + 1;
    v358 = operator new(v359 + 1);
    *((_QWORD *)&__dst[0] + 1) = v357;
    *(_QWORD *)&__dst[1] = v360 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v358;
  }
  else
  {
    BYTE7(__dst[1]) = v356;
    v358 = __dst;
    if (!v356)
      goto LABEL_441;
  }
  memmove(v358, v355, v357);
LABEL_441:
  *((_BYTE *)v358 + v357) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v376);
  sub_239BB4A9C((uint64_t)&v370, (const void *)v376, a2 + 168);
  v361 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (*((_QWORD *)&v376 + 1))
  {
    v362 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
      if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        goto LABEL_447;
      goto LABEL_446;
    }
  }
  if (SBYTE7(__dst[1]) < 0)
LABEL_446:
    operator delete(*(void **)&__dst[0]);
LABEL_447:
  sub_239629EF4((uint64_t)v372, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&v370);
  v364 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_451;
  v365 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v366 = __ldaxr(v365);
  while (__stlxr(v366 - 1, v365));
  if (!v366)
  {
    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
    std::__shared_weak_count::__release_weak(v364);
    v367 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
    if (!*((_QWORD *)&v370 + 1))
      goto LABEL_455;
  }
  else
  {
LABEL_451:
    v367 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
    if (!*((_QWORD *)&v370 + 1))
      goto LABEL_455;
  }
  v368 = (unint64_t *)&v367->__shared_owners_;
  do
    v369 = __ldaxr(v368);
  while (__stlxr(v369 - 1, v368));
  if (v369)
  {
LABEL_455:
    if ((SHIBYTE(v373) & 0x80000000) == 0)
      return;
    goto LABEL_456;
  }
  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
  std::__shared_weak_count::__release_weak(v367);
  if (SHIBYTE(v373) < 0)
LABEL_456:
    operator delete(v372[0]);
}

void sub_239BC6B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  sub_239416DA0((uint64_t)&a22);
  sub_239416DA0((uint64_t)&a9);
  if (a20 < 0)
    operator delete(__p);
  sub_239416DA0(v34);
  _Unwind_Resume(a1);
}

void sub_239BC6DC4()
{
  JUMPOUT(0x239BC6DB4);
}

void sub_239BC6DCC()
{
  JUMPOUT(0x239BC6DB4);
}

void sub_239BC6DD4()
{
  JUMPOUT(0x239BC6DB4);
}

void sub_239BC6DDC()
{
  JUMPOUT(0x239BC6DB4);
}

void sub_239BC6DE4()
{
  JUMPOUT(0x239BC6DB4);
}

void sub_239BC6DEC(_OWORD *a1, uint64_t a2)
{
  int8x8_t *v4;
  size_t v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int8x16_t *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int8x16_t *v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  const char *v43;
  size_t v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  int8x16_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int8x16_t *v70;
  size_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  int8x16_t v76;
  double v77;
  int32x4_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const char *v82;
  const char *v83;
  size_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  const char *v98;
  size_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  size_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  const void *v111;
  __int128 v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  const char *v127;
  const char *v128;
  size_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  int16x8_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  const char *v138;
  const char *v139;
  size_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  int8x16_t v145;
  double v146;
  int32x4_t v147;
  const void *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  __int128 v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  const char *v163;
  const char *v164;
  size_t v165;
  void *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  int32x4_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  const char *v175;
  const char *v176;
  size_t v177;
  size_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  const char *v191;
  size_t v192;
  size_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  const char *v198;
  size_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  const char *v207;
  size_t v208;
  void *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  const char *v216;
  size_t v217;
  void *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  const char *v228;
  size_t v229;
  void *v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  const char *v240;
  size_t v241;
  void *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  const char *v252;
  size_t v253;
  void *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  const char *v264;
  size_t v265;
  size_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  int32x4_t v270;
  double v271;
  int32x4_t v272;
  unsigned __int8 *v273;
  size_t v274;
  void *v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  const char *v288;
  size_t v289;
  void *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  const char *v300;
  size_t v301;
  size_t v302;
  _BYTE *v303;
  uint64_t v304;
  uint64_t v305;
  int8x8_t *v306;
  size_t v307;
  void *v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  const char *v315;
  size_t v316;
  void *v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  const char *v336;
  size_t v337;
  size_t v338;
  _BYTE *v339;
  uint64_t v340;
  uint64_t v341;
  const char *v342;
  size_t v343;
  void *v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  __int128 v357;
  uint64_t v358;
  int8x16_t value[2];
  void *__p[2];
  int8x16_t v361;
  char v362;
  __int128 theDict;
  _BYTE __dst[24];
  _BYTE v365[24];
  __int128 v366;
  int8x8_t v367[3];

  v367[2] = *(int8x8_t *)MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  *(_QWORD *)&theDict = 0x50A0F130E0A1063;
  WORD4(theDict) = 26;
  v4 = sub_23950FF84((int8x8_t *)&theDict);
  v5 = strlen((const char *)v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)&__dst[8] = v6;
    *(_QWORD *)&__dst[16] = v9 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
    goto LABEL_8;
  }
  __dst[23] = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  v7[v6] = 0;
  sub_23962C714(&v366);
  strcpy(v365, "U&!'0;2!=");
  v10 = sub_23950FF84((int8x8_t *)v365);
  v11 = strlen((const char *)v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = v12;
    v361.i64[0] = v15 | 0x8000000000000000;
    __p[0] = v13;
  }
  else
  {
    v361.i8[7] = v11;
    v13 = __p;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)value);
  sub_239BB47DC((uint64_t)&v366, (const void *)value[0].i64[0], a2);
  v16 = (std::__shared_weak_count *)value[0].i64[1];
  if (!value[0].i64[1])
    goto LABEL_21;
  v17 = (unint64_t *)(value[0].i64[1] + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_21:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (v361.i8[7] < 0)
LABEL_22:
    operator delete(__p[0]);
LABEL_23:
  strcpy(value[0].i8, ":VUMeUXPe\\[Y_eWST");
  v19 = sub_239A91B18(value);
  v20 = strlen(v19->i8);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    __p[1] = v21;
    v361.i64[0] = v24 | 0x8000000000000000;
    __p[0] = v22;
  }
  else
  {
    v361.i8[7] = v20;
    v22 = __p;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, (size_t)v21);
LABEL_31:
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_2396B4148((uint64_t)&v366, *(const void **)v365, a2 + 4);
  v25 = *(std::__shared_weak_count **)&v365[8];
  if (!*(_QWORD *)&v365[8])
    goto LABEL_35;
  v26 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_35:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (v361.i8[7] < 0)
LABEL_36:
    operator delete(__p[0]);
LABEL_37:
  value[0] = (int8x16_t)xmmword_239F1212F;
  value[1].i16[0] = 3;
  v28 = sub_239A91B18(value);
  v29 = strlen(v28->i8);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    __p[1] = v30;
    v361.i64[0] = v33 | 0x8000000000000000;
    __p[0] = v31;
  }
  else
  {
    v361.i8[7] = v29;
    v31 = __p;
    if (!v29)
      goto LABEL_45;
  }
  memmove(v31, v28, (size_t)v30);
LABEL_45:
  *((_BYTE *)v30 + (_QWORD)v31) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_2396B4148((uint64_t)&v366, *(const void **)v365, a2 + 8);
  v34 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if ((v361.i8[7] & 0x80000000) == 0)
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  if (v361.i8[7] < 0)
LABEL_50:
    operator delete(__p[0]);
LABEL_51:
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, __p[0], (uint64_t)&v366);
  v37 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_55;
  v38 = (unint64_t *)((char *)__p[1] + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_59;
  }
  else
  {
LABEL_55:
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_59;
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (v42)
  {
LABEL_59:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_60:
    operator delete(*(void **)__dst);
LABEL_61:
  strcpy((char *)&v357, "[83:)/");
  v43 = sub_239513174((char *)&v357);
  v44 = strlen(v43);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    *(_QWORD *)&__dst[8] = v45;
    *(_QWORD *)&__dst[16] = v48 | 0x8000000000000000;
    *(_QWORD *)__dst = v46;
    goto LABEL_68;
  }
  __dst[23] = v44;
  v46 = __dst;
  if (v44)
LABEL_68:
    memmove(v46, v43, v45);
  v46[v45] = 0;
  sub_23962C714(&v366);
  *(_QWORD *)&theDict = 0x1F14130F1E167BLL;
  v49 = sub_23958E3FC((char *)&theDict);
  v50 = strlen(v49);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    v52 = operator new(v53 + 1);
    __p[1] = v51;
    v361.i64[0] = v54 | 0x8000000000000000;
    __p[0] = v52;
  }
  else
  {
    v361.i8[7] = v50;
    v52 = __p;
    if (!v50)
      goto LABEL_77;
  }
  memmove(v52, v49, (size_t)v51);
LABEL_77:
  *((_BYTE *)v51 + (_QWORD)v52) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  v55 = *(const void **)v365;
  v56 = v366;
  if (!*((_QWORD *)&v366 + 1))
    goto LABEL_82;
  v57 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
  do
    v58 = __ldxr(v57);
  while (__stxr(v58 + 1, v57));
  do
    v59 = __ldaxr(v57);
  while (__stlxr(v59 - 1, v57));
  if (!v59)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v56 + 1) + 16))(*((_QWORD *)&v56 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v56 + 1));
    if (!(_QWORD)v56)
      goto LABEL_107;
  }
  else
  {
LABEL_82:
    if (!(_QWORD)v56)
      goto LABEL_107;
  }
  if (sub_23962C8DC((const __CFDictionary *)v366, v55))
    goto LABEL_107;
  v367[0].i32[0] = *(_DWORD *)(a2 + 12);
  sub_239629634(value, v367);
  v60 = value[0];
  if (value[0].i64[1])
  {
    v61 = (unint64_t *)(value[0].i64[1] + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (!v63)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v60.i64[1] + 16))(v60.i64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v60.i64[1]);
      if (!v60.i64[0])
        goto LABEL_91;
      goto LABEL_90;
    }
  }
  if (v60.i64[0])
LABEL_90:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)v366, v55, (const void *)value[0].i64[0]);
LABEL_91:
  v64 = (std::__shared_weak_count *)value[0].i64[1];
  if (value[0].i64[1])
  {
    v65 = (unint64_t *)(value[0].i64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_107:
  v67 = *(std::__shared_weak_count **)&v365[8];
  if (!*(_QWORD *)&v365[8])
    goto LABEL_111;
  v68 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (v69)
  {
LABEL_111:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
  std::__shared_weak_count::__release_weak(v67);
  if (v361.i8[7] < 0)
LABEL_112:
    operator delete(__p[0]);
LABEL_113:
  value[0] = (int8x16_t)xmmword_239F12141;
  value[1].i16[0] = 6;
  v70 = sub_239A91B18(value);
  v71 = strlen(v70->i8);
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v72 = (void *)v71;
  if (v71 >= 0x17)
  {
    v74 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v74 = v71 | 7;
    v75 = v74 + 1;
    v73 = operator new(v74 + 1);
    __p[1] = v72;
    v361.i64[0] = v75 | 0x8000000000000000;
    __p[0] = v73;
  }
  else
  {
    v361.i8[7] = v71;
    v73 = __p;
    if (!v71)
      goto LABEL_121;
  }
  memmove(v73, v70, (size_t)v72);
LABEL_121:
  *((_BYTE *)v72 + (_QWORD)v73) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_2396B4148((uint64_t)&v366, *(const void **)v365, a2 + 16);
  v79 = *(std::__shared_weak_count **)&v365[8];
  if (!*(_QWORD *)&v365[8])
    goto LABEL_125;
  v80 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_125:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  if (v361.i8[7] < 0)
LABEL_126:
    operator delete(__p[0]);
LABEL_127:
  strcpy(value[0].i8, "6[WNiEBDSBU^iDWB_Y");
  sub_23958E450((uint64_t)value, *(int32x4_t *)"6[WNiEBDSBU^iDWB_Y", v76, v77, v78);
  v83 = v82;
  v84 = strlen(v82);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v85 = (void *)v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    v86 = operator new(v87 + 1);
    __p[1] = v85;
    v361.i64[0] = v88 | 0x8000000000000000;
    __p[0] = v86;
  }
  else
  {
    v361.i8[7] = v84;
    v86 = __p;
    if (!v84)
      goto LABEL_135;
  }
  memmove(v86, v83, (size_t)v85);
LABEL_135:
  *((_BYTE *)v85 + (_QWORD)v86) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_239BB47DC((uint64_t)&v366, *(const void **)v365, a2 + 20);
  v89 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v90 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      if ((v361.i8[7] & 0x80000000) == 0)
        goto LABEL_141;
      goto LABEL_140;
    }
  }
  if (v361.i8[7] < 0)
LABEL_140:
    operator delete(__p[0]);
LABEL_141:
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, __p[0], (uint64_t)&v366);
  v92 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_145;
  v93 = (unint64_t *)((char *)__p[1] + 8);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_149;
  }
  else
  {
LABEL_145:
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_149;
  }
  v96 = (unint64_t *)&v95->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (v97)
  {
LABEL_149:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_151;
    goto LABEL_150;
  }
  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
  std::__shared_weak_count::__release_weak(v95);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_150:
    operator delete(*(void **)__dst);
LABEL_151:
  strcpy((char *)&v357, "+IJ@N");
  v98 = sub_239A90C78((char *)&v357);
  v99 = strlen(v98);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    value[0].i64[1] = v100;
    value[1].i64[0] = v103 | 0x8000000000000000;
    value[0].i64[0] = (uint64_t)v101;
    goto LABEL_158;
  }
  value[1].i8[7] = v99;
  v101 = value;
  if (v99)
LABEL_158:
    memmove(v101, v98, v100);
  *((_BYTE *)v101 + v100) = 0;
  sub_23962C714(&theDict);
  *(_OWORD *)__dst = xmmword_239F12166;
  __dst[16] = 0;
  sub_2396EFA24((uint64_t)__dst);
  v105 = v104;
  v106 = strlen(v104);
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v107 = (void *)v106;
  if (v106 >= 0x17)
  {
    v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v109 = v106 | 7;
    v110 = v109 + 1;
    v108 = operator new(v109 + 1);
    __p[1] = v107;
    v361.i64[0] = v110 | 0x8000000000000000;
    __p[0] = v108;
  }
  else
  {
    v361.i8[7] = v106;
    v108 = __p;
    if (!v106)
      goto LABEL_167;
  }
  memmove(v108, v105, (size_t)v107);
LABEL_167:
  *((_BYTE *)v107 + (_QWORD)v108) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v366);
  v111 = (const void *)v366;
  v112 = theDict;
  if (!*((_QWORD *)&theDict + 1))
    goto LABEL_172;
  v113 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
  do
    v114 = __ldxr(v113);
  while (__stxr(v114 + 1, v113));
  do
    v115 = __ldaxr(v113);
  while (__stlxr(v115 - 1, v113));
  if (!v115)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v112 + 1) + 16))(*((_QWORD *)&v112 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v112 + 1));
    if (!(_QWORD)v112)
      goto LABEL_197;
  }
  else
  {
LABEL_172:
    if (!(_QWORD)v112)
      goto LABEL_197;
  }
  if (sub_23962C8DC((const __CFDictionary *)theDict, v111))
    goto LABEL_197;
  v367[0].i32[0] = *(_DWORD *)(a2 + 32);
  sub_239629634(v365, v367);
  v117 = *(_QWORD *)v365;
  v116 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v118 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    do
      v120 = __ldaxr(v118);
    while (__stlxr(v120 - 1, v118));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
      if (!v117)
        goto LABEL_181;
      goto LABEL_180;
    }
  }
  if (v117)
LABEL_180:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)theDict, v111, *(const void **)v365);
LABEL_181:
  v121 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v122 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_197:
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
  if (!*((_QWORD *)&v366 + 1))
    goto LABEL_201;
  v125 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (v126)
  {
LABEL_201:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_203;
    goto LABEL_202;
  }
  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
  std::__shared_weak_count::__release_weak(v124);
  if (v361.i8[7] < 0)
LABEL_202:
    operator delete(__p[0]);
LABEL_203:
  strcpy(__dst, "U<;!0'&06!\n'4;20");
  sub_2396EFA24((uint64_t)__dst);
  v128 = v127;
  v129 = strlen(v127);
  if (v129 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v130 = (void *)v129;
  if (v129 >= 0x17)
  {
    v132 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v129 | 7) != 0x17)
      v132 = v129 | 7;
    v133 = v132 + 1;
    v131 = operator new(v132 + 1);
    __p[1] = v130;
    v361.i64[0] = v133 | 0x8000000000000000;
    __p[0] = v131;
  }
  else
  {
    v361.i8[7] = v129;
    v131 = __p;
    if (!v129)
      goto LABEL_211;
  }
  memmove(v131, v128, (size_t)v130);
LABEL_211:
  *((_BYTE *)v130 + (_QWORD)v131) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_239BB47DC((uint64_t)&theDict, *(const void **)v365, a2 + 36);
  v135 = *(std::__shared_weak_count **)&v365[8];
  if (!*(_QWORD *)&v365[8])
    goto LABEL_215;
  v136 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (v137)
  {
LABEL_215:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_217;
    goto LABEL_216;
  }
  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
  std::__shared_weak_count::__release_weak(v135);
  if (v361.i8[7] < 0)
LABEL_216:
    operator delete(__p[0]);
LABEL_217:
  *(_QWORD *)&v366 = 0xD0D14023E0E0061;
  WORD6(v366) = 4;
  DWORD2(v366) = 84806718;
  sub_23971A32C((uint64_t)&v366, v134);
  v139 = v138;
  v140 = strlen(v138);
  if (v140 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v141 = (void *)v140;
  if (v140 >= 0x17)
  {
    v143 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v140 | 7) != 0x17)
      v143 = v140 | 7;
    v144 = v143 + 1;
    v142 = operator new(v143 + 1);
    __p[1] = v141;
    v361.i64[0] = v144 | 0x8000000000000000;
    __p[0] = v142;
  }
  else
  {
    v361.i8[7] = v140;
    v142 = __p;
    if (!v140)
      goto LABEL_225;
  }
  memmove(v142, v139, (size_t)v141);
LABEL_225:
  *((_BYTE *)v141 + (_QWORD)v142) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  v148 = *(const void **)v365;
  v149 = theDict;
  if (!*((_QWORD *)&theDict + 1))
    goto LABEL_230;
  v150 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
  do
    v151 = __ldxr(v150);
  while (__stxr(v151 + 1, v150));
  do
    v152 = __ldaxr(v150);
  while (__stlxr(v152 - 1, v150));
  if (!v152)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v149 + 1) + 16))(*((_QWORD *)&v149 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v149 + 1));
    if (!(_QWORD)v149)
      goto LABEL_249;
  }
  else
  {
LABEL_230:
    if (!(_QWORD)v149)
      goto LABEL_249;
  }
  if (sub_23962C8DC((const __CFDictionary *)theDict, v148))
    goto LABEL_249;
  v367[0].i32[0] = *(_DWORD *)(a2 + 40);
  sub_239629634(__dst, v367);
  v153 = *(_OWORD *)__dst;
  if (*(_QWORD *)&__dst[8])
  {
    v154 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    do
      v156 = __ldaxr(v154);
    while (__stlxr(v156 - 1, v154));
    if (!v156)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v153 + 1) + 16))(*((_QWORD *)&v153 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v153 + 1));
      if (!(_QWORD)v153)
        goto LABEL_239;
      goto LABEL_238;
    }
  }
  if ((_QWORD)v153)
LABEL_238:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)theDict, v148, *(const void **)__dst);
LABEL_239:
  v157 = *(std::__shared_weak_count **)&__dst[8];
  if (*(_QWORD *)&__dst[8])
  {
    v158 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
LABEL_249:
  v160 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v161 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (v361.i8[7] < 0)
    operator delete(__p[0]);
  strcpy(__dst, "\x1BztDizu|~Dzyhtwno~D}zi");
  sub_2396EFBE0((uint64_t)__dst, *(int32x4_t *)"\x1BztDizu|~Dzyhtwno~D}zi", v145, v146, v147);
  v164 = v163;
  v165 = strlen(v163);
  if (v165 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v166 = (void *)v165;
  if (v165 >= 0x17)
  {
    v168 = (v165 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v165 | 7) != 0x17)
      v168 = v165 | 7;
    v169 = v168 + 1;
    v167 = operator new(v168 + 1);
    __p[1] = v166;
    v361.i64[0] = v169 | 0x8000000000000000;
    __p[0] = v167;
  }
  else
  {
    v361.i8[7] = v165;
    v167 = __p;
    if (!v165)
      goto LABEL_264;
  }
  memmove(v167, v164, (size_t)v166);
LABEL_264:
  *((_BYTE *)v166 + (_QWORD)v167) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_239BB47DC((uint64_t)&theDict, *(const void **)v365, a2 + 44);
  v172 = *(std::__shared_weak_count **)&v365[8];
  if (!*(_QWORD *)&v365[8])
    goto LABEL_268;
  v173 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
  do
    v174 = __ldaxr(v173);
  while (__stlxr(v174 - 1, v173));
  if (v174)
  {
LABEL_268:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_270;
    goto LABEL_269;
  }
  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
  std::__shared_weak_count::__release_weak(v172);
  if (v361.i8[7] < 0)
LABEL_269:
    operator delete(__p[0]);
LABEL_270:
  *(_OWORD *)__p = xmmword_239F1219F;
  v361 = xmmword_239F121AF;
  v362 = 0;
  sub_2396EFE38((uint64_t)__p, (int32x4_t)xmmword_239F1219F, xmmword_239F121AF, v170, v171);
  v176 = v175;
  v177 = strlen(v175);
  if (v177 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v178 = v177;
  if (v177 >= 0x17)
  {
    v180 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v177 | 7) != 0x17)
      v180 = v177 | 7;
    v181 = v180 + 1;
    v179 = operator new(v180 + 1);
    *(_QWORD *)&__dst[8] = v178;
    *(_QWORD *)&__dst[16] = v181 | 0x8000000000000000;
    *(_QWORD *)__dst = v179;
  }
  else
  {
    __dst[23] = v177;
    v179 = __dst;
    if (!v177)
      goto LABEL_278;
  }
  memmove(v179, v176, v178);
LABEL_278:
  v179[v178] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v365);
  sub_2396B4EAC((uint64_t)&theDict, *(const void **)v365, (_BYTE *)(a2 + 48));
  v182 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v183 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_284;
      goto LABEL_283;
    }
  }
  if ((__dst[23] & 0x80000000) != 0)
LABEL_283:
    operator delete(*(void **)__dst);
LABEL_284:
  sub_239629EF4((uint64_t)value, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, __p[0], (uint64_t)&theDict);
  v185 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_288;
  v186 = (unint64_t *)((char *)__p[1] + 8);
  do
    v187 = __ldaxr(v186);
  while (__stlxr(v187 - 1, v186));
  if (!v187)
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
    v188 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_292;
  }
  else
  {
LABEL_288:
    v188 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_292;
  }
  v189 = (unint64_t *)&v188->__shared_owners_;
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (v190)
  {
LABEL_292:
    if ((value[1].i8[7] & 0x80000000) == 0)
      goto LABEL_294;
    goto LABEL_293;
  }
  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
  std::__shared_weak_count::__release_weak(v188);
  if (value[1].i8[7] < 0)
LABEL_293:
    operator delete((void *)value[0].i64[0]);
LABEL_294:
  v358 = 0x55545155544E21;
  v191 = sub_23958E3FC((char *)&v358);
  v192 = strlen(v191);
  if (v192 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v193 = v192;
  if (v192 >= 0x17)
  {
    v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17)
      v195 = v192 | 7;
    v196 = v195 + 1;
    v194 = operator new(v195 + 1);
    value[0].i64[1] = v193;
    value[1].i64[0] = v196 | 0x8000000000000000;
    value[0].i64[0] = (uint64_t)v194;
    goto LABEL_301;
  }
  value[1].i8[7] = v192;
  v194 = value;
  if (v192)
LABEL_301:
    memmove(v194, v191, v193);
  *((_BYTE *)v194 + v193) = 0;
  sub_23962C714(&v357);
  *(_OWORD *)v365 = xmmword_239F0C250;
  sub_23950F8E4((uint64_t)v365);
  v198 = v197;
  v199 = strlen(v197);
  if (v199 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v200 = (void *)v199;
  if (v199 >= 0x17)
  {
    v202 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17)
      v202 = v199 | 7;
    v203 = v202 + 1;
    v201 = operator new(v202 + 1);
    __p[1] = v200;
    v361.i64[0] = v203 | 0x8000000000000000;
    __p[0] = v201;
  }
  else
  {
    v361.i8[7] = v199;
    v201 = __p;
    if (!v199)
      goto LABEL_310;
  }
  memmove(v201, v198, (size_t)v200);
LABEL_310:
  *((_BYTE *)v200 + (_QWORD)v201) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2396B4148((uint64_t)&v357, *(const void **)__dst, a2 + 56);
  v204 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_314;
  v205 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v206 = __ldaxr(v205);
  while (__stlxr(v206 - 1, v205));
  if (v206)
  {
LABEL_314:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_316;
    goto LABEL_315;
  }
  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
  std::__shared_weak_count::__release_weak(v204);
  if (v361.i8[7] < 0)
LABEL_315:
    operator delete(__p[0]);
LABEL_316:
  *(_QWORD *)v365 = 0x7F677C4D62737F12;
  v207 = sub_23958E4C8((uint64_t)v365);
  v208 = strlen(v207);
  if (v208 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v209 = (void *)v208;
  if (v208 >= 0x17)
  {
    v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17)
      v211 = v208 | 7;
    v212 = v211 + 1;
    v210 = operator new(v211 + 1);
    __p[1] = v209;
    v361.i64[0] = v212 | 0x8000000000000000;
    __p[0] = v210;
  }
  else
  {
    v361.i8[7] = v208;
    v210 = __p;
    if (!v208)
      goto LABEL_324;
  }
  memmove(v210, v207, (size_t)v209);
LABEL_324:
  *((_BYTE *)v209 + (_QWORD)v210) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2396B4148((uint64_t)&v357, *(const void **)__dst, a2 + 60);
  v213 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_328;
  v214 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (v215)
  {
LABEL_328:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_330;
    goto LABEL_329;
  }
  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
  std::__shared_weak_count::__release_weak(v213);
  if (v361.i8[7] < 0)
LABEL_329:
    operator delete(__p[0]);
LABEL_330:
  strcpy((char *)&v366, "Q:5");
  v216 = sub_239A94B5C((char *)&v366);
  v217 = strlen(v216);
  if (v217 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v218 = (void *)v217;
  if (v217 >= 0x17)
  {
    v220 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17)
      v220 = v217 | 7;
    v221 = v220 + 1;
    v219 = operator new(v220 + 1);
    __p[1] = v218;
    v361.i64[0] = v221 | 0x8000000000000000;
    __p[0] = v219;
  }
  else
  {
    v361.i8[7] = v217;
    v219 = __p;
    if (!v217)
      goto LABEL_338;
  }
  memmove(v219, v216, (size_t)v218);
LABEL_338:
  *((_BYTE *)v218 + (_QWORD)v219) = 0;
  sub_239BC9724(v365, (_BYTE *)(a2 + 64));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v357, *(const void **)__dst, (uint64_t)v365);
  v222 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_342;
  v223 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v224 = __ldaxr(v223);
  while (__stlxr(v224 - 1, v223));
  if (!v224)
  {
    ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
    std::__shared_weak_count::__release_weak(v222);
    v225 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_346;
  }
  else
  {
LABEL_342:
    v225 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_346;
  }
  v226 = (unint64_t *)&v225->__shared_owners_;
  do
    v227 = __ldaxr(v226);
  while (__stlxr(v227 - 1, v226));
  if (v227)
  {
LABEL_346:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_348;
    goto LABEL_347;
  }
  ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
  std::__shared_weak_count::__release_weak(v225);
  if (v361.i8[7] < 0)
LABEL_347:
    operator delete(__p[0]);
LABEL_348:
  strcpy((char *)&v366, "*DEXG");
  v228 = sub_239A90C78((char *)&v366);
  v229 = strlen(v228);
  if (v229 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v230 = (void *)v229;
  if (v229 >= 0x17)
  {
    v232 = (v229 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v229 | 7) != 0x17)
      v232 = v229 | 7;
    v233 = v232 + 1;
    v231 = operator new(v232 + 1);
    __p[1] = v230;
    v361.i64[0] = v233 | 0x8000000000000000;
    __p[0] = v231;
  }
  else
  {
    v361.i8[7] = v229;
    v231 = __p;
    if (!v229)
      goto LABEL_356;
  }
  memmove(v231, v228, (size_t)v230);
LABEL_356:
  *((_BYTE *)v230 + (_QWORD)v231) = 0;
  sub_239BC9724(v365, (_BYTE *)(a2 + 104));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v357, *(const void **)__dst, (uint64_t)v365);
  v234 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_360;
  v235 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 - 1, v235));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
    std::__shared_weak_count::__release_weak(v234);
    v237 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_364;
  }
  else
  {
LABEL_360:
    v237 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_364;
  }
  v238 = (unint64_t *)&v237->__shared_owners_;
  do
    v239 = __ldaxr(v238);
  while (__stlxr(v239 - 1, v238));
  if (v239)
  {
LABEL_364:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_366;
    goto LABEL_365;
  }
  ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
  std::__shared_weak_count::__release_weak(v237);
  if (v361.i8[7] < 0)
LABEL_365:
    operator delete(__p[0]);
LABEL_366:
  strcpy((char *)&v366, "S<=<!>");
  v240 = sub_239513174((char *)&v366);
  v241 = strlen(v240);
  if (v241 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v242 = (void *)v241;
  if (v241 >= 0x17)
  {
    v244 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v241 | 7) != 0x17)
      v244 = v241 | 7;
    v245 = v244 + 1;
    v243 = operator new(v244 + 1);
    __p[1] = v242;
    v361.i64[0] = v245 | 0x8000000000000000;
    __p[0] = v243;
  }
  else
  {
    v361.i8[7] = v241;
    v243 = __p;
    if (!v241)
      goto LABEL_374;
  }
  memmove(v243, v240, (size_t)v242);
LABEL_374:
  *((_BYTE *)v242 + (_QWORD)v243) = 0;
  sub_239BC9724(v365, (_BYTE *)(a2 + 144));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v357, *(const void **)__dst, (uint64_t)v365);
  v246 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_378;
  v247 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v248 = __ldaxr(v247);
  while (__stlxr(v248 - 1, v247));
  if (!v248)
  {
    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
    std::__shared_weak_count::__release_weak(v246);
    v249 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_382;
  }
  else
  {
LABEL_378:
    v249 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_382;
  }
  v250 = (unint64_t *)&v249->__shared_owners_;
  do
    v251 = __ldaxr(v250);
  while (__stlxr(v251 - 1, v250));
  if (v251)
  {
LABEL_382:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_384;
    goto LABEL_383;
  }
  ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
  std::__shared_weak_count::__release_weak(v249);
  if (v361.i8[7] < 0)
LABEL_383:
    operator delete(__p[0]);
LABEL_384:
  strcpy((char *)&v366, "W68");
  v252 = sub_239A94B5C((char *)&v366);
  v253 = strlen(v252);
  if (v253 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v254 = (void *)v253;
  if (v253 >= 0x17)
  {
    v256 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v256 = v253 | 7;
    v257 = v256 + 1;
    v255 = operator new(v256 + 1);
    __p[1] = v254;
    v361.i64[0] = v257 | 0x8000000000000000;
    __p[0] = v255;
  }
  else
  {
    v361.i8[7] = v253;
    v255 = __p;
    if (!v253)
      goto LABEL_392;
  }
  memmove(v255, v252, (size_t)v254);
LABEL_392:
  *((_BYTE *)v254 + (_QWORD)v255) = 0;
  sub_239BC9724(v365, (_BYTE *)(a2 + 184));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v357, *(const void **)__dst, (uint64_t)v365);
  v258 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_396;
  v259 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v260 = __ldaxr(v259);
  while (__stlxr(v260 - 1, v259));
  if (!v260)
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    v261 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_400;
  }
  else
  {
LABEL_396:
    v261 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_400;
  }
  v262 = (unint64_t *)&v261->__shared_owners_;
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (v263)
  {
LABEL_400:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_402;
    goto LABEL_401;
  }
  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
  std::__shared_weak_count::__release_weak(v261);
  if (v361.i8[7] < 0)
LABEL_401:
    operator delete(__p[0]);
LABEL_402:
  strcpy((char *)v367, "\acntw");
  v264 = sub_239A90C78((char *)v367);
  v265 = strlen(v264);
  if (v265 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v266 = v265;
  if (v265 >= 0x17)
  {
    v268 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v265 | 7) != 0x17)
      v268 = v265 | 7;
    v269 = v268 + 1;
    v267 = operator new(v268 + 1);
    *(_QWORD *)&__dst[8] = v266;
    *(_QWORD *)&__dst[16] = v269 | 0x8000000000000000;
    *(_QWORD *)__dst = v267;
    goto LABEL_409;
  }
  __dst[23] = v265;
  v267 = __dst;
  if (v265)
LABEL_409:
    memmove(v267, v264, v266);
  v267[v266] = 0;
  sub_239BC9724(&theDict, (_BYTE *)(a2 + 224));
  strcpy(v365, "/KJ_JAKp@ApA@]BNCpBN_");
  v273 = sub_239A90BEC(v365, *(int8x16_t *)"/KJ_JAKp@ApA@]BNCpBN_", v270, v271, v272);
  v274 = strlen((const char *)v273);
  if (v274 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v275 = (void *)v274;
  if (v274 >= 0x17)
  {
    v277 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v274 | 7) != 0x17)
      v277 = v274 | 7;
    v278 = v277 + 1;
    v276 = operator new(v277 + 1);
    __p[1] = v275;
    v361.i64[0] = v278 | 0x8000000000000000;
    __p[0] = v276;
  }
  else
  {
    v361.i8[7] = v274;
    v276 = __p;
    if (!v274)
      goto LABEL_418;
  }
  memmove(v276, v273, (size_t)v275);
LABEL_418:
  *((_BYTE *)v275 + (_QWORD)v276) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v366);
  sub_2396B4EAC((uint64_t)&theDict, (const void *)v366, (_BYTE *)(a2 + 260));
  v279 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
  if (*((_QWORD *)&v366 + 1))
  {
    v280 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
      if ((v361.i8[7] & 0x80000000) == 0)
        goto LABEL_424;
      goto LABEL_423;
    }
  }
  if (v361.i8[7] < 0)
LABEL_423:
    operator delete(__p[0]);
LABEL_424:
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)&v357, __p[0], (uint64_t)&theDict);
  v282 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_428;
  v283 = (unint64_t *)((char *)__p[1] + 8);
  do
    v284 = __ldaxr(v283);
  while (__stlxr(v284 - 1, v283));
  if (!v284)
  {
    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
    std::__shared_weak_count::__release_weak(v282);
    v285 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_432;
  }
  else
  {
LABEL_428:
    v285 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_432;
  }
  v286 = (unint64_t *)&v285->__shared_owners_;
  do
    v287 = __ldaxr(v286);
  while (__stlxr(v287 - 1, v286));
  if (v287)
  {
LABEL_432:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_434;
    goto LABEL_433;
  }
  ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
  std::__shared_weak_count::__release_weak(v285);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_433:
    operator delete(*(void **)__dst);
LABEL_434:
  strcpy((char *)&v366, "Q#>$69?4\"\"");
  v288 = (const char *)sub_23958E518((uint64_t)&v366);
  v289 = strlen(v288);
  if (v289 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v290 = (void *)v289;
  if (v289 >= 0x17)
  {
    v292 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v289 | 7) != 0x17)
      v292 = v289 | 7;
    v293 = v292 + 1;
    v291 = operator new(v292 + 1);
    __p[1] = v290;
    v361.i64[0] = v293 | 0x8000000000000000;
    __p[0] = v291;
  }
  else
  {
    v361.i8[7] = v289;
    v291 = __p;
    if (!v289)
      goto LABEL_442;
  }
  memmove(v291, v288, (size_t)v290);
LABEL_442:
  *((_BYTE *)v290 + (_QWORD)v291) = 0;
  sub_239BC9724(v365, (_BYTE *)(a2 + 264));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v357, *(const void **)__dst, (uint64_t)v365);
  v294 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_446;
  v295 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v296 = __ldaxr(v295);
  while (__stlxr(v296 - 1, v295));
  if (!v296)
  {
    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
    std::__shared_weak_count::__release_weak(v294);
    v297 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_450;
  }
  else
  {
LABEL_446:
    v297 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_450;
  }
  v298 = (unint64_t *)&v297->__shared_owners_;
  do
    v299 = __ldaxr(v298);
  while (__stlxr(v299 - 1, v298));
  if (v299)
  {
LABEL_450:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_452;
    goto LABEL_451;
  }
  ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
  std::__shared_weak_count::__release_weak(v297);
  if (v361.i8[7] < 0)
LABEL_451:
    operator delete(__p[0]);
LABEL_452:
  strcpy((char *)&theDict, "*_YNKuE_^Z_^");
  v300 = sub_239510ECC((uint64_t)&theDict);
  v301 = strlen(v300);
  if (v301 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v302 = v301;
  if (v301 >= 0x17)
  {
    v304 = (v301 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v301 | 7) != 0x17)
      v304 = v301 | 7;
    v305 = v304 + 1;
    v303 = operator new(v304 + 1);
    *(_QWORD *)&__dst[8] = v302;
    *(_QWORD *)&__dst[16] = v305 | 0x8000000000000000;
    *(_QWORD *)__dst = v303;
    goto LABEL_459;
  }
  __dst[23] = v301;
  v303 = __dst;
  if (v301)
LABEL_459:
    memmove(v303, v300, v302);
  v303[v302] = 0;
  sub_23962C714(&v366);
  strcpy((char *)v367, "'@BIBUFSB");
  v306 = sub_23950FF84(v367);
  v307 = strlen((const char *)v306);
  if (v307 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v308 = (void *)v307;
  if (v307 >= 0x17)
  {
    v310 = (v307 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v307 | 7) != 0x17)
      v310 = v307 | 7;
    v311 = v310 + 1;
    v309 = operator new(v310 + 1);
    __p[1] = v308;
    v361.i64[0] = v311 | 0x8000000000000000;
    __p[0] = v309;
  }
  else
  {
    v361.i8[7] = v307;
    v309 = __p;
    if (!v307)
      goto LABEL_468;
  }
  memmove(v309, v306, (size_t)v308);
LABEL_468:
  *((_BYTE *)v308 + (_QWORD)v309) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_2396B4EAC((uint64_t)&v366, *(const void **)v365, (_BYTE *)(a2 + 424));
  v312 = *(std::__shared_weak_count **)&v365[8];
  if (!*(_QWORD *)&v365[8])
    goto LABEL_472;
  v313 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
  do
    v314 = __ldaxr(v313);
  while (__stlxr(v314 - 1, v313));
  if (v314)
  {
LABEL_472:
    if ((v361.i8[7] & 0x80000000) == 0)
      goto LABEL_474;
    goto LABEL_473;
  }
  ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
  std::__shared_weak_count::__release_weak(v312);
  if (v361.i8[7] < 0)
LABEL_473:
    operator delete(__p[0]);
LABEL_474:
  strcpy((char *)v367, ">XQLS_J");
  v315 = sub_23958E3FC((char *)v367);
  v316 = strlen(v315);
  if (v316 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v317 = (void *)v316;
  if (v316 >= 0x17)
  {
    v319 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v316 | 7) != 0x17)
      v319 = v316 | 7;
    v320 = v319 + 1;
    v318 = operator new(v319 + 1);
    __p[1] = v317;
    v361.i64[0] = v320 | 0x8000000000000000;
    __p[0] = v318;
  }
  else
  {
    v361.i8[7] = v316;
    v318 = __p;
    if (!v316)
      goto LABEL_482;
  }
  memmove(v318, v315, (size_t)v317);
LABEL_482:
  *((_BYTE *)v317 + (_QWORD)v318) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v365);
  sub_239BC46D4((uint64_t)&v366, *(const void **)v365, a2 + 432);
  v321 = *(std::__shared_weak_count **)&v365[8];
  if (*(_QWORD *)&v365[8])
  {
    v322 = (unint64_t *)(*(_QWORD *)&v365[8] + 8);
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
      if ((v361.i8[7] & 0x80000000) == 0)
        goto LABEL_488;
      goto LABEL_487;
    }
  }
  if (v361.i8[7] < 0)
LABEL_487:
    operator delete(__p[0]);
LABEL_488:
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)&v357, __p[0], (uint64_t)&v366);
  v324 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_492;
  v325 = (unint64_t *)((char *)__p[1] + 8);
  do
    v326 = __ldaxr(v325);
  while (__stlxr(v326 - 1, v325));
  if (!v326)
  {
    ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
    std::__shared_weak_count::__release_weak(v324);
    v327 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_496;
  }
  else
  {
LABEL_492:
    v327 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_496;
  }
  v328 = (unint64_t *)&v327->__shared_owners_;
  do
    v329 = __ldaxr(v328);
  while (__stlxr(v329 - 1, v328));
  if (!v329)
  {
    ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
    std::__shared_weak_count::__release_weak(v327);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_498;
    goto LABEL_497;
  }
LABEL_496:
  if ((__dst[23] & 0x80000000) != 0)
LABEL_497:
    operator delete(*(void **)__dst);
LABEL_498:
  sub_239629EF4((uint64_t)value, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, __p[0], (uint64_t)&v357);
  v330 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_502;
  v331 = (unint64_t *)((char *)__p[1] + 8);
  do
    v332 = __ldaxr(v331);
  while (__stlxr(v332 - 1, v331));
  if (!v332)
  {
    ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
    std::__shared_weak_count::__release_weak(v330);
    v333 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
    if (!*((_QWORD *)&v357 + 1))
      goto LABEL_506;
  }
  else
  {
LABEL_502:
    v333 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
    if (!*((_QWORD *)&v357 + 1))
      goto LABEL_506;
  }
  v334 = (unint64_t *)&v333->__shared_owners_;
  do
    v335 = __ldaxr(v334);
  while (__stlxr(v335 - 1, v334));
  if (v335)
  {
LABEL_506:
    if ((value[1].i8[7] & 0x80000000) == 0)
      goto LABEL_508;
    goto LABEL_507;
  }
  ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
  std::__shared_weak_count::__release_weak(v333);
  if (value[1].i8[7] < 0)
LABEL_507:
    operator delete((void *)value[0].i64[0]);
LABEL_508:
  *(_QWORD *)&theDict = 0x636B7A7D777D0ELL;
  v336 = sub_23958E3FC((char *)&theDict);
  v337 = strlen(v336);
  if (v337 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v338 = v337;
  if (v337 >= 0x17)
  {
    v340 = (v337 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v337 | 7) != 0x17)
      v340 = v337 | 7;
    v341 = v340 + 1;
    v339 = operator new(v340 + 1);
    *(_QWORD *)&__dst[8] = v338;
    *(_QWORD *)&__dst[16] = v341 | 0x8000000000000000;
    *(_QWORD *)__dst = v339;
    goto LABEL_515;
  }
  __dst[23] = v337;
  v339 = __dst;
  if (v337)
LABEL_515:
    memmove(v339, v336, v338);
  v339[v338] = 0;
  sub_23962C714(v365);
  *(_QWORD *)&v366 = 0x34232E1832372047;
  BYTE8(v366) = 0;
  v342 = sub_239513718((char *)&v366);
  v343 = strlen(v342);
  if (v343 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v344 = (void *)v343;
  if (v343 >= 0x17)
  {
    v346 = (v343 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v343 | 7) != 0x17)
      v346 = v343 | 7;
    v347 = v346 + 1;
    v345 = operator new(v346 + 1);
    __p[1] = v344;
    v361.i64[0] = v347 | 0x8000000000000000;
    __p[0] = v345;
  }
  else
  {
    v361.i8[7] = v343;
    v345 = __p;
    if (!v343)
      goto LABEL_524;
  }
  memmove(v345, v342, (size_t)v344);
LABEL_524:
  *((_BYTE *)v344 + (_QWORD)v345) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)value);
  sub_239BB4494((uint64_t)v365, (const void *)value[0].i64[0], (uint64_t *)(a2 + 456));
  v348 = (std::__shared_weak_count *)value[0].i64[1];
  if (value[0].i64[1])
  {
    v349 = (unint64_t *)(value[0].i64[1] + 8);
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
      if ((v361.i8[7] & 0x80000000) == 0)
        goto LABEL_530;
      goto LABEL_529;
    }
  }
  if (v361.i8[7] < 0)
LABEL_529:
    operator delete(__p[0]);
LABEL_530:
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, __p[0], (uint64_t)v365);
  v351 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_534;
  v352 = (unint64_t *)((char *)__p[1] + 8);
  do
    v353 = __ldaxr(v352);
  while (__stlxr(v353 - 1, v352));
  if (!v353)
  {
    ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
    std::__shared_weak_count::__release_weak(v351);
    v354 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_538;
  }
  else
  {
LABEL_534:
    v354 = *(std::__shared_weak_count **)&v365[8];
    if (!*(_QWORD *)&v365[8])
      goto LABEL_538;
  }
  v355 = (unint64_t *)&v354->__shared_owners_;
  do
    v356 = __ldaxr(v355);
  while (__stlxr(v356 - 1, v355));
  if (v356)
  {
LABEL_538:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    goto LABEL_539;
  }
  ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
  std::__shared_weak_count::__release_weak(v354);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_539:
    operator delete(*(void **)__dst);
}

void sub_239BC9370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  sub_239416DA0((uint64_t)&a31);
  sub_239416DA0(v37 - 144);
  if (a25 < 0)
    operator delete(__p);
  sub_239416DA0((uint64_t)&a29);
  if (a18 < 0)
    operator delete(a13);
  sub_239416DA0(v36);
  _Unwind_Resume(a1);
}

void sub_239BC971C()
{
  JUMPOUT(0x239BC970CLL);
}

void sub_239BC9724(_OWORD *a1, _BYTE *a2)
{
  int8x8_t *v4;
  size_t v5;
  size_t v6;
  void *p_p;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  size_t v23;
  unint64_t v24;
  CFStringRef v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  v27 = 0xD180B1C171C1E79;
  v28 = 28;
  v4 = sub_23950FF84((int8x8_t *)&v27);
  v5 = strlen((const char *)v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_p = operator new(v8 + 1);
    v23 = v6;
    v24 = v9 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v24) = v5;
    p_p = &__p;
    if (!v5)
      goto LABEL_9;
  }
  memmove(p_p, v4, v6);
LABEL_9:
  *((_BYTE *)p_p + v6) = 0;
  sub_239629EF4((uint64_t)&__p, &v25);
  sub_2396B4EAC((uint64_t)a1, v25, a2);
  v10 = v26;
  if (!v26)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_13:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (SHIBYTE(v24) < 0)
LABEL_14:
    operator delete(__p);
LABEL_15:
  v27 = 0x302529362B2244;
  v13 = sub_23958E3FC((char *)&v27);
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v23 = v15;
    v24 = v18 | 0x8000000000000000;
    __p = v16;
  }
  else
  {
    HIBYTE(v24) = v14;
    v16 = &__p;
    if (!v14)
      goto LABEL_23;
  }
  memmove(v16, v13, v15);
LABEL_23:
  *((_BYTE *)v16 + v15) = 0;
  sub_239629EF4((uint64_t)&__p, &v25);
  sub_239BC46D4((uint64_t)a1, v25, (uint64_t)(a2 + 8));
  v19 = v26;
  if (!v26)
    goto LABEL_27;
  v20 = (unint64_t *)&v26->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_27:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      return;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (SHIBYTE(v24) < 0)
LABEL_28:
    operator delete(__p);
}

void sub_239BC99B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239416DA0(v15);
  _Unwind_Resume(a1);
}

__n128 sub_239BC99FC(__int128 *a1)
{
  uint64_t v2;
  kern_return_t v3;
  unint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  uint64_t v12;

  v2 = MEMORY[0x23B83EE44]();
  task_info_outCnt = 93;
  v3 = task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt);
  v4 = v12 + v2;
  if (v3)
    v4 = 0;
  if (v4 < 0xEC8E51B00)
  {
    if (v4 < 0x7558BDB00)
    {
      if (v4 < 0x39BDF3B00)
      {
        if (v4 < 0x1BF08EB00)
        {
          if (v4 < 0x147D35700)
          {
            if (v4 < 0xD09DC300)
            {
              if (v4 < 0x9502F900)
                v5 = &xmmword_239F12478;
              else
                v5 = &xmmword_239F12418;
            }
            else
            {
              v5 = &xmmword_239F123B8;
            }
          }
          else
          {
            v5 = &xmmword_239F12358;
          }
        }
        else
        {
          v5 = &xmmword_239F122F8;
        }
      }
      else
      {
        v5 = &xmmword_239F12298;
      }
    }
    else
    {
      v5 = &xmmword_239F12238;
    }
  }
  else
  {
    v5 = &xmmword_239F121D8;
  }
  v6 = v5[3];
  a1[2] = v5[2];
  a1[3] = v6;
  v7 = v5[5];
  a1[4] = v5[4];
  a1[5] = v7;
  result = (__n128)*v5;
  v9 = v5[1];
  *a1 = *v5;
  a1[1] = v9;
  return result;
}

uint64_t sub_239BC9B5C(int *a1, int *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  if (a1 == a2)
  {
    v7 = 0;
    v4 = 4294967040;
  }
  else
  {
    v3 = a1;
    v4 = 4294967040;
    while (1)
    {
      v5 = *v3;
      if (*v3 > 6000)
      {
        switch(v5)
        {
          case 8001:
            goto LABEL_34;
          case 8002:
          case 8004:
          case 8007:
          case 8008:
          case 8020:
          case 8021:
            goto LABEL_27;
          case 8003:
          case 8006:
          case 8012:
          case 8017:
          case 8018:
          case 8019:
          case 8022:
            goto LABEL_31;
          case 8005:
          case 8023:
LABEL_35:
            v4 = 4294967293;
            v7 = 0x100000000;
            return v4 | v7;
          case 8009:
          case 8010:
          case 8011:
          case 8013:
          case 8014:
          case 8015:
          case 8016:
            goto LABEL_32;
          default:
            switch(v5)
            {
              case 6001:
              case 6010:
              case 6012:
              case 6013:
                goto LABEL_31;
              case 6002:
                goto LABEL_32;
              case 6003:
              case 6006:
              case 6008:
              case 6009:
              case 6011:
                goto LABEL_27;
              case 6004:
              case 6005:
                goto LABEL_34;
              case 6007:
                goto LABEL_35;
              default:
                if ((v5 - 7001) <= 8 && ((1 << (v5 - 89)) & 0x103) != 0)
                  goto LABEL_31;
                goto LABEL_27;
            }
        }
      }
      if (v5 > 5000)
      {
        if ((v5 - 5001) <= 9)
        {
          v6 = 1 << (v5 + 119);
          if ((v6 & 0x106) != 0)
            goto LABEL_32;
          if ((v6 & 0x260) != 0)
          {
LABEL_34:
            v7 = 0x100000000;
            v4 = 4294967280;
            return v4 | v7;
          }
          if ((v6 & 0x81) != 0)
            goto LABEL_31;
        }
      }
      else if (v5 > 3015)
      {
        if ((v5 - 4001) <= 0x14)
        {
          if (((1 << (v5 + 95)) & 0x180E08) != 0)
          {
LABEL_33:
            v4 = 4294967281;
            v7 = 0x100000000;
            return v4 | v7;
          }
          if (v5 == 4001)
          {
            v4 = 4294967287;
            v7 = 0x100000000;
            return v4 | v7;
          }
        }
        if (v5 == 3016)
          goto LABEL_31;
      }
      else if (v5 > 3011)
      {
        if ((v5 - 3012) < 3)
        {
LABEL_31:
          v4 = 4294967279;
          v7 = 0x100000000;
          return v4 | v7;
        }
      }
      else
      {
        switch(v5)
        {
          case 7:
            goto LABEL_31;
          case 2003:
LABEL_32:
            v7 = 0x100000000;
            v4 = 4294967278;
            return v4 | v7;
          case 3002:
            goto LABEL_33;
        }
      }
LABEL_27:
      if (sub_2396F2264(v5) == 1)
        break;
      v7 = 0;
      if (++v3 == a2)
        return v4 | v7;
    }
    v7 = 0x100000000;
    v4 = 0xFFFFFFFFLL;
  }
  return v4 | v7;
}

void sub_239BC9D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char **a11)
{
  if (*(_BYTE *)(a1 + 464))
    sub_239BC9F2C(a11, a11[1], *(char **)(a1 + 432), *(char **)(a1 + 440), (uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 2);
  if (*(_BYTE *)(a2 + 192))
    sub_239BC9F2C(a11, a11[1], *(char **)(a2 + 104), *(char **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  if (*(_BYTE *)(a3 + 712))
    sub_239BC9F2C(a11, a11[1], *(char **)(a3 + 232), *(char **)(a3 + 240), (uint64_t)(*(_QWORD *)(a3 + 240) - *(_QWORD *)(a3 + 232)) >> 2);
  if (*(_BYTE *)(a4 + 1744))
    sub_239BC9F2C(a11, a11[1], *(char **)(a4 + 632), *(char **)(a4 + 640), (uint64_t)(*(_QWORD *)(a4 + 640) - *(_QWORD *)(a4 + 632)) >> 2);
  if (*(_BYTE *)(a5 + 584))
    sub_239BC9F2C(a11, a11[1], *(char **)(a5 + 280), *(char **)(a5 + 288), (uint64_t)(*(_QWORD *)(a5 + 288) - *(_QWORD *)(a5 + 280)) >> 2);
  if (*(_BYTE *)(a6 + 104))
    sub_239BC9F2C(a11, a11[1], *(char **)(a6 + 72), *(char **)(a6 + 80), (uint64_t)(*(_QWORD *)(a6 + 80) - *(_QWORD *)(a6 + 72)) >> 2);
  if (*(_BYTE *)(a7 + 864))
    sub_239BC9F2C(a11, a11[1], *(char **)(a7 + 296), *(char **)(a7 + 304), (uint64_t)(*(_QWORD *)(a7 + 304) - *(_QWORD *)(a7 + 296)) >> 2);
  if (*(_BYTE *)(a8 + 392))
    sub_239BC9F2C(a11, a11[1], *(char **)(a8 + 160), *(char **)(a8 + 168), (uint64_t)(*(_QWORD *)(a8 + 168) - *(_QWORD *)(a8 + 160)) >> 2);
  if (*(_BYTE *)(a9 + 360))
    sub_239BC9F2C(a11, a11[1], *(char **)(a9 + 216), *(char **)(a9 + 224), (uint64_t)(*(_QWORD *)(a9 + 224) - *(_QWORD *)(a9 + 216)) >> 2);
  if (*(_BYTE *)(a10 + 1032))
    sub_239BC9F2C(a11, a11[1], *(char **)(a10 + 384), *(char **)(a10 + 392), (uint64_t)(*(_QWORD *)(a10 + 392) - *(_QWORD *)(a10 + 384)) >> 2);
}

void sub_239BC9F2C(char **a1, _BYTE *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  size_t v65;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v9 = a1;
  v11 = (unint64_t)*a1;
  v10 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 2;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 2)
  {
    v16 = a5 + ((uint64_t)(v10 - v11) >> 2);
    if (v16 >> 62)
      sub_2394189F8();
    v17 = (uint64_t)&v15[-v11];
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_239418A80();
      v19 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = v18;
      v21 = operator new(4 * v18);
      v18 = v20;
      v14 = (char *)v19;
      v13 = v12 >> 2;
      v9 = a1;
    }
    else
    {
      v21 = 0;
    }
    v46 = &v21[4 * v13];
    v47 = &v46[4 * a5];
    v48 = v46;
    if ((v5 & 0x3FFFFFFFFFFFFFFFuLL) >= 7)
    {
      v48 = &v21[4 * v13];
      if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] - v7) >= 0x20)
      {
        v49 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
        v48 = &v46[v50];
        v51 = (__int128 *)(v7 + 16);
        v52 = &v21[4 * v13 + 16];
        v53 = v49 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v54 = *v51;
          *(v52 - 1) = *(v51 - 1);
          *v52 = v54;
          v51 += 2;
          v52 += 2;
          v53 -= 8;
        }
        while (v53);
        if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_42:
          if ((_BYTE *)v11 != a2)
          {
            if ((unint64_t)(v12 - 4) >= 0x3C)
            {
              v56 = v14;
              if ((v12 & 0xFFFFFFFFFFFFFFFCLL) + v11 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
              {
                v57 = ((unint64_t)(v12 - 4) >> 2) + 1;
                v56 = &v14[-4 * (v57 & 0x7FFFFFFFFFFFFFF8)];
                v58 = 4 * v13 - 16;
                v59 = (__int128 *)(v11 + v58);
                v60 = &v21[v58];
                v61 = v57 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = *v59;
                  *(v60 - 1) = *(v59 - 1);
                  *v60 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 8;
                }
                while (v61);
                v46 -= 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
                if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_50;
              }
            }
            else
            {
              v56 = v14;
            }
            do
            {
              v63 = *((_DWORD *)v56 - 1);
              v56 -= 4;
              *((_DWORD *)v46 - 1) = v63;
              v46 -= 4;
            }
            while (v56 != (char *)v11);
          }
LABEL_50:
          v64 = &v21[4 * v18];
          v65 = v10 - (_QWORD)v14;
          if (v65)
            memmove(v47, v14, v65);
          *v9 = v46;
          v9[1] = &v47[v65];
          v9[2] = v64;
          if (v11)
            operator delete((void *)v11);
          return;
        }
        v7 += v50;
      }
    }
    do
    {
      v55 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v48 = v55;
      v48 += 4;
    }
    while (v48 != v47);
    goto LABEL_42;
  }
  v22 = v10 - (_QWORD)v14;
  v23 = (uint64_t)(v10 - (_QWORD)v14) >> 2;
  if (v23 >= a5)
  {
    v24 = &__src[4 * a5];
    v26 = (unint64_t)a1[1];
LABEL_18:
    v27 = &v14[4 * a5];
    v28 = v26 - (_QWORD)v27;
    v29 = (uint64_t)(v26 - (_QWORD)v27) >> 2;
    v30 = (int *)(v26 - 4 * a5);
    v31 = (char *)v26;
    if ((unint64_t)v30 < v10)
    {
      v32 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + v28;
      v33 = (char *)(v32 + v11);
      v34 = v32 + v11 + 4;
      if (v10 > v34)
        v34 = v10;
      v35 = v34 + ~v11 - v32;
      v36 = v26 - (_QWORD)v33;
      v37 = v35 >= 0x2C && v36 > 0x1F;
      v31 = (char *)v26;
      if (!v37)
        goto LABEL_59;
      v38 = (v35 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      v30 = (int *)((char *)v30 + v39);
      v40 = (_OWORD *)(v26 + 16);
      v41 = (__int128 *)(4 * v29 + 4 * v13 + v11 + 16);
      v42 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 8;
      }
      while (v42);
      v31 = (char *)(v26 + v39);
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_59:
        do
        {
          v44 = *v30++;
          *(_DWORD *)v31 = v44;
          v31 += 4;
        }
        while ((unint64_t)v30 < v10);
      }
    }
    v9[1] = v31;
    if ((char *)v26 != v27)
    {
      v45 = v14;
      memmove((void *)(v26 - 4 * v29), v14, v28);
      v14 = v45;
    }
    if (v24 != v7)
      memmove(v14, v7, v24 - v7);
    return;
  }
  v24 = &__src[4 * v23];
  v25 = a4 - v24;
  if (a4 != v24)
  {
    v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
    memmove(a1[1], &__src[4 * v23], a4 - v24);
    v13 = v12 >> 2;
    v14 = (char *)v67;
  }
  v26 = v10 + v25;
  v9[1] = (char *)(v10 + v25);
  if (v22 >= 1)
    goto LABEL_18;
}

uint64_t sub_239BCA2E4(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a2)
{
  int *v4;
  int *i;
  __int128 v6;
  _OWORD *v7;
  const char *v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int8x8_t *v17;
  size_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  const char *v27;
  size_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  const char *v37;
  size_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const char *v46;
  const char *v47;
  size_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  const char *v57;
  size_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  const char *v66;
  size_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  CFStringRef v72;
  std::__shared_weak_count *v73;
  const __CFDictionary *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v114;
  void *__p[2];
  unint64_t v116;
  void *v117;
  char *v118;
  unint64_t v119;
  void *v120[2];
  char v121;
  _QWORD v122[2];
  _QWORD v123[11];
  char v124;
  uint64_t v125;
  _QWORD v126[2];
  _QWORD v127[11];
  char v128;
  uint64_t v129;
  std::chrono::system_clock::time_point v130;
  void *v131[3];
  CFStringRef v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  char v135[16];
  CFMutableArrayRef v136[4];
  __int128 v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  sub_2394988CC((uint64_t)v126);
  sub_2394988CC((uint64_t)v122);
  v130.__d_.__rep_ = *a2;
  HIBYTE(v131[2]) = 17;
  strcpy((char *)v131, "%b %d %Y %H:%M:%S");
  sub_239AAC108(&v130, (uint64_t)v127, 0);
  if (SHIBYTE(v131[2]) < 0)
    operator delete(v131[0]);
  v130.__d_.__rep_ = a2[1];
  HIBYTE(v131[2]) = 17;
  strcpy((char *)v131, "%b %d %Y %H:%M:%S");
  sub_239AAC108(&v130, (uint64_t)v123, 0);
  if (SHIBYTE(v131[2]) < 0)
    operator delete(v131[0]);
  std::stringbuf::str();
  HIBYTE(v119) = 1;
  LOWORD(v117) = 34;
  sub_239593978(v120, &v117, &v130);
  if (SHIBYTE(v119) < 0)
  {
    operator delete(v117);
    if ((v121 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((v121 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v120[0]);
LABEL_7:
  std::stringbuf::str();
  HIBYTE(v116) = 1;
  LOWORD(__p[0]) = 34;
  sub_239593978(&v117, __p, v120);
  if (SHIBYTE(v116) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v119) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(v119) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v117);
LABEL_9:
  v114 = a2[2];
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v4 = (int *)a2[5];
  for (i = (int *)a2[6]; v4 != i; ++v4)
  {
    while (1)
    {
      sub_2396F1BE8(v4, (uint64_t)__p);
      v7 = v118;
      if ((unint64_t)v118 >= v119)
        break;
      v6 = *(_OWORD *)__p;
      *((_QWORD *)v118 + 2) = v116;
      *v7 = v6;
      v118 = (char *)v7 + 24;
      if (++v4 == i)
        goto LABEL_16;
    }
    v118 = sub_23941ACDC(&v117, (uint64_t)__p);
    if (SHIBYTE(v116) < 0)
      operator delete(__p[0]);
  }
LABEL_16:
  sub_23962C714((_OWORD *)a1);
  strcpy((char *)&v137, ">JWS[aMJ_LJ");
  v8 = sub_23958E4C8((uint64_t)&v137);
  v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = v10;
    v116 = v13 | 0x8000000000000000;
    __p[0] = v11;
  }
  else
  {
    HIBYTE(v116) = v9;
    v11 = __p;
    if (!v9)
      goto LABEL_24;
  }
  memmove(v11, v8, (size_t)v10);
LABEL_24:
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v136);
  sub_239BC46D4(a1, v136[0], (uint64_t)&v130);
  v14 = (std::__shared_weak_count *)v136[1];
  if (!v136[1])
    goto LABEL_28;
  v15 = (unint64_t *)((char *)v136[1] + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_28:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (SHIBYTE(v116) < 0)
LABEL_29:
    operator delete(__p[0]);
LABEL_30:
  *(_QWORD *)&v137 = 0x343F053F37332E5ALL;
  WORD4(v137) = 62;
  v17 = sub_23950FF84((int8x8_t *)&v137);
  v18 = strlen((const char *)v17);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    __p[1] = v19;
    v116 = v22 | 0x8000000000000000;
    __p[0] = v20;
  }
  else
  {
    HIBYTE(v116) = v18;
    v20 = __p;
    if (!v18)
      goto LABEL_38;
  }
  memmove(v20, v17, (size_t)v19);
LABEL_38:
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v136);
  sub_239BC46D4(a1, v136[0], (uint64_t)v120);
  v23 = (std::__shared_weak_count *)v136[1];
  if (!v136[1])
    goto LABEL_42;
  v24 = (unint64_t *)((char *)v136[1] + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_42:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(v116) < 0)
LABEL_43:
    operator delete(__p[0]);
LABEL_44:
  *(_QWORD *)&v137 = 0x67764D777F7B6612;
  BYTE14(v137) = 0;
  WORD6(v137) = 31869;
  DWORD2(v137) = 2070311776;
  sub_23958E5E0((uint64_t)&v137);
  v27 = v26;
  v28 = strlen(v26);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    __p[1] = v29;
    v116 = v32 | 0x8000000000000000;
    __p[0] = v30;
  }
  else
  {
    HIBYTE(v116) = v28;
    v30 = __p;
    if (!v28)
      goto LABEL_52;
  }
  memmove(v30, v27, (size_t)v29);
LABEL_52:
  *((_BYTE *)v29 + (_QWORD)v30) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v136);
  sub_2397373B0(a1, v136[0], (uint64_t)&v114);
  v33 = (std::__shared_weak_count *)v136[1];
  if (!v136[1])
    goto LABEL_56;
  v34 = (unint64_t *)((char *)v136[1] + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_56:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (SHIBYTE(v116) < 0)
LABEL_57:
    operator delete(__p[0]);
LABEL_58:
  v137 = xmmword_239F0C260;
  sub_23950F8E4((uint64_t)&v137);
  v37 = v36;
  v38 = strlen(v36);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    __p[1] = v39;
    v116 = v42 | 0x8000000000000000;
    __p[0] = v40;
  }
  else
  {
    HIBYTE(v116) = v38;
    v40 = __p;
    if (!v38)
      goto LABEL_66;
  }
  memmove(v40, v37, (size_t)v39);
LABEL_66:
  *((_BYTE *)v39 + (_QWORD)v40) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v136);
  sub_239BB47DC(a1, v136[0], (uint64_t)(a2 + 3));
  v43 = (std::__shared_weak_count *)v136[1];
  if (!v136[1])
    goto LABEL_70;
  v44 = (unint64_t *)((char *)v136[1] + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (v45)
  {
LABEL_70:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  if (SHIBYTE(v116) < 0)
LABEL_71:
    operator delete(__p[0]);
LABEL_72:
  strcpy((char *)v136, "*Y^KX^uGOGEXSuGH");
  sub_2396EFA24((uint64_t)v136);
  v47 = v46;
  v48 = strlen(v46);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v49 = (void *)v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    __p[1] = v49;
    v116 = v52 | 0x8000000000000000;
    __p[0] = v50;
  }
  else
  {
    HIBYTE(v116) = v48;
    v50 = __p;
    if (!v48)
      goto LABEL_80;
  }
  memmove(v50, v47, (size_t)v49);
LABEL_80:
  *((_BYTE *)v49 + (_QWORD)v50) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v137);
  sub_239BB47DC(a1, (const void *)v137, (uint64_t)a2 + 28);
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (!*((_QWORD *)&v137 + 1))
    goto LABEL_84;
  v54 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_84:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if (SHIBYTE(v116) < 0)
LABEL_85:
    operator delete(__p[0]);
LABEL_86:
  *(_QWORD *)&v137 = 0x3E363E0C373D3653;
  BYTE14(v137) = 0;
  WORD6(v137) = 12606;
  DWORD2(v137) = 204087612;
  sub_23958E5E0((uint64_t)&v137);
  v57 = v56;
  v58 = strlen(v56);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v59 = (void *)v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    __p[1] = v59;
    v116 = v62 | 0x8000000000000000;
    __p[0] = v60;
  }
  else
  {
    HIBYTE(v116) = v58;
    v60 = __p;
    if (!v58)
      goto LABEL_94;
  }
  memmove(v60, v57, (size_t)v59);
LABEL_94:
  *((_BYTE *)v59 + (_QWORD)v60) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v136);
  sub_239BB47DC(a1, v136[0], (uint64_t)(a2 + 4));
  v63 = (std::__shared_weak_count *)v136[1];
  if (!v136[1])
    goto LABEL_98;
  v64 = (unint64_t *)((char *)v136[1] + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (v65)
  {
LABEL_98:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_99;
  }
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  if (SHIBYTE(v116) < 0)
LABEL_99:
    operator delete(__p[0]);
LABEL_100:
  strcpy(v135, "W2%%8%\b4832$");
  v66 = sub_239510ECC((uint64_t)v135);
  v67 = strlen(v66);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v68 = (void *)v67;
  if (v67 >= 0x17)
  {
    v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v70 = v67 | 7;
    v71 = v70 + 1;
    v69 = operator new(v70 + 1);
    __p[1] = v68;
    v116 = v71 | 0x8000000000000000;
    __p[0] = v69;
  }
  else
  {
    HIBYTE(v116) = v67;
    v69 = __p;
    if (!v67)
      goto LABEL_108;
  }
  memmove(v69, v66, (size_t)v68);
LABEL_108:
  *((_BYTE *)v68 + (_QWORD)v69) = 0;
  sub_239629EF4((uint64_t)__p, &v132);
  v72 = v132;
  v74 = *(const __CFDictionary **)a1;
  v73 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v73)
    goto LABEL_113;
  p_shared_owners = (unint64_t *)&v73->__shared_owners_;
  do
    v76 = __ldxr(p_shared_owners);
  while (__stxr(v76 + 1, p_shared_owners));
  do
    v77 = __ldaxr(p_shared_owners);
  while (__stlxr(v77 - 1, p_shared_owners));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    if (!v74)
      goto LABEL_175;
  }
  else
  {
LABEL_113:
    if (!v74)
      goto LABEL_175;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, v72))
    goto LABEL_175;
  sub_23962BDF8((std::__shared_weak_count_vtbl **)v136);
  v78 = *(_OWORD *)v136;
  if (v136[1])
  {
    v79 = (unint64_t *)((char *)v136[1] + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v78 + 1) + 16))(*((_QWORD *)&v78 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v78 + 1));
      if ((_QWORD)v78)
        goto LABEL_121;
LABEL_158:
      v91 = &v134;
      goto LABEL_159;
    }
  }
  if (!(_QWORD)v78)
    goto LABEL_158;
LABEL_121:
  v82 = (char *)v117;
  v83 = v118;
  if (v117 != v118)
  {
    do
    {
      sub_239629EF4((uint64_t)v82, (CFStringRef *)&v137);
      v84 = v137;
      if (!*((_QWORD *)&v137 + 1))
        goto LABEL_127;
      v85 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
      do
        v87 = __ldaxr(v85);
      while (__stlxr(v87 - 1, v85));
      if (!v87)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
        if ((_QWORD)v84)
        {
LABEL_128:
          j__CFArrayAppendValue(v136[0], (const void *)v137);
          v88 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
          if (*((_QWORD *)&v137 + 1))
            goto LABEL_132;
          goto LABEL_136;
        }
      }
      else
      {
LABEL_127:
        if ((_QWORD)v84)
          goto LABEL_128;
      }
      v134 = 0uLL;
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      if (*((_QWORD *)&v137 + 1))
      {
LABEL_132:
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
LABEL_136:
      if (!(_QWORD)v84)
        goto LABEL_160;
      v82 += 24;
    }
    while (v82 != v83);
  }
  v134 = *(_OWORD *)v136;
  v91 = (__int128 *)v136;
LABEL_159:
  *(_QWORD *)v91 = 0;
  *((_QWORD *)v91 + 1) = 0;
LABEL_160:
  v92 = (std::__shared_weak_count *)v136[1];
  if (!v136[1])
    goto LABEL_164;
  v93 = (unint64_t *)((char *)v136[1] + 8);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    v96 = v134;
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_169;
  }
  else
  {
LABEL_164:
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    v96 = v134;
    if (!*((_QWORD *)&v134 + 1))
      goto LABEL_169;
  }
  v97 = (unint64_t *)&v95->__shared_owners_;
  do
    v98 = __ldxr(v97);
  while (__stxr(v98 + 1, v97));
  do
    v99 = __ldaxr(v97);
  while (__stlxr(v99 - 1, v97));
  if (!v99)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
    if (!v96)
      goto LABEL_171;
    goto LABEL_170;
  }
LABEL_169:
  if (v96)
LABEL_170:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v72, (const void *)v134);
LABEL_171:
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (!*((_QWORD *)&v134 + 1))
    goto LABEL_175;
  v101 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
  do
    v102 = __ldaxr(v101);
  while (__stlxr(v102 - 1, v101));
  if (v102)
  {
LABEL_175:
    v103 = v133;
    if (!v133)
      goto LABEL_179;
    goto LABEL_176;
  }
  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
  std::__shared_weak_count::__release_weak(v100);
  v103 = v133;
  if (!v133)
    goto LABEL_179;
LABEL_176:
  v104 = (unint64_t *)&v103->__shared_owners_;
  do
    v105 = __ldaxr(v104);
  while (__stlxr(v105 - 1, v104));
  if (v105)
  {
LABEL_179:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_180;
  }
  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
  std::__shared_weak_count::__release_weak(v103);
  if (SHIBYTE(v116) < 0)
LABEL_180:
    operator delete(__p[0]);
LABEL_181:
  v106 = (char *)v117;
  if (v117)
  {
    v107 = v118;
    v108 = v117;
    if (v118 != v117)
    {
      do
      {
        if (*(v107 - 1) < 0)
          operator delete(*((void **)v107 - 3));
        v107 -= 24;
      }
      while (v107 != v106);
      v108 = v117;
    }
    v118 = v106;
    operator delete(v108);
  }
  if (v121 < 0)
  {
    operator delete(v120[0]);
    if ((SHIBYTE(v131[1]) & 0x80000000) == 0)
      goto LABEL_191;
  }
  else if ((SHIBYTE(v131[1]) & 0x80000000) == 0)
  {
    goto LABEL_191;
  }
  operator delete((void *)v130.__d_.__rep_);
LABEL_191:
  v109 = *MEMORY[0x24BEDB7F0];
  v122[0] = v109;
  v110 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v111 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v122 + *(_QWORD *)(v109 - 24)) = v110;
  v112 = MEMORY[0x24BEDB848] + 16;
  v123[0] = v111;
  v123[1] = MEMORY[0x24BEDB848] + 16;
  if (v124 < 0)
    operator delete((void *)v123[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v125);
  v126[0] = v109;
  *(_QWORD *)((char *)v126 + *(_QWORD *)(v109 - 24)) = v110;
  v127[0] = v111;
  v127[1] = v112;
  if (v128 < 0)
    operator delete((void *)v127[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B83E250](&v129);
}

void sub_239BCB06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  uint64_t v63;

  sub_239416DA0(v63 - 176);
  sub_239416DA0(v63 - 192);
  if (a17 < 0)
    operator delete(__p);
  sub_239416DA0(v62);
  sub_23941B08C(&a18);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v63 - 201) < 0)
    operator delete(*(void **)(v63 - 224));
  sub_239498ABC((uint64_t)&a27);
  sub_239498ABC((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_239BCB268(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  void *p_p;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const char *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p;
  size_t v24;
  unint64_t v25;
  CFStringRef v26;
  std::__shared_weak_count *v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  v28[0] = 0x3504373E3F34365BLL;
  strcpy((char *)&v28[1], ":6>");
  v4 = sub_23958E4C8((uint64_t)v28);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_p = operator new(v8 + 1);
    v24 = v6;
    v25 = v9 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v25) = v5;
    p_p = &__p;
    if (!v5)
      goto LABEL_9;
  }
  memmove(p_p, v4, v6);
LABEL_9:
  *((_BYTE *)p_p + v6) = 0;
  sub_239629EF4((uint64_t)&__p, &v26);
  sub_239BC46D4((uint64_t)a1, v26, a2);
  v10 = v27;
  if (!v27)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_13:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (SHIBYTE(v25) < 0)
LABEL_14:
    operator delete(__p);
LABEL_15:
  strcpy((char *)v28, "+FDONGt]NYXBDE");
  sub_23958E5E0((uint64_t)v28);
  v14 = v13;
  v15 = strlen(v13);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v24 = v16;
    v25 = v19 | 0x8000000000000000;
    __p = v17;
  }
  else
  {
    HIBYTE(v25) = v15;
    v17 = &__p;
    if (!v15)
      goto LABEL_23;
  }
  memmove(v17, v14, v16);
LABEL_23:
  *((_BYTE *)v17 + v16) = 0;
  sub_239629EF4((uint64_t)&__p, &v26);
  sub_239BC46D4((uint64_t)a1, v26, a2 + 24);
  v20 = v27;
  if (!v27)
    goto LABEL_27;
  v21 = (unint64_t *)&v27->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_27:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v25) < 0)
LABEL_28:
    operator delete(__p);
}

void sub_239BCB514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239416DA0(v15);
  _Unwind_Resume(a1);
}

void sub_239BCB55C(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  double v21;
  int32x4_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  const char *v27;
  size_t v28;
  size_t v29;
  __int128 *p_p;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  size_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  int16x8_t v40;
  std::__shared_weak_count *v41;
  uint64_t *p_info;
  unint64_t v43;
  const char *v44;
  const char *v45;
  size_t v46;
  size_t v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  CFStringRef v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  int16x8_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  const char *v83;
  const char *v84;
  size_t v85;
  size_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const char *v96;
  size_t v97;
  size_t v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  size_t v103;
  size_t v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  int32x4_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  const char *v113;
  const char *v114;
  size_t v115;
  std::string::size_type v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  int8x16_t v120;
  double v121;
  int32x4_t v122;
  CFStringRef v123;
  __int128 v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t *v137;
  unint64_t v138;
  const char *v139;
  const char *v140;
  size_t v141;
  size_t v142;
  __int128 *v143;
  uint64_t v144;
  uint64_t v145;
  int8x16_t v146;
  double v147;
  int32x4_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  const char *v152;
  const char *v153;
  size_t v154;
  size_t v155;
  __int128 *v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  const char *v162;
  size_t v163;
  size_t v164;
  __int128 *v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  int16x8_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  const char *v178;
  const char *v179;
  size_t v180;
  size_t v181;
  __int128 *v182;
  uint64_t v183;
  uint64_t v184;
  int8x16_t v185;
  double v186;
  int32x4_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  const char *v194;
  const char *v195;
  size_t v196;
  size_t v197;
  __int128 *v198;
  uint64_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  int8x16_t *v207;
  size_t v208;
  size_t v209;
  __int128 *v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  size_t v214;
  size_t v215;
  __int128 *v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  const char *v222;
  size_t v223;
  size_t v224;
  __int128 *v225;
  uint64_t v226;
  uint64_t v227;
  int16x8_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  const char *v232;
  const char *v233;
  size_t v234;
  size_t v235;
  __int128 *v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  const char *v242;
  size_t v243;
  std::string::size_type v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  size_t v249;
  size_t v250;
  __int128 *v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t *v255;
  unint64_t v256;
  int16x8_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  const char *v264;
  const char *v265;
  size_t v266;
  size_t v267;
  __int128 *v268;
  uint64_t v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  int v284;
  __int128 v285;
  _BYTE value[23];
  __int128 __p;
  unint64_t v288;
  __int128 theDict;
  _QWORD v290[2];
  __int128 __dst;
  int8x16_t v292;
  char v293;
  __int128 v294;
  std::string v295;
  CFStringRef v296[5];

  v296[2] = *(CFStringRef *)MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  *(_QWORD *)&__p = 0xD0105330119026CLL;
  DWORD2(__p) = 2033931;
  v283 = (uint64_t)a1;
  v4 = sub_23958E4C8((uint64_t)&__p);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v292.i64[0] = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    v292.i8[7] = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(p_dst, v4, v6);
LABEL_9:
  *((_BYTE *)p_dst + v6) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB4338((uint64_t)a1, v295.__r_.__value_.__l.__data_, a2);
  size = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_13;
  v11 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_13:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (v292.i8[7] < 0)
LABEL_14:
    operator delete((void *)__dst);
LABEL_15:
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = xmmword_239F124E9;
  v295.__r_.__value_.__s.__data_[16] = 0;
  sub_2396EFA24((uint64_t)&v295);
  v14 = v13;
  v15 = strlen(v13);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v16;
    v292.i64[0] = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = v17;
  }
  else
  {
    v292.i8[7] = v15;
    v17 = &__dst;
    if (!v15)
      goto LABEL_23;
  }
  memmove(v17, v14, v16);
LABEL_23:
  *((_BYTE *)v17 + v16) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, (const void *)__p, (_BYTE *)(a2 + 264));
  v23 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_27;
  v24 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_27:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v292.i8[7] < 0)
LABEL_28:
    operator delete((void *)__dst);
LABEL_29:
  *(_OWORD *)value = xmmword_239F124FA;
  *(_QWORD *)&value[15] = 0x204080C3A17;
  sub_2396EFBE0((uint64_t)value, (int32x4_t)xmmword_239F124FA, v20, v21, v22);
  v27 = v26;
  v28 = strlen(v26);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    p_p = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__p + 1) = v29;
    v288 = v32 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v288) = v28;
  p_p = &__p;
  if (v28)
LABEL_36:
    memmove(p_p, v27, v29);
  *((_BYTE *)p_p + v29) = 0;
  sub_23962C714(&v285);
  v33 = *(_QWORD **)(a2 + 272);
  if (v33 != (_QWORD *)(a2 + 280))
  {
    do
    {
      std::to_string(&v295, v33[4]);
      sub_23962C714(&theDict);
      strcpy((char *)&v294, "!CCNY");
      v34 = sub_239A90C78((char *)&v294);
      v35 = strlen(v34);
      if (v35 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v36 = v35;
      if (v35 >= 0x17)
      {
        v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17)
          v38 = v35 | 7;
        v39 = v38 + 1;
        v37 = (__int128 *)operator new(v38 + 1);
        *((_QWORD *)&__dst + 1) = v36;
        v292.i64[0] = v39 | 0x8000000000000000;
        *(_QWORD *)&__dst = v37;
      }
      else
      {
        v292.i8[7] = v35;
        v37 = &__dst;
        if (!v35)
          goto LABEL_48;
      }
      memmove(v37, v34, v36);
LABEL_48:
      *((_BYTE *)v37 + v36) = 0;
      sub_239629EF4((uint64_t)&__dst, v296);
      sub_239BC17EC((uint64_t)&theDict, v296[0], v33 + 5);
      v41 = (std::__shared_weak_count *)v296[1];
      if (!v296[1])
        goto LABEL_52;
      p_info = &v296[1]->info;
      do
        v43 = __ldaxr((unint64_t *)p_info);
      while (__stlxr(v43 - 1, (unint64_t *)p_info));
      if (v43)
      {
LABEL_52:
        if ((v292.i8[7] & 0x80000000) == 0)
          goto LABEL_54;
LABEL_53:
        operator delete((void *)__dst);
        goto LABEL_54;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (v292.i8[7] < 0)
        goto LABEL_53;
LABEL_54:
      v290[0] = 0x6B7C7B7A7E6F6D0ELL;
      strcpy((char *)&v290[1], "Qzw~k");
      sub_23971A32C((uint64_t)v290, v40);
      v45 = v44;
      v46 = strlen(v44);
      if (v46 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v47 = v46;
      if (v46 >= 0x17)
      {
        v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v46 | 7) != 0x17)
          v49 = v46 | 7;
        v50 = v49 + 1;
        v48 = (__int128 *)operator new(v49 + 1);
        *((_QWORD *)&__dst + 1) = v47;
        v292.i64[0] = v50 | 0x8000000000000000;
        *(_QWORD *)&__dst = v48;
      }
      else
      {
        v292.i8[7] = v46;
        v48 = &__dst;
        if (!v46)
          goto LABEL_62;
      }
      memmove(v48, v45, v47);
LABEL_62:
      *((_BYTE *)v48 + v47) = 0;
      sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v294);
      v51 = (const void *)v294;
      v52 = theDict;
      if (!*((_QWORD *)&theDict + 1))
        goto LABEL_67;
      v53 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v52 + 1) + 16))(*((_QWORD *)&v52 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v52 + 1));
        if (!(_QWORD)v52)
          goto LABEL_84;
      }
      else
      {
LABEL_67:
        if (!(_QWORD)v52)
          goto LABEL_84;
      }
      if (sub_23962C8DC((const __CFDictionary *)theDict, v51))
        goto LABEL_84;
      v284 = *((_DWORD *)v33 + 16);
      sub_239629634(v296, &v284);
      v57 = v296[0];
      v56 = (std::__shared_weak_count *)v296[1];
      if (v296[1])
      {
        v58 = &v296[1]->info;
        do
          v59 = __ldxr((unint64_t *)v58);
        while (__stxr(v59 + 1, (unint64_t *)v58));
        do
          v60 = __ldaxr((unint64_t *)v58);
        while (__stlxr(v60 - 1, (unint64_t *)v58));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
          if (!v57)
            goto LABEL_76;
LABEL_75:
          j__CFDictionaryAddValue((CFMutableDictionaryRef)theDict, v51, v296[0]);
          goto LABEL_76;
        }
      }
      if (v57)
        goto LABEL_75;
LABEL_76:
      v61 = (std::__shared_weak_count *)v296[1];
      if (v296[1])
      {
        v62 = &v296[1]->info;
        do
          v63 = __ldaxr((unint64_t *)v62);
        while (__stlxr(v63 - 1, (unint64_t *)v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
LABEL_84:
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
      if (*((_QWORD *)&v294 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if ((v292.i8[7] & 0x80000000) == 0)
            goto LABEL_90;
LABEL_89:
          operator delete((void *)__dst);
          goto LABEL_90;
        }
      }
      if (v292.i8[7] < 0)
        goto LABEL_89;
LABEL_90:
      sub_239629EF4((uint64_t)&v295, (CFStringRef *)&__dst);
      sub_239BB7018((uint64_t)&v285, (const void *)__dst, (uint64_t)&theDict);
      v67 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (!*((_QWORD *)&__dst + 1))
        goto LABEL_94;
      v68 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
        if (!*((_QWORD *)&theDict + 1))
          goto LABEL_102;
      }
      else
      {
LABEL_94:
        v70 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
        if (!*((_QWORD *)&theDict + 1))
          goto LABEL_102;
      }
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(p_shared_owners);
      while (__stlxr(v72 - 1, p_shared_owners));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
LABEL_102:
      if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v295.__r_.__value_.__l.__data_);
        v73 = (_QWORD *)v33[1];
        if (v73)
        {
          do
          {
LABEL_106:
            v74 = v73;
            v73 = (_QWORD *)*v73;
          }
          while (v73);
          goto LABEL_39;
        }
      }
      else
      {
        v73 = (_QWORD *)v33[1];
        if (v73)
          goto LABEL_106;
      }
      do
      {
        v74 = (_QWORD *)v33[2];
        v75 = *v74 == (_QWORD)v33;
        v33 = v74;
      }
      while (!v75);
LABEL_39:
      v33 = v74;
    }
    while (v74 != (_QWORD *)(a2 + 280));
  }
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)&__dst);
  sub_239BB7018((uint64_t)a1, (const void *)__dst, (uint64_t)&v285);
  v77 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_117;
  v78 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
    if (!*((_QWORD *)&v285 + 1))
      goto LABEL_121;
  }
  else
  {
LABEL_117:
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v285 + 1);
    if (!*((_QWORD *)&v285 + 1))
      goto LABEL_121;
  }
  v81 = (unint64_t *)&v80->__shared_owners_;
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (v82)
  {
LABEL_121:
    if ((SHIBYTE(v288) & 0x80000000) == 0)
      goto LABEL_123;
    goto LABEL_122;
  }
  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
  std::__shared_weak_count::__release_weak(v80);
  if (SHIBYTE(v288) < 0)
LABEL_122:
    operator delete((void *)__p);
LABEL_123:
  strcpy(value, "R '<&;?7\r;<4=");
  sub_23971A32C((uint64_t)value, v76);
  v84 = v83;
  v85 = strlen(v83);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v86 = v85;
  if (v85 >= 0x17)
  {
    v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v88 = v85 | 7;
    v89 = v88 + 1;
    v87 = (__int128 *)operator new(v88 + 1);
    *((_QWORD *)&__dst + 1) = v86;
    v292.i64[0] = v89 | 0x8000000000000000;
    *(_QWORD *)&__dst = v87;
  }
  else
  {
    v292.i8[7] = v85;
    v87 = &__dst;
    if (!v85)
      goto LABEL_131;
  }
  memmove(v87, v84, v86);
LABEL_131:
  *((_BYTE *)v87 + v86) = 0;
  sub_239BCA2E4((uint64_t)&__p, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 392));
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB7018((uint64_t)a1, v295.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v90 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_135;
  v91 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    v93 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_139;
  }
  else
  {
LABEL_135:
    v93 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_139;
  }
  v94 = (unint64_t *)&v93->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (v95)
  {
LABEL_139:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (v292.i8[7] < 0)
LABEL_140:
    operator delete((void *)__dst);
LABEL_141:
  *(_QWORD *)&theDict = 0x636F5368697F790CLL;
  strcpy((char *)&theDict + 8, "bjek");
  v96 = sub_239510ECC((uint64_t)&theDict);
  v97 = strlen(v96);
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v98 = v97;
  if (v97 >= 0x17)
  {
    v100 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v100 = v97 | 7;
    v101 = v100 + 1;
    v99 = (__int128 *)operator new(v100 + 1);
    *((_QWORD *)&__p + 1) = v98;
    v288 = v101 | 0x8000000000000000;
    *(_QWORD *)&__p = v99;
    goto LABEL_148;
  }
  HIBYTE(v288) = v97;
  v99 = &__p;
  if (v97)
LABEL_148:
    memmove(v99, v96, v98);
  *((_BYTE *)v99 + v98) = 0;
  sub_23962C714(&v294);
  strcpy(value, ">PKSaJVL[_ZM");
  v102 = sub_239510ECC((uint64_t)value);
  v103 = strlen(v102);
  if (v103 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v104 = v103;
  if (v103 >= 0x17)
  {
    v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v103 | 7) != 0x17)
      v106 = v103 | 7;
    v107 = v106 + 1;
    v105 = (__int128 *)operator new(v106 + 1);
    *((_QWORD *)&__dst + 1) = v104;
    v292.i64[0] = v107 | 0x8000000000000000;
    *(_QWORD *)&__dst = v105;
  }
  else
  {
    v292.i8[7] = v103;
    v105 = &__dst;
    if (!v103)
      goto LABEL_157;
  }
  memmove(v105, v102, v104);
LABEL_157:
  *((_BYTE *)v105 + v104) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB4338((uint64_t)&v294, v295.__r_.__value_.__l.__data_, a2 + 20);
  v110 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_161;
  v111 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (v112)
  {
LABEL_161:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_163;
    goto LABEL_162;
  }
  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
  std::__shared_weak_count::__release_weak(v110);
  if (v292.i8[7] < 0)
LABEL_162:
    operator delete((void *)__dst);
LABEL_163:
  __dst = xmmword_239F10BB0;
  v292 = xmmword_239F10BC0;
  v293 = 0;
  sub_2396EFE38((uint64_t)&__dst, (int32x4_t)xmmword_239F10BB0, xmmword_239F10BC0, v108, v109);
  v114 = v113;
  v115 = strlen(v113);
  if (v115 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v116 = v115;
  if (v115 >= 0x17)
  {
    v118 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v115 | 7) != 0x17)
      v118 = v115 | 7;
    v119 = v118 + 1;
    v117 = operator new(v118 + 1);
    v295.__r_.__value_.__l.__size_ = v116;
    v295.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
    v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
  }
  else
  {
    *((_BYTE *)&v295.__r_.__value_.__s + 23) = v115;
    v117 = &v295;
    if (!v115)
      goto LABEL_171;
  }
  memmove(v117, v114, v116);
LABEL_171:
  *((_BYTE *)v117 + v116) = 0;
  sub_239629EF4((uint64_t)&v295, v296);
  v123 = v296[0];
  v124 = v294;
  if (!*((_QWORD *)&v294 + 1))
    goto LABEL_176;
  v125 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
  do
    v126 = __ldxr(v125);
  while (__stxr(v126 + 1, v125));
  do
    v127 = __ldaxr(v125);
  while (__stlxr(v127 - 1, v125));
  if (!v127)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v124 + 1) + 16))(*((_QWORD *)&v124 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v124 + 1));
    if (!(_QWORD)v124)
      goto LABEL_205;
  }
  else
  {
LABEL_176:
    if (!(_QWORD)v124)
      goto LABEL_205;
  }
  if (sub_23962C8DC((const __CFDictionary *)v294, v123))
    goto LABEL_205;
  LODWORD(v285) = *(_DWORD *)(a2 + 8);
  sub_239629634(value, &v285);
  v128 = *(_QWORD *)value;
  v129 = *(std::__shared_weak_count **)&value[8];
  if (*(_QWORD *)&value[8])
  {
    v130 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    do
      v132 = __ldaxr(v130);
    while (__stlxr(v132 - 1, v130));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      if (!v128)
        goto LABEL_185;
      goto LABEL_184;
    }
  }
  if (v128)
LABEL_184:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)v294, v123, *(const void **)value);
LABEL_185:
  v133 = *(std::__shared_weak_count **)&value[8];
  if (*(_QWORD *)&value[8])
  {
    v134 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
LABEL_205:
  v136 = (std::__shared_weak_count *)v296[1];
  if (!v296[1])
    goto LABEL_209;
  v137 = &v296[1]->info;
  do
    v138 = __ldaxr((unint64_t *)v137);
  while (__stlxr(v138 - 1, (unint64_t *)v137));
  if (v138)
  {
LABEL_209:
    if ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_210;
  }
  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
  std::__shared_weak_count::__release_weak(v136);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
LABEL_210:
    operator delete(v295.__r_.__value_.__l.__data_);
LABEL_211:
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = xmmword_239F10BD1;
  LODWORD(v295.__r_.__value_.__r.__words[2]) = 7825278;
  sub_23958E55C((uint64_t)&v295, (int32x4_t)xmmword_239F10BD1, v120, v121, v122);
  v140 = v139;
  v141 = strlen(v139);
  if (v141 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v142 = v141;
  if (v141 >= 0x17)
  {
    v144 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v141 | 7) != 0x17)
      v144 = v141 | 7;
    v145 = v144 + 1;
    v143 = (__int128 *)operator new(v144 + 1);
    *((_QWORD *)&__dst + 1) = v142;
    v292.i64[0] = v145 | 0x8000000000000000;
    *(_QWORD *)&__dst = v143;
  }
  else
  {
    v292.i8[7] = v141;
    v143 = &__dst;
    if (!v141)
      goto LABEL_219;
  }
  memmove(v143, v140, v142);
LABEL_219:
  *((_BYTE *)v143 + v142) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)value);
  sub_239BB4338((uint64_t)&v294, *(const void **)value, a2 + 12);
  v149 = *(std::__shared_weak_count **)&value[8];
  if (!*(_QWORD *)&value[8])
    goto LABEL_223;
  v150 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
  do
    v151 = __ldaxr(v150);
  while (__stlxr(v151 - 1, v150));
  if (v151)
  {
LABEL_223:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_225;
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
  std::__shared_weak_count::__release_weak(v149);
  if (v292.i8[7] < 0)
LABEL_224:
    operator delete((void *)__dst);
LABEL_225:
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = xmmword_239F10BE5;
  v295.__r_.__value_.__r.__words[2] = 0x34243D30270E29;
  sub_2396F1A4C((uint64_t)&v295, (int32x4_t)xmmword_239F10BE5, v146, v147, v148);
  v153 = v152;
  v154 = strlen(v152);
  if (v154 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v155 = v154;
  if (v154 >= 0x17)
  {
    v157 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v154 | 7) != 0x17)
      v157 = v154 | 7;
    v158 = v157 + 1;
    v156 = (__int128 *)operator new(v157 + 1);
    *((_QWORD *)&__dst + 1) = v155;
    v292.i64[0] = v158 | 0x8000000000000000;
    *(_QWORD *)&__dst = v156;
  }
  else
  {
    v292.i8[7] = v154;
    v156 = &__dst;
    if (!v154)
      goto LABEL_233;
  }
  memmove(v156, v153, v155);
LABEL_233:
  *((_BYTE *)v156 + v155) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)value);
  sub_239BB4338((uint64_t)&v294, *(const void **)value, a2 + 16);
  v159 = *(std::__shared_weak_count **)&value[8];
  if (!*(_QWORD *)&value[8])
    goto LABEL_237;
  v160 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
  do
    v161 = __ldaxr(v160);
  while (__stlxr(v161 - 1, v160));
  if (v161)
  {
LABEL_237:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_239;
    goto LABEL_238;
  }
  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
  std::__shared_weak_count::__release_weak(v159);
  if (v292.i8[7] < 0)
LABEL_238:
    operator delete((void *)__dst);
LABEL_239:
  strcpy(value, "*MZ_uCNY");
  v162 = sub_239513718(value);
  v163 = strlen(v162);
  if (v163 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v164 = v163;
  if (v163 >= 0x17)
  {
    v166 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v163 | 7) != 0x17)
      v166 = v163 | 7;
    v167 = v166 + 1;
    v165 = (__int128 *)operator new(v166 + 1);
    *((_QWORD *)&__dst + 1) = v164;
    v292.i64[0] = v167 | 0x8000000000000000;
    *(_QWORD *)&__dst = v165;
  }
  else
  {
    v292.i8[7] = v163;
    v165 = &__dst;
    if (!v163)
      goto LABEL_247;
  }
  memmove(v165, v162, v164);
LABEL_247:
  *((_BYTE *)v165 + v164) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB4494((uint64_t)&v294, v295.__r_.__value_.__l.__data_, (uint64_t *)(a2 + 24));
  v168 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v169 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
      if ((v292.i8[7] & 0x80000000) == 0)
        goto LABEL_253;
      goto LABEL_252;
    }
  }
  if (v292.i8[7] < 0)
LABEL_252:
    operator delete((void *)__dst);
LABEL_253:
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)&__dst);
  sub_239BB7018(v283, (const void *)__dst, (uint64_t)&v294);
  v172 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_257;
  v173 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v174 = __ldaxr(v173);
  while (__stlxr(v174 - 1, v173));
  if (!v174)
  {
    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
    std::__shared_weak_count::__release_weak(v172);
    v175 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
    if (!*((_QWORD *)&v294 + 1))
      goto LABEL_261;
  }
  else
  {
LABEL_257:
    v175 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
    if (!*((_QWORD *)&v294 + 1))
      goto LABEL_261;
  }
  v176 = (unint64_t *)&v175->__shared_owners_;
  do
    v177 = __ldaxr(v176);
  while (__stlxr(v177 - 1, v176));
  if (v177)
  {
LABEL_261:
    if ((SHIBYTE(v288) & 0x80000000) == 0)
      goto LABEL_263;
    goto LABEL_262;
  }
  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
  std::__shared_weak_count::__release_weak(v175);
  if (SHIBYTE(v288) < 0)
LABEL_262:
    operator delete((void *)__p);
LABEL_263:
  strcpy(value, ":OI_^eWVWU^_V");
  sub_23971A32C((uint64_t)value, v171);
  v179 = v178;
  v180 = strlen(v178);
  if (v180 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v181 = v180;
  if (v180 >= 0x17)
  {
    v183 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17)
      v183 = v180 | 7;
    v184 = v183 + 1;
    v182 = (__int128 *)operator new(v183 + 1);
    *((_QWORD *)&__dst + 1) = v181;
    v292.i64[0] = v184 | 0x8000000000000000;
    *(_QWORD *)&__dst = v182;
  }
  else
  {
    v292.i8[7] = v180;
    v182 = &__dst;
    if (!v180)
      goto LABEL_271;
  }
  memmove(v182, v179, v181);
LABEL_271:
  *((_BYTE *)v182 + v181) = 0;
  sub_239BCB268(&__p, a2 + 168);
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB7018(v283, v295.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v188 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_275;
  v189 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (!v190)
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
    v191 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_279;
  }
  else
  {
LABEL_275:
    v191 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_279;
  }
  v192 = (unint64_t *)&v191->__shared_owners_;
  do
    v193 = __ldaxr(v192);
  while (__stlxr(v193 - 1, v192));
  if (v193)
  {
LABEL_279:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_281;
    goto LABEL_280;
  }
  ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
  std::__shared_weak_count::__release_weak(v191);
  if (v292.i8[7] < 0)
LABEL_280:
    operator delete((void *)__dst);
LABEL_281:
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = xmmword_239F12511;
  v295.__r_.__value_.__r.__words[2] = 0x7E77767D7F7E7FLL;
  sub_2396F1A4C((uint64_t)&v295, (int32x4_t)xmmword_239F12511, v185, v186, v187);
  v195 = v194;
  v196 = strlen(v194);
  if (v196 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v197 = v196;
  if (v196 >= 0x17)
  {
    v199 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v196 | 7) != 0x17)
      v199 = v196 | 7;
    v200 = v199 + 1;
    v198 = (__int128 *)operator new(v199 + 1);
    *((_QWORD *)&__dst + 1) = v197;
    v292.i64[0] = v200 | 0x8000000000000000;
    *(_QWORD *)&__dst = v198;
  }
  else
  {
    v292.i8[7] = v196;
    v198 = &__dst;
    if (!v196)
      goto LABEL_289;
  }
  memmove(v198, v195, v197);
LABEL_289:
  *((_BYTE *)v198 + v197) = 0;
  sub_239BCB268(value, a2 + 216);
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&__p);
  sub_239BB7018(v283, (const void *)__p, (uint64_t)value);
  v201 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_293;
  v202 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
    std::__shared_weak_count::__release_weak(v201);
    v204 = *(std::__shared_weak_count **)&value[8];
    if (!*(_QWORD *)&value[8])
      goto LABEL_297;
  }
  else
  {
LABEL_293:
    v204 = *(std::__shared_weak_count **)&value[8];
    if (!*(_QWORD *)&value[8])
      goto LABEL_297;
  }
  v205 = (unint64_t *)&v204->__shared_owners_;
  do
    v206 = __ldaxr(v205);
  while (__stlxr(v206 - 1, v205));
  if (v206)
  {
LABEL_297:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_299;
    goto LABEL_298;
  }
  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
  std::__shared_weak_count::__release_weak(v204);
  if (v292.i8[7] < 0)
LABEL_298:
    operator delete((void *)__dst);
LABEL_299:
  *(_OWORD *)value = xmmword_239F12529;
  strcpy(&value[16], ".");
  v207 = sub_239A91B18((int8x16_t *)value);
  v208 = strlen(v207->i8);
  if (v208 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v209 = v208;
  if (v208 >= 0x17)
  {
    v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17)
      v211 = v208 | 7;
    v212 = v211 + 1;
    v210 = (__int128 *)operator new(v211 + 1);
    *((_QWORD *)&__p + 1) = v209;
    v288 = v212 | 0x8000000000000000;
    *(_QWORD *)&__p = v210;
    goto LABEL_306;
  }
  HIBYTE(v288) = v208;
  v210 = &__p;
  if (v208)
LABEL_306:
    memmove(v210, v207, v209);
  *((_BYTE *)v210 + v209) = 0;
  sub_23962C714(&theDict);
  v213 = sub_23958E4C8((uint64_t)v296);
  v214 = strlen(v213);
  if (v214 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v215 = v214;
  if (v214 >= 0x17)
  {
    v217 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v214 | 7) != 0x17)
      v217 = v214 | 7;
    v218 = v217 + 1;
    v216 = (__int128 *)operator new(v217 + 1);
    *((_QWORD *)&__dst + 1) = v215;
    v292.i64[0] = v218 | 0x8000000000000000;
    *(_QWORD *)&__dst = v216;
  }
  else
  {
    v292.i8[7] = v214;
    v216 = &__dst;
    if (!v214)
      goto LABEL_315;
  }
  memmove(v216, v213, v215);
LABEL_315:
  *((_BYTE *)v216 + v215) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB4338((uint64_t)&theDict, v295.__r_.__value_.__l.__data_, a2 + 296);
  v219 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_319;
  v220 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (v221)
  {
LABEL_319:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_321;
    goto LABEL_320;
  }
  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
  std::__shared_weak_count::__release_weak(v219);
  if (v292.i8[7] < 0)
LABEL_320:
    operator delete((void *)__dst);
LABEL_321:
  strcpy((char *)v296, "Q\"2>#4");
  v222 = sub_239513174((char *)v296);
  v223 = strlen(v222);
  if (v223 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v224 = v223;
  if (v223 >= 0x17)
  {
    v226 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17)
      v226 = v223 | 7;
    v227 = v226 + 1;
    v225 = (__int128 *)operator new(v226 + 1);
    *((_QWORD *)&__dst + 1) = v224;
    v292.i64[0] = v227 | 0x8000000000000000;
    *(_QWORD *)&__dst = v225;
  }
  else
  {
    v292.i8[7] = v223;
    v225 = &__dst;
    if (!v223)
      goto LABEL_329;
  }
  memmove(v225, v222, v224);
LABEL_329:
  *((_BYTE *)v225 + v224) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB47DC((uint64_t)&theDict, v295.__r_.__value_.__l.__data_, a2 + 300);
  v229 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_333;
  v230 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v231 = __ldaxr(v230);
  while (__stlxr(v231 - 1, v230));
  if (v231)
  {
LABEL_333:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_335;
    goto LABEL_334;
  }
  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
  std::__shared_weak_count::__release_weak(v229);
  if (v292.i8[7] < 0)
LABEL_334:
    operator delete((void *)__dst);
LABEL_335:
  strcpy((char *)v296, "*CYuMEENuGKYA");
  sub_23971A32C((uint64_t)v296, v228);
  v233 = v232;
  v234 = strlen(v232);
  if (v234 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v235 = v234;
  if (v234 >= 0x17)
  {
    v237 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v234 | 7) != 0x17)
      v237 = v234 | 7;
    v238 = v237 + 1;
    v236 = (__int128 *)operator new(v237 + 1);
    *((_QWORD *)&__dst + 1) = v235;
    v292.i64[0] = v238 | 0x8000000000000000;
    *(_QWORD *)&__dst = v236;
  }
  else
  {
    v292.i8[7] = v234;
    v236 = &__dst;
    if (!v234)
      goto LABEL_343;
  }
  memmove(v236, v233, v235);
LABEL_343:
  *((_BYTE *)v236 + v235) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_2396B4EAC((uint64_t)&theDict, v295.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 304));
  v239 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_347;
  v240 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (v241)
  {
LABEL_347:
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_349;
    goto LABEL_348;
  }
  ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
  std::__shared_weak_count::__release_weak(v239);
  if (v292.i8[7] < 0)
LABEL_348:
    operator delete((void *)__dst);
LABEL_349:
  *(_QWORD *)&v285 = 0x2824182322343247;
  strcpy((char *)&v285 + 8, ")!. ");
  v242 = sub_239510ECC((uint64_t)&v285);
  v243 = strlen(v242);
  if (v243 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v244 = v243;
  if (v243 >= 0x17)
  {
    v246 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v243 | 7) != 0x17)
      v246 = v243 | 7;
    v247 = v246 + 1;
    v245 = operator new(v246 + 1);
    v295.__r_.__value_.__l.__size_ = v244;
    v295.__r_.__value_.__r.__words[2] = v247 | 0x8000000000000000;
    v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
    goto LABEL_356;
  }
  *((_BYTE *)&v295.__r_.__value_.__s + 23) = v243;
  v245 = &v295;
  if (v243)
LABEL_356:
    memmove(v245, v242, v244);
  *((_BYTE *)v245 + v244) = 0;
  sub_23962C714(&v294);
  strcpy((char *)v290, "S';!6 ;<?7");
  v248 = (const char *)sub_23958E518((uint64_t)v290);
  v249 = strlen(v248);
  if (v249 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v250 = v249;
  if (v249 >= 0x17)
  {
    v252 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v249 | 7) != 0x17)
      v252 = v249 | 7;
    v253 = v252 + 1;
    v251 = (__int128 *)operator new(v252 + 1);
    *((_QWORD *)&__dst + 1) = v250;
    v292.i64[0] = v253 | 0x8000000000000000;
    *(_QWORD *)&__dst = v251;
  }
  else
  {
    v292.i8[7] = v249;
    v251 = &__dst;
    if (!v249)
      goto LABEL_365;
  }
  memmove(v251, v248, v250);
LABEL_365:
  *((_BYTE *)v251 + v250) = 0;
  sub_239629EF4((uint64_t)&__dst, v296);
  sub_239BB47DC((uint64_t)&v294, v296[0], a2 + 384);
  v254 = (std::__shared_weak_count *)v296[1];
  if (v296[1])
  {
    v255 = &v296[1]->info;
    do
      v256 = __ldaxr((unint64_t *)v255);
    while (__stlxr(v256 - 1, (unint64_t *)v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
      if ((v292.i8[7] & 0x80000000) == 0)
        goto LABEL_371;
      goto LABEL_370;
    }
  }
  if (v292.i8[7] < 0)
LABEL_370:
    operator delete((void *)__dst);
LABEL_371:
  sub_239629EF4((uint64_t)&v295, (CFStringRef *)&__dst);
  sub_239BB7018((uint64_t)&theDict, (const void *)__dst, (uint64_t)&v294);
  v258 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_375;
  v259 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v260 = __ldaxr(v259);
  while (__stlxr(v260 - 1, v259));
  if (!v260)
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    v261 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
    if (!*((_QWORD *)&v294 + 1))
      goto LABEL_379;
  }
  else
  {
LABEL_375:
    v261 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
    if (!*((_QWORD *)&v294 + 1))
      goto LABEL_379;
  }
  v262 = (unint64_t *)&v261->__shared_owners_;
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (v263)
  {
LABEL_379:
    if ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_381;
    goto LABEL_380;
  }
  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
  std::__shared_weak_count::__release_weak(v261);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
LABEL_380:
    operator delete(v295.__r_.__value_.__l.__data_);
LABEL_381:
  *(_QWORD *)&v294 = 0x60E0A170D161163;
  WORD6(v294) = 12;
  DWORD2(v294) = 84740668;
  sub_23971A32C((uint64_t)&v294, v257);
  v265 = v264;
  v266 = strlen(v264);
  if (v266 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v267 = v266;
  if (v266 >= 0x17)
  {
    v269 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v266 | 7) != 0x17)
      v269 = v266 | 7;
    v270 = v269 + 1;
    v268 = (__int128 *)operator new(v269 + 1);
    *((_QWORD *)&__dst + 1) = v267;
    v292.i64[0] = v270 | 0x8000000000000000;
    *(_QWORD *)&__dst = v268;
  }
  else
  {
    v292.i8[7] = v266;
    v268 = &__dst;
    if (!v266)
      goto LABEL_389;
  }
  memmove(v268, v265, v267);
LABEL_389:
  *((_BYTE *)v268 + v267) = 0;
  sub_239BCA2E4((uint64_t)v296, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 312));
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v295);
  sub_239BB7018((uint64_t)&theDict, v295.__r_.__value_.__l.__data_, (uint64_t)v296);
  v271 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (!v295.__r_.__value_.__l.__size_)
    goto LABEL_393;
  v272 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
  do
    v273 = __ldaxr(v272);
  while (__stlxr(v273 - 1, v272));
  if (!v273)
  {
    ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
    std::__shared_weak_count::__release_weak(v271);
    v274 = (std::__shared_weak_count *)v296[1];
    if (!v296[1])
      goto LABEL_397;
  }
  else
  {
LABEL_393:
    v274 = (std::__shared_weak_count *)v296[1];
    if (!v296[1])
      goto LABEL_397;
  }
  v275 = (unint64_t *)&v274->__shared_owners_;
  do
    v276 = __ldaxr(v275);
  while (__stlxr(v276 - 1, v275));
  if (!v276)
  {
    ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
    std::__shared_weak_count::__release_weak(v274);
    if ((v292.i8[7] & 0x80000000) == 0)
      goto LABEL_399;
    goto LABEL_398;
  }
LABEL_397:
  if (v292.i8[7] < 0)
LABEL_398:
    operator delete((void *)__dst);
LABEL_399:
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)&__dst);
  sub_239BB7018(v283, (const void *)__dst, (uint64_t)&theDict);
  v277 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_403;
  v278 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v279 = __ldaxr(v278);
  while (__stlxr(v279 - 1, v278));
  if (!v279)
  {
    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
    std::__shared_weak_count::__release_weak(v277);
    v280 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_407;
  }
  else
  {
LABEL_403:
    v280 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_407;
  }
  v281 = (unint64_t *)&v280->__shared_owners_;
  do
    v282 = __ldaxr(v281);
  while (__stlxr(v282 - 1, v281));
  if (v282)
  {
LABEL_407:
    if ((SHIBYTE(v288) & 0x80000000) == 0)
      return;
    goto LABEL_408;
  }
  ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
  std::__shared_weak_count::__release_weak(v280);
  if (SHIBYTE(v288) < 0)
LABEL_408:
    operator delete((void *)__p);
}

void sub_239BCD2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  sub_239416DA0((uint64_t)&a15);
  sub_239416DA0(v34 - 120);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v33 + 16));
  sub_239416DA0(v34 - 160);
  if (a23 < 0)
    operator delete(__p);
  sub_239416DA0(a11);
  _Unwind_Resume(a1);
}

void sub_239BCD644(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int8x16_t *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  double v20;
  int32x4_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  double v33;
  int32x4_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  const char *v39;
  size_t v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  double v46;
  int32x4_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const char *v51;
  const char *v52;
  size_t v53;
  size_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  double v59;
  int32x4_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  const char *v65;
  size_t v66;
  size_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int8x8_t *v74;
  size_t v75;
  size_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int8x16_t *v83;
  size_t v84;
  size_t v85;
  __int128 *p_p;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int16x8_t v90;
  const char *v91;
  const char *v92;
  size_t v93;
  size_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  int32x4_t v98;
  double v99;
  int32x4_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unsigned __int8 *v104;
  size_t v105;
  size_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  double v111;
  int32x4_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  const char *v116;
  const char *v117;
  size_t v118;
  size_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  int8x16_t v123;
  double v124;
  int32x4_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  const char *v129;
  const char *v130;
  size_t v131;
  size_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  int8x16_t v136;
  double v137;
  int32x4_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  const char *v142;
  const char *v143;
  size_t v144;
  size_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  BOOL v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  const char *v167;
  const char *v168;
  size_t v169;
  size_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  int8x16_t v174;
  double v175;
  int32x4_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  const char *v180;
  const char *v181;
  size_t v182;
  size_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int16x8_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  const char *v191;
  const char *v192;
  size_t v193;
  size_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  const char *v204;
  size_t v205;
  size_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  int16x8_t v210;
  const char *v211;
  const char *v212;
  size_t v213;
  size_t v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  int8x16_t *v221;
  size_t v222;
  size_t v223;
  _BYTE *v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  const char *v230;
  size_t v231;
  size_t v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  int8x16_t v236;
  double v237;
  int32x4_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  const char *v242;
  const char *v243;
  size_t v244;
  size_t v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  const void *v249;
  __int128 v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  __int128 v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  const char *v264;
  size_t v265;
  size_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  int8x16_t v270;
  double v271;
  int32x4_t v272;
  const void *v273;
  __int128 v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  __int128 v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  const char *v288;
  const char *v289;
  size_t v290;
  size_t v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  int8x16_t v295;
  double v296;
  int32x4_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  const char *v301;
  const char *v302;
  size_t v303;
  size_t v304;
  _BYTE *v305;
  uint64_t v306;
  uint64_t v307;
  int8x16_t v308;
  double v309;
  int32x4_t v310;
  const void *v311;
  __int128 v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  __int128 v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  const char *v326;
  const char *v327;
  size_t v328;
  size_t v329;
  _BYTE *v330;
  uint64_t v331;
  uint64_t v332;
  int8x16_t v333;
  double v334;
  int32x4_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  const char *v339;
  const char *v340;
  size_t v341;
  size_t v342;
  _BYTE *v343;
  uint64_t v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  int8x16_t *v349;
  size_t v350;
  size_t v351;
  _BYTE *v352;
  uint64_t v353;
  uint64_t v354;
  int8x16_t v355;
  double v356;
  int32x4_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  const char *v361;
  const char *v362;
  size_t v363;
  size_t v364;
  _BYTE *v365;
  uint64_t v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  const char *v371;
  size_t v372;
  size_t v373;
  _BYTE *v374;
  uint64_t v375;
  uint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  __int128 v386;
  __int128 v387;
  __int16 v388;
  __int128 __p;
  unint64_t v390;
  _BYTE __dst[28];
  __int128 v392;
  std::string v393;
  char v394[24];
  __int128 v395;
  uint64_t v396;

  v396 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  v393.__r_.__value_.__r.__words[0] = 0x15191D2B19011A74;
  LODWORD(v393.__r_.__value_.__r.__words[1]) = 463123;
  v4 = sub_23958E4C8((uint64_t)&v393);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)&__dst[8] = v6;
    *(_QWORD *)&__dst[16] = v9 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
  }
  else
  {
    __dst[23] = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, v4, v6);
LABEL_9:
  v7[v6] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v394);
  sub_239BB4A9C((uint64_t)a1, *(const void **)v394, a2);
  v10 = *(std::__shared_weak_count **)&v394[8];
  if (!*(_QWORD *)&v394[8])
    goto LABEL_13;
  v11 = (unint64_t *)(*(_QWORD *)&v394[8] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_13:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_14:
    operator delete(*(void **)__dst);
LABEL_15:
  *(_OWORD *)v394 = xmmword_239F12597;
  strcpy(&v394[16], "?");
  v13 = sub_239A91B18((int8x16_t *)v394);
  v14 = strlen(v13->i8);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&__dst[8] = v15;
    *(_QWORD *)&__dst[16] = v18 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    __dst[23] = v14;
    v16 = __dst;
    if (!v14)
      goto LABEL_23;
  }
  memmove(v16, v13, v15);
LABEL_23:
  v16[v15] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v393);
  sub_239BB4A9C((uint64_t)a1, v393.__r_.__value_.__l.__data_, a2 + 8);
  size = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_27;
  v23 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_27:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_28:
    operator delete(*(void **)__dst);
LABEL_29:
  *(_OWORD *)__dst = xmmword_239F125A9;
  *(_OWORD *)&__dst[10] = *(__int128 *)((char *)&xmmword_239F125A9 + 10);
  sub_239A93C04(__dst, *(int32x4_t *)((char *)&xmmword_239F125A9 + 10), v19, v20, v21);
  v26 = v25;
  v27 = strlen(v25);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = (char *)operator new(v30 + 1);
    *(_QWORD *)&v394[8] = v28;
    *(_QWORD *)&v394[16] = v31 | 0x8000000000000000;
    *(_QWORD *)v394 = v29;
  }
  else
  {
    v394[23] = v27;
    v29 = v394;
    if (!v27)
      goto LABEL_37;
  }
  memmove(v29, v26, v28);
LABEL_37:
  v29[v28] = 0;
  sub_239629EF4((uint64_t)v394, (CFStringRef *)&v393);
  sub_239BB4338((uint64_t)a1, v393.__r_.__value_.__l.__data_, a2 + 16);
  v35 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_41;
  v36 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_41:
    if ((v394[23] & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (v394[23] < 0)
LABEL_42:
    operator delete(*(void **)v394);
LABEL_43:
  *(_OWORD *)__dst = xmmword_239F125C3;
  strcpy(&__dst[11], "~kjmzl@pjk@r~lt");
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F125C3 + 11), v32, v33, v34);
  v39 = v38;
  v40 = strlen(v38);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = (char *)operator new(v43 + 1);
    *(_QWORD *)&v394[8] = v41;
    *(_QWORD *)&v394[16] = v44 | 0x8000000000000000;
    *(_QWORD *)v394 = v42;
  }
  else
  {
    v394[23] = v40;
    v42 = v394;
    if (!v40)
      goto LABEL_51;
  }
  memmove(v42, v39, v41);
LABEL_51:
  v42[v41] = 0;
  sub_239629EF4((uint64_t)v394, (CFStringRef *)&v393);
  sub_239BB4338((uint64_t)a1, v393.__r_.__value_.__l.__data_, a2 + 20);
  v48 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_55;
  v49 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_55:
    if ((v394[23] & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
  std::__shared_weak_count::__release_weak(v48);
  if (v394[23] < 0)
LABEL_56:
    operator delete(*(void **)v394);
LABEL_57:
  *(_OWORD *)__dst = xmmword_239F125DE;
  *(_OWORD *)&__dst[11] = *(__int128 *)((char *)&xmmword_239F125DE + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F125DE + 11), v45, v46, v47);
  v52 = v51;
  v53 = strlen(v51);
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v54 = v53;
  if (v53 >= 0x17)
  {
    v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v56 = v53 | 7;
    v57 = v56 + 1;
    v55 = (char *)operator new(v56 + 1);
    *(_QWORD *)&v394[8] = v54;
    *(_QWORD *)&v394[16] = v57 | 0x8000000000000000;
    *(_QWORD *)v394 = v55;
  }
  else
  {
    v394[23] = v53;
    v55 = v394;
    if (!v53)
      goto LABEL_65;
  }
  memmove(v55, v52, v54);
LABEL_65:
  v55[v54] = 0;
  sub_239629EF4((uint64_t)v394, (CFStringRef *)&v393);
  sub_239BB47DC((uint64_t)a1, v393.__r_.__value_.__l.__data_, a2 + 24);
  v61 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_69;
  v62 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (v63)
  {
LABEL_69:
    if ((v394[23] & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
  std::__shared_weak_count::__release_weak(v61);
  if (v394[23] < 0)
LABEL_70:
    operator delete(*(void **)v394);
LABEL_71:
  *(_OWORD *)__dst = xmmword_239F125F9;
  *(_OWORD *)&__dst[12] = *(__int128 *)((char *)&xmmword_239F125F9 + 12);
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F125F9 + 12), v58, v59, v60);
  v65 = v64;
  v66 = strlen(v64);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v67 = v66;
  if (v66 >= 0x17)
  {
    v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v69 = v66 | 7;
    v70 = v69 + 1;
    v68 = (char *)operator new(v69 + 1);
    *(_QWORD *)&v394[8] = v67;
    *(_QWORD *)&v394[16] = v70 | 0x8000000000000000;
    *(_QWORD *)v394 = v68;
  }
  else
  {
    v394[23] = v66;
    v68 = v394;
    if (!v66)
      goto LABEL_79;
  }
  memmove(v68, v65, v67);
LABEL_79:
  v68[v67] = 0;
  sub_239629EF4((uint64_t)v394, (CFStringRef *)&v393);
  sub_239BB47DC((uint64_t)a1, v393.__r_.__value_.__l.__data_, a2 + 28);
  v71 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_83;
  v72 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (v73)
  {
LABEL_83:
    if ((v394[23] & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
  std::__shared_weak_count::__release_weak(v71);
  if (v394[23] < 0)
LABEL_84:
    operator delete(*(void **)v394);
LABEL_85:
  v393.__r_.__value_.__r.__words[0] = 0x734B717375797D14;
  LOWORD(v393.__r_.__value_.__r.__words[1]) = 100;
  v74 = sub_23950FF84((int8x8_t *)&v393);
  v75 = strlen((const char *)v74);
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v76 = v75;
  if (v75 >= 0x17)
  {
    v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v78 = v75 | 7;
    v79 = v78 + 1;
    v77 = operator new(v78 + 1);
    *(_QWORD *)&__dst[8] = v76;
    *(_QWORD *)&__dst[16] = v79 | 0x8000000000000000;
    *(_QWORD *)__dst = v77;
  }
  else
  {
    __dst[23] = v75;
    v77 = __dst;
    if (!v75)
      goto LABEL_93;
  }
  memmove(v77, v74, v76);
LABEL_93:
  v77[v76] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v394);
  sub_239BB47DC((uint64_t)a1, *(const void **)v394, a2 + 32);
  v80 = *(std::__shared_weak_count **)&v394[8];
  if (!*(_QWORD *)&v394[8])
    goto LABEL_97;
  v81 = (unint64_t *)(*(_QWORD *)&v394[8] + 8);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (v82)
  {
LABEL_97:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
  std::__shared_weak_count::__release_weak(v80);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_98:
    operator delete(*(void **)__dst);
LABEL_99:
  v387 = xmmword_239F12615;
  v388 = 37;
  v83 = sub_239A91B18((int8x16_t *)&v387);
  v84 = strlen(v83->i8);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    p_p = (__int128 *)operator new(v87 + 1);
    *((_QWORD *)&__p + 1) = v85;
    v390 = v88 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_106;
  }
  HIBYTE(v390) = v84;
  p_p = &__p;
  if (v84)
LABEL_106:
    memmove(p_p, v83, v85);
  *((_BYTE *)p_p + v85) = 0;
  sub_23962C714(&v386);
  v89 = *(_QWORD **)(a2 + 40);
  if (v89 != (_QWORD *)(a2 + 48))
  {
    do
    {
      std::to_string(&v393, v89[4]);
      sub_23962C714(&v392);
      *(_QWORD *)&v395 = 0x60201380A120967;
      WORD6(v395) = 20;
      DWORD2(v395) = 34935315;
      sub_23971A32C((uint64_t)&v395, v90);
      v92 = v91;
      v93 = strlen(v91);
      if (v93 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v94 = v93;
      if (v93 >= 0x17)
      {
        v96 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v93 | 7) != 0x17)
          v96 = v93 | 7;
        v97 = v96 + 1;
        v95 = operator new(v96 + 1);
        *(_QWORD *)&__dst[8] = v94;
        *(_QWORD *)&__dst[16] = v97 | 0x8000000000000000;
        *(_QWORD *)__dst = v95;
      }
      else
      {
        __dst[23] = v93;
        v95 = __dst;
        if (!v93)
          goto LABEL_118;
      }
      memmove(v95, v92, v94);
LABEL_118:
      v95[v94] = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)v394);
      sub_239BB4A9C((uint64_t)&v392, *(const void **)v394, (uint64_t)(v89 + 5));
      v101 = *(std::__shared_weak_count **)&v394[8];
      if (!*(_QWORD *)&v394[8])
        goto LABEL_122;
      v102 = (unint64_t *)(*(_QWORD *)&v394[8] + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (v103)
      {
LABEL_122:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_124;
LABEL_123:
        operator delete(*(void **)__dst);
        goto LABEL_124;
      }
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if ((__dst[23] & 0x80000000) != 0)
        goto LABEL_123;
LABEL_124:
      *(_OWORD *)v394 = xmmword_239F1253B;
      *(_QWORD *)&v394[14] = 0x170F1D11231215;
      v104 = sub_239A90BEC((unsigned __int8 *)v394, (int8x16_t)xmmword_239F1253B, v98, v99, v100);
      v105 = strlen((const char *)v104);
      if (v105 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v106 = v105;
      if (v105 >= 0x17)
      {
        v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v105 | 7) != 0x17)
          v108 = v105 | 7;
        v109 = v108 + 1;
        v107 = operator new(v108 + 1);
        *(_QWORD *)&__dst[8] = v106;
        *(_QWORD *)&__dst[16] = v109 | 0x8000000000000000;
        *(_QWORD *)__dst = v107;
      }
      else
      {
        __dst[23] = v105;
        v107 = __dst;
        if (!v105)
          goto LABEL_132;
      }
      memmove(v107, v104, v106);
LABEL_132:
      v107[v106] = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v395);
      sub_239BB4338((uint64_t)&v392, (const void *)v395, (uint64_t)(v89 + 6));
      v113 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
      if (!*((_QWORD *)&v395 + 1))
        goto LABEL_136;
      v114 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (v115)
      {
LABEL_136:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_138;
LABEL_137:
        operator delete(*(void **)__dst);
        goto LABEL_138;
      }
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
      if ((__dst[23] & 0x80000000) != 0)
        goto LABEL_137;
LABEL_138:
      *(_OWORD *)v394 = xmmword_239F12551;
      strcpy(&v394[15], "hiBp|nv");
      sub_2396EFBE0((uint64_t)v394, (int32x4_t)xmmword_239F12551, v110, v111, v112);
      v117 = v116;
      v118 = strlen(v116);
      if (v118 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v119 = v118;
      if (v118 >= 0x17)
      {
        v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v118 | 7) != 0x17)
          v121 = v118 | 7;
        v122 = v121 + 1;
        v120 = operator new(v121 + 1);
        *(_QWORD *)&__dst[8] = v119;
        *(_QWORD *)&__dst[16] = v122 | 0x8000000000000000;
        *(_QWORD *)__dst = v120;
      }
      else
      {
        __dst[23] = v118;
        v120 = __dst;
        if (!v118)
          goto LABEL_146;
      }
      memmove(v120, v117, v119);
LABEL_146:
      v120[v119] = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v395);
      sub_239BB4338((uint64_t)&v392, (const void *)v395, (uint64_t)v89 + 52);
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
      if (!*((_QWORD *)&v395 + 1))
        goto LABEL_150;
      v127 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (v128)
      {
LABEL_150:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_152;
LABEL_151:
        operator delete(*(void **)__dst);
        goto LABEL_152;
      }
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
      if ((__dst[23] & 0x80000000) != 0)
        goto LABEL_151;
LABEL_152:
      *(_OWORD *)v394 = xmmword_239F12568;
      *(_QWORD *)&v394[15] = 0x120A1814261710;
      sub_2396EFBE0((uint64_t)v394, (int32x4_t)xmmword_239F12568, v123, v124, v125);
      v130 = v129;
      v131 = strlen(v129);
      if (v131 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v132 = v131;
      if (v131 >= 0x17)
      {
        v134 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v131 | 7) != 0x17)
          v134 = v131 | 7;
        v135 = v134 + 1;
        v133 = operator new(v134 + 1);
        *(_QWORD *)&__dst[8] = v132;
        *(_QWORD *)&__dst[16] = v135 | 0x8000000000000000;
        *(_QWORD *)__dst = v133;
      }
      else
      {
        __dst[23] = v131;
        v133 = __dst;
        if (!v131)
          goto LABEL_160;
      }
      memmove(v133, v130, v132);
LABEL_160:
      v133[v132] = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v395);
      sub_239BB47DC((uint64_t)&v392, (const void *)v395, (uint64_t)(v89 + 7));
      v139 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
      if (!*((_QWORD *)&v395 + 1))
        goto LABEL_164;
      v140 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (v141)
      {
LABEL_164:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_166;
LABEL_165:
        operator delete(*(void **)__dst);
        goto LABEL_166;
      }
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
      if ((__dst[23] & 0x80000000) != 0)
        goto LABEL_165;
LABEL_166:
      v143 = v142;
      v144 = strlen(v142);
      if (v144 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v145 = v144;
      if (v144 >= 0x17)
      {
        v147 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v144 | 7) != 0x17)
          v147 = v144 | 7;
        v148 = v147 + 1;
        v146 = operator new(v147 + 1);
        *(_QWORD *)&__dst[8] = v145;
        *(_QWORD *)&__dst[16] = v148 | 0x8000000000000000;
        *(_QWORD *)__dst = v146;
      }
      else
      {
        __dst[23] = v144;
        v146 = __dst;
        if (!v144)
          goto LABEL_174;
      }
      memmove(v146, v143, v145);
LABEL_174:
      v146[v145] = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v395);
      sub_239BB47DC((uint64_t)&v392, (const void *)v395, (uint64_t)v89 + 60);
      v149 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
      if (*((_QWORD *)&v395 + 1))
      {
        v150 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_180;
LABEL_179:
          operator delete(*(void **)__dst);
          goto LABEL_180;
        }
      }
      if ((__dst[23] & 0x80000000) != 0)
        goto LABEL_179;
LABEL_180:
      sub_239629EF4((uint64_t)&v393, (CFStringRef *)__dst);
      sub_239BB7018((uint64_t)&v386, *(const void **)__dst, (uint64_t)&v392);
      v152 = *(std::__shared_weak_count **)&__dst[8];
      if (!*(_QWORD *)&__dst[8])
        goto LABEL_184;
      v153 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
        v155 = (std::__shared_weak_count *)*((_QWORD *)&v392 + 1);
        if (!*((_QWORD *)&v392 + 1))
          goto LABEL_200;
      }
      else
      {
LABEL_184:
        v155 = (std::__shared_weak_count *)*((_QWORD *)&v392 + 1);
        if (!*((_QWORD *)&v392 + 1))
          goto LABEL_200;
      }
      p_shared_owners = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(p_shared_owners);
      while (__stlxr(v157 - 1, p_shared_owners));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
LABEL_200:
      if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v393.__r_.__value_.__l.__data_);
        v158 = (_QWORD *)v89[1];
        if (v158)
        {
          do
          {
LABEL_204:
            v159 = v158;
            v158 = (_QWORD *)*v158;
          }
          while (v158);
          goto LABEL_109;
        }
      }
      else
      {
        v158 = (_QWORD *)v89[1];
        if (v158)
          goto LABEL_204;
      }
      do
      {
        v159 = (_QWORD *)v89[2];
        v160 = *v159 == (_QWORD)v89;
        v89 = v159;
      }
      while (!v160);
LABEL_109:
      v89 = v159;
    }
    while (v159 != (_QWORD *)(a2 + 48));
  }
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)__dst, (uint64_t)&v386);
  v161 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_213;
  v162 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (!v163)
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
    v164 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
    if (!*((_QWORD *)&v386 + 1))
      goto LABEL_217;
  }
  else
  {
LABEL_213:
    v164 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
    if (!*((_QWORD *)&v386 + 1))
      goto LABEL_217;
  }
  v165 = (unint64_t *)&v164->__shared_owners_;
  do
    v166 = __ldaxr(v165);
  while (__stlxr(v166 - 1, v165));
  if (v166)
  {
LABEL_217:
    if ((SHIBYTE(v390) & 0x80000000) == 0)
      goto LABEL_219;
    goto LABEL_218;
  }
  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
  std::__shared_weak_count::__release_weak(v164);
  if (SHIBYTE(v390) < 0)
LABEL_218:
    operator delete((void *)__p);
LABEL_219:
  *(_OWORD *)v394 = xmmword_239F12627;
  v394[16] = 0;
  sub_2396EFA24((uint64_t)v394);
  v168 = v167;
  v169 = strlen(v167);
  if (v169 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v170 = v169;
  if (v169 >= 0x17)
  {
    v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17)
      v172 = v169 | 7;
    v173 = v172 + 1;
    v171 = operator new(v172 + 1);
    *(_QWORD *)&__dst[8] = v170;
    *(_QWORD *)&__dst[16] = v173 | 0x8000000000000000;
    *(_QWORD *)__dst = v171;
  }
  else
  {
    __dst[23] = v169;
    v171 = __dst;
    if (!v169)
      goto LABEL_227;
  }
  memmove(v171, v168, v170);
LABEL_227:
  v171[v170] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v393);
  sub_2396B4EAC((uint64_t)a1, v393.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 136));
  v177 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_231;
  v178 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (v179)
  {
LABEL_231:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_233;
    goto LABEL_232;
  }
  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
  std::__shared_weak_count::__release_weak(v177);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_232:
    operator delete(*(void **)__dst);
LABEL_233:
  *(_OWORD *)__dst = xmmword_239F12638;
  *(_OWORD *)&__dst[11] = *(__int128 *)((char *)&xmmword_239F12638 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12638 + 11), v174, v175, v176);
  v181 = v180;
  v182 = strlen(v180);
  if (v182 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v183 = v182;
  if (v182 >= 0x17)
  {
    v185 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v182 | 7) != 0x17)
      v185 = v182 | 7;
    v186 = v185 + 1;
    v184 = (char *)operator new(v185 + 1);
    *(_QWORD *)&v394[8] = v183;
    *(_QWORD *)&v394[16] = v186 | 0x8000000000000000;
    *(_QWORD *)v394 = v184;
  }
  else
  {
    v394[23] = v182;
    v184 = v394;
    if (!v182)
      goto LABEL_241;
  }
  memmove(v184, v181, v183);
LABEL_241:
  v184[v183] = 0;
  sub_239629EF4((uint64_t)v394, (CFStringRef *)&v393);
  sub_239BB4938((uint64_t)a1, v393.__r_.__value_.__l.__data_, (int *)(a2 + 140));
  v188 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_245;
  v189 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (v190)
  {
LABEL_245:
    if ((v394[23] & 0x80000000) == 0)
      goto LABEL_247;
    goto LABEL_246;
  }
  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
  std::__shared_weak_count::__release_weak(v188);
  if (v394[23] < 0)
LABEL_246:
    operator delete(*(void **)v394);
LABEL_247:
  strcpy((char *)&__p, "\"PWLVKOG}KLDM");
  sub_23971A32C((uint64_t)&__p, v187);
  v192 = v191;
  v193 = strlen(v191);
  if (v193 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v194 = v193;
  if (v193 >= 0x17)
  {
    v196 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v193 | 7) != 0x17)
      v196 = v193 | 7;
    v197 = v196 + 1;
    v195 = operator new(v196 + 1);
    *(_QWORD *)&__dst[8] = v194;
    *(_QWORD *)&__dst[16] = v197 | 0x8000000000000000;
    *(_QWORD *)__dst = v195;
  }
  else
  {
    __dst[23] = v193;
    v195 = __dst;
    if (!v193)
      goto LABEL_255;
  }
  memmove(v195, v192, v194);
LABEL_255:
  v195[v194] = 0;
  sub_239BCA2E4((uint64_t)&v393, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 64));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v394);
  sub_239BB7018((uint64_t)a1, *(const void **)v394, (uint64_t)&v393);
  v198 = *(std::__shared_weak_count **)&v394[8];
  if (!*(_QWORD *)&v394[8])
    goto LABEL_259;
  v199 = (unint64_t *)(*(_QWORD *)&v394[8] + 8);
  do
    v200 = __ldaxr(v199);
  while (__stlxr(v200 - 1, v199));
  if (!v200)
  {
    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
    std::__shared_weak_count::__release_weak(v198);
    v201 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
    if (!v393.__r_.__value_.__l.__size_)
      goto LABEL_263;
  }
  else
  {
LABEL_259:
    v201 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
    if (!v393.__r_.__value_.__l.__size_)
      goto LABEL_263;
  }
  v202 = (unint64_t *)&v201->__shared_owners_;
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (v203)
  {
LABEL_263:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_265;
    goto LABEL_264;
  }
  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
  std::__shared_weak_count::__release_weak(v201);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_264:
    operator delete(*(void **)__dst);
LABEL_265:
  strcpy((char *)&v392, "%PV@AzFJKCLB");
  v204 = sub_239510ECC((uint64_t)&v392);
  v205 = strlen(v204);
  if (v205 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v206 = v205;
  if (v205 >= 0x17)
  {
    v208 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v205 | 7) != 0x17)
      v208 = v205 | 7;
    v209 = v208 + 1;
    v207 = (char *)operator new(v208 + 1);
    *(_QWORD *)&v394[8] = v206;
    *(_QWORD *)&v394[16] = v209 | 0x8000000000000000;
    *(_QWORD *)v394 = v207;
    goto LABEL_272;
  }
  v394[23] = v205;
  v207 = v394;
  if (v205)
LABEL_272:
    memmove(v207, v204, v206);
  v207[v206] = 0;
  sub_23962C714(&v395);
  *(_QWORD *)&__p = 0x40E0A3C1B020E63;
  WORD6(__p) = 6;
  DWORD2(__p) = 420089916;
  sub_23971A32C((uint64_t)&__p, v210);
  v212 = v211;
  v213 = strlen(v211);
  if (v213 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v214 = v213;
  if (v213 >= 0x17)
  {
    v216 = (v213 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v213 | 7) != 0x17)
      v216 = v213 | 7;
    v217 = v216 + 1;
    v215 = operator new(v216 + 1);
    *(_QWORD *)&__dst[8] = v214;
    *(_QWORD *)&__dst[16] = v217 | 0x8000000000000000;
    *(_QWORD *)__dst = v215;
  }
  else
  {
    __dst[23] = v213;
    v215 = __dst;
    if (!v213)
      goto LABEL_281;
  }
  memmove(v215, v212, v214);
LABEL_281:
  v215[v214] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v393);
  sub_239BB4338((uint64_t)&v395, v393.__r_.__value_.__l.__data_, a2 + 144);
  v218 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_285;
  v219 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v220 = __ldaxr(v219);
  while (__stlxr(v220 - 1, v219));
  if (v220)
  {
LABEL_285:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_287;
    goto LABEL_286;
  }
  ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
  std::__shared_weak_count::__release_weak(v218);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_286:
    operator delete(*(void **)__dst);
LABEL_287:
  *(_OWORD *)&v393.__r_.__value_.__l.__data_ = xmmword_239F10BFD;
  LOWORD(v393.__r_.__value_.__r.__words[2]) = 40;
  v221 = sub_239A91B18((int8x16_t *)&v393);
  v222 = strlen(v221->i8);
  if (v222 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v223 = v222;
  if (v222 >= 0x17)
  {
    v225 = (v222 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v222 | 7) != 0x17)
      v225 = v222 | 7;
    v226 = v225 + 1;
    v224 = operator new(v225 + 1);
    *(_QWORD *)&__dst[8] = v223;
    *(_QWORD *)&__dst[16] = v226 | 0x8000000000000000;
    *(_QWORD *)__dst = v224;
  }
  else
  {
    __dst[23] = v222;
    v224 = __dst;
    if (!v222)
      goto LABEL_295;
  }
  memmove(v224, v221, v223);
LABEL_295:
  v224[v223] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4338((uint64_t)&v395, (const void *)__p, a2 + 148);
  v227 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_299;
  v228 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v229 = __ldaxr(v228);
  while (__stlxr(v229 - 1, v228));
  if (v229)
  {
LABEL_299:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_301;
    goto LABEL_300;
  }
  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
  std::__shared_weak_count::__release_weak(v227);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_300:
    operator delete(*(void **)__dst);
LABEL_301:
  strcpy((char *)&__p, "+E^Ft_CYNJOX");
  v230 = sub_239510ECC((uint64_t)&__p);
  v231 = strlen(v230);
  if (v231 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v232 = v231;
  if (v231 >= 0x17)
  {
    v234 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v231 | 7) != 0x17)
      v234 = v231 | 7;
    v235 = v234 + 1;
    v233 = operator new(v234 + 1);
    *(_QWORD *)&__dst[8] = v232;
    *(_QWORD *)&__dst[16] = v235 | 0x8000000000000000;
    *(_QWORD *)__dst = v233;
  }
  else
  {
    __dst[23] = v231;
    v233 = __dst;
    if (!v231)
      goto LABEL_309;
  }
  memmove(v233, v230, v232);
LABEL_309:
  v233[v232] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v393);
  sub_239BB4338((uint64_t)&v395, v393.__r_.__value_.__l.__data_, a2 + 152);
  v239 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (!v393.__r_.__value_.__l.__size_)
    goto LABEL_313;
  v240 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (v241)
  {
LABEL_313:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_315;
    goto LABEL_314;
  }
  ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
  std::__shared_weak_count::__release_weak(v239);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_314:
    operator delete(*(void **)__dst);
LABEL_315:
  strcpy((char *)&v393, "!R@LQMHOF~RUS@UDFX");
  sub_23958E450((uint64_t)&v393, *(int32x4_t *)"!R@LQMHOF~RUS@UDFX", v236, v237, v238);
  v243 = v242;
  v244 = strlen(v242);
  if (v244 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v245 = v244;
  if (v244 >= 0x17)
  {
    v247 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v244 | 7) != 0x17)
      v247 = v244 | 7;
    v248 = v247 + 1;
    v246 = operator new(v247 + 1);
    *(_QWORD *)&__dst[8] = v245;
    *(_QWORD *)&__dst[16] = v248 | 0x8000000000000000;
    *(_QWORD *)__dst = v246;
  }
  else
  {
    __dst[23] = v244;
    v246 = __dst;
    if (!v244)
      goto LABEL_323;
  }
  memmove(v246, v243, v245);
LABEL_323:
  v246[v245] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v387);
  v249 = (const void *)v387;
  v250 = v395;
  if (!*((_QWORD *)&v395 + 1))
    goto LABEL_328;
  v251 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
  do
    v252 = __ldxr(v251);
  while (__stxr(v252 + 1, v251));
  do
    v253 = __ldaxr(v251);
  while (__stlxr(v253 - 1, v251));
  if (!v253)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v250 + 1) + 16))(*((_QWORD *)&v250 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v250 + 1));
    if (!(_QWORD)v250)
      goto LABEL_375;
  }
  else
  {
LABEL_328:
    if (!(_QWORD)v250)
      goto LABEL_375;
  }
  if (sub_23962C8DC((const __CFDictionary *)v395, v249))
    goto LABEL_375;
  LODWORD(v386) = *(_DWORD *)(a2 + 160);
  sub_239629634(&__p, &v386);
  v254 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    v255 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
    do
      v257 = __ldaxr(v255);
    while (__stlxr(v257 - 1, v255));
    if (!v257)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v254 + 1) + 16))(*((_QWORD *)&v254 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v254 + 1));
      if (!(_QWORD)v254)
        goto LABEL_337;
      goto LABEL_336;
    }
  }
  if ((_QWORD)v254)
LABEL_336:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)v395, v249, (const void *)__p);
LABEL_337:
  v258 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v259 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
LABEL_375:
  v261 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (!*((_QWORD *)&v387 + 1))
    goto LABEL_379;
  v262 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (v263)
  {
LABEL_379:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_381;
    goto LABEL_380;
  }
  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
  std::__shared_weak_count::__release_weak(v261);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_380:
    operator delete(*(void **)__dst);
LABEL_381:
  *(_QWORD *)&v387 = 0x777A516D7D6B6A0ELL;
  strcpy((char *)&v387 + 8, "~k");
  v264 = (const char *)sub_23958E518((uint64_t)&v387);
  v265 = strlen(v264);
  if (v265 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v266 = v265;
  if (v265 >= 0x17)
  {
    v268 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v265 | 7) != 0x17)
      v268 = v265 | 7;
    v269 = v268 + 1;
    v267 = operator new(v268 + 1);
    *(_QWORD *)&__dst[8] = v266;
    *(_QWORD *)&__dst[16] = v269 | 0x8000000000000000;
    *(_QWORD *)__dst = v267;
  }
  else
  {
    __dst[23] = v265;
    v267 = __dst;
    if (!v265)
      goto LABEL_389;
  }
  memmove(v267, v264, v266);
LABEL_389:
  v267[v266] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  v273 = (const void *)__p;
  v274 = v395;
  if (!*((_QWORD *)&v395 + 1))
    goto LABEL_394;
  v275 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
  do
    v276 = __ldxr(v275);
  while (__stxr(v276 + 1, v275));
  do
    v277 = __ldaxr(v275);
  while (__stlxr(v277 - 1, v275));
  if (!v277)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v274 + 1) + 16))(*((_QWORD *)&v274 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v274 + 1));
    if (!(_QWORD)v274)
      goto LABEL_411;
  }
  else
  {
LABEL_394:
    if (!(_QWORD)v274)
      goto LABEL_411;
  }
  if (sub_23962C8DC((const __CFDictionary *)v395, v273))
    goto LABEL_411;
  LODWORD(v386) = *(_DWORD *)(a2 + 156);
  sub_239629634(&v393, &v386);
  v278 = *(_OWORD *)&v393.__r_.__value_.__l.__data_;
  if (v393.__r_.__value_.__l.__size_)
  {
    v279 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
    do
      v280 = __ldxr(v279);
    while (__stxr(v280 + 1, v279));
    do
      v281 = __ldaxr(v279);
    while (__stlxr(v281 - 1, v279));
    if (!v281)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v278 + 1) + 16))(*((_QWORD *)&v278 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v278 + 1));
      if (!(_QWORD)v278)
        goto LABEL_403;
      goto LABEL_402;
    }
  }
  if ((_QWORD)v278)
LABEL_402:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)v395, v273, v393.__r_.__value_.__l.__data_);
LABEL_403:
  v282 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (v393.__r_.__value_.__l.__size_)
  {
    v283 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
LABEL_411:
  v285 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_415;
  v286 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v287 = __ldaxr(v286);
  while (__stlxr(v287 - 1, v286));
  if (v287)
  {
LABEL_415:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_417;
    goto LABEL_416;
  }
  ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
  std::__shared_weak_count::__release_weak(v285);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_416:
    operator delete(*(void **)__dst);
LABEL_417:
  *(_OWORD *)&v393.__r_.__value_.__l.__data_ = xmmword_239F10C22;
  *(std::string::size_type *)((char *)&v393.__r_.__value_.__r.__words[1] + 7) = 0x9000E0D00050DLL;
  sub_2396EFBE0((uint64_t)&v393, (int32x4_t)xmmword_239F10C22, v270, v271, v272);
  v289 = v288;
  v290 = strlen(v288);
  if (v290 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v291 = v290;
  if (v290 >= 0x17)
  {
    v293 = (v290 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v290 | 7) != 0x17)
      v293 = v290 | 7;
    v294 = v293 + 1;
    v292 = operator new(v293 + 1);
    *(_QWORD *)&__dst[8] = v291;
    *(_QWORD *)&__dst[16] = v294 | 0x8000000000000000;
    *(_QWORD *)__dst = v292;
  }
  else
  {
    __dst[23] = v290;
    v292 = __dst;
    if (!v290)
      goto LABEL_425;
  }
  memmove(v292, v289, v291);
LABEL_425:
  v292[v291] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)&v395, (const void *)__p, (_BYTE *)(a2 + 164));
  v298 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_429;
  v299 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v300 = __ldaxr(v299);
  while (__stlxr(v300 - 1, v299));
  if (v300)
  {
LABEL_429:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_431;
    goto LABEL_430;
  }
  ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
  std::__shared_weak_count::__release_weak(v298);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_430:
    operator delete(*(void **)__dst);
LABEL_431:
  *(_OWORD *)&v393.__r_.__value_.__l.__data_ = xmmword_239F10C39;
  *(std::string::size_type *)((char *)&v393.__r_.__value_.__r.__words[1] + 5) = 0x79667B72607578;
  sub_2396EFB50((uint64_t)&v393, (int32x4_t)xmmword_239F10C39, v295, v296, v297);
  v302 = v301;
  v303 = strlen(v301);
  if (v303 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v304 = v303;
  if (v303 >= 0x17)
  {
    v306 = (v303 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v303 | 7) != 0x17)
      v306 = v303 | 7;
    v307 = v306 + 1;
    v305 = operator new(v306 + 1);
    *(_QWORD *)&__dst[8] = v304;
    *(_QWORD *)&__dst[16] = v307 | 0x8000000000000000;
    *(_QWORD *)__dst = v305;
  }
  else
  {
    __dst[23] = v303;
    v305 = __dst;
    if (!v303)
      goto LABEL_439;
  }
  memmove(v305, v302, v304);
LABEL_439:
  v305[v304] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v387);
  v311 = (const void *)v387;
  v312 = v395;
  if (!*((_QWORD *)&v395 + 1))
    goto LABEL_444;
  v313 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
  do
    v314 = __ldxr(v313);
  while (__stxr(v314 + 1, v313));
  do
    v315 = __ldaxr(v313);
  while (__stlxr(v315 - 1, v313));
  if (!v315)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v312 + 1) + 16))(*((_QWORD *)&v312 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v312 + 1));
    if (!(_QWORD)v312)
      goto LABEL_463;
  }
  else
  {
LABEL_444:
    if (!(_QWORD)v312)
      goto LABEL_463;
  }
  if (sub_23962C8DC((const __CFDictionary *)v395, v311))
    goto LABEL_463;
  LODWORD(v386) = *(_DWORD *)(a2 + 168);
  sub_239629634(&__p, &v386);
  v316 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    v317 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v318 = __ldxr(v317);
    while (__stxr(v318 + 1, v317));
    do
      v319 = __ldaxr(v317);
    while (__stlxr(v319 - 1, v317));
    if (!v319)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v316 + 1) + 16))(*((_QWORD *)&v316 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v316 + 1));
      if (!(_QWORD)v316)
        goto LABEL_453;
      goto LABEL_452;
    }
  }
  if ((_QWORD)v316)
LABEL_452:
    j__CFDictionaryAddValue((CFMutableDictionaryRef)v395, v311, (const void *)__p);
LABEL_453:
  v320 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v321 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
LABEL_463:
  v323 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (!*((_QWORD *)&v387 + 1))
    goto LABEL_467;
  v324 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
  do
    v325 = __ldaxr(v324);
  while (__stlxr(v325 - 1, v324));
  if (v325)
  {
LABEL_467:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_469;
    goto LABEL_468;
  }
  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
  std::__shared_weak_count::__release_weak(v323);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_468:
    operator delete(*(void **)__dst);
LABEL_469:
  *(_OWORD *)&v393.__r_.__value_.__l.__data_ = xmmword_239F10C4E;
  LODWORD(v393.__r_.__value_.__r.__words[2]) = 67850;
  sub_23958E55C((uint64_t)&v393, (int32x4_t)xmmword_239F10C4E, v308, v309, v310);
  v327 = v326;
  v328 = strlen(v326);
  if (v328 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v329 = v328;
  if (v328 >= 0x17)
  {
    v331 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v328 | 7) != 0x17)
      v331 = v328 | 7;
    v332 = v331 + 1;
    v330 = operator new(v331 + 1);
    *(_QWORD *)&__dst[8] = v329;
    *(_QWORD *)&__dst[16] = v332 | 0x8000000000000000;
    *(_QWORD *)__dst = v330;
  }
  else
  {
    __dst[23] = v328;
    v330 = __dst;
    if (!v328)
      goto LABEL_477;
  }
  memmove(v330, v327, v329);
LABEL_477:
  v330[v329] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB47DC((uint64_t)&v395, (const void *)__p, a2 + 172);
  v336 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_481;
  v337 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v338 = __ldaxr(v337);
  while (__stlxr(v338 - 1, v337));
  if (v338)
  {
LABEL_481:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_483;
    goto LABEL_482;
  }
  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
  std::__shared_weak_count::__release_weak(v336);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_482:
    operator delete(*(void **)__dst);
LABEL_483:
  strcpy((char *)&v393, "R?'>&;\r= ;7<&3&;=<");
  sub_23958E450((uint64_t)&v393, *(int32x4_t *)"R?'>&;\r= ;7<&3&;=<", v333, v334, v335);
  v340 = v339;
  v341 = strlen(v339);
  if (v341 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v342 = v341;
  if (v341 >= 0x17)
  {
    v344 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v341 | 7) != 0x17)
      v344 = v341 | 7;
    v345 = v344 + 1;
    v343 = operator new(v344 + 1);
    *(_QWORD *)&__dst[8] = v342;
    *(_QWORD *)&__dst[16] = v345 | 0x8000000000000000;
    *(_QWORD *)__dst = v343;
  }
  else
  {
    __dst[23] = v341;
    v343 = __dst;
    if (!v341)
      goto LABEL_491;
  }
  memmove(v343, v340, v342);
LABEL_491:
  v343[v342] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)&v395, (const void *)__p, (_BYTE *)(a2 + 180));
  v346 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_495;
  v347 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v348 = __ldaxr(v347);
  while (__stlxr(v348 - 1, v347));
  if (v348)
  {
LABEL_495:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_497;
    goto LABEL_496;
  }
  ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
  std::__shared_weak_count::__release_weak(v346);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_496:
    operator delete(*(void **)__dst);
LABEL_497:
  *(_OWORD *)&v393.__r_.__value_.__l.__data_ = xmmword_239F10C75;
  LOWORD(v393.__r_.__value_.__r.__words[2]) = 107;
  v349 = sub_239A91B18((int8x16_t *)&v393);
  v350 = strlen(v349->i8);
  if (v350 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v351 = v350;
  if (v350 >= 0x17)
  {
    v353 = (v350 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v350 | 7) != 0x17)
      v353 = v350 | 7;
    v354 = v353 + 1;
    v352 = operator new(v353 + 1);
    *(_QWORD *)&__dst[8] = v351;
    *(_QWORD *)&__dst[16] = v354 | 0x8000000000000000;
    *(_QWORD *)__dst = v352;
  }
  else
  {
    __dst[23] = v350;
    v352 = __dst;
    if (!v350)
      goto LABEL_505;
  }
  memmove(v352, v349, v351);
LABEL_505:
  v352[v351] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)&v395, (const void *)__p, (_BYTE *)(a2 + 181));
  v358 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_509;
  v359 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v360 = __ldaxr(v359);
  while (__stlxr(v360 - 1, v359));
  if (v360)
  {
LABEL_509:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_511;
    goto LABEL_510;
  }
  ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
  std::__shared_weak_count::__release_weak(v358);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_510:
    operator delete(*(void **)__dst);
LABEL_511:
  strcpy((char *)&v393, ":QJNe^_N_YNUHeNCJ_");
  sub_23958E450((uint64_t)&v393, *(int32x4_t *)":QJNe^_N_YNUHeNCJ_", v355, v356, v357);
  v362 = v361;
  v363 = strlen(v361);
  if (v363 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v364 = v363;
  if (v363 >= 0x17)
  {
    v366 = (v363 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v363 | 7) != 0x17)
      v366 = v363 | 7;
    v367 = v366 + 1;
    v365 = operator new(v366 + 1);
    *(_QWORD *)&__dst[8] = v364;
    *(_QWORD *)&__dst[16] = v367 | 0x8000000000000000;
    *(_QWORD *)__dst = v365;
  }
  else
  {
    __dst[23] = v363;
    v365 = __dst;
    if (!v363)
      goto LABEL_519;
  }
  memmove(v365, v362, v364);
LABEL_519:
  v365[v364] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4938((uint64_t)&v395, (const void *)__p, (int *)(a2 + 184));
  v368 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_523;
  v369 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v370 = __ldaxr(v369);
  while (__stlxr(v370 - 1, v369));
  if (v370)
  {
LABEL_523:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_525;
    goto LABEL_524;
  }
  ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
  std::__shared_weak_count::__release_weak(v368);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_524:
    operator delete(*(void **)__dst);
LABEL_525:
  *(_QWORD *)&__p = 0x66717D4D7F677C12;
  strcpy((char *)&__p + 8, "sdwa");
  v371 = sub_239510ECC((uint64_t)&__p);
  v372 = strlen(v371);
  if (v372 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v373 = v372;
  if (v372 >= 0x17)
  {
    v375 = (v372 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v372 | 7) != 0x17)
      v375 = v372 | 7;
    v376 = v375 + 1;
    v374 = operator new(v375 + 1);
    *(_QWORD *)&__dst[8] = v373;
    *(_QWORD *)&__dst[16] = v376 | 0x8000000000000000;
    *(_QWORD *)__dst = v374;
  }
  else
  {
    __dst[23] = v372;
    v374 = __dst;
    if (!v372)
      goto LABEL_533;
  }
  memmove(v374, v371, v373);
LABEL_533:
  v374[v373] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v393);
  sub_239BB4338((uint64_t)&v395, v393.__r_.__value_.__l.__data_, a2 + 176);
  v377 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
  if (v393.__r_.__value_.__l.__size_)
  {
    v378 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_539;
      goto LABEL_538;
    }
  }
  if ((__dst[23] & 0x80000000) != 0)
LABEL_538:
    operator delete(*(void **)__dst);
LABEL_539:
  sub_239629EF4((uint64_t)v394, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)__dst, (uint64_t)&v395);
  v380 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_543;
  v381 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v382 = __ldaxr(v381);
  while (__stlxr(v382 - 1, v381));
  if (!v382)
  {
    ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
    std::__shared_weak_count::__release_weak(v380);
    v383 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
    if (!*((_QWORD *)&v395 + 1))
      goto LABEL_547;
  }
  else
  {
LABEL_543:
    v383 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
    if (!*((_QWORD *)&v395 + 1))
      goto LABEL_547;
  }
  v384 = (unint64_t *)&v383->__shared_owners_;
  do
    v385 = __ldaxr(v384);
  while (__stlxr(v385 - 1, v384));
  if (v385)
  {
LABEL_547:
    if ((v394[23] & 0x80000000) == 0)
      return;
    goto LABEL_548;
  }
  ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
  std::__shared_weak_count::__release_weak(v383);
  if (v394[23] < 0)
LABEL_548:
    operator delete(*(void **)v394);
}

void sub_239BCFBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  sub_239416DA0((uint64_t)&a16);
  sub_239416DA0((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_239416DA0(v36 - 120);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  sub_239416DA0(a10);
  _Unwind_Resume(a1);
}

void sub_239BCFEF8()
{
  JUMPOUT(0x239BCFEB4);
}

void sub_239BCFF00()
{
  JUMPOUT(0x239BCFEB4);
}

void sub_239BCFF08()
{
  JUMPOUT(0x239BCFEB4);
}

void sub_239BCFF10()
{
  JUMPOUT(0x239BCFEB4);
}

void sub_239BCFF18()
{
  JUMPOUT(0x239BCFEB4);
}

_QWORD *sub_239BCFF20(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = v6;
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      ++v6;
      v7 = v10;
    }
    while (v10 != a3);
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_2394189F8();
    v12 = operator new(8 * v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v6];
    do
    {
      *v12 = *(_QWORD *)((char *)v5 + 28);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v11 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v11);
      }
      ++v12;
      v5 = v14;
    }
    while (v14 != a3);
    a1[1] = v12;
  }
  return a1;
}

void sub_239BD002C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239BD0048(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  double v12;
  int32x4_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  double v25;
  int32x4_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  size_t v32;
  std::string::size_type v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  double v38;
  int32x4_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  const char *v43;
  const char *v44;
  size_t v45;
  std::string::size_type v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  double v51;
  int32x4_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  const char *v57;
  size_t v58;
  std::string::size_type v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  int32x4_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const char *v68;
  const char *v69;
  size_t v70;
  std::string::size_type v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  double v76;
  int32x4_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  const char *v81;
  const char *v82;
  size_t v83;
  size_t v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int32x4_t v88;
  double v89;
  int32x4_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unsigned __int8 *v94;
  size_t v95;
  size_t v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int32x4_t v100;
  double v101;
  int32x4_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unsigned __int8 *v106;
  size_t v107;
  size_t v108;
  _OWORD *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  int8x16_t *v115;
  size_t v116;
  size_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  int8x16_t v122;
  double v123;
  int32x4_t v124;
  const char *v125;
  const char *v126;
  size_t v127;
  size_t v128;
  _OWORD *v129;
  uint64_t v130;
  uint64_t v131;
  int8x16_t v132;
  double v133;
  int32x4_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  const char *v138;
  const char *v139;
  size_t v140;
  size_t v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t v145;
  double v146;
  int32x4_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unsigned __int8 *v151;
  size_t v152;
  size_t v153;
  _OWORD *v154;
  uint64_t v155;
  uint64_t v156;
  int32x4_t v157;
  double v158;
  int32x4_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unsigned __int8 *v163;
  size_t v164;
  size_t v165;
  _OWORD *v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  int16x8_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  const char *v174;
  const char *v175;
  size_t v176;
  std::string::size_type v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  int32x4_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  const char *v186;
  const char *v187;
  size_t v188;
  std::string::size_type v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  int16x8_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  const char *v209;
  const char *v210;
  size_t v211;
  size_t v212;
  _OWORD *v213;
  uint64_t v214;
  uint64_t v215;
  int8x16_t v216;
  double v217;
  int32x4_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  const char *v225;
  const char *v226;
  size_t v227;
  std::string::size_type v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  int8x16_t v232;
  double v233;
  int32x4_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  const char *v238;
  const char *v239;
  size_t v240;
  std::string::size_type v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  int8x16_t v245;
  double v246;
  int32x4_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  const char *v251;
  const char *v252;
  size_t v253;
  std::string::size_type v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  int8x16_t v258;
  double v259;
  int32x4_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  const char *v264;
  const char *v265;
  size_t v266;
  std::string::size_type v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  int8x16_t v271;
  double v272;
  int32x4_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  const char *v277;
  const char *v278;
  size_t v279;
  std::string::size_type v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  int8x16_t *v287;
  size_t v288;
  size_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  int8x16_t *v293;
  size_t v294;
  std::string::size_type v295;
  std::string *p_p;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  int32x4_t v300;
  double v301;
  int32x4_t v302;
  unsigned __int8 *v303;
  size_t v304;
  size_t v305;
  _OWORD *v306;
  uint64_t v307;
  uint64_t v308;
  int8x16_t v309;
  double v310;
  int32x4_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  const char *v315;
  const char *v316;
  size_t v317;
  size_t v318;
  _OWORD *v319;
  uint64_t v320;
  uint64_t v321;
  int32x4_t v322;
  double v323;
  int32x4_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unsigned __int8 *v328;
  size_t v329;
  size_t v330;
  _OWORD *v331;
  uint64_t v332;
  uint64_t v333;
  int8x16_t v334;
  double v335;
  int32x4_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  const char *v340;
  const char *v341;
  size_t v342;
  size_t v343;
  _OWORD *v344;
  uint64_t v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  int8x16_t v356;
  double v357;
  int32x4_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  const char *v365;
  const char *v366;
  size_t v367;
  size_t v368;
  _OWORD *v369;
  uint64_t v370;
  uint64_t v371;
  int8x16_t v372;
  double v373;
  int32x4_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  const char *v378;
  const char *v379;
  size_t v380;
  std::string::size_type v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  int8x16_t v385;
  double v386;
  int32x4_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  const char *v391;
  const char *v392;
  size_t v393;
  std::string::size_type v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  int8x16_t v398;
  double v399;
  int32x4_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  const char *v404;
  const char *v405;
  size_t v406;
  std::string::size_type v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  int8x16_t v411;
  double v412;
  int32x4_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  const char *v417;
  const char *v418;
  size_t v419;
  std::string::size_type v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  int8x16_t v424;
  double v425;
  int32x4_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  const char *v430;
  const char *v431;
  size_t v432;
  size_t v433;
  _OWORD *v434;
  uint64_t v435;
  uint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  const char *v446;
  size_t v447;
  size_t v448;
  _OWORD *v449;
  uint64_t v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  uint64_t v458;
  __int128 v459;
  __int128 v460;
  std::string __p;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int16 v465;
  void *v466;
  std::__shared_weak_count *v467;
  unint64_t v468;
  _OWORD __dst[3];
  __int128 v470;
  __int16 v471;
  std::string v472;
  _BYTE v473[24];
  uint64_t v474;

  v474 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F127F0;
  v472.__r_.__value_.__s.__data_[16] = 0;
  sub_2396EFA24((uint64_t)&v472);
  v5 = v4;
  v6 = strlen(v4);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)&__dst[0] + 1) = v7;
    *(_QWORD *)&__dst[1] = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v8;
  }
  else
  {
    BYTE7(__dst[1]) = v6;
    v8 = __dst;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v8, v5, v7);
LABEL_9:
  *((_BYTE *)v8 + v7) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4A9C((uint64_t)a1, __p.__r_.__value_.__l.__data_, a2);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_13;
  v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_13:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SBYTE7(__dst[1]) < 0)
LABEL_14:
    operator delete(*(void **)&__dst[0]);
LABEL_15:
  *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F12801;
  v472.__r_.__value_.__r.__words[2] = 0x33322921301F24;
  sub_2396F1A4C((uint64_t)&v472, (int32x4_t)xmmword_239F12801, v11, v12, v13);
  v18 = v17;
  v19 = strlen(v17);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    *((_QWORD *)&__dst[0] + 1) = v20;
    *(_QWORD *)&__dst[1] = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v21;
  }
  else
  {
    BYTE7(__dst[1]) = v19;
    v21 = __dst;
    if (!v19)
      goto LABEL_23;
  }
  memmove(v21, v18, v20);
LABEL_23:
  *((_BYTE *)v21 + v20) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4A9C((uint64_t)a1, __p.__r_.__value_.__l.__data_, a2 + 8);
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_27;
  v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_27:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SBYTE7(__dst[1]) < 0)
LABEL_28:
    operator delete(*(void **)&__dst[0]);
LABEL_29:
  __dst[0] = xmmword_239F12819;
  *(_OWORD *)((char *)__dst + 13) = *(__int128 *)((char *)&xmmword_239F12819 + 13);
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12819 + 13), v24, v25, v26);
  v31 = v30;
  v32 = strlen(v30);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    v472.__r_.__value_.__l.__size_ = v33;
    v472.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v32;
    v34 = &v472;
    if (!v32)
      goto LABEL_37;
  }
  memmove(v34, v31, v33);
LABEL_37:
  *((_BYTE *)v34 + v33) = 0;
  sub_239BCFF20(&__p, *(_QWORD **)(a2 + 40), (_QWORD *)(a2 + 48));
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&v466);
  sub_239BD2F30((uint64_t)a1, v466, (uint64_t **)&__p);
  v40 = v467;
  if (v467)
  {
    p_shared_owners = (unint64_t *)&v467->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  strcpy((char *)__dst, "'FCCBCxWFNUTxE^xDFJBUFxFI@KB");
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)"E^xDFJBUFxFI@KB", v37, v38, v39);
  v44 = v43;
  v45 = strlen(v43);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    v472.__r_.__value_.__l.__size_ = v46;
    v472.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v45;
    v47 = &v472;
    if (!v45)
      goto LABEL_54;
  }
  memmove(v47, v44, v46);
LABEL_54:
  *((_BYTE *)v47 + v46) = 0;
  sub_239BCFF20(&__p, *(_QWORD **)(a2 + 64), (_QWORD *)(a2 + 72));
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&v466);
  sub_239BD2F30((uint64_t)a1, v466, (uint64_t **)&__p);
  v53 = v467;
  if (v467)
  {
    v54 = (unint64_t *)&v467->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  strcpy((char *)__dst, "+YNFD]NOt[JBYXtIRtHJFNYJtJELGN");
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)"IRtHJFNYJtJELGN", v50, v51, v52);
  v57 = v56;
  v58 = strlen(v56);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v472.__r_.__value_.__l.__size_ = v59;
    v472.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v58;
    v60 = &v472;
    if (!v58)
      goto LABEL_71;
  }
  memmove(v60, v57, v59);
LABEL_71:
  *((_BYTE *)v60 + v59) = 0;
  sub_239BCFF20(&__p, *(_QWORD **)(a2 + 88), (_QWORD *)(a2 + 96));
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&v466);
  sub_239BD2F30((uint64_t)a1, v466, (uint64_t **)&__p);
  v65 = v467;
  if (v467)
  {
    v66 = (unint64_t *)&v467->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  __dst[0] = xmmword_239F12872;
  __dst[1] = xmmword_239F12882;
  sub_2396F06F0((uint64_t)__dst, (int32x4_t)xmmword_239F12872, xmmword_239F12882, v63, v64);
  v69 = v68;
  v70 = strlen(v68);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    v472.__r_.__value_.__l.__size_ = v71;
    v472.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v70;
    v72 = &v472;
    if (!v70)
      goto LABEL_88;
  }
  memmove(v72, v69, v71);
LABEL_88:
  *((_BYTE *)v72 + v71) = 0;
  sub_239BCFF20(&__p, *(_QWORD **)(a2 + 112), (_QWORD *)(a2 + 120));
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&v466);
  sub_239BD2F30((uint64_t)a1, v466, (uint64_t **)&__p);
  v78 = v467;
  if (v467)
  {
    v79 = (unint64_t *)&v467->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v472.__r_.__value_.__l.__data_);
  *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F12892;
  *(std::string::size_type *)((char *)&v472.__r_.__value_.__r.__words[1] + 7) = 0x7D6B666D7A6F63;
  sub_2396EFBE0((uint64_t)&v472, (int32x4_t)xmmword_239F12892, v75, v76, v77);
  v82 = v81;
  v83 = strlen(v81);
  if (v83 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v84 = v83;
  if (v83 >= 0x17)
  {
    v86 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v86 = v83 | 7;
    v87 = v86 + 1;
    v85 = operator new(v86 + 1);
    *((_QWORD *)&__dst[0] + 1) = v84;
    *(_QWORD *)&__dst[1] = v87 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v85;
  }
  else
  {
    BYTE7(__dst[1]) = v83;
    v85 = __dst;
    if (!v83)
      goto LABEL_105;
  }
  memmove(v85, v82, v84);
LABEL_105:
  *((_BYTE *)v85 + v84) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4A9C((uint64_t)a1, __p.__r_.__value_.__l.__data_, a2 + 16);
  v91 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_109;
  v92 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (v93)
  {
LABEL_109:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_111;
    goto LABEL_110;
  }
  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
  std::__shared_weak_count::__release_weak(v91);
  if (SBYTE7(__dst[1]) < 0)
LABEL_110:
    operator delete(*(void **)&__dst[0]);
LABEL_111:
  *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F128A9;
  *(std::string::size_type *)((char *)&v472.__r_.__value_.__r.__words[1] + 6) = 0x283E33382F3A36;
  v94 = sub_239A90BEC((unsigned __int8 *)&v472, (int8x16_t)xmmword_239F128A9, v88, v89, v90);
  v95 = strlen((const char *)v94);
  if (v95 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v96 = v95;
  if (v95 >= 0x17)
  {
    v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v95 | 7) != 0x17)
      v98 = v95 | 7;
    v99 = v98 + 1;
    v97 = operator new(v98 + 1);
    *((_QWORD *)&__dst[0] + 1) = v96;
    *(_QWORD *)&__dst[1] = v99 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v97;
  }
  else
  {
    BYTE7(__dst[1]) = v95;
    v97 = __dst;
    if (!v95)
      goto LABEL_119;
  }
  memmove(v97, v94, v96);
LABEL_119:
  *((_BYTE *)v97 + v96) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4A9C((uint64_t)a1, __p.__r_.__value_.__l.__data_, a2 + 24);
  v103 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_123;
  v104 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v105 = __ldaxr(v104);
  while (__stlxr(v105 - 1, v104));
  if (v105)
  {
LABEL_123:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_124;
  }
  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
  std::__shared_weak_count::__release_weak(v103);
  if (SBYTE7(__dst[1]) < 0)
LABEL_124:
    operator delete(*(void **)&__dst[0]);
LABEL_125:
  *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F128BF;
  *(std::string::size_type *)((char *)&v472.__r_.__value_.__r.__words[1] + 6) = 0x6F79747F687D71;
  v106 = sub_239A90BEC((unsigned __int8 *)&v472, (int8x16_t)xmmword_239F128BF, v100, v101, v102);
  v107 = strlen((const char *)v106);
  if (v107 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v108 = v107;
  if (v107 >= 0x17)
  {
    v110 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v107 | 7) != 0x17)
      v110 = v107 | 7;
    v111 = v110 + 1;
    v109 = operator new(v110 + 1);
    *((_QWORD *)&__dst[0] + 1) = v108;
    *(_QWORD *)&__dst[1] = v111 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v109;
  }
  else
  {
    BYTE7(__dst[1]) = v107;
    v109 = __dst;
    if (!v107)
      goto LABEL_133;
  }
  memmove(v109, v106, v108);
LABEL_133:
  *((_BYTE *)v109 + v108) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB4A9C((uint64_t)a1, __p.__r_.__value_.__l.__data_, a2 + 32);
  v112 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_137;
  v113 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (v114)
  {
LABEL_137:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_139;
    goto LABEL_138;
  }
  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
  std::__shared_weak_count::__release_weak(v112);
  if (SBYTE7(__dst[1]) < 0)
LABEL_138:
    operator delete(*(void **)&__dst[0]);
LABEL_139:
  strcpy(v473, "+YN[DY_t[NYtBFJLN");
  v115 = sub_239A91B18((int8x16_t *)v473);
  v116 = strlen(v115->i8);
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v117 = v116;
  if (v116 >= 0x17)
  {
    v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v119 = v116 | 7;
    v120 = v119 + 1;
    v118 = operator new(v119 + 1);
    v467 = (std::__shared_weak_count *)v117;
    v468 = v120 | 0x8000000000000000;
    v466 = v118;
    goto LABEL_146;
  }
  HIBYTE(v468) = v116;
  v118 = &v466;
  if (v116)
LABEL_146:
    memmove(v118, v115, v117);
  *((_BYTE *)v118 + v117) = 0;
  sub_23962C714(&v463);
  v458 = a2;
  v121 = *(_QWORD **)(a2 + 152);
  if (v121)
  {
    while (1)
    {
      std::to_string(&__p, v121[2]);
      sub_23962C714(&v464);
      *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F12755;
      LODWORD(v472.__r_.__value_.__r.__words[2]) = 460317;
      sub_23958E55C((uint64_t)&v472, (int32x4_t)xmmword_239F12755, v122, v123, v124);
      v126 = v125;
      v127 = strlen(v125);
      if (v127 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v128 = v127;
      if (v127 >= 0x17)
      {
        v130 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v127 | 7) != 0x17)
          v130 = v127 | 7;
        v131 = v130 + 1;
        v129 = operator new(v130 + 1);
        *((_QWORD *)&__dst[0] + 1) = v128;
        *(_QWORD *)&__dst[1] = v131 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v129;
      }
      else
      {
        BYTE7(__dst[1]) = v127;
        v129 = __dst;
        if (!v127)
          goto LABEL_159;
      }
      memmove(v129, v126, v128);
LABEL_159:
      *((_BYTE *)v129 + v128) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v470);
      sub_239BB4A9C((uint64_t)&v464, (const void *)v470, (uint64_t)(v121 + 3));
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
        goto LABEL_163;
      v136 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (v137)
      {
LABEL_163:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_165;
LABEL_164:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_165;
      }
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_164;
LABEL_165:
      *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F12769;
      *(std::string::size_type *)((char *)&v472.__r_.__value_.__r.__words[1] + 7) = 0x382E23283F2A26;
      sub_2396EFBE0((uint64_t)&v472, (int32x4_t)xmmword_239F12769, v132, v133, v134);
      v139 = v138;
      v140 = strlen(v138);
      if (v140 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v141 = v140;
      if (v140 >= 0x17)
      {
        v143 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v140 | 7) != 0x17)
          v143 = v140 | 7;
        v144 = v143 + 1;
        v142 = operator new(v143 + 1);
        *((_QWORD *)&__dst[0] + 1) = v141;
        *(_QWORD *)&__dst[1] = v144 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v142;
      }
      else
      {
        BYTE7(__dst[1]) = v140;
        v142 = __dst;
        if (!v140)
          goto LABEL_173;
      }
      memmove(v142, v139, v141);
LABEL_173:
      *((_BYTE *)v142 + v141) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v470);
      sub_239BB4A9C((uint64_t)&v464, (const void *)v470, (uint64_t)(v121 + 4));
      v148 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
        goto LABEL_177;
      v149 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (v150)
      {
LABEL_177:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_179;
LABEL_178:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_179;
      }
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_178;
LABEL_179:
      *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F12780;
      *(std::string::size_type *)((char *)&v472.__r_.__value_.__r.__words[1] + 6) = 0x382E23283F2A26;
      v151 = sub_239A90BEC((unsigned __int8 *)&v472, (int8x16_t)xmmword_239F12780, v145, v146, v147);
      v152 = strlen((const char *)v151);
      if (v152 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v153 = v152;
      if (v152 >= 0x17)
      {
        v155 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v152 | 7) != 0x17)
          v155 = v152 | 7;
        v156 = v155 + 1;
        v154 = operator new(v155 + 1);
        *((_QWORD *)&__dst[0] + 1) = v153;
        *(_QWORD *)&__dst[1] = v156 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v154;
      }
      else
      {
        BYTE7(__dst[1]) = v152;
        v154 = __dst;
        if (!v152)
          goto LABEL_187;
      }
      memmove(v154, v151, v153);
LABEL_187:
      *((_BYTE *)v154 + v153) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v470);
      sub_239BB4A9C((uint64_t)&v464, (const void *)v470, (uint64_t)(v121 + 5));
      v160 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
        goto LABEL_191;
      v161 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (v162)
      {
LABEL_191:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_193;
LABEL_192:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_193;
      }
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_192;
LABEL_193:
      *(_OWORD *)&v472.__r_.__value_.__l.__data_ = xmmword_239F12796;
      *(std::string::size_type *)((char *)&v472.__r_.__value_.__r.__words[1] + 6) = 0x14020F0413060ALL;
      v163 = sub_239A90BEC((unsigned __int8 *)&v472, (int8x16_t)xmmword_239F12796, v157, v158, v159);
      v164 = strlen((const char *)v163);
      if (v164 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v165 = v164;
      if (v164 >= 0x17)
      {
        v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v164 | 7) != 0x17)
          v167 = v164 | 7;
        v168 = v167 + 1;
        v166 = operator new(v167 + 1);
        *((_QWORD *)&__dst[0] + 1) = v165;
        *(_QWORD *)&__dst[1] = v168 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v166;
      }
      else
      {
        BYTE7(__dst[1]) = v164;
        v166 = __dst;
        if (!v164)
          goto LABEL_201;
      }
      memmove(v166, v163, v165);
LABEL_201:
      *((_BYTE *)v166 + v165) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v470);
      sub_239BB4A9C((uint64_t)&v464, (const void *)v470, (uint64_t)(v121 + 6));
      v171 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
        goto LABEL_205;
      v172 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (v173)
      {
LABEL_205:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_207;
LABEL_206:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_207;
      }
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_206;
LABEL_207:
      __dst[0] = xmmword_239F127AC;
      v175 = v174;
      v176 = strlen(v174);
      if (v176 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v177 = v176;
      if (v176 >= 0x17)
      {
        v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v176 | 7) != 0x17)
          v179 = v176 | 7;
        v180 = v179 + 1;
        v178 = operator new(v179 + 1);
        v472.__r_.__value_.__l.__size_ = v177;
        v472.__r_.__value_.__r.__words[2] = v180 | 0x8000000000000000;
        v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      }
      else
      {
        *((_BYTE *)&v472.__r_.__value_.__s + 23) = v176;
        v178 = &v472;
        if (!v176)
          goto LABEL_215;
      }
      memmove(v178, v175, v177);
LABEL_215:
      *((_BYTE *)v178 + v177) = 0;
      sub_239629EF4((uint64_t)&v472, (CFStringRef *)&v470);
      sub_239BB4A9C((uint64_t)&v464, (const void *)v470, (uint64_t)(v121 + 7));
      v183 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (!*((_QWORD *)&v470 + 1))
        goto LABEL_219;
      v184 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (v185)
      {
LABEL_219:
        if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_221;
LABEL_220:
        operator delete(v472.__r_.__value_.__l.__data_);
        goto LABEL_221;
      }
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
      if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_220;
LABEL_221:
      __dst[0] = xmmword_239F127CF;
      __dst[1] = xmmword_239F127DF;
      LOBYTE(__dst[2]) = 0;
      sub_2396EFE38((uint64_t)__dst, (int32x4_t)xmmword_239F127CF, xmmword_239F127DF, v181, v182);
      v187 = v186;
      v188 = strlen(v186);
      if (v188 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v189 = v188;
      if (v188 >= 0x17)
      {
        v191 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v188 | 7) != 0x17)
          v191 = v188 | 7;
        v192 = v191 + 1;
        v190 = operator new(v191 + 1);
        v472.__r_.__value_.__l.__size_ = v189;
        v472.__r_.__value_.__r.__words[2] = v192 | 0x8000000000000000;
        v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
      }
      else
      {
        *((_BYTE *)&v472.__r_.__value_.__s + 23) = v188;
        v190 = &v472;
        if (!v188)
          goto LABEL_229;
      }
      memmove(v190, v187, v189);
LABEL_229:
      *((_BYTE *)v190 + v189) = 0;
      sub_239629EF4((uint64_t)&v472, (CFStringRef *)&v470);
      sub_239BB4A9C((uint64_t)&v464, (const void *)v470, (uint64_t)(v121 + 8));
      v193 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
      if (*((_QWORD *)&v470 + 1))
      {
        v194 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
          if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_235;
LABEL_234:
          operator delete(v472.__r_.__value_.__l.__data_);
          goto LABEL_235;
        }
      }
      if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_234;
LABEL_235:
      sub_239629EF4((uint64_t)&__p, (CFStringRef *)__dst);
      sub_239BB7018((uint64_t)&v463, *(const void **)&__dst[0], (uint64_t)&v464);
      v196 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (!*((_QWORD *)&__dst[0] + 1))
        goto LABEL_239;
      v197 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
        v199 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
        if (*((_QWORD *)&v464 + 1))
        {
LABEL_240:
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
      }
      else
      {
LABEL_239:
        v199 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
        if (*((_QWORD *)&v464 + 1))
          goto LABEL_240;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v121 = (_QWORD *)*v121;
        if (!v121)
          break;
      }
      else
      {
        v121 = (_QWORD *)*v121;
        if (!v121)
          break;
      }
    }
  }
  sub_239629EF4((uint64_t)&v466, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&v463);
  v203 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_264;
  v204 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v205 = __ldaxr(v204);
  while (__stlxr(v205 - 1, v204));
  if (!v205)
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
    v206 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
    if (!*((_QWORD *)&v463 + 1))
      goto LABEL_268;
  }
  else
  {
LABEL_264:
    v206 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
    if (!*((_QWORD *)&v463 + 1))
      goto LABEL_268;
  }
  v207 = (unint64_t *)&v206->__shared_owners_;
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 - 1, v207));
  if (v208)
  {
LABEL_268:
    if ((SHIBYTE(v468) & 0x80000000) == 0)
      goto LABEL_270;
    goto LABEL_269;
  }
  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
  std::__shared_weak_count::__release_weak(v206);
  if (SHIBYTE(v468) < 0)
LABEL_269:
    operator delete(v466);
LABEL_270:
  v466 = (void *)0x141C18051F040371;
  WORD2(v467) = 30;
  LODWORD(v467) = 387913774;
  sub_23971A32C((uint64_t)&v466, v202);
  v210 = v209;
  v211 = strlen(v209);
  if (v211 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v212 = v211;
  if (v211 >= 0x17)
  {
    v214 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v214 = v211 | 7;
    v215 = v214 + 1;
    v213 = operator new(v214 + 1);
    *((_QWORD *)&__dst[0] + 1) = v212;
    *(_QWORD *)&__dst[1] = v215 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v213;
  }
  else
  {
    BYTE7(__dst[1]) = v211;
    v213 = __dst;
    if (!v211)
      goto LABEL_278;
  }
  memmove(v213, v210, v212);
LABEL_278:
  *((_BYTE *)v213 + v212) = 0;
  sub_239BCA2E4((uint64_t)&__p, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 192));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v472);
  sub_239BB7018((uint64_t)a1, v472.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v219 = (std::__shared_weak_count *)v472.__r_.__value_.__l.__size_;
  if (!v472.__r_.__value_.__l.__size_)
    goto LABEL_282;
  v220 = (unint64_t *)(v472.__r_.__value_.__l.__size_ + 8);
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (!v221)
  {
    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
    std::__shared_weak_count::__release_weak(v219);
    v222 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_286;
  }
  else
  {
LABEL_282:
    v222 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_286;
  }
  v223 = (unint64_t *)&v222->__shared_owners_;
  do
    v224 = __ldaxr(v223);
  while (__stlxr(v224 - 1, v223));
  if (v224)
  {
LABEL_286:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_288;
    goto LABEL_287;
  }
  ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
  std::__shared_weak_count::__release_weak(v222);
  if (SBYTE7(__dst[1]) < 0)
LABEL_287:
    operator delete(*(void **)&__dst[0]);
LABEL_288:
  strcpy((char *)__dst, "\ncyUzxcexUcd~xcdyciUkzzfcon");
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)"~xcdyciUkzzfcon", v216, v217, v218);
  v226 = v225;
  v227 = strlen(v225);
  if (v227 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v228 = v227;
  if (v227 >= 0x17)
  {
    v230 = (v227 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v227 | 7) != 0x17)
      v230 = v227 | 7;
    v231 = v230 + 1;
    v229 = operator new(v230 + 1);
    v472.__r_.__value_.__l.__size_ = v228;
    v472.__r_.__value_.__r.__words[2] = v231 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v227;
    v229 = &v472;
    if (!v227)
      goto LABEL_296;
  }
  memmove(v229, v226, v228);
LABEL_296:
  *((_BYTE *)v229 + v228) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, __p.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 264));
  v235 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_300;
  v236 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v237 = __ldaxr(v236);
  while (__stlxr(v237 - 1, v236));
  if (v237)
  {
LABEL_300:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_302;
    goto LABEL_301;
  }
  ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
  std::__shared_weak_count::__release_weak(v235);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_301:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_302:
  strcpy((char *)__dst, "5\\FjEG\\ZGjQ\\FAZGA\\Z[jTEEY\\PQ");
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)"AZGA\\Z[jTEEY\\PQ", v232, v233, v234);
  v239 = v238;
  v240 = strlen(v238);
  if (v240 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v241 = v240;
  if (v240 >= 0x17)
  {
    v243 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v240 | 7) != 0x17)
      v243 = v240 | 7;
    v244 = v243 + 1;
    v242 = operator new(v243 + 1);
    v472.__r_.__value_.__l.__size_ = v241;
    v472.__r_.__value_.__r.__words[2] = v244 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v242;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v240;
    v242 = &v472;
    if (!v240)
      goto LABEL_310;
  }
  memmove(v242, v239, v241);
LABEL_310:
  *((_BYTE *)v242 + v241) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, __p.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 265));
  v248 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_314;
  v249 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v250 = __ldaxr(v249);
  while (__stlxr(v250 - 1, v249));
  if (v250)
  {
LABEL_314:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_316;
    goto LABEL_315;
  }
  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
  std::__shared_weak_count::__release_weak(v248);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_315:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_316:
  __dst[0] = xmmword_239F12920;
  *(_OWORD *)((char *)__dst + 12) = *(__int128 *)((char *)&xmmword_239F12920 + 12);
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12920 + 12), v245, v246, v247);
  v252 = v251;
  v253 = strlen(v251);
  if (v253 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v254 = v253;
  if (v253 >= 0x17)
  {
    v256 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v256 = v253 | 7;
    v257 = v256 + 1;
    v255 = operator new(v256 + 1);
    v472.__r_.__value_.__l.__size_ = v254;
    v472.__r_.__value_.__r.__words[2] = v257 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v255;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v253;
    v255 = &v472;
    if (!v253)
      goto LABEL_324;
  }
  memmove(v255, v252, v254);
LABEL_324:
  *((_BYTE *)v255 + v254) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, __p.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 266));
  v261 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_328;
  v262 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (v263)
  {
LABEL_328:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_330;
    goto LABEL_329;
  }
  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
  std::__shared_weak_count::__release_weak(v261);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_329:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_330:
  __dst[0] = xmmword_239F1293C;
  *(_OWORD *)((char *)__dst + 10) = *(__int128 *)((char *)&xmmword_239F1293C + 10);
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)((char *)&xmmword_239F1293C + 10), v258, v259, v260);
  v265 = v264;
  v266 = strlen(v264);
  if (v266 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v267 = v266;
  if (v266 >= 0x17)
  {
    v269 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v266 | 7) != 0x17)
      v269 = v266 | 7;
    v270 = v269 + 1;
    v268 = operator new(v269 + 1);
    v472.__r_.__value_.__l.__size_ = v267;
    v472.__r_.__value_.__r.__words[2] = v270 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v266;
    v268 = &v472;
    if (!v266)
      goto LABEL_338;
  }
  memmove(v268, v265, v267);
LABEL_338:
  *((_BYTE *)v268 + v267) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, __p.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 267));
  v274 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_342;
  v275 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v276 = __ldaxr(v275);
  while (__stlxr(v276 - 1, v275));
  if (v276)
  {
LABEL_342:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_344;
    goto LABEL_343;
  }
  ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
  std::__shared_weak_count::__release_weak(v274);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_343:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_344:
  __dst[0] = xmmword_239F12956;
  *(_OWORD *)((char *)__dst + 15) = *(__int128 *)((char *)&xmmword_239F12956 + 15);
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12956 + 15), v271, v272, v273);
  v278 = v277;
  v279 = strlen(v277);
  if (v279 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v280 = v279;
  if (v279 >= 0x17)
  {
    v282 = (v279 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v279 | 7) != 0x17)
      v282 = v279 | 7;
    v283 = v282 + 1;
    v281 = operator new(v282 + 1);
    v472.__r_.__value_.__l.__size_ = v280;
    v472.__r_.__value_.__r.__words[2] = v283 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v279;
    v281 = &v472;
    if (!v279)
      goto LABEL_352;
  }
  memmove(v281, v278, v280);
LABEL_352:
  *((_BYTE *)v281 + v280) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, __p.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 268));
  v284 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_356;
  v285 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v286 = __ldaxr(v285);
  while (__stlxr(v286 - 1, v285));
  if (v286)
  {
LABEL_356:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_358;
    goto LABEL_357;
  }
  ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
  std::__shared_weak_count::__release_weak(v284);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_357:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_358:
  v464 = xmmword_239F12975;
  v465 = 20;
  v287 = sub_239A91B18((int8x16_t *)&v464);
  v288 = strlen(v287->i8);
  if (v288 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v289 = v288;
  if (v288 >= 0x17)
  {
    v291 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v288 | 7) != 0x17)
      v291 = v288 | 7;
    v292 = v291 + 1;
    v290 = operator new(v291 + 1);
    v467 = (std::__shared_weak_count *)v289;
    v468 = v292 | 0x8000000000000000;
    v466 = v290;
    goto LABEL_365;
  }
  HIBYTE(v468) = v288;
  v290 = &v466;
  if (v288)
LABEL_365:
    memmove(v290, v287, v289);
  *((_BYTE *)v290 + v289) = 0;
  sub_23962C714(&v459);
  v470 = xmmword_239F126AD;
  v471 = 3;
  v293 = sub_239A91B18((int8x16_t *)&v470);
  v294 = strlen(v293->i8);
  if (v294 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v295 = v294;
  if (v294 >= 0x17)
  {
    v297 = (v294 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v294 | 7) != 0x17)
      v297 = v294 | 7;
    v298 = v297 + 1;
    p_p = (std::string *)operator new(v297 + 1);
    __p.__r_.__value_.__l.__size_ = v295;
    __p.__r_.__value_.__r.__words[2] = v298 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_373;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v294;
  p_p = &__p;
  if (v294)
LABEL_373:
    memmove(p_p, v293, v295);
  p_p->__r_.__value_.__s.__data_[v295] = 0;
  sub_23962C714(&v460);
  v299 = *(_QWORD **)(a2 + 328);
  if (v299)
  {
    while (1)
    {
      std::to_string(&v472, v299[2]);
      sub_23962C714(&v462);
      *(_OWORD *)v473 = xmmword_239F12653;
      strcpy(&v473[14], "~yHzvd|");
      v303 = sub_239A90BEC(v473, (int8x16_t)xmmword_239F12653, v300, v301, v302);
      v304 = strlen((const char *)v303);
      if (v304 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v305 = v304;
      if (v304 >= 0x17)
      {
        v307 = (v304 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v304 | 7) != 0x17)
          v307 = v304 | 7;
        v308 = v307 + 1;
        v306 = operator new(v307 + 1);
        *((_QWORD *)&__dst[0] + 1) = v305;
        *(_QWORD *)&__dst[1] = v308 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v306;
      }
      else
      {
        BYTE7(__dst[1]) = v304;
        v306 = __dst;
        if (!v304)
          goto LABEL_386;
      }
      memmove(v306, v303, v305);
LABEL_386:
      *((_BYTE *)v306 + v305) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v463);
      sub_239BB47DC((uint64_t)&v462, (const void *)v463, (uint64_t)(v299 + 3));
      v312 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
      if (!*((_QWORD *)&v463 + 1))
        goto LABEL_390;
      v313 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
      do
        v314 = __ldaxr(v313);
      while (__stlxr(v314 - 1, v313));
      if (v314)
      {
LABEL_390:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_392;
LABEL_391:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_392;
      }
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_391;
LABEL_392:
      strcpy(v473, ">L_JWQaVWJaHIaQKJaS_MU");
      sub_2396EFBE0((uint64_t)v473, *(int32x4_t *)">L_JWQaVWJaHIaQKJaS_MU", v309, v310, v311);
      v316 = v315;
      v317 = strlen(v315);
      if (v317 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v318 = v317;
      if (v317 >= 0x17)
      {
        v320 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v317 | 7) != 0x17)
          v320 = v317 | 7;
        v321 = v320 + 1;
        v319 = operator new(v320 + 1);
        *((_QWORD *)&__dst[0] + 1) = v318;
        *(_QWORD *)&__dst[1] = v321 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v319;
      }
      else
      {
        BYTE7(__dst[1]) = v317;
        v319 = __dst;
        if (!v317)
          goto LABEL_400;
      }
      memmove(v319, v316, v318);
LABEL_400:
      *((_BYTE *)v319 + v318) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v463);
      sub_239BB47DC((uint64_t)&v462, (const void *)v463, (uint64_t)v299 + 28);
      v325 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
      if (!*((_QWORD *)&v463 + 1))
        goto LABEL_404;
      v326 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
      do
        v327 = __ldaxr(v326);
      while (__stlxr(v327 - 1, v326));
      if (v327)
      {
LABEL_404:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_406;
LABEL_405:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_406;
      }
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_405;
LABEL_406:
      *(_OWORD *)v473 = xmmword_239F12680;
      *(_QWORD *)&v473[14] = 0x1C04161A28191ELL;
      v328 = sub_239A90BEC(v473, (int8x16_t)xmmword_239F12680, v322, v323, v324);
      v329 = strlen((const char *)v328);
      if (v329 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v330 = v329;
      if (v329 >= 0x17)
      {
        v332 = (v329 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v329 | 7) != 0x17)
          v332 = v329 | 7;
        v333 = v332 + 1;
        v331 = operator new(v332 + 1);
        *((_QWORD *)&__dst[0] + 1) = v330;
        *(_QWORD *)&__dst[1] = v333 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v331;
      }
      else
      {
        BYTE7(__dst[1]) = v329;
        v331 = __dst;
        if (!v329)
          goto LABEL_414;
      }
      memmove(v331, v328, v330);
LABEL_414:
      *((_BYTE *)v331 + v330) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v463);
      sub_239BB47DC((uint64_t)&v462, (const void *)v463, (uint64_t)(v299 + 4));
      v337 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
      if (!*((_QWORD *)&v463 + 1))
        goto LABEL_418;
      v338 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (v339)
      {
LABEL_418:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_420;
LABEL_419:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_420;
      }
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_419;
LABEL_420:
      strcpy(v473, "$RS{LMP{WGKVA{KQP{IEWO");
      sub_2396EFBE0((uint64_t)v473, *(int32x4_t *)"$RS{LMP{WGKVA{KQP{IEWO", v334, v335, v336);
      v341 = v340;
      v342 = strlen(v340);
      if (v342 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v343 = v342;
      if (v342 >= 0x17)
      {
        v345 = (v342 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v342 | 7) != 0x17)
          v345 = v342 | 7;
        v346 = v345 + 1;
        v344 = operator new(v345 + 1);
        *((_QWORD *)&__dst[0] + 1) = v343;
        *(_QWORD *)&__dst[1] = v346 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v344;
      }
      else
      {
        BYTE7(__dst[1]) = v342;
        v344 = __dst;
        if (!v342)
          goto LABEL_428;
      }
      memmove(v344, v341, v343);
LABEL_428:
      *((_BYTE *)v344 + v343) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v463);
      sub_239BB47DC((uint64_t)&v462, (const void *)v463, (uint64_t)v299 + 36);
      v347 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
      if (*((_QWORD *)&v463 + 1))
      {
        v348 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
            goto LABEL_434;
LABEL_433:
          operator delete(*(void **)&__dst[0]);
          goto LABEL_434;
        }
      }
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_433;
LABEL_434:
      sub_239629EF4((uint64_t)&v472, (CFStringRef *)__dst);
      sub_239BB7018((uint64_t)&v460, *(const void **)&__dst[0], (uint64_t)&v462);
      v350 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (!*((_QWORD *)&__dst[0] + 1))
        goto LABEL_438;
      v351 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v352 = __ldaxr(v351);
      while (__stlxr(v352 - 1, v351));
      if (!v352)
      {
        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
        std::__shared_weak_count::__release_weak(v350);
        v353 = (std::__shared_weak_count *)*((_QWORD *)&v462 + 1);
        if (*((_QWORD *)&v462 + 1))
        {
LABEL_439:
          v354 = (unint64_t *)&v353->__shared_owners_;
          do
            v355 = __ldaxr(v354);
          while (__stlxr(v355 - 1, v354));
          if (!v355)
          {
            ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
            std::__shared_weak_count::__release_weak(v353);
          }
        }
      }
      else
      {
LABEL_438:
        v353 = (std::__shared_weak_count *)*((_QWORD *)&v462 + 1);
        if (*((_QWORD *)&v462 + 1))
          goto LABEL_439;
      }
      if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v472.__r_.__value_.__l.__data_);
        v299 = (_QWORD *)*v299;
        if (!v299)
          break;
      }
      else
      {
        v299 = (_QWORD *)*v299;
        if (!v299)
          break;
      }
    }
  }
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v459, *(const void **)&__dst[0], (uint64_t)&v460);
  v359 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_459;
  v360 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v361 = __ldaxr(v360);
  while (__stlxr(v361 - 1, v360));
  if (!v361)
  {
    ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
    std::__shared_weak_count::__release_weak(v359);
    v362 = (std::__shared_weak_count *)*((_QWORD *)&v460 + 1);
    if (!*((_QWORD *)&v460 + 1))
      goto LABEL_463;
  }
  else
  {
LABEL_459:
    v362 = (std::__shared_weak_count *)*((_QWORD *)&v460 + 1);
    if (!*((_QWORD *)&v460 + 1))
      goto LABEL_463;
  }
  v363 = (unint64_t *)&v362->__shared_owners_;
  do
    v364 = __ldaxr(v363);
  while (__stlxr(v364 - 1, v363));
  if (v364)
  {
LABEL_463:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_465;
    goto LABEL_464;
  }
  ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
  std::__shared_weak_count::__release_weak(v362);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_464:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_465:
  strcpy((char *)&v472, "(A[wOM\\\\AFOwLM[KwNI[\\MZ");
  sub_2396F1A4C((uint64_t)&v472, *(int32x4_t *)"(A[wOM\\\\AFOwLM[KwNI[\\MZ", v356, v357, v358);
  v366 = v365;
  v367 = strlen(v365);
  if (v367 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v368 = v367;
  if (v367 >= 0x17)
  {
    v370 = (v367 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v367 | 7) != 0x17)
      v370 = v367 | 7;
    v371 = v370 + 1;
    v369 = operator new(v370 + 1);
    *((_QWORD *)&__dst[0] + 1) = v368;
    *(_QWORD *)&__dst[1] = v371 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v369;
  }
  else
  {
    BYTE7(__dst[1]) = v367;
    v369 = __dst;
    if (!v367)
      goto LABEL_473;
  }
  memmove(v369, v366, v368);
LABEL_473:
  *((_BYTE *)v369 + v368) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)&v459, __p.__r_.__value_.__l.__data_, (_BYTE *)(v458 + 272));
  v375 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_477;
  v376 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v377 = __ldaxr(v376);
  while (__stlxr(v377 - 1, v376));
  if (v377)
  {
LABEL_477:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_479;
    goto LABEL_478;
  }
  ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
  std::__shared_weak_count::__release_weak(v375);
  if (SBYTE7(__dst[1]) < 0)
LABEL_478:
    operator delete(*(void **)&__dst[0]);
LABEL_479:
  __dst[0] = xmmword_239F126D7;
  *(_OWORD *)((char *)__dst + 10) = *(__int128 *)((char *)&xmmword_239F126D7 + 10);
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)((char *)&xmmword_239F126D7 + 10), v372, v373, v374);
  v379 = v378;
  v380 = strlen(v378);
  if (v380 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v381 = v380;
  if (v380 >= 0x17)
  {
    v383 = (v380 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v380 | 7) != 0x17)
      v383 = v380 | 7;
    v384 = v383 + 1;
    v382 = operator new(v383 + 1);
    v472.__r_.__value_.__l.__size_ = v381;
    v472.__r_.__value_.__r.__words[2] = v384 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v382;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v380;
    v382 = &v472;
    if (!v380)
      goto LABEL_487;
  }
  memmove(v382, v379, v381);
LABEL_487:
  *((_BYTE *)v382 + v381) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_239BB47DC((uint64_t)&v459, __p.__r_.__value_.__l.__data_, v458 + 356);
  v388 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_491;
  v389 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v390 = __ldaxr(v389);
  while (__stlxr(v390 - 1, v389));
  if (v390)
  {
LABEL_491:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_493;
    goto LABEL_492;
  }
  ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
  std::__shared_weak_count::__release_weak(v388);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_492:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_493:
  __dst[0] = xmmword_239F126F1;
  *(_OWORD *)((char *)__dst + 11) = *(__int128 *)((char *)&xmmword_239F126F1 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F126F1 + 11), v385, v386, v387);
  v392 = v391;
  v393 = strlen(v391);
  if (v393 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v394 = v393;
  if (v393 >= 0x17)
  {
    v396 = (v393 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v393 | 7) != 0x17)
      v396 = v393 | 7;
    v397 = v396 + 1;
    v395 = operator new(v396 + 1);
    v472.__r_.__value_.__l.__size_ = v394;
    v472.__r_.__value_.__r.__words[2] = v397 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v395;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v393;
    v395 = &v472;
    if (!v393)
      goto LABEL_501;
  }
  memmove(v395, v392, v394);
LABEL_501:
  *((_BYTE *)v395 + v394) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_239BB47DC((uint64_t)&v459, __p.__r_.__value_.__l.__data_, v458 + 360);
  v401 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_505;
  v402 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v403 = __ldaxr(v402);
  while (__stlxr(v403 - 1, v402));
  if (v403)
  {
LABEL_505:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_507;
    goto LABEL_506;
  }
  ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
  std::__shared_weak_count::__release_weak(v401);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_506:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_507:
  strcpy((char *)__dst, "=\\KZbKJbUTIbN^ROXbTSbP\\NV");
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)"IbN^ROXbTSbP\\NV", v398, v399, v400);
  v405 = v404;
  v406 = strlen(v404);
  if (v406 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v407 = v406;
  if (v406 >= 0x17)
  {
    v409 = (v406 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v406 | 7) != 0x17)
      v409 = v406 | 7;
    v410 = v409 + 1;
    v408 = operator new(v409 + 1);
    v472.__r_.__value_.__l.__size_ = v407;
    v472.__r_.__value_.__r.__words[2] = v410 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v408;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v406;
    v408 = &v472;
    if (!v406)
      goto LABEL_515;
  }
  memmove(v408, v405, v407);
LABEL_515:
  *((_BYTE *)v408 + v407) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_239BB47DC((uint64_t)&v459, __p.__r_.__value_.__l.__data_, v458 + 364);
  v414 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_519;
  v415 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v416 = __ldaxr(v415);
  while (__stlxr(v416 - 1, v415));
  if (v416)
  {
LABEL_519:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_521;
    goto LABEL_520;
  }
  ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
  std::__shared_weak_count::__release_weak(v414);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_520:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_521:
  __dst[0] = xmmword_239F12726;
  *(_OWORD *)((char *)__dst + 11) = *(__int128 *)((char *)&xmmword_239F12726 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12726 + 11), v411, v412, v413);
  v418 = v417;
  v419 = strlen(v417);
  if (v419 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v420 = v419;
  if (v419 >= 0x17)
  {
    v422 = (v419 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v419 | 7) != 0x17)
      v422 = v419 | 7;
    v423 = v422 + 1;
    v421 = operator new(v422 + 1);
    v472.__r_.__value_.__l.__size_ = v420;
    v472.__r_.__value_.__r.__words[2] = v423 | 0x8000000000000000;
    v472.__r_.__value_.__r.__words[0] = (std::string::size_type)v421;
  }
  else
  {
    *((_BYTE *)&v472.__r_.__value_.__s + 23) = v419;
    v421 = &v472;
    if (!v419)
      goto LABEL_529;
  }
  memmove(v421, v418, v420);
LABEL_529:
  *((_BYTE *)v421 + v420) = 0;
  sub_239629EF4((uint64_t)&v472, (CFStringRef *)&__p);
  sub_239BB47DC((uint64_t)&v459, __p.__r_.__value_.__l.__data_, v458 + 368);
  v427 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_533;
  v428 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v429 = __ldaxr(v428);
  while (__stlxr(v429 - 1, v428));
  if (v429)
  {
LABEL_533:
    if ((SHIBYTE(v472.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_535;
    goto LABEL_534;
  }
  ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
  std::__shared_weak_count::__release_weak(v427);
  if (SHIBYTE(v472.__r_.__value_.__r.__words[2]) < 0)
LABEL_534:
    operator delete(v472.__r_.__value_.__l.__data_);
LABEL_535:
  strcpy((char *)&v472, "\"FWPCVKML}PGVPKGTCN");
  sub_23958E55C((uint64_t)&v472, *(int32x4_t *)"\"FWPCVKML}PGVPKGTCN", v424, v425, v426);
  v431 = v430;
  v432 = strlen(v430);
  if (v432 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v433 = v432;
  if (v432 >= 0x17)
  {
    v435 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v432 | 7) != 0x17)
      v435 = v432 | 7;
    v436 = v435 + 1;
    v434 = operator new(v435 + 1);
    *((_QWORD *)&__dst[0] + 1) = v433;
    *(_QWORD *)&__dst[1] = v436 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v434;
  }
  else
  {
    BYTE7(__dst[1]) = v432;
    v434 = __dst;
    if (!v432)
      goto LABEL_543;
  }
  memmove(v434, v431, v433);
LABEL_543:
  *((_BYTE *)v434 + v433) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_239BB47DC((uint64_t)&v459, __p.__r_.__value_.__l.__data_, v458 + 352);
  v437 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v438 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v439 = __ldaxr(v438);
    while (__stlxr(v439 - 1, v438));
    if (!v439)
    {
      ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
      std::__shared_weak_count::__release_weak(v437);
      if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        goto LABEL_549;
      goto LABEL_548;
    }
  }
  if (SBYTE7(__dst[1]) < 0)
LABEL_548:
    operator delete(*(void **)&__dst[0]);
LABEL_549:
  sub_239629EF4((uint64_t)&v466, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&v459);
  v440 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_553;
  v441 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v442 = __ldaxr(v441);
  while (__stlxr(v442 - 1, v441));
  if (!v442)
  {
    ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
    std::__shared_weak_count::__release_weak(v440);
    v443 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
    if (!*((_QWORD *)&v459 + 1))
      goto LABEL_557;
  }
  else
  {
LABEL_553:
    v443 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
    if (!*((_QWORD *)&v459 + 1))
      goto LABEL_557;
  }
  v444 = (unint64_t *)&v443->__shared_owners_;
  do
    v445 = __ldaxr(v444);
  while (__stlxr(v445 - 1, v444));
  if (v445)
  {
LABEL_557:
    if ((SHIBYTE(v468) & 0x80000000) == 0)
      goto LABEL_559;
    goto LABEL_558;
  }
  ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
  std::__shared_weak_count::__release_weak(v443);
  if (SHIBYTE(v468) < 0)
LABEL_558:
    operator delete(v466);
LABEL_559:
  v466 = (void *)0x60A360D0C1A1C69;
  BYTE4(v467) = 0;
  LODWORD(v467) = 234884871;
  v446 = sub_239510ECC((uint64_t)&v466);
  v447 = strlen(v446);
  if (v447 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v448 = v447;
  if (v447 >= 0x17)
  {
    v450 = (v447 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v447 | 7) != 0x17)
      v450 = v447 | 7;
    v451 = v450 + 1;
    v449 = operator new(v450 + 1);
    *((_QWORD *)&__dst[0] + 1) = v448;
    *(_QWORD *)&__dst[1] = v451 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v449;
  }
  else
  {
    BYTE7(__dst[1]) = v447;
    v449 = __dst;
    if (!v447)
      goto LABEL_567;
  }
  memmove(v449, v446, v448);
LABEL_567:
  *((_BYTE *)v449 + v448) = 0;
  sub_239BB7230((uint64_t)&__p, v458 + 376);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v472);
  sub_239BB7018((uint64_t)a1, v472.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v452 = (std::__shared_weak_count *)v472.__r_.__value_.__l.__size_;
  if (!v472.__r_.__value_.__l.__size_)
    goto LABEL_571;
  v453 = (unint64_t *)(v472.__r_.__value_.__l.__size_ + 8);
  do
    v454 = __ldaxr(v453);
  while (__stlxr(v454 - 1, v453));
  if (!v454)
  {
    ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
    std::__shared_weak_count::__release_weak(v452);
    v455 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_575;
  }
  else
  {
LABEL_571:
    v455 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_575;
  }
  v456 = (unint64_t *)&v455->__shared_owners_;
  do
    v457 = __ldaxr(v456);
  while (__stlxr(v457 - 1, v456));
  if (v457)
  {
LABEL_575:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      return;
    goto LABEL_576;
  }
  ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
  std::__shared_weak_count::__release_weak(v455);
  if (SBYTE7(__dst[1]) < 0)
LABEL_576:
    operator delete(*(void **)&__dst[0]);
}

void sub_239BD2A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  sub_239416DA0(v40 - 160);
  sub_239416DA0((uint64_t)&a16);
  if (a40 < 0)
    operator delete(__p);
  sub_239416DA0(a11);
  _Unwind_Resume(a1);
}

void sub_239BD2F30(uint64_t a1, const void *a2, uint64_t **a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  CFMutableArrayRef v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64[2];
  void *v65[2];
  CFMutableArrayRef v66[3];
  uint64_t v67;
  CFMutableArrayRef theArray[2];
  void *value;
  std::__shared_weak_count *v70;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!sub_23962C8DC(*(const __CFDictionary **)a1, a2))
  {
    sub_23962BDF8((std::__shared_weak_count_vtbl **)v66);
    v12 = v66[0];
    v11 = (std::__shared_weak_count *)v66[1];
    if (!v66[1])
      goto LABEL_13;
    v13 = (unint64_t *)((char *)v66[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v12)
      {
LABEL_14:
        v16 = *a3;
        v17 = a3[1];
        if (*a3 != v17)
        {
          do
          {
            v67 = *v16;
            sub_23962BDF8((std::__shared_weak_count_vtbl **)theArray);
            v19 = theArray[0];
            v18 = (std::__shared_weak_count *)theArray[1];
            if (!theArray[1])
              goto LABEL_20;
            v20 = (unint64_t *)((char *)theArray[1] + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
            do
              v22 = __ldaxr(v20);
            while (__stlxr(v22 - 1, v20));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              if (!v19)
                goto LABEL_55;
            }
            else
            {
LABEL_20:
              if (!v19)
                goto LABEL_55;
            }
            sub_2396298C4(&value, &v67);
            v24 = value;
            v23 = v70;
            if (!v70)
              goto LABEL_26;
            v25 = (unint64_t *)&v70->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
            do
              v27 = __ldaxr(v25);
            while (__stlxr(v27 - 1, v25));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
              if (v24)
              {
LABEL_27:
                j__CFArrayAppendValue(theArray[0], value);
                v28 = 1;
                v29 = v70;
                if (!v70)
                  goto LABEL_36;
                goto LABEL_33;
              }
            }
            else
            {
LABEL_26:
              if (v24)
                goto LABEL_27;
            }
            v28 = 0;
            v29 = v70;
            if (!v70)
              goto LABEL_36;
LABEL_33:
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (v31)
            {
LABEL_36:
              if (!v24)
                goto LABEL_55;
              goto LABEL_37;
            }
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            if (!v24)
              goto LABEL_55;
LABEL_37:
            sub_2396298C4(&value, (char *)&v67 + 4);
            v33 = value;
            v32 = v70;
            if (!v70)
              goto LABEL_42;
            v34 = (unint64_t *)&v70->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
            do
              v36 = __ldaxr(v34);
            while (__stlxr(v36 - 1, v34));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
              if (v33)
              {
LABEL_43:
                j__CFArrayAppendValue(theArray[0], value);
                v37 = v70;
                if (!v70)
                  goto LABEL_52;
                goto LABEL_49;
              }
            }
            else
            {
LABEL_42:
              if (v33)
                goto LABEL_43;
            }
            v28 = 0;
            v37 = v70;
            if (!v70)
              goto LABEL_52;
LABEL_49:
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (v39)
            {
LABEL_52:
              if (!v28)
                goto LABEL_55;
              goto LABEL_53;
            }
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
            if (!v28)
            {
LABEL_55:
              v40 = v65;
              goto LABEL_56;
            }
LABEL_53:
            *(_OWORD *)v65 = *(_OWORD *)theArray;
            v40 = theArray;
LABEL_56:
            *v40 = 0;
            v40[1] = 0;
            v41 = (std::__shared_weak_count *)theArray[1];
            if (!theArray[1])
              goto LABEL_60;
            v42 = (unint64_t *)((char *)theArray[1] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
              v45 = v65[0];
              v44 = (std::__shared_weak_count *)v65[1];
              if (!v65[1])
                goto LABEL_65;
            }
            else
            {
LABEL_60:
              v45 = v65[0];
              v44 = (std::__shared_weak_count *)v65[1];
              if (!v65[1])
                goto LABEL_65;
            }
            v46 = (unint64_t *)&v44->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            do
              v48 = __ldaxr(v46);
            while (__stlxr(v48 - 1, v46));
            if (v48)
            {
LABEL_65:
              if (v45)
                goto LABEL_66;
              goto LABEL_71;
            }
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            if (v45)
            {
LABEL_66:
              j__CFArrayAppendValue(v66[0], v65[0]);
              v49 = (std::__shared_weak_count *)v65[1];
              if (v65[1])
                goto LABEL_72;
              goto LABEL_76;
            }
LABEL_71:
            v64[0] = 0;
            v64[1] = 0;
            v49 = (std::__shared_weak_count *)v65[1];
            if (v65[1])
            {
LABEL_72:
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
LABEL_76:
            if (!v45)
              goto LABEL_84;
            ++v16;
          }
          while (v16 != v17);
        }
        *(_OWORD *)v64 = *(_OWORD *)v66;
        v52 = (void **)v66;
LABEL_83:
        *v52 = 0;
        v52[1] = 0;
LABEL_84:
        v53 = (std::__shared_weak_count *)v66[1];
        if (!v66[1])
          goto LABEL_88;
        v54 = (unint64_t *)((char *)v66[1] + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
          v57 = v64[0];
          v56 = (std::__shared_weak_count *)v64[1];
          if (!v64[1])
            goto LABEL_93;
        }
        else
        {
LABEL_88:
          v57 = v64[0];
          v56 = (std::__shared_weak_count *)v64[1];
          if (!v64[1])
            goto LABEL_93;
        }
        v58 = (unint64_t *)&v56->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        do
          v60 = __ldaxr(v58);
        while (__stlxr(v60 - 1, v58));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
          if (!v57)
          {
LABEL_95:
            v61 = (std::__shared_weak_count *)v64[1];
            if (v64[1])
            {
              v62 = (unint64_t *)((char *)v64[1] + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            return;
          }
LABEL_94:
          j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, v64[0]);
          goto LABEL_95;
        }
LABEL_93:
        if (!v57)
          goto LABEL_95;
        goto LABEL_94;
      }
    }
    v52 = v64;
    goto LABEL_83;
  }
}

void sub_239BD3428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239BD343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va);
  if (a7)
  {
    p_shared_owners = (unint64_t *)&a7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a7->__on_zero_shared)(a7);
      std::__shared_weak_count::__release_weak(a7);
    }
  }
  _Unwind_Resume(a1);
}

void sub_239BD34E4(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int8x16_t *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  double v29;
  int32x4_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const char *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int8x16_t *v44;
  size_t v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  double v51;
  int32x4_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  const char *v57;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  const char *v66;
  size_t v67;
  size_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  int16x8_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  const char *v76;
  const char *v77;
  size_t v78;
  size_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  double v84;
  int32x4_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  const char *v89;
  const char *v90;
  size_t v91;
  size_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  double v97;
  int32x4_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  const char *v102;
  const char *v103;
  size_t v104;
  size_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t v109;
  double v110;
  int32x4_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  const char *v115;
  const char *v116;
  size_t v117;
  size_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  int8x16_t v122;
  double v123;
  int32x4_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  const char *v128;
  const char *v129;
  size_t v130;
  size_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  int8x16_t v135;
  double v136;
  int32x4_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  const char *v141;
  const char *v142;
  size_t v143;
  size_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  int8x16_t v148;
  double v149;
  int32x4_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  const char *v154;
  const char *v155;
  size_t v156;
  size_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  int8x16_t v161;
  double v162;
  int32x4_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  const char *v167;
  const char *v168;
  size_t v169;
  size_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  int8x16_t v174;
  double v175;
  int32x4_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  const char *v180;
  const char *v181;
  size_t v182;
  size_t v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  const char *v190;
  const char *v191;
  size_t v192;
  size_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  int8x16_t v197;
  double v198;
  int32x4_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  const char *v203;
  const char *v204;
  size_t v205;
  size_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  int8x16_t v210;
  double v211;
  int32x4_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  const char *v216;
  const char *v217;
  size_t v218;
  size_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  int8x16_t v223;
  double v224;
  int32x4_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  const char *v229;
  const char *v230;
  size_t v231;
  size_t v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  int8x16_t v236;
  double v237;
  int32x4_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  const char *v242;
  const char *v243;
  size_t v244;
  size_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  double v249;
  int32x4_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  const char *v254;
  const char *v255;
  size_t v256;
  size_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  int8x16_t v261;
  double v262;
  int32x4_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  const char *v267;
  const char *v268;
  size_t v269;
  size_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  int8x16_t v274;
  double v275;
  int32x4_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  const char *v280;
  const char *v281;
  size_t v282;
  size_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  int8x16_t v287;
  double v288;
  int32x4_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  const char *v293;
  const char *v294;
  size_t v295;
  size_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  double v300;
  double v301;
  int16x8_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  const char *v306;
  const char *v307;
  size_t v308;
  size_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  double v313;
  int16x8_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  const char *v318;
  const char *v319;
  size_t v320;
  size_t v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  int8x16_t v325;
  double v326;
  int32x4_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  const char *v331;
  const char *v332;
  size_t v333;
  size_t v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  int8x16_t v338;
  double v339;
  int32x4_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  const char *v344;
  const char *v345;
  size_t v346;
  size_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  int8x16_t v351;
  double v352;
  int32x4_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  const char *v357;
  const char *v358;
  size_t v359;
  size_t v360;
  _BYTE *v361;
  uint64_t v362;
  uint64_t v363;
  int8x16_t v364;
  double v365;
  int32x4_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  const char *v370;
  const char *v371;
  size_t v372;
  size_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  int8x16_t v377;
  double v378;
  int32x4_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  const char *v383;
  const char *v384;
  size_t v385;
  size_t v386;
  _BYTE *v387;
  uint64_t v388;
  uint64_t v389;
  double v390;
  int16x8_t v391;
  int16x8_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  const char *v396;
  const char *v397;
  size_t v398;
  size_t v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  int16x8_t v403;
  int16x8_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  const char *v408;
  const char *v409;
  size_t v410;
  size_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  const char *v418;
  const char *v419;
  size_t v420;
  size_t v421;
  _BYTE *v422;
  uint64_t v423;
  uint64_t v424;
  int8x16_t v425;
  double v426;
  int32x4_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  const char *v431;
  const char *v432;
  size_t v433;
  size_t v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  double v438;
  int32x4_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  const char *v443;
  const char *v444;
  size_t v445;
  size_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  int8x16_t v450;
  double v451;
  int32x4_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  const char *v456;
  const char *v457;
  size_t v458;
  size_t v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  int8x16_t v463;
  double v464;
  int32x4_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  const char *v469;
  const char *v470;
  size_t v471;
  size_t v472;
  _BYTE *v473;
  uint64_t v474;
  uint64_t v475;
  int8x16_t v476;
  double v477;
  int32x4_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  const char *v482;
  const char *v483;
  size_t v484;
  size_t v485;
  _BYTE *v486;
  uint64_t v487;
  uint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  const char *v492;
  const char *v493;
  size_t v494;
  size_t v495;
  _BYTE *v496;
  uint64_t v497;
  uint64_t v498;
  int8x16_t v499;
  double v500;
  int32x4_t v501;
  const void *v502;
  std::__shared_weak_count *v503;
  const __CFDictionary *v504;
  unint64_t *p_shared_owners;
  unint64_t v506;
  unint64_t v507;
  int8x16_t v508;
  unint64_t *v509;
  unint64_t v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  const char *v518;
  const char *v519;
  size_t v520;
  size_t v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  double v525;
  double v526;
  int16x8_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  const char *v531;
  const char *v532;
  size_t v533;
  size_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  int8x16_t v538;
  double v539;
  int32x4_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  const char *v544;
  const char *v545;
  size_t v546;
  size_t v547;
  void *v548;
  uint64_t v549;
  uint64_t v550;
  int8x16_t v551;
  double v552;
  int32x4_t v553;
  CFStringRef v554;
  std::__shared_weak_count *v555;
  const __CFDictionary *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t v559;
  __int128 v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;
  std::__shared_weak_count *v564;
  void *v565;
  unint64_t *v566;
  unint64_t v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  void **v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  void *v574;
  unint64_t *v575;
  unint64_t v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  void *v582;
  unint64_t *v583;
  unint64_t v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  void *v590;
  unint64_t *v591;
  unint64_t v592;
  unint64_t v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  unint64_t v596;
  std::__shared_weak_count *v597;
  void *v598;
  unint64_t *v599;
  unint64_t v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  void *v606;
  unint64_t *v607;
  unint64_t v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  void *v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  std::__shared_weak_count *v624;
  void *v625;
  unint64_t *v626;
  unint64_t v627;
  unint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  const char *v635;
  const char *v636;
  size_t v637;
  size_t v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  double v642;
  int16x8_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  const char *v647;
  const char *v648;
  size_t v649;
  size_t v650;
  void *v651;
  uint64_t v652;
  uint64_t v653;
  double v654;
  int16x8_t v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  const char *v659;
  const char *v660;
  size_t v661;
  size_t v662;
  void *v663;
  uint64_t v664;
  uint64_t v665;
  std::__shared_weak_count *v666;
  unint64_t *v667;
  unint64_t v668;
  CFStringRef v669;
  std::__shared_weak_count *v670;
  void *v671[2];
  _BYTE __dst[48];
  int8x16_t __p[2];
  void *value;
  std::__shared_weak_count *v675;
  __int128 v676;
  uint64_t v677;

  v677 = *MEMORY[0x24BDAC8D0];
  sub_23962C714((_OWORD *)a1);
  *(_QWORD *)&v676 = 0x161A1824160E157BLL;
  BYTE12(v676) = 0;
  DWORD2(v676) = 135923998;
  v4 = sub_239510ECC((uint64_t)&v676);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)&__dst[8] = v6;
    *(_QWORD *)&__dst[16] = v9 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
  }
  else
  {
    __dst[23] = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, v4, v6);
LABEL_9:
  v7[v6] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C(a1, (const void *)__p[0].i64[0], a2 + 8);
  v10 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_13;
  v11 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_13:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_14:
    operator delete(*(void **)__dst);
LABEL_15:
  *(_QWORD *)&v676 = 0x727E7A4C7E667D13;
  DWORD2(v676) = 6321780;
  v13 = sub_23958E4C8((uint64_t)&v676);
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&__dst[8] = v15;
    *(_QWORD *)&__dst[16] = v18 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    __dst[23] = v14;
    v16 = __dst;
    if (!v14)
      goto LABEL_23;
  }
  memmove(v16, v13, v15);
LABEL_23:
  v16[v15] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C(a1, (const void *)__p[0].i64[0], a2 + 16);
  v19 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_27;
  v20 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_27:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_28:
    operator delete(*(void **)__dst);
LABEL_29:
  __p[0] = (int8x16_t)xmmword_239F12987;
  __p[1].i16[0] = 46;
  v22 = sub_239A91B18(__p);
  v23 = strlen(v22->i8);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *(_QWORD *)&__dst[8] = v24;
    *(_QWORD *)&__dst[16] = v27 | 0x8000000000000000;
    *(_QWORD *)__dst = v25;
  }
  else
  {
    __dst[23] = v23;
    v25 = __dst;
    if (!v23)
      goto LABEL_37;
  }
  memmove(v25, v22, v24);
LABEL_37:
  v25[v24] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 24);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_41;
  v32 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_41:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_42:
    operator delete(*(void **)__dst);
LABEL_43:
  __p[0] = (int8x16_t)xmmword_239F12999;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 4139307;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F12999, v28, v29, v30);
  v35 = v34;
  v36 = strlen(v34);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    *(_QWORD *)&__dst[8] = v37;
    *(_QWORD *)&__dst[16] = v40 | 0x8000000000000000;
    *(_QWORD *)__dst = v38;
  }
  else
  {
    __dst[23] = v36;
    v38 = __dst;
    if (!v36)
      goto LABEL_51;
  }
  memmove(v38, v35, v37);
LABEL_51:
  v38[v37] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 32);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_55;
  v42 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (v43)
  {
LABEL_55:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v41);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_56:
    operator delete(*(void **)__dst);
LABEL_57:
  __p[0] = (int8x16_t)xmmword_239F129AC;
  __p[1].i16[0] = 17;
  v44 = sub_239A91B18(__p);
  v45 = strlen(v44->i8);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    *(_QWORD *)&__dst[8] = v46;
    *(_QWORD *)&__dst[16] = v49 | 0x8000000000000000;
    *(_QWORD *)__dst = v47;
  }
  else
  {
    __dst[23] = v45;
    v47 = __dst;
    if (!v45)
      goto LABEL_65;
  }
  memmove(v47, v44, v46);
LABEL_65:
  v47[v46] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 40);
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_69;
  v54 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_69:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_70:
    operator delete(*(void **)__dst);
LABEL_71:
  __p[0] = (int8x16_t)xmmword_239F129BE;
  *(uint64_t *)((char *)&__p[0].i64[1] + 7) = 0x6D7071776A7D7BLL;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F129BE, v50, v51, v52);
  v57 = v56;
  v58 = strlen(v56);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    *(_QWORD *)&__dst[8] = v59;
    *(_QWORD *)&__dst[16] = v62 | 0x8000000000000000;
    *(_QWORD *)__dst = v60;
  }
  else
  {
    __dst[23] = v58;
    v60 = __dst;
    if (!v58)
      goto LABEL_79;
  }
  memmove(v60, v57, v59);
LABEL_79:
  v60[v59] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 48);
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_83;
  v64 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (v65)
  {
LABEL_83:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_84:
    operator delete(*(void **)__dst);
LABEL_85:
  *(_QWORD *)&v676 = 0x141C0D221008137DLL;
  BYTE10(v676) = 0;
  WORD4(v676) = 3599;
  v66 = (const char *)sub_23958E518((uint64_t)&v676);
  v67 = strlen(v66);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v68 = v67;
  if (v67 >= 0x17)
  {
    v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v70 = v67 | 7;
    v71 = v70 + 1;
    v69 = operator new(v70 + 1);
    *(_QWORD *)&__dst[8] = v68;
    *(_QWORD *)&__dst[16] = v71 | 0x8000000000000000;
    *(_QWORD *)__dst = v69;
  }
  else
  {
    __dst[23] = v67;
    v69 = __dst;
    if (!v67)
      goto LABEL_93;
  }
  memmove(v69, v66, v68);
LABEL_93:
  v69[v68] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C(a1, (const void *)__p[0].i64[0], a2 + 56);
  v73 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_97;
  v74 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v75 - 1, v74));
  if (v75)
  {
LABEL_97:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
  std::__shared_weak_count::__release_weak(v73);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_98:
    operator delete(*(void **)__dst);
LABEL_99:
  *(_QWORD *)&v676 = 0x10315390B130866;
  WORD6(v676) = 21;
  DWORD2(v676) = 302514955;
  sub_23971A32C((uint64_t)&v676, v72);
  v77 = v76;
  v78 = strlen(v76);
  if (v78 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v79 = v78;
  if (v78 >= 0x17)
  {
    v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v78 | 7) != 0x17)
      v81 = v78 | 7;
    v82 = v81 + 1;
    v80 = operator new(v81 + 1);
    *(_QWORD *)&__dst[8] = v79;
    *(_QWORD *)&__dst[16] = v82 | 0x8000000000000000;
    *(_QWORD *)__dst = v80;
  }
  else
  {
    __dst[23] = v78;
    v80 = __dst;
    if (!v78)
      goto LABEL_107;
  }
  memmove(v80, v77, v79);
LABEL_107:
  v80[v79] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C(a1, (const void *)__p[0].i64[0], a2 + 64);
  v86 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_111;
  v87 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (v88)
  {
LABEL_111:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
  std::__shared_weak_count::__release_weak(v86);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_112:
    operator delete(*(void **)__dst);
LABEL_113:
  strcpy(__p[0].i8, "(F]Ew^IDALw[MOEMF\\[");
  sub_23958E55C((uint64_t)__p, *(int32x4_t *)"(F]Ew^IDALw[MOEMF\\[", v83, v84, v85);
  v90 = v89;
  v91 = strlen(v89);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v92 = v91;
  if (v91 >= 0x17)
  {
    v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v94 = v91 | 7;
    v95 = v94 + 1;
    v93 = operator new(v94 + 1);
    *(_QWORD *)&__dst[8] = v92;
    *(_QWORD *)&__dst[16] = v95 | 0x8000000000000000;
    *(_QWORD *)__dst = v93;
  }
  else
  {
    __dst[23] = v91;
    v93 = __dst;
    if (!v91)
      goto LABEL_121;
  }
  memmove(v93, v90, v92);
LABEL_121:
  v93[v92] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 72);
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_125;
  v100 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v101 = __ldaxr(v100);
  while (__stlxr(v101 - 1, v100));
  if (v101)
  {
LABEL_125:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
  std::__shared_weak_count::__release_weak(v99);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_126:
    operator delete(*(void **)__dst);
LABEL_127:
  strcpy(__dst, "W'2%429#\b%23\"9369#\b'%8=24#>89$");
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)"69#\b'%8=24#>89$", v96, v97, v98);
  v103 = v102;
  v104 = strlen(v102);
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v105 = v104;
  if (v104 >= 0x17)
  {
    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v107 = v104 | 7;
    v108 = v107 + 1;
    v106 = operator new(v107 + 1);
    __p[0].i64[1] = v105;
    __p[1].i64[0] = v108 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v106;
  }
  else
  {
    __p[1].i8[7] = v104;
    v106 = __p;
    if (!v104)
      goto LABEL_135;
  }
  memmove(v106, v103, v105);
LABEL_135:
  *((_BYTE *)v106 + v105) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 80);
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_139;
  v113 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (v114)
  {
LABEL_139:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
  std::__shared_weak_count::__release_weak(v112);
  if (__p[1].i8[7] < 0)
LABEL_140:
    operator delete((void *)__p[0].i64[0]);
LABEL_141:
  *(_OWORD *)__dst = xmmword_239F12A08;
  sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12A08 + 9), v109, v110, v111);
  v116 = v115;
  v117 = strlen(v115);
  if (v117 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v118 = v117;
  if (v117 >= 0x17)
  {
    v120 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v117 | 7) != 0x17)
      v120 = v117 | 7;
    v121 = v120 + 1;
    v119 = operator new(v120 + 1);
    __p[0].i64[1] = v118;
    __p[1].i64[0] = v121 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v119;
  }
  else
  {
    __p[1].i8[7] = v117;
    v119 = __p;
    if (!v117)
      goto LABEL_149;
  }
  memmove(v119, v116, v118);
LABEL_149:
  *((_BYTE *)v119 + v118) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 88);
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_153;
  v126 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (v127)
  {
LABEL_153:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
  std::__shared_weak_count::__release_weak(v125);
  if (__p[1].i8[7] < 0)
LABEL_154:
    operator delete((void *)__p[0].i64[0]);
LABEL_155:
  strcpy(__p[0].i8, ":W_[TeNH[YQIeJ_HeSW[]_");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)":W_[TeNH[YQIeJ_HeSW[]_", v122, v123, v124);
  v129 = v128;
  v130 = strlen(v128);
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v131 = v130;
  if (v130 >= 0x17)
  {
    v133 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v133 = v130 | 7;
    v134 = v133 + 1;
    v132 = operator new(v133 + 1);
    *(_QWORD *)&__dst[8] = v131;
    *(_QWORD *)&__dst[16] = v134 | 0x8000000000000000;
    *(_QWORD *)__dst = v132;
  }
  else
  {
    __dst[23] = v130;
    v132 = __dst;
    if (!v130)
      goto LABEL_163;
  }
  memmove(v132, v129, v131);
LABEL_163:
  v132[v131] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 96);
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_167;
  v139 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v140 = __ldaxr(v139);
  while (__stlxr(v140 - 1, v139));
  if (v140)
  {
LABEL_167:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_168;
  }
  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
  std::__shared_weak_count::__release_weak(v138);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_168:
    operator delete(*(void **)__dst);
LABEL_169:
  __p[0] = (int8x16_t)xmmword_239F12A38;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 4740167;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F12A38, v135, v136, v137);
  v142 = v141;
  v143 = strlen(v141);
  if (v143 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v144 = v143;
  if (v143 >= 0x17)
  {
    v146 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v143 | 7) != 0x17)
      v146 = v143 | 7;
    v147 = v146 + 1;
    v145 = operator new(v146 + 1);
    *(_QWORD *)&__dst[8] = v144;
    *(_QWORD *)&__dst[16] = v147 | 0x8000000000000000;
    *(_QWORD *)__dst = v145;
  }
  else
  {
    __dst[23] = v143;
    v145 = __dst;
    if (!v143)
      goto LABEL_177;
  }
  memmove(v145, v142, v144);
LABEL_177:
  v145[v144] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 104);
  v151 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_181;
  v152 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v153 = __ldaxr(v152);
  while (__stlxr(v153 - 1, v152));
  if (v153)
  {
LABEL_181:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_182;
  }
  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
  std::__shared_weak_count::__release_weak(v151);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_182:
    operator delete(*(void **)__dst);
LABEL_183:
  strcpy(__p[0].i8, "/BJNAp]J_]@EpJ]]@]");
  sub_23958E450((uint64_t)__p, *(int32x4_t *)"/BJNAp]J_]@EpJ]]@]", v148, v149, v150);
  v155 = v154;
  v156 = strlen(v154);
  if (v156 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v157 = v156;
  if (v156 >= 0x17)
  {
    v159 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v156 | 7) != 0x17)
      v159 = v156 | 7;
    v160 = v159 + 1;
    v158 = operator new(v159 + 1);
    *(_QWORD *)&__dst[8] = v157;
    *(_QWORD *)&__dst[16] = v160 | 0x8000000000000000;
    *(_QWORD *)__dst = v158;
  }
  else
  {
    __dst[23] = v156;
    v158 = __dst;
    if (!v156)
      goto LABEL_191;
  }
  memmove(v158, v155, v157);
LABEL_191:
  v158[v157] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 112);
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_195;
  v165 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v166 = __ldaxr(v165);
  while (__stlxr(v166 - 1, v165));
  if (v166)
  {
LABEL_195:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_196;
  }
  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
  std::__shared_weak_count::__release_weak(v164);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_196:
    operator delete(*(void **)__dst);
LABEL_197:
  __p[0] = (int8x16_t)xmmword_239F12A5E;
  *(uint64_t *)((char *)&__p[0].i64[1] + 5) = 0x6B766B6B7C4673;
  sub_2396EFB50((uint64_t)__p, (int32x4_t)xmmword_239F12A5E, v161, v162, v163);
  v168 = v167;
  v169 = strlen(v167);
  if (v169 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v170 = v169;
  if (v169 >= 0x17)
  {
    v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17)
      v172 = v169 | 7;
    v173 = v172 + 1;
    v171 = operator new(v172 + 1);
    *(_QWORD *)&__dst[8] = v170;
    *(_QWORD *)&__dst[16] = v173 | 0x8000000000000000;
    *(_QWORD *)__dst = v171;
  }
  else
  {
    __dst[23] = v169;
    v171 = __dst;
    if (!v169)
      goto LABEL_205;
  }
  memmove(v171, v168, v170);
LABEL_205:
  v171[v170] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BD723C(a1, (const void *)v676, a2 + 120);
  v177 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_209;
  v178 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (v179)
  {
LABEL_209:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_210;
  }
  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
  std::__shared_weak_count::__release_weak(v177);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_210:
    operator delete(*(void **)__dst);
LABEL_211:
  strcpy(__p[0].i8, "5XPQ\\T[jGPEGZ_jPGGZG");
  sub_2396EFB50((uint64_t)__p, *(int32x4_t *)"5XPQ\\T[jGPEGZ_jPGGZG", v174, v175, v176);
  v181 = v180;
  v182 = strlen(v180);
  if (v182 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v183 = v182;
  if (v182 >= 0x17)
  {
    v185 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v182 | 7) != 0x17)
      v185 = v182 | 7;
    v186 = v185 + 1;
    v184 = operator new(v185 + 1);
    *(_QWORD *)&__dst[8] = v183;
    *(_QWORD *)&__dst[16] = v186 | 0x8000000000000000;
    *(_QWORD *)__dst = v184;
  }
  else
  {
    __dst[23] = v182;
    v184 = __dst;
    if (!v182)
      goto LABEL_219;
  }
  memmove(v184, v181, v183);
LABEL_219:
  v184[v183] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 136);
  v187 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_223;
  v188 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v189 = __ldaxr(v188);
  while (__stlxr(v189 - 1, v188));
  if (v189)
  {
LABEL_223:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_225;
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
  std::__shared_weak_count::__release_weak(v187);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_224:
    operator delete(*(void **)__dst);
LABEL_225:
  __p[0] = (int8x16_t)xmmword_239F12A88;
  __p[1].i8[0] = 0;
  sub_2396EFA24((uint64_t)__p);
  v191 = v190;
  v192 = strlen(v190);
  if (v192 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v193 = v192;
  if (v192 >= 0x17)
  {
    v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17)
      v195 = v192 | 7;
    v196 = v195 + 1;
    v194 = operator new(v195 + 1);
    *(_QWORD *)&__dst[8] = v193;
    *(_QWORD *)&__dst[16] = v196 | 0x8000000000000000;
    *(_QWORD *)__dst = v194;
  }
  else
  {
    __dst[23] = v192;
    v194 = __dst;
    if (!v192)
      goto LABEL_233;
  }
  memmove(v194, v191, v193);
LABEL_233:
  v194[v193] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 144);
  v200 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_237;
  v201 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v202 = __ldaxr(v201);
  while (__stlxr(v202 - 1, v201));
  if (v202)
  {
LABEL_237:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_239;
    goto LABEL_238;
  }
  ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
  std::__shared_weak_count::__release_weak(v200);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_238:
    operator delete(*(void **)__dst);
LABEL_239:
  strcpy(__dst, "0]UQ^o@_CUoQ\\YW^]U^DoUBB_B");
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)"Q\\YW^]U^DoUBB_B", v197, v198, v199);
  v204 = v203;
  v205 = strlen(v203);
  if (v205 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v206 = v205;
  if (v205 >= 0x17)
  {
    v208 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v205 | 7) != 0x17)
      v208 = v205 | 7;
    v209 = v208 + 1;
    v207 = operator new(v208 + 1);
    __p[0].i64[1] = v206;
    __p[1].i64[0] = v209 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v207;
  }
  else
  {
    __p[1].i8[7] = v205;
    v207 = __p;
    if (!v205)
      goto LABEL_247;
  }
  memmove(v207, v204, v206);
LABEL_247:
  *((_BYTE *)v207 + v206) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 152);
  v213 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_251;
  v214 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (v215)
  {
LABEL_251:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_253;
    goto LABEL_252;
  }
  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
  std::__shared_weak_count::__release_weak(v213);
  if (__p[1].i8[7] < 0)
LABEL_252:
    operator delete((void *)__p[0].i64[0]);
LABEL_253:
  strcpy(__dst, "2_WV[S\\mB]AWmS^[U\\_W\\FmW@@]@");
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)"S^[U\\_W\\FmW@@]@", v210, v211, v212);
  v217 = v216;
  v218 = strlen(v216);
  if (v218 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v219 = v218;
  if (v218 >= 0x17)
  {
    v221 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v218 | 7) != 0x17)
      v221 = v218 | 7;
    v222 = v221 + 1;
    v220 = operator new(v221 + 1);
    __p[0].i64[1] = v219;
    __p[1].i64[0] = v222 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v220;
  }
  else
  {
    __p[1].i8[7] = v218;
    v220 = __p;
    if (!v218)
      goto LABEL_261;
  }
  memmove(v220, v217, v219);
LABEL_261:
  *((_BYTE *)v220 + v219) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 160);
  v226 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_265;
  v227 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v228 = __ldaxr(v227);
  while (__stlxr(v228 - 1, v227));
  if (v228)
  {
LABEL_265:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_267;
    goto LABEL_266;
  }
  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
  std::__shared_weak_count::__release_weak(v226);
  if (__p[1].i8[7] < 0)
LABEL_266:
    operator delete((void *)__p[0].i64[0]);
LABEL_267:
  __p[0] = (int8x16_t)xmmword_239F12AD1;
  *(uint64_t *)((char *)&__p[0].i64[1] + 5) = 0xE181409140B1CLL;
  sub_2396EFB50((uint64_t)__p, (int32x4_t)xmmword_239F12AD1, v223, v224, v225);
  v230 = v229;
  v231 = strlen(v229);
  if (v231 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v232 = v231;
  if (v231 >= 0x17)
  {
    v234 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v231 | 7) != 0x17)
      v234 = v231 | 7;
    v235 = v234 + 1;
    v233 = operator new(v234 + 1);
    *(_QWORD *)&__dst[8] = v232;
    *(_QWORD *)&__dst[16] = v235 | 0x8000000000000000;
    *(_QWORD *)__dst = v233;
  }
  else
  {
    __dst[23] = v231;
    v233 = __dst;
    if (!v231)
      goto LABEL_275;
  }
  memmove(v233, v230, v232);
LABEL_275:
  v233[v232] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 216);
  v239 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_279;
  v240 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (v241)
  {
LABEL_279:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_281;
    goto LABEL_280;
  }
  ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
  std::__shared_weak_count::__release_weak(v239);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_280:
    operator delete(*(void **)__dst);
LABEL_281:
  *(_OWORD *)__dst = xmmword_239F12AE6;
  *(_OWORD *)&__dst[14] = *(__int128 *)((char *)&xmmword_239F12AE6 + 14);
  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12AE6 + 14), v236, v237, v238);
  v243 = v242;
  v244 = strlen(v242);
  if (v244 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v245 = v244;
  if (v244 >= 0x17)
  {
    v247 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v244 | 7) != 0x17)
      v247 = v244 | 7;
    v248 = v247 + 1;
    v246 = operator new(v247 + 1);
    __p[0].i64[1] = v245;
    __p[1].i64[0] = v248 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v246;
  }
  else
  {
    __p[1].i8[7] = v244;
    v246 = __p;
    if (!v244)
      goto LABEL_289;
  }
  memmove(v246, v243, v245);
LABEL_289:
  *((_BYTE *)v246 + v245) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 200);
  v251 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_293;
  v252 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v253 = __ldaxr(v252);
  while (__stlxr(v253 - 1, v252));
  if (v253)
  {
LABEL_293:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
  ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
  std::__shared_weak_count::__release_weak(v251);
  if (__p[1].i8[7] < 0)
LABEL_294:
    operator delete((void *)__p[0].i64[0]);
LABEL_295:
  *(_OWORD *)__dst = xmmword_239F12B04;
  *(int8x16_t *)&__dst[16] = xmmword_239F12B14;
  sub_2396F06F0((uint64_t)__dst, (int32x4_t)xmmword_239F12B04, xmmword_239F12B14, v249, v250);
  v255 = v254;
  v256 = strlen(v254);
  if (v256 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v257 = v256;
  if (v256 >= 0x17)
  {
    v259 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v256 | 7) != 0x17)
      v259 = v256 | 7;
    v260 = v259 + 1;
    v258 = operator new(v259 + 1);
    __p[0].i64[1] = v257;
    __p[1].i64[0] = v260 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v258;
  }
  else
  {
    __p[1].i8[7] = v256;
    v258 = __p;
    if (!v256)
      goto LABEL_303;
  }
  memmove(v258, v255, v257);
LABEL_303:
  *((_BYTE *)v258 + v257) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 208);
  v264 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_307;
  v265 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v266 = __ldaxr(v265);
  while (__stlxr(v266 - 1, v265));
  if (v266)
  {
LABEL_307:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_309;
    goto LABEL_308;
  }
  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
  std::__shared_weak_count::__release_weak(v264);
  if (__p[1].i8[7] < 0)
LABEL_308:
    operator delete((void *)__p[0].i64[0]);
LABEL_309:
  strcpy(__dst, "3]F^lTAREZGJlR_ZT]^V]GlZ]_ZVA@");
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)"ZT]^V]GlZ]_ZVA@", v261, v262, v263);
  v268 = v267;
  v269 = strlen(v267);
  if (v269 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v270 = v269;
  if (v269 >= 0x17)
  {
    v272 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v269 | 7) != 0x17)
      v272 = v269 | 7;
    v273 = v272 + 1;
    v271 = operator new(v272 + 1);
    __p[0].i64[1] = v270;
    __p[1].i64[0] = v273 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v271;
  }
  else
  {
    __p[1].i8[7] = v269;
    v271 = __p;
    if (!v269)
      goto LABEL_317;
  }
  memmove(v271, v268, v270);
LABEL_317:
  *((_BYTE *)v271 + v270) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 224);
  v277 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_321;
  v278 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v279 = __ldaxr(v278);
  while (__stlxr(v279 - 1, v278));
  if (v279)
  {
LABEL_321:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_323;
    goto LABEL_322;
  }
  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
  std::__shared_weak_count::__release_weak(v277);
  if (__p[1].i8[7] < 0)
LABEL_322:
    operator delete((void *)__p[0].i64[0]);
LABEL_323:
  *(_OWORD *)__dst = xmmword_239F12B43;
  *(_OWORD *)&__dst[10] = *(__int128 *)((char *)&xmmword_239F12B43 + 10);
  sub_239A93C04(__dst, *(int32x4_t *)((char *)&xmmword_239F12B43 + 10), v274, v275, v276);
  v281 = v280;
  v282 = strlen(v280);
  if (v282 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v283 = v282;
  if (v282 >= 0x17)
  {
    v285 = (v282 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v282 | 7) != 0x17)
      v285 = v282 | 7;
    v286 = v285 + 1;
    v284 = operator new(v285 + 1);
    __p[0].i64[1] = v283;
    __p[1].i64[0] = v286 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v284;
  }
  else
  {
    __p[1].i8[7] = v282;
    v284 = __p;
    if (!v282)
      goto LABEL_331;
  }
  memmove(v284, v281, v283);
LABEL_331:
  *((_BYTE *)v284 + v283) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 232);
  v290 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_335;
  v291 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v292 = __ldaxr(v291);
  while (__stlxr(v292 - 1, v291));
  if (v292)
  {
LABEL_335:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_337;
    goto LABEL_336;
  }
  ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
  std::__shared_weak_count::__release_weak(v290);
  if (__p[1].i8[7] < 0)
LABEL_336:
    operator delete((void *)__p[0].i64[0]);
LABEL_337:
  *(_OWORD *)__dst = xmmword_239F12B5D;
  *(_OWORD *)&__dst[13] = *(__int128 *)((char *)&xmmword_239F12B5D + 13);
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12B5D + 13), v287, v288, v289);
  v294 = v293;
  v295 = strlen(v293);
  if (v295 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v296 = v295;
  if (v295 >= 0x17)
  {
    v298 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v295 | 7) != 0x17)
      v298 = v295 | 7;
    v299 = v298 + 1;
    v297 = operator new(v298 + 1);
    __p[0].i64[1] = v296;
    __p[1].i64[0] = v299 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v297;
  }
  else
  {
    __p[1].i8[7] = v295;
    v297 = __p;
    if (!v295)
      goto LABEL_345;
  }
  memmove(v297, v294, v296);
LABEL_345:
  *((_BYTE *)v297 + v296) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2397373B0(a1, (const void *)v676, a2 + 240);
  v303 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_349;
  v304 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v305 = __ldaxr(v304);
  while (__stlxr(v305 - 1, v304));
  if (v305)
  {
LABEL_349:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_351;
    goto LABEL_350;
  }
  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
  std::__shared_weak_count::__release_weak(v303);
  if (__p[1].i8[7] < 0)
LABEL_350:
    operator delete((void *)__p[0].i64[0]);
LABEL_351:
  *(_OWORD *)__dst = xmmword_239F12B7A;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F12B8A;
  *(_DWORD *)&__dst[32] = 1246471;
  sub_2396F01D4(__dst, (int16x8_t)xmmword_239F12B7A, dbl_239F12B8A[0], v300, v301, v302);
  v307 = v306;
  v308 = strlen(v306);
  if (v308 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v309 = v308;
  if (v308 >= 0x17)
  {
    v311 = (v308 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v308 | 7) != 0x17)
      v311 = v308 | 7;
    v312 = v311 + 1;
    v310 = operator new(v311 + 1);
    __p[0].i64[1] = v309;
    __p[1].i64[0] = v312 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v310;
  }
  else
  {
    __p[1].i8[7] = v308;
    v310 = __p;
    if (!v308)
      goto LABEL_359;
  }
  memmove(v310, v307, v309);
LABEL_359:
  *((_BYTE *)v310 + v309) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 168);
  v315 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_363;
  v316 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v317 = __ldaxr(v316);
  while (__stlxr(v317 - 1, v316));
  if (v317)
  {
LABEL_363:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_365;
    goto LABEL_364;
  }
  ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
  std::__shared_weak_count::__release_weak(v315);
  if (__p[1].i8[7] < 0)
LABEL_364:
    operator delete((void *)__p[0].i64[0]);
LABEL_365:
  *(_OWORD *)__dst = xmmword_239F12B9E;
  *(int16x8_t *)&__dst[16] = xmmword_239F12BAE;
  *(_QWORD *)&__dst[31] = 0x10061B06070D0ALL;
  sub_2396F0804(__dst, 2.24019848e-236, xmmword_239F12BAE, v313, v314);
  v319 = v318;
  v320 = strlen(v318);
  if (v320 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v321 = v320;
  if (v320 >= 0x17)
  {
    v323 = (v320 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v320 | 7) != 0x17)
      v323 = v320 | 7;
    v324 = v323 + 1;
    v322 = operator new(v323 + 1);
    __p[0].i64[1] = v321;
    __p[1].i64[0] = v324 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v322;
  }
  else
  {
    __p[1].i8[7] = v320;
    v322 = __p;
    if (!v320)
      goto LABEL_373;
  }
  memmove(v322, v319, v321);
LABEL_373:
  *((_BYTE *)v322 + v321) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4494(a1, (const void *)v676, (uint64_t *)(a2 + 176));
  v328 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_377;
  v329 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v330 = __ldaxr(v329);
  while (__stlxr(v330 - 1, v329));
  if (v330)
  {
LABEL_377:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_379;
    goto LABEL_378;
  }
  ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
  std::__shared_weak_count::__release_weak(v328);
  if (__p[1].i8[7] < 0)
LABEL_378:
    operator delete((void *)__p[0].i64[0]);
LABEL_379:
  *(_OWORD *)__dst = xmmword_239F12BC5;
  strcpy(&__dst[9], "jYdgYorctgroihu");
  sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12BC5 + 9), v325, v326, v327);
  v332 = v331;
  v333 = strlen(v331);
  if (v333 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v334 = v333;
  if (v333 >= 0x17)
  {
    v336 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v333 | 7) != 0x17)
      v336 = v333 | 7;
    v337 = v336 + 1;
    v335 = operator new(v336 + 1);
    __p[0].i64[1] = v334;
    __p[1].i64[0] = v337 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v335;
  }
  else
  {
    __p[1].i8[7] = v333;
    v335 = __p;
    if (!v333)
      goto LABEL_387;
  }
  memmove(v335, v332, v334);
LABEL_387:
  *((_BYTE *)v335 + v334) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 248);
  v341 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_391;
  v342 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v343 = __ldaxr(v342);
  while (__stlxr(v343 - 1, v342));
  if (v343)
  {
LABEL_391:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_393;
    goto LABEL_392;
  }
  ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
  std::__shared_weak_count::__release_weak(v341);
  if (__p[1].i8[7] < 0)
LABEL_392:
    operator delete((void *)__p[0].i64[0]);
LABEL_393:
  *(_OWORD *)__dst = xmmword_239F12BDE;
  *(_OWORD *)&__dst[12] = *(__int128 *)((char *)&xmmword_239F12BDE + 12);
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12BDE + 12), v338, v339, v340);
  v345 = v344;
  v346 = strlen(v344);
  if (v346 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v347 = v346;
  if (v346 >= 0x17)
  {
    v349 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v346 | 7) != 0x17)
      v349 = v346 | 7;
    v350 = v349 + 1;
    v348 = operator new(v349 + 1);
    __p[0].i64[1] = v347;
    __p[1].i64[0] = v350 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v348;
  }
  else
  {
    __p[1].i8[7] = v346;
    v348 = __p;
    if (!v346)
      goto LABEL_401;
  }
  memmove(v348, v345, v347);
LABEL_401:
  *((_BYTE *)v348 + v347) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 256);
  v354 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_405;
  v355 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v356 = __ldaxr(v355);
  while (__stlxr(v356 - 1, v355));
  if (v356)
  {
LABEL_405:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_407;
    goto LABEL_406;
  }
  ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
  std::__shared_weak_count::__release_weak(v354);
  if (__p[1].i8[7] < 0)
LABEL_406:
    operator delete((void *)__p[0].i64[0]);
LABEL_407:
  __p[0] = (int8x16_t)xmmword_239F12BFA;
  __p[1].i64[0] = 0x796465637E6B78;
  sub_2396F1A4C((uint64_t)__p, (int32x4_t)xmmword_239F12BFA, v351, v352, v353);
  v358 = v357;
  v359 = strlen(v357);
  if (v359 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v360 = v359;
  if (v359 >= 0x17)
  {
    v362 = (v359 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v359 | 7) != 0x17)
      v362 = v359 | 7;
    v363 = v362 + 1;
    v361 = operator new(v362 + 1);
    *(_QWORD *)&__dst[8] = v360;
    *(_QWORD *)&__dst[16] = v363 | 0x8000000000000000;
    *(_QWORD *)__dst = v361;
  }
  else
  {
    __dst[23] = v359;
    v361 = __dst;
    if (!v359)
      goto LABEL_415;
  }
  memmove(v361, v358, v360);
LABEL_415:
  v361[v360] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 264);
  v367 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_419;
  v368 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v369 = __ldaxr(v368);
  while (__stlxr(v369 - 1, v368));
  if (v369)
  {
LABEL_419:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_421;
    goto LABEL_420;
  }
  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
  std::__shared_weak_count::__release_weak(v367);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_420:
    operator delete(*(void **)__dst);
LABEL_421:
  *(_OWORD *)__dst = xmmword_239F12C12;
  *(_OWORD *)&__dst[9] = *(__int128 *)((char *)&xmmword_239F12C12 + 9);
  sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12C12 + 9), v364, v365, v366);
  v371 = v370;
  v372 = strlen(v370);
  if (v372 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v373 = v372;
  if (v372 >= 0x17)
  {
    v375 = (v372 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v372 | 7) != 0x17)
      v375 = v372 | 7;
    v376 = v375 + 1;
    v374 = operator new(v375 + 1);
    __p[0].i64[1] = v373;
    __p[1].i64[0] = v376 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v374;
  }
  else
  {
    __p[1].i8[7] = v372;
    v374 = __p;
    if (!v372)
      goto LABEL_429;
  }
  memmove(v374, v371, v373);
LABEL_429:
  *((_BYTE *)v374 + v373) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 272);
  v380 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_433;
  v381 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v382 = __ldaxr(v381);
  while (__stlxr(v382 - 1, v381));
  if (v382)
  {
LABEL_433:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_435;
    goto LABEL_434;
  }
  ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
  std::__shared_weak_count::__release_weak(v380);
  if (__p[1].i8[7] < 0)
LABEL_434:
    operator delete((void *)__p[0].i64[0]);
LABEL_435:
  __p[0] = (int8x16_t)xmmword_239F12C2B;
  *(uint64_t *)((char *)&__p[0].i64[1] + 7) = 0x7D6B766B6A6067;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F12C2B, v377, v378, v379);
  v384 = v383;
  v385 = strlen(v383);
  if (v385 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v386 = v385;
  if (v385 >= 0x17)
  {
    v388 = (v385 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v385 | 7) != 0x17)
      v388 = v385 | 7;
    v389 = v388 + 1;
    v387 = operator new(v388 + 1);
    *(_QWORD *)&__dst[8] = v386;
    *(_QWORD *)&__dst[16] = v389 | 0x8000000000000000;
    *(_QWORD *)__dst = v387;
  }
  else
  {
    __dst[23] = v385;
    v387 = __dst;
    if (!v385)
      goto LABEL_443;
  }
  memmove(v387, v384, v386);
LABEL_443:
  v387[v386] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB4494(a1, (const void *)v676, (uint64_t *)(a2 + 280));
  v393 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_447;
  v394 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v395 = __ldaxr(v394);
  while (__stlxr(v395 - 1, v394));
  if (v395)
  {
LABEL_447:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_449;
    goto LABEL_448;
  }
  ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
  std::__shared_weak_count::__release_weak(v393);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_448:
    operator delete(*(void **)__dst);
LABEL_449:
  *(_OWORD *)__dst = xmmword_239F12C42;
  *(_OWORD *)&__dst[16] = *(_OWORD *)dbl_239F12C52;
  strcpy(&__dst[32], "siBkxot{t~|itrs");
  sub_2396F0480(__dst, 4.86205308e286, dbl_239F12C52[0], v390, v391, v392);
  v397 = v396;
  v398 = strlen(v396);
  if (v398 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v399 = v398;
  if (v398 >= 0x17)
  {
    v401 = (v398 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v398 | 7) != 0x17)
      v401 = v398 | 7;
    v402 = v401 + 1;
    v400 = operator new(v401 + 1);
    __p[0].i64[1] = v399;
    __p[1].i64[0] = v402 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v400;
  }
  else
  {
    __p[1].i8[7] = v398;
    v400 = __p;
    if (!v398)
      goto LABEL_457;
  }
  memmove(v400, v397, v399);
LABEL_457:
  *((_BYTE *)v400 + v399) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BD7618(a1, (const void *)v676, (_QWORD *)(a2 + 304));
  v405 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_461;
  v406 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v407 = __ldaxr(v406);
  while (__stlxr(v407 - 1, v406));
  if (v407)
  {
LABEL_461:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_463;
    goto LABEL_462;
  }
  ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
  std::__shared_weak_count::__release_weak(v405);
  if (__p[1].i8[7] < 0)
LABEL_462:
    operator delete((void *)__p[0].i64[0]);
LABEL_463:
  strcpy(__dst, "7S^DVU[RSh^ZVPRh^YSRORDhUNhGXDRhARE^Q^TVC^XY");
  sub_2396F0DB0(__dst, *(double *)"DRhARE^Q^TVC^XY", *(double *)"^YSRORDhUNhGXDRhARE^Q^TVC^XY", v403, v404);
  v409 = v408;
  v410 = strlen(v408);
  if (v410 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v411 = v410;
  if (v410 >= 0x17)
  {
    v413 = (v410 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v410 | 7) != 0x17)
      v413 = v410 | 7;
    v414 = v413 + 1;
    v412 = operator new(v413 + 1);
    __p[0].i64[1] = v411;
    __p[1].i64[0] = v414 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v412;
  }
  else
  {
    __p[1].i8[7] = v410;
    v412 = __p;
    if (!v410)
      goto LABEL_471;
  }
  memmove(v412, v409, v411);
LABEL_471:
  *((_BYTE *)v412 + v411) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BD7618(a1, (const void *)v676, (_QWORD *)(a2 + 328));
  v415 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_475;
  v416 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v417 = __ldaxr(v416);
  while (__stlxr(v417 - 1, v416));
  if (v417)
  {
LABEL_475:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_477;
    goto LABEL_476;
  }
  ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
  std::__shared_weak_count::__release_weak(v415);
  if (__p[1].i8[7] < 0)
LABEL_476:
    operator delete((void *)__p[0].i64[0]);
LABEL_477:
  *(_QWORD *)&v676 = 0x6D6D7B7D517D670ELL;
  BYTE14(v676) = 0;
  WORD6(v676) = 25211;
  DWORD2(v676) = 1753054571;
  sub_23958E5E0((uint64_t)&v676);
  v419 = v418;
  v420 = strlen(v418);
  if (v420 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v421 = v420;
  if (v420 >= 0x17)
  {
    v423 = (v420 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v420 | 7) != 0x17)
      v423 = v420 | 7;
    v424 = v423 + 1;
    v422 = operator new(v423 + 1);
    *(_QWORD *)&__dst[8] = v421;
    *(_QWORD *)&__dst[16] = v424 | 0x8000000000000000;
    *(_QWORD *)__dst = v422;
  }
  else
  {
    __dst[23] = v420;
    v422 = __dst;
    if (!v420)
      goto LABEL_485;
  }
  memmove(v422, v419, v421);
LABEL_485:
  v422[v421] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC(a1, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 352));
  v428 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_489;
  v429 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v430 = __ldaxr(v429);
  while (__stlxr(v430 - 1, v429));
  if (v430)
  {
LABEL_489:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_491;
    goto LABEL_490;
  }
  ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
  std::__shared_weak_count::__release_weak(v428);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_490:
    operator delete(*(void **)__dst);
LABEL_491:
  *(_OWORD *)__dst = xmmword_239F12C9F;
  *(_OWORD *)&__dst[14] = *(__int128 *)((char *)&xmmword_239F12C9F + 14);
  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12C9F + 14), v425, v426, v427);
  v432 = v431;
  v433 = strlen(v431);
  if (v433 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v434 = v433;
  if (v433 >= 0x17)
  {
    v436 = (v433 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v433 | 7) != 0x17)
      v436 = v433 | 7;
    v437 = v436 + 1;
    v435 = operator new(v436 + 1);
    __p[0].i64[1] = v434;
    __p[1].i64[0] = v437 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v435;
  }
  else
  {
    __p[1].i8[7] = v433;
    v435 = __p;
    if (!v433)
      goto LABEL_499;
  }
  memmove(v435, v432, v434);
LABEL_499:
  *((_BYTE *)v435 + v434) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2396B4EAC(a1, (const void *)v676, (_BYTE *)(a2 + 353));
  v440 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_503;
  v441 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v442 = __ldaxr(v441);
  while (__stlxr(v442 - 1, v441));
  if (v442)
  {
LABEL_503:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_505;
    goto LABEL_504;
  }
  ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
  std::__shared_weak_count::__release_weak(v440);
  if (__p[1].i8[7] < 0)
LABEL_504:
    operator delete((void *)__p[0].i64[0]);
LABEL_505:
  *(_OWORD *)__dst = xmmword_239F12CBD;
  *(int8x16_t *)&__dst[16] = xmmword_239F12CCD;
  __dst[32] = 0;
  sub_2396EFE38((uint64_t)__dst, (int32x4_t)xmmword_239F12CBD, xmmword_239F12CCD, v438, v439);
  v444 = v443;
  v445 = strlen(v443);
  if (v445 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v446 = v445;
  if (v445 >= 0x17)
  {
    v448 = (v445 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v445 | 7) != 0x17)
      v448 = v445 | 7;
    v449 = v448 + 1;
    v447 = operator new(v448 + 1);
    __p[0].i64[1] = v446;
    __p[1].i64[0] = v449 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v447;
  }
  else
  {
    __p[1].i8[7] = v445;
    v447 = __p;
    if (!v445)
      goto LABEL_513;
  }
  memmove(v447, v444, v446);
LABEL_513:
  *((_BYTE *)v447 + v446) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2396B4EAC(a1, (const void *)v676, (_BYTE *)(a2 + 354));
  v453 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_517;
  v454 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v455 = __ldaxr(v454);
  while (__stlxr(v455 - 1, v454));
  if (v455)
  {
LABEL_517:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_519;
    goto LABEL_518;
  }
  ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
  std::__shared_weak_count::__release_weak(v453);
  if (__p[1].i8[7] < 0)
LABEL_518:
    operator delete((void *)__p[0].i64[0]);
LABEL_519:
  *(_OWORD *)__dst = xmmword_239F12CDE;
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12CDE + 15), v450, v451, v452);
  v457 = v456;
  v458 = strlen(v456);
  if (v458 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v459 = v458;
  if (v458 >= 0x17)
  {
    v461 = (v458 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v458 | 7) != 0x17)
      v461 = v458 | 7;
    v462 = v461 + 1;
    v460 = operator new(v461 + 1);
    __p[0].i64[1] = v459;
    __p[1].i64[0] = v462 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v460;
  }
  else
  {
    __p[1].i8[7] = v458;
    v460 = __p;
    if (!v458)
      goto LABEL_527;
  }
  memmove(v460, v457, v459);
LABEL_527:
  *((_BYTE *)v460 + v459) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_2396B4EAC(a1, (const void *)v676, (_BYTE *)(a2 + 355));
  v466 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_531;
  v467 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v468 = __ldaxr(v467);
  while (__stlxr(v468 - 1, v467));
  if (v468)
  {
LABEL_531:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_533;
    goto LABEL_532;
  }
  ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
  std::__shared_weak_count::__release_weak(v466);
  if (__p[1].i8[7] < 0)
LABEL_532:
    operator delete((void *)__p[0].i64[0]);
LABEL_533:
  strcpy(__p[0].i8, "!HR~CCNY~DRUHL@UDE");
  sub_23958E450((uint64_t)__p, *(int32x4_t *)"!HR~CCNY~DRUHL@UDE", v463, v464, v465);
  v470 = v469;
  v471 = strlen(v469);
  if (v471 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v472 = v471;
  if (v471 >= 0x17)
  {
    v474 = (v471 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v471 | 7) != 0x17)
      v474 = v471 | 7;
    v475 = v474 + 1;
    v473 = operator new(v474 + 1);
    *(_QWORD *)&__dst[8] = v472;
    *(_QWORD *)&__dst[16] = v475 | 0x8000000000000000;
    *(_QWORD *)__dst = v473;
  }
  else
  {
    __dst[23] = v471;
    v473 = __dst;
    if (!v471)
      goto LABEL_541;
  }
  memmove(v473, v470, v472);
LABEL_541:
  v473[v472] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_2396B4EAC(a1, (const void *)v676, (_BYTE *)(a2 + 356));
  v479 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_545;
  v480 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v481 = __ldaxr(v480);
  while (__stlxr(v481 - 1, v480));
  if (v481)
  {
LABEL_545:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_547;
    goto LABEL_546;
  }
  ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
  std::__shared_weak_count::__release_weak(v479);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_546:
    operator delete(*(void **)__dst);
LABEL_547:
  __p[0] = (int8x16_t)xmmword_239F12D10;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 2105639;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F12D10, v476, v477, v478);
  v483 = v482;
  v484 = strlen(v482);
  if (v484 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v485 = v484;
  if (v484 >= 0x17)
  {
    v487 = (v484 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v484 | 7) != 0x17)
      v487 = v484 | 7;
    v488 = v487 + 1;
    v486 = operator new(v487 + 1);
    *(_QWORD *)&__dst[8] = v485;
    *(_QWORD *)&__dst[16] = v488 | 0x8000000000000000;
    *(_QWORD *)__dst = v486;
  }
  else
  {
    __dst[23] = v484;
    v486 = __dst;
    if (!v484)
      goto LABEL_555;
  }
  memmove(v486, v483, v485);
LABEL_555:
  v486[v485] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  sub_239BB47DC(a1, (const void *)v676, a2 + 452);
  v489 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_559;
  v490 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v491 = __ldaxr(v490);
  while (__stlxr(v491 - 1, v490));
  if (v491)
  {
LABEL_559:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_561;
    goto LABEL_560;
  }
  ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
  std::__shared_weak_count::__release_weak(v489);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_560:
    operator delete(*(void **)__dst);
LABEL_561:
  value = (void *)0x596774636B676506;
  strcpy((char *)&v675, "kiroih");
  sub_23958E5E0((uint64_t)&value);
  v493 = v492;
  v494 = strlen(v492);
  if (v494 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v495 = v494;
  if (v494 >= 0x17)
  {
    v497 = (v494 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v494 | 7) != 0x17)
      v497 = v494 | 7;
    v498 = v497 + 1;
    v496 = operator new(v497 + 1);
    *(_QWORD *)&__dst[8] = v495;
    *(_QWORD *)&__dst[16] = v498 | 0x8000000000000000;
    *(_QWORD *)__dst = v496;
  }
  else
  {
    __dst[23] = v494;
    v496 = __dst;
    if (!v494)
      goto LABEL_569;
  }
  memmove(v496, v493, v495);
LABEL_569:
  v496[v495] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v676);
  v502 = (const void *)v676;
  v504 = *(const __CFDictionary **)a1;
  v503 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v503)
    goto LABEL_574;
  p_shared_owners = (unint64_t *)&v503->__shared_owners_;
  do
    v506 = __ldxr(p_shared_owners);
  while (__stxr(v506 + 1, p_shared_owners));
  do
    v507 = __ldaxr(p_shared_owners);
  while (__stlxr(v507 - 1, p_shared_owners));
  if (!v507)
  {
    ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
    std::__shared_weak_count::__release_weak(v503);
    if (!v504)
      goto LABEL_669;
  }
  else
  {
LABEL_574:
    if (!v504)
      goto LABEL_669;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, v502))
    goto LABEL_669;
  LOBYTE(v671[0]) = *(_BYTE *)(a2 + 357);
  sub_2396297BC(__p, v671);
  v508 = __p[0];
  if (__p[0].i64[1])
  {
    v509 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v510 = __ldxr(v509);
    while (__stxr(v510 + 1, v509));
    do
      v511 = __ldaxr(v509);
    while (__stlxr(v511 - 1, v509));
    if (!v511)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v508.i64[1] + 16))(v508.i64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v508.i64[1]);
      if (!v508.i64[0])
        goto LABEL_583;
      goto LABEL_582;
    }
  }
  if (v508.i64[0])
LABEL_582:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v502, (const void *)__p[0].i64[0]);
LABEL_583:
  v512 = (std::__shared_weak_count *)__p[0].i64[1];
  if (__p[0].i64[1])
  {
    v513 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v514 = __ldaxr(v513);
    while (__stlxr(v514 - 1, v513));
    if (!v514)
    {
      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
      std::__shared_weak_count::__release_weak(v512);
    }
  }
LABEL_669:
  v515 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_673;
  v516 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v517 = __ldaxr(v516);
  while (__stlxr(v517 - 1, v516));
  if (v517)
  {
LABEL_673:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_675;
    goto LABEL_674;
  }
  ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
  std::__shared_weak_count::__release_weak(v515);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_674:
    operator delete(*(void **)__dst);
LABEL_675:
  *(_OWORD *)__dst = xmmword_239F12D23;
  *(_OWORD *)&__dst[11] = *(__int128 *)((char *)&xmmword_239F12D23 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12D23 + 11), v499, v500, v501);
  v519 = v518;
  v520 = strlen(v518);
  if (v520 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v521 = v520;
  if (v520 >= 0x17)
  {
    v523 = (v520 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v520 | 7) != 0x17)
      v523 = v520 | 7;
    v524 = v523 + 1;
    v522 = operator new(v523 + 1);
    __p[0].i64[1] = v521;
    __p[1].i64[0] = v524 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v522;
  }
  else
  {
    __p[1].i8[7] = v520;
    v522 = __p;
    if (!v520)
      goto LABEL_683;
  }
  memmove(v522, v519, v521);
LABEL_683:
  *((_BYTE *)v522 + v521) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4A9C(a1, (const void *)v676, a2 + 360);
  v528 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_687;
  v529 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v530 = __ldaxr(v529);
  while (__stlxr(v530 - 1, v529));
  if (v530)
  {
LABEL_687:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_689;
    goto LABEL_688;
  }
  ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
  std::__shared_weak_count::__release_weak(v528);
  if (__p[1].i8[7] < 0)
LABEL_688:
    operator delete((void *)__p[0].i64[0]);
LABEL_689:
  strcpy(__dst, "\"ACOGPC}OMVKML}KLNKGP}KOCEG}KLFGZGQ");
  sub_2396F01D4(__dst, *(int16x8_t *)"\"ACOGPC}OMVKML}KLNKGP}KOCEG}KLFGZGQ", *(double *)"LNKGP}KOCEG}KLFGZGQ", v525, v526, v527);
  v532 = v531;
  v533 = strlen(v531);
  if (v533 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v534 = v533;
  if (v533 >= 0x17)
  {
    v536 = (v533 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v533 | 7) != 0x17)
      v536 = v533 | 7;
    v537 = v536 + 1;
    v535 = operator new(v536 + 1);
    __p[0].i64[1] = v534;
    __p[1].i64[0] = v537 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v535;
  }
  else
  {
    __p[1].i8[7] = v533;
    v535 = __p;
    if (!v533)
      goto LABEL_697;
  }
  memmove(v535, v532, v534);
LABEL_697:
  *((_BYTE *)v535 + v534) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB4494(a1, (const void *)v676, (uint64_t *)(a2 + 368));
  v541 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_701;
  v542 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v543 = __ldaxr(v542);
  while (__stlxr(v543 - 1, v542));
  if (v543)
  {
LABEL_701:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_703;
    goto LABEL_702;
  }
  ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
  std::__shared_weak_count::__release_weak(v541);
  if (__p[1].i8[7] < 0)
LABEL_702:
    operator delete((void *)__p[0].i64[0]);
LABEL_703:
  strcpy(__dst, "*IKGOXKuGE^CEDuZKXKGO^OXY");
  sub_239A93C04(__dst, *(int32x4_t *)"^CEDuZKXKGO^OXY", v538, v539, v540);
  v545 = v544;
  v546 = strlen(v544);
  if (v546 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v547 = v546;
  if (v546 >= 0x17)
  {
    v549 = (v546 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v546 | 7) != 0x17)
      v549 = v546 | 7;
    v550 = v549 + 1;
    v548 = operator new(v549 + 1);
    __p[0].i64[1] = v547;
    __p[1].i64[0] = v550 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v548;
  }
  else
  {
    __p[1].i8[7] = v546;
    v548 = __p;
    if (!v546)
      goto LABEL_711;
  }
  memmove(v548, v545, v547);
LABEL_711:
  *((_BYTE *)v548 + v547) = 0;
  sub_239629EF4((uint64_t)__p, &v669);
  v554 = v669;
  v556 = *(const __CFDictionary **)a1;
  v555 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v555)
    goto LABEL_716;
  v557 = (unint64_t *)&v555->__shared_owners_;
  do
    v558 = __ldxr(v557);
  while (__stxr(v558 + 1, v557));
  do
    v559 = __ldaxr(v557);
  while (__stlxr(v559 - 1, v557));
  if (!v559)
  {
    ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
    std::__shared_weak_count::__release_weak(v555);
    if (!v556)
      goto LABEL_860;
  }
  else
  {
LABEL_716:
    if (!v556)
      goto LABEL_860;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, v554))
    goto LABEL_860;
  sub_23962BDF8((std::__shared_weak_count_vtbl **)&v676);
  v560 = v676;
  if (*((_QWORD *)&v676 + 1))
  {
    v561 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
    do
      v562 = __ldxr(v561);
    while (__stxr(v562 + 1, v561));
    do
      v563 = __ldaxr(v561);
    while (__stlxr(v563 - 1, v561));
    if (!v563)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v560 + 1) + 16))(*((_QWORD *)&v560 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v560 + 1));
      if ((_QWORD)v560)
        goto LABEL_724;
LABEL_744:
      v570 = v671;
LABEL_745:
      *v570 = 0;
      v570[1] = 0;
      goto LABEL_843;
    }
  }
  if (!(_QWORD)v560)
    goto LABEL_744;
LABEL_724:
  sub_239629C3C(&value, a2 + 392);
  v565 = value;
  v564 = v675;
  if (v675)
  {
    v566 = (unint64_t *)&v675->__shared_owners_;
    do
      v567 = __ldxr(v566);
    while (__stxr(v567 + 1, v566));
    do
      v568 = __ldaxr(v566);
    while (__stlxr(v568 - 1, v566));
    if (!v568)
    {
      ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
      std::__shared_weak_count::__release_weak(v564);
    }
  }
  if (v565)
  {
    j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
    v569 = v675;
    if (!v675)
      goto LABEL_751;
  }
  else
  {
    v671[0] = 0;
    v671[1] = 0;
    v569 = v675;
    if (!v675)
      goto LABEL_751;
  }
  v571 = (unint64_t *)&v569->__shared_owners_;
  do
    v572 = __ldaxr(v571);
  while (__stlxr(v572 - 1, v571));
  if (!v572)
  {
    ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
    std::__shared_weak_count::__release_weak(v569);
  }
LABEL_751:
  if (!v565)
    goto LABEL_843;
  sub_239629C3C(&value, a2 + 400);
  v574 = value;
  v573 = v675;
  if (v675)
  {
    v575 = (unint64_t *)&v675->__shared_owners_;
    do
      v576 = __ldxr(v575);
    while (__stxr(v576 + 1, v575));
    do
      v577 = __ldaxr(v575);
    while (__stlxr(v577 - 1, v575));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
      std::__shared_weak_count::__release_weak(v573);
    }
  }
  if (v574)
  {
    j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
    v578 = v675;
    if (!v675)
      goto LABEL_766;
  }
  else
  {
    v671[0] = 0;
    v671[1] = 0;
    v578 = v675;
    if (!v675)
      goto LABEL_766;
  }
  v579 = (unint64_t *)&v578->__shared_owners_;
  do
    v580 = __ldaxr(v579);
  while (__stlxr(v580 - 1, v579));
  if (!v580)
  {
    ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
    std::__shared_weak_count::__release_weak(v578);
  }
LABEL_766:
  if (!v574)
    goto LABEL_843;
  sub_239629C3C(&value, a2 + 408);
  v582 = value;
  v581 = v675;
  if (v675)
  {
    v583 = (unint64_t *)&v675->__shared_owners_;
    do
      v584 = __ldxr(v583);
    while (__stxr(v584 + 1, v583));
    do
      v585 = __ldaxr(v583);
    while (__stlxr(v585 - 1, v583));
    if (!v585)
    {
      ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
      std::__shared_weak_count::__release_weak(v581);
    }
  }
  if (v582)
  {
    j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
    v586 = v675;
    if (!v675)
      goto LABEL_781;
  }
  else
  {
    v671[0] = 0;
    v671[1] = 0;
    v586 = v675;
    if (!v675)
      goto LABEL_781;
  }
  v587 = (unint64_t *)&v586->__shared_owners_;
  do
    v588 = __ldaxr(v587);
  while (__stlxr(v588 - 1, v587));
  if (!v588)
  {
    ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
    std::__shared_weak_count::__release_weak(v586);
  }
LABEL_781:
  if (v582)
  {
    sub_239629C3C(&value, a2 + 416);
    v590 = value;
    v589 = v675;
    if (v675)
    {
      v591 = (unint64_t *)&v675->__shared_owners_;
      do
        v592 = __ldxr(v591);
      while (__stxr(v592 + 1, v591));
      do
        v593 = __ldaxr(v591);
      while (__stlxr(v593 - 1, v591));
      if (!v593)
      {
        ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
        std::__shared_weak_count::__release_weak(v589);
      }
    }
    if (v590)
    {
      j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
    }
    else
    {
      v671[0] = 0;
      v671[1] = 0;
    }
    v594 = v675;
    if (v675)
    {
      v595 = (unint64_t *)&v675->__shared_owners_;
      do
        v596 = __ldaxr(v595);
      while (__stlxr(v596 - 1, v595));
      if (!v596)
      {
        ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
        std::__shared_weak_count::__release_weak(v594);
      }
    }
    if (v590)
    {
      sub_239629C3C(&value, a2 + 424);
      v598 = value;
      v597 = v675;
      if (v675)
      {
        v599 = (unint64_t *)&v675->__shared_owners_;
        do
          v600 = __ldxr(v599);
        while (__stxr(v600 + 1, v599));
        do
          v601 = __ldaxr(v599);
        while (__stlxr(v601 - 1, v599));
        if (!v601)
        {
          ((void (*)(std::__shared_weak_count *))v597->__on_zero_shared)(v597);
          std::__shared_weak_count::__release_weak(v597);
        }
      }
      if (v598)
      {
        j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
      }
      else
      {
        v671[0] = 0;
        v671[1] = 0;
      }
      v602 = v675;
      if (v675)
      {
        v603 = (unint64_t *)&v675->__shared_owners_;
        do
          v604 = __ldaxr(v603);
        while (__stlxr(v604 - 1, v603));
        if (!v604)
        {
          ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
          std::__shared_weak_count::__release_weak(v602);
        }
      }
      if (v598)
      {
        sub_239629C3C(&value, a2 + 432);
        v606 = value;
        v605 = v675;
        if (v675)
        {
          v607 = (unint64_t *)&v675->__shared_owners_;
          do
            v608 = __ldxr(v607);
          while (__stxr(v608 + 1, v607));
          do
            v609 = __ldaxr(v607);
          while (__stlxr(v609 - 1, v607));
          if (!v609)
          {
            ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
            std::__shared_weak_count::__release_weak(v605);
          }
        }
        if (v606)
        {
          j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
        }
        else
        {
          v671[0] = 0;
          v671[1] = 0;
        }
        v610 = v675;
        if (v675)
        {
          v611 = (unint64_t *)&v675->__shared_owners_;
          do
            v612 = __ldaxr(v611);
          while (__stlxr(v612 - 1, v611));
          if (!v612)
          {
            ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
            std::__shared_weak_count::__release_weak(v610);
          }
        }
        if (v606)
        {
          sub_239629C3C(&value, a2 + 440);
          v614 = value;
          v613 = v675;
          if (v675)
          {
            v615 = (unint64_t *)&v675->__shared_owners_;
            do
              v616 = __ldxr(v615);
            while (__stxr(v616 + 1, v615));
            do
              v617 = __ldaxr(v615);
            while (__stlxr(v617 - 1, v615));
            if (!v617)
            {
              ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
              std::__shared_weak_count::__release_weak(v613);
            }
          }
          if (v614)
          {
            j__CFArrayAppendValue((CFMutableArrayRef)v676, value);
          }
          else
          {
            v671[0] = 0;
            v671[1] = 0;
          }
          v618 = v675;
          if (v675)
          {
            v619 = (unint64_t *)&v675->__shared_owners_;
            do
              v620 = __ldaxr(v619);
            while (__stlxr(v620 - 1, v619));
            if (!v620)
            {
              ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
              std::__shared_weak_count::__release_weak(v618);
            }
          }
          if (v614)
          {
            *(_OWORD *)v671 = v676;
            v570 = (void **)&v676;
            goto LABEL_745;
          }
        }
      }
    }
  }
LABEL_843:
  v621 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (*((_QWORD *)&v676 + 1))
  {
    v622 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
    do
      v623 = __ldaxr(v622);
    while (__stlxr(v623 - 1, v622));
    if (!v623)
    {
      ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
      std::__shared_weak_count::__release_weak(v621);
    }
  }
  v625 = v671[0];
  v624 = (std::__shared_weak_count *)v671[1];
  if (v671[1])
  {
    v626 = (unint64_t *)((char *)v671[1] + 8);
    do
      v627 = __ldxr(v626);
    while (__stxr(v627 + 1, v626));
    do
      v628 = __ldaxr(v626);
    while (__stlxr(v628 - 1, v626));
    if (!v628)
    {
      ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
      std::__shared_weak_count::__release_weak(v624);
      if (!v625)
        goto LABEL_855;
      goto LABEL_854;
    }
  }
  if (v625)
LABEL_854:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v554, v671[0]);
LABEL_855:
  v629 = (std::__shared_weak_count *)v671[1];
  if (v671[1])
  {
    v630 = (unint64_t *)((char *)v671[1] + 8);
    do
      v631 = __ldaxr(v630);
    while (__stlxr(v631 - 1, v630));
    if (!v631)
    {
      ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
      std::__shared_weak_count::__release_weak(v629);
    }
  }
LABEL_860:
  v632 = v670;
  if (!v670)
    goto LABEL_864;
  v633 = (unint64_t *)&v670->__shared_owners_;
  do
    v634 = __ldaxr(v633);
  while (__stlxr(v634 - 1, v633));
  if (v634)
  {
LABEL_864:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_866;
    goto LABEL_865;
  }
  ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
  std::__shared_weak_count::__release_weak(v632);
  if (__p[1].i8[7] < 0)
LABEL_865:
    operator delete((void *)__p[0].i64[0]);
LABEL_866:
  strcpy(__dst, "2SGF]mAT_mAGQQWAATG^mFKBW");
  sub_239A93C04(__dst, *(int32x4_t *)"AGQQWAATG^mFKBW", v551, v552, v553);
  v636 = v635;
  v637 = strlen(v635);
  if (v637 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v638 = v637;
  if (v637 >= 0x17)
  {
    v640 = (v637 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v637 | 7) != 0x17)
      v640 = v637 | 7;
    v641 = v640 + 1;
    v639 = operator new(v640 + 1);
    __p[0].i64[1] = v638;
    __p[1].i64[0] = v641 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v639;
  }
  else
  {
    __p[1].i8[7] = v637;
    v639 = __p;
    if (!v637)
      goto LABEL_874;
  }
  memmove(v639, v636, v638);
LABEL_874:
  *((_BYTE *)v639 + v638) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BBD4C4(a1, (const void *)v676, (int *)(a2 + 448));
  v644 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_878;
  v645 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v646 = __ldaxr(v645);
  while (__stlxr(v646 - 1, v645));
  if (v646)
  {
LABEL_878:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_880;
    goto LABEL_879;
  }
  ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
  std::__shared_weak_count::__release_weak(v644);
  if (__p[1].i8[7] < 0)
LABEL_879:
    operator delete((void *)__p[0].i64[0]);
LABEL_880:
  *(_OWORD *)__dst = xmmword_239F12D96;
  *(int16x8_t *)&__dst[16] = xmmword_239F12DA6;
  *(int16x8_t *)&__dst[25] = *(int16x8_t *)((char *)&xmmword_239F12DA6 + 9);
  sub_2396F08F4(__dst, *(double *)((char *)&xmmword_239F12DA6.i64[1] + 1), xmmword_239F12DA6, v642, v643);
  v648 = v647;
  v649 = strlen(v647);
  if (v649 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v650 = v649;
  if (v649 >= 0x17)
  {
    v652 = (v649 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v649 | 7) != 0x17)
      v652 = v649 | 7;
    v653 = v652 + 1;
    v651 = operator new(v652 + 1);
    __p[0].i64[1] = v650;
    __p[1].i64[0] = v653 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v651;
  }
  else
  {
    __p[1].i8[7] = v649;
    v651 = __p;
    if (!v649)
      goto LABEL_888;
  }
  memmove(v651, v648, v650);
LABEL_888:
  *((_BYTE *)v651 + v650) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB47DC(a1, (const void *)v676, a2 + 472);
  v656 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_892;
  v657 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v658 = __ldaxr(v657);
  while (__stlxr(v658 - 1, v657));
  if (v658)
  {
LABEL_892:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_894;
    goto LABEL_893;
  }
  ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
  std::__shared_weak_count::__release_weak(v656);
  if (__p[1].i8[7] < 0)
LABEL_893:
    operator delete((void *)__p[0].i64[0]);
LABEL_894:
  strcpy(__dst, "R3$5\r473&' 7\r& ;3<5'>3&;=<\r 3&;=\r='&\r?3!9");
  sub_239ACB974(__dst, *(int16x8_t *)"\r 3&;=\r='&\r?3!9", *(double *)"3<5'>3&;=<\r 3&;=\r='&\r?3!9", v654, v655);
  v660 = v659;
  v661 = strlen(v659);
  if (v661 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v662 = v661;
  if (v661 >= 0x17)
  {
    v664 = (v661 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v661 | 7) != 0x17)
      v664 = v661 | 7;
    v665 = v664 + 1;
    v663 = operator new(v664 + 1);
    __p[0].i64[1] = v662;
    __p[1].i64[0] = v665 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v663;
  }
  else
  {
    __p[1].i8[7] = v661;
    v663 = __p;
    if (!v661)
      goto LABEL_902;
  }
  memmove(v663, v660, v662);
LABEL_902:
  *((_BYTE *)v663 + v662) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v676);
  sub_239BB47DC(a1, (const void *)v676, a2 + 476);
  v666 = (std::__shared_weak_count *)*((_QWORD *)&v676 + 1);
  if (!*((_QWORD *)&v676 + 1))
    goto LABEL_906;
  v667 = (unint64_t *)(*((_QWORD *)&v676 + 1) + 8);
  do
    v668 = __ldaxr(v667);
  while (__stlxr(v668 - 1, v667));
  if (v668)
  {
LABEL_906:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      return;
    goto LABEL_907;
  }
  ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
  std::__shared_weak_count::__release_weak(v666);
  if (__p[1].i8[7] < 0)
LABEL_907:
    operator delete((void *)__p[0].i64[0]);
}

void sub_239BD6E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  sub_239416DA0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  if (a27 < 0)
    operator delete(__p);
  sub_239416DA0(v30);
  _Unwind_Resume(a1);
}

void sub_239BD70C4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70CC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70D4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70DC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70E4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70EC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70F4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD70FC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7104()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD710C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7114()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD711C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7124()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD712C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7134()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD713C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7144()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD714C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7154()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD715C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7164()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD716C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7174()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD717C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7184()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD718C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7194()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD719C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71A4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71AC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71B4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71BC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71C4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71CC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71D4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71DC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71E4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71EC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71F4()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD71FC()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7204()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD720C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7214()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD721C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7224()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD722C()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD7234()
{
  JUMPOUT(0x239BD70B4);
}

void sub_239BD723C(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44[2];
  void *value;
  std::__shared_weak_count *v46;
  CFMutableArrayRef theArray[2];

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!sub_23962C8DC(*(const __CFDictionary **)a1, a2))
  {
    sub_23962BDF8((std::__shared_weak_count_vtbl **)theArray);
    v12 = theArray[0];
    v11 = (std::__shared_weak_count *)theArray[1];
    if (!theArray[1])
      goto LABEL_13;
    v13 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v12)
      {
LABEL_14:
        sub_239629C3C(&value, a3);
        v17 = value;
        v16 = v46;
        if (v46)
        {
          v18 = (unint64_t *)&v46->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          do
            v20 = __ldaxr(v18);
          while (__stlxr(v20 - 1, v18));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v17)
        {
          j__CFArrayAppendValue(theArray[0], value);
          v21 = v46;
          if (!v46)
            goto LABEL_32;
        }
        else
        {
          v44[0] = 0;
          v44[1] = 0;
          v21 = v46;
          if (!v46)
            goto LABEL_32;
        }
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
LABEL_32:
        if (!v17)
          goto LABEL_50;
        sub_239629C3C(&value, a3 + 8);
        v26 = value;
        v25 = v46;
        if (v46)
        {
          v27 = (unint64_t *)&v46->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldaxr(v27);
          while (__stlxr(v29 - 1, v27));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (v26)
        {
          j__CFArrayAppendValue(theArray[0], value);
          v30 = v46;
          if (!v46)
            goto LABEL_47;
        }
        else
        {
          v44[0] = 0;
          v44[1] = 0;
          v30 = v46;
          if (!v46)
            goto LABEL_47;
        }
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
LABEL_47:
        if (v26)
        {
          *(_OWORD *)v44 = *(_OWORD *)theArray;
          v22 = theArray;
          goto LABEL_49;
        }
LABEL_50:
        v33 = (std::__shared_weak_count *)theArray[1];
        if (theArray[1])
        {
          v34 = (unint64_t *)((char *)theArray[1] + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v37 = v44[0];
        v36 = (std::__shared_weak_count *)v44[1];
        if (!v44[1])
          goto LABEL_60;
        v38 = (unint64_t *)((char *)v44[1] + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          if (!v37)
          {
LABEL_62:
            v41 = (std::__shared_weak_count *)v44[1];
            if (v44[1])
            {
              v42 = (unint64_t *)((char *)v44[1] + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            return;
          }
        }
        else
        {
LABEL_60:
          if (!v37)
            goto LABEL_62;
        }
        j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, v44[0]);
        goto LABEL_62;
      }
    }
    v22 = v44;
LABEL_49:
    *v22 = 0;
    v22[1] = 0;
    goto LABEL_50;
  }
}

void sub_239BD7580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239BD7594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239BD7618(uint64_t a1, const void *a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42[2];
  void *value;
  std::__shared_weak_count *v44;
  CFMutableArrayRef theArray[2];

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!sub_23962C8DC(*(const __CFDictionary **)a1, a2))
  {
    sub_23962BDF8((std::__shared_weak_count_vtbl **)theArray);
    v12 = theArray[0];
    v11 = (std::__shared_weak_count *)theArray[1];
    if (!theArray[1])
      goto LABEL_13;
    v13 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
      {
LABEL_14:
        v18 = (_QWORD *)*a3;
        v16 = a3 + 1;
        v17 = v18;
        if (v18 == v16)
        {
LABEL_15:
          *(_OWORD *)v42 = *(_OWORD *)theArray;
          v19 = theArray;
LABEL_42:
          *v19 = 0;
          v19[1] = 0;
LABEL_43:
          v31 = (std::__shared_weak_count *)theArray[1];
          if (theArray[1])
          {
            v32 = (unint64_t *)((char *)theArray[1] + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v35 = v42[0];
          v34 = (std::__shared_weak_count *)v42[1];
          if (!v42[1])
            goto LABEL_53;
          v36 = (unint64_t *)((char *)v42[1] + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          do
            v38 = __ldaxr(v36);
          while (__stlxr(v38 - 1, v36));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
            if (!v35)
            {
LABEL_55:
              v39 = (std::__shared_weak_count *)v42[1];
              if (v42[1])
              {
                v40 = (unint64_t *)((char *)v42[1] + 8);
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              return;
            }
          }
          else
          {
LABEL_53:
            if (!v35)
              goto LABEL_55;
          }
          j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, v42[0]);
          goto LABEL_55;
        }
        while (1)
        {
          sub_2396299CC(&value, v17 + 4);
          v21 = value;
          v20 = v44;
          if (!v44)
            goto LABEL_22;
          v22 = (unint64_t *)&v44->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            if (v21)
            {
LABEL_23:
              j__CFArrayAppendValue(theArray[0], value);
              v25 = v44;
              if (v44)
                goto LABEL_27;
              goto LABEL_31;
            }
          }
          else
          {
LABEL_22:
            if (v21)
              goto LABEL_23;
          }
          v42[0] = 0;
          v42[1] = 0;
          v25 = v44;
          if (v44)
          {
LABEL_27:
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
LABEL_31:
          if (!v21)
            goto LABEL_43;
          v28 = (_QWORD *)v17[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v17[2];
              v30 = *v29 == (_QWORD)v17;
              v17 = v29;
            }
            while (!v30);
          }
          v17 = v29;
          if (v29 == v16)
            goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_13:
      if (v12)
        goto LABEL_14;
    }
    v19 = v42;
    goto LABEL_42;
  }
}

void sub_239BD78F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239BD790C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239BD7990(_OWORD *a1, uint64_t a2)
{
  _QWORD *i;
  int8x16_t v4;
  double v5;
  int32x4_t v6;
  const char *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  double v15;
  int32x4_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const char *v20;
  const char *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int8x16_t *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  double v37;
  int32x4_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const char *v42;
  const char *v43;
  size_t v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  double v50;
  int32x4_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const char *v55;
  const char *v56;
  size_t v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  int8x16_t v62;
  double v63;
  int32x4_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const char *v68;
  const char *v69;
  size_t v70;
  size_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  double v76;
  int32x4_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  const char *v81;
  const char *v82;
  size_t v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  int8x16_t *v91;
  size_t v92;
  size_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v107;
  std::string v108;
  CFStringRef v109;
  std::__shared_weak_count *v110;
  _BYTE __dst[26];
  char __p[24];
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    std::to_string(&v108, i[2]);
    sub_23962C714(&v107);
    *(_OWORD *)__p = xmmword_239F12F15;
    *(_DWORD *)&__p[15] = 1774101;
    sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F12F15, v4, v5, v6);
    v8 = v7;
    v9 = strlen(v7);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      *(_QWORD *)&__dst[8] = v10;
      *(_QWORD *)&__dst[16] = v13 | 0x8000000000000000;
      *(_QWORD *)__dst = v11;
    }
    else
    {
      __dst[23] = v9;
      v11 = __dst;
      if (!v9)
        goto LABEL_14;
    }
    memmove(v11, v8, v10);
LABEL_14:
    v11[v10] = 0;
    sub_239629EF4((uint64_t)__dst, &v109);
    sub_239BB47DC((uint64_t)&v107, v109, (uint64_t)(i + 3));
    v17 = v110;
    if (!v110)
      goto LABEL_18;
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (v19)
    {
LABEL_18:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_20;
LABEL_19:
      operator delete(*(void **)__dst);
      goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((__dst[23] & 0x80000000) != 0)
      goto LABEL_19;
LABEL_20:
    strcpy(__p, "&BSTGROIHyRTGEMOHAyOBJC");
    sub_2396F1A4C((uint64_t)__p, *(int32x4_t *)"&BSTGROIHyRTGEMOHAyOBJC", v14, v15, v16);
    v21 = v20;
    v22 = strlen(v20);
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v23 = v22;
    if (v22 >= 0x17)
    {
      v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v25 = v22 | 7;
      v26 = v25 + 1;
      v24 = operator new(v25 + 1);
      *(_QWORD *)&__dst[8] = v23;
      *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
      *(_QWORD *)__dst = v24;
    }
    else
    {
      __dst[23] = v22;
      v24 = __dst;
      if (!v22)
        goto LABEL_28;
    }
    memmove(v24, v21, v23);
LABEL_28:
    v24[v23] = 0;
    sub_239629EF4((uint64_t)__dst, &v109);
    sub_239BB47DC((uint64_t)&v107, v109, (uint64_t)(i + 4));
    v27 = v110;
    if (!v110)
      goto LABEL_32;
    v28 = (unint64_t *)&v110->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (v29)
    {
LABEL_32:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_34;
LABEL_33:
      operator delete(*(void **)__dst);
      goto LABEL_34;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if ((__dst[23] & 0x80000000) != 0)
      goto LABEL_33;
LABEL_34:
    *(_OWORD *)__p = xmmword_239F12F40;
    strcpy(&__p[16], " ");
    v30 = sub_239A91B18((int8x16_t *)__p);
    v31 = strlen(v30->i8);
    if (v31 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v32 = v31;
    if (v31 >= 0x17)
    {
      v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v34 = v31 | 7;
      v35 = v34 + 1;
      v33 = operator new(v34 + 1);
      *(_QWORD *)&__dst[8] = v32;
      *(_QWORD *)&__dst[16] = v35 | 0x8000000000000000;
      *(_QWORD *)__dst = v33;
    }
    else
    {
      __dst[23] = v31;
      v33 = __dst;
      if (!v31)
        goto LABEL_42;
    }
    memmove(v33, v30, v32);
LABEL_42:
    v33[v32] = 0;
    sub_239629EF4((uint64_t)__dst, &v109);
    sub_239BB47DC((uint64_t)&v107, v109, (uint64_t)i + 28);
    v39 = v110;
    if (!v110)
      goto LABEL_46;
    v40 = (unint64_t *)&v110->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (v41)
    {
LABEL_46:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_48;
LABEL_47:
      operator delete(*(void **)__dst);
      goto LABEL_48;
    }
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if ((__dst[23] & 0x80000000) != 0)
      goto LABEL_47;
LABEL_48:
    strcpy(__p, ".J[\\OZGA@qCO^^G@IqGJBK");
    sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)".J[\\OZGA@qCO^^G@IqGJBK", v36, v37, v38);
    v43 = v42;
    v44 = strlen(v42);
    if (v44 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v45 = v44;
    if (v44 >= 0x17)
    {
      v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v47 = v44 | 7;
      v48 = v47 + 1;
      v46 = operator new(v47 + 1);
      *(_QWORD *)&__dst[8] = v45;
      *(_QWORD *)&__dst[16] = v48 | 0x8000000000000000;
      *(_QWORD *)__dst = v46;
    }
    else
    {
      __dst[23] = v44;
      v46 = __dst;
      if (!v44)
        goto LABEL_56;
    }
    memmove(v46, v43, v45);
LABEL_56:
    v46[v45] = 0;
    sub_239629EF4((uint64_t)__dst, &v109);
    sub_239BB47DC((uint64_t)&v107, v109, (uint64_t)i + 36);
    v52 = v110;
    if (!v110)
      goto LABEL_60;
    v53 = (unint64_t *)&v110->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (v54)
    {
LABEL_60:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_62;
LABEL_61:
      operator delete(*(void **)__dst);
      goto LABEL_62;
    }
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if ((__dst[23] & 0x80000000) != 0)
      goto LABEL_61;
LABEL_62:
    *(_OWORD *)__dst = xmmword_239F12F69;
    *(_OWORD *)&__dst[10] = *(__int128 *)((char *)&xmmword_239F12F69 + 10);
    sub_239A93C04(__dst, *(int32x4_t *)((char *)&xmmword_239F12F69 + 10), v49, v50, v51);
    v56 = v55;
    v57 = strlen(v55);
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v58 = v57;
    if (v57 >= 0x17)
    {
      v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v60 = v57 | 7;
      v61 = v60 + 1;
      v59 = operator new(v60 + 1);
      *(_QWORD *)&__p[8] = v58;
      *(_QWORD *)&__p[16] = v61 | 0x8000000000000000;
      *(_QWORD *)__p = v59;
    }
    else
    {
      __p[23] = v57;
      v59 = __p;
      if (!v57)
        goto LABEL_70;
    }
    memmove(v59, v56, v58);
LABEL_70:
    *((_BYTE *)v59 + v58) = 0;
    sub_239629EF4((uint64_t)__p, &v109);
    sub_2396B4148((uint64_t)&v107, v109, (uint64_t)(i + 5));
    v65 = v110;
    if (!v110)
      goto LABEL_74;
    v66 = (unint64_t *)&v110->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (v67)
    {
LABEL_74:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_76;
LABEL_75:
      operator delete(*(void **)__p);
      goto LABEL_76;
    }
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if (__p[23] < 0)
      goto LABEL_75;
LABEL_76:
    *(_OWORD *)__p = xmmword_239F12F83;
    *(_DWORD *)&__p[16] = 137746;
    sub_23958E55C((uint64_t)__p, (int32x4_t)xmmword_239F12F83, v62, v63, v64);
    v69 = v68;
    v70 = strlen(v68);
    if (v70 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v71 = v70;
    if (v70 >= 0x17)
    {
      v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17)
        v73 = v70 | 7;
      v74 = v73 + 1;
      v72 = operator new(v73 + 1);
      *(_QWORD *)&__dst[8] = v71;
      *(_QWORD *)&__dst[16] = v74 | 0x8000000000000000;
      *(_QWORD *)__dst = v72;
    }
    else
    {
      __dst[23] = v70;
      v72 = __dst;
      if (!v70)
        goto LABEL_84;
    }
    memmove(v72, v69, v71);
LABEL_84:
    v72[v71] = 0;
    sub_239629EF4((uint64_t)__dst, &v109);
    sub_239BB4A9C((uint64_t)&v107, v109, (uint64_t)(i + 7));
    v78 = v110;
    if (!v110)
      goto LABEL_88;
    v79 = (unint64_t *)&v110->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (v80)
    {
LABEL_88:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_90;
LABEL_89:
      operator delete(*(void **)__dst);
      goto LABEL_90;
    }
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    if ((__dst[23] & 0x80000000) != 0)
      goto LABEL_89;
LABEL_90:
    *(_OWORD *)__dst = xmmword_239F12F97;
    *(_OWORD *)&__dst[9] = *(__int128 *)((char *)&xmmword_239F12F97 + 9);
    sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12F97 + 9), v75, v76, v77);
    v82 = v81;
    v83 = strlen(v81);
    if (v83 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v84 = v83;
    if (v83 >= 0x17)
    {
      v86 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v83 | 7) != 0x17)
        v86 = v83 | 7;
      v87 = v86 + 1;
      v85 = operator new(v86 + 1);
      *(_QWORD *)&__p[8] = v84;
      *(_QWORD *)&__p[16] = v87 | 0x8000000000000000;
      *(_QWORD *)__p = v85;
    }
    else
    {
      __p[23] = v83;
      v85 = __p;
      if (!v83)
        goto LABEL_98;
    }
    memmove(v85, v82, v84);
LABEL_98:
    *((_BYTE *)v85 + v84) = 0;
    sub_239629EF4((uint64_t)__p, &v109);
    sub_239BB4A9C((uint64_t)&v107, v109, (uint64_t)(i + 8));
    v88 = v110;
    if (!v110)
      goto LABEL_102;
    v89 = (unint64_t *)&v110->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (v90)
    {
LABEL_102:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_104;
LABEL_103:
      operator delete(*(void **)__p);
      goto LABEL_104;
    }
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    if (__p[23] < 0)
      goto LABEL_103;
LABEL_104:
    *(_OWORD *)__p = xmmword_239F12FB0;
    *(_WORD *)&__p[16] = 5;
    v91 = sub_239A91B18((int8x16_t *)__p);
    v92 = strlen(v91->i8);
    if (v92 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v93 = v92;
    if (v92 >= 0x17)
    {
      v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v92 | 7) != 0x17)
        v95 = v92 | 7;
      v96 = v95 + 1;
      v94 = operator new(v95 + 1);
      *(_QWORD *)&__dst[8] = v93;
      *(_QWORD *)&__dst[16] = v96 | 0x8000000000000000;
      *(_QWORD *)__dst = v94;
    }
    else
    {
      __dst[23] = v92;
      v94 = __dst;
      if (!v92)
        goto LABEL_112;
    }
    memmove(v94, v91, v93);
LABEL_112:
    v94[v93] = 0;
    sub_239629EF4((uint64_t)__dst, &v109);
    sub_239BB4338((uint64_t)&v107, v109, (uint64_t)(i + 9));
    v97 = v110;
    if (v110)
    {
      v98 = (unint64_t *)&v110->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_118;
LABEL_117:
        operator delete(*(void **)__dst);
        goto LABEL_118;
      }
    }
    if ((__dst[23] & 0x80000000) != 0)
      goto LABEL_117;
LABEL_118:
    sub_239629EF4((uint64_t)&v108, (CFStringRef *)__dst);
    sub_239BB7018((uint64_t)a1, *(const void **)__dst, (uint64_t)&v107);
    v100 = *(std::__shared_weak_count **)&__dst[8];
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_122;
    v101 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1))
      {
LABEL_123:
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    else
    {
LABEL_122:
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1))
        goto LABEL_123;
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
  }
}

void sub_239BD8350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_239416DA0((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  sub_239416DA0(a9);
  _Unwind_Resume(a1);
}

void sub_239BD845C(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  double v20;
  int32x4_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  size_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  double v42;
  int32x4_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  const char *v48;
  size_t v49;
  size_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  double v55;
  int32x4_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  const char *v61;
  size_t v62;
  size_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t v67;
  double v68;
  int32x4_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  const char *v74;
  size_t v75;
  size_t v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int8x16_t v80;
  double v81;
  int32x4_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  const char *v86;
  const char *v87;
  size_t v88;
  size_t v89;
  _OWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  int8x16_t *v96;
  size_t v97;
  size_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int8x16_t v102;
  double v103;
  int32x4_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  const char *v109;
  size_t v110;
  size_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  const char *v118;
  const char *v119;
  size_t v120;
  size_t v121;
  _OWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int8x16_t v125;
  double v126;
  int32x4_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  const char *v131;
  const char *v132;
  size_t v133;
  size_t v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  int8x16_t v138;
  double v139;
  int32x4_t v140;
  CFStringRef v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  unint64_t v146;
  __int128 v147;
  unint64_t *p_info;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  CFMutableArrayRef v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  __int128 v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  std::string::size_type v162;
  unint64_t *v163;
  unint64_t v164;
  __int128 v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  CFMutableArrayRef *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  CFMutableArrayRef v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  CFMutableDictionaryRef *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  CFMutableDictionaryRef v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  const char *v199;
  const char *v200;
  size_t v201;
  size_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  int8x16_t v206;
  double v207;
  int32x4_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  const char *v215;
  const char *v216;
  size_t v217;
  size_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  int32x4_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  const char *v230;
  const char *v231;
  size_t v232;
  void *v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  double v238;
  int16x8_t v239;
  const char *v240;
  const char *v241;
  size_t v242;
  std::string::size_type v243;
  std::string *p_value;
  uint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  int16x8_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  const char *v253;
  const char *v254;
  size_t v255;
  std::string::size_type v256;
  std::string *v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  int32x4_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  const char *v265;
  const char *v266;
  size_t v267;
  std::string::size_type v268;
  std::string *v269;
  uint64_t v270;
  uint64_t v271;
  double v272;
  double v273;
  int16x8_t v274;
  CFStringRef v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  CFMutableArrayRef v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t *v286;
  uint64_t *v287;
  __int128 v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  CFMutableArrayRef v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  int v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  CFMutableArrayRef v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  CFMutableDictionaryRef *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  CFMutableDictionaryRef v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  CFMutableArrayRef *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  CFStringRef v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  const char *v336;
  const char *v337;
  size_t v338;
  __CFArray *v339;
  __CFArray *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *i;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  int16x8_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  const char *v360;
  const char *v361;
  size_t v362;
  size_t v363;
  _OWORD *v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  const char *v373;
  size_t v374;
  std::string::size_type v375;
  std::string *v376;
  uint64_t v377;
  uint64_t v378;
  int8x16_t v379;
  double v380;
  int32x4_t v381;
  const char *v382;
  const char *v383;
  size_t v384;
  size_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  int8x16_t v389;
  double v390;
  int32x4_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  const char *v395;
  const char *v396;
  size_t v397;
  size_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  const char *v405;
  const char *v406;
  size_t v407;
  size_t v408;
  _OWORD *v409;
  uint64_t v410;
  uint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  const char *v415;
  const char *v416;
  size_t v417;
  size_t v418;
  _OWORD *v419;
  uint64_t v420;
  uint64_t v421;
  int8x16_t v422;
  double v423;
  int32x4_t v424;
  CFMutableArrayRef v425;
  std::__shared_weak_count *v426;
  CFMutableDictionaryRef v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t v430;
  int8x16_t v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  const char *v441;
  const char *v442;
  size_t v443;
  size_t v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  int16x8_t v448;
  int16x8_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  const char *v453;
  const char *v454;
  size_t v455;
  size_t v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  int8x16_t v460;
  double v461;
  int32x4_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  const char *v466;
  const char *v467;
  size_t v468;
  size_t v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  const char *v473;
  size_t v474;
  size_t v475;
  _OWORD *v476;
  uint64_t v477;
  uint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  int8x16_t *v482;
  size_t v483;
  size_t v484;
  _OWORD *v485;
  uint64_t v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  const char *v491;
  const char *v492;
  size_t v493;
  size_t v494;
  _OWORD *v495;
  uint64_t v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  const char *v501;
  const char *v502;
  size_t v503;
  size_t v504;
  _OWORD *v505;
  uint64_t v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  const char *v511;
  const char *v512;
  size_t v513;
  size_t v514;
  _OWORD *v515;
  uint64_t v516;
  uint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  const char *v527;
  size_t v528;
  size_t v529;
  _OWORD *v530;
  uint64_t v531;
  uint64_t v532;
  CFMutableArrayRef v533;
  std::__shared_weak_count *v534;
  CFMutableDictionaryRef v535;
  unint64_t *v536;
  unint64_t v537;
  unint64_t v538;
  int8x16_t v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  __int128 theDict;
  CFStringRef v556;
  std::__shared_weak_count *v557;
  CFMutableDictionaryRef v558[3];
  uint64_t v559;
  CFMutableArrayRef v560[2];
  int8x16_t __p[2];
  void *v562[2];
  unint64_t v563;
  CFMutableArrayRef theArray[4];
  CFStringRef v565[3];
  std::string value;
  _OWORD __dst[3];
  CFStringRef v568[3];
  uint64_t v569;

  v569 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  strcpy((char *)&value, "\x1BunvDrvz|~h");
  v4 = sub_23958E4C8((uint64_t)&value);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)&__dst[0] + 1) = v6;
    *(_QWORD *)&__dst[1] = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v7;
  }
  else
  {
    BYTE7(__dst[1]) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, v4, v6);
LABEL_9:
  *((_BYTE *)v7 + v6) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)a1, (const void *)__p[0].i64[0], a2);
  v10 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_13;
  v11 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_13:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (SBYTE7(__dst[1]) < 0)
LABEL_14:
    operator delete(*(void **)&__dst[0]);
LABEL_15:
  value.__r_.__value_.__r.__words[0] = 0x1A0F023109180F6ELL;
  value.__r_.__value_.__s.__data_[12] = 0;
  LODWORD(value.__r_.__value_.__r.__words[1]) = 386727947;
  v13 = sub_239510ECC((uint64_t)&value);
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *((_QWORD *)&__dst[0] + 1) = v15;
    *(_QWORD *)&__dst[1] = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v16;
  }
  else
  {
    BYTE7(__dst[1]) = v14;
    v16 = __dst;
    if (!v14)
      goto LABEL_23;
  }
  memmove(v16, v13, v15);
LABEL_23:
  *((_BYTE *)v16 + v15) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)a1, (const void *)__p[0].i64[0], a2 + 8);
  v22 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_27;
  v23 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_27:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (SBYTE7(__dst[1]) < 0)
LABEL_28:
    operator delete(*(void **)&__dst[0]);
LABEL_29:
  __p[0] = (int8x16_t)xmmword_239F12FC2;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 529682;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F12FC2, v19, v20, v21);
  v26 = v25;
  v27 = strlen(v25);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    *((_QWORD *)&__dst[0] + 1) = v28;
    *(_QWORD *)&__dst[1] = v31 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v29;
  }
  else
  {
    BYTE7(__dst[1]) = v27;
    v29 = __dst;
    if (!v27)
      goto LABEL_37;
  }
  memmove(v29, v26, v28);
LABEL_37:
  *((_BYTE *)v29 + v28) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 12);
  size = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_41;
  v33 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_41:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SBYTE7(__dst[1]) < 0)
LABEL_42:
    operator delete(*(void **)&__dst[0]);
LABEL_43:
  value.__r_.__value_.__r.__words[0] = 0x6E68756073746501;
  v35 = sub_239510ECC((uint64_t)&value);
  v36 = strlen(v35);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    *((_QWORD *)&__dst[0] + 1) = v37;
    *(_QWORD *)&__dst[1] = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v38;
  }
  else
  {
    BYTE7(__dst[1]) = v36;
    v38 = __dst;
    if (!v36)
      goto LABEL_51;
  }
  memmove(v38, v35, v37);
LABEL_51:
  *((_BYTE *)v38 + v37) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)a1, (const void *)__p[0].i64[0], a2 + 16);
  v44 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_55;
  v45 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (v46)
  {
LABEL_55:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (SBYTE7(__dst[1]) < 0)
LABEL_56:
    operator delete(*(void **)&__dst[0]);
LABEL_57:
  strcpy(__p[0].i8, "\acrufsnhiXnisbuXef");
  sub_23958E450((uint64_t)__p, *(int32x4_t *)"\acrufsnhiXnisbuXef", v41, v42, v43);
  v48 = v47;
  v49 = strlen(v47);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    *((_QWORD *)&__dst[0] + 1) = v50;
    *(_QWORD *)&__dst[1] = v53 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v51;
  }
  else
  {
    BYTE7(__dst[1]) = v49;
    v51 = __dst;
    if (!v49)
      goto LABEL_65;
  }
  memmove(v51, v48, v50);
LABEL_65:
  *((_BYTE *)v51 + v50) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 20);
  v57 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_69;
  v58 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
  {
LABEL_69:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if (SBYTE7(__dst[1]) < 0)
LABEL_70:
    operator delete(*(void **)&__dst[0]);
LABEL_71:
  strcpy(__p[0].i8, "1UDCPEX^_nWX_P]nSP");
  sub_23958E450((uint64_t)__p, *(int32x4_t *)"1UDCPEX^_nWX_P]nSP", v54, v55, v56);
  v61 = v60;
  v62 = strlen(v60);
  if (v62 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v63 = v62;
  if (v62 >= 0x17)
  {
    v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v65 = v62 | 7;
    v66 = v65 + 1;
    v64 = operator new(v65 + 1);
    *((_QWORD *)&__dst[0] + 1) = v63;
    *(_QWORD *)&__dst[1] = v66 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v64;
  }
  else
  {
    BYTE7(__dst[1]) = v62;
    v64 = __dst;
    if (!v62)
      goto LABEL_79;
  }
  memmove(v64, v61, v63);
LABEL_79:
  *((_BYTE *)v64 + v63) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 24);
  v70 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_83;
  v71 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (v72)
  {
LABEL_83:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
  std::__shared_weak_count::__release_weak(v70);
  if (SBYTE7(__dst[1]) < 0)
LABEL_84:
    operator delete(*(void **)&__dst[0]);
LABEL_85:
  __p[0] = (int8x16_t)xmmword_239F12FFB;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 2370858;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F12FFB, v67, v68, v69);
  v74 = v73;
  v75 = strlen(v73);
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v76 = v75;
  if (v75 >= 0x17)
  {
    v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v78 = v75 | 7;
    v79 = v78 + 1;
    v77 = operator new(v78 + 1);
    *((_QWORD *)&__dst[0] + 1) = v76;
    *(_QWORD *)&__dst[1] = v79 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v77;
  }
  else
  {
    BYTE7(__dst[1]) = v75;
    v77 = __dst;
    if (!v75)
      goto LABEL_93;
  }
  memmove(v77, v74, v76);
LABEL_93:
  *((_BYTE *)v77 + v76) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 28);
  v83 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_97;
  v84 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (v85)
  {
LABEL_97:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
  std::__shared_weak_count::__release_weak(v83);
  if (SBYTE7(__dst[1]) < 0)
LABEL_98:
    operator delete(*(void **)&__dst[0]);
LABEL_99:
  __p[0] = (int8x16_t)xmmword_239F1300E;
  __p[1].i64[0] = 0x6A636B66506861;
  sub_2396F1A4C((uint64_t)__p, (int32x4_t)xmmword_239F1300E, v80, v81, v82);
  v87 = v86;
  v88 = strlen(v86);
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v89 = v88;
  if (v88 >= 0x17)
  {
    v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v91 = v88 | 7;
    v92 = v91 + 1;
    v90 = operator new(v91 + 1);
    *((_QWORD *)&__dst[0] + 1) = v89;
    *(_QWORD *)&__dst[1] = v92 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v90;
  }
  else
  {
    BYTE7(__dst[1]) = v88;
    v90 = __dst;
    if (!v88)
      goto LABEL_107;
  }
  memmove(v90, v87, v89);
LABEL_107:
  *((_BYTE *)v90 + v89) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 32);
  v93 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_111;
  v94 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (v95)
  {
LABEL_111:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (SBYTE7(__dst[1]) < 0)
LABEL_112:
    operator delete(*(void **)&__dst[0]);
LABEL_113:
  __p[0] = (int8x16_t)xmmword_239F13026;
  __p[1].i16[0] = 31;
  v96 = sub_239A91B18(__p);
  v97 = strlen(v96->i8);
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v98 = v97;
  if (v97 >= 0x17)
  {
    v100 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v100 = v97 | 7;
    v101 = v100 + 1;
    v99 = operator new(v100 + 1);
    *((_QWORD *)&__dst[0] + 1) = v98;
    *(_QWORD *)&__dst[1] = v101 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v99;
  }
  else
  {
    BYTE7(__dst[1]) = v97;
    v99 = __dst;
    if (!v97)
      goto LABEL_121;
  }
  memmove(v99, v96, v98);
LABEL_121:
  *((_BYTE *)v99 + v98) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 36);
  v105 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_125;
  v106 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_125:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
  std::__shared_weak_count::__release_weak(v105);
  if (SBYTE7(__dst[1]) < 0)
LABEL_126:
    operator delete(*(void **)&__dst[0]);
LABEL_127:
  strcpy(__p[0].i8, "1UDCPEX^_n\\PAAX_VnXU]T");
  sub_2396EFBE0((uint64_t)__p, *(int32x4_t *)"1UDCPEX^_n\\PAAX_VnXU]T", v102, v103, v104);
  v109 = v108;
  v110 = strlen(v108);
  if (v110 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v111 = v110;
  if (v110 >= 0x17)
  {
    v113 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17)
      v113 = v110 | 7;
    v114 = v113 + 1;
    v112 = operator new(v113 + 1);
    *((_QWORD *)&__dst[0] + 1) = v111;
    *(_QWORD *)&__dst[1] = v114 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v112;
  }
  else
  {
    BYTE7(__dst[1]) = v110;
    v112 = __dst;
    if (!v110)
      goto LABEL_135;
  }
  memmove(v112, v109, v111);
LABEL_135:
  *((_BYTE *)v112 + v111) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&value);
  sub_239BB47DC((uint64_t)a1, value.__r_.__value_.__l.__data_, a2 + 40);
  v115 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_139;
  v116 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
  do
    v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (v117)
  {
LABEL_139:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
  std::__shared_weak_count::__release_weak(v115);
  if (SBYTE7(__dst[1]) < 0)
LABEL_140:
    operator delete(*(void **)&__dst[0]);
LABEL_141:
  strcpy((char *)&value, "(A[w[]KKM[[N]D");
  sub_23958E5E0((uint64_t)&value);
  v119 = v118;
  v120 = strlen(v118);
  if (v120 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v121 = v120;
  if (v120 >= 0x17)
  {
    v123 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17)
      v123 = v120 | 7;
    v124 = v123 + 1;
    v122 = operator new(v123 + 1);
    *((_QWORD *)&__dst[0] + 1) = v121;
    *(_QWORD *)&__dst[1] = v124 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v122;
  }
  else
  {
    BYTE7(__dst[1]) = v120;
    v122 = __dst;
    if (!v120)
      goto LABEL_149;
  }
  memmove(v122, v119, v121);
LABEL_149:
  *((_BYTE *)v122 + v121) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)a1, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 44));
  v128 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_153;
  v129 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (v130)
  {
LABEL_153:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
  std::__shared_weak_count::__release_weak(v128);
  if (SBYTE7(__dst[1]) < 0)
LABEL_154:
    operator delete(*(void **)&__dst[0]);
LABEL_155:
  __p[0] = (int8x16_t)xmmword_239F1304F;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 6580058;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F1304F, v125, v126, v127);
  v132 = v131;
  v133 = strlen(v131);
  if (v133 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v134 = v133;
  if (v133 >= 0x17)
  {
    v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v133 | 7) != 0x17)
      v136 = v133 | 7;
    v137 = v136 + 1;
    v135 = operator new(v136 + 1);
    *((_QWORD *)&__dst[0] + 1) = v134;
    *(_QWORD *)&__dst[1] = v137 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v135;
  }
  else
  {
    BYTE7(__dst[1]) = v133;
    v135 = __dst;
    if (!v133)
      goto LABEL_163;
  }
  memmove(v135, v132, v134);
LABEL_163:
  *((_BYTE *)v135 + v134) = 0;
  sub_239629EF4((uint64_t)__dst, v565);
  v141 = v565[0];
  v143 = *(_QWORD *)a1;
  v142 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (!v142)
    goto LABEL_168;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v145 = __ldxr(p_shared_owners);
  while (__stxr(v145 + 1, p_shared_owners));
  do
    v146 = __ldaxr(p_shared_owners);
  while (__stlxr(v146 - 1, p_shared_owners));
  if (!v146)
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
    if (!v143)
      goto LABEL_283;
  }
  else
  {
LABEL_168:
    if (!v143)
      goto LABEL_283;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, v141))
    goto LABEL_283;
  sub_23962BDF8((std::__shared_weak_count_vtbl **)v568);
  v147 = *(_OWORD *)v568;
  if (v568[1])
  {
    p_info = (unint64_t *)&v568[1]->info;
    do
      v149 = __ldxr(p_info);
    while (__stxr(v149 + 1, p_info));
    do
      v150 = __ldaxr(p_info);
    while (__stlxr(v150 - 1, p_info));
    if (!v150)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v147 + 1) + 16))(*((_QWORD *)&v147 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v147 + 1));
      if ((_QWORD)v147)
        goto LABEL_176;
LABEL_265:
      v184 = v558;
      goto LABEL_266;
    }
  }
  if (!(_QWORD)v147)
    goto LABEL_265;
LABEL_176:
  v151 = a2 + 64;
  while (1)
  {
    v151 = *(_QWORD *)v151;
    if (!v151)
      break;
    *(_OWORD *)v562 = *(_OWORD *)(v151 + 16);
    sub_23962BDF8((std::__shared_weak_count_vtbl **)theArray);
    v153 = theArray[0];
    v152 = (std::__shared_weak_count *)theArray[1];
    if (!theArray[1])
      goto LABEL_184;
    v154 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    do
      v156 = __ldaxr(v154);
    while (__stlxr(v156 - 1, v154));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
      if (!v153)
        goto LABEL_219;
    }
    else
    {
LABEL_184:
      if (!v153)
        goto LABEL_219;
    }
    sub_2396299CC(&value, v562);
    v157 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
    if (!value.__r_.__value_.__l.__size_)
      goto LABEL_190;
    v158 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
    do
      v160 = __ldaxr(v158);
    while (__stlxr(v160 - 1, v158));
    if (!v160)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v157 + 1) + 16))(*((_QWORD *)&v157 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v157 + 1));
      if ((_QWORD)v157)
      {
LABEL_191:
        j__CFArrayAppendValue(theArray[0], value.__r_.__value_.__l.__data_);
        v161 = 1;
        v162 = value.__r_.__value_.__l.__size_;
        if (!value.__r_.__value_.__l.__size_)
          goto LABEL_200;
        goto LABEL_197;
      }
    }
    else
    {
LABEL_190:
      if ((_QWORD)v157)
        goto LABEL_191;
    }
    v161 = 0;
    v162 = value.__r_.__value_.__l.__size_;
    if (!value.__r_.__value_.__l.__size_)
      goto LABEL_200;
LABEL_197:
    v163 = (unint64_t *)(v162 + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (v164)
    {
LABEL_200:
      if (!(_QWORD)v157)
        goto LABEL_219;
      goto LABEL_201;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)&v157 + 1) + 16))(*((_QWORD *)&v157 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v157 + 1));
    if (!(_QWORD)v157)
      goto LABEL_219;
LABEL_201:
    sub_2396299CC(&value, &v562[1]);
    v165 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
    if (!value.__r_.__value_.__l.__size_)
      goto LABEL_206;
    v166 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
    do
      v168 = __ldaxr(v166);
    while (__stlxr(v168 - 1, v166));
    if (!v168)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v165 + 1) + 16))(*((_QWORD *)&v165 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v165 + 1));
      if ((_QWORD)v165)
      {
LABEL_207:
        j__CFArrayAppendValue(theArray[0], value.__r_.__value_.__l.__data_);
        v169 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
        if (!value.__r_.__value_.__l.__size_)
          goto LABEL_216;
        goto LABEL_213;
      }
    }
    else
    {
LABEL_206:
      if ((_QWORD)v165)
        goto LABEL_207;
    }
    v161 = 0;
    v169 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (!value.__r_.__value_.__l.__size_)
      goto LABEL_216;
LABEL_213:
    v170 = (unint64_t *)&v169->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (v171)
    {
LABEL_216:
      if (!v161)
        goto LABEL_219;
      goto LABEL_217;
    }
    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
    std::__shared_weak_count::__release_weak(v169);
    if (!v161)
    {
LABEL_219:
      v172 = v560;
      goto LABEL_220;
    }
LABEL_217:
    *(_OWORD *)v560 = *(_OWORD *)theArray;
    v172 = theArray;
LABEL_220:
    *v172 = 0;
    v172[1] = 0;
    v173 = (std::__shared_weak_count *)theArray[1];
    if (!theArray[1])
      goto LABEL_224;
    v174 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
      v177 = v560[0];
      v176 = (std::__shared_weak_count *)v560[1];
      if (!v560[1])
        goto LABEL_231;
    }
    else
    {
LABEL_224:
      v177 = v560[0];
      v176 = (std::__shared_weak_count *)v560[1];
      if (!v560[1])
        goto LABEL_231;
    }
    v178 = (unint64_t *)&v176->__shared_owners_;
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
    do
      v180 = __ldaxr(v178);
    while (__stlxr(v180 - 1, v178));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
LABEL_231:
    if (v177)
    {
      j__CFArrayAppendValue((CFMutableArrayRef)v568[0], v560[0]);
      v181 = (std::__shared_weak_count *)v560[1];
      if (v560[1])
        goto LABEL_235;
    }
    else
    {
      v558[0] = 0;
      v558[1] = 0;
      v181 = (std::__shared_weak_count *)v560[1];
      if (v560[1])
      {
LABEL_235:
        v182 = (unint64_t *)&v181->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
    }
    if (!v177)
      goto LABEL_267;
  }
  *(_OWORD *)v558 = *(_OWORD *)v568;
  v184 = (CFMutableDictionaryRef *)v568;
LABEL_266:
  *v184 = 0;
  v184[1] = 0;
LABEL_267:
  v185 = (std::__shared_weak_count *)v568[1];
  if (v568[1])
  {
    v186 = (unint64_t *)&v568[1]->info;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
      v189 = v558[0];
      v188 = (std::__shared_weak_count *)v558[1];
      if (v558[1])
        goto LABEL_272;
      goto LABEL_276;
    }
  }
  v189 = v558[0];
  v188 = (std::__shared_weak_count *)v558[1];
  if (!v558[1])
    goto LABEL_276;
LABEL_272:
  v190 = (unint64_t *)&v188->__shared_owners_;
  do
    v191 = __ldxr(v190);
  while (__stxr(v191 + 1, v190));
  do
    v192 = __ldaxr(v190);
  while (__stlxr(v192 - 1, v190));
  if (v192)
  {
LABEL_276:
    if (v189)
      goto LABEL_277;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
    if (v189)
LABEL_277:
      j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v141, v558[0]);
  }
  v193 = (std::__shared_weak_count *)v558[1];
  if (v558[1])
  {
    v194 = (unint64_t *)((char *)v558[1] + 8);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
LABEL_283:
  v196 = (std::__shared_weak_count *)v565[1];
  if (v565[1])
  {
    v197 = (unint64_t *)&v565[1]->info;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
  strcpy((char *)__dst, "0BU@_BDo@UBo]Q@@Y^WoY]QWU");
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)"Bo]Q@@Y^WoY]QWU", v138, v139, v140);
  v200 = v199;
  v201 = strlen(v199);
  if (v201 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v202 = v201;
  if (v201 >= 0x17)
  {
    v204 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v204 = v201 | 7;
    v205 = v204 + 1;
    v203 = operator new(v204 + 1);
    __p[0].i64[1] = v202;
    __p[1].i64[0] = v205 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v203;
  }
  else
  {
    __p[1].i8[7] = v201;
    v203 = __p;
    if (!v201)
      goto LABEL_298;
  }
  memmove(v203, v200, v202);
LABEL_298:
  *((_BYTE *)v203 + v202) = 0;
  sub_239BD7990(theArray, a2 + 88);
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&value);
  sub_239BB7018((uint64_t)a1, value.__r_.__value_.__l.__data_, (uint64_t)theArray);
  v209 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v210 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
      v212 = (std::__shared_weak_count *)theArray[1];
      if (theArray[1])
        goto LABEL_303;
      goto LABEL_306;
    }
  }
  v212 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_306;
LABEL_303:
  v213 = (unint64_t *)&v212->__shared_owners_;
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (v214)
  {
LABEL_306:
    if (__p[1].i8[7] < 0)
      goto LABEL_307;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
    if (__p[1].i8[7] < 0)
LABEL_307:
      operator delete((void *)__p[0].i64[0]);
  }
  __dst[0] = xmmword_239F1307C;
  *(_OWORD *)((char *)__dst + 15) = *(__int128 *)((char *)&xmmword_239F1307C + 15);
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F1307C + 15), v206, v207, v208);
  v216 = v215;
  v217 = strlen(v215);
  if (v217 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v218 = v217;
  if (v217 >= 0x17)
  {
    v220 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17)
      v220 = v217 | 7;
    v221 = v220 + 1;
    v219 = operator new(v220 + 1);
    __p[0].i64[1] = v218;
    __p[1].i64[0] = v221 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v219;
  }
  else
  {
    __p[1].i8[7] = v217;
    v219 = __p;
    if (!v217)
      goto LABEL_316;
  }
  memmove(v219, v216, v218);
LABEL_316:
  *((_BYTE *)v219 + v218) = 0;
  sub_239BD7990(theArray, a2 + 128);
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&value);
  sub_239BB7018((uint64_t)a1, value.__r_.__value_.__l.__data_, (uint64_t)theArray);
  v224 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v225 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
      v227 = (std::__shared_weak_count *)theArray[1];
      if (theArray[1])
        goto LABEL_321;
      goto LABEL_324;
    }
  }
  v227 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_324;
LABEL_321:
  v228 = (unint64_t *)&v227->__shared_owners_;
  do
    v229 = __ldaxr(v228);
  while (__stlxr(v229 - 1, v228));
  if (v229)
  {
LABEL_324:
    if (__p[1].i8[7] < 0)
      goto LABEL_325;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
    std::__shared_weak_count::__release_weak(v227);
    if (__p[1].i8[7] < 0)
LABEL_325:
      operator delete((void *)__p[0].i64[0]);
  }
  strcpy(__p[0].i8, "=OXMROIbPHQITbNXNNTRSbNITI^UTSZ");
  sub_2396F06F0((uint64_t)__p, *(int32x4_t *)"=OXMROIbPHQITbNXNNTRSbNITI^UTSZ", *(int8x16_t *)"NNTRSbNITI^UTSZ", v222, v223);
  v231 = v230;
  v232 = strlen(v230);
  if (v232 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v233 = (void *)v232;
  if (v232 >= 0x17)
  {
    v235 = (v232 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v232 | 7) != 0x17)
      v235 = v232 | 7;
    v236 = v235 + 1;
    v234 = operator new(v235 + 1);
    v562[1] = v233;
    v563 = v236 | 0x8000000000000000;
    v562[0] = v234;
    goto LABEL_333;
  }
  HIBYTE(v563) = v232;
  v234 = v562;
  if (v232)
LABEL_333:
    memmove(v234, v231, (size_t)v233);
  *((_BYTE *)v233 + (_QWORD)v234) = 0;
  sub_23962C714(&theDict);
  __dst[0] = xmmword_239F130BB;
  __dst[1] = *(_OWORD *)dbl_239F130CB;
  LODWORD(__dst[2]) = 921347;
  sub_2396F01D4((unsigned __int8 *)__dst, (int16x8_t)xmmword_239F130BB, dbl_239F130CB[0], v237, v238, v239);
  v241 = v240;
  v242 = strlen(v240);
  if (v242 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v243 = v242;
  if (v242 >= 0x17)
  {
    v245 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v242 | 7) != 0x17)
      v245 = v242 | 7;
    v246 = v245 + 1;
    p_value = (std::string *)operator new(v245 + 1);
    value.__r_.__value_.__l.__size_ = v243;
    value.__r_.__value_.__r.__words[2] = v246 | 0x8000000000000000;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)p_value;
  }
  else
  {
    *((_BYTE *)&value.__r_.__value_.__s + 23) = v242;
    p_value = &value;
    if (!v242)
      goto LABEL_342;
  }
  memmove(p_value, v241, v243);
LABEL_342:
  p_value->__r_.__value_.__s.__data_[v243] = 0;
  sub_239629EF4((uint64_t)&value, (CFStringRef *)theArray);
  sub_2396B4EAC((uint64_t)&theDict, theArray[0], (_BYTE *)(a2 + 168));
  v250 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_346;
  v251 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v252 = __ldaxr(v251);
  while (__stlxr(v252 - 1, v251));
  if (!v252)
  {
    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
    std::__shared_weak_count::__release_weak(v250);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
LABEL_347:
      operator delete(value.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_346:
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_347;
  }
  __dst[0] = xmmword_239F130DF;
  __dst[1] = *(_OWORD *)dbl_239F130EF;
  LOWORD(__dst[2]) = 28;
  sub_2396F0120((unsigned __int8 *)__dst, (int16x8_t)xmmword_239F130DF, dbl_239F130EF[0], v247, v248, v249);
  v254 = v253;
  v255 = strlen(v253);
  if (v255 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v256 = v255;
  if (v255 >= 0x17)
  {
    v258 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v255 | 7) != 0x17)
      v258 = v255 | 7;
    v259 = v258 + 1;
    v257 = (std::string *)operator new(v258 + 1);
    value.__r_.__value_.__l.__size_ = v256;
    value.__r_.__value_.__r.__words[2] = v259 | 0x8000000000000000;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)v257;
  }
  else
  {
    *((_BYTE *)&value.__r_.__value_.__s + 23) = v255;
    v257 = &value;
    if (!v255)
      goto LABEL_356;
  }
  memmove(v257, v254, v256);
LABEL_356:
  v257->__r_.__value_.__s.__data_[v256] = 0;
  sub_239629EF4((uint64_t)&value, (CFStringRef *)theArray);
  sub_239BB47DC((uint64_t)&theDict, theArray[0], a2 + 172);
  v262 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_360;
  v263 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v264 = __ldaxr(v263);
  while (__stlxr(v264 - 1, v263));
  if (!v264)
  {
    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
    std::__shared_weak_count::__release_weak(v262);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
LABEL_361:
      operator delete(value.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_360:
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_361;
  }
  __dst[0] = xmmword_239F13101;
  __dst[1] = xmmword_239F13111;
  sub_2396F06F0((uint64_t)__dst, (int32x4_t)xmmword_239F13101, xmmword_239F13111, v260, v261);
  v266 = v265;
  v267 = strlen(v265);
  if (v267 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v268 = v267;
  if (v267 >= 0x17)
  {
    v270 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v267 | 7) != 0x17)
      v270 = v267 | 7;
    v271 = v270 + 1;
    v269 = (std::string *)operator new(v270 + 1);
    value.__r_.__value_.__l.__size_ = v268;
    value.__r_.__value_.__r.__words[2] = v271 | 0x8000000000000000;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)v269;
  }
  else
  {
    *((_BYTE *)&value.__r_.__value_.__s + 23) = v267;
    v269 = &value;
    if (!v267)
      goto LABEL_370;
  }
  memmove(v269, v266, v268);
LABEL_370:
  v269->__r_.__value_.__s.__data_[v268] = 0;
  sub_239629EF4((uint64_t)&value, &v556);
  v276 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
  v275 = v556;
  v277 = theDict;
  if (!*((_QWORD *)&theDict + 1))
    goto LABEL_375;
  v278 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
  do
    v279 = __ldxr(v278);
  while (__stxr(v279 + 1, v278));
  do
    v280 = __ldaxr(v278);
  while (__stlxr(v280 - 1, v278));
  if (v280)
  {
LABEL_375:
    if (v277)
      goto LABEL_376;
LABEL_480:
    v333 = v557;
    if (v557)
      goto LABEL_481;
LABEL_484:
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_485;
    goto LABEL_486;
  }
  ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
  std::__shared_weak_count::__release_weak(v276);
  if (!v277)
    goto LABEL_480;
LABEL_376:
  if (sub_23962C8DC((const __CFDictionary *)theDict, v275))
    goto LABEL_480;
  sub_23962BDF8((std::__shared_weak_count_vtbl **)v560);
  v282 = v560[0];
  v281 = (std::__shared_weak_count *)v560[1];
  if (v560[1])
  {
    v283 = (unint64_t *)((char *)v560[1] + 8);
    do
      v284 = __ldxr(v283);
    while (__stxr(v284 + 1, v283));
    do
      v285 = __ldaxr(v283);
    while (__stlxr(v285 - 1, v283));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
      if (!v282)
        goto LABEL_463;
LABEL_383:
      v286 = *(uint64_t **)(a2 + 176);
      v287 = *(uint64_t **)(a2 + 184);
      if (v286 == v287)
      {
LABEL_447:
        *(_OWORD *)v565 = *(_OWORD *)v560;
        v321 = v560;
        goto LABEL_464;
      }
      while (1)
      {
        v559 = *v286;
        sub_23962BDF8((std::__shared_weak_count_vtbl **)v568);
        v288 = *(_OWORD *)v568;
        if (!v568[1])
          goto LABEL_389;
        v289 = (unint64_t *)&v568[1]->info;
        do
          v290 = __ldxr(v289);
        while (__stxr(v290 + 1, v289));
        do
          v291 = __ldaxr(v289);
        while (__stlxr(v291 - 1, v289));
        if (!v291)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v288 + 1) + 16))(*((_QWORD *)&v288 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v288 + 1));
          if (!(_QWORD)v288)
            goto LABEL_424;
        }
        else
        {
LABEL_389:
          if (!(_QWORD)v288)
            goto LABEL_424;
        }
        sub_239629634(theArray, &v559);
        v293 = theArray[0];
        v292 = (std::__shared_weak_count *)theArray[1];
        if (!theArray[1])
          goto LABEL_395;
        v294 = (unint64_t *)((char *)theArray[1] + 8);
        do
          v295 = __ldxr(v294);
        while (__stxr(v295 + 1, v294));
        do
          v296 = __ldaxr(v294);
        while (__stlxr(v296 - 1, v294));
        if (!v296)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
          if (v293)
          {
LABEL_396:
            j__CFArrayAppendValue((CFMutableArrayRef)v568[0], theArray[0]);
            v297 = 1;
            v298 = (std::__shared_weak_count *)theArray[1];
            if (!theArray[1])
              goto LABEL_405;
            goto LABEL_402;
          }
        }
        else
        {
LABEL_395:
          if (v293)
            goto LABEL_396;
        }
        v297 = 0;
        v298 = (std::__shared_weak_count *)theArray[1];
        if (!theArray[1])
          goto LABEL_405;
LABEL_402:
        v299 = (unint64_t *)&v298->__shared_owners_;
        do
          v300 = __ldaxr(v299);
        while (__stlxr(v300 - 1, v299));
        if (v300)
        {
LABEL_405:
          if (!v293)
            goto LABEL_424;
          goto LABEL_406;
        }
        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
        std::__shared_weak_count::__release_weak(v298);
        if (!v293)
          goto LABEL_424;
LABEL_406:
        sub_239629634(theArray, (char *)&v559 + 4);
        v302 = theArray[0];
        v301 = (std::__shared_weak_count *)theArray[1];
        if (!theArray[1])
          goto LABEL_411;
        v303 = (unint64_t *)((char *)theArray[1] + 8);
        do
          v304 = __ldxr(v303);
        while (__stxr(v304 + 1, v303));
        do
          v305 = __ldaxr(v303);
        while (__stlxr(v305 - 1, v303));
        if (!v305)
        {
          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
          std::__shared_weak_count::__release_weak(v301);
          if (v302)
          {
LABEL_412:
            j__CFArrayAppendValue((CFMutableArrayRef)v568[0], theArray[0]);
            v306 = (std::__shared_weak_count *)theArray[1];
            if (!theArray[1])
              goto LABEL_421;
            goto LABEL_418;
          }
        }
        else
        {
LABEL_411:
          if (v302)
            goto LABEL_412;
        }
        v297 = 0;
        v306 = (std::__shared_weak_count *)theArray[1];
        if (!theArray[1])
          goto LABEL_421;
LABEL_418:
        v307 = (unint64_t *)&v306->__shared_owners_;
        do
          v308 = __ldaxr(v307);
        while (__stlxr(v308 - 1, v307));
        if (v308)
        {
LABEL_421:
          if (!v297)
            goto LABEL_424;
          goto LABEL_422;
        }
        ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
        std::__shared_weak_count::__release_weak(v306);
        if (!v297)
        {
LABEL_424:
          v309 = v558;
          goto LABEL_425;
        }
LABEL_422:
        *(_OWORD *)v558 = *(_OWORD *)v568;
        v309 = (CFMutableDictionaryRef *)v568;
LABEL_425:
        *v309 = 0;
        v309[1] = 0;
        v310 = (std::__shared_weak_count *)v568[1];
        if (!v568[1])
          goto LABEL_429;
        v311 = (unint64_t *)&v568[1]->info;
        do
          v312 = __ldaxr(v311);
        while (__stlxr(v312 - 1, v311));
        if (!v312)
        {
          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
          std::__shared_weak_count::__release_weak(v310);
          v314 = v558[0];
          v313 = (std::__shared_weak_count *)v558[1];
          if (!v558[1])
            goto LABEL_434;
        }
        else
        {
LABEL_429:
          v314 = v558[0];
          v313 = (std::__shared_weak_count *)v558[1];
          if (!v558[1])
            goto LABEL_434;
        }
        v315 = (unint64_t *)&v313->__shared_owners_;
        do
          v316 = __ldxr(v315);
        while (__stxr(v316 + 1, v315));
        do
          v317 = __ldaxr(v315);
        while (__stlxr(v317 - 1, v315));
        if (v317)
        {
LABEL_434:
          if (v314)
            goto LABEL_435;
          goto LABEL_440;
        }
        ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
        std::__shared_weak_count::__release_weak(v313);
        if (v314)
        {
LABEL_435:
          j__CFArrayAppendValue(v560[0], v558[0]);
          v318 = (std::__shared_weak_count *)v558[1];
          if (v558[1])
            goto LABEL_441;
          goto LABEL_445;
        }
LABEL_440:
        v565[0] = 0;
        v565[1] = 0;
        v318 = (std::__shared_weak_count *)v558[1];
        if (v558[1])
        {
LABEL_441:
          v319 = (unint64_t *)&v318->__shared_owners_;
          do
            v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (!v320)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
        }
LABEL_445:
        if (!v314)
          goto LABEL_465;
        if (++v286 == v287)
          goto LABEL_447;
      }
    }
  }
  if (v282)
    goto LABEL_383;
LABEL_463:
  v321 = (CFMutableArrayRef *)v565;
LABEL_464:
  *v321 = 0;
  v321[1] = 0;
LABEL_465:
  v322 = (std::__shared_weak_count *)v560[1];
  if (v560[1])
  {
    v323 = (unint64_t *)((char *)v560[1] + 8);
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
      v326 = v565[0];
      v325 = (std::__shared_weak_count *)v565[1];
      if (v565[1])
        goto LABEL_470;
      goto LABEL_474;
    }
  }
  v326 = v565[0];
  v325 = (std::__shared_weak_count *)v565[1];
  if (!v565[1])
    goto LABEL_474;
LABEL_470:
  v327 = (unint64_t *)&v325->__shared_owners_;
  do
    v328 = __ldxr(v327);
  while (__stxr(v328 + 1, v327));
  do
    v329 = __ldaxr(v327);
  while (__stlxr(v329 - 1, v327));
  if (v329)
  {
LABEL_474:
    if (v326)
      goto LABEL_475;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
    std::__shared_weak_count::__release_weak(v325);
    if (v326)
LABEL_475:
      j__CFDictionaryAddValue((CFMutableDictionaryRef)theDict, v275, v565[0]);
  }
  v330 = (std::__shared_weak_count *)v565[1];
  if (!v565[1])
    goto LABEL_480;
  v331 = (unint64_t *)&v565[1]->info;
  do
    v332 = __ldaxr(v331);
  while (__stlxr(v332 - 1, v331));
  if (v332)
    goto LABEL_480;
  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
  std::__shared_weak_count::__release_weak(v330);
  v333 = v557;
  if (!v557)
    goto LABEL_484;
LABEL_481:
  v334 = (unint64_t *)&v333->__shared_owners_;
  do
    v335 = __ldaxr(v334);
  while (__stlxr(v335 - 1, v334));
  if (v335)
    goto LABEL_484;
  ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
  std::__shared_weak_count::__release_weak(v333);
  if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
LABEL_485:
    operator delete(value.__r_.__value_.__l.__data_);
LABEL_486:
  v337 = v336;
  v338 = strlen(v336);
  if (v338 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v339 = (__CFArray *)v338;
  if (v338 >= 0x17)
  {
    v341 = (v338 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v338 | 7) != 0x17)
      v341 = v338 | 7;
    v342 = v341 + 1;
    v340 = (__CFArray *)operator new(v341 + 1);
    theArray[1] = v339;
    theArray[2] = (CFMutableArrayRef)(v342 | 0x8000000000000000);
    theArray[0] = v340;
    goto LABEL_493;
  }
  HIBYTE(theArray[2]) = v338;
  v340 = (__CFArray *)theArray;
  if (v338)
LABEL_493:
    memmove(v340, v337, (size_t)v339);
  *((_BYTE *)v339 + (_QWORD)v340) = 0;
  sub_23962C714(v560);
  for (i = *(uint64_t **)(a2 + 216); i; i = (uint64_t *)*i)
  {
    while (1)
    {
      std::to_string(&value, *((_DWORD *)i + 4));
      sub_239629EF4((uint64_t)&value, v568);
      sub_239BB4A9C((uint64_t)v560, v568[0], (uint64_t)(i + 3));
      v344 = (std::__shared_weak_count *)v568[1];
      if (v568[1])
      {
        v345 = (unint64_t *)&v568[1]->info;
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
      }
      if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
        break;
      i = (uint64_t *)*i;
      if (!i)
        goto LABEL_504;
    }
    operator delete(value.__r_.__value_.__l.__data_);
  }
LABEL_504:
  sub_239629EF4((uint64_t)theArray, (CFStringRef *)&value);
  sub_239BB7018((uint64_t)&theDict, value.__r_.__value_.__l.__data_, (uint64_t)v560);
  v347 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v348 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
      v350 = (std::__shared_weak_count *)v560[1];
      if (v560[1])
        goto LABEL_509;
      goto LABEL_512;
    }
  }
  v350 = (std::__shared_weak_count *)v560[1];
  if (!v560[1])
    goto LABEL_512;
LABEL_509:
  v351 = (unint64_t *)&v350->__shared_owners_;
  do
    v352 = __ldaxr(v351);
  while (__stlxr(v352 - 1, v351));
  if (v352)
  {
LABEL_512:
    if (SHIBYTE(theArray[2]) < 0)
      goto LABEL_513;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
    std::__shared_weak_count::__release_weak(v350);
    if (SHIBYTE(theArray[2]) < 0)
LABEL_513:
      operator delete(theArray[0]);
  }
  sub_239629EF4((uint64_t)v562, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&theDict);
  v354 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (*((_QWORD *)&__dst[0] + 1))
  {
    v355 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
      v357 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
      if (*((_QWORD *)&theDict + 1))
        goto LABEL_519;
      goto LABEL_522;
    }
  }
  v357 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
  if (!*((_QWORD *)&theDict + 1))
    goto LABEL_522;
LABEL_519:
  v358 = (unint64_t *)&v357->__shared_owners_;
  do
    v359 = __ldaxr(v358);
  while (__stlxr(v359 - 1, v358));
  if (v359)
  {
LABEL_522:
    if (SHIBYTE(v563) < 0)
      goto LABEL_523;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
    std::__shared_weak_count::__release_weak(v357);
    if (SHIBYTE(v563) < 0)
LABEL_523:
      operator delete(v562[0]);
  }
  theArray[0] = (CFMutableArrayRef)0x20A0E1309121567;
  WORD2(theArray[1]) = 8;
  LODWORD(theArray[1]) = 17370680;
  sub_23971A32C((uint64_t)theArray, v353);
  v361 = v360;
  v362 = strlen(v360);
  if (v362 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v363 = v362;
  if (v362 >= 0x17)
  {
    v365 = (v362 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v362 | 7) != 0x17)
      v365 = v362 | 7;
    v366 = v365 + 1;
    v364 = operator new(v365 + 1);
    *((_QWORD *)&__dst[0] + 1) = v363;
    *(_QWORD *)&__dst[1] = v366 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v364;
  }
  else
  {
    BYTE7(__dst[1]) = v362;
    v364 = __dst;
    if (!v362)
      goto LABEL_532;
  }
  memmove(v364, v361, v363);
LABEL_532:
  *((_BYTE *)v364 + v363) = 0;
  sub_239BCA2E4((uint64_t)&value, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 240));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t)&value);
  v367 = (std::__shared_weak_count *)__p[0].i64[1];
  if (__p[0].i64[1])
  {
    v368 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
      std::__shared_weak_count::__release_weak(v367);
      v370 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
      if (value.__r_.__value_.__l.__size_)
        goto LABEL_537;
      goto LABEL_540;
    }
  }
  v370 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (!value.__r_.__value_.__l.__size_)
    goto LABEL_540;
LABEL_537:
  v371 = (unint64_t *)&v370->__shared_owners_;
  do
    v372 = __ldaxr(v371);
  while (__stlxr(v372 - 1, v371));
  if (v372)
  {
LABEL_540:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_541;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
    std::__shared_weak_count::__release_weak(v370);
    if (SBYTE7(__dst[1]) < 0)
LABEL_541:
      operator delete(*(void **)&__dst[0]);
  }
  v565[0] = (CFStringRef)0x363A063D3C2A2C59;
  strcpy((char *)&v565[1], "7?0>");
  v373 = sub_239510ECC((uint64_t)v565);
  v374 = strlen(v373);
  if (v374 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v375 = v374;
  if (v374 >= 0x17)
  {
    v377 = (v374 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v374 | 7) != 0x17)
      v377 = v374 | 7;
    v378 = v377 + 1;
    v376 = (std::string *)operator new(v377 + 1);
    value.__r_.__value_.__l.__size_ = v375;
    value.__r_.__value_.__r.__words[2] = v378 | 0x8000000000000000;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)v376;
    goto LABEL_549;
  }
  *((_BYTE *)&value.__r_.__value_.__s + 23) = v374;
  v376 = &value;
  if (v374)
LABEL_549:
    memmove(v376, v373, v375);
  v376->__r_.__value_.__s.__data_[v375] = 0;
  sub_23962C714(v558);
  __dst[0] = xmmword_239F118B3;
  *(_OWORD *)((char *)__dst + 15) = *(__int128 *)((char *)&xmmword_239F118B3 + 15);
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F118B3 + 15), v379, v380, v381);
  v383 = v382;
  v384 = strlen(v382);
  if (v384 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v385 = v384;
  if (v384 >= 0x17)
  {
    v387 = (v384 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v384 | 7) != 0x17)
      v387 = v384 | 7;
    v388 = v387 + 1;
    v386 = operator new(v387 + 1);
    __p[0].i64[1] = v385;
    __p[1].i64[0] = v388 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v386;
  }
  else
  {
    __p[1].i8[7] = v384;
    v386 = __p;
    if (!v384)
      goto LABEL_558;
  }
  memmove(v386, v383, v385);
LABEL_558:
  *((_BYTE *)v386 + v385) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)theArray);
  sub_2396B4148((uint64_t)v558, theArray[0], a2 + 460);
  v392 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_562;
  v393 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v394 = __ldaxr(v393);
  while (__stlxr(v394 - 1, v393));
  if (!v394)
  {
    ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
    std::__shared_weak_count::__release_weak(v392);
    if (__p[1].i8[7] < 0)
LABEL_563:
      operator delete((void *)__p[0].i64[0]);
  }
  else
  {
LABEL_562:
    if (__p[1].i8[7] < 0)
      goto LABEL_563;
  }
  strcpy((char *)__dst, "1DBTnACX^CnW^CnBRP]TnCTR^GTCH");
  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)"nBRP]TnCTR^GTCH", v389, v390, v391);
  v396 = v395;
  v397 = strlen(v395);
  if (v397 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v398 = v397;
  if (v397 >= 0x17)
  {
    v400 = (v397 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v397 | 7) != 0x17)
      v400 = v397 | 7;
    v401 = v400 + 1;
    v399 = operator new(v400 + 1);
    __p[0].i64[1] = v398;
    __p[1].i64[0] = v401 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v399;
  }
  else
  {
    __p[1].i8[7] = v397;
    v399 = __p;
    if (!v397)
      goto LABEL_572;
  }
  memmove(v399, v396, v398);
LABEL_572:
  *((_BYTE *)v399 + v398) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)theArray);
  sub_2396B4EAC((uint64_t)v558, theArray[0], (_BYTE *)(a2 + 456));
  v402 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_576;
  v403 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v404 = __ldaxr(v403);
  while (__stlxr(v404 - 1, v403));
  if (!v404)
  {
    ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
    std::__shared_weak_count::__release_weak(v402);
    if (__p[1].i8[7] < 0)
LABEL_577:
      operator delete((void *)__p[0].i64[0]);
  }
  else
  {
LABEL_576:
    if (__p[1].i8[7] < 0)
      goto LABEL_577;
  }
  strcpy((char *)theArray, "(J]NNMZwDMFO\\@");
  sub_23958E5E0((uint64_t)theArray);
  v406 = v405;
  v407 = strlen(v405);
  if (v407 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v408 = v407;
  if (v407 >= 0x17)
  {
    v410 = (v407 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v407 | 7) != 0x17)
      v410 = v407 | 7;
    v411 = v410 + 1;
    v409 = operator new(v410 + 1);
    *((_QWORD *)&__dst[0] + 1) = v408;
    *(_QWORD *)&__dst[1] = v411 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v409;
  }
  else
  {
    BYTE7(__dst[1]) = v407;
    v409 = __dst;
    if (!v407)
      goto LABEL_586;
  }
  memmove(v409, v406, v408);
LABEL_586:
  *((_BYTE *)v409 + v408) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4148((uint64_t)v558, (const void *)__p[0].i64[0], a2 + 464);
  v412 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_590;
  v413 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v414 = __ldaxr(v413);
  while (__stlxr(v414 - 1, v413));
  if (!v414)
  {
    ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
    std::__shared_weak_count::__release_weak(v412);
    if (SBYTE7(__dst[1]) < 0)
LABEL_591:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_590:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_591;
  }
  v562[0] = (void *)0x6B6A676E66646705;
  sub_23958E5E0((uint64_t)v562);
  v416 = v415;
  v417 = strlen(v415);
  if (v417 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v418 = v417;
  if (v417 >= 0x17)
  {
    v420 = (v417 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v417 | 7) != 0x17)
      v420 = v417 | 7;
    v421 = v420 + 1;
    v419 = operator new(v420 + 1);
    *((_QWORD *)&__dst[0] + 1) = v418;
    *(_QWORD *)&__dst[1] = v421 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v419;
  }
  else
  {
    BYTE7(__dst[1]) = v417;
    v419 = __dst;
    if (!v417)
      goto LABEL_600;
  }
  memmove(v419, v416, v418);
LABEL_600:
  *((_BYTE *)v419 + v418) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)theArray);
  v425 = theArray[0];
  v427 = v558[0];
  v426 = (std::__shared_weak_count *)v558[1];
  if (!v558[1])
    goto LABEL_605;
  v428 = (unint64_t *)((char *)v558[1] + 8);
  do
    v429 = __ldxr(v428);
  while (__stxr(v429 + 1, v428));
  do
    v430 = __ldaxr(v428);
  while (__stlxr(v430 - 1, v428));
  if (v430)
  {
LABEL_605:
    if (v427)
      goto LABEL_606;
    goto LABEL_640;
  }
  ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
  std::__shared_weak_count::__release_weak(v426);
  if (!v427)
    goto LABEL_640;
LABEL_606:
  if (!sub_23962C8DC(v558[0], v425))
  {
    LODWORD(v568[0]) = *(_DWORD *)(a2 + 472);
    sub_239629634(__p, v568);
    v431 = __p[0];
    if (!__p[0].i64[1])
      goto LABEL_612;
    v432 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v433 = __ldxr(v432);
    while (__stxr(v433 + 1, v432));
    do
      v434 = __ldaxr(v432);
    while (__stlxr(v434 - 1, v432));
    if (!v434)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v431.i64[1] + 16))(v431.i64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v431.i64[1]);
      if (v431.i64[0])
LABEL_613:
        j__CFDictionaryAddValue(v558[0], v425, (const void *)__p[0].i64[0]);
    }
    else
    {
LABEL_612:
      if (v431.i64[0])
        goto LABEL_613;
    }
    v435 = (std::__shared_weak_count *)__p[0].i64[1];
    if (__p[0].i64[1])
    {
      v436 = (unint64_t *)(__p[0].i64[1] + 8);
      do
        v437 = __ldaxr(v436);
      while (__stlxr(v437 - 1, v436));
      if (!v437)
      {
        ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
        std::__shared_weak_count::__release_weak(v435);
      }
    }
  }
LABEL_640:
  v438 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_644;
  v439 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v440 = __ldaxr(v439);
  while (__stlxr(v440 - 1, v439));
  if (!v440)
  {
    ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
    std::__shared_weak_count::__release_weak(v438);
    if (SBYTE7(__dst[1]) < 0)
LABEL_645:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_644:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_645;
  }
  strcpy((char *)__dst, "0ECUo@_CUoWBQ@Xo_@DY]YJQDY_^");
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)"@Xo_@DY]YJQDY_^", v422, v423, v424);
  v442 = v441;
  v443 = strlen(v441);
  if (v443 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v444 = v443;
  if (v443 >= 0x17)
  {
    v446 = (v443 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v443 | 7) != 0x17)
      v446 = v443 | 7;
    v447 = v446 + 1;
    v445 = operator new(v446 + 1);
    __p[0].i64[1] = v444;
    __p[1].i64[0] = v447 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v445;
  }
  else
  {
    __p[1].i8[7] = v443;
    v445 = __p;
    if (!v443)
      goto LABEL_654;
  }
  memmove(v445, v442, v444);
LABEL_654:
  *((_BYTE *)v445 + v444) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)theArray);
  sub_2396B4EAC((uint64_t)v558, theArray[0], (_BYTE *)(a2 + 468));
  v450 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_658;
  v451 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v452 = __ldaxr(v451);
  while (__stlxr(v452 - 1, v451));
  if (!v452)
  {
    ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
    std::__shared_weak_count::__release_weak(v450);
    if (__p[1].i8[7] < 0)
LABEL_659:
      operator delete((void *)__p[0].i64[0]);
  }
  else
  {
LABEL_658:
    if (__p[1].i8[7] < 0)
      goto LABEL_659;
  }
  __dst[0] = xmmword_239F1190D;
  strcpy((char *)&__dst[1], "m|fJt{rypJszgJpmet{qpqJxtav}");
  sub_2396F0DB0((unsigned __int8 *)__dst, *(double *)"Jpmet{qpqJxtav}", *(double *)"m|fJt{rypJszgJpmet{qpqJxtav}", v448, v449);
  v454 = v453;
  v455 = strlen(v453);
  if (v455 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v456 = v455;
  if (v455 >= 0x17)
  {
    v458 = (v455 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v455 | 7) != 0x17)
      v458 = v455 | 7;
    v459 = v458 + 1;
    v457 = operator new(v458 + 1);
    __p[0].i64[1] = v456;
    __p[1].i64[0] = v459 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v457;
  }
  else
  {
    __p[1].i8[7] = v455;
    v457 = __p;
    if (!v455)
      goto LABEL_668;
  }
  memmove(v457, v454, v456);
LABEL_668:
  *((_BYTE *)v457 + v456) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)theArray);
  sub_2397373B0((uint64_t)v558, theArray[0], a2 + 480);
  v463 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_672;
  v464 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v465 = __ldaxr(v464);
  while (__stlxr(v465 - 1, v464));
  if (!v465)
  {
    ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
    std::__shared_weak_count::__release_weak(v463);
    if (__p[1].i8[7] < 0)
LABEL_673:
      operator delete((void *)__p[0].i64[0]);
  }
  else
  {
LABEL_672:
    if (__p[1].i8[7] < 0)
      goto LABEL_673;
  }
  strcpy((char *)theArray, "=^RS[TZbNQ\\PbYX_HZ");
  sub_23958E450((uint64_t)theArray, *(int32x4_t *)"=^RS[TZbNQ\\PbYX_HZ", v460, v461, v462);
  v467 = v466;
  v468 = strlen(v466);
  if (v468 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v469 = v468;
  if (v468 >= 0x17)
  {
    v471 = (v468 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v468 | 7) != 0x17)
      v471 = v468 | 7;
    v472 = v471 + 1;
    v470 = operator new(v471 + 1);
    __p[0].i64[1] = v469;
    __p[1].i64[0] = v472 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v470;
    goto LABEL_681;
  }
  __p[1].i8[7] = v468;
  v470 = __p;
  if (v468)
LABEL_681:
    memmove(v470, v467, v469);
  *((_BYTE *)v470 + v469) = 0;
  sub_23962C714(v560);
  v568[0] = (CFStringRef)0x63606F645E726801;
  LODWORD(v568[1]) = 6644845;
  v473 = sub_23958E4C8((uint64_t)v568);
  v474 = strlen(v473);
  if (v474 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v475 = v474;
  if (v474 >= 0x17)
  {
    v477 = (v474 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v474 | 7) != 0x17)
      v477 = v474 | 7;
    v478 = v477 + 1;
    v476 = operator new(v477 + 1);
    *((_QWORD *)&__dst[0] + 1) = v475;
    *(_QWORD *)&__dst[1] = v478 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v476;
  }
  else
  {
    BYTE7(__dst[1]) = v474;
    v476 = __dst;
    if (!v474)
      goto LABEL_690;
  }
  memmove(v476, v473, v475);
LABEL_690:
  *((_BYTE *)v476 + v475) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v562);
  sub_2396B4EAC((uint64_t)v560, v562[0], (_BYTE *)(a2 + 488));
  v479 = (std::__shared_weak_count *)v562[1];
  if (!v562[1])
    goto LABEL_694;
  v480 = (unint64_t *)((char *)v562[1] + 8);
  do
    v481 = __ldaxr(v480);
  while (__stlxr(v481 - 1, v480));
  if (!v481)
  {
    ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
    std::__shared_weak_count::__release_weak(v479);
    if (SBYTE7(__dst[1]) < 0)
LABEL_695:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_694:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_695;
  }
  *(_OWORD *)v562 = xmmword_239F1194D;
  LOWORD(v563) = 98;
  v482 = sub_239A91B18((int8x16_t *)v562);
  v483 = strlen(v482->i8);
  if (v483 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v484 = v483;
  if (v483 >= 0x17)
  {
    v486 = (v483 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v483 | 7) != 0x17)
      v486 = v483 | 7;
    v487 = v486 + 1;
    v485 = operator new(v486 + 1);
    *((_QWORD *)&__dst[0] + 1) = v484;
    *(_QWORD *)&__dst[1] = v487 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v485;
  }
  else
  {
    BYTE7(__dst[1]) = v483;
    v485 = __dst;
    if (!v483)
      goto LABEL_704;
  }
  memmove(v485, v482, v484);
LABEL_704:
  *((_BYTE *)v485 + v484) = 0;
  sub_239629EF4((uint64_t)__dst, v568);
  sub_2396B4148((uint64_t)v560, v568[0], a2 + 492);
  v488 = (std::__shared_weak_count *)v568[1];
  if (!v568[1])
    goto LABEL_708;
  v489 = (unint64_t *)&v568[1]->info;
  do
    v490 = __ldaxr(v489);
  while (__stlxr(v490 - 1, v489));
  if (!v490)
  {
    ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
    std::__shared_weak_count::__release_weak(v488);
    if (SBYTE7(__dst[1]) < 0)
LABEL_709:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_708:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_709;
  }
  strcpy((char *)v568, "1]^RnX_ETCGP]B");
  sub_23958E5E0((uint64_t)v568);
  v492 = v491;
  v493 = strlen(v491);
  if (v493 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v494 = v493;
  if (v493 >= 0x17)
  {
    v496 = (v493 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v493 | 7) != 0x17)
      v496 = v493 | 7;
    v497 = v496 + 1;
    v495 = operator new(v496 + 1);
    *((_QWORD *)&__dst[0] + 1) = v494;
    *(_QWORD *)&__dst[1] = v497 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v495;
  }
  else
  {
    BYTE7(__dst[1]) = v493;
    v495 = __dst;
    if (!v493)
      goto LABEL_718;
  }
  memmove(v495, v492, v494);
LABEL_718:
  *((_BYTE *)v495 + v494) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v562);
  sub_239BC17EC((uint64_t)v560, v562[0], (uint64_t *)(a2 + 504));
  v498 = (std::__shared_weak_count *)v562[1];
  if (!v562[1])
    goto LABEL_722;
  v499 = (unint64_t *)((char *)v562[1] + 8);
  do
    v500 = __ldaxr(v499);
  while (__stlxr(v500 - 1, v499));
  if (!v500)
  {
    ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
    std::__shared_weak_count::__release_weak(v498);
    if (SBYTE7(__dst[1]) < 0)
LABEL_723:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_722:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_723;
  }
  *(_OWORD *)v562 = xmmword_239F1195F;
  LOBYTE(v563) = 0;
  sub_2396EFA24((uint64_t)v562);
  v502 = v501;
  v503 = strlen(v501);
  if (v503 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v504 = v503;
  if (v503 >= 0x17)
  {
    v506 = (v503 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v503 | 7) != 0x17)
      v506 = v503 | 7;
    v507 = v506 + 1;
    v505 = operator new(v506 + 1);
    *((_QWORD *)&__dst[0] + 1) = v504;
    *(_QWORD *)&__dst[1] = v507 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v505;
  }
  else
  {
    BYTE7(__dst[1]) = v503;
    v505 = __dst;
    if (!v503)
      goto LABEL_732;
  }
  memmove(v505, v502, v504);
LABEL_732:
  *((_BYTE *)v505 + v504) = 0;
  sub_239629EF4((uint64_t)__dst, v568);
  sub_239BC17EC((uint64_t)v560, v568[0], (uint64_t *)(a2 + 528));
  v508 = (std::__shared_weak_count *)v568[1];
  if (!v568[1])
    goto LABEL_736;
  v509 = (unint64_t *)&v568[1]->info;
  do
    v510 = __ldaxr(v509);
  while (__stlxr(v510 - 1, v509));
  if (!v510)
  {
    ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
    std::__shared_weak_count::__release_weak(v508);
    if (SBYTE7(__dst[1]) < 0)
LABEL_737:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_736:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_737;
  }
  *(_OWORD *)v562 = xmmword_239F11970;
  LOBYTE(v563) = 0;
  sub_2396EFA24((uint64_t)v562);
  v512 = v511;
  v513 = strlen(v511);
  if (v513 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v514 = v513;
  if (v513 >= 0x17)
  {
    v516 = (v513 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v513 | 7) != 0x17)
      v516 = v513 | 7;
    v517 = v516 + 1;
    v515 = operator new(v516 + 1);
    *((_QWORD *)&__dst[0] + 1) = v514;
    *(_QWORD *)&__dst[1] = v517 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v515;
  }
  else
  {
    BYTE7(__dst[1]) = v513;
    v515 = __dst;
    if (!v513)
      goto LABEL_746;
  }
  memmove(v515, v512, v514);
LABEL_746:
  *((_BYTE *)v515 + v514) = 0;
  sub_239629EF4((uint64_t)__dst, v568);
  sub_239BC17EC((uint64_t)v560, v568[0], (uint64_t *)(a2 + 552));
  v518 = (std::__shared_weak_count *)v568[1];
  if (!v568[1])
    goto LABEL_750;
  v519 = (unint64_t *)&v568[1]->info;
  do
    v520 = __ldaxr(v519);
  while (__stlxr(v520 - 1, v519));
  if (!v520)
  {
    ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
    std::__shared_weak_count::__release_weak(v518);
    if (SBYTE7(__dst[1]) < 0)
LABEL_751:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_750:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_751;
  }
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)v558, *(const void **)&__dst[0], (uint64_t)v560);
  v521 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (*((_QWORD *)&__dst[0] + 1))
  {
    v522 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
    do
      v523 = __ldaxr(v522);
    while (__stlxr(v523 - 1, v522));
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
      v524 = (std::__shared_weak_count *)v560[1];
      if (v560[1])
        goto LABEL_757;
      goto LABEL_760;
    }
  }
  v524 = (std::__shared_weak_count *)v560[1];
  if (!v560[1])
    goto LABEL_760;
LABEL_757:
  v525 = (unint64_t *)&v524->__shared_owners_;
  do
    v526 = __ldaxr(v525);
  while (__stlxr(v526 - 1, v525));
  if (v526)
  {
LABEL_760:
    if (__p[1].i8[7] < 0)
      goto LABEL_761;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
    std::__shared_weak_count::__release_weak(v524);
    if (__p[1].i8[7] < 0)
LABEL_761:
      operator delete((void *)__p[0].i64[0]);
  }
  v562[0] = (void *)0x38030602150F1367;
  LODWORD(v562[1]) = 1312790;
  v527 = sub_23958E4C8((uint64_t)v562);
  v528 = strlen(v527);
  if (v528 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v529 = v528;
  if (v528 >= 0x17)
  {
    v531 = (v528 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v528 | 7) != 0x17)
      v531 = v528 | 7;
    v532 = v531 + 1;
    v530 = operator new(v531 + 1);
    *((_QWORD *)&__dst[0] + 1) = v529;
    *(_QWORD *)&__dst[1] = v532 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v530;
  }
  else
  {
    BYTE7(__dst[1]) = v528;
    v530 = __dst;
    if (!v528)
      goto LABEL_770;
  }
  memmove(v530, v527, v529);
LABEL_770:
  *((_BYTE *)v530 + v529) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)theArray);
  v533 = theArray[0];
  v535 = v558[0];
  v534 = (std::__shared_weak_count *)v558[1];
  if (!v558[1])
    goto LABEL_775;
  v536 = (unint64_t *)((char *)v558[1] + 8);
  do
    v537 = __ldxr(v536);
  while (__stxr(v537 + 1, v536));
  do
    v538 = __ldaxr(v536);
  while (__stlxr(v538 - 1, v536));
  if (v538)
  {
LABEL_775:
    if (v535)
      goto LABEL_776;
    goto LABEL_810;
  }
  ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
  std::__shared_weak_count::__release_weak(v534);
  if (!v535)
    goto LABEL_810;
LABEL_776:
  if (!sub_23962C8DC(v558[0], v533))
  {
    LODWORD(v568[0]) = *(_DWORD *)(a2 + 576);
    sub_2396298C4(__p, v568);
    v539 = __p[0];
    if (!__p[0].i64[1])
      goto LABEL_782;
    v540 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v541 = __ldxr(v540);
    while (__stxr(v541 + 1, v540));
    do
      v542 = __ldaxr(v540);
    while (__stlxr(v542 - 1, v540));
    if (!v542)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v539.i64[1] + 16))(v539.i64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v539.i64[1]);
      if (v539.i64[0])
LABEL_783:
        j__CFDictionaryAddValue(v558[0], v533, (const void *)__p[0].i64[0]);
    }
    else
    {
LABEL_782:
      if (v539.i64[0])
        goto LABEL_783;
    }
    v543 = (std::__shared_weak_count *)__p[0].i64[1];
    if (__p[0].i64[1])
    {
      v544 = (unint64_t *)(__p[0].i64[1] + 8);
      do
        v545 = __ldaxr(v544);
      while (__stlxr(v545 - 1, v544));
      if (!v545)
      {
        ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
        std::__shared_weak_count::__release_weak(v543);
      }
    }
  }
LABEL_810:
  v546 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_814;
  v547 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v548 = __ldaxr(v547);
  while (__stlxr(v548 - 1, v547));
  if (!v548)
  {
    ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
    std::__shared_weak_count::__release_weak(v546);
    if (SBYTE7(__dst[1]) < 0)
LABEL_815:
      operator delete(*(void **)&__dst[0]);
  }
  else
  {
LABEL_814:
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_815;
  }
  sub_239629EF4((uint64_t)&value, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)v558);
  v549 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (*((_QWORD *)&__dst[0] + 1))
  {
    v550 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
    do
      v551 = __ldaxr(v550);
    while (__stlxr(v551 - 1, v550));
    if (!v551)
    {
      ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
      std::__shared_weak_count::__release_weak(v549);
      v552 = (std::__shared_weak_count *)v558[1];
      if (v558[1])
        goto LABEL_821;
      goto LABEL_824;
    }
  }
  v552 = (std::__shared_weak_count *)v558[1];
  if (!v558[1])
    goto LABEL_824;
LABEL_821:
  v553 = (unint64_t *)&v552->__shared_owners_;
  do
    v554 = __ldaxr(v553);
  while (__stlxr(v554 - 1, v553));
  if (v554)
  {
LABEL_824:
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_825;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
    std::__shared_weak_count::__release_weak(v552);
    if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
LABEL_825:
      operator delete(value.__r_.__value_.__l.__data_);
  }
}

void sub_239BDB724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  sub_239416DA0((uint64_t)&a19);
  sub_239416DA0((uint64_t)&a33);
  if (*(char *)(v49 - 153) < 0)
    operator delete(*(void **)(v49 - 176));
  sub_239416DA0((uint64_t)&a13);
  if (a48 < 0)
    operator delete(__p);
  sub_239416DA0(v48);
  _Unwind_Resume(a1);
}

void sub_239BDBC70(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  double v11;
  int32x4_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  size_t v18;
  __int128 *p_p;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  size_t v24;
  size_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const char *v32;
  size_t v33;
  size_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int32x4_t v38;
  double v39;
  int32x4_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  size_t v45;
  size_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  int8x16_t v59;
  double v60;
  int32x4_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const char *v68;
  const char *v69;
  size_t v70;
  size_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  const char *v79;
  size_t v80;
  size_t v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  double v86;
  int32x4_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  const char *v92;
  size_t v93;
  size_t v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  int32x4_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  const char *v103;
  const char *v104;
  size_t v105;
  std::string::size_type v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  int16x8_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  const char *v115;
  const char *v116;
  size_t v117;
  std::string::size_type v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  int8x16_t v122;
  double v123;
  int32x4_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  const char *v128;
  const char *v129;
  size_t v130;
  std::string::size_type v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  int16x8_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  const char *v142;
  const char *v143;
  size_t v144;
  size_t v145;
  _OWORD *v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  const char *v155;
  size_t v156;
  size_t v157;
  __int128 *v158;
  uint64_t v159;
  uint64_t v160;
  int8x16_t *v161;
  size_t v162;
  size_t v163;
  _OWORD *v164;
  uint64_t v165;
  uint64_t v166;
  int8x16_t v167;
  double v168;
  int32x4_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  const char *v173;
  const char *v174;
  size_t v175;
  std::string::size_type v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  int8x16_t v180;
  double v181;
  int32x4_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  const char *v186;
  const char *v187;
  size_t v188;
  size_t v189;
  _OWORD *v190;
  uint64_t v191;
  uint64_t v192;
  int8x16_t v193;
  double v194;
  int32x4_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  const char *v199;
  const char *v200;
  size_t v201;
  std::string::size_type v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  int8x16_t v206;
  double v207;
  int32x4_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  const char *v212;
  const char *v213;
  size_t v214;
  std::string::size_type v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  int16x8_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  const char *v224;
  const char *v225;
  size_t v226;
  std::string::size_type v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  int8x16_t v231;
  double v232;
  int32x4_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  const char *v237;
  const char *v238;
  size_t v239;
  size_t v240;
  _OWORD *v241;
  uint64_t v242;
  uint64_t v243;
  int8x16_t v244;
  double v245;
  int32x4_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  const char *v250;
  const char *v251;
  size_t v252;
  size_t v253;
  _OWORD *v254;
  uint64_t v255;
  uint64_t v256;
  int8x16_t v257;
  double v258;
  int32x4_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  const char *v263;
  const char *v264;
  size_t v265;
  std::string::size_type v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  int8x16_t v270;
  double v271;
  int32x4_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  const char *v276;
  const char *v277;
  size_t v278;
  size_t v279;
  _OWORD *v280;
  uint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  const char *v286;
  const char *v287;
  size_t v288;
  size_t v289;
  _OWORD *v290;
  uint64_t v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  const char *v296;
  size_t v297;
  size_t v298;
  _OWORD *v299;
  uint64_t v300;
  uint64_t v301;
  int8x16_t v302;
  double v303;
  int32x4_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  const char *v308;
  const char *v309;
  size_t v310;
  size_t v311;
  _OWORD *v312;
  uint64_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  const char *v318;
  size_t v319;
  size_t v320;
  _OWORD *v321;
  uint64_t v322;
  uint64_t v323;
  int8x16_t v324;
  double v325;
  int32x4_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  const char *v330;
  const char *v331;
  size_t v332;
  std::string::size_type v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  __int128 v349;
  __int128 v350;
  _BYTE v351[22];
  __int128 __p;
  unint64_t v353;
  __int128 v354;
  _OWORD v355[2];
  _OWORD __dst[3];
  std::string v357;
  uint64_t v358;

  v358 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  strcpy((char *)&__p, "*D_GuZECD^Y");
  v4 = sub_23958E4C8((uint64_t)&__p);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)&__dst[0] + 1) = v6;
    *(_QWORD *)&__dst[1] = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v7;
  }
  else
  {
    BYTE7(__dst[1]) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, v4, v6);
LABEL_9:
  *((_BYTE *)v7 + v6) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v357);
  sub_239BB4A9C((uint64_t)a1, v357.__r_.__value_.__l.__data_, a2);
  size = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
  if (!v357.__r_.__value_.__l.__size_)
    goto LABEL_13;
  v14 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_13:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SBYTE7(__dst[1]) < 0)
LABEL_14:
    operator delete(*(void **)&__dst[0]);
LABEL_15:
  *(_OWORD *)v351 = xmmword_239F13167;
  *(_QWORD *)&v351[14] = 0x23323E0C3B2723;
  v16 = sub_239A90BEC(v351, (int8x16_t)xmmword_239F13167, v10, v11, v12);
  v17 = strlen((const char *)v16);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_p = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__p + 1) = v18;
    v353 = v21 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_22;
  }
  HIBYTE(v353) = v17;
  p_p = &__p;
  if (v17)
LABEL_22:
    memmove(p_p, v16, v18);
  *((_BYTE *)p_p + v18) = 0;
  sub_23962C714(&v349);
  v22 = *(_QWORD **)(a2 + 32);
  if (v22)
  {
    while (1)
    {
      std::to_string(&v357, v22[2]);
      sub_23962C714(&v354);
      strcpy((char *)&v350, "Z-3>.2");
      v23 = sub_239513174((char *)&v350);
      v24 = strlen(v23);
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v25 = v24;
      if (v24 >= 0x17)
      {
        v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v27 = v24 | 7;
        v28 = v27 + 1;
        v26 = operator new(v27 + 1);
        *((_QWORD *)&__dst[0] + 1) = v25;
        *(_QWORD *)&__dst[1] = v28 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v26;
      }
      else
      {
        BYTE7(__dst[1]) = v24;
        v26 = __dst;
        if (!v24)
          goto LABEL_35;
      }
      memmove(v26, v23, v25);
LABEL_35:
      *((_BYTE *)v26 + v25) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
      sub_239BB4A9C((uint64_t)&v354, *(const void **)&v355[0], (uint64_t)(v22 + 3));
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
      if (!*((_QWORD *)&v355[0] + 1))
        goto LABEL_39;
      v30 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (v31)
      {
LABEL_39:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_41;
LABEL_40:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_41;
      }
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_40;
LABEL_41:
      *(_QWORD *)&v350 = 0x667A757B777A12;
      v32 = sub_23958E3FC((char *)&v350);
      v33 = strlen(v32);
      if (v33 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v34 = v33;
      if (v33 >= 0x17)
      {
        v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v36 = v33 | 7;
        v37 = v36 + 1;
        v35 = operator new(v36 + 1);
        *((_QWORD *)&__dst[0] + 1) = v34;
        *(_QWORD *)&__dst[1] = v37 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v35;
      }
      else
      {
        BYTE7(__dst[1]) = v33;
        v35 = __dst;
        if (!v33)
          goto LABEL_49;
      }
      memmove(v35, v32, v34);
LABEL_49:
      *((_BYTE *)v35 + v34) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
      sub_239BB4A9C((uint64_t)&v354, *(const void **)&v355[0], (uint64_t)(v22 + 4));
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
      if (!*((_QWORD *)&v355[0] + 1))
        goto LABEL_53;
      v42 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_53:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_55;
LABEL_54:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_55;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_54;
LABEL_55:
      v355[0] = xmmword_239F1317D;
      strcpy((char *)v355 + 14, ">'4#064");
      v44 = sub_239A90BEC((unsigned __int8 *)v355, (int8x16_t)xmmword_239F1317D, v38, v39, v40);
      v45 = strlen((const char *)v44);
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v46 = v45;
      if (v45 >= 0x17)
      {
        v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v48 = v45 | 7;
        v49 = v48 + 1;
        v47 = operator new(v48 + 1);
        *((_QWORD *)&__dst[0] + 1) = v46;
        *(_QWORD *)&__dst[1] = v49 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v47;
      }
      else
      {
        BYTE7(__dst[1]) = v45;
        v47 = __dst;
        if (!v45)
          goto LABEL_63;
      }
      memmove(v47, v44, v46);
LABEL_63:
      *((_BYTE *)v47 + v46) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v350);
      sub_239BB47DC((uint64_t)&v354, (const void *)v350, (uint64_t)(v22 + 5));
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
      if (*((_QWORD *)&v350 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
            goto LABEL_69;
LABEL_68:
          operator delete(*(void **)&__dst[0]);
          goto LABEL_69;
        }
      }
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_68;
LABEL_69:
      sub_239629EF4((uint64_t)&v357, (CFStringRef *)__dst);
      sub_239BB7018((uint64_t)&v349, *(const void **)&__dst[0], (uint64_t)&v354);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (!*((_QWORD *)&__dst[0] + 1))
        goto LABEL_73;
      v54 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
        if (*((_QWORD *)&v354 + 1))
        {
LABEL_74:
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
      else
      {
LABEL_73:
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
        if (*((_QWORD *)&v354 + 1))
          goto LABEL_74;
      }
      if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v357.__r_.__value_.__l.__data_);
        v22 = (_QWORD *)*v22;
        if (!v22)
          break;
      }
      else
      {
        v22 = (_QWORD *)*v22;
        if (!v22)
          break;
      }
    }
  }
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&v349);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (*((_QWORD *)&__dst[0] + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v349 + 1);
  if (*((_QWORD *)&v349 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v349 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v353) < 0)
    operator delete((void *)__p);
  strcpy((char *)&v357, "W3\"%6#>89\b'6#4?:6#4?");
  sub_2396EFB50((uint64_t)&v357, *(int32x4_t *)"W3\"%6#>89\b'6#4?:6#4?", v59, v60, v61);
  v69 = v68;
  v70 = strlen(v68);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    *((_QWORD *)&__dst[0] + 1) = v71;
    *(_QWORD *)&__dst[1] = v74 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v72;
  }
  else
  {
    BYTE7(__dst[1]) = v70;
    v72 = __dst;
    if (!v70)
      goto LABEL_108;
  }
  memmove(v72, v69, v71);
LABEL_108:
  *((_BYTE *)v72 + v71) = 0;
  *(_QWORD *)&v355[0] = *(_QWORD *)(a2 + 56);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2397373B0((uint64_t)a1, (const void *)__p, (uint64_t)v355);
  v75 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_112;
  v76 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_112:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_114;
    goto LABEL_113;
  }
  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if (SBYTE7(__dst[1]) < 0)
LABEL_113:
    operator delete(*(void **)&__dst[0]);
LABEL_114:
  strcpy((char *)&v357, "\antXjftlXfwwknbc");
  sub_2396EFA24((uint64_t)&v357);
  v79 = v78;
  v80 = strlen(v78);
  if (v80 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v81 = v80;
  if (v80 >= 0x17)
  {
    v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v83 = v80 | 7;
    v84 = v83 + 1;
    v82 = operator new(v83 + 1);
    *((_QWORD *)&__dst[0] + 1) = v81;
    *(_QWORD *)&__dst[1] = v84 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v82;
  }
  else
  {
    BYTE7(__dst[1]) = v80;
    v82 = __dst;
    if (!v80)
      goto LABEL_122;
  }
  memmove(v82, v79, v81);
LABEL_122:
  *((_BYTE *)v82 + v81) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, (const void *)__p, (_BYTE *)(a2 + 64));
  v88 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_126;
  v89 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (v90)
  {
LABEL_126:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_128;
    goto LABEL_127;
  }
  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
  std::__shared_weak_count::__release_weak(v88);
  if (SBYTE7(__dst[1]) < 0)
LABEL_127:
    operator delete(*(void **)&__dst[0]);
LABEL_128:
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = xmmword_239F131B9;
  v357.__r_.__value_.__r.__words[2] = 0x3534383D212130;
  sub_2396F1A4C((uint64_t)&v357, (int32x4_t)xmmword_239F131B9, v85, v86, v87);
  v92 = v91;
  v93 = strlen(v91);
  if (v93 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v94 = v93;
  if (v93 >= 0x17)
  {
    v96 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v96 = v93 | 7;
    v97 = v96 + 1;
    v95 = operator new(v96 + 1);
    *((_QWORD *)&__dst[0] + 1) = v94;
    *(_QWORD *)&__dst[1] = v97 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v95;
  }
  else
  {
    BYTE7(__dst[1]) = v93;
    v95 = __dst;
    if (!v93)
      goto LABEL_136;
  }
  memmove(v95, v92, v94);
LABEL_136:
  *((_BYTE *)v95 + v94) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, (const void *)__p, (_BYTE *)(a2 + 65));
  v100 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_140;
  v101 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v102 = __ldaxr(v101);
  while (__stlxr(v102 - 1, v101));
  if (v102)
  {
LABEL_140:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_142;
    goto LABEL_141;
  }
  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
  std::__shared_weak_count::__release_weak(v100);
  if (SBYTE7(__dst[1]) < 0)
LABEL_141:
    operator delete(*(void **)&__dst[0]);
LABEL_142:
  strcpy((char *)__dst, "*CYu^OGZEXKFuNOZ^BuZECD^uKZZFCON");
  sub_2396EFE38((uint64_t)__dst, *(int32x4_t *)"*CYu^OGZEXKFuNOZ^BuZECD^uKZZFCON", *(int8x16_t *)"^BuZECD^uKZZFCON", v98, v99);
  v104 = v103;
  v105 = strlen(v103);
  if (v105 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v106 = v105;
  if (v105 >= 0x17)
  {
    v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17)
      v108 = v105 | 7;
    v109 = v108 + 1;
    v107 = operator new(v108 + 1);
    v357.__r_.__value_.__l.__size_ = v106;
    v357.__r_.__value_.__r.__words[2] = v109 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v105;
    v107 = &v357;
    if (!v105)
      goto LABEL_150;
  }
  memmove(v107, v104, v106);
LABEL_150:
  *((_BYTE *)v107 + v106) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, (const void *)__p, (_BYTE *)(a2 + 66));
  v112 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_154;
  v113 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (v114)
  {
LABEL_154:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_156;
    goto LABEL_155;
  }
  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
  std::__shared_weak_count::__release_weak(v112);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_155:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_156:
  __dst[0] = xmmword_239F131F2;
  __dst[1] = *(_OWORD *)dbl_239F13202;
  strcpy((char *)&__dst[1] + 15, "1\"#");
  sub_2396F0060((unsigned __int8 *)__dst, (int16x8_t)xmmword_239F131F2, dbl_239F13202[0], v110, v111);
  v116 = v115;
  v117 = strlen(v115);
  if (v117 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v118 = v117;
  if (v117 >= 0x17)
  {
    v120 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v117 | 7) != 0x17)
      v120 = v117 | 7;
    v121 = v120 + 1;
    v119 = operator new(v120 + 1);
    v357.__r_.__value_.__l.__size_ = v118;
    v357.__r_.__value_.__r.__words[2] = v121 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v117;
    v119 = &v357;
    if (!v117)
      goto LABEL_164;
  }
  memmove(v119, v116, v118);
LABEL_164:
  *((_BYTE *)v119 + v118) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)&__p);
  sub_2396B4EAC((uint64_t)a1, (const void *)__p, (_BYTE *)(a2 + 67));
  v125 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_168;
  v126 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (v127)
  {
LABEL_168:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_170;
    goto LABEL_169;
  }
  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
  std::__shared_weak_count::__release_weak(v125);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_169:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_170:
  __dst[0] = xmmword_239F13215;
  *(_OWORD *)((char *)__dst + 11) = *(__int128 *)((char *)&xmmword_239F13215 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F13215 + 11), v122, v123, v124);
  v129 = v128;
  v130 = strlen(v128);
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v131 = v130;
  if (v130 >= 0x17)
  {
    v133 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v133 = v130 | 7;
    v134 = v133 + 1;
    v132 = operator new(v133 + 1);
    v357.__r_.__value_.__l.__size_ = v131;
    v357.__r_.__value_.__r.__words[2] = v134 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v130;
    v132 = &v357;
    if (!v130)
      goto LABEL_178;
  }
  memmove(v132, v129, v131);
LABEL_178:
  *((_BYTE *)v132 + v131) = 0;
  sub_239BDE0A0(v355, a2 + 72);
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)&__p);
  sub_239BB7018((uint64_t)a1, (const void *)__p, (uint64_t)v355);
  v136 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_182;
  v137 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v138 = __ldaxr(v137);
  while (__stlxr(v138 - 1, v137));
  if (!v138)
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    v139 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
    if (!*((_QWORD *)&v355[0] + 1))
      goto LABEL_186;
  }
  else
  {
LABEL_182:
    v139 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
    if (!*((_QWORD *)&v355[0] + 1))
      goto LABEL_186;
  }
  v140 = (unint64_t *)&v139->__shared_owners_;
  do
    v141 = __ldaxr(v140);
  while (__stlxr(v141 - 1, v140));
  if (v141)
  {
LABEL_186:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_188;
    goto LABEL_187;
  }
  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
  std::__shared_weak_count::__release_weak(v139);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_187:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_188:
  *(_QWORD *)&v355[0] = 0x3E36322F352E295BLL;
  strcpy((char *)v355 + 12, "4");
  DWORD2(v355[0]) = 1026896388;
  sub_23971A32C((uint64_t)v355, v135);
  v143 = v142;
  v144 = strlen(v142);
  if (v144 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v145 = v144;
  if (v144 >= 0x17)
  {
    v147 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v144 | 7) != 0x17)
      v147 = v144 | 7;
    v148 = v147 + 1;
    v146 = operator new(v147 + 1);
    *((_QWORD *)&__dst[0] + 1) = v145;
    *(_QWORD *)&__dst[1] = v148 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v146;
  }
  else
  {
    BYTE7(__dst[1]) = v144;
    v146 = __dst;
    if (!v144)
      goto LABEL_196;
  }
  memmove(v146, v143, v145);
LABEL_196:
  *((_BYTE *)v146 + v145) = 0;
  sub_239BCA2E4((uint64_t)&__p, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 256));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v357);
  sub_239BB7018((uint64_t)a1, v357.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v149 = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
  if (!v357.__r_.__value_.__l.__size_)
    goto LABEL_200;
  v150 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
  do
    v151 = __ldaxr(v150);
  while (__stlxr(v151 - 1, v150));
  if (!v151)
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
    v152 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_204;
  }
  else
  {
LABEL_200:
    v152 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_204;
  }
  v153 = (unint64_t *)&v152->__shared_owners_;
  do
    v154 = __ldaxr(v153);
  while (__stlxr(v154 - 1, v153));
  if (v154)
  {
LABEL_204:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_206;
    goto LABEL_205;
  }
  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
  std::__shared_weak_count::__release_weak(v152);
  if (SBYTE7(__dst[1]) < 0)
LABEL_205:
    operator delete(*(void **)&__dst[0]);
LABEL_206:
  strcpy((char *)&v354, "+^XNOtHDEMBL");
  v155 = sub_239510ECC((uint64_t)&v354);
  v156 = strlen(v155);
  if (v156 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v157 = v156;
  if (v156 >= 0x17)
  {
    v159 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v156 | 7) != 0x17)
      v159 = v156 | 7;
    v160 = v159 + 1;
    v158 = (__int128 *)operator new(v159 + 1);
    *((_QWORD *)&__p + 1) = v157;
    v353 = v160 | 0x8000000000000000;
    *(_QWORD *)&__p = v158;
    goto LABEL_213;
  }
  HIBYTE(v353) = v156;
  v158 = &__p;
  if (v156)
LABEL_213:
    memmove(v158, v155, v157);
  *((_BYTE *)v158 + v157) = 0;
  sub_23962C714(&v350);
  strcpy((char *)&v357, "\"LWO}QMWPAG}TKGUQ");
  v161 = sub_239A91B18((int8x16_t *)&v357);
  v162 = strlen(v161->i8);
  if (v162 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v163 = v162;
  if (v162 >= 0x17)
  {
    v165 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v162 | 7) != 0x17)
      v165 = v162 | 7;
    v166 = v165 + 1;
    v164 = operator new(v165 + 1);
    *((_QWORD *)&__dst[0] + 1) = v163;
    *(_QWORD *)&__dst[1] = v166 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v164;
  }
  else
  {
    BYTE7(__dst[1]) = v162;
    v164 = __dst;
    if (!v162)
      goto LABEL_222;
  }
  memmove(v164, v161, v163);
LABEL_222:
  *((_BYTE *)v164 + v163) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_239BB4338((uint64_t)&v350, *(const void **)&v355[0], a2 + 328);
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_226;
  v171 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v172 = __ldaxr(v171);
  while (__stlxr(v172 - 1, v171));
  if (v172)
  {
LABEL_226:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_228;
    goto LABEL_227;
  }
  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
  std::__shared_weak_count::__release_weak(v170);
  if (SBYTE7(__dst[1]) < 0)
LABEL_227:
    operator delete(*(void **)&__dst[0]);
LABEL_228:
  __dst[0] = xmmword_239F11D2D;
  *(_OWORD *)((char *)__dst + 12) = *(__int128 *)((char *)&xmmword_239F11D2D + 12);
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11D2D + 12), v167, v168, v169);
  v174 = v173;
  v175 = strlen(v173);
  if (v175 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v176 = v175;
  if (v175 >= 0x17)
  {
    v178 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v175 | 7) != 0x17)
      v178 = v175 | 7;
    v179 = v178 + 1;
    v177 = operator new(v178 + 1);
    v357.__r_.__value_.__l.__size_ = v176;
    v357.__r_.__value_.__r.__words[2] = v179 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v175;
    v177 = &v357;
    if (!v175)
      goto LABEL_236;
  }
  memmove(v177, v174, v176);
LABEL_236:
  *((_BYTE *)v177 + v176) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)v355);
  sub_239BB4338((uint64_t)&v350, *(const void **)&v355[0], a2 + 332);
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_240;
  v184 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (v185)
  {
LABEL_240:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_242;
    goto LABEL_241;
  }
  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
  std::__shared_weak_count::__release_weak(v183);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_241:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_242:
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = xmmword_239F11D49;
  v357.__r_.__value_.__r.__words[2] = 0x272E3D2E27142ELL;
  sub_2396F1A4C((uint64_t)&v357, (int32x4_t)xmmword_239F11D49, v180, v181, v182);
  v187 = v186;
  v188 = strlen(v186);
  if (v188 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v189 = v188;
  if (v188 >= 0x17)
  {
    v191 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v188 | 7) != 0x17)
      v191 = v188 | 7;
    v192 = v191 + 1;
    v190 = operator new(v191 + 1);
    *((_QWORD *)&__dst[0] + 1) = v189;
    *(_QWORD *)&__dst[1] = v192 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v190;
  }
  else
  {
    BYTE7(__dst[1]) = v188;
    v190 = __dst;
    if (!v188)
      goto LABEL_250;
  }
  memmove(v190, v187, v189);
LABEL_250:
  *((_BYTE *)v190 + v189) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_239BB4338((uint64_t)&v350, *(const void **)&v355[0], a2 + 336);
  v196 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_254;
  v197 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v198 = __ldaxr(v197);
  while (__stlxr(v198 - 1, v197));
  if (v198)
  {
LABEL_254:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_256;
    goto LABEL_255;
  }
  ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
  std::__shared_weak_count::__release_weak(v196);
  if (SBYTE7(__dst[1]) < 0)
LABEL_255:
    operator delete(*(void **)&__dst[0]);
LABEL_256:
  __dst[0] = xmmword_239F11D61;
  *(_OWORD *)((char *)__dst + 10) = *(__int128 *)((char *)&xmmword_239F11D61 + 10);
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)((char *)&xmmword_239F11D61 + 10), v193, v194, v195);
  v200 = v199;
  v201 = strlen(v199);
  if (v201 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v202 = v201;
  if (v201 >= 0x17)
  {
    v204 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v204 = v201 | 7;
    v205 = v204 + 1;
    v203 = operator new(v204 + 1);
    v357.__r_.__value_.__l.__size_ = v202;
    v357.__r_.__value_.__r.__words[2] = v205 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v203;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v201;
    v203 = &v357;
    if (!v201)
      goto LABEL_264;
  }
  memmove(v203, v200, v202);
LABEL_264:
  *((_BYTE *)v203 + v202) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)v355);
  sub_239BB4338((uint64_t)&v350, *(const void **)&v355[0], a2 + 340);
  v209 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_268;
  v210 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v211 = __ldaxr(v210);
  while (__stlxr(v211 - 1, v210));
  if (v211)
  {
LABEL_268:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_270;
    goto LABEL_269;
  }
  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
  std::__shared_weak_count::__release_weak(v209);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_269:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_270:
  __dst[0] = xmmword_239F11D7B;
  *(_OWORD *)((char *)__dst + 14) = *(__int128 *)((char *)&xmmword_239F11D7B + 14);
  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11D7B + 14), v206, v207, v208);
  v213 = v212;
  v214 = strlen(v212);
  if (v214 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v215 = v214;
  if (v214 >= 0x17)
  {
    v217 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v214 | 7) != 0x17)
      v217 = v214 | 7;
    v218 = v217 + 1;
    v216 = operator new(v217 + 1);
    v357.__r_.__value_.__l.__size_ = v215;
    v357.__r_.__value_.__r.__words[2] = v218 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v216;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v214;
    v216 = &v357;
    if (!v214)
      goto LABEL_278;
  }
  memmove(v216, v213, v215);
LABEL_278:
  *((_BYTE *)v216 + v215) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)v355);
  sub_2396B4EAC((uint64_t)&v350, *(const void **)&v355[0], (_BYTE *)(a2 + 346));
  v221 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_282;
  v222 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v223 = __ldaxr(v222);
  while (__stlxr(v223 - 1, v222));
  if (v223)
  {
LABEL_282:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_284;
    goto LABEL_283;
  }
  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
  std::__shared_weak_count::__release_weak(v221);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_283:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_284:
  __dst[0] = xmmword_239F11D99;
  strcpy((char *)&__dst[1], "swk\\sljmw\\je\\bubjobaof");
  sub_2396F0804((unsigned __int8 *)__dst, 6.49676943e223, *(int16x8_t *)"swk\\sljmw\\je\\bubjobaof", v219, v220);
  v225 = v224;
  v226 = strlen(v224);
  if (v226 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v227 = v226;
  if (v226 >= 0x17)
  {
    v229 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v226 | 7) != 0x17)
      v229 = v226 | 7;
    v230 = v229 + 1;
    v228 = operator new(v229 + 1);
    v357.__r_.__value_.__l.__size_ = v227;
    v357.__r_.__value_.__r.__words[2] = v230 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v226;
    v228 = &v357;
    if (!v226)
      goto LABEL_292;
  }
  memmove(v228, v225, v227);
LABEL_292:
  *((_BYTE *)v228 + v227) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)v355);
  sub_2396B4EAC((uint64_t)&v350, *(const void **)&v355[0], (_BYTE *)(a2 + 347));
  v234 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_296;
  v235 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 - 1, v235));
  if (v236)
  {
LABEL_296:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_298;
    goto LABEL_297;
  }
  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
  std::__shared_weak_count::__release_weak(v234);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_297:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_298:
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = xmmword_239F11DC0;
  *(std::string::size_type *)((char *)&v357.__r_.__value_.__r.__words[1] + 7) = 0x78717F7C71747CLL;
  sub_2396EFBE0((uint64_t)&v357, (int32x4_t)xmmword_239F11DC0, v231, v232, v233);
  v238 = v237;
  v239 = strlen(v237);
  if (v239 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v240 = v239;
  if (v239 >= 0x17)
  {
    v242 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17)
      v242 = v239 | 7;
    v243 = v242 + 1;
    v241 = operator new(v242 + 1);
    *((_QWORD *)&__dst[0] + 1) = v240;
    *(_QWORD *)&__dst[1] = v243 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v241;
  }
  else
  {
    BYTE7(__dst[1]) = v239;
    v241 = __dst;
    if (!v239)
      goto LABEL_306;
  }
  memmove(v241, v238, v240);
LABEL_306:
  *((_BYTE *)v241 + v240) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_2396B4EAC((uint64_t)&v350, *(const void **)&v355[0], (_BYTE *)(a2 + 344));
  v247 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_310;
  v248 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v249 = __ldaxr(v248);
  while (__stlxr(v249 - 1, v248));
  if (v249)
  {
LABEL_310:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_312;
    goto LABEL_311;
  }
  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
  std::__shared_weak_count::__release_weak(v247);
  if (SBYTE7(__dst[1]) < 0)
LABEL_311:
    operator delete(*(void **)&__dst[0]);
LABEL_312:
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = xmmword_239F11DD7;
  *(std::string::size_type *)((char *)&v357.__r_.__value_.__r.__words[1] + 7) = 0x1E17191A17121ALL;
  sub_2396EFBE0((uint64_t)&v357, (int32x4_t)xmmword_239F11DD7, v244, v245, v246);
  v251 = v250;
  v252 = strlen(v250);
  if (v252 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v253 = v252;
  if (v252 >= 0x17)
  {
    v255 = (v252 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v252 | 7) != 0x17)
      v255 = v252 | 7;
    v256 = v255 + 1;
    v254 = operator new(v255 + 1);
    *((_QWORD *)&__dst[0] + 1) = v253;
    *(_QWORD *)&__dst[1] = v256 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v254;
  }
  else
  {
    BYTE7(__dst[1]) = v252;
    v254 = __dst;
    if (!v252)
      goto LABEL_320;
  }
  memmove(v254, v251, v253);
LABEL_320:
  *((_BYTE *)v254 + v253) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_2396B4EAC((uint64_t)&v350, *(const void **)&v355[0], (_BYTE *)(a2 + 345));
  v260 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_324;
  v261 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v262 = __ldaxr(v261);
  while (__stlxr(v262 - 1, v261));
  if (v262)
  {
LABEL_324:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_326;
    goto LABEL_325;
  }
  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
  std::__shared_weak_count::__release_weak(v260);
  if (SBYTE7(__dst[1]) < 0)
LABEL_325:
    operator delete(*(void **)&__dst[0]);
LABEL_326:
  __dst[0] = xmmword_239F11DEE;
  *(_OWORD *)((char *)__dst + 14) = *(__int128 *)((char *)&xmmword_239F11DEE + 14);
  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11DEE + 14), v257, v258, v259);
  v264 = v263;
  v265 = strlen(v263);
  if (v265 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v266 = v265;
  if (v265 >= 0x17)
  {
    v268 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v265 | 7) != 0x17)
      v268 = v265 | 7;
    v269 = v268 + 1;
    v267 = operator new(v268 + 1);
    v357.__r_.__value_.__l.__size_ = v266;
    v357.__r_.__value_.__r.__words[2] = v269 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v267;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v265;
    v267 = &v357;
    if (!v265)
      goto LABEL_334;
  }
  memmove(v267, v264, v266);
LABEL_334:
  *((_BYTE *)v267 + v266) = 0;
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)v355);
  sub_2396B4EAC((uint64_t)&v350, *(const void **)&v355[0], (_BYTE *)(a2 + 346));
  v273 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_338;
  v274 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v275 = __ldaxr(v274);
  while (__stlxr(v275 - 1, v274));
  if (v275)
  {
LABEL_338:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_340;
    goto LABEL_339;
  }
  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
  std::__shared_weak_count::__release_weak(v273);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_339:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_340:
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = xmmword_239F11E0C;
  LODWORD(v357.__r_.__value_.__r.__words[2]) = 5196116;
  sub_23958E55C((uint64_t)&v357, (int32x4_t)xmmword_239F11E0C, v270, v271, v272);
  v277 = v276;
  v278 = strlen(v276);
  if (v278 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v279 = v278;
  if (v278 >= 0x17)
  {
    v281 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v278 | 7) != 0x17)
      v281 = v278 | 7;
    v282 = v281 + 1;
    v280 = operator new(v281 + 1);
    *((_QWORD *)&__dst[0] + 1) = v279;
    *(_QWORD *)&__dst[1] = v282 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v280;
  }
  else
  {
    BYTE7(__dst[1]) = v278;
    v280 = __dst;
    if (!v278)
      goto LABEL_348;
  }
  memmove(v280, v277, v279);
LABEL_348:
  *((_BYTE *)v280 + v279) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_239BB47DC((uint64_t)&v350, *(const void **)&v355[0], a2 + 348);
  v283 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_352;
  v284 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v285 = __ldaxr(v284);
  while (__stlxr(v285 - 1, v284));
  if (v285)
  {
LABEL_352:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_354;
    goto LABEL_353;
  }
  ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
  std::__shared_weak_count::__release_weak(v283);
  if (SBYTE7(__dst[1]) < 0)
LABEL_353:
    operator delete(*(void **)&__dst[0]);
LABEL_354:
  strcpy(v351, "'JBSFKxKNExWFSO");
  sub_23950F8E4((uint64_t)v351);
  v287 = v286;
  v288 = strlen(v286);
  if (v288 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v289 = v288;
  if (v288 >= 0x17)
  {
    v291 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v288 | 7) != 0x17)
      v291 = v288 | 7;
    v292 = v291 + 1;
    v290 = operator new(v291 + 1);
    *((_QWORD *)&__dst[0] + 1) = v289;
    *(_QWORD *)&__dst[1] = v292 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v290;
    goto LABEL_361;
  }
  BYTE7(__dst[1]) = v288;
  v290 = __dst;
  if (v288)
LABEL_361:
    memmove(v290, v287, v289);
  *((_BYTE *)v290 + v289) = 0;
  if (*(char *)(a2 + 375) < 0)
    sub_23941A7F8(&v357, *(void **)(a2 + 352), *(_QWORD *)(a2 + 360));
  else
    v357 = *(std::string *)(a2 + 352);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_239BC46D4((uint64_t)&v350, *(const void **)&v355[0], (uint64_t)&v357);
  v293 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_369;
  v294 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v295 = __ldaxr(v294);
  while (__stlxr(v295 - 1, v294));
  if (v295)
  {
LABEL_369:
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_370;
LABEL_483:
    operator delete(v357.__r_.__value_.__l.__data_);
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_371;
    goto LABEL_484;
  }
  ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
  std::__shared_weak_count::__release_weak(v293);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_483;
LABEL_370:
  if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
    goto LABEL_371;
LABEL_484:
  operator delete(*(void **)&__dst[0]);
LABEL_371:
  strcpy((char *)v355, "+L[^tBOX");
  v296 = sub_239513718((char *)v355);
  v297 = strlen(v296);
  if (v297 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v298 = v297;
  if (v297 >= 0x17)
  {
    v300 = (v297 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v297 | 7) != 0x17)
      v300 = v297 | 7;
    v301 = v300 + 1;
    v299 = operator new(v300 + 1);
    *((_QWORD *)&__dst[0] + 1) = v298;
    *(_QWORD *)&__dst[1] = v301 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v299;
  }
  else
  {
    BYTE7(__dst[1]) = v297;
    v299 = __dst;
    if (!v297)
      goto LABEL_379;
  }
  memmove(v299, v296, v298);
LABEL_379:
  *((_BYTE *)v299 + v298) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v357);
  sub_239BB4494((uint64_t)&v350, v357.__r_.__value_.__l.__data_, (uint64_t *)(a2 + 376));
  v305 = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
  if (!v357.__r_.__value_.__l.__size_)
    goto LABEL_383;
  v306 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
  do
    v307 = __ldaxr(v306);
  while (__stlxr(v307 - 1, v306));
  if (v307)
  {
LABEL_383:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_385;
    goto LABEL_384;
  }
  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
  std::__shared_weak_count::__release_weak(v305);
  if (SBYTE7(__dst[1]) < 0)
LABEL_384:
    operator delete(*(void **)&__dst[0]);
LABEL_385:
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = xmmword_239F11E20;
  LODWORD(v357.__r_.__value_.__r.__words[2]) = 1119762;
  sub_23958E55C((uint64_t)&v357, (int32x4_t)xmmword_239F11E20, v302, v303, v304);
  v309 = v308;
  v310 = strlen(v308);
  if (v310 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v311 = v310;
  if (v310 >= 0x17)
  {
    v313 = (v310 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v310 | 7) != 0x17)
      v313 = v310 | 7;
    v314 = v313 + 1;
    v312 = operator new(v313 + 1);
    *((_QWORD *)&__dst[0] + 1) = v311;
    *(_QWORD *)&__dst[1] = v314 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v312;
  }
  else
  {
    BYTE7(__dst[1]) = v310;
    v312 = __dst;
    if (!v310)
      goto LABEL_393;
  }
  memmove(v312, v309, v311);
LABEL_393:
  *((_BYTE *)v312 + v311) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v355);
  sub_2396B4148((uint64_t)&v350, *(const void **)&v355[0], a2 + 400);
  v315 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_397;
  v316 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v317 = __ldaxr(v316);
  while (__stlxr(v317 - 1, v316));
  if (v317)
  {
LABEL_397:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_399;
    goto LABEL_398;
  }
  ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
  std::__shared_weak_count::__release_weak(v315);
  if (SBYTE7(__dst[1]) < 0)
LABEL_398:
    operator delete(*(void **)&__dst[0]);
LABEL_399:
  *(_QWORD *)&v355[0] = 0x7C667A51637B600ELL;
  strcpy((char *)v355 + 8, "koj}");
  v318 = sub_239510ECC((uint64_t)v355);
  v319 = strlen(v318);
  if (v319 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v320 = v319;
  if (v319 >= 0x17)
  {
    v322 = (v319 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v319 | 7) != 0x17)
      v322 = v319 | 7;
    v323 = v322 + 1;
    v321 = operator new(v322 + 1);
    *((_QWORD *)&__dst[0] + 1) = v320;
    *(_QWORD *)&__dst[1] = v323 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v321;
  }
  else
  {
    BYTE7(__dst[1]) = v319;
    v321 = __dst;
    if (!v319)
      goto LABEL_407;
  }
  memmove(v321, v318, v320);
LABEL_407:
  *((_BYTE *)v321 + v320) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v357);
  sub_239BB4338((uint64_t)&v350, v357.__r_.__value_.__l.__data_, a2 + 404);
  v327 = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
  if (!v357.__r_.__value_.__l.__size_)
    goto LABEL_411;
  v328 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
  do
    v329 = __ldaxr(v328);
  while (__stlxr(v329 - 1, v328));
  if (v329)
  {
LABEL_411:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_413;
    goto LABEL_412;
  }
  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
  std::__shared_weak_count::__release_weak(v327);
  if (SBYTE7(__dst[1]) < 0)
LABEL_412:
    operator delete(*(void **)&__dst[0]);
LABEL_413:
  __dst[0] = xmmword_239F11E34;
  *(_OWORD *)((char *)__dst + 11) = *(__int128 *)((char *)&xmmword_239F11E34 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F11E34 + 11), v324, v325, v326);
  v331 = v330;
  v332 = strlen(v330);
  if (v332 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v333 = v332;
  if (v332 >= 0x17)
  {
    v335 = (v332 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v332 | 7) != 0x17)
      v335 = v332 | 7;
    v336 = v335 + 1;
    v334 = operator new(v335 + 1);
    v357.__r_.__value_.__l.__size_ = v333;
    v357.__r_.__value_.__r.__words[2] = v336 | 0x8000000000000000;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
  }
  else
  {
    *((_BYTE *)&v357.__r_.__value_.__s + 23) = v332;
    v334 = &v357;
    if (!v332)
      goto LABEL_421;
  }
  memmove(v334, v331, v333);
LABEL_421:
  *((_BYTE *)v334 + v333) = 0;
  sub_239BC1B34((uint64_t)v351, (char *)(a2 + 408));
  sub_239629EF4((uint64_t)&v357, (CFStringRef *)v355);
  sub_239BB7018((uint64_t)&v350, *(const void **)&v355[0], (uint64_t)v351);
  v337 = (std::__shared_weak_count *)*((_QWORD *)&v355[0] + 1);
  if (!*((_QWORD *)&v355[0] + 1))
    goto LABEL_425;
  v338 = (unint64_t *)(*((_QWORD *)&v355[0] + 1) + 8);
  do
    v339 = __ldaxr(v338);
  while (__stlxr(v339 - 1, v338));
  if (!v339)
  {
    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
    std::__shared_weak_count::__release_weak(v337);
    v340 = *(std::__shared_weak_count **)&v351[8];
    if (!*(_QWORD *)&v351[8])
      goto LABEL_429;
  }
  else
  {
LABEL_425:
    v340 = *(std::__shared_weak_count **)&v351[8];
    if (!*(_QWORD *)&v351[8])
      goto LABEL_429;
  }
  v341 = (unint64_t *)&v340->__shared_owners_;
  do
    v342 = __ldaxr(v341);
  while (__stlxr(v342 - 1, v341));
  if (!v342)
  {
    ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
    std::__shared_weak_count::__release_weak(v340);
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_431;
    goto LABEL_430;
  }
LABEL_429:
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
LABEL_430:
    operator delete(v357.__r_.__value_.__l.__data_);
LABEL_431:
  sub_239629EF4((uint64_t)&__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)&__dst[0], (uint64_t)&v350);
  v343 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_435;
  v344 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v345 = __ldaxr(v344);
  while (__stlxr(v345 - 1, v344));
  if (!v345)
  {
    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
    std::__shared_weak_count::__release_weak(v343);
    v346 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
    if (!*((_QWORD *)&v350 + 1))
      goto LABEL_439;
  }
  else
  {
LABEL_435:
    v346 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
    if (!*((_QWORD *)&v350 + 1))
      goto LABEL_439;
  }
  v347 = (unint64_t *)&v346->__shared_owners_;
  do
    v348 = __ldaxr(v347);
  while (__stlxr(v348 - 1, v347));
  if (v348)
  {
LABEL_439:
    if ((SHIBYTE(v353) & 0x80000000) == 0)
      return;
    goto LABEL_440;
  }
  ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
  std::__shared_weak_count::__release_weak(v346);
  if (SHIBYTE(v353) < 0)
LABEL_440:
    operator delete((void *)__p);
}

void sub_239BDDD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  sub_239416DA0((uint64_t)&a13);
  if (a23 < 0)
    operator delete(a18);
  sub_239416DA0(a10);
  _Unwind_Resume(a1);
}

void sub_239BDE0A0(_OWORD *a1, uint64_t a2)
{
  int8x16_t *v4;
  size_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  double v11;
  int32x4_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_info;
  unint64_t v15;
  const char *v16;
  const char *v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  double v24;
  int32x4_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  double v37;
  int32x4_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const char *v42;
  const char *v43;
  size_t v44;
  size_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  int16x8_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const char *v55;
  const char *v56;
  size_t v57;
  size_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  int16x8_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const char *v68;
  const char *v69;
  size_t v70;
  size_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  const char *v79;
  size_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  double v86;
  int32x4_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  const char *v92;
  size_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  int8x16_t v98;
  double v99;
  int32x4_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  const char *v105;
  size_t v106;
  size_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  int16x8_t v111;
  int16x8_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  const char *v116;
  const char *v117;
  size_t v118;
  size_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  int16x8_t v123;
  double v124;
  int16x8_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unsigned __int8 *v129;
  size_t v130;
  size_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  int16x8_t v136;
  int16x8_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  const char *v141;
  const char *v142;
  size_t v143;
  size_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  int16x8_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  const char *v153;
  const char *v154;
  size_t v155;
  size_t v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  int16x8_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  const char *v165;
  const char *v166;
  size_t v167;
  size_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  int16x8_t v173;
  double v174;
  int16x8_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unsigned __int8 *v179;
  size_t v180;
  size_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  int16x8_t v185;
  double v186;
  int16x8_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unsigned __int8 *v191;
  size_t v192;
  size_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  int8x16_t v197;
  double v198;
  int32x4_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  const char *v203;
  const char *v204;
  size_t v205;
  size_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  int8x16_t v210;
  double v211;
  int32x4_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  const char *v216;
  const char *v217;
  size_t v218;
  size_t v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  int8x16_t v223;
  double v224;
  int32x4_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  const char *v229;
  const char *v230;
  size_t v231;
  void *v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  const char *v239;
  size_t v240;
  void *v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  const char *v248;
  size_t v249;
  void *v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  const char *v257;
  const char *v258;
  size_t v259;
  void *v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  int32x4_t v264;
  double v265;
  int32x4_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unsigned __int8 *v270;
  size_t v271;
  void *v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  int8x16_t v276;
  double v277;
  int32x4_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  const char *v282;
  const char *v283;
  size_t v284;
  size_t v285;
  _BYTE *v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  int16x8_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  const char *v294;
  const char *v295;
  size_t v296;
  size_t v297;
  _BYTE *v298;
  uint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  const char *v304;
  size_t v305;
  void *v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  int8x16_t v310;
  double v311;
  int32x4_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  const char *v316;
  const char *v317;
  size_t v318;
  void *v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  void *__p[8];
  _BYTE __dst[24];
  CFStringRef v328[3];
  uint64_t v329;

  v329 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  v4 = sub_239A91B18((int8x16_t *)__dst);
  v5 = strlen(v4->i8);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __p[1] = v6;
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v7;
  }
  else
  {
    HIBYTE(__p[2]) = v5;
    v7 = __p;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v7, v4, (size_t)v6);
LABEL_9:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2);
  v13 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_13;
  p_info = (unint64_t *)&v328[1]->info;
  do
    v15 = __ldaxr(p_info);
  while (__stlxr(v15 - 1, p_info));
  if (v15)
  {
LABEL_13:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(__p[2]) < 0)
LABEL_14:
    operator delete(__p[0]);
LABEL_15:
  strcpy((char *)__p, "4ZAYkPQD@\\kD[]Z@kYBGkDU]FG");
  sub_2396F1974((uint64_t)__p, *(int32x4_t *)"D[]Z@kYBGkDU]FG", v10, v11, v12);
  v17 = v16;
  v18 = strlen(v16);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    *(_QWORD *)&__dst[8] = v19;
    *(_QWORD *)&__dst[16] = v22 | 0x8000000000000000;
    *(_QWORD *)__dst = v20;
  }
  else
  {
    __dst[23] = v18;
    v20 = __dst;
    if (!v18)
      goto LABEL_23;
  }
  memmove(v20, v17, v19);
LABEL_23:
  v20[v19] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 8);
  v26 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_27;
  v27 = (unint64_t *)&v328[1]->info;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (v28)
  {
LABEL_27:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_28:
    operator delete(*(void **)__dst);
LABEL_29:
  *(_OWORD *)__dst = xmmword_239F1325D;
  strcpy(&__dst[15], "&+\"");
  sub_23958E450((uint64_t)__dst, (int32x4_t)xmmword_239F1325D, v23, v24, v25);
  v30 = v29;
  v31 = strlen(v29);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v32 = (void *)v31;
  if (v31 >= 0x17)
  {
    v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v34 = v31 | 7;
    v35 = v34 + 1;
    v33 = operator new(v34 + 1);
    __p[1] = v32;
    __p[2] = (void *)(v35 | 0x8000000000000000);
    __p[0] = v33;
  }
  else
  {
    HIBYTE(__p[2]) = v31;
    v33 = __p;
    if (!v31)
      goto LABEL_37;
  }
  memmove(v33, v30, (size_t)v32);
LABEL_37:
  *((_BYTE *)v32 + (_QWORD)v33) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 16);
  v39 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_41;
  v40 = (unint64_t *)&v328[1]->info;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_41:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (SHIBYTE(__p[2]) < 0)
LABEL_42:
    operator delete(__p[0]);
LABEL_43:
  *(_OWORD *)__p = xmmword_239F13270;
  *(_OWORD *)((char *)&__p[1] + 7) = *(__int128 *)((char *)&xmmword_239F13270 + 15);
  sub_2396EFF58((uint64_t)__p, *(int32x4_t *)((char *)&xmmword_239F13270 + 15), v36, v37, v38);
  v43 = v42;
  v44 = strlen(v42);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    *(_QWORD *)&__dst[8] = v45;
    *(_QWORD *)&__dst[16] = v48 | 0x8000000000000000;
    *(_QWORD *)__dst = v46;
  }
  else
  {
    __dst[23] = v44;
    v46 = __dst;
    if (!v44)
      goto LABEL_51;
  }
  memmove(v46, v43, v45);
LABEL_51:
  v46[v45] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 20);
  v52 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_55;
  v53 = (unint64_t *)&v328[1]->info;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (v54)
  {
LABEL_55:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_56:
    operator delete(*(void **)__dst);
LABEL_57:
  strcpy((char *)__p, "$@ATPL{TKMJP{WGEHA{VAHEPMRA{AVVKV");
  sub_2396F0120((unsigned __int8 *)__p, *(int16x8_t *)"$@ATPL{TKMJP{WGEHA{VAHEPMRA{AVVKV", *(double *)"HA{VAHEPMRA{AVVKV", v49, v50, v51);
  v56 = v55;
  v57 = strlen(v55);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v58 = v57;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = operator new(v60 + 1);
    *(_QWORD *)&__dst[8] = v58;
    *(_QWORD *)&__dst[16] = v61 | 0x8000000000000000;
    *(_QWORD *)__dst = v59;
  }
  else
  {
    __dst[23] = v57;
    v59 = __dst;
    if (!v57)
      goto LABEL_65;
  }
  memmove(v59, v56, v58);
LABEL_65:
  v59[v58] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 24);
  v65 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_69;
  v66 = (unint64_t *)&v328[1]->info;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_69:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_70:
    operator delete(*(void **)__dst);
LABEL_71:
  strcpy((char *)__p, ">Z[NJVaNQWPJaM]_R[a_\\MQRKJ[a[LLQL");
  sub_2396F0120((unsigned __int8 *)__p, *(int16x8_t *)">Z[NJVaNQWPJaM]_R[a_\\MQRKJ[a[LLQL", *(double *)"R[a_\\MQRKJ[a[LLQL", v62, v63, v64);
  v69 = v68;
  v70 = strlen(v68);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    *(_QWORD *)&__dst[8] = v71;
    *(_QWORD *)&__dst[16] = v74 | 0x8000000000000000;
    *(_QWORD *)__dst = v72;
  }
  else
  {
    __dst[23] = v70;
    v72 = __dst;
    if (!v70)
      goto LABEL_79;
  }
  memmove(v72, v69, v71);
LABEL_79:
  v72[v71] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 28);
  v75 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_83;
  v76 = (unint64_t *)&v328[1]->info;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_83:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_84:
    operator delete(*(void **)__dst);
LABEL_85:
  *(_OWORD *)__dst = xmmword_239F132D3;
  __dst[16] = 0;
  sub_2396EFA24((uint64_t)__dst);
  v79 = v78;
  v80 = strlen(v78);
  if (v80 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v81 = (void *)v80;
  if (v80 >= 0x17)
  {
    v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v83 = v80 | 7;
    v84 = v83 + 1;
    v82 = operator new(v83 + 1);
    __p[1] = v81;
    __p[2] = (void *)(v84 | 0x8000000000000000);
    __p[0] = v82;
  }
  else
  {
    HIBYTE(__p[2]) = v80;
    v82 = __p;
    if (!v80)
      goto LABEL_93;
  }
  memmove(v82, v79, (size_t)v81);
LABEL_93:
  *((_BYTE *)v81 + (_QWORD)v82) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 32);
  v88 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_97;
  v89 = (unint64_t *)&v328[1]->info;
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (v90)
  {
LABEL_97:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
  std::__shared_weak_count::__release_weak(v88);
  if (SHIBYTE(__p[2]) < 0)
LABEL_98:
    operator delete(__p[0]);
LABEL_99:
  *(_OWORD *)__dst = xmmword_239F132E4;
  *(_QWORD *)&__dst[15] = 0x19081D0E230E19;
  sub_2396EFBE0((uint64_t)__dst, (int32x4_t)xmmword_239F132E4, v85, v86, v87);
  v92 = v91;
  v93 = strlen(v91);
  if (v93 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v94 = (void *)v93;
  if (v93 >= 0x17)
  {
    v96 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v96 = v93 | 7;
    v97 = v96 + 1;
    v95 = operator new(v96 + 1);
    __p[1] = v94;
    __p[2] = (void *)(v97 | 0x8000000000000000);
    __p[0] = v95;
  }
  else
  {
    HIBYTE(__p[2]) = v93;
    v95 = __p;
    if (!v93)
      goto LABEL_107;
  }
  memmove(v95, v92, (size_t)v94);
LABEL_107:
  *((_BYTE *)v94 + (_QWORD)v95) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 36);
  v101 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_111;
  v102 = (unint64_t *)&v328[1]->info;
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 - 1, v102));
  if (v103)
  {
LABEL_111:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
  std::__shared_weak_count::__release_weak(v101);
  if (SHIBYTE(__p[2]) < 0)
LABEL_112:
    operator delete(__p[0]);
LABEL_113:
  *(_OWORD *)__p = xmmword_239F132FB;
  *(_OWORD *)((char *)&__p[1] + 7) = *(__int128 *)((char *)&xmmword_239F132FB + 15);
  sub_2396EFF58((uint64_t)__p, *(int32x4_t *)((char *)&xmmword_239F132FB + 15), v98, v99, v100);
  v105 = v104;
  v106 = strlen(v104);
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v107 = v106;
  if (v106 >= 0x17)
  {
    v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v109 = v106 | 7;
    v110 = v109 + 1;
    v108 = operator new(v109 + 1);
    *(_QWORD *)&__dst[8] = v107;
    *(_QWORD *)&__dst[16] = v110 | 0x8000000000000000;
    *(_QWORD *)__dst = v108;
  }
  else
  {
    __dst[23] = v106;
    v108 = __dst;
    if (!v106)
      goto LABEL_121;
  }
  memmove(v108, v105, v107);
LABEL_121:
  v108[v107] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 40);
  v113 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_125;
  v114 = (unint64_t *)&v328[1]->info;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_125:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_126:
    operator delete(*(void **)__dst);
LABEL_127:
  *(_OWORD *)__p = xmmword_239F1331A;
  *(_OWORD *)&__p[2] = *(_OWORD *)dbl_239F1332A;
  *(_OWORD *)((char *)&__p[3] + 7) = *(_OWORD *)((char *)&dbl_239F1332A[1] + 7);
  sub_2396F09FC((unsigned __int8 *)__p, *(double *)((char *)&dbl_239F1332A[1] + 7), dbl_239F1332A[0], v111, v112);
  v117 = v116;
  v118 = strlen(v116);
  if (v118 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v119 = v118;
  if (v118 >= 0x17)
  {
    v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v118 | 7) != 0x17)
      v121 = v118 | 7;
    v122 = v121 + 1;
    v120 = operator new(v121 + 1);
    *(_QWORD *)&__dst[8] = v119;
    *(_QWORD *)&__dst[16] = v122 | 0x8000000000000000;
    *(_QWORD *)__dst = v120;
  }
  else
  {
    __dst[23] = v118;
    v120 = __dst;
    if (!v118)
      goto LABEL_135;
  }
  memmove(v120, v117, v119);
LABEL_135:
  v120[v119] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 44);
  v126 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_139;
  v127 = (unint64_t *)&v328[1]->info;
  do
    v128 = __ldaxr(v127);
  while (__stlxr(v128 - 1, v127));
  if (v128)
  {
LABEL_139:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
  std::__shared_weak_count::__release_weak(v126);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_140:
    operator delete(*(void **)__dst);
LABEL_141:
  v130 = strlen((const char *)v129);
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v131 = v130;
  if (v130 >= 0x17)
  {
    v133 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v133 = v130 | 7;
    v134 = v133 + 1;
    v132 = operator new(v133 + 1);
    *(_QWORD *)&__dst[8] = v131;
    *(_QWORD *)&__dst[16] = v134 | 0x8000000000000000;
    *(_QWORD *)__dst = v132;
  }
  else
  {
    __dst[23] = v130;
    v132 = __dst;
    if (!v130)
      goto LABEL_149;
  }
  memmove(v132, v129, v131);
LABEL_149:
  v132[v131] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 48);
  v138 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_153;
  v139 = (unint64_t *)&v328[1]->info;
  do
    v140 = __ldaxr(v139);
  while (__stlxr(v140 - 1, v139));
  if (v140)
  {
LABEL_153:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
  std::__shared_weak_count::__release_weak(v138);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_154:
    operator delete(*(void **)__dst);
LABEL_155:
  strcpy((char *)__p, "U; 8\n!08%:'49\n10%!=\n%:<;!&\n43!0'\n: !9<0'\n'08:#49");
  sub_239BDFF94((unsigned __int8 *)__p, *(double *)"\n: !9<0'\n'08:#49", *(double *)"%!=\n%:<;!&\n43!0'\n: !9<0'\n'08:#49",
    v135,
    v136,
    v137);
  v142 = v141;
  v143 = strlen(v141);
  if (v143 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v144 = v143;
  if (v143 >= 0x17)
  {
    v146 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v143 | 7) != 0x17)
      v146 = v143 | 7;
    v147 = v146 + 1;
    v145 = operator new(v146 + 1);
    *(_QWORD *)&__dst[8] = v144;
    *(_QWORD *)&__dst[16] = v147 | 0x8000000000000000;
    *(_QWORD *)__dst = v145;
  }
  else
  {
    __dst[23] = v143;
    v145 = __dst;
    if (!v143)
      goto LABEL_163;
  }
  memmove(v145, v142, v144);
LABEL_163:
  v145[v144] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 56);
  v150 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_167;
  v151 = (unint64_t *)&v328[1]->info;
  do
    v152 = __ldaxr(v151);
  while (__stlxr(v152 - 1, v151));
  if (v152)
  {
LABEL_167:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_168;
  }
  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
  std::__shared_weak_count::__release_weak(v150);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_168:
    operator delete(*(void **)__dst);
LABEL_169:
  strcpy((char *)__p, ":TOWeN_WJUH[Ve^_JNReJUSTNIeX_\\UH_eW_H]ST]");
  sub_239ACB974((unsigned __int8 *)__p, *(int16x8_t *)"eX_\\UH_eW_H]ST]", *(double *)"JNReJUSTNIeX_\\UH_eW_H]ST]", v148, v149);
  v154 = v153;
  v155 = strlen(v153);
  if (v155 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v156 = v155;
  if (v155 >= 0x17)
  {
    v158 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v155 | 7) != 0x17)
      v158 = v155 | 7;
    v159 = v158 + 1;
    v157 = operator new(v158 + 1);
    *(_QWORD *)&__dst[8] = v156;
    *(_QWORD *)&__dst[16] = v159 | 0x8000000000000000;
    *(_QWORD *)__dst = v157;
  }
  else
  {
    __dst[23] = v155;
    v157 = __dst;
    if (!v155)
      goto LABEL_177;
  }
  memmove(v157, v154, v156);
LABEL_177:
  v157[v156] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 64);
  v162 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_181;
  v163 = (unint64_t *)&v328[1]->info;
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 - 1, v163));
  if (v164)
  {
LABEL_181:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_182;
  }
  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
  std::__shared_weak_count::__release_weak(v162);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_182:
    operator delete(*(void **)__dst);
LABEL_183:
  *(_OWORD *)__p = xmmword_239F133D6;
  *(int16x8_t *)&__p[2] = xmmword_239F133E6;
  *(int16x8_t *)((char *)&__p[3] + 1) = *(int16x8_t *)((char *)&xmmword_239F133E6 + 9);
  sub_2396F08F4((unsigned __int8 *)__p, *(double *)((char *)&xmmword_239F133E6.i64[1] + 1), xmmword_239F133E6, v160, v161);
  v166 = v165;
  v167 = strlen(v165);
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v168 = v167;
  if (v167 >= 0x17)
  {
    v170 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v170 = v167 | 7;
    v171 = v170 + 1;
    v169 = operator new(v170 + 1);
    *(_QWORD *)&__dst[8] = v168;
    *(_QWORD *)&__dst[16] = v171 | 0x8000000000000000;
    *(_QWORD *)__dst = v169;
  }
  else
  {
    __dst[23] = v167;
    v169 = __dst;
    if (!v167)
      goto LABEL_191;
  }
  memmove(v169, v166, v168);
LABEL_191:
  v169[v168] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 72);
  v176 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_195;
  v177 = (unint64_t *)&v328[1]->info;
  do
    v178 = __ldaxr(v177);
  while (__stlxr(v178 - 1, v177));
  if (v178)
  {
LABEL_195:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_196;
  }
  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
  std::__shared_weak_count::__release_weak(v176);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_196:
    operator delete(*(void **)__dst);
LABEL_197:
  *(_OWORD *)__p = xmmword_239F133FF;
  *(_OWORD *)&__p[2] = *(_OWORD *)dbl_239F1340F;
  *(_OWORD *)&__p[4] = xmmword_239F1341F;
  *(_OWORD *)((char *)&__p[5] + 1) = *(__int128 *)((char *)&xmmword_239F1341F + 9);
  v179 = sub_2396F12B4((unsigned __int8 *)__p, 5.34546146e-135, dbl_239F1340F[0], v172, v173, v174, v175);
  v180 = strlen((const char *)v179);
  if (v180 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v181 = v180;
  if (v180 >= 0x17)
  {
    v183 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17)
      v183 = v180 | 7;
    v184 = v183 + 1;
    v182 = operator new(v183 + 1);
    *(_QWORD *)&__dst[8] = v181;
    *(_QWORD *)&__dst[16] = v184 | 0x8000000000000000;
    *(_QWORD *)__dst = v182;
  }
  else
  {
    __dst[23] = v180;
    v182 = __dst;
    if (!v180)
      goto LABEL_205;
  }
  memmove(v182, v179, v181);
LABEL_205:
  v182[v181] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 80);
  v188 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_209;
  v189 = (unint64_t *)&v328[1]->info;
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (v190)
  {
LABEL_209:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_210;
  }
  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
  std::__shared_weak_count::__release_weak(v188);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_210:
    operator delete(*(void **)__dst);
LABEL_211:
  *(_OWORD *)__p = xmmword_239F13438;
  *(_OWORD *)&__p[2] = *(_OWORD *)dbl_239F13448;
  *(_OWORD *)&__p[4] = xmmword_239F13458;
  __p[6] = (void *)0x1815021B191106;
  v191 = sub_239BC4420((unsigned __int8 *)__p, 6.82504416e-183, dbl_239F13448[0], v185, v186, v187);
  v192 = strlen((const char *)v191);
  if (v192 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v193 = v192;
  if (v192 >= 0x17)
  {
    v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17)
      v195 = v192 | 7;
    v196 = v195 + 1;
    v194 = operator new(v195 + 1);
    *(_QWORD *)&__dst[8] = v193;
    *(_QWORD *)&__dst[16] = v196 | 0x8000000000000000;
    *(_QWORD *)__dst = v194;
  }
  else
  {
    __dst[23] = v192;
    v194 = __dst;
    if (!v192)
      goto LABEL_219;
  }
  memmove(v194, v191, v193);
LABEL_219:
  v194[v193] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB4A9C((uint64_t)a1, v328[0], a2 + 88);
  v200 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_223;
  v201 = (unint64_t *)&v328[1]->info;
  do
    v202 = __ldaxr(v201);
  while (__stlxr(v202 - 1, v201));
  if (v202)
  {
LABEL_223:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_225;
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
  std::__shared_weak_count::__release_weak(v200);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_224:
    operator delete(*(void **)__dst);
LABEL_225:
  strcpy((char *)__p, "6[SWXiFYESiWZ_QX[SXBiSDDYD");
  sub_2396F1974((uint64_t)__p, *(int32x4_t *)"WZ_QX[SXBiSDDYD", v197, v198, v199);
  v204 = v203;
  v205 = strlen(v203);
  if (v205 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v206 = v205;
  if (v205 >= 0x17)
  {
    v208 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v205 | 7) != 0x17)
      v208 = v205 | 7;
    v209 = v208 + 1;
    v207 = operator new(v208 + 1);
    *(_QWORD *)&__dst[8] = v206;
    *(_QWORD *)&__dst[16] = v209 | 0x8000000000000000;
    *(_QWORD *)__dst = v207;
  }
  else
  {
    __dst[23] = v205;
    v207 = __dst;
    if (!v205)
      goto LABEL_233;
  }
  memmove(v207, v204, v206);
LABEL_233:
  v207[v206] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 96);
  v213 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_237;
  v214 = (unint64_t *)&v328[1]->info;
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (v215)
  {
LABEL_237:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_239;
    goto LABEL_238;
  }
  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
  std::__shared_weak_count::__release_weak(v213);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_238:
    operator delete(*(void **)__dst);
LABEL_239:
  *(_OWORD *)__p = xmmword_239F1348B;
  *(_OWORD *)((char *)&__p[1] + 5) = *(__int128 *)((char *)&xmmword_239F1348B + 13);
  sub_2396EFD48((uint64_t)__p, *(int32x4_t *)((char *)&xmmword_239F1348B + 13), v210, v211, v212);
  v217 = v216;
  v218 = strlen(v216);
  if (v218 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v219 = v218;
  if (v218 >= 0x17)
  {
    v221 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v218 | 7) != 0x17)
      v221 = v218 | 7;
    v222 = v221 + 1;
    v220 = operator new(v221 + 1);
    *(_QWORD *)&__dst[8] = v219;
    *(_QWORD *)&__dst[16] = v222 | 0x8000000000000000;
    *(_QWORD *)__dst = v220;
  }
  else
  {
    __dst[23] = v218;
    v220 = __dst;
    if (!v218)
      goto LABEL_247;
  }
  memmove(v220, v217, v219);
LABEL_247:
  v220[v219] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 100);
  v226 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_251;
  v227 = (unint64_t *)&v328[1]->info;
  do
    v228 = __ldaxr(v227);
  while (__stlxr(v228 - 1, v227));
  if (v228)
  {
LABEL_251:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_253;
    goto LABEL_252;
  }
  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
  std::__shared_weak_count::__release_weak(v226);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_252:
    operator delete(*(void **)__dst);
LABEL_253:
  strcpy(__dst, "U#49<1\n3'480&\n'4!<:");
  sub_23958E55C((uint64_t)__dst, *(int32x4_t *)"U#49<1\n3'480&\n'4!<:", v223, v224, v225);
  v230 = v229;
  v231 = strlen(v229);
  if (v231 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v232 = (void *)v231;
  if (v231 >= 0x17)
  {
    v234 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v231 | 7) != 0x17)
      v234 = v231 | 7;
    v235 = v234 + 1;
    v233 = operator new(v234 + 1);
    __p[1] = v232;
    __p[2] = (void *)(v235 | 0x8000000000000000);
    __p[0] = v233;
  }
  else
  {
    HIBYTE(__p[2]) = v231;
    v233 = __p;
    if (!v231)
      goto LABEL_261;
  }
  memmove(v233, v230, (size_t)v232);
LABEL_261:
  *((_BYTE *)v232 + (_QWORD)v233) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_239BB47DC((uint64_t)a1, v328[0], a2 + 104);
  v236 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_265;
  v237 = (unint64_t *)&v328[1]->info;
  do
    v238 = __ldaxr(v237);
  while (__stlxr(v238 - 1, v237));
  if (v238)
  {
LABEL_265:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_267;
    goto LABEL_266;
  }
  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
  std::__shared_weak_count::__release_weak(v236);
  if (SHIBYTE(__p[2]) < 0)
LABEL_266:
    operator delete(__p[0]);
LABEL_267:
  v328[0] = (CFStringRef)0xD113E0C140F61;
  LODWORD(v328[1]) = 1180687;
  v239 = sub_23958E4C8((uint64_t)v328);
  v240 = strlen(v239);
  if (v240 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v241 = (void *)v240;
  if (v240 >= 0x17)
  {
    v243 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v240 | 7) != 0x17)
      v243 = v240 | 7;
    v244 = v243 + 1;
    v242 = operator new(v243 + 1);
    __p[1] = v241;
    __p[2] = (void *)(v244 | 0x8000000000000000);
    __p[0] = v242;
  }
  else
  {
    HIBYTE(__p[2]) = v240;
    v242 = __p;
    if (!v240)
      goto LABEL_275;
  }
  memmove(v242, v239, (size_t)v241);
LABEL_275:
  *((_BYTE *)v241 + (_QWORD)v242) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB4A9C((uint64_t)a1, *(const void **)__dst, a2 + 112);
  v245 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_279;
  v246 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (v247)
  {
LABEL_279:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_281;
    goto LABEL_280;
  }
  ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
  std::__shared_weak_count::__release_weak(v245);
  if (SHIBYTE(__p[2]) < 0)
LABEL_280:
    operator delete(__p[0]);
LABEL_281:
  strcpy((char *)v328, "\x1Bkwzu~hDivh~");
  v248 = sub_239510ECC((uint64_t)v328);
  v249 = strlen(v248);
  if (v249 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v250 = (void *)v249;
  if (v249 >= 0x17)
  {
    v252 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v249 | 7) != 0x17)
      v252 = v249 | 7;
    v253 = v252 + 1;
    v251 = operator new(v252 + 1);
    __p[1] = v250;
    __p[2] = (void *)(v253 | 0x8000000000000000);
    __p[0] = v251;
  }
  else
  {
    HIBYTE(__p[2]) = v249;
    v251 = __p;
    if (!v249)
      goto LABEL_289;
  }
  memmove(v251, v248, (size_t)v250);
LABEL_289:
  *((_BYTE *)v250 + (_QWORD)v251) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BE00FC((uint64_t)a1, *(const void **)__dst, (uint64_t *)(a2 + 120));
  v254 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_293;
  v255 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v256 = __ldaxr(v255);
  while (__stlxr(v256 - 1, v255));
  if (v256)
  {
LABEL_293:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
  ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
  std::__shared_weak_count::__release_weak(v254);
  if (SHIBYTE(__p[2]) < 0)
LABEL_294:
    operator delete(__p[0]);
LABEL_295:
  *(_OWORD *)v328 = xmmword_239F0C280;
  sub_23950F8E4((uint64_t)v328);
  v258 = v257;
  v259 = strlen(v257);
  if (v259 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v260 = (void *)v259;
  if (v259 >= 0x17)
  {
    v262 = (v259 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v259 | 7) != 0x17)
      v262 = v259 | 7;
    v263 = v262 + 1;
    v261 = operator new(v262 + 1);
    __p[1] = v260;
    __p[2] = (void *)(v263 | 0x8000000000000000);
    __p[0] = v261;
  }
  else
  {
    HIBYTE(__p[2]) = v259;
    v261 = __p;
    if (!v259)
      goto LABEL_303;
  }
  memmove(v261, v258, (size_t)v260);
LABEL_303:
  *((_BYTE *)v260 + (_QWORD)v261) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB4494((uint64_t)a1, *(const void **)__dst, (uint64_t *)(a2 + 144));
  v267 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_307;
  v268 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v269 = __ldaxr(v268);
  while (__stlxr(v269 - 1, v268));
  if (v269)
  {
LABEL_307:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_309;
    goto LABEL_308;
  }
  ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
  std::__shared_weak_count::__release_weak(v267);
  if (SHIBYTE(__p[2]) < 0)
LABEL_308:
    operator delete(__p[0]);
LABEL_309:
  *(_OWORD *)__dst = xmmword_239F134BC;
  *(_QWORD *)&__dst[14] = 0x1D1C1015090918;
  v270 = sub_239A90BEC(__dst, (int8x16_t)xmmword_239F134BC, v264, v265, v266);
  v271 = strlen((const char *)v270);
  if (v271 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v272 = (void *)v271;
  if (v271 >= 0x17)
  {
    v274 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v271 | 7) != 0x17)
      v274 = v271 | 7;
    v275 = v274 + 1;
    v273 = operator new(v274 + 1);
    __p[1] = v272;
    __p[2] = (void *)(v275 | 0x8000000000000000);
    __p[0] = v273;
  }
  else
  {
    HIBYTE(__p[2]) = v271;
    v273 = __p;
    if (!v271)
      goto LABEL_317;
  }
  memmove(v273, v270, (size_t)v272);
LABEL_317:
  *((_BYTE *)v272 + (_QWORD)v273) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_2396B4EAC((uint64_t)a1, v328[0], (_BYTE *)(a2 + 168));
  v279 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_321;
  v280 = (unint64_t *)&v328[1]->info;
  do
    v281 = __ldaxr(v280);
  while (__stlxr(v281 - 1, v280));
  if (v281)
  {
LABEL_321:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_323;
    goto LABEL_322;
  }
  ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
  std::__shared_weak_count::__release_weak(v279);
  if (SHIBYTE(__p[2]) < 0)
LABEL_322:
    operator delete(__p[0]);
LABEL_323:
  strcpy((char *)__p, "D-7\x1B#1- ! \x1B\"-(0!6\x1B%44(-! ");
  sub_239A93C04((unsigned __int8 *)__p, *(int32x4_t *)"\x1B\"-(0!6\x1B%44(-! ", v276, v277, v278);
  v283 = v282;
  v284 = strlen(v282);
  if (v284 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v285 = v284;
  if (v284 >= 0x17)
  {
    v287 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v284 | 7) != 0x17)
      v287 = v284 | 7;
    v288 = v287 + 1;
    v286 = operator new(v287 + 1);
    *(_QWORD *)&__dst[8] = v285;
    *(_QWORD *)&__dst[16] = v288 | 0x8000000000000000;
    *(_QWORD *)__dst = v286;
  }
  else
  {
    __dst[23] = v284;
    v286 = __dst;
    if (!v284)
      goto LABEL_331;
  }
  memmove(v286, v283, v285);
LABEL_331:
  v286[v285] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_2396B4EAC((uint64_t)a1, v328[0], (_BYTE *)(a2 + 169));
  v291 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_335;
  v292 = (unint64_t *)&v328[1]->info;
  do
    v293 = __ldaxr(v292);
  while (__stlxr(v293 - 1, v292));
  if (v293)
  {
LABEL_335:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_337;
    goto LABEL_336;
  }
  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
  std::__shared_weak_count::__release_weak(v291);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_336:
    operator delete(*(void **)__dst);
LABEL_337:
  strcpy((char *)__p, "/F\\p\\FAHCJp\\JHBJA[p]HMKpNCFHABJA[pLNCCJK");
  sub_2396F08F4((unsigned __int8 *)__p, *(double *)"CFHABJA[pLNCCJK", *(int16x8_t *)"A[p]HMKpNCFHABJA[pLNCCJK", v289, v290);
  v295 = v294;
  v296 = strlen(v294);
  if (v296 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v297 = v296;
  if (v296 >= 0x17)
  {
    v299 = (v296 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v296 | 7) != 0x17)
      v299 = v296 | 7;
    v300 = v299 + 1;
    v298 = operator new(v299 + 1);
    *(_QWORD *)&__dst[8] = v297;
    *(_QWORD *)&__dst[16] = v300 | 0x8000000000000000;
    *(_QWORD *)__dst = v298;
  }
  else
  {
    __dst[23] = v296;
    v298 = __dst;
    if (!v296)
      goto LABEL_345;
  }
  memmove(v298, v295, v297);
LABEL_345:
  v298[v297] = 0;
  sub_239629EF4((uint64_t)__dst, v328);
  sub_2396B4EAC((uint64_t)a1, v328[0], (_BYTE *)(a2 + 170));
  v301 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_349;
  v302 = (unint64_t *)&v328[1]->info;
  do
    v303 = __ldaxr(v302);
  while (__stlxr(v303 - 1, v302));
  if (v303)
  {
LABEL_349:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_351;
    goto LABEL_350;
  }
  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
  std::__shared_weak_count::__release_weak(v301);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_350:
    operator delete(*(void **)__dst);
LABEL_351:
  strcpy((char *)v328, "'SB_SRUBIBTT");
  v304 = sub_239510ECC((uint64_t)v328);
  v305 = strlen(v304);
  if (v305 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v306 = (void *)v305;
  if (v305 >= 0x17)
  {
    v308 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v305 | 7) != 0x17)
      v308 = v305 | 7;
    v309 = v308 + 1;
    v307 = operator new(v308 + 1);
    __p[1] = v306;
    __p[2] = (void *)(v309 | 0x8000000000000000);
    __p[0] = v307;
  }
  else
  {
    HIBYTE(__p[2]) = v305;
    v307 = __p;
    if (!v305)
      goto LABEL_359;
  }
  memmove(v307, v304, (size_t)v306);
LABEL_359:
  *((_BYTE *)v306 + (_QWORD)v307) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB47DC((uint64_t)a1, *(const void **)__dst, a2 + 172);
  v313 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_363;
  v314 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v315 = __ldaxr(v314);
  while (__stlxr(v315 - 1, v314));
  if (v315)
  {
LABEL_363:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_365;
    goto LABEL_364;
  }
  ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
  std::__shared_weak_count::__release_weak(v313);
  if (SHIBYTE(__p[2]) < 0)
LABEL_364:
    operator delete(__p[0]);
LABEL_365:
  strcpy(__dst, ">Z[NJVaM[PMQLa]QPXWY");
  sub_2396EFB50((uint64_t)__dst, *(int32x4_t *)">Z[NJVaM[PMQLa]QPXWY", v310, v311, v312);
  v317 = v316;
  v318 = strlen(v316);
  if (v318 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v319 = (void *)v318;
  if (v318 >= 0x17)
  {
    v321 = (v318 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v318 | 7) != 0x17)
      v321 = v318 | 7;
    v322 = v321 + 1;
    v320 = operator new(v321 + 1);
    __p[1] = v319;
    __p[2] = (void *)(v322 | 0x8000000000000000);
    __p[0] = v320;
  }
  else
  {
    HIBYTE(__p[2]) = v318;
    v320 = __p;
    if (!v318)
      goto LABEL_373;
  }
  memmove(v320, v317, (size_t)v319);
LABEL_373:
  *((_BYTE *)v319 + (_QWORD)v320) = 0;
  sub_239629EF4((uint64_t)__p, v328);
  sub_239BC4570((uint64_t)a1, v328[0], (char *)(a2 + 176));
  v323 = (std::__shared_weak_count *)v328[1];
  if (!v328[1])
    goto LABEL_377;
  v324 = (unint64_t *)&v328[1]->info;
  do
    v325 = __ldaxr(v324);
  while (__stlxr(v325 - 1, v324));
  if (v325)
  {
LABEL_377:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_378;
  }
  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
  std::__shared_weak_count::__release_weak(v323);
  if (SHIBYTE(__p[2]) < 0)
LABEL_378:
    operator delete(__p[0]);
}

void sub_239BDFD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_239416DA0((uint64_t)&a27);
  if (a14 < 0)
    operator delete(__p);
  sub_239416DA0(v27);
  _Unwind_Resume(a1);
}

void sub_239BDFEBC()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFEC4()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFECC()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFED4()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFEDC()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFEE4()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFEEC()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFEF4()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFEFC()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF04()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF0C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF14()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF1C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF24()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF2C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF34()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF3C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF44()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF4C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF54()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF5C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF64()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF6C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF74()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF7C()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF84()
{
  JUMPOUT(0x239BDFEACLL);
}

void sub_239BDFF8C()
{
  JUMPOUT(0x239BDFEACLL);
}

int8x16_t sub_239BDFF94(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a5.i32[0] = *a1;
  v8 = a5;
  *(__int16 *)((char *)a5.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a5, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] ^= v6;
  a1[38] ^= v6;
  a1[39] ^= v6;
  a1[40] ^= v6;
  a1[41] ^= v6;
  a1[42] ^= v6;
  a1[43] ^= v6;
  a1[44] ^= v6;
  a1[45] ^= v6;
  a1[46] ^= v6;
  a1[47] ^= v6;
  a1[48] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v12.i64[0] = *(_QWORD *)(a1 + 1);
  v12.i8[8] = v6;
  v12.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

void sub_239BE00FC(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  CFMutableArrayRef v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38[2];
  void *value;
  std::__shared_weak_count *v40;
  CFMutableArrayRef theArray[2];

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!sub_23962C8DC(*(const __CFDictionary **)a1, a2))
  {
    sub_23962BDF8((std::__shared_weak_count_vtbl **)theArray);
    v12 = theArray[0];
    v11 = (std::__shared_weak_count *)theArray[1];
    if (!theArray[1])
      goto LABEL_13;
    v13 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v12)
      {
LABEL_14:
        v16 = *a3;
        v17 = a3[1];
        if (*a3 != v17)
        {
          do
          {
            sub_239629B4C(&value, v16);
            v19 = value;
            v18 = v40;
            if (!v40)
              goto LABEL_20;
            v20 = (unint64_t *)&v40->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
            do
              v22 = __ldaxr(v20);
            while (__stlxr(v22 - 1, v20));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              if (v19)
              {
LABEL_21:
                j__CFArrayAppendValue(theArray[0], value);
                v23 = v40;
                if (v40)
                  goto LABEL_25;
                goto LABEL_29;
              }
            }
            else
            {
LABEL_20:
              if (v19)
                goto LABEL_21;
            }
            v38[0] = 0;
            v38[1] = 0;
            v23 = v40;
            if (v40)
            {
LABEL_25:
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
LABEL_29:
            if (!v19)
              goto LABEL_37;
            v16 += 4;
          }
          while (v16 != v17);
        }
        *(_OWORD *)v38 = *(_OWORD *)theArray;
        v26 = theArray;
LABEL_36:
        *v26 = 0;
        v26[1] = 0;
LABEL_37:
        v27 = (std::__shared_weak_count *)theArray[1];
        if (theArray[1])
        {
          v28 = (unint64_t *)((char *)theArray[1] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v31 = v38[0];
        v30 = (std::__shared_weak_count *)v38[1];
        if (!v38[1])
          goto LABEL_47;
        v32 = (unint64_t *)((char *)v38[1] + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          if (!v31)
          {
LABEL_49:
            v35 = (std::__shared_weak_count *)v38[1];
            if (v38[1])
            {
              v36 = (unint64_t *)((char *)v38[1] + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            return;
          }
        }
        else
        {
LABEL_47:
          if (!v31)
            goto LABEL_49;
        }
        j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, v38[0]);
        goto LABEL_49;
      }
    }
    v26 = v38;
    goto LABEL_36;
  }
}

void sub_239BE03AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239BE03C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239BE0444(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int32x4_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  const char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  double v24;
  int32x4_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  double v36;
  int32x4_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  const char *v41;
  const char *v42;
  size_t v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  double v49;
  int32x4_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  const char *v54;
  const char *v55;
  size_t v56;
  size_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  size_t v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  const char *v74;
  size_t v75;
  size_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  const char *v83;
  size_t v84;
  size_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  size_t v93;
  size_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const char *v101;
  size_t v102;
  size_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t v107;
  double v108;
  int32x4_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  const char *v113;
  const char *v114;
  size_t v115;
  size_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  int16x8_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  const char *v124;
  const char *v125;
  size_t v126;
  size_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  int8x16_t v131;
  double v132;
  int32x4_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  const char *v137;
  const char *v138;
  size_t v139;
  size_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  int8x16_t v144;
  double v145;
  int32x4_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  const char *v150;
  const char *v151;
  size_t v152;
  size_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  int16x8_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  const char *v161;
  const char *v162;
  size_t v163;
  size_t v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  const char *v174;
  size_t v175;
  void *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  int8x16_t v180;
  double v181;
  int32x4_t v182;
  const char *v183;
  const char *v184;
  size_t v185;
  size_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  int8x16_t v190;
  double v191;
  int32x4_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  const char *v197;
  size_t v198;
  size_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  int8x16_t v203;
  double v204;
  int32x4_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  const char *v209;
  const char *v210;
  size_t v211;
  size_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  int8x16_t v216;
  double v217;
  int32x4_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  const char *v222;
  const char *v223;
  size_t v224;
  size_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  const char *v232;
  const char *v233;
  size_t v234;
  size_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  const char *v242;
  const char *v243;
  size_t v244;
  size_t v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  const char *v252;
  size_t v253;
  size_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  const char *v261;
  size_t v262;
  size_t v263;
  _BYTE *v264;
  uint64_t v265;
  uint64_t v266;
  int8x16_t v267;
  double v268;
  int32x4_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  const char *v273;
  const char *v274;
  size_t v275;
  size_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  int8x16_t v280;
  double v281;
  int32x4_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  const char *v286;
  const char *v287;
  size_t v288;
  size_t v289;
  _BYTE *v290;
  uint64_t v291;
  uint64_t v292;
  int8x16_t v293;
  double v294;
  int32x4_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  const char *v299;
  const char *v300;
  size_t v301;
  size_t v302;
  _BYTE *v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  const char *v309;
  size_t v310;
  size_t v311;
  _BYTE *v312;
  uint64_t v313;
  uint64_t v314;
  int32x4_t v315;
  double v316;
  int32x4_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unsigned __int8 *v321;
  size_t v322;
  size_t v323;
  _BYTE *v324;
  uint64_t v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  const char *v330;
  const char *v331;
  size_t v332;
  size_t v333;
  _BYTE *v334;
  uint64_t v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  const char *v340;
  const char *v341;
  size_t v342;
  size_t v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  int8x16_t *v350;
  size_t v351;
  size_t v352;
  _BYTE *v353;
  uint64_t v354;
  uint64_t v355;
  int16x8_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  const char *v360;
  const char *v361;
  size_t v362;
  size_t v363;
  _BYTE *v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  const char *v370;
  size_t v371;
  size_t v372;
  _BYTE *v373;
  uint64_t v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  const char *v379;
  const char *v380;
  size_t v381;
  size_t v382;
  _BYTE *v383;
  uint64_t v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  const char *v389;
  size_t v390;
  size_t v391;
  _BYTE *v392;
  uint64_t v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  __int128 v404;
  uint64_t v405;
  int v406;
  char v407;
  void *v408[2];
  unint64_t v409;
  _BYTE __dst[32];
  int8x16_t __p[2];
  __int128 v412;
  uint64_t v413;

  v413 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  __p[0] = (int8x16_t)xmmword_239F135D4;
  __p[1].i8[0] = 0;
  sub_2396EFA24((uint64_t)__p);
  v5 = v4;
  v6 = strlen(v4);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)&__dst[8] = v7;
    *(_QWORD *)&__dst[16] = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
  }
  else
  {
    __dst[23] = v6;
    v8 = __dst;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v8, v5, v7);
LABEL_9:
  v8[v7] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v408);
  sub_2396B4EAC((uint64_t)a1, v408[0], (_BYTE *)a2);
  v13 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_13;
  v14 = (unint64_t *)((char *)v408[1] + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_13:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_14:
    operator delete(*(void **)__dst);
LABEL_15:
  *(_OWORD *)__dst = xmmword_239F135E5;
  *(int8x16_t *)&__dst[16] = xmmword_239F135F5;
  sub_2396F06F0((uint64_t)__dst, (int32x4_t)xmmword_239F135E5, xmmword_239F135F5, v11, v12);
  v17 = v16;
  v18 = strlen(v16);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    __p[0].i64[1] = v19;
    __p[1].i64[0] = v22 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v20;
  }
  else
  {
    __p[1].i8[7] = v18;
    v20 = __p;
    if (!v18)
      goto LABEL_23;
  }
  memmove(v20, v17, v19);
LABEL_23:
  *((_BYTE *)v20 + v19) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v408);
  sub_239BB4A9C((uint64_t)a1, v408[0], a2 + 8);
  v26 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_27;
  v27 = (unint64_t *)((char *)v408[1] + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (v28)
  {
LABEL_27:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (__p[1].i8[7] < 0)
LABEL_28:
    operator delete((void *)__p[0].i64[0]);
LABEL_29:
  __p[0] = (int8x16_t)xmmword_239F13605;
  *(uint64_t *)((char *)&__p[0].i64[1] + 6) = 0x6C6C7A71776B70;
  v29 = sub_239A90BEC((unsigned __int8 *)__p, (int8x16_t)xmmword_239F13605, v23, v24, v25);
  v30 = strlen((const char *)v29);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    *(_QWORD *)&__dst[8] = v31;
    *(_QWORD *)&__dst[16] = v34 | 0x8000000000000000;
    *(_QWORD *)__dst = v32;
  }
  else
  {
    __dst[23] = v30;
    v32 = __dst;
    if (!v30)
      goto LABEL_37;
  }
  memmove(v32, v29, v31);
LABEL_37:
  v32[v31] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v408);
  sub_239BB47DC((uint64_t)a1, v408[0], a2 + 16);
  v38 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_41;
  v39 = (unint64_t *)((char *)v408[1] + 8);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_41:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_42:
    operator delete(*(void **)__dst);
LABEL_43:
  *(_OWORD *)__dst = xmmword_239F1361B;
  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F1361B + 15), v35, v36, v37);
  v42 = v41;
  v43 = strlen(v41);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v44 = v43;
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v45 = operator new(v46 + 1);
    __p[0].i64[1] = v44;
    __p[1].i64[0] = v47 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v45;
  }
  else
  {
    __p[1].i8[7] = v43;
    v45 = __p;
    if (!v43)
      goto LABEL_51;
  }
  memmove(v45, v42, v44);
LABEL_51:
  *((_BYTE *)v45 + v44) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)v408);
  sub_239BB4A9C((uint64_t)a1, v408[0], a2 + 24);
  v51 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_55;
  v52 = (unint64_t *)((char *)v408[1] + 8);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
  {
LABEL_55:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if (__p[1].i8[7] < 0)
LABEL_56:
    operator delete((void *)__p[0].i64[0]);
LABEL_57:
  __p[0] = (int8x16_t)xmmword_239F1363A;
  __p[1].i64[0] = 0x412101312281ALL;
  sub_2396F1A4C((uint64_t)__p, (int32x4_t)xmmword_239F1363A, v48, v49, v50);
  v55 = v54;
  v56 = strlen(v54);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = operator new(v59 + 1);
    *(_QWORD *)&__dst[8] = v57;
    *(_QWORD *)&__dst[16] = v60 | 0x8000000000000000;
    *(_QWORD *)__dst = v58;
  }
  else
  {
    __dst[23] = v56;
    v58 = __dst;
    if (!v56)
      goto LABEL_65;
  }
  memmove(v58, v55, v57);
LABEL_65:
  v58[v57] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v408);
  sub_239BB4A9C((uint64_t)a1, v408[0], a2 + 32);
  v61 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_69;
  v62 = (unint64_t *)((char *)v408[1] + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (v63)
  {
LABEL_69:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
  std::__shared_weak_count::__release_weak(v61);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_70:
    operator delete(*(void **)__dst);
LABEL_71:
  v408[0] = (void *)0x4B6067617E707514;
  strcpy((char *)&v408[1], "yquz");
  v64 = sub_239510ECC((uint64_t)v408);
  v65 = strlen(v64);
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v66 = v65;
  if (v65 >= 0x17)
  {
    v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v68 = v65 | 7;
    v69 = v68 + 1;
    v67 = operator new(v68 + 1);
    *(_QWORD *)&__dst[8] = v66;
    *(_QWORD *)&__dst[16] = v69 | 0x8000000000000000;
    *(_QWORD *)__dst = v67;
  }
  else
  {
    __dst[23] = v65;
    v67 = __dst;
    if (!v65)
      goto LABEL_79;
  }
  memmove(v67, v64, v66);
LABEL_79:
  v67[v66] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BE00FC((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t *)(a2 + 40));
  v70 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_83;
  v71 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (v72)
  {
LABEL_83:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
  std::__shared_weak_count::__release_weak(v70);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_84:
    operator delete(*(void **)__dst);
LABEL_85:
  *(_OWORD *)v408 = xmmword_239F0C290;
  sub_23950F8E4((uint64_t)v408);
  v74 = v73;
  v75 = strlen(v73);
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v76 = v75;
  if (v75 >= 0x17)
  {
    v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v78 = v75 | 7;
    v79 = v78 + 1;
    v77 = operator new(v78 + 1);
    *(_QWORD *)&__dst[8] = v76;
    *(_QWORD *)&__dst[16] = v79 | 0x8000000000000000;
    *(_QWORD *)__dst = v77;
  }
  else
  {
    __dst[23] = v75;
    v77 = __dst;
    if (!v75)
      goto LABEL_93;
  }
  memmove(v77, v74, v76);
LABEL_93:
  v77[v76] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BC17EC((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t *)(a2 + 64));
  v80 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_97;
  v81 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (v82)
  {
LABEL_97:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
  std::__shared_weak_count::__release_weak(v80);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_98:
    operator delete(*(void **)__dst);
LABEL_99:
  v408[0] = (void *)0xD1512240813097BLL;
  BYTE4(v408[1]) = 0;
  LODWORD(v408[1]) = 521279258;
  v83 = sub_239510ECC((uint64_t)v408);
  v84 = strlen(v83);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    v86 = operator new(v87 + 1);
    *(_QWORD *)&__dst[8] = v85;
    *(_QWORD *)&__dst[16] = v88 | 0x8000000000000000;
    *(_QWORD *)__dst = v86;
  }
  else
  {
    __dst[23] = v84;
    v86 = __dst;
    if (!v84)
      goto LABEL_107;
  }
  memmove(v86, v83, v85);
LABEL_107:
  v86[v85] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BC17EC((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t *)(a2 + 88));
  v89 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_111;
  v90 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (v91)
  {
LABEL_111:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
  std::__shared_weak_count::__release_weak(v89);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_112:
    operator delete(*(void **)__dst);
LABEL_113:
  strcpy((char *)v408, "\r~baRdc{ladi");
  v92 = sub_239510ECC((uint64_t)v408);
  v93 = strlen(v92);
  if (v93 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v94 = v93;
  if (v93 >= 0x17)
  {
    v96 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v96 = v93 | 7;
    v97 = v96 + 1;
    v95 = operator new(v96 + 1);
    *(_QWORD *)&__dst[8] = v94;
    *(_QWORD *)&__dst[16] = v97 | 0x8000000000000000;
    *(_QWORD *)__dst = v95;
  }
  else
  {
    __dst[23] = v93;
    v95 = __dst;
    if (!v93)
      goto LABEL_121;
  }
  memmove(v95, v92, v94);
LABEL_121:
  v95[v94] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BC17EC((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t *)(a2 + 112));
  v98 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_125;
  v99 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (v100)
  {
LABEL_125:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
  std::__shared_weak_count::__release_weak(v98);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_126:
    operator delete(*(void **)__dst);
LABEL_127:
  strcpy((char *)v408, "\"PCQ}KLTCNKF");
  v101 = sub_239510ECC((uint64_t)v408);
  v102 = strlen(v101);
  if (v102 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v103 = v102;
  if (v102 >= 0x17)
  {
    v105 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v102 | 7) != 0x17)
      v105 = v102 | 7;
    v106 = v105 + 1;
    v104 = operator new(v105 + 1);
    *(_QWORD *)&__dst[8] = v103;
    *(_QWORD *)&__dst[16] = v106 | 0x8000000000000000;
    *(_QWORD *)__dst = v104;
  }
  else
  {
    __dst[23] = v102;
    v104 = __dst;
    if (!v102)
      goto LABEL_135;
  }
  memmove(v104, v101, v103);
LABEL_135:
  v104[v103] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4148((uint64_t)a1, (const void *)__p[0].i64[0], a2 + 136);
  v110 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_139;
  v111 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (v112)
  {
LABEL_139:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
  std::__shared_weak_count::__release_weak(v110);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_140:
    operator delete(*(void **)__dst);
LABEL_141:
  strcpy(__p[0].i8, "%APWDQLJKzSLVLGLILQ\\");
  sub_2396EFB50((uint64_t)__p, *(int32x4_t *)"%APWDQLJKzSLVLGLILQ\\", v107, v108, v109);
  v114 = v113;
  v115 = strlen(v113);
  if (v115 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v116 = v115;
  if (v115 >= 0x17)
  {
    v118 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v115 | 7) != 0x17)
      v118 = v115 | 7;
    v119 = v118 + 1;
    v117 = operator new(v118 + 1);
    *(_QWORD *)&__dst[8] = v116;
    *(_QWORD *)&__dst[16] = v119 | 0x8000000000000000;
    *(_QWORD *)__dst = v117;
  }
  else
  {
    __dst[23] = v115;
    v117 = __dst;
    if (!v115)
      goto LABEL_149;
  }
  memmove(v117, v114, v116);
LABEL_149:
  v117[v116] = 0;
  *(_QWORD *)&v412 = *(_QWORD *)(a2 + 144);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v408);
  sub_2397373B0((uint64_t)a1, v408[0], (uint64_t)&v412);
  v121 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_153;
  v122 = (unint64_t *)((char *)v408[1] + 8);
  do
    v123 = __ldaxr(v122);
  while (__stlxr(v123 - 1, v122));
  if (v123)
  {
LABEL_153:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
  std::__shared_weak_count::__release_weak(v121);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_154:
    operator delete(*(void **)__dst);
LABEL_155:
  v408[0] = (void *)0x787E637665627317;
  strcpy((char *)&v408[1], "yHzeq");
  sub_23971A32C((uint64_t)v408, v120);
  v125 = v124;
  v126 = strlen(v124);
  if (v126 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v127 = v126;
  if (v126 >= 0x17)
  {
    v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v129 = v126 | 7;
    v130 = v129 + 1;
    v128 = operator new(v129 + 1);
    *(_QWORD *)&__dst[8] = v127;
    *(_QWORD *)&__dst[16] = v130 | 0x8000000000000000;
    *(_QWORD *)__dst = v128;
  }
  else
  {
    __dst[23] = v126;
    v128 = __dst;
    if (!v126)
      goto LABEL_163;
  }
  memmove(v128, v125, v127);
LABEL_163:
  v128[v127] = 0;
  *(_QWORD *)&v412 = *(_QWORD *)(a2 + 152);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2397373B0((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t)&v412);
  v134 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_167;
  v135 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (v136)
  {
LABEL_167:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_169;
    goto LABEL_168;
  }
  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
  std::__shared_weak_count::__release_weak(v134);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_168:
    operator delete(*(void **)__dst);
LABEL_169:
  strcpy(__p[0].i8, ">ZKL_JWQPaL[PZ[LWPY");
  sub_23958E55C((uint64_t)__p, *(int32x4_t *)">ZKL_JWQPaL[PZ[LWPY", v131, v132, v133);
  v138 = v137;
  v139 = strlen(v137);
  if (v139 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v140 = v139;
  if (v139 >= 0x17)
  {
    v142 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v139 | 7) != 0x17)
      v142 = v139 | 7;
    v143 = v142 + 1;
    v141 = operator new(v142 + 1);
    *(_QWORD *)&__dst[8] = v140;
    *(_QWORD *)&__dst[16] = v143 | 0x8000000000000000;
    *(_QWORD *)__dst = v141;
  }
  else
  {
    __dst[23] = v139;
    v141 = __dst;
    if (!v139)
      goto LABEL_177;
  }
  memmove(v141, v138, v140);
LABEL_177:
  v141[v140] = 0;
  *(_QWORD *)&v412 = *(_QWORD *)(a2 + 160);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v408);
  sub_2397373B0((uint64_t)a1, v408[0], (uint64_t)&v412);
  v147 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_181;
  v148 = (unint64_t *)((char *)v408[1] + 8);
  do
    v149 = __ldaxr(v148);
  while (__stlxr(v149 - 1, v148));
  if (v149)
  {
LABEL_181:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_182;
  }
  ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
  std::__shared_weak_count::__release_weak(v147);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_182:
    operator delete(*(void **)__dst);
LABEL_183:
  __p[0] = (int8x16_t)xmmword_239F1367B;
  *(__int32 *)((char *)&__p[0].i32[3] + 3) = 1055006;
  sub_23958E450((uint64_t)__p, (int32x4_t)xmmword_239F1367B, v144, v145, v146);
  v151 = v150;
  v152 = strlen(v150);
  if (v152 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v153 = v152;
  if (v152 >= 0x17)
  {
    v155 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v152 | 7) != 0x17)
      v155 = v152 | 7;
    v156 = v155 + 1;
    v154 = operator new(v155 + 1);
    *(_QWORD *)&__dst[8] = v153;
    *(_QWORD *)&__dst[16] = v156 | 0x8000000000000000;
    *(_QWORD *)__dst = v154;
  }
  else
  {
    __dst[23] = v152;
    v154 = __dst;
    if (!v152)
      goto LABEL_191;
  }
  memmove(v154, v151, v153);
LABEL_191:
  v154[v153] = 0;
  *(_QWORD *)&v412 = *(_QWORD *)(a2 + 168);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v408);
  sub_2397373B0((uint64_t)a1, v408[0], (uint64_t)&v412);
  v158 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_195;
  v159 = (unint64_t *)((char *)v408[1] + 8);
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (v160)
  {
LABEL_195:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_196;
  }
  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
  std::__shared_weak_count::__release_weak(v158);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_196:
    operator delete(*(void **)__dst);
LABEL_197:
  strcpy((char *)&v412, "$VQJPMIA{MJBK");
  sub_23971A32C((uint64_t)&v412, v157);
  v162 = v161;
  v163 = strlen(v161);
  if (v163 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v164 = v163;
  if (v163 >= 0x17)
  {
    v166 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v163 | 7) != 0x17)
      v166 = v163 | 7;
    v167 = v166 + 1;
    v165 = operator new(v166 + 1);
    *(_QWORD *)&__dst[8] = v164;
    *(_QWORD *)&__dst[16] = v167 | 0x8000000000000000;
    *(_QWORD *)__dst = v165;
  }
  else
  {
    __dst[23] = v163;
    v165 = __dst;
    if (!v163)
      goto LABEL_205;
  }
  memmove(v165, v162, v164);
LABEL_205:
  v165[v164] = 0;
  sub_239BCA2E4((uint64_t)v408, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a2 + 176));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB7018((uint64_t)a1, (const void *)__p[0].i64[0], (uint64_t)v408);
  v168 = (std::__shared_weak_count *)__p[0].i64[1];
  if (__p[0].i64[1])
  {
    v169 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = (std::__shared_weak_count *)v408[1];
  if (!v408[1])
    goto LABEL_214;
  v172 = (unint64_t *)((char *)v408[1] + 8);
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (v173)
  {
LABEL_214:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_216;
    goto LABEL_215;
  }
  ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
  std::__shared_weak_count::__release_weak(v171);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_215:
    operator delete(*(void **)__dst);
LABEL_216:
  v405 = 0x905390203151366;
  v407 = 0;
  v406 = 17760264;
  v174 = sub_239510ECC((uint64_t)&v405);
  v175 = strlen(v174);
  if (v175 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v176 = (void *)v175;
  if (v175 >= 0x17)
  {
    v178 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v175 | 7) != 0x17)
      v178 = v175 | 7;
    v179 = v178 + 1;
    v177 = operator new(v178 + 1);
    v408[1] = v176;
    v409 = v179 | 0x8000000000000000;
    v408[0] = v177;
    goto LABEL_223;
  }
  HIBYTE(v409) = v175;
  v177 = v408;
  if (v175)
LABEL_223:
    memmove(v177, v174, (size_t)v176);
  *((_BYTE *)v176 + (_QWORD)v177) = 0;
  sub_23962C714(&v404);
  *(_OWORD *)__dst = xmmword_239F12038;
  *(_OWORD *)&__dst[11] = *(__int128 *)((char *)&xmmword_239F12038 + 11);
  sub_2396F1974((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12038 + 11), v180, v181, v182);
  v184 = v183;
  v185 = strlen(v183);
  if (v185 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v186 = v185;
  if (v185 >= 0x17)
  {
    v188 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v185 | 7) != 0x17)
      v188 = v185 | 7;
    v189 = v188 + 1;
    v187 = operator new(v188 + 1);
    __p[0].i64[1] = v186;
    __p[1].i64[0] = v189 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v187;
  }
  else
  {
    __p[1].i8[7] = v185;
    v187 = __p;
    if (!v185)
      goto LABEL_232;
  }
  memmove(v187, v184, v186);
LABEL_232:
  *((_BYTE *)v187 + v186) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v412);
  sub_2396B4EAC((uint64_t)&v404, (const void *)v412, (_BYTE *)(a2 + 248));
  v193 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_236;
  v194 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v195 = __ldaxr(v194);
  while (__stlxr(v195 - 1, v194));
  if (v195)
  {
LABEL_236:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_238;
    goto LABEL_237;
  }
  ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
  std::__shared_weak_count::__release_weak(v193);
  if (__p[1].i8[7] < 0)
LABEL_237:
    operator delete((void *)__p[0].i64[0]);
LABEL_238:
  __p[0] = (int8x16_t)xmmword_239F12053;
  *(uint64_t *)((char *)&__p[0].i64[1] + 7) = 0x757C72717C7971;
  sub_2396EFBE0((uint64_t)__p, (int32x4_t)xmmword_239F12053, v190, v191, v192);
  v197 = v196;
  v198 = strlen(v196);
  if (v198 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v199 = v198;
  if (v198 >= 0x17)
  {
    v201 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17)
      v201 = v198 | 7;
    v202 = v201 + 1;
    v200 = operator new(v201 + 1);
    *(_QWORD *)&__dst[8] = v199;
    *(_QWORD *)&__dst[16] = v202 | 0x8000000000000000;
    *(_QWORD *)__dst = v200;
  }
  else
  {
    __dst[23] = v198;
    v200 = __dst;
    if (!v198)
      goto LABEL_246;
  }
  memmove(v200, v197, v199);
LABEL_246:
  v200[v199] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v412);
  sub_2396B4EAC((uint64_t)&v404, (const void *)v412, (_BYTE *)(a2 + 249));
  v206 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_250;
  v207 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 - 1, v207));
  if (v208)
  {
LABEL_250:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_252;
    goto LABEL_251;
  }
  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
  std::__shared_weak_count::__release_weak(v206);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_251:
    operator delete(*(void **)__dst);
LABEL_252:
  *(_OWORD *)__dst = xmmword_239F1206A;
  *(_OWORD *)&__dst[9] = *(__int128 *)((char *)&xmmword_239F1206A + 9);
  sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F1206A + 9), v203, v204, v205);
  v210 = v209;
  v211 = strlen(v209);
  if (v211 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v212 = v211;
  if (v211 >= 0x17)
  {
    v214 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v214 = v211 | 7;
    v215 = v214 + 1;
    v213 = operator new(v214 + 1);
    __p[0].i64[1] = v212;
    __p[1].i64[0] = v215 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v213;
  }
  else
  {
    __p[1].i8[7] = v211;
    v213 = __p;
    if (!v211)
      goto LABEL_260;
  }
  memmove(v213, v210, v212);
LABEL_260:
  *((_BYTE *)v213 + v212) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v412);
  sub_2396B4EAC((uint64_t)&v404, (const void *)v412, (_BYTE *)(a2 + 250));
  v219 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_264;
  v220 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (v221)
  {
LABEL_264:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_266;
    goto LABEL_265;
  }
  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
  std::__shared_weak_count::__release_weak(v219);
  if (__p[1].i8[7] < 0)
LABEL_265:
    operator delete((void *)__p[0].i64[0]);
LABEL_266:
  *(_OWORD *)__dst = xmmword_239F12083;
  *(_OWORD *)&__dst[13] = *(__int128 *)((char *)&xmmword_239F12083 + 13);
  sub_2396EFD48((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12083 + 13), v216, v217, v218);
  v223 = v222;
  v224 = strlen(v222);
  if (v224 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v225 = v224;
  if (v224 >= 0x17)
  {
    v227 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17)
      v227 = v224 | 7;
    v228 = v227 + 1;
    v226 = operator new(v227 + 1);
    __p[0].i64[1] = v225;
    __p[1].i64[0] = v228 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v226;
  }
  else
  {
    __p[1].i8[7] = v224;
    v226 = __p;
    if (!v224)
      goto LABEL_274;
  }
  memmove(v226, v223, v225);
LABEL_274:
  *((_BYTE *)v226 + v225) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v412);
  sub_239BB4338((uint64_t)&v404, (const void *)v412, a2 + 252);
  v229 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_278;
  v230 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v231 = __ldaxr(v230);
  while (__stlxr(v231 - 1, v230));
  if (v231)
  {
LABEL_278:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_280;
    goto LABEL_279;
  }
  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
  std::__shared_weak_count::__release_weak(v229);
  if (__p[1].i8[7] < 0)
LABEL_279:
    operator delete((void *)__p[0].i64[0]);
LABEL_280:
  __p[0] = (int8x16_t)xmmword_239F120A0;
  __p[1].i8[0] = 0;
  sub_2396EFA24((uint64_t)__p);
  v233 = v232;
  v234 = strlen(v232);
  if (v234 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v235 = v234;
  if (v234 >= 0x17)
  {
    v237 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v234 | 7) != 0x17)
      v237 = v234 | 7;
    v238 = v237 + 1;
    v236 = operator new(v237 + 1);
    *(_QWORD *)&__dst[8] = v235;
    *(_QWORD *)&__dst[16] = v238 | 0x8000000000000000;
    *(_QWORD *)__dst = v236;
  }
  else
  {
    __dst[23] = v234;
    v236 = __dst;
    if (!v234)
      goto LABEL_288;
  }
  memmove(v236, v233, v235);
LABEL_288:
  v236[v235] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v412);
  sub_2396B4EAC((uint64_t)&v404, (const void *)v412, (_BYTE *)(a2 + 256));
  v239 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_292;
  v240 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (v241)
  {
LABEL_292:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_294;
    goto LABEL_293;
  }
  ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
  std::__shared_weak_count::__release_weak(v239);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_293:
    operator delete(*(void **)__dst);
LABEL_294:
  v412 = xmmword_239F0C2A0;
  sub_23950F8E4((uint64_t)&v412);
  v243 = v242;
  v244 = strlen(v242);
  if (v244 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v245 = v244;
  if (v244 >= 0x17)
  {
    v247 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v244 | 7) != 0x17)
      v247 = v244 | 7;
    v248 = v247 + 1;
    v246 = operator new(v247 + 1);
    *(_QWORD *)&__dst[8] = v245;
    *(_QWORD *)&__dst[16] = v248 | 0x8000000000000000;
    *(_QWORD *)__dst = v246;
  }
  else
  {
    __dst[23] = v244;
    v246 = __dst;
    if (!v244)
      goto LABEL_302;
  }
  memmove(v246, v243, v245);
LABEL_302:
  v246[v245] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&v404, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 257));
  v249 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_306;
  v250 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v251 = __ldaxr(v250);
  while (__stlxr(v251 - 1, v250));
  if (v251)
  {
LABEL_306:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_308;
    goto LABEL_307;
  }
  ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
  std::__shared_weak_count::__release_weak(v249);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_307:
    operator delete(*(void **)__dst);
LABEL_308:
  strcpy((char *)&v412, "\atofuwbi");
  v252 = sub_239513718((char *)&v412);
  v253 = strlen(v252);
  if (v253 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v254 = v253;
  if (v253 >= 0x17)
  {
    v256 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v256 = v253 | 7;
    v257 = v256 + 1;
    v255 = operator new(v256 + 1);
    *(_QWORD *)&__dst[8] = v254;
    *(_QWORD *)&__dst[16] = v257 | 0x8000000000000000;
    *(_QWORD *)__dst = v255;
  }
  else
  {
    __dst[23] = v253;
    v255 = __dst;
    if (!v253)
      goto LABEL_316;
  }
  memmove(v255, v252, v254);
LABEL_316:
  v255[v254] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&v404, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 258));
  v258 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_320;
  v259 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v260 = __ldaxr(v259);
  while (__stlxr(v260 - 1, v259));
  if (v260)
  {
LABEL_320:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_322;
    goto LABEL_321;
  }
  ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
  std::__shared_weak_count::__release_weak(v258);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_321:
    operator delete(*(void **)__dst);
LABEL_322:
  *(_QWORD *)&v412 = 0x687A7D447E686E1BLL;
  BYTE12(v412) = 0;
  DWORD2(v412) = 2137736303;
  v261 = sub_239510ECC((uint64_t)&v412);
  v262 = strlen(v261);
  if (v262 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v263 = v262;
  if (v262 >= 0x17)
  {
    v265 = (v262 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v262 | 7) != 0x17)
      v265 = v262 | 7;
    v266 = v265 + 1;
    v264 = operator new(v265 + 1);
    *(_QWORD *)&__dst[8] = v263;
    *(_QWORD *)&__dst[16] = v266 | 0x8000000000000000;
    *(_QWORD *)__dst = v264;
  }
  else
  {
    __dst[23] = v262;
    v264 = __dst;
    if (!v262)
      goto LABEL_330;
  }
  memmove(v264, v261, v263);
LABEL_330:
  v264[v263] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&v404, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 259));
  v270 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_334;
  v271 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v272 = __ldaxr(v271);
  while (__stlxr(v272 - 1, v271));
  if (v272)
  {
LABEL_334:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_336;
    goto LABEL_335;
  }
  ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
  std::__shared_weak_count::__release_weak(v270);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_335:
    operator delete(*(void **)__dst);
LABEL_336:
  *(_OWORD *)__dst = xmmword_239F120B1;
  *(_OWORD *)&__dst[12] = *(__int128 *)((char *)&xmmword_239F120B1 + 12);
  sub_2396B946C((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F120B1 + 12), v267, v268, v269);
  v274 = v273;
  v275 = strlen(v273);
  if (v275 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v276 = v275;
  if (v275 >= 0x17)
  {
    v278 = (v275 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v275 | 7) != 0x17)
      v278 = v275 | 7;
    v279 = v278 + 1;
    v277 = operator new(v278 + 1);
    __p[0].i64[1] = v276;
    __p[1].i64[0] = v279 | 0x8000000000000000;
    __p[0].i64[0] = (uint64_t)v277;
  }
  else
  {
    __p[1].i8[7] = v275;
    v277 = __p;
    if (!v275)
      goto LABEL_344;
  }
  memmove(v277, v274, v276);
LABEL_344:
  *((_BYTE *)v277 + v276) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v412);
  sub_2396B4EAC((uint64_t)&v404, (const void *)v412, (_BYTE *)(a2 + 260));
  v283 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_348;
  v284 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v285 = __ldaxr(v284);
  while (__stlxr(v285 - 1, v284));
  if (v285)
  {
LABEL_348:
    if ((__p[1].i8[7] & 0x80000000) == 0)
      goto LABEL_350;
    goto LABEL_349;
  }
  ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
  std::__shared_weak_count::__release_weak(v283);
  if (__p[1].i8[7] < 0)
LABEL_349:
    operator delete((void *)__p[0].i64[0]);
LABEL_350:
  __p[0] = (int8x16_t)xmmword_239F120CD;
  __p[1].i32[0] = 265251;
  sub_23958E55C((uint64_t)__p, (int32x4_t)xmmword_239F120CD, v280, v281, v282);
  v287 = v286;
  v288 = strlen(v286);
  if (v288 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v289 = v288;
  if (v288 >= 0x17)
  {
    v291 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v288 | 7) != 0x17)
      v291 = v288 | 7;
    v292 = v291 + 1;
    v290 = operator new(v291 + 1);
    *(_QWORD *)&__dst[8] = v289;
    *(_QWORD *)&__dst[16] = v292 | 0x8000000000000000;
    *(_QWORD *)__dst = v290;
  }
  else
  {
    __dst[23] = v288;
    v290 = __dst;
    if (!v288)
      goto LABEL_358;
  }
  memmove(v290, v287, v289);
LABEL_358:
  v290[v289] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v412);
  sub_2396B4148((uint64_t)&v404, (const void *)v412, a2 + 264);
  v296 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_362;
  v297 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v298 = __ldaxr(v297);
  while (__stlxr(v298 - 1, v297));
  if (v298)
  {
LABEL_362:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_364;
    goto LABEL_363;
  }
  ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
  std::__shared_weak_count::__release_weak(v296);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_363:
    operator delete(*(void **)__dst);
LABEL_364:
  __p[0] = (int8x16_t)xmmword_239F120E1;
  __p[1].i32[0] = 6713192;
  sub_23958E55C((uint64_t)__p, (int32x4_t)xmmword_239F120E1, v293, v294, v295);
  v300 = v299;
  v301 = strlen(v299);
  if (v301 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v302 = v301;
  if (v301 >= 0x17)
  {
    v304 = (v301 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v301 | 7) != 0x17)
      v304 = v301 | 7;
    v305 = v304 + 1;
    v303 = operator new(v304 + 1);
    *(_QWORD *)&__dst[8] = v302;
    *(_QWORD *)&__dst[16] = v305 | 0x8000000000000000;
    *(_QWORD *)__dst = v303;
  }
  else
  {
    __dst[23] = v301;
    v303 = __dst;
    if (!v301)
      goto LABEL_372;
  }
  memmove(v303, v300, v302);
LABEL_372:
  v303[v302] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v412);
  sub_2396B4EAC((uint64_t)&v404, (const void *)v412, (_BYTE *)(a2 + 268));
  v306 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_376;
  v307 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v308 = __ldaxr(v307);
  while (__stlxr(v308 - 1, v307));
  if (v308)
  {
LABEL_376:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_378;
    goto LABEL_377;
  }
  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
  std::__shared_weak_count::__release_weak(v306);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_377:
    operator delete(*(void **)__dst);
LABEL_378:
  strcpy((char *)&v412, "\airjXsoubfct");
  v309 = sub_239510ECC((uint64_t)&v412);
  v310 = strlen(v309);
  if (v310 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v311 = v310;
  if (v310 >= 0x17)
  {
    v313 = (v310 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v310 | 7) != 0x17)
      v313 = v310 | 7;
    v314 = v313 + 1;
    v312 = operator new(v313 + 1);
    *(_QWORD *)&__dst[8] = v311;
    *(_QWORD *)&__dst[16] = v314 | 0x8000000000000000;
    *(_QWORD *)__dst = v312;
  }
  else
  {
    __dst[23] = v310;
    v312 = __dst;
    if (!v310)
      goto LABEL_386;
  }
  memmove(v312, v309, v311);
LABEL_386:
  v312[v311] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4148((uint64_t)&v404, (const void *)__p[0].i64[0], a2 + 320);
  v318 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_390;
  v319 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v320 = __ldaxr(v319);
  while (__stlxr(v320 - 1, v319));
  if (v320)
  {
LABEL_390:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_392;
    goto LABEL_391;
  }
  ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
  std::__shared_weak_count::__release_weak(v318);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_391:
    operator delete(*(void **)__dst);
LABEL_392:
  strcpy(__p[0].i8, "1BPWTn\\T\\^CHnS^D_Un\\S");
  v321 = sub_239A90BEC((unsigned __int8 *)__p, *(int8x16_t *)"1BPWTn\\T\\^CHnS^D_Un\\S", v315, v316, v317);
  v322 = strlen((const char *)v321);
  if (v322 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v323 = v322;
  if (v322 >= 0x17)
  {
    v325 = (v322 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v322 | 7) != 0x17)
      v325 = v322 | 7;
    v326 = v325 + 1;
    v324 = operator new(v325 + 1);
    *(_QWORD *)&__dst[8] = v323;
    *(_QWORD *)&__dst[16] = v326 | 0x8000000000000000;
    *(_QWORD *)__dst = v324;
  }
  else
  {
    __dst[23] = v322;
    v324 = __dst;
    if (!v322)
      goto LABEL_400;
  }
  memmove(v324, v321, v323);
LABEL_400:
  v324[v323] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v412);
  sub_239BB4A9C((uint64_t)&v404, (const void *)v412, a2 + 328);
  v327 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_404;
  v328 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v329 = __ldaxr(v328);
  while (__stlxr(v329 - 1, v328));
  if (v329)
  {
LABEL_404:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_406;
    goto LABEL_405;
  }
  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
  std::__shared_weak_count::__release_weak(v327);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_405:
    operator delete(*(void **)__dst);
LABEL_406:
  v412 = xmmword_239F0C2B0;
  sub_23950F8E4((uint64_t)&v412);
  v331 = v330;
  v332 = strlen(v330);
  if (v332 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v333 = v332;
  if (v332 >= 0x17)
  {
    v335 = (v332 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v332 | 7) != 0x17)
      v335 = v332 | 7;
    v336 = v335 + 1;
    v334 = operator new(v335 + 1);
    *(_QWORD *)&__dst[8] = v333;
    *(_QWORD *)&__dst[16] = v336 | 0x8000000000000000;
    *(_QWORD *)__dst = v334;
  }
  else
  {
    __dst[23] = v332;
    v334 = __dst;
    if (!v332)
      goto LABEL_414;
  }
  memmove(v334, v331, v333);
LABEL_414:
  v334[v333] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4148((uint64_t)&v404, (const void *)__p[0].i64[0], a2 + 336);
  v337 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_418;
  v338 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v339 = __ldaxr(v338);
  while (__stlxr(v339 - 1, v338));
  if (v339)
  {
LABEL_418:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_420;
    goto LABEL_419;
  }
  ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
  std::__shared_weak_count::__release_weak(v337);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_419:
    operator delete(*(void **)__dst);
LABEL_420:
  v412 = xmmword_239F0C2C0;
  sub_23950F8E4((uint64_t)&v412);
  v341 = v340;
  v342 = strlen(v340);
  if (v342 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v343 = v342;
  if (v342 >= 0x17)
  {
    v345 = (v342 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v342 | 7) != 0x17)
      v345 = v342 | 7;
    v346 = v345 + 1;
    v344 = operator new(v345 + 1);
    *(_QWORD *)&__dst[8] = v343;
    *(_QWORD *)&__dst[16] = v346 | 0x8000000000000000;
    *(_QWORD *)__dst = v344;
  }
  else
  {
    __dst[23] = v342;
    v344 = __dst;
    if (!v342)
      goto LABEL_428;
  }
  memmove(v344, v341, v343);
LABEL_428:
  v344[v343] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4148((uint64_t)&v404, (const void *)__p[0].i64[0], a2 + 340);
  v347 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_432;
  v348 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v349 = __ldaxr(v348);
  while (__stlxr(v349 - 1, v348));
  if (v349)
  {
LABEL_432:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_434;
    goto LABEL_433;
  }
  ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
  std::__shared_weak_count::__release_weak(v347);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_433:
    operator delete(*(void **)__dst);
LABEL_434:
  __p[0] = (int8x16_t)xmmword_239F1210B;
  __p[1].i16[0] = 11;
  v350 = sub_239A91B18(__p);
  v351 = strlen(v350->i8);
  if (v351 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v352 = v351;
  if (v351 >= 0x17)
  {
    v354 = (v351 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v351 | 7) != 0x17)
      v354 = v351 | 7;
    v355 = v354 + 1;
    v353 = operator new(v354 + 1);
    *(_QWORD *)&__dst[8] = v352;
    *(_QWORD *)&__dst[16] = v355 | 0x8000000000000000;
    *(_QWORD *)__dst = v353;
  }
  else
  {
    __dst[23] = v351;
    v353 = __dst;
    if (!v351)
      goto LABEL_442;
  }
  memmove(v353, v350, v352);
LABEL_442:
  v353[v352] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v412);
  sub_2396B4148((uint64_t)&v404, (const void *)v412, a2 + 344);
  v357 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (!*((_QWORD *)&v412 + 1))
    goto LABEL_446;
  v358 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
  do
    v359 = __ldaxr(v358);
  while (__stlxr(v359 - 1, v358));
  if (v359)
  {
LABEL_446:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_448;
    goto LABEL_447;
  }
  ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
  std::__shared_weak_count::__release_weak(v357);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_447:
    operator delete(*(void **)__dst);
LABEL_448:
  strcpy((char *)&v412, "1PE]PBnVDEETC");
  sub_23971A32C((uint64_t)&v412, v356);
  v361 = v360;
  v362 = strlen(v360);
  if (v362 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v363 = v362;
  if (v362 >= 0x17)
  {
    v365 = (v362 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v362 | 7) != 0x17)
      v365 = v362 | 7;
    v366 = v365 + 1;
    v364 = operator new(v365 + 1);
    *(_QWORD *)&__dst[8] = v363;
    *(_QWORD *)&__dst[16] = v366 | 0x8000000000000000;
    *(_QWORD *)__dst = v364;
  }
  else
  {
    __dst[23] = v362;
    v364 = __dst;
    if (!v362)
      goto LABEL_456;
  }
  memmove(v364, v361, v363);
LABEL_456:
  v364[v363] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)&v404, (const void *)__p[0].i64[0], a2 + 348);
  v367 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_460;
  v368 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v369 = __ldaxr(v368);
  while (__stlxr(v369 - 1, v368));
  if (v369)
  {
LABEL_460:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_462;
    goto LABEL_461;
  }
  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
  std::__shared_weak_count::__release_weak(v367);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_461:
    operator delete(*(void **)__dst);
LABEL_462:
  strcpy((char *)&v412, "(OX]wAL[");
  v370 = sub_239513718((char *)&v412);
  v371 = strlen(v370);
  if (v371 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v372 = v371;
  if (v371 >= 0x17)
  {
    v374 = (v371 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v371 | 7) != 0x17)
      v374 = v371 | 7;
    v375 = v374 + 1;
    v373 = operator new(v374 + 1);
    *(_QWORD *)&__dst[8] = v372;
    *(_QWORD *)&__dst[16] = v375 | 0x8000000000000000;
    *(_QWORD *)__dst = v373;
  }
  else
  {
    __dst[23] = v371;
    v373 = __dst;
    if (!v371)
      goto LABEL_470;
  }
  memmove(v373, v370, v372);
LABEL_470:
  v373[v372] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4494((uint64_t)&v404, (const void *)__p[0].i64[0], (uint64_t *)(a2 + 296));
  v376 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_474;
  v377 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v378 = __ldaxr(v377);
  while (__stlxr(v378 - 1, v377));
  if (v378)
  {
LABEL_474:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_476;
    goto LABEL_475;
  }
  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
  std::__shared_weak_count::__release_weak(v376);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_475:
    operator delete(*(void **)__dst);
LABEL_476:
  *(_QWORD *)&v412 = 0x5A606967646B6005;
  BYTE14(v412) = 0;
  WORD6(v412) = 30052;
  DWORD2(v412) = 1752525928;
  sub_23958E5E0((uint64_t)&v412);
  v380 = v379;
  v381 = strlen(v379);
  if (v381 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v382 = v381;
  if (v381 >= 0x17)
  {
    v384 = (v381 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v381 | 7) != 0x17)
      v384 = v381 | 7;
    v385 = v384 + 1;
    v383 = operator new(v384 + 1);
    *(_QWORD *)&__dst[8] = v382;
    *(_QWORD *)&__dst[16] = v385 | 0x8000000000000000;
    *(_QWORD *)__dst = v383;
  }
  else
  {
    __dst[23] = v381;
    v383 = __dst;
    if (!v381)
      goto LABEL_484;
  }
  memmove(v383, v380, v382);
LABEL_484:
  v383[v382] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&v404, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 352));
  v386 = (std::__shared_weak_count *)__p[0].i64[1];
  if (!__p[0].i64[1])
    goto LABEL_488;
  v387 = (unint64_t *)(__p[0].i64[1] + 8);
  do
    v388 = __ldaxr(v387);
  while (__stlxr(v388 - 1, v387));
  if (v388)
  {
LABEL_488:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_490;
    goto LABEL_489;
  }
  ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
  std::__shared_weak_count::__release_weak(v386);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_489:
    operator delete(*(void **)__dst);
LABEL_490:
  strcpy((char *)&v412, "0TE]@oSQ]YT");
  v389 = sub_23958E4C8((uint64_t)&v412);
  v390 = strlen(v389);
  if (v390 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v391 = v390;
  if (v390 >= 0x17)
  {
    v393 = (v390 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v390 | 7) != 0x17)
      v393 = v390 | 7;
    v394 = v393 + 1;
    v392 = operator new(v393 + 1);
    *(_QWORD *)&__dst[8] = v391;
    *(_QWORD *)&__dst[16] = v394 | 0x8000000000000000;
    *(_QWORD *)__dst = v392;
  }
  else
  {
    __dst[23] = v390;
    v392 = __dst;
    if (!v390)
      goto LABEL_498;
  }
  memmove(v392, v389, v391);
LABEL_498:
  v392[v391] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&v404, (const void *)__p[0].i64[0], (_BYTE *)(a2 + 353));
  v395 = (std::__shared_weak_count *)__p[0].i64[1];
  if (__p[0].i64[1])
  {
    v396 = (unint64_t *)(__p[0].i64[1] + 8);
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_504;
      goto LABEL_503;
    }
  }
  if ((__dst[23] & 0x80000000) != 0)
LABEL_503:
    operator delete(*(void **)__dst);
LABEL_504:
  sub_239629EF4((uint64_t)v408, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)__dst, (uint64_t)&v404);
  v398 = *(std::__shared_weak_count **)&__dst[8];
  if (*(_QWORD *)&__dst[8])
  {
    v399 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v400 = __ldaxr(v399);
    while (__stlxr(v400 - 1, v399));
    if (!v400)
    {
      ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
      std::__shared_weak_count::__release_weak(v398);
    }
  }
  v401 = (std::__shared_weak_count *)*((_QWORD *)&v404 + 1);
  if (!*((_QWORD *)&v404 + 1))
    goto LABEL_513;
  v402 = (unint64_t *)(*((_QWORD *)&v404 + 1) + 8);
  do
    v403 = __ldaxr(v402);
  while (__stlxr(v403 - 1, v402));
  if (v403)
  {
LABEL_513:
    if ((SHIBYTE(v409) & 0x80000000) == 0)
      return;
    goto LABEL_514;
  }
  ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
  std::__shared_weak_count::__release_weak(v401);
  if (SHIBYTE(v409) < 0)
LABEL_514:
    operator delete(v408[0]);
}

void sub_239BE2B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_239416DA0((uint64_t)&a20);
  sub_239416DA0((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_239416DA0(v32);
  _Unwind_Resume(a1);
}

void sub_239BE2DD8()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2DE0()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2DE8()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2DF0()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2DF8()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E00()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E08()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E10()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E18()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E20()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E28()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E30()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E38()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E40()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E48()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E50()
{
  JUMPOUT(0x239BE2DC8);
}

void sub_239BE2E58(_OWORD *a1, _QWORD *a2)
{
  const char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  double v12;
  int32x4_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  double v25;
  int32x4_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  const char *v33;
  const char *v34;
  size_t v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const char *v46;
  const char *v47;
  size_t v48;
  size_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  const char *v57;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  int8x16_t v63;
  double v64;
  int32x4_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const char *v69;
  const char *v70;
  size_t v71;
  size_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  int8x16_t v76;
  double v77;
  int32x4_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  const char *v86;
  size_t v87;
  size_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  const char *v98;
  size_t v99;
  size_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  int16x8_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const char *v108;
  const char *v109;
  size_t v110;
  size_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  int8x16_t v115;
  double v116;
  int32x4_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  const char *v121;
  const char *v122;
  size_t v123;
  size_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int8x16_t v128;
  double v129;
  int32x4_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  const char *v134;
  const char *v135;
  size_t v136;
  size_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  int32x4_t v141;
  double v142;
  int32x4_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unsigned __int8 *v147;
  size_t v148;
  size_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  const char *v156;
  size_t v157;
  size_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  const char *v165;
  const char *v166;
  size_t v167;
  size_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  const char *v175;
  size_t v176;
  size_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  int32x4_t v181;
  double v182;
  int32x4_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unsigned __int8 *v187;
  size_t v188;
  size_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  const char *v197;
  size_t v198;
  size_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  const char *v206;
  const char *v207;
  size_t v208;
  size_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  int8x16_t v213;
  double v214;
  int32x4_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  const char *v219;
  const char *v220;
  size_t v221;
  size_t v222;
  _BYTE *v223;
  uint64_t v224;
  uint64_t v225;
  int8x16_t v226;
  double v227;
  int32x4_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  const char *v232;
  const char *v233;
  size_t v234;
  size_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  int32x4_t v239;
  double v240;
  int32x4_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unsigned __int8 *v245;
  size_t v246;
  size_t v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  int8x16_t *v254;
  size_t v255;
  size_t v256;
  _BYTE *v257;
  uint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  int8x8_t *v263;
  size_t v264;
  size_t v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  int8x8_t *v272;
  size_t v273;
  size_t v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  int16x8_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  const char *v282;
  const char *v283;
  size_t v284;
  size_t v285;
  _BYTE *v286;
  uint64_t v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  int8x16_t *v292;
  size_t v293;
  size_t v294;
  _BYTE *v295;
  uint64_t v296;
  uint64_t v297;
  int8x16_t v298;
  double v299;
  int32x4_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  const char *v304;
  const char *v305;
  size_t v306;
  size_t v307;
  _BYTE *v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  const char *v314;
  size_t v315;
  size_t v316;
  _BYTE *v317;
  uint64_t v318;
  uint64_t v319;
  int16x8_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  const char *v324;
  const char *v325;
  size_t v326;
  size_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  const char *v337;
  size_t v338;
  size_t v339;
  _BYTE *v340;
  uint64_t v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  _BYTE __p[28];
  _BYTE __dst[24];
  __int128 v351;
  __int128 v352;
  uint64_t v353;

  v353 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  v352 = xmmword_239F0C2D0;
  sub_23950F8E4((uint64_t)&v352);
  v5 = v4;
  v6 = strlen(v4);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)&__p[8] = v7;
    *(_QWORD *)&__p[16] = v10 | 0x8000000000000000;
    *(_QWORD *)__p = v8;
  }
  else
  {
    __p[23] = v6;
    v8 = __p;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v8, v5, v7);
LABEL_9:
  v8[v7] = 0;
  *(_QWORD *)&v351 = *a2;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v14 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_13;
  v15 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_13:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((__p[23] & 0x80000000) != 0)
LABEL_14:
    operator delete(*(void **)__p);
LABEL_15:
  *(_OWORD *)__dst = xmmword_239F1368E;
  strcpy(&__dst[16], "s{e");
  sub_23958E55C((uint64_t)__dst, (int32x4_t)xmmword_239F1368E, v11, v12, v13);
  v18 = v17;
  v19 = strlen(v17);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    *(_QWORD *)&__p[8] = v20;
    *(_QWORD *)&__p[16] = v23 | 0x8000000000000000;
    *(_QWORD *)__p = v21;
  }
  else
  {
    __p[23] = v19;
    v21 = __p;
    if (!v19)
      goto LABEL_23;
  }
  memmove(v21, v18, v20);
LABEL_23:
  v21[v20] = 0;
  sub_239BE5388(&v351, (uint64_t)(a2 + 1));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB7018((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_27;
  v28 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_31;
  }
  else
  {
LABEL_27:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_31;
  }
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (v32)
  {
LABEL_31:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if ((__p[23] & 0x80000000) != 0)
LABEL_32:
    operator delete(*(void **)__p);
LABEL_33:
  strcpy(__dst, "+CBLCtFNXCtLNDFN_YR");
  sub_23958E55C((uint64_t)__dst, *(int32x4_t *)"+CBLCtFNXCtLNDFN_YR", v24, v25, v26);
  v34 = v33;
  v35 = strlen(v33);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    *(_QWORD *)&__p[8] = v36;
    *(_QWORD *)&__p[16] = v39 | 0x8000000000000000;
    *(_QWORD *)__p = v37;
  }
  else
  {
    __p[23] = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_41;
  }
  memmove(v37, v34, v36);
LABEL_41:
  v37[v36] = 0;
  sub_239BE5D40(&v351, (uint64_t)(a2 + 5));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB7018((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_45;
  v41 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_49;
  }
  else
  {
LABEL_45:
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_49;
  }
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (v45)
  {
LABEL_49:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  if ((__p[23] & 0x80000000) != 0)
LABEL_50:
    operator delete(*(void **)__p);
LABEL_51:
  *(_QWORD *)&v352 = 0x1E1D2E15101E1D71;
  BYTE14(v352) = 0;
  WORD6(v352) = 5148;
  DWORD2(v352) = 402992646;
  sub_23958E5E0((uint64_t)&v352);
  v47 = v46;
  v48 = strlen(v46);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v49 = v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    *(_QWORD *)&__p[8] = v49;
    *(_QWORD *)&__p[16] = v52 | 0x8000000000000000;
    *(_QWORD *)__p = v50;
  }
  else
  {
    __p[23] = v48;
    v50 = __p;
    if (!v48)
      goto LABEL_59;
  }
  memmove(v50, v47, v49);
LABEL_59:
  v50[v49] = 0;
  *(_QWORD *)&v351 = a2[11];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v53 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_63;
  v54 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_63:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_65;
    goto LABEL_64;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if ((__p[23] & 0x80000000) != 0)
LABEL_64:
    operator delete(*(void **)__p);
LABEL_65:
  strcpy((char *)&v352, "\nycgzfclsU~cgo");
  sub_23958E5E0((uint64_t)&v352);
  v57 = v56;
  v58 = strlen(v56);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    *(_QWORD *)&__p[8] = v59;
    *(_QWORD *)&__p[16] = v62 | 0x8000000000000000;
    *(_QWORD *)__p = v60;
  }
  else
  {
    __p[23] = v58;
    v60 = __p;
    if (!v58)
      goto LABEL_73;
  }
  memmove(v60, v57, v59);
LABEL_73:
  v60[v59] = 0;
  *(_QWORD *)&v351 = a2[12];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v66 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_77;
  v67 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (v68)
  {
LABEL_77:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_78;
  }
  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
  std::__shared_weak_count::__release_weak(v66);
  if ((__p[23] & 0x80000000) != 0)
LABEL_78:
    operator delete(*(void **)__p);
LABEL_79:
  strcpy(__dst, "5YZBjXPF]jAZEZYZRL");
  sub_23958E450((uint64_t)__dst, *(int32x4_t *)"5YZBjXPF]jAZEZYZRL", v63, v64, v65);
  v70 = v69;
  v71 = strlen(v69);
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v72 = v71;
  if (v71 >= 0x17)
  {
    v74 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v74 = v71 | 7;
    v75 = v74 + 1;
    v73 = operator new(v74 + 1);
    *(_QWORD *)&__p[8] = v72;
    *(_QWORD *)&__p[16] = v75 | 0x8000000000000000;
    *(_QWORD *)__p = v73;
  }
  else
  {
    __p[23] = v71;
    v73 = __p;
    if (!v71)
      goto LABEL_87;
  }
  memmove(v73, v70, v72);
LABEL_87:
  v73[v72] = 0;
  sub_239BE5388(&v351, (uint64_t)(a2 + 13));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB7018((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_91;
  v80 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_95;
  }
  else
  {
LABEL_91:
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_95;
  }
  v83 = (unint64_t *)&v82->__shared_owners_;
  do
    v84 = __ldaxr(v83);
  while (__stlxr(v84 - 1, v83));
  if (v84)
  {
LABEL_95:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
  std::__shared_weak_count::__release_weak(v82);
  if ((__p[23] & 0x80000000) != 0)
LABEL_96:
    operator delete(*(void **)__p);
LABEL_97:
  *(_OWORD *)__dst = xmmword_239F13731;
  *(_DWORD *)&__dst[15] = 1186079;
  sub_23958E450((uint64_t)__dst, (int32x4_t)xmmword_239F13731, v76, v77, v78);
  v86 = v85;
  v87 = strlen(v85);
  if (v87 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v88 = v87;
  if (v87 >= 0x17)
  {
    v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17)
      v90 = v87 | 7;
    v91 = v90 + 1;
    v89 = operator new(v90 + 1);
    *(_QWORD *)&__p[8] = v88;
    *(_QWORD *)&__p[16] = v91 | 0x8000000000000000;
    *(_QWORD *)__p = v89;
  }
  else
  {
    __p[23] = v87;
    v89 = __p;
    if (!v87)
      goto LABEL_105;
  }
  memmove(v89, v86, v88);
LABEL_105:
  v89[v88] = 0;
  sub_239BE5D40(&v351, (uint64_t)(a2 + 17));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB7018((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_109;
  v93 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_113;
  }
  else
  {
LABEL_109:
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (!*((_QWORD *)&v351 + 1))
      goto LABEL_113;
  }
  v96 = (unint64_t *)&v95->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (v97)
  {
LABEL_113:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_115;
    goto LABEL_114;
  }
  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
  std::__shared_weak_count::__release_weak(v95);
  if ((__p[23] & 0x80000000) != 0)
LABEL_114:
    operator delete(*(void **)__p);
LABEL_115:
  *(_QWORD *)&v352 = 0x103B1016050C0764;
  DWORD2(v352) = 67853;
  v98 = sub_23958E4C8((uint64_t)&v352);
  v99 = strlen(v98);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    *(_QWORD *)&__p[8] = v100;
    *(_QWORD *)&__p[16] = v103 | 0x8000000000000000;
    *(_QWORD *)__p = v101;
  }
  else
  {
    __p[23] = v99;
    v101 = __p;
    if (!v99)
      goto LABEL_123;
  }
  memmove(v101, v98, v100);
LABEL_123:
  v101[v100] = 0;
  *(_QWORD *)&v351 = a2[23];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v105 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_127;
  v106 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_127:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_129;
    goto LABEL_128;
  }
  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
  std::__shared_weak_count::__release_weak(v105);
  if ((__p[23] & 0x80000000) != 0)
LABEL_128:
    operator delete(*(void **)__p);
LABEL_129:
  *(_QWORD *)&v352 = 0x78496264777E7516;
  WORD6(v352) = 100;
  DWORD2(v352) = 1937013603;
  sub_23971A32C((uint64_t)&v352, v104);
  v109 = v108;
  v110 = strlen(v108);
  if (v110 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v111 = v110;
  if (v110 >= 0x17)
  {
    v113 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17)
      v113 = v110 | 7;
    v114 = v113 + 1;
    v112 = operator new(v113 + 1);
    *(_QWORD *)&__p[8] = v111;
    *(_QWORD *)&__p[16] = v114 | 0x8000000000000000;
    *(_QWORD *)__p = v112;
  }
  else
  {
    __p[23] = v110;
    v112 = __p;
    if (!v110)
      goto LABEL_137;
  }
  memmove(v112, v109, v111);
LABEL_137:
  v112[v111] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB4A9C((uint64_t)a1, *(const void **)__dst, (uint64_t)(a2 + 24));
  v118 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_141;
  v119 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (v120)
  {
LABEL_141:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_143;
    goto LABEL_142;
  }
  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
  std::__shared_weak_count::__release_weak(v118);
  if ((__p[23] & 0x80000000) != 0)
LABEL_142:
    operator delete(*(void **)__p);
LABEL_143:
  *(_OWORD *)__dst = xmmword_239F13744;
  *(_DWORD *)&__dst[15] = 1511692;
  sub_23958E450((uint64_t)__dst, (int32x4_t)xmmword_239F13744, v115, v116, v117);
  v122 = v121;
  v123 = strlen(v121);
  if (v123 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v124 = v123;
  if (v123 >= 0x17)
  {
    v126 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v126 = v123 | 7;
    v127 = v126 + 1;
    v125 = operator new(v126 + 1);
    *(_QWORD *)&__p[8] = v124;
    *(_QWORD *)&__p[16] = v127 | 0x8000000000000000;
    *(_QWORD *)__p = v125;
  }
  else
  {
    __p[23] = v123;
    v125 = __p;
    if (!v123)
      goto LABEL_151;
  }
  memmove(v125, v122, v124);
LABEL_151:
  v125[v124] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB47DC((uint64_t)a1, (const void *)v352, (uint64_t)(a2 + 25));
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_155;
  v132 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (v133)
  {
LABEL_155:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_157;
    goto LABEL_156;
  }
  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
  std::__shared_weak_count::__release_weak(v131);
  if ((__p[23] & 0x80000000) != 0)
LABEL_156:
    operator delete(*(void **)__p);
LABEL_157:
  *(_OWORD *)__dst = xmmword_239F13757;
  *(_DWORD *)&__dst[15] = 393245;
  sub_23958E450((uint64_t)__dst, (int32x4_t)xmmword_239F13757, v128, v129, v130);
  v135 = v134;
  v136 = strlen(v134);
  if (v136 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v137 = v136;
  if (v136 >= 0x17)
  {
    v139 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v136 | 7) != 0x17)
      v139 = v136 | 7;
    v140 = v139 + 1;
    v138 = operator new(v139 + 1);
    *(_QWORD *)&__p[8] = v137;
    *(_QWORD *)&__p[16] = v140 | 0x8000000000000000;
    *(_QWORD *)__p = v138;
  }
  else
  {
    __p[23] = v136;
    v138 = __p;
    if (!v136)
      goto LABEL_165;
  }
  memmove(v138, v135, v137);
LABEL_165:
  v138[v137] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB47DC((uint64_t)a1, (const void *)v352, (uint64_t)a2 + 204);
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_169;
  v145 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (v146)
  {
LABEL_169:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_170;
  }
  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
  std::__shared_weak_count::__release_weak(v144);
  if ((__p[23] & 0x80000000) != 0)
LABEL_170:
    operator delete(*(void **)__p);
LABEL_171:
  strcpy(__dst, "V%3:0\t?8\"3$%35\"\t$7\"?9");
  v147 = sub_239A90BEC(__dst, *(int8x16_t *)"V%3:0\t?8\"3$%35\"\t$7\"?9", v141, v142, v143);
  v148 = strlen((const char *)v147);
  if (v148 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v149 = v148;
  if (v148 >= 0x17)
  {
    v151 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v148 | 7) != 0x17)
      v151 = v148 | 7;
    v152 = v151 + 1;
    v150 = operator new(v151 + 1);
    *(_QWORD *)&__p[8] = v149;
    *(_QWORD *)&__p[16] = v152 | 0x8000000000000000;
    *(_QWORD *)__p = v150;
  }
  else
  {
    __p[23] = v148;
    v150 = __p;
    if (!v148)
      goto LABEL_179;
  }
  memmove(v150, v147, v149);
LABEL_179:
  v150[v149] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB47DC((uint64_t)a1, (const void *)v352, (uint64_t)(a2 + 26));
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_183;
  v154 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (v155)
  {
LABEL_183:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_185;
    goto LABEL_184;
  }
  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
  std::__shared_weak_count::__release_weak(v153);
  if ((__p[23] & 0x80000000) != 0)
LABEL_184:
    operator delete(*(void **)__p);
LABEL_185:
  *(_QWORD *)&v352 = 0x223F1420282A3B4BLL;
  BYTE10(v352) = 0;
  WORD4(v352) = 11814;
  v156 = (const char *)sub_23958E518((uint64_t)&v352);
  v157 = strlen(v156);
  if (v157 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v158 = v157;
  if (v157 >= 0x17)
  {
    v160 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v157 | 7) != 0x17)
      v160 = v157 | 7;
    v161 = v160 + 1;
    v159 = operator new(v160 + 1);
    *(_QWORD *)&__p[8] = v158;
    *(_QWORD *)&__p[16] = v161 | 0x8000000000000000;
    *(_QWORD *)__p = v159;
  }
  else
  {
    __p[23] = v157;
    v159 = __p;
    if (!v157)
      goto LABEL_193;
  }
  memmove(v159, v156, v158);
LABEL_193:
  v159[v158] = 0;
  *(_QWORD *)&v351 = a2[27];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v162 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_197;
  v163 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 - 1, v163));
  if (v164)
  {
LABEL_197:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_198;
  }
  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
  std::__shared_weak_count::__release_weak(v162);
  if ((__p[23] & 0x80000000) != 0)
LABEL_198:
    operator delete(*(void **)__p);
LABEL_199:
  *(_OWORD *)__dst = xmmword_239F13780;
  __dst[16] = 0;
  sub_2396EFA24((uint64_t)__dst);
  v166 = v165;
  v167 = strlen(v165);
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v168 = v167;
  if (v167 >= 0x17)
  {
    v170 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v170 = v167 | 7;
    v171 = v170 + 1;
    v169 = operator new(v170 + 1);
    *(_QWORD *)&__p[8] = v168;
    *(_QWORD *)&__p[16] = v171 | 0x8000000000000000;
    *(_QWORD *)__p = v169;
  }
  else
  {
    __p[23] = v167;
    v169 = __p;
    if (!v167)
      goto LABEL_207;
  }
  memmove(v169, v166, v168);
LABEL_207:
  v169[v168] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB4A9C((uint64_t)a1, (const void *)v352, (uint64_t)(a2 + 28));
  v172 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_211;
  v173 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v174 = __ldaxr(v173);
  while (__stlxr(v174 - 1, v173));
  if (v174)
  {
LABEL_211:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_213;
    goto LABEL_212;
  }
  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
  std::__shared_weak_count::__release_weak(v172);
  if ((__p[23] & 0x80000000) != 0)
LABEL_212:
    operator delete(*(void **)__p);
LABEL_213:
  *(_QWORD *)&v352 = 0x7103D0A11070F62;
  BYTE12(v352) = 0;
  DWORD2(v352) = 269157138;
  v175 = sub_239510ECC((uint64_t)&v352);
  v176 = strlen(v175);
  if (v176 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v177 = v176;
  if (v176 >= 0x17)
  {
    v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17)
      v179 = v176 | 7;
    v180 = v179 + 1;
    v178 = operator new(v179 + 1);
    *(_QWORD *)&__p[8] = v177;
    *(_QWORD *)&__p[16] = v180 | 0x8000000000000000;
    *(_QWORD *)__p = v178;
  }
  else
  {
    __p[23] = v176;
    v178 = __p;
    if (!v176)
      goto LABEL_221;
  }
  memmove(v178, v175, v177);
LABEL_221:
  v178[v177] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB4A9C((uint64_t)a1, *(const void **)__dst, (uint64_t)(a2 + 29));
  v184 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_225;
  v185 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v186 = __ldaxr(v185);
  while (__stlxr(v186 - 1, v185));
  if (v186)
  {
LABEL_225:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_227;
    goto LABEL_226;
  }
  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
  std::__shared_weak_count::__release_weak(v184);
  if ((__p[23] & 0x80000000) != 0)
LABEL_226:
    operator delete(*(void **)__p);
LABEL_227:
  *(_OWORD *)__dst = xmmword_239F13791;
  *(_QWORD *)&__dst[14] = 0xA02061B300801;
  v187 = sub_239A90BEC(__dst, (int8x16_t)xmmword_239F13791, v181, v182, v183);
  v188 = strlen((const char *)v187);
  if (v188 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v189 = v188;
  if (v188 >= 0x17)
  {
    v191 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v188 | 7) != 0x17)
      v191 = v188 | 7;
    v192 = v191 + 1;
    v190 = operator new(v191 + 1);
    *(_QWORD *)&__p[8] = v189;
    *(_QWORD *)&__p[16] = v192 | 0x8000000000000000;
    *(_QWORD *)__p = v190;
  }
  else
  {
    __p[23] = v188;
    v190 = __p;
    if (!v188)
      goto LABEL_235;
  }
  memmove(v190, v187, v189);
LABEL_235:
  v190[v189] = 0;
  *(_QWORD *)&v351 = a2[30];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_2397373B0((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v193 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_239;
  v194 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v195 = __ldaxr(v194);
  while (__stlxr(v195 - 1, v194));
  if (v195)
  {
LABEL_239:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_241;
    goto LABEL_240;
  }
  ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
  std::__shared_weak_count::__release_weak(v193);
  if ((__p[23] & 0x80000000) != 0)
LABEL_240:
    operator delete(*(void **)__p);
LABEL_241:
  v352 = xmmword_239F0C2E0;
  sub_23950F8E4((uint64_t)&v352);
  v197 = v196;
  v198 = strlen(v196);
  if (v198 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v199 = v198;
  if (v198 >= 0x17)
  {
    v201 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17)
      v201 = v198 | 7;
    v202 = v201 + 1;
    v200 = operator new(v201 + 1);
    *(_QWORD *)&__p[8] = v199;
    *(_QWORD *)&__p[16] = v202 | 0x8000000000000000;
    *(_QWORD *)__p = v200;
  }
  else
  {
    __p[23] = v198;
    v200 = __p;
    if (!v198)
      goto LABEL_249;
  }
  memmove(v200, v197, v199);
LABEL_249:
  v200[v199] = 0;
  *(_QWORD *)&v351 = a2[31];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v203 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_253;
  v204 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v205 = __ldaxr(v204);
  while (__stlxr(v205 - 1, v204));
  if (v205)
  {
LABEL_253:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_255;
    goto LABEL_254;
  }
  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
  std::__shared_weak_count::__release_weak(v203);
  if ((__p[23] & 0x80000000) != 0)
LABEL_254:
    operator delete(*(void **)__p);
LABEL_255:
  v352 = xmmword_239F0C2F0;
  sub_23950F8E4((uint64_t)&v352);
  v207 = v206;
  v208 = strlen(v206);
  if (v208 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v209 = v208;
  if (v208 >= 0x17)
  {
    v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17)
      v211 = v208 | 7;
    v212 = v211 + 1;
    v210 = operator new(v211 + 1);
    *(_QWORD *)&__p[8] = v209;
    *(_QWORD *)&__p[16] = v212 | 0x8000000000000000;
    *(_QWORD *)__p = v210;
  }
  else
  {
    __p[23] = v208;
    v210 = __p;
    if (!v208)
      goto LABEL_263;
  }
  memmove(v210, v207, v209);
LABEL_263:
  v210[v209] = 0;
  *(_QWORD *)&v351 = a2[32];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v216 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_267;
  v217 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v218 = __ldaxr(v217);
  while (__stlxr(v218 - 1, v217));
  if (v218)
  {
LABEL_267:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_269;
    goto LABEL_268;
  }
  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
  std::__shared_weak_count::__release_weak(v216);
  if ((__p[23] & 0x80000000) != 0)
LABEL_268:
    operator delete(*(void **)__p);
LABEL_269:
  *(_OWORD *)__p = xmmword_239F137A7;
  strcpy(&__p[9], "LrggazqfgvLgz~v");
  sub_2396EFC88((uint64_t)__p, *(int32x4_t *)((char *)&xmmword_239F137A7 + 9), v213, v214, v215);
  v220 = v219;
  v221 = strlen(v219);
  if (v221 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v222 = v221;
  if (v221 >= 0x17)
  {
    v224 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v221 | 7) != 0x17)
      v224 = v221 | 7;
    v225 = v224 + 1;
    v223 = operator new(v224 + 1);
    *(_QWORD *)&__dst[8] = v222;
    *(_QWORD *)&__dst[16] = v225 | 0x8000000000000000;
    *(_QWORD *)__dst = v223;
  }
  else
  {
    __dst[23] = v221;
    v223 = __dst;
    if (!v221)
      goto LABEL_277;
  }
  memmove(v223, v220, v222);
LABEL_277:
  v223[v222] = 0;
  *(_QWORD *)&v351 = a2[33];
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v352);
  sub_2397373B0((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v229 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_281;
  v230 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v231 = __ldaxr(v230);
  while (__stlxr(v231 - 1, v230));
  if (v231)
  {
LABEL_281:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_283;
    goto LABEL_282;
  }
  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
  std::__shared_weak_count::__release_weak(v229);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_282:
    operator delete(*(void **)__dst);
LABEL_283:
  *(_OWORD *)__p = xmmword_239F137C0;
  *(_OWORD *)&__p[12] = *(__int128 *)((char *)&xmmword_239F137C0 + 12);
  sub_2396B946C((uint64_t)__p, *(int32x4_t *)((char *)&xmmword_239F137C0 + 12), v226, v227, v228);
  v233 = v232;
  v234 = strlen(v232);
  if (v234 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v235 = v234;
  if (v234 >= 0x17)
  {
    v237 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v234 | 7) != 0x17)
      v237 = v234 | 7;
    v238 = v237 + 1;
    v236 = operator new(v237 + 1);
    *(_QWORD *)&__dst[8] = v235;
    *(_QWORD *)&__dst[16] = v238 | 0x8000000000000000;
    *(_QWORD *)__dst = v236;
  }
  else
  {
    __dst[23] = v234;
    v236 = __dst;
    if (!v234)
      goto LABEL_291;
  }
  memmove(v236, v233, v235);
LABEL_291:
  v236[v235] = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v352);
  sub_239BB4A9C((uint64_t)a1, (const void *)v352, (uint64_t)(a2 + 34));
  v242 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_295;
  v243 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v244 = __ldaxr(v243);
  while (__stlxr(v244 - 1, v243));
  if (v244)
  {
LABEL_295:
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_297;
    goto LABEL_296;
  }
  ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
  std::__shared_weak_count::__release_weak(v242);
  if ((__dst[23] & 0x80000000) != 0)
LABEL_296:
    operator delete(*(void **)__dst);
LABEL_297:
  strcpy(__dst, "-YBYLArCX@OH_rBKr_LT^");
  v245 = sub_239A90BEC(__dst, *(int8x16_t *)"-YBYLArCX@OH_rBKr_LT^", v239, v240, v241);
  v246 = strlen((const char *)v245);
  if (v246 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v247 = v246;
  if (v246 >= 0x17)
  {
    v249 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v246 | 7) != 0x17)
      v249 = v246 | 7;
    v250 = v249 + 1;
    v248 = operator new(v249 + 1);
    *(_QWORD *)&__p[8] = v247;
    *(_QWORD *)&__p[16] = v250 | 0x8000000000000000;
    *(_QWORD *)__p = v248;
  }
  else
  {
    __p[23] = v246;
    v248 = __p;
    if (!v246)
      goto LABEL_305;
  }
  memmove(v248, v245, v247);
LABEL_305:
  v248[v247] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB4A9C((uint64_t)a1, (const void *)v352, (uint64_t)(a2 + 35));
  v251 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_309;
  v252 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v253 = __ldaxr(v252);
  while (__stlxr(v253 - 1, v252));
  if (v253)
  {
LABEL_309:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_311;
    goto LABEL_310;
  }
  ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
  std::__shared_weak_count::__release_weak(v251);
  if ((__p[23] & 0x80000000) != 0)
LABEL_310:
    operator delete(*(void **)__p);
LABEL_311:
  *(_OWORD *)__dst = xmmword_239F137F2;
  *(_WORD *)&__dst[16] = 31;
  v254 = sub_239A91B18((int8x16_t *)__dst);
  v255 = strlen(v254->i8);
  if (v255 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v256 = v255;
  if (v255 >= 0x17)
  {
    v258 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v255 | 7) != 0x17)
      v258 = v255 | 7;
    v259 = v258 + 1;
    v257 = operator new(v258 + 1);
    *(_QWORD *)&__p[8] = v256;
    *(_QWORD *)&__p[16] = v259 | 0x8000000000000000;
    *(_QWORD *)__p = v257;
  }
  else
  {
    __p[23] = v255;
    v257 = __p;
    if (!v255)
      goto LABEL_319;
  }
  memmove(v257, v254, v256);
LABEL_319:
  v257[v256] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_239BB47DC((uint64_t)a1, (const void *)v352, (uint64_t)(a2 + 36));
  v260 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_323;
  v261 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v262 = __ldaxr(v261);
  while (__stlxr(v262 - 1, v261));
  if (v262)
  {
LABEL_323:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_325;
    goto LABEL_324;
  }
  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
  std::__shared_weak_count::__release_weak(v260);
  if ((__p[23] & 0x80000000) != 0)
LABEL_324:
    operator delete(*(void **)__p);
LABEL_325:
  *(_QWORD *)&v352 = 0x19030E350403076ALL;
  WORD4(v352) = 26;
  v263 = sub_23950FF84((int8x8_t *)&v352);
  v264 = strlen((const char *)v263);
  if (v264 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v265 = v264;
  if (v264 >= 0x17)
  {
    v267 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v264 | 7) != 0x17)
      v267 = v264 | 7;
    v268 = v267 + 1;
    v266 = operator new(v267 + 1);
    *(_QWORD *)&__p[8] = v265;
    *(_QWORD *)&__p[16] = v268 | 0x8000000000000000;
    *(_QWORD *)__p = v266;
  }
  else
  {
    __p[23] = v264;
    v266 = __p;
    if (!v264)
      goto LABEL_333;
  }
  memmove(v266, v263, v265);
LABEL_333:
  v266[v265] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)(a2 + 37));
  v269 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_337;
  v270 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v271 = __ldaxr(v270);
  while (__stlxr(v271 - 1, v270));
  if (v271)
  {
LABEL_337:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_339;
    goto LABEL_338;
  }
  ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
  std::__shared_weak_count::__release_weak(v269);
  if ((__p[23] & 0x80000000) != 0)
LABEL_338:
    operator delete(*(void **)__p);
LABEL_339:
  *(_QWORD *)&v352 = 0x8121F24031A167BLL;
  WORD4(v352) = 11;
  v272 = sub_23950FF84((int8x8_t *)&v352);
  v273 = strlen((const char *)v272);
  if (v273 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v274 = v273;
  if (v273 >= 0x17)
  {
    v276 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v273 | 7) != 0x17)
      v276 = v273 | 7;
    v277 = v276 + 1;
    v275 = operator new(v276 + 1);
    *(_QWORD *)&__p[8] = v274;
    *(_QWORD *)&__p[16] = v277 | 0x8000000000000000;
    *(_QWORD *)__p = v275;
  }
  else
  {
    __p[23] = v273;
    v275 = __p;
    if (!v273)
      goto LABEL_347;
  }
  memmove(v275, v272, v274);
LABEL_347:
  v275[v274] = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)(a2 + 38));
  v279 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_351;
  v280 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v281 = __ldaxr(v280);
  while (__stlxr(v281 - 1, v280));
  if (v281)
  {
LABEL_351:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_353;
    goto LABEL_352;
  }
  ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
  std::__shared_weak_count::__release_weak(v279);
  if ((__p[23] & 0x80000000) != 0)
LABEL_352:
    operator delete(*(void **)__p);
LABEL_353:
  *(_QWORD *)&v352 = 0x747D7A74727E7A13;
  WORD6(v352) = 118;
  DWORD2(v352) = 2121951052;
  sub_23971A32C((uint64_t)&v352, v278);
  v283 = v282;
  v284 = strlen(v282);
  if (v284 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v285 = v284;
  if (v284 >= 0x17)
  {
    v287 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v284 | 7) != 0x17)
      v287 = v284 | 7;
    v288 = v287 + 1;
    v286 = operator new(v287 + 1);
    *(_QWORD *)&__p[8] = v285;
    *(_QWORD *)&__p[16] = v288 | 0x8000000000000000;
    *(_QWORD *)__p = v286;
  }
  else
  {
    __p[23] = v284;
    v286 = __p;
    if (!v284)
      goto LABEL_361;
  }
  memmove(v286, v283, v285);
LABEL_361:
  v286[v285] = 0;
  *(_QWORD *)&v351 = a2[39];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v289 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_365;
  v290 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v291 = __ldaxr(v290);
  while (__stlxr(v291 - 1, v290));
  if (v291)
  {
LABEL_365:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_367;
    goto LABEL_366;
  }
  ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
  std::__shared_weak_count::__release_weak(v289);
  if ((__p[23] & 0x80000000) != 0)
LABEL_366:
    operator delete(*(void **)__p);
LABEL_367:
  *(_OWORD *)__dst = xmmword_239F13804;
  strcpy(&__dst[16], "8");
  v292 = sub_239A91B18((int8x16_t *)__dst);
  v293 = strlen(v292->i8);
  if (v293 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v294 = v293;
  if (v293 >= 0x17)
  {
    v296 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v293 | 7) != 0x17)
      v296 = v293 | 7;
    v297 = v296 + 1;
    v295 = operator new(v296 + 1);
    *(_QWORD *)&__p[8] = v294;
    *(_QWORD *)&__p[16] = v297 | 0x8000000000000000;
    *(_QWORD *)__p = v295;
  }
  else
  {
    __p[23] = v293;
    v295 = __p;
    if (!v293)
      goto LABEL_375;
  }
  memmove(v295, v292, v294);
LABEL_375:
  v295[v294] = 0;
  *(_QWORD *)&v351 = a2[40];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_2397373B0((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v301 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_379;
  v302 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v303 = __ldaxr(v302);
  while (__stlxr(v303 - 1, v302));
  if (v303)
  {
LABEL_379:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_381;
    goto LABEL_380;
  }
  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
  std::__shared_weak_count::__release_weak(v301);
  if ((__p[23] & 0x80000000) != 0)
LABEL_380:
    operator delete(*(void **)__p);
LABEL_381:
  *(_OWORD *)__dst = xmmword_239F13816;
  strcpy(&__dst[16], "%!)");
  sub_23958E55C((uint64_t)__dst, (int32x4_t)xmmword_239F13816, v298, v299, v300);
  v305 = v304;
  v306 = strlen(v304);
  if (v306 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v307 = v306;
  if (v306 >= 0x17)
  {
    v309 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v306 | 7) != 0x17)
      v309 = v306 | 7;
    v310 = v309 + 1;
    v308 = operator new(v309 + 1);
    *(_QWORD *)&__p[8] = v307;
    *(_QWORD *)&__p[16] = v310 | 0x8000000000000000;
    *(_QWORD *)__p = v308;
  }
  else
  {
    __p[23] = v306;
    v308 = __p;
    if (!v306)
      goto LABEL_389;
  }
  memmove(v308, v305, v307);
LABEL_389:
  v308[v307] = 0;
  *(_QWORD *)&v351 = a2[41];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v352);
  sub_2397373B0((uint64_t)a1, (const void *)v352, (uint64_t)&v351);
  v311 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  if (!*((_QWORD *)&v352 + 1))
    goto LABEL_393;
  v312 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
  do
    v313 = __ldaxr(v312);
  while (__stlxr(v313 - 1, v312));
  if (v313)
  {
LABEL_393:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_395;
    goto LABEL_394;
  }
  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
  std::__shared_weak_count::__release_weak(v311);
  if ((__p[23] & 0x80000000) != 0)
LABEL_394:
    operator delete(*(void **)__p);
LABEL_395:
  *(_QWORD *)&v352 = 0xB163D0714031162;
  BYTE10(v352) = 0;
  WORD4(v352) = 1807;
  v314 = (const char *)sub_23958E518((uint64_t)&v352);
  v315 = strlen(v314);
  if (v315 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v316 = v315;
  if (v315 >= 0x17)
  {
    v318 = (v315 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v315 | 7) != 0x17)
      v318 = v315 | 7;
    v319 = v318 + 1;
    v317 = operator new(v318 + 1);
    *(_QWORD *)&__p[8] = v316;
    *(_QWORD *)&__p[16] = v319 | 0x8000000000000000;
    *(_QWORD *)__p = v317;
  }
  else
  {
    __p[23] = v315;
    v317 = __p;
    if (!v315)
      goto LABEL_403;
  }
  memmove(v317, v314, v316);
LABEL_403:
  v317[v316] = 0;
  *(_QWORD *)&v351 = a2[42];
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_2397373B0((uint64_t)a1, *(const void **)__dst, (uint64_t)&v351);
  v321 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_407;
  v322 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v323 = __ldaxr(v322);
  while (__stlxr(v323 - 1, v322));
  if (v323)
  {
LABEL_407:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_409;
    goto LABEL_408;
  }
  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
  std::__shared_weak_count::__release_weak(v321);
  if ((__p[23] & 0x80000000) != 0)
LABEL_408:
    operator delete(*(void **)__p);
LABEL_409:
  *(_QWORD *)&v351 = 0x7B73776A706B6C1ELL;
  strcpy((char *)&v351 + 8, "Awpxq");
  sub_23971A32C((uint64_t)&v351, v320);
  v325 = v324;
  v326 = strlen(v324);
  if (v326 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v327 = v326;
  if (v326 >= 0x17)
  {
    v329 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v326 | 7) != 0x17)
      v329 = v326 | 7;
    v330 = v329 + 1;
    v328 = operator new(v329 + 1);
    *(_QWORD *)&__p[8] = v327;
    *(_QWORD *)&__p[16] = v330 | 0x8000000000000000;
    *(_QWORD *)__p = v328;
  }
  else
  {
    __p[23] = v326;
    v328 = __p;
    if (!v326)
      goto LABEL_417;
  }
  memmove(v328, v325, v327);
LABEL_417:
  v328[v327] = 0;
  sub_239BCA2E4((uint64_t)&v352, a2 + 43);
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)__dst, (uint64_t)&v352);
  v331 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_421;
  v332 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v333 = __ldaxr(v332);
  while (__stlxr(v333 - 1, v332));
  if (!v333)
  {
    ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
    std::__shared_weak_count::__release_weak(v331);
    v334 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
    if (!*((_QWORD *)&v352 + 1))
      goto LABEL_425;
  }
  else
  {
LABEL_421:
    v334 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
    if (!*((_QWORD *)&v352 + 1))
      goto LABEL_425;
  }
  v335 = (unint64_t *)&v334->__shared_owners_;
  do
    v336 = __ldaxr(v335);
  while (__stlxr(v336 - 1, v335));
  if (v336)
  {
LABEL_425:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_427;
    goto LABEL_426;
  }
  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
  std::__shared_weak_count::__release_weak(v334);
  if ((__p[23] & 0x80000000) != 0)
LABEL_426:
    operator delete(*(void **)__p);
LABEL_427:
  *(_QWORD *)&v351 = 0x121E2219180E087DLL;
  BYTE12(v351) = 0;
  DWORD2(v351) = 437525267;
  v337 = sub_239510ECC((uint64_t)&v351);
  v338 = strlen(v337);
  if (v338 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v339 = v338;
  if (v338 >= 0x17)
  {
    v341 = (v338 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v338 | 7) != 0x17)
      v341 = v338 | 7;
    v342 = v341 + 1;
    v340 = operator new(v341 + 1);
    *(_QWORD *)&__p[8] = v339;
    *(_QWORD *)&__p[16] = v342 | 0x8000000000000000;
    *(_QWORD *)__p = v340;
  }
  else
  {
    __p[23] = v338;
    v340 = __p;
    if (!v338)
      goto LABEL_435;
  }
  memmove(v340, v337, v339);
LABEL_435:
  v340[v339] = 0;
  sub_239BC6DEC(&v352, (uint64_t)(a2 + 52));
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)a1, *(const void **)__dst, (uint64_t)&v352);
  v343 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(_QWORD *)&__dst[8])
    goto LABEL_439;
  v344 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
  do
    v345 = __ldaxr(v344);
  while (__stlxr(v345 - 1, v344));
  if (!v345)
  {
    ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
    std::__shared_weak_count::__release_weak(v343);
    v346 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
    if (!*((_QWORD *)&v352 + 1))
      goto LABEL_443;
  }
  else
  {
LABEL_439:
    v346 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
    if (!*((_QWORD *)&v352 + 1))
      goto LABEL_443;
  }
  v347 = (unint64_t *)&v346->__shared_owners_;
  do
    v348 = __ldaxr(v347);
  while (__stlxr(v348 - 1, v347));
  if (v348)
  {
LABEL_443:
    if ((__p[23] & 0x80000000) == 0)
      return;
    goto LABEL_444;
  }
  ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
  std::__shared_weak_count::__release_weak(v346);
  if ((__p[23] & 0x80000000) != 0)
LABEL_444:
    operator delete(*(void **)__p);
}

void sub_239BE5104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_239416DA0((uint64_t)&a16);
  sub_239416DA0((uint64_t)&a25);
  if (a14 < 0)
    operator delete(__p);
  sub_239416DA0(v25);
  _Unwind_Resume(a1);
}

void sub_239BE5298()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52A0()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52A8()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52B0()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52B8()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52C0()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52C8()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52D0()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52D8()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52E0()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52E8()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52F0()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE52F8()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5300()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5308()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5310()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5318()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5320()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5328()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5330()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5338()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5340()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5348()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5350()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5358()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5360()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5368()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5370()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5378()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5380()
{
  JUMPOUT(0x239BE5288);
}

void sub_239BE5388(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  const char *v15;
  size_t v16;
  size_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  double v22;
  int32x4_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v27;
  const char *v28;
  size_t v29;
  size_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *p_info;
  unint64_t v36;
  const char *v37;
  size_t v38;
  size_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const char *v46;
  size_t v47;
  size_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int8x16_t *v55;
  size_t v56;
  size_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t *v62;
  unint64_t v63;
  const char *v64;
  size_t v65;
  size_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  int16x8_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  const char *v74;
  const char *v75;
  size_t v76;
  size_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **__dst;
  size_t v85;
  unint64_t v86;
  _BYTE v87[24];
  CFStringRef v88[3];

  v88[2] = *(CFStringRef *)MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  strcpy((char *)v88, "(Fw^MZ\\AKM[");
  v4 = sub_23958E4C8((uint64_t)v88);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v85 = v6;
    v86 = v9 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v86) = v5;
    p_dst = (void **)&__dst;
    if (!v5)
      goto LABEL_9;
  }
  memmove(p_dst, v4, v6);
LABEL_9:
  *((_BYTE *)p_dst + v6) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)v87);
  sub_2396B4148((uint64_t)a1, *(const void **)v87, a2);
  v11 = *(std::__shared_weak_count **)&v87[8];
  if (!*(_QWORD *)&v87[8])
    goto LABEL_13;
  v12 = (unint64_t *)(*(_QWORD *)&v87[8] + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_13:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (SHIBYTE(v86) < 0)
LABEL_14:
    operator delete(__dst);
LABEL_15:
  v88[0] = (CFStringRef)0x4B7278757C4B7A14;
  strcpy((char *)&v88[1], "qpsqg");
  sub_23971A32C((uint64_t)v88, v10);
  v15 = v14;
  v16 = strlen(v14);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    v85 = v17;
    v86 = v20 | 0x8000000000000000;
    __dst = v18;
  }
  else
  {
    HIBYTE(v86) = v16;
    v18 = (void **)&__dst;
    if (!v16)
      goto LABEL_23;
  }
  memmove(v18, v15, v17);
LABEL_23:
  *((_BYTE *)v18 + v17) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)v87);
  sub_2396B4148((uint64_t)a1, *(const void **)v87, a2 + 4);
  v24 = *(std::__shared_weak_count **)&v87[8];
  if (!*(_QWORD *)&v87[8])
    goto LABEL_27;
  v25 = (unint64_t *)(*(_QWORD *)&v87[8] + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_27:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (SHIBYTE(v86) < 0)
LABEL_28:
    operator delete(__dst);
LABEL_29:
  *(_OWORD *)v87 = xmmword_239F136A2;
  *(_QWORD *)&v87[15] = 0x2E383A3938023BLL;
  sub_2396EFBE0((uint64_t)v87, (int32x4_t)xmmword_239F136A2, v21, v22, v23);
  v28 = v27;
  v29 = strlen(v27);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    v31 = (void **)operator new(v32 + 1);
    v85 = v30;
    v86 = v33 | 0x8000000000000000;
    __dst = v31;
  }
  else
  {
    HIBYTE(v86) = v29;
    v31 = (void **)&__dst;
    if (!v29)
      goto LABEL_37;
  }
  memmove(v31, v28, v30);
LABEL_37:
  *((_BYTE *)v31 + v30) = 0;
  sub_239629EF4((uint64_t)&__dst, v88);
  sub_2396B4148((uint64_t)a1, v88[0], a2 + 8);
  v34 = (std::__shared_weak_count *)v88[1];
  if (!v88[1])
    goto LABEL_41;
  p_info = &v88[1]->info;
  do
    v36 = __ldaxr((unint64_t *)p_info);
  while (__stlxr(v36 - 1, (unint64_t *)p_info));
  if (v36)
  {
LABEL_41:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (SHIBYTE(v86) < 0)
LABEL_42:
    operator delete(__dst);
LABEL_43:
  strcpy((char *)v88, "=SbXYZXN");
  v37 = sub_239513718((char *)v88);
  v38 = strlen(v37);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v39 = v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = (void **)operator new(v41 + 1);
    v85 = v39;
    v86 = v42 | 0x8000000000000000;
    __dst = v40;
  }
  else
  {
    HIBYTE(v86) = v38;
    v40 = (void **)&__dst;
    if (!v38)
      goto LABEL_51;
  }
  memmove(v40, v37, v39);
LABEL_51:
  *((_BYTE *)v40 + v39) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)v87);
  sub_2396B4148((uint64_t)a1, *(const void **)v87, a2 + 12);
  v43 = *(std::__shared_weak_count **)&v87[8];
  if (!*(_QWORD *)&v87[8])
    goto LABEL_55;
  v44 = (unint64_t *)(*(_QWORD *)&v87[8] + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (v45)
  {
LABEL_55:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  if (SHIBYTE(v86) < 0)
LABEL_56:
    operator delete(__dst);
LABEL_57:
  v88[0] = (CFStringRef)0x6E787E7C7B42731DLL;
  LOBYTE(v88[1]) = 0;
  v46 = sub_239513718((char *)v88);
  v47 = strlen(v46);
  if (v47 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v48 = v47;
  if (v47 >= 0x17)
  {
    v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v50 = v47 | 7;
    v51 = v50 + 1;
    v49 = (void **)operator new(v50 + 1);
    v85 = v48;
    v86 = v51 | 0x8000000000000000;
    __dst = v49;
  }
  else
  {
    HIBYTE(v86) = v47;
    v49 = (void **)&__dst;
    if (!v47)
      goto LABEL_65;
  }
  memmove(v49, v46, v48);
LABEL_65:
  *((_BYTE *)v49 + v48) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)v87);
  sub_2396B4148((uint64_t)a1, *(const void **)v87, a2 + 16);
  v52 = *(std::__shared_weak_count **)&v87[8];
  if (!*(_QWORD *)&v87[8])
    goto LABEL_69;
  v53 = (unint64_t *)(*(_QWORD *)&v87[8] + 8);
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (v54)
  {
LABEL_69:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if (SHIBYTE(v86) < 0)
LABEL_70:
    operator delete(__dst);
LABEL_71:
  strcpy(v87, "\"L}@MWLFCP[}NMMRQ");
  v55 = sub_239A91B18((int8x16_t *)v87);
  v56 = strlen(v55->i8);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = (void **)operator new(v59 + 1);
    v85 = v57;
    v86 = v60 | 0x8000000000000000;
    __dst = v58;
  }
  else
  {
    HIBYTE(v86) = v56;
    v58 = (void **)&__dst;
    if (!v56)
      goto LABEL_79;
  }
  memmove(v58, v55, v57);
LABEL_79:
  *((_BYTE *)v58 + v57) = 0;
  sub_239629EF4((uint64_t)&__dst, v88);
  sub_2396B4148((uint64_t)a1, v88[0], a2 + 20);
  v61 = (std::__shared_weak_count *)v88[1];
  if (!v88[1])
    goto LABEL_83;
  v62 = &v88[1]->info;
  do
    v63 = __ldaxr((unint64_t *)v62);
  while (__stlxr(v63 - 1, (unint64_t *)v62));
  if (v63)
  {
LABEL_83:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
  std::__shared_weak_count::__release_weak(v61);
  if (SHIBYTE(v86) < 0)
LABEL_84:
    operator delete(__dst);
LABEL_85:
  v88[0] = (CFStringRef)0x7011A11132B1A74;
  LOBYTE(v88[1]) = 0;
  v64 = sub_239513718((char *)v88);
  v65 = strlen(v64);
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v66 = v65;
  if (v65 >= 0x17)
  {
    v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v68 = v65 | 7;
    v69 = v68 + 1;
    v67 = (void **)operator new(v68 + 1);
    v85 = v66;
    v86 = v69 | 0x8000000000000000;
    __dst = v67;
  }
  else
  {
    HIBYTE(v86) = v65;
    v67 = (void **)&__dst;
    if (!v65)
      goto LABEL_93;
  }
  memmove(v67, v64, v66);
LABEL_93:
  *((_BYTE *)v67 + v66) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)v87);
  sub_2396B4148((uint64_t)a1, *(const void **)v87, a2 + 24);
  v71 = *(std::__shared_weak_count **)&v87[8];
  if (!*(_QWORD *)&v87[8])
    goto LABEL_97;
  v72 = (unint64_t *)(*(_QWORD *)&v87[8] + 8);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (v73)
  {
LABEL_97:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
  std::__shared_weak_count::__release_weak(v71);
  if (SHIBYTE(v86) < 0)
LABEL_98:
    operator delete(__dst);
LABEL_99:
  v88[0] = (CFStringRef)0x243B26242814254BLL;
  strcpy((char *)&v88[1], "%.%?8");
  sub_23971A32C((uint64_t)v88, v70);
  v75 = v74;
  v76 = strlen(v74);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v77 = v76;
  if (v76 >= 0x17)
  {
    v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v79 = v76 | 7;
    v80 = v79 + 1;
    v78 = (void **)operator new(v79 + 1);
    v85 = v77;
    v86 = v80 | 0x8000000000000000;
    __dst = v78;
  }
  else
  {
    HIBYTE(v86) = v76;
    v78 = (void **)&__dst;
    if (!v76)
      goto LABEL_107;
  }
  memmove(v78, v75, v77);
LABEL_107:
  *((_BYTE *)v78 + v77) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)v87);
  sub_2396B4148((uint64_t)a1, *(const void **)v87, a2 + 28);
  v81 = *(std::__shared_weak_count **)&v87[8];
  if (!*(_QWORD *)&v87[8])
    goto LABEL_111;
  v82 = (unint64_t *)(*(_QWORD *)&v87[8] + 8);
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (v83)
  {
LABEL_111:
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      return;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
  std::__shared_weak_count::__release_weak(v81);
  if (SHIBYTE(v86) < 0)
LABEL_112:
    operator delete(__dst);
}

void sub_239BE5C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  sub_239416DA0((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_239416DA0(v19);
  _Unwind_Resume(a1);
}

void sub_239BE5D00()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D08()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D10()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D18()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D20()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D28()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D30()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D38()
{
  JUMPOUT(0x239BE5CF0);
}

void sub_239BE5D40(_OWORD *a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  double v12;
  int32x4_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  double v25;
  int32x4_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  size_t v32;
  size_t v33;
  __int128 *p_dst;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const char *v40;
  const char *v41;
  size_t v42;
  size_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  const char *v50;
  const char *v51;
  size_t v52;
  size_t v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  size_t v61;
  size_t v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const char *v69;
  size_t v70;
  size_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  size_t v79;
  size_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const char *v87;
  size_t v88;
  size_t v89;
  _OWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const char *v96;
  size_t v97;
  size_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  const char *v105;
  size_t v106;
  size_t v107;
  _OWORD *v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _OWORD __p[2];
  __int128 __dst;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  sub_23962C714(a1);
  __dst = xmmword_239F136DF;
  LOBYTE(v116) = 0;
  sub_2396EFA24((uint64_t)&__dst);
  v5 = v4;
  v6 = strlen(v4);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)&__p[0] + 1) = v7;
    *(_QWORD *)&__p[1] = v10 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v8;
  }
  else
  {
    BYTE7(__p[1]) = v6;
    v8 = __p;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v8, v5, v7);
LABEL_9:
  *((_BYTE *)v8 + v7) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v117);
  sub_239BB47DC((uint64_t)a1, (const void *)v117, a2);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_13;
  v15 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_13:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (SBYTE7(__p[1]) < 0)
LABEL_14:
    operator delete(*(void **)&__p[0]);
LABEL_15:
  __dst = xmmword_239F136F0;
  LODWORD(v116) = 132105;
  sub_23958E55C((uint64_t)&__dst, (int32x4_t)xmmword_239F136F0, v11, v12, v13);
  v18 = v17;
  v19 = strlen(v17);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    *((_QWORD *)&__p[0] + 1) = v20;
    *(_QWORD *)&__p[1] = v23 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v21;
  }
  else
  {
    BYTE7(__p[1]) = v19;
    v21 = __p;
    if (!v19)
      goto LABEL_23;
  }
  memmove(v21, v18, v20);
LABEL_23:
  *((_BYTE *)v21 + v20) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&v117);
  sub_239BB47DC((uint64_t)a1, (const void *)v117, a2 + 4);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_27;
  v28 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_27:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SBYTE7(__p[1]) < 0)
LABEL_28:
    operator delete(*(void **)&__p[0]);
LABEL_29:
  __p[0] = xmmword_239F13704;
  sub_239A93C04((unsigned __int8 *)__p, *(int32x4_t *)((char *)&xmmword_239F13704 + 10), v24, v25, v26);
  v31 = v30;
  v32 = strlen(v30);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    p_dst = (__int128 *)operator new(v35 + 1);
    *((_QWORD *)&__dst + 1) = v33;
    v116 = v36 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v116) = v32;
    p_dst = &__dst;
    if (!v32)
      goto LABEL_37;
  }
  memmove(p_dst, v31, v33);
LABEL_37:
  *((_BYTE *)p_dst + v33) = 0;
  sub_239629EF4((uint64_t)&__dst, (CFStringRef *)&v117);
  sub_239BB47DC((uint64_t)a1, (const void *)v117, a2 + 8);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (!*((_QWORD *)&v117 + 1))
    goto LABEL_41;
  v38 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_41:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  if (SHIBYTE(v116) < 0)
LABEL_42:
    operator delete((void *)__dst);
LABEL_43:
  v117 = xmmword_239F0C300;
  sub_23950F8E4((uint64_t)&v117);
  v41 = v40;
  v42 = strlen(v40);
  if (v42 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v43 = v42;
  if (v42 >= 0x17)
  {
    v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v45 = v42 | 7;
    v46 = v45 + 1;
    v44 = operator new(v45 + 1);
    *((_QWORD *)&__p[0] + 1) = v43;
    *(_QWORD *)&__p[1] = v46 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v44;
  }
  else
  {
    BYTE7(__p[1]) = v42;
    v44 = __p;
    if (!v42)
      goto LABEL_51;
  }
  memmove(v44, v41, v43);
LABEL_51:
  *((_BYTE *)v44 + v43) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 12);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_55;
  v48 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_55:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if (SBYTE7(__p[1]) < 0)
LABEL_56:
    operator delete(*(void **)&__p[0]);
LABEL_57:
  *(_QWORD *)&v117 = 0x151A241E181A1D7BLL;
  BYTE14(v117) = 0;
  WORD6(v117) = 16168;
  DWORD2(v117) = 605951772;
  sub_23958E5E0((uint64_t)&v117);
  v51 = v50;
  v52 = strlen(v50);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v53 = v52;
  if (v52 >= 0x17)
  {
    v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v55 = v52 | 7;
    v56 = v55 + 1;
    v54 = operator new(v55 + 1);
    *((_QWORD *)&__p[0] + 1) = v53;
    *(_QWORD *)&__p[1] = v56 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v54;
  }
  else
  {
    BYTE7(__p[1]) = v52;
    v54 = __p;
    if (!v52)
      goto LABEL_65;
  }
  memmove(v54, v51, v53);
LABEL_65:
  *((_BYTE *)v54 + v53) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 16);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_69;
  v58 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
  {
LABEL_69:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if (SBYTE7(__p[1]) < 0)
LABEL_70:
    operator delete(*(void **)&__p[0]);
LABEL_71:
  *(_QWORD *)&v117 = 0x292D1F382F222240;
  DWORD2(v117) = 3677998;
  v60 = sub_23958E4C8((uint64_t)&v117);
  v61 = strlen(v60);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v63 = operator new(v64 + 1);
    *((_QWORD *)&__p[0] + 1) = v62;
    *(_QWORD *)&__p[1] = v65 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v63;
  }
  else
  {
    BYTE7(__p[1]) = v61;
    v63 = __p;
    if (!v61)
      goto LABEL_79;
  }
  memmove(v63, v60, v62);
LABEL_79:
  *((_BYTE *)v63 + v62) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 20);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_83;
  v67 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (v68)
  {
LABEL_83:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
  std::__shared_weak_count::__release_weak(v66);
  if (SBYTE7(__p[1]) < 0)
LABEL_84:
    operator delete(*(void **)&__p[0]);
LABEL_85:
  *(_QWORD *)&v117 = 0x494D7F584F424220;
  DWORD2(v117) = 5865294;
  v69 = sub_23958E4C8((uint64_t)&v117);
  v70 = strlen(v69);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    *((_QWORD *)&__p[0] + 1) = v71;
    *(_QWORD *)&__p[1] = v74 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v72;
  }
  else
  {
    BYTE7(__p[1]) = v70;
    v72 = __p;
    if (!v70)
      goto LABEL_93;
  }
  memmove(v72, v69, v71);
LABEL_93:
  *((_BYTE *)v72 + v71) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 24);
  v75 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_97;
  v76 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_97:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if (SBYTE7(__p[1]) < 0)
LABEL_98:
    operator delete(*(void **)&__p[0]);
LABEL_99:
  strcpy((char *)&v117, "'EEH_xJNIx]");
  v78 = sub_23958E4C8((uint64_t)&v117);
  v79 = strlen(v78);
  if (v79 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v80 = v79;
  if (v79 >= 0x17)
  {
    v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v82 = v79 | 7;
    v83 = v82 + 1;
    v81 = operator new(v82 + 1);
    *((_QWORD *)&__p[0] + 1) = v80;
    *(_QWORD *)&__p[1] = v83 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v81;
  }
  else
  {
    BYTE7(__p[1]) = v79;
    v81 = __p;
    if (!v79)
      goto LABEL_107;
  }
  memmove(v81, v78, v80);
LABEL_107:
  *((_BYTE *)v81 + v80) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 28);
  v84 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_111;
  v85 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 - 1, v85));
  if (v86)
  {
LABEL_111:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
  std::__shared_weak_count::__release_weak(v84);
  if (SBYTE7(__p[1]) < 0)
LABEL_112:
    operator delete(*(void **)&__p[0]);
LABEL_113:
  strcpy((char *)&v117, "+IIDStFJStS");
  v87 = sub_23958E4C8((uint64_t)&v117);
  v88 = strlen(v87);
  if (v88 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v89 = v88;
  if (v88 >= 0x17)
  {
    v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17)
      v91 = v88 | 7;
    v92 = v91 + 1;
    v90 = operator new(v91 + 1);
    *((_QWORD *)&__p[0] + 1) = v89;
    *(_QWORD *)&__p[1] = v92 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v90;
  }
  else
  {
    BYTE7(__p[1]) = v88;
    v90 = __p;
    if (!v88)
      goto LABEL_121;
  }
  memmove(v90, v87, v89);
LABEL_121:
  *((_BYTE *)v90 + v89) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 32);
  v93 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_125;
  v94 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (v95)
  {
LABEL_125:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (SBYTE7(__p[1]) < 0)
LABEL_126:
    operator delete(*(void **)&__p[0]);
LABEL_127:
  *(_QWORD *)&v117 = 0x30F3D1A0D000062;
  DWORD2(v117) = 1785114;
  v96 = sub_23958E4C8((uint64_t)&v117);
  v97 = strlen(v96);
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v98 = v97;
  if (v97 >= 0x17)
  {
    v100 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v100 = v97 | 7;
    v101 = v100 + 1;
    v99 = operator new(v100 + 1);
    *((_QWORD *)&__p[0] + 1) = v98;
    *(_QWORD *)&__p[1] = v101 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v99;
  }
  else
  {
    BYTE7(__p[1]) = v97;
    v99 = __p;
    if (!v97)
      goto LABEL_135;
  }
  memmove(v99, v96, v98);
LABEL_135:
  *((_BYTE *)v99 + v98) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 36);
  v102 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_139;
  v103 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (v104)
  {
LABEL_139:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
  std::__shared_weak_count::__release_weak(v102);
  if (SBYTE7(__p[1]) < 0)
LABEL_140:
    operator delete(*(void **)&__p[0]);
LABEL_141:
  *(_QWORD *)&v117 = 0x6F635176616C6C0ELL;
  DWORD2(v117) = 7623030;
  v105 = sub_23958E4C8((uint64_t)&v117);
  v106 = strlen(v105);
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v107 = v106;
  if (v106 >= 0x17)
  {
    v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v109 = v106 | 7;
    v110 = v109 + 1;
    v108 = operator new(v109 + 1);
    *((_QWORD *)&__p[0] + 1) = v107;
    *(_QWORD *)&__p[1] = v110 | 0x8000000000000000;
    *(_QWORD *)&__p[0] = v108;
  }
  else
  {
    BYTE7(__p[1]) = v106;
    v108 = __p;
    if (!v106)
      goto LABEL_149;
  }
  memmove(v108, v105, v107);
LABEL_149:
  *((_BYTE *)v108 + v107) = 0;
  sub_239629EF4((uint64_t)__p, (CFStringRef *)&__dst);
  sub_239BB47DC((uint64_t)a1, (const void *)__dst, a2 + 40);
  v111 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_153;
  v112 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (v113)
  {
LABEL_153:
    if ((SBYTE7(__p[1]) & 0x80000000) == 0)
      return;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
  std::__shared_weak_count::__release_weak(v111);
  if (SBYTE7(__p[1]) < 0)
LABEL_154:
    operator delete(*(void **)&__p[0]);
}

void sub_239BE6974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  sub_239416DA0((uint64_t)&a16);
  if (a14 < 0)
    operator delete(__p);
  sub_239416DA0(v23);
  _Unwind_Resume(a1);
}

void sub_239BE6A20()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A28()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A30()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A38()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A40()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A48()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A50()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A58()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A60()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A68()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A70()
{
  JUMPOUT(0x239BE6A10);
}

void sub_239BE6A78(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  size_t v22;
  size_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  const char *v48;
  size_t v49;
  size_t v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  size_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  size_t v67;
  size_t v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  size_t v79;
  std::string::size_type v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  int16x8_t v86;
  const char *v87;
  const char *v88;
  size_t v89;
  size_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  int16x8_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  const char *v99;
  const char *v100;
  size_t v101;
  size_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  int16x8_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  const char *v111;
  const char *v112;
  size_t v113;
  size_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  int16x8_t v119;
  double v120;
  int16x8_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned __int8 *v125;
  size_t v126;
  size_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  int8x8_t *v134;
  size_t v135;
  size_t v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int8x16_t *v149;
  size_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  const char *v156;
  size_t v157;
  size_t v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  int8x16_t *v165;
  size_t v166;
  size_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int8x16_t v171;
  double v172;
  int32x4_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  const char *v177;
  const char *v178;
  size_t v179;
  size_t v180;
  _OWORD *v181;
  uint64_t v182;
  uint64_t v183;
  int8x16_t v184;
  double v185;
  int32x4_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  const char *v190;
  const char *v191;
  size_t v192;
  size_t v193;
  _OWORD *v194;
  uint64_t v195;
  uint64_t v196;
  int8x16_t v197;
  double v198;
  int32x4_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  const char *v203;
  const char *v204;
  size_t v205;
  size_t v206;
  _OWORD *v207;
  uint64_t v208;
  uint64_t v209;
  int32x4_t v210;
  double v211;
  int32x4_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unsigned __int8 *v216;
  size_t v217;
  size_t v218;
  _OWORD *v219;
  uint64_t v220;
  uint64_t v221;
  int8x16_t v222;
  double v223;
  int32x4_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  const char *v228;
  const char *v229;
  size_t v230;
  size_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  int16x8_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  const char *v251;
  const char *v252;
  size_t v253;
  size_t v254;
  _OWORD *v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  const char *v264;
  size_t v265;
  size_t v266;
  _OWORD *v267;
  uint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  const char *v282;
  size_t v283;
  size_t v284;
  _OWORD *v285;
  uint64_t v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  const char *v294;
  const char *v295;
  size_t v296;
  size_t v297;
  _BYTE *v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301;
  size_t v302;
  size_t v303;
  _OWORD *v304;
  uint64_t v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  const char *v310;
  const char *v311;
  size_t v312;
  size_t v313;
  _OWORD *v314;
  uint64_t v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  int8x16_t *v320;
  size_t v321;
  size_t v322;
  _OWORD *v323;
  uint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  int8x16_t *v329;
  size_t v330;
  size_t v331;
  _OWORD *v332;
  uint64_t v333;
  uint64_t v334;
  int16x8_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  const char *v339;
  const char *v340;
  size_t v341;
  size_t v342;
  _OWORD *v343;
  uint64_t v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  const char *v358;
  size_t v359;
  size_t v360;
  _OWORD *v361;
  uint64_t v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  const char *v370;
  const char *v371;
  size_t v372;
  std::string::size_type v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int16x8_t v379;
  const char *v380;
  const char *v381;
  size_t v382;
  size_t v383;
  _OWORD *v384;
  uint64_t v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  const char *v390;
  size_t v391;
  size_t v392;
  _OWORD *v393;
  uint64_t v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  const char *v399;
  size_t v400;
  size_t v401;
  _OWORD *v402;
  uint64_t v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  const char *v408;
  const char *v409;
  size_t v410;
  size_t v411;
  _OWORD *v412;
  uint64_t v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  const char *v418;
  const char *v419;
  size_t v420;
  size_t v421;
  _OWORD *v422;
  uint64_t v423;
  uint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  const char *v428;
  const char *v429;
  size_t v430;
  size_t v431;
  _OWORD *v432;
  uint64_t v433;
  uint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  int8x16_t *v438;
  size_t v439;
  size_t v440;
  _OWORD *v441;
  uint64_t v442;
  uint64_t v443;
  int8x16_t v444;
  double v445;
  int32x4_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  const char *v450;
  const char *v451;
  size_t v452;
  size_t v453;
  _BYTE *v454;
  uint64_t v455;
  uint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  const char *v460;
  const char *v461;
  size_t v462;
  size_t v463;
  _OWORD *v464;
  uint64_t v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  const char *v470;
  size_t v471;
  size_t v472;
  _OWORD *v473;
  uint64_t v474;
  uint64_t v475;
  const void *v476;
  __int128 v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  __int128 v481;
  unint64_t *v482;
  unint64_t v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  void *v486;
  unint64_t *v487;
  unint64_t v488;
  unint64_t v489;
  std::__shared_weak_count *v490;
  void **v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  void *v495;
  unint64_t *v496;
  unint64_t v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  void *v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  void *v514;
  unint64_t *v515;
  unint64_t v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  const char *v524;
  size_t v525;
  size_t v526;
  _OWORD *v527;
  uint64_t v528;
  uint64_t v529;
  int8x16_t v530;
  double v531;
  int32x4_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  const char *v536;
  const char *v537;
  size_t v538;
  size_t v539;
  _BYTE *v540;
  uint64_t v541;
  uint64_t v542;
  int8x16_t v543;
  double v544;
  int32x4_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  const char *v549;
  const char *v550;
  size_t v551;
  size_t v552;
  _OWORD *v553;
  uint64_t v554;
  uint64_t v555;
  int8x16_t v556;
  double v557;
  int32x4_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  const char *v562;
  const char *v563;
  size_t v564;
  size_t v565;
  _BYTE *v566;
  uint64_t v567;
  uint64_t v568;
  int16x8_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  const char *v573;
  const char *v574;
  size_t v575;
  size_t v576;
  _OWORD *v577;
  uint64_t v578;
  uint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  const char *v586;
  size_t v587;
  size_t v588;
  _OWORD *v589;
  uint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  int8x16_t *v604;
  size_t v605;
  size_t v606;
  _OWORD *v607;
  uint64_t v608;
  uint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  const char *v616;
  const char *v617;
  size_t v618;
  size_t v619;
  _OWORD *v620;
  uint64_t v621;
  uint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  _OWORD *v629;
  __int128 v632;
  __int128 v633;
  __int128 theDict;
  char v635[8];
  uint64_t v636;
  uint64_t v637;
  int v638;
  void *value[2];
  unint64_t v640;
  __int128 v641;
  __int16 v642;
  void *__p[2];
  unint64_t v644;
  _OWORD __dst[3];
  std::string v646;
  __int128 v647;
  _BYTE v648[24];
  uint64_t v649;

  v16 = (uint64_t)a1;
  v649 = *MEMORY[0x24BDAC8D0];
  v629 = sub_23962C714(a1);
  if (!*(_BYTE *)(a2 + 464))
    goto LABEL_19;
  v17 = a4;
  v18 = a5;
  v19 = a7;
  __p[0] = (void *)0x3912140916031466;
  BYTE6(__p[1]) = 0;
  WORD2(__p[1]) = 259;
  LODWORD(__p[1]) = 353109001;
  sub_23958E5E0((uint64_t)__p);
  v21 = v20;
  v22 = strlen(v20);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    *((_QWORD *)&__dst[0] + 1) = v23;
    *(_QWORD *)&__dst[1] = v26 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v24;
  }
  else
  {
    BYTE7(__dst[1]) = v22;
    v24 = __dst;
    if (!v22)
      goto LABEL_10;
  }
  memmove(v24, v21, v23);
LABEL_10:
  *((_BYTE *)v24 + v23) = 0;
  sub_239BCB55C(&v646, a2);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  v16 = (uint64_t)v629;
  sub_239BB7018((uint64_t)v629, *(const void **)v648, (uint64_t)&v646);
  v27 = *(std::__shared_weak_count **)&v648[8];
  a7 = v19;
  a5 = v18;
  a4 = v17;
  if (!*(_QWORD *)&v648[8])
    goto LABEL_14;
  v28 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    size = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_18;
  }
  else
  {
LABEL_14:
    size = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_18;
  }
  p_shared_owners = (unint64_t *)&size->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (SBYTE7(__dst[1]) < 0)
      goto LABEL_41;
LABEL_19:
    if (!*(_BYTE *)(a3 + 192))
      goto LABEL_46;
    goto LABEL_20;
  }
LABEL_18:
  if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_41:
  operator delete(*(void **)&__dst[0]);
  if (!*(_BYTE *)(a3 + 192))
    goto LABEL_46;
LABEL_20:
  v33 = v16;
  *(_OWORD *)&v646.__r_.__value_.__l.__data_ = xmmword_239F0C310;
  sub_23950F8E4((uint64_t)&v646);
  v35 = v34;
  v36 = strlen(v34);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    *((_QWORD *)&__dst[0] + 1) = v37;
    *(_QWORD *)&__dst[1] = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v38;
    goto LABEL_27;
  }
  BYTE7(__dst[1]) = v36;
  v38 = __dst;
  if (v36)
LABEL_27:
    memmove(v38, v35, v37);
  v16 = v33;
  *((_BYTE *)v38 + v37) = 0;
  sub_239BCD644(__p, a3);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018(v33, *(const void **)v648, (uint64_t)__p);
  v41 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_32;
  v42 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v44 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_36;
  }
  else
  {
LABEL_32:
    v44 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_36;
  }
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (v46)
  {
LABEL_36:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (SBYTE7(__dst[1]) < 0)
LABEL_37:
    operator delete(*(void **)&__dst[0]);
LABEL_46:
  if (!*(_BYTE *)(a4 + 712))
    goto LABEL_64;
  strcpy(v648, "W%2'8%#\b:6#4?>90");
  sub_2396EFA24((uint64_t)v648);
  v48 = v47;
  v49 = strlen(v47);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    *((_QWORD *)&__dst[0] + 1) = v50;
    *(_QWORD *)&__dst[1] = v53 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v51;
  }
  else
  {
    BYTE7(__dst[1]) = v49;
    v51 = __dst;
    if (!v49)
      goto LABEL_55;
  }
  memmove(v51, v48, v50);
LABEL_55:
  *((_BYTE *)v51 + v50) = 0;
  sub_239BD0048(__p, a4);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v646);
  sub_239BB7018(v16, v646.__r_.__value_.__l.__data_, (uint64_t)__p);
  v54 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
  if (!v646.__r_.__value_.__l.__size_)
    goto LABEL_59;
  v55 = (unint64_t *)(v646.__r_.__value_.__l.__size_ + 8);
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v57 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_63;
  }
  else
  {
LABEL_59:
    v57 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_63;
  }
  v58 = (unint64_t *)&v57->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
  {
LABEL_63:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_375;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
  {
LABEL_64:
    if (!*(_BYTE *)(a5 + 1744))
      goto LABEL_410;
    goto LABEL_65;
  }
LABEL_375:
  operator delete(*(void **)&__dst[0]);
  if (!*(_BYTE *)(a5 + 1744))
    goto LABEL_410;
LABEL_65:
  v637 = 0x4F64627F60756210;
  v638 = 8222307;
  v60 = sub_23958E4C8((uint64_t)&v637);
  v61 = strlen(v60);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v62 = (void *)v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v63 = operator new(v64 + 1);
    value[1] = v62;
    v640 = v65 | 0x8000000000000000;
    value[0] = v63;
    goto LABEL_72;
  }
  HIBYTE(v640) = v61;
  v63 = value;
  if (v61)
LABEL_72:
    memmove(v63, v60, (size_t)v62);
  *((_BYTE *)v62 + (_QWORD)v63) = 0;
  sub_23962C714(&v632);
  strcpy((char *)__p, "W0;856;\b>918");
  v66 = sub_239510ECC((uint64_t)__p);
  v67 = strlen(v66);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v68 = v67;
  if (v67 >= 0x17)
  {
    v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v70 = v67 | 7;
    v71 = v70 + 1;
    v69 = operator new(v70 + 1);
    *((_QWORD *)&__dst[0] + 1) = v68;
    *(_QWORD *)&__dst[1] = v71 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v69;
  }
  else
  {
    BYTE7(__dst[1]) = v67;
    v69 = __dst;
    if (!v67)
      goto LABEL_81;
  }
  memmove(v69, v66, v68);
LABEL_81:
  *((_BYTE *)v69 + v68) = 0;
  sub_239BD34E4((uint64_t)&v646, a5);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018((uint64_t)&v632, *(const void **)v648, (uint64_t)&v646);
  v72 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_85;
  v73 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    v75 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_89;
  }
  else
  {
LABEL_85:
    v75 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_89;
  }
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_89:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if (SBYTE7(__dst[1]) < 0)
LABEL_90:
    operator delete(*(void **)&__dst[0]);
LABEL_91:
  *(_QWORD *)&v647 = 0x24122E2221283F4DLL;
  DWORD2(v647) = 2239267;
  v78 = sub_23958E4C8((uint64_t)&v647);
  v79 = strlen(v78);
  if (v79 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v80 = v79;
  if (v79 >= 0x17)
  {
    v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v82 = v79 | 7;
    v83 = v82 + 1;
    v81 = operator new(v82 + 1);
    v646.__r_.__value_.__l.__size_ = v80;
    v646.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
    v646.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    goto LABEL_98;
  }
  *((_BYTE *)&v646.__r_.__value_.__s + 23) = v79;
  v81 = &v646;
  if (v79)
LABEL_98:
    memmove(v81, v78, v80);
  *((_BYTE *)v81 + v80) = 0;
  sub_23962C714(&v641);
  strcpy((char *)__dst, "V8#;\t72232\t?;713%\t!?\">\t89$;7:\t\">$3%>9:2");
  sub_2396F02A0((unsigned __int8 *)__dst, *(double *)"V8#;\t72232\t?;713%\t!?\">\t89$;7:\t\">$3%>9:2",
    *(int16x8_t *)"%\t!?\">\t89$;7:\t\">$3%>9:2",
    v84,
    v85,
    v86);
  v88 = v87;
  v89 = strlen(v87);
  if (v89 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v90 = v89;
  if (v89 >= 0x17)
  {
    v92 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17)
      v92 = v89 | 7;
    v93 = v92 + 1;
    v91 = operator new(v92 + 1);
    *(_QWORD *)&v648[8] = v90;
    *(_QWORD *)&v648[16] = v93 | 0x8000000000000000;
    *(_QWORD *)v648 = v91;
  }
  else
  {
    v648[23] = v89;
    v91 = v648;
    if (!v89)
      goto LABEL_107;
  }
  memmove(v91, v88, v90);
LABEL_107:
  v91[v90] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)&v641, __p[0], a5 + 480);
  v96 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_111;
  v97 = (unint64_t *)((char *)__p[1] + 8);
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
  if (v98)
  {
LABEL_111:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
  std::__shared_weak_count::__release_weak(v96);
  if ((v648[23] & 0x80000000) != 0)
LABEL_112:
    operator delete(*(void **)v648);
LABEL_113:
  __dst[0] = xmmword_239F12E11;
  __dst[1] = xmmword_239F12E21;
  *(_QWORD *)((char *)&__dst[1] + 15) = 0x2F272423382E39;
  sub_2396F0804((unsigned __int8 *)__dst, 2.05338098e-81, xmmword_239F12E21, v94, v95);
  v100 = v99;
  v101 = strlen(v99);
  if (v101 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v102 = v101;
  if (v101 >= 0x17)
  {
    v104 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v104 = v101 | 7;
    v105 = v104 + 1;
    v103 = operator new(v104 + 1);
    *(_QWORD *)&v648[8] = v102;
    *(_QWORD *)&v648[16] = v105 | 0x8000000000000000;
    *(_QWORD *)v648 = v103;
  }
  else
  {
    v648[23] = v101;
    v103 = v648;
    if (!v101)
      goto LABEL_121;
  }
  memmove(v103, v100, v102);
LABEL_121:
  v103[v102] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)&v641, __p[0], a5 + 488);
  v108 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_125;
  v109 = (unint64_t *)((char *)__p[1] + 8);
  do
    v110 = __ldaxr(v109);
  while (__stlxr(v110 - 1, v109));
  if (v110)
  {
LABEL_125:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
  std::__shared_weak_count::__release_weak(v108);
  if ((v648[23] & 0x80000000) != 0)
LABEL_126:
    operator delete(*(void **)v648);
LABEL_127:
  __dst[0] = xmmword_239F12E38;
  __dst[1] = xmmword_239F12E48;
  *(_QWORD *)((char *)&__dst[1] + 15) = 0x1E161512091F08;
  sub_2396F0804((unsigned __int8 *)__dst, 1.91433953e-216, xmmword_239F12E48, v106, v107);
  v112 = v111;
  v113 = strlen(v111);
  if (v113 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v114 = v113;
  if (v113 >= 0x17)
  {
    v116 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17)
      v116 = v113 | 7;
    v117 = v116 + 1;
    v115 = operator new(v116 + 1);
    *(_QWORD *)&v648[8] = v114;
    *(_QWORD *)&v648[16] = v117 | 0x8000000000000000;
    *(_QWORD *)v648 = v115;
  }
  else
  {
    v648[23] = v113;
    v115 = v648;
    if (!v113)
      goto LABEL_135;
  }
  memmove(v115, v112, v114);
LABEL_135:
  v115[v114] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_239BB4494((uint64_t)&v641, __p[0], (uint64_t *)(a5 + 496));
  v122 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_139;
  v123 = (unint64_t *)((char *)__p[1] + 8);
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (v124)
  {
LABEL_139:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
  std::__shared_weak_count::__release_weak(v122);
  if ((v648[23] & 0x80000000) != 0)
LABEL_140:
    operator delete(*(void **)v648);
LABEL_141:
  __dst[0] = xmmword_239F12E5F;
  __dst[1] = xmmword_239F12E6F;
  *(_QWORD *)((char *)&__dst[1] + 14) = 0x60E0D0A110710;
  v125 = sub_239ABB30C((unsigned __int8 *)__dst, (int8x16_t)xmmword_239F12E5F, xmmword_239F12E6F, v118, v119, v120, v121);
  v126 = strlen((const char *)v125);
  if (v126 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v127 = v126;
  if (v126 >= 0x17)
  {
    v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v129 = v126 | 7;
    v130 = v129 + 1;
    v128 = operator new(v129 + 1);
    *(_QWORD *)&v648[8] = v127;
    *(_QWORD *)&v648[16] = v130 | 0x8000000000000000;
    *(_QWORD *)v648 = v128;
  }
  else
  {
    v648[23] = v126;
    v128 = v648;
    if (!v126)
      goto LABEL_149;
  }
  memmove(v128, v125, v127);
LABEL_149:
  v128[v127] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_239BB4494((uint64_t)&v641, __p[0], (uint64_t *)(a5 + 520));
  v131 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_153;
  v132 = (unint64_t *)((char *)__p[1] + 8);
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (v133)
  {
LABEL_153:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_155;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
  std::__shared_weak_count::__release_weak(v131);
  if ((v648[23] & 0x80000000) != 0)
LABEL_154:
    operator delete(*(void **)v648);
LABEL_155:
  __p[0] = (void *)0x61B0E1D1A0B6FLL;
  LOWORD(__p[1]) = 1;
  v134 = sub_23950FF84((int8x8_t *)__p);
  v135 = strlen((const char *)v134);
  if (v135 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v136 = v135;
  if (v135 >= 0x17)
  {
    v138 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v135 | 7) != 0x17)
      v138 = v135 | 7;
    v139 = v138 + 1;
    v137 = operator new(v138 + 1);
    *((_QWORD *)&__dst[0] + 1) = v136;
    *(_QWORD *)&__dst[1] = v139 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v137;
  }
  else
  {
    BYTE7(__dst[1]) = v135;
    v137 = __dst;
    if (!v135)
      goto LABEL_163;
  }
  memmove(v137, v134, v136);
LABEL_163:
  *((_BYTE *)v137 + v136) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB47DC((uint64_t)&v641, *(const void **)v648, a5 + 544);
  v140 = *(std::__shared_weak_count **)&v648[8];
  if (*(_QWORD *)&v648[8])
  {
    v141 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
      if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        goto LABEL_169;
      goto LABEL_168;
    }
  }
  if (SBYTE7(__dst[1]) < 0)
LABEL_168:
    operator delete(*(void **)&__dst[0]);
LABEL_169:
  sub_239629EF4((uint64_t)&v646, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)&v632, *(const void **)&__dst[0], (uint64_t)&v641);
  v143 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_173;
  v144 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
    v146 = (std::__shared_weak_count *)*((_QWORD *)&v641 + 1);
    if (!*((_QWORD *)&v641 + 1))
      goto LABEL_177;
  }
  else
  {
LABEL_173:
    v146 = (std::__shared_weak_count *)*((_QWORD *)&v641 + 1);
    if (!*((_QWORD *)&v641 + 1))
      goto LABEL_177;
  }
  v147 = (unint64_t *)&v146->__shared_owners_;
  do
    v148 = __ldaxr(v147);
  while (__stlxr(v148 - 1, v147));
  if (v148)
  {
LABEL_177:
    if ((SHIBYTE(v646.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_179;
    goto LABEL_178;
  }
  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
  std::__shared_weak_count::__release_weak(v146);
  if (SHIBYTE(v646.__r_.__value_.__r.__words[2]) < 0)
LABEL_178:
    operator delete(v646.__r_.__value_.__l.__data_);
LABEL_179:
  v641 = xmmword_239F12E85;
  v642 = 4;
  v149 = sub_239A91B18((int8x16_t *)&v641);
  v150 = strlen(v149->i8);
  if (v150 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v151 = (void *)v150;
  if (v150 >= 0x17)
  {
    v153 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v150 | 7) != 0x17)
      v153 = v150 | 7;
    v154 = v153 + 1;
    v152 = operator new(v153 + 1);
    __p[1] = v151;
    v644 = v154 | 0x8000000000000000;
    __p[0] = v152;
    goto LABEL_186;
  }
  HIBYTE(v644) = v150;
  v152 = __p;
  if (v150)
LABEL_186:
    memmove(v152, v149, (size_t)v151);
  *((_BYTE *)v151 + (_QWORD)v152) = 0;
  sub_23962C714(&v633);
  v155 = *(_QWORD **)(a5 + 568);
  if (v155)
  {
    while (1)
    {
      std::to_string(&v646, v155[2]);
      sub_23962C714(&theDict);
      strcpy((char *)&v647, "'IRJxSUFDLT");
      v156 = sub_23958E4C8((uint64_t)&v647);
      v157 = strlen(v156);
      if (v157 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v158 = v157;
      if (v157 >= 0x17)
      {
        v160 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v157 | 7) != 0x17)
          v160 = v157 | 7;
        v161 = v160 + 1;
        v159 = operator new(v160 + 1);
        *((_QWORD *)&__dst[0] + 1) = v158;
        *(_QWORD *)&__dst[1] = v161 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v159;
      }
      else
      {
        BYTE7(__dst[1]) = v157;
        v159 = __dst;
        if (!v157)
          goto LABEL_199;
      }
      memmove(v159, v156, v158);
LABEL_199:
      *((_BYTE *)v159 + v158) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
      sub_239BB4A9C((uint64_t)&theDict, *(const void **)v648, (uint64_t)(v155 + 3));
      v162 = *(std::__shared_weak_count **)&v648[8];
      if (!*(_QWORD *)&v648[8])
        goto LABEL_203;
      v163 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (v164)
      {
LABEL_203:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_205;
LABEL_204:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_205;
      }
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_204;
LABEL_205:
      strcpy(v648, "X6-5\a.941<\a,*9;3+");
      v165 = sub_239A91B18((int8x16_t *)v648);
      v166 = strlen(v165->i8);
      if (v166 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v167 = v166;
      if (v166 >= 0x17)
      {
        v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v166 | 7) != 0x17)
          v169 = v166 | 7;
        v170 = v169 + 1;
        v168 = operator new(v169 + 1);
        *((_QWORD *)&__dst[0] + 1) = v167;
        *(_QWORD *)&__dst[1] = v170 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v168;
      }
      else
      {
        BYTE7(__dst[1]) = v166;
        v168 = __dst;
        if (!v166)
          goto LABEL_213;
      }
      memmove(v168, v165, v167);
LABEL_213:
      *((_BYTE *)v168 + v167) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v647);
      sub_239BB4A9C((uint64_t)&theDict, (const void *)v647, (uint64_t)(v155 + 4));
      v174 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (!*((_QWORD *)&v647 + 1))
        goto LABEL_217;
      v175 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (v176)
      {
LABEL_217:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_219;
LABEL_218:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_219;
      }
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_218;
LABEL_219:
      *(_OWORD *)v648 = xmmword_239F12EA9;
      strcpy(&v648[15], "a|a");
      sub_23958E450((uint64_t)v648, (int32x4_t)xmmword_239F12EA9, v171, v172, v173);
      v178 = v177;
      v179 = strlen(v177);
      if (v179 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v180 = v179;
      if (v179 >= 0x17)
      {
        v182 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v179 | 7) != 0x17)
          v182 = v179 | 7;
        v183 = v182 + 1;
        v181 = operator new(v182 + 1);
        *((_QWORD *)&__dst[0] + 1) = v180;
        *(_QWORD *)&__dst[1] = v183 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v181;
      }
      else
      {
        BYTE7(__dst[1]) = v179;
        v181 = __dst;
        if (!v179)
          goto LABEL_227;
      }
      memmove(v181, v178, v180);
LABEL_227:
      *((_BYTE *)v181 + v180) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v647);
      sub_2397373B0((uint64_t)&theDict, (const void *)v647, (uint64_t)(v155 + 5));
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (!*((_QWORD *)&v647 + 1))
        goto LABEL_231;
      v188 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (v189)
      {
LABEL_231:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_233;
LABEL_232:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_233;
      }
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_232;
LABEL_233:
      v191 = v190;
      v192 = strlen(v190);
      if (v192 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v193 = v192;
      if (v192 >= 0x17)
      {
        v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v192 | 7) != 0x17)
          v195 = v192 | 7;
        v196 = v195 + 1;
        v194 = operator new(v195 + 1);
        *((_QWORD *)&__dst[0] + 1) = v193;
        *(_QWORD *)&__dst[1] = v196 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v194;
      }
      else
      {
        BYTE7(__dst[1]) = v192;
        v194 = __dst;
        if (!v192)
          goto LABEL_241;
      }
      memmove(v194, v191, v193);
LABEL_241:
      *((_BYTE *)v194 + v193) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v647);
      sub_239BD723C((uint64_t)&theDict, (const void *)v647, (uint64_t)(v155 + 6));
      v200 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (!*((_QWORD *)&v647 + 1))
        goto LABEL_245;
      v201 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (v202)
      {
LABEL_245:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_247;
LABEL_246:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_247;
      }
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_246;
LABEL_247:
      strcpy(v648, "-@HIDLCr_H]_BGrH__B_");
      sub_2396EFB50((uint64_t)v648, *(int32x4_t *)"-@HIDLCr_H]_BGrH__B_", v197, v198, v199);
      v204 = v203;
      v205 = strlen(v203);
      if (v205 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v206 = v205;
      if (v205 >= 0x17)
      {
        v208 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v205 | 7) != 0x17)
          v208 = v205 | 7;
        v209 = v208 + 1;
        v207 = operator new(v208 + 1);
        *((_QWORD *)&__dst[0] + 1) = v206;
        *(_QWORD *)&__dst[1] = v209 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v207;
      }
      else
      {
        BYTE7(__dst[1]) = v205;
        v207 = __dst;
        if (!v205)
          goto LABEL_255;
      }
      memmove(v207, v204, v206);
LABEL_255:
      *((_BYTE *)v207 + v206) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v647);
      sub_2397373B0((uint64_t)&theDict, (const void *)v647, (uint64_t)(v155 + 8));
      v213 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (!*((_QWORD *)&v647 + 1))
        goto LABEL_259;
      v214 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (v215)
      {
LABEL_259:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_261;
LABEL_260:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_261;
      }
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_260;
LABEL_261:
      *(_OWORD *)v648 = xmmword_239F12EE6;
      *(_QWORD *)&v648[14] = 0x81508081F250ELL;
      v216 = sub_239A90BEC(v648, (int8x16_t)xmmword_239F12EE6, v210, v211, v212);
      v217 = strlen((const char *)v216);
      if (v217 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v218 = v217;
      if (v217 >= 0x17)
      {
        v220 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v217 | 7) != 0x17)
          v220 = v217 | 7;
        v221 = v220 + 1;
        v219 = operator new(v220 + 1);
        *((_QWORD *)&__dst[0] + 1) = v218;
        *(_QWORD *)&__dst[1] = v221 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v219;
      }
      else
      {
        BYTE7(__dst[1]) = v217;
        v219 = __dst;
        if (!v217)
          goto LABEL_269;
      }
      memmove(v219, v216, v218);
LABEL_269:
      *((_BYTE *)v219 + v218) = 0;
      sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v647);
      sub_2397373B0((uint64_t)&theDict, (const void *)v647, (uint64_t)(v155 + 9));
      v225 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (!*((_QWORD *)&v647 + 1))
        goto LABEL_273;
      v226 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (v227)
      {
LABEL_273:
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_275;
LABEL_274:
        operator delete(*(void **)&__dst[0]);
        goto LABEL_275;
      }
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
      if (SBYTE7(__dst[1]) < 0)
        goto LABEL_274;
LABEL_275:
      __dst[0] = xmmword_239F12EFC;
      *(_OWORD *)((char *)__dst + 9) = *(__int128 *)((char *)&xmmword_239F12EFC + 9);
      sub_2396EFC88((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F12EFC + 9), v222, v223, v224);
      v229 = v228;
      v230 = strlen(v228);
      if (v230 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v231 = v230;
      if (v230 >= 0x17)
      {
        v233 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v230 | 7) != 0x17)
          v233 = v230 | 7;
        v234 = v233 + 1;
        v232 = operator new(v233 + 1);
        *(_QWORD *)&v648[8] = v231;
        *(_QWORD *)&v648[16] = v234 | 0x8000000000000000;
        *(_QWORD *)v648 = v232;
      }
      else
      {
        v648[23] = v230;
        v232 = v648;
        if (!v230)
          goto LABEL_283;
      }
      memmove(v232, v229, v231);
LABEL_283:
      v232[v231] = 0;
      sub_239629EF4((uint64_t)v648, (CFStringRef *)&v647);
      sub_2397373B0((uint64_t)&theDict, (const void *)v647, (uint64_t)(v155 + 10));
      v235 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (*((_QWORD *)&v647 + 1))
      {
        v236 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
        if (!v237)
        {
          ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
          std::__shared_weak_count::__release_weak(v235);
          if ((v648[23] & 0x80000000) == 0)
            goto LABEL_289;
LABEL_288:
          operator delete(*(void **)v648);
          goto LABEL_289;
        }
      }
      if ((v648[23] & 0x80000000) != 0)
        goto LABEL_288;
LABEL_289:
      sub_239629EF4((uint64_t)&v646, (CFStringRef *)__dst);
      sub_239BB7018((uint64_t)&v633, *(const void **)&__dst[0], (uint64_t)&theDict);
      v238 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
      if (!*((_QWORD *)&__dst[0] + 1))
        goto LABEL_293;
      v239 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
        v241 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
        if (*((_QWORD *)&theDict + 1))
        {
LABEL_294:
          v242 = (unint64_t *)&v241->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
      }
      else
      {
LABEL_293:
        v241 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
        if (*((_QWORD *)&theDict + 1))
          goto LABEL_294;
      }
      if (SHIBYTE(v646.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v646.__r_.__value_.__l.__data_);
        v155 = (_QWORD *)*v155;
        if (!v155)
          break;
      }
      else
      {
        v155 = (_QWORD *)*v155;
        if (!v155)
          break;
      }
    }
  }
  sub_239629EF4((uint64_t)__p, (CFStringRef *)__dst);
  v16 = (uint64_t)v629;
  sub_239BB7018((uint64_t)&v632, *(const void **)&__dst[0], (uint64_t)&v633);
  v245 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_320;
  v246 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (!v247)
  {
    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
    std::__shared_weak_count::__release_weak(v245);
    v248 = (std::__shared_weak_count *)*((_QWORD *)&v633 + 1);
    if (!*((_QWORD *)&v633 + 1))
      goto LABEL_324;
  }
  else
  {
LABEL_320:
    v248 = (std::__shared_weak_count *)*((_QWORD *)&v633 + 1);
    if (!*((_QWORD *)&v633 + 1))
      goto LABEL_324;
  }
  v249 = (unint64_t *)&v248->__shared_owners_;
  do
    v250 = __ldaxr(v249);
  while (__stlxr(v250 - 1, v249));
  if (v250)
  {
LABEL_324:
    if ((SHIBYTE(v644) & 0x80000000) == 0)
      goto LABEL_326;
    goto LABEL_325;
  }
  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
  std::__shared_weak_count::__release_weak(v248);
  if (SHIBYTE(v644) < 0)
LABEL_325:
    operator delete(__p[0]);
LABEL_326:
  strcpy((char *)__p, "0BE^DY]UoY^V_");
  sub_23971A32C((uint64_t)__p, v244);
  v252 = v251;
  v253 = strlen(v251);
  if (v253 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v254 = v253;
  if (v253 >= 0x17)
  {
    v256 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v253 | 7) != 0x17)
      v256 = v253 | 7;
    v257 = v256 + 1;
    v255 = operator new(v256 + 1);
    *((_QWORD *)&__dst[0] + 1) = v254;
    *(_QWORD *)&__dst[1] = v257 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v255;
  }
  else
  {
    BYTE7(__dst[1]) = v253;
    v255 = __dst;
    if (!v253)
      goto LABEL_334;
  }
  memmove(v255, v252, v254);
LABEL_334:
  *((_BYTE *)v255 + v254) = 0;
  sub_239BCA2E4((uint64_t)&v646, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a5 + 592));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018((uint64_t)&v632, *(const void **)v648, (uint64_t)&v646);
  v258 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_338;
  v259 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v260 = __ldaxr(v259);
  while (__stlxr(v260 - 1, v259));
  if (!v260)
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    v261 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_342;
  }
  else
  {
LABEL_338:
    v261 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_342;
  }
  v262 = (unint64_t *)&v261->__shared_owners_;
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (v263)
  {
LABEL_342:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_344;
    goto LABEL_343;
  }
  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
  std::__shared_weak_count::__release_weak(v261);
  if (SBYTE7(__dst[1]) < 0)
LABEL_343:
    operator delete(*(void **)&__dst[0]);
LABEL_344:
  __p[0] = (void *)0x2A261A2120363045;
  strcpy((char *)&__p[1], "+#,\"");
  v264 = sub_239510ECC((uint64_t)__p);
  v265 = strlen(v264);
  if (v265 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v266 = v265;
  if (v265 >= 0x17)
  {
    v268 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v265 | 7) != 0x17)
      v268 = v265 | 7;
    v269 = v268 + 1;
    v267 = operator new(v268 + 1);
    *((_QWORD *)&__dst[0] + 1) = v266;
    *(_QWORD *)&__dst[1] = v269 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v267;
  }
  else
  {
    BYTE7(__dst[1]) = v265;
    v267 = __dst;
    if (!v265)
      goto LABEL_352;
  }
  memmove(v267, v264, v266);
LABEL_352:
  *((_BYTE *)v267 + v266) = 0;
  sub_239BB9338(&v646, a5 + 664);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018((uint64_t)&v632, *(const void **)v648, (uint64_t)&v646);
  v270 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_356;
  v271 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v272 = __ldaxr(v271);
  while (__stlxr(v272 - 1, v271));
  if (!v272)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
    v273 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_360;
  }
  else
  {
LABEL_356:
    v273 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_360;
  }
  v274 = (unint64_t *)&v273->__shared_owners_;
  do
    v275 = __ldaxr(v274);
  while (__stlxr(v275 - 1, v274));
  if (v275)
  {
LABEL_360:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_362;
    goto LABEL_361;
  }
  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
  std::__shared_weak_count::__release_weak(v273);
  if (SBYTE7(__dst[1]) < 0)
LABEL_361:
    operator delete(*(void **)&__dst[0]);
LABEL_362:
  sub_239629EF4((uint64_t)value, (CFStringRef *)__dst);
  sub_239BB7018((uint64_t)v629, *(const void **)&__dst[0], (uint64_t)&v632);
  v276 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_366;
  v277 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v278 = __ldaxr(v277);
  while (__stlxr(v278 - 1, v277));
  if (!v278)
  {
    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
    std::__shared_weak_count::__release_weak(v276);
    v279 = (std::__shared_weak_count *)*((_QWORD *)&v632 + 1);
    if (!*((_QWORD *)&v632 + 1))
      goto LABEL_370;
  }
  else
  {
LABEL_366:
    v279 = (std::__shared_weak_count *)*((_QWORD *)&v632 + 1);
    if (!*((_QWORD *)&v632 + 1))
      goto LABEL_370;
  }
  v280 = (unint64_t *)&v279->__shared_owners_;
  do
    v281 = __ldaxr(v280);
  while (__stlxr(v281 - 1, v280));
  if (v281)
  {
LABEL_370:
    if ((SHIBYTE(v640) & 0x80000000) == 0)
      goto LABEL_410;
    goto LABEL_371;
  }
  ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
  std::__shared_weak_count::__release_weak(v279);
  if (SHIBYTE(v640) < 0)
LABEL_371:
    operator delete(value[0]);
LABEL_410:
  if (!*(_BYTE *)(a6 + 584))
    goto LABEL_428;
  strcpy((char *)__p, ":H_JUHNeIV[W");
  v282 = sub_239510ECC((uint64_t)__p);
  v283 = strlen(v282);
  if (v283 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v284 = v283;
  if (v283 >= 0x17)
  {
    v286 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v283 | 7) != 0x17)
      v286 = v283 | 7;
    v287 = v286 + 1;
    v285 = operator new(v286 + 1);
    *((_QWORD *)&__dst[0] + 1) = v284;
    *(_QWORD *)&__dst[1] = v287 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v285;
  }
  else
  {
    BYTE7(__dst[1]) = v283;
    v285 = __dst;
    if (!v283)
      goto LABEL_419;
  }
  memmove(v285, v282, v284);
LABEL_419:
  *((_BYTE *)v285 + v284) = 0;
  sub_239BD845C(&v646, a6);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018(v16, *(const void **)v648, (uint64_t)&v646);
  v288 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_423;
  v289 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v290 = __ldaxr(v289);
  while (__stlxr(v290 - 1, v289));
  if (!v290)
  {
    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
    std::__shared_weak_count::__release_weak(v288);
    v291 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_427;
  }
  else
  {
LABEL_423:
    v291 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_427;
  }
  v292 = (unint64_t *)&v291->__shared_owners_;
  do
    v293 = __ldaxr(v292);
  while (__stlxr(v293 - 1, v292));
  if (v293)
  {
LABEL_427:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_428;
    goto LABEL_524;
  }
  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
  std::__shared_weak_count::__release_weak(v291);
  if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
  {
LABEL_428:
    if (!*(_BYTE *)(a7 + 104))
      goto LABEL_541;
    goto LABEL_429;
  }
LABEL_524:
  operator delete(*(void **)&__dst[0]);
  if (!*(_BYTE *)(a7 + 104))
    goto LABEL_541;
LABEL_429:
  *(_OWORD *)value = xmmword_239F0C320;
  sub_23950F8E4((uint64_t)value);
  v295 = v294;
  v296 = strlen(v294);
  if (v296 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v297 = v296;
  if (v296 >= 0x17)
  {
    v299 = (v296 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v296 | 7) != 0x17)
      v299 = v296 | 7;
    v300 = v299 + 1;
    v298 = operator new(v299 + 1);
    *(_QWORD *)&v648[8] = v297;
    *(_QWORD *)&v648[16] = v300 | 0x8000000000000000;
    *(_QWORD *)v648 = v298;
    goto LABEL_436;
  }
  v648[23] = v296;
  v298 = v648;
  if (v296)
LABEL_436:
    memmove(v298, v295, v297);
  v298[v297] = 0;
  sub_23962C714(&v641);
  __p[0] = (void *)0x7870614E7C647F11;
  strcpy((char *)&__p[1], "cb");
  v301 = (const char *)sub_23958E518((uint64_t)__p);
  v302 = strlen(v301);
  if (v302 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v303 = v302;
  if (v302 >= 0x17)
  {
    v305 = (v302 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v302 | 7) != 0x17)
      v305 = v302 | 7;
    v306 = v305 + 1;
    v304 = operator new(v305 + 1);
    *((_QWORD *)&__dst[0] + 1) = v303;
    *(_QWORD *)&__dst[1] = v306 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v304;
  }
  else
  {
    BYTE7(__dst[1]) = v302;
    v304 = __dst;
    if (!v302)
      goto LABEL_445;
  }
  memmove(v304, v301, v303);
LABEL_445:
  *((_BYTE *)v304 + v303) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v646);
  sub_239BB4A9C((uint64_t)&v641, v646.__r_.__value_.__l.__data_, a7);
  v307 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
  if (!v646.__r_.__value_.__l.__size_)
    goto LABEL_449;
  v308 = (unint64_t *)(v646.__r_.__value_.__l.__size_ + 8);
  do
    v309 = __ldaxr(v308);
  while (__stlxr(v309 - 1, v308));
  if (v309)
  {
LABEL_449:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_451;
    goto LABEL_450;
  }
  ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
  std::__shared_weak_count::__release_weak(v307);
  if (SBYTE7(__dst[1]) < 0)
LABEL_450:
    operator delete(*(void **)&__dst[0]);
LABEL_451:
  *(_OWORD *)__p = xmmword_239F0C330;
  sub_23950F8E4((uint64_t)__p);
  v311 = v310;
  v312 = strlen(v310);
  if (v312 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v313 = v312;
  if (v312 >= 0x17)
  {
    v315 = (v312 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v312 | 7) != 0x17)
      v315 = v312 | 7;
    v316 = v315 + 1;
    v314 = operator new(v315 + 1);
    *((_QWORD *)&__dst[0] + 1) = v313;
    *(_QWORD *)&__dst[1] = v316 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v314;
  }
  else
  {
    BYTE7(__dst[1]) = v312;
    v314 = __dst;
    if (!v312)
      goto LABEL_459;
  }
  memmove(v314, v311, v313);
LABEL_459:
  *((_BYTE *)v314 + v313) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v646);
  sub_239BB4A9C((uint64_t)&v641, v646.__r_.__value_.__l.__data_, a7 + 8);
  v317 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
  if (!v646.__r_.__value_.__l.__size_)
    goto LABEL_463;
  v318 = (unint64_t *)(v646.__r_.__value_.__l.__size_ + 8);
  do
    v319 = __ldaxr(v318);
  while (__stlxr(v319 - 1, v318));
  if (v319)
  {
LABEL_463:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_465;
    goto LABEL_464;
  }
  ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
  std::__shared_weak_count::__release_weak(v317);
  if (SBYTE7(__dst[1]) < 0)
LABEL_464:
    operator delete(*(void **)&__dst[0]);
LABEL_465:
  *(_OWORD *)&v646.__r_.__value_.__l.__data_ = xmmword_239F13143;
  LOWORD(v646.__r_.__value_.__r.__words[2]) = 127;
  v320 = sub_239A91B18((int8x16_t *)&v646);
  v321 = strlen(v320->i8);
  if (v321 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v322 = v321;
  if (v321 >= 0x17)
  {
    v324 = (v321 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v321 | 7) != 0x17)
      v324 = v321 | 7;
    v325 = v324 + 1;
    v323 = operator new(v324 + 1);
    *((_QWORD *)&__dst[0] + 1) = v322;
    *(_QWORD *)&__dst[1] = v325 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v323;
  }
  else
  {
    BYTE7(__dst[1]) = v321;
    v323 = __dst;
    if (!v321)
      goto LABEL_473;
  }
  memmove(v323, v320, v322);
LABEL_473:
  *((_BYTE *)v323 + v322) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)&v641, __p[0], a7 + 16);
  v326 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_477;
  v327 = (unint64_t *)((char *)__p[1] + 8);
  do
    v328 = __ldaxr(v327);
  while (__stlxr(v328 - 1, v327));
  if (v328)
  {
LABEL_477:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_479;
    goto LABEL_478;
  }
  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
  std::__shared_weak_count::__release_weak(v326);
  if (SBYTE7(__dst[1]) < 0)
LABEL_478:
    operator delete(*(void **)&__dst[0]);
LABEL_479:
  strcpy((char *)&v646, "D +3*7%)4(!\x1B6%0-+");
  v329 = sub_239A91B18((int8x16_t *)&v646);
  v330 = strlen(v329->i8);
  if (v330 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v331 = v330;
  if (v330 >= 0x17)
  {
    v333 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v330 | 7) != 0x17)
      v333 = v330 | 7;
    v334 = v333 + 1;
    v332 = operator new(v333 + 1);
    *((_QWORD *)&__dst[0] + 1) = v331;
    *(_QWORD *)&__dst[1] = v334 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v332;
  }
  else
  {
    BYTE7(__dst[1]) = v330;
    v332 = __dst;
    if (!v330)
      goto LABEL_487;
  }
  memmove(v332, v329, v331);
LABEL_487:
  *((_BYTE *)v332 + v331) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB47DC((uint64_t)&v641, __p[0], a7 + 24);
  v336 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_491;
  v337 = (unint64_t *)((char *)__p[1] + 8);
  do
    v338 = __ldaxr(v337);
  while (__stlxr(v338 - 1, v337));
  if (v338)
  {
LABEL_491:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_493;
    goto LABEL_492;
  }
  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
  std::__shared_weak_count::__release_weak(v336);
  if (SBYTE7(__dst[1]) < 0)
LABEL_492:
    operator delete(*(void **)&__dst[0]);
LABEL_493:
  strcpy((char *)&v647, "1CD_EX\\TnX_W^");
  sub_23971A32C((uint64_t)&v647, v335);
  v340 = v339;
  v341 = strlen(v339);
  if (v341 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v342 = v341;
  if (v341 >= 0x17)
  {
    v344 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v341 | 7) != 0x17)
      v344 = v341 | 7;
    v345 = v344 + 1;
    v343 = operator new(v344 + 1);
    *((_QWORD *)&__dst[0] + 1) = v342;
    *(_QWORD *)&__dst[1] = v345 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v343;
  }
  else
  {
    BYTE7(__dst[1]) = v341;
    v343 = __dst;
    if (!v341)
      goto LABEL_501;
  }
  memmove(v343, v340, v342);
LABEL_501:
  *((_BYTE *)v343 + v342) = 0;
  sub_239BCA2E4((uint64_t)__p, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a7 + 32));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v646);
  sub_239BB7018((uint64_t)&v641, v646.__r_.__value_.__l.__data_, (uint64_t)__p);
  v346 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
  if (!v646.__r_.__value_.__l.__size_)
    goto LABEL_505;
  v347 = (unint64_t *)(v646.__r_.__value_.__l.__size_ + 8);
  do
    v348 = __ldaxr(v347);
  while (__stlxr(v348 - 1, v347));
  if (!v348)
  {
    ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
    std::__shared_weak_count::__release_weak(v346);
    v349 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_509;
  }
  else
  {
LABEL_505:
    v349 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_509;
  }
  v350 = (unint64_t *)&v349->__shared_owners_;
  do
    v351 = __ldaxr(v350);
  while (__stlxr(v351 - 1, v350));
  if (v351)
  {
LABEL_509:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_511;
    goto LABEL_510;
  }
  ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
  std::__shared_weak_count::__release_weak(v349);
  if (SBYTE7(__dst[1]) < 0)
LABEL_510:
    operator delete(*(void **)&__dst[0]);
LABEL_511:
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__dst);
  sub_239BB7018(v16, *(const void **)&__dst[0], (uint64_t)&v641);
  v352 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_515;
  v353 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v354 = __ldaxr(v353);
  while (__stlxr(v354 - 1, v353));
  if (!v354)
  {
    ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
    std::__shared_weak_count::__release_weak(v352);
    v355 = (std::__shared_weak_count *)*((_QWORD *)&v641 + 1);
    if (!*((_QWORD *)&v641 + 1))
      goto LABEL_519;
  }
  else
  {
LABEL_515:
    v355 = (std::__shared_weak_count *)*((_QWORD *)&v641 + 1);
    if (!*((_QWORD *)&v641 + 1))
      goto LABEL_519;
  }
  v356 = (unint64_t *)&v355->__shared_owners_;
  do
    v357 = __ldaxr(v356);
  while (__stlxr(v357 - 1, v356));
  if (v357)
  {
LABEL_519:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_541;
    goto LABEL_520;
  }
  ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
  std::__shared_weak_count::__release_weak(v355);
  if ((v648[23] & 0x80000000) != 0)
LABEL_520:
    operator delete(*(void **)v648);
LABEL_541:
  if (!*(_BYTE *)(a8 + 864))
    goto LABEL_560;
  strcpy((char *)__p, "/]J_@][pBY\\");
  v358 = sub_23958E4C8((uint64_t)__p);
  v359 = strlen(v358);
  if (v359 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v360 = v359;
  if (v359 >= 0x17)
  {
    v362 = (v359 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v359 | 7) != 0x17)
      v362 = v359 | 7;
    v363 = v362 + 1;
    v361 = operator new(v362 + 1);
    *((_QWORD *)&__dst[0] + 1) = v360;
    *(_QWORD *)&__dst[1] = v363 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v361;
  }
  else
  {
    BYTE7(__dst[1]) = v359;
    v361 = __dst;
    if (!v359)
      goto LABEL_550;
  }
  memmove(v361, v358, v360);
LABEL_550:
  *((_BYTE *)v361 + v360) = 0;
  sub_239BDBC70(&v646, a8);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018(v16, *(const void **)v648, (uint64_t)&v646);
  v364 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_554;
  v365 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v366 = __ldaxr(v365);
  while (__stlxr(v366 - 1, v365));
  if (!v366)
  {
    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
    std::__shared_weak_count::__release_weak(v364);
    v367 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_558;
  }
  else
  {
LABEL_554:
    v367 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_558;
  }
  v368 = (unint64_t *)&v367->__shared_owners_;
  do
    v369 = __ldaxr(v368);
  while (__stlxr(v369 - 1, v368));
  if (v369)
  {
LABEL_558:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_560;
    goto LABEL_559;
  }
  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
  std::__shared_weak_count::__release_weak(v367);
  if (SBYTE7(__dst[1]) < 0)
LABEL_559:
    operator delete(*(void **)&__dst[0]);
LABEL_560:
  if (!*(_BYTE *)(a9 + 392))
    goto LABEL_915;
  v647 = xmmword_239F0C340;
  sub_23950F8E4((uint64_t)&v647);
  v371 = v370;
  v372 = strlen(v370);
  if (v372 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v373 = v372;
  if (v372 >= 0x17)
  {
    v375 = (v372 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v372 | 7) != 0x17)
      v375 = v372 | 7;
    v376 = v375 + 1;
    v374 = operator new(v375 + 1);
    v646.__r_.__value_.__l.__size_ = v373;
    v646.__r_.__value_.__r.__words[2] = v376 | 0x8000000000000000;
    v646.__r_.__value_.__r.__words[0] = (std::string::size_type)v374;
    goto LABEL_568;
  }
  *((_BYTE *)&v646.__r_.__value_.__s + 23) = v372;
  v374 = &v646;
  if (v372)
LABEL_568:
    memmove(v374, v371, v373);
  *((_BYTE *)v374 + v373) = 0;
  sub_23962C714(&theDict);
  v377 = *(_QWORD *)(a9 + 88);
  *(_QWORD *)&v633 = *(_QWORD *)(a9 + 80);
  *(_QWORD *)&v632 = v377;
  v378 = *(_QWORD *)(a9 + 96);
  v636 = *(_QWORD *)(a9 + 112);
  v379.i64[0] = v636;
  v637 = v378;
  strcpy((char *)__p, "!OTL~QU~HOQTU");
  sub_23971A32C((uint64_t)__p, v379);
  v381 = v380;
  v382 = strlen(v380);
  if (v382 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v383 = v382;
  if (v382 >= 0x17)
  {
    v385 = (v382 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v382 | 7) != 0x17)
      v385 = v382 | 7;
    v386 = v385 + 1;
    v384 = operator new(v385 + 1);
    *((_QWORD *)&__dst[0] + 1) = v383;
    *(_QWORD *)&__dst[1] = v386 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v384;
  }
  else
  {
    BYTE7(__dst[1]) = v382;
    v384 = __dst;
    if (!v382)
      goto LABEL_577;
  }
  memmove(v384, v381, v383);
LABEL_577:
  *((_BYTE *)v384 + v383) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB4A9C((uint64_t)&theDict, *(const void **)v648, a9);
  v387 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_581;
  v388 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v389 = __ldaxr(v388);
  while (__stlxr(v389 - 1, v388));
  if (v389)
  {
LABEL_581:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_583;
    goto LABEL_582;
  }
  ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
  std::__shared_weak_count::__release_weak(v387);
  if (SBYTE7(__dst[1]) < 0)
LABEL_582:
    operator delete(*(void **)&__dst[0]);
LABEL_583:
  __p[0] = (void *)0x677C7A51637B600ELL;
  LODWORD(__p[1]) = 8022609;
  v390 = sub_23958E4C8((uint64_t)__p);
  v391 = strlen(v390);
  if (v391 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v392 = v391;
  if (v391 >= 0x17)
  {
    v394 = (v391 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v391 | 7) != 0x17)
      v394 = v391 | 7;
    v395 = v394 + 1;
    v393 = operator new(v394 + 1);
    *((_QWORD *)&__dst[0] + 1) = v392;
    *(_QWORD *)&__dst[1] = v395 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v393;
  }
  else
  {
    BYTE7(__dst[1]) = v391;
    v393 = __dst;
    if (!v391)
      goto LABEL_591;
  }
  memmove(v393, v390, v392);
LABEL_591:
  *((_BYTE *)v393 + v392) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB4A9C((uint64_t)&theDict, *(const void **)v648, a9 + 8);
  v396 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_595;
  v397 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v398 = __ldaxr(v397);
  while (__stlxr(v398 - 1, v397));
  if (v398)
  {
LABEL_595:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_597;
    goto LABEL_596;
  }
  ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
  std::__shared_weak_count::__release_weak(v396);
  if (SBYTE7(__dst[1]) < 0)
LABEL_596:
    operator delete(*(void **)&__dst[0]);
LABEL_597:
  __p[0] = (void *)0x1E091A330119026CLL;
  BYTE4(__p[1]) = 0;
  LODWORD(__p[1]) = 403190552;
  v399 = sub_239510ECC((uint64_t)__p);
  v400 = strlen(v399);
  if (v400 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v401 = v400;
  if (v400 >= 0x17)
  {
    v403 = (v400 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v400 | 7) != 0x17)
      v403 = v400 | 7;
    v404 = v403 + 1;
    v402 = operator new(v403 + 1);
    *((_QWORD *)&__dst[0] + 1) = v401;
    *(_QWORD *)&__dst[1] = v404 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v402;
  }
  else
  {
    BYTE7(__dst[1]) = v400;
    v402 = __dst;
    if (!v400)
      goto LABEL_605;
  }
  memmove(v402, v399, v401);
LABEL_605:
  *((_BYTE *)v402 + v401) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB4A9C((uint64_t)&theDict, *(const void **)v648, a9 + 16);
  v405 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_609;
  v406 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v407 = __ldaxr(v406);
  while (__stlxr(v407 - 1, v406));
  if (v407)
  {
LABEL_609:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_611;
    goto LABEL_610;
  }
  ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
  std::__shared_weak_count::__release_weak(v405);
  if (SBYTE7(__dst[1]) < 0)
LABEL_610:
    operator delete(*(void **)&__dst[0]);
LABEL_611:
  *(_OWORD *)v648 = xmmword_239F1352A;
  v648[16] = 0;
  sub_2396EFA24((uint64_t)v648);
  v409 = v408;
  v410 = strlen(v408);
  if (v410 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v411 = v410;
  if (v410 >= 0x17)
  {
    v413 = (v410 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v410 | 7) != 0x17)
      v413 = v410 | 7;
    v414 = v413 + 1;
    v412 = operator new(v413 + 1);
    *((_QWORD *)&__dst[0] + 1) = v411;
    *(_QWORD *)&__dst[1] = v414 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v412;
  }
  else
  {
    BYTE7(__dst[1]) = v410;
    v412 = __dst;
    if (!v410)
      goto LABEL_619;
  }
  memmove(v412, v409, v411);
LABEL_619:
  *((_BYTE *)v412 + v411) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&theDict, __p[0], (_BYTE *)(a9 + 24));
  v415 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_623;
  v416 = (unint64_t *)((char *)__p[1] + 8);
  do
    v417 = __ldaxr(v416);
  while (__stlxr(v417 - 1, v416));
  if (v417)
  {
LABEL_623:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_625;
    goto LABEL_624;
  }
  ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
  std::__shared_weak_count::__release_weak(v415);
  if (SBYTE7(__dst[1]) < 0)
LABEL_624:
    operator delete(*(void **)&__dst[0]);
LABEL_625:
  *(_OWORD *)__p = xmmword_239F0C350;
  sub_23950F8E4((uint64_t)__p);
  v419 = v418;
  v420 = strlen(v418);
  if (v420 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v421 = v420;
  if (v420 >= 0x17)
  {
    v423 = (v420 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v420 | 7) != 0x17)
      v423 = v420 | 7;
    v424 = v423 + 1;
    v422 = operator new(v423 + 1);
    *((_QWORD *)&__dst[0] + 1) = v421;
    *(_QWORD *)&__dst[1] = v424 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v422;
  }
  else
  {
    BYTE7(__dst[1]) = v420;
    v422 = __dst;
    if (!v420)
      goto LABEL_633;
  }
  memmove(v422, v419, v421);
LABEL_633:
  *((_BYTE *)v422 + v421) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB4A9C((uint64_t)&theDict, *(const void **)v648, a9 + 32);
  v425 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_637;
  v426 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v427 = __ldaxr(v426);
  while (__stlxr(v427 - 1, v426));
  if (v427)
  {
LABEL_637:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_639;
    goto LABEL_638;
  }
  ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
  std::__shared_weak_count::__release_weak(v425);
  if (SBYTE7(__dst[1]) < 0)
LABEL_638:
    operator delete(*(void **)&__dst[0]);
LABEL_639:
  strcpy(v648, "R<'?\r$7 &\r 74;<7");
  sub_2396EFA24((uint64_t)v648);
  v429 = v428;
  v430 = strlen(v428);
  if (v430 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v431 = v430;
  if (v430 >= 0x17)
  {
    v433 = (v430 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v430 | 7) != 0x17)
      v433 = v430 | 7;
    v434 = v433 + 1;
    v432 = operator new(v433 + 1);
    *((_QWORD *)&__dst[0] + 1) = v431;
    *(_QWORD *)&__dst[1] = v434 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v432;
  }
  else
  {
    BYTE7(__dst[1]) = v430;
    v432 = __dst;
    if (!v430)
      goto LABEL_647;
  }
  memmove(v432, v429, v431);
LABEL_647:
  *((_BYTE *)v432 + v431) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)&theDict, __p[0], a9 + 40);
  v435 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_651;
  v436 = (unint64_t *)((char *)__p[1] + 8);
  do
    v437 = __ldaxr(v436);
  while (__stlxr(v437 - 1, v436));
  if (v437)
  {
LABEL_651:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_653;
    goto LABEL_652;
  }
  ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
  std::__shared_weak_count::__release_weak(v435);
  if (SBYTE7(__dst[1]) < 0)
LABEL_652:
    operator delete(*(void **)&__dst[0]);
LABEL_653:
  *(_OWORD *)v648 = xmmword_239F1354C;
  *(_WORD *)&v648[16] = 127;
  v438 = sub_239A91B18((int8x16_t *)v648);
  v439 = strlen(v438->i8);
  if (v439 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v440 = v439;
  if (v439 >= 0x17)
  {
    v442 = (v439 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v439 | 7) != 0x17)
      v442 = v439 | 7;
    v443 = v442 + 1;
    v441 = operator new(v442 + 1);
    *((_QWORD *)&__dst[0] + 1) = v440;
    *(_QWORD *)&__dst[1] = v443 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v441;
  }
  else
  {
    BYTE7(__dst[1]) = v439;
    v441 = __dst;
    if (!v439)
      goto LABEL_661;
  }
  memmove(v441, v438, v440);
LABEL_661:
  *((_BYTE *)v441 + v440) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)&theDict, __p[0], a9 + 48);
  v447 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_665;
  v448 = (unint64_t *)((char *)__p[1] + 8);
  do
    v449 = __ldaxr(v448);
  while (__stlxr(v449 - 1, v448));
  if (v449)
  {
LABEL_665:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_667;
    goto LABEL_666;
  }
  ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
  std::__shared_weak_count::__release_weak(v447);
  if (SBYTE7(__dst[1]) < 0)
LABEL_666:
    operator delete(*(void **)&__dst[0]);
LABEL_667:
  strcpy((char *)__dst, ":TOWeYUTT_YN_^eYUWJUT_TNI");
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)"YN_^eYUWJUT_TNI", v444, v445, v446);
  v451 = v450;
  v452 = strlen(v450);
  if (v452 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v453 = v452;
  if (v452 >= 0x17)
  {
    v455 = (v452 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v452 | 7) != 0x17)
      v455 = v452 | 7;
    v456 = v455 + 1;
    v454 = operator new(v455 + 1);
    *(_QWORD *)&v648[8] = v453;
    *(_QWORD *)&v648[16] = v456 | 0x8000000000000000;
    *(_QWORD *)v648 = v454;
  }
  else
  {
    v648[23] = v452;
    v454 = v648;
    if (!v452)
      goto LABEL_675;
  }
  memmove(v454, v451, v453);
LABEL_675:
  v454[v453] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_239BB4A9C((uint64_t)&theDict, __p[0], a9 + 56);
  v457 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_679;
  v458 = (unint64_t *)((char *)__p[1] + 8);
  do
    v459 = __ldaxr(v458);
  while (__stlxr(v459 - 1, v458));
  if (v459)
  {
LABEL_679:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_681;
    goto LABEL_680;
  }
  ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
  std::__shared_weak_count::__release_weak(v457);
  if ((v648[23] & 0x80000000) != 0)
LABEL_680:
    operator delete(*(void **)v648);
LABEL_681:
  *(_OWORD *)v648 = xmmword_239F13578;
  v648[16] = 0;
  sub_2396EFA24((uint64_t)v648);
  v461 = v460;
  v462 = strlen(v460);
  if (v462 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v463 = v462;
  if (v462 >= 0x17)
  {
    v465 = (v462 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v462 | 7) != 0x17)
      v465 = v462 | 7;
    v466 = v465 + 1;
    v464 = operator new(v465 + 1);
    *((_QWORD *)&__dst[0] + 1) = v463;
    *(_QWORD *)&__dst[1] = v466 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v464;
  }
  else
  {
    BYTE7(__dst[1]) = v462;
    v464 = __dst;
    if (!v462)
      goto LABEL_689;
  }
  memmove(v464, v461, v463);
LABEL_689:
  *((_BYTE *)v464 + v463) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2396B4EAC((uint64_t)&theDict, __p[0], (_BYTE *)(a9 + 64));
  v467 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_693;
  v468 = (unint64_t *)((char *)__p[1] + 8);
  do
    v469 = __ldaxr(v468);
  while (__stlxr(v469 - 1, v468));
  if (v469)
  {
LABEL_693:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_695;
    goto LABEL_694;
  }
  ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
  std::__shared_weak_count::__release_weak(v467);
  if (SBYTE7(__dst[1]) < 0)
LABEL_694:
    operator delete(*(void **)&__dst[0]);
LABEL_695:
  strcpy(v635, "@3):%");
  v470 = sub_239A90C78(v635);
  v471 = strlen(v470);
  if (v471 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v472 = v471;
  if (v471 >= 0x17)
  {
    v474 = (v471 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v471 | 7) != 0x17)
      v474 = v471 | 7;
    v475 = v474 + 1;
    v473 = operator new(v474 + 1);
    *((_QWORD *)&__dst[0] + 1) = v472;
    *(_QWORD *)&__dst[1] = v475 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v473;
  }
  else
  {
    BYTE7(__dst[1]) = v471;
    v473 = __dst;
    if (!v471)
      goto LABEL_703;
  }
  memmove(v473, v470, v472);
LABEL_703:
  *((_BYTE *)v473 + v472) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v641);
  v476 = (const void *)v641;
  v477 = theDict;
  if (!*((_QWORD *)&theDict + 1))
    goto LABEL_708;
  v478 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
  do
    v479 = __ldxr(v478);
  while (__stxr(v479 + 1, v478));
  do
    v480 = __ldaxr(v478);
  while (__stlxr(v480 - 1, v478));
  if (!v480)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v477 + 1) + 16))(*((_QWORD *)&v477 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v477 + 1));
    if (!(_QWORD)v477)
      goto LABEL_807;
  }
  else
  {
LABEL_708:
    if (!(_QWORD)v477)
      goto LABEL_807;
  }
  if (sub_23962C8DC((const __CFDictionary *)theDict, v476))
    goto LABEL_807;
  sub_23962BDF8((std::__shared_weak_count_vtbl **)v648);
  v481 = *(_OWORD *)v648;
  if (*(_QWORD *)&v648[8])
  {
    v482 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
    do
      v483 = __ldxr(v482);
    while (__stxr(v483 + 1, v482));
    do
      v484 = __ldaxr(v482);
    while (__stlxr(v484 - 1, v482));
    if (!v484)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v481 + 1) + 16))(*((_QWORD *)&v481 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v481 + 1));
    }
  }
  if ((_QWORD)v481)
  {
    sub_239629B4C(__p, a9 + 68);
    v486 = __p[0];
    v485 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v487 = (unint64_t *)((char *)__p[1] + 8);
      do
        v488 = __ldxr(v487);
      while (__stxr(v488 + 1, v487));
      do
        v489 = __ldaxr(v487);
      while (__stlxr(v489 - 1, v487));
      if (!v489)
      {
        ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
        std::__shared_weak_count::__release_weak(v485);
      }
    }
    if (v486)
    {
      j__CFArrayAppendValue(*(CFMutableArrayRef *)v648, __p[0]);
      v490 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_756;
    }
    else
    {
      value[0] = 0;
      value[1] = 0;
      v490 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_756;
    }
    v492 = (unint64_t *)&v490->__shared_owners_;
    do
      v493 = __ldaxr(v492);
    while (__stlxr(v493 - 1, v492));
    if (!v493)
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
LABEL_756:
    if (!v486)
      goto LABEL_789;
    sub_239629B4C(__p, a9 + 72);
    v495 = __p[0];
    v494 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v496 = (unint64_t *)((char *)__p[1] + 8);
      do
        v497 = __ldxr(v496);
      while (__stxr(v497 + 1, v496));
      do
        v498 = __ldaxr(v496);
      while (__stlxr(v498 - 1, v496));
      if (!v498)
      {
        ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
        std::__shared_weak_count::__release_weak(v494);
      }
    }
    if (v495)
    {
      j__CFArrayAppendValue(*(CFMutableArrayRef *)v648, __p[0]);
      v499 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
      {
LABEL_771:
        if (!v495)
          goto LABEL_789;
        sub_239629B4C(__p, a9 + 76);
        v503 = __p[0];
        v502 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v504 = (unint64_t *)((char *)__p[1] + 8);
          do
            v505 = __ldxr(v504);
          while (__stxr(v505 + 1, v504));
          do
            v506 = __ldaxr(v504);
          while (__stlxr(v506 - 1, v504));
          if (!v506)
          {
            ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
            std::__shared_weak_count::__release_weak(v502);
          }
        }
        if (v503)
        {
          j__CFArrayAppendValue(*(CFMutableArrayRef *)v648, __p[0]);
        }
        else
        {
          value[0] = 0;
          value[1] = 0;
        }
        v507 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v508 = (unint64_t *)((char *)__p[1] + 8);
          do
            v509 = __ldaxr(v508);
          while (__stlxr(v509 - 1, v508));
          if (!v509)
          {
            ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
            std::__shared_weak_count::__release_weak(v507);
          }
        }
        if (!v503)
          goto LABEL_789;
        *(_OWORD *)value = *(_OWORD *)v648;
        v491 = (void **)v648;
        goto LABEL_788;
      }
    }
    else
    {
      value[0] = 0;
      value[1] = 0;
      v499 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_771;
    }
    v500 = (unint64_t *)&v499->__shared_owners_;
    do
      v501 = __ldaxr(v500);
    while (__stlxr(v501 - 1, v500));
    if (!v501)
    {
      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
      std::__shared_weak_count::__release_weak(v499);
    }
    goto LABEL_771;
  }
  v491 = value;
LABEL_788:
  *v491 = 0;
  v491[1] = 0;
LABEL_789:
  v510 = *(std::__shared_weak_count **)&v648[8];
  if (*(_QWORD *)&v648[8])
  {
    v511 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
    do
      v512 = __ldaxr(v511);
    while (__stlxr(v512 - 1, v511));
    if (!v512)
    {
      ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
      std::__shared_weak_count::__release_weak(v510);
    }
  }
  v514 = value[0];
  v513 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v515 = (unint64_t *)((char *)value[1] + 8);
    do
      v516 = __ldxr(v515);
    while (__stxr(v516 + 1, v515));
    do
      v517 = __ldaxr(v515);
    while (__stlxr(v517 - 1, v515));
    if (!v517)
    {
      ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
      std::__shared_weak_count::__release_weak(v513);
    }
  }
  if (v514)
    j__CFDictionaryAddValue((CFMutableDictionaryRef)theDict, v476, value[0]);
  v518 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v519 = (unint64_t *)((char *)value[1] + 8);
    do
      v520 = __ldaxr(v519);
    while (__stlxr(v520 - 1, v519));
    if (!v520)
    {
      ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
      std::__shared_weak_count::__release_weak(v518);
    }
  }
LABEL_807:
  v521 = (std::__shared_weak_count *)*((_QWORD *)&v641 + 1);
  if (!*((_QWORD *)&v641 + 1))
    goto LABEL_811;
  v522 = (unint64_t *)(*((_QWORD *)&v641 + 1) + 8);
  do
    v523 = __ldaxr(v522);
  while (__stlxr(v523 - 1, v522));
  if (v523)
  {
LABEL_811:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_813;
    goto LABEL_812;
  }
  ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
  std::__shared_weak_count::__release_weak(v521);
  if (SBYTE7(__dst[1]) < 0)
LABEL_812:
    operator delete(*(void **)&__dst[0]);
LABEL_813:
  __p[0] = (void *)0x80E130615120367;
  strcpy((char *)&__p[1], "\t8#3");
  v524 = sub_239510ECC((uint64_t)__p);
  v525 = strlen(v524);
  if (v525 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v526 = v525;
  if (v525 >= 0x17)
  {
    v528 = (v525 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v525 | 7) != 0x17)
      v528 = v525 | 7;
    v529 = v528 + 1;
    v527 = operator new(v528 + 1);
    *((_QWORD *)&__dst[0] + 1) = v526;
    *(_QWORD *)&__dst[1] = v529 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v527;
  }
  else
  {
    BYTE7(__dst[1]) = v525;
    v527 = __dst;
    if (!v525)
      goto LABEL_821;
  }
  memmove(v527, v524, v526);
LABEL_821:
  *((_BYTE *)v527 + v526) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_2397373B0((uint64_t)&theDict, *(const void **)v648, (uint64_t)&v633);
  v533 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_825;
  v534 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v535 = __ldaxr(v534);
  while (__stlxr(v535 - 1, v534));
  if (v535)
  {
LABEL_825:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_827;
    goto LABEL_826;
  }
  ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
  std::__shared_weak_count::__release_weak(v533);
  if (SBYTE7(__dst[1]) < 0)
LABEL_826:
    operator delete(*(void **)&__dst[0]);
LABEL_827:
  __dst[0] = xmmword_239F13589;
  *(_OWORD *)((char *)__dst + 10) = *(__int128 *)((char *)&xmmword_239F13589 + 10);
  sub_239A93C04((unsigned __int8 *)__dst, *(int32x4_t *)((char *)&xmmword_239F13589 + 10), v530, v531, v532);
  v537 = v536;
  v538 = strlen(v536);
  if (v538 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v539 = v538;
  if (v538 >= 0x17)
  {
    v541 = (v538 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v538 | 7) != 0x17)
      v541 = v538 | 7;
    v542 = v541 + 1;
    v540 = operator new(v541 + 1);
    *(_QWORD *)&v648[8] = v539;
    *(_QWORD *)&v648[16] = v542 | 0x8000000000000000;
    *(_QWORD *)v648 = v540;
  }
  else
  {
    v648[23] = v538;
    v540 = v648;
    if (!v538)
      goto LABEL_835;
  }
  memmove(v540, v537, v539);
LABEL_835:
  v540[v539] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_2397373B0((uint64_t)&theDict, __p[0], (uint64_t)&v632);
  v546 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_839;
  v547 = (unint64_t *)((char *)__p[1] + 8);
  do
    v548 = __ldaxr(v547);
  while (__stlxr(v548 - 1, v547));
  if (v548)
  {
LABEL_839:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_841;
    goto LABEL_840;
  }
  ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
  std::__shared_weak_count::__release_weak(v546);
  if ((v648[23] & 0x80000000) != 0)
LABEL_840:
    operator delete(*(void **)v648);
LABEL_841:
  *(_OWORD *)v648 = xmmword_239F135A3;
  strcpy(&v648[15], "Btr");
  sub_23958E450((uint64_t)v648, (int32x4_t)xmmword_239F135A3, v543, v544, v545);
  v550 = v549;
  v551 = strlen(v549);
  if (v551 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v552 = v551;
  if (v551 >= 0x17)
  {
    v554 = (v551 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v551 | 7) != 0x17)
      v554 = v551 | 7;
    v555 = v554 + 1;
    v553 = operator new(v554 + 1);
    *((_QWORD *)&__dst[0] + 1) = v552;
    *(_QWORD *)&__dst[1] = v555 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v553;
  }
  else
  {
    BYTE7(__dst[1]) = v551;
    v553 = __dst;
    if (!v551)
      goto LABEL_849;
  }
  memmove(v553, v550, v552);
LABEL_849:
  *((_BYTE *)v553 + v552) = 0;
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)__p);
  sub_2397373B0((uint64_t)&theDict, __p[0], (uint64_t)&v636);
  v559 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_853;
  v560 = (unint64_t *)((char *)__p[1] + 8);
  do
    v561 = __ldaxr(v560);
  while (__stlxr(v561 - 1, v560));
  if (v561)
  {
LABEL_853:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_855;
    goto LABEL_854;
  }
  ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
  std::__shared_weak_count::__release_weak(v559);
  if (SBYTE7(__dst[1]) < 0)
LABEL_854:
    operator delete(*(void **)&__dst[0]);
LABEL_855:
  __dst[0] = xmmword_239F135B6;
  *(_OWORD *)((char *)__dst + 14) = *(__int128 *)((char *)&xmmword_239F135B6 + 14);
  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F135B6 + 14), v556, v557, v558);
  v563 = v562;
  v564 = strlen(v562);
  if (v564 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v565 = v564;
  if (v564 >= 0x17)
  {
    v567 = (v564 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v564 | 7) != 0x17)
      v567 = v564 | 7;
    v568 = v567 + 1;
    v566 = operator new(v567 + 1);
    *(_QWORD *)&v648[8] = v565;
    *(_QWORD *)&v648[16] = v568 | 0x8000000000000000;
    *(_QWORD *)v648 = v566;
  }
  else
  {
    v648[23] = v564;
    v566 = v648;
    if (!v564)
      goto LABEL_863;
  }
  memmove(v566, v563, v565);
LABEL_863:
  v566[v565] = 0;
  sub_239629EF4((uint64_t)v648, (CFStringRef *)__p);
  sub_2397373B0((uint64_t)&theDict, __p[0], (uint64_t)&v637);
  v570 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_867;
  v571 = (unint64_t *)((char *)__p[1] + 8);
  do
    v572 = __ldaxr(v571);
  while (__stlxr(v572 - 1, v571));
  if (v572)
  {
LABEL_867:
    if ((v648[23] & 0x80000000) == 0)
      goto LABEL_869;
    goto LABEL_868;
  }
  ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
  std::__shared_weak_count::__release_weak(v570);
  if ((v648[23] & 0x80000000) != 0)
LABEL_868:
    operator delete(*(void **)v648);
LABEL_869:
  sub_23971A32C((uint64_t)value, v569);
  v574 = v573;
  v575 = strlen(v573);
  if (v575 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v576 = v575;
  if (v575 >= 0x17)
  {
    v578 = (v575 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v575 | 7) != 0x17)
      v578 = v575 | 7;
    v579 = v578 + 1;
    v577 = operator new(v578 + 1);
    *((_QWORD *)&__dst[0] + 1) = v576;
    *(_QWORD *)&__dst[1] = v579 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v577;
  }
  else
  {
    BYTE7(__dst[1]) = v575;
    v577 = __dst;
    if (!v575)
      goto LABEL_877;
  }
  memmove(v577, v574, v576);
LABEL_877:
  *((_BYTE *)v577 + v576) = 0;
  sub_239BCA2E4((uint64_t)__p, (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)(a9 + 120));
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018((uint64_t)&theDict, *(const void **)v648, (uint64_t)__p);
  v580 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_881;
  v581 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v582 = __ldaxr(v581);
  while (__stlxr(v582 - 1, v581));
  if (!v582)
  {
    ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
    std::__shared_weak_count::__release_weak(v580);
    v583 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_885;
  }
  else
  {
LABEL_881:
    v583 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_885;
  }
  v584 = (unint64_t *)&v583->__shared_owners_;
  do
    v585 = __ldaxr(v584);
  while (__stlxr(v585 - 1, v584));
  if (v585)
  {
LABEL_885:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_887;
    goto LABEL_886;
  }
  ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
  std::__shared_weak_count::__release_weak(v583);
  if (SBYTE7(__dst[1]) < 0)
LABEL_886:
    operator delete(*(void **)&__dst[0]);
LABEL_887:
  value[0] = (void *)0x1B172B1011070174;
  BYTE4(value[1]) = 0;
  LODWORD(value[1]) = 320672282;
  v586 = sub_239510ECC((uint64_t)value);
  v587 = strlen(v586);
  if (v587 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v588 = v587;
  if (v587 >= 0x17)
  {
    v590 = (v587 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v587 | 7) != 0x17)
      v590 = v587 | 7;
    v591 = v590 + 1;
    v589 = operator new(v590 + 1);
    *((_QWORD *)&__dst[0] + 1) = v588;
    *(_QWORD *)&__dst[1] = v591 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v589;
  }
  else
  {
    BYTE7(__dst[1]) = v587;
    v589 = __dst;
    if (!v587)
      goto LABEL_895;
  }
  memmove(v589, v586, v588);
LABEL_895:
  *((_BYTE *)v589 + v588) = 0;
  sub_239BC4830(__p, a9 + 192);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018((uint64_t)&theDict, *(const void **)v648, (uint64_t)__p);
  v592 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_899;
  v593 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v594 = __ldaxr(v593);
  while (__stlxr(v594 - 1, v593));
  if (!v594)
  {
    ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
    std::__shared_weak_count::__release_weak(v592);
    v595 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_903;
  }
  else
  {
LABEL_899:
    v595 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_903;
  }
  v596 = (unint64_t *)&v595->__shared_owners_;
  do
    v597 = __ldaxr(v596);
  while (__stlxr(v597 - 1, v596));
  if (!v597)
  {
    ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
    std::__shared_weak_count::__release_weak(v595);
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_905;
    goto LABEL_904;
  }
LABEL_903:
  if (SBYTE7(__dst[1]) < 0)
LABEL_904:
    operator delete(*(void **)&__dst[0]);
LABEL_905:
  sub_239629EF4((uint64_t)&v646, (CFStringRef *)__dst);
  sub_239BB7018(v16, *(const void **)&__dst[0], (uint64_t)&theDict);
  v598 = (std::__shared_weak_count *)*((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    goto LABEL_909;
  v599 = (unint64_t *)(*((_QWORD *)&__dst[0] + 1) + 8);
  do
    v600 = __ldaxr(v599);
  while (__stlxr(v600 - 1, v599));
  if (!v600)
  {
    ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
    std::__shared_weak_count::__release_weak(v598);
    v601 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_913;
  }
  else
  {
LABEL_909:
    v601 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_913;
  }
  v602 = (unint64_t *)&v601->__shared_owners_;
  do
    v603 = __ldaxr(v602);
  while (__stlxr(v603 - 1, v602));
  if (v603)
  {
LABEL_913:
    if ((SHIBYTE(v646.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_915;
    goto LABEL_914;
  }
  ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
  std::__shared_weak_count::__release_weak(v601);
  if (SHIBYTE(v646.__r_.__value_.__r.__words[2]) < 0)
LABEL_914:
    operator delete(v646.__r_.__value_.__l.__data_);
LABEL_915:
  if (!*(_BYTE *)(a10 + 360))
    goto LABEL_934;
  strcpy(v648, "5GPEZGAjAPMA@G\\[R");
  v604 = sub_239A91B18((int8x16_t *)v648);
  v605 = strlen(v604->i8);
  if (v605 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v606 = v605;
  if (v605 >= 0x17)
  {
    v608 = (v605 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v605 | 7) != 0x17)
      v608 = v605 | 7;
    v609 = v608 + 1;
    v607 = operator new(v608 + 1);
    *((_QWORD *)&__dst[0] + 1) = v606;
    *(_QWORD *)&__dst[1] = v609 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v607;
  }
  else
  {
    BYTE7(__dst[1]) = v605;
    v607 = __dst;
    if (!v605)
      goto LABEL_924;
  }
  memmove(v607, v604, v606);
LABEL_924:
  *((_BYTE *)v607 + v606) = 0;
  sub_239BE0444(__p, a10);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)&v646);
  sub_239BB7018(v16, v646.__r_.__value_.__l.__data_, (uint64_t)__p);
  v610 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
  if (!v646.__r_.__value_.__l.__size_)
    goto LABEL_928;
  v611 = (unint64_t *)(v646.__r_.__value_.__l.__size_ + 8);
  do
    v612 = __ldaxr(v611);
  while (__stlxr(v612 - 1, v611));
  if (!v612)
  {
    ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
    std::__shared_weak_count::__release_weak(v610);
    v613 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_932;
  }
  else
  {
LABEL_928:
    v613 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_932;
  }
  v614 = (unint64_t *)&v613->__shared_owners_;
  do
    v615 = __ldaxr(v614);
  while (__stlxr(v615 - 1, v614));
  if (v615)
  {
LABEL_932:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_934;
    goto LABEL_933;
  }
  ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
  std::__shared_weak_count::__release_weak(v613);
  if (SBYTE7(__dst[1]) < 0)
LABEL_933:
    operator delete(*(void **)&__dst[0]);
LABEL_934:
  if (!*(_BYTE *)(a11 + 1032))
    return;
  __p[0] = (void *)0x517A7C617E6B7C0ELL;
  sub_23958E5E0((uint64_t)__p);
  v617 = v616;
  v618 = strlen(v616);
  if (v618 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v619 = v618;
  if (v618 >= 0x17)
  {
    v621 = (v618 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v618 | 7) != 0x17)
      v621 = v618 | 7;
    v622 = v621 + 1;
    v620 = operator new(v621 + 1);
    *((_QWORD *)&__dst[0] + 1) = v619;
    *(_QWORD *)&__dst[1] = v622 | 0x8000000000000000;
    *(_QWORD *)&__dst[0] = v620;
  }
  else
  {
    BYTE7(__dst[1]) = v618;
    v620 = __dst;
    if (!v618)
      goto LABEL_943;
  }
  memmove(v620, v617, v619);
LABEL_943:
  *((_BYTE *)v620 + v619) = 0;
  sub_239BE2E58(&v646, (_QWORD *)a11);
  sub_239629EF4((uint64_t)__dst, (CFStringRef *)v648);
  sub_239BB7018(v16, *(const void **)v648, (uint64_t)&v646);
  v623 = *(std::__shared_weak_count **)&v648[8];
  if (!*(_QWORD *)&v648[8])
    goto LABEL_947;
  v624 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
  do
    v625 = __ldaxr(v624);
  while (__stlxr(v625 - 1, v624));
  if (!v625)
  {
    ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
    std::__shared_weak_count::__release_weak(v623);
    v626 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_951;
  }
  else
  {
LABEL_947:
    v626 = (std::__shared_weak_count *)v646.__r_.__value_.__l.__size_;
    if (!v646.__r_.__value_.__l.__size_)
      goto LABEL_951;
  }
  v627 = (unint64_t *)&v626->__shared_owners_;
  do
    v628 = __ldaxr(v627);
  while (__stlxr(v628 - 1, v627));
  if (v628)
  {
LABEL_951:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      return;
    goto LABEL_952;
  }
  ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
  std::__shared_weak_count::__release_weak(v626);
  if (SBYTE7(__dst[1]) < 0)
LABEL_952:
    operator delete(*(void **)&__dst[0]);
}

void sub_239BEA8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  sub_239416DA0((uint64_t)&a25);
  sub_239416DA0((uint64_t)&a32);
  if (a48 < 0)
    operator delete(__p);
  sub_239416DA0((uint64_t)&a19);
  if (*(char *)(v49 - 153) < 0)
    operator delete(*(void **)(v49 - 176));
  sub_239416DA0(v48);
  _Unwind_Resume(a1);
}

void sub_239BEAFCC()
{
  JUMPOUT(0x239BEAF70);
}

void sub_239BEAFD4()
{
  JUMPOUT(0x239BEAF70);
}

void sub_239BEAFDC()
{
  JUMPOUT(0x239BEAF70);
}

void sub_239BEAFE4()
{
  JUMPOUT(0x239BEAF70);
}

void sub_239BEAFEC()
{
  JUMPOUT(0x239BEAF70);
}

__n128 sub_239BEAFF4(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t a4, double a5, float64x2_t a6, float64x2_t a7, double a8, float64x2_t a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t *v14;
  unint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  unint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  void *v27;
  float v28;
  float64x2_t v29;
  double v30;
  __n128 result;
  std::bad_alloc *exception;
  std::bad_alloc *v40;
  unint64_t v41;
  int8x16_t v42;
  double v43;
  char v44[88];
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  char v49;
  _OWORD memptr[4];
  unint64_t v51;

  if (a2 == a3)
  {
    a4.f64[0] = (double)(0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3));
    v42 = (int8x16_t)vdivq_f64((float64x2_t)0, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4.f64[0], 0));
    *(_QWORD *)&v43 = *(_OWORD *)&vdivq_f64((float64x2_t)0, a4);
    v41 = vextq_s8(v42, v42, 8uLL).u64[0];
    a4.f64[0] = 0.0;
    v19 = 0;
    v20.f64[0] = 0.0;
    v21.f64[0] = 0.0;
    a10.f64[0] = 0.0;
    a7.f64[0] = 0.0;
    a6.f64[0] = 0.0;
    v22 = 0;
    a9.f64[0] = 0.0;
  }
  else
  {
    v13.f64[0] = 0.0;
    v14 = a2;
    v15 = 0;
    a6.f64[0] = 0.0;
    do
    {
      a7.f64[0] = v14[1].f64[0];
      v16 = *v14;
      v14 = (float64x2_t *)((char *)v14 + 24);
      a6 = vaddq_f64(a6, a7);
      *(_QWORD *)&v13.f64[1] = v15;
      v13 = vaddq_f64(v13, v16);
      v15 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
    }
    while (v14 != a3);
    a7.f64[0] = (double)(0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3));
    v17 = vdivq_f64(a6, a7);
    *(_QWORD *)&a4.f64[1] = v15;
    v18 = vdivq_f64(a4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a7.f64[0], 0));
    v20 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
    a4.f64[0] = 0.0;
    v41 = *(_QWORD *)&v20.f64[0];
    v18.f64[1] = v20.f64[0];
    v19 = 0;
    v20.f64[0] = 0.0;
    v21.f64[0] = 0.0;
    a10.f64[0] = 0.0;
    a7.f64[0] = 0.0;
    a6.f64[0] = 0.0;
    v22 = 0;
    a9.f64[0] = 0.0;
    do
    {
      v10.f64[0] = a2[1].f64[0];
      v23 = *a2;
      a2 = (float64x2_t *)((char *)a2 + 24);
      v24 = vsubq_f64(v23, v18);
      v10 = vsubq_f64(v10, v17);
      v11.f64[0] = vmuld_n_f64(v10.f64[0], v24.f64[0]);
      *(_QWORD *)&a4.f64[1] = v19;
      v21.f64[1] = a10.f64[0];
      *(_QWORD *)&a6.f64[1] = v22;
      a10.f64[0] = vmuld_lane_f64(v10.f64[0], v24, 1);
      a4 = vmlaq_n_f64(a4, v24, v24.f64[0]);
      v20 = vaddq_f64(v20, v11);
      a7 = vaddq_f64(a7, a10);
      v21 = vmlaq_laneq_f64(v21, v24, v24, 1);
      a6 = vmlaq_n_f64(a6, v24, v10.f64[0]);
      a9 = vmlaq_f64(a9, v10, v10);
      a10.f64[0] = v21.f64[1];
      v22 = vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
      v19 = vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL).u64[0];
    }
    while (a2 != a3);
    v43 = v17.f64[0];
  }
  v49 = 0;
  *(_QWORD *)&a4.f64[1] = v19;
  v48 = 0x300000003;
  v20.f64[1] = v21.f64[0];
  a10.f64[1] = a7.f64[0];
  memptr[0] = a4;
  memptr[1] = v20;
  v51 = *(_QWORD *)&a9.f64[0];
  *(_QWORD *)&a6.f64[1] = v22;
  memptr[2] = a10;
  memptr[3] = a6;
  sub_239456468((uint64_t)v44, (__CLPK_doublereal *)memptr, 3);
  *(_QWORD *)&memptr[0] = 0;
  malloc_type_posix_memalign((void **)memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v27 = *(void **)&memptr[0];
  if (!*(_QWORD *)&memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v40 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v40, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v28 = v45;
  *(float *)v25.f64 = v46;
  *(float *)v26.f64 = v47;
  v29.f64[0] = v28;
  v26.f64[0] = *(float *)v26.f64;
  v29.f64[1] = *(float *)v25.f64;
  v25.f64[0] = 1.0 / sqrt(v29.f64[0] * v29.f64[0] + v29.f64[1] * v29.f64[1] + v26.f64[0] * v26.f64[0]);
  v30 = vmulq_f64(v26, v25).f64[0];
  _Q0 = vmulq_n_f64(v29, v25.f64[0]);
  *a1 = _Q0;
  _D3 = v41;
  __asm { FMLA            D1, D3, V0.D[1] }
  a1[1].f64[0] = v30;
  a1[1].f64[1] = -(_D1 + v43 * v30);
  free(v27);
  return result;
}

double sub_239BEB240(float64x2_t **a1)
{
  float64x2_t *v1;
  float64x2_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  float64x2_t *v48;
  int64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  unint64_t i;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  void **v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  size_t v70;
  char *v71;
  char *v72;
  char *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  float64x2_t *v77;
  char *v78;
  BOOL v79;
  uint64_t v80;
  double *v81;
  float64x2_t *v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  float64x2_t *v86;
  const double *v87;
  float64x2_t v88;
  uint64_t v89;
  double *v90;
  uint64_t v91;
  double *v92;
  uint64_t j;
  double *v94;
  double *v95;
  uint64_t v96;
  double v97;
  float64x2_t *v98;
  float64x2_t *v99;
  unint64_t v100;
  double *v101;
  _QWORD *v102;
  double *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  double *v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double *v114;
  double v115;
  double *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  double *v122;
  unint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  double *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  float64x2_t *v130;
  double *v131;
  double *v132;
  unint64_t v133;
  double *v134;
  double v135;
  void **v136;
  void *v137;
  void *v139;
  void *exception;
  double *v142;
  double *v143;
  double *v144;
  void *v145;
  _BYTE *v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  void *__p[2];
  __int128 v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  void **v158;
  uint64_t v159;
  void **v160;
  void *v161;
  void *v162;
  char *v163;
  int v164;
  int v165;
  char *v166;
  char *v167;
  unint64_t v168;
  uint64_t v169[2];
  __int128 v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  float64x2x2_t v175;
  float64x2x2_t v176;

  v2 = *a1;
  v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (char *)*a1) >> 3) <= 1)
  {
    sub_239A444D4((uint64_t)"unknown file", 113, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v166 = 0;
  v167 = 0;
  v168 = 0;
  if ((unint64_t)(((char *)v1 - (char *)v2) >> 3) >> 61)
    sub_2394189F8();
  v3 = operator new((char *)v1 - (char *)v2);
  v4 = v3;
  v5 = (unint64_t)&v3[((char *)v1 - (char *)v2) >> 3];
  v167 = (char *)v3;
  if (v2 != v1)
  {
    v6 = (char *)v3;
    while (1)
    {
      if ((unint64_t)v4 < v5)
      {
        *v4 = *(_QWORD *)&v2->f64[0];
        v7 = v4 + 1;
        if ((unint64_t)(v4 + 1) < v5)
          goto LABEL_9;
        goto LABEL_28;
      }
      v9 = ((char *)v4 - v6) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        goto LABEL_217;
      if ((uint64_t)(v5 - (_QWORD)v6) >> 2 > v10)
        v10 = (uint64_t)(v5 - (_QWORD)v6) >> 2;
      if (v5 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 61)
          goto LABEL_221;
        v12 = operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v9];
      *v13 = *(_QWORD *)&v2->f64[0];
      v7 = v13 + 1;
      if (v4 != (_QWORD *)v6)
      {
        v14 = (char *)(v4 - 1) - v6;
        if (v14 < 0x168)
        {
          v15 = (char *)v4;
          goto LABEL_24;
        }
        if (&v12[(char *)v4 - v6 - 8 - (v14 & 0xFFFFFFFFFFFFFFF8)] > &v12[(char *)v4 - v6 - 8])
        {
          v15 = (char *)v4;
          do
          {
LABEL_24:
            v16 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v13 = v16;
          }
          while (v15 != v6);
          goto LABEL_25;
        }
        if ((_QWORD *)((char *)v4 - (v14 & 0xFFFFFFFFFFFFFFF8) - 8) > v4 - 1)
        {
          v15 = (char *)v4;
          goto LABEL_24;
        }
        if ((unint64_t)(v6 - v12) < 0x20)
        {
          v15 = (char *)v4;
          goto LABEL_24;
        }
        v33 = (v14 >> 3) + 1;
        v15 = (char *)&v4[-(v33 & 0x3FFFFFFFFFFFFFFCLL)];
        v34 = &v12[8 * v9 - 16];
        v35 = (__int128 *)(v4 - 2);
        v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v13 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
        if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_24;
      }
LABEL_25:
      v5 = (unint64_t)&v12[8 * v11];
      if (v6)
        operator delete(v6);
      v6 = (char *)v13;
      if ((unint64_t)v7 < v5)
      {
LABEL_9:
        *v7 = *(_QWORD *)&v2->f64[1];
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >= v5)
          goto LABEL_45;
        goto LABEL_5;
      }
LABEL_28:
      v17 = ((char *)v7 - v6) >> 3;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
      {
        v4 = v7;
        goto LABEL_217;
      }
      if ((uint64_t)(v5 - (_QWORD)v6) >> 2 > v18)
        v18 = (uint64_t)(v5 - (_QWORD)v6) >> 2;
      if (v5 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 >> 61)
        {
          v4 = v7;
          goto LABEL_221;
        }
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v17];
      *v21 = *(_QWORD *)&v2->f64[1];
      v8 = v21 + 1;
      if (v7 != (_QWORD *)v6)
      {
        v22 = (char *)(v7 - 1) - v6;
        if (v22 < 0x168)
        {
          v23 = (char *)v7;
          goto LABEL_41;
        }
        if (&v20[(char *)v7 - v6 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[(char *)v7 - v6 - 8])
        {
          v23 = (char *)v7;
          do
          {
LABEL_41:
            v24 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v21 = v24;
          }
          while (v23 != v6);
          goto LABEL_42;
        }
        if ((_QWORD *)((char *)v7 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
        {
          v23 = (char *)v7;
          goto LABEL_41;
        }
        if ((unint64_t)(v6 - v20) < 0x20)
        {
          v23 = (char *)v7;
          goto LABEL_41;
        }
        v38 = (v22 >> 3) + 1;
        v23 = (char *)&v7[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
        v39 = &v20[8 * v17 - 16];
        v40 = (__int128 *)(v7 - 2);
        v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 -= 2;
          v40 -= 2;
          v41 -= 4;
        }
        while (v41);
        v21 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
        if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_41;
      }
LABEL_42:
      v5 = (unint64_t)&v20[8 * v19];
      if (v6)
        operator delete(v6);
      v6 = (char *)v21;
      if ((unint64_t)v8 >= v5)
      {
LABEL_45:
        v25 = ((char *)v8 - v6) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
        {
          v4 = v8;
LABEL_217:
          v167 = (char *)v4;
          v168 = v5;
          v166 = v6;
          sub_2394189F8();
        }
        if ((uint64_t)(v5 - (_QWORD)v6) >> 2 > v26)
          v26 = (uint64_t)(v5 - (_QWORD)v6) >> 2;
        if (v5 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          if (v27 >> 61)
          {
            v4 = v8;
LABEL_221:
            v167 = (char *)v4;
            v168 = v5;
            v166 = v6;
            sub_239418A80();
          }
          v28 = operator new(8 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v25];
        *v29 = *(_QWORD *)&v2[1].f64[0];
        v4 = v29 + 1;
        if (v8 != (_QWORD *)v6)
        {
          v30 = (char *)(v8 - 1) - v6;
          if (v30 < 0x168)
          {
            v31 = (char *)v8;
            goto LABEL_58;
          }
          if (&v28[(char *)v8 - v6 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[(char *)v8 - v6 - 8])
          {
            v31 = (char *)v8;
            goto LABEL_58;
          }
          if ((_QWORD *)((char *)v8 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1)
          {
            v31 = (char *)v8;
            goto LABEL_58;
          }
          if ((unint64_t)(v6 - v28) < 0x20)
          {
            v31 = (char *)v8;
            goto LABEL_58;
          }
          v43 = (v30 >> 3) + 1;
          v31 = (char *)&v8[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
          v44 = &v28[8 * v25 - 16];
          v45 = (__int128 *)(v8 - 2);
          v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *v45;
            *(v44 - 1) = *(v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 2;
            v46 -= 4;
          }
          while (v46);
          v29 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
          if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_58:
              v32 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *--v29 = v32;
            }
            while (v31 != v6);
          }
        }
        v5 = (unint64_t)&v28[8 * v27];
        if (v6)
          operator delete(v6);
        v6 = (char *)v29;
        goto LABEL_6;
      }
LABEL_5:
      *v8 = *(_QWORD *)&v2[1].f64[0];
      v4 = v8 + 1;
LABEL_6:
      v2 = (float64x2_t *)((char *)v2 + 24);
      if (v2 == v1)
      {
        v167 = (char *)v4;
        v1 = *a1;
        v48 = a1[1];
        goto LABEL_94;
      }
    }
  }
  v48 = v1;
  v6 = (char *)v3;
LABEL_94:
  v168 = v5;
  v166 = v6;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v49 = (char *)v4 - v6;
  if (v4 != (_QWORD *)v6)
  {
    if (v49 < 0)
      sub_2394189F8();
    v50 = (char *)operator new((char *)v4 - v6);
    v51 = &v50[8 * (v49 >> 3)];
    v161 = v50;
    v163 = v51;
    memcpy(v50, v6, v49);
    v162 = v51;
  }
  v164 = -1431655765 * (((char *)v48 - (char *)v1) >> 3);
  v165 = 3;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  *(_OWORD *)__p = 0u;
  v154 = 0u;
  v156 = 0;
  v157 = 0;
  v155 = 0;
  v158 = &v161;
  v159 = 10;
  v160 = &v161;
  v150 = v164;
  v151 = v164;
  v152 = 3;
  v149 = 10;
  if (v164)
  {
    sub_23946DAD4((uint64_t)&v145, v164);
    v52 = v145;
    if (v150)
    {
      for (i = 0; i < v150; ++i)
        v52[i] = i;
    }
  }
  else
  {
    v52 = 0;
  }
  v54 = *((int *)v158 + 6);
  v150 = v54;
  v151 = v54;
  v55 = (v146 - (_BYTE *)v52) >> 3;
  if (v54 != v55)
  {
    if (v54 <= v55)
    {
      if (v54 < v55)
        v146 = &v52[v54];
    }
    else
    {
      sub_23946DAD4((uint64_t)&v145, v54 - v55);
      v54 = v150;
    }
  }
  if (v54)
  {
    v56 = 0;
    v57 = v145;
    do
    {
      v57[v56] = v56;
      ++v56;
      v58 = v150;
    }
    while (v56 < v150);
    v59 = (void **)v155;
    if (!v155)
      goto LABEL_116;
  }
  else
  {
    v58 = 0;
    v59 = (void **)v155;
    if (!v155)
      goto LABEL_116;
  }
  do
  {
    v60 = *v59;
    free(v59);
    v155 = v60;
    v59 = (void **)v60;
  }
  while (v60);
  v58 = v150;
LABEL_116:
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v148 = 0;
  v151 = v58;
  if (!v58)
    goto LABEL_160;
  v61 = v152;
  v62 = (char *)__p[0];
  v63 = (char *)__p[1];
  v64 = ((char *)__p[1] - (char *)__p[0]) >> 4;
  v65 = v152 - v64;
  if (v152 <= v64)
  {
    if (v152 >= v64)
      goto LABEL_135;
    v73 = (char *)__p[0] + 16 * v152;
    goto LABEL_134;
  }
  if (v65 <= (uint64_t)(v154 - (unint64_t)__p[1]) >> 4)
  {
    bzero(__p[1], 16 * v65);
    v73 = &v63[16 * v65];
LABEL_134:
    __p[1] = v73;
    goto LABEL_135;
  }
  if (v152 < 0)
    sub_2394189F8();
  v66 = v154 - (unint64_t)__p[0];
  if ((uint64_t)(v154 - (unint64_t)__p[0]) >> 3 > (unint64_t)v152)
    v61 = v66 >> 3;
  if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
    v67 = 0xFFFFFFFFFFFFFFFLL;
  else
    v67 = v61;
  if (v67 >> 60)
    sub_239418A80();
  v68 = (char *)operator new(16 * v67);
  v69 = &v68[16 * v64];
  v70 = 16 * v65;
  v71 = &v68[16 * v67];
  bzero(v69, v70);
  v72 = &v69[v70];
  if (v63 != v62)
  {
    do
    {
      *((_OWORD *)v69 - 1) = *((_OWORD *)v63 - 1);
      v69 -= 16;
      v63 -= 16;
    }
    while (v63 != v62);
    v63 = (char *)__p[0];
  }
  __p[0] = v69;
  __p[1] = v72;
  *(_QWORD *)&v154 = v71;
  if (v63)
    operator delete(v63);
LABEL_135:
  v74 = v158;
  v75 = *((int *)v158 + 6);
  if (!(_DWORD)v75)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] computeBoundingBox() called but no data points found.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v76 = v152;
  if (v152 < 1)
    goto LABEL_159;
  v77 = (float64x2_t *)*v158;
  v78 = (char *)__p[0];
  if (v152 <= 7
    || (__p[0] < &v77->f64[v152] ? (v79 = v77 >= (float64x2_t *)((char *)__p[0] + 16 * v152)) : (v79 = 1),
        !v79))
  {
    v80 = 0;
LABEL_148:
    v85 = v76 - v80;
    v86 = (float64x2_t *)&v78[16 * v80];
    v87 = &v77->f64[v80];
    do
    {
      v88 = vld1q_dup_f64(v87++);
      *v86++ = v88;
      --v85;
    }
    while (v85);
    goto LABEL_150;
  }
  v80 = v152 & 0xFFFFFFFC;
  v81 = (double *)((char *)__p[0] + 32);
  v82 = v77 + 1;
  v83 = v80;
  do
  {
    v175.val[0] = v82[-1];
    v176.val[0] = *v82;
    v175.val[1] = v175.val[0];
    v84 = v81 - 4;
    vst2q_f64(v84, v175);
    v176.val[1] = v176.val[0];
    vst2q_f64(v81, v176);
    v81 += 8;
    v82 += 2;
    v83 -= 4;
  }
  while (v83);
  if (v80 != v76)
    goto LABEL_148;
LABEL_150:
  if (v75 >= 2)
  {
    v89 = *((int *)v74 + 7);
    v90 = (double *)((char *)__p[0] + 8);
    v91 = 8 * v89;
    v92 = &v77->f64[v89];
    for (j = 1; j != v75; ++j)
    {
      v94 = v92;
      v95 = v90;
      v96 = v76;
      do
      {
        v97 = *v94;
        if (*v94 < *(v95 - 1))
        {
          *(v95 - 1) = v97;
          v97 = *v94;
        }
        if (v97 > *v95)
          *v95 = v97;
        v95 += 2;
        ++v94;
        --v96;
      }
      while (v96);
      v92 = (double *)((char *)v92 + v91);
    }
  }
LABEL_159:
  v148 = (int *)sub_239BEC3D4((uint64_t *)&v145, 0, v150, (unint64_t *)__p);
LABEL_160:
  v142 = 0;
  v98 = *a1;
  v99 = a1[1];
  if (v99 == *a1)
  {
    v132 = 0;
    v131 = 0;
    v130 = a1[1];
  }
  else
  {
    v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)*a1) >> 3);
    if (v100 >> 61)
      sub_2394189F8();
    v142 = (double *)operator new(0x5555555555555558 * (((char *)v99 - (char *)*a1) >> 3));
    v143 = v142;
    v144 = &v142[v100];
    do
    {
      v102 = operator new(0x10uLL);
      *v102 = 0;
      v102[1] = 0;
      v103 = (double *)operator new(0x10uLL);
      v169[0] = (uint64_t)v102;
      v169[1] = (uint64_t)v103;
      v170 = xmmword_239F0C360;
      *v103 = 0.0;
      v103[1] = 1.79769313e308;
      if (v150)
      {
        if (!v148)
        {
          v139 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x23B83DB6C](v139, "[nanoflann] findNeighbors() called before building the index.");
          __cxa_throw(v139, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v172 = 0;
        v173 = 0;
        v174 = 0;
        v171 = 0;
        sub_2396BB704((uint64_t)&v172, v152, &v171);
        if (v152 < 1)
        {
          v108 = 0.0;
        }
        else
        {
          v104 = 0;
          v105 = v172;
          v106 = 8 * v152;
          v107 = (double *)((char *)__p[0] + 8);
          v108 = 0.0;
          do
          {
            v109 = v98->f64[v104 / 8];
            v110 = *(v107 - 1);
            if (v109 < v110)
            {
              v111 = (v109 - v110) * (v109 - v110);
              *(double *)&v105[v104] = v111;
              v108 = v108 + v111;
              v109 = v98->f64[v104 / 8];
            }
            if (v109 > *v107)
            {
              v112 = (v109 - *v107) * (v109 - *v107);
              *(double *)&v105[v104] = v112;
              v108 = v108 + v112;
            }
            v104 += 8;
            v107 += 2;
          }
          while (v106 != v104);
        }
        sub_239BEC098((uint64_t)&v145, v169, v98, v148, (uint64_t *)&v172, v108, 1.0);
        if (v172)
        {
          v173 = v172;
          operator delete(v172);
        }
        v113 = v103[1];
      }
      else
      {
        v113 = 1.79769313e308;
      }
      v114 = v143;
      v115 = sqrt(v113);
      if (v143 < v144)
      {
        *v143 = v115;
        v101 = v143 + 1;
      }
      else
      {
        v116 = v142;
        v117 = v143 - v142;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 61)
          sub_2394189F8();
        v119 = (char *)v144 - (char *)v142;
        if (((char *)v144 - (char *)v142) >> 2 > v118)
          v118 = v119 >> 2;
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
          v120 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v120 = v118;
        if (v120)
        {
          if (v120 >> 61)
            sub_239418A80();
          v121 = operator new(8 * v120);
        }
        else
        {
          v121 = 0;
        }
        v122 = (double *)&v121[8 * v117];
        *v122 = v115;
        v101 = v122 + 1;
        if (v143 != v142)
        {
          v123 = (char *)(v143 - 1) - (char *)v142;
          if (v123 < 0x58)
            goto LABEL_232;
          if ((unint64_t)((char *)v142 - v121) < 0x20)
            goto LABEL_232;
          v124 = (v123 >> 3) + 1;
          v125 = &v121[8 * v117 - 16];
          v126 = v143 - 2;
          v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v128 = *(_OWORD *)v126;
            *(v125 - 1) = *((_OWORD *)v126 - 1);
            *v125 = v128;
            v125 -= 2;
            v126 -= 4;
            v127 -= 4;
          }
          while (v127);
          v122 -= v124 & 0x3FFFFFFFFFFFFFFCLL;
          v114 = &v143[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_232:
            do
            {
              v129 = *((_QWORD *)v114-- - 1);
              *((_QWORD *)v122-- - 1) = v129;
            }
            while (v114 != v142);
          }
        }
        v142 = v122;
        v144 = (double *)&v121[8 * v120];
        if (v116)
          operator delete(v116);
      }
      v143 = v101;
      operator delete(v103);
      operator delete(v102);
      v98 = (float64x2_t *)((char *)v98 + 24);
    }
    while (v98 != v99);
    v99 = *a1;
    v130 = a1[1];
    v131 = v142;
    v132 = v101;
  }
  v133 = (0xAAAAAAAAAAAAAAABLL * (((char *)v130 - (char *)v99) >> 3)) >> 1;
  v134 = &v131[v133];
  if (v134 != v132)
  {
    sub_2395F71EC(v131, v134, v132);
    v131 = v142;
  }
  v135 = v131[v133];
  operator delete(v131);
  v136 = (void **)v155;
  if (v155)
  {
    do
    {
      v137 = *v136;
      free(v136);
      v155 = v137;
      v136 = (void **)v137;
    }
    while (v137);
  }
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  return v135;
}

void sub_239BEBF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  void *v36;
  uint64_t v37;
  void *v39;

  __cxa_free_exception(v36);
  sub_2396D0440((uint64_t)&a16);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(_QWORD *)(v37 - 184) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239BEC098(uint64_t result, uint64_t *a2, float64x2_t *a3, int *a4, uint64_t *a5, double a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  float64x2_t *v25;
  float64x2_t *v26;
  unint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  double *v39;
  _QWORD *v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  BOOL v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  double *v63;
  _QWORD *v64;
  double v65;
  uint64_t v66;

  v9 = result;
  v10 = *((_QWORD *)a4 + 3);
  v11 = *((_QWORD *)a4 + 4);
  if (*(_OWORD *)(a4 + 6) == 0)
  {
    v12 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 < *((_QWORD *)a4 + 1))
    {
      v13 = a2[1];
      v14 = a2[2];
      v15 = *a2;
      v16 = *(double *)(v13 + 8 * v14 - 8);
      v17 = *(_QWORD *)result;
      v18 = *(int *)(result + 56);
      if ((_DWORD)v18)
      {
        v19 = *(uint64_t **)(result + 144);
        v20 = *((int *)v19 + 7);
        v21 = *v19;
        result = 8 * v20;
        while (1)
        {
          v22 = *(_QWORD *)(v17 + 8 * v12);
          if (v18 >= 4)
          {
            v25 = (float64x2_t *)(v21 + 16 + result * v22);
            v24 = 0.0;
            v26 = a3 + 1;
            v27 = v18 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v28 = vsubq_f64(v26[-1], v25[-1]);
              v29 = vsubq_f64(*v26, *v25);
              v30 = vmulq_f64(v28, v28);
              v31 = vmulq_f64(v29, v29);
              v24 = v24 + v30.f64[0] + v30.f64[1] + v31.f64[0] + v31.f64[1];
              v25 += 2;
              v26 += 2;
              v27 -= 4;
            }
            while (v27);
            v23 = v18 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v18 & 0xFFFFFFFFFFFFFFFCLL) == v18)
              goto LABEL_13;
          }
          else
          {
            v23 = 0;
            v24 = 0.0;
          }
          v32 = v18 - v23;
          v33 = (double *)(v21 + 8 * (v23 + v22 * v20));
          v34 = &a3->f64[v23];
          do
          {
            v35 = *v34++;
            v36 = v35;
            v37 = *v33++;
            v24 = v24 + (v36 - v37) * (v36 - v37);
            --v32;
          }
          while (v32);
LABEL_13:
          if (v24 < v16)
          {
            v38 = a2[3];
            if (v38)
            {
              v39 = (double *)(v13 + 8 * v38);
              v40 = (_QWORD *)(*a2 + 8 * v38);
              while (1)
              {
                v41 = *(v39 - 1);
                v14 = a2[2];
                if (v41 <= v24)
                  break;
                if (v38 < v14)
                {
                  *v39 = v41;
                  *v40 = *(v40 - 1);
                }
                --v39;
                --v40;
                if (!--v38)
                {
                  v14 = a2[2];
                  break;
                }
              }
            }
            if (v38 < v14)
            {
              v42 = 8 * v38;
              *(double *)(v13 + v42) = v24;
              *(_QWORD *)(v15 + v42) = v22;
              v14 = a2[2];
            }
            v43 = a2[3];
            if (v43 < v14)
              a2[3] = v43 + 1;
          }
          if (++v12 >= *((_QWORD *)a4 + 1))
            return result;
        }
      }
      if (v16 > 0.0)
      {
        v61 = a2[3];
        do
        {
          v62 = *(_QWORD *)(v17 + 8 * v12);
          if (v61)
          {
            v63 = (double *)(v13 + 8 * v61);
            v64 = (_QWORD *)(*a2 + 8 * v61);
            while (1)
            {
              v65 = *(v63 - 1);
              v14 = a2[2];
              if (v65 <= 0.0)
                break;
              if (v61 < v14)
              {
                *v63 = v65;
                *v64 = *(v64 - 1);
              }
              --v63;
              --v64;
              if (!--v61)
              {
                v14 = a2[2];
                break;
              }
            }
          }
          if (v61 < v14)
          {
            v66 = 8 * v61;
            *(_QWORD *)(v13 + v66) = 0;
            *(_QWORD *)(v15 + v66) = v62;
            v14 = a2[2];
          }
          v61 = a2[3];
          if (v61 < v14)
            a2[3] = ++v61;
          ++v12;
        }
        while (v12 < *((_QWORD *)a4 + 1));
      }
    }
  }
  else
  {
    v47 = *a4;
    v48 = a3->f64[v47];
    v49 = v48 - *((double *)a4 + 1);
    v50 = v48 - *((double *)a4 + 2);
    v51 = v49 + v50;
    v52 = v49 + v50 < 0.0;
    if (v49 + v50 >= 0.0)
      v53 = *((_QWORD *)a4 + 4);
    else
      v53 = *((_QWORD *)a4 + 3);
    v54 = v50 * v50;
    v55 = v49 * v49;
    if (v52)
      v56 = v54;
    else
      v56 = v55;
    result = sub_239BEC098(result, a2, a3, v53, a6, a7);
    v57 = *a5;
    v58 = *(double *)(*a5 + 8 * v47);
    v59 = v56 + a6 - v58;
    *(double *)(*a5 + 8 * v47) = v56;
    if (v59 * a7 <= *(double *)(a2[1] + 8 * a2[2] - 8))
    {
      if (v51 >= 0.0)
        v60 = v10;
      else
        v60 = v11;
      result = sub_239BEC098(v9, a2, a3, v60, v59, a7);
      v57 = *a5;
    }
    *(double *)(v57 + 8 * v47) = v58;
  }
  return result;
}

_QWORD *sub_239BEC3D4(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  uint64_t *v22;
  int v23;
  int v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  unint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  double *v46;
  float64x2_t *v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double *v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  unint64_t v72;
  uint64_t *v73;
  double v74;
  double v75;
  uint64_t v76;
  double v77;
  unint64_t v78;
  double v79;
  double v80;
  double v81;
  unint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  unint64_t v91;
  const void *v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  const void *v102;
  int64_t v103;
  char *v104;
  double *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double *v111;
  double *v112;
  double *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v120;
  double *v121;
  double v122;
  uint64_t v123;
  unint64_t v124;
  BOOL v126;
  const double *v128;
  const double *v129;
  double *v130;
  uint64_t v131;
  unint64_t *v132;
  _QWORD v133[3];
  _QWORD v134[3];
  float64x2x2_t v135;
  float64x2x2_t v136;
  float64x2x2_t v137;
  float64x2x2_t v138;
  float64x2x2_t v139;

  v8 = a1[11];
  if (v8 >= 0x30)
  {
    v10 = (_QWORD *)a1[13];
    goto LABEL_5;
  }
  a1[15] += v8;
  v9 = malloc_type_malloc(0x2000uLL, 0x933F5985uLL);
  if (v9)
  {
    *v9 = a1[12];
    a1[12] = (uint64_t)v9;
    v10 = v9 + 1;
    v8 = 8184;
LABEL_5:
    a1[11] = v8 - 48;
    v11 = a1[14] + 48;
    a1[13] = (uint64_t)(v10 + 6);
    a1[14] = v11;
    goto LABEL_6;
  }
  fwrite("Failed to allocate memory.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  v10 = 0;
LABEL_6:
  v12 = a3 - a2;
  if (a3 - a2 <= a1[4])
  {
    v10[3] = 0;
    v10[4] = 0;
    *v10 = a2;
    v10[1] = a3;
    v38 = *((unsigned int *)a1 + 14);
    if ((int)v38 < 1)
      return v10;
    v39 = (uint64_t *)a1[16];
    v40 = *(_QWORD *)(*a1 + 8 * a2) * *((int *)v39 + 7);
    v41 = *v39;
    v42 = *a4;
    if (v38 > 7
      && ((v43 = v41 + 8 * v40, v42 < v41 + 8 * (v40 + v38)) ? (v44 = v43 >= v42 + 16 * v38) : (v44 = 1), v44))
    {
      v45 = v38 & 0x7FFFFFFC;
      v46 = (double *)(v42 + 32);
      v47 = (float64x2_t *)(v43 + 16);
      v48 = v38 & 0xFFFFFFFC;
      do
      {
        v135.val[0] = v47[-1];
        v137.val[0] = *v47;
        v135.val[1] = v135.val[0];
        v49 = v46 - 4;
        vst2q_f64(v49, v135);
        v137.val[1] = v137.val[0];
        vst2q_f64(v46, v137);
        v46 += 8;
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      if (v45 == v38)
      {
LABEL_39:
        v54 = a2 + 1;
        if (a2 + 1 < a3)
        {
          v55 = *a1;
          v56 = (uint64_t *)a1[16];
          v57 = *((int *)v56 + 7);
          v58 = *v56;
          v59 = *a4 + 8;
          v60 = 8 * v57;
          do
          {
            v61 = (double *)(v58 + v60 * *(_QWORD *)(v55 + 8 * v54));
            v62 = (double *)v59;
            v63 = v38;
            do
            {
              v64 = *v61;
              if (*(v62 - 1) > *v61)
              {
                *(v62 - 1) = v64;
                v64 = *v61;
              }
              if (*v62 < v64)
                *v62 = v64;
              v62 += 2;
              ++v61;
              --v63;
            }
            while (v63);
            ++v54;
          }
          while (v54 != a3);
        }
        return v10;
      }
    }
    else
    {
      v45 = 0;
    }
    v50 = v38 - v45;
    v51 = (_QWORD *)(v42 + 16 * v45 + 8);
    v52 = (uint64_t *)(v41 + 8 * (v45 + v40));
    do
    {
      *(v51 - 1) = *v52;
      v53 = *v52++;
      *v51 = v53;
      v51 += 2;
      --v50;
    }
    while (v50);
    goto LABEL_39;
  }
  v13 = *a1;
  v14 = (_QWORD *)(*a1 + 8 * a2);
  v15 = *a4;
  v16 = *(double *)(*a4 + 8) - *(double *)*a4;
  v17 = *((unsigned int *)a1 + 14);
  if ((int)v17 > 1)
  {
    v18 = v17 - 1;
    v19 = (double *)(v15 + 24);
    do
    {
      v20 = *(v19 - 1);
      if (*v19 - v20 > v16)
        v16 = *v19 - v20;
      v19 += 2;
      --v18;
    }
    while (v18);
  }
  if ((int)v17 < 1)
  {
    v23 = 0;
    v24 = 0;
    v22 = (uint64_t *)a1[16];
  }
  else
  {
    v21 = v16 * 0.99999;
    v22 = (uint64_t *)a1[16];
    if (v12 <= 1)
    {
      v23 = 0;
      v24 = 0;
      v120 = 0;
      v121 = (double *)(v15 + 8);
      v122 = -1.0;
      do
      {
        if (*v121 - *(v121 - 1) > v21)
        {
          v123 = v120 + *v14 * *((int *)v22 + 7);
          if (*(double *)(*v22 + 8 * v123) - *(double *)(*v22 + 8 * v123) > v122)
          {
            v23 = v120;
            v24 = v120;
            v122 = *(double *)(*v22 + 8 * v123) - *(double *)(*v22 + 8 * v123);
          }
        }
        ++v120;
        v121 += 2;
      }
      while (v120 < (int)v17);
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = -1.0;
      do
      {
        if (*(double *)(v15 + 16 * v25 + 8) - *(double *)(v15 + 16 * v25) > v21)
        {
          v27 = *((int *)v22 + 7);
          v28 = *v22;
          v29 = *(double *)(*v22 + 8 * (v25 + *v14 * v27));
          v30 = (uint64_t *)(v13 + 8 * a2 + 8);
          v31 = ~a2 + a3;
          v32 = v29;
          v33 = v29;
          do
          {
            v34 = *v30++;
            v35 = v25 + v34 * v27;
            v36 = *(double *)(v28 + 8 * v35);
            if (v36 < v29)
            {
              v29 = *(double *)(v28 + 8 * v35);
              v33 = v32;
            }
            if (v36 > v33)
            {
              v32 = *(double *)(v28 + 8 * v35);
              v33 = v32;
            }
            --v31;
          }
          while (v31);
          v37 = v32 - v29;
          if (v37 > v26)
          {
            v23 = v25;
            v24 = v25;
            v26 = v37;
          }
        }
        ++v25;
      }
      while (v25 < (int)v17);
    }
  }
  v65 = v24;
  v66 = (double *)(v15 + 16 * v24);
  v67 = *v66;
  v68 = v66[1];
  v69 = *((int *)v22 + 7);
  v70 = *v22;
  v71 = *(double *)(v70 + 8 * (v65 + *v14 * v69));
  if (v12 < 2)
  {
    v74 = *(double *)(v70 + 8 * (v65 + *v14 * v69));
  }
  else
  {
    v72 = ~a2 + a3;
    v73 = (uint64_t *)(v13 + 8 * a2 + 8);
    v74 = *(double *)(v70 + 8 * (v65 + *v14 * v69));
    v75 = v74;
    do
    {
      v76 = *v73++;
      v77 = *(double *)(v70 + 8 * (v65 + v76 * v69));
      if (v77 < v71)
      {
        v71 = v77;
        v75 = v74;
      }
      if (v77 > v75)
      {
        v74 = v77;
        v75 = v77;
      }
      --v72;
    }
    while (v72);
  }
  v78 = 0;
  v79 = (v67 + v68) * 0.5;
  if (v79 <= v74)
    v80 = v79;
  else
    v80 = v74;
  if (v79 >= v71)
    v81 = v80;
  else
    v81 = v71;
  v82 = v12 - 1;
  v83 = v12 - 1;
  do
  {
LABEL_66:
    if (*(double *)(v70 + 8 * (v65 + v14[v78] * v69)) >= v81)
      break;
    ++v78;
  }
  while (v78 <= v83);
  while (1)
  {
    v84 = v83 != 0;
    if (v78 > v83)
      goto LABEL_75;
    if (v83)
    {
      while (*(double *)(v70 + 8 * (v65 + v14[v83] * v69)) >= v81)
      {
        v85 = v83 - 1;
        v84 = v83 != 1;
        if (v78 <= v83 - 1)
        {
          if (--v83)
            continue;
        }
        goto LABEL_78;
      }
      v84 = 1;
LABEL_75:
      v85 = v83;
      if (v78 > v83)
        break;
      goto LABEL_79;
    }
    v85 = 0;
LABEL_78:
    if (v78 > v85)
      break;
LABEL_79:
    if (!v84)
      break;
    v86 = v14[v78];
    v14[v78] = v14[v85];
    v14[v85] = v86;
    ++v78;
    v83 = v85 - 1;
    if (v78 <= v85 - 1)
      goto LABEL_66;
  }
  v87 = a1[16];
  v88 = v78;
  if (v78 > v82)
    goto LABEL_88;
  do
  {
LABEL_86:
    if (*(double *)(*(_QWORD *)v87 + 8 * (v65 + v14[v88] * *(int *)(v87 + 28))) > v81)
      break;
    ++v88;
  }
  while (v88 <= v82);
LABEL_88:
  while (2)
  {
    v90 = v82 != 0;
    if (v88 > v82)
    {
LABEL_95:
      v91 = v82;
      if (v88 > v82)
        break;
      goto LABEL_84;
    }
    if (v82)
    {
      while (*(double *)(*(_QWORD *)v87 + 8 * (v65 + v14[v82] * *(int *)(v87 + 28))) > v81)
      {
        v91 = v82 - 1;
        v90 = v82 != 1;
        if (v88 <= v82 - 1)
        {
          if (--v82)
            continue;
        }
        goto LABEL_98;
      }
      v90 = 1;
      goto LABEL_95;
    }
    v91 = 0;
LABEL_98:
    if (v88 <= v91)
    {
LABEL_84:
      if (!v90)
        break;
      v89 = v14[v88];
      v14[v88] = v14[v91];
      v14[v91] = v89;
      ++v88;
      v82 = v91 - 1;
      if (v88 <= v91 - 1)
        goto LABEL_86;
      continue;
    }
    break;
  }
  v132 = a4;
  *(_DWORD *)v10 = v23;
  v92 = (const void *)*a4;
  v93 = a4[1] - *a4;
  if (v93 < 0)
    sub_2394189F8();
  v94 = v12 >> 1;
  if (v88 >= v94)
    v95 = v94;
  else
    v95 = v88;
  if (v78 <= v94)
    v96 = v95;
  else
    v96 = v78;
  v97 = (char *)operator new(v93);
  v134[0] = v97;
  v134[2] = &v97[v93];
  memcpy(v97, v92, v93);
  v134[1] = &v97[v93];
  v98 = &v97[16 * v23];
  *((double *)v98 + 1) = v81;
  v99 = v98 + 8;
  v100 = v96 + a2;
  v10[3] = sub_239BEC3D4(a1, a2, v96 + a2, v134);
  v101 = v132[1];
  v102 = (const void *)*v132;
  v103 = v101 - *v132;
  if (v103 < 0)
    sub_2394189F8();
  v104 = (char *)operator new(v101 - *v132);
  v133[0] = v104;
  v133[2] = &v104[16 * (v103 >> 4)];
  memcpy(v104, v102, v103);
  v133[1] = &v104[16 * (v103 >> 4)];
  v105 = (double *)&v104[16 * v23];
  *v105 = v81;
  v10[4] = sub_239BEC3D4(a1, v100, a3, v133);
  v10[1] = *v99;
  v10[2] = *(_QWORD *)v105;
  v106 = *((unsigned int *)a1 + 14);
  if ((int)v106 >= 1)
  {
    v107 = *v132;
    if (v106 > 5)
    {
      v108 = 0;
      v124 = v107 + 16 * v106;
      v126 = v107 < (unint64_t)&v97[16 * v106] && (unint64_t)v97 < v124;
      if ((unint64_t)v104 < v124 && v107 < (unint64_t)&v104[16 * v106])
        goto LABEL_110;
      if (v126)
        goto LABEL_110;
      v108 = v106 & 0xFFFFFFFE;
      v128 = (const double *)v97;
      v129 = (const double *)v104;
      v130 = (double *)*v132;
      v131 = v108;
      do
      {
        v136 = vld2q_f64(v129);
        v129 += 4;
        v138 = vld2q_f64(v128);
        v128 += 4;
        v139.val[0] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v138.val[0], v136.val[0]), (int8x16_t)v136.val[0], (int8x16_t)v138.val[0]);
        v139.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v136.val[1], v138.val[1]), (int8x16_t)v136.val[1], (int8x16_t)v138.val[1]);
        vst2q_f64(v130, v139);
        v130 += 4;
        v131 -= 2;
      }
      while (v131);
      if (v108 != v106)
        goto LABEL_110;
    }
    else
    {
      v108 = 0;
LABEL_110:
      v109 = v106 - v108;
      v110 = (16 * v108) | 8;
      v111 = (double *)(v107 + v110);
      v112 = (double *)&v104[v110];
      v113 = (double *)&v97[v110];
      do
      {
        v114 = *(v112 - 1);
        if (v114 >= *(v113 - 1))
          v114 = *(v113 - 1);
        *(v111 - 1) = v114;
        v115 = *v113;
        v113 += 2;
        v116 = v115;
        v117 = *v112;
        v112 += 2;
        v118 = v117;
        if (v116 < v117)
          v116 = v118;
        *v111 = v116;
        v111 += 2;
        --v109;
      }
      while (v109);
    }
  }
  operator delete(v104);
  operator delete(v97);
  return v10;
}

void sub_239BECBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL sub_239BECBF8(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t *v12;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v17;
  double v22;
  unint64_t v23;
  double *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  double *v28;
  double *v29;
  __int128 v30;
  double v35;
  double v36;
  double v37;
  char *v38;
  double v41;
  uint64_t v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  double *v47;
  double *v48;
  char *v49;
  unint64_t *v50;
  unint64_t *v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  sub_2394B5624(a1, (uint64_t)&v50, 1);
  v4 = v50;
  v5 = v51;
  v6 = (char *)v51 - (char *)v50;
  if ((unint64_t)((char *)v51 - (char *)v50) >= 0x10)
  {
    if ((unint64_t)v6 >= 0x5555555555555551)
      sub_2394189F8();
    v9 = v6 >> 3;
    v10 = (double *)operator new(24 * (v6 >> 3));
    v47 = v10;
    v48 = v10;
    v49 = (char *)&v10[3 * v9];
    if (v4 == v5)
      goto LABEL_34;
    v43 = a2;
    do
    {
      v12 = sub_2394650AC(a1, *v4);
      *(_QWORD *)&_Q0.f64[0] = v12[10];
      _Q4 = *((_OWORD *)v12 + 8);
      *(_QWORD *)&v15.f64[0] = v12[22];
      *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v15);
      v16 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v12 + 10));
      *(_QWORD *)&_Q0.f64[1] = v12[14];
      v17 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v12 + 4), *((int64x2_t *)v12 + 6)), v16.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v12 + 4), *((int64x2_t *)v12 + 6)), v16, 1), _Q0, v15.f64[0]);
      _Q0.f64[0] = v16.f64[1];
      __asm { FMLA            D1, D0, V4.D[1] }
      v22 = vmlad_n_f64(_D1, *((double *)v12 + 18), v15.f64[0]);
      v23 = vextq_s8(v17, v17, 8uLL).u64[0];
      v24 = v48;
      if (v48 < (double *)v49)
      {
        v48[2] = v22;
        v17.i64[1] = v23;
        *(int8x16_t *)v48 = v17;
        v11 = v48 + 3;
      }
      else
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * (v48 - v47) + 1;
        if (v25 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((v49 - (char *)v47) >> 3) > v25)
          v25 = 0x5555555555555556 * ((v49 - (char *)v47) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v49 - (char *)v47) >> 3) >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v25;
        if (v26)
        {
          v44 = v23;
          v45 = v22;
          v46 = v17.i64[0];
          if (v26 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v27 = (char *)operator new(24 * v26);
          v22 = v45;
          v17.i64[0] = v46;
          v23 = v44;
        }
        else
        {
          v27 = 0;
        }
        v28 = (double *)&v27[8 * (v48 - v47)];
        v28[2] = v22;
        v17.i64[1] = v23;
        *(int8x16_t *)v28 = v17;
        v29 = v28;
        if (v48 != v47)
        {
          do
          {
            v30 = *(_OWORD *)(v24 - 3);
            *(v29 - 1) = *(v24 - 1);
            *(_OWORD *)(v29 - 3) = v30;
            v29 -= 3;
            v24 -= 3;
          }
          while (v24 != v47);
          v24 = v47;
        }
        v11 = v28 + 3;
        v47 = v29;
        v49 = &v27[24 * v26];
        if (v24)
          operator delete(v24);
      }
      v48 = v11;
      ++v4;
    }
    while (v4 != v5);
    v10 = v47;
    _D2 = vextq_s8(*(int8x16_t *)v47, *(int8x16_t *)v47, 8uLL).u64[0];
    if (v47 == v11)
    {
LABEL_34:
      v7 = 0;
    }
    else
    {
      _Q1 = *(int8x16_t *)v43;
      _D4 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
      __asm { FMLA            D5, D2, V1.D[1] }
      v35 = *(double *)(v43 + 16);
      v36 = *(double *)(v43 + 24);
      v37 = v36 + _D5 + v47[2] * v35;
      v38 = (char *)(v47 + 3);
      do
      {
        _Q6 = *(_OWORD *)(v38 - 24);
        __asm { FMLA            D7, D4, V6.D[1] }
        v41 = v37 * (v36 + _D7 + *((double *)v38 - 1) * v35);
        v7 = v41 < 0.0;
        _ZF = v41 < 0.0 || v38 == (char *)v11;
        v38 += 24;
      }
      while (!_ZF);
    }
    operator delete(v10);
    v4 = v50;
    if (v50)
      goto LABEL_3;
  }
  else
  {
    v7 = 1;
    if (v50)
    {
LABEL_3:
      v51 = v4;
      operator delete(v4);
    }
  }
  return v7;
}

void sub_239BECEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v22 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_239BECF4C(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  double v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double *v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  double *v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  double *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  double *v31;
  double *v32;
  unint64_t v33;
  double *v34;
  unint64_t v35;
  double v36;
  double *v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double v41;
  uint64_t *v42;
  double v45;
  double v46;
  int8x16_t v47;
  unint64_t *v48;
  unint64_t *v49;
  uint64_t v50;
  void *__p;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  double *v55;
  double *v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  __p = 0;
  v52 = 0;
  v53 = 0;
  sub_239A6CCD8(a1, (uint64_t)&__p);
  v5 = (uint64_t *)__p;
  v4 = v52;
  v6 = (char *)v52 - (_BYTE *)__p;
  if (v52 == __p)
  {
    v31 = 0;
    goto LABEL_44;
  }
  if (v6 < 0)
    sub_2394189F8();
  v54 = operator new((char *)v52 - (_BYTE *)__p);
  v55 = (double *)v54;
  v56 = (double *)((char *)v54 + 8 * (v6 >> 3));
  do
  {
    v7 = *v5;
    v8 = sub_2394A2EA8((uint64_t)a1, *v5);
    v46 = *((double *)v8 + 2);
    v47 = *(int8x16_t *)v8;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    sub_239BED368((uint64_t)a1, v7, (uint64_t)&v48);
    v10 = v48;
    v9 = v49;
    if (v48 != v49)
    {
      *(_QWORD *)&v45 = vextq_s8(v47, v47, 8uLL).u64[0];
      v11 = 0.0;
      do
      {
        v12 = (double *)sub_2394650AC((uint64_t)a1, *v10);
        v11 = v11 + v12[10] * *(double *)v47.i64 + v12[14] * v45 + v12[18] * v46 + v12[22];
        ++v10;
      }
      while (v10 != v9);
      v10 = v48;
      v13 = v11 / (double)(unint64_t)(v49 - v48);
      v14 = v55;
      if (v55 >= v56)
      {
        v16 = (double *)v54;
        v17 = (char *)v55 - (_BYTE *)v54;
        v18 = ((char *)v55 - (_BYTE *)v54) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          sub_2394189F8();
        v20 = (char *)v56 - (_BYTE *)v54;
        if (((char *)v56 - (_BYTE *)v54) >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_239418A80();
          v22 = operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = (double *)&v22[8 * v18];
        *v23 = v13;
        v15 = v23 + 1;
        if (v14 != v16)
        {
          v24 = (char *)(v14 - 1) - (char *)v16;
          if (v24 < 0x58)
            goto LABEL_57;
          if ((unint64_t)((char *)v14 - &v22[v17]) < 0x20)
            goto LABEL_57;
          v25 = (v24 >> 3) + 1;
          v26 = &v22[8 * v18 - 16];
          v27 = v14 - 2;
          v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *v26 = v29;
            v26 -= 2;
            v27 -= 4;
            v28 -= 4;
          }
          while (v28);
          v23 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
          v14 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
          if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              v30 = *((_QWORD *)v14-- - 1);
              *((_QWORD *)v23-- - 1) = v30;
            }
            while (v14 != v16);
          }
        }
        v54 = v23;
        v55 = v15;
        v56 = (double *)&v22[8 * v21];
        if (v16)
        {
          operator delete(v16);
          v10 = v48;
        }
      }
      else
      {
        *v55 = v13;
        v15 = v14 + 1;
      }
      v55 = v15;
    }
    if (v10)
    {
      v49 = v10;
      operator delete(v10);
    }
    ++v5;
  }
  while (v5 != v4);
  v31 = (double *)v54;
  v32 = v55;
  if (v54 == v55)
  {
LABEL_44:
    v42 = (uint64_t *)__p;
    if (!__p)
      goto LABEL_46;
    goto LABEL_45;
  }
  v33 = (unint64_t)(((char *)v55 - (_BYTE *)v54) >> 3) >> 1;
  v34 = (double *)((char *)v54 + 8 * v33);
  if (v34 != v55)
  {
    sub_2395F71EC((double *)v54, v34, v55);
    v31 = (double *)v54;
    v32 = v55;
  }
  *a2 = *(_QWORD *)&v31[v33];
  if (v31 == v32)
  {
    v36 = 0.0;
    goto LABEL_50;
  }
  v35 = (char *)v32 - (char *)v31 - 8;
  v36 = 0.0;
  v37 = v31;
  if (v35 < 8)
    goto LABEL_41;
  v38 = (v35 >> 3) + 1;
  v39 = v31 + 1;
  v40 = v38 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v36 = v36 + *(v39 - 1) + *v39;
    v39 += 2;
    v40 -= 2;
  }
  while (v40);
  if (v38 != (v38 & 0x3FFFFFFFFFFFFFFELL))
  {
    v37 = &v31[v38 & 0x3FFFFFFFFFFFFFFELL];
    do
    {
LABEL_41:
      v41 = *v37++;
      v36 = v36 + v41;
    }
    while (v37 != v32);
  }
LABEL_50:
  *a3 = v36 / (double)(unint64_t)(v32 - v31);
  v42 = (uint64_t *)__p;
  if (__p)
  {
LABEL_45:
    v52 = v42;
    operator delete(v42);
    v31 = (double *)v54;
  }
LABEL_46:
  if (v31)
  {
    v55 = v31;
    operator delete(v31);
  }
}

void sub_239BED2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v25;

  if (__p)
  {
    operator delete(__p);
    v25 = a23;
    if (!a23)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239BED368(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *i;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v4 = (uint64_t *)result;
  v5 = *(char **)a3;
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    *(_QWORD *)(a3 + 8) = v5;
  v6 = *(_QWORD *)(result + 40);
  if (!v6)
    return result;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v6 <= a2)
      v8 = a2 % v6;
  }
  else
  {
    v8 = ((_DWORD)v6 - 1) & a2;
  }
  v9 = *(uint64_t ***)(*(_QWORD *)(result + 32) + 8 * v8);
  if (!v9)
    return result;
  v10 = *v9;
  if (!*v9)
    return result;
  if (v7.u32[0] < 2uLL)
  {
    v11 = v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == a2)
      {
        if (*((_DWORD *)v10 + 4) == a2)
          goto LABEL_24;
      }
      else if ((v13 & v11) != v8)
      {
        return result;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return result;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == a2)
      break;
    if (v12 >= v6)
      v12 %= v6;
    if (v12 != v8)
      return result;
LABEL_13:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return result;
  }
  if (*((_DWORD *)v10 + 4) != a2)
    goto LABEL_13;
LABEL_24:
  v14 = v10[17];
  if (v14 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v5) >> 3)
  {
    if (v14 >> 61)
LABEL_63:
      sub_2394189F8();
    v15 = 8 * v14;
    v16 = (char *)operator new(8 * v14);
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v16;
    *(_QWORD *)(a3 + 16) = &v16[v15];
    if (v5)
      operator delete(v5);
  }
  for (i = (uint64_t *)v10[16]; i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)sub_239470FCC((uint64_t)v4, *((_DWORD *)i + 4)) + 232) == 2)
    {
      v19 = *((unsigned int *)i + 5);
      v20 = *v4;
      if (v19 >= (v4[1] - *v4) >> 6
        || ((_DWORD)v19 != -1 ? (v21 = *(_DWORD *)(v20 + (v19 << 6)) == -1) : (v21 = 1), v21))
      {
        sub_239A444D4((uint64_t)"unknown file", 308, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (*(_BYTE *)(v20 + (v19 << 6) + 59) == 2)
      {
        v23 = *(char **)(a3 + 8);
        v22 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v23 < v22)
        {
          *(_QWORD *)v23 = *((unsigned int *)i + 4);
          v18 = v23 + 8;
        }
        else
        {
          v24 = *(char **)a3;
          v25 = (uint64_t)&v23[-*(_QWORD *)a3];
          v26 = v25 >> 3;
          v27 = (v25 >> 3) + 1;
          if (v27 >> 61)
            goto LABEL_63;
          v28 = v22 - (_QWORD)v24;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            if (v29 >> 61)
              sub_239418A80();
            v30 = operator new(8 * v29);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[8 * v26];
          *v31 = *((unsigned int *)i + 4);
          v18 = v31 + 1;
          if (v23 != v24)
          {
            v32 = v23 - 8 - v24;
            if (v32 < 0x58)
              goto LABEL_67;
            if ((unint64_t)(v23 - &v30[v25]) < 0x20)
              goto LABEL_67;
            v33 = (v32 >> 3) + 1;
            v34 = &v30[8 * v26 - 16];
            v35 = v23 - 16;
            v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 4;
            }
            while (v36);
            v31 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
            v23 -= 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_67:
              do
              {
                v38 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *--v31 = v38;
              }
              while (v23 != v24);
            }
          }
          *(_QWORD *)a3 = v31;
          *(_QWORD *)(a3 + 8) = v18;
          *(_QWORD *)(a3 + 16) = &v30[8 * v29];
          if (v24)
            operator delete(v24);
        }
        *(_QWORD *)(a3 + 8) = v18;
      }
    }
  }
  return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

uint64_t sub_239BED6A0(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v16;
  int64x2_t v17;
  float64x2_t v18;
  unint64_t v19;
  int64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v35;
  int64x2_t v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  uint64_t v54;
  int8x16_t v55;
  unint64_t v56;
  int8x16_t *v57;
  uint64_t *v58;
  int8x16_t *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t v65;
  unint64_t *v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  unint64_t *v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  char *v81;
  size_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  BOOL v93;
  char *v95;
  char *v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  int8x16_t *v106;
  unint64_t v108;
  int8x16_t *v109;
  unint64_t i;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int *v116;
  _BYTE *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v121;
  int8x8_t v122;
  uint8x8_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  int8x8_t v133;
  uint8x8_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t **v162;
  int64_t v163;
  unint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  unint64_t *v169;
  char *v170;
  int64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  char *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  char *v184;
  uint64_t v185;
  __int128 v186;
  char *v187;
  BOOL v188;
  unint64_t *v189;
  unint64_t v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char **v195;
  uint64_t v196;
  uint64_t v197;
  double *v198;
  double *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  __int128 v204;
  char *v205;
  char *v206;
  double *v207;
  __int128 v208;
  double *v209;
  char *v210;
  double *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  __int128 v216;
  char *v217;
  char *v218;
  __int128 v219;
  _BOOL4 v220;
  char *v221;
  uint64_t v222;
  char *v224;
  void *v225;
  char *v226;
  void *v227;
  void *v228;
  float64_t v229;
  float64_t v230;
  float64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  void *v234;
  void *v235;
  double *v236;
  double *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  double *v243;
  double *v244;
  unint64_t v245;
  double v246;
  __int128 v247;
  float64x2_t v251;
  unint64_t v252;
  double *v253;
  int8x16_t v254;
  unint64_t v255;
  float64x2_t v256;
  int8x16_t v257;
  float64x2_t v260;
  int8x16_t v261;
  int8x16_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  double *v269;
  double *j;
  uint64_t v271;
  double v275;
  float64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  BOOL v282;
  __int128 v283;
  int8x16_t v286;
  unint64_t v287;
  unint64_t v288;
  double v289;
  uint64_t v290;
  int8x16_t v291;
  unint64_t v292;
  int8x16_t v293;
  uint64_t v294;
  uint64_t v295;
  float64x2_t v296;
  unint64_t v297;
  float64x2_t v298;
  float64x2_t v299;
  unint64_t v300;
  double v301;
  float64_t v302;
  float64_t v303;
  unint64_t v304;
  float64_t v305;
  float64_t v306;
  uint64_t v308;
  void *__p;
  void *v310;
  uint64_t v311;
  void *v312;
  int *v313;
  char *v314;
  void *v315;
  char *v316;
  _QWORD *v317;
  float64x2_t v318[3];
  float64x2_t v319;
  double v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  void *v326;
  char *v327;
  char *v328;
  double *v329;
  double *v330;
  char *v331;
  unint64_t *v332;
  unint64_t *v333;
  unint64_t *v334;
  unint64_t *v335;
  unint64_t *v336;
  uint64_t v337;
  int8x16_t *v338;
  int8x16_t *v339;
  char *v340;
  unint64_t v341;
  unint64_t v342[3];

  v338 = 0;
  v339 = 0;
  v340 = 0;
  v335 = 0;
  v336 = 0;
  v337 = 0;
  sub_2394B5624(a1, (uint64_t)&v335, 1);
  v5 = v335;
  v4 = v336;
  v6 = (char *)v336 - (char *)v335;
  if (v336 == v335)
    goto LABEL_375;
  if ((unint64_t)v6 > 0x5555555555555550)
    sub_2394189F8();
  v338 = (int8x16_t *)operator new(24 * (v6 >> 3));
  v339 = v338;
  v340 = &v338->i8[24 * (v6 >> 3)];
  v332 = (unint64_t *)operator new((char *)v4 - (char *)v5);
  v333 = v332;
  v334 = &v332[v6 >> 3];
  __asm { FMOV            V0.2D, #-1.0 }
  v296 = _Q0;
  do
  {
    v11 = *v5;
    v12 = sub_239470FCC(a1, *v5);
    _Q1 = *((_OWORD *)v12 + 13);
    _D3 = v12[27];
    __asm { FMLA            D2, D3, V1.D[1] }
    if (sqrt(_D2 + *((double *)v12 + 28) * *((double *)v12 + 28)) >= 2.22044605e-16)
    {
      v16 = sub_2394650AC(a1, v11);
      v18 = *((float64x2_t *)v16 + 4);
      v19 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
      v20.i64[0] = v16[14];
      v21 = *((float64x2_t *)v16 + 6);
      *(_QWORD *)&v22 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
      v23 = *((double *)v16 + 18);
      _Q0 = *((float64x2_t *)v16 + 8);
      *(_QWORD *)&_D1 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
      *(_QWORD *)&v318[1].f64[0] = v16[10];
      v17.i64[0] = *(_QWORD *)&v318[1].f64[0];
      v318[0] = v18;
      *(float64x2_t *)((char *)&v318[1] + 8) = v21;
      *(_QWORD *)&v318[2].f64[1] = v20.i64[0];
      v320 = v23;
      v319 = _Q0;
      v26 = (float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v21);
      v27 = (float64x2_t)vzip2q_s64((int64x2_t)v18, (int64x2_t)v21);
      v28 = (float64x2_t)vzip1q_s64(v17, v20);
      _Q21 = (int64x2_t)vmulq_f64(_Q0, v18);
      _D22 = v18.f64[1];
      __asm { FMLA            D21, D22, V0.D[1] }
      *(double *)_Q21.i64 = *(double *)_Q21.i64 + v23 * v318[1].f64[0];
      _Q23 = (int8x16_t)vmulq_f64(_Q0, v21);
      _D24 = v21.f64[1];
      __asm { FMLA            D23, D24, V0.D[1] }
      _D24 = _Q0.f64[1];
      *(double *)_Q23.i64 = *(double *)_Q23.i64 + v23 * *(double *)v20.i64;
      __asm { FMLA            D26, D24, V0.D[1] }
      v35.f64[0] = _D26 + v23 * v23;
      v36 = (int64x2_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v21.f64[0]), v27, v21, 1), v28, *(double *)v20.i64), (float64x2_t)xmmword_239EC6830);
      *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v35, v296));
      v35.f64[1] = NAN;
      v37 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v18.f64[0]), v27, v18, 1), v28, v318[1].f64[0]), (float64x2_t)xmmword_239EC6820)), v35), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v36, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v36)), vabsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q0.f64[0]), v27, _Q0, 1), v28, v23)))));
      v38 = -*(double *)v20.i64;
      if (v37 > 0.0001
        || (v39.f64[0] = v18.f64[0],
            *(_QWORD *)&v39.f64[1] = v19,
            v40.f64[0] = _D1,
            v40.f64[1] = _Q0.f64[0],
            v41.f64[0] = v22,
            v41.f64[1] = v21.f64[0],
            v42 = vmulq_f64(v39, vmlaq_n_f64(vmulq_n_f64(v40, v38), v41, v23)),
            fabs(v318[1].f64[0] * (_D1 * v21.f64[0] - v22 * _Q0.f64[0])+ vsubq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1)).f64[0]+ -1.0) > 0.0001))
      {
        if (v37 > 0.1
          || (*(_QWORD *)&v18.f64[1] = v19,
              v46.f64[0] = _D1,
              v46.f64[1] = _Q0.f64[0],
              v47.f64[0] = v22,
              v47.f64[1] = v21.f64[0],
              v48 = vmulq_f64(v18, vmlaq_n_f64(vmulq_n_f64(v46, v38), v47, v23)),
              fabs(v318[1].f64[0] * (_D1 * v21.f64[0] - v22 * _Q0.f64[0])+ vsubq_f64(v48, (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1)).f64[0]+ -1.0) > 0.1))
        {
          sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        sub_239516070(v318);
        v28.f64[0] = v318[1].f64[0];
        _Q0.f64[1] = v319.f64[1];
        v26 = (float64x2_t)vzip1q_s64((int64x2_t)v318[0], *(int64x2_t *)((char *)&v318[1] + 8));
        _D1 = v319.f64[1];
        v44 = *(_QWORD *)&v318[2].f64[0];
        v27.f64[0] = v318[0].f64[1];
        v45 = *(_QWORD *)&v318[2].f64[1];
        v23 = v320;
        v43 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
      }
      else
      {
        v43 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
        v44 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
        v45 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      }
      v49 = *((double *)v12 + 28);
      _Q18 = *((float64x2_t *)v12 + 13);
      *(_QWORD *)&v28.f64[1] = v45;
      *(_QWORD *)&v26.f64[1] = v43;
      *(_QWORD *)&v27.f64[1] = v44;
      _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q18.f64[0]), v27, _Q18, 1), v28, v49);
      __asm { FMLA            D0, D1, V18.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + v23 * v49;
      _Q1 = vmulq_f64(_Q4, _Q4);
      _D2 = _Q4.f64[1];
      __asm { FMLA            D1, D2, V4.D[1] }
      _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
      v54 = *(_OWORD *)&vmulq_f64(_Q0, _Q1);
      v55 = (int8x16_t)vmulq_n_f64(_Q4, _Q1.f64[0]);
      v56 = vextq_s8(v55, v55, 8uLL).u64[0];
      v57 = v339;
      if (v339 >= (int8x16_t *)v340)
      {
        v59 = v338;
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v339 - (char *)v338) >> 3) + 1;
        if (v60 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((v340 - (char *)v338) >> 3) > v60)
          v60 = 0x5555555555555556 * ((v340 - (char *)v338) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v340 - (char *)v338) >> 3) >= 0x555555555555555)
          v61 = 0xAAAAAAAAAAAAAAALL;
        else
          v61 = v60;
        if (v61)
        {
          v290 = v54;
          v292 = v56;
          v294 = v55.i64[0];
          if (v61 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v62 = (char *)operator new(24 * v61);
          v56 = v292;
          v55.i64[0] = v294;
          v54 = v290;
        }
        else
        {
          v62 = 0;
        }
        v63 = (int8x16_t *)&v62[8 * (((char *)v57 - (char *)v59) >> 3)];
        v63[1].i64[0] = v54;
        v55.i64[1] = v56;
        *v63 = v55;
        v64 = v63;
        if (v57 != v59)
        {
          do
          {
            v65 = *(int8x16_t *)((char *)v57 - 24);
            v64[-1].i64[1] = v57[-1].i64[1];
            *(int8x16_t *)((char *)v64 - 24) = v65;
            v64 = (int8x16_t *)((char *)v64 - 24);
            v57 = (int8x16_t *)((char *)v57 - 24);
          }
          while (v57 != v59);
          v57 = v338;
        }
        v58 = &v63[1].i64[1];
        v338 = v64;
        v339 = (int8x16_t *)((char *)v63 + 24);
        v340 = &v62[24 * v61];
        if (v57)
          operator delete(v57);
      }
      else
      {
        v339[1].i64[0] = v54;
        v55.i64[1] = v56;
        *v57 = v55;
        v58 = &v57[1].i64[1];
      }
      v339 = (int8x16_t *)v58;
      v66 = v333;
      if (v333 < v334)
      {
        *v333 = v11;
        v10 = v66 + 1;
      }
      else
      {
        v67 = v332;
        v68 = v333 - v332;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61)
          sub_2394189F8();
        v70 = (char *)v334 - (char *)v332;
        if (((char *)v334 - (char *)v332) >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          if (v71 >> 61)
            sub_239418A80();
          v72 = operator new(8 * v71);
        }
        else
        {
          v72 = 0;
        }
        v73 = (unint64_t *)&v72[8 * v68];
        *v73 = v11;
        v10 = v73 + 1;
        if (v66 != v67)
        {
          v74 = (char *)(v66 - 1) - (char *)v67;
          if (v74 < 0x58)
            goto LABEL_398;
          if ((unint64_t)((char *)v67 - v72) < 0x20)
            goto LABEL_398;
          v75 = (v74 >> 3) + 1;
          v76 = &v72[8 * v68 - 16];
          v77 = v66 - 2;
          v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *v76 = v79;
            v76 -= 2;
            v77 -= 4;
            v78 -= 4;
          }
          while (v78);
          v73 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
          v66 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_398:
            do
            {
              v80 = *--v66;
              *--v73 = v80;
            }
            while (v66 != v67);
          }
        }
        v332 = v73;
        v334 = (unint64_t *)&v72[8 * v71];
        if (v67)
          operator delete(v67);
      }
      v333 = v10;
    }
    ++v5;
  }
  while (v5 != v4);
  v81 = (char *)v338;
  if (v338 != v339)
  {
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v82 = (char *)v339 - (char *)v338;
    v83 = ((char *)v339 - (char *)v338) >> 3;
    v326 = 0;
    v327 = 0;
    v328 = 0;
    if (v83 >> 61)
      sub_2394189F8();
    v84 = (char *)operator new((char *)v339 - (char *)v338);
    v326 = v84;
    v328 = &v84[8 * v83];
    bzero(v84, v82);
    v327 = &v84[v82];
    if (0xAAAAAAAAAAAAAAABLL * v83 <= 1)
      v85 = 1;
    else
      v85 = 0xAAAAAAAAAAAAAAABLL * v83;
    if (v85 <= 0xF)
      goto LABEL_58;
    v86 = 0;
    v87 = !is_mul_ok(v85 - 1, 0x18uLL);
    v88 = 24 * (v85 - 1);
    v89 = (unint64_t)&v84[v88 + 8];
    v90 = (unint64_t)&v84[v88 + 16];
    v91 = &v84[v88];
    v93 = v90 >= (unint64_t)(v84 + 16) && v89 >= (unint64_t)(v84 + 8) && v91 >= v84;
    if (!v93 || v87)
      goto LABEL_77;
    if (v84 >= &v81[24 * v85] || v81 >= &v84[24 * v85])
    {
      v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
      v95 = v81;
      v96 = v84;
      v97 = v85 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v98 = *(_OWORD *)v95;
        v99 = *((_OWORD *)v95 + 2);
        *((_OWORD *)v96 + 1) = *((_OWORD *)v95 + 1);
        *((_OWORD *)v96 + 2) = v99;
        *(_OWORD *)v96 = v98;
        v96 += 48;
        v95 += 48;
        v97 -= 2;
      }
      while (v97);
      if (v85 == v86)
      {
LABEL_79:
        sub_2396B9AB0(&v324);
        v106 = v338;
        v105 = (char *)v339;
        sub_239644B14(&v322, 5, 3, 1, 0);
        sub_2396B9BC0((uint64_t)&v324, (uint64_t)&v326, -1431655765 * ((unint64_t)(v105 - (char *)v106) >> 3), 3, v322, v323);
        v320 = 0.0;
        v319 = 0u;
        memset(v318, 0, sizeof(v318));
        __asm { FMOV            V0.2D, #1.0 }
        v321 = _Q0;
        if (v339 != v338)
        {
          v108 = 0;
          do
          {
            v315 = (void *)0x3FF0000000000000;
            sub_239BEF0D8((uint64_t)v318, v108++, &v315);
            v109 = v338;
          }
          while (v108 < 0xAAAAAAAAAAAAAAABLL * (((char *)v339 - (char *)v338) >> 3));
          if (v339 != v338)
          {
            for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((char *)v339 - (char *)v338) >> 3); ++i)
            {
              v111 = &v109->i8[24 * i];
              v112 = *(_QWORD *)v111;
              v113 = *((_QWORD *)v111 + 1);
              v114 = *((_QWORD *)v111 + 2);
              v115 = (char *)operator new(0x18uLL);
              v316 = v115 + 24;
              v317 = v115 + 24;
              *(_QWORD *)v115 = v112;
              *((_QWORD *)v115 + 1) = v113;
              *((_QWORD *)v115 + 2) = v114;
              v314 = 0;
              v315 = v115;
              v312 = 0;
              v313 = 0;
              __p = 0;
              v310 = 0;
              v311 = 0;
              sub_2396B9AA4((uint64_t)&v308, 0, 0.0);
              sub_2396BA22C((uint64_t)&v324, (uint64_t)&v315, &v312, (uint64_t)&__p, v308, 0.030384494);
              v116 = (int *)v312;
              v117 = v313;
              if (v313 == v312)
              {
                v116 = v313;
                goto LABEL_199;
              }
              v118 = 0;
              do
              {
                v119 = v116[v118];
                v341 = v119;
                v342[0] = i;
                if (*(_QWORD *)&v319.f64[1] <= i
                  || (*(_QWORD *)&v319.f64[1] > v119
                    ? (_ZF = (*(_QWORD *)(*(_QWORD *)&v319.f64[0] + 8 * (i >> 6)) & (1 << i)) == 0)
                    : (_ZF = 1),
                      _ZF
                   || ((*(_QWORD *)(*(_QWORD *)&v319.f64[0] + ((v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v119) & 1) == 0))
                {
                  sub_239A444D4((uint64_t)"unknown file", 126, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v121 = (uint64_t *)(*(_QWORD *)&v318[0].f64[0] + 40 * i);
                v122 = (int8x8_t)v121[1];
                if (!*(_QWORD *)&v122)
                  goto LABEL_134;
                v123 = (uint8x8_t)vcnt_s8(v122);
                v123.i16[0] = vaddlv_u8(v123);
                v124 = v123.u32[0];
                if (v123.u32[0] > 1uLL)
                {
                  v125 = v119;
                  if (*(_QWORD *)&v122 <= v119)
                    v125 = v119 % *(_QWORD *)&v122;
                }
                else
                {
                  v125 = (*(_QWORD *)&v122 - 1) & v119;
                }
                v126 = *v121;
                v127 = *(_QWORD **)(*v121 + 8 * v125);
                if (!v127 || (v128 = (_QWORD *)*v127) == 0)
                {
LABEL_134:
                  sub_239BF0034(*(_QWORD *)&v318[0].f64[0] + 40 * i, v119, &v341)[3] = 0x3FF0000000000000;
                  sub_239BF0034(*(_QWORD *)&v318[0].f64[0] + 40 * (int)v119, i, v342)[3] = 0x3FF0000000000000;
                  v116 = (int *)v312;
                  v117 = v313;
                  goto LABEL_135;
                }
                v129 = *(_QWORD *)&v122 - 1;
                if (v123.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v130 = v128[1];
                    if (v130 == v119)
                    {
                      if (v128[2] == v119)
                        goto LABEL_114;
                    }
                    else if ((v130 & v129) != v125)
                    {
                      goto LABEL_134;
                    }
                    v128 = (_QWORD *)*v128;
                    if (!v128)
                      goto LABEL_134;
                  }
                }
                while (1)
                {
                  v131 = v128[1];
                  if (v131 == v119)
                    break;
                  if (v131 >= *(_QWORD *)&v122)
                    v131 %= *(_QWORD *)&v122;
                  if (v131 != v125)
                    goto LABEL_134;
LABEL_108:
                  v128 = (_QWORD *)*v128;
                  if (!v128)
                    goto LABEL_134;
                }
                if (v128[2] != v119)
                  goto LABEL_108;
LABEL_114:
                v132 = (uint64_t *)(*(_QWORD *)&v318[0].f64[0] + 40 * (int)v119);
                v133 = (int8x8_t)v132[1];
                if (!*(_QWORD *)&v133)
                  goto LABEL_134;
                v134 = (uint8x8_t)vcnt_s8(v133);
                v134.i16[0] = vaddlv_u8(v134);
                if (v134.u32[0] > 1uLL)
                {
                  v135 = i;
                  if (*(_QWORD *)&v133 <= i)
                    v135 = i % *(_QWORD *)&v133;
                }
                else
                {
                  v135 = (*(_QWORD *)&v133 - 1) & i;
                }
                v136 = *v132;
                v137 = *(_QWORD **)(v136 + 8 * v135);
                if (!v137)
                  goto LABEL_134;
                v138 = (_QWORD *)*v137;
                if (!*v137)
                  goto LABEL_134;
                v139 = *(_QWORD *)&v133 - 1;
                if (v134.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v140 = v138[1];
                    if (v140 == i)
                    {
                      if (v138[2] == i)
                        goto LABEL_137;
                    }
                    else if ((v140 & v139) != v135)
                    {
                      goto LABEL_134;
                    }
                    v138 = (_QWORD *)*v138;
                    if (!v138)
                      goto LABEL_134;
                  }
                }
                while (2)
                {
                  v141 = v138[1];
                  if (v141 != i)
                  {
                    if (v141 >= *(_QWORD *)&v133)
                      v141 %= *(_QWORD *)&v133;
                    if (v141 != v135)
                      goto LABEL_134;
                    goto LABEL_129;
                  }
                  if (v138[2] != i)
                  {
LABEL_129:
                    v138 = (_QWORD *)*v138;
                    if (!v138)
                      goto LABEL_134;
                    continue;
                  }
                  break;
                }
LABEL_137:
                if (v124 > 1)
                {
                  v142 = v119;
                  if (*(_QWORD *)&v122 <= v119)
                    v142 = v119 % *(_QWORD *)&v122;
                }
                else
                {
                  v142 = v129 & v119;
                }
                v143 = *(_QWORD **)(v126 + 8 * v142);
                if (!v143)
                  goto LABEL_135;
                v144 = (_QWORD *)*v143;
                if (!v144)
                  goto LABEL_135;
                if (v124 < 2)
                {
                  while (1)
                  {
                    v145 = v144[1];
                    if (v145 == v119)
                    {
                      if (v144[2] == v119)
                        goto LABEL_157;
                    }
                    else if ((v145 & v129) != v142)
                    {
                      goto LABEL_135;
                    }
                    v144 = (_QWORD *)*v144;
                    if (!v144)
                      goto LABEL_135;
                  }
                }
                while (2)
                {
                  v146 = v144[1];
                  if (v146 != v119)
                  {
                    if (v146 >= *(_QWORD *)&v122)
                      v146 %= *(_QWORD *)&v122;
                    if (v146 != v142)
                      goto LABEL_135;
                    goto LABEL_151;
                  }
                  if (v144[2] != v119)
                  {
LABEL_151:
                    v144 = (_QWORD *)*v144;
                    if (!v144)
                      goto LABEL_135;
                    continue;
                  }
                  break;
                }
LABEL_157:
                if (v134.u32[0] > 1uLL)
                {
                  v147 = i;
                  if (*(_QWORD *)&v133 <= i)
                    v147 = i % *(_QWORD *)&v133;
                }
                else
                {
                  v147 = v139 & i;
                }
                v148 = *(_QWORD **)(v136 + 8 * v147);
                if (v148)
                {
                  v149 = (_QWORD *)*v148;
                  if (v149)
                  {
                    if (v134.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v150 = v149[1];
                        if (v150 == i)
                        {
                          if (v149[2] == i)
                            goto LABEL_177;
                        }
                        else if ((v150 & v139) != v147)
                        {
                          goto LABEL_135;
                        }
                        v149 = (_QWORD *)*v149;
                        if (!v149)
                          goto LABEL_135;
                      }
                    }
                    do
                    {
                      v151 = v149[1];
                      if (v151 == i)
                      {
                        if (v149[2] == i)
                        {
LABEL_177:
                          if (v124 >= 2)
                          {
                            v153 = v119;
                            if (*(_QWORD *)&v122 <= v119)
                              v153 = v119 % *(_QWORD *)&v122;
                            v152 = *(_QWORD **)(v126 + 8 * v153);
                            do
                            {
                              do
                                v152 = (_QWORD *)*v152;
                              while (v152[1] != v119);
                            }
                            while (v152[2] != v119);
                          }
                          else
                          {
                            v152 = *(_QWORD **)(v126 + 8 * (v129 & v119));
                            do
                            {
                              do
                                v152 = (_QWORD *)*v152;
                              while (v152[1] != v119);
                            }
                            while (v152[2] != v119);
                          }
                          v152[3] = 0x3FF0000000000000;
                          if (v134.u32[0] >= 2uLL)
                          {
                            v155 = i;
                            if (*(_QWORD *)&v133 <= i)
                              v155 = i % *(_QWORD *)&v133;
                            v154 = *(_QWORD **)(v136 + 8 * v155);
                            do
                            {
                              do
                                v154 = (_QWORD *)*v154;
                              while (v154[1] != i);
                            }
                            while (v154[2] != i);
                          }
                          else
                          {
                            v154 = *(_QWORD **)(v136 + 8 * (v139 & i));
                            do
                            {
                              do
                                v154 = (_QWORD *)*v154;
                              while (v154[1] != i);
                            }
                            while (v154[2] != i);
                          }
                          v154[3] = 0x3FF0000000000000;
                          break;
                        }
                      }
                      else
                      {
                        if (v151 >= *(_QWORD *)&v133)
                          v151 %= *(_QWORD *)&v133;
                        if (v151 != v147)
                          break;
                      }
                      v149 = (_QWORD *)*v149;
                    }
                    while (v149);
                  }
                }
LABEL_135:
                ++v118;
              }
              while (v118 < (v117 - (_BYTE *)v116) >> 2);
LABEL_199:
              if (__p)
              {
                v310 = __p;
                operator delete(__p);
                v116 = (int *)v312;
              }
              if (v116)
              {
                v313 = v116;
                operator delete(v116);
              }
              if (v315)
              {
                v316 = (char *)v315;
                operator delete(v315);
              }
              v109 = v338;
            }
          }
        }
        v315 = 0;
        v316 = 0;
        v317 = 0;
        sub_239BEF8A4(v318, (char **)&v315);
        v157 = (char *)v315;
        v156 = v316;
        if (v315 == v316)
          goto LABEL_291;
        v158 = 0;
        v159 = 0;
        v160 = -1;
        do
        {
          v161 = &v157[24 * v159];
          v162 = (uint64_t **)(v161 + 8);
          if (*(_QWORD *)v161 != *((_QWORD *)v161 + 1))
          {
            v312 = 0;
            v313 = 0;
            v314 = 0;
            v163 = (int64_t)*v162 - *(_QWORD *)v161;
            if (*v162 != *(uint64_t **)v161)
            {
              if (v163 < 0)
                sub_2394189F8();
              v304 = v160;
              v164 = (unint64_t *)operator new(v163);
              v312 = v164;
              v313 = (int *)v164;
              v314 = (char *)&v164[v163 >> 3];
              v165 = *(uint64_t **)v161;
              v166 = *v162;
              if (*(uint64_t **)v161 == *v162)
              {
                if (*v164 < v160)
                {
                  v160 = *v164;
                  v158 = v159;
                }
                goto LABEL_262;
              }
              v300 = v158;
              v167 = (char *)v164;
              while (2)
              {
                v168 = *v165;
                v169 = v332;
                if (v167 < v314)
                {
                  *(_QWORD *)v167 = v332[v168];
                  v167 += 8;
                }
                else
                {
                  v170 = (char *)v312;
                  v171 = v167 - (_BYTE *)v312;
                  v172 = (v167 - (_BYTE *)v312) >> 3;
                  v173 = v172 + 1;
                  if ((unint64_t)(v172 + 1) >> 61)
                    sub_2394189F8();
                  v174 = v314 - (_BYTE *)v312;
                  if ((v314 - (_BYTE *)v312) >> 2 > v173)
                    v173 = v174 >> 2;
                  if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF8)
                    v175 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v175 = v173;
                  if (v175)
                  {
                    if (v175 >> 61)
                      sub_239418A80();
                    v176 = operator new(8 * v175);
                  }
                  else
                  {
                    v176 = 0;
                  }
                  v177 = &v176[8 * v172];
                  *(_QWORD *)v177 = v169[v168];
                  v178 = v177 + 8;
                  if (v167 != v170)
                  {
                    v179 = v167 - 8 - v170;
                    if (v179 < 0x168)
                    {
                      v180 = v167;
                      goto LABEL_232;
                    }
                    if (&v176[v171 - 8 - (v179 & 0xFFFFFFFFFFFFFFF8)] > &v176[v171 - 8])
                    {
                      v180 = v167;
                      goto LABEL_232;
                    }
                    if (&v167[-(v179 & 0xFFFFFFFFFFFFFFF8) - 8] > v167 - 8)
                    {
                      v180 = v167;
                      goto LABEL_232;
                    }
                    if ((unint64_t)(v167 - &v176[v171]) < 0x20)
                    {
                      v180 = v167;
                      goto LABEL_232;
                    }
                    v182 = (v179 >> 3) + 1;
                    v180 = &v167[-8 * (v182 & 0x3FFFFFFFFFFFFFFCLL)];
                    v183 = &v176[8 * v172 - 16];
                    v184 = v167 - 16;
                    v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v186 = *(_OWORD *)v184;
                      *(v183 - 1) = *((_OWORD *)v184 - 1);
                      *v183 = v186;
                      v183 -= 2;
                      v184 -= 32;
                      v185 -= 4;
                    }
                    while (v185);
                    v177 -= 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_232:
                        v181 = *((_QWORD *)v180 - 1);
                        v180 -= 8;
                        *((_QWORD *)v177 - 1) = v181;
                        v177 -= 8;
                      }
                      while (v180 != v170);
                    }
                  }
                  v312 = v177;
                  v313 = (int *)v178;
                  v314 = &v176[8 * v175];
                  if (v170)
                    operator delete(v170);
                  v167 = v178;
                }
                v313 = (int *)v167;
                if (++v165 == v166)
                {
                  v164 = (unint64_t *)v312;
                  v187 = (char *)v312 + 8;
                  v188 = v312 == v167 || v187 == v167;
                  v189 = (unint64_t *)v312;
                  if (!v188)
                  {
                    v190 = *(_QWORD *)v312;
                    v189 = (unint64_t *)v312;
                    v191 = (char *)v312 + 8;
                    do
                    {
                      v193 = *(_QWORD *)v191;
                      v191 += 8;
                      v192 = v193;
                      if (v193 < v190)
                      {
                        v190 = v192;
                        v189 = (unint64_t *)v187;
                      }
                      v187 = v191;
                    }
                    while (v191 != v167);
                  }
                  v160 = v304;
                  if (*v189 < v304)
                    v160 = *v189;
                  v158 = v300;
                  if (*v189 < v304)
                    v158 = v159;
                  if (!v312)
                    goto LABEL_209;
LABEL_262:
                  v313 = (int *)v164;
                  operator delete(v164);
                  goto LABEL_209;
                }
                continue;
              }
            }
            if (MEMORY[0] < v160)
            {
              v160 = MEMORY[0];
              v158 = v159;
            }
LABEL_209:
            v157 = (char *)v315;
            v156 = v316;
          }
          ++v159;
        }
        while (v159 < 0xAAAAAAAAAAAAAAABLL * ((v156 - v157) >> 3));
        if (v160 == -1)
        {
LABEL_291:
          v220 = 1;
          if (!v157)
          {
LABEL_309:
            if (*(_QWORD *)&v319.f64[0])
              operator delete(*(void **)&v319.f64[0]);
            if (*(_QWORD *)&v318[1].f64[1])
            {
              v318[2].f64[0] = v318[1].f64[1];
              operator delete(*(void **)&v318[1].f64[1]);
            }
            v229 = v318[0].f64[0];
            if (*(_QWORD *)&v318[0].f64[0])
            {
              v230 = v318[0].f64[1];
              v231 = v318[0].f64[0];
              if (*(_QWORD *)&v318[0].f64[1] != *(_QWORD *)&v318[0].f64[0])
              {
                do
                {
                  v232 = *(_QWORD **)(*(_QWORD *)&v230 - 24);
                  if (v232)
                  {
                    do
                    {
                      v233 = (_QWORD *)*v232;
                      operator delete(v232);
                      v232 = v233;
                    }
                    while (v233);
                  }
                  v235 = *(void **)(*(_QWORD *)&v230 - 40);
                  *(_QWORD *)&v230 -= 40;
                  v234 = v235;
                  **(_QWORD **)&v230 = 0;
                  if (v235)
                    operator delete(v234);
                }
                while (*(_QWORD *)&v230 != *(_QWORD *)&v229);
                v231 = v318[0].f64[0];
              }
              v318[0].f64[1] = v229;
              operator delete(*(void **)&v231);
            }
            sub_2396B9B98(&v324);
            if (v326)
            {
              v327 = (char *)v326;
              operator delete(v326);
            }
            v236 = v329;
            if (v220)
            {
              v6 = 0;
            }
            else
            {
              memset(v318, 0, 24);
              v237 = v330;
              if (v329 == v330)
              {
                sub_239A444D4((uint64_t)"unknown file", 51, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              if ((char *)v330 - (char *)v329 == 24)
              {
                *(_QWORD *)&v318[0].f64[0] = operator new(8uLL);
                *(int64x2_t *)((char *)v318 + 8) = vdupq_n_s64(1uLL);
                **(_QWORD **)&v318[0].f64[0] = 1;
                v289 = v236[2];
                v291 = *(int8x16_t *)v236;
                v288 = vextq_s8(v291, v291, 8uLL).u64[0];
              }
              else
              {
                v238 = 0;
                v239 = 0;
                v240 = 0;
                v287 = ((char *)v330 - (char *)v329) / 24;
                if (v287 <= 1)
                  v241 = 1;
                else
                  v241 = ((char *)v330 - (char *)v329) / 24;
                do
                {
                  v242 = 0;
                  v243 = &v236[3 * v240];
                  v301 = v243[2];
                  v297 = vextq_s8(*(int8x16_t *)v243, *(int8x16_t *)v243, 8uLL).u64[0];
                  v244 = v236;
                  v245 = v287;
                  do
                  {
                    v246 = v244[2];
                    v247 = *(_OWORD *)v244;
                    v244 += 3;
                    _V1.D[1] = *((_QWORD *)&v247 + 1);
                    _D3 = v297;
                    __asm { FMLA            D2, D3, V1.D[1] }
                    if (acos(_D2 + v301 * v246) * 180.0 / 3.14159265 < a3.f64[0])
                      ++v242;
                    --v245;
                  }
                  while (v245);
                  if (v242 > v238)
                  {
                    v239 = v240;
                    v238 = v242;
                  }
                  ++v240;
                }
                while (v240 != v241);
                v252 = 0;
                v253 = &v236[3 * v239];
                v289 = v253[2];
                v291 = *(int8x16_t *)v253;
                v288 = vextq_s8(v291, v291, 8uLL).u64[0];
                v254.i64[0] = 0;
                v256 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
                v286 = (int8x16_t)v256;
                *(double *)&v255 = 0.0;
                v256.f64[0] = 0.0;
                do
                {
                  v298 = v256;
                  v302 = *(double *)&v255;
                  v305 = *(double *)v254.i64;
                  v251.f64[0] = v236[2];
                  v257 = *(int8x16_t *)v236;
                  v236 += 3;
                  v293 = (int8x16_t)v251;
                  v295 = v257.i64[1];
                  _D1 = v288;
                  __asm { FMLA            D0, D1, V3.D[1] }
                  v260.f64[0] = acos(_D0 + v251.f64[0] * v289) * 180.0 / 3.14159265;
                  v261 = (int8x16_t)vcgtq_f64(a3, v260);
                  v262.i64[0] = 0x8000000000000000;
                  v251 = (float64x2_t)vbslq_s8(v261, v293, v262);
                  _NF = v260.f64[0] < a3.f64[0];
                  v260.f64[0] = v305;
                  v260.f64[1] = v302;
                  v254 = (int8x16_t)vaddq_f64(v260, (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(v261.i64[0], 0), v257, v286));
                  v255 = vextq_s8(v254, v254, 8uLL).u64[0];
                  v256 = vaddq_f64(v298, v251);
                  if (_NF)
                    ++v252;
                }
                while (v236 != v237);
                v299 = v256;
                v303 = *(double *)&v255;
                v306 = *(double *)v254.i64;
                if (v252)
                {
                  sub_2394187EC((uint64_t)v318, v287);
                  v263.f64[0] = (double)v252;
                  v264 = vdivq_f64(v299, v263);
                  v265.f64[0] = v306;
                  v265.f64[1] = v303;
                  _Q1 = vdivq_f64(v265, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v252), 0));
                  _Q2 = vmulq_f64(_Q1, _Q1);
                  _D3 = _Q1.f64[1];
                  __asm { FMLA            D2, D3, V1.D[1] }
                  _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v264.f64[0], v264.f64[0]));
                  *(_QWORD *)&v289 = *(_OWORD *)&vmulq_f64(v264, _Q2);
                  v291 = (int8x16_t)vmulq_n_f64(_Q1, _Q2.f64[0]);
                  v288 = vextq_s8(v291, v291, 8uLL).u64[0];
                  v269 = v329;
                  for (j = v330; v269 != j; v269 += 3)
                  {
                    _Q1 = *(_OWORD *)v269;
                    _D3 = v288;
                    __asm { FMLA            D2, D3, V1.D[1] }
                    v275 = acos(_D2 + v269[2] * v289);
                    v276 = v318[0].f64[1];
                    if (*(_QWORD *)&v318[0].f64[1] == *(_QWORD *)&v318[1].f64[0] << 6)
                    {
                      if (*(_QWORD *)&v318[0].f64[1] + 1 < 0)
                        sub_2394189F8();
                      v277 = *(_QWORD *)&v318[1].f64[0] << 7;
                      if (*(_QWORD *)&v318[1].f64[0] << 7 <= (*(_QWORD *)&v318[0].f64[1] & 0xFFFFFFFFFFFFFFC0) + 64)
                        v277 = (*(_QWORD *)&v318[0].f64[1] & 0xFFFFFFFFFFFFFFC0) + 64;
                      if (*(_QWORD *)&v318[0].f64[1] <= 0x3FFFFFFFFFFFFFFEuLL)
                        v278 = v277;
                      else
                        v278 = 0x7FFFFFFFFFFFFFFFLL;
                      sub_2394187EC((uint64_t)v318, v278);
                      v276 = v318[0].f64[1];
                    }
                    *(_QWORD *)&v318[0].f64[1] = *(_QWORD *)&v276 + 1;
                    v279 = *(_QWORD *)&v276 >> 6;
                    v280 = 1 << SLOBYTE(v276);
                    if (v275 * 180.0 / 3.14159265 >= a3.f64[0])
                      v271 = *(_QWORD *)(*(_QWORD *)&v318[0].f64[0] + 8 * v279) & ~v280;
                    else
                      v271 = *(_QWORD *)(*(_QWORD *)&v318[0].f64[0] + 8 * v279) | v280;
                    *(_QWORD *)(*(_QWORD *)&v318[0].f64[0] + 8 * v279) = v271;
                  }
                }
                else
                {
                  sub_23941C5D8((uint64_t)v318, v287, 0);
                }
              }
              LOBYTE(v312) = 1;
              v326 = *(void **)&v318[0].f64[0];
              LODWORD(v327) = 0;
              v324 = *(_QWORD *)&v318[0].f64[0] + 8 * (*(_QWORD *)&v318[0].f64[1] >> 6);
              v325 = LOBYTE(v318[0].f64[1]) & 0x3F;
              v281 = sub_239458E50((uint64_t)&v326, (uint64_t)&v324, &v312);
              v236 = v329;
              v282 = (double)v281 / (double)(0xAAAAAAAAAAAAAAABLL * (v330 - v329)) >= 0.3 && v281 > 2;
              v6 = v282;
              if (v282)
              {
                *(double *)(a2 + 16) = v289;
                *(_QWORD *)&v283 = v291.i64[0];
                *((_QWORD *)&v283 + 1) = v288;
                *(_OWORD *)a2 = v283;
              }
              if (*(_QWORD *)&v318[0].f64[0])
              {
                operator delete(*(void **)&v318[0].f64[0]);
                v236 = v329;
              }
            }
            if (v236)
            {
              v330 = v236;
              operator delete(v236);
            }
            goto LABEL_373;
          }
        }
        else
        {
          v194 = &v157[24 * v158];
          v195 = (char **)(v194 + 8);
          v196 = *((_QWORD *)v194 + 1) - *(_QWORD *)v194;
          v197 = v196 >> 3;
          v198 = v329;
          if (0xAAAAAAAAAAAAAAABLL * ((v331 - (char *)v329) >> 3) < v196 >> 3)
          {
            if ((unint64_t)v196 > 0x5555555555555550)
              sub_2394189F8();
            v199 = v330;
            v200 = (char *)operator new(24 * v197);
            v201 = &v200[24 * (((char *)v199 - (char *)v198) / 24)];
            v202 = v201;
            if (v199 != v198)
            {
              v203 = &v200[24 * (((char *)v199 - (char *)v198) / 24)];
              do
              {
                v202 = v203 - 24;
                v204 = *(_OWORD *)(v199 - 3);
                *((double *)v203 - 1) = *(v199 - 1);
                *(_OWORD *)(v203 - 24) = v204;
                v199 -= 3;
                v203 -= 24;
              }
              while (v199 != v198);
            }
            v329 = (double *)v202;
            v330 = (double *)v201;
            v331 = &v200[24 * v197];
            if (v198)
              operator delete(v198);
          }
          v205 = *(char **)v194;
          v206 = *v195;
          if (*(char **)v194 == *v195)
          {
            v221 = *(char **)v194;
          }
          else
          {
            v207 = v330;
            do
            {
              v210 = &v338->i8[24 * *(_QWORD *)v205];
              if (v207 < (double *)v331)
              {
                v208 = *(_OWORD *)v210;
                v207[2] = *((double *)v210 + 2);
                *(_OWORD *)v207 = v208;
                v209 = v207 + 3;
              }
              else
              {
                v211 = v329;
                v212 = 0xAAAAAAAAAAAAAAABLL * (v207 - v329);
                v213 = v212 + 1;
                if (v212 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_2394189F8();
                if (0x5555555555555556 * ((v331 - (char *)v329) >> 3) > v213)
                  v213 = 0x5555555555555556 * ((v331 - (char *)v329) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v331 - (char *)v329) >> 3) >= 0x555555555555555)
                  v214 = 0xAAAAAAAAAAAAAAALL;
                else
                  v214 = v213;
                if (v214)
                {
                  if (v214 > 0xAAAAAAAAAAAAAAALL)
                    sub_239418A80();
                  v215 = (char *)operator new(24 * v214);
                }
                else
                {
                  v215 = 0;
                }
                v216 = *(_OWORD *)v210;
                v217 = &v215[24 * v212];
                *((_QWORD *)v217 + 2) = *((_QWORD *)v210 + 2);
                *(_OWORD *)v217 = v216;
                v218 = v217;
                if (v207 != v211)
                {
                  do
                  {
                    v219 = *(_OWORD *)(v207 - 3);
                    *((double *)v218 - 1) = *(v207 - 1);
                    *(_OWORD *)(v218 - 24) = v219;
                    v218 -= 24;
                    v207 -= 3;
                  }
                  while (v207 != v211);
                  v207 = v329;
                }
                v209 = (double *)(v217 + 24);
                v329 = (double *)v218;
                v330 = (double *)(v217 + 24);
                v331 = &v215[24 * v214];
                if (v207)
                  operator delete(v207);
              }
              v330 = v209;
              v205 += 8;
              v207 = v209;
            }
            while (v205 != v206);
            v221 = *v195;
            v205 = *(char **)v194;
          }
          v222 = v221 - v205;
          v220 = (double)(unint64_t)(v222 >> 3)
               / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v339 - (char *)v338) >> 3)) < 0.1
              || (unint64_t)v222 < 0x18;
          v157 = (char *)v315;
          if (!v315)
            goto LABEL_309;
        }
        v224 = v316;
        v225 = v157;
        if (v316 != v157)
        {
          v226 = v316;
          do
          {
            v228 = (void *)*((_QWORD *)v226 - 3);
            v226 -= 24;
            v227 = v228;
            if (v228)
            {
              *((_QWORD *)v224 - 2) = v227;
              operator delete(v227);
            }
            v224 = v226;
          }
          while (v226 != v157);
          v225 = v315;
        }
        v316 = v157;
        operator delete(v225);
        goto LABEL_309;
      }
    }
    else
    {
LABEL_58:
      v86 = 0;
    }
LABEL_77:
    v100 = v85 - v86;
    v101 = 24 * v86 + 16;
    v102 = &v81[v101];
    v103 = &v84[v101];
    do
    {
      *((_QWORD *)v103 - 2) = *((_QWORD *)v102 - 2);
      *((_QWORD *)v103 - 1) = *((_QWORD *)v102 - 1);
      v104 = *(_QWORD *)v102;
      v102 += 24;
      *(_QWORD *)v103 = v104;
      v103 += 24;
      --v100;
    }
    while (v100);
    goto LABEL_79;
  }
  v6 = 0;
LABEL_373:
  if (v332)
    operator delete(v332);
LABEL_375:
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }
  if (v338)
  {
    v339 = v338;
    operator delete(v338);
  }
  return v6;
}

void sub_239BEEF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v63;
  void *v65;
  void *v66;
  void *v67;
  void *v68;

  if (__p)
    operator delete(__p);
  v65 = *(void **)(v63 - 256);
  if (v65)
  {
    *(_QWORD *)(v63 - 248) = v65;
    operator delete(v65);
    v66 = *(void **)(v63 - 232);
    if (!v66)
    {
LABEL_5:
      v67 = *(void **)(v63 - 208);
      if (!v67)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v66 = *(void **)(v63 - 232);
    if (!v66)
      goto LABEL_5;
  }
  *(_QWORD *)(v63 - 224) = v66;
  operator delete(v66);
  v67 = *(void **)(v63 - 208);
  if (!v67)
  {
LABEL_6:
    v68 = *(void **)(v63 - 184);
    if (!v68)
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v63 - 200) = v67;
  operator delete(v67);
  v68 = *(void **)(v63 - 184);
  if (!v68)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_11:
  *(_QWORD *)(v63 - 176) = v68;
  operator delete(v68);
  _Unwind_Resume(exception_object);
}

void sub_239BEF0D8(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  void **v34;
  unint64_t v35;
  void **v36;
  void **v37;
  _QWORD *v38;
  unint64_t *v39;
  void *v40;
  unint64_t v41;
  void **v42;
  unint64_t v43;
  _OWORD *v44;
  char *v45;
  char *j;
  void **v47;
  void **v48;
  _OWORD *v49;
  void **v50;
  unint64_t v51;
  void **v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t i;
  void **v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  void **v61;
  _QWORD *v62;
  void *v63;
  void **v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void **v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  unint64_t v79;
  void **v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  void **v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  void **v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103[2];
  void *__p[2];
  int v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  char *v109;
  uint64_t v110;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = a2 >> 3;
  if (v5 <= a2 || (v7 = *(_QWORD *)(a1 + 48), ((*(_QWORD *)(v7 + (v6 & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0))
  {
    v9 = *(void **)(a1 + 32);
    v8 = (unint64_t *)(a1 + 24);
    v10 = ((uint64_t)v9 - *(_QWORD *)(a1 + 24)) >> 3;
    if (v10 > a2)
    {
LABEL_103:
      v7 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v7 + (v6 & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
      v5 = *(_QWORD *)(a1 + 56);
      goto LABEL_104;
    }
    v101 = v6;
    v102 = a3;
    v106 = 0x3FF0000000000000;
    sub_239AF3084(v8, v9, a2 + 1 - v10, &v106);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 48) + 8 * (v11 >> 6);
    LOBYTE(v103[0]) = 0;
    sub_239AF34D0((uint64_t)&v106, (void **)(a1 + 48), v12, v11 & 0x3F, a2 + 1 - v11, v103);
    v13 = *(void ***)a1;
    v14 = *(void ***)(a1 + 8);
    v15 = (uint64_t)v14 - *(_QWORD *)a1;
    v16 = 0x3333333333333333 * (v15 >> 3);
    *(_OWORD *)v103 = 0u;
    *(_OWORD *)__p = 0u;
    v105 = 1065353216;
    v17 = a2 + 1 + v16;
    if (v17)
    {
      v18 = v15 / 40;
      v19 = *(_QWORD *)(a1 + 16);
      v20 = &v13[5 * (v15 / 40)];
      if (0xCCCCCCCCCCCCCCCDLL * ((v19 - (uint64_t)v14) >> 3) < v17)
      {
        v21 = v18 + v17;
        if (v18 + v17 > 0x666666666666666)
          sub_2394189F8();
        v22 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (uint64_t)v13) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x333333333333333)
          v23 = 0x666666666666666;
        else
          v23 = v21;
        v110 = a1 + 16;
        if (v23)
        {
          if (v23 > 0x666666666666666)
            sub_239418A80();
          v24 = a2 + 1 + v16;
          v25 = (char *)operator new(40 * v23);
        }
        else
        {
          v24 = a2 + 1 + v16;
          v25 = 0;
        }
        v67 = (uint64_t)&v25[40 * v18];
        v106 = (uint64_t)v25;
        v107 = v67;
        v108 = (void **)v67;
        v109 = &v25[40 * v23];
        v68 = v67 + 40 * v24;
        v69 = 40 * (v16 + a2) + 40;
        do
        {
          sub_239BF07B4(v67, (uint64_t)v103);
          v67 += 40;
          v69 -= 40;
        }
        while (v69);
        v70 = v107;
        v71 = *(void ***)a1;
        if (*(void ***)a1 != v20)
        {
          v72 = 0;
          do
          {
            v74 = v70 + v72 * 8;
            v75 = &v20[v72];
            v76 = v20[v72 - 5];
            *(v75 - 5) = 0;
            *(_QWORD *)(v74 - 40) = v76;
            *(_QWORD *)(v74 - 32) = v20[v72 - 4];
            *(v75 - 4) = 0;
            v77 = v20[v72 - 3];
            *(_QWORD *)(v70 + v72 * 8 - 24) = v77;
            v78 = v20[v72 - 2];
            *(_QWORD *)(v74 - 16) = v78;
            *(_DWORD *)(v74 - 8) = v20[v72 - 1];
            if (v78)
            {
              v73 = v77[1];
              v79 = *(_QWORD *)(v74 - 32);
              if ((v79 & (v79 - 1)) != 0)
              {
                if (v73 >= v79)
                  v73 %= v79;
              }
              else
              {
                v73 &= v79 - 1;
              }
              v76[v73] = v70 + v72 * 8 - 24;
              v20[v72 - 3] = 0;
              v20[v72 - 2] = 0;
            }
            v72 -= 5;
          }
          while (&v20[v72] != v71);
          v70 += v72 * 8;
        }
        v107 = v70;
        v80 = *(void ***)(a1 + 8);
        if (v80 != v20)
        {
          v81 = 0;
          v82 = &v25[40 * v18 + 40 * v16 + 40 * a2];
          do
          {
            v84 = &v20[v81];
            v85 = &v82[v81 * 8];
            v86 = v20[v81];
            *v84 = 0;
            *((_QWORD *)v85 + 5) = v86;
            *((_QWORD *)v85 + 6) = v20[v81 + 1];
            v84[1] = 0;
            v87 = v20[v81 + 2];
            *(_QWORD *)&v82[v81 * 8 + 56] = v87;
            v88 = v20[v81 + 3];
            *((_QWORD *)v85 + 8) = v88;
            *((_DWORD *)v85 + 18) = v20[v81 + 4];
            if (v88)
            {
              v83 = v87[1];
              v89 = *((_QWORD *)v85 + 6);
              if ((v89 & (v89 - 1)) != 0)
              {
                if (v83 >= v89)
                  v83 %= v89;
              }
              else
              {
                v83 &= v89 - 1;
              }
              v86[v83] = &v82[v81 * 8 + 56];
              v20[v81 + 2] = 0;
              v20[v81 + 3] = 0;
            }
            v81 += 5;
          }
          while (&v20[v81] != v80);
          v68 = (uint64_t)&v82[v81 * 8 + 40];
          v70 = v107;
          v20 = *(void ***)(a1 + 8);
        }
        v90 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v70;
        *(_QWORD *)(a1 + 8) = v68;
        v91 = *(char **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v109;
        v108 = v20;
        v109 = v91;
        v106 = v90;
        v107 = v90;
        if (v20 != (void **)v90)
        {
          do
          {
            v92 = v20 - 5;
            v108 = v20 - 5;
            v93 = *(v20 - 3);
            if (v93)
            {
              do
              {
                v94 = (_QWORD *)*v93;
                operator delete(v93);
                v93 = v94;
              }
              while (v94);
            }
            v95 = *v92;
            *v92 = 0;
            if (v95)
              operator delete(v95);
            v20 = v108;
          }
          while (v108 != (void **)v90);
          v20 = (void **)v106;
        }
        if (v20)
          operator delete(v20);
        goto LABEL_98;
      }
      v99 = v15 / 40;
      v100 = a2 + 1 + v16;
      v26 = 0xCCCCCCCCCCCCCCCDLL * (v14 - v20);
      if (v17 <= v26)
      {
        v28 = v14;
        v26 = a2 + 1 + v16;
      }
      else
      {
        v27 = 0;
        v28 = &v14[5 * (v17 - v26)];
        v29 = 40 * (v16 + a2) - 8 * (v14 - v20) + 40;
        do
        {
          sub_239BF07B4((uint64_t)&v14[v27 / 8], (uint64_t)v103);
          v27 += 40;
        }
        while (v29 != v27);
        *(_QWORD *)(a1 + 8) = v28;
        v17 = v100;
        if (v14 == v20)
          goto LABEL_98;
      }
      v30 = &v20[5 * v17];
      v31 = &v28[-5 * v17];
      v32 = v28;
      if (v31 < v14)
      {
        v33 = 0;
        v34 = &v13[5 * v99] + v28 - v30;
        do
        {
          v36 = &v34[v33];
          v37 = &v28[v33];
          v38 = v34[v33];
          *v36 = 0;
          *v37 = v38;
          v37[1] = v34[v33 + 1];
          v36[1] = 0;
          v39 = (unint64_t *)v34[v33 + 2];
          v28[v33 + 2] = v39;
          v40 = v34[v33 + 3];
          v37[3] = v40;
          *((_DWORD *)v37 + 8) = v34[v33 + 4];
          if (v40)
          {
            v35 = v39[1];
            v41 = (unint64_t)v37[1];
            if ((v41 & (v41 - 1)) != 0)
            {
              if (v35 >= v41)
                v35 %= v41;
            }
            else
            {
              v35 &= v41 - 1;
            }
            v38[v35] = &v28[v33 + 2];
            v34[v33 + 2] = 0;
            v34[v33 + 3] = 0;
          }
          v33 += 5;
        }
        while (&v34[v33] < v14);
        v32 = &v28[v33];
      }
      *(_QWORD *)(a1 + 8) = v32;
      if (v28 != v30)
      {
        do
        {
          v52 = v28 - 5;
          if (*(v28 - 2))
          {
            v53 = *(v28 - 3);
            if (v53)
            {
              do
              {
                v54 = (_QWORD *)*v53;
                operator delete(v53);
                v53 = v54;
              }
              while (v54);
            }
            *(v28 - 3) = 0;
            v55 = (uint64_t)*(v28 - 4);
            if (v55)
            {
              for (i = 0; i != v55; ++i)
                *((_QWORD *)*v52 + i) = 0;
            }
            *(v28 - 2) = 0;
          }
          v57 = v31 - 5;
          v58 = *(v31 - 5);
          *(v31 - 5) = 0;
          v59 = *v52;
          *v52 = v58;
          if (v59)
            operator delete(v59);
          v62 = *(v31 - 3);
          v61 = v31 - 3;
          v60 = v62;
          v63 = *(v61 - 1);
          *(v28 - 3) = v62;
          v64 = v28 - 3;
          *(v28 - 4) = v63;
          *(v61 - 1) = 0;
          v65 = v61[1];
          v64[1] = v65;
          *((_DWORD *)v64 + 4) = *((_DWORD *)v61 + 4);
          if (v65)
          {
            v51 = v60[1];
            v66 = (unint64_t)*(v28 - 4);
            if ((v66 & (v66 - 1)) != 0)
            {
              if (v51 >= v66)
                v51 %= v66;
            }
            else
            {
              v51 &= v66 - 1;
            }
            *((_QWORD *)*v52 + v51) = v64;
            *v61 = 0;
            v61[1] = 0;
          }
          v28 -= 5;
          v31 = v57;
        }
        while (v57 != v20);
      }
      v42 = v103;
      if (v20 <= v103)
      {
        v43 = v100;
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)v103)
          v43 = 0;
        v42 = &v103[5 * v43];
      }
      do
      {
        if (v20 != v42)
        {
          *((_DWORD *)v20 + 8) = *((_DWORD *)v42 + 8);
          v44 = v42[2];
          v45 = (char *)v20[1];
          if (!v45)
            goto LABEL_44;
          for (j = 0; j != v45; ++j)
            *((_QWORD *)*v20 + (_QWORD)j) = 0;
          v47 = (void **)v20[2];
          v20[2] = 0;
          v20[3] = 0;
          if (v47)
          {
            while (v44)
            {
              *((_OWORD *)v47 + 1) = v44[1];
              v48 = (void **)*v47;
              sub_239A997F8((uint64_t)v20, v47);
              v44 = *(_OWORD **)v44;
              v47 = v48;
              if (!v48)
                goto LABEL_44;
            }
            do
            {
              v50 = (void **)*v47;
              operator delete(v47);
              v47 = v50;
            }
            while (v50);
          }
          else
          {
LABEL_44:
            while (v44)
            {
              v49 = operator new(0x20uLL);
              *(_QWORD *)v49 = 0;
              v49[1] = v44[1];
              *((_QWORD *)v49 + 1) = *((_QWORD *)v49 + 2);
              sub_239A997F8((uint64_t)v20, v49);
              v44 = *(_OWORD **)v44;
            }
          }
        }
        v20 += 5;
        --v26;
      }
      while (v26);
    }
LABEL_98:
    v96 = __p[0];
    if (__p[0])
    {
      do
      {
        v97 = (_QWORD *)*v96;
        operator delete(v96);
        v96 = v97;
      }
      while (v97);
    }
    v98 = v103[0];
    v103[0] = 0;
    if (v98)
      operator delete(v98);
    v6 = v101;
    a3 = v102;
    goto LABEL_103;
  }
LABEL_104:
  if (v5 > a2 && ((*(_QWORD *)(v7 + (v6 & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2) = *a3;
}

void sub_239BEF830()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 8) = v1;
  JUMPOUT(0x239BEF894);
}

void sub_239BEF83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2395586BC((uint64_t)va);
  JUMPOUT(0x239BEF894);
}

void sub_239BEF850(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_239BEF870()
{
  __cxa_end_catch();
  JUMPOUT(0x239BEF894);
}

void sub_239BEF880()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x239BEF894);
}

void sub_239BEF890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239BEF8A4(_QWORD *a1, char **a2)
{
  char **v2;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  int64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *__p;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  char **v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;

  v2 = a2;
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = a2[1];
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 3);
      v6 -= 24;
      v7 = v8;
      if (v8)
      {
        *((_QWORD *)v4 - 2) = v7;
        operator delete(v7);
      }
      v4 = v6;
    }
    while (v6 != v5);
  }
  v2[1] = v5;
  v10 = a1[3];
  v9 = a1[4];
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_2394189F8();
    v12 = v11 >> 3;
    v13 = operator new(8 * (((unint64_t)((v11 >> 3) - 1) >> 6) + 1));
    v97 = v13;
    if ((unint64_t)v11 >= 0x208)
      v14 = (unint64_t)((v11 >> 3) - 1) >> 6;
    else
      v14 = 0;
    __p = v13;
    v13[v14] = 0;
    if ((unint64_t)v11 >= 0x200)
      bzero(v13, 8 * (v12 >> 6));
    v15 = ((unint64_t)v11 >> 3) & 0x3F;
    v16 = __p;
    if (v15)
      __p[v12 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v94 = 0;
    if (v12 <= 1)
      v20 = 1;
    else
      v20 = v12;
    v88 = v20;
    v96 = 0;
    v90 = a1;
    v91 = v2;
    while (1)
    {
      v89 = v19;
      if (a1[7] > v19)
      {
        v21 = v19 >> 6;
        v22 = 1 << v19;
        if ((*(_QWORD *)(a1[6] + 8 * (v19 >> 6)) & (1 << v19)) != 0 && (v16[v21] & v22) == 0)
          break;
      }
LABEL_20:
      v19 = v89 + 1;
      if (v89 + 1 == v88)
      {
        if (!v18 || (operator delete(v18), (v16 = v97) != 0))
          operator delete(v16);
        return;
      }
    }
    v23 = a1[4] - a1[3];
    v24 = v23 >> 3;
    v25 = v96;
    if (v23 >> 3 <= (unint64_t)((v96 - v17) >> 3))
    {
      v26 = v17;
    }
    else
    {
      if (v23 < 0)
        goto LABEL_113;
      v26 = (char *)operator new(v23);
      v25 = &v26[8 * v24];
      v94 = v26;
      v96 = v25;
      if (v17)
      {
        operator delete(v17);
        v25 = &v26[8 * v24];
      }
    }
    if (v26 < v25)
    {
      *(_QWORD *)v26 = v89;
      v27 = v26 + 8;
LABEL_52:
      v95 = v27;
      v44 = a1[3];
      v43 = a1[4];
      v102 = 0;
      v103 = 0;
      v101 = 0;
      v45 = v43 - v44;
      if (v43 == v44)
      {
        v50 = 0;
      }
      else
      {
        if (v45 < 0)
          sub_2394189F8();
        v46 = v45 >> 3;
        v47 = (unint64_t)((v45 >> 3) - 1) >> 6;
        v48 = operator new(8 * (v47 + 1));
        v102 = v45 >> 3;
        v103 = v47 + 1;
        v101 = v48;
        if ((unint64_t)v45 >= 0x208)
          v49 = (unint64_t)((v45 >> 3) - 1) >> 6;
        else
          v49 = 0;
        v50 = v48;
        v48[v49] = 0;
        if ((unint64_t)v45 >= 0x200)
          bzero(v48, 8 * (v46 >> 6));
        v51 = ((unint64_t)v45 >> 3) & 0x3F;
        if (v51)
          v50[v46 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v51);
      }
      v50[v21] |= v22;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v52 = v94;
      v53 = v50;
      if (v27 == v94)
        goto LABEL_95;
      v54 = 0;
      v55 = 0;
      do
      {
        v99 = v54;
        sub_239BF0570(a1, *(_QWORD *)&v52[8 * v55], (uint64_t)&v98);
        v92 = v55;
        v54 = v98;
        v56 = v99;
        if (v98 != v99)
        {
          v57 = 0;
          do
          {
            v59 = v54[v57];
            v60 = 1 << v59;
            if (((1 << v59) & v53[v59 >> 6]) == 0)
            {
              v61 = v95;
              if (v95 < v96)
              {
                *(_QWORD *)v95 = v59;
                v58 = v95 + 8;
              }
              else
              {
                v93 = v53;
                v62 = v94;
                v63 = v95 - v94;
                v64 = (v95 - v94) >> 3;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 61)
                  sub_2394189F8();
                v66 = v96 - v94;
                if ((v96 - v94) >> 2 > v65)
                  v65 = v66 >> 2;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                  v67 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  if (v67 >> 61)
                    sub_239418A80();
                  v68 = v54;
                  v69 = v56;
                  v70 = v67;
                  v71 = operator new(8 * v67);
                  v56 = v69;
                  v67 = v70;
                  v54 = v68;
                  v63 = v95 - v94;
                  v60 = 1 << v59;
                }
                else
                {
                  v71 = 0;
                }
                v72 = &v71[8 * v64];
                *(_QWORD *)v72 = v59;
                v58 = v72 + 8;
                if (v95 != v94)
                {
                  v73 = v95 - 8 - v94;
                  if (v73 < 0x58)
                    goto LABEL_120;
                  if ((unint64_t)(v95 - &v71[v63]) < 0x20)
                    goto LABEL_120;
                  v74 = (v73 >> 3) + 1;
                  v75 = &v71[8 * v64 - 16];
                  v76 = v95 - 16;
                  v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v78 = *(_OWORD *)v76;
                    *(v75 - 1) = *((_OWORD *)v76 - 1);
                    *v75 = v78;
                    v75 -= 2;
                    v76 -= 32;
                    v77 -= 4;
                  }
                  while (v77);
                  v72 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
                  v61 = &v95[-8 * (v74 & 0x3FFFFFFFFFFFFFFCLL)];
                  if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_120:
                    do
                    {
                      v79 = *((_QWORD *)v61 - 1);
                      v61 -= 8;
                      *((_QWORD *)v72 - 1) = v79;
                      v72 -= 8;
                    }
                    while (v61 != v94);
                  }
                }
                v94 = v72;
                v96 = &v71[8 * v67];
                if (v62)
                {
                  operator delete(v62);
                  v54 = v98;
                  v56 = v99;
                }
                v53 = v93;
              }
              v95 = v58;
              v53[v59 >> 6] |= v60;
            }
            ++v57;
          }
          while (v57 < v56 - v54);
        }
        v2 = v91;
        v55 = v92 + 1;
        v52 = v94;
        a1 = v90;
      }
      while (v92 + 1 < (unint64_t)((v95 - v94) >> 3));
      if (v54)
      {
        v99 = v54;
        operator delete(v54);
        v53 = v101;
      }
      if (v53)
LABEL_95:
        operator delete(v53);
      v80 = v2[1];
      if (v80 >= v2[2])
      {
        v84 = sub_239BF0310(v2, v94, (uint64_t)v95);
        v16 = __p;
      }
      else
      {
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
        *((_QWORD *)v80 + 2) = 0;
        v81 = v95 - v94;
        v16 = __p;
        if (v95 != v94)
        {
          if (v81 < 0)
            sub_2394189F8();
          v82 = (char *)operator new(v95 - v94);
          *(_QWORD *)v80 = v82;
          *((_QWORD *)v80 + 1) = v82;
          v83 = &v82[8 * (v81 >> 3)];
          *((_QWORD *)v80 + 2) = v83;
          memcpy(v82, v94, v81);
          *((_QWORD *)v80 + 1) = v83;
        }
        v84 = v80 + 24;
        v2[1] = v80 + 24;
      }
      v2[1] = v84;
      v17 = v94;
      v18 = v95;
      if (v95 == v94)
      {
        v17 = v95;
      }
      else
      {
        v85 = 0;
        v86 = (v95 - v94) >> 3;
        if (v86 <= 1)
          v86 = 1;
        do
        {
          *(_QWORD *)((char *)v16 + ((*(_QWORD *)&v94[8 * v85] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)&v94[8 * v85];
          ++v85;
        }
        while (v86 != v85);
        v18 = v94;
      }
      goto LABEL_20;
    }
    v28 = v94;
    v29 = (v26 - v94) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
LABEL_113:
      sub_2394189F8();
    v31 = v25 - v94;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
        sub_239418A80();
      v33 = operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * v29];
    *(_QWORD *)v34 = v89;
    v27 = v34 + 8;
    if (v26 != v94)
    {
      v35 = v26 - v94 - 8;
      if (v35 < 0x58)
      {
        v36 = v26;
        goto LABEL_49;
      }
      if ((unint64_t)(v94 - v33) < 0x20)
      {
        v36 = v26;
        do
        {
LABEL_49:
          v42 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v34 - 1) = v42;
          v34 -= 8;
        }
        while (v36 != v94);
        goto LABEL_50;
      }
      v37 = (v35 >> 3) + 1;
      v36 = &v26[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
      v38 = &v33[8 * v29 - 16];
      v39 = v26 - 16;
      v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      v34 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_49;
    }
LABEL_50:
    v94 = v34;
    v96 = &v33[8 * v32];
    if (v28)
      operator delete(v28);
    goto LABEL_52;
  }
}

void sub_239BEFF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  v27 = *(void **)v25;
  if (*(_QWORD *)v25)
  {
    *(_QWORD *)(v25 + 8) = v27;
    operator delete(v27);
  }
  *(_QWORD *)(a14 + 8) = v25;
  if (__p)
    operator delete(__p);
  operator delete(a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_239BF0034(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0x3FF0000000000000;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239BF02FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_239BF0310(char **a1, const void *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 2) = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = operator new(v14);
    *(_QWORD *)v12 = v15;
    v16 = (unint64_t)v15 + 8 * (v14 >> 3);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v4 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v4)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v4);
    }
  }
  if (v4)
    operator delete(v4);
  return v17;
}

void sub_239BF04E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_239BF0504((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239BF0504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239BF0570(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v3 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (a1[7] > a2 && ((*(_QWORD *)(a1[6] + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v5 = *a1 + 40 * a2;
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 3)
    {
      if (v6 >> 61)
LABEL_38:
        sub_2394189F8();
      v7 = 8 * v6;
      v8 = (char *)operator new(8 * v6);
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = &v8[v7];
      if (v3)
        operator delete(v3);
    }
    v9 = *(_QWORD **)(v5 + 16);
    if (v9)
    {
      v10 = *(char **)(a3 + 8);
      while (1)
      {
        v12 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v10 >= v12)
          break;
        *(_QWORD *)v10 = v9[2];
        v11 = v10 + 8;
LABEL_10:
        *(_QWORD *)(a3 + 8) = v11;
        v9 = (_QWORD *)*v9;
        v10 = v11;
        if (!v9)
          return;
      }
      v13 = *(char **)a3;
      v14 = (uint64_t)&v10[-*(_QWORD *)a3];
      v15 = v14 >> 3;
      v16 = (v14 >> 3) + 1;
      if (v16 >> 61)
        goto LABEL_38;
      v17 = v12 - (_QWORD)v13;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          sub_239418A80();
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *v20 = v9[2];
      v11 = (char *)(v20 + 1);
      if (v10 != v13)
      {
        v21 = v10 - 8 - v13;
        if (v21 >= 0x168)
        {
          if (&v19[v14 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
          {
            v22 = v10;
          }
          else if (&v10[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
          {
            v22 = v10;
          }
          else if ((unint64_t)(v10 - v19 - v14) >= 0x20)
          {
            v23 = (v21 >> 3) + 1;
            v22 = &v10[-8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
            v24 = &v19[8 * v15 - 16];
            v25 = v10 - 16;
            v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v27 = *(_OWORD *)v25;
              *(v24 - 1) = *((_OWORD *)v25 - 1);
              *v24 = v27;
              v24 -= 2;
              v25 -= 32;
              v26 -= 4;
            }
            while (v26);
            v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
            if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_35;
          }
          else
          {
            v22 = v10;
          }
        }
        else
        {
          v22 = v10;
        }
        do
        {
          v28 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v20 = v28;
        }
        while (v22 != v13);
      }
LABEL_35:
      *(_QWORD *)a3 = v20;
      *(_QWORD *)(a3 + 8) = v11;
      *(_QWORD *)(a3 + 16) = &v19[8 * v18];
      if (v13)
        operator delete(v13);
      goto LABEL_10;
    }
  }
}

uint64_t sub_239BF07B4(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(_QWORD **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = v10[2];
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = v10[2];
          if (v13 >= v12)
            prime = v13 % v12;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (v16[2] == v13)
                    goto LABEL_78;
                }
                else if ((v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (v16[2] == v13)
                  goto LABEL_78;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = operator new(0x20uLL);
      *v19 = 0;
      v19[1] = v13;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v10 + 1);
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v12 || (float)(v21 * (float)v12) < v20)
      {
        v22 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v22 = 1;
        v23 = v22 | (2 * v12);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        if (v25 == 1)
        {
          v25 = 2;
        }
        else if ((v25 & (v25 - 1)) != 0)
        {
          v25 = std::__next_prime(v25);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v25 > v12)
          goto LABEL_52;
        if (v25 < v12)
        {
          v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
          {
            v26 = std::__next_prime(v26);
          }
          else
          {
            v28 = 1 << -(char)__clz(v26 - 1);
            if (v26 >= 2)
              v26 = v28;
          }
          if (v25 <= v26)
            v25 = v26;
          if (v25 < v12)
LABEL_52:
            sub_239A501C8(a1, v25);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
      }
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v30)
      {
        *v19 = *v30;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v29 + 8 * prime) = v11;
        if (!*v19)
          goto LABEL_77;
        v31 = *(_QWORD *)(*v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v31 >= v12)
            v31 %= v12;
        }
        else
        {
          v31 &= v12 - 1;
        }
        v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
      }
      *v30 = v19;
LABEL_77:
      ++*(_QWORD *)(a1 + 24);
LABEL_78:
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_239BF0B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239BF0B88(uint64_t a1, uint64_t a2)
{
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  float64x2_t v17;
  float64_t v19;
  int64x2_t v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v28;
  float64x2_t v29;
  unint64_t v30;
  float64x2_t v31;
  unint64_t v32;
  float64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  unint64_t *v44;
  double v45;
  double v46;
  float64x2_t v48;
  double v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  float64x2_t v58;
  double v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  double v70;
  double v71;
  float64x2_t v72;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  float64_t *v80;
  float64x2_t v81;
  float64x2_t v82;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  double v89;
  double v90;
  float64x2_t v92;
  unint64_t v93;
  double v94;
  double v95;
  double v96;
  int8x16_t v97;
  float64x2_t v98;
  double v99;
  double v100;
  unint64_t *v101;
  unint64_t *v102;
  uint64_t v103;

  _Q3 = *(float64x2_t *)a2;
  _D1 = *(_QWORD *)(a2 + 8);
  v95 = *(double *)(a2 + 16);
  v97 = *(int8x16_t *)a2;
  __asm { FMLA            D0, D1, V3.D[1] }
  if (sqrt(_D0 + v95 * v95) < 2.22044605e-16)
    return 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  sub_2394B5624(a1, (uint64_t)&v101, 1);
  v12 = v101;
  v13 = v102;
  if (v101 == v102)
  {
    v15 = 0;
    v14 = 0;
    v44 = v101;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v93 = vextq_s8(v97, v97, 8uLL).u64[0];
    do
    {
      v16 = sub_239470FCC(a1, *v12);
      switch(*((_BYTE *)v16 + 240))
      {
        case 0:
        case 1:
          *(_QWORD *)&_Q0.f64[0] = v16[10];
          v29 = *((float64x2_t *)v16 + 4);
          v19 = *((double *)v16 + 14);
          v20 = *((int64x2_t *)v16 + 6);
          v21 = *((double *)v16 + 18);
          v22 = *((float64x2_t *)v16 + 8);
          v23 = (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
          v24 = (float64x2_t)vzip1q_s64((int64x2_t)v29, v20);
          v25 = (float64x2_t)vzip2q_s64((int64x2_t)v29, v20);
          v26.f64[0] = _Q0.f64[0];
          v26.f64[1] = v19;
          _D5 = v16[17];
          v28 = v16[13];
          *(_QWORD *)&v29.f64[0] = v16[9];
          v30 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
          *(_QWORD *)&v17.f64[0] = v16[22];
          v31 = *((float64x2_t *)v16 + 10);
          v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          v33 = (float64x2_t)xmmword_239EC6850;
          goto LABEL_11;
        case 3:
          *(_QWORD *)&_Q0.f64[0] = v16[10];
          v29 = *((float64x2_t *)v16 + 4);
          v19 = *((double *)v16 + 14);
          v34 = *((int64x2_t *)v16 + 6);
          v21 = *((double *)v16 + 18);
          v22 = *((float64x2_t *)v16 + 8);
          v23 = (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
          v24 = (float64x2_t)vzip1q_s64((int64x2_t)v29, v34);
          v25 = (float64x2_t)vzip2q_s64((int64x2_t)v29, v34);
          v26.f64[0] = _Q0.f64[0];
          v26.f64[1] = v19;
          _D5 = v16[17];
          v28 = v16[13];
          *(_QWORD *)&v29.f64[0] = v16[9];
          v30 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
          *(_QWORD *)&v17.f64[0] = v16[22];
          v31 = *((float64x2_t *)v16 + 10);
          v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          v33 = (float64x2_t)xmmword_239EC68E0;
          goto LABEL_11;
        case 6:
          *(_QWORD *)&_Q0.f64[0] = v16[10];
          v29 = *((float64x2_t *)v16 + 4);
          v19 = *((double *)v16 + 14);
          v35 = *((int64x2_t *)v16 + 6);
          v21 = *((double *)v16 + 18);
          v22 = *((float64x2_t *)v16 + 8);
          v23 = (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
          v24 = (float64x2_t)vzip1q_s64((int64x2_t)v29, v35);
          v25 = (float64x2_t)vzip2q_s64((int64x2_t)v29, v35);
          v26.f64[0] = _Q0.f64[0];
          v26.f64[1] = v19;
          _D5 = v16[17];
          v28 = v16[13];
          *(_QWORD *)&v29.f64[0] = v16[9];
          v30 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
          *(_QWORD *)&v17.f64[0] = v16[22];
          v31 = *((float64x2_t *)v16 + 10);
          v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          v33 = (float64x2_t)xmmword_239EC6840;
          goto LABEL_11;
        case 8:
          *(_QWORD *)&_Q0.f64[0] = v16[10];
          v29 = *((float64x2_t *)v16 + 4);
          v19 = *((double *)v16 + 14);
          v36 = *((int64x2_t *)v16 + 6);
          v21 = *((double *)v16 + 18);
          v22 = *((float64x2_t *)v16 + 8);
          v23 = (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
          v24 = (float64x2_t)vzip1q_s64((int64x2_t)v29, v36);
          v25 = (float64x2_t)vzip2q_s64((int64x2_t)v29, v36);
          v26.f64[0] = _Q0.f64[0];
          v26.f64[1] = v19;
          _D5 = v16[17];
          v28 = v16[13];
          *(_QWORD *)&v29.f64[0] = v16[9];
          v30 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
          *(_QWORD *)&v17.f64[0] = v16[22];
          v31 = *((float64x2_t *)v16 + 10);
          v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          v33 = (float64x2_t)xmmword_239EC68D0;
LABEL_11:
          v37 = vsubq_f64(v33, v31);
          v38 = vsubq_f64((float64x2_t)0, v17).f64[0];
          v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, v37.f64[0]), v25, v37, 1), v26, v38);
          v23.f64[0] = vmulq_f64(v22, v37).f64[0]
                     + v23.f64[0] * *(double *)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).i64
                     + v21 * v38;
          *(_QWORD *)&v39.f64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
          *(_QWORD *)&v31.f64[1] = v32;
          _Q19 = vsubq_f64((float64x2_t)0, v31);
          _Q0.f64[1] = v19;
          *(_QWORD *)&v24.f64[1] = v30;
          *(_QWORD *)&v29.f64[1] = v28;
          _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q19.f64[0]), v29, _Q19, 1), _Q0, v38);
          __asm { FMLA            D0, D5, V19.D[1] }
          _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v21, v38);
          _Q1 = vsubq_f64(v39, _Q2);
          *(_QWORD *)&_Q2.f64[0] = v93;
          __asm { FMLA            D3, D2, V1.D[1] }
          v99 = vmlad_n_f64(_D3, v95, vsubq_f64(v23, _Q0).f64[0]);
          if (fabs(acos(fabs(v99)) * -180.0 / 3.14159265 + 90.0) >= 8.0)
          {
            if (v99 >= 0.0)
              ++v14;
            else
              ++v15;
          }
          break;
        default:
          break;
      }
      ++v12;
    }
    while (v12 != v13);
    v12 = v101;
    v44 = v102;
  }
  v45 = (double)(v14 + v15);
  v46 = fmax((double)(unint64_t)(v44 - v12) * 0.2, 3.0);
  if (v46 <= v45 && v14 > v15)
  {
    v48 = vnegq_f64(*(float64x2_t *)(a2 + 16));
    *(float64x2_t *)a2 = vnegq_f64(*(float64x2_t *)a2);
    *(float64x2_t *)(a2 + 16) = v48;
  }
  if (v12)
  {
    v102 = v12;
    operator delete(v12);
  }
  if (v46 > v45)
  {
    _Q3 = *(int8x16_t *)a2;
    *(_QWORD *)&v96 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    v98 = *(float64x2_t *)a2;
    _D1 = *(_QWORD *)(a2 + 8);
    __asm { FMLA            D0, D1, V3.D[1] }
    v100 = *(double *)(a2 + 16);
    v52 = sqrt(_D0 + v100 * v100);
    if (v52 >= 2.22044605e-16)
    {
      v101 = 0;
      v102 = 0;
      v103 = 0;
      sub_2394B5624(a1, (uint64_t)&v101, 1);
      v53 = v101;
      v54 = v102;
      if (v101 == v102)
      {
        v56 = 0;
        v55 = 0;
        v69 = v101;
      }
      else
      {
        v55 = 0;
        v56 = 0;
        do
        {
          v57 = sub_2394650AC(a1, *v53);
          *(_QWORD *)&v58.f64[0] = v57[22];
          *(_QWORD *)&v58.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v58);
          _Q7 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v57 + 10));
          _D1 = v57[9];
          __asm { FMLA            D16, D1, V7.D[1] }
          _D1 = v57[13];
          __asm { FMLA            D0, D1, V7.D[1] }
          _D2 = v57[17];
          __asm { FMLA            D1, D2, V7.D[1] }
          v66 = *(double *)(a2 + 24)
              + vmlad_n_f64(_D16, *((double *)v57 + 10), v58.f64[0]) * v98.f64[0]
              + vmlad_n_f64(_D0, *((double *)v57 + 14), v58.f64[0]) * v96
              + vmlad_n_f64(_D1, *((double *)v57 + 18), v58.f64[0]) * v100;
          LODWORD(v67) = fabs(v66) >= 0.05;
          if (v66 > 0.0)
            v68 = v67;
          else
            v68 = 0;
          v56 += v68;
          if (v66 <= 0.0)
            v67 = v67;
          else
            v67 = 0;
          v55 += v67;
          ++v53;
        }
        while (v53 != v54);
        v53 = v101;
        v69 = v102;
      }
      v70 = (double)(v55 + v56);
      v71 = fmax((double)(unint64_t)(v69 - v53) * 0.2, 3.0);
      if (v55 > v56 && v71 <= v70)
      {
        v72 = vnegq_f64(*(float64x2_t *)(a2 + 16));
        *(float64x2_t *)a2 = vnegq_f64(*(float64x2_t *)a2);
        *(float64x2_t *)(a2 + 16) = v72;
      }
      if (v53)
      {
        v102 = v53;
        operator delete(v53);
      }
      if (v71 <= v70)
        return 1;
      _Q3 = *(int8x16_t *)a2;
      *(_QWORD *)&v96 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
      _D1 = *(_QWORD *)(a2 + 8);
      __asm { FMLA            D0, D1, V3.D[1] }
      v100 = *(double *)(a2 + 16);
      v52 = sqrt(_D0 + v100 * v100);
    }
    if (v52 < 2.22044605e-16)
      return 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    sub_2394B5624(a1, (uint64_t)&v101, 1);
    v76 = v101;
    v77 = v102;
    if (v101 == v102)
    {
      v79 = 0;
      v78 = 0;
      v88 = v101;
    }
    else
    {
      v78 = 0;
      v79 = 0;
      do
      {
        v80 = (float64_t *)sub_2394650AC(a1, *v76);
        v81.f64[0] = v80[18];
        v82.f64[0] = v80[10];
        v82.f64[1] = v80[14];
        _Q2.f64[0] = 1.0 / sqrt(v82.f64[0] * v82.f64[0] + v82.f64[1] * v82.f64[1] + v81.f64[0] * v81.f64[0]);
        *(_QWORD *)&v81.f64[0] = *(_OWORD *)&vmulq_f64(v81, _Q2);
        _Q1 = vmulq_n_f64(v82, _Q2.f64[0]);
        _Q2.f64[0] = v96;
        __asm { FMLA            D3, D2, V1.D[1] }
        v94 = vmlad_n_f64(_D3, v100, v81.f64[0]);
        LODWORD(v86) = fabs(acos(fabs(v94)) * -180.0 / 3.14159265 + 90.0) >= 5.0;
        if (v94 < 0.0)
          v87 = v86;
        else
          v87 = 0;
        v79 += v87;
        if (v94 >= 0.0)
          v86 = v86;
        else
          v86 = 0;
        v78 += v86;
        ++v76;
      }
      while (v76 != v77);
      v76 = v101;
      v88 = v102;
    }
    v89 = (double)(v78 + v79);
    v90 = fmax((double)(unint64_t)(v88 - v76) * 0.2, 3.0);
    if (v90 <= v89 && v78 > v79)
    {
      v92 = vnegq_f64(*(float64x2_t *)(a2 + 16));
      *(float64x2_t *)a2 = vnegq_f64(*(float64x2_t *)a2);
      *(float64x2_t *)(a2 + 16) = v92;
    }
    if (v76)
    {
      v102 = v76;
      operator delete(v76);
    }
    if (v90 > v89)
      return 0;
  }
  return 1;
}

void sub_239BF1248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239BF1278(_QWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  double v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  double v18;
  long double v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  void *v28;
  int v31;
  __int128 *v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  double v41;
  long double v42;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  double v49;
  BOOL v50;
  __int128 v51;
  uint64_t v53;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  _BYTE v58[2504];
  uint64_t v59;
  uint64_t (**v60)();
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  void *__p;
  void *v67;
  uint64_t v68;
  void *__src;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) < 3)
    return 0;
  v8 = *(_QWORD *)(a4 + 24);
  v60 = &off_250AFAEF8;
  v63 = v8;
  v64 = a1;
  v56 = *(_OWORD *)(a4 + 32);
  v57 = *(_QWORD *)a4;
  LODWORD(v79) = 0;
  sub_239454CD8((int *)&v79, (uint64_t)v58);
  v9 = ((unint64_t (*)(uint64_t))v60[2])((uint64_t)&v60);
  v73 = v9;
  v10 = v60[3]();
  v72 = v10;
  LODWORD(v15) = 1;
  v16 = 1.0;
  if (*((double *)&v56 + 1) < 1.0 && *((double *)&v56 + 1) > 0.0)
  {
    *(double *)&v17 = log(1.0 - *(double *)&v56);
    v18 = *(double *)&v17;
    LODWORD(v17) = 3;
    v19 = pow(*((long double *)&v56 + 1), (double)v17);
    v16 = v18 / log(1.0 - v19);
    v15 = vcvtpd_u64_f64(v16);
    if (v15 == -1)
    {
      v53 = 120;
LABEL_75:
      sub_239A444D4((uint64_t)"unknown file", v53, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  if (v9 < v10)
  {
    v53 = 171;
    goto LABEL_75;
  }
  v70 = 0;
  __src = 0;
  v71 = 0;
  if (v9)
  {
    v20 = ((unint64_t)v9 - 1) >> 6;
    v21 = (char *)operator new(8 * (v20 + 1));
    v22 = v21;
    v71 = v20 + 1;
    __src = v21;
    v70 = v9;
    if (v9 >= 0x41)
      v23 = ((unint64_t)v9 - 1) >> 6;
    else
      v23 = 0;
    *(_QWORD *)&v21[8 * v23] = 0;
    v24 = 8 * ((unint64_t)v9 >> 6);
    if (v9 >= 0x40)
      bzero(v21, v24);
    if ((v9 & 0x3F) != 0)
      *(_QWORD *)&v22[v24] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v9 & 0x3F));
  }
  v55 = a4;
  if ((_DWORD)v15)
  {
    v25 = 0;
    v26 = -2147483647;
    while (1)
    {
      if (v72 > v73)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v73)
      {
        if ((double)v73 * 0.5 >= (double)v72)
          sub_239455384((uint64_t)v58, &v73, (int *)&v72, (int32x4_t **)&__p);
        else
          sub_2394551BC((uint64_t)v58, &v73, &v72, (int32x4_t **)&__p);
      }
      else
      {
        v67 = 0;
        __p = 0;
        v68 = 0;
      }
      if (((unsigned int (*)(uint64_t, uint64_t *, double, double, float64x2_t, double, float64x2_t))v60[5])((uint64_t)&v60, (uint64_t *)&__p, v16, v11, v12, v13, v14))
      {
        break;
      }
      v27 = 1;
      v28 = __p;
      if (__p)
        goto LABEL_18;
LABEL_19:
      if (v15 - 1 == v25++ || !v27)
        goto LABEL_57;
    }
    v31 = ((uint64_t (*)(uint64_t, uint64_t *))v60[4])((uint64_t)&v60, (uint64_t *)&__src);
    if (v31 <= v26)
    {
      v33 = v70;
    }
    else
    {
      v32 = (__int128 *)((uint64_t (*)(uint64_t))v60[6])((uint64_t)&v60);
      v79 = *v32;
      v80 = v32[1];
      v33 = v70;
      if (&__src != (void **)a3)
      {
        if (v70)
        {
          v34 = *(void **)a3;
          if (v70 <= *(_QWORD *)(a3 + 16) << 6)
          {
            v35 = v70 - 1;
          }
          else
          {
            if (v34)
            {
              operator delete(v34);
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              v33 = v70;
            }
            if ((v33 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v35 = v33 - 1;
            v36 = ((v33 - 1) >> 6) + 1;
            v34 = operator new(8 * v36);
            *(_QWORD *)a3 = v34;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = v36;
          }
          memmove(v34, __src, ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v33 = v70;
        }
        *(_QWORD *)(a3 + 8) = v33;
      }
      v26 = v31;
    }
    v65 = 1;
    v77 = (uint64_t)__src;
    v78 = 0;
    v74 = (char *)__src + 8 * (v33 >> 6);
    v75 = v33 & 0x3F;
    v37 = sub_239458E50((uint64_t)&v77, (uint64_t)&v74, &v65);
    v38 = v15;
    if (v37)
    {
      v16 = (double)v37;
      LODWORD(v11) = v73;
      v11 = (double)*(unint64_t *)&v11;
      v39 = (double)v37 / v11;
      if (v39 >= 1.0)
      {
        v38 = 1;
      }
      else
      {
        v38 = 1;
        if (v39 > 0.0)
        {
          *(double *)&v40 = log(1.0 - *(double *)&v56);
          v41 = *(double *)&v40 * 3.0;
          LODWORD(v40) = 3;
          v42 = pow(v39, (double)v40);
          v16 = v41 / log(1.0 - v42);
          v38 = vcvtpd_u64_f64(v16);
          if (v38 == -1)
          {
            sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
        }
      }
    }
    v27 = v38 > v25 || v57 > v25;
    v28 = __p;
    if (!__p)
      goto LABEL_19;
LABEL_18:
    v67 = v28;
    operator delete(v28);
    goto LABEL_19;
  }
LABEL_57:
  v61 = v79;
  v62 = v80;
  v44 = *(void **)a3;
  v45 = *(_QWORD *)a3 + 8 * (*(_QWORD *)(a3 + 8) >> 6);
  v46 = *(_QWORD *)(a3 + 8) & 0x3FLL;
  v76 = 1;
  __p = v44;
  LODWORD(v67) = 0;
  v77 = v45;
  v78 = v46;
  v47 = sub_239458E50((uint64_t)&__p, (uint64_t)&v77, &v76);
  if (__src)
    operator delete(__src);
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v49 = (double)v47 / (double)v48;
  if (*(_QWORD *)(v55 + 16) < v48)
    v48 = *(_QWORD *)(v55 + 16);
  v50 = v49 < *(double *)(v55 + 48) || v47 < (int)v48;
  v4 = !v50;
  if (!v50)
  {
    v51 = v62;
    *a2 = v61;
    a2[1] = v51;
  }
  sub_239911CF8((uint64_t)&v59);
  return v4;
}

void sub_239BF183C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0xA50];
  if (STACK[0xA50])
  {
    STACK[0xA58] = (unint64_t)v2;
    operator delete(v2);
  }
  if (STACK[0xA68])
    operator delete((void *)STACK[0xA68]);
  sub_239911CF8((uint64_t)&STACK[0x9F8]);
  _Unwind_Resume(a1);
}

void sub_239BF18A0()
{
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_239BF18B4(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 3);
}

uint64_t sub_239BF18D4()
{
  return 3;
}

uint64_t sub_239BF18DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  uint64_t v12;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = **(_QWORD **)(a1 + 48);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) == v2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v9 = v2 + v5;
    _D9 = *(_QWORD *)(v9 + 8);
    v11 = *(double *)(v9 + 16);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    _Q1 = *(_OWORD *)v12;
    __asm { FMLA            D2, D9, V1.D[1] }
    v19 = *a2;
    v20 = v7 >> 6;
    v21 = 1 << v7;
    if (fabs(*(double *)(v12 + 24) + vmlad_n_f64(_D2, v11, *(double *)(v12 + 16))) >= *(double *)(a1 + 40))
    {
      v8 = *(_QWORD *)(v19 + 8 * v20) & ~v21;
    }
    else
    {
      v8 = *(_QWORD *)(v19 + 8 * v20) | v21;
      v6 = (v6 + 1);
    }
    *(_QWORD *)(v19 + 8 * v20) = v8;
    ++v7;
    v2 = **(_QWORD **)(a1 + 48);
    v5 += 24;
  }
  while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - v2) >> 3));
  return v6;
}

uint64_t sub_239BF19E8(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v33;
  float64x2_t v34;
  int8x16_t v35;
  double v36;
  double v39;
  double v40;
  double v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v49;
  float64x2_t v52;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;

  v7 = *a2;
  if (a2[1] == *a2)
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v15 = **(_QWORD **)(a1 + 48) + 24 * *(unsigned int *)(v7 + 4 * v12);
    if (v10 < v11)
    {
      v14 = *(_OWORD *)v15;
      *((_QWORD *)v10 + 2) = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v10 = v14;
      v10 += 24;
    }
    else
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3) + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_2394189F8();
      if (0x5555555555555556 * ((v11 - v13) >> 3) > v16)
        v16 = 0x5555555555555556 * ((v11 - v13) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 3) >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          sub_239418A80();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = *(_OWORD *)v15;
      v20 = &v18[8 * ((v10 - v13) >> 3)];
      *((_QWORD *)v20 + 2) = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v20 = v19;
      if (v10 == v13)
      {
        v23 = v10;
        v13 = &v18[8 * ((v10 - v13) >> 3)];
      }
      else
      {
        v21 = &v18[8 * ((v10 - v13) >> 3)];
        do
        {
          v22 = *(_OWORD *)(v10 - 24);
          *((_QWORD *)v21 - 1) = *((_QWORD *)v10 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v10 -= 24;
        }
        while (v10 != v13);
        v23 = v13;
        v13 = v21;
      }
      v11 = &v18[24 * v17];
      v10 = v20 + 24;
      if (v23)
        operator delete(v23);
    }
    ++v12;
    v7 = *a2;
  }
  while (v12 < (a2[1] - *a2) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3) >= 3)
  {
    a7.f64[0] = *((float64_t *)v13 + 5);
    v25 = *(float64x2_t *)(v13 + 24);
    a5.f64[0] = *((float64_t *)v13 + 8);
    v26 = *((float64x2_t *)v13 + 3);
    v34 = vsubq_f64(a7, a5);
    _D7 = vsubq_f64(v25, v26).f64[1];
    __asm { FMLA            D6, D7, V1.D[1] }
    v33 = sqrt(vmlad_n_f64(_D6, v34.f64[0], v34.f64[0]));
    v34.f64[0] = *((float64_t *)v13 + 2);
    v35 = *(int8x16_t *)v13;
    *(_QWORD *)&v36 = *(_OWORD *)&vsubq_f64(v34, a5);
    _D18 = vsubq_f64(*(float64x2_t *)v13, v26).f64[1];
    __asm { FMLA            D17, D18, V16.D[1] }
    v39 = sqrt(vmlad_n_f64(_D17, v36, v36));
    *(_QWORD *)&v40 = *(_OWORD *)&vsubq_f64(v34, a7);
    _D19 = vsubq_f64(*(float64x2_t *)v13, v25).f64[1];
    __asm { FMLA            D18, D19, V17.D[1] }
    v43 = sqrt(vmlad_n_f64(_D18, v40, v40));
    if (((v43 + v33 + v39) * 0.5 - v43)
       * (((v43 + v33 + v39) * 0.5 - v39)
        * ((v43 + v33 + v39)
         * 0.5
         * ((v43 + v33 + v39) * 0.5 - v33))) < 2.22044605e-16)
    {
      v24 = 0;
    }
    else
    {
      v44.f64[0] = *(float64_t *)v13;
      *(_QWORD *)&v44.f64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
      *(_QWORD *)&v25.f64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      _Q5 = vsubq_f64(v25, v44);
      v46 = vsubq_f64(a7, v34);
      _Q7 = vmulq_f64(_Q5, _Q5);
      _D17 = _Q5.f64[1];
      __asm { FMLA            D7, D17, V5.D[1] }
      _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q7.f64[0], v46.f64[0], v46.f64[0]));
      v49 = vmulq_f64(v46, _Q7);
      _Q5 = vmulq_n_f64(_Q5, _Q7.f64[0]);
      *(_QWORD *)&v26.f64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
      _Q3 = vsubq_f64(v26, v44);
      v52 = vsubq_f64(a5, v34);
      _Q7 = vmulq_f64(_Q3, _Q3);
      _D16 = _Q3.f64[1];
      __asm { FMLA            D7, D16, V3.D[1] }
      _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q7.f64[0], v52.f64[0], v52.f64[0]));
      v55 = vmulq_n_f64(_Q3, _Q7.f64[0]);
      v56 = vmulq_f64(v52, _Q7);
      v57 = (float64x2_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)v49, 8uLL);
      v49.f64[1] = _Q5.f64[0];
      v58 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v56, 8uLL);
      v56.f64[1] = v55.f64[0];
      _Q4 = vmlaq_f64(vnegq_f64(vmulq_f64(v49, v58)), v56, v57);
      v60 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v55, _Q5, 1)), _Q5, v55, 1);
      _Q3 = vmulq_f64(_Q4, _Q4);
      _Q5.f64[0] = _Q4.f64[1];
      __asm { FMLA            D3, D5, V4.D[1] }
      _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v60.f64[0], v60.f64[0]));
      v62 = vmulq_n_f64(_Q4, _Q3.f64[0]);
      v60.f64[0] = vmulq_f64(v60, _Q3).f64[0];
      *(float64x2_t *)(a1 + 8) = v62;
      *(float64_t *)(a1 + 24) = v60.f64[0];
      *(double *)(a1 + 32) = -(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v62, v44).f64[1]), *(double *)v35.i64, v62.f64[0])+ v60.f64[0] * v34.f64[0]);
      v24 = 1;
    }
  }
  else
  {
    v24 = 0;
    if (!v13)
      return v24;
  }
  operator delete(v13);
  return v24;
}

void sub_239BF1D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239BF1D8C(uint64_t a1)
{
  return a1 + 8;
}

__n128 sub_239BF1D94@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_239BF1DA8()
{
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_239BF1DBC(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88)) >> 3);
}

uint64_t sub_239BF1DDC()
{
  return 3;
}

uint64_t sub_239BF1DE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  float64x2_t *v15;
  double v23;
  float64x2_t v28;
  char *v31;
  unsigned int v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  uint64_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  double *v59;
  float64x2_t v60;
  int8x16_t v61;
  unint64_t v62;
  float64x2_t v63;
  unint64_t v65;
  double v69;
  double v70;
  uint64_t v71;
  float64x2_t v75;
  float64x2_t v79;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  float64x2_t v90;
  double v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  double *v105;
  double *v106;
  unint64_t v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  float64x2_t *v111;
  float64x2_t *v112;
  uint64_t v113;
  float64x2_t v114;
  unint64_t v115;
  double *v116;
  uint64_t v117;
  double v118;
  double v119;
  double *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  double *v126;
  double *v127;
  unint64_t v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  double *v133;
  uint64_t v134;
  __int128 v135;
  double *v136;
  double *v137;
  double v138;
  double v139;
  uint64_t v140;
  unint64_t v141;
  int8x16_t v142;
  float64x2_t v143;
  float64x2_t *v144;
  int8x16_t v145;
  unint64_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  int8x16_t v153;
  int8x16_t v154;
  unint64_t v155;
  double *v156;
  double v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  float64_t v170;
  int8x16_t v171;
  double v172;
  unint64_t v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  char *__p;
  void *__pa[2];
  char *v179;
  float64x2_t v180;
  char *v182;
  double *v183;
  double *v184;
  double *v185;
  float64x2_t v186;
  double v187;
  double *v188;
  double *v189;
  double *v190;

  v2 = a1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v182 = 0;
  v9 = *(_QWORD **)(v2 + 88);
  v10 = *v9;
  v168 = v2;
  if (v9[1] != *v9)
  {
    v11 = v5;
    v12 = 0;
    v179 = 0;
    v169 = 0;
    v13 = 0;
    v14 = 0;
    v175 = v4;
    while (1)
    {
      v15 = (float64x2_t *)(v10 + 24 * v13);
      v6.f64[0] = v15[1].f64[0];
      _Q2.f64[0] = *(float64_t *)(v3 + 16);
      v6 = vsubq_f64(v6, _Q2);
      _Q0 = vsubq_f64(*v15, *(float64x2_t *)v3);
      _Q2 = vmulq_f64(_Q0, _Q0);
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      _Q2.f64[0] = sqrt(vmlad_n_f64(_Q2.f64[0], v6.f64[0], v6.f64[0]));
      if (vabdd_f64(*(double *)(v11 + 48), _Q2.f64[0]) / *(double *)(v11 + 48) < *(double *)(v2 + 72))
      {
        _Q3 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
        _Q2.f64[0] = 1.0 / _Q2.f64[0];
        *(_QWORD *)&v23 = *(_OWORD *)&vmulq_f64(v6, _Q2);
        _Q0.f64[1] = _Q3.f64[0];
        _Q2 = vmulq_n_f64(_Q0, _Q2.f64[0]);
        v8.f64[0] = *(float64_t *)(v4 + 40);
        _Q6 = *(float64x2_t *)(v4 + 24);
        __asm { FMLA            D7, D3, V6.D[1] }
        _Q3.f64[0] = _D7 + v6.f64[0] * v8.f64[0];
        _Q0 = vmlsq_lane_f64(_Q0, _Q6, _Q3.f64[0], 0);
        v28 = vmlsq_f64(v6, _Q3, v8);
        _Q3 = vmulq_f64(_Q0, _Q0);
        _D5 = _Q0.f64[1];
        __asm { FMLA            D3, D5, V0.D[1] }
        _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v28.f64[0], v28.f64[0]));
        *(_QWORD *)&v28.f64[0] = *(_OWORD *)&vmulq_f64(v28, _Q3);
        _Q0.f64[0] = vmulq_n_f64(_Q0, *(double *)&_Q3).f64[1];
        __asm { FMLA            D3, D0, V2.D[1] }
        if (acos(fmin(fmax(vmlad_n_f64(_Q3.f64[0], v28.f64[0], v23), -1.0), 1.0)) * 180.0 / 3.14159265 < *(double *)(v2 + 64))
          break;
      }
      *(_QWORD *)(*a2 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v13);
LABEL_4:
      if (++v13 >= 0xAAAAAAAAAAAAAAABLL * ((v9[1] - v10) >> 3))
        goto LABEL_37;
    }
    if (v12 < v179)
    {
      *(_QWORD *)v12 = v13;
      v31 = v12 + 8;
      v32 = v169;
LABEL_28:
      *(_QWORD *)(*a2 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v169 = v32 + 1;
      v10 = *v9;
      v12 = v31;
      goto LABEL_4;
    }
    v33 = v14;
    v34 = v9;
    v35 = (char *)(v12 - v33);
    v36 = (v12 - v33) >> 3;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      sub_2394189F8();
    __p = v33;
    v38 = v179 - v33;
    v39 = (v179 - v33) >> 2;
    if (v39 > v37)
      v37 = v39;
    if (v38 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v37;
    if (v40)
    {
      if (v40 >> 61)
        sub_239418A80();
      v41 = operator new(8 * v40);
    }
    else
    {
      v41 = 0;
    }
    v42 = (char *)v41 + 8 * v36;
    *(_QWORD *)v42 = v13;
    v31 = v42 + 8;
    v43 = __p;
    if (v12 == __p)
    {
      v2 = v168;
      v9 = v34;
    }
    else
    {
      v44 = v12 - 8 - __p;
      if (v44 < 0x168
        || &v35[(_QWORD)v41 - 8 - (v44 & 0xFFFFFFFFFFFFFFF8)] > &v35[(_QWORD)v41 - 8]
        || &v12[-(v44 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
        || (unint64_t)(v12 - &v35[(_QWORD)v41]) < 0x20)
      {
        v45 = v12;
        v2 = v168;
        v9 = v34;
        v43 = __p;
      }
      else
      {
        v47 = (v44 >> 3) + 1;
        v45 = &v12[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
        v48 = (float64x2_t *)((char *)v41 + 8 * v36 - 16);
        v49 = (float64x2_t *)(v12 - 16);
        v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        v9 = v34;
        do
        {
          v6 = v49[-1];
          v51 = *v49;
          v48[-1] = v6;
          *v48 = v51;
          v48 -= 2;
          v49 -= 2;
          v50 -= 4;
        }
        while (v50);
        v42 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        v2 = v168;
        v43 = __p;
        if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_25;
      }
      do
      {
        v46 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *((_QWORD *)v42 - 1) = v46;
        v42 -= 8;
      }
      while (v45 != v43);
    }
LABEL_25:
    v182 = v42;
    v179 = (char *)v41 + 8 * v40;
    if (v43)
    {
      operator delete(v43);
      v9 = *(_QWORD **)(v2 + 88);
    }
    v14 = v42;
    v32 = v169;
    v4 = v175;
    goto LABEL_28;
  }
  v14 = 0;
  v12 = 0;
  v169 = 0;
LABEL_37:
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v53 = v12 - v14;
  v54 = 0.0;
  if ((unint64_t)(v12 - v14) < 0x10)
    goto LABEL_131;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  if (v53 < 0)
    sub_2394189F8();
  v55 = v52;
  v56 = (double *)operator new(v12 - v14);
  v57 = v56;
  v58 = 0;
  v59 = &v56[v53 >> 3];
  v188 = v56;
  v189 = v56;
  v190 = v59;
  v60.f64[0] = *(float64_t *)(v55 + 16);
  v180 = v60;
  v61 = *(int8x16_t *)v55;
  v62 = vextq_s8(v61, v61, 8uLL).u64[0];
  v63.f64[0] = *(float64_t *)(v55 + 40);
  _Q16 = *(float64x2_t *)(v55 + 24);
  v65 = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
  _Q1.f64[0] = 0.0;
  __asm { FMLA            D2, D1, V16.D[1] }
  _Q3.f64[0] = *(float64_t *)(v55 + 32);
  v69 = fmin(fabs(_D2 + v63.f64[0] * 0.0), 1.79769313e308);
  v70 = fabs(_Q3.f64[0] + 0.0 * _Q16.f64[0] + v63.f64[0] * 0.0);
  v71 = v69 > v70;
  if (v69 > v70)
    v69 = v70;
  __asm { FMLA            D4, D1, V16.D[1] }
  if (v69 > fabs(v63.f64[0] + _D4))
    v71 = 2;
  v186 = 0uLL;
  v187 = 0.0;
  v186.f64[v71] = 1.0;
  _Q1.f64[0] = v187;
  _V2.D[1] = v186.f64[1];
  __asm { FMLA            D4, D3, V2.D[1] }
  _Q3.f64[0] = _D4 + v187 * v63.f64[0];
  v75 = vmlsq_f64(_Q1, _Q3, v63);
  _Q2 = vmlsq_lane_f64(v186, _Q16, _Q3.f64[0], 0);
  _Q3 = vmulq_f64(_Q2, _Q2);
  _D4 = _Q2.f64[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v75.f64[0], v75.f64[0]));
  v79 = vmulq_f64(v75, _Q3);
  v186 = vmulq_n_f64(_Q2, _Q3.f64[0]);
  v187 = v79.f64[0];
  _Q3 = (float64x2_t)vextq_s8((int8x16_t)_Q16, (int8x16_t)v63, 8uLL);
  v176 = v63;
  v81.f64[0] = v63.f64[0];
  v81.f64[1] = _Q16.f64[0];
  v82 = (float64x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v79, 8uLL);
  v79.f64[1] = v186.f64[0];
  _Q5 = vmlaq_f64(vnegq_f64(vmulq_f64(v81, v82)), v79, _Q3);
  v84 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v186, _Q16, 1)), _Q16, v186, 1);
  _Q2 = vmulq_f64(_Q5, _Q5);
  _Q3.f64[0] = _Q5.f64[1];
  __asm { FMLA            D2, D3, V5.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v84.f64[0], v84.f64[0]));
  v171 = (int8x16_t)vmulq_n_f64(_Q5, _Q2.f64[0]);
  *(_QWORD *)&v172 = *(_OWORD *)&vmulq_f64(v84, _Q2);
  v86 = (float64x2_t)vextq_s8(v171, v171, 8uLL);
  v170 = v86.f64[0];
  v166 = v53 >> 3;
  if ((unint64_t)(v53 >> 3) <= 1)
    v87 = 1;
  else
    v87 = v53 >> 3;
  v61.i64[1] = v62;
  *(int8x16_t *)__pa = v61;
  *(_QWORD *)&_Q16.f64[1] = v65;
  v173 = v65;
  v174 = _Q16;
  v88 = v56;
  v167 = v87;
  do
  {
    v89 = *v9 + 24 * *(_QWORD *)&v14[8 * v58];
    v86.f64[0] = *(float64_t *)(v89 + 16);
    v90 = vsubq_f64(v86, v180);
    _Q3 = vsubq_f64(*(float64x2_t *)v89, *(float64x2_t *)__pa);
    _D1 = v173;
    _Q0 = vmulq_f64(_Q3, v174);
    __asm { FMLA            D0, D1, V3.D[1] }
    _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v176.f64[0], v90.f64[0]);
    *(_QWORD *)&v90.f64[0] = *(_OWORD *)&vmlsq_f64(v90, _Q0, v176);
    _Q3 = vmlsq_lane_f64(_Q3, v174, _Q0.f64[0], 0);
    _D1 = v170;
    __asm { FMLA            D0, D1, V3.D[1] }
    _D5 = v186.f64[1];
    __asm { FMLA            D1, D5, V3.D[1] }
    v98 = atan2(vmlad_n_f64(_Q0.f64[0], v172, v90.f64[0]), vmlad_n_f64(_D1, v187, v90.f64[0])) * 180.0 / 3.14159265
        + 180.0;
    if (v57 < v59)
    {
      *v57++ = v98;
      goto LABEL_48;
    }
    v99 = v14;
    v100 = v9;
    v101 = v57 - v88;
    v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 61)
      sub_2394189F8();
    if (((char *)v59 - (char *)v88) >> 2 > v102)
      v102 = ((char *)v59 - (char *)v88) >> 2;
    if ((unint64_t)((char *)v59 - (char *)v88) >= 0x7FFFFFFFFFFFFFF8)
      v103 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v103 = v102;
    if (v103)
    {
      if (v103 >> 61)
        sub_239418A80();
      v104 = operator new(8 * v103);
    }
    else
    {
      v104 = 0;
    }
    v105 = (double *)&v104[8 * v101];
    *v105 = v98;
    v106 = v105 + 1;
    if (v57 == v88)
    {
      v9 = v100;
    }
    else
    {
      v107 = (char *)(v57 - 1) - (char *)v88;
      if (v107 < 0x168
        || &v104[(char *)v57 - (char *)v88 - 8 - (v107 & 0xFFFFFFFFFFFFFFF8)] > &v104[(char *)v57 - (char *)v88 - 8]
        || (double *)((char *)v57 - (v107 & 0xFFFFFFFFFFFFFFF8) - 8) > v57 - 1
        || (unint64_t)((char *)v88 - v104) < 0x20)
      {
        v108 = v57;
        v9 = v100;
      }
      else
      {
        v110 = (v107 >> 3) + 1;
        v108 = &v57[-(v110 & 0x3FFFFFFFFFFFFFFCLL)];
        v111 = (float64x2_t *)&v104[8 * v101 - 16];
        v112 = (float64x2_t *)(v57 - 2);
        v113 = v110 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v86 = v112[-1];
          v114 = *v112;
          v111[-1] = v86;
          *v111 = v114;
          v111 -= 2;
          v112 -= 2;
          v113 -= 4;
        }
        while (v113);
        v105 -= v110 & 0x3FFFFFFFFFFFFFFCLL;
        v9 = v100;
        if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      do
      {
        v109 = *((_QWORD *)v108-- - 1);
        *((_QWORD *)v105-- - 1) = v109;
      }
      while (v108 != v88);
    }
LABEL_66:
    v59 = (double *)&v104[8 * v103];
    v188 = v105;
    v190 = v59;
    v14 = v99;
    if (v88)
      operator delete(v88);
    v88 = v105;
    v57 = v106;
    v87 = v167;
    v2 = v168;
LABEL_48:
    v189 = v57;
    ++v58;
  }
  while (v58 != v87);
  std::__sort<std::__less<double,double> &,double *>();
  v183 = 0;
  v184 = 0;
  v115 = v166 - 1;
  if (v166 != 1)
  {
    if (v115 >> 61)
      sub_2394189F8();
    v116 = (double *)operator new(8 * v115);
    v117 = 0;
    v183 = v116;
    v185 = &v116[v115];
    while (1)
    {
      v118 = v188[v117++];
      v119 = vabdd_f64(v188[v117], v118);
      if (v116 >= v185)
        break;
      *v116++ = v119;
LABEL_80:
      v184 = v116;
      if (v117 == v115)
      {
        v136 = v183;
        v2 = v168;
        goto LABEL_111;
      }
    }
    v120 = v183;
    v121 = v116 - v183;
    v122 = v121 + 1;
    if ((unint64_t)(v121 + 1) >> 61)
      sub_2394189F8();
    v123 = (char *)v185 - (char *)v183;
    if (((char *)v185 - (char *)v183) >> 2 > v122)
      v122 = v123 >> 2;
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
      v124 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v124 = v122;
    if (v124)
    {
      if (v124 >> 61)
        sub_239418A80();
      v125 = operator new(8 * v124);
    }
    else
    {
      v125 = 0;
    }
    v126 = (double *)&v125[8 * v121];
    *v126 = v119;
    v127 = v126 + 1;
    if (v116 != v183)
    {
      v128 = (char *)(v116 - 1) - (char *)v183;
      if (v128 < 0x168)
      {
        v129 = v116;
        goto LABEL_95;
      }
      if (&v125[(char *)v116 - (char *)v183 - 8 - (v128 & 0xFFFFFFFFFFFFFFF8)] > &v125[(char *)v116
                                                                                        - (char *)v183
                                                                                        - 8])
      {
        v129 = v116;
        goto LABEL_95;
      }
      if ((double *)((char *)v116 - (v128 & 0xFFFFFFFFFFFFFFF8) - 8) > v116 - 1)
      {
        v129 = v116;
        goto LABEL_95;
      }
      if ((unint64_t)((char *)v183 - v125) < 0x20)
      {
        v129 = v116;
        goto LABEL_95;
      }
      v131 = (v128 >> 3) + 1;
      v129 = &v116[-(v131 & 0x3FFFFFFFFFFFFFFCLL)];
      v132 = &v125[8 * v121 - 16];
      v133 = v116 - 2;
      v134 = v131 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *(_OWORD *)v133;
        *(v132 - 1) = *((_OWORD *)v133 - 1);
        *v132 = v135;
        v132 -= 2;
        v133 -= 4;
        v134 -= 4;
      }
      while (v134);
      v126 -= v131 & 0x3FFFFFFFFFFFFFFCLL;
      if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_95:
          v130 = *((_QWORD *)v129-- - 1);
          *((_QWORD *)v126-- - 1) = v130;
        }
        while (v129 != v183);
      }
    }
    v183 = v126;
    v185 = (double *)&v125[8 * v124];
    if (v120)
      operator delete(v120);
    v116 = v127;
    goto LABEL_80;
  }
  v116 = 0;
  v136 = 0;
LABEL_111:
  v137 = &v136[((char *)v116 - (char *)v136) >> 4];
  if (v137 != v116)
  {
    sub_2395F71EC(v136, v137, v116);
    v136 = v183;
  }
  if (v166 == 1)
  {
    v54 = 0.0;
  }
  else
  {
    v138 = *(double *)((char *)v136 + ((((char *)v184 - (char *)v136) >> 1) & 0xFFFFFFFFFFFFFFF8));
    v139 = v138 + v138;
    if (v139 > 46.0)
      v139 = 46.0;
    v140 = *(_QWORD *)v188;
    if (v115 > 3)
    {
      v141 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      v142 = (int8x16_t)vdupq_lane_s64(v140, 0);
      v143 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v139, 0);
      v144 = (float64x2_t *)(v188 + 3);
      v54 = 0.0;
      v145 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
      v146 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v147 = v144[-1];
        v148 = (float64x2_t)vextq_s8(v142, (int8x16_t)v147, 8uLL);
        v149 = *v144;
        v144 += 2;
        v142 = (int8x16_t)v149;
        v150 = (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v149, 8uLL);
        v151 = vabdq_f64(v147, v148);
        v152 = vabdq_f64(v149, v150);
        v153 = vbslq_s8((int8x16_t)vcgtq_f64(v143, v151), (int8x16_t)v151, v145);
        v154 = vbslq_s8((int8x16_t)vcgtq_f64(v143, v152), (int8x16_t)v152, v145);
        v54 = v54 + *(double *)v153.i64 + *(double *)&v153.i64[1] + *(double *)v154.i64 + *(double *)&v154.i64[1];
        v146 -= 4;
      }
      while (v146);
      if (v115 != v141)
      {
        v140 = v142.i64[1];
        goto LABEL_123;
      }
    }
    else
    {
      v141 = 0;
      v54 = 0.0;
LABEL_123:
      v155 = ~v141 + v166;
      v156 = &v188[v141 + 1];
      do
      {
        v157 = *v156++;
        v158 = *(_QWORD *)&v157;
        v159 = vabdd_f64(v157, *(double *)&v140);
        if (v159 >= v139)
          v159 = -0.0;
        v54 = v54 + v159;
        v140 = v158;
        --v155;
      }
      while (v155);
    }
  }
  if (v136)
    operator delete(v136);
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
LABEL_131:
  v160 = v169;
  if (v54 < *(double *)(v2 + 80))
  {
    v161 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8) - **(_QWORD **)(v2 + 88);
    if (v161)
    {
      v162 = 0;
      v163 = v161 / 24;
      v164 = *a2;
      if (v163 <= 1)
        v163 = 1;
      do
      {
        *(_QWORD *)(v164 + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
        ++v162;
      }
      while (v163 != v162);
    }
    v160 = 0;
  }
  if (v182)
    operator delete(v182);
  return v160;
}

void sub_239BF2964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v37 = *(void **)(v35 - 152);
    if (!v37)
    {
LABEL_3:
      v38 = a31;
      if (!a31)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v37 = *(void **)(v35 - 152);
    if (!v37)
      goto LABEL_3;
  }
  *(_QWORD *)(v35 - 144) = v37;
  operator delete(v37);
  v38 = a31;
  if (!a31)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239BF29F8(uint64_t a1, uint64_t *a2, float64x2_t a3, double a4, float64x2_t a5)
{
  float64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __n128 *v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  float64x2_t v19;
  __n128 *v20;
  unint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  double v31;
  float64x2_t v32;
  double v33;
  double v36;
  double v37;
  double v40;
  float64x2_t v42;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v57;
  double v61;
  double v62;
  uint64_t v63;
  float64x2_t v67;
  float64x2_t *v70;
  float64x2_t *v71;
  int8x16_t v72;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v78;
  int8x16_t v81;
  unint64_t v82;
  float64x2_t *v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v90;
  double v92;
  float64x2_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  float64x2_t *v100;
  _BYTE *v101;
  unint64_t v102;
  unint64_t v103;
  size_t v104;
  char *v105;
  unint64_t v106;
  size_t v107;
  size_t v108;
  char *v109;
  unint64_t v110;
  double *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  uint64_t v116;
  double v117;
  __CLPK_doublereal *v118;
  unint64_t v119;
  __CLPK_doublereal *v120;
  __CLPK_doublereal *v121;
  __CLPK_integer v122;
  __CLPK_integer v123;
  int v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  size_t v130;
  void *v131;
  uint64_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double *v136;
  double v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double v142;
  char v143;
  __int128 v144;
  uint64_t v145;
  __n128 *v146;
  size_t v148;
  unint64_t v149;
  std::bad_alloc *exception;
  std::bad_alloc *v151;
  std::bad_alloc *v152;
  std::bad_alloc *v153;
  std::bad_alloc *v154;
  std::bad_alloc *v155;
  std::bad_alloc *v156;
  std::bad_alloc *v157;
  std::bad_alloc *v158;
  std::bad_alloc *v159;
  std::bad_alloc *v160;
  std::bad_alloc *v161;
  float64_t v162;
  float64_t v163;
  float64x2_t v164;
  double v165;
  float64_t v166;
  unint64_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64_t v170;
  float64x2_t v171;
  unint64_t v172;
  float64x2_t v173;
  int8x16_t v174;
  float64x2_t v175;
  float64x2_t v176;
  unint64_t v177;
  double v178;
  float64x2_t v179;
  unint64_t v180;
  int8x16_t v181;
  int8x16_t v182;
  float64x2_t v183;
  __n128 *v185;
  __n128 *v186;
  void *v187;
  size_t v188;
  unsigned int v189;
  void *memptr[2];
  void *v191[2];
  __int128 v192;
  void *v193[2];
  int v194;
  unsigned int v195;
  unsigned int v196;
  BOOL v197;
  void *v198[2];
  int v199;
  void *__p;
  float64x2_t *v201;
  float64x2_t *v202;
  float64x2_t v203;
  double v204;
  void **v205;
  _QWORD v206[2];
  _QWORD v207[2];
  _QWORD v208[2];
  _QWORD v209[2];
  void **v210;
  double v211;
  size_t v212;
  unsigned int v213;
  void *v214;
  void ***v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v185 = 0;
  v186 = 0;
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (!v7)
  {
    v13 = 0;
    v10 = 0;
    goto LABEL_26;
  }
  if ((unint64_t)v7 >= 0x2AAAAAAAAAAAAAA9)
    sub_2394189F8();
  v9 = v7 >> 2;
  v10 = (__n128 *)operator new(24 * (v7 >> 2));
  v11 = 0;
  v12 = (__n128 *)((char *)v10 + 24 * v9);
  v185 = v10;
  v13 = v10;
  do
  {
    v14 = **(_QWORD **)(a1 + 88) + 24 * *(unsigned int *)(v6 + 4 * v11);
    if (v10 < v12)
    {
      a3 = *(float64x2_t *)v14;
      v10[1].n128_u64[0] = *(_QWORD *)(v14 + 16);
      *v10 = (__n128)a3;
      v10 = (__n128 *)((char *)v10 + 24);
      goto LABEL_5;
    }
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v13) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    if (0x5555555555555556 * (((char *)v12 - (char *)v13) >> 3) > v15)
      v15 = 0x5555555555555556 * (((char *)v12 - (char *)v13) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v13) >> 3) >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v17 = (char *)operator new(24 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[8 * (((char *)v10 - (char *)v13) >> 3)];
    v19 = *(float64x2_t *)v14;
    v12 = (__n128 *)&v17[24 * v16];
    *((_QWORD *)v18 + 2) = *(_QWORD *)(v14 + 16);
    *(float64x2_t *)v18 = v19;
    v20 = (__n128 *)(v18 + 24);
    if (v10 == v13)
    {
      v185 = (__n128 *)&v17[8 * (((char *)v10 - (char *)v13) >> 3)];
      v13 = v10;
    }
    else
    {
      do
      {
        a3 = *(float64x2_t *)((char *)&v10[-2] + 8);
        *((_QWORD *)v18 - 1) = v10[-1].n128_u64[1];
        *(float64x2_t *)(v18 - 24) = a3;
        v18 -= 24;
        v10 = (__n128 *)((char *)v10 - 24);
      }
      while (v10 != v13);
      v185 = (__n128 *)v18;
      if (!v13)
        goto LABEL_23;
    }
    operator delete(v13);
LABEL_23:
    v13 = (__n128 *)v18;
    v10 = v20;
LABEL_5:
    ++v11;
    v6 = *a2;
  }
  while (v11 < (a2[1] - *a2) >> 2);
  v186 = v10;
LABEL_26:
  v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v13) >> 3);
  if (v21 < 3)
    goto LABEL_92;
  *(_QWORD *)&a5.f64[0] = v13[2].n128_u64[1];
  v22 = *(float64x2_t *)((char *)&v13[1] + 8);
  *(_QWORD *)&a3.f64[0] = v13[4].n128_u64[0];
  v23 = (float64x2_t)v13[3];
  *(_QWORD *)&v24 = *(_OWORD *)&vsubq_f64(a5, a3);
  _D7 = vsubq_f64(v22, v23).f64[1];
  __asm { FMLA            D6, D7, V5.D[1] }
  v31 = sqrt(vmlad_n_f64(_D6, v24, v24));
  *(_QWORD *)&v5.f64[0] = v13[1].n128_u64[0];
  v32 = *(float64x2_t *)v13;
  *(_QWORD *)&v33 = *(_OWORD *)&vsubq_f64(v5, a3);
  _D16 = vsubq_f64(*(float64x2_t *)v13, v23).f64[1];
  __asm { FMLA            D7, D16, V6.D[1] }
  v36 = sqrt(vmlad_n_f64(_D7, v33, v33));
  *(_QWORD *)&v37 = *(_OWORD *)&vsubq_f64(v5, a5);
  _D17 = vsubq_f64(*(float64x2_t *)v13, v22).f64[1];
  __asm { FMLA            D16, D17, V7.D[1] }
  v40 = sqrt(vmlad_n_f64(_D16, v37, v37));
  if (((v40 + v31 + v36) * 0.5 - v40)
     * (((v40 + v31 + v36) * 0.5 - v36)
      * ((v40 + v31 + v36)
       * 0.5
       * ((v40 + v31 + v36) * 0.5 - v31))) < 2.22044605e-16)
    goto LABEL_92;
  v175 = *(float64x2_t *)v13;
  v178 = v13[1].n128_f64[0];
  *(_QWORD *)&v32.f64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  *(_QWORD *)&v22.f64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  _Q3 = vsubq_f64(v22, v32);
  v42 = vsubq_f64(a5, v5);
  _Q4 = vmulq_f64(_Q3, _Q3);
  _D6 = _Q3.f64[1];
  __asm { FMLA            D4, D6, V3.D[1] }
  _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v42.f64[0], v42.f64[0]));
  v45 = vmulq_f64(v42, _Q4);
  _Q3 = vmulq_n_f64(_Q3, _Q4.f64[0]);
  *(_QWORD *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  v173 = v32;
  _Q1 = vsubq_f64(v23, v32);
  v48 = vsubq_f64(a3, v5);
  _Q4 = vmulq_f64(_Q1, _Q1);
  _D5 = _Q1.f64[1];
  __asm { FMLA            D4, D5, V1.D[1] }
  _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v48.f64[0], v48.f64[0]));
  v51 = vmulq_n_f64(_Q1, _Q4.f64[0]);
  v52 = vmulq_f64(v48, _Q4);
  v53 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)v45, 8uLL);
  v45.f64[1] = _Q3.f64[0];
  v54 = (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v52, 8uLL);
  v52.f64[1] = v51.f64[0];
  _Q2 = vmlaq_f64(vnegq_f64(vmulq_f64(v45, v54)), v52, v53);
  _Q0 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v51, _Q3, 1)), _Q3, v51, 1);
  _Q1 = vmulq_f64(_Q2, _Q2);
  _Q3.f64[0] = _Q2.f64[1];
  __asm { FMLA            D1, D3, V2.D[1] }
  _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], _Q0.f64[0], _Q0.f64[0]));
  v57 = vmulq_f64(_Q0, _Q1);
  _Q6 = vmulq_n_f64(_Q2, _Q1.f64[0]);
  _Q0.f64[0] = 0.0;
  __asm { FMLA            D1, D0, V6.D[1] }
  _D2 = _Q6.f64[1];
  v61 = fmin(fabs(vmlad_n_f64(_Q1.f64[0], 0.0, v57.f64[0])), 1.79769313e308);
  v62 = fabs(vmlad_n_f64(_Q6.f64[1] + 0.0 * _Q6.f64[0], 0.0, v57.f64[0]));
  v63 = v61 > v62;
  if (v61 > v62)
    v61 = v62;
  __asm { FMLA            D3, D0, V6.D[1] }
  if (v61 > fabs(v57.f64[0] + _D3))
    v63 = 2;
  v203 = 0uLL;
  v204 = 0.0;
  v203.f64[v63] = 1.0;
  _Q0.f64[0] = v204;
  _V1.D[1] = v203.f64[1];
  _Q3 = vmulq_f64(v203, _Q6);
  __asm { FMLA            D3, D2, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v204, v57.f64[0]);
  v67 = vmlsq_f64(_Q0, _Q3, v57);
  v164 = _Q6;
  _Q1 = vmlsq_lane_f64(v203, _Q6, _Q3.f64[0], 0);
  _Q2 = vmulq_f64(_Q1, _Q1);
  _Q3.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v67.f64[0], v67.f64[0]));
  v168 = vmulq_n_f64(_Q1, _Q2.f64[0]);
  v203 = v168;
  v181 = (int8x16_t)vmulq_f64(v67, _Q2);
  v183 = v57;
  v204 = *(double *)v181.i64;
  __p = 0;
  v201 = 0;
  v202 = 0;
  if (v21 >> 60)
    sub_2394189F8();
  v70 = (float64x2_t *)operator new(16 * v21);
  v71 = v70;
  v72 = (int8x16_t)v164;
  _D7 = vextq_s8(v72, v72, 8uLL).u64[0];
  v74 = vmulq_f64(v164, v173);
  v74.f64[0] = vmlad_n_f64(vmlad_n_f64(v74.f64[1], v175.f64[0], v164.f64[0]), v178, v183.f64[0]);
  *(_QWORD *)&v75.f64[0] = v181.i64[0];
  v75.f64[1] = v168.f64[0];
  v76.f64[0] = v183.f64[0];
  v76.f64[1] = v164.f64[0];
  _Q3 = vmlaq_f64(vnegq_f64(vmulq_f64(v76, (float64x2_t)vextq_s8((int8x16_t)v168, v181, 8uLL))), v75, (float64x2_t)vextq_s8((int8x16_t)v164, (int8x16_t)v183, 8uLL));
  v78 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v168, v164, 1)), v164, v168, 1);
  _Q2 = vmulq_f64(_Q3, _Q3);
  _D4 = _Q3.f64[1];
  __asm { FMLA            D2, D4, V3.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v78.f64[0], v78.f64[0]));
  v174 = (int8x16_t)vmulq_n_f64(_Q3, _Q2.f64[0]);
  v176 = vmulq_f64(v78, _Q2);
  v172 = vextq_s8(v174, v174, 8uLL).u64[0];
  v179 = vmulq_f64(v183, v74);
  v81 = (int8x16_t)vmulq_n_f64(v164, v74.f64[0]);
  v82 = vextq_s8(v81, v81, 8uLL).u64[0];
  __p = v70;
  v201 = v70;
  v202 = &v70[v21];
  v83 = (float64x2_t *)v185;
  v167 = _D7;
  v162 = *(double *)&v82;
  v163 = *(double *)v81.i64;
  if (v185 != v186)
  {
    v81.i64[1] = v82;
    v171 = (float64x2_t)v81;
    v84 = (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL);
    v72.i64[1] = _D7;
    v169 = (float64x2_t)v72;
    v170 = v84.f64[0];
    while (1)
    {
      v84.f64[0] = v83[1].f64[0];
      v85 = vsubq_f64(v84, v179);
      _Q1 = vsubq_f64(*v83, v171);
      _Q2 = vmulq_f64(_Q1, v169);
      __asm { FMLA            D2, D7, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v183.f64[0], v85.f64[0]);
      v84 = vmlsq_f64(v85, _Q2, v183);
      _Q1 = vmlsq_lane_f64(_Q1, v169, _Q2.f64[0], 0);
      _Q2.f64[0] = v170;
      __asm { FMLA            D3, D2, V1.D[1] }
      v90.f64[0] = vmlad_n_f64(_D3, *(double *)v181.i64, v84.f64[0]);
      *(_QWORD *)&_Q2.f64[0] = v172;
      __asm { FMLA            D4, D2, V1.D[1] }
      v92 = vmlad_n_f64(_D4, v176.f64[0], v84.f64[0]);
      if (v71 >= v202)
        break;
      v90.f64[1] = v92;
      *v71++ = v90;
LABEL_36:
      v201 = v71;
      v83 = (float64x2_t *)((char *)v83 + 24);
      if (v83 == (float64x2_t *)v186)
      {
        v101 = __p;
        goto LABEL_57;
      }
    }
    v93 = (float64x2_t *)__p;
    v94 = ((char *)v71 - (_BYTE *)__p) >> 4;
    v95 = v94 + 1;
    if ((unint64_t)(v94 + 1) >> 60)
      sub_2394189F8();
    v96 = (char *)v202 - (_BYTE *)__p;
    if (((char *)v202 - (_BYTE *)__p) >> 3 > v95)
      v95 = v96 >> 3;
    if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
      v97 = 0xFFFFFFFFFFFFFFFLL;
    else
      v97 = v95;
    if (v97)
    {
      v165 = v92;
      v166 = v90.f64[0];
      if (v97 >> 60)
        sub_239418A80();
      v98 = (char *)operator new(16 * v97);
      _D7 = v167;
      v92 = v165;
      v90.f64[0] = v166;
    }
    else
    {
      v98 = 0;
    }
    v99 = &v98[16 * v94];
    v90.f64[1] = v92;
    *(float64x2_t *)v99 = v90;
    v100 = (float64x2_t *)(v99 + 16);
    if (v71 == v93)
    {
      __p = v99;
      v202 = (float64x2_t *)&v98[16 * v97];
      v93 = v71;
    }
    else
    {
      do
      {
        v84 = v71[-1];
        *((float64x2_t *)v99 - 1) = v84;
        v99 -= 16;
        --v71;
      }
      while (v71 != v93);
      __p = v99;
      v202 = (float64x2_t *)&v98[16 * v97];
      if (!v93)
        goto LABEL_54;
    }
    operator delete(v93);
    _D7 = v167;
LABEL_54:
    v71 = v100;
    goto LABEL_36;
  }
  v101 = v70;
LABEL_57:
  v102 = (char *)v71 - v101;
  v103 = (unint64_t)((char *)v71 - v101) >> 4;
  v104 = 8 * (((unint64_t)((char *)v71 - v101) >> 3) + v103);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (v104 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v105 = (char *)memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v151 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v151, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v106 = (char *)v201 - (_BYTE *)__p;
  v107 = ((unint64_t)((char *)v201 - (_BYTE *)__p) >> 1) & 0x7FFFFFFF8;
  v108 = (v107 + 31) & 0xFFFFFFFE0;
  v198[1] = (void *)(v108 >> 3);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v108, 0x100BBD03uLL);
  v109 = (char *)memptr[0];
  v198[0] = memptr[0];
  if (!memptr[0])
  {
    v152 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v153 = std::bad_alloc::bad_alloc(v152);
    __cxa_throw(v153, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v110 = v106 >> 4;
  v199 = v110;
  if ((_DWORD)v103)
    bzero(v105, v104);
  if ((_DWORD)v110)
    bzero(v109, v107);
  v111 = (double *)__p;
  v112 = (v102 >> 4);
  if (v201 != __p)
  {
    v113 = 0;
    v114 = ((char *)v201 - (_BYTE *)__p) >> 4;
    if (v114 <= 1)
      v114 = 1;
    do
    {
      v115 = *(_OWORD *)v111;
      v116 = 8 * v113;
      *(double *)&v105[v116] = *v111;
      *(_QWORD *)&v105[8 * v112 + v116] = *((_QWORD *)&v115 + 1);
      *(_QWORD *)&v105[8 * (v102 >> 3) + v116] = 0x3FF0000000000000;
      *(double *)&v115 = *v111;
      v117 = v111[1];
      v111 += 2;
      *(double *)&v109[v116] = v117 * v117 + *(double *)&v115 * *(double *)&v115;
      ++v113;
    }
    while (v114 != v113);
  }
  v192 = 0u;
  *(_OWORD *)v193 = 0u;
  *(_OWORD *)memptr = 0u;
  *(_OWORD *)v191 = 0u;
  v197 = 0;
  v194 = 0;
  v195 = v103;
  v196 = 3;
  *(double *)&v214 = 0.0;
  malloc_type_posix_memalign(&v214, 0x20uLL, (v104 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v118 = (__CLPK_doublereal *)v214;
  if (*(double *)&v214 == 0.0)
  {
    v154 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v155 = std::bad_alloc::bad_alloc(v154);
    __cxa_throw(v155, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v103)
    memcpy(v214, v105, v104);
  if ((int)v103 >= 3)
    v119 = 3;
  else
    v119 = v103;
  v194 = v119;
  sub_23945215C((uint64_t)v193, v119);
  v191[0] = (void *)__PAIR64__(v119, v103);
  sub_23945215C((uint64_t)memptr, v112 * (unint64_t)v119);
  *((_QWORD *)&v192 + 1) = v119 | 0x300000000;
  sub_23945215C((uint64_t)&v191[1], 3 * v119);
  v120 = (__CLPK_doublereal *)memptr[0];
  v121 = (__CLPK_doublereal *)v191[1];
  v122 = (__CLPK_integer)v191[0];
  v123 = DWORD2(v192);
  v211 = 0.0;
  LODWORD(v187) = 0;
  sub_239A23160(83, 83, v103, 3, v118, v103, (__CLPK_doublereal *)v193[0], (__CLPK_doublereal *)memptr[0], (__CLPK_integer)v191[0], (__CLPK_doublereal *)v191[1], SDWORD2(v192), &v211, -1, (__CLPK_integer *)&v187);
  v124 = (int)v187;
  if (!(_DWORD)v187)
  {
    v125 = v211;
    *(double *)&v214 = 0.0;
    malloc_type_posix_memalign(&v214, 0x20uLL, (8 * v125 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v126 = v214;
    if (*(double *)&v214 == 0.0)
    {
      v158 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v159 = std::bad_alloc::bad_alloc(v158);
      __cxa_throw(v159, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    sub_239A23160(83, 83, v103, 3, v118, v103, (__CLPK_doublereal *)v193[0], v120, v122, v121, v123, (__CLPK_doublereal *)v214, v125, (__CLPK_integer *)&v187);
    free(v126);
    v124 = (int)v187;
  }
  v197 = v124 == 0;
  free(v118);
  if (v197)
    goto LABEL_78;
  v127 = v193[0];
  v193[0] = 0;
  v193[1] = 0;
  v194 = 0;
  free(v127);
  v128 = memptr[0];
  memptr[1] = 0;
  v191[0] = 0;
  memptr[0] = 0;
  free(v128);
  v129 = v191[1];
  v191[1] = 0;
  v192 = 0uLL;
  free(v129);
  if (v197)
  {
LABEL_78:
    v130 = (8 * v195 + 31) & 0xFFFFFFFE0;
    v188 = v130 >> 3;
    *(double *)&v214 = 0.0;
    malloc_type_posix_memalign(&v214, 0x20uLL, v130, 0x100BBD03uLL);
    v131 = v214;
    v187 = v214;
    if (*(double *)&v214 == 0.0)
    {
      v156 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v157 = std::bad_alloc::bad_alloc(v156);
      __cxa_throw(v157, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v189 = v195;
    v210 = &v191[1];
    v132 = v196 >= v195 ? v195 : v196;
    v207[0] = v132 | (v132 << 32);
    v207[1] = v193;
    v208[0] = v207;
    v208[1] = 0x3E112E0BE826D695;
    v205 = memptr;
    v206[0] = &v205;
    v206[1] = v198;
    v209[0] = v208;
    v209[1] = v206;
    if (HIDWORD(v192) == v195)
    {
LABEL_85:
      v215 = &v210;
      v216 = v209;
      v217 = 0x3FF0000000000000;
      sub_239BF3870((uint64_t)&v187, (uint64_t)&v214);
      v136 = (double *)v187;
    }
    else
    {
      if (v191[1] != v214)
      {
        v189 = HIDWORD(v192);
        sub_23945215C((uint64_t)&v187, HIDWORD(v192));
        goto LABEL_85;
      }
      v148 = (8 * HIDWORD(v192) + 31) & 0xFFFFFFFE0;
      v212 = v148 >> 3;
      *(double *)&v214 = 0.0;
      malloc_type_posix_memalign(&v214, 0x20uLL, v148, 0x100BBD03uLL);
      v211 = *(double *)&v214;
      if (*(double *)&v214 == 0.0)
      {
        v160 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v161 = std::bad_alloc::bad_alloc(v160);
        __cxa_throw(v161, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v213 = *((_DWORD *)v210 + 5);
      v215 = &v210;
      v216 = v209;
      v217 = 0x3FF0000000000000;
      sub_239BF3870((uint64_t)&v211, (uint64_t)&v214);
      v136 = *(double **)&v211;
      v187 = *(void **)&v211;
      v188 = v212;
      v189 = v213;
      free(v131);
    }
    v137 = v136[1];
    v134.f64[0] = *v136 * 0.5;
    v133.f64[0] = v137 * 0.5;
    v135.f64[0] = v204;
    *(_QWORD *)&v138.f64[0] = v174.i64[0];
    *(_QWORD *)&v138.f64[1] = v172;
    v139 = vmlaq_f64(vmulq_f64(v176, v133), v134, v135);
    v140 = vmlaq_n_f64(vmulq_n_f64(v138, v137 * 0.5), v203, v134.f64[0]);
    v141.f64[0] = v163;
    v141.f64[1] = v162;
    v182 = (int8x16_t)vaddq_f64(v141, v140);
    v177 = vextq_s8(v182, v182, 8uLL).u64[0];
    v180 = *(_OWORD *)&vaddq_f64(v179, v139);
    v142 = sqrt(*v136 * *v136 * 0.25 + v137 * v137 * 0.25 + v136[2]);
    free(v136);
    free(v193[0]);
    free(v191[1]);
    free(memptr[0]);
    free(v198[0]);
    v143 = 1;
  }
  else
  {
    free(v193[0]);
    free(v191[1]);
    free(memptr[0]);
    free(v109);
    v143 = 0;
    v142 = 0.0;
    v182.i64[0] = v149;
    v177 = v149;
    v180 = v149;
  }
  free(v105);
  if (__p)
  {
    v201 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if ((v143 & 1) != 0)
  {
    *(_QWORD *)(a1 + 24) = v180;
    *(_QWORD *)&v144 = v182.i64[0];
    *((_QWORD *)&v144 + 1) = v177;
    *(_OWORD *)(a1 + 8) = v144;
    *(float64_t *)&v144 = v164.f64[0];
    *((_QWORD *)&v144 + 1) = v167;
    *(_OWORD *)(a1 + 32) = v144;
    *(float64_t *)(a1 + 48) = v183.f64[0];
    *(double *)(a1 + 56) = v142;
    v145 = 1;
    v146 = v185;
    if (!v185)
      return v145;
LABEL_93:
    operator delete(v146);
  }
  else
  {
LABEL_92:
    v145 = 0;
    v146 = v185;
    if (v185)
      goto LABEL_93;
  }
  return v145;
}

void sub_239BF3754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *__p;
  uint64_t a70;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v74;

  free(*(void **)(v72 - 176));
  free(v71);
  sub_23945B510(&a55);
  free(a66);
  free(v70);
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
    v74 = a49;
    if (!a49)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v74 = a49;
    if (!a49)
      goto LABEL_3;
  }
  operator delete(v74);
  _Unwind_Resume(a1);
}

uint64_t sub_239BF3844(uint64_t a1)
{
  return a1 + 8;
}

__n128 sub_239BF384C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v3;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 24) = result;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 48) = v3;
  return result;
}

void sub_239BF3870(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  unsigned int ***v6;
  uint64_t v7;
  const double *v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;
  std::bad_alloc *v30;
  std::bad_alloc *v31;
  std::bad_alloc *v32;
  std::bad_alloc *v33;
  void *memptr;
  void *v35;
  size_t v36;
  int v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 8);
  if (*(double **)v5 == v4)
  {
    v26 = (8 * *(unsigned int *)(v5 + 20) + 31) & 0xFFFFFFFE0;
    v35 = (void *)(v26 >> 3);
    v38 = 0;
    malloc_type_posix_memalign(&v38, 0x20uLL, v26, 0x100BBD03uLL);
    memptr = v38;
    if (!v38)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v29 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v29, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    LODWORD(v36) = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    sub_239BF3870(&memptr, a2);
    v24 = *(void **)a1;
    v27 = v35;
    *(_QWORD *)a1 = memptr;
    *(_QWORD *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 16) = v36;
    goto LABEL_22;
  }
  if (*(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v6 = *(unsigned int ****)(a2 + 16);
    v7 = (**v6)[1];
    if ((_DWORD)v7)
    {
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v7 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
      v8 = (const double *)memptr;
      if (!memptr)
      {
        v30 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v31 = std::bad_alloc::bad_alloc(v30);
        __cxa_throw(v31, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v10 = *v6;
      v9 = v6[1];
      v11 = ***v6;
      v12 = (**v6)[1];
      if (v11 >= v12)
        v11 = v12;
      LODWORD(memptr) = v11;
      v13 = (8 * *(unsigned int *)(*(_QWORD *)*v9 + 20) + 31) & 0xFFFFFFFE0;
      v36 = v13 >> 3;
      v38 = 0;
      malloc_type_posix_memalign(&v38, 0x20uLL, v13, 0x100BBD03uLL);
      v35 = v38;
      if (!v38)
      {
        v32 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v33 = std::bad_alloc::bad_alloc(v32);
        __cxa_throw(v33, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v14 = *(_OWORD *)v9;
      v37 = *(_DWORD *)(*(_QWORD *)*v9 + 20);
      v39 = v14;
      v40 = 0x3FF0000000000000;
      sub_239BF3BEC((uint64_t)&v35, (uint64_t)&v38);
      v15 = (*v10)[1];
      if (**v10 < v15)
        v15 = **v10;
      v16 = memptr;
      v17 = (double *)v35;
      if ((_DWORD)memptr)
      {
        v18 = 0;
        v19 = **((_QWORD **)*v10 + 1);
        do
        {
          v20 = *(double *)(v19 + 8 * (v18 % v15));
          v21 = fabs(v20);
          v22 = 1.0 / v20;
          if (v21 < *((double *)v10 + 1))
            v22 = 0.0;
          v8[v18] = v17[v18] * v22;
          ++v18;
        }
        while (v16 != v18);
      }
      free(v17);
      v23 = *(unsigned int *)(*(_QWORD *)*v9 + 20);
      if (v12 > v23)
        bzero((void *)&v8[v23], 8 * (v12 - v23));
      sub_239A22E8C(1, *(_DWORD *)(v5 + 16), *(_DWORD *)(v5 + 20), *(const double **)v5, *(_DWORD *)(v5 + 16), v8, 1, *(double **)a1, *(double *)(a2 + 24), 0.0, 1);
      v24 = (void *)v8;
LABEL_22:
      free(v24);
      return;
    }
  }
  v25 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v25)
    bzero(v4, 8 * v25);
}

void sub_239BF3BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  free(v12);
  _Unwind_Resume(a1);
}

void sub_239BF3BEC(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  double *v10;
  size_t v11;
  uint64_t v12;
  std::bad_alloc *exception;
  std::bad_alloc *v14;
  void *v15;
  size_t v16;
  int v17;
  void *memptr;

  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v5 == *(_QWORD *)a1 || (v6 = *(_QWORD *)(a2 + 16), *(double **)v6 == v4))
  {
    v9 = (8 * *(unsigned int *)(v5 + 20) + 31) & 0xFFFFFFFE0;
    v16 = v9 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x100BBD03uLL);
    v15 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v14 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v14, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v17 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    sub_239BF3BEC(&v15, a2);
    v10 = *(double **)a1;
    v11 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = v17;
    free(v10);
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(_DWORD *)(v5 + 20);
    if (v7 * v8 && *(_DWORD *)(v6 + 16))
    {
      sub_239A22E8C(1, v7, v8, *(const double **)v5, v7, *(const double **)v6, 1, v4, *(double *)(a2 + 24), 0.0, 1);
    }
    else
    {
      v12 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v12)
        bzero(*(void **)a1, 8 * v12);
    }
  }
}

void sub_239BF3D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

void sub_239BF3D38(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  double *v5;
  double *v6;
  double *v7;
  unint64_t v8;
  double *v9;
  uint64_t *v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  double *v19;
  double *v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  double *v29;
  double *v30;
  unint64_t v31;
  double *v32;
  uint64_t v33;
  double v41;
  double *v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  double *v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  double *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  double *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  double *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  float64x2_t v77;
  float64_t v78;
  float64x2_t v79;
  double v80;
  __int128 v81;
  double v82;
  double *v83;
  double *v84;
  double *__p;
  double *v86;
  double *v87;
  double *v88;
  double *v89;
  double *v90;
  double *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;

  v92 = 0;
  v93 = 0;
  v94 = 0;
  sub_2394B5624(a2, (uint64_t)&v92, 1);
  v3 = v92;
  v4 = v93;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v3 == v4)
    goto LABEL_90;
  v75 = a1;
  v83 = 0;
  v84 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  __p = 0;
  v86 = 0;
  v87 = 0;
  do
  {
    v10 = sub_2394650AC(a2, v3[v8]);
    *(_QWORD *)&v11.f64[0] = v10[10];
    v12 = *((double *)v10 + 18);
    *(_QWORD *)&v13.f64[0] = v10[22];
    v79 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v10 + 10));
    *(_QWORD *)&v11.f64[1] = v10[14];
    *(_QWORD *)&v80 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v13);
    v81 = *((_OWORD *)v10 + 8);
    v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v10 + 4), *((int64x2_t *)v10 + 6)), v79.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v10 + 4), *((int64x2_t *)v10 + 6)), v79, 1), v11, v80);
    if (v7 < v83)
    {
      *v7++ = v14.f64[0];
      goto LABEL_24;
    }
    v15 = v7 - v6;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_94;
    if (((char *)v83 - (char *)v6) >> 2 > v16)
      v16 = ((char *)v83 - (char *)v6) >> 2;
    if ((unint64_t)((char *)v83 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v77 = v14;
    if (v17)
    {
      if (v17 >> 61)
        goto LABEL_93;
      v18 = operator new(8 * v17);
      v14 = v77;
    }
    else
    {
      v18 = 0;
    }
    v19 = (double *)&v18[8 * v15];
    *v19 = v14.f64[0];
    v20 = v19 + 1;
    if (v7 != v6)
    {
      v21 = (char *)(v7 - 1) - (char *)v6;
      if (v21 >= 0x168)
      {
        if (&v18[(char *)v7 - (char *)v6 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v18[(char *)v7 - (char *)v6 - 8])
        {
          v22 = v7;
        }
        else if ((double *)((char *)v7 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
        {
          v22 = v7;
        }
        else if ((unint64_t)((char *)v6 - v18) >= 0x20)
        {
          v57 = (v21 >> 3) + 1;
          v22 = &v7[-(v57 & 0x3FFFFFFFFFFFFFFCLL)];
          v58 = &v18[8 * v15 - 16];
          v59 = v7 - 2;
          v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 4;
            v60 -= 4;
          }
          while (v60);
          v19 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
          if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_21;
        }
        else
        {
          v22 = v7;
        }
      }
      else
      {
        v22 = v7;
      }
      do
      {
        v23 = *((_QWORD *)v22-- - 1);
        *((_QWORD *)v19-- - 1) = v23;
      }
      while (v22 != v6);
    }
LABEL_21:
    v91 = v19;
    v83 = (double *)&v18[8 * v17];
    if (v6)
    {
      operator delete(v6);
      v14.f64[1] = v77.f64[1];
      v5 = v89;
      v84 = v90;
    }
    v6 = v19;
    v7 = v20;
LABEL_24:
    if (v5 < v84)
    {
      *v5++ = v14.f64[1];
      goto LABEL_43;
    }
    v24 = v88;
    v25 = v5 - v88;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      goto LABEL_94;
    if (((char *)v84 - (char *)v88) >> 2 > v26)
      v26 = ((char *)v84 - (char *)v88) >> 2;
    if ((unint64_t)((char *)v84 - (char *)v88) >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      v78 = v14.f64[1];
      if (v27 >> 61)
        goto LABEL_93;
      v28 = operator new(8 * v27);
      v14.f64[1] = v78;
    }
    else
    {
      v28 = 0;
    }
    v29 = (double *)&v28[8 * v25];
    *v29 = v14.f64[1];
    v30 = v29 + 1;
    if (v5 != v88)
    {
      v31 = (char *)(v5 - 1) - (char *)v88;
      if (v31 >= 0x168)
      {
        if (&v28[(char *)v5 - (char *)v88 - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v28[(char *)v5 - (char *)v88 - 8])
        {
          v32 = v5;
        }
        else if ((double *)((char *)v5 - (v31 & 0xFFFFFFFFFFFFFFF8) - 8) > v5 - 1)
        {
          v32 = v5;
        }
        else if ((unint64_t)((char *)v88 - v28) >= 0x20)
        {
          v62 = (v31 >> 3) + 1;
          v32 = &v5[-(v62 & 0x3FFFFFFFFFFFFFFCLL)];
          v63 = &v28[8 * v25 - 16];
          v64 = v5 - 2;
          v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *(_OWORD *)v64;
            *(v63 - 1) = *((_OWORD *)v64 - 1);
            *v63 = v66;
            v63 -= 2;
            v64 -= 4;
            v65 -= 4;
          }
          while (v65);
          v29 -= v62 & 0x3FFFFFFFFFFFFFFCLL;
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_40;
        }
        else
        {
          v32 = v5;
        }
      }
      else
      {
        v32 = v5;
      }
      do
      {
        v33 = *((_QWORD *)v32-- - 1);
        *((_QWORD *)v29-- - 1) = v33;
      }
      while (v32 != v88);
    }
LABEL_40:
    v88 = v29;
    v84 = (double *)&v28[8 * v27];
    v90 = v84;
    if (v24)
      operator delete(v24);
    v5 = v30;
LABEL_43:
    _V1.D[1] = *((_QWORD *)&v81 + 1);
    _D0 = v79.f64[1];
    __asm { FMLA            D2, D0, V1.D[1] }
    v41 = vmlad_n_f64(_D2, v12, v80);
    v89 = v5;
    v42 = v86;
    if (v86 < v87)
    {
      *v86 = v41;
      v9 = v86 + 1;
    }
    else
    {
      v43 = __p;
      v44 = v86 - __p;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61)
LABEL_94:
        sub_2394189F8();
      v46 = (char *)v87 - (char *)__p;
      if (((char *)v87 - (char *)__p) >> 2 > v45)
        v45 = v46 >> 2;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        v82 = v41;
        if (v47 >> 61)
LABEL_93:
          sub_239418A80();
        v48 = operator new(8 * v47);
        v41 = v82;
      }
      else
      {
        v48 = 0;
      }
      v49 = (double *)&v48[8 * v44];
      *v49 = v41;
      v9 = v49 + 1;
      if (v86 != __p)
      {
        v50 = (char *)(v86 - 1) - (char *)__p;
        if (v50 < 0x58)
          goto LABEL_97;
        if ((unint64_t)((char *)__p - v48) < 0x20)
          goto LABEL_97;
        v51 = (v50 >> 3) + 1;
        v52 = &v48[8 * v44 - 16];
        v53 = v86 - 2;
        v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 4;
          v54 -= 4;
        }
        while (v54);
        v49 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
        v42 = &v86[-(v51 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_97:
          do
          {
            v56 = *((_QWORD *)v42-- - 1);
            *((_QWORD *)v49-- - 1) = v56;
          }
          while (v42 != __p);
        }
      }
      __p = v49;
      v87 = (double *)&v48[8 * v47];
      if (v43)
        operator delete(v43);
    }
    v86 = v9;
    ++v8;
    v3 = v92;
  }
  while (v8 < v93 - v92);
  v67 = ((char *)v7 - (char *)v91) >> 4;
  v68 = &v91[v67];
  if (v68 != v7)
    sub_2395F71EC(v91, &v91[v67], v7);
  v69 = ((char *)v5 - (char *)v88) >> 4;
  v70 = &v88[v69];
  if (v70 != v5)
    sub_2395F71EC(v88, &v88[v69], v5);
  v71 = ((char *)v9 - (char *)__p) >> 4;
  v72 = &__p[v71];
  if (v72 != v9)
    sub_2395F71EC(__p, &__p[v71], v9);
  v73 = *(_QWORD *)v70;
  v74 = *(_QWORD *)v72;
  *v75 = *(_QWORD *)v68;
  v75[1] = v73;
  v75[2] = v74;
  operator delete(__p);
  operator delete(v88);
  operator delete(v91);
  v3 = v92;
LABEL_90:
  if (v3)
  {
    v93 = v3;
    operator delete(v3);
  }
}

void sub_239BF4370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;
  void *v32;

  if (__p)
  {
    operator delete(__p);
    v30 = a24;
    if (!a24)
    {
LABEL_3:
      v31 = a27;
      if (!a27)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v30 = a24;
    if (!a24)
      goto LABEL_3;
  }
  operator delete(v30);
  v31 = a27;
  if (!a27)
  {
LABEL_4:
    v32 = *(void **)(v28 - 136);
    if (!v32)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v31);
  v32 = *(void **)(v28 - 136);
  if (!v32)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v28 - 128) = v32;
  operator delete(v32);
  _Unwind_Resume(exception_object);
}

float64_t sub_239BF43FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  float64_t v6;
  double *v7;
  uint64_t *v8;
  float64x2_t v9;
  int64x2_t v10;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  double v24;
  char *v25;
  char *v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  double *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  double *v41;
  unint64_t v42;
  double *v43;
  uint64_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  float64x2_t v52;
  float64x2_t v53;
  _QWORD *i;
  uint64_t *v55;
  float64x2_t v56;
  double v57;
  float64x2_t v59;
  float64x2_t v60;
  float64_t result;
  uint64_t v62;
  void *v63;
  float64x2_t v64;
  _BYTE v65[32];
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  float64_t v69;
  float64x2_t v70;
  float64_t v71;
  void *__p[2];
  double v73;

  v63 = 0;
  v64 = 0uLL;
  sub_2394B5624(a2, (uint64_t)&v63, 1);
  __p[0] = 0;
  __p[1] = 0;
  v73 = 0.0;
  v4 = *(_QWORD *)&v64.f64[0] - (_QWORD)v63;
  if (*(void **)&v64.f64[0] != v63)
  {
    if (v4 < 0)
      sub_2394189F8();
    __p[0] = operator new(*(_QWORD *)&v64.f64[0] - (_QWORD)v63);
    __p[1] = __p[0];
    *(_QWORD *)&v73 = (char *)__p[0] + 8 * (v4 >> 3);
  }
  sub_239BF3D38(&v70, a2);
  v62 = a1;
  v5 = v63;
  v6 = v64.f64[0];
  if (v63 == *(void **)&v64.f64[0])
  {
    v7 = (double *)__p[1];
  }
  else
  {
    do
    {
      v8 = sub_239470FCC(a2, *v5);
      *(_QWORD *)&v9.f64[0] = v8[10];
      v10 = *((int64x2_t *)v8 + 4);
      _Q2 = *((int64x2_t *)v8 + 6);
      _Q4 = *((float64x2_t *)v8 + 8);
      *(_QWORD *)&v13.f64[0] = v8[22];
      *(_QWORD *)&v13.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v13);
      v14 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v8 + 10));
      v15 = vmulq_n_f64((float64x2_t)vzip1q_s64(v10, _Q2), v14.f64[0]);
      _Q1 = (float64x2_t)vzip2q_s64(v10, _Q2);
      *(_QWORD *)&v9.f64[1] = v8[14];
      v17 = vmlaq_n_f64(vmlaq_laneq_f64(v15, _Q1, v14, 1), v9, v13.f64[0]);
      _Q0 = vmulq_f64(_Q4, v14);
      _Q1.f64[0] = v14.f64[1];
      __asm { FMLA            D0, D1, V4.D[1] }
      _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *((double *)v8 + 18), v13.f64[0]);
      _Q1.f64[0] = v71;
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q0, _Q1);
      _D3 = vsubq_f64(v17, v70).f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v24 = sqrt(vmlad_n_f64(*(double *)_Q2.i64, _Q0.f64[0], _Q0.f64[0]));
      v25 = (char *)__p[1];
      if (__p[1] < (void *)*(_QWORD *)&v73)
      {
        *(double *)__p[1] = v24;
        v7 = (double *)(v25 + 8);
      }
      else
      {
        v26 = (char *)__p[0];
        v27 = (char *)__p[1] - (char *)__p[0];
        v28 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          sub_2394189F8();
        v30 = *(_QWORD *)&v73 - (unint64_t)__p[0];
        if ((uint64_t)(*(_QWORD *)&v73 - (unint64_t)__p[0]) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 61)
            sub_239418A80();
          v32 = operator new(8 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = (double *)&v32[8 * v28];
        *v33 = v24;
        v7 = v33 + 1;
        if (v25 != v26)
        {
          v34 = v25 - 8 - v26;
          if (v34 < 0x58)
            goto LABEL_50;
          if ((unint64_t)(v25 - &v32[v27]) < 0x20)
            goto LABEL_50;
          v35 = (v34 >> 3) + 1;
          v36 = &v32[8 * v28 - 16];
          v37 = v25 - 16;
          v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 4;
          }
          while (v38);
          v33 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
          v25 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            do
            {
              v40 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v33-- - 1) = v40;
            }
            while (v25 != v26);
          }
        }
        __p[0] = v33;
        __p[1] = v7;
        *(_QWORD *)&v73 = &v32[8 * v31];
        if (v26)
          operator delete(v26);
      }
      __p[1] = v7;
      ++v5;
    }
    while (v5 != *(_QWORD **)&v6);
  }
  v41 = (double *)__p[0];
  if (__p[0] == v7)
  {
    v45 = -1.0;
    v44 = v62;
    if (!v7)
      goto LABEL_35;
  }
  else
  {
    v42 = (unint64_t)(((char *)v7 - (char *)__p[0]) >> 3) >> 1;
    v43 = (double *)((char *)__p[0] + 8 * v42);
    v44 = v62;
    if (v43 != v7)
    {
      sub_2395F71EC((double *)__p[0], v43, v7);
      v41 = (double *)__p[0];
    }
    v45 = v41[v42];
    v7 = v41;
  }
  __p[1] = v7;
  operator delete(v7);
LABEL_35:
  if (v63)
  {
    *(_QWORD *)&v64.f64[0] = v63;
    operator delete(v63);
  }
  v46 = 1.0 / v45;
  sub_239BF3D38(__p, a2);
  v47.f64[0] = -v46;
  *(void **)&_Q2.f64[1] = __p[1];
  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)__p), (float64x2_t)xmmword_239EC6850, *(float64x2_t *)__p, 1), (float64x2_t)0, v73);
  _D7 = 0;
  __asm { FMLA            D16, D7, V2.D[1] }
  v52.f64[0] = v73 + _D16;
  *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vmulq_f64(v47, v52);
  v53 = vmulq_n_f64(_Q4, -v46);
  v63 = *(void **)&v46;
  *(_QWORD *)v65 = 0;
  v64 = (float64x2_t)xmmword_239EC6840;
  *(_QWORD *)&v65[24] = 0;
  *(_OWORD *)&v65[8] = xmmword_239EC6850;
  v67 = 1.0;
  v66 = 0u;
  v68 = v53;
  v69 = v52.f64[0];
  for (i = *(_QWORD **)(a2 + 88); i; i = (_QWORD *)*i)
    v53.f64[0] = sub_2396F774C((uint64_t)(i + 3), (uint64_t)&v63, (int64x2_t)v53);
  v55 = *(uint64_t **)(a2 + 48);
  if (v55)
  {
    *(_QWORD *)&v53.f64[0] = v63;
    *(_QWORD *)&v56.f64[0] = v63;
    *(_QWORD *)&v56.f64[1] = v63;
    do
    {
      _Q4.f64[0] = *(float64_t *)&v65[24];
      v57 = *((double *)v55 + 5);
      _Q17 = *(float64x2_t *)(v55 + 3);
      __asm { FMLA            D2, D4, V17.D[1] }
      _Q2.f64[0] = _Q2.f64[0] + v67 * v57;
      _Q4.f64[0] = v69;
      _Q4 = vmlaq_f64(_Q4, v53, _Q2);
      *(float64x2_t *)(v55 + 3) = vmlaq_f64(v68, v56, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, _Q17.f64[0]), *(float64x2_t *)&v65[8], _Q17, 1), v66, v57));
      v55[5] = *(_QWORD *)&_Q4.f64[0];
      v55 = (uint64_t *)*v55;
    }
    while (v55);
  }
  else
  {
    *(_QWORD *)&v53.f64[0] = v63;
  }
  *(float64_t *)v44 = v53.f64[0];
  v59 = v64;
  *(_OWORD *)(v44 + 24) = *(_OWORD *)v65;
  v60 = v66;
  *(_OWORD *)(v44 + 40) = *(_OWORD *)&v65[16];
  *(float64x2_t *)(v44 + 56) = v60;
  *(double *)(v44 + 72) = v67;
  *(float64x2_t *)(v44 + 8) = v59;
  result = v68.f64[0];
  *(float64x2_t *)(v44 + 80) = v68;
  *(float64_t *)(v44 + 96) = v69;
  *(_BYTE *)(v44 + 104) = 1;
  return result;
}

void sub_239BF484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v28;

  if (__p)
  {
    operator delete(__p);
    v28 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v28 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void sub_239BF48B0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239BF48C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250AFAF98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239BF4904(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFAF98;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239BF492C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  double v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  double *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  double *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = *a3;
  v5 = (_QWORD *)a1[3];
  if (!v5[1]
    || (v6 = (uint64_t *)a1[4],
        v7 = *v6,
        ((*(_QWORD *)(*v5 + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v6) & 1) != 0))
  {
    v8 = sub_2394650AC(a1[1], a3[1]);
    v9 = sub_2394A2EA8(a1[1], v4);
    _Q1 = *(_OWORD *)v9;
    _D3 = v8[14];
    __asm { FMLA            D2, D3, V1.D[1] }
    v17 = _D2 + *((double *)v8 + 18) * *((double *)v9 + 2) + *((double *)v8 + 22);
    v18 = a1[2];
    v20 = *(double **)(v18 + 8);
    v19 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v19)
    {
      v22 = *(double **)v18;
      v23 = (uint64_t)v20 - *(_QWORD *)v18;
      v24 = v23 >> 3;
      v25 = (v23 >> 3) + 1;
      if (v25 >> 61)
        sub_2394189F8();
      v26 = v19 - (_QWORD)v22;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 61)
          sub_239418A80();
        v28 = operator new(8 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = (double *)&v28[8 * v24];
      v30 = &v28[8 * v27];
      *v29 = v17;
      v21 = v29 + 1;
      if (v20 != v22)
      {
        v31 = (char *)v20 - (char *)v22 - 8;
        if (v31 < 0x58)
          goto LABEL_30;
        if ((unint64_t)((char *)v20 - v28 - v23) < 0x20)
          goto LABEL_30;
        v32 = (v31 >> 3) + 1;
        v33 = &v28[8 * v24 - 16];
        v34 = v20 - 2;
        v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 4;
          v35 -= 4;
        }
        while (v35);
        v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        v20 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            v37 = *((_QWORD *)v20-- - 1);
            *((_QWORD *)v29-- - 1) = v37;
          }
          while (v20 != v22);
        }
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v21;
      *(_QWORD *)(v18 + 16) = v30;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v20 = v17;
      v21 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v21;
    v6 = (uint64_t *)a1[4];
    v7 = *v6;
  }
  *v6 = v7 + 1;
  return 1;
}

void sub_239BF4B14(uint64_t a1, uint64_t *a2, int a3, float64x2_t *a4, char a5)
{
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float64x2_t v14;
  float64_t v15;
  float64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  float64_t v27;
  unint64_t v28;
  double *v29;
  double v30;
  float64_t v31;
  int8x16_t v32;
  float64x2_t v33;
  void *v34;
  unint64_t v35;
  float64x2_t v36;
  unint64_t v37;
  uint64_t *v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v50;
  unint64_t v51;
  _BYTE *v54;
  int v55;
  float64x2_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v63;
  double v67;
  double v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v74;
  float64x2_t v75;
  float64_t v76;
  float64_t v77;
  float64x2_t *v78;
  uint64_t *v79;
  float64x2_t v81;
  int8x16_t v82;
  float64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  float64_t v90;
  float64_t v91;
  float64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  float64x2_t *v101;
  float64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  __int128 v107;
  char *v108;
  char *v109;
  __int128 v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  int v117;
  float64x2_t v118;
  double v119;
  double v122;
  double cosval;
  double v124;
  __double2 v125;
  double v126;
  double v127;
  double v128;
  double v129;
  float64_t v130;
  double v131;
  double v132;
  float64x2_t v133;
  __int128 v134;
  float64x2_t v135;
  float64x2_t v137;
  float64x2_t v138;
  _QWORD *i;
  uint64_t v140;
  float64x2_t v141;
  float64x2_t v142;
  double v144;
  __int128 v146;
  float64x2_t v147;
  int v148;
  _QWORD *v149;
  unint64_t v150;
  float64x2_t *v151;
  double v152;
  double v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64_t v167;
  float64_t v168;
  float64x2_t *v169;
  uint64_t v170;
  double v171;
  int8x16_t v172;
  double v173;
  double v174;
  double v175;
  double v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  double v180;
  double v181;
  double v182;
  float64x2_t v183;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64_t v187;
  float64x2_t v188;
  double v189;
  float64x2_t v190;
  float64_t v191;
  float64_t v192;
  float64x2_t v193;
  uint64_t v194;
  double v195;
  double v196;
  float64x2_t v197;
  __int128 v198;
  float64x2_t __p;
  __int128 v200;
  float64x2_t v201;
  __int128 v202;
  void *v203;
  unint64_t v204;
  uint64_t v205;
  float64x2_t v206;
  float64_t v207;
  float64x2_t v208;
  float64_t v209;
  double v210;
  double v211;
  void *v212;
  float64x2_t *v213;
  float64x2_t *v214;
  void *v215;
  _BYTE *v216;
  uint64_t v217;
  _BYTE v218[24];
  _BYTE v219[32];
  float64x2_t v220;
  double v221;
  float64x2_t v222;
  float64_t v223;
  _QWORD v224[7];

  v224[4] = *MEMORY[0x24BDAC8D0];
  v201 = 0uLL;
  *(_QWORD *)&v202 = 0;
  __p = 0uLL;
  *(_QWORD *)&v200 = 0;
  v215 = 0;
  v10 = (_DWORD *)*a2;
  v11 = (a2[1] - *a2) >> 6;
  if (a2[1] != *a2 && *v10 == -1)
  {
    LODWORD(v12) = 0;
    while (1)
    {
      v12 = (v12 + 1);
      if (v11 <= v12)
        break;
      if (v10[16 * v12] != -1)
        goto LABEL_4;
    }
    LODWORD(v12) = -1;
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_4:
  v12 = v12;
  if (v11 <= v12)
    v12 = 0xFFFFFFFFLL;
  if ((_DWORD)v12 != -1)
  {
    v13 = 0;
LABEL_8:
    if (HIBYTE(v10[16 * v12 + 14]) == 2)
      ++v13;
    while (1)
    {
      v12 = (v12 + 1);
      if (v11 <= v12)
        break;
      if (v10[16 * v12] != -1)
      {
        if ((_DWORD)v12 != -1)
          goto LABEL_8;
        break;
      }
    }
    if (v13 >= 0x1389)
    {
      LODWORD(v197.f64[0]) = 0;
      sub_239454CD8((int *)&v197, (uint64_t)v218);
      LODWORD(v212) = v13;
      LODWORD(v208.f64[0]) = 5000;
      if (v13 >> 3 <= 0x270)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if ((double)v13 * 0.5 >= 5000.0)
        sub_239455384((uint64_t)v218, (unsigned int *)&v212, (int *)&v208, (int32x4_t **)&v197);
      else
        sub_2394551BC((uint64_t)v218, (unsigned int *)&v212, (unsigned int *)&v208, (int32x4_t **)&v197);
      sub_23941C5D8((uint64_t)&__p, v13, 0);
      v14 = v197;
      if (*(_QWORD *)&v197.f64[0] != *(_QWORD *)&v197.f64[1])
      {
        v15 = __p.f64[0];
        v16 = v197.f64[0];
        do
        {
          v17 = **(_DWORD **)&v16;
          *(_QWORD *)&v16 += 4;
          *(_QWORD *)(*(_QWORD *)&v15 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) |= 1 << v17;
        }
        while (*(_QWORD *)&v16 != *(_QWORD *)&v14.f64[1]);
      }
      if (*(_QWORD *)&v14.f64[0])
      {
        v197.f64[1] = v14.f64[0];
        operator delete(*(void **)&v14.f64[0]);
      }
      sub_239911CF8((uint64_t)v224);
    }
  }
  *(_QWORD *)v219 = 0;
  v18 = operator new(0x28uLL);
  *v18 = &off_250AFAF98;
  v18[1] = a2;
  v18[2] = &v201;
  v18[3] = &__p;
  v18[4] = &v215;
  *(_QWORD *)v219 = v18;
  v20 = (_DWORD *)*a2;
  v19 = a2[1];
  v21 = (v19 - *a2) >> 6;
  if (v19 != *a2 && *v20 == -1)
  {
    LODWORD(v22) = 0;
    while (1)
    {
      v22 = (v22 + 1);
      if (v21 <= v22)
        break;
      if (v20[16 * v22] != -1)
        goto LABEL_31;
    }
    LODWORD(v22) = -1;
  }
  else
  {
    LODWORD(v22) = 0;
  }
LABEL_31:
  if (v21 <= v22)
    v23 = 0xFFFFFFFFLL;
  else
    v23 = v22;
LABEL_34:
  if ((_DWORD)v23 != -1)
  {
    v24 = &v20[16 * v23];
    if (*((_BYTE *)v24 + 59) != 2)
      goto LABEL_39;
    *(_QWORD *)&v197.f64[0] = v20[16 * v23];
    if (!*(_QWORD *)v219)
      sub_2394172E0();
    if ((*(unsigned int (**)(_QWORD, float64x2_t *, _DWORD *))(**(_QWORD **)v219 + 48))(*(_QWORD *)v219, &v197, v24 + 2))
    {
      v20 = (_DWORD *)*a2;
      v19 = a2[1];
LABEL_39:
      while (1)
      {
        v23 = (v23 + 1);
        if ((v19 - (uint64_t)v20) >> 6 <= v23)
          break;
        if (v20[16 * v23] != -1)
          goto LABEL_34;
      }
    }
  }
  v25 = *(_BYTE **)v219;
  if (*(_BYTE **)v219 == v218)
  {
    v26 = 4;
    v25 = v218;
  }
  else
  {
    if (!*(_QWORD *)v219)
      goto LABEL_47;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_47:
  v27 = v201.f64[0];
  if (*(_QWORD *)&v201.f64[0] == *(_QWORD *)&v201.f64[1])
  {
    v30 = -1.0;
    v31 = __p.f64[0];
    if (*(_QWORD *)&__p.f64[0])
    {
LABEL_51:
      operator delete(*(void **)&v31);
      v27 = v201.f64[0];
    }
  }
  else
  {
    v28 = (unint64_t)((uint64_t)(*(_QWORD *)&v201.f64[1] - *(_QWORD *)&v201.f64[0]) >> 3) >> 1;
    v29 = (double *)(*(_QWORD *)&v201.f64[0] + 8 * v28);
    if (v29 != *(double **)&v201.f64[1])
    {
      sub_2395F71EC(*(double **)&v201.f64[0], v29, *(double **)&v201.f64[1]);
      v27 = v201.f64[0];
    }
    v30 = *(double *)(*(_QWORD *)&v27 + 8 * v28);
    v31 = __p.f64[0];
    if (*(_QWORD *)&__p.f64[0])
      goto LABEL_51;
  }
  if (v27 != 0.0)
  {
    v201.f64[1] = v27;
    operator delete(*(void **)&v27);
  }
  if (v30 <= 0.0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 104) = 0;
    return;
  }
  memset(v218, 0, sizeof(v218));
  sub_2394B5624((uint64_t)a2, (uint64_t)v218, 1);
  v34 = *(void **)v218;
  if (*(_QWORD *)v218 == *(_QWORD *)&v218[8])
  {
    v32.i64[0] = 0;
    v172 = v32;
    v171 = 0.0;
    v173 = 0.0;
    if (*(_QWORD *)v218)
    {
LABEL_59:
      *(_QWORD *)&v218[8] = v34;
      operator delete(v34);
    }
  }
  else
  {
    v35 = 0;
    v36.f64[0] = 0.0;
    *(double *)&v37 = 0.0;
    v33.f64[0] = 0.0;
    do
    {
      v183 = v33;
      v187 = *(double *)&v37;
      v192 = v36.f64[0];
      v38 = sub_2394650AC((uint64_t)a2, *((_QWORD *)v34 + v35));
      *(_QWORD *)&v39.f64[0] = v38[10];
      _Q4 = *((float64x2_t *)v38 + 8);
      *(_QWORD *)&v41.f64[0] = v38[22];
      *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v41);
      v42 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v38 + 10));
      *(_QWORD *)&v39.f64[1] = v38[14];
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v38 + 4), *((int64x2_t *)v38 + 6)), v42.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v38 + 4), *((int64x2_t *)v38 + 6)), v42, 1), v39, v41.f64[0]);
      _Q0 = vmulq_f64(_Q4, v42);
      _D1 = v42.f64[1];
      __asm { FMLA            D0, D1, V4.D[1] }
      _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *((double *)v38 + 18), v41.f64[0]);
      v50.f64[0] = v192;
      v50.f64[1] = v187;
      v36 = vaddq_f64(v50, v43);
      v37 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
      v33 = vaddq_f64(v183, _Q0);
      ++v35;
      v34 = *(void **)v218;
      v51 = (uint64_t)(*(_QWORD *)&v218[8] - *(_QWORD *)v218) >> 3;
    }
    while (v35 < v51);
    _Q0.f64[0] = (double)v51;
    *(_QWORD *)&v36.f64[1] = v37;
    v172 = (int8x16_t)vdivq_f64(v36, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v51), 0));
    *(_QWORD *)&v173 = *(_OWORD *)&vdivq_f64(v33, _Q0);
    *(_QWORD *)&v171 = vextq_s8(v172, v172, 8uLL).u64[0];
    if (*(_QWORD *)v218)
      goto LABEL_59;
  }
  v180 = 1.0;
  _Q0 = (float64x2_t)xmmword_239F13A00;
  _Q3.f64[1] = 0.0;
  v178 = *(int8x16_t *)dbl_239F13A30;
  v179 = (int8x16_t)xmmword_239F13A20;
  *(_QWORD *)&v176 = vextq_s8(v179, v179, 8uLL).u64[0];
  v177 = *(int8x16_t *)algn_239F13A10;
  *(_QWORD *)&v174 = vextq_s8(v178, v178, 8uLL).u64[0];
  *(_QWORD *)&v175 = vextq_s8(v177, v177, 8uLL).u64[0];
  *(_QWORD *)&v181 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  v182 = 1.0;
  if (a3)
  {
    if (!a5)
    {
      sub_239A444D4((uint64_t)"unknown file", 885, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v216 = 0;
    v215 = 0;
    v217 = 0;
    sub_239A6CCD8(a2, (uint64_t)&v215);
    v54 = v215;
    if ((unint64_t)(v216 - (_BYTE *)v215) >= 0x28)
    {
      v169 = a4;
      v170 = a1;
      v201 = 0uLL;
      *(_QWORD *)&v202 = 0;
      __p = 0uLL;
      *(_QWORD *)&v200 = 0;
      sub_2394B5624((uint64_t)a2, (uint64_t)&__p, 1);
      v77 = __p.f64[1];
      v76 = __p.f64[0];
      if (*(_QWORD *)&__p.f64[0] == *(_QWORD *)&__p.f64[1])
      {
        *(double *)&v78 = 0.0;
        v92 = 0.0;
      }
      else
      {
        *(double *)&v78 = 0.0;
        do
        {
          v79 = sub_2394650AC((uint64_t)a2, **(_QWORD **)&v76);
          *(_QWORD *)&_Q0.f64[0] = v79[10];
          v71 = *((float64x2_t *)v79 + 6);
          *(_QWORD *)&v72.f64[0] = v79[18];
          _Q4 = *((_OWORD *)v79 + 8);
          *(_QWORD *)&v81.f64[0] = v79[22];
          v74 = vsubq_f64((float64x2_t)0, v81);
          v75 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v79 + 10));
          *(_QWORD *)&_Q0.f64[1] = v79[14];
          v82 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v79 + 4), (int64x2_t)v71), v75.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v79 + 4), (int64x2_t)v71), v75, 1), _Q0, v74.f64[0]);
          _Q0.f64[0] = v75.f64[1];
          __asm { FMLA            D1, D0, V4.D[1] }
          v70 = vmlad_n_f64(_D1, v72.f64[0], v74.f64[0]);
          v69 = (float64x2_t)vextq_s8(v82, v82, 8uLL);
          if ((unint64_t)v78 < (unint64_t)v202)
          {
            v78[1].f64[0] = v70;
            v82.i64[1] = *(_QWORD *)&v69.f64[0];
            *v78 = (float64x2_t)v82;
            v78 = (float64x2_t *)((char *)v78 + 24);
          }
          else
          {
            v84 = v201.f64[0];
            v85 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v78 - *(_QWORD *)&v201.f64[0]) >> 3);
            v86 = v85 + 1;
            if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_2394189F8();
            if (0x5555555555555556 * ((uint64_t)(v202 - *(_QWORD *)&v201.f64[0]) >> 3) > v86)
              v86 = 0x5555555555555556 * ((uint64_t)(v202 - *(_QWORD *)&v201.f64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v202 - *(_QWORD *)&v201.f64[0]) >> 3) >= 0x555555555555555)
              v87 = 0xAAAAAAAAAAAAAAALL;
            else
              v87 = v86;
            if (v87)
            {
              v184 = v69;
              v189 = v70;
              v194 = v82.i64[0];
              if (v87 > 0xAAAAAAAAAAAAAAALL)
                sub_239418A80();
              v88 = (char *)operator new(24 * v87);
              v70 = v189;
              v82.i64[0] = v194;
              v69 = v184;
            }
            else
            {
              v88 = 0;
            }
            v89 = &v88[24 * v85];
            *((double *)v89 + 2) = v70;
            v82.i64[1] = *(_QWORD *)&v69.f64[0];
            *(int8x16_t *)v89 = v82;
            if (v78 == *(float64x2_t **)&v84)
            {
              v91 = *(double *)&v78;
              *(_QWORD *)&v90 = &v88[24 * v85];
            }
            else
            {
              *(_QWORD *)&v90 = &v88[24 * v85];
              do
              {
                v69 = *(float64x2_t *)((char *)v78 - 24);
                *(float64_t *)(*(_QWORD *)&v90 - 8) = v78[-1].f64[1];
                *(float64x2_t *)(*(_QWORD *)&v90 - 24) = v69;
                *(_QWORD *)&v90 -= 24;
                v78 = (float64x2_t *)((char *)v78 - 24);
              }
              while (v78 != *(float64x2_t **)&v84);
              v91 = v201.f64[0];
            }
            v78 = (float64x2_t *)(v89 + 24);
            v201.f64[0] = v90;
            *(_QWORD *)&v201.f64[1] = v89 + 24;
            *(_QWORD *)&v202 = &v88[24 * v87];
            if (v91 != 0.0)
              operator delete(*(void **)&v91);
          }
          *(_QWORD *)&v201.f64[1] = v78;
          *(_QWORD *)&v76 += 8;
        }
        while (*(_QWORD *)&v76 != *(_QWORD *)&v77);
        v92 = v201.f64[0];
      }
      sub_239BEAFF4((float64x2_t *)v218, *(float64x2_t **)&v92, v78, v69, v70, v71, v72, *(double *)&_Q4, v74, v75);
      v195 = *(double *)&v218[16];
      v190 = *(float64x2_t *)v218;
      if (*(_QWORD *)&__p.f64[0])
      {
        __p.f64[1] = __p.f64[0];
        operator delete(*(void **)&__p.f64[0]);
      }
      if (*(_QWORD *)&v201.f64[0])
        operator delete(*(void **)&v201.f64[0]);
      v213 = 0;
      v212 = 0;
      v214 = 0;
      v93 = v216;
      v94 = v215;
      v95 = v216 - (_BYTE *)v215;
      if (v216 != v215)
      {
        if ((unint64_t)v95 >= 0x5555555555555551)
          sub_2394189F8();
        v96 = v95 >> 3;
        v212 = operator new(24 * (v95 >> 3));
        v213 = (float64x2_t *)v212;
        v214 = (float64x2_t *)((char *)v212 + 24 * v96);
        do
        {
          v99 = sub_2394A2EA8((uint64_t)a2, *v94);
          v100 = v99;
          v101 = v213;
          if (v213 < v214)
          {
            v97 = *(float64x2_t *)v99;
            *(_QWORD *)&v213[1].f64[0] = v99[2];
            *v101 = v97;
            v98 = (float64x2_t *)((char *)v101 + 24);
          }
          else
          {
            v102 = (float64x2_t *)v212;
            v103 = 0xAAAAAAAAAAAAAAABLL * (((char *)v213 - (_BYTE *)v212) >> 3);
            v104 = v103 + 1;
            if (v103 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_2394189F8();
            if (0x5555555555555556 * (((char *)v214 - (_BYTE *)v212) >> 3) > v104)
              v104 = 0x5555555555555556 * (((char *)v214 - (_BYTE *)v212) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v214 - (_BYTE *)v212) >> 3) >= 0x555555555555555)
              v105 = 0xAAAAAAAAAAAAAAALL;
            else
              v105 = v104;
            if (v105)
            {
              if (v105 > 0xAAAAAAAAAAAAAAALL)
                sub_239418A80();
              v106 = (char *)operator new(24 * v105);
            }
            else
            {
              v106 = 0;
            }
            v107 = *(_OWORD *)v100;
            v108 = &v106[24 * v103];
            *((_QWORD *)v108 + 2) = v100[2];
            *(_OWORD *)v108 = v107;
            v109 = v108;
            if (v101 != v102)
            {
              do
              {
                v110 = *(__int128 *)((char *)&v101[-2] + 8);
                *((_QWORD *)v109 - 1) = *(_QWORD *)&v101[-1].f64[1];
                *(_OWORD *)(v109 - 24) = v110;
                v109 -= 24;
                v101 = (float64x2_t *)((char *)v101 - 24);
              }
              while (v101 != v102);
              v101 = (float64x2_t *)v212;
            }
            v98 = (float64x2_t *)(v108 + 24);
            v212 = v109;
            v213 = (float64x2_t *)(v108 + 24);
            v214 = (float64x2_t *)&v106[24 * v105];
            if (v101)
              operator delete(v101);
          }
          v213 = v98;
          ++v94;
        }
        while (v94 != v93);
      }
      v211 = 0.0;
      v210 = 0.0;
      sub_239BECF4C(a2, &v211, &v210);
      a4 = v169;
      a1 = v170;
      if ((sub_239E20BF0((uint64_t)&v212, (uint64_t)&v208, (uint64_t)&v206, 0, 0, 1.0, 0.0) & 1) != 0)
      {
        _Q0.f64[0] = v207;
        v111.f64[0] = v209;
        _Q0.f64[0] = vsubq_f64(_Q0, v111).f64[0];
        v112 = vsubq_f64(v206, v208);
        if (_Q0.f64[0] >= v112.f64[1])
          _Q0.f64[0] = v112.f64[1];
        if (_Q0.f64[0] >= v112.f64[0])
          _Q0.f64[0] = v112.f64[0];
        if (_Q0.f64[0] < 0.000001)
          _Q0.f64[0] = 0.000001;
        *(_OWORD *)v218 = xmmword_239F0BFA0;
        v113 = v211;
        if (v211 >= v210)
          v113 = v210;
        if (_Q0.f64[0] >= v113)
          _Q0.f64[0] = v113;
        *(double *)v219 = _Q0.f64[0] * 0.05;
        *(_QWORD *)&v219[24] = 0;
        *(_QWORD *)&v218[16] = 3;
        *(_OWORD *)&v219[8] = xmmword_239F0C370;
        v203 = 0;
        v204 = 0;
        v205 = 0;
        if ((sub_239BF1278(&v212, &v201, (uint64_t)&v203, (uint64_t)v218) & 1) != 0)
        {
          if (v204 > 0x3F || (v204 & 0x3F) != 0)
          {
            v148 = 0;
            v117 = 0;
            v149 = v203;
            do
            {
              v117 += (*v149 >> v148) & 1;
              v149 += v148 == 63;
              if (v148 == 63)
                v148 = 0;
              else
                ++v148;
            }
            while (v148 != (v204 & 0x3F) || v149 != (_QWORD *)((char *)v203 + 8 * (v204 >> 6)));
          }
          else
          {
            v117 = 0;
          }
          v114.f64[0] = (double)(unint64_t)v117;
          v186 = v114;
          _Q0.f64[0] = v114.f64[0] / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v213 - (_BYTE *)v212) >> 3));
          if (v204)
          {
            v150 = 0;
            _Q3.f64[0] = 0.0;
            v151 = (float64x2_t *)v212;
            v152 = 0.0;
            v115.f64[0] = 0.0;
            do
            {
              if (((*(_QWORD *)((char *)v203 + ((v150 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v150) & 1) != 0)
              {
                v114.f64[0] = v151[1].f64[0];
                v115 = vaddq_f64(v115, v114);
                _Q3.f64[1] = v152;
                _Q3 = vaddq_f64(_Q3, *v151);
                *(_QWORD *)&v152 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
              }
              ++v150;
              v151 = (float64x2_t *)((char *)v151 + 24);
            }
            while (v204 != v150);
          }
          else
          {
            _Q3.f64[0] = 0.0;
            v152 = 0.0;
            v115.f64[0] = 0.0;
          }
          v166 = v115;
          v167 = v152;
          v168 = _Q3.f64[0];
          v153 = *((double *)&v202 + 1);
          *(_QWORD *)&v114.f64[0] = v202;
          v164 = v201;
          v165 = v114;
          if (_Q0.f64[0] <= 0.4)
          {
            sub_239BEAFF4(&__p, (float64x2_t *)v212, v213, _Q0, 0.4, v201, _Q3, v152, v115, v116);
            v197 = __p;
            v198 = v200;
          }
          else
          {
            v197 = v201;
            v198 = v202;
          }
          if (sub_239BECBF8((uint64_t)a2, (uint64_t)&v197))
          {
            v155 = v190;
            v156 = vdivq_f64(v166, v186);
            v157.f64[0] = v168;
            v157.f64[1] = v167;
            _Q0 = vdivq_f64(v157, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v186.f64[0], 0));
            _Q7 = v164;
            _Q3 = vmulq_f64(_Q7, _Q7);
            _D4 = v164.f64[1];
            __asm { FMLA            D3, D4, V7.D[1] }
            _Q3.f64[0] = sqrt(_Q3.f64[0] + v165.f64[0] * v165.f64[0]);
            v154.f64[0] = 1.0 / _Q3.f64[0];
            v162 = vmulq_n_f64(v164, 1.0 / _Q3.f64[0]);
            __asm { FMLA            D7, D4, V0.D[1] }
            _Q3.f64[0] = (v153 + vmlad_n_f64(_Q7.f64[0], v165.f64[0], v156.f64[0])) / _Q3.f64[0];
            v163 = vmlsq_lane_f64(_Q0, v162, _Q3.f64[0], 0);
            v155.f64[1] = *(double *)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).i64;
            v197 = v155;
            *(double *)&v198 = v195;
            *((double *)&v198 + 1) = -(vmulq_f64(v163, v155).f64[0]
                                     + *(double *)vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).i64 * v155.f64[1]
                                     + vmlsq_f64(v156, vmulq_f64(v165, v154), _Q3).f64[0] * v195);
          }
          v55 = sub_239BF0B88((uint64_t)a2, (uint64_t)&v197);
        }
        else
        {
          v55 = 0;
        }
        if (v203)
          operator delete(v203);
      }
      else
      {
        v55 = 0;
      }
      if (v212)
      {
        v213 = (float64x2_t *)v212;
        operator delete(v212);
      }
      v54 = v215;
      if (!v215)
        goto LABEL_65;
    }
    else
    {
      v55 = 0;
      if (!v215)
        goto LABEL_65;
    }
    v216 = v54;
    operator delete(v54);
LABEL_65:
    if (v55)
    {
      *(_QWORD *)&_Q0.f64[0] = v198;
      _Q3.f64[0] = a4[1].f64[0];
      _Q4 = *a4;
      v57 = vnegq_f64(_Q3);
      v58 = (int8x16_t)vnegq_f64(*a4);
      v59 = (float64x2_t)vextq_s8((int8x16_t)v197, (int8x16_t)_Q0, 8uLL);
      _D16 = v197.f64[1];
      __asm
      {
        FMLS            D1, D16, V4.D[1]
        FMLS            D1, D0, V3.D[0]; __x
      }
      _Q0.f64[1] = v197.f64[0];
      v63 = (float64x2_t)vextq_s8(v58, (int8x16_t)v57, 8uLL);
      *(_QWORD *)&v57.f64[1] = v58.i64[0];
      _Q3 = vmlaq_f64(vnegq_f64(vmulq_f64(_Q0, v63)), v57, v59);
      _D2 = _Q3.f64[1];
      v188 = vmlsq_laneq_f64(vmulq_laneq_f64(*a4, v197, 1), v197, *a4, 1);
      v193 = _Q3;
      __asm { FMLA            D0, D2, V3.D[1] }
      v67 = sqrt(vmlad_n_f64(_D0, v188.f64[0], v188.f64[0]));
      _Q0.f64[0] = atan2(v67, _D1);
      v68 = fabs(_Q0.f64[0] * 180.0 / 3.14159265);
      v181 = 0.0;
      v182 = 1.0;
      if (v68 >= 0.1)
      {
        if (v68 <= 179.9)
        {
          v118 = v193;
          _Q0.f64[0] = _Q0.f64[0] * (1.0 / v67);
          *(_QWORD *)&v119 = *(_OWORD *)&vmulq_f64(v188, _Q0);
          *(_QWORD *)&v118.f64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
          _Q7 = vmulq_n_f64(v118, _Q0.f64[0]);
          _D10 = _Q7.f64[1];
          _Q3 = vmulq_f64(_Q7, _Q7);
          __asm { FMLA            D3, D10, V7.D[1] }
          _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v119, v119);
          if (_Q3.f64[0] >= 0.0000002635)
          {
            v124 = sqrt(_Q3.f64[0]);
            v191 = _Q7.f64[0];
            v196 = v119;
            v185 = _Q3.f64[0];
            v125 = __sincos_stret(v124);
            cosval = v125.__cosval;
            _Q7.f64[0] = v191;
            v119 = v196;
            _Q0.f64[0] = v125.__sinval / v124;
            v122 = 1.0 / v185 * (1.0 - v125.__cosval);
          }
          else
          {
            v122 = 0.5 - _Q3.f64[0] * (_Q3.f64[0] / -720.0 + 0.0416666667);
            _Q0.f64[0] = 1.0 - _Q3.f64[0] * (0.166666667 - _Q3.f64[0] * (_Q3.f64[0] / -5040.0 + 0.00833333333));
            cosval = 1.0 - _Q3.f64[0] * v122;
          }
          v126 = _D10 * v122;
          v182 = cosval + _Q7.f64[0] * v122 * _Q7.f64[0];
          *(double *)v179.i64 = cosval + _D10 * v122 * _D10;
          v180 = cosval + v119 * v122 * v119;
          v127 = _D10 * (_Q7.f64[0] * v122);
          v128 = v119 * (_Q7.f64[0] * v122);
          v129 = v119 * v126;
          v130 = _Q7.f64[0] * _Q0.f64[0];
          v131 = _D10 * _Q0.f64[0];
          v132 = v119 * _Q0.f64[0];
          v175 = v127 - v132;
          v181 = v127 + v132;
          v174 = v129 - v130;
          *(double *)v177.i64 = v128 - v131;
          *(double *)v178.i64 = v131 + v128;
          v176 = v130 + v129;
        }
        else
        {
          v179.i64[0] = -1.0;
          v174 = -1.2246468e-16;
          v176 = 1.2246468e-16;
          v177.i64[0] = 0;
          v175 = 0.0;
          v178.i64[0] = 0;
          v180 = -1.0;
        }
      }
      else
      {
        v177.i64[0] = 0;
        v175 = 0.0;
        v179.i64[0] = 1.0;
        v176 = 0.0;
        v178.i64[0] = 0;
        v174 = 0.0;
        v180 = 1.0;
      }
    }
  }
  _Q0.f64[0] = 1.0 / v30;
  *(_QWORD *)&v133.f64[0] = v178.i64[0];
  *(_QWORD *)&v134 = v179.i64[0];
  *((double *)&v134 + 1) = v176;
  *(_QWORD *)&_Q2.f64[0] = v177.i64[0];
  v135.f64[0] = v175;
  _Q2.f64[1] = v175;
  _Q3.f64[0] = -(1.0 / v30);
  v133.f64[1] = v174;
  v137.f64[0] = v182;
  v137.f64[1] = v181;
  *(_QWORD *)&v138.f64[1] = v172.i64[1];
  *(_QWORD *)&v135.f64[1] = v179.i64[0];
  v138.f64[0] = *(double *)v177.i64 * *(double *)v172.i64 + v176 * v171 + v180 * v173;
  *(float64x2_t *)&v218[8] = v137;
  *(float64x2_t *)v219 = _Q2;
  *(double *)v218 = 1.0 / v30;
  v221 = v180;
  *(_OWORD *)&v219[16] = v134;
  v220 = v133;
  v222 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v137, *(double *)v172.i64), v135, v171), v133, v173), _Q3.f64[0]);
  *(_QWORD *)&v223 = *(_OWORD *)&vmulq_f64(_Q3, v138);
  for (i = (_QWORD *)a2[11]; i; i = (_QWORD *)*i)
    _Q0.f64[0] = sub_2396F774C((uint64_t)(i + 3), (uint64_t)v218, (int64x2_t)_Q0);
  v140 = a2[6];
  if (v140)
  {
    _Q0.f64[0] = *(float64_t *)v218;
    v141.f64[0] = *(float64_t *)v218;
    v141.f64[1] = *(float64_t *)v218;
    do
    {
      v142.f64[1] = *(float64_t *)&v219[16];
      _D5 = *(_QWORD *)&v219[24];
      v144 = *(double *)(v140 + 40);
      _Q17 = *(float64x2_t *)(v140 + 24);
      __asm { FMLA            D2, D5, V17.D[1] }
      _Q2.f64[0] = _Q2.f64[0] + v221 * v144;
      v142.f64[0] = v223;
      *(float64x2_t *)(v140 + 24) = vmlaq_f64(v222, v141, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v218[8], _Q17.f64[0]), *(float64x2_t *)&v219[8], _Q17, 1), v220, v144));
      *(_QWORD *)(v140 + 40) = *(_OWORD *)&vmlaq_f64(v142, _Q0, _Q2);
      v140 = *(_QWORD *)v140;
    }
    while (v140);
  }
  else
  {
    _Q0.f64[0] = *(float64_t *)v218;
  }
  *(float64_t *)a1 = _Q0.f64[0];
  v146 = *(_OWORD *)&v218[8];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v219;
  v147 = v220;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v219[16];
  *(float64x2_t *)(a1 + 56) = v147;
  *(double *)(a1 + 72) = v221;
  *(_OWORD *)(a1 + 8) = v146;
  *(float64x2_t *)(a1 + 80) = v222;
  *(float64_t *)(a1 + 96) = v223;
  *(_BYTE *)(a1 + 104) = 1;
}

void sub_239BF5B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v65;
  void *v66;

  if (__p)
    operator delete(__p);
  v65 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v65;
    operator delete(v65);
  }
  v66 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v66;
    operator delete(v66);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_239BF5CF4(uint64_t a1, unint64_t __val)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  void *v11;
  int v12;
  BOOL v14;
  std::string v16;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    goto LABEL_33;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = __val;
    if (v2 <= __val)
      v4 = __val % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & __val;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v4);
  if (!v5)
    goto LABEL_33;
  v6 = *v5;
  if (!*v5)
    goto LABEL_33;
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == __val)
      {
        if (*((_DWORD *)v6 + 4) == (_DWORD)__val)
          goto LABEL_21;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_33;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_33;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == __val)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_33;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_33;
  }
  if (*((_DWORD *)v6 + 4) != (_DWORD)__val)
    goto LABEL_11;
LABEL_21:
  std::to_string(&v16, __val);
  v10 = std::string::insert(&v16, 0, "Cannot find image id: ");
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  v12 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v14 = v12 < 0 && v11 == 0;
  if (v12 < 0)
  {
    operator delete(v11);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
LABEL_29:
    if (v14)
    {
LABEL_33:
      sub_239A444D4((uint64_t)"unknown file", 2094, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  else
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_32:
    operator delete(v16.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_33;
  }
  return v6 + 3;
}

void sub_239BF5E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239BF5E98(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t *v4;
  unint64_t *v5;
  float64_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v15;
  double v20;
  double v21;
  __n128 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  double v33;
  double v36;
  double v37;
  double cosval;
  double v39;
  __double2 v40;
  float64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64_t v47;
  double v48;
  double v49;
  _QWORD *i;
  uint64_t *v51;
  float64x2_t v52;
  double v54;
  double v57;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  float64_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  double v71;
  void *__p;
  void *v73;
  uint64_t v74;

  __p = 0;
  v73 = 0;
  v74 = 0;
  sub_2394B5624(a1, (uint64_t)&__p, 1);
  v2 = __p;
  v3 = v73;
  if (__p == v73)
  {
    v31 = __p;
    if (!__p)
      return v2 != v3;
    goto LABEL_23;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v4 = (unint64_t *)__p;
  v5 = (unint64_t *)v73;
  if (__p != v73)
  {
    while (1)
    {
      v6 = (float64_t *)sub_239BF5CF4(a1, *v4);
      v7.f64[0] = v6[18];
      v8.f64[0] = v6[10];
      v8.f64[1] = v6[14];
      v9.f64[0] = 1.0 / sqrt(v8.f64[0] * v8.f64[0] + v8.f64[1] * v8.f64[1] + v7.f64[0] * v7.f64[0]);
      v62 = vmulq_n_f64(v8, v9.f64[0]);
      v64 = vmulq_f64(v7, v9);
      if (acos(fmax(fmin(vmlad_n_f64(vmlad_n_f64(-v62.f64[1], 0.0, v62.f64[0]), 0.0, v64.f64[0]), 1.0), -1.0))
         / 3.14159265
         * 180.0 >= 5.0
        && acos(fmax(fmin(*(double *)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).i64 + v62.f64[0] * -0.0 + v64.f64[0] * -0.0, 1.0), -1.0))/ 3.14159265* 180.0 >= 5.0)
      {
        break;
      }
      if (++v4 == v5)
        goto LABEL_22;
    }
    _Q1 = vmulq_f64((float64x2_t)*(unint64_t *)&v62.f64[0], (float64x2_t)xmmword_239EC68E0);
    v11 = vmulq_f64(v64, (float64x2_t)0);
    v12 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)v11, 8uLL);
    _Q0 = (int64x2_t)vmulq_f64((float64x2_t)*(unint64_t *)&v62.f64[0], (float64x2_t)xmmword_239EC68D0);
    *(_QWORD *)&v11.f64[1] = _Q0.i64[0];
    _Q3 = vsubq_f64(v12, v11);
    v15 = vsubq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(_Q0, 1));
    _Q1.f64[0] = _Q3.f64[1];
    v59 = v15;
    v60 = _Q3;
    __asm { FMLA            D0, D1, V3.D[1] }
    v20 = sqrt(vmlad_n_f64(*(double *)_Q0.i64, v15.f64[0], v15.f64[0]));
    v21 = 0.0;
    v22.n128_f64[0] = atan2(v20, vmulq_f64(v62, (float64x2_t)0).f64[0] + 0.0 - v64.f64[0]);
    v23 = fabs(v22.n128_f64[0] * 180.0 / 3.14159265);
    v24 = 1.0;
    if (v23 >= 0.1)
    {
      if (v23 <= 179.9)
      {
        _Q3 = v60;
        v22.n128_f64[0] = v22.n128_f64[0] * (1.0 / v20);
        *(_QWORD *)&v33 = *(_OWORD *)&vmulq_f64(v59, (float64x2_t)v22);
        *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        _Q17 = vmulq_n_f64(_Q3, v22.n128_f64[0]);
        _D9 = _Q17.f64[1];
        __asm { FMLA            D3, D9, V17.D[1] }
        v36 = vmlad_n_f64(_Q3.f64[0], v33, v33);
        if (v36 >= 0.0000002635)
        {
          v39 = sqrt(v36);
          v63 = _Q17.f64[0];
          v65 = v33;
          v61 = v36;
          v40 = __sincos_stret(v39);
          cosval = v40.__cosval;
          _Q17.f64[0] = v63;
          v33 = v65;
          v37 = v40.__sinval / v39;
          v22.n128_f64[0] = 1.0 / v61 * (1.0 - v40.__cosval);
        }
        else
        {
          v22.n128_f64[0] = 0.5 - v36 * (v36 / -720.0 + 0.0416666667);
          v37 = 1.0 - v36 * (0.166666667 - v36 * (v36 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v36 * v22.n128_f64[0];
        }
        v41 = _Q17.f64[0] * v22.n128_f64[0];
        v42 = _D9 * v22.n128_f64[0];
        v43 = v33 * v22.n128_f64[0];
        v24 = cosval + _Q17.f64[0] * v22.n128_f64[0] * _Q17.f64[0];
        v22.n128_f64[0] = cosval + _D9 * v22.n128_f64[0] * _D9;
        v30 = cosval + v43 * v33;
        v44 = _D9 * v41;
        v45 = v33 * v41;
        v46 = v33 * v42;
        v47 = _Q17.f64[0] * v37;
        v48 = _D9 * v37;
        v49 = v33 * v37;
        v26 = v44 - v33 * v37;
        v28 = v48 + v45;
        v21 = v44 + v49;
        v29 = v46 - v47;
        v25 = v45 - v48;
        v27 = v47 + v46;
      }
      else
      {
        v22.n128_u64[0] = -1.0;
        v29 = -1.2246468e-16;
        v27 = 1.2246468e-16;
        v25 = 0.0;
        v26 = 0.0;
        v28 = 0.0;
        v30 = -1.0;
      }
    }
    else
    {
      v25 = 0.0;
      v26 = 0.0;
      v22.n128_u64[0] = 1.0;
      v27 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
      v30 = 1.0;
    }
    v66.f64[0] = v24;
    v66.f64[1] = v21;
    v67 = v25;
    v68.f64[0] = v26;
    *(_QWORD *)&v68.f64[1] = v22.n128_u64[0];
    v69 = v27;
    v70.f64[0] = v28;
    v70.f64[1] = v29;
    v71 = v30;
    for (i = *(_QWORD **)(a1 + 88); i; i = (_QWORD *)*i)
      v22 = sub_2396F674C((uint64_t)(i + 3), (uint64_t)&v66, (int64x2_t)v22);
    v51 = *(uint64_t **)(a1 + 48);
    if (v51)
    {
      v52 = v66;
      do
      {
        _D2 = v69;
        v54 = *((double *)v51 + 5);
        _Q7 = *(float64x2_t *)(v51 + 3);
        __asm { FMLA            D3, D2, V7.D[1] }
        v57 = _D3 + v71 * v54;
        *(float64x2_t *)(v51 + 3) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, _Q7.f64[0]), v68, _Q7, 1), v70, v54);
        *((double *)v51 + 5) = v57;
        v51 = (uint64_t *)*v51;
      }
      while (v51);
    }
  }
LABEL_22:
  v31 = __p;
  if (__p)
  {
LABEL_23:
    v73 = v31;
    operator delete(v31);
  }
  return v2 != v3;
}

void sub_239BF62B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239BF62D8(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v13;
  int64x2_t v14;
  float64x2_t v15;
  unint64_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v32;
  int8x16_t v33;
  double v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v50;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  float64x2_t v59;
  int64x2_t v60;
  double v63;
  __n128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v74;
  double v77;
  double v78;
  double cosval;
  double v80;
  __double2 v81;
  float64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float64_t v88;
  double v89;
  double v90;
  _QWORD *i;
  uint64_t *v92;
  float64x2_t v93;
  double v95;
  double v98;
  float64x2_t v99;
  double v100;
  float64x2_t v101;
  float64x2_t v102;
  float64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  int64x2_t v107;
  double v108;
  int64x2_t v109;
  uint64_t v110;
  float64x2_t v111;
  double v112;
  unint64_t *v113;
  unint64_t *v114;
  uint64_t v115;

  v113 = 0;
  v114 = 0;
  v115 = 0;
  sub_2394B5624(a1, (uint64_t)&v113, 1);
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v2 = v113;
  v3 = v114;
  if (v113 == v114)
    goto LABEL_28;
  while (1)
  {
    v4 = *v2;
    v5 = sub_2395D7BEC(a1, *v2);
    _Q1 = *((_OWORD *)v5 + 13);
    _D3 = v5[27];
    __asm { FMLA            D2, D3, V1.D[1] }
    if (sqrt(_D2 + *((double *)v5 + 28) * *((double *)v5 + 28)) > 2.22044605e-16)
      break;
    if (++v2 == v3)
      goto LABEL_27;
  }
  v13 = sub_239BF5CF4(a1, v4);
  v15 = *((float64x2_t *)v13 + 4);
  v16 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v17.i64[0] = v13[14];
  v18 = *((float64x2_t *)v13 + 6);
  v19 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
  v20 = *((double *)v13 + 18);
  _Q0 = *((float64x2_t *)v13 + 8);
  _Q2 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
  v108 = *((double *)v13 + 10);
  *(double *)v14.i64 = v108;
  v107 = (int64x2_t)v15;
  v110 = v17.i64[0];
  v109 = (int64x2_t)v18;
  v112 = v20;
  v111 = _Q0;
  v23 = (float64x2_t)vzip1q_s64((int64x2_t)v15, (int64x2_t)v18);
  v24 = (float64x2_t)vzip2q_s64((int64x2_t)v15, (int64x2_t)v18);
  _Q3 = (float64x2_t)vzip1q_s64(v14, v17);
  _Q21 = (int64x2_t)vmulq_f64(_Q0, v15);
  _D22 = v15.f64[1];
  __asm { FMLA            D21, D22, V0.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v20 * v108;
  _Q23 = (int8x16_t)vmulq_f64(_Q0, v18);
  _D24 = v18.f64[1];
  __asm { FMLA            D23, D24, V0.D[1] }
  _D24 = _Q0.f64[1];
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + v20 * *(double *)v17.i64;
  __asm { FMLA            D26, D24, V0.D[1] }
  v32.f64[0] = _D26 + v20 * v20;
  v33 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v18.f64[0]), v24, v18, 1), _Q3, *(double *)v17.i64), (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V26.2D, #-1.0 }
  *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v32, _Q26));
  v32.f64[1] = NAN;
  v35 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v15.f64[0]), v24, v15, 1), _Q3, v108), (float64x2_t)xmmword_239EC6820)), v32), vabsq_f64((float64x2_t)vextq_s8(v33, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, (int64x2_t)v33)), vabsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, _Q0.f64[0]), v24, _Q0, 1), _Q3, v20)))));
  v36 = -*(double *)v17.i64;
  if (v35 > 0.0001
    || (v37.f64[0] = v15.f64[0],
        *(_QWORD *)&v37.f64[1] = v16,
        *(_QWORD *)&v38.f64[0] = _Q2.i64[0],
        v38.f64[1] = _Q0.f64[0],
        v39.f64[0] = v19.f64[0],
        v39.f64[1] = v18.f64[0],
        v40 = vmulq_f64(v37, vmlaq_n_f64(vmulq_n_f64(v38, v36), v39, v20)),
        fabs(v108 * (*(double *)_Q2.i64 * v18.f64[0] - v19.f64[0] * _Q0.f64[0])+ vsubq_f64(v40, (float64x2_t)vdupq_laneq_s64((int64x2_t)v40, 1)).f64[0]+ -1.0) > 0.0001))
  {
    if (v35 > 0.1
      || (*(_QWORD *)&v15.f64[1] = v16,
          *(_QWORD *)&v44.f64[0] = _Q2.i64[0],
          v44.f64[1] = _Q0.f64[0],
          v45.f64[0] = v19.f64[0],
          v45.f64[1] = v18.f64[0],
          v46 = vmulq_f64(v15, vmlaq_n_f64(vmulq_n_f64(v44, v36), v45, v20)),
          fabs(v108 * (*(double *)_Q2.i64 * v18.f64[0] - v19.f64[0] * _Q0.f64[0])+ vsubq_f64(v46, (float64x2_t)vdupq_laneq_s64((int64x2_t)v46, 1)).f64[0]+ -1.0) > 0.1))
    {
      sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239516070((float64x2_t *)&v107);
    _Q3.f64[0] = v108;
    v43 = v110;
    v23 = (float64x2_t)vzip1q_s64(v107, v109);
    _Q2.i64[0] = *(_QWORD *)&v111.f64[1];
    v42 = v109.u64[1];
    *(_QWORD *)&v24.f64[0] = v107.i64[1];
    v20 = v112;
    v41 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    if ((v4 & 0x80000000) != 0)
      goto LABEL_27;
    goto LABEL_12;
  }
  v41 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  v42 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v43 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
  if ((v4 & 0x80000000) == 0)
  {
LABEL_12:
    *(_QWORD *)&v19.f64[0] = v5[28];
    _Q18 = *((float64x2_t *)v5 + 13);
    _Q19 = vmulq_f64(_Q18, _Q18);
    _D20 = v5[27];
    __asm { FMLA            D19, D20, V18.D[1] }
    _Q19.f64[0] = 1.0 / sqrt(_Q19.f64[0] + v19.f64[0] * v19.f64[0]);
    *(_QWORD *)&v50 = *(_OWORD *)&vmulq_f64(v19, _Q19);
    *(_QWORD *)&_Q3.f64[1] = v43;
    _Q7 = vmulq_n_f64(_Q18, _Q19.f64[0]);
    *(_QWORD *)&v23.f64[1] = v41;
    *(_QWORD *)&v24.f64[1] = v42;
    _Q5 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, _Q7.f64[0]), v24, _Q7, 1), _Q3, v50);
    __asm { FMLA            D3, D2, V7.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v20, v50);
    _Q2.i64[0] = _Q5.i64[1];
    __asm { FMLA            D1, D2, V5.D[1] }
    *(double *)_Q2.i64 = 1.0 / sqrt(_D1 + _Q3.f64[0] * _Q3.f64[0]);
    v101 = _Q3;
    v104 = (float64x2_t)_Q5;
    v99 = (float64x2_t)_Q2;
    v54 = 0.0;
    if (acos(_Q3.f64[0] * *(double *)_Q2.i64 * 0.0- (*(double *)vextq_s8(_Q5, _Q5, 8uLL).i64 * *(double *)_Q2.i64- *(double *)_Q2.i64 * *(double *)_Q5.i64 * 0.0))* 180.0/ 3.14159265 >= 120.0)
    {
      v55 = vmulq_f64(v101, v99);
      v56 = vmulq_n_f64(v104, v99.f64[0]);
      v57 = *(double *)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).i64;
      v56.f64[1] = v57;
      _Q3 = vmulq_f64(v56, (float64x2_t)xmmword_239EC68D0);
      *(_QWORD *)&v59.f64[0] = *(_OWORD *)&vnegq_f64(v55);
      v60 = (int64x2_t)vmulq_f64(v56, (float64x2_t)0);
      *(_QWORD *)&v59.f64[1] = v60.i64[0];
      _Q5 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)vmulq_f64(v55, (float64x2_t)0), 8uLL), v59);
      _D4 = _Q5.f64[1];
      v102 = vsubq_f64(_Q3, (float64x2_t)vdupq_laneq_s64(v60, 1));
      v105 = _Q5;
      __asm { FMLA            D3, D4, V5.D[1] }
      v63 = sqrt(vmlad_n_f64(_Q3.f64[0], v102.f64[0], v102.f64[0]));
      v64.n128_f64[0] = atan2(v63, *(double *)v60.i64 - v57 + v55.f64[0] * 0.0);
      v65 = fabs(v64.n128_f64[0] * 180.0 / 3.14159265);
      v66 = 1.0;
      if (v65 >= 0.1)
      {
        if (v65 <= 179.9)
        {
          _Q3 = v105;
          v64.n128_f64[0] = v64.n128_f64[0] * (1.0 / v63);
          *(_QWORD *)&v74 = *(_OWORD *)&vmulq_f64(v102, (float64x2_t)v64);
          *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
          _Q17 = vmulq_n_f64(_Q3, v64.n128_f64[0]);
          _D9 = _Q17.f64[1];
          __asm { FMLA            D3, D9, V17.D[1] }
          v77 = vmlad_n_f64(_Q3.f64[0], v74, v74);
          if (v77 >= 0.0000002635)
          {
            v80 = sqrt(v77);
            v103 = _Q17.f64[0];
            v106 = v74;
            v100 = v77;
            v81 = __sincos_stret(v80);
            cosval = v81.__cosval;
            _Q17.f64[0] = v103;
            v74 = v106;
            v78 = v81.__sinval / v80;
            v64.n128_f64[0] = 1.0 / v100 * (1.0 - v81.__cosval);
          }
          else
          {
            v64.n128_f64[0] = 0.5 - v77 * (v77 / -720.0 + 0.0416666667);
            v78 = 1.0 - v77 * (0.166666667 - v77 * (v77 / -5040.0 + 0.00833333333));
            cosval = 1.0 - v77 * v64.n128_f64[0];
          }
          v82 = _Q17.f64[0] * v64.n128_f64[0];
          v83 = _D9 * v64.n128_f64[0];
          v84 = v74 * v64.n128_f64[0];
          v66 = cosval + _Q17.f64[0] * v64.n128_f64[0] * _Q17.f64[0];
          v64.n128_f64[0] = cosval + _D9 * v64.n128_f64[0] * _D9;
          v72 = cosval + v84 * v74;
          v85 = _D9 * v82;
          v86 = v74 * v82;
          v87 = v74 * v83;
          v88 = _Q17.f64[0] * v78;
          v89 = _D9 * v78;
          v90 = v74 * v78;
          v68 = v85 - v74 * v78;
          v70 = v89 + v86;
          v54 = v85 + v90;
          v71 = v87 - v88;
          v67 = v86 - v89;
          v69 = v88 + v87;
        }
        else
        {
          v64.n128_u64[0] = -1.0;
          v71 = -1.2246468e-16;
          v69 = 1.2246468e-16;
          v67 = 0.0;
          v68 = 0.0;
          v70 = 0.0;
          v72 = -1.0;
        }
      }
      else
      {
        v67 = 0.0;
        v68 = 0.0;
        v64.n128_u64[0] = 1.0;
        v69 = 0.0;
        v70 = 0.0;
        v71 = 0.0;
        v72 = 1.0;
      }
      *(double *)v107.i64 = v66;
      *(double *)&v107.i64[1] = v54;
      v108 = v67;
      *(double *)v109.i64 = v68;
      v109.i64[1] = v64.n128_u64[0];
      v110 = *(_QWORD *)&v69;
      v111.f64[0] = v70;
      v111.f64[1] = v71;
      v112 = v72;
      for (i = *(_QWORD **)(a1 + 88); i; i = (_QWORD *)*i)
        v64 = sub_2396F674C((uint64_t)(i + 3), (uint64_t)&v107, (int64x2_t)v64);
      v92 = *(uint64_t **)(a1 + 48);
      if (v92)
      {
        v93 = (float64x2_t)v107;
        do
        {
          _D2 = v110;
          v95 = *((double *)v92 + 5);
          _Q7 = *(float64x2_t *)(v92 + 3);
          __asm { FMLA            D3, D2, V7.D[1] }
          v98 = _D3 + v112 * v95;
          *(float64x2_t *)(v92 + 3) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, _Q7.f64[0]), (float64x2_t)v109, _Q7, 1), v111, v95);
          *((double *)v92 + 5) = v98;
          v92 = (uint64_t *)*v92;
        }
        while (v92);
      }
      sub_239BF5E98(a1);
    }
  }
LABEL_27:
  v2 = v113;
LABEL_28:
  if (v2)
  {
    v114 = v2;
    operator delete(v2);
  }
}

void sub_239BF693C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_239BF6968(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v17;
  double v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  int64x2_t *v36;
  int64x2_t *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int64x2_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  __int128 v60;
  _BYTE *v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  unsigned int v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  long double v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  float64_t v83;
  int v84;
  BOOL v85;
  void *v86;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  double v95;
  unint64_t v96;
  double v97;
  long double v98;
  char *v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  float64_t v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  int64_t v113;
  int64_t v114;
  unint64_t v115;
  int64_t v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  _BYTE *v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _BYTE *v126;
  _QWORD *v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  __int128 v155;
  __int128 v156;
  char *v157;
  void *v158;
  int64_t v159;
  char *v160;
  char *v161;
  char *v162;
  _QWORD *v163;
  char *v164;
  char *v165;
  char v166;
  char *v167;
  char *v168;
  void *v169;
  char *v170;
  void *v171;
  void *v172;
  char *v173;
  char *v174;
  size_t v175;
  __int128 v176;
  __int128 v177;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  int64x2_t v182;
  float64x2_t v187;
  double v189;
  __n128 v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  _BOOL8 v199;
  unint64_t v201;
  int v202;
  double v204;
  double v207;
  double v208;
  double cosval;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int32x4_t v214;
  const double *v215;
  int32x4_t v216;
  const double *v217;
  const double *v218;
  const double *v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  double v227;
  unint64_t v228;
  void *v229;
  char *v230;
  int64_t v231;
  uint64_t v232;
  unint64_t v233;
  int64_t v234;
  unint64_t v235;
  _BYTE *v236;
  _QWORD *v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  _OWORD *v242;
  char *v243;
  uint64_t v244;
  __int128 v245;
  double v246;
  __double2 v247;
  float64_t v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  float64_t v254;
  double v255;
  double v256;
  _QWORD *i;
  uint64_t v258;
  float64x2_t v259;
  double v261;
  double v264;
  unint64_t *v265;
  unint64_t *v266;
  float64_t *v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  double v271;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v277;
  double v278;
  double v279;
  __n128 v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  uint64_t v289;
  int64x2_t v290;
  int64x2_t *v291;
  int64x2_t v292;
  int64x2_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  char *v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  uint64_t *v309;
  uint64_t **v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t *v313;
  int8x16_t v314;
  int8x16_t v315;
  uint64_t *v316;
  uint64_t *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  _QWORD *v321;
  char *v322;
  int64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _BYTE *v328;
  char *v329;
  unint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  _OWORD *v334;
  char *v335;
  uint64_t v336;
  __int128 v337;
  float64_t v338;
  void *v339;
  double v340;
  _QWORD *v341;
  _QWORD *v342;
  void *v343;
  double v345;
  double v348;
  double v349;
  double v350;
  double v351;
  __double2 v352;
  float64_t v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  float64_t v359;
  double v360;
  double v361;
  _QWORD *j;
  uint64_t v363;
  float64x2_t v364;
  double v366;
  double v369;
  uint64_t v370;
  char v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  unint64_t v378;
  float64x2_t v379;
  double v380;
  unint64_t v381;
  double v382;
  float64x2_t v383;
  double v384;
  double v385;
  double v386;
  char *v387;
  float64x2_t v388;
  float64_t v389;
  float64x2_t v390;
  int8x16_t v391;
  float64_t v392;
  uint64_t v394;
  float64x2_t v395;
  double v396;
  float64x2_t v397;
  float64x2_t v398;
  double v399;
  void *v400;
  char *v401;
  char *v402;
  int8x16_t v403;
  _BYTE v404[32];
  float64x2_t v405;
  double v406;
  double v407;
  void *v408;
  char *v409;
  unint64_t v410;
  void *v411;
  char *v412;
  char *v413;
  void *v414;
  unint64_t *v415;
  uint64_t v416;
  _BYTE v417[32];
  char *v418;
  unint64_t v419;
  unint64_t v420;
  __int128 v421;
  uint64_t v422;
  __int128 v423;
  float64_t v424;
  void *__p;
  _BYTE *v426;
  char *v427;
  void *v428;
  char *v429;
  char *v430;
  void *v431[6];
  float64x2_t v432;
  double v433;
  _BYTE v434[32];
  int v435;
  uint64_t v436;
  int v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  uint64_t v441;
  int v442;
  __int128 v443;
  __int128 v444;
  int v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  uint64_t v450;
  uint64_t v451;
  __int128 v452;
  __int128 v453;
  uint64_t v454;
  int v455;
  _BYTE v456[32];
  void *v457[3];
  _BYTE v458[24];
  float64x2_t v459;
  __int128 v460;
  uint64_t v461;
  void **p_p;
  char v463;
  void *v464;
  void *v465;
  uint64_t v466;
  void *__src;
  unint64_t v468;
  unint64_t v469;
  __int128 v470;
  uint64_t v471;
  __int128 v472;
  float64_t v473;
  unsigned int v474;
  unsigned int v475;
  char *v476;
  int v477;
  char v478;
  char *v479;
  int v480;
  float64x2x3_t v481;
  float64x2x3_t v482;
  float64x2x3_t v483;
  float64x2x3_t v484;

  v400 = 0;
  v401 = 0;
  v402 = 0;
  *(_OWORD *)v417 = xmmword_239F0C380;
  *(_OWORD *)&v417[16] = xmmword_239F0C390;
  v3 = a1[11];
  if (!v3)
    goto LABEL_260;
  v5 = 0;
  do
  {
    if (*(_BYTE *)(v3 + 256) == 2)
      ++v5;
    v3 = *(_QWORD *)v3;
  }
  while (v3);
  if (v5 < 6)
    goto LABEL_260;
  v6 = (unint64_t)((double)v5 * 0.08);
  if (v6 <= 6)
    v6 = 6;
  v378 = v6;
  v414 = 0;
  v415 = 0;
  v416 = 0;
  sub_2394B5624((uint64_t)a1, (uint64_t)&v414, 1);
  v411 = 0;
  v412 = 0;
  v413 = 0;
  v8 = (unint64_t *)v414;
  v7 = v415;
  v9 = (char *)v415 - (_BYTE *)v414;
  v372 = a3;
  if (v415 == v414)
  {
    v11 = 0;
  }
  else
  {
    if ((unint64_t)v9 > 0x5555555555555550)
      sub_2394189F8();
    v10 = v9 >> 3;
    v411 = operator new(24 * (v9 >> 3));
    v412 = (char *)v411;
    v413 = (char *)v411 + 24 * v10;
    do
    {
      v12 = sub_2394650AC((uint64_t)a1, *v8);
      *(_QWORD *)&_Q0.f64[0] = v12[10];
      _Q4 = *((_OWORD *)v12 + 8);
      *(_QWORD *)&v15.f64[0] = v12[22];
      *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v15);
      v16 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v12 + 10));
      *(_QWORD *)&_Q0.f64[1] = v12[14];
      v17 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v12 + 4), *((int64x2_t *)v12 + 6)), v16.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v12 + 4), *((int64x2_t *)v12 + 6)), v16, 1), _Q0, v15.f64[0]);
      _Q0.f64[0] = v16.f64[1];
      __asm { FMLA            D1, D0, V4.D[1] }
      v23 = vmlad_n_f64(_D1, *((double *)v12 + 18), v15.f64[0]);
      v24 = vextq_s8(v17, v17, 8uLL).u64[0];
      v25 = v412;
      if (v412 < v413)
      {
        *((double *)v412 + 2) = v23;
        v17.i64[1] = v24;
        *v25 = v17;
        v11 = (char *)v25 + 24;
      }
      else
      {
        v26 = v411;
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v412 - (_BYTE *)v411) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((v413 - (_BYTE *)v411) >> 3) > v28)
          v28 = 0x5555555555555556 * ((v413 - (_BYTE *)v411) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v413 - (_BYTE *)v411) >> 3) >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v28;
        if (v29)
        {
          v381 = v24;
          v386 = v23;
          v394 = v17.i64[0];
          if (v29 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v30 = (char *)operator new(24 * v29);
          v17.i64[0] = v394;
          v24 = v381;
          v23 = v386;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * ((v412 - (_BYTE *)v411) >> 3)];
        *((double *)v31 + 2) = v23;
        v17.i64[1] = v24;
        *(int8x16_t *)v31 = v17;
        v32 = &v30[24 * v27];
        if (v25 != v26)
        {
          do
          {
            v33 = *(_OWORD *)((char *)v25 - 24);
            *((_QWORD *)v32 - 1) = *((_QWORD *)v25 - 1);
            *(_OWORD *)(v32 - 24) = v33;
            v32 -= 24;
            v25 = (_OWORD *)((char *)v25 - 24);
          }
          while (v25 != v26);
          v25 = v411;
        }
        v11 = v31 + 24;
        v411 = v32;
        v412 = v31 + 24;
        v413 = &v30[24 * v29];
        if (v25)
          operator delete(v25);
      }
      v412 = v11;
      ++v8;
    }
    while (v8 != v7);
    v9 = (uint64_t)v411;
  }
  v408 = 0;
  v409 = 0;
  v410 = 0;
  v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v9] >> 3);
  v35 = 0;
  if (v34 < 3)
  {
    v39 = 0;
LABEL_237:
    v166 = 0;
    goto LABEL_238;
  }
  v429 = 0;
  v428 = 0;
  v430 = 0;
  if (v34 >> 61)
    sub_2394189F8();
  v36 = (int64x2_t *)operator new(0x5555555555555558 * ((uint64_t)&v11[-v9] >> 3));
  v428 = v36;
  v430 = &v36->i8[8 * v34];
  bzero(v36, 8 * v34);
  v37 = (int64x2_t *)((char *)v36 + 8 * v34);
  v429 = (char *)v37;
  if (8 * v34 - 8 >= 0x18)
  {
    v40 = ((8 * v34 - 8) >> 3) + 1;
    v38 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    v41 = (int64x2_t)xmmword_239EC6860;
    v42 = v36 + 1;
    v43 = vdupq_n_s64(2uLL);
    v44 = vdupq_n_s64(4uLL);
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42[-1] = v41;
      *v42 = vaddq_s64(v41, v43);
      v41 = vaddq_s64(v41, v44);
      v42 += 2;
      v45 -= 4;
    }
    while (v45);
    if (v40 == v38)
      goto LABEL_42;
    v36 = (int64x2_t *)((char *)v36 + 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL));
  }
  else
  {
    v38 = 0;
  }
  do
  {
    v36->i64[0] = v38;
    v36 = (int64x2_t *)((char *)v36 + 8);
    ++v38;
  }
  while (v36 != v37);
LABEL_42:
  v374 = 0;
  v376 = 0;
  v373 = 0;
  do
  {
    v46 = v429;
    v47 = v428;
    v48 = (v429 - (_BYTE *)v428) >> 3;
    if (v48 < v378)
      goto LABEL_231;
    __p = 0;
    v426 = 0;
    v427 = 0;
    if (v429 != v428)
    {
      if ((unint64_t)(v429 - (_BYTE *)v428) > 0x5555555555555550)
        sub_2394189F8();
      v49 = (char *)operator new(24 * v48);
      __p = v49;
      v426 = v49;
      v427 = &v49[24 * v48];
      while (1)
      {
        v51 = (char *)v411 + 24 * *v47;
        if (v49 >= v427)
          break;
        v50 = *(_OWORD *)v51;
        *((_QWORD *)v49 + 2) = *((_QWORD *)v51 + 2);
        *(_OWORD *)v49 = v50;
        v49 += 24;
LABEL_49:
        v426 = v49;
        if (++v47 == (_QWORD *)v46)
        {
          v61 = __p;
          goto LABEL_70;
        }
      }
      v52 = (char *)__p;
      v53 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)__p) >> 3);
      v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_2394189F8();
      if (0x5555555555555556 * ((v427 - (_BYTE *)__p) >> 3) > v54)
        v54 = 0x5555555555555556 * ((v427 - (_BYTE *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v427 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v54;
      if (v55)
      {
        if (v55 > 0xAAAAAAAAAAAAAAALL)
          sub_239418A80();
        v56 = (char *)operator new(24 * v55);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[24 * v53];
      v58 = *(_OWORD *)v51;
      *((_QWORD *)v57 + 2) = *((_QWORD *)v51 + 2);
      *(_OWORD *)v57 = v58;
      v59 = v57 + 24;
      if (v49 == v52)
      {
        __p = &v56[24 * v53];
        v426 = v57 + 24;
        v427 = &v56[24 * v55];
      }
      else
      {
        do
        {
          v60 = *(_OWORD *)(v49 - 24);
          *((_QWORD *)v57 - 1) = *((_QWORD *)v49 - 1);
          *(_OWORD *)(v57 - 24) = v60;
          v57 -= 24;
          v49 -= 24;
        }
        while (v49 != v52);
        v49 = (char *)__p;
        __p = v57;
        v426 = v59;
        v427 = &v56[24 * v55];
        if (!v49)
          goto LABEL_67;
      }
      operator delete(v49);
LABEL_67:
      v49 = v59;
      goto LABEL_49;
    }
    v61 = 0;
    v49 = 0;
LABEL_70:
    v418 = 0;
    v419 = 0;
    v420 = 0;
    if (0xAAAAAAAAAAAAAAABLL * ((v49 - v61) >> 3) < 3)
    {
      v62 = 0;
      goto LABEL_193;
    }
    v459.f64[1] = 0.0;
    v457[0] = &off_250AFAF48;
    v460 = xmmword_239F0C3A0;
    v461 = 0x403E000000000000;
    p_p = &__p;
    *(_OWORD *)v431 = *(_OWORD *)&v417[8];
    LODWORD(v431[2]) = 3;
    v431[3] = (void *)30;
    LODWORD(v470) = 0;
    sub_239454CD8((int *)&v470, (uint64_t)&v431[4]);
    v63 = (*((unint64_t (**)(uint64_t))v457[0] + 2))((uint64_t)v457);
    v475 = v63;
    v64 = (*((uint64_t (__cdecl **)())v457[0] + 3))();
    v68 = v64;
    v474 = v64;
    v69 = v431[1];
    if (*(double *)&v431[1] >= 1.0)
    {
      LODWORD(v70) = 1;
      if (v63 >= v64)
        goto LABEL_78;
LABEL_423:
      v370 = 171;
LABEL_425:
      sub_239A444D4((uint64_t)"unknown file", v370, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    LODWORD(v70) = 1;
    if (*(double *)&v431[1] > 0.0)
    {
      *(double *)&v71 = log(1.0 - *(double *)v431);
      v72 = *(double *)&v71;
      LODWORD(v71) = v431[2];
      v73 = pow(*(long double *)&v69, (double)v71);
      v65.f64[0] = v72 / log(1.0 - v73);
      v70 = vcvtpd_u64_f64(v65.f64[0]);
      if (v70 == -1)
      {
        v370 = 120;
        goto LABEL_425;
      }
    }
    if (v63 < v68)
      goto LABEL_423;
LABEL_78:
    v468 = 0;
    __src = 0;
    v469 = 0;
    if (v63)
    {
      v74 = ((unint64_t)v63 - 1) >> 6;
      v75 = operator new(8 * (v74 + 1));
      v76 = v75;
      v469 = v74 + 1;
      __src = v75;
      v468 = v63;
      if (v63 >= 0x41)
        v77 = ((unint64_t)v63 - 1) >> 6;
      else
        v77 = 0;
      v75[v77] = 0;
      if (v63 >= 0x40)
        bzero(v75, 8 * ((unint64_t)v63 >> 6));
      if ((v63 & 0x3F) != 0)
        v76[(unint64_t)v63 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v63 & 0x3F));
    }
    v78 = v70;
    if ((_DWORD)v70)
    {
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0.0;
      v84 = -2147483647;
      while (1)
      {
        if (v474 > v475)
        {
          sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (v475)
        {
          if ((double)v475 * 0.5 >= (double)v474)
            sub_239455384((uint64_t)&v431[4], &v475, (int *)&v474, (int32x4_t **)&v464);
          else
            sub_2394551BC((uint64_t)&v431[4], &v475, &v474, (int32x4_t **)&v464);
        }
        else
        {
          v465 = 0;
          v464 = 0;
          v466 = 0;
        }
        if ((*((unsigned int (**)(uint64_t, uint64_t *, float64x2_t, double, float64x2_t))v457[0] + 5))((uint64_t)v457, (uint64_t *)&v464, v65, v66, v67))
        {
          break;
        }
        v85 = 1;
        v86 = v464;
        if (v464)
          goto LABEL_89;
LABEL_90:
        if (v78 - 1 == (_QWORD)v82++ || !v85)
        {
          v100 = v418;
          goto LABEL_129;
        }
      }
      v88 = (*((uint64_t (**)(uint64_t, uint64_t *))v457[0] + 4))((uint64_t)v457, (uint64_t *)&__src);
      if (v88 <= v84)
      {
        v92 = v468;
      }
      else
      {
        v89 = (*((uint64_t (**)(uint64_t))v457[0] + 6))((uint64_t)v457);
        v470 = *(_OWORD *)v89;
        v471 = *(_QWORD *)(v89 + 16);
        v472 = *(_OWORD *)(v89 + 24);
        v473 = *(double *)(v89 + 40);
        v83 = *(double *)(v89 + 48);
        v90 = v468;
        if (v468)
        {
          if (v468 <= v81 << 6)
          {
            v91 = v468 - 1;
          }
          else
          {
            if (v80)
            {
              operator delete(v80);
              v418 = 0;
              v419 = 0;
              v420 = 0;
              v90 = v468;
            }
            if ((v90 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v91 = v90 - 1;
            v81 = ((v90 - 1) >> 6) + 1;
            v80 = (char *)operator new(8 * v81);
            v418 = v80;
            v419 = 0;
            v420 = v81;
          }
          memmove(v80, __src, ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v79 = v468;
        }
        else
        {
          v79 = 0;
        }
        v419 = v79;
        v92 = v79;
        v84 = v88;
      }
      v463 = 1;
      v479 = (char *)__src;
      v480 = 0;
      v476 = (char *)__src + 8 * (v92 >> 6);
      v477 = v92 & 0x3F;
      v93 = sub_239458E50((uint64_t)&v479, (uint64_t)&v476, &v463);
      v94 = v78;
      if (v93)
      {
        v65.f64[0] = (double)v93;
        LODWORD(v66) = v475;
        v66 = (double)*(unint64_t *)&v66;
        v95 = (double)v93 / v66;
        if (v95 >= 1.0)
        {
          v94 = 1;
        }
        else
        {
          v94 = 1;
          if (v95 > 0.0)
          {
            *(double *)&v96 = log(1.0 - *(double *)v431);
            v97 = *(double *)&v96 * 3.0;
            LODWORD(v96) = v431[2];
            v98 = pow(v95, (double)v96);
            v65.f64[0] = v97 / log(1.0 - v98);
            v94 = vcvtpd_u64_f64(v65.f64[0]);
            if (v94 == -1)
            {
              sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
          }
        }
      }
      v85 = v94 > (unint64_t)v82 || v431[3] > v82;
      v86 = v464;
      if (!v464)
        goto LABEL_90;
LABEL_89:
      v465 = v86;
      operator delete(v86);
      goto LABEL_90;
    }
    v79 = 0;
    v100 = 0;
    v83 = 0.0;
LABEL_129:
    *(_OWORD *)&v457[1] = v470;
    *(_QWORD *)v458 = v471;
    *(_OWORD *)&v458[8] = v472;
    v459.f64[0] = v473;
    v459.f64[1] = v83;
    v478 = 1;
    v464 = v100;
    LODWORD(v465) = 0;
    v479 = &v100[8 * (v79 >> 6)];
    v480 = v79 & 0x3F;
    v101 = sub_239458E50((uint64_t)&v464, (uint64_t)&v479, &v478);
    if (__src)
      operator delete(__src);
    v102 = 0xAAAAAAAAAAAAAAABLL * ((v426 - (_BYTE *)__p) >> 3);
    LODWORD(v103) = v378;
    if (v378 >= v102)
      v103 = 0xAAAAAAAAAAAAAAABLL * ((v426 - (_BYTE *)__p) >> 3);
    if (v101 < (int)v103 || (double)v101 / (double)v102 < *(double *)&v417[24])
    {
      sub_239911CF8((uint64_t)v456);
      v62 = 0;
      if (!v100)
        goto LABEL_193;
LABEL_192:
      operator delete(v100);
      goto LABEL_193;
    }
    v421 = *(_OWORD *)&v457[1];
    v422 = *(_QWORD *)v458;
    v423 = *(_OWORD *)&v458[8];
    v104 = v459.f64[1];
    v424 = v459.f64[0];
    sub_239911CF8((uint64_t)v456);
    memset(v431, 0, 24);
    memset(v457, 0, sizeof(v457));
    v105 = v429;
    v106 = v428;
    if (v429 != v428)
    {
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      while (((*(_QWORD *)&v418[(v110 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v110) & 1) != 0)
      {
        v111 = (char *)v457[1];
        if (v457[1] < v457[2])
        {
          *(_QWORD *)v457[1] = v106[v110];
          v457[1] = v111 + 8;
        }
        else
        {
          v112 = (char *)v457[0];
          v113 = (char *)v457[1] - (char *)v457[0];
          v114 = ((char *)v457[1] - (char *)v457[0]) >> 3;
          v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) >> 61)
            goto LABEL_419;
          v387 = v108;
          v116 = (char *)v457[2] - (char *)v457[0];
          if (((char *)v457[2] - (char *)v457[0]) >> 2 > v115)
            v115 = v116 >> 2;
          if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
            v117 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v117 = v115;
          if (v117)
          {
            if (v117 >> 61)
              goto LABEL_416;
            v118 = v106;
            v119 = v105;
            v120 = operator new(8 * v117);
            v106 = v118;
          }
          else
          {
            v119 = v105;
            v120 = 0;
          }
          v127 = &v120[8 * v114];
          *v127 = v106[v110];
          v128 = v127 + 1;
          if (v111 != v112)
          {
            v129 = v111 - 8 - v112;
            if (v129 < 0x58)
              goto LABEL_437;
            if ((unint64_t)(v111 - &v120[v113]) < 0x20)
              goto LABEL_437;
            v130 = (v129 >> 3) + 1;
            v131 = &v120[8 * v114 - 16];
            v132 = v111 - 16;
            v133 = v130 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v134 = *(_OWORD *)v132;
              *(v131 - 1) = *((_OWORD *)v132 - 1);
              *v131 = v134;
              v131 -= 2;
              v132 -= 32;
              v133 -= 4;
            }
            while (v133);
            v127 -= v130 & 0x3FFFFFFFFFFFFFFCLL;
            v111 -= 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
            if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_437:
              do
              {
                v135 = *((_QWORD *)v111 - 1);
                v111 -= 8;
                *--v127 = v135;
              }
              while (v111 != v112);
            }
          }
          v457[0] = v127;
          v457[2] = &v120[8 * v117];
          if (v112)
          {
            v136 = v106;
            operator delete(v112);
            v106 = v136;
          }
          v105 = v119;
          v108 = v387;
          v457[1] = v128;
        }
LABEL_138:
        if (++v110 >= (v105 - (char *)v106) >> 3)
          goto LABEL_196;
      }
      if (v109 < v108)
      {
        *(_QWORD *)v109 = v106[v110];
        v121 = v109 + 8;
LABEL_180:
        v431[1] = v121;
        v109 = (char *)v121;
        goto LABEL_138;
      }
      v122 = (v109 - v107) >> 3;
      v123 = v122 + 1;
      if ((unint64_t)(v122 + 1) >> 61)
LABEL_419:
        sub_2394189F8();
      if ((v108 - v107) >> 2 > v123)
        v123 = (v108 - v107) >> 2;
      if ((unint64_t)(v108 - v107) >= 0x7FFFFFFFFFFFFFF8)
        v124 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v124 = v123;
      v377 = v105;
      if (v124)
      {
        if (v124 >> 61)
LABEL_416:
          sub_239418A80();
        v125 = v106;
        v126 = operator new(8 * v124);
        v106 = v125;
      }
      else
      {
        v126 = 0;
      }
      v137 = &v126[8 * v122];
      *v137 = v106[v110];
      v121 = v137 + 1;
      if (v109 != v107)
      {
        v138 = v109 - 8 - v107;
        if (v138 >= 0x168)
        {
          if (&v126[v109 - v107 - 8 - (v138 & 0xFFFFFFFFFFFFFFF8)] > &v126[v109 - v107 - 8])
          {
            v139 = v109;
          }
          else if (&v109[-(v138 & 0xFFFFFFFFFFFFFFF8) - 8] > v109 - 8)
          {
            v139 = v109;
          }
          else if ((unint64_t)(v107 - v126) >= 0x20)
          {
            v141 = (v138 >> 3) + 1;
            v139 = &v109[-8 * (v141 & 0x3FFFFFFFFFFFFFFCLL)];
            v142 = &v126[8 * v122 - 16];
            v143 = v109 - 16;
            v144 = v141 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v145 = *(_OWORD *)v143;
              *(v142 - 1) = *((_OWORD *)v143 - 1);
              *v142 = v145;
              v142 -= 2;
              v143 -= 32;
              v144 -= 4;
            }
            while (v144);
            v137 -= v141 & 0x3FFFFFFFFFFFFFFCLL;
            if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_177;
          }
          else
          {
            v139 = v109;
          }
        }
        else
        {
          v139 = v109;
        }
        do
        {
          v140 = *((_QWORD *)v139 - 1);
          v139 -= 8;
          *--v137 = v140;
        }
        while (v139 != v107);
      }
LABEL_177:
      v108 = &v126[8 * v124];
      v431[0] = v137;
      v431[1] = v121;
      v431[2] = v108;
      if (v107)
      {
        operator delete(v107);
        v105 = v429;
        v106 = v428;
        v107 = (char *)v137;
      }
      else
      {
        v107 = (char *)v137;
        v105 = v377;
      }
      goto LABEL_180;
    }
    v109 = 0;
    v108 = 0;
    v106 = v429;
LABEL_196:
    if (v106)
    {
      v429 = (char *)v106;
      operator delete(v106);
      v108 = (char *)v431[2];
      v109 = (char *)v431[1];
    }
    v428 = v431[0];
    v429 = v109;
    v430 = v108;
    memset(v431, 0, 24);
    v146 = v376;
    if (v376 >= v373)
    {
      v149 = 0x6DB6DB6DB6DB6DB7 * ((v376 - v374) >> 3) + 1;
      if (v149 > 0x492492492492492)
        sub_2394189F8();
      if (0xDB6DB6DB6DB6DB6ELL * ((v373 - v374) >> 3) > v149)
        v149 = 0xDB6DB6DB6DB6DB6ELL * ((v373 - v374) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v373 - v374) >> 3)) >= 0x249249249249249)
        v150 = 0x492492492492492;
      else
        v150 = v149;
      if (v150)
      {
        if (v150 > 0x492492492492492)
          sub_239418A80();
        v151 = (char *)operator new(56 * v150);
      }
      else
      {
        v151 = 0;
      }
      v152 = &v151[8 * ((v376 - v374) >> 3)];
      *(_OWORD *)v152 = v421;
      *((_QWORD *)v152 + 2) = v422;
      *(_OWORD *)(v152 + 24) = v423;
      *((float64_t *)v152 + 5) = v424;
      *((float64_t *)v152 + 6) = v104;
      if (v376 == v374)
      {
        v154 = &v151[8 * ((v376 - v374) >> 3)];
      }
      else
      {
        v153 = &v151[8 * ((v376 - v374) >> 3)];
        do
        {
          v154 = v153 - 56;
          v155 = *(_OWORD *)(v146 - 56);
          *((_QWORD *)v153 - 5) = *((_QWORD *)v146 - 5);
          *(_OWORD *)(v153 - 56) = v155;
          v156 = *((_OWORD *)v146 - 2);
          *((_QWORD *)v153 - 2) = *((_QWORD *)v146 - 2);
          *((_OWORD *)v153 - 2) = v156;
          *((_QWORD *)v153 - 1) = *((_QWORD *)v146 - 1);
          v146 -= 56;
          v153 -= 56;
        }
        while (v146 != v374);
      }
      v373 = &v151[56 * v150];
      v376 = v152 + 56;
      if (v374)
        operator delete(v374);
      v374 = v154;
    }
    else
    {
      v147 = v421;
      *((_QWORD *)v376 + 2) = v422;
      *(_OWORD *)v376 = v147;
      v148 = v423;
      *((float64_t *)v376 + 5) = v424;
      *(_OWORD *)(v376 + 24) = v148;
      *((float64_t *)v376 + 6) = v104;
      v376 += 56;
    }
    v157 = v409;
    if ((unint64_t)v409 >= v410)
    {
      v158 = v457[0];
      v409 = sub_239BF0310((char **)&v408, v457[0], (uint64_t)v457[1]);
      if (!v158)
        goto LABEL_226;
LABEL_225:
      operator delete(v158);
      goto LABEL_226;
    }
    *(_QWORD *)v409 = 0;
    *((_QWORD *)v157 + 1) = 0;
    *((_QWORD *)v157 + 2) = 0;
    v158 = v457[0];
    v159 = (char *)v457[1] - (char *)v457[0];
    if (v457[1] != v457[0])
    {
      if (v159 < 0)
        sub_2394189F8();
      v160 = (char *)operator new((char *)v457[1] - (char *)v457[0]);
      *(_QWORD *)v157 = v160;
      *((_QWORD *)v157 + 1) = v160;
      v161 = &v160[8 * (v159 >> 3)];
      *((_QWORD *)v157 + 2) = v161;
      memcpy(v160, v158, v159);
      *((_QWORD *)v157 + 1) = v161;
    }
    v409 = v157 + 24;
    if (v158)
      goto LABEL_225;
LABEL_226:
    if (v431[0])
      operator delete(v431[0]);
    v62 = 1;
    v100 = v418;
    if (v418)
      goto LABEL_192;
LABEL_193:
    if (__p)
    {
      v426 = __p;
      operator delete(__p);
    }
  }
  while ((v62 & 1) != 0);
  v47 = v428;
LABEL_231:
  if (v47)
    operator delete(v47);
  v39 = v374;
  if (v374 == v376)
    goto LABEL_237;
  memset(v457, 0, sizeof(v457));
  v162 = (char *)v408;
  if (v376 - v374 == 56)
  {
    v163 = v414;
    if ((double)(unint64_t)((uint64_t)(*((_QWORD *)v408 + 1) - *(_QWORD *)v408) >> 3)
       / (double)(unint64_t)(((char *)v415 - (_BYTE *)v414) >> 3) < 0.6)
    {
      v166 = 0;
      v35 = 0;
      goto LABEL_238;
    }
    v164 = (char *)operator new(8uLL);
    *(_QWORD *)v164 = 0;
    v165 = v164 + 8;
    v457[2] = v164 + 8;
    v457[0] = v164;
    v457[1] = v164 + 8;
    goto LABEL_341;
  }
  if (v408 == v409)
  {
    v202 = 0;
  }
  else
  {
    v201 = v409 - (_BYTE *)v408 - 24;
    if (v201 >= 0xC0)
    {
      v210 = v201 / 0x18 + 1;
      v211 = v210 & 7;
      if ((v210 & 7) == 0)
        v211 = 8;
      v212 = v210 - v211;
      v213 = 24 * v212;
      v214 = 0uLL;
      v215 = (const double *)v408;
      v216 = 0uLL;
      do
      {
        v217 = v215 + 12;
        v218 = v215;
        v481 = vld3q_f64(v218);
        v218 += 6;
        v482 = vld3q_f64(v218);
        v483 = vld3q_f64(v217);
        v219 = v215 + 18;
        v484 = vld3q_f64(v219);
        v214 = vaddq_s32(v214, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v481.val[1], (int64x2_t)v481.val[0]), 3uLL), vsubq_s64((int64x2_t)v482.val[1], (int64x2_t)v482.val[0]), 3uLL));
        v216 = vaddq_s32(v216, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v483.val[1], (int64x2_t)v483.val[0]), 3uLL), vsubq_s64((int64x2_t)v484.val[1], (int64x2_t)v484.val[0]), 3uLL));
        v215 += 24;
        v212 -= 8;
      }
      while (v212);
      v162 = (char *)v408 + v213;
      v202 = vaddvq_s32(vaddq_s32(v216, v214));
    }
    else
    {
      v202 = 0;
    }
    do
    {
      v220 = *(_QWORD *)v162;
      v221 = *((_QWORD *)v162 + 1);
      v162 += 24;
      v202 += (unint64_t)(v221 - v220) >> 3;
    }
    while (v162 != v409);
  }
  v222 = (double)(unint64_t)(((char *)v415 - (_BYTE *)v414) >> 3);
  if ((double)(unint64_t)v202 / v222 <= 0.6)
  {
    v165 = 0;
    v226 = 0;
    v227 = v222 * 0.2;
    if ((unint64_t)v227 >= 0x1E)
      v228 = 30;
    else
      v228 = (unint64_t)v227;
    while (1)
    {
      if (v228 > (uint64_t)(*((_QWORD *)v408 + 3 * v226 + 1) - *((_QWORD *)v408 + 3 * v226)) >> 3)
        goto LABEL_288;
      if (v165 >= v457[2])
        break;
      *(_QWORD *)v165 = v226;
      v229 = v165 + 8;
LABEL_287:
      v457[1] = v229;
      v165 = (char *)v229;
LABEL_288:
      if (++v226 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v376 - v374) >> 3)))
      {
        v164 = (char *)v457[0];
        v39 = v374;
        goto LABEL_339;
      }
    }
    v230 = (char *)v457[0];
    v231 = v165 - (char *)v457[0];
    v232 = (v165 - (char *)v457[0]) >> 3;
    v233 = v232 + 1;
    if ((unint64_t)(v232 + 1) >> 61)
      sub_2394189F8();
    v234 = (char *)v457[2] - (char *)v457[0];
    if (((char *)v457[2] - (char *)v457[0]) >> 2 > v233)
      v233 = v234 >> 2;
    if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8)
      v235 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v235 = v233;
    if (v235)
    {
      if (v235 >> 61)
        sub_239418A80();
      v236 = operator new(8 * v235);
    }
    else
    {
      v236 = 0;
    }
    v237 = &v236[8 * v232];
    *v237 = v226;
    v229 = v237 + 1;
    if (v165 == v230)
      goto LABEL_305;
    v238 = v165 - 8 - v230;
    if (v238 < 0x168)
    {
      v239 = v165;
      goto LABEL_304;
    }
    if (&v236[v231 - 8 - (v238 & 0xFFFFFFFFFFFFFFF8)] > &v236[v231 - 8])
    {
      v239 = v165;
    }
    else
    {
      if (&v165[-(v238 & 0xFFFFFFFFFFFFFFF8) - 8] <= v165 - 8)
      {
        if ((unint64_t)(v165 - v236 - v231) < 0x20)
        {
          v239 = v165;
          goto LABEL_304;
        }
        v241 = (v238 >> 3) + 1;
        v239 = &v165[-8 * (v241 & 0x3FFFFFFFFFFFFFFCLL)];
        v242 = &v236[8 * v232 - 16];
        v243 = v165 - 16;
        v244 = v241 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v245 = *(_OWORD *)v243;
          *(v242 - 1) = *((_OWORD *)v243 - 1);
          *v242 = v245;
          v242 -= 2;
          v243 -= 32;
          v244 -= 4;
        }
        while (v244);
        v237 -= v241 & 0x3FFFFFFFFFFFFFFCLL;
        if (v241 != (v241 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_304;
LABEL_305:
        v457[0] = v237;
        v457[1] = v229;
        v457[2] = &v236[8 * v235];
        if (v230)
          operator delete(v230);
        goto LABEL_287;
      }
      v239 = v165;
    }
    do
    {
LABEL_304:
      v240 = *((_QWORD *)v239 - 1);
      v239 -= 8;
      *--v237 = v240;
    }
    while (v239 != v230);
    goto LABEL_305;
  }
  sub_23946DAD4((uint64_t)v457, 0x6DB6DB6DB6DB6DB7 * ((v376 - v374) >> 3));
  v164 = (char *)v457[0];
  v165 = (char *)v457[1];
  if (v457[0] == v457[1])
  {
    v166 = 0;
    v35 = 0;
    goto LABEL_392;
  }
  v223 = (char *)v457[1] - (char *)v457[0] - 8;
  if (v223 >= 0x18)
  {
    v289 = (v223 >> 3) + 1;
    v224 = v289 & 0x3FFFFFFFFFFFFFFCLL;
    v290 = (int64x2_t)xmmword_239EC6860;
    v291 = (int64x2_t *)((char *)v457[0] + 16);
    v292 = vdupq_n_s64(2uLL);
    v293 = vdupq_n_s64(4uLL);
    v294 = v289 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v291[-1] = v290;
      *v291 = vaddq_s64(v290, v292);
      v290 = vaddq_s64(v290, v293);
      v291 += 2;
      v294 -= 4;
    }
    while (v294);
    if (v289 == v224)
      goto LABEL_339;
    v225 = &v164[8 * (v289 & 0x3FFFFFFFFFFFFFFCLL)];
  }
  else
  {
    v224 = 0;
    v225 = (char *)v457[0];
  }
  do
  {
    *(_QWORD *)v225 = v224;
    v225 += 8;
    ++v224;
  }
  while (v225 != v165);
LABEL_339:
  if (v164 != v165)
  {
    v162 = (char *)v408;
    v163 = v414;
LABEL_341:
    v295 = 0;
    v296 = 0;
    v297 = (v165 - v164) >> 3;
    if (v297 <= 1)
      v297 = 1;
    v298 = -1;
    do
    {
      v299 = &v162[24 * *(_QWORD *)&v164[8 * v295]];
      v300 = *(uint64_t **)v299;
      v301 = (uint64_t *)*((_QWORD *)v299 + 1);
      while (v300 != v301)
      {
        v302 = *v300++;
        v303 = v163[v302];
        if (v303 < v298)
        {
          v296 = *(_QWORD *)&v164[8 * v295];
          v298 = v303;
        }
      }
      ++v295;
    }
    while (v295 != v297);
    v304 = &v39[56 * v296];
    v305 = *((_QWORD *)v304 + 6);
    v306 = &v162[24 * v296];
    _D1 = *((_QWORD *)v304 + 4);
    v384 = *((double *)v304 + 5);
    v391 = *(int8x16_t *)v304;
    __asm { FMLA            D0, D1, V3.D[1] }
    v380 = *((double *)v304 + 2);
    v398 = *(float64x2_t *)(v304 + 24);
    v405 = v398;
    v406 = v384;
    v407 = -(_D0 + v380 * v384);
    v432 = 0u;
    memset(v431, 0, sizeof(v431));
    memset(v434, 0, sizeof(v434));
    LODWORD(v433) = 1065353216;
    v435 = 1065353216;
    v436 = 0;
    v437 = 0;
    v438 = 0u;
    v439 = 0u;
    v440 = 0u;
    v441 = 0;
    v443 = 0u;
    v444 = 0u;
    v442 = 1065353216;
    v445 = 1065353216;
    v449 = 0u;
    v448 = 0u;
    v447 = 0u;
    v446 = 0u;
    v450 = 0;
    v451 = 0x3FF0000000000000;
    v452 = 0u;
    v453 = 0u;
    v454 = 0;
    v455 = -1;
    v309 = *(uint64_t **)v306;
    v310 = (uint64_t **)(v306 + 8);
    v311 = (uint64_t *)*((_QWORD *)v306 + 1);
    v375 = v39;
    if (*(uint64_t **)v306 != v311)
    {
      do
      {
        v312 = *((_QWORD *)v414 + *v309);
        v313 = sub_239470FCC((uint64_t)a1, v312);
        sub_2395D7584((uint64_t)v431, v312, (char *)v313);
        ++v309;
      }
      while (v309 != v311);
    }
    v166 = sub_239BF0B88((uint64_t)v431, (uint64_t)&v405);
    v35 = 0;
    if ((v166 & 1) != 0)
    {
      v314 = v391;
      v315 = (int8x16_t)v398;
      *(double *)v404 = v380;
      v314.i64[1] = vextq_s8(v314, v314, 8uLL).u64[0];
      v403 = v314;
      *(double *)&v404[24] = v384;
      v315.i64[1] = vextq_s8(v315, v315, 8uLL).u64[0];
      *(int8x16_t *)&v404[8] = v315;
      v316 = *(uint64_t **)v306;
      v317 = *v310;
      if (v316 != *v310)
      {
        v318 = v401;
        while (1)
        {
          v320 = *v316;
          v321 = v414;
          if (v318 >= v402)
            break;
          *(_QWORD *)v318 = *((_QWORD *)v414 + v320);
          v319 = v318 + 8;
LABEL_355:
          v401 = v319;
          ++v316;
          v318 = v319;
          if (v316 == v317)
          {
            v35 = v305;
            goto LABEL_386;
          }
        }
        v322 = (char *)v400;
        v323 = v318 - (_BYTE *)v400;
        v324 = (v318 - (_BYTE *)v400) >> 3;
        v325 = v324 + 1;
        if ((unint64_t)(v324 + 1) >> 61)
          sub_2394189F8();
        v326 = v402 - (_BYTE *)v400;
        if ((v402 - (_BYTE *)v400) >> 2 > v325)
          v325 = v326 >> 2;
        if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFF8)
          v327 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v327 = v325;
        if (v327)
        {
          if (v327 >> 61)
            sub_239418A80();
          v328 = operator new(8 * v327);
        }
        else
        {
          v328 = 0;
        }
        v329 = &v328[8 * v324];
        *(_QWORD *)v329 = v321[v320];
        v319 = v329 + 8;
        if (v318 == v322)
          goto LABEL_371;
        v330 = v318 - 8 - v322;
        if (v330 < 0x168)
        {
          v331 = v318;
          goto LABEL_370;
        }
        if (&v328[v323 - 8 - (v330 & 0xFFFFFFFFFFFFFFF8)] > &v328[v323 - 8])
        {
          v331 = v318;
        }
        else
        {
          if (&v318[-(v330 & 0xFFFFFFFFFFFFFFF8) - 8] <= v318 - 8)
          {
            if ((unint64_t)(v318 - &v328[v323]) < 0x20)
            {
              v331 = v318;
              goto LABEL_370;
            }
            v333 = (v330 >> 3) + 1;
            v331 = &v318[-8 * (v333 & 0x3FFFFFFFFFFFFFFCLL)];
            v334 = &v328[8 * v324 - 16];
            v335 = v318 - 16;
            v336 = v333 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v337 = *(_OWORD *)v335;
              *(v334 - 1) = *((_OWORD *)v335 - 1);
              *v334 = v337;
              v334 -= 2;
              v335 -= 32;
              v336 -= 4;
            }
            while (v336);
            v329 -= 8 * (v333 & 0x3FFFFFFFFFFFFFFCLL);
            if (v333 != (v333 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_370;
LABEL_371:
            v400 = v329;
            v401 = v319;
            v402 = &v328[8 * v327];
            if (v322)
              operator delete(v322);
            goto LABEL_355;
          }
          v331 = v318;
        }
        do
        {
LABEL_370:
          v332 = *((_QWORD *)v331 - 1);
          v331 -= 8;
          *((_QWORD *)v329 - 1) = v332;
          v329 -= 8;
        }
        while (v331 != v322);
        goto LABEL_371;
      }
      v35 = v305;
    }
LABEL_386:
    sub_239A4E1A4(&v436);
    sub_239A4E2B0((uint64_t)v434);
    v338 = v432.f64[0];
    if (*(_QWORD *)&v432.f64[0])
    {
      do
      {
        v340 = **(double **)&v338;
        v341 = *(_QWORD **)(*(_QWORD *)&v338 + 128);
        if (v341)
        {
          do
          {
            v342 = (_QWORD *)*v341;
            operator delete(v341);
            v341 = v342;
          }
          while (v342);
        }
        v343 = *(void **)(*(_QWORD *)&v338 + 112);
        *(_QWORD *)(*(_QWORD *)&v338 + 112) = 0;
        if (v343)
          operator delete(v343);
        if (*(_BYTE *)(*(_QWORD *)&v338 + 104))
          sub_239916980(*(_QWORD *)&v338 + 72);
        operator delete(*(void **)&v338);
        v338 = v340;
      }
      while (v340 != 0.0);
    }
    v339 = v431[4];
    v431[4] = 0;
    if (v339)
      operator delete(v339);
    v39 = v375;
    if (v431[0])
    {
      v431[1] = v431[0];
      operator delete(v431[0]);
    }
    v164 = (char *)v457[0];
    goto LABEL_392;
  }
  v166 = 0;
  v35 = 0;
  v164 = v165;
LABEL_392:
  if (v164)
  {
    v457[1] = v164;
    operator delete(v164);
  }
LABEL_238:
  v167 = (char *)v408;
  if (v408)
  {
    v168 = v409;
    v169 = v408;
    if (v409 != v408)
    {
      v170 = v409;
      do
      {
        v172 = (void *)*((_QWORD *)v170 - 3);
        v170 -= 24;
        v171 = v172;
        if (v172)
        {
          *((_QWORD *)v168 - 2) = v171;
          operator delete(v171);
        }
        v168 = v170;
      }
      while (v170 != v167);
      v169 = v408;
    }
    v409 = v167;
    operator delete(v169);
  }
  if (v39)
    operator delete(v39);
  if (v411)
  {
    v412 = (char *)v411;
    operator delete(v411);
  }
  if (v414)
  {
    v415 = (unint64_t *)v414;
    operator delete(v414);
  }
  if ((v166 & 1) == 0)
    goto LABEL_260;
  if (v372)
  {
    v173 = (char *)v400;
    v174 = v401;
    v175 = (v401 - (_BYTE *)v400) >> 3;
    *(_QWORD *)a2 = v175;
    if ((void **)(a2 + 8) != &v400)
      sub_23945D3D0((_QWORD *)(a2 + 8), v173, v174, v175);
    v176 = *(_OWORD *)v404;
    v177 = *(_OWORD *)&v404[16];
    *(int8x16_t *)(a2 + 32) = v403;
    *(_OWORD *)(a2 + 48) = v176;
    *(_OWORD *)(a2 + 64) = v177;
    *(_QWORD *)(a2 + 80) = v35;
  }
  sub_239BF4B14((uint64_t)v431, a1, 0, 0, 0);
  if (!(_BYTE)v435)
  {
LABEL_260:
    v199 = 0;
    goto LABEL_261;
  }
  _Q0.f64[0] = v406;
  v179.f64[0] = -0.0;
  v180 = vmulq_f64(v405, (float64x2_t)xmmword_239F0C3B0);
  v181 = (float64x2_t)vextq_s8((int8x16_t)v180, (int8x16_t)vmulq_f64(_Q0, v179), 8uLL);
  v182 = (int64x2_t)vmulq_f64(v405, (float64x2_t)vdupq_n_s64(0x8000000000000000));
  _D11 = 0.0;
  __asm { FMLS            D1, D11, V0.D[0]; __x }
  *(_QWORD *)&_Q0.f64[1] = v182.i64[0];
  _Q2 = (float64x2_t)vdupq_laneq_s64(v182, 1);
  _Q3 = vsubq_f64(v181, _Q0);
  v187 = vsubq_f64(v180, _Q2);
  _Q2.f64[0] = _Q3.f64[1];
  v395 = _Q3;
  __asm { FMLA            D0, D2, V3.D[1] }
  v388 = v187;
  v189 = sqrt(vmlad_n_f64(_D0, v187.f64[0], v187.f64[0]));
  v190.n128_f64[0] = atan2(v189, _D1);
  v191 = fabs(v190.n128_f64[0] * 180.0 / 3.14159265);
  v192 = 1.0;
  if (v191 >= 0.1)
  {
    if (v191 <= 179.9)
    {
      _Q3 = v395;
      v190.n128_f64[0] = v190.n128_f64[0] * (1.0 / v189);
      *(_QWORD *)&v204 = *(_OWORD *)&vmulq_f64(v388, (float64x2_t)v190);
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
      _Q17 = vmulq_n_f64(_Q3, v190.n128_f64[0]);
      _D11 = _Q17.f64[1];
      __asm { FMLA            D3, D11, V17.D[1] }
      v207 = vmlad_n_f64(_Q3.f64[0], v204, v204);
      if (v207 >= 0.0000002635)
      {
        v246 = sqrt(v207);
        v396 = v204;
        v382 = v207;
        v389 = _Q17.f64[0];
        v247 = __sincos_stret(v246);
        cosval = v247.__cosval;
        _Q17.f64[0] = v389;
        v204 = v396;
        v208 = v247.__sinval / v246;
        v190.n128_f64[0] = 1.0 / v382 * (1.0 - v247.__cosval);
      }
      else
      {
        v190.n128_f64[0] = 0.5 - v207 * (v207 / -720.0 + 0.0416666667);
        v208 = 1.0 - v207 * (0.166666667 - v207 * (v207 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v207 * v190.n128_f64[0];
      }
      v248 = _Q17.f64[0] * v190.n128_f64[0];
      v249 = _D11 * v190.n128_f64[0];
      v250 = v204 * v190.n128_f64[0];
      v192 = cosval + _Q17.f64[0] * v190.n128_f64[0] * _Q17.f64[0];
      v190.n128_f64[0] = cosval + _D11 * v190.n128_f64[0] * _D11;
      v198 = cosval + v250 * v204;
      v251 = _D11 * v248;
      v252 = v204 * v248;
      v253 = v204 * v249;
      v254 = _Q17.f64[0] * v208;
      v255 = _D11 * v208;
      v256 = v204 * v208;
      v194 = v251 - v204 * v208;
      v196 = v255 + v252;
      _D11 = v251 + v256;
      v197 = v253 - v254;
      v193 = v252 - v255;
      v195 = v254 + v253;
    }
    else
    {
      v190.n128_u64[0] = -1.0;
      v197 = -1.2246468e-16;
      v195 = 1.2246468e-16;
      v193 = 0.0;
      v194 = 0.0;
      v196 = 0.0;
      v198 = -1.0;
    }
  }
  else
  {
    v193 = 0.0;
    v194 = 0.0;
    v190.n128_u64[0] = 1.0;
    v195 = 0.0;
    v196 = 0.0;
    v197 = 0.0;
    v198 = 1.0;
  }
  v431[0] = *(void **)&v192;
  v431[1] = *(void **)&_D11;
  v431[2] = *(void **)&v193;
  v431[3] = *(void **)&v194;
  v431[4] = (void *)v190.n128_u64[0];
  v431[5] = *(void **)&v195;
  v432.f64[0] = v196;
  v432.f64[1] = v197;
  v433 = v198;
  for (i = (_QWORD *)a1[11]; i; i = (_QWORD *)*i)
    v190 = sub_2396F674C((uint64_t)(i + 3), (uint64_t)v431, (int64x2_t)v190);
  v258 = a1[6];
  if (v258)
  {
    v259 = *(float64x2_t *)v431;
    do
    {
      _D3 = v431[5];
      v261 = *(double *)(v258 + 40);
      _Q7 = *(float64x2_t *)(v258 + 24);
      __asm { FMLA            D2, D3, V7.D[1] }
      v264 = _D2 + v433 * v261;
      *(float64x2_t *)(v258 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v259, _Q7.f64[0]), *(float64x2_t *)&v431[3], _Q7, 1), v432, v261);
      *(double *)(v258 + 40) = v264;
      v258 = *(_QWORD *)v258;
    }
    while (v258);
  }
  v199 = v400 != v401;
  if (v400 != v401)
  {
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    v265 = (unint64_t *)v400;
    v266 = (unint64_t *)v401;
    if (v400 != v401)
    {
      while (1)
      {
        v267 = (float64_t *)sub_239BF5CF4((uint64_t)a1, *v265);
        v268.f64[0] = v267[18];
        v269.f64[0] = v267[10];
        v269.f64[1] = v267[14];
        v270.f64[0] = 1.0 / sqrt(v269.f64[0] * v269.f64[0] + v269.f64[1] * v269.f64[1] + v268.f64[0] * v268.f64[0]);
        v390 = vmulq_n_f64(v269, v270.f64[0]);
        v397 = vmulq_f64(v268, v270);
        v271 = vmlad_n_f64(vmlad_n_f64(-v390.f64[1], 0.0, v390.f64[0]), 0.0, v397.f64[0]);
        if (acos(fmax(fmin(v271, 1.0), -1.0)) / 3.14159265 * 180.0 >= 5.0
          && acos(fmax(fmin(-v271, 1.0), -1.0)) / 3.14159265 * 180.0 >= 5.0)
        {
          break;
        }
        if (++v265 == v266)
          goto LABEL_261;
      }
      _Q1 = vmulq_f64((float64x2_t)*(unint64_t *)&v390.f64[0], (float64x2_t)xmmword_239EC68E0);
      v273 = vmulq_f64(v397, (float64x2_t)0);
      v274 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)v273, 8uLL);
      _Q0 = (int64x2_t)vmulq_f64((float64x2_t)*(unint64_t *)&v390.f64[0], (float64x2_t)xmmword_239EC68D0);
      *(_QWORD *)&v273.f64[1] = _Q0.i64[0];
      _Q3 = vsubq_f64(v274, v273);
      v277 = vsubq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(_Q0, 1));
      _Q1.f64[0] = _Q3.f64[1];
      v379 = v277;
      v383 = _Q3;
      __asm { FMLA            D0, D1, V3.D[1] }
      v278 = sqrt(vmlad_n_f64(*(double *)_Q0.i64, v277.f64[0], v277.f64[0]));
      v279 = 0.0;
      v280.n128_f64[0] = atan2(v278, vmulq_f64(v390, (float64x2_t)0).f64[0] + 0.0 - v397.f64[0]);
      v281 = fabs(v280.n128_f64[0] * 180.0 / 3.14159265);
      v282 = 1.0;
      if (v281 >= 0.1)
      {
        if (v281 <= 179.9)
        {
          _Q3 = v383;
          v280.n128_f64[0] = v280.n128_f64[0] * (1.0 / v278);
          *(_QWORD *)&v345 = *(_OWORD *)&vmulq_f64(v379, (float64x2_t)v280);
          *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
          _Q17 = vmulq_n_f64(_Q3, v280.n128_f64[0]);
          _D9 = _Q17.f64[1];
          __asm { FMLA            D3, D9, V17.D[1] }
          v348 = vmlad_n_f64(_Q3.f64[0], v345, v345);
          if (v348 >= 0.0000002635)
          {
            v351 = sqrt(v348);
            v399 = v345;
            v385 = v348;
            v392 = _Q17.f64[0];
            v352 = __sincos_stret(v351);
            v350 = v352.__cosval;
            _Q17.f64[0] = v392;
            v345 = v399;
            v349 = v352.__sinval / v351;
            v280.n128_f64[0] = 1.0 / v385 * (1.0 - v352.__cosval);
          }
          else
          {
            v280.n128_f64[0] = 0.5 - v348 * (v348 / -720.0 + 0.0416666667);
            v349 = 1.0 - v348 * (0.166666667 - v348 * (v348 / -5040.0 + 0.00833333333));
            v350 = 1.0 - v348 * v280.n128_f64[0];
          }
          v353 = _Q17.f64[0] * v280.n128_f64[0];
          v354 = _D9 * v280.n128_f64[0];
          v355 = v345 * v280.n128_f64[0];
          v282 = v350 + _Q17.f64[0] * v280.n128_f64[0] * _Q17.f64[0];
          v280.n128_f64[0] = v350 + _D9 * v280.n128_f64[0] * _D9;
          v288 = v350 + v355 * v345;
          v356 = _D9 * v353;
          v357 = v345 * v353;
          v358 = v345 * v354;
          v359 = _Q17.f64[0] * v349;
          v360 = _D9 * v349;
          v361 = v345 * v349;
          v284 = v356 - v345 * v349;
          v286 = v360 + v357;
          v279 = v356 + v361;
          v287 = v358 - v359;
          v283 = v357 - v360;
          v285 = v359 + v358;
        }
        else
        {
          v280.n128_u64[0] = -1.0;
          v287 = -1.2246468e-16;
          v285 = 1.2246468e-16;
          v283 = 0.0;
          v284 = 0.0;
          v286 = 0.0;
          v288 = -1.0;
        }
      }
      else
      {
        v283 = 0.0;
        v284 = 0.0;
        v280.n128_u64[0] = 1.0;
        v285 = 0.0;
        v286 = 0.0;
        v287 = 0.0;
        v288 = 1.0;
      }
      v457[0] = *(void **)&v282;
      v457[1] = *(void **)&v279;
      v457[2] = *(void **)&v283;
      *(double *)v458 = v284;
      *(_QWORD *)&v458[8] = v280.n128_u64[0];
      *(double *)&v458[16] = v285;
      v459.f64[0] = v286;
      v459.f64[1] = v287;
      *(double *)&v460 = v288;
      for (j = (_QWORD *)a1[11]; j; j = (_QWORD *)*j)
        v280 = sub_2396F674C((uint64_t)(j + 3), (uint64_t)v457, (int64x2_t)v280);
      v363 = a1[6];
      if (v363)
      {
        v364 = *(float64x2_t *)v457;
        do
        {
          _D2 = *(_QWORD *)&v458[16];
          v366 = *(double *)(v363 + 40);
          _Q7 = *(float64x2_t *)(v363 + 24);
          __asm { FMLA            D3, D2, V7.D[1] }
          v369 = _D3 + *(double *)&v460 * v366;
          *(float64x2_t *)(v363 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v364, _Q7.f64[0]), *(float64x2_t *)v458, _Q7, 1), v459, v366);
          *(double *)(v363 + 40) = v369;
          v363 = *(_QWORD *)v363;
        }
        while (v363);
      }
    }
  }
LABEL_261:
  if (v400)
  {
    v401 = (char *)v400;
    operator delete(v400);
  }
  return v199;
}

void sub_239BF8B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,void *a52,uint64_t a53,void *a54,void *a55)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  v56 = (void *)STACK[0xC28];
  if (STACK[0xC28])
  {
    STACK[0xC30] = (unint64_t)v56;
    operator delete(v56);
  }
  sub_23942A16C(&a48);
  if (a20)
  {
    operator delete(a20);
    v57 = a51;
    if (!a51)
    {
LABEL_5:
      v58 = a54;
      if (!a54)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v57 = a51;
    if (!a51)
      goto LABEL_5;
  }
  a52 = v57;
  operator delete(v57);
  v58 = a54;
  if (!a54)
  {
LABEL_6:
    v59 = a34;
    if (!a34)
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  a55 = v58;
  operator delete(v58);
  v59 = a34;
  if (!a34)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(v59);
  _Unwind_Resume(a1);
}

BOOL sub_239BF8D9C(uint64_t *a1, uint64_t a2, char a3)
{
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  uint64_t *v11;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  double v22;
  unint64_t v23;
  int8x16_t *v24;
  int8x16_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t *v33;
  char v34;
  double v35;
  char v36;
  void *v37;
  int v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  size_t v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int64x2_t v48;
  float64x2_t v53;
  double v55;
  __n128 v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  _BOOL8 v65;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  float64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  double v99;
  double v102;
  double v103;
  double cosval;
  double v105;
  __double2 v106;
  float64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  float64_t v113;
  double v114;
  double v115;
  _QWORD *i;
  uint64_t v117;
  float64x2_t v118;
  double v120;
  double v123;
  unint64_t *v124;
  unint64_t *v125;
  float64_t *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  double v130;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v136;
  double v137;
  double v138;
  __n128 v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v149;
  double v152;
  double v153;
  double v154;
  double v155;
  __double2 v156;
  float64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  float64_t v163;
  double v164;
  double v165;
  _QWORD *j;
  uint64_t v167;
  float64x2_t v168;
  double v170;
  double v173;
  char v174;
  uint64_t v175;
  float64x2_t v176;
  unint64_t v177;
  double v178;
  float64x2_t v179;
  double v180;
  double v181;
  float64x2_t v182;
  float64_t v183;
  float64x2_t v184;
  float64_t v185;
  uint64_t v186;
  float64x2_t v187;
  int v188;
  double v189;
  float64x2_t v190;
  double v191;
  __int128 v192;
  uint64_t v193;
  _BYTE v194[24];
  float64x2_t v195;
  double v196;
  void *__p;
  char *v198;
  char *v199;
  float64x2_t v200;
  float64x2_t v201;
  void *v202[2];
  float64x2_t v203[2];
  void *v204[2];
  double v205;
  _BYTE v206[32];
  int v207;
  uint64_t v208;
  int v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  int v214;
  __int128 v215;
  __int128 v216;
  int v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  int v227;
  float64x2_t v228[2];
  char *v229;
  unint64_t v230;
  uint64_t v231;
  double v232;
  double v233;
  unint64_t *v234;
  unint64_t *v235;
  uint64_t v236;
  int8x16_t *v237;
  int8x16_t *v238;
  char *v239;

  __p = 0;
  v198 = 0;
  v199 = 0;
  v237 = 0;
  v238 = 0;
  v239 = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  sub_2394B5624((uint64_t)a1, (uint64_t)&v234, 1);
  v7 = v234;
  v6 = v235;
  v8 = (char *)v235 - (char *)v234;
  if (v235 == v234)
  {
    v33 = 0;
  }
  else
  {
    if ((unint64_t)v8 >= 0x5555555555555551)
      sub_2394189F8();
    v9 = v8 >> 3;
    v237 = (int8x16_t *)operator new(24 * (v8 >> 3));
    v238 = v237;
    v239 = &v237->i8[24 * v9];
    do
    {
      v11 = sub_2394650AC((uint64_t)a1, *v7);
      *(_QWORD *)&_Q0.f64[0] = v11[10];
      _Q4 = *((_OWORD *)v11 + 8);
      *(_QWORD *)&v14.f64[0] = v11[22];
      *(_QWORD *)&v14.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v14);
      v15 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v11 + 10));
      *(_QWORD *)&_Q0.f64[1] = v11[14];
      v16 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v11 + 4), *((int64x2_t *)v11 + 6)), v15.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v11 + 4), *((int64x2_t *)v11 + 6)), v15, 1), _Q0, v14.f64[0]);
      _Q0.f64[0] = v15.f64[1];
      __asm { FMLA            D1, D0, V4.D[1] }
      v22 = vmlad_n_f64(_D1, *((double *)v11 + 18), v14.f64[0]);
      v23 = vextq_s8(v16, v16, 8uLL).u64[0];
      v24 = v238;
      if (v238 < (int8x16_t *)v239)
      {
        *(double *)v238[1].i64 = v22;
        v16.i64[1] = v23;
        *v24 = v16;
        v10 = &v24[1].i8[8];
      }
      else
      {
        v25 = v237;
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v238 - (char *)v237) >> 3);
        v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((v239 - (char *)v237) >> 3) > v27)
          v27 = 0x5555555555555556 * ((v239 - (char *)v237) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v239 - (char *)v237) >> 3) >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v27;
        if (v28)
        {
          v177 = v23;
          v181 = v22;
          v186 = v16.i64[0];
          if (v28 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v29 = (char *)operator new(24 * v28);
          v22 = v181;
          v16.i64[0] = v186;
          v23 = v177;
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[24 * v26];
        *((double *)v30 + 2) = v22;
        v16.i64[1] = v23;
        *(int8x16_t *)v30 = v16;
        v31 = (int8x16_t *)v30;
        if (v24 != v25)
        {
          do
          {
            v32 = *(int8x16_t *)((char *)v24 - 24);
            v31[-1].i64[1] = v24[-1].i64[1];
            *(int8x16_t *)((char *)v31 - 24) = v32;
            v31 = (int8x16_t *)((char *)v31 - 24);
            v24 = (int8x16_t *)((char *)v24 - 24);
          }
          while (v24 != v25);
          v24 = v237;
        }
        v10 = v30 + 24;
        v237 = v31;
        v238 = (int8x16_t *)(v30 + 24);
        v239 = &v29[24 * v28];
        if (v24)
          operator delete(v24);
      }
      v238 = (int8x16_t *)v10;
      ++v7;
    }
    while (v7 != v6);
    v33 = v237;
    v8 = (uint64_t)v238;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v33) >> 3) < 3)
  {
    v34 = 0;
    goto LABEL_41;
  }
  v232 = 0.0;
  v233 = 0.0;
  sub_239BECF4C(a1, &v233, &v232);
  *(_OWORD *)&v194[8] = xmmword_239EC67F0;
  v192 = xmmword_239F0BFA0;
  v195.f64[0] = 0.0;
  v193 = 3;
  v35 = v233;
  if (v233 >= v232)
    v35 = v232;
  *(double *)v194 = v35 * 0.05;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v36 = sub_239BF1278(&v237, v228, (uint64_t)&v229, (uint64_t)&v192);
  v37 = v229;
  if ((v36 & 1) == 0)
    goto LABEL_39;
  if (v230 > 0x3F || (v230 & 0x3F) != 0)
  {
    v39 = 0;
    v38 = 0;
    v40 = v229;
    do
    {
      v38 += (*(_QWORD *)v40 >> v39) & 1;
      v40 += 8 * (v39 == 63);
      if (v39 == 63)
        v39 = 0;
      else
        ++v39;
    }
    while (v39 != (v230 & 0x3F) || v40 != &v229[8 * (v230 >> 6)]);
  }
  else
  {
    v38 = 0;
  }
  if ((double)(unint64_t)v38 / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v238 - (char *)v237) >> 3)) < 0.6)
  {
LABEL_39:
    v34 = 0;
    if (!v229)
      goto LABEL_41;
    goto LABEL_40;
  }
  v200 = v228[0];
  v201 = v228[1];
  *(_OWORD *)v204 = 0u;
  *(_OWORD *)v202 = 0u;
  memset(v203, 0, sizeof(v203));
  memset(v206, 0, sizeof(v206));
  LODWORD(v205) = 1065353216;
  v207 = 1065353216;
  v208 = 0;
  v209 = 0;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0;
  v214 = 1065353216;
  v215 = 0u;
  v216 = 0u;
  v217 = 1065353216;
  v221 = 0u;
  v220 = 0u;
  v219 = 0u;
  v218 = 0u;
  v222 = 0;
  v223 = 0x3FF0000000000000;
  v224 = 0u;
  v225 = 0u;
  v226 = 0;
  v227 = -1;
  v68 = v234;
  v67 = v235;
  if (v235 != v234)
  {
    v69 = 0;
    do
    {
      if (((*(_QWORD *)&v229[(v69 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v69) & 1) != 0)
      {
        v70 = v68[v69];
        v71 = sub_239470FCC((uint64_t)a1, v70);
        sub_2395D7584((uint64_t)v202, v70, (char *)v71);
        v68 = v234;
        v67 = v235;
      }
      ++v69;
    }
    while (v69 < v67 - v68);
  }
  v174 = a3;
  v175 = a2;
  v188 = sub_239BF0B88((uint64_t)v202, (uint64_t)&v200);
  if (v188)
  {
    v72 = v234;
    v73 = v235;
    if (v235 != v234)
    {
      v74 = 0;
      do
      {
        if (((*(_QWORD *)&v229[(v74 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v74) & 1) != 0)
        {
          v76 = v198;
          if (v198 < v199)
          {
            *(_QWORD *)v198 = v72[v74];
            v75 = v76 + 8;
          }
          else
          {
            v77 = (char *)__p;
            v78 = v198 - (_BYTE *)__p;
            v79 = (v198 - (_BYTE *)__p) >> 3;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61)
              sub_2394189F8();
            v81 = v199 - (_BYTE *)__p;
            if ((v199 - (_BYTE *)__p) >> 2 > v80)
              v80 = v81 >> 2;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              if (v82 >> 61)
                sub_239418A80();
              v83 = (char *)operator new(8 * v82);
            }
            else
            {
              v83 = 0;
            }
            v84 = &v83[8 * v79];
            *(_QWORD *)v84 = v72[v74];
            v75 = v84 + 8;
            if (v76 != v77)
            {
              v85 = v76 - 8 - v77;
              if (v85 < 0x58)
                goto LABEL_141;
              if ((unint64_t)(v76 - &v83[v78]) < 0x20)
                goto LABEL_141;
              v86 = (v85 >> 3) + 1;
              v87 = &v83[8 * v79 - 16];
              v88 = v76 - 16;
              v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *(_OWORD *)v88;
                *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
                *(_OWORD *)v87 = v90;
                v87 -= 32;
                v88 -= 32;
                v89 -= 4;
              }
              while (v89);
              v84 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
              v76 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
              if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_141:
                do
                {
                  v91 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *((_QWORD *)v84 - 1) = v91;
                  v84 -= 8;
                }
                while (v76 != v77);
              }
            }
            __p = v84;
            v198 = v75;
            v199 = &v83[8 * v82];
            if (v77)
            {
              operator delete(v77);
              v72 = v234;
              v73 = v235;
            }
          }
          v198 = v75;
        }
        ++v74;
      }
      while (v74 < v73 - v72);
    }
  }
  sub_239A4E1A4(&v208);
  sub_239A4E2B0((uint64_t)v206);
  v92 = v204[0];
  a3 = v174;
  a2 = v175;
  if (v204[0])
  {
    do
    {
      v94 = (_QWORD *)*v92;
      v95 = (_QWORD *)v92[16];
      if (v95)
      {
        do
        {
          v96 = (_QWORD *)*v95;
          operator delete(v95);
          v95 = v96;
        }
        while (v96);
      }
      v97 = (void *)v92[14];
      v92[14] = 0;
      if (v97)
        operator delete(v97);
      if (*((_BYTE *)v92 + 104))
        sub_239916980((uint64_t)(v92 + 9));
      operator delete(v92);
      v92 = v94;
    }
    while (v94);
  }
  v93 = v203[1].f64[0];
  v203[1].f64[0] = 0.0;
  if (v93 != 0.0)
    operator delete(*(void **)&v93);
  v34 = v188;
  if (v202[0])
  {
    v202[1] = v202[0];
    operator delete(v202[0]);
  }
  v37 = v229;
  if (v229)
LABEL_40:
    operator delete(v37);
LABEL_41:
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if ((v34 & 1) == 0)
    goto LABEL_53;
  if (a3)
  {
    v41 = (char *)__p;
    v42 = v198;
    v43 = (v198 - (_BYTE *)__p) >> 3;
    *(_QWORD *)a2 = v43;
    if ((void **)(a2 + 8) != &__p)
      sub_23945D3D0((_QWORD *)(a2 + 8), v41, v42, v43);
    *(_QWORD *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  sub_239BF4B14((uint64_t)v202, a1, 0, 0, 0);
  if ((_BYTE)v207)
  {
    _Q0.f64[0] = v201.f64[0];
    v45.f64[0] = -0.0;
    v46 = vmulq_f64(v200, (float64x2_t)xmmword_239F0C3B0);
    v47 = (float64x2_t)vextq_s8((int8x16_t)v46, (int8x16_t)vmulq_f64(_Q0, v45), 8uLL);
    v48 = (int64x2_t)vmulq_f64(v200, (float64x2_t)vdupq_n_s64(0x8000000000000000));
    _D11 = 0.0;
    __asm { FMLS            D1, D11, V0.D[0]; __x }
    *(_QWORD *)&_Q0.f64[1] = v48.i64[0];
    _Q2 = (float64x2_t)vdupq_laneq_s64(v48, 1);
    _Q3 = vsubq_f64(v47, _Q0);
    v53 = vsubq_f64(v46, _Q2);
    _Q2.f64[0] = _Q3.f64[1];
    v182 = v53;
    v187 = _Q3;
    __asm { FMLA            D0, D2, V3.D[1] }
    v55 = sqrt(vmlad_n_f64(_D0, v53.f64[0], v53.f64[0]));
    v56.n128_f64[0] = atan2(v55, _D1);
    v57 = fabs(v56.n128_f64[0] * 180.0 / 3.14159265);
    v58 = 1.0;
    if (v57 >= 0.1)
    {
      if (v57 <= 179.9)
      {
        _Q3 = v187;
        v56.n128_f64[0] = v56.n128_f64[0] * (1.0 / v55);
        *(_QWORD *)&v99 = *(_OWORD *)&vmulq_f64(v182, (float64x2_t)v56);
        *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        _Q17 = vmulq_n_f64(_Q3, v56.n128_f64[0]);
        _D11 = _Q17.f64[1];
        __asm { FMLA            D3, D11, V17.D[1] }
        v102 = vmlad_n_f64(_Q3.f64[0], v99, v99);
        if (v102 >= 0.0000002635)
        {
          v105 = sqrt(v102);
          v183 = _Q17.f64[0];
          v189 = v99;
          v178 = v102;
          v106 = __sincos_stret(v105);
          cosval = v106.__cosval;
          _Q17.f64[0] = v183;
          v99 = v189;
          v103 = v106.__sinval / v105;
          v56.n128_f64[0] = 1.0 / v178 * (1.0 - v106.__cosval);
        }
        else
        {
          v56.n128_f64[0] = 0.5 - v102 * (v102 / -720.0 + 0.0416666667);
          v103 = 1.0 - v102 * (0.166666667 - v102 * (v102 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v102 * v56.n128_f64[0];
        }
        v107 = _Q17.f64[0] * v56.n128_f64[0];
        v108 = _D11 * v56.n128_f64[0];
        v109 = v99 * v56.n128_f64[0];
        v58 = cosval + _Q17.f64[0] * v56.n128_f64[0] * _Q17.f64[0];
        v56.n128_f64[0] = cosval + _D11 * v56.n128_f64[0] * _D11;
        v64 = cosval + v109 * v99;
        v110 = _D11 * v107;
        v111 = v99 * v107;
        v112 = v99 * v108;
        v113 = _Q17.f64[0] * v103;
        v114 = _D11 * v103;
        v115 = v99 * v103;
        v60 = v110 - v99 * v103;
        v62 = v114 + v111;
        _D11 = v110 + v115;
        v63 = v112 - v113;
        v59 = v111 - v114;
        v61 = v113 + v112;
      }
      else
      {
        v56.n128_u64[0] = -1.0;
        v63 = -1.2246468e-16;
        v61 = 1.2246468e-16;
        v59 = 0.0;
        v60 = 0.0;
        v62 = 0.0;
        v64 = -1.0;
      }
    }
    else
    {
      v59 = 0.0;
      v60 = 0.0;
      v56.n128_u64[0] = 1.0;
      v61 = 0.0;
      v62 = 0.0;
      v63 = 0.0;
      v64 = 1.0;
    }
    v202[0] = *(void **)&v58;
    v202[1] = *(void **)&_D11;
    v203[0].f64[0] = v59;
    v203[0].f64[1] = v60;
    *(_QWORD *)&v203[1].f64[0] = v56.n128_u64[0];
    v203[1].f64[1] = v61;
    v204[0] = *(void **)&v62;
    v204[1] = *(void **)&v63;
    v205 = v64;
    for (i = (_QWORD *)a1[11]; i; i = (_QWORD *)*i)
      v56 = sub_2396F674C((uint64_t)(i + 3), (uint64_t)v202, (int64x2_t)v56);
    v117 = a1[6];
    if (v117)
    {
      v118 = *(float64x2_t *)v202;
      do
      {
        _D2 = v203[1].f64[1];
        v120 = *(double *)(v117 + 40);
        _Q7 = *(float64x2_t *)(v117 + 24);
        __asm { FMLA            D3, D2, V7.D[1] }
        v123 = _D3 + v205 * v120;
        *(float64x2_t *)(v117 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, _Q7.f64[0]), *(float64x2_t *)((char *)v203 + 8), _Q7, 1), *(float64x2_t *)v204, v120);
        *(double *)(v117 + 40) = v123;
        v117 = *(_QWORD *)v117;
      }
      while (v117);
    }
    v65 = __p != v198;
    if (__p != v198)
    {
      std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      v124 = (unint64_t *)__p;
      v125 = (unint64_t *)v198;
      if (__p != v198)
      {
        while (1)
        {
          v126 = (float64_t *)sub_239BF5CF4((uint64_t)a1, *v124);
          v127.f64[0] = v126[18];
          v128.f64[0] = v126[10];
          v128.f64[1] = v126[14];
          v129.f64[0] = 1.0 / sqrt(v128.f64[0] * v128.f64[0] + v128.f64[1] * v128.f64[1] + v127.f64[0] * v127.f64[0]);
          v184 = vmulq_n_f64(v128, v129.f64[0]);
          v190 = vmulq_f64(v127, v129);
          v130 = vmlad_n_f64(vmlad_n_f64(-v184.f64[1], 0.0, v184.f64[0]), 0.0, v190.f64[0]);
          if (acos(fmax(fmin(v130, 1.0), -1.0)) / 3.14159265 * 180.0 >= 5.0
            && acos(fmax(fmin(-v130, 1.0), -1.0)) / 3.14159265 * 180.0 >= 5.0)
          {
            break;
          }
          if (++v124 == v125)
            goto LABEL_54;
        }
        _Q1 = vmulq_f64((float64x2_t)*(unint64_t *)&v184.f64[0], (float64x2_t)xmmword_239EC68E0);
        v132 = vmulq_f64(v190, (float64x2_t)0);
        v133 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)v132, 8uLL);
        _Q0 = (int64x2_t)vmulq_f64((float64x2_t)*(unint64_t *)&v184.f64[0], (float64x2_t)xmmword_239EC68D0);
        *(_QWORD *)&v132.f64[1] = _Q0.i64[0];
        _Q3 = vsubq_f64(v133, v132);
        v136 = vsubq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(_Q0, 1));
        _Q1.f64[0] = _Q3.f64[1];
        v176 = v136;
        v179 = _Q3;
        __asm { FMLA            D0, D1, V3.D[1] }
        v137 = sqrt(vmlad_n_f64(*(double *)_Q0.i64, v136.f64[0], v136.f64[0]));
        v138 = 0.0;
        v139.n128_f64[0] = atan2(v137, vmulq_f64(v184, (float64x2_t)0).f64[0] + 0.0 - v190.f64[0]);
        v140 = fabs(v139.n128_f64[0] * 180.0 / 3.14159265);
        v141 = 1.0;
        if (v140 >= 0.1)
        {
          if (v140 <= 179.9)
          {
            _Q3 = v179;
            v139.n128_f64[0] = v139.n128_f64[0] * (1.0 / v137);
            *(_QWORD *)&v149 = *(_OWORD *)&vmulq_f64(v176, (float64x2_t)v139);
            *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
            _Q17 = vmulq_n_f64(_Q3, v139.n128_f64[0]);
            _D9 = _Q17.f64[1];
            __asm { FMLA            D3, D9, V17.D[1] }
            v152 = vmlad_n_f64(_Q3.f64[0], v149, v149);
            if (v152 >= 0.0000002635)
            {
              v155 = sqrt(v152);
              v185 = _Q17.f64[0];
              v191 = v149;
              v180 = v152;
              v156 = __sincos_stret(v155);
              v154 = v156.__cosval;
              _Q17.f64[0] = v185;
              v149 = v191;
              v153 = v156.__sinval / v155;
              v139.n128_f64[0] = 1.0 / v180 * (1.0 - v156.__cosval);
            }
            else
            {
              v139.n128_f64[0] = 0.5 - v152 * (v152 / -720.0 + 0.0416666667);
              v153 = 1.0 - v152 * (0.166666667 - v152 * (v152 / -5040.0 + 0.00833333333));
              v154 = 1.0 - v152 * v139.n128_f64[0];
            }
            v157 = _Q17.f64[0] * v139.n128_f64[0];
            v158 = _D9 * v139.n128_f64[0];
            v159 = v149 * v139.n128_f64[0];
            v141 = v154 + _Q17.f64[0] * v139.n128_f64[0] * _Q17.f64[0];
            v139.n128_f64[0] = v154 + _D9 * v139.n128_f64[0] * _D9;
            v147 = v154 + v159 * v149;
            v160 = _D9 * v157;
            v161 = v149 * v157;
            v162 = v149 * v158;
            v163 = _Q17.f64[0] * v153;
            v164 = _D9 * v153;
            v165 = v149 * v153;
            v143 = v160 - v149 * v153;
            v145 = v164 + v161;
            v138 = v160 + v165;
            v146 = v162 - v163;
            v142 = v161 - v164;
            v144 = v163 + v162;
          }
          else
          {
            v139.n128_u64[0] = -1.0;
            v146 = -1.2246468e-16;
            v144 = 1.2246468e-16;
            v142 = 0.0;
            v143 = 0.0;
            v145 = 0.0;
            v147 = -1.0;
          }
        }
        else
        {
          v142 = 0.0;
          v143 = 0.0;
          v139.n128_u64[0] = 1.0;
          v144 = 0.0;
          v145 = 0.0;
          v146 = 0.0;
          v147 = 1.0;
        }
        *(double *)&v192 = v141;
        *((double *)&v192 + 1) = v138;
        v193 = *(_QWORD *)&v142;
        *(double *)v194 = v143;
        *(_QWORD *)&v194[8] = v139.n128_u64[0];
        *(double *)&v194[16] = v144;
        v195.f64[0] = v145;
        v195.f64[1] = v146;
        v196 = v147;
        for (j = (_QWORD *)a1[11]; j; j = (_QWORD *)*j)
          v139 = sub_2396F674C((uint64_t)(j + 3), (uint64_t)&v192, (int64x2_t)v139);
        v167 = a1[6];
        if (v167)
        {
          v168 = (float64x2_t)v192;
          do
          {
            _D2 = *(_QWORD *)&v194[16];
            v170 = *(double *)(v167 + 40);
            _Q7 = *(float64x2_t *)(v167 + 24);
            __asm { FMLA            D3, D2, V7.D[1] }
            v173 = _D3 + v196 * v170;
            *(float64x2_t *)(v167 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, _Q7.f64[0]), *(float64x2_t *)v194, _Q7, 1), v195, v170);
            *(double *)(v167 + 40) = v173;
            v167 = *(_QWORD *)v167;
          }
          while (v167);
        }
      }
    }
  }
  else
  {
LABEL_53:
    v65 = 0;
  }
LABEL_54:
  if (__p)
  {
    v198 = (char *)__p;
    operator delete(__p);
  }
  return v65;
}

void sub_239BF9B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  sub_239A4F8AC((uint64_t)&a35);
  v37 = *(void **)(v35 - 248);
  if (v37)
  {
    operator delete(v37);
    v38 = *(void **)(v35 - 208);
    if (!v38)
    {
LABEL_3:
      v39 = *(void **)(v35 - 184);
      if (!v39)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v38 = *(void **)(v35 - 208);
    if (!v38)
      goto LABEL_3;
  }
  *(_QWORD *)(v35 - 200) = v38;
  operator delete(v38);
  v39 = *(void **)(v35 - 184);
  if (!v39)
  {
LABEL_4:
    v40 = __p;
    if (!__p)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v35 - 176) = v39;
  operator delete(v39);
  v40 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(v40);
  _Unwind_Resume(a1);
}

uint64_t sub_239BF9BFC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  float64x2_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  long double v19;
  double v20;
  double v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  double v30;
  BOOL v31;
  void *v32;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  double v44;
  unint64_t v45;
  double v46;
  long double v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  BOOL v55;
  __int128 v56;
  __int128 v57;
  uint64_t v59;
  __int128 v61;
  unint64_t v62;
  _BYTE v63[2504];
  uint64_t v64;
  uint64_t (**v65)();
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  _QWORD *v77;
  char v78;
  void *__p;
  void *v80;
  uint64_t v81;
  void *__src;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  char *v87;
  int v88;
  char v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v6 = v5 >= 3 && v5 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (!v6)
    return 0;
  v11 = *(_QWORD *)(a5 + 24);
  v12 = *(_BYTE *)(a5 + 56);
  v67 = xmmword_239F13A00;
  v68 = *(_OWORD *)algn_239F13A10;
  v69 = xmmword_239F13A20;
  v70 = *(_OWORD *)dbl_239F13A30;
  v71 = 0x3FF0000000000000;
  v72 = 0uLL;
  v73 = 0;
  v66 = 0x3FF0000000000000;
  v65 = &off_250B01B70;
  v74 = v11;
  v75 = v12;
  v76 = a1;
  v77 = a2;
  v61 = *(_OWORD *)(a5 + 32);
  v62 = *(_QWORD *)a5;
  LODWORD(v94) = 0;
  sub_239454CD8((int *)&v94, (uint64_t)v63);
  v13 = ((unint64_t (*)(uint64_t))v65[2])((uint64_t)&v65);
  v86 = v13;
  v14 = v65[3]();
  v85 = v14;
  LODWORD(v16) = 1;
  if (*((double *)&v61 + 1) < 1.0 && *((double *)&v61 + 1) > 0.0)
  {
    *(double *)&v17 = log(1.0 - *(double *)&v61);
    v18 = *(double *)&v17;
    LODWORD(v17) = 3;
    v19 = pow(*((long double *)&v61 + 1), (double)v17);
    v16 = vcvtpd_u64_f64(v18 / log(1.0 - v19));
    if (v16 == -1)
    {
      v59 = 120;
LABEL_79:
      sub_239A444D4((uint64_t)"unknown file", v59, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  if (v13 < v14)
  {
    v59 = 171;
    goto LABEL_79;
  }
  v98 = 0x3FF0000000000000;
  v94 = xmmword_239F13A00;
  v95 = *(_OWORD *)algn_239F13A10;
  v20 = 1.0;
  v21 = 0.0;
  v96 = xmmword_239F13A20;
  v97 = *(_OWORD *)dbl_239F13A30;
  v93 = 0;
  v92 = 0uLL;
  v83 = 0;
  __src = 0;
  v84 = 0;
  if (v13)
  {
    v22 = ((unint64_t)v13 - 1) >> 6;
    v23 = (char *)operator new(8 * (v22 + 1));
    v24 = v23;
    v84 = v22 + 1;
    __src = v23;
    v83 = v13;
    if (v13 >= 0x41)
      v25 = ((unint64_t)v13 - 1) >> 6;
    else
      v25 = 0;
    *(_QWORD *)&v23[8 * v25] = 0;
    v26 = 8 * ((unint64_t)v13 >> 6);
    if (v13 >= 0x40)
      bzero(v23, v26);
    if ((v13 & 0x3F) != 0)
      *(_QWORD *)&v24[v26] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
  }
  v27 = v16;
  if ((_DWORD)v16)
  {
    v28 = 0;
    v29 = -2147483647;
    v30 = 1.0;
    while (1)
    {
      if (v85 > v86)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v86)
      {
        if ((double)v86 * 0.5 >= (double)v85)
          sub_239455384((uint64_t)v63, &v86, (int *)&v85, (int32x4_t **)&__p);
        else
          sub_2394551BC((uint64_t)v63, &v86, &v85, (int32x4_t **)&__p);
      }
      else
      {
        v80 = 0;
        __p = 0;
        v81 = 0;
      }
      if (((unsigned int (*)(uint64_t, uint64_t *, double, double, float64x2_t))v65[5])((uint64_t)&v65, (uint64_t *)&__p, v21, v20, v15))
      {
        break;
      }
      v31 = 1;
      v32 = __p;
      if (__p)
        goto LABEL_21;
LABEL_22:
      v6 = v27 - 1 == v28++;
      if (v6 || !v31)
        goto LABEL_61;
    }
    v34 = ((uint64_t (*)(uint64_t, uint64_t *))v65[4])((uint64_t)&v65, (uint64_t *)&__src);
    if (v34 <= v29)
    {
      v38 = v83;
    }
    else
    {
      v35 = ((uint64_t (*)(uint64_t))v65[6])((uint64_t)&v65);
      v30 = *(double *)v35;
      v36 = *(_OWORD *)(v35 + 24);
      v37 = *(_OWORD *)(v35 + 56);
      v96 = *(_OWORD *)(v35 + 40);
      v97 = v37;
      v98 = *(_QWORD *)(v35 + 72);
      v94 = *(_OWORD *)(v35 + 8);
      v95 = v36;
      v92 = *(_OWORD *)(v35 + 80);
      v93 = *(_QWORD *)(v35 + 96);
      v38 = v83;
      if (&__src != (void **)a4)
      {
        if (v83)
        {
          v39 = *(void **)a4;
          if (v83 <= *(_QWORD *)(a4 + 16) << 6)
          {
            v40 = v83 - 1;
          }
          else
          {
            if (v39)
            {
              operator delete(v39);
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              v38 = v83;
            }
            if ((v38 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v40 = v38 - 1;
            v41 = ((v38 - 1) >> 6) + 1;
            v39 = operator new(8 * v41);
            *(_QWORD *)a4 = v39;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v41;
          }
          memmove(v39, __src, ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v38 = v83;
        }
        *(_QWORD *)(a4 + 8) = v38;
      }
      v29 = v34;
    }
    v78 = 1;
    v90 = (uint64_t)__src;
    v91 = 0;
    v87 = (char *)__src + 8 * (v38 >> 6);
    v88 = v38 & 0x3F;
    v42 = sub_239458E50((uint64_t)&v90, (uint64_t)&v87, &v78);
    v43 = v27;
    if (v42)
    {
      v21 = (double)v42;
      LODWORD(v20) = v86;
      v20 = (double)*(unint64_t *)&v20;
      v44 = (double)v42 / v20;
      if (v44 >= 1.0)
      {
        v43 = 1;
      }
      else
      {
        v43 = 1;
        if (v44 > 0.0)
        {
          *(double *)&v45 = log(1.0 - *(double *)&v61);
          v46 = *(double *)&v45 * 3.0;
          LODWORD(v45) = 3;
          v47 = pow(v44, (double)v45);
          v21 = v46 / log(1.0 - v47);
          v43 = vcvtpd_u64_f64(v21);
          if (v43 == -1)
          {
            sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
        }
      }
    }
    v31 = v43 > v28 || v62 > v28;
    v32 = __p;
    if (!__p)
      goto LABEL_22;
LABEL_21:
    v80 = v32;
    operator delete(v32);
    goto LABEL_22;
  }
  v30 = 1.0;
LABEL_61:
  v66 = *(_QWORD *)&v30;
  v69 = v96;
  v70 = v97;
  v71 = v98;
  v67 = v94;
  v68 = v95;
  v72 = v92;
  v73 = v93;
  v49 = *(void **)a4;
  v50 = *(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6);
  v51 = *(_QWORD *)(a4 + 8) & 0x3FLL;
  v89 = 1;
  __p = v49;
  LODWORD(v80) = 0;
  v90 = v50;
  v91 = v51;
  v52 = sub_239458E50((uint64_t)&__p, (uint64_t)&v90, &v89);
  if (__src)
    operator delete(__src);
  v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v54 = (double)v52 / (double)v53;
  if (*(_QWORD *)(a5 + 16) < v53)
    v53 = *(_QWORD *)(a5 + 16);
  v55 = v54 < *(double *)(a5 + 48) || v52 < (int)v53;
  v7 = !v55;
  if (!v55)
  {
    *(_QWORD *)a3 = v66;
    v56 = v67;
    *(_OWORD *)(a3 + 24) = v68;
    v57 = v70;
    *(_OWORD *)(a3 + 40) = v69;
    *(_OWORD *)(a3 + 56) = v57;
    *(_QWORD *)(a3 + 72) = v71;
    *(_OWORD *)(a3 + 8) = v56;
    *(_OWORD *)(a3 + 80) = v72;
    *(_QWORD *)(a3 + 96) = v73;
  }
  sub_239911CF8((uint64_t)&v64);
  return v7;
}

void sub_239BFA2C4(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0xAF0];
  if (STACK[0xAF0])
  {
    STACK[0xAF8] = (unint64_t)v2;
    operator delete(v2);
  }
  if (STACK[0xB08])
    operator delete((void *)STACK[0xB08]);
  sub_239911CF8((uint64_t)&STACK[0xA38]);
  _Unwind_Resume(a1);
}

uint64_t sub_239BFA324(float64x2_t **a1, float64x2_t **a2, uint64_t a3, char a4, float64x2_t a5, double a6, double a7, float64x2_t a8)
{
  float64x2_t *v8;
  float64x2_t *v9;
  unint64_t v10;
  uint64_t v12;
  float64x2_t v17;
  unint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t *v39;
  float64x2_t v40;
  unint64_t v41;
  double *v42;
  unint64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int8x16_t v48;
  unint64_t v49;
  float64x2_t v50;
  double *v51;
  double v52;
  double i;
  double v54;
  __int128 v55;
  double *v62;
  double v63;
  __int128 v64;
  float64_t *v68;
  float64x2_t v69;
  double v70;
  float64_t *v71;
  uint64_t v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  __int128 v80;
  float64_t v81;
  __int128 v82;
  float64_t v83;
  __int128 v84;
  __int128 v85;
  float64x2_t v86;
  __int128 v87;
  float64_t v88;
  __int128 v89;
  float64x2_t v90;
  uint64_t v91;
  void *v92;
  char *v93;
  double v100;
  float64x2_t v101;
  float64x2_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  __int128 v113;
  double v114;
  __int128 v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  std::bad_alloc *exception;
  std::bad_alloc *v121;
  float64x2_t v122;
  double v123;
  int8x16_t v124;
  float64x2_t v125;
  float64_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64_t v131;
  float64_t v132;
  float64_t v133;
  float64_t v134;
  _OWORD v135[6];
  float64x2_t v136;
  float64x2_t v137;
  __CLPK_doublereal v138[4];
  int v139;
  double *v140;
  char *v141;
  uint64_t v142;
  double *v143;
  double *v144;
  uint64_t v145;
  __CLPK_integer v146;
  double v147;
  void *memptr;

  v9 = *a1;
  v8 = a1[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)*a1) >> 3);
  if (v10 < 3 || v10 != 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3))
    return 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v17.f64[0] = 0.0;
  *(double *)&v18 = 0.0;
  a8.f64[0] = 0.0;
  if (v9 != v8)
  {
    v19 = v9;
    do
    {
      a5.f64[0] = v19[1].f64[0];
      v20 = *v19;
      v19 = (float64x2_t *)((char *)v19 + 24);
      a8 = vaddq_f64(a8, a5);
      *(_QWORD *)&v17.f64[1] = v18;
      v17 = vaddq_f64(v17, v20);
      v18 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    }
    while (v19 != v8);
  }
  v126 = *(double *)&v18;
  v129 = a8;
  v132 = v17.f64[0];
  sub_239AF450C((void **)&v143, v10);
  v27.f64[0] = (double)v10;
  v28.f64[0] = v132;
  v28.f64[1] = v126;
  v29 = vdivq_f64(v129, v27);
  v124 = (int8x16_t)vdivq_f64(v28, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v10), 0));
  v30 = (float64x2_t)vextq_s8(v124, v124, 8uLL);
  v125 = v30;
  v31 = *a1;
  v32 = a1[1];
  if (*a1 != v32)
  {
    v33 = (float64x2_t *)v143;
    *(_QWORD *)&v30.f64[0] = v124.i64[0];
    v34.f64[1] = v125.f64[1];
    v30.f64[1] = v125.f64[0];
    do
    {
      v34.f64[0] = v31[1].f64[0];
      v35 = *v31;
      v31 = (float64x2_t *)((char *)v31 + 24);
      v34 = vsubq_f64(v34, v29);
      *v33 = vsubq_f64(v35, v30);
      v33[1].f64[0] = v34.f64[0];
      v33 = (float64x2_t *)((char *)v33 + 24);
    }
    while (v31 != v32);
  }
  v123 = v29.f64[0];
  v36 = *a2;
  v37 = a2[1];
  v38.f64[0] = 0.0;
  v29.f64[0] = 0.0;
  v21.f64[0] = 0.0;
  if (*a2 != v37)
  {
    v39 = *a2;
    do
    {
      v30.f64[0] = v39[1].f64[0];
      v40 = *v39;
      v39 = (float64x2_t *)((char *)v39 + 24);
      v21 = vaddq_f64(v21, v30);
      v38.f64[1] = v29.f64[0];
      v38 = vaddq_f64(v38, v40);
      v29 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
    }
    while (v39 != v37);
  }
  v127 = v21;
  v130 = v29;
  v133 = v38.f64[0];
  v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3);
  v42 = v140;
  v43 = 0xAAAAAAAAAAAAAAABLL * ((v141 - (char *)v140) >> 3);
  if (v41 <= v43)
  {
    if (v41 < v43)
      v141 = (char *)&v140[((char *)v37 - (char *)v36) >> 3];
  }
  else
  {
    sub_239AF450C((void **)&v140, v41 - v43);
    v42 = v140;
    v36 = *a2;
    v37 = a2[1];
  }
  v30.f64[0] = (double)v41;
  v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v41), 0);
  v45 = vdivq_f64(v127, v30);
  v46.f64[1] = v130.f64[1];
  v47.f64[0] = v133;
  v47.f64[1] = v130.f64[0];
  v48 = (int8x16_t)vdivq_f64(v47, v44);
  v49 = vextq_s8(v48, v48, 8uLL).u64[0];
  if (v36 != v37)
  {
    *(_QWORD *)&v47.f64[0] = v48.i64[0];
    *(_QWORD *)&v47.f64[1] = v49;
    do
    {
      v44.f64[0] = v36[1].f64[0];
      v50 = *v36;
      v36 = (float64x2_t *)((char *)v36 + 24);
      v44 = vsubq_f64(v44, v45);
      v46 = vsubq_f64(v50, v47);
      *(float64x2_t *)v42 = v46;
      v42[2] = v44.f64[0];
      v42 += 3;
    }
    while (v36 != v37);
  }
  v47.f64[0] = 1.0;
  if ((a4 & 1) == 0)
  {
    v51 = v143;
    v52 = 0.0;
    for (i = 0.0; v51 != v144; i = i + _D4 + v54 * v54)
    {
      v54 = v51[2];
      v55 = *(_OWORD *)v51;
      v51 += 3;
      _V3.D[1] = *((_QWORD *)&v55 + 1);
      _D5 = *((_QWORD *)&v55 + 1);
      __asm { FMLA            D4, D5, V3.D[1] }
    }
    v62 = v140;
    if (v140 != (double *)v141)
    {
      v52 = 0.0;
      do
      {
        v63 = v62[2];
        v64 = *(_OWORD *)v62;
        v62 += 3;
        _V3.D[1] = *((_QWORD *)&v64 + 1);
        _D5 = *((_QWORD *)&v64 + 1);
        __asm { FMLA            D4, D5, V3.D[1] }
        v52 = v52 + _D4 + v63 * v63;
      }
      while (v62 != (double *)v141);
    }
    v47.f64[0] = sqrt(v52 / i);
  }
  v128 = v45;
  v131 = *(double *)&v49;
  v134 = *(double *)v48.i64;
  v122 = v47;
  if (v9 == v8)
  {
    v69.f64[0] = 0.0;
    v70 = 0.0;
    v46.f64[0] = 0.0;
    v73.f64[0] = 0.0;
    v74 = 0.0;
    v47.f64[0] = 0.0;
    v75.f64[0] = 0.0;
    v76 = 0.0;
    v22.f64[0] = 0.0;
  }
  else
  {
    v68 = v143;
    v69.f64[0] = 0.0;
    v70 = 0.0;
    v46.f64[0] = 0.0;
    v71 = v140;
    if (v10 <= 1)
      v72 = 1;
    else
      v72 = v10;
    v73.f64[0] = 0.0;
    v74 = 0.0;
    v47.f64[0] = 0.0;
    v75.f64[0] = 0.0;
    v76 = 0.0;
    v22.f64[0] = 0.0;
    do
    {
      v23.f64[0] = v68[2];
      v77 = *(float64x2_t *)v68;
      v68 += 3;
      v78 = v77;
      v24.f64[0] = v71[2];
      v79 = *(float64x2_t *)v71;
      v71 += 3;
      v25.f64[0] = v23.f64[0] * v79.f64[0];
      v26.f64[0] = vmuld_lane_f64(v23.f64[0], v79, 1);
      v69.f64[1] = v70;
      v73.f64[1] = v74;
      v75.f64[1] = v76;
      v69 = vmlaq_n_f64(v69, v78, v79.f64[0]);
      v46 = vaddq_f64(v46, v25);
      v73 = vmlaq_laneq_f64(v73, v78, v79, 1);
      v47 = vaddq_f64(v47, v26);
      v22 = vmlaq_f64(v22, v24, v23);
      v75 = vmlaq_n_f64(v75, v78, v24.f64[0]);
      v74 = v73.f64[1];
      *(_QWORD *)&v70 = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
      *(_QWORD *)&v76 = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
      --v72;
    }
    while (v72);
  }
  *(double *)&v80 = v22.f64[0] + v69.f64[0] + v74;
  v81 = v69.f64[0] - v74 - v22.f64[0];
  *(double *)&v82 = v74 - v69.f64[0] - v22.f64[0];
  v83 = v22.f64[0] + -v69.f64[0] - v74;
  *(double *)&v84 = v76 - v47.f64[0];
  *(double *)&v85 = v46.f64[0] - v75.f64[0];
  v86.f64[0] = v73.f64[0] - v70;
  *(double *)&v87 = v73.f64[0] + v70;
  v88 = v75.f64[0] + v46.f64[0];
  v139 = 2;
  *((double *)&v80 + 1) = v76 - v47.f64[0];
  *(_QWORD *)&v89 = v85;
  *((_QWORD *)&v89 + 1) = *(_QWORD *)&v86.f64[0];
  v90.f64[0] = v76 + v47.f64[0];
  *((float64_t *)&v84 + 1) = v81;
  *((_QWORD *)&v82 + 1) = *(_QWORD *)&v90.f64[0];
  *((_QWORD *)&v85 + 1) = v87;
  *((float64_t *)&v87 + 1) = v88;
  v90.f64[1] = v83;
  v86.f64[1] = v88;
  v136 = v86;
  v137 = v90;
  v135[4] = v85;
  v135[5] = v82;
  v135[2] = v84;
  v135[3] = v87;
  v135[0] = v80;
  v135[1] = v89;
  v147 = 0.0;
  v146 = 0;
  sub_239A231C4(86, 85, 4, (__CLPK_doublereal *)v135, 4, v138, &v147, -1, &v146);
  if (v146)
    goto LABEL_40;
  v91 = (int)v147;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v91 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v92 = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v121 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v121, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  sub_239A231C4(86, 85, 4, (__CLPK_doublereal *)v135, 4, v138, (__CLPK_doublereal *)memptr, v91, &v146);
  free(v92);
  if (v146)
  {
LABEL_40:
    v12 = 0;
    v93 = (char *)v140;
    if (!v140)
      goto LABEL_42;
    goto LABEL_41;
  }
  _V1.D[1] = v136.f64[1];
  _D3 = v136.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _D3 = v137.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  v100 = 1.0 / sqrt(_D2);
  v101 = vmulq_n_f64(v137, v100);
  v102 = vmulq_n_f64(v136, v100);
  v103 = vmuld_n_f64(v102.f64[0], v102.f64[0]);
  v104 = vmuld_lane_f64(v102.f64[1], v102, 1);
  v105 = vmuld_n_f64(v101.f64[0], v101.f64[0]);
  v106 = vmuld_lane_f64(v101.f64[1], v101, 1);
  v107 = vmuld_lane_f64(v101.f64[0], v102, 1);
  v108 = vmuld_lane_f64(v102.f64[1], v101, 1);
  v109 = vmuld_lane_f64(v101.f64[0], v101, 1);
  v110 = vmuld_lane_f64(v102.f64[0], v102, 1);
  v111 = vmuld_n_f64(v102.f64[0], v101.f64[0]);
  v101.f64[0] = vmuld_lane_f64(v102.f64[0], v101, 1);
  v102.f64[0] = v103 + v104 - v105 - v106;
  v112 = v107 + v101.f64[0] + v107 + v101.f64[0];
  *(double *)&v113 = v108 - v111 + v108 - v111;
  v101.f64[0] = v107 - v101.f64[0] + v107 - v101.f64[0];
  v114 = v103 - v104;
  *(double *)&v115 = v105 + v114 - v106;
  v116.f64[0] = v108 + v111 + v108 + v111;
  v117 = v106 + v114 - v105;
  *((_QWORD *)&v113 + 1) = *(_QWORD *)&v101.f64[0];
  v102.f64[1] = v112;
  *(_QWORD *)&v101.f64[1] = v115;
  *((double *)&v115 + 1) = v109 + v110 + v109 + v110;
  v116.f64[1] = v109 - v110 + v109 - v110;
  v118 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v102, *(double *)v124.i64), v101, v125.f64[0]), v116, v123);
  v119.f64[0] = v134;
  v119.f64[1] = v131;
  v101.f64[0] = *(double *)&v113 * *(double *)v124.i64 + *((double *)&v115 + 1) * v125.f64[0] + v117 * v123;
  *(float64_t *)a3 = v122.f64[0];
  *(double *)(a3 + 72) = v117;
  *(float64x2_t *)(a3 + 56) = v116;
  *(_OWORD *)(a3 + 24) = v113;
  *(_OWORD *)(a3 + 40) = v115;
  *(float64x2_t *)(a3 + 8) = v102;
  *(_QWORD *)(a3 + 96) = *(_OWORD *)&vmlsq_f64(v128, v101, v122);
  *(float64x2_t *)(a3 + 80) = vmlsq_lane_f64(v119, v118, v122.f64[0], 0);
  v12 = 1;
  v93 = (char *)v140;
  if (v140)
  {
LABEL_41:
    v141 = v93;
    operator delete(v93);
  }
LABEL_42:
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  return v12;
}

void sub_239BFA938(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  free(v1);
  v4 = *(void **)(v2 - 136);
  if (v4)
  {
    *(_QWORD *)(v2 - 128) = v4;
    operator delete(v4);
    v5 = *(void **)(v2 - 112);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(void **)(v2 - 112);
    if (!v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v2 - 104) = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_239BFA990()
{
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_239BFA9A4(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) - **(_QWORD **)(a1 + 128)) >> 3);
}

uint64_t sub_239BFA9C4()
{
  return 3;
}

uint64_t sub_239BFA9CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float64x2_t *v11;
  double v14;
  float64x2_t v16;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) == **(_QWORD **)(a1 + 128))
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v9 = *(uint64_t **)(a1 + 128);
    v10 = *v9;
    v11 = (float64x2_t *)(*v9 + v4);
    _D2 = *(_QWORD *)(v8 + 48);
    _Q3 = *(float64x2_t *)(v8 + 32);
    v14 = v11[1].f64[0];
    _Q7 = *v11;
    v16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v8 + 8), v11->f64[0]), _Q3, *v11, 1), *(float64x2_t *)(v8 + 56), v14);
    __asm { FMLA            D0, D2, V7.D[1] }
    v22.f64[0] = _D0 + *(double *)(v8 + 72) * v14;
    _Q2.f64[0] = *(float64_t *)v8;
    _Q3.f64[0] = *(float64_t *)(v8 + 96);
    v24 = vmlaq_n_f64(*(float64x2_t *)(v8 + 80), v16, *(double *)v8);
    v25 = (float64x2_t *)(**(_QWORD **)(a1 + 136) + v4);
    v16.f64[0] = v25[1].f64[0];
    *(_QWORD *)&v16.f64[0] = *(_OWORD *)&vsubq_f64(vmlaq_f64(_Q3, _Q2, v22), v16);
    _Q3.f64[0] = vsubq_f64(v24, *v25).f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    v26 = *a2;
    v27 = v6 >> 6;
    v28 = 1 << v6;
    if (sqrt(vmlad_n_f64(_Q2.f64[0], v16.f64[0], v16.f64[0])) > *(double *)(a1 + 112))
    {
      v7 = *(_QWORD *)(v26 + 8 * v27) & ~v28;
    }
    else
    {
      v7 = *(_QWORD *)(v26 + 8 * v27) | v28;
      v5 = (v5 + 1);
    }
    *(_QWORD *)(v26 + 8 * v27) = v7;
    ++v6;
    v4 += 24;
  }
  while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v9[1] - v10) >> 3));
  return v5;
}

uint64_t sub_239BFAB20(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  float64x2_t *v12;
  char *v13;
  float64x2_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  float64x2_t v33;
  double v40;
  float64x2_t v41;
  double v42;
  double v45;
  double v46;
  double v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  float64x2_t *v64;
  char *v65;
  char *v66;
  float64x2_t *v67;
  char *v68;
  char *v69;

  v5 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 8)
  {
    sub_239A444D4((uint64_t)"unknown file", 314, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v6 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  do
  {
    v15 = *(_DWORD *)(v5 + 4 * v11);
    v16 = **(_QWORD **)(v6 + 128) + 24 * v15;
    if (v8 >= v10)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (char *)v12) >> 3) + 1;
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_51;
      if (0x5555555555555556 * ((v10 - (char *)v12) >> 3) > v18)
        v18 = 0x5555555555555556 * ((v10 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v10 - (char *)v12) >> 3) >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_50;
        v20 = (char *)operator new(24 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = *(_OWORD *)v16;
      v22 = &v20[8 * ((v8 - (char *)v12) >> 3)];
      *((_QWORD *)v22 + 2) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v22 = v21;
      if (v8 == (char *)v12)
      {
        v25 = (float64x2_t *)v8;
        v12 = (float64x2_t *)&v20[8 * ((v8 - (char *)v12) >> 3)];
        v6 = a1;
      }
      else
      {
        v23 = (float64x2_t *)&v20[8 * ((v8 - (char *)v12) >> 3)];
        v6 = a1;
        do
        {
          v24 = *(float64x2_t *)(v8 - 24);
          v23[-1].f64[1] = *((float64_t *)v8 - 1);
          *(float64x2_t *)((char *)v23 - 24) = v24;
          v23 = (float64x2_t *)((char *)v23 - 24);
          v8 -= 24;
        }
        while (v8 != (char *)v12);
        v25 = v12;
        v12 = v23;
      }
      v10 = &v20[24 * v19];
      v8 = v22 + 24;
      v67 = v12;
      v69 = v10;
      if (v25)
        operator delete(v25);
    }
    else
    {
      v17 = *(_OWORD *)v16;
      *((_QWORD *)v8 + 2) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v8 = v17;
      v8 += 24;
    }
    v26 = **(_QWORD **)(v6 + 136) + 24 * v15;
    if (v7 < v9)
    {
      v14 = *(float64x2_t *)v26;
      *((_QWORD *)v7 + 2) = *(_QWORD *)(v26 + 16);
      *(float64x2_t *)v7 = v14;
      v7 += 24;
    }
    else
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v13) >> 3) + 1;
      if (v27 > 0xAAAAAAAAAAAAAAALL)
      {
LABEL_51:
        v68 = v8;
        v65 = v7;
        sub_2394189F8();
      }
      if (0x5555555555555556 * ((v9 - v13) >> 3) > v27)
        v27 = 0x5555555555555556 * ((v9 - v13) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v9 - v13) >> 3) >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      else
        v28 = v27;
      if (v28)
      {
        if (v28 > 0xAAAAAAAAAAAAAAALL)
        {
LABEL_50:
          v68 = v8;
          sub_239418A80();
        }
        v29 = (char *)operator new(24 * v28);
      }
      else
      {
        v29 = 0;
      }
      v14 = *(float64x2_t *)v26;
      v30 = &v29[8 * ((v7 - v13) >> 3)];
      *((_QWORD *)v30 + 2) = *(_QWORD *)(v26 + 16);
      *(float64x2_t *)v30 = v14;
      if (v7 == v13)
      {
        v32 = v7;
        v13 = &v29[8 * ((v7 - v13) >> 3)];
        v6 = a1;
      }
      else
      {
        v31 = &v29[8 * ((v7 - v13) >> 3)];
        v6 = a1;
        do
        {
          v14 = *(float64x2_t *)(v7 - 24);
          *((_QWORD *)v31 - 1) = *((_QWORD *)v7 - 1);
          *(float64x2_t *)(v31 - 24) = v14;
          v31 -= 24;
          v7 -= 24;
        }
        while (v7 != v13);
        v32 = v13;
        v13 = v31;
      }
      v9 = &v29[24 * v28];
      v7 = v30 + 24;
      v64 = (float64x2_t *)v13;
      v66 = v9;
      if (v32)
        operator delete(v32);
    }
    ++v11;
    v5 = *a2;
  }
  while (v11 < (a2[1] - *a2) >> 2);
  v68 = v8;
  v65 = v7;
  v14.f64[0] = *((float64_t *)v13 + 2);
  a5.f64[0] = *((float64_t *)v13 + 5);
  _Q3 = *(float64x2_t *)(v13 + 24);
  v33 = vsubq_f64(v14, a5);
  _D7 = vsubq_f64(*(float64x2_t *)v13, _Q3).f64[1];
  __asm { FMLA            D6, D7, V5.D[1] }
  v40 = vmlad_n_f64(_D6, v33.f64[0], v33.f64[0]);
  v33.f64[0] = *((float64_t *)v13 + 8);
  v41 = *((float64x2_t *)v13 + 3);
  *(_QWORD *)&v42 = *(_OWORD *)&vsubq_f64(v14, v33);
  _D16 = vsubq_f64(*(float64x2_t *)v13, v41).f64[1];
  __asm { FMLA            D7, D16, V1.D[1] }
  v45 = vmlad_n_f64(_D7, v42, v42);
  *(_QWORD *)&v46 = *(_OWORD *)&vsubq_f64(a5, v33);
  _Q3.f64[0] = vsubq_f64(_Q3, v41).f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  v49 = vmlad_n_f64(_D2, v46, v46);
  if (v40 * 4.0 * v45 - (v49 - v40 - v45) * (v49 - v40 - v45) < 2.22044605e-16)
  {
    v50 = 0;
  }
  else
  {
    v57 = xmmword_239F13A00;
    v58 = *(_OWORD *)algn_239F13A10;
    v59 = xmmword_239F13A20;
    v56 = 0x3FF0000000000000;
    v60 = *(_OWORD *)dbl_239F13A30;
    v61 = 0x3FF0000000000000;
    v62 = 0uLL;
    v63 = 0;
    v50 = sub_239BFA324(&v67, &v64, (uint64_t)&v56, *(_BYTE *)(v6 + 120), (float64x2_t)xmmword_239F13A20, dbl_239F13A30[0], v49, _Q3);
    if ((v50 & 1) != 0)
    {
      *(_QWORD *)(v6 + 8) = v56;
      v51 = v60;
      *(_OWORD *)(v6 + 48) = v59;
      *(_OWORD *)(v6 + 64) = v51;
      *(_QWORD *)(v6 + 80) = v61;
      v52 = v58;
      *(_OWORD *)(v6 + 16) = v57;
      *(_OWORD *)(v6 + 32) = v52;
      *(_OWORD *)(v6 + 88) = v62;
      *(_QWORD *)(v6 + 104) = v63;
    }
  }
  operator delete(v13);
  if (v12)
    operator delete(v12);
  return v50;
}

void sub_239BFAF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  uint64_t v26;
  void *v28;

  if (v25)
  {
    operator delete(v25);
    v28 = *(void **)(v26 - 112);
    if (!v28)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v28 = *(void **)(v26 - 112);
    if (!v28)
      goto LABEL_3;
  }
  *(_QWORD *)(v26 - 104) = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239BFAFF0(uint64_t a1)
{
  return a1 + 8;
}

__n128 sub_239BFAFF8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t sub_239BFB034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unsigned __int8 a7)
{
  unint64_t *v10;
  unint64_t *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  char v19;
  float64x2_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  float64x2_t v33;
  BOOL v35;
  char *v36;
  char *v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  double v56;
  float64x2_t v57;
  int8x16_t v58;
  double v63;
  unint64_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  float64x2_t *v73;
  float64x2_t v74;
  uint64_t *v75;
  float64x2_t v78;
  float64x2_t v79;
  int8x16_t v80;
  double v82;
  unint64_t v83;
  int8x16_t *v84;
  __int8 *v85;
  int8x16_t *v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int8x16_t *v91;
  int8x16_t v92;
  uint64_t v93;
  float64x2_t v94;
  double v97;
  __int128 v99;
  __int128 v100;
  double v101;
  void *v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  size_t v108;
  unint64_t v109;
  unint64_t i;
  __int128 v111;
  char *v112;
  char *v113;
  _OWORD *v114;
  __int128 v115;
  char *v116;
  _OWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  __int128 v122;
  char *v123;
  char *v124;
  __int128 v125;
  char *v126;
  _OWORD *v127;
  _OWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  __int128 v133;
  char *v134;
  char *v135;
  __int128 v136;
  float64x2_t v137;
  float64x2_t v139;
  double v142;
  double v143;
  float64x2_t v144;
  _QWORD *j;
  uint64_t *v147;
  float64x2_t v148;
  float64x2_t v149;
  double v151;
  uint64_t *v153;
  char *v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v166;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  double v174;
  int v175;
  void *v176;
  unint64_t *v177;
  unint64_t *v178;
  float64_t v179;
  int v180;
  float64_t v181;
  char *v182;
  char *v183;
  size_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v188;
  double *v189;
  float64x2_t v190;
  double v191;
  float64x2_t v192;
  float64x2_t v193;
  double v196;
  unint64_t v198;
  float64_t *v199;
  uint64_t *v200;
  float64x2_t v201;
  int8x8_t v202;
  uint8x8_t v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  float64x2_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  double v212;
  double *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  double v218;
  double *v219;
  uint64_t v220;
  uint64_t v221;
  float64_t v222;
  float64_t v223;
  unint64_t v224;
  uint64_t *v225;
  unint64_t v226;
  uint64_t *v227;
  uint8x8_t v228;
  unint64_t v229;
  uint64_t **v230;
  uint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  BOOL v237;
  float64x2_t v238;
  uint64_t *v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v244;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v249;
  float64x2_t v251;
  float64x2_t v252;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  void *v261;
  unint64_t *v262;
  unint64_t *v263;
  unint64_t v264;
  float64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _OWORD *v269;
  __int128 *v270;
  uint64_t v271;
  __int128 v272;
  void *v273;
  float64x2_t v274;
  float64x2_t v275;
  int8x16_t v276;
  float64x2_t v277;
  float64_t v278;
  float64x2_t v279;
  unint64_t v280;
  float64x2_t v281;
  float64_t v282;
  unint64_t v283;
  unint64_t v284;
  double v285;
  float64x2_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  float64x2_t v290;
  float64_t v291;
  double v292;
  double v293;
  int8x16_t v294;
  double v295;
  uint64_t v296;
  uint64_t v297;
  float64_t v298;
  void *v299[2];
  unint64_t *v300;
  BOOL v304;
  unint64_t v305;
  float64x2_t v306;
  double v307;
  float64x2_t v308;
  int v309;
  float64x2_t v310;
  _OWORD v312[3];
  float64x2_t v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  float64x2_t v319;
  uint64_t v320;
  float64x2_t v321;
  void *v322;
  float64x2_t v323[8];
  float64x2_t v324;
  float64_t v325;
  void *v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64_t v336;
  float64x2_t v337;
  double v338;
  int8x16_t v339;
  double v340;
  int8x16_t v341;
  unint64_t v342;
  float64x2_t v343;
  double v344;
  char v345;
  char v346;
  void *__p;
  char *v348;
  uint64_t v349;
  void *v350;
  char *v351;
  char *v352;
  void *v353;
  char *v354;
  char *v355;
  void *v356;
  unint64_t v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  float64x2_t v364;
  _BYTE v365[32];
  float64x2_t v366;
  double v367;
  float64x2_t v368;
  float64_t v369;
  char *v370;
  char *v371;
  char *v372;
  unint64_t *v373;
  unint64_t *v374;
  uint64_t v375;
  int8x16_t *v376;
  int8x16_t *v377;
  char *v378;
  float64x2_t *v379;
  float64x2_t *v380;
  float64x2_t *v381;

  v379 = 0;
  v380 = 0;
  v381 = 0;
  v376 = 0;
  v377 = 0;
  v378 = 0;
  v373 = 0;
  v374 = 0;
  v375 = 0;
  v370 = 0;
  v371 = 0;
  v372 = 0;
  sub_239433C1C(a1, (uint64_t)&v373, 1);
  v10 = v373;
  v11 = v374;
  v12 = (char *)v374 - (char *)v373;
  if (v374 != v373)
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = v12 >> 3;
    v370 = (char *)operator new((char *)v374 - (char *)v373);
    v371 = v370;
    v372 = &v370[8 * (v12 >> 3)];
    if ((unint64_t)v12 > 0x5555555555555550)
      sub_2394189F8();
    v12 = (int64_t)operator new(24 * v13);
    v379 = (float64x2_t *)v12;
    v380 = (float64x2_t *)v12;
    v381 = (float64x2_t *)(v12 + 24 * v13);
    v376 = (int8x16_t *)operator new(24 * v13);
    v377 = v376;
    v378 = &v376->i8[24 * v13];
  }
  v309 = a7;
  v14 = a1 + 88;
  do
    v14 = *(_QWORD *)v14;
  while (v14 && !*(_BYTE *)(v14 + 263));
  v15 = *(uint64_t **)(a1 + 88);
  if (!v15)
  {
    v16 = -1;
    if (v11 != v10)
      goto LABEL_20;
LABEL_22:
    v19 = 1;
    v20 = (float64x2_t *)v12;
    goto LABEL_119;
  }
  v16 = -1;
  do
  {
    v17 = *((_DWORD *)v15 + 55);
    if ((v17 & 0x80000000) == 0)
    {
      v18 = v16 >= v17 ? *((_DWORD *)v15 + 55) : v16;
      v16 = v16 == -1 ? *((_DWORD *)v15 + 55) : v18;
      if (!v16)
        break;
    }
    v15 = (uint64_t *)*v15;
  }
  while (v15);
  if (v11 == v10)
    goto LABEL_22;
LABEL_20:
  v304 = 1;
  while (2)
  {
    v21 = *v10;
    v22 = sub_239470FCC(a1, *v10);
    v23 = *(_QWORD *)(a2 + 80);
    if (!v23)
      goto LABEL_24;
    v24 = v22;
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = v21;
      if (v23 <= v21)
        v26 = v21 % v23;
    }
    else
    {
      v26 = ((_DWORD)v23 - 1) & v21;
    }
    v27 = *(uint64_t ***)(*(_QWORD *)(a2 + 72) + 8 * v26);
    if (!v27)
      goto LABEL_24;
    v28 = *v27;
    if (!v28)
      goto LABEL_24;
    if (v25.u32[0] < 2uLL)
    {
      v29 = v23 - 1;
      while (1)
      {
        v31 = v28[1];
        if (v31 == v21)
        {
          if (*((_DWORD *)v28 + 4) == (_DWORD)v21)
            goto LABEL_46;
        }
        else if ((v31 & v29) != v26)
        {
          goto LABEL_24;
        }
        v28 = (uint64_t *)*v28;
        if (!v28)
          goto LABEL_24;
      }
    }
    while (1)
    {
      v30 = v28[1];
      if (v30 == v21)
        break;
      if (v30 >= v23)
        v30 %= v23;
      if (v30 != v26)
        goto LABEL_24;
LABEL_35:
      v28 = (uint64_t *)*v28;
      if (!v28)
        goto LABEL_24;
    }
    if (*((_DWORD *)v28 + 4) != (_DWORD)v21)
      goto LABEL_35;
LABEL_46:
    v32 = sub_2395D7BEC(a2, v21);
    v35 = (*((_BYTE *)v24 + 232) == 2 || (*((unsigned __int8 *)v24 + 237) | *((unsigned __int8 *)v24 + 238)) != 0)
       && *((_BYTE *)v32 + 232) == 2;
    if (v35 && (!v14 || *((_BYTE *)v24 + 239)) && (v16 < 0 || *((_DWORD *)v24 + 49) == v16))
    {
      v36 = v371;
      if (v371 < v372)
      {
        *(_QWORD *)v371 = v21;
        v37 = v36 + 8;
        goto LABEL_79;
      }
      v38 = v370;
      v39 = v371 - v370;
      v40 = (v371 - v370) >> 3;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        sub_2394189F8();
      v42 = v372 - v370;
      if ((v372 - v370) >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 61)
          sub_239418A80();
        v287 = v43;
        v44 = (char *)operator new(8 * v43);
        v43 = v287;
        v40 = (v371 - v370) >> 3;
        v39 = v371 - v370;
      }
      else
      {
        v44 = 0;
      }
      v45 = (unint64_t *)&v44[8 * v40];
      *v45 = v21;
      v46 = (char *)(v45 + 1);
      if (v36 != v38)
      {
        v47 = v36 - 8 - v38;
        if (v47 < 0x58)
          goto LABEL_366;
        if ((unint64_t)(v36 - &v44[v39]) < 0x20)
          goto LABEL_366;
        v48 = (v47 >> 3) + 1;
        v49 = &v44[8 * v40 - 16];
        v50 = v36 - 16;
        v51 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v50;
          *((_OWORD *)v49 - 1) = *((_OWORD *)v50 - 1);
          *(_OWORD *)v49 = v52;
          v49 -= 32;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        v45 -= v48 & 0x3FFFFFFFFFFFFFFCLL;
        v36 -= 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_366:
          do
          {
            v53 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v45 = v53;
          }
          while (v36 != v38);
        }
      }
      v370 = (char *)v45;
      v371 = v46;
      v372 = &v44[8 * v43];
      if (v38)
      {
        v37 = v46;
        operator delete(v38);
LABEL_79:
        v46 = v37;
      }
      v371 = v46;
      *(_QWORD *)&_Q0.f64[0] = v24[10];
      _Q4 = *((_OWORD *)v24 + 8);
      *(_QWORD *)&v33.f64[0] = v24[22];
      *(_QWORD *)&v56 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v33);
      v57 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v24 + 10));
      *(_QWORD *)&_Q0.f64[1] = v24[14];
      v58 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v24 + 4), *((int64x2_t *)v24 + 6)), v57.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v24 + 4), *((int64x2_t *)v24 + 6)), v57, 1), _Q0, v56);
      _Q0.f64[0] = v57.f64[1];
      __asm { FMLA            D1, D0, V4.D[1] }
      v63 = vmlad_n_f64(_D1, *((double *)v24 + 18), v56);
      v64 = vextq_s8(v58, v58, 8uLL).u64[0];
      v65 = v380;
      if (v380 >= v381)
      {
        v67 = v379;
        v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v380 - (char *)v379) >> 3);
        v69 = v68 + 1;
        if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * (((char *)v381 - (char *)v379) >> 3) > v69)
          v69 = 0x5555555555555556 * (((char *)v381 - (char *)v379) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v381 - (char *)v379) >> 3) >= 0x555555555555555)
          v70 = 0xAAAAAAAAAAAAAAALL;
        else
          v70 = v69;
        if (v70)
        {
          v283 = 0xAAAAAAAAAAAAAAABLL * (((char *)v380 - (char *)v379) >> 3);
          v288 = v64;
          v292 = v63;
          v296 = v58.i64[0];
          if (v70 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v280 = v70;
          v71 = (char *)operator new(24 * v70);
          v63 = v292;
          v58.i64[0] = v296;
          v70 = v280;
          v64 = v288;
          v68 = v283;
        }
        else
        {
          v71 = 0;
        }
        v72 = &v71[24 * v68];
        *((double *)v72 + 2) = v63;
        v58.i64[1] = v64;
        *(int8x16_t *)v72 = v58;
        v73 = (float64x2_t *)v72;
        if (v65 != v67)
        {
          do
          {
            v74 = *(float64x2_t *)((char *)v65 - 24);
            v73[-1].f64[1] = v65[-1].f64[1];
            *(float64x2_t *)((char *)v73 - 24) = v74;
            v73 = (float64x2_t *)((char *)v73 - 24);
            v65 = (float64x2_t *)((char *)v65 - 24);
          }
          while (v65 != v67);
          v65 = v379;
        }
        v66 = (float64x2_t *)(v72 + 24);
        v379 = v73;
        v380 = (float64x2_t *)(v72 + 24);
        v381 = (float64x2_t *)&v71[24 * v70];
        if (v65)
          operator delete(v65);
      }
      else
      {
        v380[1].f64[0] = v63;
        v58.i64[1] = v64;
        *v65 = (float64x2_t)v58;
        v66 = (float64x2_t *)((char *)v65 + 24);
      }
      v380 = v66;
      v75 = sub_239BF5CF4(a2, v21);
      *(_QWORD *)&_Q0.f64[0] = v75[10];
      _Q4 = *((_OWORD *)v75 + 8);
      *(_QWORD *)&v78.f64[0] = v75[22];
      *(_QWORD *)&v78.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v78);
      v79 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v75 + 10));
      *(_QWORD *)&_Q0.f64[1] = v75[14];
      v80 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v75 + 4), *((int64x2_t *)v75 + 6)), v79.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v75 + 4), *((int64x2_t *)v75 + 6)), v79, 1), _Q0, v78.f64[0]);
      _Q0.f64[0] = v79.f64[1];
      __asm { FMLA            D1, D0, V4.D[1] }
      v82 = vmlad_n_f64(_D1, *((double *)v75 + 18), v78.f64[0]);
      v83 = vextq_s8(v80, v80, 8uLL).u64[0];
      v84 = v377;
      if (v377 >= (int8x16_t *)v378)
      {
        v86 = v376;
        v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v377 - (char *)v376) >> 3) + 1;
        if (v87 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((v378 - (char *)v376) >> 3) > v87)
          v87 = 0x5555555555555556 * ((v378 - (char *)v376) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v378 - (char *)v376) >> 3) >= 0x555555555555555)
          v88 = 0xAAAAAAAAAAAAAAALL;
        else
          v88 = v87;
        if (v88)
        {
          v289 = v83;
          v293 = v82;
          v297 = v80.i64[0];
          if (v88 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v284 = v88;
          v89 = (char *)operator new(24 * v88);
          v82 = v293;
          v80.i64[0] = v297;
          v88 = v284;
          v83 = v289;
        }
        else
        {
          v89 = 0;
        }
        v90 = &v89[8 * (((char *)v84 - (char *)v86) >> 3)];
        *((double *)v90 + 2) = v82;
        v80.i64[1] = v83;
        *(int8x16_t *)v90 = v80;
        v91 = (int8x16_t *)v90;
        if (v84 != v86)
        {
          do
          {
            v92 = *(int8x16_t *)((char *)v84 - 24);
            v91[-1].i64[1] = v84[-1].i64[1];
            *(int8x16_t *)((char *)v91 - 24) = v92;
            v91 = (int8x16_t *)((char *)v91 - 24);
            v84 = (int8x16_t *)((char *)v84 - 24);
          }
          while (v84 != v86);
          v84 = v376;
        }
        v85 = v90 + 24;
        v376 = v91;
        v377 = (int8x16_t *)(v90 + 24);
        v378 = &v89[24 * v88];
        if (v84)
          operator delete(v84);
      }
      else
      {
        *(double *)v377[1].i64 = v82;
        v80.i64[1] = v83;
        *v84 = v80;
        v85 = &v84[1].i8[8];
      }
      v377 = (int8x16_t *)v85;
      if (!v304 || *((_BYTE *)v24 + 232) == 2)
      {
        v304 = 0;
      }
      else
      {
        v304 = 0;
        if (!*((_BYTE *)v24 + 237))
          v304 = *((_BYTE *)v24 + 238) != 0;
      }
    }
LABEL_24:
    if (++v10 != v11)
      continue;
    break;
  }
  v12 = (int64_t)v379;
  v20 = v380;
  v19 = v304;
LABEL_119:
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - v12) >> 3) < 3)
  {
    if (v309)
    {
      v93 = 0;
      *(_BYTE *)(a6 + 353) = 0;
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  sub_239E20BF0((uint64_t)&v379, (uint64_t)&v335, (uint64_t)&v324, 0, 0, 1.0, 0.0);
  v94.f64[0] = v336;
  _Q2.f64[0] = v325;
  *(_QWORD *)&v94.f64[0] = *(_OWORD *)&vsubq_f64(v94, _Q2);
  _D3 = vsubq_f64(v335, v324).f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  v97 = sqrt(vmlad_n_f64(_Q2.f64[0], v94.f64[0], v94.f64[0]));
  if ((v19 & (v97 < 2.0)) == 1 || v97 < 0.00000001)
  {
    if (v309)
      *(_BYTE *)(a6 + 353) = 0;
LABEL_126:
    v93 = 0;
    goto LABEL_127;
  }
  if (v309)
    *(_QWORD *)(a6 + 144) = 0xAAAAAAAAAAAAAAABLL * (((char *)v380 - (char *)v379) >> 3);
  v363 = 0x3FF0000000000000;
  v367 = 1.0;
  v364 = (float64x2_t)xmmword_239F13A00;
  *(_OWORD *)v365 = *(_OWORD *)algn_239F13A10;
  *(_OWORD *)&v365[16] = xmmword_239F13A20;
  v366 = *(float64x2_t *)dbl_239F13A30;
  v369 = 0.0;
  v368 = 0uLL;
  v99 = *(_OWORD *)(a3 + 528);
  v359 = *(_OWORD *)(a3 + 512);
  v360 = v99;
  v100 = *(_OWORD *)(a3 + 560);
  v361 = *(_OWORD *)(a3 + 544);
  v362 = v100;
  v357 = 0;
  v356 = 0;
  v358 = 0;
  if (!*(_BYTE *)(a3 + 504))
  {
    sub_23941C5D8((uint64_t)&v356, 0xAAAAAAAAAAAAAAABLL * (((char *)v380 - (char *)v379) >> 3), 1uLL);
    goto LABEL_150;
  }
  v101 = *((double *)&v360 + 1);
  if (*((double *)&v360 + 1) <= 0.0)
  {
    v101 = sub_239BEB240(&v379) * 0.1;
    *((double *)&v360 + 1) = v101;
  }
  if (v101 < 2.22044605e-16)
  {
    if (v309)
    {
      v93 = 0;
      *(_BYTE *)(a6 + 353) = 0;
      v102 = v356;
      if (v356)
        goto LABEL_273;
      goto LABEL_127;
    }
    goto LABEL_259;
  }
  if ((sub_239BF9BFC(&v376, &v379, (uint64_t)&v363, (uint64_t)&v356, (uint64_t)&v359) & 1) == 0)
  {
    v357 = 0;
    v103 = v101 + v101;
    *((double *)&v360 + 1) = v103;
    if ((sub_239BF9BFC(&v376, &v379, (uint64_t)&v363, (uint64_t)&v356, (uint64_t)&v359) & 1) == 0)
    {
      v357 = 0;
      v104 = v103 + v103;
      *((double *)&v360 + 1) = v104;
      if ((sub_239BF9BFC(&v376, &v379, (uint64_t)&v363, (uint64_t)&v356, (uint64_t)&v359) & 1) == 0)
      {
        v357 = 0;
        v105 = v104 + v104;
        *((double *)&v360 + 1) = v105;
        if ((sub_239BF9BFC(&v376, &v379, (uint64_t)&v363, (uint64_t)&v356, (uint64_t)&v359) & 1) == 0)
        {
          v180 = 0;
          v357 = 0;
          *((double *)&v360 + 1) = v105 + v105;
          if (!v309)
            goto LABEL_230;
          goto LABEL_229;
        }
      }
    }
  }
LABEL_150:
  v354 = 0;
  v353 = 0;
  v355 = 0;
  v351 = 0;
  v350 = 0;
  v352 = 0;
  v106 = (char *)v374 - (char *)v373;
  if (v374 != v373)
  {
    if ((unint64_t)v106 > 0x5555555555555550)
      sub_2394189F8();
    v107 = v106 >> 3;
    v108 = 24 * (v106 >> 3);
    v353 = operator new(v108);
    v354 = (char *)v353;
    v355 = (char *)v353 + 24 * v107;
    v350 = operator new(v108);
    v351 = (char *)v350;
    v352 = (char *)v350 + 24 * v107;
  }
  v109 = v357;
  if (v357)
  {
    for (i = 0; i < v109; ++i)
    {
      if (((*(_QWORD *)((char *)v356 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v113 = (char *)v379 + 24 * i;
        v114 = v354;
        if (v354 >= v355)
        {
          v117 = v353;
          v118 = 0xAAAAAAAAAAAAAAABLL * ((v354 - (_BYTE *)v353) >> 3);
          v119 = v118 + 1;
          if (v118 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_353;
          if (0x5555555555555556 * ((v355 - (_BYTE *)v353) >> 3) > v119)
            v119 = 0x5555555555555556 * ((v355 - (_BYTE *)v353) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v355 - (_BYTE *)v353) >> 3) >= 0x555555555555555)
            v120 = 0xAAAAAAAAAAAAAAALL;
          else
            v120 = v119;
          if (v120)
          {
            if (v120 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_350;
            v121 = (char *)operator new(24 * v120);
          }
          else
          {
            v121 = 0;
          }
          v122 = *(_OWORD *)v113;
          v123 = &v121[24 * v118];
          *((_QWORD *)v123 + 2) = *((_QWORD *)v113 + 2);
          *(_OWORD *)v123 = v122;
          v124 = v123;
          if (v114 != v117)
          {
            do
            {
              v125 = *(_OWORD *)((char *)v114 - 24);
              *((_QWORD *)v124 - 1) = *((_QWORD *)v114 - 1);
              *(_OWORD *)(v124 - 24) = v125;
              v124 -= 24;
              v114 = (_OWORD *)((char *)v114 - 24);
            }
            while (v114 != v117);
            v114 = v353;
          }
          v116 = v123 + 24;
          v353 = v124;
          v354 = v123 + 24;
          v355 = &v121[24 * v120];
          if (v114)
            operator delete(v114);
        }
        else
        {
          v115 = *(_OWORD *)v113;
          *((_QWORD *)v354 + 2) = *((_QWORD *)v113 + 2);
          *v114 = v115;
          v116 = (char *)v114 + 24;
        }
        v354 = v116;
        v126 = &v376->i8[24 * i];
        v127 = v351;
        if (v351 < v352)
        {
          v111 = *(_OWORD *)v126;
          *((_QWORD *)v351 + 2) = *((_QWORD *)v126 + 2);
          *v127 = v111;
          v112 = (char *)v127 + 24;
        }
        else
        {
          v128 = v350;
          v129 = 0xAAAAAAAAAAAAAAABLL * ((v351 - (_BYTE *)v350) >> 3);
          v130 = v129 + 1;
          if (v129 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_353:
            sub_2394189F8();
          if (0x5555555555555556 * ((v352 - (_BYTE *)v350) >> 3) > v130)
            v130 = 0x5555555555555556 * ((v352 - (_BYTE *)v350) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v352 - (_BYTE *)v350) >> 3) >= 0x555555555555555)
            v131 = 0xAAAAAAAAAAAAAAALL;
          else
            v131 = v130;
          if (v131)
          {
            if (v131 > 0xAAAAAAAAAAAAAAALL)
LABEL_350:
              sub_239418A80();
            v132 = (char *)operator new(24 * v131);
          }
          else
          {
            v132 = 0;
          }
          v133 = *(_OWORD *)v126;
          v134 = &v132[24 * v129];
          *((_QWORD *)v134 + 2) = *((_QWORD *)v126 + 2);
          *(_OWORD *)v134 = v133;
          v135 = v134;
          if (v127 != v128)
          {
            do
            {
              v136 = *(_OWORD *)((char *)v127 - 24);
              *((_QWORD *)v135 - 1) = *((_QWORD *)v127 - 1);
              *(_OWORD *)(v135 - 24) = v136;
              v135 -= 24;
              v127 = (_OWORD *)((char *)v127 - 24);
            }
            while (v127 != v128);
            v127 = v350;
          }
          v112 = v134 + 24;
          v350 = v135;
          v352 = &v132[24 * v131];
          if (v127)
            operator delete(v127);
        }
        v351 = v112;
        v109 = v357;
      }
    }
  }
  sub_239E20BF0((uint64_t)&v353, (uint64_t)&v335, (uint64_t)&v324, 0, 0, 1.0, 0.0);
  v137.f64[0] = v336;
  _Q2.f64[0] = v325;
  _Q3.f64[1] = v324.f64[1];
  v139 = vsubq_f64(v137, _Q2);
  _Q1 = vsubq_f64(v335, v324);
  _Q3.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  v142 = vmlad_n_f64(_Q2.f64[0], v139.f64[0], v139.f64[0]);
  v143 = sqrt(v142);
  if (v143 < 0.00000001)
  {
    if (v309)
      *(_BYTE *)(a6 + 353) = 0;
LABEL_217:
    v175 = 1;
    v176 = v350;
    if (!v350)
      goto LABEL_219;
LABEL_218:
    operator delete(v176);
    goto LABEL_219;
  }
  if (sub_239BFA324((float64x2_t **)&v350, (float64x2_t **)&v353, (uint64_t)&v363, 0, v139, _Q1.f64[0], v142, _Q3))
  {
    for (j = *(_QWORD **)(a2 + 88); j; j = (_QWORD *)*j)
      v144.f64[0] = sub_2396F774C((uint64_t)(j + 3), (uint64_t)&v363, (int64x2_t)v144);
    v147 = *(uint64_t **)(a2 + 48);
    if (v147)
    {
      *(_QWORD *)&v144.f64[0] = v363;
      *(_QWORD *)&v148.f64[0] = v363;
      *(_QWORD *)&v148.f64[1] = v363;
      do
      {
        v149.f64[1] = *(float64_t *)&v365[16];
        _D5 = *(_QWORD *)&v365[24];
        v151 = *((double *)v147 + 5);
        _Q17 = *(float64x2_t *)(v147 + 3);
        __asm { FMLA            D2, D5, V17.D[1] }
        _Q2.f64[0] = _Q2.f64[0] + v367 * v151;
        v149.f64[0] = v369;
        *(float64x2_t *)(v147 + 3) = vmlaq_f64(v368, v148, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v364, _Q17.f64[0]), *(float64x2_t *)&v365[8], _Q17, 1), v366, v151));
        v147[5] = *(_OWORD *)&vmlaq_f64(v149, v144, _Q2);
        v147 = (uint64_t *)*v147;
      }
      while (v147);
    }
    if ((v16 & 0x80000000) == 0)
    {
      v348 = 0;
      __p = 0;
      v349 = 0;
      sub_239BFCC14(*(uint64_t **)(a2 + 88), v16, (uint64_t)&__p);
      v153 = (uint64_t *)__p;
      if (__p != v348)
      {
        v154 = (char *)__p + 8;
        if ((char *)__p + 8 != v348)
        {
          v155 = *(_QWORD *)__p;
          v156 = (char *)__p + 8;
          do
          {
            v158 = *(_QWORD *)v156;
            v156 += 8;
            v157 = v158;
            if (v158 < v155)
            {
              v155 = v157;
              v153 = (uint64_t *)v154;
            }
            v154 = v156;
          }
          while (v156 != v348);
        }
      }
      v159 = *v153;
      v160 = sub_239470FCC(a1, *v153);
      sub_2395F81B8((uint64_t)&v335, (uint64_t)v160);
      if (*(_BYTE *)(a3 + 505) && v345 && v346)
      {
        v298 = v338;
        v278 = v340;
        v276 = v339;
        v305 = v342;
        v290 = v337;
        v294 = v341;
        v285 = v344;
        v281 = v343;
        v161 = sub_2395D7BEC(a2, v159);
        sub_239BFCFA0((uint64_t)&v324, (uint64_t)v161);
        v162 = v290;
        *(_QWORD *)&v163.f64[0] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
        _D1 = vextq_s8(v294, v294, 8uLL).u64[0];
        _Q20 = v281;
        *(_QWORD *)&v162.f64[1] = v276.i64[0];
        *(_QWORD *)&v163.f64[1] = vextq_s8(v276, v276, 8uLL).u64[0];
        v166.f64[0] = v298;
        v166.f64[1] = v278;
        *(_QWORD *)&_Q20.f64[1] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
        __asm { FMLS            D5, D1, V20.D[1] }
        _D22 = v305;
        _D21 = v285;
        __asm { FMLS            D5, D22, V21.D[0] }
        v171 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v162, vnegq_f64(_Q20).f64[0]), v163, _Q20, 1), v166, v285, 0);
        _Q5.f64[1] = 1.0;
        v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v162, v333.f64[0]), v163, v333, 1), v166, v334.f64[0]), v171, v334, 1);
        v323[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v162, v327.f64[0]), v163, v327, 1), v166, v328.f64[0]), v171, v328, 1);
        v323[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v294.u64[0], v327.f64[0]), (float64x2_t)_D1, v327, 1), (float64x2_t)v305, v328.f64[0]), _Q5, v328, 1);
        v323[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v162, v329.f64[0]), v163, v329, 1), v166, v330.f64[0]), v171, v330, 1);
        v323[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v294.u64[0], v329.f64[0]), (float64x2_t)_D1, v329, 1), (float64x2_t)v305, v330.f64[0]), _Q5, v330, 1);
        v323[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v162, v331.f64[0]), v163, v331, 1), v166, v332.f64[0]), v171, v332, 1);
        v323[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v294.u64[0], v331.f64[0]), (float64x2_t)_D1, v331, 1), (float64x2_t)v305, v332.f64[0]), _Q5, v332, 1);
        v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v294.u64[0], v333.f64[0]), (float64x2_t)_D1, v333, 1), (float64x2_t)v305, v334.f64[0]), _Q5, v334, 1);
        v306 = v172;
        v323[6] = v172;
        *(float64x2_t *)v299 = v173;
        v323[7] = v173;
        sub_239BFD078((uint64_t)v312, v323);
        v315 = 0x3FF0000000000000;
        v317 = v312[1];
        v318 = v312[2];
        v319 = v313;
        v320 = v314;
        v316 = v312[0];
        v321 = v306;
        v322 = v299[0];
        sub_239BFD274(a2, (uint64_t)&v315, *(int64x2_t *)v299, *(double *)v312, v313);
        free(v326);
      }
      sub_2395D4668((uint64_t)&v335);
      if (__p)
      {
        v348 = (char *)__p;
        operator delete(__p);
      }
    }
    if (v309)
    {
      v174 = (double)(0xAAAAAAAAAAAAAAABLL * ((v354 - (_BYTE *)v353) >> 3))
           / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v380 - (char *)v379) >> 3));
      *(_QWORD *)(a6 + 232) = *((_QWORD *)&v360 + 1);
      *(double *)(a6 + 240) = v174;
    }
    goto LABEL_217;
  }
  v175 = 0;
  v176 = v350;
  if (v350)
    goto LABEL_218;
LABEL_219:
  if (v353)
  {
    v354 = (char *)v353;
    operator delete(v353);
  }
  if (v143 < 0.00000001)
  {
LABEL_259:
    v93 = 0;
    v102 = v356;
    if (v356)
      goto LABEL_273;
    goto LABEL_127;
  }
  if (!v175)
  {
    v180 = 0;
    if (!v309)
      goto LABEL_230;
    goto LABEL_229;
  }
  if (*(double *)(a3 + 576) <= 0.0)
    goto LABEL_345;
  v335 = 0uLL;
  v336 = 0.0;
  v177 = v373;
  v178 = v374;
  if (v373 != v374)
  {
    v300 = 0;
    v307 = 0.0;
    v179 = 0.0;
LABEL_281:
    v224 = *v177;
    v225 = sub_239470FCC(a1, *v177);
    v226 = *(_QWORD *)(a2 + 80);
    if (!v226)
      goto LABEL_280;
    v227 = v225;
    v228 = (uint8x8_t)vcnt_s8((int8x8_t)v226);
    v228.i16[0] = vaddlv_u8(v228);
    if (v228.u32[0] > 1uLL)
    {
      v229 = v224;
      if (v226 <= v224)
        v229 = v224 % v226;
    }
    else
    {
      v229 = ((_DWORD)v226 - 1) & v224;
    }
    v230 = *(uint64_t ***)(*(_QWORD *)(a2 + 72) + 8 * v229);
    if (!v230)
      goto LABEL_280;
    v231 = *v230;
    if (!v231)
      goto LABEL_280;
    if (v228.u32[0] < 2uLL)
    {
      v232 = v226 - 1;
      while (1)
      {
        v234 = v231[1];
        if (v234 == v224)
        {
          if (*((_DWORD *)v231 + 4) == (_DWORD)v224)
            goto LABEL_302;
        }
        else if ((v234 & v232) != v229)
        {
          goto LABEL_280;
        }
        v231 = (uint64_t *)*v231;
        if (!v231)
          goto LABEL_280;
      }
    }
    while (1)
    {
      v233 = v231[1];
      if (v233 == v224)
      {
        if (*((_DWORD *)v231 + 4) == (_DWORD)v224)
        {
LABEL_302:
          v235 = sub_2395D7BEC(a2, v224);
          v237 = (*((_BYTE *)v227 + 232) == 2 || *((_BYTE *)v227 + 237) != 0) && *((_BYTE *)v235 + 232) == 2;
          if (!v237 || v14 && !*((_BYTE *)v227 + 239))
            goto LABEL_280;
          if ((v16 & 0x80000000) == 0 && *((_DWORD *)v227 + 49) != v16)
            goto LABEL_280;
          v291 = *((double *)v227 + 10);
          v279 = *((float64x2_t *)v227 + 4);
          v282 = *((double *)v227 + 14);
          v295 = *((double *)v227 + 18);
          v286 = *((float64x2_t *)v227 + 8);
          *(_QWORD *)&v238.f64[1] = v227[17];
          *(_QWORD *)&v238.f64[0] = v227[22];
          v275 = v238;
          v277 = *((float64x2_t *)v227 + 6);
          v274 = *((float64x2_t *)v227 + 10);
          v239 = sub_239BF5CF4(a2, v224);
          v241 = v277;
          v240 = v279;
          *(_QWORD *)&v242.f64[0] = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u64[0];
          _D2 = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u64[0];
          v244 = v274;
          *(_QWORD *)&v244.f64[1] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
          _Q3 = vsubq_f64((float64x2_t)0, v244);
          *(_QWORD *)&v244.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v275);
          v240.f64[1] = v277.f64[0];
          *(_QWORD *)&v242.f64[1] = vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u64[0];
          v246 = vmlaq_laneq_f64(vmulq_n_f64(v240, _Q3.f64[0]), v242, _Q3, 1);
          v242.f64[0] = v291;
          v242.f64[1] = v282;
          v247 = vmlaq_n_f64(v246, v242, v244.f64[0]);
          _Q0 = vmulq_f64(v286, _Q3);
          __asm { FMLA            D0, D2, V3.D[1] }
          _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v295, v244.f64[0]);
          *(_QWORD *)&v249.f64[0] = v239[10];
          _Q6 = *((float64x2_t *)v239 + 8);
          *(_QWORD *)&v241.f64[0] = v239[22];
          *(_QWORD *)&v241.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v241);
          v251 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v239 + 10));
          *(_QWORD *)&v249.f64[1] = v239[14];
          v252 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v239 + 4), *((int64x2_t *)v239 + 6)), v251.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v239 + 4), *((int64x2_t *)v239 + 6)), v251, 1), v249, v241.f64[0]);
          _Q1 = vmulq_f64(_Q6, v251);
          _D2 = v251.f64[1];
          __asm { FMLA            D1, D2, V6.D[1] }
          _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *((double *)v239 + 18), v241.f64[0]);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q0, _Q1);
          _Q3.f64[0] = vsubq_f64(v247, v252).f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          if (sqrt(vmlad_n_f64(_D2, _Q0.f64[0], _Q0.f64[0])) <= *(double *)(a3 + 576))
            goto LABEL_280;
          sub_239BFD31C((uint64_t *)a2, v224, 3uLL);
          if (*(_QWORD *)&v179 < *(_QWORD *)&v307)
          {
            **(_QWORD **)&v179 = v224;
            *(_QWORD *)&v223 = *(_QWORD *)&v179 + 8;
            goto LABEL_279;
          }
          v256 = (char *)(*(_QWORD *)&v179 - (_QWORD)v300);
          v257 = (uint64_t)(*(_QWORD *)&v179 - (_QWORD)v300) >> 3;
          v258 = v257 + 1;
          if ((unint64_t)(v257 + 1) >> 61)
            sub_2394189F8();
          if ((uint64_t)(*(_QWORD *)&v307 - (_QWORD)v300) >> 2 > v258)
            v258 = (uint64_t)(*(_QWORD *)&v307 - (_QWORD)v300) >> 2;
          if (*(_QWORD *)&v307 - (_QWORD)v300 >= 0x7FFFFFFFFFFFFFF8uLL)
            v259 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v259 = v258;
          if (v259)
          {
            if (v259 >> 61)
              sub_239418A80();
            v260 = v259;
            v261 = operator new(8 * v259);
            v259 = v260;
            v256 = (char *)(*(_QWORD *)&v179 - (_QWORD)v300);
          }
          else
          {
            v261 = 0;
          }
          v262 = (unint64_t *)((char *)v261 + 8 * v257);
          *v262 = v224;
          *(_QWORD *)&v223 = v262 + 1;
          v263 = v300;
          if (*(unint64_t **)&v179 == v300)
            goto LABEL_330;
          v264 = *(_QWORD *)&v179 - 8 - (_QWORD)v300;
          if (v264 < 0x168
            || &v256[(_QWORD)v261 - 8 - (v264 & 0xFFFFFFFFFFFFFFF8)] > &v256[(_QWORD)v261 - 8]
            || *(_QWORD *)&v179 - 8 - (v264 & 0xFFFFFFFFFFFFFFF8) > *(_QWORD *)&v179 - 8)
          {
            v265 = v179;
            v263 = v300;
          }
          else
          {
            v267 = v259;
            if (*(_QWORD *)&v179 - (unint64_t)&v256[(_QWORD)v261] < 0x20)
            {
              v265 = v179;
              v263 = v300;
              goto LABEL_329;
            }
            v268 = (v264 >> 3) + 1;
            *(_QWORD *)&v265 = *(_QWORD *)&v179 - 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
            v269 = (char *)v261 + 8 * ((uint64_t)(*(_QWORD *)&v179 - (_QWORD)v300) >> 3) - 16;
            v270 = (__int128 *)(*(_QWORD *)&v179 - 16);
            v271 = v268 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v272 = *v270;
              *(v269 - 1) = *(v270 - 1);
              *v269 = v272;
              v269 -= 2;
              v270 -= 2;
              v271 -= 4;
            }
            while (v271);
            v262 -= v268 & 0x3FFFFFFFFFFFFFFCLL;
            v263 = v300;
            v259 = v267;
            if (v268 == (v268 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_330:
              *(_QWORD *)&v335.f64[0] = v262;
              v335.f64[1] = v223;
              *(_QWORD *)&v307 = (char *)v261 + 8 * v259;
              v336 = v307;
              if (v263)
                operator delete(v263);
              v300 = v262;
LABEL_279:
              v335.f64[1] = v223;
              v179 = v223;
LABEL_280:
              if (++v177 != v178)
                goto LABEL_281;
              v222 = v335.f64[0];
              if (v309)
              {
LABEL_342:
                v273 = *(void **)(a6 + 176);
                *(_QWORD *)(a6 + 168) = (uint64_t)(*(_QWORD *)&v179 - *(_QWORD *)&v222) >> 3;
                if (v273)
                {
                  *(_QWORD *)(a6 + 184) = v273;
                  operator delete(v273);
                  *(_QWORD *)(a6 + 176) = 0;
                  *(_QWORD *)(a6 + 184) = 0;
                  *(_QWORD *)(a6 + 192) = 0;
                }
                *(float64_t *)(a6 + 176) = v222;
                *(float64_t *)(a6 + 184) = v179;
                *(float64_t *)(a6 + 192) = v336;
              }
              else if (*(_QWORD *)&v335.f64[0])
              {
                operator delete(*(void **)&v335.f64[0]);
              }
              goto LABEL_345;
            }
          }
          do
          {
LABEL_329:
            v266 = *(_QWORD *)(*(_QWORD *)&v265 - 8);
            *(_QWORD *)&v265 -= 8;
            *--v262 = v266;
          }
          while (*(unint64_t **)&v265 != v263);
          goto LABEL_330;
        }
      }
      else
      {
        if (v233 >= v226)
          v233 %= v226;
        if (v233 != v229)
          goto LABEL_280;
      }
      v231 = (uint64_t *)*v231;
      if (!v231)
        goto LABEL_280;
    }
  }
  if (v309)
  {
    v179 = 0.0;
    v222 = 0.0;
    goto LABEL_342;
  }
LABEL_345:
  v180 = 1;
  if (v309)
LABEL_229:
    *(_BYTE *)(a6 + 353) = v180;
LABEL_230:
  if (!v180)
    goto LABEL_259;
  if (a5)
  {
    *(_QWORD *)a4 = v363;
    memmove((void *)(a4 + 8), &v364, 0x48uLL);
    v181 = v369;
    *(float64x2_t *)(a4 + 80) = v368;
    *(float64_t *)(a4 + 96) = v181;
  }
  if (!v309)
    goto LABEL_272;
  v183 = v370;
  v182 = v371;
  v336 = 0.0;
  v335 = 0uLL;
  v184 = v371 - v370;
  v185 = (v371 - v370) >> 3;
  if (v371 == v370)
  {
    v189 = 0;
    v186 = 0;
    v212 = 0.0;
    v183 = v371;
    v214 = a6;
    goto LABEL_269;
  }
  if ((v184 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v186 = (char *)operator new(v371 - v370);
  *(_QWORD *)&v335.f64[0] = v186;
  *(_QWORD *)&v336 = &v186[8 * v185];
  bzero(v186, v184);
  v188 = 0;
  v189 = (double *)&v186[v184];
  while (2)
  {
    v198 = *(_QWORD *)&v183[8 * v188];
    v199 = &v379->f64[3 * v188];
    _Q0.f64[0] = v199[2];
    v308 = *(float64x2_t *)v199;
    v310 = _Q0;
    v200 = sub_239BF5CF4(a2, v198);
    v202 = *(int8x8_t *)(a6 + 560);
    if (!*(_QWORD *)&v202)
      goto LABEL_349;
    v203 = (uint8x8_t)vcnt_s8(v202);
    v203.i16[0] = vaddlv_u8(v203);
    if (v203.u32[0] > 1uLL)
    {
      v204 = v198;
      if (v198 >= *(_QWORD *)&v202)
        v204 = v198 % *(_QWORD *)&v202;
    }
    else
    {
      v204 = (*(_QWORD *)&v202 - 1) & v198;
    }
    v205 = *(_QWORD **)(*(_QWORD *)(a6 + 552) + 8 * v204);
    if (!v205 || (v206 = (_QWORD *)*v205) == 0)
    {
LABEL_349:
      sub_239A444D4((uint64_t)"unknown file", 1600, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    _Q1 = *((float64x2_t *)v200 + 8);
    if (v203.u32[0] < 2uLL)
    {
      v209 = *(_QWORD *)&v202 - 1;
      while (1)
      {
        v211 = v206[1];
        if (v211 == v198)
        {
          if (v206[2] == v198)
            goto LABEL_237;
        }
        else if ((v211 & v209) != v204)
        {
          goto LABEL_349;
        }
        v206 = (_QWORD *)*v206;
        if (!v206)
          goto LABEL_349;
      }
    }
    while (2)
    {
      v210 = v206[1];
      if (v210 != v198)
      {
        if (v210 >= *(_QWORD *)&v202)
          v210 %= *(_QWORD *)&v202;
        if (v210 != v204)
          goto LABEL_349;
        goto LABEL_248;
      }
      if (v206[2] != v198)
      {
LABEL_248:
        v206 = (_QWORD *)*v206;
        if (!v206)
          goto LABEL_349;
        continue;
      }
      break;
    }
LABEL_237:
    v190 = v308;
    *(_QWORD *)&v201.f64[0] = v200[22];
    *(_QWORD *)&v191 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v201);
    v192 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v200 + 10));
    *(_QWORD *)&v208.f64[1] = v200[14];
    *(_QWORD *)&v208.f64[0] = v200[10];
    v193 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v200 + 4), *((int64x2_t *)v200 + 6)), v192.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v200 + 4), *((int64x2_t *)v200 + 6)), v192, 1), v208, v191);
    _Q2 = vmulq_f64(_Q1, v192);
    _D3 = v192.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *((double *)v200 + 18), v191);
    *(_QWORD *)&v193.f64[1] = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u64[0];
    *(_QWORD *)&v190.f64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u64[0];
    _Q0 = vsubq_f64(v190, v193);
    *(_QWORD *)&v196 = *(_OWORD *)&vsubq_f64(v310, _Q2);
    _D3 = _Q0.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    _Q0.f64[0] = sqrt(vmlad_n_f64(_Q2.f64[0], v196, v196));
    v206[9] = *(_QWORD *)&_Q0.f64[0];
    *(float64_t *)&v186[8 * v188++] = _Q0.f64[0];
    v183 = v370;
    v182 = v371;
    v185 = (v371 - v370) >> 3;
    if (v188 < v185)
      continue;
    break;
  }
  v212 = 0.0;
  v213 = (double *)v186;
  v214 = a6;
  if (v184 - 8 < 8)
  {
    do
    {
LABEL_266:
      v218 = *v213++;
      v212 = v212 + v218;
    }
    while (v213 != v189);
  }
  else
  {
    v215 = 0;
    v216 = ((v184 - 8) >> 3) + 1;
    v217 = v216 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v212 = v212 + *(double *)&v186[8 * v215] + *(double *)&v186[8 * v215 + 8];
      v215 += 2;
    }
    while (v217 != v215);
    if (v216 != v217)
    {
      v213 = (double *)&v186[8 * (v216 & 0x3FFFFFFFFFFFFFFELL)];
      goto LABEL_266;
    }
  }
LABEL_269:
  v219 = (double *)&v186[8 * (v185 >> 1)];
  if (v219 != v189)
  {
    sub_2395F71EC((double *)v186, v219, v189);
    v183 = v370;
    v182 = v371;
  }
  v220 = v182 - v183;
  v221 = *(_QWORD *)&v186[(v220 >> 1) & 0xFFFFFFFFFFFFFFF8];
  *(double *)(v214 + 152) = v212 / (double)(unint64_t)(v220 >> 3);
  *(_QWORD *)(v214 + 160) = v221;
  operator delete(v186);
LABEL_272:
  v93 = 1;
  v102 = v356;
  if (v356)
LABEL_273:
    operator delete(v102);
LABEL_127:
  if (v370)
  {
    v371 = v370;
    operator delete(v370);
  }
  if (v373)
  {
    v374 = v373;
    operator delete(v373);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  return v93;
}

void sub_239BFCA78(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v3;
    operator delete(v3);
  }
  if (STACK[0x4A8])
  {
    operator delete((void *)STACK[0x4A8]);
    v7 = *(void **)(v1 - 208);
    if (!v7)
    {
LABEL_9:
      v4 = *(void **)(v1 - 184);
      if (!v4)
      {
LABEL_10:
        v5 = *(void **)(v1 - 160);
        if (!v5)
        {
LABEL_11:
          v6 = *(void **)(v1 - 136);
          if (!v6)
LABEL_12:
            _Unwind_Resume(a1);
LABEL_6:
          *(_QWORD *)(v1 - 128) = v6;
          operator delete(v6);
          _Unwind_Resume(a1);
        }
LABEL_5:
        *(_QWORD *)(v1 - 152) = v5;
        operator delete(v5);
        v6 = *(void **)(v1 - 136);
        if (!v6)
          goto LABEL_12;
        goto LABEL_6;
      }
LABEL_4:
      *(_QWORD *)(v1 - 176) = v4;
      operator delete(v4);
      v5 = *(void **)(v1 - 160);
      if (!v5)
        goto LABEL_11;
      goto LABEL_5;
    }
  }
  else
  {
    v7 = *(void **)(v1 - 208);
    if (!v7)
      goto LABEL_9;
  }
  *(_QWORD *)(v1 - 200) = v7;
  operator delete(v7);
  v4 = *(void **)(v1 - 184);
  if (!v4)
    goto LABEL_10;
  goto LABEL_4;
}

uint64_t sub_239BFCC14(uint64_t *a1, int a2, uint64_t a3)
{
  char *v4;
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;

  v4 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (a1)
  {
    v6 = a1;
    if ((a2 & 0x80000000) == 0)
    {
      while (1)
      {
        if (*((_BYTE *)v6 + 256) != 2 || *((_DWORD *)v6 + 55) != a2)
          goto LABEL_6;
        v8 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v4 >= v8)
          break;
        *(_QWORD *)v4 = *((unsigned int *)v6 + 4);
        v7 = v4 + 8;
LABEL_5:
        *(_QWORD *)(a3 + 8) = v7;
        v4 = v7;
LABEL_6:
        v6 = (uint64_t *)*v6;
        if (!v6)
          return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      }
      v9 = *(char **)a3;
      v10 = (uint64_t)&v4[-*(_QWORD *)a3];
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        goto LABEL_69;
      v13 = v8 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          goto LABEL_70;
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *v16 = *((unsigned int *)v6 + 4);
      v7 = (char *)(v16 + 1);
      if (v4 == v9)
        goto LABEL_24;
      v17 = v4 - 8 - v9;
      if (v17 < 0x168)
      {
        v18 = v4;
        goto LABEL_23;
      }
      if (&v15[v10 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v10 - 8])
      {
        v18 = v4;
      }
      else
      {
        if (&v4[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] <= v4 - 8)
        {
          if ((unint64_t)(v4 - v15 - v10) < 0x20)
          {
            v18 = v4;
            goto LABEL_23;
          }
          v20 = (v17 >> 3) + 1;
          v18 = &v4[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
          v21 = &v15[8 * v11 - 16];
          v22 = v4 - 16;
          v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          v16 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
          if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_23;
LABEL_24:
          *(_QWORD *)a3 = v16;
          *(_QWORD *)(a3 + 8) = v7;
          *(_QWORD *)(a3 + 16) = &v15[8 * v14];
          if (v9)
            operator delete(v9);
          goto LABEL_5;
        }
        v18 = v4;
      }
      do
      {
LABEL_23:
        v19 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v19;
      }
      while (v18 != v9);
      goto LABEL_24;
    }
    while (1)
    {
      if (*((_BYTE *)v6 + 256) != 2)
        goto LABEL_39;
      v26 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v4 >= v26)
        break;
      *(_QWORD *)v4 = *((unsigned int *)v6 + 4);
      v25 = v4 + 8;
LABEL_38:
      *(_QWORD *)(a3 + 8) = v25;
      v4 = v25;
LABEL_39:
      v6 = (uint64_t *)*v6;
      if (!v6)
        return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    }
    v27 = *(char **)a3;
    v28 = (uint64_t)&v4[-*(_QWORD *)a3];
    v29 = v28 >> 3;
    v30 = (v28 >> 3) + 1;
    if (v30 >> 61)
LABEL_69:
      sub_2394189F8();
    v31 = v26 - (_QWORD)v27;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
LABEL_70:
        sub_239418A80();
      v33 = operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * v29];
    *v34 = *((unsigned int *)v6 + 4);
    v25 = (char *)(v34 + 1);
    if (v4 == v27)
      goto LABEL_56;
    v35 = v4 - 8 - v27;
    if (v35 < 0x168)
    {
      v36 = v4;
      goto LABEL_55;
    }
    if (&v33[v28 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[v28 - 8])
    {
      v36 = v4;
    }
    else
    {
      if (&v4[-(v35 & 0xFFFFFFFFFFFFFFF8) - 8] <= v4 - 8)
      {
        if ((unint64_t)(v4 - v33 - v28) < 0x20)
        {
          v36 = v4;
          goto LABEL_55;
        }
        v38 = (v35 >> 3) + 1;
        v36 = &v4[-8 * (v38 & 0x3FFFFFFFFFFFFFFCLL)];
        v39 = &v33[8 * v29 - 16];
        v40 = v4 - 16;
        v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *(_OWORD *)v40;
          *(v39 - 1) = *((_OWORD *)v40 - 1);
          *v39 = v42;
          v39 -= 2;
          v40 -= 32;
          v41 -= 4;
        }
        while (v41);
        v34 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
        if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_55;
LABEL_56:
        *(_QWORD *)a3 = v34;
        *(_QWORD *)(a3 + 8) = v25;
        *(_QWORD *)(a3 + 16) = &v33[8 * v32];
        if (v27)
          operator delete(v27);
        goto LABEL_38;
      }
      v36 = v4;
    }
    do
    {
LABEL_55:
      v37 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *--v34 = v37;
    }
    while (v36 != v27);
    goto LABEL_56;
  }
  return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

uint64_t sub_239BFCFA0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::bad_alloc *exception;
  std::bad_alloc *v16;
  void *memptr;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(unsigned int *)(a2 + 56);
  v6 = (8 * v5 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v6 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x100BBD03uLL);
  v7 = memptr;
  *(_QWORD *)(a1 + 40) = memptr;
  if (!v7)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v16 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v16, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v5)
    memcpy(v7, *(const void **)(a2 + 40), 8 * v5);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v11 = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  return a1;
}

double sub_239BFD078(uint64_t a1, float64x2_t *a2)
{
  double result;
  float64x2_t v3;
  unint64_t v4;
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v14;
  float64x2_t v21;
  float64x2_t v24;
  int64x2_t v26;
  double v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;

  result = a2[1].f64[0];
  v3 = *a2;
  v4 = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v5 = a2[3].f64[0];
  v6 = a2[2];
  *(_QWORD *)&v7 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v8 = a2[5].f64[0];
  _Q5 = a2[4];
  *(_QWORD *)&v10 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  *(double *)(a1 + 16) = result;
  *(float64x2_t *)a1 = v3;
  *(double *)(a1 + 40) = v5;
  *(float64x2_t *)(a1 + 24) = v6;
  *(double *)(a1 + 64) = v8;
  *(float64x2_t *)(a1 + 48) = _Q5;
  v11 = (float64x2_t)vzip1q_s64((int64x2_t)v3, (int64x2_t)v6);
  v12 = (float64x2_t)vzip2q_s64((int64x2_t)v3, (int64x2_t)v6);
  _Q20.f64[0] = result;
  _Q20.f64[1] = v5;
  v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, v3.f64[0]), v12, v3, 1), _Q20, result);
  _Q21 = (int64x2_t)vmulq_f64(_Q5, v3);
  _D22 = v3.f64[1];
  __asm { FMLA            D21, D22, V5.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v8 * result;
  v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, v6.f64[0]), v12, v6, 1), _Q20, v5);
  _Q23 = (int8x16_t)vmulq_f64(_Q5, v6);
  _D24 = v6.f64[1];
  __asm { FMLA            D23, D24, V5.D[1] }
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + v8 * v5;
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, _Q5.f64[0]), v12, _Q5, 1), _Q20, v8);
  _Q19 = vmulq_f64(_Q5, _Q5);
  _Q20.f64[0] = _Q5.f64[1];
  __asm { FMLA            D19, D20, V5.D[1] }
  _Q19.f64[0] = _Q19.f64[0] + v8 * v8;
  v26 = (int64x2_t)vaddq_f64(v21, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V22.2D, #-1.0 }
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, _Q22));
  _Q19.f64[1] = NAN;
  v28 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v14, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v26, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v26)), vabsq_f64(v24))));
  v29 = -v5;
  if (v28 > 0.0001
    || (v30.f64[0] = v3.f64[0],
        *(_QWORD *)&v30.f64[1] = v4,
        v31.f64[0] = v10,
        v31.f64[1] = _Q5.f64[0],
        v32.f64[0] = v7,
        v32.f64[1] = v6.f64[0],
        v33 = vmulq_f64(v30, vmlaq_n_f64(vmulq_n_f64(v31, v29), v32, v8)),
        fabs(result * (v10 * v6.f64[0] - v7 * _Q5.f64[0])+ vsubq_f64(v33, (float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1)).f64[0]+ -1.0) > 0.0001))
  {
    if (v28 > 0.1
      || (*(_QWORD *)&v3.f64[1] = v4,
          v34.f64[0] = v10,
          v34.f64[1] = _Q5.f64[0],
          v35 = vmulq_n_f64(v34, v29),
          v36.f64[0] = v7,
          v36.f64[1] = v6.f64[0],
          v37 = vmulq_f64(v3, vmlaq_n_f64(v35, v36, v8)),
          fabs(result * (v10 * v6.f64[0] - v7 * _Q5.f64[0])+ vsubq_f64(v37, (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)).f64[0]+ -1.0) > 0.1))
    {
      sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    return sub_239516070((float64x2_t *)a1);
  }
  return result;
}

double sub_239BFD274(uint64_t a1, uint64_t a2, int64x2_t _Q0, double a4, float64x2_t _Q2)
{
  _QWORD *i;
  uint64_t *j;
  float64x2_t v9;
  double v10;
  float64x2_t v12;

  for (i = *(_QWORD **)(a1 + 88); i; i = (_QWORD *)*i)
    *(double *)_Q0.i64 = sub_2396F774C((uint64_t)(i + 3), a2, _Q0);
  for (j = *(uint64_t **)(a1 + 48); j; j = (uint64_t *)*j)
  {
    _Q2.f64[0] = *(float64_t *)(a2 + 48);
    v9 = *(float64x2_t *)(a2 + 32);
    v10 = *((double *)j + 5);
    _Q7 = *(float64x2_t *)(j + 3);
    v12 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 8), _Q7.f64[0]), v9, _Q7, 1), *(float64x2_t *)(a2 + 56), v10);
    __asm { FMLA            D0, D2, V7.D[1] }
    *(double *)_Q0.i64 = *(double *)_Q0.i64 + *(double *)(a2 + 72) * v10;
    _Q2.f64[0] = *(float64_t *)a2;
    v9.f64[0] = *(float64_t *)(a2 + 96);
    *(float64x2_t *)(j + 3) = vmlaq_n_f64(*(float64x2_t *)(a2 + 80), v12, *(double *)a2);
    j[5] = *(_OWORD *)&vmlaq_f64(v9, _Q2, (float64x2_t)_Q0);
  }
  return *(double *)_Q0.i64;
}

void sub_239BFD31C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  *((_BYTE *)sub_2395D7BEC((uint64_t)a1, a2) + 232) = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_2394A0AE8(a1, a2, (uint64_t)&v27, 1);
  v6 = v27;
  v7 = v28;
  if (v27 == v28)
    goto LABEL_31;
  do
  {
    v8 = *v6;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    sub_239BFD550(a1, v8, (uint64_t)&v24);
    v9 = v24;
    v10 = v25;
    if ((char *)v25 - (char *)v24 != 8 && (((char *)v25 - (char *)v24) >> 3) - 1 >= a3)
    {
      if (v24 != v25)
      {
        v18 = *a1;
        v19 = (a1[1] - *a1) >> 6;
        v20 = v24;
        while (1)
        {
          v21 = *v20;
          if (v19 <= v21)
            break;
          if (v21 == 0xFFFFFFFF || *(_DWORD *)(v18 + (v21 << 6)) == -1)
            break;
          v23 = v18 + (v21 << 6);
          if (*(_QWORD *)(v23 + 16) == a2)
            *(_BYTE *)(v23 + 59) = 1;
          v20 += 2;
          if (v20 == v10)
            goto LABEL_28;
        }
LABEL_34:
        sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v9 = v25;
    }
    else
    {
      *((_BYTE *)sub_2395D7CD8((uint64_t)a1, v8) + 27) = 1;
      v9 = v24;
      v12 = v25;
      if (v24 != v25)
      {
        v13 = *a1;
        v14 = (a1[1] - *a1) >> 6;
        v15 = v24;
        do
        {
          v16 = *v15;
          if (v14 <= v16)
            goto LABEL_34;
          if (v16 == 0xFFFFFFFF || *(_DWORD *)(v13 + (v16 << 6)) == -1)
            goto LABEL_34;
          *(_BYTE *)(v13 + (v16 << 6) + 59) = 1;
          v15 += 2;
        }
        while (v15 != v12);
      }
    }
LABEL_28:
    if (v9)
    {
      v25 = v9;
      operator delete(v9);
    }
    ++v6;
  }
  while (v6 != v7);
  v6 = v27;
LABEL_31:
  if (v6)
  {
    v28 = v6;
    operator delete(v6);
  }
}

void sub_239BFD4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239BFD550(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t **i;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  unint64_t *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;

  v3 = *(unint64_t **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = a1[5];
  if (!v4)
    return 0;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v4 <= a2)
      v8 = a2 % v4;
  }
  else
  {
    v8 = ((_DWORD)v4 - 1) & a2;
  }
  v9 = *(uint64_t ***)(a1[4] + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (!*v9)
    return 0;
  if (v7.u32[0] < 2uLL)
  {
    v11 = v4 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == a2)
      {
        if (*((_DWORD *)v10 + 4) == a2)
          goto LABEL_23;
      }
      else if ((v13 & v11) != v8)
      {
        return 0;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return 0;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == a2)
      break;
    if (v12 >= v4)
      v12 %= v4;
    if (v12 != v8)
      return 0;
LABEL_11:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return 0;
  }
  if (*((_DWORD *)v10 + 4) != a2)
    goto LABEL_11;
LABEL_23:
  v15 = v10[17];
  if (v15 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 3)
  {
    if (v15 >> 61)
LABEL_58:
      sub_2394189F8();
    v16 = 8 * v15;
    v17 = (char *)operator new(8 * v15);
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v17;
    *(_QWORD *)(a3 + 16) = &v17[v16];
    if (v3)
      operator delete(v3);
  }
  for (i = (uint64_t **)v10[16]; i; i = (uint64_t **)*i)
  {
    v20 = *((unsigned int *)i + 5);
    v21 = *a1;
    if (v20 < (a1[1] - *a1) >> 6)
    {
      v22 = *(_DWORD *)(v21 + (v20 << 6)) == -1 || (_DWORD)v20 == -1;
      if (!v22 && *(_BYTE *)(v21 + (v20 << 6) + 59) == 2)
      {
        v24 = *(unint64_t **)(a3 + 8);
        v23 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v24 < v23)
        {
          *v24 = v20;
          v19 = v24 + 1;
        }
        else
        {
          v25 = *(unint64_t **)a3;
          v26 = (uint64_t)v24 - *(_QWORD *)a3;
          v27 = v26 >> 3;
          v28 = (v26 >> 3) + 1;
          if (v28 >> 61)
            goto LABEL_58;
          v29 = v23 - (_QWORD)v25;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 >> 61)
              sub_239418A80();
            v31 = operator new(8 * v30);
          }
          else
          {
            v31 = 0;
          }
          v32 = (unint64_t *)&v31[8 * v27];
          *v32 = v20;
          v19 = v32 + 1;
          if (v24 != v25)
          {
            v33 = (char *)(v24 - 1) - (char *)v25;
            if (v33 < 0x58)
              goto LABEL_62;
            if ((unint64_t)((char *)v24 - &v31[v26]) < 0x20)
              goto LABEL_62;
            v34 = (v33 >> 3) + 1;
            v35 = &v31[8 * v27 - 16];
            v36 = v24 - 2;
            v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 4;
              v37 -= 4;
            }
            while (v37);
            v32 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
            v24 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
            if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_62:
              do
              {
                v39 = *--v24;
                *--v32 = v39;
              }
              while (v24 != v25);
            }
          }
          *(_QWORD *)a3 = v32;
          *(_QWORD *)(a3 + 8) = v19;
          *(_QWORD *)(a3 + 16) = &v31[8 * v30];
          if (v25)
            operator delete(v25);
        }
        *(_QWORD *)(a3 + 8) = v19;
      }
    }
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  return 1;
}

void sub_239BFD83C(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void **v11;
  __int128 v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  void **v21;
  void **v22;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556)
      sub_2394189F8();
    v4 = *(void ***)(a1 + 8);
    v5 = 192 * a2;
    v6 = (char *)operator new(192 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 * 8];
        v11 = &v4[v9];
        v12 = *(_OWORD *)&v4[v9 - 22];
        *((_OWORD *)v10 - 12) = *(_OWORD *)&v4[v9 - 24];
        *((_OWORD *)v10 - 11) = v12;
        *(v10 - 160) = (char)v4[v9 - 20];
        v13 = v4[v9 - 18];
        *((_QWORD *)v10 - 19) = v4[v9 - 19];
        *((_QWORD *)v10 - 18) = v13;
        *(v11 - 19) = 0;
        *(v11 - 18) = 0;
        *((_DWORD *)v10 - 34) = v4[v9 - 17];
        *((_DWORD *)v11 - 34) = 0;
        v14 = *(_OWORD *)&v4[v9 - 16];
        v15 = *(_OWORD *)&v4[v9 - 14];
        v16 = *(_OWORD *)&v4[v9 - 10];
        *((_OWORD *)v10 - 6) = *(_OWORD *)&v4[v9 - 12];
        *((_OWORD *)v10 - 5) = v16;
        *((_OWORD *)v10 - 8) = v14;
        *((_OWORD *)v10 - 7) = v15;
        v17 = *(_OWORD *)&v4[v9 - 8];
        v18 = *(_OWORD *)&v4[v9 - 6];
        v19 = *(_OWORD *)&v4[v9 - 2];
        *((_OWORD *)v10 - 2) = *(_OWORD *)&v4[v9 - 4];
        *((_OWORD *)v10 - 1) = v19;
        *((_OWORD *)v10 - 4) = v17;
        *((_OWORD *)v10 - 3) = v18;
        v9 -= 24;
      }
      while (&v4[v9] != v2);
      v20 = &v8[v9 * 8];
      v2 = *(void ***)a1;
      v21 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v21 != v2)
      {
        do
        {
          v22 = v21 - 24;
          free(*(v21 - 19));
          v21 = v22;
        }
        while (v22 != v2);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

char *sub_239BFD97C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  void **v34;
  BOOL v35;
  std::bad_alloc *exception;
  std::bad_alloc *v38;
  char *v39;
  void *memptr;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6);
  v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 6) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v6 = 0x155555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x155555555555555)
      sub_239418A80();
    v7 = (char *)operator new(192 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[192 * v3];
  v9 = &v7[192 * v6];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v10;
  v8[32] = *(_BYTE *)(a2 + 32);
  v11 = *(unsigned int *)(a2 + 56);
  v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = v12 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x100BBD03uLL);
  v13 = memptr;
  *((_QWORD *)v8 + 5) = memptr;
  if (!v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v38 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v38, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v11)
    memcpy(v13, *(const void **)(a2 + 40), 8 * v11);
  *((_DWORD *)v8 + 14) = *(_DWORD *)(a2 + 56);
  v14 = &v7[192 * v3];
  v15 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v14 + 9) = v15;
  v16 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v14 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v14 + 11) = v16;
  v17 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v14 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v14 + 5) = v17;
  v18 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v14 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v14 + 7) = v18;
  v19 = v8 + 192;
  v39 = v8 + 192;
  v21 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 == *a1)
  {
    v33 = (char *)a1[1];
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = &v20[v22];
      v24 = &v8[v22];
      v25 = *(_OWORD *)&v20[v22 - 176];
      *((_OWORD *)v24 - 12) = *(_OWORD *)&v20[v22 - 192];
      *((_OWORD *)v24 - 11) = v25;
      *(v24 - 160) = v20[v22 - 160];
      *((_QWORD *)v24 - 19) = 0;
      *((_QWORD *)v24 - 18) = 0;
      *((_QWORD *)v24 - 19) = *(_QWORD *)&v20[v22 - 152];
      v26 = *(_QWORD *)&v20[v22 - 144];
      *((_QWORD *)v23 - 19) = 0;
      *((_QWORD *)v24 - 18) = v26;
      *((_QWORD *)v23 - 18) = 0;
      *((_DWORD *)v24 - 34) = *(_DWORD *)&v20[v22 - 136];
      *((_DWORD *)v23 - 34) = 0;
      v27 = *(_OWORD *)&v20[v22 - 128];
      v28 = *(_OWORD *)&v20[v22 - 112];
      v29 = *(_OWORD *)&v20[v22 - 80];
      *((_OWORD *)v24 - 6) = *(_OWORD *)&v20[v22 - 96];
      *((_OWORD *)v24 - 5) = v29;
      *((_OWORD *)v24 - 8) = v27;
      *((_OWORD *)v24 - 7) = v28;
      v30 = *(_OWORD *)&v20[v22 - 64];
      v31 = *(_OWORD *)&v20[v22 - 48];
      v32 = *(_OWORD *)&v20[v22 - 16];
      *((_OWORD *)v24 - 2) = *(_OWORD *)&v20[v22 - 32];
      *((_OWORD *)v24 - 1) = v32;
      *((_OWORD *)v24 - 4) = v30;
      *((_OWORD *)v24 - 3) = v31;
      v22 -= 192;
    }
    while (&v20[v22] != v21);
    v8 += v22;
    v33 = (char *)*a1;
    v20 = (char *)a1[1];
    v19 = v39;
  }
  *a1 = v8;
  a1[1] = v19;
  a1[2] = v9;
  if (v20 != v33)
  {
    v34 = (void **)(v20 - 192);
    do
    {
      free(v34[5]);
      v35 = v34 == (void **)v33;
      v34 -= 24;
    }
    while (!v35);
    v20 = v33;
  }
  if (v20)
    operator delete(v20);
  return v19;
}

void sub_239BFDBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23951A060((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_239BFDC0C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        free(*(v3 - 19));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239BFDC70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v24;
  int64x2_t v25;
  float64x2_t v27;
  double v29;
  double v30;
  __n128 v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v41;
  double v44;
  double v45;
  double cosval;
  double v47;
  __double2 v48;
  float64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64_t v55;
  double v56;
  double v57;
  _QWORD *i;
  uint64_t v59;
  float64x2_t v60;
  double v62;
  double v65;
  unint64_t *v66;
  unint64_t *v67;
  float64_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v78;
  double v79;
  double v80;
  __n128 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  _BYTE *v90;
  _BOOL8 v91;
  float64x2_t v92;
  void *v93;
  float64x2_t v94;
  double v97;
  double v100;
  double v101;
  double v102;
  double v103;
  __double2 v104;
  float64_t v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  float64_t v111;
  double v112;
  double v113;
  _QWORD *j;
  uint64_t v115;
  float64x2_t v116;
  double v118;
  double v121;
  unint64_t *v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  void *v127;
  unint64_t v128;
  uint64_t *v129;
  int64x2_t v130;
  int64x2_t v131;
  uint64_t *v133;
  double v134;
  float64x2_t v138;
  unint64_t v139;
  float64x2_t v140;
  double v141;
  double v142;
  double v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  int64x2_t v152;
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  int8x8_t v168;
  uint8x8_t v169;
  unint64_t v170;
  double **v171;
  double *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  double v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  int64_t v182;
  int64_t v183;
  unint64_t v184;
  int64_t v185;
  unint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  double *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  char *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  double *v199;
  double *v200;
  unint64_t v201;
  double *v202;
  unint64_t v203;
  double v204;
  double *v205;
  uint64_t v206;
  double *v207;
  uint64_t v208;
  double v209;
  unsigned __int8 v210;
  double v211;
  float64x2_t v212;
  unint64_t *v213;
  float64x2_t v214;
  double v215;
  float64x2_t v216;
  float64x2_t v217;
  float64_t v218;
  float64x2_t v219;
  float64_t v220;
  float64x2_t v221;
  double v222;
  float64x2_t v223;
  double v224;
  void *v225[2];
  _BYTE v226[32];
  float64x2_t v227;
  __int128 v228;
  uint64_t v229;
  void *__p;
  _BYTE *v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t *v234;
  uint64_t v235;
  int64x2_t v236;
  double v237;
  float64x2_t v238;
  unint64_t v239;
  float64x2_t v240;
  double v241;
  char v242;
  float64x2_t v243;
  double v244;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  if (*(_BYTE *)(a3 + 507) && (sub_239BFB034(a1, (uint64_t)a2, a3, 0, 0, a4, a5) & 1) != 0)
    return 1;
  __p = 0;
  v231 = 0;
  v232 = 0;
  sub_2394B5624((uint64_t)a2, (uint64_t)&__p, 1);
  v10 = __p;
  v11 = v231;
  if (__p == v231)
  {
    v12 = 0;
    v21 = v5;
    if (v5)
LABEL_9:
      *(_QWORD *)(v6 + 216) = v12;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = sub_2395D7BEC((uint64_t)a2, *v10);
      _Q1 = *((_OWORD *)v13 + 13);
      _D3 = v13[27];
      __asm { FMLA            D2, D3, V1.D[1] }
      if (sqrt(_D2 + *((double *)v13 + 28) * *((double *)v13 + 28)) > 2.22044605e-16)
        ++v12;
      ++v10;
    }
    while (v10 != v11);
    v21 = v5;
    if (v5)
      goto LABEL_9;
  }
  if (!v12)
    goto LABEL_42;
  v9.f64[0] = *(float64_t *)(v7 + 584);
  if (!sub_239BED6A0((uint64_t)a2, (uint64_t)&v243, v9)
    || (sub_239BF4B14((uint64_t)&v236, a2, 0, 0, 0), !v242))
  {
LABEL_38:
    if (v21)
    {
      sub_2394202DC((_QWORD *)(v6 + 592), 4503);
      LOBYTE(v12) = 0;
      *(_BYTE *)(v6 + 354) = 0;
      v90 = __p;
      if (!__p)
        goto LABEL_44;
LABEL_43:
      v231 = v90;
      operator delete(v90);
      goto LABEL_44;
    }
    LOBYTE(v12) = 0;
LABEL_42:
    v90 = __p;
    if (!__p)
      goto LABEL_44;
    goto LABEL_43;
  }
  v22.f64[0] = v244;
  _Q4 = vmulq_f64(v243, (float64x2_t)xmmword_239EC68D0);
  *(_QWORD *)&v24.f64[0] = *(_OWORD *)&vnegq_f64(v22);
  v25 = (int64x2_t)vmulq_f64(v243, (float64x2_t)0);
  *(_QWORD *)&v24.f64[1] = v25.i64[0];
  _Q5 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)vmulq_f64(v22, (float64x2_t)0), 8uLL), v24);
  v27 = vsubq_f64(_Q4, (float64x2_t)vdupq_laneq_s64(v25, 1));
  _Q4.f64[0] = _Q5.f64[1];
  v217 = v27;
  v221 = _Q5;
  __asm { FMLA            D3, D4, V5.D[1] }
  v29 = sqrt(vmlad_n_f64(_D3, v27.f64[0], v27.f64[0]));
  v30 = 0.0;
  v31.n128_f64[0] = atan2(v29, *(double *)v25.i64 - v243.f64[1] + v244 * 0.0);
  v32 = fabs(v31.n128_f64[0] * 180.0 / 3.14159265);
  v33 = 1.0;
  if (v32 >= 0.1)
  {
    if (v32 <= 179.9)
    {
      _Q3 = v221;
      v31.n128_f64[0] = v31.n128_f64[0] * (1.0 / v29);
      *(_QWORD *)&v41 = *(_OWORD *)&vmulq_f64(v217, (float64x2_t)v31);
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
      _Q17 = vmulq_n_f64(_Q3, v31.n128_f64[0]);
      _D11 = _Q17.f64[1];
      __asm { FMLA            D3, D11, V17.D[1] }
      v44 = vmlad_n_f64(_Q3.f64[0], v41, v41);
      if (v44 >= 0.0000002635)
      {
        v47 = sqrt(v44);
        v218 = _Q17.f64[0];
        v222 = v41;
        v211 = v44;
        v48 = __sincos_stret(v47);
        cosval = v48.__cosval;
        _Q17.f64[0] = v218;
        v41 = v222;
        v45 = v48.__sinval / v47;
        v31.n128_f64[0] = 1.0 / v211 * (1.0 - v48.__cosval);
      }
      else
      {
        v31.n128_f64[0] = 0.5 - v44 * (v44 / -720.0 + 0.0416666667);
        v45 = 1.0 - v44 * (0.166666667 - v44 * (v44 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v44 * v31.n128_f64[0];
      }
      v49 = _Q17.f64[0] * v31.n128_f64[0];
      v50 = _D11 * v31.n128_f64[0];
      v51 = v41 * v31.n128_f64[0];
      v33 = cosval + _Q17.f64[0] * v31.n128_f64[0] * _Q17.f64[0];
      v31.n128_f64[0] = cosval + _D11 * v31.n128_f64[0] * _D11;
      v39 = cosval + v51 * v41;
      v52 = _D11 * v49;
      v53 = v41 * v49;
      v54 = v41 * v50;
      v55 = _Q17.f64[0] * v45;
      v56 = _D11 * v45;
      v57 = v41 * v45;
      v35 = v52 - v41 * v45;
      v37 = v56 + v53;
      v30 = v52 + v57;
      v38 = v54 - v55;
      v34 = v53 - v56;
      v36 = v55 + v54;
    }
    else
    {
      v31.n128_u64[0] = -1.0;
      v38 = -1.2246468e-16;
      v36 = 1.2246468e-16;
      v34 = 0.0;
      v35 = 0.0;
      v37 = 0.0;
      v39 = -1.0;
    }
  }
  else
  {
    v34 = 0.0;
    v35 = 0.0;
    v31.n128_u64[0] = 1.0;
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    v39 = 1.0;
  }
  *(double *)v236.i64 = v33;
  *(double *)&v236.i64[1] = v30;
  v237 = v34;
  v238.f64[0] = v35;
  *(_QWORD *)&v238.f64[1] = v31.n128_u64[0];
  v239 = *(_QWORD *)&v36;
  v240.f64[0] = v37;
  v240.f64[1] = v38;
  v241 = v39;
  for (i = (_QWORD *)a2[11]; i; i = (_QWORD *)*i)
    v31 = sub_2396F674C((uint64_t)(i + 3), (uint64_t)&v236, (int64x2_t)v31);
  v59 = a2[6];
  if (v59)
  {
    v60 = (float64x2_t)v236;
    do
    {
      _D2 = v239;
      v62 = *(double *)(v59 + 40);
      _Q7 = *(float64x2_t *)(v59 + 24);
      __asm { FMLA            D3, D2, V7.D[1] }
      v65 = _D3 + v241 * v62;
      *(float64x2_t *)(v59 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, _Q7.f64[0]), v238, _Q7, 1), v240, v62);
      *(double *)(v59 + 40) = v65;
      v59 = *(_QWORD *)v59;
    }
    while (v59);
  }
  v233 = 0;
  v234 = 0;
  v235 = 0;
  sub_2394B5624((uint64_t)a2, (uint64_t)&v233, 1);
  if (v233 == v234)
  {
    if (v233)
    {
      v234 = v233;
      operator delete(v233);
    }
    goto LABEL_38;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v67 = v233;
  v66 = v234;
  if (v233 != v234)
  {
    while (1)
    {
      v68 = (float64_t *)sub_239BF5CF4((uint64_t)a2, *v67);
      v69.f64[0] = v68[18];
      v70.f64[0] = v68[10];
      v70.f64[1] = v68[14];
      v71.f64[0] = 1.0 / sqrt(v70.f64[0] * v70.f64[0] + v70.f64[1] * v70.f64[1] + v69.f64[0] * v69.f64[0]);
      v219 = vmulq_n_f64(v70, v71.f64[0]);
      v223 = vmulq_f64(v69, v71);
      v72 = vmlad_n_f64(vmlad_n_f64(-v219.f64[1], 0.0, v219.f64[0]), 0.0, v223.f64[0]);
      if (acos(fmax(fmin(v72, 1.0), -1.0)) / 3.14159265 * 180.0 >= 5.0
        && acos(fmax(fmin(-v72, 1.0), -1.0)) / 3.14159265 * 180.0 >= 5.0)
      {
        break;
      }
      if (++v67 == v66)
        goto LABEL_74;
    }
    _Q1 = vmulq_f64((float64x2_t)*(unint64_t *)&v219.f64[0], (float64x2_t)xmmword_239EC68E0);
    v74 = vmulq_f64(v223, (float64x2_t)0);
    v75 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)v74, 8uLL);
    _Q0 = (int64x2_t)vmulq_f64((float64x2_t)*(unint64_t *)&v219.f64[0], (float64x2_t)xmmword_239EC68D0);
    *(_QWORD *)&v74.f64[1] = _Q0.i64[0];
    _Q3 = vsubq_f64(v75, v74);
    v78 = vsubq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(_Q0, 1));
    _Q1.f64[0] = _Q3.f64[1];
    v212 = v78;
    v214 = _Q3;
    __asm { FMLA            D0, D1, V3.D[1] }
    v79 = sqrt(vmlad_n_f64(*(double *)_Q0.i64, v78.f64[0], v78.f64[0]));
    v80 = 0.0;
    v81.n128_f64[0] = atan2(v79, vmulq_f64(v219, (float64x2_t)0).f64[0] + 0.0 - v223.f64[0]);
    v82 = fabs(v81.n128_f64[0] * 180.0 / 3.14159265);
    v83 = 1.0;
    if (v82 >= 0.1)
    {
      if (v82 <= 179.9)
      {
        _Q3 = v214;
        v81.n128_f64[0] = v81.n128_f64[0] * (1.0 / v79);
        *(_QWORD *)&v97 = *(_OWORD *)&vmulq_f64(v212, (float64x2_t)v81);
        *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        _Q17 = vmulq_n_f64(_Q3, v81.n128_f64[0]);
        _D11 = _Q17.f64[1];
        __asm { FMLA            D3, D11, V17.D[1] }
        v100 = vmlad_n_f64(_Q3.f64[0], v97, v97);
        if (v100 >= 0.0000002635)
        {
          v103 = sqrt(v100);
          v220 = _Q17.f64[0];
          v224 = v97;
          v215 = v100;
          v104 = __sincos_stret(v103);
          v102 = v104.__cosval;
          _Q17.f64[0] = v220;
          v97 = v224;
          v101 = v104.__sinval / v103;
          v81.n128_f64[0] = 1.0 / v215 * (1.0 - v104.__cosval);
        }
        else
        {
          v81.n128_f64[0] = 0.5 - v100 * (v100 / -720.0 + 0.0416666667);
          v101 = 1.0 - v100 * (0.166666667 - v100 * (v100 / -5040.0 + 0.00833333333));
          v102 = 1.0 - v100 * v81.n128_f64[0];
        }
        v105 = _Q17.f64[0] * v81.n128_f64[0];
        v106 = _D11 * v81.n128_f64[0];
        v107 = v97 * v81.n128_f64[0];
        v83 = v102 + _Q17.f64[0] * v81.n128_f64[0] * _Q17.f64[0];
        v81.n128_f64[0] = v102 + _D11 * v81.n128_f64[0] * _D11;
        v89 = v102 + v107 * v97;
        v108 = _D11 * v105;
        v109 = v97 * v105;
        v110 = v97 * v106;
        v111 = _Q17.f64[0] * v101;
        v112 = _D11 * v101;
        v113 = v97 * v101;
        v85 = v108 - v97 * v101;
        v87 = v112 + v109;
        v80 = v108 + v113;
        v88 = v110 - v111;
        v84 = v109 - v112;
        v86 = v111 + v110;
      }
      else
      {
        v81.n128_u64[0] = -1.0;
        v88 = -1.2246468e-16;
        v86 = 1.2246468e-16;
        v84 = 0.0;
        v85 = 0.0;
        v87 = 0.0;
        v89 = -1.0;
      }
    }
    else
    {
      v84 = 0.0;
      v85 = 0.0;
      v81.n128_u64[0] = 1.0;
      v86 = 0.0;
      v87 = 0.0;
      v88 = 0.0;
      v89 = 1.0;
    }
    v225[0] = *(void **)&v83;
    v225[1] = *(void **)&v80;
    *(double *)v226 = v84;
    *(double *)&v226[8] = v85;
    *(_QWORD *)&v226[16] = v81.n128_u64[0];
    *(double *)&v226[24] = v86;
    v227.f64[0] = v87;
    v227.f64[1] = v88;
    *(double *)&v228 = v89;
    for (j = (_QWORD *)a2[11]; j; j = (_QWORD *)*j)
      v81 = sub_2396F674C((uint64_t)(j + 3), (uint64_t)v225, (int64x2_t)v81);
    v115 = a2[6];
    if (v115)
    {
      v116 = *(float64x2_t *)v225;
      do
      {
        _D2 = *(_QWORD *)&v226[24];
        v118 = *(double *)(v115 + 40);
        _Q7 = *(float64x2_t *)(v115 + 24);
        __asm { FMLA            D3, D2, V7.D[1] }
        v121 = _D3 + *(double *)&v228 * v118;
        *(float64x2_t *)(v115 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, _Q7.f64[0]), *(float64x2_t *)&v226[8], _Q7, 1), v227, v118);
        *(double *)(v115 + 40) = v121;
        v115 = *(_QWORD *)v115;
      }
      while (v115);
    }
LABEL_74:
    v67 = v233;
  }
  if (v67)
  {
    v234 = v67;
    operator delete(v67);
  }
  if (!v21)
    goto LABEL_152;
  v210 = v5;
  v225[0] = 0;
  v225[1] = 0;
  *(_QWORD *)v226 = 0;
  v123 = (unint64_t *)__p;
  v122 = (unint64_t *)v231;
  v124 = v231 - (_BYTE *)__p;
  if (v231 == __p)
  {
    *(_QWORD *)(v6 + 224) = 0;
    *(_BYTE *)(v6 + 354) = 1;
    goto LABEL_152;
  }
  if (v124 < 0)
    sub_2394189F8();
  v125 = 0;
  v225[0] = operator new(v231 - (_BYTE *)__p);
  v225[1] = v225[0];
  *(_QWORD *)v226 = (char *)v225[0] + 8 * (v124 >> 3);
  __asm { FMOV            V0.2D, #-1.0 }
  v216 = _Q0;
  v213 = v122;
  while (2)
  {
    v128 = *v123;
    v129 = sub_2395D7BEC((uint64_t)a2, *v123);
    v133 = v129;
    v134 = *((double *)v129 + 28);
    _Q1 = *((int8x16_t *)v129 + 13);
    _D3 = v129[27];
    __asm { FMLA            D2, D3, V1.D[1] }
    if (sqrt(_D2 + v134 * v134) <= 2.22044605e-16)
      goto LABEL_83;
    v130.i64[0] = v129[10];
    v138 = *((float64x2_t *)v129 + 4);
    v139 = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
    v131.i64[0] = v129[14];
    v140 = *((float64x2_t *)v129 + 6);
    *(_QWORD *)&v141 = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
    v142 = *((double *)v129 + 18);
    _Q2 = *((float64x2_t *)v129 + 8);
    *(_QWORD *)&v144 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    v236 = (int64x2_t)v138;
    v237 = *(double *)v130.i64;
    v239 = v131.i64[0];
    v238 = v140;
    v241 = v142;
    v240 = _Q2;
    v145 = (float64x2_t)vzip1q_s64((int64x2_t)v138, (int64x2_t)v140);
    v146 = (float64x2_t)vzip2q_s64((int64x2_t)v138, (int64x2_t)v140);
    v147 = (float64x2_t)vzip1q_s64(v130, v131);
    _Q23 = (int64x2_t)vmulq_f64(_Q2, v138);
    _D24 = v138.f64[1];
    __asm { FMLA            D23, D24, V2.D[1] }
    *(double *)_Q23.i64 = *(double *)_Q23.i64 + v142 * *(double *)v130.i64;
    _Q25 = (int8x16_t)vmulq_f64(_Q2, v140);
    _Q26.f64[0] = v140.f64[1];
    __asm { FMLA            D25, D26, V2.D[1] }
    _Q26.f64[0] = _Q2.f64[1];
    *(double *)_Q25.i64 = *(double *)_Q25.i64 + v142 * *(double *)v131.i64;
    __asm { FMLA            D28, D26, V2.D[1] }
    _Q26.f64[0] = _D28 + v142 * v142;
    v152 = (int64x2_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v145, v140.f64[0]), v146, v140, 1), v147, *(double *)v131.i64), (float64x2_t)xmmword_239EC6830);
    *(_QWORD *)&v153.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q26, v216));
    v153.f64[1] = NAN;
    v154 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v145, v138.f64[0]), v146, v138, 1), v147, *(double *)v130.i64), (float64x2_t)xmmword_239EC6820)), v153), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v152, _Q25, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q23, v152)), vabsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v145, _Q2.f64[0]), v146, _Q2, 1), v147, v142)))));
    *(double *)v131.i64 = -*(double *)v131.i64;
    if (v154 > 0.0001
      || (v155.f64[0] = v138.f64[0],
          *(_QWORD *)&v155.f64[1] = v139,
          v156.f64[0] = v144,
          v156.f64[1] = _Q2.f64[0],
          v157.f64[0] = v141,
          v157.f64[1] = v140.f64[0],
          v158 = vmulq_f64(v155, vmlaq_n_f64(vmulq_n_f64(v156, *(double *)v131.i64), v157, v142)),
          fabs(*(double *)v130.i64 * (v144 * v140.f64[0] - v141 * _Q2.f64[0])+ vsubq_f64(v158, (float64x2_t)vdupq_laneq_s64((int64x2_t)v158, 1)).f64[0]+ -1.0) > 0.0001))
    {
      if (v154 > 0.1
        || (*(_QWORD *)&v138.f64[1] = v139,
            v163.f64[0] = v144,
            v163.f64[1] = _Q2.f64[0],
            v164.f64[0] = v141,
            v164.f64[1] = v140.f64[0],
            v165 = vmulq_f64(v138, vmlaq_n_f64(vmulq_n_f64(v163, *(double *)v131.i64), v164, v142)),
            fabs(*(double *)v130.i64 * (v144 * v140.f64[0] - v141 * _Q2.f64[0])+ vsubq_f64(v165, (float64x2_t)vdupq_laneq_s64((int64x2_t)v165, 1)).f64[0]+ -1.0) > 0.1))
      {
        sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_239516070((float64x2_t *)&v236);
      v147.f64[0] = v237;
      v162 = v239;
      _Q2.f64[0] = v240.f64[0];
      v134 = *((double *)v133 + 28);
      _Q1 = *((int8x16_t *)v133 + 13);
      *(_QWORD *)&v159 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
      v145 = (float64x2_t)vzip1q_s64(v236, (int64x2_t)v238);
      v144 = v240.f64[1];
      v161 = *(_QWORD *)&v238.f64[1];
      *(_QWORD *)&v146.f64[0] = v236.i64[1];
      v142 = v241;
      v160 = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
    }
    else
    {
      *(_QWORD *)&v159 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
      v160 = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
      v161 = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
      v162 = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u64[0];
    }
    *(_QWORD *)&v147.f64[1] = v162;
    *(_QWORD *)&v145.f64[1] = v160;
    *(_QWORD *)&v146.f64[1] = v161;
    v166 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v145, *(double *)_Q1.i64), v146, v159), v147, v134);
    v167 = acos(fmax(fmin(vmlad_n_f64(-v166.f64[1], 0.0, v166.f64[0])+ (_Q2.f64[0] * *(double *)_Q1.i64 + v144 * v159 + v142 * v134) * 0.0, 1.0), -1.0));
    v168 = *(int8x8_t *)(v6 + 560);
    if (!*(_QWORD *)&v168)
      goto LABEL_154;
    v169 = (uint8x8_t)vcnt_s8(v168);
    v169.i16[0] = vaddlv_u8(v169);
    if (v169.u32[0] > 1uLL)
    {
      v170 = v128;
      if (v128 >= *(_QWORD *)&v168)
        v170 = v128 % *(_QWORD *)&v168;
    }
    else
    {
      v170 = (*(_QWORD *)&v168 - 1) & v128;
    }
    v171 = *(double ***)(*(_QWORD *)(v6 + 552) + 8 * v170);
    if (!v171 || (v172 = *v171) == 0)
    {
LABEL_154:
      sub_239A444D4((uint64_t)"unknown file", 987, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (v169.u32[0] < 2uLL)
    {
      v173 = *(_QWORD *)&v168 - 1;
      while (1)
      {
        v175 = *((_QWORD *)v172 + 1);
        if (v175 == v128)
        {
          if (*((_QWORD *)v172 + 2) == v128)
            goto LABEL_111;
        }
        else if ((v175 & v173) != v170)
        {
          goto LABEL_154;
        }
        v172 = *(double **)v172;
        if (!v172)
          goto LABEL_154;
      }
    }
    while (1)
    {
      v174 = *((_QWORD *)v172 + 1);
      if (v174 == v128)
        break;
      if (v174 >= *(_QWORD *)&v168)
        v174 %= *(_QWORD *)&v168;
      if (v174 != v170)
        goto LABEL_154;
LABEL_101:
      v172 = *(double **)v172;
      if (!v172)
        goto LABEL_154;
    }
    if (*((_QWORD *)v172 + 2) != v128)
      goto LABEL_101;
LABEL_111:
    v176 = v167 * 180.0 / 3.14159265;
    v172[10] = v176;
    if (v176 <= *(double *)(v7 + 584))
    {
      v177 = (char *)v225[1];
      if (v225[1] < (void *)*(_QWORD *)v226)
      {
        *(double *)v225[1] = v176;
        v127 = v177 + 8;
      }
      else
      {
        v178 = v6;
        v179 = v7;
        v180 = v125;
        v181 = (char *)v225[0];
        v182 = (char *)v225[1] - (char *)v225[0];
        v183 = ((char *)v225[1] - (char *)v225[0]) >> 3;
        v184 = v183 + 1;
        if ((unint64_t)(v183 + 1) >> 61)
          sub_2394189F8();
        v185 = *(_QWORD *)v226 - (unint64_t)v225[0];
        if ((uint64_t)(*(_QWORD *)v226 - (unint64_t)v225[0]) >> 2 > v184)
          v184 = v185 >> 2;
        if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
          v186 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v186 = v184;
        if (v186)
        {
          if (v186 >> 61)
            sub_239418A80();
          v187 = v186;
          v188 = operator new(8 * v186);
          v186 = v187;
        }
        else
        {
          v188 = 0;
        }
        v189 = (double *)&v188[8 * v183];
        *v189 = v176;
        v127 = v189 + 1;
        if (v177 == v181)
        {
          v125 = v180;
          v7 = v179;
          v6 = v178;
        }
        else
        {
          v190 = v177 - 8 - v181;
          if (v190 < 0x58)
          {
            v125 = v180;
            v7 = v179;
            v6 = v178;
            goto LABEL_131;
          }
          v191 = v177 - &v188[v182];
          v125 = v180;
          v7 = v179;
          v6 = v178;
          if (v191 < 0x20)
            goto LABEL_161;
          v192 = (v190 >> 3) + 1;
          v193 = &v188[8 * v183 - 16];
          v194 = v177 - 16;
          v195 = v192 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v196 = *(_OWORD *)v194;
            *(v193 - 1) = *((_OWORD *)v194 - 1);
            *v193 = v196;
            v193 -= 2;
            v194 -= 32;
            v195 -= 4;
          }
          while (v195);
          v189 -= v192 & 0x3FFFFFFFFFFFFFFCLL;
          v177 -= 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
          if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_161:
            do
            {
LABEL_131:
              v197 = *((_QWORD *)v177 - 1);
              v177 -= 8;
              *((_QWORD *)v189-- - 1) = v197;
            }
            while (v177 != v181);
          }
        }
        v225[0] = v189;
        v225[1] = v127;
        *(_QWORD *)v226 = &v188[8 * v186];
        if (v181)
          operator delete(v181);
      }
      ++v125;
      v225[1] = v127;
      v122 = v213;
    }
LABEL_83:
    if (++v123 != v122)
      continue;
    break;
  }
  v198 = v125;
  v199 = (double *)v225[0];
  v200 = (double *)v225[1];
  if (v225[0] == v225[1])
  {
    v5 = v210;
  }
  else
  {
    v201 = (unint64_t)(((char *)v225[1] - (char *)v225[0]) >> 3) >> 1;
    v202 = (double *)((char *)v225[0] + 8 * v201);
    v5 = v210;
    if (v202 != v225[1])
    {
      sub_2395F71EC((double *)v225[0], v202, (double *)v225[1]);
      v199 = (double *)v225[0];
      v200 = (double *)v225[1];
    }
    *(double *)(v6 + 208) = v199[v201];
    if (v199 == v200)
    {
      v204 = 0.0;
    }
    else
    {
      v203 = (char *)v200 - (char *)v199 - 8;
      v204 = 0.0;
      v205 = v199;
      if (v203 < 8)
      {
        do
        {
LABEL_144:
          v209 = *v205++;
          v204 = v204 + v209;
        }
        while (v205 != v200);
      }
      else
      {
        v206 = (v203 >> 3) + 1;
        v207 = v199 + 1;
        v208 = v206 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v204 = v204 + *(v207 - 1) + *v207;
          v207 += 2;
          v208 -= 2;
        }
        while (v208);
        if (v206 != (v206 & 0x3FFFFFFFFFFFFFFELL))
        {
          v205 = &v199[v206 & 0x3FFFFFFFFFFFFFFELL];
          goto LABEL_144;
        }
      }
    }
    *(double *)(v6 + 200) = v204 / (double)(unint64_t)(v200 - v199);
  }
  *(_QWORD *)(v6 + 224) = v198;
  *(_BYTE *)(v6 + 354) = 1;
  if (v199)
  {
    v225[1] = v199;
    operator delete(v199);
  }
LABEL_152:
  LOBYTE(v12) = 1;
  v90 = __p;
  if (__p)
    goto LABEL_43;
LABEL_44:
  if ((v12 & 1) != 0)
    return 1;
  *(_OWORD *)v225 = 0u;
  *(_OWORD *)v226 = 0u;
  if (sub_239BF6968(a2, (uint64_t)v225, 1))
  {
    v91 = 1;
    if (v5)
    {
      *(_BYTE *)(v6 + 357) = 1;
      *(void **)(v6 + 360) = v225[0];
      if ((void **)(v6 + 368) != &v225[1])
        sub_23945D3D0((_QWORD *)(v6 + 368), (char *)v225[1], *(char **)v226, (uint64_t)(*(_QWORD *)v226 - (unint64_t)v225[1]) >> 3);
      *(_QWORD *)(v6 + 440) = v229;
      v92 = v227;
      *(_OWORD *)(v6 + 392) = *(_OWORD *)&v226[16];
      *(float64x2_t *)(v6 + 408) = v92;
      *(_OWORD *)(v6 + 424) = v228;
      v93 = v225[1];
      if (!v225[1])
        return v91;
LABEL_61:
      *(_QWORD *)v226 = v93;
      operator delete(v93);
      return v91;
    }
LABEL_60:
    v93 = v225[1];
    if (!v225[1])
      return v91;
    goto LABEL_61;
  }
  if (!sub_239BF8D9C(a2, (uint64_t)v225, 1))
  {
    v244 = 0.0;
    v243 = (float64x2_t)xmmword_239F138B8;
    sub_239BF4B14((uint64_t)&v236, a2, 1, &v243, 1);
    v91 = v242 != 0;
    goto LABEL_60;
  }
  if (v5)
  {
    *(_BYTE *)(v6 + 357) = 2;
    *(void **)(v6 + 360) = v225[0];
    if ((void **)(v6 + 368) != &v225[1])
      sub_23945D3D0((_QWORD *)(v6 + 368), (char *)v225[1], *(char **)v226, (uint64_t)(*(_QWORD *)v226 - (unint64_t)v225[1]) >> 3);
    *(_QWORD *)(v6 + 440) = v229;
    v94 = v227;
    *(_OWORD *)(v6 + 392) = *(_OWORD *)&v226[16];
    *(float64x2_t *)(v6 + 408) = v94;
    *(_OWORD *)(v6 + 424) = v228;
  }
  v91 = 1;
  v93 = v225[1];
  if (v225[1])
    goto LABEL_61;
  return v91;
}

void sub_239BFEC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

BOOL sub_239BFECE0(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v31;
  unsigned int *v32;
  unsigned int *v33;
  char *v34;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  __int128 v46;
  char *v47;
  _OWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double *v62;
  double *v63;
  double *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  double *v70;
  double *v71;
  double v72;
  double v73;
  int v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double *v104;
  double v105;
  double v106;
  double v107;
  double v108;
  long double v109;
  long double v110;
  long double v111;
  long double v112;
  long double v113;
  long double v114;
  long double v115;
  long double v116;
  long double v117;
  long double v118;
  long double v119;
  long double v120;
  long double v121;
  long double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double *v133;
  double *v134;
  double *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  double *v141;
  double *v142;
  char *v143;
  char *v144;
  int64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  double v159;
  float64x2_t v160;
  uint64_t v161;
  size_t v162;
  float64x2_t v163;
  __int128 v164;
  float64x2_t v165;
  __int128 v166;
  __int128 v167;
  int64x2_t v168;
  float64_t v169;
  float64_t v170;
  double v171;
  float64_t v172;
  double v173;
  double v174;
  std::__shared_weak_count *v175;
  uint64_t *v176;
  uint64_t *v178;
  __int128 v179;
  void **v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  float64x2_t v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  char v193;
  unint64_t v194;
  uint64_t v195;
  BOOL v196;
  float64x2_t *v197;
  double v198;
  int v200;
  double v204;
  float64x2_t v206;
  double v207;
  double v208;
  float64x2_t v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  void *v220;
  char *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t *v226;
  int64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _BYTE *v232;
  unint64_t *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  _OWORD *v239;
  unint64_t *v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  float64x2_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *p_shared_owners;
  unint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  float64x2_t v261;
  float64x2_t v262;
  BOOL v263;
  char v264;
  float64_t v265;
  unint64_t *v266;
  unint64_t v267;
  float64x2_t v268;
  float64x2_t v272;
  int8x16_t v274;
  int64x2_t v275;
  float64x2_t v276;
  float64x2_t v279;
  uint64_t v280;
  uint64_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  int64x2_t v289;
  int64x2_t v291;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v298;
  float64x2_t v301;
  float64x2_t v302;
  int8x16_t v304;
  double v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v310;
  double v312;
  float64x2_t v313;
  float64_t v314;
  float64_t v315;
  uint64_t v316;
  float64x2_t v317;
  __int128 v318;
  __int128 v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  char *v323;
  float64x2_t v324;
  char *v325;
  __int128 v326;
  float64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  double v336;
  double *v337;
  double *v338;
  uint64_t *v339;
  double *v340;
  int64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  double *v347;
  unint64_t v348;
  uint64_t v349;
  char *v350;
  double *v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  int64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  char *v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  __int128 v370;
  int v371;
  _QWORD *v372;
  void *v373;
  uint64_t v374;
  char *v375;
  size_t v376;
  _QWORD *v377;
  _QWORD *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  _QWORD *v385;
  void *v386;
  uint64_t v387;
  char *v388;
  size_t v389;
  char *v390;
  __int128 v391;
  _QWORD *v392;
  _QWORD *v393;
  void *v394;
  void *v395;
  _QWORD *v396;
  void *v397;
  uint64_t v398;
  char *v399;
  size_t v400;
  _QWORD *v401;
  _QWORD *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  char *v408;
  _QWORD *v409;
  void *v410;
  uint64_t v411;
  char *v412;
  size_t v413;
  char *v414;
  __int128 v415;
  _QWORD *v416;
  _QWORD *v417;
  void *v418;
  void *v419;
  _BOOL8 v420;
  double *v421;
  _BYTE *v422;
  char *v423;
  uint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  uint64_t v427;
  double v428;
  uint64_t *v429;
  float64x2_t v430;
  uint64_t v431;
  size_t v432;
  float64x2_t v433;
  __int128 v434;
  float64x2_t v435;
  __int128 v436;
  __int128 v437;
  int64x2_t v438;
  float64x2_t v440;
  float64x2_t **v441;
  float64x2_t *v442;
  char *v443;
  int64_t v444;
  uint64_t v445;
  float64x2_t *v446;
  float64x2_t v447;
  float64x2_t v449;
  float64x2_t v450;
  double v451;
  int8x16_t v452;
  unint64_t v453;
  int v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v458;
  float64x2_t v462;
  double v467;
  float64x2_t v470;
  double v471;
  double v472;
  float64x2_t v475;
  double v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  _QWORD *v484;
  char *v485;
  unsigned int *v486;
  unsigned int *v487;
  char *v488;
  unint64_t v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  _BYTE *v497;
  _QWORD *v498;
  unint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  _OWORD *v503;
  char *v504;
  uint64_t v505;
  __int128 v506;
  char *v507;
  char *v508;
  __int16 v509;
  void *v510;
  uint64_t *v511;
  uint64_t *v512;
  char *v513;
  char *v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  char *v518;
  __int16 v519;
  char *v520;
  char *v521;
  __int16 v522;
  char v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  void *v527;
  uint64_t v528;
  void *v529;
  void *v530;
  char *v531;
  __int128 v532;
  __int128 v533;
  _QWORD *i;
  uint64_t *j;
  float64x2_t v538;
  double v539;
  float64x2_t v541;
  char *v542;
  char *v543;
  void *v544;
  char *v545;
  void *v546;
  void *v547;
  char *v548;
  char *v549;
  void *v550;
  char *v551;
  void *v552;
  void *v553;
  _QWORD *v554;
  void *v555;
  _QWORD *v557;
  void *v558;
  std::bad_alloc *v559;
  std::bad_alloc *v560;
  std::bad_alloc *exception;
  std::bad_alloc *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  char *v566;
  float64x2_t v567;
  void *v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  int v577;
  uint64_t v578;
  float64x2_t v579;
  float64x2_t v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char *v587;
  char *v588;
  char *v589;
  uint64_t v591;
  uint64_t v592;
  float64x2_t v594;
  float64x2_t v595;
  unint64_t v597;
  uint64_t v598;
  float64x2_t v599;
  double v600;
  float64x2_t v601;
  float64x2_t v602;
  float64_t v603;
  uint64_t *v604;
  float64x2_t v605;
  uint64_t *v606;
  float64x2_t v607;
  char *v608;
  float64x2_t v609;
  float64x2_t v610;
  unsigned int *v611;
  unint64_t *v612;
  unint64_t *v613;
  unint64_t *v614;
  uint64_t *v615;
  std::__shared_weak_count *v616;
  void *v617[2];
  uint64_t v618;
  __int128 v619;
  __int128 v620;
  void *v621[2];
  __int128 v622;
  int64x2_t v623;
  float64x2_t v624;
  int64x2_t v625;
  __int128 v626;
  float64x2_t v627;
  __int128 v628;
  void *__p;
  unint64_t v630;
  uint64_t v631;
  void *v632;
  double *v633;
  double *v634;
  void *v635;
  double *v636;
  double *v637;
  void *v638;
  char *v639;
  char *v640;
  void *v641;
  double *v642;
  double *v643;
  void *v644;
  char *v645;
  char *v646;
  void *v647;
  __int128 v648;
  void *v649;
  __int128 v650;
  void *v651;
  char *v652;
  char *v653;
  void *v654;
  _QWORD *v655;
  uint64_t v656;
  __int128 v657;
  __int128 v658;
  int v659;
  int v660;
  void *memptr;
  void *v662;
  double v663;
  float64x2_t __dst;
  _BYTE v665[32];
  _BYTE v666[25];
  _BYTE v667[24];
  _BYTE *v668;
  _BYTE v669[24];
  _BYTE *v670;
  _BYTE v671[28];
  float64x2_t v672;
  float64x2_t v673;
  __int128 v674;
  __int128 v675;
  float64x2_t v676;
  __int128 v677;
  int64x2_t v678;
  float64x2_t v679;
  int64x2_t v680;
  __int128 v681;
  int64x2_t v682;
  __int128 v683;
  uint64_t v684;
  void *v685;
  char v686;
  _BYTE v687[24];
  _BYTE *v688;
  uint64_t v689;

  v10 = (uint64_t *)a1;
  v689 = *MEMORY[0x24BDAC8D0];
  v660 = a4;
  a6[1] = *a6;
  v657 = 0u;
  v658 = 0u;
  v659 = 1065353216;
  v655 = 0;
  v654 = 0;
  v656 = 0;
  sub_2396C6A9C(a1, (uint64_t)&v654, 1);
  v11 = v654;
  v12 = v655;
  if (v654 != v655)
  {
    do
      sub_2394A2EA8((uint64_t)v10, *v11++);
    while (v11 != v12);
  }
  v688 = 0;
  v13 = operator new(0x20uLL);
  *v13 = &off_250AFAFE0;
  v13[1] = &v657;
  v13[2] = &v660;
  v13[3] = a2;
  v688 = v13;
  v14 = v10[6];
  if (!v14)
  {
LABEL_22:
    v20 = 5;
LABEL_24:
    (*(void (**)(void))(*v13 + 8 * v20))();
    goto LABEL_25;
  }
  do
  {
    if (*(_BYTE *)(v14 + 51) == 2)
    {
      v15 = *(uint64_t ***)(v14 + 128);
      if (v15)
      {
        v16 = 0;
        v17 = *v10;
        while (1)
        {
          v18 = *((unsigned int *)v15 + 5);
          if ((v10[1] - *v10) >> 6 <= v18)
            goto LABEL_9;
          _ZF = (_DWORD)v18 == -1 || *(_DWORD *)(v17 + (v18 << 6)) == -1;
          if (_ZF || *(_BYTE *)(v17 + (v18 << 6) + 59) != 2)
            goto LABEL_9;
          if (v16)
            break;
          v16 = 1;
LABEL_9:
          v15 = (uint64_t **)*v15;
          if (!v15)
            goto LABEL_5;
        }
        LODWORD(v672.f64[0]) = *(_DWORD *)(v14 + 16);
        if (!v688)
          sub_2394172E0();
        if (((*(uint64_t (**)(_BYTE *, float64x2_t *, uint64_t, uint64_t))(*(_QWORD *)v688 + 48))(v688, &v672, v14 + 24, v14 + 112) & 1) == 0)break;
      }
    }
LABEL_5:
    v14 = *(_QWORD *)v14;
  }
  while (v14);
  v13 = v688;
  if (v688 == v687)
  {
    v20 = 4;
    v13 = v687;
    goto LABEL_24;
  }
  if (v688)
    goto LABEL_22;
LABEL_25:
  if (!*((_QWORD *)&v658 + 1))
  {
    v420 = 0;
    goto LABEL_537;
  }
  v652 = 0;
  v651 = 0;
  v653 = 0;
  v650 = 0uLL;
  v649 = 0;
  v648 = 0uLL;
  v647 = 0;
  v21 = (uint64_t *)v658;
  if ((_QWORD)v658)
  {
    do
    {
      v22 = v21[3];
      v23 = (unsigned int *)v21[4];
      v24 = 126 - 2 * __clz((uint64_t)((uint64_t)v23 - v22) >> 3);
      if (v23 == (unsigned int *)v22)
        v25 = 0;
      else
        v25 = v24;
      sub_239C02314(v22, v23, v25, 1);
      v21 = (uint64_t *)*v21;
    }
    while (v21);
    v21 = (uint64_t *)v658;
  }
  v578 = a5;
  v645 = 0;
  v644 = 0;
  v646 = 0;
  v642 = 0;
  v641 = 0;
  v643 = 0;
  v639 = 0;
  v638 = 0;
  v640 = 0;
  v636 = 0;
  v635 = 0;
  v637 = 0;
  v633 = 0;
  v632 = 0;
  v634 = 0;
  v585 = (uint64_t)v10;
  if (!v21)
  {
    v26 = 0;
    v422 = 0;
    v421 = 0;
    v423 = 0;
    goto LABEL_393;
  }
  v566 = 0;
  v582 = 0;
  v26 = 0;
  v564 = a7 + 352;
  v565 = a7 + 320;
  __asm { FMOV            V0.2D, #-1.0 }
  v567 = _Q0;
  while (2)
  {
    v587 = v26;
    v645 = (char *)v644;
    v642 = (double *)v641;
    v639 = (char *)v638;
    v636 = (double *)v635;
    v31 = sub_239BF5CF4((uint64_t)a2, *((unsigned int *)v21 + 4));
    v32 = (unsigned int *)v21[3];
    v33 = (unsigned int *)v21[4];
    v604 = v21;
    while (v32 != v33)
    {
      v35 = (int8x8_t)v10[5];
      if (!*(_QWORD *)&v35)
        goto LABEL_546;
      v36 = *v32;
      v37 = (uint8x8_t)vcnt_s8(v35);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        v38 = *v32;
        if (*(_QWORD *)&v35 <= v36)
          v38 = v36 % *(_QWORD *)&v35;
      }
      else
      {
        v38 = (v35.i32[0] - 1) & v36;
      }
      v39 = *(uint64_t ***)(v10[4] + 8 * v38);
      if (!v39 || (v40 = *v39) == 0)
      {
LABEL_546:
        sub_239A444D4((uint64_t)"unknown file", 642, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v37.u32[0] < 2uLL)
      {
        v41 = *(_QWORD *)&v35 - 1;
        while (1)
        {
          v43 = v40[1];
          if (v43 == v36)
          {
            if (*((_DWORD *)v40 + 4) == (_DWORD)v36)
              goto LABEL_59;
          }
          else if ((v43 & v41) != v38)
          {
            goto LABEL_546;
          }
          v40 = (uint64_t *)*v40;
          if (!v40)
            goto LABEL_546;
        }
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 == v36)
          break;
        if (v42 >= *(_QWORD *)&v35)
          v42 %= *(_QWORD *)&v35;
        if (v42 != v38)
          goto LABEL_546;
LABEL_49:
        v40 = (uint64_t *)*v40;
        if (!v40)
          goto LABEL_546;
      }
      if (*((_DWORD *)v40 + 4) != (_DWORD)v36)
        goto LABEL_49;
LABEL_59:
      v44 = (__int128 *)(v40 + 3);
      v45 = v645;
      if (v645 >= v646)
      {
        v48 = v644;
        v49 = 0xAAAAAAAAAAAAAAABLL * ((v645 - (_BYTE *)v644) >> 3);
        v50 = v49 + 1;
        if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((v646 - (_BYTE *)v644) >> 3) > v50)
          v50 = 0x5555555555555556 * ((v646 - (_BYTE *)v644) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v646 - (_BYTE *)v644) >> 3) >= 0x555555555555555)
          v51 = 0xAAAAAAAAAAAAAAALL;
        else
          v51 = v50;
        if (v51)
        {
          if (v51 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v52 = (char *)operator new(24 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = *v44;
        v54 = &v52[24 * v49];
        *((_QWORD *)v54 + 2) = *((_QWORD *)v44 + 2);
        *(_OWORD *)v54 = v53;
        v55 = v54;
        if (v45 != v48)
        {
          do
          {
            v56 = *(_OWORD *)((char *)v45 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v45 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v45 = (_OWORD *)((char *)v45 - 24);
          }
          while (v45 != v48);
          v45 = v644;
        }
        v47 = v54 + 24;
        v644 = v55;
        v645 = v54 + 24;
        v646 = &v52[24 * v51];
        if (v45)
          operator delete(v45);
      }
      else
      {
        v46 = *v44;
        *((_QWORD *)v645 + 2) = v40[5];
        *v45 = v46;
        v47 = (char *)v45 + 24;
      }
      v645 = v47;
      v57 = v32[1];
      v58 = *a2;
      if (v57 >= (a2[1] - *a2) >> 6 || (_DWORD)v57 == -1 || *(_DWORD *)(v58 + (v57 << 6)) == -1)
      {
        sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v59 = v58 + (v57 << 6);
      v60 = *(double *)(v59 + 24);
      v61 = *(double *)(v59 + 32);
      v62 = v642;
      if (v642 < v643)
      {
        *v642 = v60;
        v62[1] = v61;
        v63 = v62 + 2;
        goto LABEL_96;
      }
      v64 = (double *)v641;
      v65 = ((char *)v642 - (_BYTE *)v641) >> 4;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 60)
        sub_2394189F8();
      v67 = (char *)v643 - (_BYTE *)v641;
      if (((char *)v643 - (_BYTE *)v641) >> 3 > v66)
        v66 = v67 >> 3;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
        v68 = 0xFFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (!v68)
      {
        v69 = 0;
        goto LABEL_91;
      }
      if (v68 >> 60)
        goto LABEL_550;
      v69 = (char *)operator new(16 * v68);
LABEL_91:
      v70 = (double *)&v69[16 * v65];
      *v70 = v60;
      v70[1] = v61;
      v71 = v70;
      if (v62 != v64)
      {
        do
        {
          *((_OWORD *)v71 - 1) = *((_OWORD *)v62 - 1);
          v71 -= 2;
          v62 -= 2;
        }
        while (v62 != v64);
        v62 = (double *)v641;
      }
      v63 = v70 + 2;
      v641 = v71;
      v642 = v70 + 2;
      v643 = (double *)&v69[16 * v68];
      if (v62)
        operator delete(v62);
LABEL_96:
      v642 = v63;
      v72 = -*((double *)v31 + 2) / *(double *)v31 + v60 * (1.0 / *(double *)v31);
      v73 = -*((double *)v31 + 3) / *((double *)v31 + 1) + v61 * (1.0 / *((double *)v31 + 1));
      v74 = *((unsigned __int8 *)v31 + 32);
      if (v74 == 2)
      {
        v104 = (double *)v31[5];
        v105 = *v104;
        v106 = v104[1];
        v108 = v104[2];
        v107 = v104[3];
        v109 = sqrt(v73 * v73 + v72 * v72);
        v110 = atan2(v109, 1.0);
        v111 = v109
             / (v110
              + v105 * (v110 * (v110 * v110))
              + v106 * (v110 * v110 * (v110 * (v110 * v110)))
              + v108 * (v110 * v110 * (v110 * v110 * (v110 * (v110 * v110))))
              + v107 * (v110 * v110 * (v110 * v110 * (v110 * v110 * (v110 * (v110 * v110))))));
        v112 = sqrt(v73 * v111 * (v73 * v111) + v72 * v111 * (v72 * v111));
        v113 = atan2(v112, 1.0);
        v114 = v112
             / (v113
              + v105 * (v113 * (v113 * v113))
              + v106 * (v113 * v113 * (v113 * (v113 * v113)))
              + v108 * (v113 * v113 * (v113 * v113 * (v113 * (v113 * v113))))
              + v107 * (v113 * v113 * (v113 * v113 * (v113 * v113 * (v113 * (v113 * v113))))));
        v115 = sqrt(v73 * v114 * (v73 * v114) + v72 * v114 * (v72 * v114));
        v116 = atan2(v115, 1.0);
        v117 = v115
             / (v116
              + v105 * (v116 * (v116 * v116))
              + v106 * (v116 * v116 * (v116 * (v116 * v116)))
              + v108 * (v116 * v116 * (v116 * v116 * (v116 * (v116 * v116))))
              + v107 * (v116 * v116 * (v116 * v116 * (v116 * v116 * (v116 * (v116 * v116))))));
        v118 = sqrt(v73 * v117 * (v73 * v117) + v72 * v117 * (v72 * v117));
        v119 = atan2(v118, 1.0);
        v120 = v118
             / (v119
              + v105 * (v119 * (v119 * v119))
              + v106 * (v119 * v119 * (v119 * (v119 * v119)))
              + v108 * (v119 * v119 * (v119 * v119 * (v119 * (v119 * v119))))
              + v107 * (v119 * v119 * (v119 * v119 * (v119 * v119 * (v119 * (v119 * v119))))));
        v121 = sqrt(v73 * v120 * (v73 * v120) + v72 * v120 * (v72 * v120));
        v122 = atan2(v121, 1.0);
        v123 = v121
             / (v122
              + v105 * (v122 * (v122 * v122))
              + v106 * (v122 * v122 * (v122 * (v122 * v122)))
              + v108 * (v122 * v122 * (v122 * v122 * (v122 * (v122 * v122))))
              + v107 * (v122 * v122 * (v122 * v122 * (v122 * v122 * (v122 * (v122 * v122))))));
      }
      else
      {
        if (v74 != 1)
          goto LABEL_103;
        v75 = (double *)v31[5];
        v77 = *v75;
        v76 = v75[1];
        v78 = v75[2];
        v79 = v75[3];
        v80 = v75[4];
        if (v79 * v79 + v80 * v80 > 2.22507386e-308)
        {
          v81 = v73 * v73 + v72 * v72;
          v82 = 1.0 / (v77 * v81 + 1.0 + v76 * (v81 * v81) + v78 * (v81 * (v81 * v81)));
          v83 = v82 * (v72 - (v80 * (v81 + (v72 + v72) * v72) + (v79 + v79) * (v72 * v73)));
          v84 = (v73 - ((v80 + v80) * (v72 * v73) + v79 * (v81 + (v73 + v73) * v73))) * v82;
          v85 = v84 * v84 + v83 * v83;
          v86 = 1.0 / (v77 * v85 + 1.0 + v76 * (v85 * v85) + v78 * (v85 * (v85 * v85)));
          v87 = v83 * v84;
          v88 = v80 * (v85 + (v83 + v83) * v83) + (v79 + v79) * (v83 * v84);
          v89 = (v80 + v80) * v87 + v79 * (v85 + (v84 + v84) * v84);
          v90 = v86 * (v72 - v88);
          v91 = (v73 - v89) * v86;
          v92 = v91 * v91 + v90 * v90;
          v93 = 1.0 / (v77 * v92 + 1.0 + v76 * (v92 * v92) + v78 * (v92 * (v92 * v92)));
          v94 = v90 * v91;
          v95 = v93 * (v72 - (v80 * (v92 + (v90 + v90) * v90) + (v79 + v79) * (v90 * v91)));
          v96 = (v73 - ((v80 + v80) * v94 + v79 * (v92 + (v91 + v91) * v91))) * v93;
          v97 = v96 * v96 + v95 * v95;
          v98 = 1.0 / (v77 * v97 + 1.0 + v76 * (v97 * v97) + v78 * (v97 * (v97 * v97)));
          v99 = v95 * v96;
          v100 = v98 * (v72 - (v80 * (v97 + (v95 + v95) * v95) + (v79 + v79) * (v95 * v96)));
          v101 = (v73 - ((v80 + v80) * v99 + v79 * (v97 + (v96 + v96) * v96))) * v98;
          v102 = v101 * v101 + v100 * v100;
          v103 = 1.0 / (v77 * v102 + 1.0 + v76 * (v102 * v102) + v78 * (v102 * (v102 * v102)));
          v72 = v103 * (v72 - (v80 * (v102 + (v100 + v100) * v100) + (v79 + v79) * (v100 * v101)));
          v73 = (v73 - ((v80 + v80) * (v100 * v101) + v79 * (v102 + (v101 + v101) * v101))) * v103;
          goto LABEL_103;
        }
        v124 = v73 * v73 + v72 * v72;
        v125 = 1.0 / (v77 * v124 + 1.0 + v76 * (v124 * v124) + v78 * (v124 * (v124 * v124)));
        v126 = v73 * v125 * (v73 * v125) + v72 * v125 * (v72 * v125);
        v127 = 1.0 / (v77 * v126 + 1.0 + v76 * (v126 * v126) + v78 * (v126 * (v126 * v126)));
        v128 = v73 * v127 * (v73 * v127) + v72 * v127 * (v72 * v127);
        v129 = 1.0 / (v77 * v128 + 1.0 + v76 * (v128 * v128) + v78 * (v128 * (v128 * v128)));
        v130 = v73 * v129 * (v73 * v129) + v72 * v129 * (v72 * v129);
        v131 = 1.0 / (v77 * v130 + 1.0 + v76 * (v130 * v130) + v78 * (v130 * (v130 * v130)));
        v132 = v73 * v131 * (v73 * v131) + v72 * v131 * (v72 * v131);
        v123 = 1.0 / (v77 * v132 + 1.0 + v76 * (v132 * v132) + v78 * (v132 * (v132 * v132)));
      }
      v72 = v72 * v123;
      v73 = v73 * v123;
LABEL_103:
      v133 = v636;
      if (v636 >= v637)
      {
        v135 = (double *)v635;
        v136 = ((char *)v636 - (_BYTE *)v635) >> 4;
        v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 60)
          sub_2394189F8();
        v138 = (char *)v637 - (_BYTE *)v635;
        if (((char *)v637 - (_BYTE *)v635) >> 3 > v137)
          v137 = v138 >> 3;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
          v139 = 0xFFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          if (v139 >> 60)
            sub_239418A80();
          v140 = (char *)operator new(16 * v139);
        }
        else
        {
          v140 = 0;
        }
        v141 = (double *)&v140[16 * v136];
        *v141 = v72;
        v141[1] = v73;
        v142 = v141;
        if (v133 != v135)
        {
          do
          {
            *((_OWORD *)v142 - 1) = *((_OWORD *)v133 - 1);
            v142 -= 2;
            v133 -= 2;
          }
          while (v133 != v135);
          v133 = (double *)v635;
        }
        v134 = v141 + 2;
        v635 = v142;
        v636 = v141 + 2;
        v637 = (double *)&v140[16 * v139];
        if (v133)
          operator delete(v133);
      }
      else
      {
        *v636 = v72;
        v133[1] = v73;
        v134 = v133 + 2;
      }
      v636 = v134;
      v143 = v639;
      if (v639 < v640)
      {
        *(_QWORD *)v639 = v32[1];
        v34 = v143 + 8;
        goto LABEL_37;
      }
      v144 = (char *)v638;
      v145 = v639 - (_BYTE *)v638;
      v146 = (v639 - (_BYTE *)v638) >> 3;
      v147 = v146 + 1;
      if ((unint64_t)(v146 + 1) >> 61)
        sub_2394189F8();
      v148 = v640 - (_BYTE *)v638;
      if ((v640 - (_BYTE *)v638) >> 2 > v147)
        v147 = v148 >> 2;
      if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
        v149 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v149 = v147;
      if (!v149)
      {
        v150 = 0;
        goto LABEL_131;
      }
      if (v149 >> 61)
LABEL_550:
        sub_239418A80();
      v150 = (char *)operator new(8 * v149);
LABEL_131:
      v151 = &v150[8 * v146];
      *(_QWORD *)v151 = v32[1];
      v34 = v151 + 8;
      if (v143 != v144)
      {
        v152 = v143 - 8 - v144;
        if (v152 < 0x58)
          goto LABEL_586;
        if ((unint64_t)(v143 - &v150[v145]) < 0x20)
          goto LABEL_586;
        v153 = (v152 >> 3) + 1;
        v154 = &v150[8 * v146 - 16];
        v155 = v143 - 16;
        v156 = v153 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v157 = *(_OWORD *)v155;
          *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
          *(_OWORD *)v154 = v157;
          v154 -= 32;
          v155 -= 32;
          v156 -= 4;
        }
        while (v156);
        v151 -= 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
        v143 -= 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
        if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_586:
          do
          {
            v158 = *((_QWORD *)v143 - 1);
            v143 -= 8;
            *((_QWORD *)v151 - 1) = v158;
            v151 -= 8;
          }
          while (v143 != v144);
        }
      }
      v638 = v151;
      v639 = v34;
      v640 = &v150[8 * v149];
      if (v144)
        operator delete(v144);
LABEL_37:
      v639 = v34;
      v32 += 2;
    }
    v630 = 0;
    __p = 0;
    v631 = 0;
    v625 = (int64x2_t)xmmword_239F13AC0;
    v626 = unk_239F13AD0;
    v627 = (float64x2_t)xmmword_239F13AE0;
    v628 = unk_239F13AF0;
    *(_OWORD *)v621 = xmmword_239F13A80;
    v622 = *(_OWORD *)algn_239F13A90;
    v623 = (int64x2_t)xmmword_239F13AA0;
    v624 = xmmword_239F13AB0;
    *(_OWORD *)v617 = xmmword_239F0C3C0;
    v618 = 5;
    v620 = xmmword_239F0BF20;
    v619 = xmmword_239EC67E0;
    v159 = *(double *)(a7 + 48);
    v160 = *((float64x2_t *)v31 + 1);
    v672 = *(float64x2_t *)v31;
    v673 = v160;
    LOBYTE(v674) = *((_BYTE *)v31 + 32);
    v161 = *((unsigned int *)v31 + 14);
    v162 = (8 * v161 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&v674 + 1) = 0;
    *(_QWORD *)&v675 = v162 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v162, 0x100BBD03uLL);
    *((_QWORD *)&v674 + 1) = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v562 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v562, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v161)
      memcpy(memptr, (const void *)v31[5], 8 * v161);
    DWORD2(v675) = *((_DWORD *)v31 + 14);
    v163 = *((float64x2_t *)v31 + 7);
    v165 = *((float64x2_t *)v31 + 4);
    v164 = *((_OWORD *)v31 + 5);
    v678 = *((int64x2_t *)v31 + 6);
    v679 = v163;
    v676 = v165;
    v677 = v164;
    v166 = *((_OWORD *)v31 + 11);
    v168 = *((int64x2_t *)v31 + 8);
    v167 = *((_OWORD *)v31 + 9);
    v682 = *((int64x2_t *)v31 + 10);
    v683 = v166;
    v680 = v168;
    v681 = v167;
    __dst = 0uLL;
    *(_QWORD *)v665 = 0;
    *(_QWORD *)&__dst.f64[0] = operator new(0xC0uLL);
    __dst.f64[1] = __dst.f64[0];
    *(_QWORD *)v665 = *(_QWORD *)&__dst.f64[0] + 192;
    v169 = COERCE_DOUBLE(sub_239C02C54((uint64_t)v665, (uint64_t)&v672, (uint64_t)&v684, *(uint64_t *)&__dst.f64[0]));
    __dst.f64[1] = v169;
    v170 = __dst.f64[0];
    if (*(_QWORD *)&v169 == *(_QWORD *)&__dst.f64[0])
    {
      *(double *)&v619 = v159;
      goto LABEL_152;
    }
    v171 = 0.0;
    v172 = __dst.f64[0];
    do
    {
      v173 = **(double **)&v172;
      *(_QWORD *)&v172 += 192;
      v171 = v171 + v173;
    }
    while (*(_QWORD *)&v172 != *(_QWORD *)&v169);
    *(double *)&v619 = v159
                     * (double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v169 - *(_QWORD *)&__dst.f64[0]) >> 6))
                     / v171;
    if (*(_QWORD *)&__dst.f64[0])
    {
      do
      {
        *(_QWORD *)&v174 = *(_QWORD *)&v169 - 192;
        free(*(void **)(*(_QWORD *)&v169 - 152));
        v169 = v174;
      }
      while (*(_QWORD *)&v174 != *(_QWORD *)&v170);
      v169 = __dst.f64[0];
LABEL_152:
      __dst.f64[1] = v170;
      operator delete(*(void **)&v169);
    }
    free(*((void **)&v674 + 1));
    if ((sub_239C02D94(&v644, &v635, (__int128 *)v621, (uint64_t)&__p, (uint64_t)v617) & 1) == 0)
      goto LABEL_247;
    LOBYTE(v612) = 1;
    *(_QWORD *)&v672.f64[0] = __p;
    LODWORD(v672.f64[1]) = 0;
    *(_QWORD *)&__dst.f64[0] = (char *)__p + 8 * (v630 >> 6);
    LODWORD(__dst.f64[1]) = v630 & 0x3F;
    sub_239458E50((uint64_t)&v672, (uint64_t)&__dst, &v612);
    v175 = (std::__shared_weak_count *)operator new(0x1E0uLL);
    v175->__shared_weak_owners_ = 0;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&off_250B01540;
    v175->__shared_owners_ = 0;
    v615 = (uint64_t *)sub_239A4E3D8((uint64_t)&v175[1], v10);
    v616 = v175;
    v176 = sub_2395D7BEC((uint64_t)v615, *((_DWORD *)v604 + 4));
    v178 = v176;
    *((_BYTE *)v176 + 232) = 2;
    v179 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v176 = *(_OWORD *)v31;
    *((_OWORD *)v176 + 1) = v179;
    *((_BYTE *)v176 + 32) = *((_BYTE *)v31 + 32);
    v180 = (void **)(v176 + 5);
    if (v176 != v31)
    {
      v181 = *((unsigned int *)v31 + 14);
      sub_23945215C((uint64_t)(v176 + 5), v181);
      if ((_DWORD)v181)
        memcpy(*v180, (const void *)v31[5], 8 * v181);
      *((_DWORD *)v178 + 14) = *((_DWORD *)v31 + 14);
    }
    v182 = v626;
    *((int64x2_t *)v178 + 8) = v625;
    *((_OWORD *)v178 + 9) = v182;
    v183 = v628;
    *((float64x2_t *)v178 + 10) = v627;
    *((_OWORD *)v178 + 11) = v183;
    v184 = v622;
    *((_OWORD *)v178 + 4) = *(_OWORD *)v621;
    *((_OWORD *)v178 + 5) = v184;
    *(_QWORD *)&_Q0.f64[1] = v623.i64[1];
    v186 = v624;
    *((int64x2_t *)v178 + 6) = v623;
    *((float64x2_t *)v178 + 7) = v186;
    v187 = (char *)v644;
    if (v645 != v644)
    {
      v188 = 0;
      v189 = 0;
      do
      {
        v194 = *((unsigned int *)v638 + 2 * v189);
        v195 = *v615;
        if (v194 >= (v615[1] - *v615) >> 6
          || (v194 != 0xFFFFFFFF ? (v196 = *(_DWORD *)(v195 + (v194 << 6)) == -1) : (v196 = 1), v196))
        {
          sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        *(_QWORD *)&_Q2.f64[0] = v178[14];
        v197 = (float64x2_t *)&v187[v188];
        v198 = v197[1].f64[0];
        _Q7 = *v197;
        __asm { FMLA            D0, D2, V7.D[1] }
        _Q0.f64[0] = _Q0.f64[0] + *((double *)v178 + 18) * v198;
        *(_QWORD *)&_Q2.f64[0] = v178[22];
        _Q19 = vdivq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v178 + 4), v197->f64[0]), *((float64x2_t *)v178 + 6), *v197, 1), *((float64x2_t *)v178 + 8), v198), *((float64x2_t *)v178 + 10)), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(_Q0, _Q2), 0));
        v200 = *((unsigned __int8 *)v178 + 32);
        if (v200 != 2)
        {
          if (v200 == 1)
          {
            _Q0 = *(float64x2_t *)((char *)*v180 + 24);
            _D1 = _Q0.f64[1];
            __asm { FMLA            D2, D1, V0.D[1] }
            v204 = sqrt(_D2);
            _Q2 = vmulq_f64(_Q19, _Q19);
            _D3 = _Q19.f64[1];
            __asm { FMLA            D2, D3, V19.D[1] }
            v206 = vmulq_n_f64(_Q19, *(double *)*v180 * _Q2.f64[0]+ 1.0+ *((double *)*v180 + 1) * (_Q2.f64[0] * _Q2.f64[0])+ *((double *)*v180 + 2) * (_Q2.f64[0] * (_Q2.f64[0] * _Q2.f64[0])));
            if (v204 <= 2.22507386e-308)
            {
              _Q19 = v206;
            }
            else
            {
              v207 = vmuld_lane_f64(_Q19.f64[0], _Q19, 1);
              v208 = vmuld_lane_f64(vmlad_n_f64(_Q2.f64[0], _Q19.f64[0] + _Q19.f64[0], _Q19.f64[0]), _Q0, 1)
                   + (_Q0.f64[0] + _Q0.f64[0]) * v207;
              _D3 = _Q19.f64[1] + _Q19.f64[1];
              __asm { FMLA            D2, D3, V19.D[1] }
              v211.f64[0] = v206.f64[0] + v208;
              v211.f64[1] = v206.f64[1] + vmlad_n_f64(v207 * (_Q0.f64[1] + _Q0.f64[1]), _D2, _Q0.f64[0]);
              _Q19 = v211;
            }
          }
          goto LABEL_161;
        }
        v212 = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(_Q19, _Q19).f64[1]), _Q19.f64[0], _Q19.f64[0]);
        v213 = 1.0;
        if (v212 >= 0.0000000149011612)
        {
          v214 = *(double *)*v180;
          v215 = *((double *)*v180 + 1);
          v216 = *((double *)*v180 + 2);
          v217 = *((double *)*v180 + 3);
          v218 = sqrt(v212);
          v605 = _Q19;
          v219 = atan2(v218, 1.0);
          _Q19 = v605;
          if (v219 > 1.57079633)
            goto LABEL_161;
          v213 = (v219
                + v214 * (v219 * (v219 * v219))
                + v215 * (v219 * v219 * (v219 * (v219 * v219)))
                + v216 * (v219 * v219 * (v219 * v219 * (v219 * (v219 * v219))))
                + v217 * (v219 * v219 * (v219 * v219 * (v219 * v219 * (v219 * (v219 * v219))))))
               / v218;
        }
        _Q19 = vmulq_n_f64(_Q19, v213);
LABEL_161:
        _Q0 = vsubq_f64(*(float64x2_t *)(v195 + (v194 << 6) + 24), vmlaq_f64(*((float64x2_t *)v178 + 1), *(float64x2_t *)v178, _Q19));
        _D2 = _Q0.f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        if (sqrt(_D1) > *(double *)(a7 + 48))
          v193 = 1;
        else
          v193 = 2;
        *(_BYTE *)(v195 + (v194 << 6) + 59) = v193;
        ++v189;
        v187 = (char *)v644;
        v188 += 24;
      }
      while (v189 < 0xAAAAAAAAAAAAAAABLL * ((v645 - (_BYTE *)v644) >> 3));
    }
    v663 = 0.0;
    v662 = 0;
    memptr = 0;
    sub_239E27F88(v615, *((_DWORD *)v604 + 4), (__n128 **)&memptr);
    v613 = 0;
    v612 = 0;
    v614 = 0;
    v220 = v662;
    v221 = (char *)memptr;
    if (v662 == memptr)
    {
      v246 = 7;
      if (v662)
        goto LABEL_241;
      goto LABEL_242;
    }
    v222 = 0;
    v223 = 0;
    v606 = v178 + 8;
    v224 = ((_BYTE *)v662 - (_BYTE *)memptr) >> 4;
    do
    {
      v225 = (unint64_t *)&v221[16 * v223];
      if (v222 < v614)
      {
        *v222++ = *v225;
        goto LABEL_201;
      }
      v226 = v612;
      v227 = (char *)v222 - (char *)v612;
      v228 = v222 - v612;
      v229 = v228 + 1;
      if ((unint64_t)(v228 + 1) >> 61)
        sub_2394189F8();
      v230 = (char *)v614 - (char *)v612;
      if (((char *)v614 - (char *)v612) >> 2 > v229)
        v229 = v230 >> 2;
      if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8)
        v231 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v231 = v229;
      if (v231)
      {
        if (v231 >> 61)
          sub_239418A80();
        v232 = operator new(8 * v231);
      }
      else
      {
        v232 = 0;
      }
      v233 = (unint64_t *)&v232[8 * v228];
      *v233 = *v225;
      v234 = v233 + 1;
      if (v222 == v226)
      {
        v10 = (uint64_t *)v585;
      }
      else
      {
        v235 = (char *)(v222 - 1) - (char *)v226;
        if (v235 < 0x168
          || &v232[v227 - 8 - (v235 & 0xFFFFFFFFFFFFFFF8)] > &v232[v227 - 8]
          || (unint64_t *)((char *)v222 - (v235 & 0xFFFFFFFFFFFFFFF8) - 8) > v222 - 1
          || (unint64_t)((char *)v222 - v232 - v227) < 0x20)
        {
          v236 = v222;
          v10 = (uint64_t *)v585;
        }
        else
        {
          v238 = (v235 >> 3) + 1;
          v236 = &v222[-(v238 & 0x3FFFFFFFFFFFFFFCLL)];
          v239 = &v232[8 * v228 - 16];
          v240 = v222 - 2;
          v241 = v238 & 0x3FFFFFFFFFFFFFFCLL;
          v10 = (uint64_t *)v585;
          do
          {
            v242 = *(_OWORD *)v240;
            *(v239 - 1) = *((_OWORD *)v240 - 1);
            *v239 = v242;
            v239 -= 2;
            v240 -= 4;
            v241 -= 4;
          }
          while (v241);
          v233 -= v238 & 0x3FFFFFFFFFFFFFFCLL;
          if (v238 == (v238 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_198;
        }
        do
        {
          v237 = *--v236;
          *--v233 = v237;
        }
        while (v236 != v226);
      }
LABEL_198:
      v612 = v233;
      v613 = v234;
      v614 = (unint64_t *)&v232[8 * v231];
      if (v226)
        operator delete(v226);
      v222 = v234;
LABEL_201:
      v613 = v222;
      if (v223 > 8)
        break;
      ++v223;
    }
    while (v223 < v224);
    if (v222 == v612)
    {
      v246 = 7;
      goto LABEL_239;
    }
    LODWORD(__dst.f64[0]) = 1;
    sub_239D00E14((uint64_t)&v672, (uint64_t)v615, (uint64_t)v616, a3, &__dst, 0, 0);
    v243 = *(_OWORD *)(a7 + 288);
    *(_OWORD *)&v665[16] = *(_OWORD *)(a7 + 272);
    *(_OWORD *)v666 = v243;
    *(_OWORD *)&v666[9] = *(_OWORD *)(a7 + 297);
    v244 = *(_OWORD *)(a7 + 256);
    __dst = *(float64x2_t *)(a7 + 240);
    *(_OWORD *)v665 = v244;
    v245 = *(_QWORD *)(a7 + 344);
    if (!v245)
      goto LABEL_215;
    if (v245 == v565)
    {
      v668 = v667;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v565 + 24))(v565, v667);
    }
    else
    {
      v245 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v245 + 16))(v245);
LABEL_215:
      v668 = (_BYTE *)v245;
    }
    v247 = *(_QWORD *)(a7 + 376);
    if (v247)
    {
      if (v247 != v564)
      {
        v247 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v247 + 16))(v247);
        goto LABEL_223;
      }
      v670 = v669;
      (*(void (**)(uint64_t))(*(_QWORD *)v564 + 24))(v564);
    }
    else
    {
LABEL_223:
      v670 = (_BYTE *)v247;
    }
    *(_OWORD *)&v671[12] = *(_OWORD *)(a7 + 396);
    *(_OWORD *)v671 = *(_OWORD *)(a7 + 384);
    *(_WORD *)&v671[2] = 0;
    v671[4] = 0;
    v666[24] = 1;
    *(_QWORD *)&v671[8] = 1;
    v671[16] = 0;
    sub_239D01100((uint64_t)&v672, (__int128 *)&__dst);
    if (sub_239D01328((uint64_t)&v672, &v612))
    {
      v246 = 0;
      v248 = *((_OWORD *)v606 + 5);
      v625 = *((int64x2_t *)v606 + 4);
      v626 = v248;
      v249 = *((_OWORD *)v606 + 7);
      v627 = *((float64x2_t *)v606 + 6);
      v628 = v249;
      v250 = *((_OWORD *)v606 + 1);
      *(_OWORD *)v621 = *(_OWORD *)v606;
      v622 = v250;
      v251 = *((float64x2_t *)v606 + 3);
      v623 = *((int64x2_t *)v606 + 2);
      v624 = v251;
    }
    else
    {
      v246 = 7;
    }
    v252 = v670;
    if (v670 == v669)
    {
      v252 = v669;
      v253 = 4;
LABEL_232:
      (*(void (**)(void))(*v252 + 8 * v253))();
    }
    else if (v670)
    {
      v253 = 5;
      goto LABEL_232;
    }
    v254 = v668;
    if (v668 == v667)
    {
      v254 = v667;
      v255 = 4;
LABEL_237:
      (*(void (**)(void))(*v254 + 8 * v255))();
    }
    else if (v668)
    {
      v255 = 5;
      goto LABEL_237;
    }
    sub_239C034C4((uint64_t)&v672);
    v222 = v612;
    if (v612)
    {
LABEL_239:
      v613 = v222;
      operator delete(v222);
    }
    v220 = memptr;
    if (memptr)
LABEL_241:
      operator delete(v220);
LABEL_242:
    v256 = v616;
    if (v616)
    {
      p_shared_owners = (unint64_t *)&v616->__shared_owners_;
      do
        v258 = __ldaxr(p_shared_owners);
      while (__stlxr(v258 - 1, p_shared_owners));
      if (!v258)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
        if (!v246)
          goto LABEL_251;
        goto LABEL_247;
      }
    }
    if (v246)
      goto LABEL_247;
LABEL_251:
    v259 = *(_QWORD *)(a9 + 24);
    if (!v259)
    {
LABEL_263:
      *(_QWORD *)&v268.f64[0] = v622;
      _D2 = v626;
      _D4 = v628;
      _V5.D[1] = v627.f64[1];
      v272 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v621, v623);
      _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v621, v623);
      v268.f64[1] = v624.f64[0];
      v274 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(v625, 1), 8uLL);
      v275 = vzip1q_s64(v625, (int64x2_t)_Q0);
      v276 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v272, vnegq_f64(v627).f64[0]), _Q0, v627, 1), v268, *(double *)&v628, 0);
      *(_QWORD *)&_Q0.f64[0] = v625.i64[1];
      __asm
      {
        FMLS            D19, D0, V5.D[1]
        FMLS            D19, D2, V4.D[0]
      }
      *(_QWORD *)&v279.f64[0] = vdupq_laneq_s64(v275, 1).u64[0];
      v280 = v274.i64[1];
      *(_QWORD *)&v279.f64[1] = v274.i64[0];
      v281 = v275.i64[0];
      _Q19.f64[1] = 1.0;
      v283 = *((float64x2_t *)v31 + 4);
      v282 = *((float64x2_t *)v31 + 5);
      v285 = *((float64x2_t *)v31 + 6);
      _Q5 = *((float64x2_t *)v31 + 7);
      v287 = *((float64x2_t *)v31 + 8);
      v286 = *((float64x2_t *)v31 + 9);
      v570 = *((float64x2_t *)v31 + 10);
      v571 = *((float64x2_t *)v31 + 11);
      v288 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v283.f64[0]), v279, v283, 1), v268, v282.f64[0]), v276, v282, 1);
      v289 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v281, v283.f64[0]), (float64x2_t)(unint64_t)v280, v283, 1), (float64x2_t)(unint64_t)v626, v282.f64[0]), _Q19, v282, 1);
      _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v285.f64[0]), v279, v285, 1), v268, _Q5.f64[0]), v276, _Q5, 1);
      v291 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v281, v285.f64[0]), (float64x2_t)(unint64_t)v280, v285, 1), (float64x2_t)(unint64_t)v626, _Q5.f64[0]), _Q19, _Q5, 1);
      v579 = _Q19;
      v580 = v272;
      v572 = (float64x2_t)(unint64_t)v281;
      v573 = v279;
      v607 = v268;
      v575 = (float64x2_t)(unint64_t)v626;
      v576 = v276;
      _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v287.f64[0]), v279, v287, 1), v268, v286.f64[0]), v276, v286, 1);
      v574 = (float64x2_t)(unint64_t)v280;
      __dst = v288;
      *(float64x2_t *)&v665[8] = _Q2;
      *(_QWORD *)v665 = v289.i64[0];
      *(_QWORD *)&v665[24] = v291.i64[0];
      *(float64x2_t *)v666 = _Q3;
      *(_QWORD *)&v666[16] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)(unint64_t)v281, v287.f64[0]), (float64x2_t)(unint64_t)v280, v287, 1), (float64x2_t)(unint64_t)v626, v286.f64[0]), _Q19, v286, 1);
      v293 = (float64x2_t)vzip1q_s64((int64x2_t)v288, (int64x2_t)_Q2);
      v294 = (float64x2_t)vzip2q_s64((int64x2_t)v288, (int64x2_t)_Q2);
      v295 = (float64x2_t)vzip1q_s64(v289, v291);
      v296 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v293, v288.f64[0]), v294, v288, 1), v295, *(double *)v289.i64);
      _Q19 = (int64x2_t)vmulq_f64(_Q3, v288);
      _Q5.f64[0] = v288.f64[1];
      __asm { FMLA            D19, D5, V3.D[1] }
      *(double *)_Q19.i64 = vmlad_n_f64(*(double *)_Q19.i64, *(double *)v289.i64, *(double *)&v666[16]);
      v298 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v293, _Q2.f64[0]), v294, _Q2, 1), v295, *(double *)v291.i64);
      _Q21 = (int8x16_t)vmulq_f64(_Q3, _Q2);
      _Q5.f64[0] = _Q2.f64[1];
      __asm { FMLA            D21, D5, V3.D[1] }
      _D22 = _Q3.f64[1];
      *(double *)_Q21.i64 = vmlad_n_f64(*(double *)_Q21.i64, *(double *)v291.i64, *(double *)&v666[16]);
      v301 = vmlaq_laneq_f64(vmulq_n_f64(v293, _Q3.f64[0]), v294, _Q3, 1);
      v302 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v666[16], 0);
      _Q16 = vmulq_f64(_Q3, _Q3);
      __asm { FMLA            D16, D22, V3.D[1] }
      _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], *(double *)&v666[16], *(double *)&v666[16]);
      v304 = (int8x16_t)vaddq_f64(v298, (float64x2_t)xmmword_239EC6830);
      *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q16, v567));
      _Q16.f64[1] = NAN;
      v305 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v296, (float64x2_t)xmmword_239EC6820)), _Q16), vabsq_f64((float64x2_t)vextq_s8(v304, _Q21, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q19, (int64x2_t)v304)), vabsq_f64(vmlaq_n_f64(v301, v295, *(double *)&v666[16])))));
      v306 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
      v307 = (float64x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL);
      if (v305 > 0.0001)
        goto LABEL_587;
      v308 = vmulq_f64(v288, vmlaq_f64(vmulq_n_f64(v306, -*(double *)v291.i64), v307, v302));
      __asm { FMLA            D19, D2, V3.D[1] }
      if (fabs(_D19 * *(double *)v289.i64+ vsubq_f64(v308, (float64x2_t)vdupq_laneq_s64((int64x2_t)v308, 1)).f64[0]+ -1.0) > 0.0001)
      {
LABEL_587:
        if (v305 > 0.1)
          goto LABEL_564;
        v310 = vmulq_f64(v288, vmlaq_f64(vmulq_n_f64(v306, -*(double *)v291.i64), v307, v302));
        __asm { FMLA            D4, D2, V3.D[1] }
        if (fabs(_D4 * *(double *)v289.i64+ vsubq_f64(v310, (float64x2_t)vdupq_laneq_s64((int64x2_t)v310, 1)).f64[0]+ -1.0) > 0.1)
        {
LABEL_564:
          sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        sub_239516070(&__dst);
      }
      v674 = *(_OWORD *)&v665[16];
      v675 = *(_OWORD *)v666;
      v676.f64[0] = *(float64_t *)&v666[16];
      v672 = __dst;
      v673 = *(float64x2_t *)v665;
      v662 = 0;
      memptr = 0;
      v663 = 0.0;
      v26 = v587;
      sub_239458B60(&__dst, (double *)&memptr);
      v312 = v663;
      v569 = v662;
      LOBYTE(v615) = 1;
      *(_QWORD *)&__dst.f64[0] = __p;
      LODWORD(__dst.f64[1]) = 0;
      memptr = (char *)__p + 8 * (v630 >> 6);
      LODWORD(v662) = v630 & 0x3F;
      if ((unint64_t)sub_239458E50((uint64_t)&__dst, (uint64_t)&memptr, &v615) < 6)
        goto LABEL_248;
      v313 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v580, v570.f64[0]), v573, v570, 1), v607, v571.f64[0]), v576, v571, 1);
      v314 = v313.f64[1];
      v315 = v313.f64[0];
      v316 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v572, v570.f64[0]), v574, v570, 1), v575, v571.f64[0]), v579, v571, 1);
      if (v582 >= (unint64_t)v566)
      {
        v320 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v582 - (_QWORD)v587) >> 3) + 1;
        if (v320 > 0x276276276276276)
          sub_2394189F8();
        if (0x9D89D89D89D89D8ALL * ((v566 - v587) >> 3) > v320)
          v320 = 0x9D89D89D89D89D8ALL * ((v566 - v587) >> 3);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v566 - v587) >> 3)) >= 0x13B13B13B13B13BLL)
          v321 = 0x276276276276276;
        else
          v321 = v320;
        if (v321 > 0x276276276276276)
          sub_239418A80();
        v322 = v582;
        v323 = (char *)operator new(104 * v321);
        v324 = v672;
        v325 = &v323[8 * ((uint64_t)(v582 - (_QWORD)v587) >> 3)];
        *(float64x2_t *)(v325 + 24) = v673;
        v326 = v675;
        *(_OWORD *)(v325 + 40) = v674;
        *(_OWORD *)(v325 + 56) = v326;
        *(_QWORD *)v325 = 0x3FF0000000000000;
        v327 = v676.f64[0];
        *(float64x2_t *)(v325 + 8) = v324;
        *((float64_t *)v325 + 9) = v327;
        *((float64_t *)v325 + 10) = v315;
        *((float64_t *)v325 + 11) = v314;
        *((_QWORD *)v325 + 12) = v316;
        v26 = v325;
        if ((char *)v582 != v587)
        {
          do
          {
            v328 = *(_QWORD *)(v322 - 104);
            v322 -= 104;
            *((_QWORD *)v26 - 13) = v328;
            v26 -= 104;
            *(_OWORD *)(v26 + 8) = *(_OWORD *)(v322 + 8);
            v329 = *(_OWORD *)(v322 + 24);
            v330 = *(_OWORD *)(v322 + 40);
            v331 = *(_OWORD *)(v322 + 56);
            *((_QWORD *)v26 + 9) = *(_QWORD *)(v322 + 72);
            *(_OWORD *)(v26 + 56) = v331;
            *(_OWORD *)(v26 + 40) = v330;
            *(_OWORD *)(v26 + 24) = v329;
            v332 = *(_OWORD *)(v322 + 80);
            *((_QWORD *)v26 + 12) = *(_QWORD *)(v322 + 96);
            *((_OWORD *)v26 + 5) = v332;
          }
          while ((char *)v322 != v587);
          v322 = (unint64_t)v587;
        }
        v566 = &v323[104 * v321];
        v608 = v325 + 104;
        if (v322)
          operator delete((void *)v322);
      }
      else
      {
        *(_QWORD *)v582 = 0x3FF0000000000000;
        v317 = v673;
        v318 = v674;
        v319 = v675;
        *(float64_t *)(v582 + 72) = v676.f64[0];
        *(float64_t *)(v582 + 80) = v315;
        *(float64x2_t *)(v582 + 8) = v672;
        *(_OWORD *)(v582 + 56) = v319;
        *(_OWORD *)(v582 + 40) = v318;
        *(float64x2_t *)(v582 + 24) = v317;
        *(float64_t *)(v582 + 88) = v314;
        *(_QWORD *)(v582 + 96) = v316;
        v608 = (char *)(v582 + 104);
      }
      _V2.D[1] = v569;
      v588 = v26;
      _D1 = v569;
      __asm { FMLA            D0, D1, V2.D[1] }
      v336 = sqrt(_D0 + v312 * v312) * 180.0 / 3.14159265;
      v337 = v633;
      if (v633 < v634)
      {
        *v633 = v336;
        v338 = v337 + 1;
        v339 = v604;
LABEL_308:
        v633 = v338;
        v355 = v652;
        if (v652 < v653)
        {
          *(_DWORD *)v652 = *((_DWORD *)v339 + 4);
          v356 = v355 + 4;
          goto LABEL_331;
        }
        v357 = (char *)v651;
        v358 = v652 - (_BYTE *)v651;
        v359 = (v652 - (_BYTE *)v651) >> 2;
        v360 = v359 + 1;
        if ((unint64_t)(v359 + 1) >> 62)
          sub_2394189F8();
        v361 = v653 - (_BYTE *)v651;
        if ((v653 - (_BYTE *)v651) >> 1 > v360)
          v360 = v361 >> 1;
        if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL)
          v362 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v362 = v360;
        if (!v362)
        {
          v363 = 0;
LABEL_320:
          v364 = &v363[4 * v359];
          *(_DWORD *)v364 = *((_DWORD *)v339 + 4);
          v356 = v364 + 4;
          if (v355 != v357)
          {
            v365 = v355 - 4 - v357;
            if (v365 < 0x2C)
              goto LABEL_588;
            if ((unint64_t)(v355 - &v363[v358]) < 0x20)
              goto LABEL_588;
            v366 = (v365 >> 2) + 1;
            v367 = &v363[4 * v359 - 16];
            v368 = v355 - 16;
            v369 = v366 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v370 = *(_OWORD *)v368;
              *((_OWORD *)v367 - 1) = *((_OWORD *)v368 - 1);
              *(_OWORD *)v367 = v370;
              v367 -= 32;
              v368 -= 32;
              v369 -= 8;
            }
            while (v369);
            v364 -= 4 * (v366 & 0x7FFFFFFFFFFFFFF8);
            v355 -= 4 * (v366 & 0x7FFFFFFFFFFFFFF8);
            if (v366 != (v366 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_588:
              do
              {
                v371 = *((_DWORD *)v355 - 1);
                v355 -= 4;
                *((_DWORD *)v364 - 1) = v371;
                v364 -= 4;
              }
              while (v355 != v357);
            }
          }
          v651 = v364;
          v652 = v356;
          v653 = &v363[4 * v362];
          if (v357)
            operator delete(v357);
LABEL_331:
          v652 = v356;
          v372 = (_QWORD *)v650;
          if ((unint64_t)v650 >= *((_QWORD *)&v650 + 1))
          {
            v378 = v649;
            v379 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v650 - (_QWORD)v649) >> 3);
            v380 = v379 + 1;
            if (v379 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_2394189F8();
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v650 + 1) - (_QWORD)v649) >> 3) > v380)
              v380 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v650 + 1) - (_QWORD)v649) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v650 + 1) - (_QWORD)v649) >> 3) >= 0x555555555555555)
              v381 = 0xAAAAAAAAAAAAAAALL;
            else
              v381 = v380;
            *(_QWORD *)&v665[16] = (char *)&v650 + 8;
            if (v381)
            {
              if (v381 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_572;
              v382 = (char *)operator new(24 * v381);
            }
            else
            {
              v382 = 0;
            }
            v383 = &v382[24 * v379];
            *(_QWORD *)&__dst.f64[0] = v382;
            *(_QWORD *)&__dst.f64[1] = v383;
            v384 = &v382[24 * v381];
            *(_QWORD *)v665 = v383;
            *(_QWORD *)&v665[8] = v384;
            *((_QWORD *)v383 + 1) = 0;
            v385 = v383 + 8;
            *((_QWORD *)v383 + 2) = 0;
            *(_QWORD *)v383 = 0;
            v386 = v644;
            v387 = v645 - (_BYTE *)v644;
            if (v645 != v644)
            {
              if (0xAAAAAAAAAAAAAAABLL * (v387 >> 3) > 0xAAAAAAAAAAAAAAALL)
                sub_2394189F8();
              v388 = (char *)operator new(v645 - (_BYTE *)v644);
              *(_QWORD *)v383 = v388;
              *v385 = v388;
              *((_QWORD *)v383 + 2) = &v388[8 * (v387 >> 3)];
              v389 = 24 * ((v387 - 24) / 0x18uLL) + 24;
              memcpy(v388, v386, v389);
              *v385 = &v388[v389];
              v10 = (uint64_t *)v585;
            }
            v377 = v383 + 24;
            *(_QWORD *)v665 = v383 + 24;
            if (v372 == v378)
            {
              v649 = v383;
              *(_QWORD *)&v650 = v383 + 24;
              *((_QWORD *)&v650 + 1) = v384;
            }
            else
            {
              do
              {
                v390 = v383;
                *((_QWORD *)v383 - 2) = 0;
                *((_QWORD *)v383 - 1) = 0;
                v391 = *(_OWORD *)(v372 - 3);
                v372 -= 3;
                *(_OWORD *)(v383 - 24) = v391;
                v383 -= 24;
                *((_QWORD *)v390 - 1) = v372[2];
                *v372 = 0;
                v372[1] = 0;
                v372[2] = 0;
              }
              while (v372 != v378);
              v372 = v649;
              v392 = (_QWORD *)v650;
              v649 = v383;
              v650 = *(_OWORD *)v665;
              v377 = *(_QWORD **)v665;
              if (v392 != v372)
              {
                v393 = v392;
                do
                {
                  v395 = (void *)*(v393 - 3);
                  v393 -= 3;
                  v394 = v395;
                  if (v395)
                  {
                    *(v392 - 2) = v394;
                    operator delete(v394);
                  }
                  v392 = v393;
                }
                while (v393 != v372);
              }
            }
            if (v372)
              operator delete(v372);
          }
          else
          {
            *(_QWORD *)v650 = 0;
            v372[1] = 0;
            v372[2] = 0;
            v373 = v644;
            v374 = v645 - (_BYTE *)v644;
            if (v645 != v644)
            {
              if (0xAAAAAAAAAAAAAAABLL * (v374 >> 3) > 0xAAAAAAAAAAAAAAALL)
                sub_2394189F8();
              v375 = (char *)operator new(v645 - (_BYTE *)v644);
              *v372 = v375;
              v372[1] = v375;
              v372[2] = &v375[8 * (v374 >> 3)];
              v376 = 24 * ((v374 - 24) / 0x18uLL) + 24;
              memcpy(v375, v373, v376);
              v372[1] = &v375[v376];
            }
            v377 = v372 + 3;
          }
          *(_QWORD *)&v650 = v377;
          v396 = (_QWORD *)v648;
          if ((unint64_t)v648 < *((_QWORD *)&v648 + 1))
          {
            *(_QWORD *)v648 = 0;
            v396[1] = 0;
            v396[2] = 0;
            v397 = v641;
            v398 = (char *)v642 - (_BYTE *)v641;
            if (v642 != v641)
            {
              if (v398 < 0)
                sub_2394189F8();
              v399 = (char *)operator new((char *)v642 - (_BYTE *)v641);
              *v396 = v399;
              v396[1] = v399;
              v396[2] = &v399[16 * (v398 >> 4)];
              v400 = v398 & 0xFFFFFFFFFFFFFFF0;
              memcpy(v399, v397, v400);
              v396[1] = &v399[v400];
            }
            v401 = v396 + 3;
            v26 = v588;
            goto LABEL_387;
          }
          v402 = v647;
          v403 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v648 - (_QWORD)v647) >> 3);
          v404 = v403 + 1;
          if (v403 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_2394189F8();
          if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v648 + 1) - (_QWORD)v647) >> 3) > v404)
            v404 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v648 + 1) - (_QWORD)v647) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v648 + 1) - (_QWORD)v647) >> 3) >= 0x555555555555555)
            v405 = 0xAAAAAAAAAAAAAAALL;
          else
            v405 = v404;
          *(_QWORD *)&v665[16] = (char *)&v648 + 8;
          if (!v405)
          {
            v406 = 0;
LABEL_374:
            v407 = &v406[24 * v403];
            *(_QWORD *)&__dst.f64[0] = v406;
            *(_QWORD *)&__dst.f64[1] = v407;
            v408 = &v406[24 * v405];
            *(_QWORD *)v665 = v407;
            *(_QWORD *)&v665[8] = v408;
            *((_QWORD *)v407 + 1) = 0;
            v409 = v407 + 8;
            *((_QWORD *)v407 + 2) = 0;
            *(_QWORD *)v407 = 0;
            v410 = v641;
            v411 = (char *)v642 - (_BYTE *)v641;
            if (v642 != v641)
            {
              if (v411 < 0)
                sub_2394189F8();
              v412 = (char *)operator new((char *)v642 - (_BYTE *)v641);
              *(_QWORD *)v407 = v412;
              *v409 = v412;
              *((_QWORD *)v407 + 2) = &v412[16 * (v411 >> 4)];
              v413 = v411 & 0xFFFFFFFFFFFFFFF0;
              memcpy(v412, v410, v413);
              *v409 = &v412[v413];
            }
            v401 = v407 + 24;
            *(_QWORD *)v665 = v407 + 24;
            if (v396 == v402)
            {
              v647 = v407;
              *(_QWORD *)&v648 = v407 + 24;
              *((_QWORD *)&v648 + 1) = v408;
              v26 = v588;
            }
            else
            {
              do
              {
                v414 = v407;
                *((_QWORD *)v407 - 2) = 0;
                *((_QWORD *)v407 - 1) = 0;
                v415 = *(_OWORD *)(v396 - 3);
                v396 -= 3;
                *(_OWORD *)(v407 - 24) = v415;
                v407 -= 24;
                *((_QWORD *)v414 - 1) = v396[2];
                *v396 = 0;
                v396[1] = 0;
                v396[2] = 0;
              }
              while (v396 != v402);
              v396 = v647;
              v416 = (_QWORD *)v648;
              v647 = v407;
              v648 = *(_OWORD *)v665;
              v401 = *(_QWORD **)v665;
              if (v416 == v396)
              {
                v26 = v588;
                if (!v396)
                  goto LABEL_387;
                goto LABEL_386;
              }
              v417 = v416;
              v26 = v588;
              do
              {
                v419 = (void *)*(v417 - 3);
                v417 -= 3;
                v418 = v419;
                if (v419)
                {
                  *(v416 - 2) = v418;
                  operator delete(v418);
                }
                v416 = v417;
              }
              while (v417 != v396);
            }
            if (!v396)
            {
LABEL_387:
              *(_QWORD *)&v648 = v401;
              v582 = (unint64_t)v608;
              goto LABEL_248;
            }
LABEL_386:
            operator delete(v396);
            goto LABEL_387;
          }
          if (v405 <= 0xAAAAAAAAAAAAAAALL)
          {
            v406 = (char *)operator new(24 * v405);
            goto LABEL_374;
          }
LABEL_572:
          sub_239418A80();
        }
        if (!(v362 >> 62))
        {
          v363 = (char *)operator new(4 * v362);
          v339 = v604;
          goto LABEL_320;
        }
LABEL_571:
        sub_239418A80();
      }
      v340 = (double *)v632;
      v341 = (char *)v633 - (_BYTE *)v632;
      v342 = ((char *)v633 - (_BYTE *)v632) >> 3;
      v343 = v342 + 1;
      if ((unint64_t)(v342 + 1) >> 61)
        sub_2394189F8();
      v344 = (char *)v634 - (_BYTE *)v632;
      if (((char *)v634 - (_BYTE *)v632) >> 2 > v343)
        v343 = v344 >> 2;
      if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8)
        v345 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v345 = v343;
      if (v345)
      {
        if (v345 >> 61)
          goto LABEL_571;
        v346 = (char *)operator new(8 * v345);
      }
      else
      {
        v346 = 0;
      }
      v347 = (double *)&v346[8 * v342];
      *v347 = v336;
      v338 = v347 + 1;
      if (v337 == v340)
      {
        v339 = v604;
        goto LABEL_306;
      }
      v348 = (char *)(v337 - 1) - (char *)v340;
      if (v348 >= 0x58)
      {
        v339 = v604;
        if ((unint64_t)((char *)v337 - &v346[v341]) >= 0x20)
        {
          v349 = (v348 >> 3) + 1;
          v350 = &v346[8 * v342 - 16];
          v351 = v337 - 2;
          v352 = v349 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v353 = *(_OWORD *)v351;
            *((_OWORD *)v350 - 1) = *((_OWORD *)v351 - 1);
            *(_OWORD *)v350 = v353;
            v350 -= 32;
            v351 -= 4;
            v352 -= 4;
          }
          while (v352);
          v347 -= v349 & 0x3FFFFFFFFFFFFFFCLL;
          v337 -= v349 & 0x3FFFFFFFFFFFFFFCLL;
          if (v349 == (v349 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_306:
            v632 = v347;
            v633 = v338;
            v634 = (double *)&v346[8 * v345];
            if (v340)
              operator delete(v340);
            goto LABEL_308;
          }
        }
      }
      else
      {
        v339 = v604;
      }
      do
      {
        v354 = *((_QWORD *)v337-- - 1);
        *((_QWORD *)v347-- - 1) = v354;
      }
      while (v337 != v340);
      goto LABEL_306;
    }
    *(_QWORD *)&v672.f64[0] = *((unsigned int *)v604 + 4);
    (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64x2_t *))(*(_QWORD *)v259 + 48))(&__dst, v259, &v672);
    if (!*(_QWORD *)&__dst.f64[0])
      goto LABEL_256;
    v260 = sub_2395D7BEC((uint64_t)a2, *((_DWORD *)v604 + 4));
    sub_2395F81B8((uint64_t)&v672, (uint64_t)v260);
    v680 = v625;
    v681 = v626;
    v682 = (int64x2_t)v627;
    v683 = v628;
    v676 = *(float64x2_t *)v621;
    v677 = v622;
    *(_QWORD *)&v261.f64[1] = v623.i64[1];
    v678 = v623;
    v679 = v624;
    v261.f64[0] = 0.75;
    v263 = sub_239E23D14(v10, v672.f64, *(uint64_t *)&__dst.f64[0], (float *)&memptr, v261, v624.f64[0], v262);
    if (v686 < 0)
      operator delete(v685);
    free(*((void **)&v674 + 1));
    if (!v263)
    {
      v264 = 0;
      v265 = __dst.f64[1];
      if (!*(_QWORD *)&__dst.f64[1])
        goto LABEL_262;
    }
    else
    {
LABEL_256:
      v264 = 1;
      v265 = __dst.f64[1];
      if (!*(_QWORD *)&__dst.f64[1])
        goto LABEL_262;
    }
    v266 = (unint64_t *)(*(_QWORD *)&v265 + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (v267)
    {
LABEL_262:
      if ((v264 & 1) != 0)
        goto LABEL_263;
    }
    else
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v265 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v265));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v265);
      if ((v264 & 1) != 0)
        goto LABEL_263;
    }
LABEL_247:
    v26 = v587;
LABEL_248:
    if (__p)
      operator delete(__p);
    v21 = (uint64_t *)*v604;
    if (*v604)
      continue;
    break;
  }
  v421 = v633;
  v422 = v632;
  v423 = (char *)v582;
LABEL_393:
  v424 = 0x4EC4EC4EC4EC4EC5 * ((v423 - v26) >> 3);
  v589 = v26;
  if (v424 != ((char *)v421 - v422) >> 3)
  {
    v563 = 250;
    goto LABEL_570;
  }
  v425 = a6;
  if (v424 != (v652 - (_BYTE *)v651) >> 2)
  {
    v563 = 251;
    goto LABEL_570;
  }
  if (v424 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v650 - (_QWORD)v649) >> 3))
  {
    v563 = 252;
    goto LABEL_570;
  }
  if (v424 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v648 - (_QWORD)v647) >> 3))
  {
    v563 = 253;
LABEL_570:
    sub_239A444D4((uint64_t)"unknown file", v563, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v423 != v26)
  {
    v581 = 0;
    v584 = 0;
    v577 = -1;
    v583 = 0x4EC4EC4EC4EC4EC5 * ((v423 - v26) >> 3);
    while (2)
    {
      if (v652 != v651)
      {
        v426 = 0;
        v427 = 0;
        v428 = *(double *)(a7 + 48);
        v591 = (v652 - (_BYTE *)v651) >> 2;
        v592 = (uint64_t)&v26[104 * (int)v584];
        do
        {
          v429 = sub_239BF5CF4((uint64_t)a2, *((unsigned int *)v651 + v427));
          v430 = *((float64x2_t *)v429 + 1);
          v672 = *(float64x2_t *)v429;
          v673 = v430;
          LOBYTE(v674) = *((_BYTE *)v429 + 32);
          v431 = *((unsigned int *)v429 + 14);
          v432 = (8 * v431 + 31) & 0xFFFFFFFE0;
          *((_QWORD *)&v674 + 1) = 0;
          *(_QWORD *)&v675 = v432 >> 3;
          __dst.f64[0] = 0.0;
          malloc_type_posix_memalign((void **)&__dst, 0x20uLL, v432, 0x100BBD03uLL);
          *((_QWORD *)&v674 + 1) = *(_QWORD *)&__dst.f64[0];
          if (!*(_QWORD *)&__dst.f64[0])
          {
            v559 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v560 = std::bad_alloc::bad_alloc(v559);
            __cxa_throw(v560, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          if ((_DWORD)v431)
            memcpy(*(void **)&__dst.f64[0], (const void *)v429[5], 8 * v431);
          DWORD2(v675) = *((_DWORD *)v429 + 14);
          v433 = *((float64x2_t *)v429 + 7);
          v435 = *((float64x2_t *)v429 + 4);
          v434 = *((_OWORD *)v429 + 5);
          v678 = *((int64x2_t *)v429 + 6);
          v679 = v433;
          v676 = v435;
          v677 = v434;
          v436 = *((_OWORD *)v429 + 11);
          v438 = *((int64x2_t *)v429 + 8);
          v437 = *((_OWORD *)v429 + 9);
          v682 = *((int64x2_t *)v429 + 10);
          v683 = v436;
          v680 = v438;
          v681 = v437;
          sub_2396F774C((uint64_t)&v672, v592, v682);
          v441 = (float64x2_t **)((char *)v649 + 24 * v427);
          v442 = *v441;
          v443 = (char *)*((_QWORD *)&v674 + 1);
          v444 = (char *)v441[1] - (char *)*v441;
          if (v444)
          {
            v445 = v444 / 24;
            v446 = (float64x2_t *)*((_QWORD *)v647 + 3 * v427);
            v447 = v676;
            _D20 = v679.f64[0];
            v449 = (float64x2_t)v678;
            v450 = (float64x2_t)v680;
            v451 = *(double *)&v681;
            *(_QWORD *)&v440.f64[0] = v683;
            v452 = (int8x16_t)v682;
            v453 = vextq_s8(v452, v452, 8uLL).u64[0];
            v454 = v674;
            v455 = v672;
            v456 = v673;
            v609 = v676;
            v602 = (float64x2_t)v678;
            v603 = v679.f64[0];
            v600 = *(double *)&v681;
            v601 = (float64x2_t)v680;
            v598 = v682.i64[0];
            v599 = v440;
            v595 = v672;
            v597 = v453;
            v594 = v673;
            do
            {
              _Q0.f64[0] = v442[1].f64[0];
              _Q1 = *v442;
              v462 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v447, v442->f64[0]), v449, *v442, 1), v450, _Q0.f64[0]);
              __asm { FMLA            D3, D20, V1.D[1] }
              _Q0.f64[0] = _D3 + v451 * _Q0.f64[0];
              *(_QWORD *)&_Q1.f64[0] = v452.i64[0];
              *(_QWORD *)&_Q1.f64[1] = v453;
              _Q29 = vdivq_f64(vaddq_f64(v462, _Q1), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(_Q0, v440), 0));
              if (v454 != 2)
              {
                if (v454 == 1)
                {
                  _Q0 = *(float64x2_t *)(v443 + 24);
                  _D1 = _Q0.f64[1];
                  __asm { FMLA            D2, D1, V0.D[1] }
                  v467 = sqrt(_D2);
                  _D3 = _Q29.f64[1];
                  __asm { FMLA            D2, D3, V29.D[1] }
                  v470 = vmulq_n_f64(_Q29, *(double *)v443 * _D2+ 1.0+ *((double *)v443 + 1) * (_D2 * _D2)+ *((double *)v443 + 2) * (_D2 * (_D2 * _D2)));
                  if (v467 <= 2.22507386e-308)
                  {
                    _Q29 = v470;
                  }
                  else
                  {
                    v471 = vmuld_lane_f64(_Q29.f64[0], _Q29, 1);
                    v472 = vmuld_lane_f64(vmlad_n_f64(_D2, _Q29.f64[0] + _Q29.f64[0], _Q29.f64[0]), _Q0, 1)
                         + (_Q0.f64[0] + _Q0.f64[0]) * v471;
                    _D3 = _Q29.f64[1] + _Q29.f64[1];
                    __asm { FMLA            D2, D3, V29.D[1] }
                    v475.f64[0] = v470.f64[0] + v472;
                    v475.f64[1] = v470.f64[1] + vmlad_n_f64(v471 * (_Q0.f64[1] + _Q0.f64[1]), _D2, _Q0.f64[0]);
                    _Q29 = v475;
                  }
                }
                goto LABEL_410;
              }
              v476 = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(_Q29, _Q29).f64[1]), _Q29.f64[0], _Q29.f64[0]);
              v477 = 1.0;
              if (v476 >= 0.0000000149011612)
              {
                v478 = *(double *)v443;
                v479 = *((double *)v443 + 1);
                v480 = *((double *)v443 + 2);
                v481 = *((double *)v443 + 3);
                v482 = sqrt(v476);
                v610 = _Q29;
                v483 = atan2(v482, 1.0);
                v447 = v609;
                _Q29 = v610;
                v456 = v594;
                v455 = v595;
                v453 = v597;
                v452.i64[0] = v598;
                v440 = v599;
                v451 = v600;
                v450 = v601;
                v449 = v602;
                _D20 = v603;
                if (v483 > 1.57079633)
                  goto LABEL_410;
                v477 = (v483
                      + v478 * (v483 * (v483 * v483))
                      + v479 * (v483 * v483 * (v483 * (v483 * v483)))
                      + v480 * (v483 * v483 * (v483 * v483 * (v483 * (v483 * v483))))
                      + v481 * (v483 * v483 * (v483 * v483 * (v483 * v483 * (v483 * (v483 * v483))))))
                     / v482;
              }
              _Q29 = vmulq_n_f64(_Q29, v477);
LABEL_410:
              v458 = *v446++;
              _Q0 = vsubq_f64(v458, vmlaq_f64(v456, v455, _Q29));
              _D2 = _Q0.f64[1];
              __asm { FMLA            D1, D2, V0.D[1] }
              if (sqrt(_D1) <= v428)
                ++v426;
              v442 = (float64x2_t *)((char *)v442 + 24);
              --v445;
            }
            while (v445);
          }
          free(v443);
          ++v427;
        }
        while (v427 != v591);
        v425 = a6;
        v26 = v589;
        v424 = v583;
        if (v426 > v581)
        {
          LODWORD(v672.f64[0]) = *((_DWORD *)v651 + (int)v584);
          v484 = sub_239C038C4((uint64_t *)&v657, LODWORD(v672.f64[0]), &v672);
          v425 = a6;
          v485 = (char *)*a6;
          a6[1] = *a6;
          v487 = (unsigned int *)v484[3];
          v486 = (unsigned int *)v484[4];
          if (v487 != v486)
          {
            v611 = (unsigned int *)v484[4];
            while (1)
            {
              v489 = v425[2];
              if ((unint64_t)v485 >= v489)
                break;
              *(_QWORD *)v485 = *v487;
              v488 = v485 + 8;
LABEL_425:
              v425[1] = v488;
              v487 += 2;
              v485 = v488;
              if (v487 == v486)
                goto LABEL_399;
            }
            v490 = (char *)*v425;
            v491 = (uint64_t)&v485[-*v425];
            v492 = v491 >> 3;
            v493 = (v491 >> 3) + 1;
            if (v493 >> 61)
              sub_2394189F8();
            v494 = v489 - (_QWORD)v490;
            if (v494 >> 2 > v493)
              v493 = v494 >> 2;
            if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8)
              v495 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v495 = v493;
            if (v495)
            {
              if (v495 >> 61)
                sub_239418A80();
              v496 = v495;
              v497 = operator new(8 * v495);
              v425 = a6;
              v495 = v496;
            }
            else
            {
              v497 = 0;
            }
            v498 = &v497[8 * v492];
            *v498 = *v487;
            v488 = (char *)(v498 + 1);
            if (v485 == v490)
            {
              v26 = v589;
            }
            else
            {
              v499 = v485 - 8 - v490;
              if (v499 < 0x168)
              {
                v500 = v485;
                v26 = v589;
                goto LABEL_445;
              }
              if (&v497[v491 - 8 - (v499 & 0xFFFFFFFFFFFFFFF8)] > &v497[v491 - 8]
                || &v485[-(v499 & 0xFFFFFFFFFFFFFFF8) - 8] > v485 - 8
                || (unint64_t)(v485 - v497 - v491) < 0x20)
              {
                v500 = v485;
                v425 = a6;
                v26 = v589;
                goto LABEL_445;
              }
              v502 = (v499 >> 3) + 1;
              v500 = &v485[-8 * (v502 & 0x3FFFFFFFFFFFFFFCLL)];
              v503 = &v497[8 * v492 - 16];
              v504 = v485 - 16;
              v505 = v502 & 0x3FFFFFFFFFFFFFFCLL;
              v26 = v589;
              do
              {
                v506 = *(_OWORD *)v504;
                *(v503 - 1) = *((_OWORD *)v504 - 1);
                *v503 = v506;
                v503 -= 2;
                v504 -= 32;
                v505 -= 4;
              }
              while (v505);
              v498 -= v502 & 0x3FFFFFFFFFFFFFFCLL;
              v425 = a6;
              if (v502 != (v502 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_445:
                  v501 = *((_QWORD *)v500 - 1);
                  v500 -= 8;
                  *--v498 = v501;
                }
                while (v500 != v490);
              }
            }
            *v425 = v498;
            v425[1] = v488;
            v425[2] = &v497[8 * v495];
            if (v490)
            {
              operator delete(v490);
              v425 = a6;
            }
            v486 = v611;
            goto LABEL_425;
          }
LABEL_399:
          v581 = v426;
          v424 = v583;
          v577 = v584;
        }
      }
      if (++v584 == v424)
        goto LABEL_454;
      continue;
    }
  }
  v577 = -1;
LABEL_454:
  if (*(_QWORD *)(a8 + 24))
  {
    __dst = 0uLL;
    *(_QWORD *)v665 = 0;
    v621[1] = 0;
    v621[0] = 0;
    *(_QWORD *)&v622 = 0;
    v507 = (char *)*v425;
    v508 = (char *)v425[1];
    if ((char *)*v425 != v508)
    {
      do
      {
        v511 = sub_2394A2EA8(v585, *(_QWORD *)v507);
        sub_2394FB1F8((float32x2_t **)&__dst, (float64x2_t *)v511);
        v512 = v511 + 3;
        v513 = (char *)v621[1];
        if (v621[1] < (void *)v622)
        {
          v509 = *(_WORD *)v512;
          *((_BYTE *)v621[1] + 2) = *((_BYTE *)v512 + 2);
          *(_WORD *)v513 = v509;
          v510 = v513 + 3;
          v26 = v589;
        }
        else
        {
          v514 = (char *)v621[0];
          v515 = 0xAAAAAAAAAAAAAAABLL * ((char *)v621[1] - (char *)v621[0]);
          v516 = v515 + 1;
          if (v515 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * ((unint64_t)v622 - (unint64_t)v621[0]) > v516)
            v516 = 0x5555555555555556 * (v622 - (unint64_t)v621[0]);
          if (0xAAAAAAAAAAAAAAABLL * ((_QWORD)v622 - (unint64_t)v621[0]) >= 0x2AAAAAAAAAAAAAAALL)
            v517 = 0x5555555555555555;
          else
            v517 = v516;
          if (v517)
          {
            if (v517 >= 0x5555555555555556)
              sub_239418A80();
            v518 = (char *)operator new(3 * v517);
          }
          else
          {
            v518 = 0;
          }
          v519 = *(_WORD *)v512;
          v520 = &v518[3 * v515];
          v520[2] = *((_BYTE *)v512 + 2);
          *(_WORD *)v520 = v519;
          v521 = v520;
          if (v513 != v514)
          {
            do
            {
              v522 = *(_WORD *)(v513 - 3);
              v513 -= 3;
              v523 = v513[2];
              *(_WORD *)(v521 - 3) = v522;
              v521 -= 3;
              v521[2] = v523;
            }
            while (v513 != v514);
            v513 = (char *)v621[0];
          }
          v510 = v520 + 3;
          v621[0] = v521;
          v621[1] = v520 + 3;
          *(_QWORD *)&v622 = &v518[3 * v517];
          v26 = v589;
          if (v513)
            operator delete(v513);
        }
        v621[1] = v510;
        v507 += 8;
      }
      while (v507 != v508);
    }
    sub_239C03D48((uint64_t)&v672, (uint64_t)&__dst, (uint64_t)v621);
    HIBYTE(v618) = 3;
    LODWORD(v617[0]) = 6710642;
    v524 = *(_QWORD *)(a8 + 24);
    if (!v524)
      sub_2394172E0();
    (*(void (**)(uint64_t, float64x2_t *, void **))(*(_QWORD *)v524 + 48))(v524, &v672, v617);
    if (SHIBYTE(v618) < 0)
      operator delete(v617[0]);
    if ((_BYTE)v681 && *(_QWORD *)&v679.f64[1])
    {
      v680.i64[0] = *(_QWORD *)&v679.f64[1];
      operator delete(*(void **)&v679.f64[1]);
    }
    if (LOBYTE(v679.f64[0]))
    {
      v525 = *((_QWORD *)&v677 + 1);
      if (*((_QWORD *)&v677 + 1))
      {
        v526 = v678.i64[0];
        v527 = (void *)*((_QWORD *)&v677 + 1);
        if (v678.i64[0] != *((_QWORD *)&v677 + 1))
        {
          v528 = v678.i64[0];
          do
          {
            v530 = *(void **)(v528 - 24);
            v528 -= 24;
            v529 = v530;
            if (v530)
            {
              *(_QWORD *)(v526 - 16) = v529;
              operator delete(v529);
            }
            v526 = v528;
          }
          while (v528 != v525);
          v527 = (void *)*((_QWORD *)&v677 + 1);
        }
        v678.i64[0] = v525;
        operator delete(v527);
      }
    }
    if ((_BYTE)v677 && *((_QWORD *)&v675 + 1))
    {
      v676.f64[0] = *((float64_t *)&v675 + 1);
      operator delete(*((void **)&v675 + 1));
    }
    if ((_BYTE)v675 && *(_QWORD *)&v673.f64[1])
    {
      *(float64_t *)&v674 = v673.f64[1];
      operator delete(*(void **)&v673.f64[1]);
    }
    if (*(_QWORD *)&v672.f64[0])
    {
      v672.f64[1] = v672.f64[0];
      operator delete(*(void **)&v672.f64[0]);
    }
    if (v621[0])
    {
      v621[1] = v621[0];
      operator delete(v621[0]);
    }
    if (*(_QWORD *)&__dst.f64[0])
    {
      __dst.f64[1] = __dst.f64[0];
      operator delete(*(void **)&__dst.f64[0]);
    }
  }
  if ((v577 & 0x80000000) == 0)
  {
    v531 = &v26[104 * v577];
    *(_QWORD *)v578 = *(_QWORD *)v531;
    *(_OWORD *)(v578 + 8) = *(_OWORD *)(v531 + 8);
    v532 = *(_OWORD *)(v531 + 24);
    v533 = *(_OWORD *)(v531 + 40);
    _Q2 = *(float64x2_t *)(v531 + 56);
    *(_QWORD *)(v578 + 72) = *((_QWORD *)v531 + 9);
    *(float64x2_t *)(v578 + 56) = _Q2;
    *(_OWORD *)(v578 + 40) = v533;
    *(_OWORD *)(v578 + 24) = v532;
    _Q0 = *((float64x2_t *)v531 + 5);
    *(_QWORD *)(v578 + 96) = *((_QWORD *)v531 + 12);
    *(float64x2_t *)(v578 + 80) = _Q0;
    for (i = (_QWORD *)a2[11]; i; i = (_QWORD *)*i)
      _Q0.f64[0] = sub_2396F774C((uint64_t)(i + 3), v578, (int64x2_t)_Q0);
    for (j = (uint64_t *)a2[6]; j; j = (uint64_t *)*j)
    {
      _Q2.f64[0] = *(float64_t *)(v578 + 48);
      v538 = *(float64x2_t *)(v578 + 32);
      v539 = *((double *)j + 5);
      _Q7 = *(float64x2_t *)(j + 3);
      v541 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v578 + 8), _Q7.f64[0]), v538, _Q7, 1), *(float64x2_t *)(v578 + 56), v539);
      __asm { FMLA            D0, D2, V7.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + *(double *)(v578 + 72) * v539;
      _Q2.f64[0] = *(float64_t *)v578;
      v538.f64[0] = *(float64_t *)(v578 + 96);
      *(float64x2_t *)(j + 3) = vmlaq_n_f64(*(float64x2_t *)(v578 + 80), v541, *(double *)v578);
      j[5] = *(_OWORD *)&vmlaq_f64(v538, _Q2, _Q0);
    }
  }
  if (v632)
  {
    v633 = (double *)v632;
    operator delete(v632);
  }
  if (v26)
    operator delete(v26);
  if (v635)
  {
    v636 = (double *)v635;
    operator delete(v635);
  }
  if (v638)
  {
    v639 = (char *)v638;
    operator delete(v638);
  }
  if (v641)
  {
    v642 = (double *)v641;
    operator delete(v641);
  }
  if (v644)
  {
    v645 = (char *)v644;
    operator delete(v644);
  }
  v542 = (char *)v647;
  if (v647)
  {
    v543 = (char *)v648;
    v544 = v647;
    if ((void *)v648 != v647)
    {
      v545 = (char *)v648;
      do
      {
        v547 = (void *)*((_QWORD *)v545 - 3);
        v545 -= 24;
        v546 = v547;
        if (v547)
        {
          *((_QWORD *)v543 - 2) = v546;
          operator delete(v546);
        }
        v543 = v545;
      }
      while (v545 != v542);
      v544 = v647;
    }
    *(_QWORD *)&v648 = v542;
    operator delete(v544);
  }
  v548 = (char *)v649;
  if (v649)
  {
    v549 = (char *)v650;
    v550 = v649;
    if ((void *)v650 != v649)
    {
      v551 = (char *)v650;
      do
      {
        v553 = (void *)*((_QWORD *)v551 - 3);
        v551 -= 24;
        v552 = v553;
        if (v553)
        {
          *((_QWORD *)v549 - 2) = v552;
          operator delete(v552);
        }
        v549 = v551;
      }
      while (v551 != v548);
      v550 = v649;
    }
    *(_QWORD *)&v650 = v548;
    operator delete(v550);
  }
  v420 = v577 >= 0;
  if (v651)
  {
    v652 = (char *)v651;
    operator delete(v651);
  }
LABEL_537:
  if (v654)
  {
    v655 = v654;
    operator delete(v654);
  }
  v554 = (_QWORD *)v658;
  if ((_QWORD)v658)
  {
    do
    {
      v557 = (_QWORD *)*v554;
      v558 = (void *)v554[3];
      if (v558)
      {
        v554[4] = v558;
        operator delete(v558);
      }
      operator delete(v554);
      v554 = v557;
    }
    while (v557);
  }
  v555 = (void *)v657;
  *(_QWORD *)&v657 = 0;
  if (v555)
    operator delete(v555);
  return v420;
}

void sub_239C01E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  unint64_t v50;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  void *v69;
  void *v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  void *v74;
  void *v75;

  v52 = *(void **)v50;
  if (*(_QWORD *)v50)
  {
    *(_QWORD *)(v50 + 8) = v52;
    operator delete(v52);
  }
  STACK[0x3B8] = v50;
  if (STACK[0x320])
  {
    operator delete((void *)STACK[0x320]);
    v53 = (void *)STACK[0x338];
    if (!STACK[0x338])
    {
LABEL_5:
      if (!a50)
        goto LABEL_6;
      goto LABEL_25;
    }
  }
  else
  {
    v53 = (void *)STACK[0x338];
    if (!STACK[0x338])
      goto LABEL_5;
  }
  STACK[0x340] = (unint64_t)v53;
  operator delete(v53);
  if (!a50)
  {
LABEL_6:
    v54 = (void *)STACK[0x350];
    if (!STACK[0x350])
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a50);
  v54 = (void *)STACK[0x350];
  if (!STACK[0x350])
  {
LABEL_7:
    v55 = (void *)STACK[0x368];
    if (!STACK[0x368])
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  STACK[0x358] = (unint64_t)v54;
  operator delete(v54);
  v55 = (void *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_8:
    v56 = (void *)STACK[0x380];
    if (!STACK[0x380])
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  STACK[0x370] = (unint64_t)v55;
  operator delete(v55);
  v56 = (void *)STACK[0x380];
  if (!STACK[0x380])
  {
LABEL_9:
    v57 = (void *)STACK[0x398];
    if (!STACK[0x398])
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  STACK[0x388] = (unint64_t)v56;
  operator delete(v56);
  v57 = (void *)STACK[0x398];
  if (!STACK[0x398])
  {
LABEL_10:
    v58 = STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  STACK[0x3A0] = (unint64_t)v57;
  operator delete(v57);
  v58 = STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_11:
    v59 = STACK[0x3C8];
    if (!STACK[0x3C8])
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_30:
  v66 = STACK[0x3B8];
  v67 = (void *)v58;
  if (STACK[0x3B8] != v58)
  {
    v68 = STACK[0x3B8];
    do
    {
      v70 = *(void **)(v68 - 24);
      v68 -= 24;
      v69 = v70;
      if (v70)
      {
        *(_QWORD *)(v66 - 16) = v69;
        operator delete(v69);
      }
      v66 = v68;
    }
    while (v68 != v58);
    v67 = (void *)STACK[0x3B0];
  }
  STACK[0x3B8] = v58;
  operator delete(v67);
  v59 = STACK[0x3C8];
  if (!STACK[0x3C8])
  {
LABEL_12:
    v60 = (void *)STACK[0x3E0];
    if (!STACK[0x3E0])
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_37:
  v71 = STACK[0x3D0];
  v72 = (void *)v59;
  if (STACK[0x3D0] != v59)
  {
    v73 = STACK[0x3D0];
    do
    {
      v75 = *(void **)(v73 - 24);
      v73 -= 24;
      v74 = v75;
      if (v75)
      {
        *(_QWORD *)(v71 - 16) = v74;
        operator delete(v74);
      }
      v71 = v73;
    }
    while (v73 != v59);
    v72 = (void *)STACK[0x3C8];
  }
  STACK[0x3D0] = v59;
  operator delete(v72);
  v60 = (void *)STACK[0x3E0];
  if (!STACK[0x3E0])
  {
LABEL_14:
    v61 = (void *)STACK[0x3F8];
    if (STACK[0x3F8])
    {
      STACK[0x400] = (unint64_t)v61;
      operator delete(v61);
    }
    v62 = (_QWORD *)STACK[0x420];
    if (STACK[0x420])
    {
      do
      {
        v64 = (_QWORD *)*v62;
        v65 = (void *)v62[3];
        if (v65)
        {
          v62[4] = v65;
          operator delete(v65);
        }
        operator delete(v62);
        v62 = v64;
      }
      while (v64);
    }
    v63 = (void *)STACK[0x410];
    STACK[0x410] = 0;
    if (v63)
      operator delete(v63);
    _Unwind_Resume(a1);
  }
LABEL_13:
  STACK[0x3E8] = (unint64_t)v60;
  operator delete(v60);
  goto LABEL_14;
}

unint64_t sub_239C02314(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int *v36;
  unsigned int v37;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *i;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v55;
  BOOL v56;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  BOOL v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  BOOL v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  BOOL v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  BOOL v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  BOOL v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  BOOL v142;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v62 = *v8;
        v63 = *v9;
        if (*v8 < *v9 || (v62 <= v63 ? (v64 = *(a2 - 1) >= v9[1]) : (v64 = 1), !v64))
        {
          *v9 = v62;
          *(a2 - 2) = v63;
          v65 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v65;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_239C06024(v9, v9 + 2, a2 - 2);
      case 4uLL:
        result = (unint64_t)sub_239C06024(v9, v9 + 2, v9 + 4);
        v66 = *v8;
        v67 = v9[4];
        if (*v8 >= v67 && (v66 > v67 || *(a2 - 1) >= v9[5]))
          return result;
        v9[4] = v66;
        *(a2 - 2) = v67;
        v69 = v9[5];
        v9[5] = *(a2 - 1);
        *(a2 - 1) = v69;
        v70 = v9[2];
        v71 = v9[3];
        v73 = v9[4];
        v72 = v9[5];
        if (v73 >= v70 && (v73 > v70 || v72 >= v71))
          return result;
        v9[2] = v73;
        v9[3] = v72;
        v9[4] = v70;
        v9[5] = v71;
        v74 = *v9;
        if (v73 >= *v9)
        {
          if (v73 > v74)
            return result;
          v75 = v9[1];
          if (v72 >= v75)
            return result;
        }
        else
        {
          v75 = v9[1];
        }
        *v9 = v73;
        v9[1] = v72;
        v9[2] = v74;
        v9[3] = v75;
        return result;
      case 5uLL:
        return (unint64_t)sub_239C06134(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v10 <= 191)
        {
          v76 = v9 + 2;
          v78 = v9 == a2 || v76 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v78)
            {
              v79 = 0;
              v80 = v9;
              do
              {
                v82 = v76;
                v83 = v80[2];
                v84 = *v80;
                if (v83 < *v80 || (v83 <= v84 ? (v85 = v80[3] >= v80[1]) : (v85 = 1), !v85))
                {
                  v87 = v80[2];
                  v86 = v80[3];
                  v88 = v80[1];
                  v80[2] = v84;
                  v82[1] = v88;
                  v81 = v9;
                  if (v80 != v9)
                  {
                    v89 = v79;
                    while (1)
                    {
                      v90 = (unsigned int *)((char *)v9 + v89);
                      v91 = *(unsigned int *)((char *)v9 + v89 - 8);
                      v92 = *(unsigned int *)((char *)v9 + v89 - 4);
                      if (v91 <= v87 && (v91 < v87 || v92 <= v86))
                        break;
                      *v90 = v91;
                      v90[1] = v92;
                      v89 -= 8;
                      if (!v89)
                      {
                        v81 = v9;
                        goto LABEL_134;
                      }
                    }
                    v81 = (unsigned int *)((char *)v9 + v89);
                  }
LABEL_134:
                  *v81 = v87;
                  v81[1] = v86;
                }
                v76 = v82 + 2;
                v79 += 8;
                v80 = v82;
              }
              while (v82 + 2 != a2);
            }
          }
          else if (!v78)
          {
            do
            {
              v133 = v76;
              v134 = v7[2];
              v135 = *v7;
              if (v134 < *v7 || (v134 <= v135 ? (v136 = v7[3] >= v7[1]) : (v136 = 1), !v136))
              {
                v137 = *v133;
                v138 = v133[1];
                do
                {
                  do
                  {
                    v139 = v7;
                    v140 = *(v7 - 2);
                    v7 -= 2;
                    v141 = v7[3];
                    v7[4] = v135;
                    v7[5] = v141;
                    v135 = v140;
                    v142 = v140 >= v137;
                  }
                  while (v140 > v137);
                }
                while (v142 && *(v139 - 1) > v138);
                *v139 = v137;
                v139[1] = v138;
              }
              v76 = v133 + 2;
              v7 = v133;
            }
            while (v133 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v94 = (v11 - 2) >> 1;
            v95 = v94;
            do
            {
              v96 = v95;
              if (v94 >= v95)
              {
                v97 = (2 * v95) | 1;
                v98 = &v9[2 * v97];
                if (2 * v96 + 2 < (uint64_t)v11)
                {
                  v99 = v98[2];
                  if (*v98 < v99
                    || ((result = v98[3], *v98 <= v99) ? (v100 = v98[1] >= result) : (v100 = 1), !v100))
                  {
                    v98 += 2;
                    v97 = 2 * v96 + 2;
                  }
                }
                v101 = &v9[2 * v96];
                v102 = *v98;
                if (*v98 >= *v101)
                {
                  result = v98[1];
                  if (v102 > *v101 || result >= v101[1])
                  {
                    v104 = *v101;
                    v105 = v101[1];
                    do
                    {
                      result = (unint64_t)v101;
                      v101 = v98;
                      *(_DWORD *)result = v102;
                      *(_DWORD *)(result + 4) = v98[1];
                      if (v94 < v97)
                        break;
                      v106 = 2 * v97;
                      v97 = (2 * v97) | 1;
                      v98 = &v9[2 * v97];
                      v107 = v106 + 2;
                      if (v107 < (uint64_t)v11)
                      {
                        result = (unint64_t)(v98 + 2);
                        v108 = v98[2];
                        if (*v98 < v108 || (*v98 <= v108 ? (v109 = v98[1] >= v98[3]) : (v109 = 1), !v109))
                        {
                          v98 += 2;
                          v97 = v107;
                        }
                      }
                      v102 = *v98;
                      if (*v98 < v104)
                        break;
                      result = v98[1];
                    }
                    while (v102 > v104 || result >= v105);
                    *v101 = v104;
                    v101[1] = v105;
                  }
                }
              }
              v95 = v96 - 1;
            }
            while (v96);
            v111 = (unint64_t)v10 >> 3;
            do
            {
              v112 = 0;
              v113 = *(_QWORD *)v9;
              v114 = v9;
              do
              {
                v115 = v114;
                v114 += 2 * v112 + 2;
                v116 = 2 * v112;
                v112 = (2 * v112) | 1;
                v117 = v116 + 2;
                if (v117 < v111)
                {
                  v118 = v114[2];
                  if (*v114 < v118
                    || ((result = v114[3], *v114 <= v118) ? (v119 = v114[1] >= result) : (v119 = 1), !v119))
                  {
                    v114 += 2;
                    v112 = v117;
                  }
                }
                *v115 = *v114;
                v115[1] = v114[1];
              }
              while (v112 <= (uint64_t)((unint64_t)(v111 - 2) >> 1));
              if (v114 == a2 - 2)
              {
                *(_QWORD *)v114 = v113;
              }
              else
              {
                *v114 = *(a2 - 2);
                v114[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v113;
                v120 = (char *)v114 - (char *)v9 + 8;
                if (v120 >= 9)
                {
                  v121 = ((unint64_t)v120 >> 3) - 2;
                  v122 = v121 >> 1;
                  v123 = &v9[2 * (v121 >> 1)];
                  v124 = *v123;
                  if (*v123 < *v114 || (v124 <= *v114 ? (v125 = v123[1] >= v114[1]) : (v125 = 1), !v125))
                  {
                    v126 = *v114;
                    v127 = v114[1];
                    *v114 = v124;
                    v114[1] = v123[1];
                    if (v121 >= 2)
                    {
                      while (1)
                      {
                        v129 = v122 - 1;
                        v122 = (v122 - 1) >> 1;
                        v130 = &v9[2 * v122];
                        v131 = *v130;
                        if (*v130 < v126)
                        {
                          v128 = v130[1];
                        }
                        else
                        {
                          v128 = v130[1];
                          if (v131 > v126 || v128 >= v127)
                            break;
                        }
                        *v123 = v131;
                        v123[1] = v128;
                        v123 = &v9[2 * v122];
                        if (v129 <= 1)
                          goto LABEL_215;
                      }
                    }
                    v130 = v123;
LABEL_215:
                    *v130 = v126;
                    v130[1] = v127;
                  }
                }
              }
              a2 -= 2;
              v34 = v111-- <= 2;
            }
            while (!v34);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)sub_239C06024(&v7[2 * (v11 >> 1)], v7, a2 - 2);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          sub_239C06024(v7, &v7[2 * (v11 >> 1)], a2 - 2);
          v14 = &v7[2 * v12];
          sub_239C06024(v7 + 2, v14 - 2, a2 - 4);
          sub_239C06024(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
          result = (unint64_t)sub_239C06024(v14 - 2, v13, &v7[2 * v12 + 2]);
          v15 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v15;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        v16 = *(v7 - 2);
        if (v16 >= *v7 && (v16 > *v7 || *(v7 - 1) >= v7[1]))
        {
          v41 = *v7;
          v40 = v7[1];
          v42 = *v8;
          if (*v8 <= *v7 && (v42 < v41 || *(a2 - 1) <= v40))
          {
            v58 = v7 + 2;
            do
            {
              v9 = v58;
              if (v58 >= a2)
                break;
              v59 = *v58;
              if (*v58 > v41)
                break;
              v60 = v58[1];
              v58 += 2;
            }
            while (v59 < v41 || v60 <= v40);
          }
          else
          {
            v43 = v7 + 2;
            do
            {
              v9 = v43;
              v44 = *v43;
              if (*v43 > v41)
                break;
              v45 = v43[1];
              v43 += 2;
            }
            while (v44 < v41 || v45 <= v40);
          }
          i = a2;
          if (v9 < a2)
          {
            for (i = a2 - 2; v42 > v41 || v42 >= v41 && i[1] > v40; i -= 2)
            {
              v48 = *(i - 2);
              v42 = v48;
            }
          }
          if (v9 < i)
          {
            v49 = *v9;
            v50 = *i;
            do
            {
              *v9 = v50;
              *i = v49;
              v51 = v9[1];
              v9[1] = i[1];
              i[1] = v51;
              v52 = v9 + 2;
              do
              {
                v9 = v52;
                v49 = *v52;
                if (*v52 > v41)
                  break;
                v53 = v52[1];
                v52 += 2;
              }
              while (v49 < v41 || v53 <= v40);
              do
              {
                do
                {
                  v55 = *(i - 2);
                  i -= 2;
                  v50 = v55;
                  v56 = v55 >= v41;
                }
                while (v55 > v41);
              }
              while (v56 && i[1] > v40);
            }
            while (v9 < i);
          }
          if (v9 - 2 != v7)
          {
            *v7 = *(v9 - 2);
            v7[1] = *(v9 - 1);
          }
          a4 = 0;
          *(v9 - 2) = v41;
          *(v9 - 1) = v40;
          continue;
        }
LABEL_13:
        v17 = v7 + 2;
        v18 = *(_QWORD *)v7;
        v19 = HIDWORD(*(_QWORD *)v7);
        while (1)
        {
          v20 = *v17;
          if (*v17 >= v18 && (v20 > v18 || v17[1] >= v19))
            break;
          v17 += 2;
        }
        v22 = a2 - 2;
        if (v17 - 2 == v7)
        {
          v27 = a2 - 2;
          while (1)
          {
            v23 = v27;
            v28 = v27 + 2;
            if (v17 >= v28)
              break;
            if (*v23 >= v18)
            {
              v27 = v23 - 2;
              if (*v23 > v18 || v23[1] >= v19)
                continue;
            }
            goto LABEL_37;
          }
          v23 = v28;
        }
        else
        {
          do
          {
            v23 = v22;
            v24 = *v22;
            if (*v22 < v18)
              break;
            v25 = v22[1];
            v22 -= 2;
          }
          while (v24 > v18 || v25 >= v19);
        }
LABEL_37:
        v9 = v17;
        if (v17 < v23)
        {
          v30 = *v23;
          v9 = v17;
          v31 = v23;
          do
          {
            *v9 = v30;
            *v31 = v20;
            v32 = v9[1];
            v9[1] = v31[1];
            v31[1] = v32;
            do
            {
              do
              {
                v33 = v9[2];
                v9 += 2;
                v20 = v33;
                v34 = v33 > v18;
              }
              while (v33 < v18);
            }
            while (!v34 && v9[1] < v19);
            v36 = v31 - 2;
            do
            {
              v31 = v36;
              v30 = *v36;
              if (*v36 < v18)
                break;
              v37 = v36[1];
              v36 -= 2;
            }
            while (v30 > v18 || v37 >= v19);
          }
          while (v9 < v31);
        }
        if (v9 - 2 != v7)
        {
          *v7 = *(v9 - 2);
          v7[1] = *(v9 - 1);
        }
        *(v9 - 2) = v18;
        *(v9 - 1) = v19;
        if (v17 < v23)
        {
LABEL_59:
          result = sub_239C02314(v7, v9 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v39 = sub_239C06330(v7, v9 - 2);
        result = sub_239C06330(v9, a2);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_59;
        }
        a2 = v9 - 2;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_239C02C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  std::bad_alloc *exception;
  std::bad_alloc *v19;
  uint64_t v20;
  void *memptr;

  v4 = a4;
  v20 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v13 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)v4 = *(_OWORD *)v6;
      *(_OWORD *)(v4 + 16) = v13;
      *(_BYTE *)(v4 + 32) = *(_BYTE *)(v6 + 32);
      v14 = *(unsigned int *)(v6 + 56);
      v15 = (8 * v14 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = v15 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v15, 0x100BBD03uLL);
      v16 = memptr;
      *(_QWORD *)(v4 + 40) = memptr;
      if (!v16)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v19 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v19, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v14)
        memcpy(v16, *(const void **)(v6 + 40), 8 * v14);
      *(_DWORD *)(v4 + 56) = *(_DWORD *)(v6 + 56);
      v7 = *(_OWORD *)(v6 + 64);
      v8 = *(_OWORD *)(v6 + 80);
      v9 = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v6 + 96);
      *(_OWORD *)(v4 + 112) = v9;
      *(_OWORD *)(v4 + 64) = v7;
      *(_OWORD *)(v4 + 80) = v8;
      v10 = *(_OWORD *)(v6 + 128);
      v11 = *(_OWORD *)(v6 + 144);
      v12 = *(_OWORD *)(v6 + 176);
      *(_OWORD *)(v4 + 160) = *(_OWORD *)(v6 + 160);
      *(_OWORD *)(v4 + 176) = v12;
      *(_OWORD *)(v4 + 128) = v10;
      *(_OWORD *)(v4 + 144) = v11;
      v4 = v20 + 192;
      v20 += 192;
      v6 += 192;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_239C02D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239460460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239C02D94(_QWORD *a1, _QWORD *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  float64x2_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  long double v19;
  double v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  void *v30;
  int v32;
  _OWORD *v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  double v42;
  long double v43;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  double v50;
  BOOL v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  float64x2_t v55;
  uint64_t v57;
  __int128 v59;
  unint64_t v60;
  _BYTE v61[2504];
  uint64_t v62;
  uint64_t (**v63)();
  __int128 v64;
  __int128 v65;
  __int128 v66;
  float64x2_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char v75;
  void *__p;
  void *v77;
  uint64_t v78;
  void *__src;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  int v85;
  char v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float64x2_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v6 = v5 >= 5 && v5 == (uint64_t)(a2[1] - *a2) >> 4;
  if (!v6)
    return 0;
  v11 = *(_QWORD *)(a5 + 24);
  v68 = xmmword_239F13AC0;
  v69 = unk_239F13AD0;
  v70 = xmmword_239F13AE0;
  v71 = unk_239F13AF0;
  v64 = xmmword_239F13A80;
  v65 = *(_OWORD *)algn_239F13A90;
  v66 = xmmword_239F13AA0;
  v67 = xmmword_239F13AB0;
  v63 = &off_250B00658;
  v72 = v11;
  v73 = a1;
  v74 = a2;
  v59 = *(_OWORD *)(a5 + 32);
  v60 = *(_QWORD *)a5;
  LODWORD(v89) = 0;
  sub_239454CD8((int *)&v89, (uint64_t)v61);
  v12 = ((unint64_t (*)(uint64_t))v63[2])((uint64_t)&v63);
  v83 = v12;
  v13 = v63[3]();
  v82 = v13;
  LODWORD(v16) = 1;
  if (*((double *)&v59 + 1) < 1.0 && *((double *)&v59 + 1) > 0.0)
  {
    *(double *)&v17 = log(1.0 - *(double *)&v59);
    v18 = *(double *)&v17;
    LODWORD(v17) = 5;
    v19 = pow(*((long double *)&v59 + 1), (double)v17);
    v16 = vcvtpd_u64_f64(v18 / log(1.0 - v19));
    if (v16 == -1)
    {
      v57 = 120;
LABEL_78:
      sub_239A444D4((uint64_t)"unknown file", v57, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  if (v12 < v13)
  {
    v57 = 171;
    goto LABEL_78;
  }
  v93 = xmmword_239F13AC0;
  v94 = unk_239F13AD0;
  v95 = xmmword_239F13AE0;
  v96 = unk_239F13AF0;
  v89 = xmmword_239F13A80;
  v90 = *(_OWORD *)algn_239F13A90;
  v91 = xmmword_239F13AA0;
  v20 = 0.0;
  v92 = xmmword_239F13AB0;
  v80 = 0;
  __src = 0;
  v81 = 0;
  if (v12)
  {
    v21 = ((unint64_t)v12 - 1) >> 6;
    v22 = (char *)operator new(8 * (v21 + 1));
    v23 = v22;
    v81 = v21 + 1;
    __src = v22;
    v80 = v12;
    if (v12 >= 0x41)
      v24 = ((unint64_t)v12 - 1) >> 6;
    else
      v24 = 0;
    *(_QWORD *)&v22[8 * v24] = 0;
    v25 = 8 * ((unint64_t)v12 >> 6);
    if (v12 >= 0x40)
      bzero(v22, v25);
    if ((v12 & 0x3F) != 0)
      *(_QWORD *)&v23[v25] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v12 & 0x3F));
  }
  v26 = v16;
  if ((_DWORD)v16)
  {
    v27 = 0;
    v28 = -2147483647;
    while (1)
    {
      if (v82 > v83)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v83)
      {
        if ((double)v83 * 0.5 >= (double)v82)
          sub_239455384((uint64_t)v61, &v83, (int *)&v82, (int32x4_t **)&__p);
        else
          sub_2394551BC((uint64_t)v61, &v83, &v82, (int32x4_t **)&__p);
      }
      else
      {
        v77 = 0;
        __p = 0;
        v78 = 0;
      }
      if (((BOOL (*)(uint64_t, uint64_t *, double, double, float64x2_t))v63[5])((uint64_t)&v63, (uint64_t *)&__p, v20, v14, v15))
      {
        break;
      }
      v29 = 1;
      v30 = __p;
      if (__p)
        goto LABEL_21;
LABEL_22:
      v6 = v26 - 1 == v27++;
      if (v6 || !v29)
        goto LABEL_60;
    }
    v32 = ((uint64_t (*)(uint64_t, uint64_t *))v63[4])((uint64_t)&v63, (uint64_t *)&__src);
    if (v32 <= v28)
    {
      v34 = v80;
    }
    else
    {
      v33 = (_OWORD *)((uint64_t (*)(uint64_t))v63[6])((uint64_t)&v63);
      v93 = v33[4];
      v94 = v33[5];
      v95 = v33[6];
      v96 = v33[7];
      v89 = *v33;
      v90 = v33[1];
      v91 = v33[2];
      v92 = *((float64x2_t *)v33 + 3);
      v34 = v80;
      if (&__src != (void **)a4)
      {
        if (v80)
        {
          v35 = *(void **)a4;
          if (v80 <= *(_QWORD *)(a4 + 16) << 6)
          {
            v36 = v80 - 1;
          }
          else
          {
            if (v35)
            {
              operator delete(v35);
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              v34 = v80;
            }
            if ((v34 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v36 = v34 - 1;
            v37 = ((v34 - 1) >> 6) + 1;
            v35 = operator new(8 * v37);
            *(_QWORD *)a4 = v35;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v37;
          }
          memmove(v35, __src, ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v34 = v80;
        }
        *(_QWORD *)(a4 + 8) = v34;
      }
      v28 = v32;
    }
    v75 = 1;
    v87 = (uint64_t)__src;
    v88 = 0;
    v84 = (char *)__src + 8 * (v34 >> 6);
    v85 = v34 & 0x3F;
    v38 = sub_239458E50((uint64_t)&v87, (uint64_t)&v84, &v75);
    v39 = v26;
    if (v38)
    {
      v20 = (double)v38;
      LODWORD(v14) = v83;
      v14 = (double)*(unint64_t *)&v14;
      v40 = (double)v38 / v14;
      if (v40 >= 1.0)
      {
        v39 = 1;
      }
      else
      {
        v39 = 1;
        if (v40 > 0.0)
        {
          *(double *)&v41 = log(1.0 - *(double *)&v59);
          v42 = *(double *)&v41 * 3.0;
          LODWORD(v41) = 5;
          v43 = pow(v40, (double)v41);
          v20 = v42 / log(1.0 - v43);
          v39 = vcvtpd_u64_f64(v20);
          if (v39 == -1)
          {
            sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
        }
      }
    }
    v29 = v39 > v27 || v60 > v27;
    v30 = __p;
    if (!__p)
      goto LABEL_22;
LABEL_21:
    v77 = v30;
    operator delete(v30);
    goto LABEL_22;
  }
LABEL_60:
  v68 = v93;
  v69 = v94;
  v70 = v95;
  v71 = v96;
  v64 = v89;
  v65 = v90;
  v66 = v91;
  v67 = v92;
  v45 = *(void **)a4;
  v46 = *(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6);
  v47 = *(_QWORD *)(a4 + 8) & 0x3FLL;
  v86 = 1;
  __p = v45;
  LODWORD(v77) = 0;
  v87 = v46;
  v88 = v47;
  v48 = sub_239458E50((uint64_t)&__p, (uint64_t)&v87, &v86);
  if (__src)
    operator delete(__src);
  v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v50 = (double)v48 / (double)v49;
  if (*(_QWORD *)(a5 + 16) < v49)
    v49 = *(_QWORD *)(a5 + 16);
  v51 = v50 < *(double *)(a5 + 48) || v48 < (int)v49;
  v7 = !v51;
  if (!v51)
  {
    v52 = v69;
    a3[4] = v68;
    a3[5] = v52;
    v53 = v71;
    a3[6] = v70;
    a3[7] = v53;
    v54 = v65;
    *a3 = v64;
    a3[1] = v54;
    v55 = v67;
    a3[2] = v66;
    a3[3] = (__int128)v55;
  }
  sub_239911CF8((uint64_t)&v62);
  return v7;
}

void sub_239C03464(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0xB40];
  if (STACK[0xB40])
  {
    STACK[0xB48] = (unint64_t)v2;
    operator delete(v2);
  }
  if (STACK[0xB58])
    operator delete((void *)STACK[0xB58]);
  sub_239911CF8((uint64_t)&STACK[0xA78]);
  _Unwind_Resume(a1);
}

uint64_t sub_239C034C4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void **v24;
  void **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;

  v2 = *(void **)(a1 + 992);
  if (v2)
  {
    *(_QWORD *)(a1 + 1000) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 968);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(a1 + 952);
  *(_QWORD *)(a1 + 952) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 928);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 912);
  *(_QWORD *)(a1 + 912) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 888);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 872);
  *(_QWORD *)(a1 + 872) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(void **)(a1 + 848);
  if (v12)
  {
    *(_QWORD *)(a1 + 856) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 808);
  if (v13)
  {
    *(_QWORD *)(a1 + 816) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 776);
  if (v14)
  {
    *(_QWORD *)(a1 + 784) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 752);
  if (v15)
  {
    *(_QWORD *)(a1 + 760) = v15;
    operator delete(v15);
  }
  if (*(char *)(a1 + 719) < 0)
  {
    operator delete(*(void **)(a1 + 696));
    if ((*(char *)(a1 + 695) & 0x80000000) == 0)
    {
LABEL_25:
      v16 = *(void **)(a1 + 648);
      if (!v16)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  else if ((*(char *)(a1 + 695) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*(void **)(a1 + 672));
  v16 = *(void **)(a1 + 648);
  if (v16)
  {
LABEL_26:
    *(_QWORD *)(a1 + 656) = v16;
    operator delete(v16);
  }
LABEL_27:
  v17 = *(void **)(a1 + 624);
  if (v17)
  {
    *(_QWORD *)(a1 + 632) = v17;
    operator delete(v17);
  }
  v18 = *(_QWORD **)(a1 + 600);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = *(void **)(a1 + 584);
  *(_QWORD *)(a1 + 584) = 0;
  if (v20)
    operator delete(v20);
  v21 = *(void **)(a1 + 560);
  if (v21)
  {
    *(_QWORD *)(a1 + 568) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 536);
  if (v22)
  {
    *(_QWORD *)(a1 + 544) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 512);
  if (v23)
  {
    *(_QWORD *)(a1 + 520) = v23;
    operator delete(v23);
  }
  v24 = *(void ***)(a1 + 488);
  if (v24)
  {
    do
    {
      v25 = (void **)*v24;
      free(v24[8]);
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v26)
    operator delete(v26);
  v27 = *(_QWORD **)(a1 + 448);
  if (v27)
  {
    do
    {
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = *(void **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v29)
    operator delete(v29);
  v30 = *(_QWORD **)(a1 + 408);
  if (v30)
  {
    do
    {
      v31 = (_QWORD *)*v30;
      operator delete(v30);
      v30 = v31;
    }
    while (v31);
  }
  v32 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v32)
    operator delete(v32);
  v33 = *(_QWORD **)(a1 + 368);
  if (v33)
  {
    do
    {
      v34 = (_QWORD *)*v33;
      operator delete(v33);
      v33 = v34;
    }
    while (v34);
  }
  v35 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v35)
    operator delete(v35);
  v36 = *(_QWORD *)(a1 + 328);
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 336);
    v38 = *(void **)(a1 + 328);
    if (v37 != v36)
    {
      v39 = *(_QWORD *)(a1 + 336);
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = *(void **)(a1 + 328);
    }
    *(_QWORD *)(a1 + 336) = v36;
    operator delete(v38);
  }
  v42 = *(void **)(a1 + 304);
  if (v42)
  {
    *(_QWORD *)(a1 + 312) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(a1 + 280);
  if (v43)
  {
    *(_QWORD *)(a1 + 288) = v43;
    operator delete(v43);
  }
  v44 = *(_QWORD **)(a1 + 256);
  if (v44)
  {
    do
    {
      v45 = (_QWORD *)*v44;
      operator delete(v44);
      v44 = v45;
    }
    while (v45);
  }
  v46 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v46)
    operator delete(v46);
  v47 = *(void **)(a1 + 216);
  if (v47)
  {
    *(_QWORD *)(a1 + 224) = v47;
    operator delete(v47);
  }
  v48 = *(_QWORD **)(a1 + 176);
  if (v48 == (_QWORD *)(a1 + 152))
  {
    v49 = 4;
    v48 = (_QWORD *)(a1 + 152);
  }
  else
  {
    if (!v48)
      goto LABEL_81;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_81:
  v50 = *(_QWORD **)(a1 + 144);
  if (v50 == (_QWORD *)(a1 + 120))
  {
    v51 = 4;
    v50 = (_QWORD *)(a1 + 120);
    goto LABEL_85;
  }
  if (v50)
  {
    v51 = 5;
LABEL_85:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v52)
    goto LABEL_90;
  p_shared_owners = (unint64_t *)&v52->__shared_owners_;
  do
    v54 = __ldaxr(p_shared_owners);
  while (__stlxr(v54 - 1, p_shared_owners));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    v55 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v55)
      goto LABEL_96;
  }
  else
  {
LABEL_90:
    v55 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v55)
      goto LABEL_96;
  }
  v56 = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
LABEL_96:
  v58 = *(std::__shared_weak_count **)(a1 + 8);
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return a1;
}

_QWORD *sub_239C038C4(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_239418A80();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v6);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v6) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_239C03D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239C03D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  size_t v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_2394189F8();
    v8 = (char *)operator new(v7);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[4 * (v7 >> 2)];
    v9 = 12 * ((v7 - 12) / 0xCuLL) + 12;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 8) = &v8[v9];
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * v11 >= 0x5555555555555556)
      sub_2394189F8();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = &v12[v11];
    v13 = 3 * ((v11 - 3) / 3) + 3;
    memcpy(v12, v10, v13);
    *(_QWORD *)(a1 + 32) = &v12[v13];
  }
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  return a1;
}

void sub_239C03EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C03EF0()
{
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_239C03F04(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) - **(_QWORD **)(a1 + 144)) >> 3);
}

uint64_t sub_239C03F24()
{
  return 5;
}

uint64_t sub_239C03F2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  float64x2_t *v10;
  double v12;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_23941C5D8((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) - **(_QWORD **)(a1 + 144)) >> 3), 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) == **(_QWORD **)(a1 + 144))
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v8 = *(uint64_t **)(a1 + 144);
    v9 = *v8;
    v10 = (float64x2_t *)(*v8 + v4);
    _D3 = *(_QWORD *)(v7 + 48);
    v12 = v10[1].f64[0];
    _Q2 = *v10;
    __asm { FMLA            D0, D3, V2.D[1] }
    v19.f64[0] = _D0 + *(double *)(v7 + 80) * v12;
    v20.f64[0] = *(float64_t *)(v7 + 112);
    v21 = vaddq_f64(v19, v20).f64[0];
    if (v21 <= 2.22044605e-16)
    {
      *(_QWORD *)(*a2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v6);
    }
    else
    {
      _Q1 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v7, _Q2.f64[0]), *(float64x2_t *)(v7 + 32), _Q2, 1), *(float64x2_t *)(v7 + 64), v12), *(float64x2_t *)(v7 + 96));
      *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      _D2 = vsubq_f64(vdivq_f64(_Q1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21, 0)), *(float64x2_t *)(**(_QWORD **)(a1 + 152) + 16 * v6)).f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      v24 = *a2;
      v25 = 1 << v6;
      v26 = 8 * (v6 >> 6);
      if (sqrt(_Q1.f64[0]) <= *(double *)(a1 + 136))
      {
        *(_QWORD *)(v24 + v26) |= v25;
        v5 = (v5 + 1);
      }
      else
      {
        *(_QWORD *)(v24 + v26) &= ~v25;
      }
    }
    ++v6;
    v4 += 24;
  }
  while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v8[1] - v9) >> 3));
  return v5;
}

BOOL sub_239C040D8(uint64_t a1, uint64_t *a2, double a3, double a4, float64x2_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  float64x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 *v22;
  __int128 v23;
  __int128 *v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  float64x2_t *v31;
  float64x2_t *v32;
  _BOOL8 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float64x2_t v37;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float64x2_t *v49;
  char *v50;
  char *v51;
  __int128 *v52;
  __int128 *v53;
  char *v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v5 = *a2;
  if (a2[1] == *a2)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v6 = a1;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(unsigned int *)(v5 + 4 * v11);
      v15 = **(_QWORD **)(v6 + 144) + 24 * v14;
      if (v8 >= (__int128 *)v10)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v12) >> 3) + 1;
        if (v17 > 0xAAAAAAAAAAAAAAALL)
        {
          v53 = v8;
          sub_2394189F8();
        }
        if (0x5555555555555556 * ((v10 - (char *)v12) >> 3) > v17)
          v17 = 0x5555555555555556 * ((v10 - (char *)v12) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v10 - (char *)v12) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_52;
          v19 = (char *)operator new(24 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = *(_OWORD *)v15;
        v21 = &v19[8 * (((char *)v8 - (char *)v12) >> 3)];
        *((_QWORD *)v21 + 2) = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v21 = v20;
        if (v8 == v12)
        {
          v24 = v8;
          v12 = (__int128 *)&v19[8 * (((char *)v8 - (char *)v12) >> 3)];
          v6 = a1;
        }
        else
        {
          v22 = (__int128 *)&v19[8 * (((char *)v8 - (char *)v12) >> 3)];
          v6 = a1;
          do
          {
            v23 = *(__int128 *)((char *)v8 - 24);
            *((_QWORD *)v22 - 1) = *((_QWORD *)v8 - 1);
            *(__int128 *)((char *)v22 - 24) = v23;
            v22 = (__int128 *)((char *)v22 - 24);
            v8 = (__int128 *)((char *)v8 - 24);
          }
          while (v8 != v12);
          v24 = v12;
          v12 = v22;
        }
        v10 = &v19[24 * v18];
        v8 = (__int128 *)(v21 + 24);
        v52 = v12;
        v54 = v10;
        if (v24)
          operator delete(v24);
      }
      else
      {
        v16 = *(_OWORD *)v15;
        *((_QWORD *)v8 + 2) = *(_QWORD *)(v15 + 16);
        *v8 = v16;
        v8 = (__int128 *)((char *)v8 + 24);
      }
      v25 = (_OWORD *)(**(_QWORD **)(v6 + 152) + 16 * v14);
      if (v7 < v9)
      {
        *(_OWORD *)v7 = *v25;
        v7 += 16;
      }
      else
      {
        v26 = (v7 - (char *)v13) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
        {
          v53 = v8;
          v50 = v7;
          sub_2394189F8();
        }
        if ((v9 - (char *)v13) >> 3 > v27)
          v27 = (v9 - (char *)v13) >> 3;
        if ((unint64_t)(v9 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 >> 60)
          {
LABEL_52:
            v53 = v8;
            sub_239418A80();
          }
          v29 = (char *)operator new(16 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[16 * v26];
        *(_OWORD *)v30 = *v25;
        if (v7 == (char *)v13)
        {
          v32 = (float64x2_t *)v7;
          v13 = (float64x2_t *)&v29[16 * v26];
          v6 = a1;
        }
        else
        {
          v31 = (float64x2_t *)&v29[16 * v26];
          v6 = a1;
          do
          {
            v31[-1] = *((float64x2_t *)v7 - 1);
            --v31;
            v7 -= 16;
          }
          while (v7 != (char *)v13);
          v32 = v13;
          v13 = v31;
        }
        v9 = &v29[16 * v28];
        v7 = v30 + 16;
        v49 = v13;
        v51 = v9;
        if (v32)
          operator delete(v32);
      }
      ++v11;
      v5 = *a2;
    }
    while (v11 < (a2[1] - *a2) >> 2);
    v53 = v8;
    v50 = v7;
  }
  v45 = xmmword_239F13AC0;
  v46 = unk_239F13AD0;
  v47 = xmmword_239F13AE0;
  v48 = unk_239F13AF0;
  v41 = xmmword_239F13A80;
  v42 = *(_OWORD *)algn_239F13A90;
  v43 = xmmword_239F13AA0;
  v44 = xmmword_239F13AB0;
  v33 = sub_239C044F8(&v52, &v49, (uint64_t)&v41, (float64x2_t)xmmword_239F13AA0, 0.0, a5);
  if (v33)
  {
    v34 = v46;
    *(_OWORD *)(a1 + 72) = v45;
    *(_OWORD *)(a1 + 88) = v34;
    v35 = v48;
    *(_OWORD *)(a1 + 104) = v47;
    *(_OWORD *)(a1 + 120) = v35;
    v36 = v42;
    *(_OWORD *)(a1 + 8) = v41;
    *(_OWORD *)(a1 + 24) = v36;
    v37 = v44;
    *(_OWORD *)(a1 + 40) = v43;
    *(float64x2_t *)(a1 + 56) = v37;
  }
  if (v13)
    operator delete(v13);
  if (v12)
    operator delete(v12);
  return v33;
}

void sub_239C04468(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if (v1)
  {
    *(_QWORD *)(v2 - 128) = v1;
    operator delete(v1);
    v4 = *(void **)(v2 - 112);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)(v2 - 112);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v2 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C044BC(uint64_t a1)
{
  return a1 + 8;
}

__n128 sub_239C044C4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 56);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

BOOL sub_239C044F8(__int128 **a1, float64x2_t **a2, uint64_t a3, float64x2_t a4, double a5, float64x2_t a6)
{
  __int128 *v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v10;
  float64x2_t v12;
  double v18;
  double v19;
  double v22;
  double v23;
  double v25;
  _BOOL8 v26;
  char *v30;
  double v34;
  double v39;
  double v44;
  double v48;
  double v49;
  double v50;
  double v51;
  float64_t v52;
  double v53;
  float64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double *v62;
  double *v63;
  _OWORD *v64;
  int v65;
  void *v66;
  __int128 *v67;
  double *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  long double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  __double2 v99;
  double v100;
  double v101;
  double v102;
  long double v103;
  double v104;
  int8x16_t v105;
  double v106;
  float64x2_t v107;
  double v108;
  __double2 v109;
  double v110;
  double v111;
  long double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  __double2 v122;
  double v123;
  double v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  int8x16_t v137;
  long double v138;
  int8x16_t v139;
  double v140;
  int8x16_t v141;
  double v142;
  double v143;
  int8x16_t v144;
  double v145;
  double v146;
  int8x16_t v147;
  int8x16_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  double v155;
  double v156;
  double v157;
  double v158;
  float64x2_t v159;
  __double2 v160;
  double v161;
  float64x2_t v162;
  double v163;
  float64x2_t v164;
  double v165;
  __double2 v166;
  float64x2_t v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  __double2 v171;
  double v172;
  double v173;
  double v174;
  long double v175;
  double v176;
  int8x16_t v177;
  double v178;
  float64x2_t v179;
  double v180;
  double v181;
  __double2 v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  uint64_t v195;
  __int128 *v196;
  double *v197;
  __int128 v198;
  __double2 v199;
  __double2 v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  __double2 v210;
  __double2 v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  int v218;
  double v219;
  double v220;
  double v221;
  unint64_t v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  BOOL v228;
  float64x2_t *v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  char *v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  char *v237;
  float64x2_t v238;
  float64x2_t v239;
  void *v240;
  __int128 *v241;
  char *v242;
  __int128 v243;
  float64x2_t v244;
  double v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  __int128 *v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v254;
  float64x2_t *v255;
  uint64_t v256;
  double v257;
  float64x2_t v258;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v265;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  float64x2_t v270;
  double v271;
  int8x16_t v272;
  float64_t v273;
  double v275;
  double v276;
  double v277;
  long double v278;
  long double v279;
  double v280;
  long double v281;
  double v282;
  int8x16_t v283;
  long double v284;
  long double v285;
  uint64_t v286;
  uint64_t v287;
  double v288;
  double v289;
  long double v290;
  long double v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  char *v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  int8x16_t v302;
  double v303;
  double v304;
  int8x16_t v305;
  double v306;
  float64x2_t v307;
  float64x2_t v308;
  double v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  double v313;
  double v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t *v317[3];
  _BYTE v318[24];
  _BYTE v319[32];
  float64x2_t v320;
  double v321;
  int8x16_t v322;
  float64_t v323;
  void *v324;
  char *v325;
  char *v326;
  __int128 __p;
  _OWORD v328[2];
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;

  v335 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = (char *)a1[1] - (char *)*a1;
  v8 = *a2;
  if (v7 != 120 || a2[1] - *a2 != 5)
    return 0;
  a4.f64[0] = *((float64_t *)v6 + 5);
  v10 = *(float64x2_t *)((char *)v6 + 24);
  a6.f64[0] = *((float64_t *)v6 + 8);
  _Q3 = (float64x2_t)v6[3];
  v12 = vsubq_f64(a4, a6);
  _D7 = vsubq_f64(v10, _Q3).f64[1];
  __asm { FMLA            D6, D7, V5.D[1] }
  v18 = sqrt(vmlad_n_f64(_D6, v12.f64[0], v12.f64[0]));
  v12.f64[0] = *((float64_t *)v6 + 2);
  *(_QWORD *)&v19 = *(_OWORD *)&vsubq_f64(v12, a6);
  _D7 = vsubq_f64(*(float64x2_t *)v6, _Q3).f64[1];
  __asm { FMLA            D6, D7, V3.D[1] }
  v22 = sqrt(vmlad_n_f64(_D6, v19, v19));
  *(_QWORD *)&v23 = *(_OWORD *)&vsubq_f64(v12, a4);
  _Q3.f64[0] = vsubq_f64(*(float64x2_t *)v6, v10).f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  v25 = sqrt(vmlad_n_f64(_D2, v23, v23));
  if (((v25 + v18 + v22) * 0.5 - v25)
     * (((v25 + v18 + v22) * 0.5 - v22)
      * ((v25 + v18 + v22)
       * 0.5
       * ((v25 + v18 + v22) * 0.5 - v18))) < 2.22044605e-16)
    return 0;
  v30 = (char *)operator new(0x48uLL);
  _Q1 = *v8;
  _D0 = v8->f64[1];
  __asm { FMLA            D2, D0, V1.D[1] }
  v34 = 1.0 / sqrt(_D2 + 1.0);
  _Q1 = vmulq_n_f64(*v8, v34);
  *((double *)v30 + 2) = v34;
  *(float64x2_t *)v30 = _Q1;
  _Q3 = v8[1];
  _D5 = v8[1].f64[1];
  __asm { FMLA            D4, D5, V3.D[1] }
  v39 = 1.0 / sqrt(_D4 + 1.0);
  _Q3 = vmulq_n_f64(_Q3, v39);
  *((double *)v30 + 5) = v39;
  *(float64x2_t *)(v30 + 24) = _Q3;
  _Q5 = v8[2];
  _D7 = _Q5.f64[1];
  __asm { FMLA            D6, D7, V5.D[1] }
  v44 = 1.0 / sqrt(_D6 + 1.0);
  _Q5 = vmulq_n_f64(_Q5, v44);
  *((double *)v30 + 8) = v44;
  *((float64x2_t *)v30 + 3) = _Q5;
  _D16 = _Q5.f64[1];
  __asm { FMLA            D7, D16, V3.D[1] }
  v48 = _D7 + v39 * v44;
  __asm { FMLA            D5, D16, V1.D[1] }
  v49 = _Q5.f64[0] + v34 * v44;
  _Q3.f64[0] = _Q3.f64[1];
  __asm { FMLA            D5, D3, V1.D[1] }
  v50 = _Q5.f64[0] + v34 * v39;
  _Q1.f64[0] = v18 * v18;
  v51 = (v18 * v18 - v25 * v25) / (v22 * v22);
  v52 = (_Q1.f64[0] + v25 * v25) / (v22 * v22);
  v53 = (v22 * v22 - v25 * v25) / (v22 * v22);
  v299 = v25 * v25;
  _Q3.f64[0] = v25 * v25 / (v22 * v22);
  v54 = _Q1.f64[0] / (v22 * v22);
  v298 = v51 + -1.0;
  v55 = _Q3.f64[0] * -4.0 * (v48 * v48) + v298 * v298;
  v56 = -((1.0 - v52) * v48) * v50;
  v57 = (v56 + v51 * (1.0 - v51) * v49 + (_Q3.f64[0] + _Q3.f64[0]) * (v48 * v48) * v49) * 4.0;
  v309 = v51 + v51;
  v300 = v48;
  v58 = v51 * v51
      + -1.0
      + v51 * (v51 + v51) * (v49 * v49)
      + (v53 + v53) * (v48 * v48)
      + v52 * -4.0 * v48 * v49 * v50
      + ((v22 * v22 - _Q1.f64[0]) / (v22 * v22) + (v22 * v22 - _Q1.f64[0]) / (v22 * v22)) * (v50 * v50);
  v59 = v58 + v58;
  v60 = (v49 * ((v54 + v54) * (v50 * v50)) + -(v51 * (v51 + 1.0)) * v49 + v56) * 4.0;
  v61 = v54 * -4.0 * (v50 * v50) + (v51 + 1.0) * (v51 + 1.0);
  v333 = 0u;
  v334 = 0u;
  v331 = 0u;
  v332 = 0u;
  v295 = v30;
  if (fabs(v55) < 2.22044605e-16)
  {
    v62 = (double *)operator new(0x30uLL);
    v313 = v49;
    *((_OWORD *)v62 + 1) = 0u;
    *((_OWORD *)v62 + 2) = 0u;
    *(_OWORD *)v62 = 0u;
    if (fabs(v57) < 2.22044605e-16)
    {
      v63 = (double *)operator new(0x18uLL);
      *(_QWORD *)v318 = v63;
      *(_QWORD *)&v318[8] = v63 + 3;
      *v63 = v59;
      v63[1] = v60;
      v63[2] = v61;
      v64 = operator new(0x20uLL);
      *v64 = 0u;
      v64[1] = 0u;
      *(_QWORD *)&__p = v64;
      *((_QWORD *)&__p + 1) = v64 + 2;
      LODWORD(v324) = 0;
      sub_23945B9D0((double **)v318, (double **)&__p, &v324);
      v65 = (int)v324;
      v66 = (void *)__p;
      if ((int)v324 < 1)
      {
        v72 = v49;
        if (!(_QWORD)__p)
        {
LABEL_16:
          if (*(_QWORD *)v318)
          {
            if (*(_QWORD *)&v318[8] != *(_QWORD *)v318)
              *(_QWORD *)&v318[8] += (*(_QWORD *)v318 - *(_QWORD *)&v318[8] + 7) & 0xFFFFFFFFFFFFFFF8;
            operator delete(*(void **)v318);
          }
          if (v65 < 1)
            goto LABEL_160;
          goto LABEL_158;
        }
        v71 = *((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
        {
LABEL_15:
          operator delete(v66);
          goto LABEL_16;
        }
      }
      else
      {
        v67 = (__int128 *)__p;
        v68 = v62;
        v69 = v324;
        do
        {
          v70 = *v67++;
          *(_OWORD *)v68 = v70;
          v68 += 2;
          --v69;
        }
        while (v69);
        v71 = *((_QWORD *)&__p + 1);
        v72 = v49;
        if (*((void **)&__p + 1) == v66)
          goto LABEL_15;
      }
      *((_QWORD *)&__p + 1) = v71 + (((unint64_t)v66 - v71 + 15) & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_15;
    }
    v86 = v59 / v57;
    v87 = (v86 * v86 + v60 / v57 * -3.0) / 9.0;
    v88 = (v86 * -9.0 * (v60 / v57) + pow(v86, 3.0) * 2.0 + v61 / v57 * 27.0) / 54.0;
    v89 = pow(v87, 3.0);
    v90 = v88 * v88;
    if (v88 * v88 < v89)
    {
      v91 = sqrt(v87);
      v92 = acos(v88 / sqrt(v89));
      *v62 = v86 / -3.0 + v91 * -2.0 * cos(v92 / 3.0);
      v62[1] = 0.0;
      v62[2] = v86 / -3.0 + v91 * -2.0 * cos((v92 + 6.28318531) / 3.0);
      v62[3] = 0.0;
      v62[4] = v86 / -3.0 + v91 * -2.0 * cos((v92 + -6.28318531) / 3.0);
      v62[5] = 0.0;
      v65 = 3;
LABEL_157:
      v72 = v313;
LABEL_158:
      v195 = v65;
      v196 = &v331;
      v197 = v62;
      do
      {
        v198 = *(_OWORD *)v197;
        v197 += 2;
        *v196++ = v198;
        --v195;
      }
      while (v195);
LABEL_160:
      operator delete(v62);
      goto LABEL_178;
    }
    v95 = v90 - v89;
    if (vabdd_f64(v90, v89) == INFINITY)
    {
      v96 = 0.0;
      if (v95 <= 0.0)
      {
        v96 = fabs(v95);
        v95 = 0.0;
      }
    }
    else
    {
      v97 = sqrt(hypot(v95, 0.0));
      v98 = atan2(0.0, v95);
      v95 = NAN;
      v96 = NAN;
      if ((*(_QWORD *)&v97 & 0x8000000000000000) == 0)
      {
        if (fabs(v98 * 0.5) == INFINITY)
        {
          v96 = NAN;
          if (v97 == INFINITY)
            v95 = v97;
          else
            v95 = NAN;
        }
        else
        {
          v171 = __sincos_stret(v98 * 0.5);
          v95 = v97 * v171.__cosval;
          v96 = v97 * v171.__sinval;
        }
      }
    }
    v172 = fabs(v88) + v95;
    v173 = 0.0;
    if (v88 < 0.0)
      v173 = -1.0;
    if (v88 <= 0.0)
      v174 = v173;
    else
      v174 = 1.0;
    __p = xmmword_239EC6900;
    v175 = hypot(v172, v96);
    *(_QWORD *)v318 = log(v175);
    *(_QWORD *)&v318[8] = atan2(v96, v172);
    v176 = sub_23945BBC8((double *)&__p, (double *)v318);
    v178 = -v174;
    if (*(double *)v177.i64 == 0.0)
    {
      v305 = v177;
      v176 = exp(v176);
      v177.i64[0] = 0;
      v179.f64[0] = NAN;
      v179.f64[1] = NAN;
      v177.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v179), v177, v305).u64[0];
      v180 = v86;
    }
    else
    {
      if (fabs(v176) == INFINITY)
      {
        v180 = v86;
        if (v176 >= 0.0)
        {
          if ((v177.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (fabs(*(double *)v177.i64) == INFINITY)
              *(double *)v177.i64 = NAN;
            goto LABEL_154;
          }
        }
        else if ((v177.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *(double *)v177.i64 = 1.0;
        }
      }
      else
      {
        v180 = v86;
      }
      v306 = *(double *)v177.i64;
      v181 = exp(v176);
      v182 = __sincos_stret(v306);
      v176 = v181 * v182.__cosval;
      *(double *)v177.i64 = v181 * v182.__sinval;
    }
LABEL_154:
    v183 = v176 * v178;
    v184 = *(double *)v177.i64 * v178;
    v185 = hypot(v183, v184);
    v186 = 0.0;
    _NF = v185 < 2.22044605e-16;
    v187 = 0.0;
    if (!_NF)
    {
      __p = *(unint64_t *)&v87;
      *(double *)v318 = v183;
      *(double *)&v318[8] = v184;
      v186 = sub_23945474C((double *)&__p, (long double *)v318);
      v180 = v86;
    }
    v188 = v183 + v186;
    v189 = v184 + v187;
    v190 = v180 / 3.0;
    *v62 = v183 + v186 - v190;
    v62[1] = v184 + v187;
    *(_OWORD *)v318 = xmmword_239EC6910;
    v191 = v183 - v186;
    v192 = v184 - v187;
    *(double *)&__p = v191;
    *((double *)&__p + 1) = v192;
    v62[2] = v188 * -0.5 - v190 + sub_23945BBC8((double *)v318, (double *)&__p);
    v62[3] = v189 * -0.5 + v193;
    *(_OWORD *)v318 = xmmword_239EC6910;
    *(double *)&__p = v191;
    *((double *)&__p + 1) = v192;
    v62[4] = v188 * -0.5 - v190 - sub_23945BBC8((double *)v318, (double *)&__p);
    v62[5] = v189 * -0.5 - v194;
    v65 = 1;
    goto LABEL_157;
  }
  v301 = v50;
  v73 = v51;
  v74 = v59 / v55;
  v282 = -(v57 / v55 * (v57 / v55));
  v75 = v59 / v55 * 4.0 * (v61 / v55) - v60 / v55 * (v60 / v55) + v282 * (v61 / v55);
  v314 = v57 / v55;
  v288 = v60 / v55;
  v280 = v61 / v55 * -4.0;
  v76 = v280 + v60 / v55 * (v57 / v55);
  v77 = (v74 * v74 + v76 * -3.0) / 9.0;
  v296 = -(v59 / v55);
  v78 = (v59 / v55 * 9.0 * v76 + pow(v296, 3.0) * 2.0 + v75 * 27.0) / 54.0;
  v79 = pow(v77, 3.0);
  v80 = v78 * v78;
  v275 = v73;
  if (v78 * v78 < v79)
  {
    v81 = acos(v78 / sqrt(v79));
    v82 = v74 / 3.0 + sqrt(v77) * -2.0 * cos(v81 / 3.0);
    v83 = v74;
    v50 = v301;
    goto LABEL_64;
  }
  v84 = v80 - v79;
  v277 = v77;
  if (vabdd_f64(v80, v79) == INFINITY)
  {
    v85 = 0.0;
    if (v84 <= 0.0)
    {
      v85 = fabs(v84);
      v84 = 0.0;
    }
    v50 = v301;
  }
  else
  {
    v93 = sqrt(hypot(v84, 0.0));
    v94 = atan2(0.0, v84);
    v84 = NAN;
    v85 = NAN;
    v50 = v301;
    if ((*(_QWORD *)&v93 & 0x8000000000000000) == 0)
    {
      if (fabs(v94 * 0.5) == INFINITY)
      {
        v85 = NAN;
        if (v93 == INFINITY)
          v84 = v93;
        else
          v84 = NAN;
      }
      else
      {
        v99 = __sincos_stret(v94 * 0.5);
        v84 = v93 * v99.__cosval;
        v85 = v93 * v99.__sinval;
      }
    }
  }
  v100 = fabs(v78) + v84;
  v101 = 0.0;
  if (v78 < 0.0)
    v101 = -1.0;
  if (v78 <= 0.0)
    v102 = v101;
  else
    v102 = 1.0;
  __p = xmmword_239EC6900;
  v103 = hypot(v100, v85);
  *(_QWORD *)v318 = log(v103);
  *(_QWORD *)&v318[8] = atan2(v85, v100);
  v104 = sub_23945BBC8((double *)&__p, (double *)v318);
  v106 = -v102;
  if (*(double *)v105.i64 == 0.0)
  {
    v302 = v105;
    v104 = exp(v104);
    v105.i64[0] = 0;
    v107.f64[0] = NAN;
    v107.f64[1] = NAN;
    v105.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v107), v105, v302).u64[0];
  }
  else
  {
    if (fabs(v104) == INFINITY)
    {
      if (v104 >= 0.0)
      {
        if ((v105.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (fabs(*(double *)v105.i64) == INFINITY)
            *(double *)v105.i64 = NAN;
          goto LABEL_61;
        }
      }
      else if ((v105.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        *(double *)v105.i64 = 1.0;
      }
    }
    v303 = *(double *)v105.i64;
    v108 = exp(v104);
    v109 = __sincos_stret(v303);
    v104 = v108 * v109.__cosval;
    *(double *)v105.i64 = v108 * v109.__sinval;
  }
LABEL_61:
  v110 = v104 * v106;
  v111 = *(double *)v105.i64 * v106;
  v112 = hypot(v104 * v106, *(double *)v105.i64 * v106);
  v113 = 0.0;
  v114 = 0.0;
  if (v112 >= 2.22044605e-16)
  {
    __p = *(unint64_t *)&v277;
    *(double *)v318 = v110;
    *(double *)&v318[8] = v111;
    v113 = sub_23945474C((double *)&__p, (long double *)v318);
  }
  *(_OWORD *)v318 = xmmword_239EC6910;
  v115 = v111 - v114;
  *(double *)&__p = v110 - v113;
  *((double *)&__p + 1) = v115;
  sub_23945BBC8((double *)v318, (double *)&__p);
  *(_OWORD *)v318 = xmmword_239EC6910;
  *(double *)&__p = v110 - v113;
  *((double *)&__p + 1) = v115;
  sub_23945BBC8((double *)v318, (double *)&__p);
  v83 = v74;
  v82 = v110 + v113 + v74 / 3.0;
LABEL_64:
  v116 = v296 + v314 * 0.25 * v314 + v82;
  v117 = fabs(v116);
  if (v117 == INFINITY)
  {
    v118 = 0.0;
    v119 = v296 + v314 * 0.25 * v314 + v82;
    if (v116 <= 0.0)
    {
      v119 = 0.0;
      v118 = v117;
    }
  }
  else
  {
    v120 = sqrt(hypot(v296 + v314 * 0.25 * v314 + v82, 0.0));
    v121 = atan2(0.0, v116);
    v119 = NAN;
    v118 = NAN;
    if ((*(_QWORD *)&v120 & 0x8000000000000000) == 0)
    {
      if (fabs(v121 * 0.5) == INFINITY)
      {
        v118 = NAN;
        if (v120 == INFINITY)
          v119 = v120;
        else
          v119 = NAN;
      }
      else
      {
        v122 = __sincos_stret(v121 * 0.5);
        v119 = v120 * v122.__cosval;
        v118 = v120 * v122.__sinval;
      }
    }
  }
  v72 = v49;
  v123 = v119;
  v124 = v118;
  *(double *)v125.i64 = hypot(v119, v118);
  v130 = v314;
  v131 = v314 * 0.75;
  v304 = v123;
  v297 = v124;
  if (*(double *)v125.i64 >= 2.22044605e-16)
  {
    v135 = v83;
    v136 = (v288 * -8.0 + v314 * 4.0 * v83 + v282 * v314) * 0.25;
    *(double *)&__p = v136;
    *((_QWORD *)&__p + 1) = 0;
    *(double *)v318 = v123;
    *(double *)&v318[8] = v124;
    *(double *)v137.i64 = sub_23945474C((double *)&__p, (long double *)v318);
    *(long double *)v139.i64 = v138;
    v140 = v135 * -2.0 - (v116 - v314 * 0.75 * v314);
    v141.i64[0] = 0x7FF0000000000000;
    if (fabs(v138) == INFINITY)
    {
      v142 = v123;
    }
    else
    {
      *(double *)v141.i64 = v140 + *(double *)v137.i64;
      if (fabs(v140 + *(double *)v137.i64) == INFINITY)
      {
        v142 = v123;
        v143 = v124;
        if (*(double *)v141.i64 <= 0.0)
        {
          v159.f64[0] = NAN;
          v159.f64[1] = NAN;
          v139.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v159), v141, v139).u64[0];
          v141.i64[0] = 0;
        }
        else
        {
          v137.i64[0] = 0;
          v153.f64[0] = NAN;
          v153.f64[1] = NAN;
          v139.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v153), v137, v139).u64[0];
        }
        goto LABEL_81;
      }
      v284 = v140 + *(double *)v137.i64;
      v290 = v138;
      v155 = sqrt(hypot(*(long double *)v141.i64, v138));
      v156 = atan2(v290, v284);
      v141.i64[0] = 0x7FF8000000000000;
      v139.i64[0] = 0x7FF8000000000000;
      v142 = v123;
      v143 = v297;
      if ((*(_QWORD *)&v155 & 0x8000000000000000) != 0)
      {
LABEL_81:
        v283 = v141;
        v289 = *(double *)v139.i64;
        __p = *(unint64_t *)&v136;
        *(double *)v318 = v142;
        *(double *)&v318[8] = v143;
        *(double *)v144.i64 = sub_23945474C((double *)&__p, (long double *)v318);
        v146 = v289;
        *(double *)v147.i64 = -v145;
        v148.i64[0] = 0x7FF0000000000000;
        if (fabs(v145) == INFINITY)
        {
          v149 = v314;
          v51 = v275;
        }
        else
        {
          *(double *)v148.i64 = v140 - *(double *)v144.i64;
          if (fabs(v140 - *(double *)v144.i64) == INFINITY)
          {
            v149 = v314;
            if (*(double *)v148.i64 <= 0.0)
            {
              v170.f64[0] = NAN;
              v170.f64[1] = NAN;
              v147.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v170), v148, v147).u64[0];
              v148.i64[0] = 0;
              v51 = v275;
            }
            else
            {
              v51 = v275;
              v144.i64[0] = 0;
              v154.f64[0] = NAN;
              v154.f64[1] = NAN;
              v147.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v154), v144, v147).u64[0];
            }
          }
          else
          {
            v278 = -v145;
            v281 = v140 - *(double *)v144.i64;
            v157 = sqrt(hypot(*(long double *)v148.i64, -v145));
            v158 = atan2(v278, v281);
            v148.i64[0] = 0x7FF8000000000000;
            v147.i64[0] = 0x7FF8000000000000;
            v149 = v314;
            v146 = v289;
            v51 = v275;
            if ((*(_QWORD *)&v157 & 0x8000000000000000) == 0)
            {
              if (fabs(v158 * 0.5) == INFINITY)
              {
                v147.i64[0] = 0x7FF8000000000000;
                if (v157 == INFINITY)
                  *(double *)v148.i64 = v157;
                else
                  *(double *)v148.i64 = NAN;
              }
              else
              {
                v211 = __sincos_stret(v158 * 0.5);
                v146 = v289;
                v149 = v314;
                *(double *)v148.i64 = v157 * v211.__cosval;
                *(double *)v147.i64 = v157 * v211.__sinval;
              }
            }
          }
        }
        v201 = v297 * 0.5;
        v212 = v149 * -0.25 + v123 * 0.5;
        v125.i64[1] = v283.i64[1];
        v213 = v146 * 0.5;
        *(double *)v125.i64 = v297 * 0.5 + v213;
        *(double *)&v331 = v212 + *(double *)v283.i64 * 0.5;
        *((double *)&v331 + 1) = *(double *)v125.i64;
        v205 = v297 * 0.5 - v213;
        *(double *)&v332 = v212 - *(double *)v283.i64 * 0.5;
        *((double *)&v332 + 1) = v205;
        v206 = -(v297 * 0.5);
        v207 = v149 * -0.25 - v123 * 0.5;
        v208 = *(double *)v148.i64 * 0.5;
        v209 = *(double *)v147.i64 * 0.5;
        goto LABEL_167;
      }
      if (fabs(v156 * 0.5) == INFINITY)
      {
        v139.i64[0] = 0x7FF8000000000000;
        if (v155 == INFINITY)
          *(double *)v141.i64 = v155;
        else
          *(double *)v141.i64 = NAN;
        goto LABEL_81;
      }
      v210 = __sincos_stret(v156 * 0.5);
      v142 = v123;
      *(double *)v141.i64 = v155 * v210.__cosval;
      *(double *)v139.i64 = v155 * v210.__sinval;
    }
    v143 = v297;
    goto LABEL_81;
  }
  v132 = v83 * -2.0;
  v133 = v280 + v82 * v82;
  v134 = fabs(v133);
  if (v134 == INFINITY)
  {
    v125.i64[0] = 0;
    v151 = v280 + v82 * v82;
    v51 = v275;
    if (v133 <= 0.0)
    {
      *(double *)v125.i64 = fabs(v133);
      v151 = 0.0;
    }
  }
  else
  {
    v150 = sqrt(hypot(v280 + v82 * v82, 0.0));
    *(double *)v125.i64 = atan2(0.0, v133);
    v151 = NAN;
    v51 = v275;
    v152 = *(double *)v125.i64;
    v125.i64[0] = 0x7FF8000000000000;
    v130 = v314;
    v131 = v314 * 0.75;
    if ((*(_QWORD *)&v150 & 0x8000000000000000) == 0)
    {
      if (fabs(v152 * 0.5) == INFINITY)
      {
        v125.i64[0] = 0x7FF8000000000000;
        if (v150 == INFINITY)
          v151 = v150;
        else
          v151 = NAN;
      }
      else
      {
        v160 = __sincos_stret(v152 * 0.5);
        v131 = v314 * 0.75;
        v151 = v150 * v160.__cosval;
        *(double *)v125.i64 = v150 * v160.__sinval;
        v130 = v314;
      }
    }
  }
  v161 = v132 + v131 * v130;
  *(double *)v128.i64 = *(double *)v125.i64 + *(double *)v125.i64;
  v127.i64[0] = 0x7FF0000000000000;
  if (fabs(*(double *)v125.i64 + *(double *)v125.i64) == INFINITY)
  {
LABEL_107:
    if (v134 == INFINITY)
      goto LABEL_108;
LABEL_122:
    v286 = v127.i64[0];
    v292 = v128.i64[0];
    v165 = sqrt(hypot(v133, 0.0));
    *(double *)v125.i64 = atan2(0.0, v133);
    v133 = NAN;
    v126.i64[0] = v125.i64[0];
    v125.i64[0] = 0x7FF8000000000000;
    v130 = v314;
    v127.i64[0] = v286;
    v128.i64[0] = v292;
    if ((*(_QWORD *)&v165 & 0x8000000000000000) == 0)
    {
      if (fabs(*(double *)v126.i64 * 0.5) == INFINITY)
      {
        v125.i64[0] = 0x7FF8000000000000;
        if (v165 == INFINITY)
          v133 = v165;
        else
          v133 = NAN;
      }
      else
      {
        v166 = __sincos_stret(*(double *)v126.i64 * 0.5);
        v127.i64[0] = v286;
        v128.i64[0] = v292;
        v130 = v314;
        v133 = v165 * v166.__cosval;
        *(double *)v125.i64 = v165 * v166.__sinval;
      }
    }
    goto LABEL_128;
  }
  *(double *)v127.i64 = v161 + v151 + v151;
  if (fabs(*(double *)v127.i64) == INFINITY)
  {
    if (*(double *)v127.i64 <= 0.0)
    {
      v164.f64[0] = NAN;
      v164.f64[1] = NAN;
      v126 = (int8x16_t)vnegq_f64(v164);
      v128.i64[0] = vbslq_s8(v126, v127, v128).u64[0];
      v127.i64[0] = 0;
      if (v134 != INFINITY)
        goto LABEL_122;
    }
    else
    {
      v125.i64[0] = 0;
      v162.f64[0] = NAN;
      v162.f64[1] = NAN;
      v126 = (int8x16_t)vnegq_f64(v162);
      v128.i64[0] = vbslq_s8(v126, v125, v128).u64[0];
      if (v134 != INFINITY)
        goto LABEL_122;
    }
  }
  else
  {
    v285 = v161 + v151 + v151;
    v291 = *(double *)v125.i64 + *(double *)v125.i64;
    v163 = sqrt(hypot(v285, *(long double *)v128.i64));
    *(double *)v125.i64 = atan2(v291, v285);
    v127.i64[0] = 0x7FF8000000000000;
    v128.i64[0] = 0x7FF8000000000000;
    v130 = v314;
    if ((*(_QWORD *)&v163 & 0x8000000000000000) != 0)
      goto LABEL_107;
    if (fabs(*(double *)v125.i64 * 0.5) != INFINITY)
    {
      v199 = __sincos_stret(*(double *)v125.i64 * 0.5);
      v130 = v314;
      *(double *)v127.i64 = v163 * v199.__cosval;
      *(double *)v128.i64 = v163 * v199.__sinval;
      goto LABEL_107;
    }
    v128.i64[0] = 0x7FF8000000000000;
    if (v163 == INFINITY)
      *(double *)v127.i64 = v163;
    else
      *(double *)v127.i64 = NAN;
    if (v134 != INFINITY)
      goto LABEL_122;
  }
LABEL_108:
  v125.i64[0] = 0;
  if (v133 <= 0.0)
  {
    v133 = 0.0;
    *(double *)v125.i64 = v134;
  }
LABEL_128:
  *(double *)v126.i64 = *(double *)v125.i64 * -2.0;
  v129.i64[0] = 0x7FF0000000000000;
  if (fabs(*(double *)v125.i64 * -2.0) != INFINITY)
  {
    *(double *)v129.i64 = v161 - (v133 + v133);
    if (fabs(*(double *)v129.i64) == INFINITY)
    {
      if (*(double *)v129.i64 <= 0.0)
      {
        v169.f64[0] = NAN;
        v169.f64[1] = NAN;
        v126.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v169), v129, v126).u64[0];
        v129.i64[0] = 0;
      }
      else
      {
        v125.i64[0] = 0;
        v167.f64[0] = NAN;
        v167.f64[1] = NAN;
        v126.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v167), v125, v126).u64[0];
      }
    }
    else
    {
      v287 = v127.i64[0];
      v293 = v128.i64[0];
      v279 = *(double *)v125.i64 * -2.0;
      v168 = sqrt(hypot(v161 - (v133 + v133), *(long double *)v126.i64));
      *(double *)v125.i64 = atan2(v279, v161 - (v133 + v133));
      v129.i64[0] = 0x7FF8000000000000;
      v126.i64[0] = 0x7FF8000000000000;
      v130 = v314;
      v127.i64[0] = v287;
      v128.i64[0] = v293;
      if ((*(_QWORD *)&v168 & 0x8000000000000000) == 0)
      {
        if (fabs(*(double *)v125.i64 * 0.5) == INFINITY)
        {
          v126.i64[0] = 0x7FF8000000000000;
          if (v168 == INFINITY)
            *(double *)v129.i64 = v168;
          else
            *(double *)v129.i64 = NAN;
        }
        else
        {
          v200 = __sincos_stret(*(double *)v125.i64 * 0.5);
          v127.i64[0] = v287;
          v128.i64[0] = v293;
          v130 = v314;
          *(double *)v129.i64 = v168 * v200.__cosval;
          *(double *)v126.i64 = v168 * v200.__sinval;
        }
      }
    }
  }
  v201 = v297 * 0.5;
  v202 = v130 * -0.25 + v304 * 0.5;
  v203 = *(double *)v127.i64 * 0.5;
  v204 = *(double *)v128.i64 * 0.5;
  *(double *)v125.i64 = v297 * 0.5 + v204;
  *(double *)&v331 = v202 + v203;
  *((double *)&v331 + 1) = *(double *)v125.i64;
  v205 = v297 * 0.5 - v204;
  *(double *)&v332 = v202 - v203;
  *((double *)&v332 + 1) = v205;
  v206 = -(v297 * 0.5);
  v207 = v130 * -0.25 - v304 * 0.5;
  v208 = *(double *)v129.i64 * 0.5;
  v209 = *(double *)v126.i64 * 0.5;
LABEL_167:
  *(double *)&v333 = v207 + v208;
  *((double *)&v333 + 1) = v209 - v201;
  *(double *)&v334 = v207 - v208;
  *((double *)&v334 + 1) = v206 - v209;
  v214 = fabs(*(double *)v125.i64);
  v215 = fabs(v205);
  v216 = fabs(v209 - v201);
  v217 = fabs(v206 - v209);
  if (v214 >= 2.22044605e-16 && v215 >= 2.22044605e-16 && v216 >= 2.22044605e-16 && v217 >= 2.22044605e-16)
    goto LABEL_207;
  v218 = v215 < 2.22044605e-16;
  if (v214 < 2.22044605e-16)
    ++v218;
  if (v216 < 2.22044605e-16)
    ++v218;
  if (v217 >= 2.22044605e-16)
    v65 = v218;
  else
    v65 = v218 + 1;
LABEL_178:
  v220 = v299;
  v219 = v300;
  v221 = v298;
  if (v65 >= 1)
  {
    v222 = 0;
    v223 = -(v309 * v72);
    v294 = -1;
    v276 = 1.79769313e308;
    while (1)
    {
      if (fabs(*((double *)&v331 + 2 * v222 + 1)) < 2.22044605e-16)
      {
        v224 = *((double *)&v331 + 2 * v222);
        v225 = (v51 + v223 * v224 + v221 * v224 * v224 + 1.0) / (v50 - v224 * v219 + v50 - v224 * v219);
        v226 = v220 / (v225 * v225 + 1.0 + v225 * -2.0 * v50);
        v227 = fabs(v226);
        v228 = v226 >= 0.0 && *(_QWORD *)&v227 <= 0x7FEFFFFFFFFFFFFFLL;
        if (v228 && v224 >= 0.0 && v225 >= 0.0)
          break;
      }
LABEL_205:
      if (v222 > 2)
        goto LABEL_208;
      ++v222;
    }
    v324 = 0;
    v325 = 0;
    v326 = 0;
    v125.i64[0] = *((_QWORD *)v30 + 2);
    v310 = (float64x2_t)v125;
    v315 = *(float64x2_t *)v30;
    v229 = (float64x2_t *)operator new(0x18uLL);
    v230.f64[0] = sqrt(v226);
    v231 = v315;
    *(_QWORD *)&v231.f64[1] = vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
    v232 = vmulq_n_f64(v231, v230.f64[0]);
    *v229 = v232;
    *(_QWORD *)&v229[1].f64[0] = *(_OWORD *)&vmulq_f64(v310, v230);
    v324 = v229;
    v326 = (char *)&v229[1].f64[1];
    v232.f64[0] = *((float64_t *)v30 + 5);
    v307 = v232;
    v311 = *(float64x2_t *)(v30 + 24);
    v316 = v230;
    v233 = (char *)operator new(0x30uLL);
    v235 = v311;
    v234.f64[1] = v316.f64[1];
    v234.f64[0] = v225 * v316.f64[0];
    *(_QWORD *)&v235.f64[1] = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u64[0];
    *(float64x2_t *)(v233 + 24) = vmulq_n_f64(v235, v225 * v316.f64[0]);
    *((_QWORD *)v233 + 5) = *(_OWORD *)&vmulq_f64(v307, v234);
    *(float64x2_t *)v233 = *v229;
    *((_QWORD *)v233 + 2) = *(_QWORD *)&v229[1].f64[0];
    v324 = v233;
    v325 = v233 + 48;
    v326 = v233 + 48;
    operator delete(v229);
    v325 = v233 + 48;
    v236.f64[0] = *((float64_t *)v30 + 8);
    v312 = v236;
    v308 = *((float64x2_t *)v30 + 3);
    v237 = (char *)operator new(0x60uLL);
    v238 = v308;
    *(_QWORD *)&v238.f64[1] = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    v239.f64[1] = v316.f64[1];
    v239.f64[0] = v224 * v316.f64[0];
    *((float64x2_t *)v237 + 3) = vmulq_n_f64(v238, v224 * v316.f64[0]);
    *((_QWORD *)v237 + 8) = *(_OWORD *)&vmulq_f64(v312, v239);
    *(_OWORD *)(v237 + 24) = *(_OWORD *)(v233 + 24);
    *((_QWORD *)v237 + 5) = *((_QWORD *)v233 + 5);
    *(_OWORD *)v237 = *(_OWORD *)v233;
    *((_QWORD *)v237 + 2) = *((_QWORD *)v233 + 2);
    v240 = v324;
    v324 = v237;
    v326 = v237 + 96;
    if (v240)
      operator delete(v240);
    v325 = v237 + 72;
    *(_QWORD *)v318 = 0x3FF0000000000000;
    v321 = 1.0;
    *(_OWORD *)&v318[8] = xmmword_239F13A00;
    *(_OWORD *)v319 = *(_OWORD *)algn_239F13A10;
    *(_OWORD *)&v319[16] = xmmword_239F13A20;
    v320 = *(float64x2_t *)dbl_239F13A30;
    v323 = 0.0;
    v322 = 0uLL;
    v30 = v295;
    v241 = *a1;
    __p = **a1;
    *(_QWORD *)&v328[0] = *((_QWORD *)v241 + 2);
    *(_OWORD *)((char *)v328 + 8) = *(__int128 *)((char *)v241 + 24);
    *((_QWORD *)&v328[1] + 1) = *((_QWORD *)v241 + 5);
    v329 = v241[3];
    v330 = *((_QWORD *)v241 + 8);
    v242 = (char *)operator new(0x48uLL);
    v317[1] = (float64x2_t *)(v242 + 72);
    v317[2] = (float64x2_t *)(v242 + 72);
    v243 = v329;
    *((_OWORD *)v242 + 2) = v328[1];
    *((_OWORD *)v242 + 3) = v243;
    *((_QWORD *)v242 + 8) = v330;
    *(_QWORD *)&v243 = __p;
    v244 = (float64x2_t)v328[0];
    *(_OWORD *)v242 = __p;
    *((float64x2_t *)v242 + 1) = v244;
    v317[0] = (float64x2_t *)v242;
    if (sub_239BFA324(v317, (float64x2_t **)&v324, (uint64_t)v318, 1, v244, *(double *)&v243, v245, v246))
    {
      v250 = *a1;
      v251 = ((char *)a1[1] - (char *)*a1) / 24;
      v252 = 0;
      if (a1[1] != *a1)
      {
        _D3 = *(_QWORD *)&v319[24];
        v247.f64[0] = *(float64_t *)v318;
        v248.f64[0] = v323;
        v254 = vextq_s8(v322, v322, 8uLL).u64[0];
        v255 = *a2;
        if (v251 <= 1)
          v256 = 1;
        else
          v256 = ((char *)a1[1] - (char *)*a1) / 24;
        v257 = 0.0;
        do
        {
          _Q19.f64[0] = *((float64_t *)v250 + 2);
          v258 = (float64x2_t)*v250;
          v250 = (__int128 *)((char *)v250 + 24);
          _V20.D[1] = v258.f64[1];
          __asm { FMLA            D22, D3, V20.D[1] }
          v261.f64[0] = *(float64_t *)v318;
          v261.f64[1] = *(float64_t *)v318;
          *(_QWORD *)&v262.f64[0] = v322.i64[0];
          *(_QWORD *)&v262.f64[1] = v254;
          v263 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v318[8], v258.f64[0]), *(float64x2_t *)&v319[8], v258, 1), v320, _Q19.f64[0]);
          _Q19.f64[0] = _D22 + v321 * _Q19.f64[0];
          _Q20 = vmlaq_f64(v262, v261, v263);
          v263.f64[0] = vmlaq_f64(v248, v247, _Q19).f64[0];
          v265 = *v255++;
          _Q19 = vsubq_f64(vdivq_f64(_Q20, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v263.f64[0], 0)), v265);
          _D22 = _Q19.f64[1];
          __asm { FMLA            D20, D22, V19.D[1] }
          v257 = v257 + _Q20.f64[0];
          if (v263.f64[0] > 0.0)
            ++v252;
          --v256;
        }
        while (v256);
        if (v252 != v251)
          goto LABEL_204;
        goto LABEL_202;
      }
      v257 = 0.0;
      if (!v251)
      {
LABEL_202:
        if (v257 < v276)
        {
          v267 = *(_OWORD *)&v318[8];
          v268 = *(_OWORD *)&v319[8];
          v269 = *(_QWORD *)&v319[24];
          v270 = v320;
          v271 = v321;
          v272 = v322;
          v273 = v323;
          *(_QWORD *)(a3 + 16) = *(_QWORD *)v319;
          *(_OWORD *)a3 = v267;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 48) = v269;
          *(_OWORD *)(a3 + 32) = v268;
          *(_QWORD *)(a3 + 56) = 0;
          *(double *)(a3 + 80) = v271;
          *(float64x2_t *)(a3 + 64) = v270;
          *(_QWORD *)(a3 + 88) = 0;
          *(float64_t *)(a3 + 112) = v273;
          *(int8x16_t *)(a3 + 96) = v272;
          v276 = v257;
          v294 = v222;
          *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
        }
      }
    }
LABEL_204:
    operator delete(v242);
    v325 = v237;
    operator delete(v237);
    v220 = v299;
    v219 = v300;
    v221 = v298;
    goto LABEL_205;
  }
LABEL_207:
  v294 = -1;
LABEL_208:
  v26 = v294 != -1;
  operator delete(v30);
  return v26;
}

void sub_239C05F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54)
{
  void *v54;

  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  operator delete(v54);
  operator delete(a22);
  _Unwind_Resume(a1);
}

unsigned int *sub_239C06024(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *a2;
  v4 = a2 + 1;
  v5 = a2[1];
  v6 = result + 1;
  v7 = *result;
  if (*a2 >= *result && (v3 <= v7 ? (v8 = v5 >= *v6) : (v8 = 1), v8))
  {
    v9 = *a3;
    if (*a3 < v3 || (v9 <= v3 ? (v10 = a3[1] >= v5) : (v10 = 1), !v10))
    {
      *a2 = v9;
      *a3 = v3;
      v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      v12 = *a2;
      v13 = *result;
      if (*a2 < *result || v12 <= v13 && *v4 < *v6)
      {
        *result = v12;
        *a2 = v13;
LABEL_28:
        v20 = *v6;
        *v6 = *v4;
        *v4 = v20;
      }
    }
  }
  else
  {
    v14 = a3 + 1;
    v15 = *a3;
    if (*a3 < v3 || (v15 <= v3 ? (v16 = *v14 >= v5) : (v16 = 1), !v16))
    {
      *result = v15;
      *a3 = v7;
      goto LABEL_27;
    }
    *result = v3;
    *a2 = v7;
    v17 = result[1];
    result[1] = a2[1];
    a2[1] = v17;
    v18 = *a3;
    v19 = *a2;
    if (*a3 < *a2 || v18 <= v19 && *v14 < v17)
    {
      *a2 = v18;
      *a3 = v19;
      v6 = a2 + 1;
LABEL_27:
      v4 = a3 + 1;
      goto LABEL_28;
    }
  }
  return result;
}

unsigned int *sub_239C06134(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  result = sub_239C06024(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  if (*a4 < *a3 || (v11 <= v12 ? (v13 = a4[1] >= a3[1]) : (v13 = 1), !v13))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = a3[1];
    a3[1] = a4[1];
    a4[1] = v14;
    v15 = *a3;
    v16 = *a2;
    if (*a3 < *a2 || v15 <= v16 && a3[1] < a2[1])
    {
      *a2 = v15;
      *a3 = v16;
      v17 = a2[1];
      a2[1] = a3[1];
      a3[1] = v17;
      v18 = *a2;
      v19 = *a1;
      if (*a2 < *a1 || v18 <= v19 && a2[1] < a1[1])
      {
        *a1 = v18;
        *a2 = v19;
        v20 = a1[1];
        a1[1] = a2[1];
        a2[1] = v20;
      }
    }
  }
  v21 = *a5;
  v22 = *a4;
  if (*a5 < *a4 || v21 <= v22 && a5[1] < a4[1])
  {
    *a4 = v21;
    *a5 = v22;
    v23 = a4[1];
    a4[1] = a5[1];
    a5[1] = v23;
    v24 = *a4;
    v25 = *a3;
    if (*a4 < *a3 || v24 <= v25 && a4[1] < a3[1])
    {
      *a3 = v24;
      *a4 = v25;
      v26 = a3[1];
      a3[1] = a4[1];
      a4[1] = v26;
      v27 = *a3;
      v28 = *a2;
      if (*a3 < *a2 || v27 <= v28 && a3[1] < a2[1])
      {
        *a2 = v27;
        *a3 = v28;
        v29 = a2[1];
        a2[1] = a3[1];
        a3[1] = v29;
        v30 = *a2;
        v31 = *a1;
        if (*a2 < *a1 || v30 <= v31 && a2[1] < a1[1])
        {
          *a1 = v30;
          *a2 = v31;
          v32 = a1[1];
          a1[1] = a2[1];
          a2[1] = v32;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C06330(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || (v6 <= v7 ? (v8 = *(a2 - 1) >= a1[1]) : (v8 = 1), !v8))
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_239C06024(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_239C06024(a1, a1 + 2, a1 + 4);
      v24 = *(a2 - 2);
      v25 = a1[4];
      if (v24 >= v25)
      {
        result = 1;
        if (v24 > v25 || *(a2 - 1) >= a1[5])
          return result;
      }
      a1[4] = v24;
      *(a2 - 2) = v25;
      v26 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v26;
      v27 = a1[2];
      v28 = a1[3];
      v30 = a1[4];
      v29 = a1[5];
      if (v30 >= v27)
      {
        result = 1;
        if (v30 > v27 || v29 >= v28)
          return result;
      }
      a1[2] = v30;
      a1[3] = v29;
      a1[4] = v27;
      a1[5] = v28;
      v31 = *a1;
      if (v30 < *a1)
      {
        v32 = a1[1];
LABEL_42:
        *a1 = v30;
        a1[1] = v29;
        result = 1;
        a1[2] = v31;
        a1[3] = v32;
        return result;
      }
      result = 1;
      if (v30 <= v31)
      {
        v32 = a1[1];
        if (v29 < v32)
          goto LABEL_42;
      }
      return result;
    case 5:
      sub_239C06134(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      sub_239C06024(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v15 = *v10;
        if (*v11 < *v10 || (*v11 <= v15 ? (v16 = v11[1] >= v10[1]) : (v16 = 1), !v16))
        {
          v17 = *v11;
          v18 = v11[1];
          *v11 = v15;
          v11[1] = v10[1];
          v14 = a1;
          if (v10 != a1)
          {
            v19 = v12;
            while (1)
            {
              v20 = (char *)a1 + v19;
              v21 = *(unsigned int *)((char *)a1 + v19 + 8);
              v22 = *(unsigned int *)((char *)a1 + v19 + 12);
              if (v21 <= v17 && (v21 < v17 || v22 <= v18))
                break;
              *((_DWORD *)v20 + 4) = v21;
              *((_DWORD *)v20 + 5) = v22;
              v19 -= 8;
              if (v19 == -16)
              {
                v14 = a1;
                goto LABEL_11;
              }
            }
            v14 = (unsigned int *)((char *)a1 + v19 + 16);
          }
LABEL_11:
          *v14 = v17;
          v14[1] = v18;
          if (++v13 == 8)
            return v11 + 2 == a2;
        }
        v10 = v11;
        v12 += 8;
        v11 += 2;
        if (v11 == a2)
          return 1;
      }
  }
}

void sub_239C06594()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C065A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AFAFE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239C065E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFAFE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C06610(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;

  v4 = *(uint64_t **)(a4 + 16);
  if (*(_BYTE *)(a3 + 28) != 1 && v4 != 0)
  {
    v8 = *a2;
    do
    {
      v10 = sub_2395D7BEC(*(_QWORD *)(a1 + 24), *((_DWORD *)v4 + 4));
      if (*((_BYTE *)v10 + 232) == 2 && *((_DWORD *)v10 + 49) == **(_DWORD **)(a1 + 16))
      {
        v11 = *((unsigned int *)v4 + 5);
        v12 = **(_QWORD **)(a1 + 24);
        if (v11 < (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - v12) >> 6
          && (_DWORD)v11 != -1
          && *(_DWORD *)(v12 + (v11 << 6)) != -1)
        {
          if (*(_BYTE *)(v12 + (v11 << 6) + 60) == 1)
            return 1;
          v13 = sub_239C038C4(*(uint64_t **)(a1 + 8), *((_DWORD *)v4 + 4), (_DWORD *)v4 + 4);
          v14 = v13;
          v15 = v8 | ((unint64_t)*((unsigned int *)v4 + 5) << 32);
          v17 = (unint64_t *)v13[4];
          v16 = v13[5];
          if ((unint64_t)v17 < v16)
          {
            *v17 = v15;
            v9 = v17 + 1;
          }
          else
          {
            v33 = v8;
            v18 = (unint64_t **)(v13 + 3);
            v19 = (char *)v13[3];
            v20 = ((char *)v17 - v19) >> 3;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 61)
              sub_2394189F8();
            v22 = v16 - (_QWORD)v19;
            if (v22 >> 2 > v21)
              v21 = v22 >> 2;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            if (v21)
            {
              if (v21 >> 61)
                sub_239418A80();
              v23 = v21;
              v24 = (char *)operator new(8 * v21);
              v18 = (unint64_t **)(v14 + 3);
            }
            else
            {
              v23 = 0;
              v24 = 0;
            }
            v25 = (unint64_t *)&v24[8 * v20];
            *v25 = v15;
            v9 = v25 + 1;
            if (v17 != (unint64_t *)v19)
            {
              v26 = (char *)(v17 - 1) - v19;
              if (v26 < 0x58)
                goto LABEL_40;
              if ((unint64_t)(v19 - v24) < 0x20)
                goto LABEL_40;
              v27 = (v26 >> 3) + 1;
              v28 = &v24[8 * v20 - 16];
              v29 = v17 - 2;
              v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v31 = *(_OWORD *)v29;
                *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
                *(_OWORD *)v28 = v31;
                v28 -= 32;
                v29 -= 4;
                v30 -= 4;
              }
              while (v30);
              v25 -= v27 & 0x3FFFFFFFFFFFFFFCLL;
              v17 -= v27 & 0x3FFFFFFFFFFFFFFCLL;
              if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_40:
                do
                {
                  v32 = *--v17;
                  *--v25 = v32;
                }
                while (v17 != (unint64_t *)v19);
              }
              v17 = *v18;
            }
            v14[3] = v25;
            v14[4] = v9;
            v14[5] = &v24[8 * v23];
            v8 = v33;
            if (v17)
              operator delete(v17);
          }
          v14[4] = v9;
        }
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_239C06854(uint64_t *a1, uint64_t *a2, uint64_t a3, void **a4, uint64_t a5, _OWORD *a6, _QWORD *__sz)
{
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  char *v40;
  uint64_t i;
  __int128 v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  char *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  __int16 v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  char *v85;
  __int16 v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  __int16 v93;
  char *v94;
  char *v95;
  __int16 v96;
  char v97;
  uint64_t *v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  __int16 v106;
  char *v107;
  char *v108;
  __int16 v109;
  char v110;
  char *v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  void *v116;
  char *v117;
  char *v118;
  void *v119;
  char *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  double v126;
  float64x2_t v127;
  double v128;
  double v129;
  float64x2_t v130;
  double v131;
  double v132;
  char **v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  _OWORD *v138;
  __int128 v139;
  void *v140;
  _OWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  __int128 v146;
  char *v147;
  char *v148;
  __int128 v149;
  char *v150;
  _OWORD *v151;
  _OWORD *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  int v159;
  char *v160;
  _QWORD *j;
  uint64_t *k;
  float64x2_t v165;
  double v166;
  float64x2_t v168;
  uint64_t v172;
  __int16 v173;
  char *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  char *v178;
  __int16 v179;
  char *v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  __int16 v186;
  char *v187;
  char *v188;
  __int16 v189;
  char v190;
  uint64_t *v191;
  uint64_t *v192;
  char *v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  __int16 v199;
  char *v200;
  char *v201;
  __int16 v202;
  char v203;
  char *v204;
  char *v205;
  void *v206;
  char *v207;
  void *v208;
  void *v209;
  char *v210;
  char *v211;
  void *v212;
  char *v213;
  void *v214;
  void *v215;
  char *v216;
  _QWORD *v217;
  uint64_t v218;
  unsigned int v220;
  uint64_t v221;
  _OWORD *v222;
  _BYTE *v223;
  _BYTE *v224;
  unint64_t v226;
  uint64_t *v228;
  void *v229;
  _BYTE *v230;
  uint64_t v231;
  void *v232;
  _BYTE *v233;
  uint64_t v234;
  void *v235[4];
  void *__p;
  char *v237;
  char *v238;
  void *v239;
  char *v240;
  char *v241;
  void *v242;
  void *v243;
  char *v244;
  void *v245;
  char *v246;
  char *v247;
  void *v248;
  char *v249;
  char *v250;
  void *v251;
  char *v252;
  char *v253;
  _BYTE v254[24];
  _BYTE *v255;
  _QWORD v256[3];
  _QWORD *v257;
  _QWORD v258[3];
  _QWORD *v259;
  void *v260[2];
  char *v261;
  void *v262;
  void *v263;
  char v264;
  void *v265;
  void *v266;
  char v267;
  void *v268;
  char *v269;
  char v270;
  void *v271;
  void *v272;
  char v273;
  void *v274[2];
  void *v275[2];
  __int128 v276;
  void *v277[2];
  void *v278;
  char v279;
  void *v280;
  char *v281;
  char v282;
  void *v283;
  void *v284;
  char v285;
  uint64_t v286;

  v286 = *MEMORY[0x24BDAC8D0];
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v258[0] = &off_250AFB028;
  v258[1] = &v232;
  v12 = v258;
  v259 = v258;
  v228 = a1;
  v13 = (uint64_t *)a1[6];
  if (!v13)
  {
    v14 = 4;
    goto LABEL_22;
  }
  do
  {
    if (*((_BYTE *)v13 + 51) == 2)
    {
      v15 = (uint64_t **)v13[16];
      if (v15)
      {
        v16 = 0;
        v17 = *v228;
        while (1)
        {
          v18 = *((unsigned int *)v15 + 5);
          if ((v228[1] - *v228) >> 6 <= v18)
            goto LABEL_7;
          _ZF = (_DWORD)v18 == -1 || *(_DWORD *)(v17 + (v18 << 6)) == -1;
          if (_ZF || *(_BYTE *)(v17 + (v18 << 6) + 59) != 2)
            goto LABEL_7;
          if (v16)
            break;
          v16 = 1;
LABEL_7:
          v15 = (uint64_t **)*v15;
          if (!v15)
            goto LABEL_3;
        }
        LODWORD(v274[0]) = *((_DWORD *)v13 + 4);
        if (!v259)
          sub_2394172E0();
        if (((*(uint64_t (**)(_QWORD *, void **, uint64_t *, uint64_t *))(*v259 + 48))(v259, v274, v13 + 3, v13 + 14) & 1) == 0)break;
      }
    }
LABEL_3:
    v13 = (uint64_t *)*v13;
  }
  while (v13);
  v12 = v259;
  if (v259 == v258)
  {
    v14 = 4;
    v12 = v258;
LABEL_22:
    (*(void (**)(void))(*v12 + 8 * v14))();
  }
  else if (v259)
  {
    v14 = 5;
    goto LABEL_22;
  }
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v256[0] = &off_250AFB070;
  v256[1] = &v229;
  v20 = v256;
  v257 = v256;
  v21 = (uint64_t *)a2[6];
  if (!v21)
  {
    v22 = 4;
    goto LABEL_44;
  }
  while (2)
  {
    if (*((_BYTE *)v21 + 51) != 2)
      goto LABEL_25;
    v23 = (uint64_t **)v21[16];
    if (!v23)
      goto LABEL_25;
    v24 = 0;
    v25 = *a2;
    while (1)
    {
      v26 = *((unsigned int *)v23 + 5);
      if ((a2[1] - *a2) >> 6 <= v26)
        goto LABEL_29;
      v27 = (_DWORD)v26 == -1 || *(_DWORD *)(v25 + (v26 << 6)) == -1;
      if (v27 || *(_BYTE *)(v25 + (v26 << 6) + 59) != 2)
        goto LABEL_29;
      if (v24)
        break;
      v24 = 1;
LABEL_29:
      v23 = (uint64_t **)*v23;
      if (!v23)
        goto LABEL_25;
    }
    LODWORD(v274[0]) = *((_DWORD *)v21 + 4);
    if (!v257)
      sub_2394172E0();
    if (((*(uint64_t (**)(_QWORD *, void **, uint64_t *, uint64_t *))(*v257 + 48))(v257, v274, v21 + 3, v21 + 14) & 1) != 0)
    {
LABEL_25:
      v21 = (uint64_t *)*v21;
      if (!v21)
        break;
      continue;
    }
    break;
  }
  v20 = v257;
  if (v257 == v256)
  {
    v22 = 4;
    v20 = v256;
LABEL_44:
    (*(void (**)(void))(*v20 + 8 * v22))();
  }
  else if (v257)
  {
    v22 = 5;
    goto LABEL_44;
  }
  v222 = a6;
  v28 = *a4;
  a4[1] = *a4;
  v30 = v232;
  v29 = v233;
  v32 = v229;
  v31 = v230;
  if ((v230 - (_BYTE *)v229) >> 3 >= (unint64_t)((v233 - (_BYTE *)v232) >> 3))
    v33 = (v233 - (_BYTE *)v232) >> 3;
  else
    v33 = (v230 - (_BYTE *)v229) >> 3;
  if (v33 > ((_BYTE *)a4[2] - (_BYTE *)v28) >> 3)
  {
    if (v33 >> 61)
      sub_2394189F8();
    v34 = (char *)operator new(8 * v33);
    *a4 = v34;
    a4[1] = v34;
    a4[2] = &v34[8 * v33];
    if (v28)
    {
      operator delete(v28);
      v30 = v232;
      v29 = v233;
      v32 = v229;
      v31 = v230;
    }
  }
  v274[0] = a4;
  if (v30 != v29)
  {
    while (v32 != v31)
    {
      if (*v30 < *v32)
      {
        if (++v30 == v29)
          break;
      }
      else
      {
        if (*v32 >= *v30)
          sub_2394340F0((uint64_t *)v274, v30++);
        ++v32;
        if (v30 == v29)
          break;
      }
    }
  }
  v35 = __sz[3];
  if (v35)
  {
    if ((_QWORD *)v35 != __sz)
    {
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
      goto LABEL_63;
    }
    v255 = v254;
    (*(void (**)(_QWORD *, _BYTE *))(*__sz + 24))(__sz, v254);
  }
  else
  {
LABEL_63:
    v255 = (_BYTE *)v35;
  }
  v223 = *a4;
  v224 = a4[1];
  v36 = v224 - (_BYTE *)*a4;
  if ((unint64_t)v36 < 0x18)
  {
    v37 = 0;
    goto LABEL_399;
  }
  v248 = 0;
  v249 = 0;
  v250 = 0;
  v245 = 0;
  v246 = 0;
  v247 = 0;
  if ((unint64_t)v36 >= 0x5555555555555551)
    sub_2394189F8();
  v220 = v36;
  v38 = v36 >> 3;
  v39 = 24 * (v36 >> 3);
  v248 = operator new(v39);
  v249 = (char *)v248;
  v250 = (char *)v248 + 24 * v38;
  v40 = (char *)operator new(v39);
  v221 = a3;
  v245 = v40;
  v246 = v40;
  v247 = &v40[24 * v38];
  v226 = v38;
  if (v224 != v223)
  {
    for (i = 0; i != v38; ++i)
    {
      v44 = *((_QWORD *)*a4 + i);
      v45 = v228[5];
      if (v45)
      {
        v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
        v46.i16[0] = vaddlv_u8(v46);
        if (v46.u32[0] > 1uLL)
        {
          v47 = *((_QWORD *)*a4 + i);
          if (v45 <= v44)
            v47 = v44 % v45;
        }
        else
        {
          v47 = ((_DWORD)v45 - 1) & v44;
        }
        v48 = *(uint64_t **)(v228[4] + 8 * v47);
        if (v48)
        {
          v48 = (uint64_t *)*v48;
          if (v48)
          {
            if (v46.u32[0] < 2uLL)
            {
              v49 = v45 - 1;
              while (1)
              {
                v51 = v48[1];
                if (v51 == v44)
                {
                  if (*((_DWORD *)v48 + 4) == (_DWORD)v44)
                    goto LABEL_93;
                }
                else if ((v51 & v49) != v47)
                {
                  goto LABEL_92;
                }
                v48 = (uint64_t *)*v48;
                if (!v48)
                  goto LABEL_93;
              }
            }
            do
            {
              v50 = v48[1];
              if (v50 == v44)
              {
                if (*((_DWORD *)v48 + 4) == (_DWORD)v44)
                  break;
              }
              else
              {
                if (v50 >= v45)
                  v50 %= v45;
                if (v50 != v47)
                  goto LABEL_92;
              }
              v48 = (uint64_t *)*v48;
            }
            while (v48);
          }
        }
      }
      else
      {
LABEL_92:
        v48 = 0;
      }
LABEL_93:
      *(_OWORD *)v274 = *(_OWORD *)(v48 + 3);
      v275[0] = (void *)v48[5];
      v52 = a2[5];
      if (v52)
      {
        v53 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
        v53.i16[0] = vaddlv_u8(v53);
        if (v53.u32[0] > 1uLL)
        {
          v54 = v44;
          if (v52 <= v44)
            v54 = v44 % v52;
        }
        else
        {
          v54 = ((_DWORD)v52 - 1) & v44;
        }
        v55 = *(uint64_t **)(a2[4] + 8 * v54);
        if (v55)
        {
          v55 = (uint64_t *)*v55;
          if (v55)
          {
            if (v53.u32[0] < 2uLL)
            {
              v56 = v52 - 1;
              while (1)
              {
                v58 = v55[1];
                if (v58 == v44)
                {
                  if (*((_DWORD *)v55 + 4) == (_DWORD)v44)
                    goto LABEL_114;
                }
                else if ((v58 & v56) != v54)
                {
                  goto LABEL_113;
                }
                v55 = (uint64_t *)*v55;
                if (!v55)
                  goto LABEL_114;
              }
            }
            do
            {
              v57 = v55[1];
              if (v57 == v44)
              {
                if (*((_DWORD *)v55 + 4) == (_DWORD)v44)
                  break;
              }
              else
              {
                if (v57 >= v52)
                  v57 %= v52;
                if (v57 != v54)
                  goto LABEL_113;
              }
              v55 = (uint64_t *)*v55;
            }
            while (v55);
          }
        }
      }
      else
      {
LABEL_113:
        v55 = 0;
      }
LABEL_114:
      *(_OWORD *)v260 = *(_OWORD *)(v55 + 3);
      v261 = (char *)v55[5];
      v59 = v249;
      if (v249 >= v250)
      {
        v62 = v248;
        v63 = 0xAAAAAAAAAAAAAAABLL * ((v249 - (_BYTE *)v248) >> 3);
        v64 = v63 + 1;
        if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_410;
        if (0x5555555555555556 * ((v250 - (_BYTE *)v248) >> 3) > v64)
          v64 = 0x5555555555555556 * ((v250 - (_BYTE *)v248) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v250 - (_BYTE *)v248) >> 3) >= 0x555555555555555)
          v65 = 0xAAAAAAAAAAAAAAALL;
        else
          v65 = v64;
        if (v65)
        {
          if (v65 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_409;
          v66 = (char *)operator new(24 * v65);
        }
        else
        {
          v66 = 0;
        }
        v67 = &v66[24 * v63];
        *(_OWORD *)v67 = *(_OWORD *)v274;
        *((void **)v67 + 2) = v275[0];
        v68 = v67;
        if (v59 != v62)
        {
          do
          {
            v69 = *(_OWORD *)((char *)v59 - 24);
            *((_QWORD *)v68 - 1) = *((_QWORD *)v59 - 1);
            *(_OWORD *)(v68 - 24) = v69;
            v68 -= 24;
            v59 = (_OWORD *)((char *)v59 - 24);
          }
          while (v59 != v62);
          v59 = v62;
        }
        v61 = v67 + 24;
        v248 = v68;
        v250 = &v66[24 * v65];
        if (v59)
          operator delete(v59);
      }
      else
      {
        v60 = *(_OWORD *)(v48 + 3);
        *((_QWORD *)v249 + 2) = v48[5];
        *v59 = v60;
        v61 = (char *)v59 + 24;
        v40 = v246;
      }
      v249 = v61;
      if (v40 < v247)
      {
        v42 = *(_OWORD *)v260;
        *((_QWORD *)v40 + 2) = v261;
        *(_OWORD *)v40 = v42;
        v43 = v40 + 24;
        v38 = v226;
      }
      else
      {
        v70 = (char *)v245;
        v71 = 0xAAAAAAAAAAAAAAABLL * ((v40 - (_BYTE *)v245) >> 3);
        v72 = v71 + 1;
        if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_410:
          sub_2394189F8();
        if (0x5555555555555556 * ((v247 - (_BYTE *)v245) >> 3) > v72)
          v72 = 0x5555555555555556 * ((v247 - (_BYTE *)v245) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v247 - (_BYTE *)v245) >> 3) >= 0x555555555555555)
          v73 = 0xAAAAAAAAAAAAAAALL;
        else
          v73 = v72;
        if (v73)
        {
          if (v73 > 0xAAAAAAAAAAAAAAALL)
LABEL_409:
            sub_239418A80();
          v74 = (char *)operator new(24 * v73);
        }
        else
        {
          v74 = 0;
        }
        v75 = &v74[24 * v71];
        *(_OWORD *)v75 = *(_OWORD *)v260;
        *((_QWORD *)v75 + 2) = v261;
        v76 = v75;
        if (v40 != v70)
        {
          do
          {
            v77 = *(_OWORD *)(v40 - 24);
            *((_QWORD *)v76 - 1) = *((_QWORD *)v40 - 1);
            *(_OWORD *)(v76 - 24) = v77;
            v76 -= 24;
            v40 -= 24;
          }
          while (v40 != v70);
          v40 = v70;
        }
        v43 = v75 + 24;
        v245 = v76;
        v247 = &v74[24 * v73];
        v38 = v226;
        if (v40)
          operator delete(v40);
      }
      v246 = v43;
      v40 = v43;
    }
  }
  if (v255)
  {
    v251 = 0;
    v252 = 0;
    v253 = 0;
    v242 = 0;
    v243 = 0;
    v244 = 0;
    v239 = 0;
    v240 = 0;
    v241 = 0;
    __p = 0;
    v237 = 0;
    v238 = 0;
    v251 = operator new(12 * v38);
    v252 = (char *)v251;
    v253 = (char *)v251 + 12 * v38;
    v242 = operator new(12 * v38);
    v243 = v242;
    v244 = (char *)v242 + 12 * v38;
    v239 = operator new(3 * v38);
    v240 = (char *)v239;
    v241 = (char *)v239 + 3 * v38;
    __p = operator new(3 * v38);
    v237 = (char *)__p;
    v238 = (char *)__p + 3 * v38;
    if (v224 != v223)
    {
      v78 = 0;
      do
      {
        v82 = *((_QWORD *)*a4 + v78);
        v83 = sub_2394A2EA8((uint64_t)v228, v82);
        sub_2394FB1F8((float32x2_t **)&v251, (float64x2_t *)v83);
        v84 = v83 + 3;
        v85 = v240;
        if (v240 >= v241)
        {
          v88 = (char *)v239;
          v89 = 0xAAAAAAAAAAAAAAABLL * (v240 - (_BYTE *)v239);
          v90 = v89 + 1;
          if (v89 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (v241 - (_BYTE *)v239) > v90)
            v90 = 0x5555555555555556 * (v241 - (_BYTE *)v239);
          if (0xAAAAAAAAAAAAAAABLL * (v241 - (_BYTE *)v239) >= 0x2AAAAAAAAAAAAAAALL)
            v91 = 0x5555555555555555;
          else
            v91 = v90;
          if (v91)
          {
            if (v91 >= 0x5555555555555556)
              sub_239418A80();
            v92 = (char *)operator new(3 * v91);
          }
          else
          {
            v92 = 0;
          }
          v93 = *(_WORD *)v84;
          v94 = &v92[3 * v89];
          v94[2] = *((_BYTE *)v84 + 2);
          *(_WORD *)v94 = v93;
          v95 = v94;
          if (v85 != v88)
          {
            do
            {
              v96 = *(_WORD *)(v85 - 3);
              v85 -= 3;
              v97 = v85[2];
              *(_WORD *)(v95 - 3) = v96;
              v95 -= 3;
              v95[2] = v97;
            }
            while (v85 != v88);
            v85 = (char *)v239;
          }
          v87 = v94 + 3;
          v239 = v95;
          v241 = &v92[3 * v91];
          if (v85)
            operator delete(v85);
        }
        else
        {
          v86 = *(_WORD *)v84;
          v240[2] = *((_BYTE *)v84 + 2);
          *(_WORD *)v85 = v86;
          v87 = v85 + 3;
        }
        v240 = v87;
        v98 = sub_2395D7CD8((uint64_t)a2, v82);
        sub_2394FB1F8((float32x2_t **)&v242, (float64x2_t *)v98);
        v99 = v98 + 3;
        v100 = v237;
        if (v237 < v238)
        {
          v79 = *(_WORD *)v99;
          v237[2] = *((_BYTE *)v99 + 2);
          *(_WORD *)v100 = v79;
          v80 = v100 + 3;
          v81 = v226;
        }
        else
        {
          v101 = (char *)__p;
          v102 = 0xAAAAAAAAAAAAAAABLL * (v237 - (_BYTE *)__p);
          v103 = v102 + 1;
          if (v102 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (v238 - (_BYTE *)__p) > v103)
            v103 = 0x5555555555555556 * (v238 - (_BYTE *)__p);
          if (0xAAAAAAAAAAAAAAABLL * (v238 - (_BYTE *)__p) >= 0x2AAAAAAAAAAAAAAALL)
            v104 = 0x5555555555555555;
          else
            v104 = v103;
          if (v104)
          {
            if (v104 >= 0x5555555555555556)
              sub_239418A80();
            v105 = (char *)operator new(3 * v104);
          }
          else
          {
            v105 = 0;
          }
          v106 = *(_WORD *)v99;
          v107 = &v105[3 * v102];
          v107[2] = *((_BYTE *)v99 + 2);
          *(_WORD *)v107 = v106;
          v108 = v107;
          if (v100 == v101)
          {
            v81 = v226;
          }
          else
          {
            v81 = v226;
            do
            {
              v109 = *(_WORD *)(v100 - 3);
              v100 -= 3;
              v110 = v100[2];
              *(_WORD *)(v108 - 3) = v109;
              v108 -= 3;
              v108[2] = v110;
            }
            while (v100 != v101);
            v100 = (char *)__p;
          }
          v80 = v107 + 3;
          __p = v108;
          v238 = &v105[3 * v104];
          if (v100)
            operator delete(v100);
        }
        v237 = v80;
        ++v78;
      }
      while (v78 != v81);
    }
    sub_239C03D48((uint64_t)v274, (uint64_t)&v251, (uint64_t)&v239);
    sub_239C03D48((uint64_t)v260, (uint64_t)&v242, (uint64_t)&__p);
    HIBYTE(v235[2]) = 17;
    strcpy((char *)v235, "before_align_left");
    if (!v255)
      sub_2394172E0();
    (*(void (**)(_BYTE *, void **, void **))(*(_QWORD *)v255 + 48))(v255, v274, v235);
    if (SHIBYTE(v235[2]) < 0)
      operator delete(v235[0]);
    HIBYTE(v235[2]) = 18;
    strcpy((char *)v235, "before_align_right");
    if (!v255)
      sub_2394172E0();
    (*(void (**)(_BYTE *, void **, void **))(*(_QWORD *)v255 + 48))(v255, v260, v235);
    if (SHIBYTE(v235[2]) < 0)
      operator delete(v235[0]);
    if (v273 && v271)
    {
      v272 = v271;
      operator delete(v271);
    }
    if (v270)
    {
      v111 = (char *)v268;
      if (v268)
      {
        v112 = v269;
        v113 = v268;
        if (v269 != v268)
        {
          v114 = v269;
          do
          {
            v116 = (void *)*((_QWORD *)v114 - 3);
            v114 -= 24;
            v115 = v116;
            if (v116)
            {
              *((_QWORD *)v112 - 2) = v115;
              operator delete(v115);
            }
            v112 = v114;
          }
          while (v114 != v111);
          v113 = v268;
        }
        v269 = v111;
        operator delete(v113);
      }
    }
    if (v267 && v265)
    {
      v266 = v265;
      operator delete(v265);
    }
    if (v264 && v262)
    {
      v263 = v262;
      operator delete(v262);
    }
    if (v260[0])
    {
      v260[1] = v260[0];
      operator delete(v260[0]);
    }
    if (v285 && v283)
    {
      v284 = v283;
      operator delete(v283);
    }
    if (v282)
    {
      v117 = (char *)v280;
      if (v280)
      {
        v118 = v281;
        v119 = v280;
        if (v281 != v280)
        {
          v120 = v281;
          do
          {
            v122 = (void *)*((_QWORD *)v120 - 3);
            v120 -= 24;
            v121 = v122;
            if (v122)
            {
              *((_QWORD *)v118 - 2) = v121;
              operator delete(v121);
            }
            v118 = v120;
          }
          while (v120 != v117);
          v119 = v280;
        }
        v281 = v117;
        operator delete(v119);
      }
    }
    if (v279 && v277[1])
    {
      v278 = v277[1];
      operator delete(v277[1]);
    }
    if (LOBYTE(v277[0]) && v275[1])
    {
      *(void **)&v276 = v275[1];
      operator delete(v275[1]);
    }
    if (v274[0])
    {
      v274[1] = v274[0];
      operator delete(v274[0]);
    }
    if (__p)
      operator delete(__p);
    if (v239)
      operator delete(v239);
    if (v242)
    {
      v243 = v242;
      operator delete(v242);
    }
    if (v251)
    {
      v252 = (char *)v251;
      operator delete(v251);
    }
  }
  v123 = a5;
  *(_QWORD *)(a5 + 8) = 0;
  v124 = v222[33];
  *(_OWORD *)v274 = v222[32];
  *(_OWORD *)v275 = v124;
  v125 = v222[35];
  v276 = v222[34];
  *(_OWORD *)v277 = v125;
  v126 = *((double *)&v124 + 1);
  if (*((double *)&v124 + 1) <= 0.0)
  {
    v126 = sub_239BEB240((float64x2_t **)&v248) * 0.1;
    *(double *)&v275[1] = v126;
    v123 = a5;
  }
  if (v126 < 2.22044605e-16)
    goto LABEL_395;
  if ((sub_239BF9BFC(&v245, &v248, v221, v123, (uint64_t)v274) & 1) == 0)
  {
    *(_QWORD *)(a5 + 8) = 0;
    v131 = v126 + v126;
    v275[1] = *(void **)&v131;
    if ((sub_239BF9BFC(&v245, &v248, v221, a5, (uint64_t)v274) & 1) == 0)
    {
      *(_QWORD *)(a5 + 8) = 0;
      v132 = v131 + v131;
      v275[1] = *(void **)&v132;
      if ((sub_239BF9BFC(&v245, &v248, v221, a5, (uint64_t)v274) & 1) == 0)
      {
        *(_QWORD *)(a5 + 8) = 0;
        *(double *)&v275[1] = v132 + v132;
        if ((sub_239BF9BFC(&v245, &v248, v221, a5, (uint64_t)v274) & 1) == 0)
        {
          *(_QWORD *)(a5 + 8) = 0;
          goto LABEL_395;
        }
      }
    }
  }
  v260[0] = 0;
  v260[1] = 0;
  v261 = 0;
  v251 = 0;
  v252 = 0;
  v253 = 0;
  v133 = (char **)a5;
  v134 = *(_QWORD *)(a5 + 8);
  if (v134)
  {
    if (v134 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v260[0] = operator new(24 * v134);
    v260[1] = v260[0];
    v261 = (char *)v260[0] + 24 * v134;
    v135 = 0;
    v251 = operator new(24 * v134);
    v252 = (char *)v251;
    v253 = (char *)v251 + 24 * v134;
    do
    {
      if (((*(_QWORD *)&(*v133)[(v135 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v135) & 1) != 0)
      {
        v137 = (char *)v245 + 24 * v135;
        v138 = v260[1];
        if (v260[1] >= v261)
        {
          v141 = v260[0];
          v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v260[1] - (char *)v260[0]) >> 3);
          v143 = v142 + 1;
          if (v142 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_416;
          if (0x5555555555555556 * ((v261 - (char *)v260[0]) >> 3) > v143)
            v143 = 0x5555555555555556 * ((v261 - (char *)v260[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v261 - (char *)v260[0]) >> 3) >= 0x555555555555555)
            v144 = 0xAAAAAAAAAAAAAAALL;
          else
            v144 = v143;
          if (v144)
          {
            if (v144 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_415;
            v145 = (char *)operator new(24 * v144);
          }
          else
          {
            v145 = 0;
          }
          v146 = *(_OWORD *)v137;
          v147 = &v145[24 * v142];
          *((_QWORD *)v147 + 2) = *((_QWORD *)v137 + 2);
          *(_OWORD *)v147 = v146;
          v148 = v147;
          if (v138 != v141)
          {
            do
            {
              v149 = *(_OWORD *)((char *)v138 - 24);
              *((_QWORD *)v148 - 1) = *((_QWORD *)v138 - 1);
              *(_OWORD *)(v148 - 24) = v149;
              v148 -= 24;
              v138 = (_OWORD *)((char *)v138 - 24);
            }
            while (v138 != v141);
            v138 = v260[0];
          }
          v140 = v147 + 24;
          v260[0] = v148;
          v260[1] = v147 + 24;
          v261 = &v145[24 * v144];
          if (v138)
            operator delete(v138);
          v133 = (char **)a5;
        }
        else
        {
          v139 = *(_OWORD *)v137;
          *((_QWORD *)v260[1] + 2) = *((_QWORD *)v137 + 2);
          *v138 = v139;
          v140 = (char *)v138 + 24;
        }
        v260[1] = v140;
        v150 = (char *)v248 + 24 * v135;
        v151 = v252;
        if (v252 < v253)
        {
          v127 = *(float64x2_t *)v150;
          *((_QWORD *)v252 + 2) = *((_QWORD *)v150 + 2);
          *v151 = v127;
          v136 = (char *)v151 + 24;
        }
        else
        {
          v152 = v251;
          v153 = 0xAAAAAAAAAAAAAAABLL * ((v252 - (_BYTE *)v251) >> 3);
          v154 = v153 + 1;
          if (v153 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_416:
            sub_2394189F8();
          if (0x5555555555555556 * ((v253 - (_BYTE *)v251) >> 3) > v154)
            v154 = 0x5555555555555556 * ((v253 - (_BYTE *)v251) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v253 - (_BYTE *)v251) >> 3) >= 0x555555555555555)
            v155 = 0xAAAAAAAAAAAAAAALL;
          else
            v155 = v154;
          if (v155)
          {
            if (v155 > 0xAAAAAAAAAAAAAAALL)
LABEL_415:
              sub_239418A80();
            v156 = (char *)operator new(24 * v155);
          }
          else
          {
            v156 = 0;
          }
          v127 = *(float64x2_t *)v150;
          v157 = &v156[24 * v153];
          *((_QWORD *)v157 + 2) = *((_QWORD *)v150 + 2);
          *(float64x2_t *)v157 = v127;
          v158 = v157;
          if (v151 != v152)
          {
            do
            {
              v127 = *(float64x2_t *)((char *)v151 - 24);
              *((_QWORD *)v158 - 1) = *((_QWORD *)v151 - 1);
              *(float64x2_t *)(v158 - 24) = v127;
              v158 -= 24;
              v151 = (_OWORD *)((char *)v151 - 24);
            }
            while (v151 != v152);
            v151 = v251;
          }
          v136 = v157 + 24;
          v251 = v158;
          v253 = &v156[24 * v155];
          if (v151)
            operator delete(v151);
          v133 = (char **)a5;
        }
        v252 = v136;
        v134 = (unint64_t)v133[1];
      }
    }
    while (++v135 < v134);
  }
  v159 = sub_239BFA324((float64x2_t **)v260, (float64x2_t **)&v251, v221, 0, v127, v128, v129, v130);
  if (v251)
    operator delete(v251);
  if (v260[0])
  {
    v260[1] = v260[0];
    operator delete(v260[0]);
  }
  if (!v159)
  {
LABEL_395:
    v37 = 0;
    v216 = (char *)v245;
    if (v245)
      goto LABEL_396;
    goto LABEL_397;
  }
  if ((char *)v226 != v133[1])
  {
    sub_239A444D4((uint64_t)"unknown file", 411, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v160 = *v133;
  LOBYTE(v242) = 1;
  v274[0] = v160;
  LODWORD(v274[1]) = 0;
  v260[0] = &v160[8 * (v226 >> 6)];
  LODWORD(v260[1]) = (v220 >> 3) & 0x3F;
  sub_239458E50((uint64_t)v274, (uint64_t)v260, &v242);
  for (j = (_QWORD *)a2[11]; j; j = (_QWORD *)*j)
    _Q0.f64[0] = sub_2396F774C((uint64_t)(j + 3), v221, (int64x2_t)_Q0);
  for (k = (uint64_t *)a2[6]; k; k = (uint64_t *)*k)
  {
    _Q2.f64[0] = *(float64_t *)(v221 + 48);
    v165 = *(float64x2_t *)(v221 + 32);
    v166 = *((double *)k + 5);
    _Q7 = *(float64x2_t *)(k + 3);
    v168 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v221 + 8), _Q7.f64[0]), v165, _Q7, 1), *(float64x2_t *)(v221 + 56), v166);
    __asm { FMLA            D0, D2, V7.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + *(double *)(v221 + 72) * v166;
    _Q2.f64[0] = *(float64_t *)v221;
    v165.f64[0] = *(float64_t *)(v221 + 96);
    *(float64x2_t *)(k + 3) = vmlaq_n_f64(*(float64x2_t *)(v221 + 80), v168, *(double *)v221);
    k[5] = *(_OWORD *)&vmlaq_f64(v165, _Q2, _Q0);
  }
  if (v255)
  {
    v251 = 0;
    v252 = 0;
    v253 = 0;
    v242 = 0;
    v243 = 0;
    v244 = 0;
    v239 = 0;
    v240 = 0;
    v241 = 0;
    __p = 0;
    v237 = 0;
    v238 = 0;
    v251 = operator new(12 * v226);
    v252 = (char *)v251;
    v253 = (char *)v251 + 12 * v226;
    v242 = operator new(12 * v226);
    v243 = v242;
    v244 = (char *)v242 + 12 * v226;
    v239 = operator new(3 * v226);
    v240 = (char *)v239;
    v241 = (char *)v239 + 3 * v226;
    __p = operator new(3 * v226);
    v237 = (char *)__p;
    v238 = (char *)__p + 3 * v226;
    if (v224 != v223)
    {
      v172 = 0;
      do
      {
        v175 = *((_QWORD *)*a4 + v172);
        v176 = sub_2394A2EA8((uint64_t)v228, v175);
        sub_2394FB1F8((float32x2_t **)&v251, (float64x2_t *)v176);
        v177 = v176 + 3;
        v178 = v240;
        if (v240 >= v241)
        {
          v181 = (char *)v239;
          v182 = 0xAAAAAAAAAAAAAAABLL * (v240 - (_BYTE *)v239);
          v183 = v182 + 1;
          if (v182 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (v241 - (_BYTE *)v239) > v183)
            v183 = 0x5555555555555556 * (v241 - (_BYTE *)v239);
          if (0xAAAAAAAAAAAAAAABLL * (v241 - (_BYTE *)v239) >= 0x2AAAAAAAAAAAAAAALL)
            v184 = 0x5555555555555555;
          else
            v184 = v183;
          if (v184)
          {
            if (v184 >= 0x5555555555555556)
              sub_239418A80();
            v185 = (char *)operator new(3 * v184);
          }
          else
          {
            v185 = 0;
          }
          v186 = *(_WORD *)v177;
          v187 = &v185[3 * v182];
          v187[2] = *((_BYTE *)v177 + 2);
          *(_WORD *)v187 = v186;
          v188 = v187;
          if (v178 != v181)
          {
            do
            {
              v189 = *(_WORD *)(v178 - 3);
              v178 -= 3;
              v190 = v178[2];
              *(_WORD *)(v188 - 3) = v189;
              v188 -= 3;
              v188[2] = v190;
            }
            while (v178 != v181);
            v178 = (char *)v239;
          }
          v180 = v187 + 3;
          v239 = v188;
          v241 = &v185[3 * v184];
          if (v178)
            operator delete(v178);
        }
        else
        {
          v179 = *(_WORD *)v177;
          v240[2] = *((_BYTE *)v177 + 2);
          *(_WORD *)v178 = v179;
          v180 = v178 + 3;
        }
        v240 = v180;
        v191 = sub_2395D7CD8((uint64_t)a2, v175);
        sub_2394FB1F8((float32x2_t **)&v242, (float64x2_t *)v191);
        v192 = v191 + 3;
        v193 = v237;
        if (v237 < v238)
        {
          v173 = *(_WORD *)v192;
          v237[2] = *((_BYTE *)v192 + 2);
          *(_WORD *)v193 = v173;
          v174 = v193 + 3;
        }
        else
        {
          v194 = (char *)__p;
          v195 = 0xAAAAAAAAAAAAAAABLL * (v237 - (_BYTE *)__p);
          v196 = v195 + 1;
          if (v195 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (v238 - (_BYTE *)__p) > v196)
            v196 = 0x5555555555555556 * (v238 - (_BYTE *)__p);
          if (0xAAAAAAAAAAAAAAABLL * (v238 - (_BYTE *)__p) >= 0x2AAAAAAAAAAAAAAALL)
            v197 = 0x5555555555555555;
          else
            v197 = v196;
          if (v197)
          {
            if (v197 >= 0x5555555555555556)
              sub_239418A80();
            v198 = (char *)operator new(3 * v197);
          }
          else
          {
            v198 = 0;
          }
          v199 = *(_WORD *)v192;
          v200 = &v198[3 * v195];
          v200[2] = *((_BYTE *)v192 + 2);
          *(_WORD *)v200 = v199;
          v201 = v200;
          if (v193 != v194)
          {
            do
            {
              v202 = *(_WORD *)(v193 - 3);
              v193 -= 3;
              v203 = v193[2];
              *(_WORD *)(v201 - 3) = v202;
              v201 -= 3;
              v201[2] = v203;
            }
            while (v193 != v194);
            v193 = (char *)__p;
          }
          v174 = v200 + 3;
          __p = v201;
          v238 = &v198[3 * v197];
          if (v193)
            operator delete(v193);
        }
        v237 = v174;
        ++v172;
      }
      while (v172 != v226);
    }
    sub_239C03D48((uint64_t)v274, (uint64_t)&v251, (uint64_t)&v239);
    sub_239C03D48((uint64_t)v260, (uint64_t)&v242, (uint64_t)&__p);
    HIBYTE(v235[2]) = 4;
    strcpy((char *)v235, "left");
    if (!v255)
      sub_2394172E0();
    (*(void (**)(_BYTE *, void **, void **))(*(_QWORD *)v255 + 48))(v255, v274, v235);
    if (SHIBYTE(v235[2]) < 0)
      operator delete(v235[0]);
    HIBYTE(v235[2]) = 5;
    strcpy((char *)v235, "right");
    if (!v255)
      sub_2394172E0();
    (*(void (**)(_BYTE *, void **, void **))(*(_QWORD *)v255 + 48))(v255, v260, v235);
    if (SHIBYTE(v235[2]) < 0)
      operator delete(v235[0]);
    if (v273 && v271)
    {
      v272 = v271;
      operator delete(v271);
    }
    if (v270)
    {
      v204 = (char *)v268;
      if (v268)
      {
        v205 = v269;
        v206 = v268;
        if (v269 != v268)
        {
          v207 = v269;
          do
          {
            v209 = (void *)*((_QWORD *)v207 - 3);
            v207 -= 24;
            v208 = v209;
            if (v209)
            {
              *((_QWORD *)v205 - 2) = v208;
              operator delete(v208);
            }
            v205 = v207;
          }
          while (v207 != v204);
          v206 = v268;
        }
        v269 = v204;
        operator delete(v206);
      }
    }
    if (v267 && v265)
    {
      v266 = v265;
      operator delete(v265);
    }
    if (v264 && v262)
    {
      v263 = v262;
      operator delete(v262);
    }
    if (v260[0])
    {
      v260[1] = v260[0];
      operator delete(v260[0]);
    }
    if (v285 && v283)
    {
      v284 = v283;
      operator delete(v283);
    }
    if (v282)
    {
      v210 = (char *)v280;
      if (v280)
      {
        v211 = v281;
        v212 = v280;
        if (v281 != v280)
        {
          v213 = v281;
          do
          {
            v215 = (void *)*((_QWORD *)v213 - 3);
            v213 -= 24;
            v214 = v215;
            if (v215)
            {
              *((_QWORD *)v211 - 2) = v214;
              operator delete(v214);
            }
            v211 = v213;
          }
          while (v213 != v210);
          v212 = v280;
        }
        v281 = v210;
        operator delete(v212);
      }
    }
    if (v279 && v277[1])
    {
      v278 = v277[1];
      operator delete(v277[1]);
    }
    if (LOBYTE(v277[0]) && v275[1])
    {
      *(void **)&v276 = v275[1];
      operator delete(v275[1]);
    }
    if (v274[0])
    {
      v274[1] = v274[0];
      operator delete(v274[0]);
    }
    if (__p)
      operator delete(__p);
    if (v239)
      operator delete(v239);
    if (v242)
    {
      v243 = v242;
      operator delete(v242);
    }
    if (v251)
    {
      v252 = (char *)v251;
      operator delete(v251);
    }
  }
  v37 = 1;
  v216 = (char *)v245;
  if (!v245)
    goto LABEL_397;
LABEL_396:
  v246 = v216;
  operator delete(v216);
LABEL_397:
  if (v248)
  {
    v249 = (char *)v248;
    operator delete(v248);
  }
LABEL_399:
  v217 = v255;
  if (v255 == v254)
  {
    v218 = 4;
    v217 = v254;
LABEL_403:
    (*(void (**)(void))(*v217 + 8 * v218))();
  }
  else if (v255)
  {
    v218 = 5;
    goto LABEL_403;
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  return v37;
}

void sub_239C080EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  void *v51;
  void *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;

  sub_2394B6764((uint64_t)&STACK[0x230]);
  if (__p)
  {
    operator delete(__p);
    v51 = a32;
    if (!a32)
    {
LABEL_3:
      v52 = a35;
      if (!a35)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v51 = a32;
    if (!a32)
      goto LABEL_3;
  }
  operator delete(v51);
  v52 = a35;
  if (!a35)
  {
LABEL_4:
    v53 = a44;
    if (!a44)
    {
LABEL_10:
      if (a38)
        operator delete(a38);
      if (a41)
        operator delete(a41);
      v54 = (_QWORD *)a50;
      if ((char *)a50 == &a47)
      {
        v55 = 4;
        v54 = &a47;
      }
      else
      {
        if (!a50)
          goto LABEL_19;
        v55 = 5;
      }
      (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_19:
      if (a19)
        operator delete(a19);
      if (a22)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v53);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v52);
  v53 = a44;
  if (!a44)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_239C082F8()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239C0830C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AFB070;
  result[1] = v3;
  return result;
}

uint64_t sub_239C08340(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AFB070;
  a2[1] = v2;
  return result;
}

uint64_t sub_239C0835C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)(a3 + 28) != 1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *a2;
    v6 = *(char **)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(char **)v3;
      v9 = (uint64_t)&v6[-*(_QWORD *)v3];
      v10 = v9 >> 3;
      v11 = (v9 >> 3) + 1;
      if (v11 >> 61)
        sub_2394189F8();
      v12 = v5 - (_QWORD)v8;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          sub_239418A80();
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v4;
      v7 = v15 + 1;
      if (v6 != v8)
      {
        v17 = v6 - v8 - 8;
        if (v17 < 0x58)
          goto LABEL_29;
        if ((unint64_t)(v6 - &v14[v9]) < 0x20)
          goto LABEL_29;
        v18 = (v17 >> 3) + 1;
        v19 = &v14[8 * v10 - 16];
        v20 = v6 - 16;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          do
          {
            v23 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v15 = v23;
          }
          while (v6 != v8);
        }
      }
      *(_QWORD *)v3 = v15;
      *(_QWORD *)(v3 + 8) = v7;
      *(_QWORD *)(v3 + 16) = v16;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v6 = v4;
      v7 = v6 + 8;
    }
    *(_QWORD *)(v3 + 8) = v7;
  }
  return 1;
}

void sub_239C084CC()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239C084E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AFB028;
  result[1] = v3;
  return result;
}

uint64_t sub_239C08514(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AFB028;
  a2[1] = v2;
  return result;
}

uint64_t sub_239C08530(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)(a3 + 28) != 1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *a2;
    v6 = *(char **)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(char **)v3;
      v9 = (uint64_t)&v6[-*(_QWORD *)v3];
      v10 = v9 >> 3;
      v11 = (v9 >> 3) + 1;
      if (v11 >> 61)
        sub_2394189F8();
      v12 = v5 - (_QWORD)v8;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          sub_239418A80();
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v4;
      v7 = v15 + 1;
      if (v6 != v8)
      {
        v17 = v6 - v8 - 8;
        if (v17 < 0x58)
          goto LABEL_29;
        if ((unint64_t)(v6 - &v14[v9]) < 0x20)
          goto LABEL_29;
        v18 = (v17 >> 3) + 1;
        v19 = &v14[8 * v10 - 16];
        v20 = v6 - 16;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          do
          {
            v23 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v15 = v23;
          }
          while (v6 != v8);
        }
      }
      *(_QWORD *)v3 = v15;
      *(_QWORD *)(v3 + 8) = v7;
      *(_QWORD *)(v3 + 16) = v16;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v6 = v4;
      v7 = v6 + 8;
    }
    *(_QWORD *)(v3 + 8) = v7;
  }
  return 1;
}

uint64_t sub_239C0869C(uint64_t a1)
{
  char *v2;
  _QWORD *v3;

  v2 = (char *)operator new(0x1E0uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_250B01540;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *((_QWORD *)v2 + 59) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *((_DWORD *)v2 + 22) = 1065353216;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_DWORD *)v2 + 32) = 1065353216;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *((_QWORD *)v2 + 25) = 0;
  *((_DWORD *)v2 + 52) = 1065353216;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *((_DWORD *)v2 + 62) = 1065353216;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_QWORD *)v2 + 40) = 0;
  *((_QWORD *)v2 + 41) = 0x3FF0000000000000;
  *((_QWORD *)v2 + 46) = 0;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_DWORD *)v2 + 118) = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = operator new(0x450uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_250AFFA98;
  bzero(v3 + 3, 0x438uLL);
  sub_239AD012C((uint64_t)(v3 + 3));
  *(_QWORD *)(a1 + 32) = v3 + 3;
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  sub_239AB5C84(a1 + 64);
  *(_QWORD *)(a1 + 1824) = 0;
  *(_OWORD *)(a1 + 1808) = 0u;
  return a1;
}

void sub_239C08804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_239A4D7C0(v3);
  sub_239A4D7C0(v2);
  sub_239A4D7C0(v1);
  _Unwind_Resume(a1);
}

void sub_239C08830(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFFA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239C08840(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFFA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239C08870(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v2 = (_QWORD *)(a1 + 1040);
  v3 = *(_QWORD **)(a1 + 1064);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 1032);
  if (v5 == (_QWORD *)(a1 + 1008))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 1008);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(void **)(a1 + 688);
  if (v7)
  {
    *(_QWORD *)(a1 + 696) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  v8 = *(_QWORD **)(a1 + 400);
  if (v8 == (_QWORD *)(a1 + 376))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 376);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  result = *(_QWORD **)(a1 + 368);
  if (result == (_QWORD *)(a1 + 344))
  {
    v11 = 4;
    result = (_QWORD *)(a1 + 344);
  }
  else
  {
    if (!result)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

_QWORD *sub_239C08978(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (void *)a1[226];
  if (v2)
  {
    a1[227] = v2;
    operator delete(v2);
  }
  sub_239A615DC((uint64_t)(a1 + 8));
  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[3];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[3];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

uint64_t sub_239C08A64(uint64_t *a1, int8x8_t *a2, _QWORD *a3)
{
  uint64_t v7;
  uint64_t v8;
  float64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float64_t v29;
  float64_t v30;
  int8x8_t v31;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  void *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE *v69;
  float64_t v70;
  signed int v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  pthread_t **v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  pthread_t **v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  pthread_t **v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  float64_t v108;
  unint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int8x8_t **v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  float64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  char *v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t *v151;
  uint64_t v152;
  _BYTE *v156;
  _BYTE *v157;
  int64_t v158;
  uint64_t **v159;
  uint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  float64x2_t v167;
  float64x2_t v168;
  int64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v178;
  float64x2_t v179;
  int64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  double v184;
  __int128 v185;
  __int128 v186;
  float64x2_t v187;
  unint64_t v188;
  double v189;
  double v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v195;
  float64x2_t v198;
  float64x2_t v201;
  int64x2_t v203;
  double v204;
  double v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  __int128 v214;
  int8x16_t v215;
  float64x2_t v216;
  double v217;
  double v218;
  int8x16_t v219;
  int8x16_t v220;
  double v221;
  double v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v227;
  float64x2_t v230;
  float64x2_t v233;
  int64x2_t v235;
  double v236;
  double v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  double v248;
  double v250;
  double v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v256;
  float64x2_t v258;
  float64x2_t v261;
  int64x2_t v263;
  float64x2_t v264;
  int8x16_t v266;
  unint64_t v267;
  int8x16_t v268;
  unint64_t v269;
  float64x2_t v270;
  int8x16_t v271;
  int8x16_t v273;
  double v274;
  int8x16_t v275;
  int8x16_t v276;
  double v277;
  float64x2_t v278;
  double v279;
  double v281;
  double v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v287;
  float64x2_t v289;
  float64x2_t v292;
  int64x2_t v294;
  float64x2_t v295;
  double v300;
  double v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  void *v305;
  void *v306;
  double v307;
  double *v308;
  double v309;
  void *v310;
  void *v311;
  double v312;
  double *v313;
  double v314;
  void *v315;
  void *v316;
  double v317;
  double *v318;
  double v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  unint64_t v324;
  int64_t v325;
  _QWORD *v326;
  unint64_t v327;
  uint64_t **v328;
  _QWORD *v329;
  char *v330;
  char *v331;
  char *v332;
  _QWORD *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  double v347;
  uint64_t *v348;
  uint64_t **v349;
  uint64_t **v350;
  double v351;
  char *v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t *v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t **v358;
  uint64_t *v359;
  void *v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  uint64_t *v367;
  uint64_t **v368;
  _QWORD *v369;
  _QWORD *v370;
  void *sig;
  _QWORD *v372;
  _QWORD *v373;
  float64_t v374;
  _QWORD *v375;
  void *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  void *v381;
  void *v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  void *v386;
  float64_t v387;
  float64_t v388;
  float64_t v389;
  float64_t v390;
  void *v391;
  void *v392;
  int8x8_t *v393;
  unint64_t v394;
  int8x8_t *v395;
  int8x8_t *v396;
  __n128 v397;
  int8x8_t v398;
  int v399;
  _DWORD *v400;
  unint64_t v401;
  unint64_t v402;
  int8x8_t *v403;
  unint64_t v404;
  unint64_t v405;
  int v406;
  char **v407;
  uint64_t v408;
  void ***v409;
  void ***v410;
  int8x8_t v411;
  void **v412;
  unint64_t v413;
  uint8x8_t v414;
  unint64_t v415;
  uint64_t **v416;
  uint64_t *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  int8x8_t *v421;
  std::__shared_weak_count *v422;
  unint64_t *p_shared_owners;
  unint64_t v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t *v427;
  unint64_t *v428;
  _QWORD *v429;
  _QWORD *v430;
  void *v431;
  _QWORD *v432;
  _QWORD *v433;
  void *v434;
  _QWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  float64_t v439;
  _QWORD *v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  int8x8_t *v444;
  int8x8_t *v445;
  uint64_t *v446;
  _QWORD *v447;
  int64x2_t v448;
  unint64_t *v449;
  int64x2_t v450;
  int8x16_t v451;
  double v452;
  double v453;
  double v454;
  double v455;
  double v456;
  unint64_t v457;
  double v458;
  unint64_t v459;
  double v460;
  unint64_t v461;
  int8x16_t v462;
  char *v463;
  int64x2_t v464;
  float64x2_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  _QWORD *v469;
  void *v470;
  _BYTE *v471;
  uint64_t v472;
  void *v473[2];
  _BYTE v474[32];
  float64x2_t v475;
  double v476;
  void *v477[2];
  void *v478[2];
  int v479;
  unint64_t v480;
  void *v481;
  unint64_t *v482;
  uint64_t v483;
  void *v484;
  void ***v485;
  uint64_t v486;
  void *v487;
  char *v488;
  char *v489;
  uint64_t **v490;
  uint64_t *v491;
  uint64_t *v492;
  float64x2_t __p;
  pthread_rwlock_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  pthread_rwlock_t v498;
  char *v499;
  char *v500;
  void **v501;
  char **v502;
  uint64_t v503;

  v503 = *MEMORY[0x24BDAC8D0];
  v470 = 0;
  v471 = 0;
  v472 = 0;
  sub_239433C1C(*a1, (uint64_t)&v470, 1);
  if ((unint64_t)(v471 - (_BYTE *)v470) < 0x18 || *(_QWORD *)&a2[3] <= 2uLL)
  {
    sub_2394202DC(a1 + 82, 4001);
    goto LABEL_206;
  }
  v7 = *a1;
  v8 = a1[4];
  __p = 0uLL;
  v494.__sig = 0;
  sub_239433C1C(v7, (uint64_t)&__p, 1);
  v468 = (uint64_t *)(v7 + 232);
  v469 = (_QWORD *)v7;
  v9 = __p.f64[1];
  v447 = a3;
  v446 = a1;
  if (*(_QWORD *)&__p.f64[1] != *(_QWORD *)&__p.f64[0])
  {
    v10 = 0;
    if ((unint64_t)((uint64_t)(*(_QWORD *)&__p.f64[1] - *(_QWORD *)&__p.f64[0]) >> 3) <= 1)
      v11 = 1;
    else
      v11 = (uint64_t)(*(_QWORD *)&__p.f64[1] - *(_QWORD *)&__p.f64[0]) >> 3;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 8 * v10);
      if (*((_BYTE *)sub_2395D7BEC((uint64_t)v469, v12) + 232) != 1)
      {
        v498.__sig = 0x3FF0000000000000;
        sub_239AF20A0((uint64_t)v468, v12, &v498);
      }
      ++v10;
    }
    while (v11 != v10);
    v9 = __p.f64[0];
    a3 = v447;
    v7 = (uint64_t)v469;
  }
  if (v9 != 0.0)
  {
    __p.f64[1] = v9;
    operator delete(*(void **)&v9);
  }
  v473[0] = 0;
  v473[1] = 0;
  *(_QWORD *)v474 = 0;
  sub_239433C1C(v7, (uint64_t)v473, 1);
  v13 = *(_QWORD *)(v8 + 672);
  v14 = *(_QWORD *)(v8 + 664);
  v477[0] = 0;
  v477[1] = 0;
  v478[0] = 0;
  v15 = (uint64_t *)v473[0];
  v16 = (uint64_t *)v473[1];
  if (v473[0] != v473[1])
  {
    v444 = a2;
    v466 = v8;
    do
    {
      v17 = *v15;
      if (v13 != v14)
      {
        v18 = *(_QWORD **)(v8 + 664);
        v19 = *(_QWORD **)(v8 + 672);
        if (v18 != v19)
        {
          while (*v18 != v17)
          {
            if (++v18 == v19)
            {
              v18 = *(_QWORD **)(v8 + 672);
              break;
            }
          }
        }
        if (v18 != v19)
          goto LABEL_19;
      }
      v20 = (int8x8_t)a3[1];
      if (!*(_QWORD *)&v20)
        goto LABEL_19;
      v21 = *v15;
      v22 = (uint8x8_t)vcnt_s8(v20);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v23 = *v15;
        if (*(_QWORD *)&v20 <= v21)
          v23 = v21 % *(_QWORD *)&v20;
      }
      else
      {
        v23 = (v20.i32[0] - 1) & v21;
      }
      v24 = *(uint64_t ***)(*a3 + 8 * v23);
      if (!v24)
        goto LABEL_19;
      v25 = *v24;
      if (!*v24)
        goto LABEL_19;
      if (v22.u32[0] < 2uLL)
      {
        v26 = *(_QWORD *)&v20 - 1;
        while (1)
        {
          v28 = v25[1];
          if (v28 == v21)
          {
            if (*((_DWORD *)v25 + 4) == (_DWORD)v17)
              goto LABEL_46;
          }
          else if ((v28 & v26) != v23)
          {
            goto LABEL_19;
          }
          v25 = (uint64_t *)*v25;
          if (!v25)
            goto LABEL_19;
        }
      }
      while (1)
      {
        v27 = v25[1];
        if (v27 == v21)
          break;
        if (v27 >= *(_QWORD *)&v20)
          v27 %= *(_QWORD *)&v20;
        if (v27 != v23)
          goto LABEL_19;
LABEL_35:
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_19;
      }
      if (*((_DWORD *)v25 + 4) != (_DWORD)v17)
        goto LABEL_35;
LABEL_46:
      sub_239C4E434(&__p, *(uint64_t **)(v25[3] + 16));
      v29 = __p.f64[1];
      v30 = __p.f64[0];
      v31 = (int8x8_t)v469[10];
      _ZF = *(_QWORD *)&__p.f64[0] == *(_QWORD *)&__p.f64[1] || *(_QWORD *)&v31 == 0;
      if (_ZF)
        goto LABEL_119;
      if (!*(_QWORD *)&v31)
        goto LABEL_115;
LABEL_51:
      v33 = **(_DWORD **)&v30;
      v34 = (uint8x8_t)vcnt_s8(v31);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        v35 = **(_DWORD **)&v30;
        if (*(_QWORD *)&v31 <= v33)
          v35 = v33 % *(_QWORD *)&v31;
      }
      else
      {
        v35 = (v31.i32[0] - 1) & v33;
      }
      v36 = v469[9];
      v37 = *(uint64_t ***)(v36 + 8 * v35);
      if (!v37)
        goto LABEL_115;
      v38 = *v37;
      if (!*v37)
        goto LABEL_115;
      v39 = *(unsigned int *)(*(_QWORD *)&v30 + 4);
      v40 = *(_QWORD *)&v31 - 1;
      if (v34.u32[0] < 2uLL)
      {
        while (1)
        {
          v41 = v38[1];
          if (v41 == v33)
          {
            if (*((_DWORD *)v38 + 4) == (_DWORD)v33)
              goto LABEL_71;
          }
          else if ((v41 & v40) != v35)
          {
            goto LABEL_115;
          }
          v38 = (uint64_t *)*v38;
          if (!v38)
            goto LABEL_115;
        }
      }
      while (2)
      {
        v42 = v38[1];
        if (v42 != v33)
        {
          if (v42 >= *(_QWORD *)&v31)
            v42 %= *(_QWORD *)&v31;
          if (v42 != v35)
            goto LABEL_115;
          goto LABEL_65;
        }
        if (*((_DWORD *)v38 + 4) != (_DWORD)v33)
        {
LABEL_65:
          v38 = (uint64_t *)*v38;
          if (!v38)
            goto LABEL_115;
          continue;
        }
        break;
      }
LABEL_71:
      if (v34.u32[0] > 1uLL)
      {
        v43 = *(unsigned int *)(*(_QWORD *)&v30 + 4);
        if (*(_QWORD *)&v31 <= v39)
          v43 = v39 % *(_QWORD *)&v31;
      }
      else
      {
        v43 = (v31.i32[0] - 1) & v39;
      }
      v44 = *(uint64_t ***)(v36 + 8 * v43);
      if (v44)
      {
        v45 = *v44;
        if (v45)
        {
          if (v34.u32[0] < 2uLL)
          {
            while (1)
            {
              v46 = v45[1];
              if (v46 == v39)
              {
                if (*((_DWORD *)v45 + 4) == (_DWORD)v39)
                  goto LABEL_91;
              }
              else if ((v46 & v40) != v43)
              {
                goto LABEL_115;
              }
              v45 = (uint64_t *)*v45;
              if (!v45)
                goto LABEL_115;
            }
          }
          do
          {
            v47 = v45[1];
            if (v47 == v39)
            {
              if (*((_DWORD *)v45 + 4) == (_DWORD)v39)
              {
LABEL_91:
                if (v13 != v14)
                {
                  v48 = *(_QWORD **)(v466 + 664);
                  v49 = *(_QWORD **)(v466 + 672);
                  if (v48 != v49)
                  {
                    do
                    {
                      if (*v48 == v39)
                        goto LABEL_96;
                      ++v48;
                    }
                    while (v48 != v49);
                    v48 = *(_QWORD **)(v466 + 672);
                  }
LABEL_96:
                  if (v48 != v49)
                    break;
                }
                v50 = sub_239C4E898((_QWORD *)v25[3], **(_DWORD **)&v30, *(_DWORD *)(*(_QWORD *)&v30 + 4));
                v51 = v50;
                v52 = (char *)v477[1];
                if (v477[1] >= v478[0])
                {
                  v54 = (char *)v477[0];
                  v55 = 0xD37A6F4DE9BD37A7 * (((char *)v477[1] - (char *)v477[0]) >> 3);
                  v56 = v55 + 1;
                  if (v55 + 1 > 0x1642C8590B21642)
                    sub_2394189F8();
                  if (0xA6F4DE9BD37A6F4ELL * (((char *)v478[0] - (char *)v477[0]) >> 3) > v56)
                    v56 = 0xA6F4DE9BD37A6F4ELL * (((char *)v478[0] - (char *)v477[0]) >> 3);
                  if (0xD37A6F4DE9BD37A7 * (((char *)v478[0] - (char *)v477[0]) >> 3) >= 0xB21642C8590B21)
                    v57 = 0x1642C8590B21642;
                  else
                    v57 = v56;
                  if (v57)
                  {
                    v459 = 0xD37A6F4DE9BD37A7 * (((char *)v477[1] - (char *)v477[0]) >> 3);
                    v461 = v50;
                    v463 = (char *)v477[0];
                    if (v57 > 0x1642C8590B21642)
                      sub_239418A80();
                    v457 = v57;
                    v58 = (char *)operator new(184 * v57);
                    v54 = v463;
                    v57 = v457;
                    v51 = v461;
                    v55 = v459;
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = &v58[184 * v55];
                  *(_QWORD *)v59 = v33;
                  *((_QWORD *)v59 + 1) = v39;
                  *((_QWORD *)v59 + 2) = v469;
                  *((_QWORD *)v59 + 3) = v444;
                  *((_QWORD *)v59 + 4) = v51;
                  *((_QWORD *)v59 + 5) = v466;
                  *((_OWORD *)v59 + 3) = xmmword_239EC68E0;
                  *((_OWORD *)v59 + 4) = xmmword_239F0C3D0;
                  v60 = v59;
                  if (v52 != v54)
                  {
                    do
                    {
                      v61 = *(_OWORD *)(v52 - 184);
                      *(_OWORD *)(v60 - 168) = *(_OWORD *)(v52 - 168);
                      *(_OWORD *)(v60 - 184) = v61;
                      v62 = *(_OWORD *)(v52 - 152);
                      v63 = *(_OWORD *)(v52 - 136);
                      v64 = *(_OWORD *)(v52 - 120);
                      *((_QWORD *)v60 - 13) = *((_QWORD *)v52 - 13);
                      *(_OWORD *)(v60 - 120) = v64;
                      *(_OWORD *)(v60 - 136) = v63;
                      *(_OWORD *)(v60 - 152) = v62;
                      v66 = *((_OWORD *)v52 - 4);
                      v65 = *((_OWORD *)v52 - 3);
                      v67 = *((_OWORD *)v52 - 5);
                      *((_QWORD *)v60 - 4) = *((_QWORD *)v52 - 4);
                      *((_OWORD *)v60 - 4) = v66;
                      *((_OWORD *)v60 - 3) = v65;
                      *((_OWORD *)v60 - 5) = v67;
                      *((_OWORD *)v60 - 6) = *((_OWORD *)v52 - 6);
                      v68 = *(_OWORD *)(v52 - 24);
                      *((_QWORD *)v60 - 1) = *((_QWORD *)v52 - 1);
                      *(_OWORD *)(v60 - 24) = v68;
                      v60 -= 184;
                      v52 -= 184;
                    }
                    while (v52 != v54);
                    v52 = (char *)v477[0];
                  }
                  v53 = v59 + 184;
                  v477[0] = v60;
                  v477[1] = v59 + 184;
                  v478[0] = &v58[184 * v57];
                  if (v52)
                    operator delete(v52);
                }
                else
                {
                  *(_QWORD *)v477[1] = v33;
                  *((_QWORD *)v52 + 1) = v39;
                  *((_QWORD *)v52 + 2) = v469;
                  *((_QWORD *)v52 + 3) = v444;
                  *((_QWORD *)v52 + 4) = v50;
                  *((_QWORD *)v52 + 5) = v466;
                  v53 = v52 + 184;
                  *((_OWORD *)v52 + 3) = xmmword_239EC68E0;
                  *((_OWORD *)v52 + 4) = xmmword_239F0C3D0;
                }
                v477[1] = v53;
                break;
              }
            }
            else
            {
              if (v47 >= *(_QWORD *)&v31)
                v47 %= *(_QWORD *)&v31;
              if (v47 != v43)
                break;
            }
            v45 = (uint64_t *)*v45;
          }
          while (v45);
        }
      }
LABEL_115:
      while (1)
      {
        *(_QWORD *)&v30 += 8;
        if (*(_QWORD *)&v30 == *(_QWORD *)&v29)
          break;
        v31 = (int8x8_t)v469[10];
        if (v31)
          goto LABEL_51;
      }
      v30 = __p.f64[0];
LABEL_119:
      if (v30 != 0.0)
      {
        __p.f64[1] = v30;
        operator delete(*(void **)&v30);
      }
      a3 = v447;
      v8 = v466;
LABEL_19:
      ++v15;
    }
    while (v15 != v16);
    v69 = v477[0];
    if (v477[0] != v477[1])
    {
      __p.f64[0] = *(float64_t *)(v8 + 8);
      sub_2397A1588(&v494);
      v496 = 0;
      v495 = 0;
      v497 = 0;
      v70 = __p.f64[0];
      if (!*(_QWORD *)&__p.f64[0])
      {
        v71 = std::thread::hardware_concurrency();
        *(_QWORD *)&v70 = v71;
        *(_QWORD *)&__p.f64[0] = v71;
      }
      if (v477[0] != v477[1])
      {
        v72 = (char *)v477[1] - (char *)v477[0];
        v73 = ((char *)v477[1] - (char *)v477[0]) / 184;
        if (v73 >= *(_QWORD *)&v70)
          v74 = *(_QWORD *)&v70;
        else
          v74 = v72 / 184;
        v75 = v73 / v74;
        if (v73 / v74 * v74 < v73)
          ++v75;
        if (v75 <= 1)
          v76 = 1;
        else
          v76 = v75;
        if (v74 <= 1)
        {
          v96 = 0;
          if (v73 <= 1)
            v97 = 1;
          else
            v97 = v72 / 184;
          do
          {
            sub_239C4CCB4((uint64_t *)((char *)v477[0] + v96));
            v96 += 184;
            --v97;
          }
          while (v97);
          goto LABEL_180;
        }
        v499 = 0;
        sub_2397A1588(&v498);
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        while (1)
        {
          v82 = (_QWORD *)operator new();
          sub_2397A16D4((uint64_t)v82);
          *v82 = &off_250AFB0B8;
          v82[33] = sub_239C4CCB4;
          v82[34] = v477;
          v82[35] = &v499;
          v82[36] = &v498;
          v82[37] = v76;
          if (v79 >= v78)
            break;
          *(_QWORD *)v79 = v82;
          v81 = v79 + 8;
LABEL_137:
          ++v77;
          v79 = v81;
          if (v77 == v74)
          {
            v98 = v80;
            v99 = v74;
            v8 = v466;
            do
            {
              sub_2397A1878(*v98++);
              --v99;
            }
            while (v99);
            v100 = (uint64_t *)v80;
            v101 = v74;
            do
            {
              sub_2397A195C(*v100++);
              --v101;
            }
            while (v101);
            v102 = v80;
            do
            {
              if (*v102)
                ((void (*)(pthread_t *))(**v102)->__cleanup_stack)(*v102);
              ++v102;
              --v74;
            }
            while (v74);
            sub_2397A186C(1);
            sub_2397A15B0(&v498);
            operator delete(v80);
            goto LABEL_180;
          }
        }
        v83 = (v79 - (char *)v80) >> 3;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61)
          sub_2394189F8();
        if ((v78 - (char *)v80) >> 2 > v84)
          v84 = (v78 - (char *)v80) >> 2;
        if ((unint64_t)(v78 - (char *)v80) >= 0x7FFFFFFFFFFFFFF8)
          v85 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v85 = v84;
        if (v85)
        {
          if (v85 >> 61)
            sub_239418A80();
          v86 = operator new(8 * v85);
        }
        else
        {
          v86 = 0;
        }
        v87 = &v86[8 * v83];
        *v87 = v82;
        v81 = (char *)(v87 + 1);
        if (v79 == (char *)v80)
        {
LABEL_154:
          v80 = (pthread_t **)v87;
          v78 = &v86[8 * v85];
          if (v79)
            operator delete(v79);
          goto LABEL_137;
        }
        v88 = v79 - 8 - (char *)v80;
        if (v88 >= 0x168)
        {
          if (&v86[v79 - (char *)v80 - 8 - (v88 & 0xFFFFFFFFFFFFFFF8)] > &v86[v79 - (char *)v80 - 8])
          {
            v89 = v79;
          }
          else if (&v79[-(v88 & 0xFFFFFFFFFFFFFFF8) - 8] > v79 - 8)
          {
            v89 = v79;
          }
          else if ((unint64_t)((char *)v80 - v86) >= 0x20)
          {
            v91 = (v88 >> 3) + 1;
            v89 = &v79[-8 * (v91 & 0x3FFFFFFFFFFFFFFCLL)];
            v92 = &v86[8 * v83 - 16];
            v93 = v79 - 16;
            v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v95 = *(_OWORD *)v93;
              *(v92 - 1) = *((_OWORD *)v93 - 1);
              *v92 = v95;
              v92 -= 2;
              v93 -= 32;
              v94 -= 4;
            }
            while (v94);
            v87 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
            if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_153;
          }
          else
          {
            v89 = v79;
          }
        }
        else
        {
          v89 = v79;
        }
        do
        {
          v90 = *((_QWORD *)v89 - 1);
          v89 -= 8;
          *--v87 = v90;
        }
        while (v89 != (char *)v80);
LABEL_153:
        v79 = (char *)v80;
        goto LABEL_154;
      }
LABEL_180:
      sub_2397A1C78((uint64_t)&__p);
      v69 = v477[0];
      v103 = v477[1];
      if (v477[1] != v477[0])
      {
        v104 = 0;
        v105 = 0;
        do
        {
          v106 = &v69[v104];
          v107 = *(uint64_t *)&v69[v104 + 56];
          v108 = *(double *)&v69[v104 + 80];
          if (*(double *)&v107 >= 0.5 && *(_QWORD *)&v108 >= *(_QWORD *)(v8 + 64))
          {
            v110 = *(_QWORD *)v106;
            v111 = *((_QWORD *)v106 + 1);
            __p.f64[0] = *((float64_t *)v106 + 6);
            __p.f64[1] = v108;
            v494.__sig = v107;
            *(_OWORD *)v494.__opaque = *((_OWORD *)v106 + 4);
            *(_OWORD *)&v494.__opaque[16] = *(_OWORD *)(v106 + 88);
            v112 = *(_OWORD *)(v106 + 104);
            v113 = *(_OWORD *)(v106 + 120);
            v114 = *(_OWORD *)(v106 + 136);
            *(_QWORD *)&v494.__opaque[80] = *((_QWORD *)v106 + 19);
            *(_OWORD *)&v494.__opaque[48] = v113;
            *(_OWORD *)&v494.__opaque[64] = v114;
            *(_OWORD *)&v494.__opaque[32] = v112;
            v115 = *((_OWORD *)v106 + 10);
            *(_QWORD *)&v494.__opaque[104] = *((_QWORD *)v106 + 22);
            *(_OWORD *)&v494.__opaque[88] = v115;
            sub_239AF27A0(v468, v110, v111, (uint64_t)&__p);
            v69 = v477[0];
            v103 = v477[1];
          }
          ++v105;
          v104 += 184;
        }
        while (v105 < 0xD37A6F4DE9BD37A7 * ((v103 - v69) >> 3));
      }
    }
    if (v69)
    {
      v477[1] = v69;
      operator delete(v69);
    }
    v15 = (uint64_t *)v473[0];
    a2 = v444;
  }
  v116 = (int8x8_t **)v446;
  if (v15)
  {
    v473[1] = v15;
    operator delete(v15);
  }
  if (v469[33] != v469[32])
  {
    v117 = v469[29];
    v118 = v469[30] - v117;
    if (v118)
    {
      v119 = v118 / 40;
      if (v119 <= 1)
        v119 = 1;
      if (v119 >= 2)
      {
        v122 = 0;
        v123 = 0;
        v120 = v119 & 0xFFFFFFFFFFFFFFFELL;
        v124 = (uint64_t *)(v117 + 64);
        v125 = v119 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v126 = *(v124 - 5);
          v127 = *v124;
          v124 += 10;
          v122 += v126;
          v123 += v127;
          v125 -= 2;
        }
        while (v125);
        v121 = v123 + v122;
        if (v119 == v120)
        {
LABEL_205:
          if (v121 < 2)
            goto LABEL_206;
          v499 = 0;
          v500 = 0;
          v501 = 0;
          __p = 0uLL;
          v494.__sig = 0;
          sub_239AFA8E8(v468, (uint64_t)&__p);
          v134 = __p.f64[1];
          v135 = *(_QWORD *)&__p.f64[1] - *(_QWORD *)&__p.f64[0];
          v445 = a2;
          if (*(_QWORD *)&__p.f64[1] == *(_QWORD *)&__p.f64[0])
          {
            v150 = 0;
          }
          else
          {
            v467 = v135 >> 4;
            v136 = (v135 >> 4) - 1;
            if (v135 >> 4 != 1)
            {
              v137 = 0;
              v138 = 0;
              v139 = (v135 >> 4) - 1;
              while (1)
              {
                v140 = v138 + 1;
                if (v138 + 1 != v467)
                  break;
LABEL_212:
                v137 += 16;
                --v139;
                ++v138;
                if (v140 == v136)
                {
                  v134 = __p.f64[0];
                  a2 = v445;
                  v116 = (int8x8_t **)v446;
                  goto LABEL_228;
                }
              }
              v141 = v139;
              v142 = v137;
              while (1)
              {
                v143 = *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 16 * v138);
                if (v143 == *(_QWORD *)(*(_QWORD *)&__p.f64[0] + v142 + 16))
                {
                  v144 = *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 16 * v138 + 8);
                  v145 = *(_QWORD *)(*(_QWORD *)&__p.f64[0] + v142 + 24);
                  if (sub_239AF2B88(v468, v144, v145))
                  {
                    if (v144 >= v145)
                    {
                      v149 = operator new(0x18uLL);
                      v147 = v149 + 3;
                      *(_QWORD *)&v498.__opaque[8] = v149 + 3;
                      *v149 = v143;
                      v149[1] = v145;
                      v149[2] = v144;
                      v498.__sig = (uint64_t)v149;
                      *(_QWORD *)v498.__opaque = v149 + 3;
                      v148 = v500;
                      if (v500 >= (char *)v501)
                      {
LABEL_223:
                        v500 = sub_239C52088(&v499, (uint64_t)&v498);
                        if (v498.__sig)
                          operator delete((void *)v498.__sig);
                        goto LABEL_216;
                      }
                    }
                    else
                    {
                      v146 = operator new(0x18uLL);
                      v147 = v146 + 3;
                      *(_QWORD *)&v498.__opaque[8] = v146 + 3;
                      *v146 = v143;
                      v146[1] = v144;
                      v146[2] = v145;
                      v498.__sig = (uint64_t)v146;
                      *(_QWORD *)v498.__opaque = v146 + 3;
                      v148 = v500;
                      if (v500 >= (char *)v501)
                        goto LABEL_223;
                    }
                    *(_OWORD *)v148 = *(_OWORD *)&v498.__sig;
                    *((_QWORD *)v148 + 2) = v147;
                    v500 = v148 + 24;
                  }
                }
LABEL_216:
                v142 += 16;
                if (!--v141)
                  goto LABEL_212;
              }
            }
            v134 = __p.f64[0];
LABEL_228:
            v150 = 0xAAAAAAAAAAAAAAABLL * ((v500 - v499) >> 3);
          }
          if (v134 != 0.0)
          {
            __p.f64[1] = v134;
            operator delete(*(void **)&v134);
          }
          if (v150)
          {
            v151 = (unint64_t *)operator new(0x18uLL);
            v152 = 0;
            *v151 = 0;
            v151[1] = 0;
            *(_OWORD *)v477 = 0u;
            *(_OWORD *)v478 = 0u;
            v479 = 1065353216;
            __asm { FMOV            V0.2D, #-1.0 }
            v465 = _Q0;
            v449 = v151;
            v151[2] = 0;
            do
            {
              v492 = 0;
              v490 = 0;
              v491 = 0;
              v157 = *(_BYTE **)&v499[v152];
              v156 = *(_BYTE **)&v499[v152 + 8];
              v158 = v156 - v157;
              if (v156 == v157)
              {
                v160 = 0;
                v159 = 0;
              }
              else
              {
                if (v158 < 0)
                  sub_2394189F8();
                v159 = (uint64_t **)operator new(v156 - v157);
                v160 = (uint64_t *)&v159[v158 >> 3];
                v490 = v159;
                v492 = v160;
                memcpy(v159, v157, v158);
                v491 = v160;
              }
              std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
              if ((char *)v160 - (char *)v159 != 24)
              {
                sub_239A444D4((uint64_t)"unknown file", 308, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              v161 = (unint64_t)*v159;
              v162 = (unint64_t)v159[1];
              v163 = (unint64_t)v159[2];
              v164 = sub_239C50CE4(v468, (unint64_t)*v159, v162);
              v165 = sub_239C50CE4(v468, v162, v163);
              v166 = sub_239C50CE4(v468, v161, v163);
              v167.f64[0] = (float64_t)v166[7];
              v168 = *(float64x2_t *)(v166 + 5);
              _Q16.i64[0] = v166[10];
              _Q17 = *((float64x2_t *)v166 + 4);
              _Q6.i64[0] = v166[13];
              _Q5 = *(float64x2_t *)(v166 + 11);
              v173 = vzip1q_s64((int64x2_t)v168, (int64x2_t)_Q17);
              v458 = *((double *)v166 + 6);
              v460 = *((double *)v166 + 9);
              v456 = *((double *)v166 + 12);
              *(double *)&v494.__opaque[16] = v456;
              v450 = v173;
              v451 = (int8x16_t)vzip1q_s64((int64x2_t)v167, _Q16);
              __p = (float64x2_t)v173;
              v448 = vzip2q_s64((int64x2_t)v168, (int64x2_t)_Q17);
              *(int64x2_t *)v494.__opaque = v448;
              v494.__sig = *(_QWORD *)&_Q5.f64[0];
              *(_QWORD *)&v494.__opaque[40] = _Q6.i64[0];
              *(int8x16_t *)&v494.__opaque[24] = v451;
              v174 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, v168.f64[0]), _Q17, _Q17.f64[0]), _Q5, _Q5.f64[0]);
              *(double *)v173.i64 = vmlad_n_f64(vmlad_n_f64(v167.f64[0] * v168.f64[0], *(double *)_Q16.i64, _Q17.f64[0]), *(double *)_Q6.i64, _Q5.f64[0]);
              v175 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v168, v168, 1), _Q17, _Q17, 1), _Q5, _Q5, 1);
              __asm
              {
                FMLA            D3, D16, V17.D[1]
                FMLA            D3, D6, V5.D[1]
              }
              v452 = _Q17.f64[0];
              v453 = v168.f64[0];
              v462 = (int8x16_t)_Q5;
              v464 = _Q6;
              v178 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, v167.f64[0]), _Q17, *(double *)_Q16.i64), _Q5, *(double *)_Q6.i64);
              v454 = *(double *)_Q16.i64;
              v455 = v167.f64[0];
              v179 = vmulq_f64(v167, v167);
              v179.f64[0] = v179.f64[0]
                          + *(double *)_Q16.i64 * *(double *)_Q16.i64
                          + *(double *)_Q6.i64 * *(double *)_Q6.i64;
              v180 = (int64x2_t)vaddq_f64(v175, (float64x2_t)xmmword_239EC6830);
              v181 = vabsq_f64((float64x2_t)vzip1q_s64(v173, v180));
              v182 = vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v180, _Q3, 8uLL));
              v183 = vabsq_f64(v178);
              *(_QWORD *)&v178.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v179, v465));
              v178.f64[1] = NAN;
              v184 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v174, (float64x2_t)xmmword_239EC6820)), v178), v182), vmaxnmq_f64(v181, v183)));
              if (v184 > 0.0001
                || fabs(*(double *)v462.i64 * (*(double *)_Q16.i64 * v458 - v460 * v167.f64[0])+ v453 * (*(double *)_Q6.i64 * v460 - v456 * *(double *)_Q16.i64)- _Q17.f64[0] * (*(double *)_Q6.i64 * v458 - v456 * v167.f64[0])+ -1.0) > 0.0001)
              {
                if (v184 > 0.1
                  || fabs(*(double *)v462.i64 * (*(double *)_Q16.i64 * v458 - v460 * v167.f64[0])+ v453 * (*(double *)_Q6.i64 * v460 - v456 * *(double *)_Q16.i64)- _Q17.f64[0] * (*(double *)_Q6.i64 * v458 - v456 * v167.f64[0])+ -1.0) > 0.1)
                {
                  sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                sub_239516070(&__p);
              }
              v185 = *(_OWORD *)(v164 + 7);
              *(_OWORD *)&v498.__sig = *(_OWORD *)(v164 + 5);
              *(_OWORD *)&v498.__opaque[8] = v185;
              *(_QWORD *)&v498.__opaque[56] = v164[13];
              v186 = *(_OWORD *)(v164 + 11);
              *(_OWORD *)&v498.__opaque[24] = *(_OWORD *)(v164 + 9);
              *(_OWORD *)&v498.__opaque[40] = v186;
              v187 = *(float64x2_t *)&v498.__sig;
              v188 = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u64[0];
              *(_QWORD *)&v189 = vextq_s8(*(int8x16_t *)&v498.__opaque[16], *(int8x16_t *)&v498.__opaque[16], 8uLL).u64[0];
              _Q5 = *(float64x2_t *)&v498.__opaque[40];
              *(_QWORD *)&v191 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
              v192 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v498.__sig, *(int64x2_t *)&v498.__opaque[16]);
              v193 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v498.__sig, *(int64x2_t *)&v498.__opaque[16]);
              *(_QWORD *)&_Q20.f64[0] = v185;
              _Q20.f64[1] = *(float64_t *)&v498.__opaque[32];
              v195 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, *(double *)&v498.__sig), v193, *(float64x2_t *)&v498.__sig, 1), _Q20, *(double *)&v185);
              _Q21 = (int64x2_t)vmulq_f64(*(float64x2_t *)&v498.__opaque[40], *(float64x2_t *)&v498.__sig);
              _D22 = *(_QWORD *)v498.__opaque;
              __asm { FMLA            D21, D22, V5.D[1] }
              *(double *)_Q21.i64 = *(double *)_Q21.i64 + *(double *)&v498.__opaque[56] * *(double *)&v185;
              v198 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, *((double *)&v185 + 1)), v193, *(float64x2_t *)&v498.__opaque[16], 1), _Q20, *(double *)&v498.__opaque[32]);
              _Q23 = (int8x16_t)vmulq_f64(*(float64x2_t *)&v498.__opaque[40], *(float64x2_t *)&v498.__opaque[16]);
              _D24 = *(_QWORD *)&v498.__opaque[24];
              __asm { FMLA            D23, D24, V5.D[1] }
              *(double *)_Q23.i64 = *(double *)_Q23.i64 + *(double *)&v498.__opaque[56] * *(double *)&v498.__opaque[32];
              v201 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, *(double *)&v498.__opaque[40]), v193, *(float64x2_t *)&v498.__opaque[40], 1), _Q20, *(double *)&v498.__opaque[56]);
              _Q19 = vmulq_f64(_Q5, _Q5);
              _Q20.f64[0] = *(float64_t *)&v498.__opaque[48];
              __asm { FMLA            D19, D20, V5.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + *(double *)&v498.__opaque[56] * *(double *)&v498.__opaque[56];
              v203 = (int64x2_t)vaddq_f64(v198, (float64x2_t)xmmword_239EC6830);
              *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v465));
              _Q19.f64[1] = NAN;
              v204 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v195, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v203, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v203)), vabsq_f64(v201))));
              v205 = -*(double *)&v498.__opaque[32];
              if (v204 > 0.0001
                || (*(_QWORD *)&v206.f64[0] = v498.__sig,
                    *(_QWORD *)&v206.f64[1] = v188,
                    v207.f64[0] = v191,
                    v207.f64[1] = *(float64_t *)&v498.__opaque[40],
                    v208.f64[0] = v189,
                    v208.f64[1] = *(float64_t *)&v498.__opaque[16],
                    v209 = vmulq_f64(v206, vmlaq_n_f64(vmulq_n_f64(v207, v205), v208, *(double *)&v498.__opaque[56])),
                    fabs(*(double *)&v498.__opaque[8]* (v191 * *(double *)&v498.__opaque[16] - v189 * *(double *)&v498.__opaque[40])+ vsubq_f64(v209, (float64x2_t)vdupq_laneq_s64((int64x2_t)v209, 1)).f64[0]+ -1.0) > 0.0001))
              {
                if (v204 > 0.1
                  || (*(_QWORD *)&v187.f64[1] = v188,
                      v210.f64[0] = v191,
                      v210.f64[1] = *(float64_t *)&v498.__opaque[40],
                      v211 = vmulq_n_f64(v210, v205),
                      v212.f64[0] = v189,
                      v212.f64[1] = *(float64_t *)&v498.__opaque[16],
                      v213 = vmulq_f64(v187, vmlaq_n_f64(v211, v212, *(double *)&v498.__opaque[56])),
                      fabs(*(double *)&v498.__opaque[8]* (v191 * *(double *)&v498.__opaque[16] - v189 * *(double *)&v498.__opaque[40])+ vsubq_f64(v213, (float64x2_t)vdupq_laneq_s64((int64x2_t)v213, 1)).f64[0]+ -1.0) > 0.1))
                {
                  sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                sub_239516070((float64x2_t *)&v498);
              }
              v214 = *(_OWORD *)(v165 + 7);
              *(_OWORD *)v473 = *(_OWORD *)(v165 + 5);
              *(_OWORD *)v474 = v214;
              v476 = *((double *)v165 + 13);
              v215 = *(int8x16_t *)(v165 + 11);
              *(_OWORD *)&v474[16] = *(_OWORD *)(v165 + 9);
              v475 = (float64x2_t)v215;
              v215.i64[0] = v214;
              v216 = *(float64x2_t *)v473;
              *(_QWORD *)&v217 = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u64[0];
              v218 = *(double *)&v474[24];
              v219 = *(int8x16_t *)&v474[8];
              v220.i64[0] = vextq_s8(v219, v219, 8uLL).u64[0];
              v221 = v476;
              _Q2 = v475;
              *(_QWORD *)&v223 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
              v224 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v473, *(int64x2_t *)&v474[8]);
              v225 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v473, *(int64x2_t *)&v474[8]);
              _Q20.f64[0] = *(float64_t *)v474;
              _Q20.f64[1] = *(float64_t *)&v474[24];
              v227 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, *(double *)v473), v225, *(float64x2_t *)v473, 1), _Q20, *(double *)v474);
              _Q21 = (int64x2_t)vmulq_f64(v475, *(float64x2_t *)v473);
              _D22 = v473[1];
              __asm { FMLA            D21, D22, V2.D[1] }
              *(double *)_Q21.i64 = *(double *)_Q21.i64 + v476 * *(double *)v474;
              v230 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, *(double *)&v474[8]), v225, *(float64x2_t *)&v474[8], 1), _Q20, *(double *)&v474[24]);
              _Q23 = (int8x16_t)vmulq_f64(v475, *(float64x2_t *)&v474[8]);
              _D24 = *(_QWORD *)&v474[16];
              __asm { FMLA            D23, D24, V2.D[1] }
              *(double *)_Q23.i64 = *(double *)_Q23.i64 + v476 * *(double *)&v474[24];
              v233 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v475.f64[0]), v225, v475, 1), _Q20, v476);
              _Q19 = vmulq_f64(_Q2, _Q2);
              _Q20.f64[0] = v475.f64[1];
              __asm { FMLA            D19, D20, V2.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + v221 * v221;
              v235 = (int64x2_t)vaddq_f64(v230, (float64x2_t)xmmword_239EC6830);
              *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v465));
              _Q19.f64[1] = NAN;
              v236 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v227, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v235, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v235)), vabsq_f64(v233))));
              v237 = -*(double *)&v474[24];
              if (v236 > 0.0001)
                goto LABEL_512;
              *(void **)&v238.f64[0] = v473[0];
              v238.f64[1] = v217;
              v239.f64[0] = v223;
              v239.f64[1] = v475.f64[0];
              *(_QWORD *)&v240.f64[0] = v220.i64[0];
              v240.f64[1] = *(float64_t *)&v474[8];
              v241 = vmulq_f64(v238, vmlaq_n_f64(vmulq_n_f64(v239, v237), v240, v476));
              _Q19 = (int64x2_t)vsubq_f64(v241, (float64x2_t)vdupq_laneq_s64((int64x2_t)v241, 1));
              if (fabs(*(double *)v474 * (v223 * *(double *)&v474[8] - *(double *)v220.i64 * v475.f64[0])+ *(double *)_Q19.i64+ -1.0) > 0.0001)
              {
LABEL_512:
                if (v236 > 0.1
                  || (v216.f64[1] = v217,
                      v243.f64[0] = v223,
                      v243.f64[1] = v475.f64[0],
                      v244 = vmulq_n_f64(v243, v237),
                      *(_QWORD *)&v245.f64[0] = v220.i64[0],
                      v245.f64[1] = *(float64_t *)&v474[8],
                      v246 = vmulq_f64(v216, vmlaq_n_f64(v244, v245, v476)),
                      fabs(*(double *)v474 * (v223 * *(double *)&v474[8] - *(double *)v220.i64 * v475.f64[0])+ vsubq_f64(v246, (float64x2_t)vdupq_laneq_s64((int64x2_t)v246, 1)).f64[0]+ -1.0) > 0.1))
                {
                  sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                sub_239516070((float64x2_t *)v473);
                v221 = v476;
                v220 = *(int8x16_t *)&v474[16];
                _Q2 = v475;
                v216 = *(float64x2_t *)v473;
                v215 = *(int8x16_t *)v474;
                *(_QWORD *)&v223 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
                *(_QWORD *)&v218 = vextq_s8(v220, v220, 8uLL).u64[0];
                v219.i64[0] = vextq_s8(v215, v215, 8uLL).u64[0];
                *(_QWORD *)&v217 = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u64[0];
              }
              v247 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v498.__sig, v216.f64[0]), *(float64x2_t *)&v498.__opaque[16], v217), *(float64x2_t *)&v498.__opaque[40], *(double *)v215.i64);
              v248 = *(double *)&v498.__opaque[8] * v216.f64[0]
                   + *(double *)&v498.__opaque[32] * v217
                   + *(double *)&v498.__opaque[56] * *(double *)v215.i64;
              _Q5 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v498.__sig, *(double *)v219.i64), *(float64x2_t *)&v498.__opaque[16], *(double *)v220.i64), *(float64x2_t *)&v498.__opaque[40], v218);
              v250 = *(double *)&v498.__opaque[8] * *(double *)v219.i64
                   + *(double *)&v498.__opaque[32] * *(double *)v220.i64
                   + *(double *)&v498.__opaque[56] * v218;
              _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v498.__sig, _Q2.f64[0]), *(float64x2_t *)&v498.__opaque[16], v223), *(float64x2_t *)&v498.__opaque[40], v221);
              v252 = *(double *)&v498.__opaque[8] * _Q2.f64[0]
                   + *(double *)&v498.__opaque[32] * v223
                   + *(double *)&v498.__opaque[56] * v221;
              *(float64x2_t *)&v498.__sig = v247;
              *(double *)&v498.__opaque[8] = v248;
              *(double *)&v498.__opaque[32] = v250;
              *(float64x2_t *)&v498.__opaque[16] = _Q5;
              *(double *)&v498.__opaque[56] = v252;
              *(float64x2_t *)&v498.__opaque[40] = _Q3;
              v253 = (float64x2_t)vzip1q_s64((int64x2_t)v247, (int64x2_t)_Q5);
              v254 = (float64x2_t)vzip2q_s64((int64x2_t)v247, (int64x2_t)_Q5);
              _Q18.f64[0] = v248;
              _Q18.f64[1] = v250;
              v256 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v253, v247.f64[0]), v254, v247, 1), _Q18, v248);
              _Q19.i64[0] = *(_QWORD *)&v247.f64[1];
              __asm { FMLA            D2, D19, V3.D[1] }
              *(double *)_Q19.i64 = _D2 + v252 * v248;
              v258 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v253, _Q5.f64[0]), v254, _Q5, 1), _Q18, v250);
              _Q21 = (int8x16_t)vmulq_f64(_Q3, _Q5);
              _D2 = _Q5.f64[1];
              __asm { FMLA            D21, D2, V3.D[1] }
              *(double *)_Q21.i64 = *(double *)_Q21.i64 + v252 * v250;
              v261 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v253, _Q3.f64[0]), v254, _Q3, 1), _Q18, v252);
              _Q16 = vmulq_f64(_Q3, _Q3);
              _Q18.f64[0] = _Q3.f64[1];
              __asm { FMLA            D16, D18, V3.D[1] }
              _Q16.f64[0] = _Q16.f64[0] + v252 * v252;
              v263 = (int64x2_t)vaddq_f64(v258, (float64x2_t)xmmword_239EC6830);
              *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q16, v465));
              _Q16.f64[1] = NAN;
              if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v256, (float64x2_t)xmmword_239EC6820)), _Q16), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v263, _Q21, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q19, v263)), vabsq_f64(v261)))) > 0.0001)goto LABEL_257;
              v264 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL), vmlaq_n_f64(vmulq_n_f64(_Q3, -v250), _Q5, v252));
              __asm { FMLA            D2, D5, V3.D[1] }
              if (fabs(v248 * _D2 + vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v264, 1), v264).f64[0] + -1.0) > 0.0001)
LABEL_257:
                sub_239516070((float64x2_t *)&v498);
              v266 = (int8x16_t)v450;
              v267 = vextq_s8(v266, v266, 8uLL).u64[0];
              v268 = (int8x16_t)v448;
              v269 = vextq_s8(v451, v451, 8uLL).u64[0];
              v266.i64[1] = v267;
              *(_QWORD *)v474 = v462.i64[0];
              *(int8x16_t *)v473 = v266;
              *(_QWORD *)&v474[24] = vextq_s8(v462, v462, 8uLL).u64[0];
              v268.i64[1] = vextq_s8(v268, v268, 8uLL).u64[0];
              *(int8x16_t *)&v474[8] = v268;
              v476 = *(double *)v464.i64;
              *(_QWORD *)&v270.f64[0] = v451.i64[0];
              *(_QWORD *)&v270.f64[1] = v269;
              v475 = v270;
              if (v184 > 0.0001
                || fabs(*(double *)v462.i64 * (v454 * v458 - v460 * v455)+ v453 * (*(double *)v464.i64 * v460 - v456 * v454)- v452 * (*(double *)v464.i64 * v458 - v456 * v455)+ -1.0) > 0.0001)
              {
                if (v184 > 0.1
                  || fabs(*(double *)v462.i64 * (v454 * v458 - v460 * v455)+ v453 * (*(double *)v464.i64 * v460 - v456 * v454)- v452 * (*(double *)v464.i64 * v458 - v456 * v455)+ -1.0) > 0.1)
                {
                  sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                sub_239516070((float64x2_t *)v473);
                *(double *)_Q19.i64 = v476;
                v273 = *(int8x16_t *)&v474[16];
                v276 = (int8x16_t)v475;
                v275 = *(int8x16_t *)v473;
                v271 = *(int8x16_t *)v474;
                v269 = vextq_s8(v276, v276, 8uLL).u64[0];
                *(_QWORD *)&v277 = vextq_s8(v273, v273, 8uLL).u64[0];
                *(_QWORD *)&v274 = vextq_s8(v271, v271, 8uLL).u64[0];
                v267 = vextq_s8(v275, v275, 8uLL).u64[0];
              }
              else
              {
                v271.i64[0] = v462.i64[0];
                _Q19 = v464;
                v274 = v458;
                *(double *)v273.i64 = v460;
                v275.i64[0] = v450.i64[0];
                v276.i64[0] = v451.i64[0];
                v277 = v456;
              }
              v278 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v498.__sig, *(double *)v275.i64), *(float64x2_t *)&v498.__opaque[16], *(double *)&v267), *(float64x2_t *)&v498.__opaque[40], *(double *)v271.i64);
              v279 = *(double *)&v498.__opaque[8] * *(double *)v275.i64
                   + *(double *)&v498.__opaque[32] * *(double *)&v267
                   + *(double *)&v498.__opaque[56] * *(double *)v271.i64;
              _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v498.__sig, v274), *(float64x2_t *)&v498.__opaque[16], *(double *)v273.i64), *(float64x2_t *)&v498.__opaque[40], v277);
              v281 = *(double *)&v498.__opaque[8] * v274
                   + *(double *)&v498.__opaque[32] * *(double *)v273.i64
                   + *(double *)&v498.__opaque[56] * v277;
              _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v498.__sig, *(double *)v276.i64), *(float64x2_t *)&v498.__opaque[16], *(double *)&v269), *(float64x2_t *)&v498.__opaque[40], *(double *)_Q19.i64);
              v283 = *(double *)&v498.__opaque[8] * *(double *)v276.i64
                   + *(double *)&v498.__opaque[32] * *(double *)&v269
                   + *(double *)&v498.__opaque[56] * *(double *)_Q19.i64;
              *(float64x2_t *)&v498.__sig = v278;
              *(double *)&v498.__opaque[8] = v279;
              *(double *)&v498.__opaque[32] = v281;
              *(float64x2_t *)&v498.__opaque[16] = _Q2;
              *(double *)&v498.__opaque[56] = v283;
              *(float64x2_t *)&v498.__opaque[40] = _Q4;
              v284 = (float64x2_t)vzip1q_s64((int64x2_t)v278, (int64x2_t)_Q2);
              v285 = (float64x2_t)vzip2q_s64((int64x2_t)v278, (int64x2_t)_Q2);
              _Q18.f64[0] = v279;
              _Q18.f64[1] = v281;
              v287 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v284, v278.f64[0]), v285, v278, 1), _Q18, v279);
              _Q19.i64[0] = *(_QWORD *)&v278.f64[1];
              __asm { FMLA            D6, D19, V4.D[1] }
              *(double *)_Q19.i64 = _D6 + v283 * v279;
              v289 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v284, _Q2.f64[0]), v285, _Q2, 1), _Q18, v281);
              _Q21 = (int8x16_t)vmulq_f64(_Q4, _Q2);
              _D6 = _Q2.f64[1];
              __asm { FMLA            D21, D6, V4.D[1] }
              *(double *)_Q21.i64 = *(double *)_Q21.i64 + v283 * v281;
              v292 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v284, _Q4.f64[0]), v285, _Q4, 1), _Q18, v283);
              _Q17 = vmulq_f64(_Q4, _Q4);
              _Q18.f64[0] = _Q4.f64[1];
              __asm { FMLA            D17, D18, V4.D[1] }
              _Q17.f64[0] = _Q17.f64[0] + v283 * v283;
              v294 = (int64x2_t)vaddq_f64(v289, (float64x2_t)xmmword_239EC6830);
              *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q17, v465));
              _Q17.f64[1] = NAN;
              if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v287, (float64x2_t)xmmword_239EC6820)), _Q17), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v294, _Q21, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q19, v294)), vabsq_f64(v292)))) > 0.0001)goto LABEL_266;
              v295 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL), vmlaq_n_f64(vmulq_n_f64(_Q4, -v281), _Q2, v283));
              __asm { FMLA            D3, D2, V4.D[1] }
              if (fabs(v279 * _D3 + vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v295, 1), v295).f64[0] + -1.0) > 0.0001)
LABEL_266:
                sub_239516070((float64x2_t *)&v498);
              v473[0] = 0;
              v473[1] = 0;
              *(_QWORD *)v474 = 0;
              sub_239458B60((float64x2_t *)&v498, (double *)v473);
              _V1.D[1] = v473[1];
              _D3 = v473[1];
              __asm { FMLA            D2, D3, V1.D[1] }
              v300 = fabs(sqrt(_D2 + *(double *)v474 * *(double *)v474) / 3.14159265 * 180.0);
              if (v300 <= 180.0)
                v301 = v300;
              else
                v301 = 180.0;
              *v449 = v161;
              v449[1] = v162;
              v449[2] = v163;
              std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
              v303 = *v449;
              v302 = v449[1];
              v304 = v449[2];
              v305 = v477[0];
              v306 = v477[1];
              if (sub_239C50E20((uint64_t)v477[0], (unint64_t)v477[1], *v449, v302))
              {
                v307 = *(double *)sub_239C50FC8((uint64_t)v305, (unint64_t)v306, v303, v302);
                v308 = (double *)sub_239C50FC8((uint64_t)v477[0], (unint64_t)v477[1], v303, v302);
                if (v301 >= v307)
                  v309 = v307;
                else
                  v309 = v301;
                *v308 = v309;
              }
              else
              {
                sub_239C511BC((uint64_t)v477, v303, v302, v301);
              }
              v310 = v477[0];
              v311 = v477[1];
              if (sub_239C50E20((uint64_t)v477[0], (unint64_t)v477[1], v303, v304))
              {
                v312 = *(double *)sub_239C50FC8((uint64_t)v310, (unint64_t)v311, v303, v304);
                v313 = (double *)sub_239C50FC8((uint64_t)v477[0], (unint64_t)v477[1], v303, v304);
                if (v301 >= v312)
                  v314 = v312;
                else
                  v314 = v301;
                *v313 = v314;
              }
              else
              {
                sub_239C511BC((uint64_t)v477, v303, v304, v301);
              }
              v315 = v477[0];
              v316 = v477[1];
              if (sub_239C50E20((uint64_t)v477[0], (unint64_t)v477[1], v302, v304))
              {
                v317 = *(double *)sub_239C50FC8((uint64_t)v315, (unint64_t)v316, v302, v304);
                v318 = (double *)sub_239C50FC8((uint64_t)v477[0], (unint64_t)v477[1], v302, v304);
                if (v301 >= v317)
                  v319 = v317;
                else
                  v319 = v301;
                *v318 = v319;
              }
              else
              {
                sub_239C511BC((uint64_t)v477, v302, v304, v301);
              }
              operator delete(v159);
              v152 += 24;
              --v150;
            }
            while (v150);
            __p = 0u;
            *(_OWORD *)&v494.__sig = 0u;
            *(_DWORD *)&v494.__opaque[8] = 1065353216;
            memset(&v498, 0, 32);
            *(_DWORD *)&v498.__opaque[24] = 1065353216;
            v473[0] = 0;
            v473[1] = 0;
            *(_QWORD *)v474 = 0;
            v321 = v469[32];
            v320 = v469[33];
            v487 = 0;
            v322 = v320 - v321;
            if (v322)
            {
              v323 = 0;
              v324 = v322 >> 3;
              do
              {
                v473[1] = v473[0];
                sub_239BF0570(v468, (unint64_t)v323, (uint64_t)v473);
                v490 = (uint64_t **)&v487;
                v325 = ((char *)v473[1] - (char *)v473[0]) >> 3;
                sub_2395193BC((uint64_t)&__p, (unint64_t *)&v487, (uint64_t)&unk_239EC6E98, &v490)[3] = v325;
                v490 = (uint64_t **)&v487;
                v326 = sub_2395193BC((uint64_t)&v498, (unint64_t *)&v487, (uint64_t)&unk_239EC6E98, &v490);
                v327 = (unint64_t)((double)(unint64_t)v325 * 0.8);
                if (v327 <= 5)
                  v327 = 5;
                v326[3] = v327;
                v323 = (char *)v487 + 1;
                v487 = v323;
              }
              while ((unint64_t)v323 < v324);
            }
            v328 = &v491;
            v492 = 0;
            v491 = 0;
            v490 = &v491;
            v488 = 0;
            v487 = 0;
            v489 = 0;
            v329 = v478[0];
            if (v478[0])
            {
              v330 = 0;
              v331 = 0;
              v332 = 0;
              do
              {
                v333 = (_QWORD *)v329[5];
                if (v333)
                {
                  v334 = v331;
                  do
                  {
                    v335 = v329[2];
                    v336 = v333[2];
                    if (v332 < v330)
                    {
                      *(_QWORD *)v332 = v335;
                      *((_QWORD *)v332 + 1) = v336;
                      v332 += 16;
                    }
                    else
                    {
                      v337 = (v332 - v334) >> 4;
                      v338 = v337 + 1;
                      if ((unint64_t)(v337 + 1) >> 60)
                        sub_2394189F8();
                      if ((v330 - v334) >> 3 > v338)
                        v338 = (v330 - v334) >> 3;
                      if ((unint64_t)(v330 - v334) >= 0x7FFFFFFFFFFFFFF0)
                        v339 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v339 = v338;
                      if (v339)
                      {
                        if (v339 >> 60)
                          sub_239418A80();
                        v340 = (char *)operator new(16 * v339);
                      }
                      else
                      {
                        v340 = 0;
                      }
                      v341 = &v340[16 * v337];
                      *(_QWORD *)v341 = v335;
                      *((_QWORD *)v341 + 1) = v336;
                      if (v332 == v334)
                      {
                        v331 = &v340[16 * v337];
                      }
                      else
                      {
                        v342 = &v340[16 * v337];
                        do
                        {
                          v331 = v342 - 16;
                          *((_OWORD *)v342 - 1) = *((_OWORD *)v332 - 1);
                          v332 -= 16;
                          v342 -= 16;
                        }
                        while (v332 != v334);
                      }
                      v330 = &v340[16 * v339];
                      v332 = v341 + 16;
                      v487 = v331;
                      v489 = v330;
                      if (v334)
                        operator delete(v334);
                      v334 = v331;
                    }
                    v488 = v332;
                    v333 = (_QWORD *)*v333;
                  }
                  while (v333);
                }
                v329 = (_QWORD *)*v329;
              }
              while (v329);
              v343 = (char *)v487;
              if (v332 != v487)
              {
                v344 = 0;
                if ((unint64_t)((v332 - (_BYTE *)v487) >> 4) <= 1)
                  v345 = 1;
                else
                  v345 = (v332 - (_BYTE *)v487) >> 4;
                do
                {
                  v346 = (unint64_t *)&v343[16 * v344];
                  v347 = *(double *)sub_239C50FC8((uint64_t)v477[0], (unint64_t)v477[1], *v346, v346[1]);
                  v348 = v491;
                  v349 = &v491;
                  v350 = &v491;
                  if (v491)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v350 = (uint64_t **)v348;
                        v351 = *((double *)v348 + 4);
                        if (v347 >= v351)
                          break;
                        v348 = (uint64_t *)*v348;
                        v349 = v350;
                        if (!*v350)
                          goto LABEL_331;
                      }
                      if (v351 >= v347)
                        break;
                      v348 = (uint64_t *)v348[1];
                      if (!v348)
                      {
                        v349 = v350 + 1;
                        goto LABEL_331;
                      }
                    }
                    v352 = (char *)v348;
                  }
                  else
                  {
LABEL_331:
                    v352 = (char *)operator new(0x38uLL);
                    *((double *)v352 + 4) = v347;
                    *((_QWORD *)v352 + 5) = 0;
                    *((_QWORD *)v352 + 6) = 0;
                    *(_QWORD *)v352 = 0;
                    *((_QWORD *)v352 + 1) = 0;
                    *((_QWORD *)v352 + 2) = v350;
                    *v349 = (uint64_t *)v352;
                    v353 = (uint64_t *)v352;
                    if (*v490)
                    {
                      v490 = (uint64_t **)*v490;
                      v353 = *v349;
                    }
                    sub_2394213B8(v491, v353);
                    v492 = (uint64_t *)((char *)v492 + 1);
                  }
                  *(_OWORD *)(v352 + 40) = *(_OWORD *)v346;
                  ++v344;
                }
                while (v344 != v345);
              }
            }
            else
            {
              v343 = 0;
            }
            if (&v491 != v490)
            {
              do
              {
                v354 = *v328;
                v355 = *v328;
                v356 = v328;
                if (*v328)
                {
                  do
                  {
                    v357 = v355;
                    v355 = (uint64_t *)v355[1];
                  }
                  while (v355);
                }
                else
                {
                  do
                  {
                    v357 = v356[2];
                    _ZF = *v357 == (_QWORD)v356;
                    v356 = (uint64_t **)v357;
                  }
                  while (_ZF);
                }
                v358 = v328;
                if (v354)
                {
                  do
                  {
                    v359 = v354;
                    v354 = (uint64_t *)v354[1];
                  }
                  while (v354);
                }
                else
                {
                  do
                  {
                    v359 = v358[2];
                    _ZF = *v359 == (_QWORD)v358;
                    v358 = (uint64_t **)v359;
                  }
                  while (_ZF);
                }
                if (*((double *)v357 + 4) <= 18.0)
                  break;
                v360 = (void *)v359[6];
                v484 = (void *)v359[5];
                v481 = v360;
                v487 = &v484;
                v361 = sub_2395193BC((uint64_t)&__p, (unint64_t *)&v484, (uint64_t)&unk_239EC6E98, (_QWORD **)&v487)[3];
                v487 = &v484;
                if (v361 > sub_2395193BC((uint64_t)&v498, (unint64_t *)&v484, (uint64_t)&unk_239EC6E98, (_QWORD **)&v487)[3])
                {
                  v487 = &v481;
                  v362 = sub_2395193BC((uint64_t)&__p, (unint64_t *)&v481, (uint64_t)&unk_239EC6E98, (_QWORD **)&v487)[3];
                  v487 = &v481;
                  if (v362 > sub_2395193BC((uint64_t)&v498, (unint64_t *)&v481, (uint64_t)&unk_239EC6E98, (_QWORD **)&v487)[3])
                  {
                    v363 = (unint64_t)v484;
                    v364 = (unint64_t)v481;
                    if (sub_239AF2B88(v468, (unint64_t)v484, (unint64_t)v481))
                    {
                      sub_239C51B24((uint64_t *)(*v468 + 40 * v363), v364);
                      sub_239C51B24((uint64_t *)(*v468 + 40 * v364), v363);
                    }
                    v487 = &v484;
                    v365 = sub_2395193BC((uint64_t)&__p, (unint64_t *)&v484, (uint64_t)&unk_239EC6E98, (_QWORD **)&v487);
                    --v365[3];
                    v487 = &v481;
                    v366 = sub_2395193BC((uint64_t)&__p, (unint64_t *)&v481, (uint64_t)&unk_239EC6E98, (_QWORD **)&v487);
                    --v366[3];
                  }
                }
                v367 = *v328;
                if (*v328)
                {
                  do
                  {
                    v368 = (uint64_t **)v367;
                    v367 = (uint64_t *)v367[1];
                  }
                  while (v367);
                }
                else
                {
                  do
                  {
                    v368 = (uint64_t **)v328[2];
                    _ZF = *v368 == (uint64_t *)v328;
                    v328 = v368;
                  }
                  while (_ZF);
                }
                v328 = v368;
              }
              while (v368 != v490);
            }
            if (v343)
              operator delete(v343);
            sub_239A61F08(v491);
            a2 = v445;
            v116 = (int8x8_t **)v446;
            if (v473[0])
            {
              v473[1] = v473[0];
              operator delete(v473[0]);
            }
            v369 = *(_QWORD **)&v498.__opaque[8];
            if (*(_QWORD *)&v498.__opaque[8])
            {
              do
              {
                v370 = (_QWORD *)*v369;
                operator delete(v369);
                v369 = v370;
              }
              while (v370);
            }
            sig = (void *)v498.__sig;
            v498.__sig = 0;
            if (sig)
              operator delete(sig);
            v372 = (_QWORD *)v494.__sig;
            if (v494.__sig)
            {
              do
              {
                v373 = (_QWORD *)*v372;
                operator delete(v372);
                v372 = v373;
              }
              while (v373);
            }
            v374 = __p.f64[0];
            __p.f64[0] = 0.0;
            if (v374 != 0.0)
              operator delete(*(void **)&v374);
            v375 = v478[0];
            if (v478[0])
            {
              do
              {
                v383 = (_QWORD *)*v375;
                v384 = (_QWORD *)v375[5];
                if (v384)
                {
                  do
                  {
                    v385 = (_QWORD *)*v384;
                    operator delete(v384);
                    v384 = v385;
                  }
                  while (v385);
                }
                v386 = (void *)v375[3];
                v375[3] = 0;
                if (v386)
                  operator delete(v386);
                operator delete(v375);
                v375 = v383;
              }
              while (v383);
            }
            v376 = v477[0];
            v477[0] = 0;
            if (v376)
              operator delete(v376);
            operator delete(v449);
          }
          v377 = v499;
          if (v499)
          {
            v378 = v500;
            v379 = v499;
            if (v500 != v499)
            {
              v380 = v500;
              do
              {
                v382 = (void *)*((_QWORD *)v380 - 3);
                v380 -= 24;
                v381 = v382;
                if (v382)
                {
                  *((_QWORD *)v378 - 2) = v381;
                  operator delete(v381);
                }
                v378 = v380;
              }
              while (v380 != v377);
              v379 = v499;
            }
            v500 = v377;
            operator delete(v379);
          }
          __p = 0uLL;
          v494.__sig = 0;
          sub_239C0B590(&(*v116)[29], (char **)&__p);
          v387 = __p.f64[0];
          if (*(_QWORD *)&__p.f64[0])
          {
            v388 = __p.f64[1];
            v389 = __p.f64[0];
            if (*(_QWORD *)&__p.f64[1] != *(_QWORD *)&__p.f64[0])
            {
              v390 = __p.f64[1];
              do
              {
                v392 = *(void **)(*(_QWORD *)&v390 - 24);
                *(_QWORD *)&v390 -= 24;
                v391 = v392;
                if (v392)
                {
                  *(_QWORD *)(*(_QWORD *)&v388 - 16) = v391;
                  operator delete(v391);
                }
                v388 = v390;
              }
              while (*(_QWORD *)&v390 != *(_QWORD *)&v387);
              v389 = __p.f64[0];
            }
            __p.f64[1] = v387;
            operator delete(*(void **)&v389);
          }
          v393 = v116[4];
          if (v393[53].i32[0])
            v394 = 2;
          else
            v394 = (unint64_t)v393[4];
          v395 = *v116;
          v396 = v393 + 83;
          if (!v393[77].i8[1])
          {
            sub_239C9CD44((uint64_t)v395, a2, v447, v394, &v393[83]);
            goto LABEL_484;
          }
          v397 = 0uLL;
          __p = 0u;
          *(_OWORD *)&v494.__sig = 0u;
          *(_DWORD *)&v494.__opaque[8] = 1065353216;
          memset(&v498, 0, 32);
          *(_DWORD *)&v498.__opaque[24] = 1065353216;
          v492 = 0;
          v491 = 0;
          v490 = &v491;
          v489 = 0;
          v488 = 0;
          v487 = &v488;
          if (v395[7])
          {
            v398 = v395[6];
            if (v398)
            {
              v399 = -1;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)&v398 + 16) > v399)
                  v399 = *(_DWORD *)(*(_QWORD *)&v398 + 16);
                v398 = **(int8x8_t **)&v398;
              }
              while (v398);
              if ((v399 & 0x80000000) == 0)
              {
                v499 = (char *)&off_250AFC978;
                v500 = (char *)&v490;
                v501 = &v487;
                v502 = &v499;
                v400 = (_DWORD *)*v395;
                v401 = (uint64_t)(*(_QWORD *)&v395[1] - *(_QWORD *)v395) >> 6;
                if (*(_QWORD *)&v395[1] != *v395 && *v400 == -1)
                {
                  LODWORD(v402) = 0;
                  while (1)
                  {
                    v402 = (v402 + 1);
                    if (v401 <= v402)
                      break;
                    if (v400[16 * v402] != -1)
                      goto LABEL_408;
                  }
                  LODWORD(v402) = -1;
                }
                else
                {
                  LODWORD(v402) = 0;
                }
LABEL_408:
                v403 = a2;
                if (v401 <= v402)
                  v404 = 0xFFFFFFFFLL;
                else
                  v404 = v402;
                if ((_DWORD)v404 != -1)
                {
                  v405 = v400[16 * v404];
LABEL_413:
                  v473[0] = (void *)v405;
                  if (!v502)
                    sub_2394172E0();
                  v406 = (*((uint64_t (**)(char **, void **, _DWORD *))*v502 + 6))(v502, v473, &v400[16 * v404 + 2]);
                  v397 = 0uLL;
                  if (v406)
                  {
                    v400 = (_DWORD *)*v395;
                    while (1)
                    {
                      v404 = (v404 + 1);
                      if ((uint64_t)(*(_QWORD *)&v395[1] - *(_QWORD *)v395) >> 6 <= v404)
                        break;
                      v405 = v400[16 * v404];
                      if ((_DWORD)v405 != -1)
                      {
                        if ((_DWORD)v404 != -1)
                          goto LABEL_413;
                        break;
                      }
                    }
                  }
                }
                v407 = v502;
                if (v502 == &v499)
                {
                  v408 = 4;
                  v407 = &v499;
                  a2 = v403;
                }
                else
                {
                  a2 = v403;
                  if (!v502)
                    goto LABEL_425;
                  v408 = 5;
                }
                (*(void (**)(__n128))&(*v407)[8 * v408])(v397);
                v397 = 0uLL;
              }
            }
          }
LABEL_425:
          *(__n128 *)v473 = v397;
          *(__n128 *)v474 = v397;
          *(_DWORD *)&v474[16] = 1065353216;
          v484 = 0;
          v485 = 0;
          v486 = 0;
          sub_239433C1C((uint64_t)v395, (uint64_t)&v484, 1);
          v409 = (void ***)v484;
          v410 = v485;
          if (v484 != v485)
          {
            v411 = (int8x8_t)v447[1];
            if (v411)
            {
LABEL_427:
              v412 = *v409;
              v413 = *v409;
              v414 = (uint8x8_t)vcnt_s8(v411);
              v414.i16[0] = vaddlv_u8(v414);
              if (v414.u32[0] > 1uLL)
              {
                v415 = *v409;
                if (*(_QWORD *)&v411 <= v413)
                  v415 = v413 % *(_QWORD *)&v411;
              }
              else
              {
                v415 = (v411.i32[0] - 1) & v413;
              }
              v416 = *(uint64_t ***)(*v447 + 8 * v415);
              if (v416)
              {
                v417 = *v416;
                if (v417)
                {
                  if (v414.u32[0] < 2uLL)
                  {
                    v418 = *(_QWORD *)&v411 - 1;
                    while (1)
                    {
                      v420 = v417[1];
                      if (v420 == v413)
                      {
                        if (*((_DWORD *)v417 + 4) == (_DWORD)v412)
                          goto LABEL_446;
                      }
                      else if ((v420 & v418) != v415)
                      {
                        goto LABEL_455;
                      }
                      v417 = (uint64_t *)*v417;
                      if (!v417)
                        goto LABEL_455;
                    }
                  }
                  do
                  {
                    v419 = v417[1];
                    if (v419 == v413)
                    {
                      if (*((_DWORD *)v417 + 4) == (_DWORD)v412)
                      {
LABEL_446:
                        v421 = a2;
                        v422 = (std::__shared_weak_count *)v417[4];
                        v477[0] = (void *)v417[3];
                        v477[1] = v422;
                        if (v422)
                        {
                          p_shared_owners = (unint64_t *)&v422->__shared_owners_;
                          do
                            v424 = __ldxr(p_shared_owners);
                          while (__stxr(v424 + 1, p_shared_owners));
                        }
                        v481 = 0;
                        v482 = 0;
                        sub_239CA0938(v412, v395, (uint64_t *)v473, v421, (int8x8_t **)v477, v396, (unsigned int **)&v481);
                        if (v422)
                        {
                          v425 = (unint64_t *)&v422->__shared_owners_;
                          do
                            v426 = __ldaxr(v425);
                          while (__stlxr(v426 - 1, v425));
                          if (!v426)
                          {
                            ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                            std::__shared_weak_count::__release_weak(v422);
                          }
                        }
                        a2 = v421;
                        break;
                      }
                    }
                    else
                    {
                      if (v419 >= *(_QWORD *)&v411)
                        v419 %= *(_QWORD *)&v411;
                      if (v419 != v415)
                        break;
                    }
                    v417 = (uint64_t *)*v417;
                  }
                  while (v417);
                }
              }
LABEL_455:
              while (++v409 != v410)
              {
                v411 = (int8x8_t)v447[1];
                if (v411)
                  goto LABEL_427;
              }
            }
          }
          v481 = 0;
          v482 = 0;
          v483 = 0;
          sub_2396C6A9C((uint64_t)v395, (uint64_t)&v481, 1);
          v427 = (unint64_t *)v481;
          v428 = v482;
          if (v481 != v482)
          {
            do
            {
              v480 = 0;
              v480 = *v427;
              *(_OWORD *)v477 = 0u;
              *(_OWORD *)v478 = 0u;
              v479 = 1065353216;
              sub_239C6DE64((char *)v395, v480, v477);
              if (v478[1] < (void *)v394)
                sub_239465800((uint64_t)&__p, &v480, &v480);
              v429 = v478[0];
              if (v478[0])
              {
                do
                {
                  v430 = (_QWORD *)*v429;
                  operator delete(v429);
                  v429 = v430;
                }
                while (v430);
              }
              v431 = v477[0];
              v477[0] = 0;
              if (v431)
                operator delete(v431);
              ++v427;
            }
            while (v427 != v428);
          }
          v432 = (_QWORD *)v494.__sig;
          if (v494.__sig)
          {
            do
            {
              sub_239CA0020(v395, v432[2]);
              v432 = (_QWORD *)*v432;
            }
            while (v432);
          }
          sub_239E253F4((uint64_t)v395, v394);
          if (v481)
          {
            v482 = (unint64_t *)v481;
            operator delete(v481);
          }
          if (v484)
          {
            v485 = (void ***)v484;
            operator delete(v484);
          }
          v433 = *(_QWORD **)v474;
          if (*(_QWORD *)v474)
          {
            do
            {
              v440 = v433;
              v433 = (_QWORD *)*v433;
              v441 = (std::__shared_weak_count *)v440[4];
              if (v441)
              {
                v442 = (unint64_t *)&v441->__shared_owners_;
                do
                  v443 = __ldaxr(v442);
                while (__stlxr(v443 - 1, v442));
                if (!v443)
                {
                  ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                  std::__shared_weak_count::__release_weak(v441);
                }
              }
              operator delete(v440);
            }
            while (v433);
          }
          v434 = v473[0];
          v473[0] = 0;
          if (v434)
            operator delete(v434);
          sub_239A61F08(v488);
          sub_239A61F08(v491);
          v435 = *(_QWORD **)&v498.__opaque[8];
          if (*(_QWORD *)&v498.__opaque[8])
          {
            do
            {
              v436 = (_QWORD *)*v435;
              operator delete(v435);
              v435 = v436;
            }
            while (v436);
          }
          if (v498.__sig)
            operator delete((void *)v498.__sig);
          v437 = (_QWORD *)v494.__sig;
          if (v494.__sig)
          {
            do
            {
              v438 = (_QWORD *)*v437;
              operator delete(v437);
              v437 = v438;
            }
            while (v438);
          }
          v439 = __p.f64[0];
          __p.f64[0] = 0.0;
          if (v439 != 0.0)
            operator delete(*(void **)&v439);
LABEL_484:
          v131 = 1;
          v132 = v470;
          if (!v470)
            return v131;
          goto LABEL_207;
        }
      }
      else
      {
        v120 = 0;
        v121 = 0;
      }
      v128 = v119 - v120;
      v129 = (uint64_t *)(v117 + 40 * v120 + 24);
      do
      {
        v130 = *v129;
        v129 += 5;
        v121 += v130;
        --v128;
      }
      while (v128);
      goto LABEL_205;
    }
  }
LABEL_206:
  v131 = 0;
  v132 = v470;
  if (v470)
  {
LABEL_207:
    v471 = v132;
    operator delete(v132);
  }
  return v131;
}

void sub_239C0B16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  void *v62;
  void *v63;
  void *v64;

  v62 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v62;
    operator delete(v62);
    v63 = a61;
    if (!a61)
    {
LABEL_3:
      v64 = a51;
      if (!a51)
      {
LABEL_8:
        if (a48)
          operator delete(a48);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v64);
      goto LABEL_8;
    }
  }
  else
  {
    v63 = a61;
    if (!a61)
      goto LABEL_3;
  }
  operator delete(v63);
  v64 = a51;
  if (!a51)
    goto LABEL_8;
  goto LABEL_7;
}

unint64_t sub_239C0B590(_QWORD *a1, char **a2)
{
  char **v2;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  int64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v86;
  _QWORD *__p;
  _QWORD *v88;
  char **v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;

  v2 = a2;
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = a2[1];
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 3);
      v6 -= 24;
      v7 = v8;
      if (v8)
      {
        *((_QWORD *)v4 - 2) = v7;
        operator delete(v7);
      }
      v4 = v6;
    }
    while (v6 != v5);
  }
  v2[1] = v5;
  v10 = a1[3];
  v9 = a1[4];
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v84 = *v2;
    return 0xAAAAAAAAAAAAAAABLL * ((v5 - v84) >> 3);
  }
  if (v11 < 0)
    sub_2394189F8();
  v12 = v11 >> 3;
  v13 = operator new(8 * (((unint64_t)((v11 >> 3) - 1) >> 6) + 1));
  v96 = v13;
  if ((unint64_t)v11 >= 0x208)
    v14 = (unint64_t)((v11 >> 3) - 1) >> 6;
  else
    v14 = 0;
  __p = v13;
  v13[v14] = 0;
  if ((unint64_t)v11 >= 0x200)
    bzero(v13, 8 * (v12 >> 6));
  v15 = ((unint64_t)v11 >> 3) & 0x3F;
  v16 = __p;
  if (v15)
    __p[v12 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v93 = 0;
  if (v12 <= 1)
    v20 = 1;
  else
    v20 = v12;
  v95 = 0;
  v88 = a1;
  v89 = v2;
  v86 = v20;
  do
  {
    if (a1[7] <= v19)
      goto LABEL_21;
    v21 = v19 >> 6;
    if ((*(_QWORD *)(a1[6] + 8 * (v19 >> 6)) & (1 << v19)) == 0 || (v16[v21] & (1 << v19)) != 0)
      goto LABEL_21;
    v22 = a1[4] - a1[3];
    v23 = v22 >> 3;
    v24 = v95;
    if (v22 >> 3 <= (unint64_t)((v95 - v17) >> 3))
    {
      v25 = v17;
    }
    else
    {
      if (v22 < 0)
        goto LABEL_115;
      v25 = (char *)operator new(v22);
      v24 = &v25[8 * v23];
      v93 = v25;
      v95 = v24;
      if (v17)
      {
        operator delete(v17);
        v24 = &v25[8 * v23];
      }
    }
    if (v25 >= v24)
    {
      v27 = v93;
      v28 = (v25 - v93) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
LABEL_115:
        sub_2394189F8();
      v30 = v24 - v93;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          sub_239418A80();
        v32 = operator new(8 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[8 * v28];
      *(_QWORD *)v33 = v19;
      v26 = v33 + 8;
      if (v25 == v93)
        goto LABEL_51;
      v34 = v25 - v93 - 8;
      if (v34 >= 0x58)
      {
        if ((unint64_t)(v93 - v32) >= 0x20)
        {
          v36 = (v34 >> 3) + 1;
          v35 = &v25[-8 * (v36 & 0x3FFFFFFFFFFFFFFCLL)];
          v37 = &v32[8 * v28 - 16];
          v38 = v25 - 16;
          v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 4;
          }
          while (v39);
          v33 -= 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_51:
            v93 = v33;
            v95 = &v32[8 * v31];
            if (v27)
              operator delete(v27);
            goto LABEL_53;
          }
        }
        else
        {
          v35 = v25;
        }
      }
      else
      {
        v35 = v25;
      }
      do
      {
        v41 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v33 - 1) = v41;
        v33 -= 8;
      }
      while (v35 != v93);
      goto LABEL_51;
    }
    *(_QWORD *)v25 = v19;
    v26 = v25 + 8;
LABEL_53:
    v94 = v26;
    v43 = a1[3];
    v42 = a1[4];
    v101 = 0;
    v102 = 0;
    v100 = 0;
    v44 = v42 - v43;
    if (v42 == v43)
    {
      v48 = 0;
    }
    else
    {
      if (v44 < 0)
        sub_2394189F8();
      v45 = v44 >> 3;
      v46 = (unint64_t)((v44 >> 3) - 1) >> 6;
      v47 = operator new(8 * (v46 + 1));
      v48 = v47;
      v101 = v44 >> 3;
      v102 = v46 + 1;
      v100 = v47;
      if ((unint64_t)v44 >= 0x208)
        v49 = (unint64_t)((v44 >> 3) - 1) >> 6;
      else
        v49 = 0;
      v47[v49] = 0;
      if ((unint64_t)v44 >= 0x200)
        bzero(v47, 8 * (v45 >> 6));
      v50 = ((unint64_t)v44 >> 3) & 0x3F;
      if (v50)
        v48[v45 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v50);
    }
    v48[v21] |= 1 << v19;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v51 = v93;
    if (v26 == v93)
      goto LABEL_96;
    v52 = 0;
    v53 = 0;
    v90 = v19;
    do
    {
      v98 = v52;
      sub_239BF0570(a1, *(_QWORD *)&v51[8 * v53], (uint64_t)&v97);
      v91 = v53;
      v52 = v97;
      v54 = v98;
      if (v97 != v98)
      {
        v55 = 0;
        do
        {
          v57 = v52[v55];
          v58 = 1 << v57;
          if (((1 << v57) & v48[v57 >> 6]) == 0)
          {
            v59 = v94;
            if (v94 < v95)
            {
              *(_QWORD *)v94 = v57;
              v56 = v94 + 8;
            }
            else
            {
              v92 = v48;
              v60 = v93;
              v61 = v94 - v93;
              v62 = (v94 - v93) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
                sub_2394189F8();
              v64 = v95 - v93;
              if ((v95 - v93) >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                if (v65 >> 61)
                  sub_239418A80();
                v66 = v52;
                v67 = v54;
                v68 = v65;
                v69 = operator new(8 * v65);
                v54 = v67;
                v65 = v68;
                v52 = v66;
                v61 = v94 - v93;
                v58 = 1 << v57;
              }
              else
              {
                v69 = 0;
              }
              v70 = &v69[8 * v62];
              *(_QWORD *)v70 = v57;
              v56 = v70 + 8;
              if (v94 != v93)
              {
                v71 = v94 - 8 - v93;
                if (v71 < 0x58)
                  goto LABEL_122;
                if ((unint64_t)(v94 - &v69[v61]) < 0x20)
                  goto LABEL_122;
                v72 = (v71 >> 3) + 1;
                v73 = &v69[8 * v62 - 16];
                v74 = v94 - 16;
                v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v76 = *(_OWORD *)v74;
                  *(v73 - 1) = *((_OWORD *)v74 - 1);
                  *v73 = v76;
                  v73 -= 2;
                  v74 -= 32;
                  v75 -= 4;
                }
                while (v75);
                v70 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
                v59 = &v94[-8 * (v72 & 0x3FFFFFFFFFFFFFFCLL)];
                if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_122:
                  do
                  {
                    v77 = *((_QWORD *)v59 - 1);
                    v59 -= 8;
                    *((_QWORD *)v70 - 1) = v77;
                    v70 -= 8;
                  }
                  while (v59 != v93);
                }
              }
              v93 = v70;
              v95 = &v69[8 * v65];
              if (v60)
              {
                operator delete(v60);
                v52 = v97;
                v54 = v98;
              }
              v48 = v92;
            }
            v94 = v56;
            v48[v57 >> 6] |= v58;
          }
          ++v55;
        }
        while (v55 < v54 - v52);
      }
      v19 = v90;
      v53 = v91 + 1;
      v51 = v93;
      a1 = v88;
      v2 = v89;
    }
    while (v91 + 1 < (unint64_t)((v94 - v93) >> 3));
    if (v52)
    {
      v98 = v52;
      operator delete(v52);
      v48 = v100;
    }
    if (v48)
LABEL_96:
      operator delete(v48);
    v78 = v2[1];
    if (v78 >= v2[2])
    {
      v5 = sub_239BF0310(v2, v93, (uint64_t)v94);
      v16 = __p;
    }
    else
    {
      *(_QWORD *)v78 = 0;
      *((_QWORD *)v78 + 1) = 0;
      *((_QWORD *)v78 + 2) = 0;
      v79 = v94 - v93;
      v16 = __p;
      if (v94 != v93)
      {
        if (v79 < 0)
          sub_2394189F8();
        v80 = (char *)operator new(v94 - v93);
        *(_QWORD *)v78 = v80;
        *((_QWORD *)v78 + 1) = v80;
        v81 = &v80[8 * (v79 >> 3)];
        *((_QWORD *)v78 + 2) = v81;
        memcpy(v80, v93, v79);
        *((_QWORD *)v78 + 1) = v81;
      }
      v5 = v78 + 24;
      v2[1] = v5;
    }
    v2[1] = v5;
    v17 = v93;
    v18 = v94;
    if (v94 == v93)
    {
      v17 = v94;
    }
    else
    {
      v82 = 0;
      v83 = (v94 - v93) >> 3;
      if (v83 <= 1)
        v83 = 1;
      do
      {
        *(_QWORD *)((char *)v16 + ((*(_QWORD *)&v93[8 * v82] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)&v93[8 * v82];
        ++v82;
      }
      while (v83 != v82);
      v18 = v93;
    }
    v20 = v86;
LABEL_21:
    ++v19;
  }
  while (v19 != v20);
  v84 = *v2;
  if (!v18 || (operator delete(v18), (v16 = v96) != 0))
    operator delete(v16);
  return 0xAAAAAAAAAAAAAAABLL * ((v5 - v84) >> 3);
}

void sub_239C0BC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  v27 = *(void **)v25;
  if (*(_QWORD *)v25)
  {
    *(_QWORD *)(v25 + 8) = v27;
    operator delete(v27);
  }
  *(_QWORD *)(a13 + 8) = v25;
  if (__p)
    operator delete(__p);
  operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_239C0BD40(uint64_t *a1)
{
  kdebug_trace();
  sub_239E2A64C(*a1, a1[4], (uint64_t)(a1 + 8));
  return kdebug_trace();
}

uint64_t sub_239C0BDAC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[8];
      if (v6)
      {
        v2[9] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_239C0BE14(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_13:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_13;
  return a1;
}

uint64_t sub_239C0BEA0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[8];
      if (v3)
      {
        v2[9] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_239C0BEEC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v10 = (char *)operator new(0x98uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 88) = xmmword_239F13AC0;
  *(_OWORD *)(v10 + 104) = unk_239F13AD0;
  *(_OWORD *)(v10 + 120) = xmmword_239F13AE0;
  *(_OWORD *)(v10 + 136) = unk_239F13AF0;
  *(_OWORD *)(v10 + 24) = xmmword_239F13A80;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)algn_239F13A90;
  *(_OWORD *)(v10 + 56) = xmmword_239F13AA0;
  *(_OWORD *)(v10 + 72) = unk_239F13AB0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_36:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *(_QWORD *)v10 = *v23;
LABEL_59:
    *v23 = v10;
    goto LABEL_60;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239C0C1F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239C0C20C(uint64_t result, unsigned int *a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int32x4_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  int32x4_t v29;
  int32x4_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  int32x4_t v50;
  int32x4_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(unsigned int *)(result + 24);
    v8 = *(_QWORD *)(result + 16) - 8 * v7;
    v9 = *(_DWORD *)(result + 8);
    if (v2 >= 0)
      v10 = a2[1];
    else
      v10 = -v2;
    v11 = 2 * v2;
    v12 = -2 * v2;
    v13 = v10 >> 4;
    v14.i64[0] = -1;
    v14.i64[1] = -1;
    result = 0x100000000;
    while (1)
    {
      v18 = HIDWORD(v6);
      if (v13 > 0x270)
      {
        v21 = v2 + v6 + v2 * HIDWORD(v6);
        v22 = (v21 / v2);
        v23 = (v21 % v2);
        v24 = v23 | (v22 << 32);
        v20 = (v23 + v2) | ((unint64_t)(v22 - 1) << 32);
        if ((int)v23 >= 0)
          v20 = v24;
        goto LABEL_35;
      }
      v19 = (v2 + v6);
      if (v2 + (int)v6 >= 0)
      {
        v20 = v6 & 0xFFFFFFFF00000000 | v19;
        if ((int)v19 >= v2)
          goto LABEL_32;
        goto LABEL_35;
      }
      v25 = v12 + ((v11 + v6) & ~((v11 + (int)v6) >> 31));
      v26 = v25 == (_DWORD)v6 ? 1 : 2;
      v27 = v26 + (v25 - (v25 != (_DWORD)v6) - v6) / v2;
      if (v27 < 8)
        break;
      v29 = 0uLL;
      v30 = (int32x4_t)HIDWORD(v6);
      v31 = v27 & 0xFFFFFFF8;
      do
      {
        v30 = vaddq_s32(v30, v14);
        v29 = vaddq_s32(v29, v14);
        v31 -= 8;
      }
      while (v31);
      LODWORD(v19) = v19 + (v27 & 0xFFFFFFF8) * v2;
      v28 = vaddvq_s32(vaddq_s32(v29, v30));
      if (v27 != (v27 & 0xFFFFFFF8))
        goto LABEL_30;
LABEL_31:
      v20 = v19 | (v28 << 32);
      if ((int)v19 >= v2)
      {
LABEL_32:
        v34 = HIDWORD(v20);
        do
        {
          v19 = (v19 - v2);
          v34 = (v34 + 1);
        }
        while ((int)v19 >= v2);
        v20 = v19 | (v34 << 32);
      }
LABEL_35:
      if ((_DWORD)v6 != (_DWORD)v20 || HIDWORD(v6) != HIDWORD(v20))
      {
        v36 = (_QWORD *)(v8 + 8 * (v7 + v9 * v5));
        v37 = *((_QWORD *)a2 + 2);
        v38 = a2[2];
        LODWORD(v39) = v6;
        v40 = v6;
        do
        {
          *v36++ = *(_QWORD *)(v37 + 8 * (HIDWORD(v40) + v39 * v38));
          v41 = (v39 + 1);
          v42 = v40 & 0xFFFFFFFF00000000;
          v43 = v42 | v41;
          v44 = v42 + 0x100000000;
          if (v2 <= (int)v41)
            v39 = v44;
          else
            v39 = v43;
          v45 = (_DWORD)v39 == (_DWORD)v20 && HIDWORD(v39) == HIDWORD(v20);
          v40 = v39;
        }
        while (!v45);
      }
      if (v13 > 0x270)
      {
        v15 = v2 + v6 + v2 * HIDWORD(v6);
        v16 = (v15 / v2);
        v17 = (v15 % v2);
        if ((v17 & 0x80000000) != 0)
        {
          v17 = (v17 + v2);
          v16 = (v16 - 1);
        }
        v6 = v17 | (v16 << 32);
        goto LABEL_14;
      }
      v46 = (v2 + v6);
      if (v2 + (int)v6 < 0)
      {
        v47 = v12 + ((v11 + v6) & ~((v11 + (int)v6) >> 31));
        if (v47 == (_DWORD)v6)
          v48 = 1;
        else
          v48 = 2;
        v49 = v48 + (v47 - (v47 != (_DWORD)v6) - v6) / v2;
        if (v49 < 8)
          goto LABEL_59;
        v50 = 0uLL;
        v51 = (int32x4_t)v18;
        v52 = v49 & 0xFFFFFFF8;
        do
        {
          v51 = vaddq_s32(v51, v14);
          v50 = vaddq_s32(v50, v14);
          v52 -= 8;
        }
        while (v52);
        LODWORD(v46) = v46 + (v49 & 0xFFFFFFF8) * v2;
        v18 = vaddvq_s32(vaddq_s32(v50, v51));
        if (v49 != (v49 & 0xFFFFFFF8))
        {
LABEL_59:
          v53 = ((v2 + v46) >> 31)
              + (((v2 + (_DWORD)v46) & ~((v2 + (int)v46) >> 31)) - (((v2 + v46) >> 31) + v2 + (_DWORD)v46))
              / v2;
          LODWORD(v46) = v2 + v46 + v2 * v53;
          v18 = v18 + ~v53;
        }
        v6 = v46 | (v18 << 32);
        if ((int)v46 < v2)
          goto LABEL_14;
LABEL_61:
        v54 = HIDWORD(v6);
        do
        {
          v46 = (v46 - v2);
          v54 = (v54 + 1);
        }
        while ((int)v46 >= v2);
        v6 = v46 | (v54 << 32);
        goto LABEL_14;
      }
      v6 = v6 & 0xFFFFFFFF00000000 | v46;
      if ((int)v46 >= v2)
        goto LABEL_61;
LABEL_14:
      if (++v5 == v3)
        return result;
    }
    v28 = HIDWORD(v6);
LABEL_30:
    v32 = v2 + v19;
    v33 = (v32 >> 31) + ((v32 & ~(v32 >> 31)) - ((v32 >> 31) + v32)) / v2;
    LODWORD(v19) = v32 + v2 * v33;
    v28 = v28 + ~v33;
    goto LABEL_31;
  }
  return result;
}

BOOL sub_239C0C504(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  char *v16;
  unint64_t v17;
  unint64_t *v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  double v28;
  char *v29;
  int8x16_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  unsigned int v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  _QWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  _QWORD *v62;
  void **v63;
  unsigned int v64;
  int v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t **v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  _DWORD *v75;
  void *v76;
  void (**v77)();
  unsigned int *v78;
  unsigned int *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned int *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 v92;
  unsigned int v93;
  double *v94;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  uint8x8_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  int8x8_t v116;
  uint8x8_t v117;
  unint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  float64x2_t v124;
  double v126;
  double v128;
  float64x2_t v130;
  char *v139;
  double v140;
  char *v141;
  std::__shared_weak_count *v142;
  double v143;
  unint64_t *v144;
  double v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  __int128 v151;
  unint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  char *v162;
  char *v163;
  double *v164;
  double *v165;
  int v166;
  double v167;
  char *v168;
  char *v169;
  void *v170;
  uint64_t v171;
  __int128 v172;
  void *v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  __int128 v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  __int128 v192;
  _QWORD *v193;
  char *v194;
  std::locale::__imp *v195;
  std::string::size_type v196;
  double v197;
  double v198;
  std::__shared_weak_count *v199;
  double v200;
  unint64_t *v201;
  double v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char v206;
  char v207;
  unint64_t v208;
  std::locale::__imp *locale;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *p_shared_owners;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  __int128 v222;
  double v223;
  double v224;
  _BYTE *v225;
  _BYTE *v226;
  int64_t v227;
  char *v228;
  double *v229;
  uint64_t v230;
  double *v231;
  double v234;
  double v235;
  std::locale *v236;
  uint64_t v237;
  double v238;
  uint64_t v239;
  double v240;
  double v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  _QWORD *v245;
  const std::locale::facet *v246;
  std::string *v247;
  std::string *v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  _QWORD *v252;
  unint64_t *v253;
  uint64_t **v254;
  uint64_t **v255;
  std::locale::__imp *v256;
  uint64_t *k;
  char *v258;
  double v259;
  float64x2_t v262;
  float64x2_t v264;
  _QWORD *m;
  uint64_t v266;
  uint64_t *v267;
  __int128 v268;
  uint64_t *v269;
  uint64_t **v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t **v274;
  char *v275;
  uint64_t v276;
  _QWORD *v277;
  _QWORD *v278;
  void *v279;
  _QWORD *v280;
  _QWORD *v281;
  void *v282;
  _QWORD *v283;
  _QWORD *v284;
  void *v285;
  _BYTE *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  int64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t **v294;
  uint64_t **v295;
  uint64_t *v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t **v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  char *v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  __int128 *v307;
  uint64_t v308;
  __int128 v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  unint64_t *v313;
  int64_t v314;
  uint64_t v315;
  unint64_t v316;
  int64_t v317;
  unint64_t v318;
  _BYTE *v319;
  uint64_t **v320;
  uint64_t **v321;
  uint64_t *v322;
  uint64_t **v323;
  uint64_t *v324;
  uint64_t **v325;
  _QWORD *v326;
  uint64_t v327;
  unint64_t *v328;
  char *v329;
  unint64_t v330;
  unint64_t *v331;
  uint64_t v332;
  _OWORD *v333;
  unint64_t *v334;
  uint64_t v335;
  __int128 v336;
  unint64_t v337;
  uint64_t **v338;
  unsigned int v339;
  uint64_t *v340;
  uint64_t **v341;
  uint64_t **v342;
  char v343;
  int v344;
  uint64_t *v345;
  uint64_t **v346;
  uint64_t **v347;
  uint64_t i;
  uint64_t v349;
  uint64_t *v350;
  uint64_t **v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t *v354;
  std::locale::__imp *v355;
  unsigned int v356;
  _QWORD *v357;
  unsigned int v358;
  uint64_t *v359;
  _QWORD *v360;
  _QWORD *v361;
  unsigned int v362;
  _QWORD *v363;
  _QWORD *v364;
  void *v365;
  std::locale::__imp *v366;
  std::locale::__imp *v367;
  std::locale::__imp *v368;
  uint64_t v369;
  char *v370;
  _QWORD *v371;
  _BYTE *v372;
  int64_t v373;
  int64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  _BYTE *v378;
  _QWORD *v379;
  char *v380;
  unint64_t v381;
  uint64_t v382;
  _OWORD *v383;
  char *v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  uint64_t **v388;
  unsigned int v389;
  uint64_t *v390;
  uint64_t **v391;
  uint64_t **v392;
  char v393;
  uint64_t *v394;
  uint64_t **v395;
  uint64_t **v396;
  int v397;
  uint64_t *v398;
  uint64_t **v399;
  uint64_t j;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t *v404;
  _QWORD *v405;
  unsigned int v406;
  uint64_t *v407;
  uint64_t **v408;
  unsigned int v409;
  uint64_t *v410;
  uint64_t *v411;
  uint64_t **v412;
  unsigned int v413;
  uint64_t *v414;
  unsigned int v415;
  _QWORD *v416;
  void *v417;
  std::locale::__imp *v418;
  std::locale::__imp *v419;
  std::locale::__imp *v420;
  uint64_t v421;
  void *v422;
  _BYTE *v423;
  int64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  _BYTE *v429;
  _QWORD *v430;
  char *v431;
  unint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  _OWORD *v435;
  __int128 *v436;
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  double v440;
  double v441;
  float64x2_t v442;
  double v443;
  double v444;
  unsigned int v445;
  size_t v446;
  size_t v447;
  double *v448;
  double v449;
  double *v450;
  uint64_t v451;
  double v452;
  double v453;
  _QWORD *v454;
  const std::locale::facet *v455;
  _QWORD *v456;
  double v457;
  double v458;
  char v459;
  char *v460;
  int v461;
  int v462;
  double v463;
  double *v464;
  unint64_t v465;
  unint64_t v466;
  float64x2_t *v467;
  uint64_t v468;
  float64x2_t v469;
  float64x2_t v470;
  double v471;
  double v472;
  uint64_t v474;
  const void *v475;
  int64_t v476;
  char *v477;
  double *v478;
  uint64_t v479;
  double v480;
  double v481;
  _QWORD *v482;
  _QWORD *v483;
  const std::locale::facet *v484;
  BOOL v486;
  double v487;
  uint64_t v489;
  double v490;
  _QWORD *v491;
  const std::locale::facet *v492;
  int v493;
  uint64_t **v494;
  uint64_t **v495;
  double v496;
  uint64_t *v497;
  uint64_t **v498;
  uint64_t *v499;
  uint64_t **v500;
  _QWORD *v501;
  const std::locale::facet *v502;
  int v503;
  _QWORD *v504;
  const std::locale::facet *v505;
  _QWORD *v506;
  const std::locale::facet *v507;
  _QWORD *v508;
  _QWORD *v509;
  const std::locale::facet *v510;
  std::bad_alloc *exception;
  std::bad_alloc *v512;
  uint64_t v513;
  uint64_t v514;
  _BYTE *v515;
  char *v516;
  uint64_t v517;
  char *v518;
  _BYTE *v519;
  char *v520;
  char *v521;
  uint64_t v522;
  uint64_t *v523;
  _QWORD *v524;
  uint64_t v525;
  int8x16_t v526;
  uint64_t v527;
  int64x2_t v528;
  uint64_t v529;
  _QWORD *v530;
  int64x2_t v531;
  int8x16_t v532;
  char *v533;
  float64x2_t v534;
  __int128 v535;
  uint64_t v536;
  double v537;
  int8x16_t v538;
  int v539;
  char *v540;
  float64x2_t v541;
  unint64_t v542;
  float64x2_t v543;
  uint64_t v544;
  std::__shared_weak_count *v545;
  void *v546[2];
  void *v547[2];
  int v548;
  uint64_t v549;
  uint64_t v550;
  char *v551;
  char *v552;
  void *v553[2];
  void *v554[2];
  int v555;
  void *v556[2];
  void *v557[2];
  int v558;
  void *v559;
  char *v560;
  char *v561;
  void *v562;
  uint64_t v563;
  unsigned int v564;
  void *__dst;
  double v566;
  unsigned int v567;
  double v568;
  void *v569[2];
  std::locale::__imp *v570;
  std::string v571;
  _QWORD *v572;
  uint64_t v573;
  __int128 v574;
  void *v575[2];
  void *v576[2];
  __int128 v577;
  void *v578[2];
  __int128 v579;
  int64x2_t v580;
  void *__p[2];
  _BYTE *v582;
  void (**v583)();
  __int128 v584;
  __int128 v585;
  _BYTE v586[25];
  _BYTE v587[24];
  _BYTE *v588;
  _BYTE v589[24];
  _BYTE *v590;
  double v591;
  __int128 v592;
  __int128 v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t (**v596)();
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  uint64_t (**v602)();
  uint64_t **v603;
  _QWORD v604[2];
  uint64_t **v605;
  uint64_t *v606;
  uint64_t v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  int v612;
  uint64_t v613;
  char *v614;
  char *v615;
  char *v616;
  unsigned int *v617;
  unsigned int *v618;
  unsigned int *v619;
  _DWORD v620[2];
  uint64_t v621;
  unsigned __int8 v622;
  __int128 v623;
  void *__src[2];
  unsigned int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  _QWORD v632[3];
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  void (**v645)();
  uint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  __int16 v657;
  uint64_t v658;
  _QWORD *v659;
  uint64_t v660;
  _QWORD v661[2];
  int v662;
  void *v663[2];
  __int128 v664;
  void *v665[2];
  __int128 v666;
  uint64_t v667;
  uint64_t v668;
  void *v669[2];
  void *v670[4];
  std::string v671;
  std::string *v672;
  std::locale v673[4];
  int v674;
  __int128 v675;
  __int128 v676;
  int v677;
  uint64_t v678;

  v678 = *MEMORY[0x24BDAC8D0];
  v2 = a1[10];
  v3 = a1[11];
  if (v3 == v2)
    return v3 != v2;
  v514 = a1[10];
  bzero(&v612, 0x2E8uLL);
  __asm { FMOV            V0.2D, #1.0 }
  v597 = _Q0;
  v598 = _Q0;
  v599 = xmmword_239F0C3E0;
  v600 = _Q0;
  v601 = xmmword_239F0C3F0;
  v604[1] = 0;
  v604[0] = 0;
  v602 = &off_250AFB9F0;
  v603 = (uint64_t **)v604;
  v607 = 0;
  v606 = 0;
  v605 = &v606;
  v608 = 0u;
  v609 = 0u;
  LOBYTE(v612) = 1;
  BYTE2(v612) = 1;
  v610 = 0u;
  v611 = 0u;
  sub_239C32BF4((uint64_t)&v613);
  v524 = a1;
  v513 = v3;
  memset(v620, 0, 5);
  v621 = 0;
  v622 = 0;
  v626 = 0;
  v623 = 0u;
  *(_OWORD *)__src = 0u;
  v625 = 0;
  v10 = operator new();
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)v10 = &off_250AFDE20;
  v628 = 0;
  v629 = 0;
  v627 = v10;
  v630 = 0;
  v631 = 0x3EE4F8B588E368F1;
  v632[0] = &v602;
  v632[1] = __src;
  v632[2] = v661;
  v634 = 0u;
  v633 = 0u;
  v644 = 0u;
  v643 = 0u;
  v635 = 0u;
  v642 = 0u;
  v640 = 0u;
  v641 = 0u;
  v638 = 0u;
  v639 = 0u;
  v636 = 0u;
  v637 = 0u;
  v645 = off_250AFBA50;
  v652 = 0;
  v650 = 0;
  v649 = 0;
  v651 = 0;
  v647 = 0;
  v646 = 0;
  v648 = 0;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_250AFDE20;
  v653 = v11;
  v658 = 0;
  v654 = 0;
  v656 = 0;
  v655 = 0;
  v657 = 0;
  v659 = v632;
  v660 = 0x3EE4F8B588E368F1;
  v661[0] = 0;
  v661[1] = 0;
  v662 = 0;
  *(_OWORD *)v663 = 0u;
  v664 = 0u;
  *(_OWORD *)v665 = 0u;
  v666 = 0u;
  v667 = 0;
  v668 = 2;
  *(_OWORD *)v669 = 0u;
  memset(v670, 0, 28);
  v645 = (void (**)())&off_250AFBA10;
  v596 = off_250AFB600;
  v12 = a1;
  v519 = (_BYTE *)a1[11];
  v522 = a1[14];
  v515 = (_BYTE *)a1[10];
  v517 = a1[13];
  v13 = a1[79];
  *(_OWORD *)v556 = 0u;
  *(_OWORD *)v557 = 0u;
  v558 = 1065353216;
  v14 = (uint64_t *)a1[2];
  if (v14)
  {
    v15 = v13 != 0;
    do
    {
      v18 = (unint64_t *)(v14 + 2);
      v17 = v14[2];
      if (v15)
      {
        v19 = (int8x8_t)v524[72];
        if (v19)
        {
          v20 = (uint8x8_t)vcnt_s8(v19);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] > 1uLL)
          {
            v21 = v14[2];
            if (v17 >= *(_QWORD *)&v19)
              v21 = v17 % *(_QWORD *)&v19;
          }
          else
          {
            v21 = (*(_QWORD *)&v19 - 1) & v17;
          }
          v23 = *(_QWORD **)(v524[71] + 8 * v21);
          if (v23)
          {
            v23 = (_QWORD *)*v23;
            if (v23)
            {
              if (v20.u32[0] < 2uLL)
              {
                v24 = *(_QWORD *)&v19 - 1;
                while (1)
                {
                  v26 = v23[1];
                  if (v26 == v17)
                  {
                    if (v23[2] == v17)
                      goto LABEL_31;
                  }
                  else if ((v26 & v24) != v21)
                  {
                    goto LABEL_30;
                  }
                  v23 = (_QWORD *)*v23;
                  if (!v23)
                    goto LABEL_31;
                }
              }
              do
              {
                v25 = v23[1];
                if (v25 == v17)
                {
                  if (v23[2] == v17)
                    break;
                }
                else
                {
                  if (v25 >= *(_QWORD *)&v19)
                    v25 %= *(_QWORD *)&v19;
                  if (v25 != v21)
                    goto LABEL_30;
                }
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
          }
        }
        else
        {
LABEL_30:
          v23 = 0;
        }
LABEL_31:
        v22 = v23 == 0;
      }
      else
      {
        v22 = 0;
      }
      *(_QWORD *)&v27.f64[0] = v14[5];
      v528 = *(int64x2_t *)(v14 + 7);
      v531 = *(int64x2_t *)(v14 + 3);
      v28 = *((double *)v14 + 13);
      v537 = *((double *)v14 + 17);
      v534 = *(float64x2_t *)(v14 + 15);
      *(_QWORD *)&v27.f64[1] = v14[9];
      v541 = v27;
      v543 = *(float64x2_t *)(v14 + 11);
      v29 = sub_239C18404((float *)v556, v17, v14 + 2);
      _V3.D[1] = v543.f64[1];
      _Q1 = vmulq_f64(v543, v534);
      _D2 = v534.f64[1];
      __asm { FMLA            D1, D2, V3.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + v28 * v537;
      v33 = (int8x16_t)vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v531, v528), v534.f64[0]), (float64x2_t)vzip2q_s64(v531, v528), v534, 1), v541, v537));
      *((_QWORD *)v29 + 5) = *(_OWORD *)&vnegq_f64(_Q1);
      v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
      *(int8x16_t *)(v29 + 24) = v33;
      v29[48] = v22;
      v34 = sub_239C18404((float *)v556, *v18, v14 + 2);
      v35 = *v18;
      v36 = v34[48];
      v1 = v1 & 0xFFFFFF0000000000 | *v18 | (v36 << 32);
      v37 = (uint64_t *)v604[0];
      v38 = (uint64_t **)v604;
      v12 = v524;
      if (!v604[0])
        goto LABEL_42;
      v39 = (uint64_t **)v604;
      do
      {
        v40 = (uint64_t **)v37;
        v41 = v39;
        v42 = *((_DWORD *)v37 + 8);
        if (v42 >= v35)
          v39 = (uint64_t **)v37;
        else
          ++v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
      v38 = (uint64_t **)v604;
      if (v39 == v604)
        goto LABEL_42;
      if (v42 < v35)
        v40 = v41;
      v38 = v39;
      if (*((_DWORD *)v40 + 8) != (_DWORD)v35)
      {
LABEL_42:
        v571 = *(std::string *)(v34 + 1);
        LODWORD(v569[0]) = v35;
        v569[1] = (void *)v1;
        v570 = (std::locale::__imp *)(v34 + 24);
        LOBYTE(v572) = v36;
        LODWORD(v573) = -1;
        BYTE4(v573) = 1;
        LODWORD(v574) = 0;
        v575[0] = 0;
        v575[1] = 0;
        *((_QWORD *)&v574 + 1) = 0;
        LOBYTE(v576[0]) = 1;
        sub_239C31FF8(&v603, v38, v35, (uint64_t)v569);
        v12 = v524;
        if ((_DWORD)v36)
        {
          v43 = v615;
          if (v615 < v616)
          {
            *(_DWORD *)v615 = v35;
            v16 = v43 + 4;
          }
          else
          {
            v44 = v614;
            v45 = (char *)(v615 - v614);
            v46 = (v615 - v614) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
              sub_2394189F8();
            v48 = v616 - v614;
            if ((v616 - v614) >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              if (v49 >> 62)
                sub_239418A80();
              v50 = (char *)operator new(4 * v49);
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[4 * v46];
            *(_DWORD *)v51 = v35;
            v16 = v51 + 4;
            if (v43 != v44)
            {
              v52 = v43 - v44 - 4;
              if (v52 < 0x2C)
                goto LABEL_881;
              if ((unint64_t)(v43 - v50 - (_QWORD)v45) < 0x20)
                goto LABEL_881;
              v53 = (v52 >> 2) + 1;
              v54 = &v50[4 * v46 - 16];
              v55 = (__int128 *)(v43 - 16);
              v56 = v53 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v57 = *v55;
                *((_OWORD *)v54 - 1) = *(v55 - 1);
                *(_OWORD *)v54 = v57;
                v54 -= 32;
                v55 -= 2;
                v56 -= 8;
              }
              while (v56);
              v51 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              v43 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_881:
                do
                {
                  v58 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v51 - 1) = v58;
                  v51 -= 4;
                }
                while (v43 != v44);
              }
            }
            v614 = v51;
            v615 = v16;
            v616 = &v50[4 * v49];
            if (v44)
              operator delete(v44);
            v12 = v524;
          }
          v615 = v16;
        }
        BYTE2(v612) = 0;
        LOBYTE(v612) = 0;
        v620[0] = 0;
      }
      v14 = (uint64_t *)*v14;
      v15 = 1;
    }
    while (v14);
  }
  *(_OWORD *)v553 = 0u;
  *(_OWORD *)v554 = 0u;
  v555 = 1065353216;
  v59 = (_QWORD *)v12[7];
  if (v59)
  {
    while (1)
    {
      v61 = v59[4];
      v62 = sub_239C18878((float *)v553, v59[2], v59 + 2);
      v62[3] = v61;
      *((_BYTE *)v62 + 32) = 1;
      v63 = (void **)sub_239C18878((float *)v553, v59[2], v59 + 2);
      v64 = *((_DWORD *)v59 + 4);
      v65 = *((unsigned __int8 *)v63 + 32);
      v66 = (uint64_t *)&v606;
      v67 = v606;
      if (v606)
      {
        v68 = &v606;
        do
        {
          v69 = v67;
          v70 = v68;
          v71 = *((_DWORD *)v67 + 8);
          if (v71 >= v64)
            v68 = (uint64_t **)v67;
          else
            ++v67;
          v67 = (uint64_t *)*v67;
        }
        while (v67);
        v66 = (uint64_t *)&v606;
        if (v68 != &v606)
        {
          if (v71 < v64)
            v69 = (uint64_t *)v70;
          v66 = (uint64_t *)v68;
          if (*((_DWORD *)v69 + 8) == v64)
            goto LABEL_69;
        }
      }
      v72 = v63 + 3;
      v569[0] = v63[3];
      LOBYTE(v569[1]) = *((_BYTE *)v63 + 32);
      v73 = sub_239C31E70(&v605, v66, (uint64_t **)&v583, (uint64_t **)v673, v64);
      if (!*v73)
        break;
      if (v65)
        goto LABEL_86;
LABEL_68:
      BYTE2(v612) = 0;
      LOBYTE(v612) = 0;
      v620[0] = 0;
LABEL_69:
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_106;
    }
    v74 = v73;
    v75 = operator new(0x68uLL);
    v75[8] = v64;
    v75[10] = v64;
    *((_BYTE *)v75 + 44) = v65;
    v76 = v569[0];
    *((_QWORD *)v75 + 6) = v72;
    *((_QWORD *)v75 + 7) = v76;
    *((_BYTE *)v75 + 64) = v569[1];
    v75[18] = -1;
    *((_BYTE *)v75 + 76) = 1;
    v75[20] = 0;
    *((_QWORD *)v75 + 11) = 0;
    *((_BYTE *)v75 + 96) = 1;
    v77 = v583;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = v77;
    *v74 = (uint64_t)v75;
    if (*v605)
    {
      v605 = (uint64_t **)*v605;
      v75 = (_DWORD *)*v74;
    }
    sub_2394213B8(v606, (uint64_t *)v75);
    ++v607;
    if (!v65)
      goto LABEL_68;
LABEL_86:
    v78 = v618;
    if (v618 < v619)
    {
      *v618 = v64;
      v60 = v78 + 1;
    }
    else
    {
      v79 = v617;
      v80 = (char *)((char *)v618 - (char *)v617);
      v81 = v618 - v617;
      v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 62)
        sub_2394189F8();
      v83 = (char *)v619 - (char *)v617;
      if (((char *)v619 - (char *)v617) >> 1 > v82)
        v82 = v83 >> 1;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
        v84 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v84 = v82;
      if (v84)
      {
        if (v84 >> 62)
          sub_239418A80();
        v85 = (char *)operator new(4 * v84);
      }
      else
      {
        v85 = 0;
      }
      v86 = (unsigned int *)&v85[4 * v81];
      *v86 = v64;
      v60 = v86 + 1;
      if (v78 != v79)
      {
        v87 = (char *)v78 - (char *)v79 - 4;
        if (v87 < 0x2C)
          goto LABEL_882;
        if ((unint64_t)((char *)v78 - v85 - (_QWORD)v80) < 0x20)
          goto LABEL_882;
        v88 = (v87 >> 2) + 1;
        v89 = &v85[4 * v81 - 16];
        v90 = v78 - 4;
        v91 = v88 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v92 = *(_OWORD *)v90;
          *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
          *(_OWORD *)v89 = v92;
          v89 -= 32;
          v90 -= 8;
          v91 -= 8;
        }
        while (v91);
        v86 -= v88 & 0x7FFFFFFFFFFFFFF8;
        v78 -= v88 & 0x7FFFFFFFFFFFFFF8;
        if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_882:
          do
          {
            v93 = *--v78;
            *--v86 = v93;
          }
          while (v78 != v79);
        }
      }
      v617 = v86;
      v618 = v60;
      v619 = (unsigned int *)&v85[4 * v84];
      if (v79)
        operator delete(v79);
    }
    v618 = v60;
    goto LABEL_68;
  }
LABEL_106:
  v544 = (v522 - v517) >> 3;
  v542 = 0x8E38E38E38E38E39 * ((v519 - v515) >> 4);
  v94 = (double *)v524;
  v96 = (uint64_t *)v524[10];
  v95 = (uint64_t *)v524[11];
  if (v95 == v96)
  {
    v516 = 0;
    goto LABEL_191;
  }
  if ((0x8E38E38E38E38E39 * (((char *)v95 - (char *)v96) >> 4)) >> 59)
    sub_2394189F8();
  v97 = (char *)operator new(0xC71C71C71C71C720 * (((char *)v95 - (char *)v96) >> 4));
  v516 = v97;
  v98 = v97;
  do
  {
    *(_OWORD *)v98 = 0uLL;
    *((_OWORD *)v98 + 1) = 0uLL;
    v98[24] = 1;
    v98 += 32;
  }
  while (v98 != &v97[0xC71C71C71C71C720 * (((char *)v95 - (char *)v96) >> 4)]);
  v99 = 0;
  do
  {
    v100 = *v96;
    v101 = v96[1];
    v102 = (int8x8_t)v94[77];
    if (!*(_QWORD *)&v102)
      goto LABEL_151;
    v103 = (uint8x8_t)vcnt_s8(v102);
    v103.i16[0] = vaddlv_u8(v103);
    if (v103.u32[0] > 1uLL)
    {
      v104 = *v96;
      if (v100 >= *(_QWORD *)&v102)
        v104 = v100 % *(_QWORD *)&v102;
    }
    else
    {
      v104 = (*(_QWORD *)&v102 - 1) & v100;
    }
    v105 = *((_QWORD *)v94 + 76);
    v106 = *(_QWORD **)(v105 + 8 * v104);
    if (!v106)
      goto LABEL_151;
    v107 = (_QWORD *)*v106;
    if (!*v106)
      goto LABEL_151;
    v108 = *(_QWORD *)&v102 - 1;
    if (v103.u32[0] < 2uLL)
    {
      while (1)
      {
        v109 = v107[1];
        if (v109 == v100)
        {
          if (v107[2] == v100)
            goto LABEL_132;
        }
        else if ((v109 & v108) != v104)
        {
          goto LABEL_151;
        }
        v107 = (_QWORD *)*v107;
        if (!v107)
          goto LABEL_151;
      }
    }
    while (1)
    {
      v110 = v107[1];
      if (v110 == v100)
        break;
      if (v110 >= *(_QWORD *)&v102)
        v110 %= *(_QWORD *)&v102;
      if (v110 != v104)
        goto LABEL_151;
LABEL_126:
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_151;
    }
    if (v107[2] != v100)
      goto LABEL_126;
LABEL_132:
    if (v103.u32[0] > 1uLL)
    {
      v111 = v96[1];
      if (v101 >= *(_QWORD *)&v102)
        v111 = v101 % *(_QWORD *)&v102;
    }
    else
    {
      v111 = v108 & v101;
    }
    v112 = *(_QWORD **)(v105 + 8 * v111);
    if (v112)
    {
      v113 = (_QWORD *)*v112;
      if (v113)
      {
        if (v103.u32[0] < 2uLL)
        {
          while (1)
          {
            v114 = v113[1];
            if (v114 == v101)
            {
              if (v113[2] == v101)
                goto LABEL_188;
            }
            else if ((v114 & v108) != v111)
            {
              goto LABEL_151;
            }
            v113 = (_QWORD *)*v113;
            if (!v113)
              goto LABEL_151;
          }
        }
        do
        {
          v115 = v113[1];
          if (v115 == v101)
          {
            if (v113[2] == v101)
              goto LABEL_188;
          }
          else
          {
            if (v115 >= *(_QWORD *)&v102)
              v115 %= *(_QWORD *)&v102;
            if (v115 != v111)
              break;
          }
          v113 = (_QWORD *)*v113;
        }
        while (v113);
      }
    }
LABEL_151:
    v116 = (int8x8_t)v94[1];
    if (!*(_QWORD *)&v116)
      goto LABEL_860;
    v117 = (uint8x8_t)vcnt_s8(v116);
    v117.i16[0] = vaddlv_u8(v117);
    if (v117.u32[0] > 1uLL)
    {
      v118 = v96[1];
      if (v101 >= *(_QWORD *)&v116)
        v118 = v101 % *(_QWORD *)&v116;
    }
    else
    {
      v118 = (*(_QWORD *)&v116 - 1) & v101;
    }
    v119 = *(uint64_t ***)(*(_QWORD *)v94 + 8 * v118);
    if (!v119 || (v120 = *v119) == 0)
    {
LABEL_860:
      sub_239A444D4((uint64_t)"unknown file", 140, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (v117.u32[0] < 2uLL)
    {
      v121 = *(_QWORD *)&v116 - 1;
      while (1)
      {
        v123 = v120[1];
        if (v123 == v101)
        {
          if (v120[2] == v101)
            goto LABEL_171;
        }
        else if ((v123 & v121) != v118)
        {
          goto LABEL_860;
        }
        v120 = (uint64_t *)*v120;
        if (!v120)
          goto LABEL_860;
      }
    }
    while (2)
    {
      v122 = v120[1];
      if (v122 != v101)
      {
        if (v122 >= *(_QWORD *)&v116)
          v122 %= *(_QWORD *)&v116;
        if (v122 != v118)
          goto LABEL_860;
LABEL_161:
        v120 = (uint64_t *)*v120;
        if (!v120)
          goto LABEL_860;
        continue;
      }
      break;
    }
    if (v120[2] != v101)
      goto LABEL_161;
LABEL_171:
    *(_QWORD *)&v124.f64[0] = v120[5];
    _Q1 = *(float64x2_t *)(v120 + 3);
    v126 = *((double *)v120 + 13);
    _Q5 = *(float64x2_t *)(v120 + 11);
    v128 = *((double *)v96 + 16);
    _Q7 = *((float64x2_t *)v96 + 7);
    v130 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q1, *(int64x2_t *)(v120 + 7)), _Q7.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q1, *(int64x2_t *)(v120 + 7)), _Q7, 1);
    _Q17 = vmulq_f64(_Q7, _Q1);
    *(_QWORD *)&_Q1.f64[0] = v120[4];
    __asm { FMLA            D17, D1, V7.D[1] }
    *(_QWORD *)&v124.f64[1] = v120[9];
    _Q16 = vmlaq_n_f64(v130, v124, v128);
    _Q0 = vmulq_f64(_Q5, _Q7);
    *(_QWORD *)&_Q17.f64[0] = v96[15];
    __asm { FMLA            D18, D17, V5.D[1] }
    _Q17.f64[0] = _D18 + v126 * v128;
    _D3 = v120[8];
    __asm { FMLA            D18, D3, V7.D[1] }
    _D2 = _D18 + v128 * *((double *)v120 + 9);
    _D3 = v120[12];
    __asm
    {
      FMLA            D0, D3, V7.D[1]
      FMLA            D1, D2, V16.D[1]
    }
    _Q0.f64[0] = 1.0 / sqrt(_Q1.f64[0] + (_Q0.f64[0] + v128 * v126) * _Q17.f64[0]);
    v139 = &v516[32 * v99];
    *(float64x2_t *)v139 = vmulq_n_f64(_Q16, _Q0.f64[0]);
    *((_QWORD *)v139 + 2) = *(_OWORD *)&vmulq_f64(_Q17, _Q0);
    v139[24] = 1;
    if (v544 == v542)
    {
      v140 = *(double *)(*((_QWORD *)v94 + 13) + 8 * v99);
      v141 = (char *)operator new(0x30uLL);
      v142 = (std::__shared_weak_count *)v141;
      v143 = 1.0 / v140;
      *((_QWORD *)v141 + 1) = 0;
      v144 = (unint64_t *)(v141 + 8);
      *((_QWORD *)v141 + 2) = 0;
      *(_QWORD *)v141 = &off_250AFE808;
      *((_QWORD *)v141 + 3) = &off_250AFE840;
      if (1.0 / v140 < 1.0e-15)
        v145 = NAN;
      else
        v145 = 1.0 / sqrt(v143);
      *((double *)v141 + 5) = v145;
      v141[32] = v143 >= 1.0e-15;
      v583 = (void (**)())(v141 + 24);
      *(_QWORD *)&v584 = v141;
      v569[1] = 0;
      v570 = 0;
      v569[0] = &v516[32 * v99];
      v551 = v141 + 24;
      v552 = v141;
      do
        v146 = __ldxr(v144);
      while (__stxr(v146 + 1, v144));
      sub_239C3FCC8((int64x2_t *)&v596, (uint64_t)v569, v100 | ((unint64_t)v101 << 32), (uint64_t)(v141 + 24), (std::__shared_weak_count *)v141);
      do
        v147 = __ldaxr(v144);
      while (__stlxr(v147 - 1, v144));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
      v148 = (std::__shared_weak_count *)v584;
      v94 = (double *)v524;
      if ((_QWORD)v584)
      {
        v149 = (unint64_t *)(v584 + 8);
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
    }
    else
    {
      v569[1] = 0;
      v570 = 0;
      v569[0] = &v516[32 * v99];
      v549 = 0;
      v550 = 0;
      sub_239C3FCC8((int64x2_t *)&v596, (uint64_t)v569, v100 | ((unint64_t)v101 << 32), 0, 0);
    }
    ++v99;
LABEL_188:
    v96 += 18;
  }
  while (v96 != v95);
LABEL_191:
  *((_QWORD *)&v151 + 1) = 0;
  *(_OWORD *)v546 = 0u;
  *(_OWORD *)v547 = 0u;
  v548 = 1065353216;
  v152 = *((_QWORD *)v94 + 8);
  if (!v152)
  {
    v158 = 0;
    v162 = 0;
    goto LABEL_295;
  }
  *(_OWORD *)&v671.__r_.__value_.__l.__data_ = 0uLL;
  v153 = (uint64_t *)*((_QWORD *)v94 + 2);
  if (v153)
  {
    do
    {
      v525 = v153[5];
      v526 = *(int8x16_t *)(v153 + 3);
      v529 = v153[9];
      *(_QWORD *)&v151 = v153[13];
      v532 = *(int8x16_t *)(v153 + 7);
      v535 = v151;
      v538 = *(int8x16_t *)(v153 + 11);
      v154 = sub_239C1974C((float *)v546, v153[2], v153 + 2);
      v155 = v526;
      v156 = v532;
      v157 = v538;
      *((_BYTE *)v154 + 24) = 1;
      v154[6] = v525;
      v155.i64[1] = vextq_s8(v155, v155, 8uLL).u64[0];
      *((int8x16_t *)v154 + 2) = v155;
      v154[9] = v529;
      v156.i64[1] = vextq_s8(v156, v156, 8uLL).u64[0];
      *(int8x16_t *)(v154 + 7) = v156;
      *((_QWORD *)&v151 + 1) = *((_QWORD *)&v535 + 1);
      v154[12] = v535;
      v157.i64[1] = vextq_s8(v157, v157, 8uLL).u64[0];
      *((int8x16_t *)v154 + 5) = v157;
      v153 = (uint64_t *)*v153;
    }
    while (v153);
    v152 = *((_QWORD *)v94 + 8);
    if (!v152)
    {
      v158 = 0;
      v518 = 0;
      v159 = *((_QWORD *)v94 + 7);
      if (v159)
        goto LABEL_197;
      goto LABEL_205;
    }
  }
  if (v152 >> 59)
    sub_2394189F8();
  v158 = (char *)operator new(32 * v152);
  v518 = &v158[32 * v152];
  v159 = *((_QWORD *)v94 + 7);
  if (!v159)
  {
LABEL_205:
    v162 = 0;
    v163 = 0;
    v160 = 0;
    goto LABEL_206;
  }
LABEL_197:
  v160 = 0;
  v161 = (_QWORD *)v159;
  do
  {
    v160 += (uint64_t)(v161[9] - v161[8]) >> 5;
    v161 = (_QWORD *)*v161;
  }
  while (v161);
  if (v160)
  {
    if (v160 >> 59)
      sub_2394189F8();
    v162 = (char *)operator new(32 * v160);
    v163 = &v162[32 * v160];
  }
  else
  {
    v162 = 0;
    v163 = 0;
  }
LABEL_206:
  if (v544 == v542)
  {
    v164 = (double *)*((_QWORD *)v94 + 13);
    v165 = (double *)*((_QWORD *)v94 + 14);
    if (v164 == v165)
    {
      v166 = 0;
    }
    else
    {
      v166 = 0;
      do
      {
        v167 = *v164++;
        v166 = (int)(v167 + (double)v166);
      }
      while (v164 != v165);
    }
    v94[16] = (double)v166 * 50.0 / (double)v160;
  }
  if (v159)
  {
    v168 = v158;
    v169 = v162;
    while (1)
    {
      v170 = *(void **)(v159 + 24);
      v559 = v170;
      v539 = *(_DWORD *)(v159 + 16);
      v171 = (v168 - v158) >> 5;
      *(_OWORD *)v569 = *(_OWORD *)(v159 + 40);
      v570 = *(std::locale::__imp **)(v159 + 56);
      v523 = (uint64_t *)v159;
      if (v168 >= v518)
      {
        v174 = v171 + 1;
        if ((unint64_t)(v171 + 1) >> 59)
          sub_2394189F8();
        if ((v518 - v158) >> 4 > v174)
          v174 = (v518 - v158) >> 4;
        v175 = (unint64_t)(v518 - v158) >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v174;
        if (v175)
        {
          if (v175 >> 59)
            sub_239418A80();
          v176 = (char *)operator new(32 * v175);
        }
        else
        {
          v176 = 0;
        }
        v177 = &v176[32 * v171];
        *(_OWORD *)v177 = *(_OWORD *)v569;
        *((_QWORD *)v177 + 2) = v570;
        v177[24] = 1;
        if (v168 == v158)
        {
          v179 = &v176[32 * v171];
        }
        else
        {
          v178 = &v176[32 * v171];
          do
          {
            v179 = v178 - 32;
            v180 = *((_OWORD *)v168 - 2);
            *((_QWORD *)v178 - 2) = *((_QWORD *)v168 - 2);
            *((_OWORD *)v178 - 2) = v180;
            *(v178 - 8) = *(v168 - 8);
            v168 -= 32;
            v178 -= 32;
          }
          while (v168 != v158);
        }
        v518 = &v176[32 * v175];
        v168 = v177 + 32;
        if (v158)
        {
          operator delete(v158);
          v173 = v559;
        }
        else
        {
          v173 = v170;
        }
        v158 = v179;
      }
      else
      {
        v172 = *(_OWORD *)(v159 + 40);
        *((_QWORD *)v168 + 2) = *(_QWORD *)(v159 + 56);
        *(_OWORD *)v168 = v172;
        v168[24] = 1;
        v168 += 32;
        v173 = v170;
      }
      v520 = v158;
      v181 = sub_239C1974C((float *)v546, (unint64_t)v173, &v559);
      v182 = v523[8];
      v536 = v523[9];
      if (v182 != v536)
        break;
LABEL_215:
      v158 = v520;
      v159 = *v523;
      if (!*v523)
        goto LABEL_294;
    }
    v533 = &v520[32 * v171];
    v530 = v181 + 3;
    v527 = v170;
    while (2)
    {
      v183 = *(_QWORD *)v182;
      v184 = (v169 - v162) >> 5;
      *(_OWORD *)v569 = *(_OWORD *)(v182 + 8);
      v570 = *(std::locale::__imp **)(v182 + 24);
      if (v169 >= v163)
      {
        v186 = v184 + 1;
        if ((unint64_t)(v184 + 1) >> 59)
          sub_2394189F8();
        if ((v163 - v162) >> 4 > v186)
          v186 = (v163 - v162) >> 4;
        if ((unint64_t)(v163 - v162) >= 0x7FFFFFFFFFFFFFE0)
          v187 = 0x7FFFFFFFFFFFFFFLL;
        else
          v187 = v186;
        if (v187)
        {
          if (v187 >> 59)
            sub_239418A80();
          v188 = (char *)operator new(32 * v187);
        }
        else
        {
          v188 = 0;
        }
        v189 = &v188[32 * v184];
        *(_OWORD *)v189 = *(_OWORD *)v569;
        *((_QWORD *)v189 + 2) = v570;
        v189[24] = 1;
        if (v169 == v162)
        {
          v191 = &v188[32 * v184];
        }
        else
        {
          v190 = &v188[32 * v184];
          do
          {
            v191 = v190 - 32;
            v192 = *((_OWORD *)v169 - 2);
            *((_QWORD *)v190 - 2) = *((_QWORD *)v169 - 2);
            *((_OWORD *)v190 - 2) = v192;
            *(v190 - 8) = *(v169 - 8);
            v169 -= 32;
            v190 -= 32;
          }
          while (v169 != v162);
        }
        v163 = &v188[32 * v187];
        v169 = v189 + 32;
        if (v162)
          operator delete(v162);
        v162 = v191;
      }
      else
      {
        v185 = *(_OWORD *)(v182 + 8);
        *((_QWORD *)v169 + 2) = *(_QWORD *)(v182 + 24);
        *(_OWORD *)v169 = v185;
        v169[24] = 1;
        v169 += 32;
      }
      v193 = sub_239C1974C((float *)v546, *(_QWORD *)v182, (_QWORD *)v182);
      v194 = v162;
      v195 = (std::locale::__imp *)&v162[32 * v184];
      v196 = (std::string::size_type)(v193 + 3);
      if (v544 == v542)
      {
        v197 = *((double *)v524 + 16);
        v198 = COERCE_DOUBLE(operator new(0x30uLL));
        v199 = *(std::__shared_weak_count **)&v198;
        v200 = 1.0 / v197;
        *(_QWORD *)(*(_QWORD *)&v198 + 8) = 0;
        v201 = (unint64_t *)(*(_QWORD *)&v198 + 8);
        *(_QWORD *)(*(_QWORD *)&v198 + 16) = 0;
        **(_QWORD **)&v198 = &off_250AFE808;
        *(_QWORD *)(*(_QWORD *)&v198 + 24) = &off_250AFE840;
        if (1.0 / v197 < 1.0e-15)
          v202 = NAN;
        else
          v202 = 1.0 / sqrt(v200);
        *(double *)(*(_QWORD *)&v198 + 40) = v202;
        *(_BYTE *)(*(_QWORD *)&v198 + 32) = v200 >= 1.0e-15;
        __dst = (void *)(*(_QWORD *)&v198 + 24);
        v566 = v198;
        v545 = *(std::__shared_weak_count **)&v198;
        do
          v203 = __ldxr(v201);
        while (__stxr(v203 + 1, v201));
        v569[0] = (void *)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v610 - *((_QWORD *)&v609 + 1)) >> 5));
        v570 = v195;
        *(_OWORD *)&v571.__r_.__value_.__r.__words[1] = *(_OWORD *)&v671.__r_.__value_.__l.__data_;
        v571.__r_.__value_.__r.__words[0] = v196;
        v572 = v530;
        v573 = 0;
        *(_QWORD *)&v574 = v533;
        v562 = (void *)(v527 | (v183 << 32));
        LODWORD(v563) = v539;
        v673[0].__locale_ = (std::locale::__imp *)(*(_QWORD *)&v198 + 24);
        v673[1] = *(std::locale *)&v198;
        do
          v204 = __ldxr(v201);
        while (__stxr(v204 + 1, v201));
        v583 = (void (**)())(*(_QWORD *)&v198 + 24);
        *(double *)&v584 = v198;
        v162 = v194;
        do
          v205 = __ldxr(v201);
        while (__stxr(v205 + 1, v201));
        v206 = sub_239C40730((uint64_t)&v602, (__int128 *)v569, (unsigned int *)&v562, *(_QWORD *)&v198 + 24, *(std::__shared_weak_count **)&v198);
        v207 = v206;
        do
          v208 = __ldaxr(v201);
        while (__stlxr(v208 - 1, v201));
        if (v208)
        {
          if ((v206 & 1) == 0)
            goto LABEL_276;
LABEL_279:
          v620[0] = 0;
          locale = v673[1].__locale_;
          if (v673[1].__locale_)
            goto LABEL_280;
LABEL_283:
          v212 = v545;
          if (v545)
            goto LABEL_284;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
          if ((v207 & 1) != 0)
            goto LABEL_279;
LABEL_276:
          locale = v673[1].__locale_;
          if (!v673[1].__locale_)
            goto LABEL_283;
LABEL_280:
          v210 = (unint64_t *)((char *)locale + 8);
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (v211)
            goto LABEL_283;
          (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
          v212 = v545;
          if (v545)
          {
LABEL_284:
            p_shared_owners = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldaxr(p_shared_owners);
            while (__stlxr(v214 - 1, p_shared_owners));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
        }
        v215 = *(std::__shared_weak_count **)&v566;
        if (v566 != 0.0)
        {
          v216 = (unint64_t *)(*(_QWORD *)&v566 + 8);
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
      }
      else
      {
        v569[0] = (void *)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v610 - *((_QWORD *)&v609 + 1)) >> 5));
        v570 = v195;
        *(_OWORD *)&v571.__r_.__value_.__r.__words[1] = *(_OWORD *)&v671.__r_.__value_.__l.__data_;
        v571.__r_.__value_.__r.__words[0] = (std::string::size_type)(v193 + 3);
        v572 = v530;
        v573 = 0;
        *(_QWORD *)&v574 = v533;
        __dst = (void *)(v527 | (v183 << 32));
        LODWORD(v566) = v539;
        v673[0].__locale_ = 0;
        v673[1].__locale_ = 0;
        *(_QWORD *)&v584 = 0;
        v583 = 0;
        v162 = v194;
        if ((sub_239C40730((uint64_t)&v602, (__int128 *)v569, (unsigned int *)&__dst, 0, 0) & 1) != 0)
          v620[0] = 0;
      }
      v182 += 32;
      if (v182 == v536)
        goto LABEL_215;
      continue;
    }
  }
LABEL_294:
  v94 = (double *)v524;
LABEL_295:
  v583 = off_250AFEA50;
  v584 = *(_OWORD *)(v94 + 17);
  v585 = *(_OWORD *)(v94 + 19);
  *(_OWORD *)v586 = *(_OWORD *)(v94 + 21);
  *(_OWORD *)&v586[9] = *(_OWORD *)((char *)v94 + 177);
  v218 = v587;
  v219 = *((_QWORD *)v94 + 28);
  v540 = v162;
  v521 = v158;
  if (v219)
  {
    if ((double *)v219 != v94 + 25)
    {
      v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 16))(v219);
      goto LABEL_298;
    }
    v588 = v587;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v219 + 24))(v219, v587);
  }
  else
  {
LABEL_298:
    v588 = (_BYTE *)v219;
  }
  v220 = v589;
  v221 = *((_QWORD *)v94 + 32);
  if (v221)
  {
    if ((double *)v221 != v94 + 29)
    {
      v221 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
      goto LABEL_303;
    }
    v590 = v589;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v221 + 24))(v221, v589);
  }
  else
  {
LABEL_303:
    v590 = (_BYTE *)v221;
  }
  v591 = -1.0;
  v583 = (void (**)())&off_250AFE9E8;
  v222 = *(_OWORD *)(v94 + 35);
  v592 = *(_OWORD *)(v94 + 33);
  v593 = v222;
  v594 = *((_QWORD *)&v592 + 1);
  v595 = 0x4000000000000000;
  if (DWORD2(v623) != 1)
  {
    DWORD2(v623) = 1;
    BYTE2(v620[0]) = 0;
    LOWORD(v620[0]) = 0;
  }
  v223 = 1.0;
  v224 = 1.0;
  if (v544 == v542)
  {
    v569[1] = 0;
    v569[0] = 0;
    v570 = 0;
    v226 = (_BYTE *)*((_QWORD *)v94 + 13);
    v225 = (_BYTE *)*((_QWORD *)v94 + 14);
    v227 = v225 - v226;
    if (v225 == v226)
    {
      v228 = 0;
      v229 = 0;
    }
    else
    {
      if (v227 < 0)
        sub_2394189F8();
      v228 = (char *)operator new(v225 - v226);
      v229 = (double *)&v228[8 * (v227 >> 3)];
      memcpy(v228, v226, v227);
    }
    v230 = ((char *)v229 - v228) >> 4;
    v231 = (double *)&v228[8 * v230];
    if (v231 != v229)
      sub_2395F71EC((double *)v228, (double *)&v228[8 * v230], v229);
    v224 = *v231;
    v223 = v94[16];
    operator delete(v228);
  }
  *(double *)&v598 = (v224 + v224) * (1.0 - cos(v94[65] * 3.14159265 / 180.0));
  *((double *)&v598 + 1) = *(double *)&v598 * *(double *)&v598;
  *(double *)&v599 = *(double *)&v598 + *(double *)&v598;
  *((double *)&v600 + 1) = (v223 + v223) * (1.0 - cos(v94[66] * 3.14159265 / 180.0));
  *(double *)&v601 = *((double *)&v600 + 1) * *((double *)&v600 + 1);
  *((double *)&v601 + 1) = *((double *)&v600 + 1) + *((double *)&v600 + 1);
  memset(v620, 0, 5);
  kdebug_trace();
  ((void (*)(char *@<X8>))v583[2])((char *)v673);
  ((void (*)(std::string *@<X8>))*v596)(&v671);
  if (SHIBYTE(v673[2].__locale_) < 0)
  {
    sub_23941A7F8(v569, v673[0].__locale_, (unint64_t)v673[1].__locale_);
  }
  else
  {
    *(_OWORD *)v569 = *(_OWORD *)&v673[0].__locale_;
    v570 = v673[2].__locale_;
  }
  if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v571, v671.__r_.__value_.__l.__data_, v671.__r_.__value_.__l.__size_);
    v572 = 0;
    LODWORD(v573) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v574 = _Q0;
    *(_OWORD *)v575 = 0u;
    *(_OWORD *)v576 = 0u;
    v577 = 0u;
    *(_OWORD *)v578 = 0u;
    v579 = 0u;
    v580 = 0u;
    *(_OWORD *)__p = 0u;
    v582 = 0;
    if (SHIBYTE(v671.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v671.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v673[2].__locale_) & 0x80000000) == 0)
        goto LABEL_323;
    }
    else if ((SHIBYTE(v673[2].__locale_) & 0x80000000) == 0)
    {
      goto LABEL_323;
    }
LABEL_320:
    operator delete(v673[0].__locale_);
    goto LABEL_323;
  }
  v571 = v671;
  v572 = 0;
  LODWORD(v573) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v574 = _Q0;
  *(_OWORD *)v575 = 0u;
  *(_OWORD *)v576 = 0u;
  v577 = 0u;
  *(_OWORD *)v578 = 0u;
  v579 = 0u;
  v580 = 0u;
  *(_OWORD *)__p = 0u;
  v582 = 0;
  if (SHIBYTE(v673[2].__locale_) < 0)
    goto LABEL_320;
LABEL_323:
  sub_239C2F538(v569, 2uLL, 2uLL);
  kdebug_trace();
  ((void (*)(uint64_t))v596[4])((uint64_t)&v596);
  v235 = v234;
  v672 = 0;
  v673[0].__locale_ = (std::locale::__imp *)&off_250AFBAD8;
  v673[1].__locale_ = (std::locale::__imp *)&v596;
  v673[2].__locale_ = (std::locale::__imp *)v622;
  v673[3].__locale_ = (std::locale::__imp *)v673;
  sub_23965A910(v673, &v671);
  v236 = (std::locale *)v673[3].__locale_;
  if ((std::locale *)v673[3].__locale_ == v673)
  {
    v237 = 4;
    v236 = v673;
LABEL_327:
    (*((void (**)(void))v236->__locale_ + v237))();
  }
  else if (v673[3].__locale_)
  {
    v237 = 5;
    goto LABEL_327;
  }
  if (((unsigned int (__cdecl *)())v583[3])())
  {
    v622 = 1;
    if (((unsigned int (*)(uint64_t))v583[5])((uint64_t)&v583))
      ((void (*)(uint64_t, double))v583[6])((uint64_t)&v583, 0.0);
    else
      ((void (*)(uint64_t))v583[7])((uint64_t)&v583);
    v238 = ((double (*)(uint64_t))v583[4])((uint64_t)&v583);
    ((void (*)(uint64_t, double))v596[12])((uint64_t)&v596, v238);
  }
  kdebug_trace();
  if (v586[8])
  {
    if (v586[24])
    {
      v673[0].__locale_ = (std::locale::__imp *)&v596;
      v673[1] = *(std::locale *)&v586[16];
      v673[2].__locale_ = (std::locale::__imp *)&__dst;
      sub_239C48E30((uint64_t)v673);
      v239 = (uint64_t)__dst;
      if (*(double *)&__dst <= 0.0)
      {
        v240 = 1.0e20;
        v239 = 0x3DDB7CDFD9D7BDBBLL;
      }
      else
      {
        v240 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
      }
      *(_QWORD *)&v597 = v239;
      *((double *)&v597 + 1) = v240;
      *((_QWORD *)&v599 + 1) = v239;
      *(double *)&v600 = v240;
    }
    else
    {
      v673[0].__locale_ = (std::locale::__imp *)&v596;
      v673[1] = *(std::locale *)&v586[16];
      v673[2].__locale_ = (std::locale::__imp *)&__dst;
      sub_239C48FE8((double *)v673);
      sub_239C49110((double *)v673);
      v241 = 1.0e20;
      v242 = 0x3DDB7CDFD9D7BDBBLL;
      v243 = 0x3DDB7CDFD9D7BDBBLL;
      v244 = 1.0e20;
      if (*(double *)&__dst > 0.0)
      {
        v243 = (uint64_t)__dst;
        v244 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
      }
      *(_QWORD *)&v597 = v243;
      *((double *)&v597 + 1) = v244;
      if (v566 > 0.0)
      {
        v242 = *(_QWORD *)&v566;
        v241 = 1.0 / (v566 * v566);
      }
      *((_QWORD *)&v599 + 1) = v242;
      *(double *)&v600 = v241;
    }
    memset(v620, 0, 5);
  }
  if (((unsigned int (*)(uint64_t))v596[1])((uint64_t)&v596))
  {
    if (BYTE8(v584))
    {
      v245 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v245 + *(_QWORD *)(*v245 - 24)));
      v246 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v246->__vftable[2].~facet_0)(v246, 10);
      std::locale::~locale(v673);
      std::ostream::put();
      std::ostream::flush();
    }
    LODWORD(v573) = 0;
    v247 = v672;
    if (!v672)
      goto LABEL_859;
    goto LABEL_349;
  }
  *(_QWORD *)&v574 = sub_239C49278((uint64_t)&v596, (uint64_t)v575);
  *((_QWORD *)&v574 + 1) = v574;
  v591 = *(double *)&v574;
  sub_23945D3D0(&v576[1], (char *)v575[0], (char *)v575[1], ((char *)v575[1] - (char *)v575[0]) >> 3);
  kdebug_trace();
  v250 = v612;
  if ((_BYTE)v612)
  {
LABEL_353:
    v251 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v608 + 1) - v608) >> 3);
  }
  else
  {
    v294 = v603;
    if (v603 == v604)
    {
LABEL_444:
      v295 = v605;
      if (v605 == &v606)
        goto LABEL_353;
      while ((*((_BYTE *)v295 + 76) & 6) == 0)
      {
        v298 = v295[1];
        if (v298)
        {
          do
          {
            v299 = (uint64_t **)v298;
            v298 = (uint64_t *)*v298;
          }
          while (v298);
        }
        else
        {
          do
          {
            v299 = (uint64_t **)v295[2];
            _ZF = *v299 == (uint64_t *)v295;
            v295 = v299;
          }
          while (!_ZF);
        }
        v295 = v299;
        if (v299 == &v606)
          goto LABEL_353;
      }
    }
    else
    {
      while ((*((_BYTE *)v294 + 92) & 6) == 0)
      {
        v296 = v294[1];
        if (v296)
        {
          do
          {
            v297 = (uint64_t **)v296;
            v296 = (uint64_t *)*v296;
          }
          while (v296);
        }
        else
        {
          do
          {
            v297 = (uint64_t **)v294[2];
            _ZF = *v297 == (uint64_t *)v294;
            v294 = v297;
          }
          while (!_ZF);
        }
        v294 = v297;
        if (v297 == v604)
          goto LABEL_444;
      }
    }
    v300 = v608;
    if ((_QWORD)v608 == *((_QWORD *)&v608 + 1))
    {
      v251 = 0;
    }
    else
    {
      v251 = 0;
      v301 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v300 + 48) + 52) & 6) == 0
          && (*(_BYTE *)(*(_QWORD *)(v300 + 56) + 52) & 6) == 0)
        {
          v251 = ++v301;
        }
        v300 += 120;
      }
      while (v300 != *((_QWORD *)&v608 + 1));
    }
  }
  v252 = (_QWORD *)v579;
  v578[0] = (char *)v578[0] + v251;
  if ((unint64_t)v579 < *((_QWORD *)&v579 + 1))
  {
    *(_QWORD *)v579 = v251;
    v253 = v252 + 1;
    goto LABEL_479;
  }
  v287 = v578[1];
  v288 = v579 - (unint64_t)v578[1];
  v289 = (uint64_t)(v579 - (unint64_t)v578[1]) >> 3;
  v290 = v289 + 1;
  if ((unint64_t)(v289 + 1) >> 61)
    goto LABEL_872;
  v291 = *((_QWORD *)&v579 + 1) - (unint64_t)v578[1];
  if ((uint64_t)(*((_QWORD *)&v579 + 1) - (unint64_t)v578[1]) >> 2 > v290)
    v290 = v291 >> 2;
  if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFF8)
    v292 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v292 = v290;
  if (v292)
  {
    if (!(v292 >> 61))
    {
      v293 = (char *)operator new(8 * v292);
      goto LABEL_470;
    }
LABEL_877:
    sub_239418A80();
  }
  v293 = 0;
LABEL_470:
  v302 = (unint64_t *)&v293[8 * v289];
  v303 = &v293[8 * v292];
  *v302 = v251;
  v253 = v302 + 1;
  if (v252 != (_QWORD *)v287)
  {
    v304 = (char *)v252 - v287 - 8;
    if (v304 < 0x58)
      goto LABEL_883;
    if ((unint64_t)((char *)v252 - &v293[v288]) < 0x20)
      goto LABEL_883;
    v305 = (v304 >> 3) + 1;
    v306 = &v293[8 * v289 - 16];
    v307 = (__int128 *)(v252 - 2);
    v308 = v305 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v309 = *v307;
      *((_OWORD *)v306 - 1) = *(v307 - 1);
      *(_OWORD *)v306 = v309;
      v306 -= 32;
      v307 -= 2;
      v308 -= 4;
    }
    while (v308);
    v302 -= v305 & 0x3FFFFFFFFFFFFFFCLL;
    v252 -= v305 & 0x3FFFFFFFFFFFFFFCLL;
    if (v305 != (v305 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_883:
      do
      {
        v310 = *--v252;
        *--v302 = v310;
      }
      while (v252 != (_QWORD *)v287);
    }
  }
  v578[1] = v302;
  *(_QWORD *)&v579 = v253;
  *((_QWORD *)&v579 + 1) = v303;
  if (v287)
  {
    operator delete(v287);
    v250 = v612;
  }
LABEL_479:
  *(_QWORD *)&v579 = v253;
  if (v250)
  {
LABEL_480:
    v311 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v610 - *((_QWORD *)&v609 + 1)) >> 5);
  }
  else
  {
    v320 = v603;
    if (v603 == v604)
    {
LABEL_493:
      v321 = v605;
      if (v605 == &v606)
        goto LABEL_480;
      while ((*((_BYTE *)v321 + 76) & 6) == 0)
      {
        v324 = v321[1];
        if (v324)
        {
          do
          {
            v325 = (uint64_t **)v324;
            v324 = (uint64_t *)*v324;
          }
          while (v324);
        }
        else
        {
          do
          {
            v325 = (uint64_t **)v321[2];
            _ZF = *v325 == (uint64_t *)v321;
            v321 = v325;
          }
          while (!_ZF);
        }
        v321 = v325;
        if (v325 == &v606)
          goto LABEL_480;
      }
    }
    else
    {
      while ((*((_BYTE *)v320 + 92) & 6) == 0)
      {
        v322 = v320[1];
        if (v322)
        {
          do
          {
            v323 = (uint64_t **)v322;
            v322 = (uint64_t *)*v322;
          }
          while (v322);
        }
        else
        {
          do
          {
            v323 = (uint64_t **)v320[2];
            _ZF = *v323 == (uint64_t *)v320;
            v320 = v323;
          }
          while (!_ZF);
        }
        v320 = v323;
        if (v323 == v604)
          goto LABEL_493;
      }
    }
    v326 = (_QWORD *)*((_QWORD *)&v609 + 1);
    if (*((_QWORD *)&v609 + 1) == (_QWORD)v610)
    {
      v311 = 0;
    }
    else
    {
      v311 = 0;
      v327 = 0;
      do
      {
        if ((*(_BYTE *)(v326[10] + 52) & 6) == 0
          && (*(_BYTE *)(v326[11] + 52) & 6) == 0
          && (*(_BYTE *)(v326[12] + 36) & 6) == 0)
        {
          v311 = ++v327;
        }
        v326 += 20;
      }
      while (v326 != (_QWORD *)v610);
    }
  }
  v578[0] = (char *)v578[0] + v311;
  if ((unint64_t)v253 < *((_QWORD *)&v579 + 1))
  {
    *v253 = v311;
    v312 = v253 + 1;
    goto LABEL_531;
  }
  v313 = (unint64_t *)v578[1];
  v314 = (char *)v253 - (char *)v578[1];
  v315 = ((char *)v253 - (char *)v578[1]) >> 3;
  v316 = v315 + 1;
  if ((unint64_t)(v315 + 1) >> 61)
LABEL_872:
    sub_2394189F8();
  v317 = *((_QWORD *)&v579 + 1) - (unint64_t)v578[1];
  if ((uint64_t)(*((_QWORD *)&v579 + 1) - (unint64_t)v578[1]) >> 2 > v316)
    v316 = v317 >> 2;
  if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF8)
    v318 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v318 = v316;
  if (v318)
  {
    if (v318 >> 61)
      goto LABEL_877;
    v319 = operator new(8 * v318);
  }
  else
  {
    v319 = 0;
  }
  v328 = (unint64_t *)&v319[8 * v315];
  v329 = &v319[8 * v318];
  *v328 = v311;
  v312 = v328 + 1;
  if (v253 != v313)
  {
    v330 = (char *)v253 - (char *)v313 - 8;
    if (v330 < 0x58)
    {
      v331 = v253;
      goto LABEL_528;
    }
    if ((unint64_t)((char *)v253 - &v319[v314]) < 0x20)
    {
      v331 = v253;
      goto LABEL_528;
    }
    v332 = (v330 >> 3) + 1;
    v331 = &v253[-(v332 & 0x3FFFFFFFFFFFFFFCLL)];
    v333 = &v319[8 * v315 - 16];
    v334 = v253 - 2;
    v335 = v332 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v336 = *(_OWORD *)v334;
      *(v333 - 1) = *((_OWORD *)v334 - 1);
      *v333 = v336;
      v333 -= 2;
      v334 -= 4;
      v335 -= 4;
    }
    while (v335);
    v328 -= v332 & 0x3FFFFFFFFFFFFFFCLL;
    if (v332 != (v332 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_528:
        v337 = *--v331;
        *--v328 = v337;
      }
      while (v331 != v313);
    }
  }
  v578[1] = v328;
  *(_QWORD *)&v579 = v312;
  *((_QWORD *)&v579 + 1) = v329;
  if (v313)
  {
    operator delete(v313);
    v250 = v612;
  }
LABEL_531:
  *(_QWORD *)&v579 = v312;
  if (v250)
  {
    v338 = v603;
    if (v603 != v604)
    {
      v339 = 0;
      while (1)
      {
        if ((*((_BYTE *)v338 + 92) & 6) != 0)
        {
          v340 = v338[1];
          if (v340)
            goto LABEL_539;
        }
        else
        {
          v339 += *((unsigned __int8 *)v338 + 44);
          v340 = v338[1];
          if (v340)
          {
            do
            {
LABEL_539:
              v341 = (uint64_t **)v340;
              v340 = (uint64_t *)*v340;
            }
            while (v340);
            goto LABEL_534;
          }
        }
        do
        {
          v341 = (uint64_t **)v338[2];
          _ZF = *v341 == (uint64_t *)v338;
          v338 = v341;
        }
        while (!_ZF);
LABEL_534:
        v338 = v341;
        if (v341 == v604)
          goto LABEL_611;
      }
    }
    v339 = 0;
  }
  else
  {
    memset(v673, 0, sizeof(v673));
    v675 = 0u;
    v676 = 0u;
    v674 = 1065353216;
    v677 = 1065353216;
    v342 = v603;
    if (v603 == v604)
    {
      v339 = 0;
      v343 = 0;
    }
    else
    {
      v339 = 0;
      v343 = 0;
      v344 = 0;
      do
      {
        if ((*((_BYTE *)v342 + 92) & 6) != 0)
          v343 = 1;
        if (*((_BYTE *)v342 + 44))
          v339 = ++v344;
        v345 = v342[1];
        if (v345)
        {
          do
          {
            v346 = (uint64_t **)v345;
            v345 = (uint64_t *)*v345;
          }
          while (v345);
        }
        else
        {
          do
          {
            v346 = (uint64_t **)v342[2];
            _ZF = *v346 == (uint64_t *)v342;
            v342 = v346;
          }
          while (!_ZF);
        }
        v342 = v346;
      }
      while (v346 != v604);
    }
    v347 = v605;
    if (v605 != &v606)
    {
      do
      {
        if ((*((_BYTE *)v347 + 76) & 6) != 0)
          v343 = 1;
        v350 = v347[1];
        if (v350)
        {
          do
          {
            v351 = (uint64_t **)v350;
            v350 = (uint64_t *)*v350;
          }
          while (v350);
        }
        else
        {
          do
          {
            v351 = (uint64_t **)v347[2];
            _ZF = *v351 == (uint64_t *)v347;
            v347 = v351;
          }
          while (!_ZF);
        }
        v347 = v351;
      }
      while (v351 != &v606);
    }
    if (v343)
    {
      v349 = *((_QWORD *)&v608 + 1);
      for (i = v608; i != v349; i += 120)
      {
        v352 = *(_QWORD *)(i + 48);
        if ((*(_BYTE *)(v352 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(i + 56) + 52) & 6) != 0)
        {
          LODWORD(v562) = *(_DWORD *)v352;
          *(double *)&__dst = COERCE_DOUBLE(&v562);
          v353 = sub_2395EC77C((uint64_t)v673, (unsigned int *)&v562, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v353 + 5);
          LODWORD(v562) = **(_DWORD **)(i + 56);
          *(double *)&__dst = COERCE_DOUBLE(&v562);
          v354 = sub_2395EC77C((uint64_t)v673, (unsigned int *)&v562, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v354 + 5);
        }
      }
      sub_239C29188(*((uint64_t **)&v609 + 1), (uint64_t *)v610, (uint64_t)v673);
      v355 = v673[2].__locale_;
      if (v673[2].__locale_)
      {
        if (v604[0])
        {
          v356 = 0;
          do
          {
            v358 = *((_DWORD *)v355 + 4);
            v357 = v604;
            v359 = (uint64_t *)v604[0];
            do
            {
              v360 = v359;
              v361 = v357;
              v362 = *((_DWORD *)v359 + 8);
              if (v362 >= v358)
                v357 = v359;
              else
                ++v359;
              v359 = (uint64_t *)*v359;
            }
            while (v359);
            if (v357 == v604)
              goto LABEL_579;
            if (v362 < v358)
              v360 = v361;
            if (v358 < *((_DWORD *)v360 + 8))
LABEL_579:
              v357 = v604;
            if (*((_DWORD *)v357 + 24) == *((_DWORD *)v355 + 5))
              ++v356;
            v355 = *(std::locale::__imp **)v355;
          }
          while (v355);
        }
        else
        {
          v356 = 0;
          do
          {
            if (DWORD2(v611) == *((_DWORD *)v355 + 5))
              ++v356;
            v355 = *(std::locale::__imp **)v355;
          }
          while (v355);
        }
      }
      else
      {
        v356 = 0;
      }
      if (v339 >= v356)
        v339 -= v356;
      else
        v339 = 0;
      v363 = (_QWORD *)v676;
      if ((_QWORD)v676)
      {
        do
        {
          v364 = (_QWORD *)*v363;
          operator delete(v363);
          v363 = v364;
        }
        while (v364);
      }
    }
    v365 = (void *)v675;
    *(_QWORD *)&v675 = 0;
    if (v365)
      operator delete(v365);
    v366 = v673[2].__locale_;
    if (v673[2].__locale_)
    {
      do
      {
        v367 = *(std::locale::__imp **)v366;
        operator delete(v366);
        v366 = v367;
      }
      while (v367);
    }
    v368 = v673[0].__locale_;
    v673[0].__locale_ = 0;
    if (v368)
      operator delete(v368);
  }
LABEL_611:
  v369 = v339;
  v580.i64[0] += v339;
  v580.i64[1] += 3 * v339;
  v370 = (char *)__p[1];
  if (__p[1] >= v582)
  {
    v372 = __p[0];
    v373 = (char *)__p[1] - (char *)__p[0];
    v374 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v375 = v374 + 1;
    if ((unint64_t)(v374 + 1) >> 61)
      goto LABEL_873;
    v376 = v582 - (char *)__p[0];
    if ((v582 - (char *)__p[0]) >> 2 > v375)
      v375 = v376 >> 2;
    if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
      v377 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v377 = v375;
    if (v377)
    {
      if (v377 >> 61)
        goto LABEL_878;
      v378 = operator new(8 * v377);
    }
    else
    {
      v378 = 0;
    }
    v379 = &v378[8 * v374];
    v380 = &v378[8 * v377];
    *v379 = v369;
    v371 = v379 + 1;
    if (v370 != v372)
    {
      v381 = v370 - v372 - 8;
      if (v381 < 0x58)
        goto LABEL_884;
      if ((unint64_t)(v370 - v378 - v373) < 0x20)
        goto LABEL_884;
      v382 = (v381 >> 3) + 1;
      v383 = &v378[8 * v374 - 16];
      v384 = v370 - 16;
      v385 = v382 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v386 = *(_OWORD *)v384;
        *(v383 - 1) = *((_OWORD *)v384 - 1);
        *v383 = v386;
        v383 -= 2;
        v384 -= 32;
        v385 -= 4;
      }
      while (v385);
      v379 -= v382 & 0x3FFFFFFFFFFFFFFCLL;
      v370 -= 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
      if (v382 != (v382 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_884:
        do
        {
          v387 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *--v379 = v387;
        }
        while (v370 != v372);
      }
    }
    __p[0] = v379;
    __p[1] = v371;
    v582 = v380;
    if (v372)
      operator delete(v372);
  }
  else
  {
    *(_QWORD *)__p[1] = v369;
    v371 = v370 + 8;
  }
  __p[1] = v371;
  if ((_BYTE)v612)
  {
    v388 = v605;
    if (v605 != &v606)
    {
      v389 = 0;
      while (1)
      {
        if ((*((_BYTE *)v388 + 76) & 6) != 0)
        {
          v390 = v388[1];
          if (v390)
            goto LABEL_640;
        }
        else
        {
          v389 += *((unsigned __int8 *)v388 + 44);
          v390 = v388[1];
          if (v390)
          {
            do
            {
LABEL_640:
              v391 = (uint64_t **)v390;
              v390 = (uint64_t *)*v390;
            }
            while (v390);
            goto LABEL_635;
          }
        }
        do
        {
          v391 = (uint64_t **)v388[2];
          _ZF = *v391 == (uint64_t *)v388;
          v388 = v391;
        }
        while (!_ZF);
LABEL_635:
        v388 = v391;
        if (v391 == &v606)
          goto LABEL_711;
      }
    }
    v389 = 0;
  }
  else
  {
    memset(v673, 0, sizeof(v673));
    v675 = 0u;
    v676 = 0u;
    v674 = 1065353216;
    v677 = 1065353216;
    v392 = v603;
    if (v603 == v604)
    {
      v393 = 0;
    }
    else
    {
      v393 = 0;
      do
      {
        if ((*((_BYTE *)v392 + 92) & 6) != 0)
          v393 = 1;
        v394 = v392[1];
        if (v394)
        {
          do
          {
            v395 = (uint64_t **)v394;
            v394 = (uint64_t *)*v394;
          }
          while (v394);
        }
        else
        {
          do
          {
            v395 = (uint64_t **)v392[2];
            _ZF = *v395 == (uint64_t *)v392;
            v392 = v395;
          }
          while (!_ZF);
        }
        v392 = v395;
      }
      while (v395 != v604);
    }
    v396 = v605;
    if (v605 == &v606)
    {
      v389 = 0;
    }
    else
    {
      v389 = 0;
      v397 = 0;
      do
      {
        if ((*((_BYTE *)v396 + 76) & 6) != 0)
          v393 = 1;
        if (*((_BYTE *)v396 + 44))
          v389 = ++v397;
        v398 = v396[1];
        if (v398)
        {
          do
          {
            v399 = (uint64_t **)v398;
            v398 = (uint64_t *)*v398;
          }
          while (v398);
        }
        else
        {
          do
          {
            v399 = (uint64_t **)v396[2];
            _ZF = *v399 == (uint64_t *)v396;
            v396 = v399;
          }
          while (!_ZF);
        }
        v396 = v399;
      }
      while (v399 != &v606);
    }
    if (v393)
    {
      v401 = *((_QWORD *)&v608 + 1);
      for (j = v608; j != v401; j += 120)
      {
        v402 = *(_QWORD *)(j + 48);
        if ((*(_BYTE *)(v402 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(j + 56) + 52) & 6) != 0)
        {
          LODWORD(v562) = *(_DWORD *)v402;
          *(double *)&__dst = COERCE_DOUBLE(&v562);
          v403 = sub_2395EC77C((uint64_t)v673, (unsigned int *)&v562, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v403 + 5);
          LODWORD(v562) = **(_DWORD **)(j + 56);
          *(double *)&__dst = COERCE_DOUBLE(&v562);
          v404 = sub_2395EC77C((uint64_t)v673, (unsigned int *)&v562, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v404 + 5);
        }
      }
      sub_239C29188(*((uint64_t **)&v609 + 1), (uint64_t *)v610, (uint64_t)v673);
      v405 = (_QWORD *)v676;
      if ((_QWORD)v676)
      {
        if (v606)
        {
          v406 = 0;
          v407 = (uint64_t *)v676;
          do
          {
            v409 = *((_DWORD *)v407 + 4);
            v408 = &v606;
            v410 = v606;
            do
            {
              v411 = v410;
              v412 = v408;
              v413 = *((_DWORD *)v410 + 8);
              if (v413 >= v409)
                v408 = (uint64_t **)v410;
              else
                ++v410;
              v410 = (uint64_t *)*v410;
            }
            while (v410);
            if (v408 == &v606)
              goto LABEL_682;
            if (v413 < v409)
              v411 = (uint64_t *)v412;
            if (v409 < *((_DWORD *)v411 + 8))
LABEL_682:
              v408 = &v606;
            if (*((_DWORD *)v408 + 20) == *((_DWORD *)v407 + 5))
              ++v406;
            v407 = (uint64_t *)*v407;
          }
          while (v407);
        }
        else
        {
          v406 = 0;
          v414 = (uint64_t *)v676;
          do
          {
            if (v612 == *((_DWORD *)v414 + 5))
              ++v406;
            v414 = (uint64_t *)*v414;
          }
          while (v414);
        }
        _CF = v389 >= v406;
        v415 = v389 - v406;
        if (_CF)
          v389 = v415;
        else
          v389 = 0;
        do
        {
          v416 = (_QWORD *)*v405;
          operator delete(v405);
          v405 = v416;
        }
        while (v416);
      }
    }
    v417 = (void *)v675;
    *(_QWORD *)&v675 = 0;
    if (v417)
      operator delete(v417);
    v418 = v673[2].__locale_;
    if (v673[2].__locale_)
    {
      do
      {
        v419 = *(std::locale::__imp **)v418;
        operator delete(v418);
        v418 = v419;
      }
      while (v419);
    }
    v420 = v673[0].__locale_;
    v673[0].__locale_ = 0;
    if (v420)
      operator delete(v420);
    v371 = __p[1];
  }
LABEL_711:
  v421 = v389;
  v580 = vaddq_s64(v580, vdupq_n_s64(v389));
  if (v371 >= (_QWORD *)v582)
  {
    v423 = __p[0];
    v424 = (char *)v371 - (char *)__p[0];
    v425 = ((char *)v371 - (char *)__p[0]) >> 3;
    v426 = v425 + 1;
    if (!((unint64_t)(v425 + 1) >> 61))
    {
      v427 = v582 - (char *)__p[0];
      if ((v582 - (char *)__p[0]) >> 2 > v426)
        v426 = v427 >> 2;
      if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFF8)
        v428 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v428 = v426;
      if (!v428)
      {
        v429 = 0;
LABEL_723:
        v430 = &v429[8 * v425];
        v431 = &v429[8 * v428];
        *v430 = v421;
        v422 = v430 + 1;
        if (v371 == (_QWORD *)v423)
          goto LABEL_732;
        v432 = (char *)v371 - v423 - 8;
        if (v432 >= 0x58)
        {
          if ((unint64_t)((char *)v371 - v429 - v424) >= 0x20)
          {
            v434 = (v432 >> 3) + 1;
            v433 = &v371[-(v434 & 0x3FFFFFFFFFFFFFFCLL)];
            v435 = &v429[8 * v425 - 16];
            v436 = (__int128 *)(v371 - 2);
            v437 = v434 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v438 = *v436;
              *(v435 - 1) = *(v436 - 1);
              *v435 = v438;
              v435 -= 2;
              v436 -= 2;
              v437 -= 4;
            }
            while (v437);
            v430 -= v434 & 0x3FFFFFFFFFFFFFFCLL;
            if (v434 == (v434 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_732:
              __p[0] = v430;
              __p[1] = v422;
              v582 = v431;
              if (v423)
                operator delete(v423);
              goto LABEL_734;
            }
          }
          else
          {
            v433 = v371;
          }
        }
        else
        {
          v433 = v371;
        }
        do
        {
          v439 = *--v433;
          *--v430 = v439;
        }
        while (v433 != (_QWORD *)v423);
        goto LABEL_732;
      }
      if (!(v428 >> 61))
      {
        v429 = operator new(8 * v428);
        goto LABEL_723;
      }
LABEL_878:
      sub_239418A80();
    }
LABEL_873:
    sub_2394189F8();
  }
  *v371 = v389;
  v422 = v371 + 1;
LABEL_734:
  __p[1] = v422;
  if (((unsigned int (__cdecl *)())v583[3])())
  {
    if (((unsigned int (*)(uint64_t))v583[5])((uint64_t)&v583))
    {
      v443 = ((double (*)(uint64_t, double, double, float64x2_t))v596[11])((uint64_t)&v596, v440, v441, v442);
      ((void (*)(uint64_t, double))v583[6])((uint64_t)&v583, v443);
    }
    else
    {
      ((void (*)(uint64_t))v583[7])((uint64_t)&v583);
    }
    v444 = ((double (*)(uint64_t))v583[4])((uint64_t)&v583);
    ((void (*)(uint64_t, double))v596[12])((uint64_t)&v596, v444);
  }
  v445 = v625;
  v446 = 8 * v625;
  v447 = (v446 + 31) & 0xFFFFFFFE0;
  *(double *)&__dst = 0.0;
  *(_QWORD *)&v566 = v447 >> 3;
  v673[0].__locale_ = 0;
  malloc_type_posix_memalign((void **)&v673[0].__locale_, 0x20uLL, v447, 0x100BBD03uLL);
  v448 = (double *)v673[0].__locale_;
  __dst = v673[0].__locale_;
  v94 = (double *)v524;
  v162 = v540;
  v218 = v587;
  if (!v673[0].__locale_)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v512 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v512, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v445)
  {
    memcpy(v673[0].__locale_, __src[0], v446);
    v448 = (double *)__dst;
  }
  v567 = v625;
  v449 = fabs(*v448);
  if (v625 != 1)
  {
    v450 = v448 + 1;
    v451 = 8 * v625 - 8;
    do
    {
      v452 = *v450++;
      v453 = fabs(v452);
      if (v449 < v453)
        v449 = v453;
      v451 -= 8;
    }
    while (v451);
  }
  if (v449 < v449 * *(double *)&v585)
  {
    if (BYTE8(v584))
    {
      v454 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v454 + *(_QWORD *)(*v454 - 24)));
      v455 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v455->__vftable[2].~facet_0)(v455, 10);
      std::locale::~locale(v673);
      std::ostream::put();
      std::ostream::flush();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
      v456 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v456, (uint64_t)"][", 2);
      if (v449 == 0.0)
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
      else
        std::ostream::operator<<();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
      v508 = (_QWORD *)std::ostream::operator<<();
      v509 = sub_239458500(v508, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v509 + *(_QWORD *)(*v509 - 24)));
      v510 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v510->__vftable[2].~facet_0)(v510, 10);
      std::locale::~locale(v673);
      std::ostream::put();
      std::ostream::flush();
    }
    LODWORD(v573) = 1;
    goto LABEL_858;
  }
  v457 = v591;
  kdebug_trace();
  v562 = 0;
  v563 = 0;
  v564 = 0;
  v458 = v449;
  do
  {
    v461 = (int)v572;
    if ((int)v572 >= SDWORD1(v584))
      break;
    v462 = (_DWORD)v572 + 1;
    LODWORD(v572) = (_DWORD)v572 + 1;
    if (((unsigned int (*)(uint64_t, uint64_t))v596[2])((uint64_t)&v596, (uint64_t)&v562))
    {
      v503 = BYTE8(v584);
      if (BYTE8(v584))
      {
        v504 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
        std::ios_base::getloc((const std::ios_base *)((char *)v504 + *(_QWORD *)(*v504 - 24)));
        v505 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v505->__vftable[2].~facet_0)(v505, 10);
        std::locale::~locale(v673);
        std::ostream::put();
        std::ostream::flush();
        v503 = 0;
      }
      goto LABEL_851;
    }
    ++HIDWORD(v572);
    if (v564)
    {
      v463 = *(double *)v562 * *(double *)v562;
      if (v564 != 1)
      {
        v464 = (double *)((char *)v562 + 8);
        v465 = (v564 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v465 >= 3)
        {
          v466 = v465 + 1;
          v467 = (float64x2_t *)((char *)v562 + 24);
          v468 = v466 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v469 = vmulq_f64(v467[-1], v467[-1]);
            v470 = vmulq_f64(*v467, *v467);
            v463 = v463 + v469.f64[0] + v469.f64[1] + v470.f64[0] + v470.f64[1];
            v467 += 2;
            v468 -= 4;
          }
          while (v468);
          if (v466 == (v466 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_767;
          v464 += v466 & 0x3FFFFFFFFFFFFFFCLL;
        }
        do
        {
          v471 = *v464++;
          v463 = v463 + v471 * v471;
        }
        while (v464 != (double *)((char *)v562 + 8 * v564));
      }
    }
    else
    {
      v463 = 0.0;
    }
LABEL_767:
    v472 = sqrt(v463);
    if (v472 < *((double *)&v585 + 1) * (v235 + *((double *)&v585 + 1)) && v461 >= (int)v584)
    {
      if (BYTE8(v584))
      {
        v506 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
        std::ios_base::getloc((const std::ios_base *)((char *)v506 + *(_QWORD *)(*v506 - 24)));
        v507 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v507->__vftable[2].~facet_0)(v507, 10);
        std::locale::~locale(v673);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v583[8])((uint64_t)&v583, v457, v472, v458, v449);
      }
      v503 = 2;
LABEL_851:
      LODWORD(v573) = v503;
      break;
    }
    ((void (*)(uint64_t, _QWORD *))v596[5])((uint64_t)&v596, &v562);
    v474 = v625;
    sub_23945215C((uint64_t)&__dst, v625);
    if ((_DWORD)v474)
      memcpy(__dst, __src[0], 8 * v474);
    v567 = v625;
    if (v590)
      (*(void (**)(_BYTE *))(*(_QWORD *)v590 + 48))(v590);
    v559 = 0;
    v560 = 0;
    v561 = 0;
    v475 = v576[1];
    v476 = v577 - (unint64_t)v576[1];
    if ((void *)v577 != v576[1])
    {
      if (v476 < 0)
        sub_2394189F8();
      v559 = operator new(v577 - (unint64_t)v576[1]);
      v560 = (char *)v559;
      v477 = (char *)v559 + 8 * (v476 >> 3);
      v561 = v477;
      memcpy(v559, v475, v476);
      v560 = v477;
      v162 = v540;
    }
    v94 = (double *)v524;
    v457 = sub_239C49278((uint64_t)&v596, (uint64_t)&v576[1]);
    v458 = fabs(*(double *)__dst);
    if (v567 != 1)
    {
      v478 = (double *)((char *)__dst + 8);
      v479 = 8 * v567 - 8;
      do
      {
        v480 = *v478++;
        v481 = fabs(v480);
        if (v458 < v481)
          v458 = v481;
        v479 -= 8;
      }
      while (v479);
    }
    if (BYTE8(v584))
      ((void (*)(uint64_t, double, double, double, double))v583[8])((uint64_t)&v583, v457, v472, v458, v449);
    if (v457 == 0.0)
    {
      if (BYTE8(v584))
      {
        v482 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v483 = sub_239458500(v482, (uint64_t)"N.A.", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v483 + *(_QWORD *)(*v483 - 24)));
        v484 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v484->__vftable[2].~facet_0)(v484, 10);
        std::locale::~locale(v673);
        std::ostream::put();
        goto LABEL_811;
      }
      goto LABEL_812;
    }
    if (vabdd_f64(v457, v591) < v457 * *(double *)v586 && v461 >= (int)v584)
    {
      if (BYTE8(v584))
      {
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v491 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v491 + *(_QWORD *)(*v491 - 24)));
        v492 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v492->__vftable[2].~facet_0)(v492, 10);
        std::locale::~locale(v673);
        std::ostream::put();
LABEL_811:
        std::ostream::flush();
      }
LABEL_812:
      v591 = v457;
      v493 = 3;
LABEL_813:
      v459 = 0;
      LODWORD(v573) = v493;
      v460 = (char *)v559;
      if (!v559)
        continue;
      goto LABEL_753;
    }
    if (DWORD2(v623))
    {
      memset(v673, 0, 20);
      ((void (*)(uint64_t, uint64_t))v596[19])((uint64_t)&v596, (uint64_t)v673);
      v486 = ((BOOL (*)(double *, uint64_t, double **, double **, double))v583[10])((double *)&v583, (uint64_t)&v562, (double **)&__dst, (double **)v673, v457);
      free(v673[0].__locale_);
      if (!v486)
        goto LABEL_816;
    }
    else if (!((BOOL (*)(double *, uint64_t, double **, double))v583[9])((double *)&v583, (uint64_t)&v562, (double **)&__dst, v457))
    {
LABEL_816:
      --HIDWORD(v572);
      v494 = v603;
      if (v603 != v604)
      {
        do
        {
          if (*((_BYTE *)v494 + 44))
          {
            *(_OWORD *)(v494 + 7) = *(_OWORD *)(v494 + 13);
            v494[9] = v494[15];
            *((_BYTE *)v494 + 80) = *((_BYTE *)v494 + 128);
          }
          v497 = v494[1];
          if (v497)
          {
            do
            {
              v498 = (uint64_t **)v497;
              v497 = (uint64_t *)*v497;
            }
            while (v497);
          }
          else
          {
            do
            {
              v498 = (uint64_t **)v494[2];
              _ZF = *v498 == (uint64_t *)v494;
              v494 = v498;
            }
            while (!_ZF);
          }
          v494 = v498;
        }
        while (v498 != v604);
      }
      v495 = v605;
      if (v605 != &v606)
      {
        do
        {
          if (*((_BYTE *)v495 + 44))
          {
            v495[7] = v495[11];
            *((_BYTE *)v495 + 64) = *((_BYTE *)v495 + 96);
          }
          v499 = v495[1];
          if (v499)
          {
            do
            {
              v500 = (uint64_t **)v499;
              v499 = (uint64_t *)*v499;
            }
            while (v499);
          }
          else
          {
            do
            {
              v500 = (uint64_t **)v495[2];
              _ZF = *v500 == (uint64_t *)v495;
              v495 = v500;
            }
            while (!_ZF);
          }
          v495 = v500;
        }
        while (v500 != &v606);
      }
      LOBYTE(v620[0]) = 0;
      *(_WORD *)((char *)v620 + 3) = 0;
      BYTE1(v620[0]) = BYTE2(v620[0]);
      sub_23945D3D0(&v576[1], (char *)v559, v560, (v560 - (_BYTE *)v559) >> 3);
      if (((unsigned int (__cdecl *)())v583[3])())
      {
        v496 = ((double (*)(uint64_t))v583[4])((uint64_t)&v583);
        ((void (*)(uint64_t, double))v596[12])((uint64_t)&v596, v496);
      }
      goto LABEL_843;
    }
    if (((unsigned int (__cdecl *)())v583[3])())
    {
      v487 = ((double (*)(uint64_t))v583[4])((uint64_t)&v583);
      ((void (*)(uint64_t, double))v596[12])((uint64_t)&v596, v487);
    }
    if (v458 < v449 * *(double *)&v585 && v461 >= (int)v584)
    {
      if (BYTE8(v584))
      {
        v501 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v501 + *(_QWORD *)(*v501 - 24)));
        v502 = std::locale::use_facet(v673, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v502->__vftable[2].~facet_0)(v502, 10);
        std::locale::~locale(v673);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v583[8])((uint64_t)&v583, v457, v472, v458, v449);
      }
      v493 = 1;
      goto LABEL_813;
    }
    if (v462 < SDWORD1(v584) && v586[8])
    {
      if (v586[24])
      {
        v673[0].__locale_ = (std::locale::__imp *)&v596;
        v673[1] = *(std::locale *)&v586[16];
        v673[2].__locale_ = (std::locale::__imp *)&v568;
        sub_239C48E30((uint64_t)v673);
        v489 = 0x3DDB7CDFD9D7BDBBLL;
        v490 = 1.0e20;
        if (v568 > 0.0)
        {
          v489 = *(_QWORD *)&v568;
          v490 = 1.0 / (v568 * v568);
        }
        *(_QWORD *)&v597 = v489;
        *((double *)&v597 + 1) = v490;
        *((_QWORD *)&v599 + 1) = v489;
        *(double *)&v600 = v490;
        memset(v620, 0, 5);
      }
      else
      {
        sub_239C49780((uint64_t)&v596, *(double *)&v586[16]);
      }
      v591 = sub_239C49278((uint64_t)&v596, (uint64_t)&v576[1]);
    }
LABEL_843:
    if (v462 < SDWORD1(v584) && v588)
      (*(void (**)(_BYTE *))(*(_QWORD *)v588 + 48))(v588);
    v459 = 1;
    v460 = (char *)v559;
    if (!v559)
      continue;
LABEL_753:
    v560 = v460;
    operator delete(v460);
  }
  while ((v459 & 1) != 0);
  *((double *)&v574 + 1) = v591;
  if (v588)
    (*(void (**)(_BYTE *))(*(_QWORD *)v588 + 48))(v588);
  free(v562);
  v218 = v587;
LABEL_858:
  free(__dst);
  v247 = v672;
  if (!v672)
LABEL_859:
    sub_2394172E0();
LABEL_349:
  (*(void (**)(std::string *))(v247->__r_.__value_.__r.__words[0] + 48))(v247);
  v248 = v672;
  if (v672 == &v671)
  {
    v249 = 4;
    v248 = &v671;
LABEL_357:
    (*(void (**)(void))(v248->__r_.__value_.__r.__words[0] + 8 * v249))();
  }
  else if (v672)
  {
    v249 = 5;
    goto LABEL_357;
  }
  kdebug_trace();
  sub_239C19F80((uint64_t)(v94 + 37), (__int128 *)v569);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v578[1])
  {
    *(void **)&v579 = v578[1];
    operator delete(v578[1]);
  }
  if (v576[1])
  {
    *(void **)&v577 = v576[1];
    operator delete(v576[1]);
  }
  if (v575[0])
  {
    v575[1] = v575[0];
    operator delete(v575[0]);
  }
  if (SHIBYTE(v571.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v571.__r_.__value_.__l.__data_);
    if (SHIBYTE(v570) < 0)
      goto LABEL_404;
  }
  else
  {
    if ((SHIBYTE(v570) & 0x80000000) == 0)
      goto LABEL_368;
LABEL_404:
    operator delete(v569[0]);
  }
LABEL_368:
  v254 = v603;
  if (v603 != v604)
  {
    do
    {
      if (*((_BYTE *)v254 + 44))
      {
        v267 = v254[6];
        if (v267)
        {
          v268 = *(_OWORD *)(v254 + 7);
          v267[2] = (uint64_t)v254[9];
          *(_OWORD *)v267 = v268;
          *((_BYTE *)v267 + 24) = *((_BYTE *)v254 + 80);
        }
      }
      v269 = v254[1];
      if (v269)
      {
        do
        {
          v270 = (uint64_t **)v269;
          v269 = (uint64_t *)*v269;
        }
        while (v269);
      }
      else
      {
        do
        {
          v270 = (uint64_t **)v254[2];
          _ZF = *v270 == (uint64_t *)v254;
          v254 = v270;
        }
        while (!_ZF);
      }
      v254 = v270;
    }
    while (v270 != v604);
  }
  v255 = v605;
  if (v605 != &v606)
  {
    do
    {
      if (*((_BYTE *)v255 + 44))
      {
        v271 = v255[6];
        if (v271)
        {
          v272 = v255[7];
          *((_BYTE *)v271 + 8) = *((_BYTE *)v255 + 64);
          *v271 = (uint64_t)v272;
        }
      }
      v273 = v255[1];
      if (v273)
      {
        do
        {
          v274 = (uint64_t **)v273;
          v273 = (uint64_t *)*v273;
        }
        while (v273);
      }
      else
      {
        do
        {
          v274 = (uint64_t **)v255[2];
          _ZF = *v274 == (uint64_t *)v255;
          v255 = v274;
        }
        while (!_ZF);
      }
      v255 = v274;
    }
    while (v274 != &v606);
  }
  if (*((_BYTE *)v94 + 144))
  {
    sub_2394988CC((uint64_t)v569);
    HIBYTE(v673[2].__locale_) = 18;
    strcpy((char *)v673, "TranslationAverage");
    sub_239C1A0F4((uint64_t)(v94 + 37), &v570, (uint64_t)v673);
    if (SHIBYTE(v673[2].__locale_) < 0)
      operator delete(v673[0].__locale_);
    v569[0] = *(void **)MEMORY[0x24BEDB7F0];
    v256 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v569 + *((_QWORD *)v569[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v570 = v256;
    v571.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v576[1]) < 0)
      operator delete(v575[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v578);
  }
  for (k = (uint64_t *)*((_QWORD *)v94 + 2); k; k = (uint64_t *)*k)
  {
    v258 = sub_239C18404((float *)v556, k[2], k + 2);
    v259 = *((double *)v258 + 5);
    _Q1 = *(float64x2_t *)(v258 + 24);
    _D4 = k[9];
    v262 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(k + 3), _Q1.f64[0]), *(float64x2_t *)(k + 7), _Q1, 1), *(float64x2_t *)(k + 11), v259);
    __asm { FMLA            D2, D4, V1.D[1] }
    v264.f64[0] = _D2 + *((double *)k + 13) * v259;
    *(float64x2_t *)(k + 15) = vnegq_f64(v262);
    k[17] = *(_OWORD *)&vnegq_f64(v264);
  }
  for (m = (_QWORD *)*((_QWORD *)v94 + 7); m; m = (_QWORD *)*m)
    m[4] = sub_239C18878((float *)v553, m[2], m + 2)[3];
  v583 = off_250AFEA50;
  if (v590 == v589)
  {
    v266 = 4;
LABEL_406:
    (*(void (**)(_QWORD *))(*v220 + 8 * v266))(v220);
  }
  else if (v590)
  {
    v266 = 5;
    v220 = v590;
    goto LABEL_406;
  }
  if (v588 == v587)
  {
    v276 = 4;
    v275 = v521;
LABEL_411:
    (*(void (**)(_QWORD *))(*v218 + 8 * v276))(v218);
  }
  else
  {
    v275 = v521;
    if (v588)
    {
      v276 = 5;
      v218 = v588;
      goto LABEL_411;
    }
  }
  if (v162)
    operator delete(v162);
  if (v275)
    operator delete(v275);
  v277 = v547[0];
  if (v547[0])
  {
    do
    {
      v278 = (_QWORD *)*v277;
      operator delete(v277);
      v277 = v278;
    }
    while (v278);
  }
  v279 = v546[0];
  v546[0] = 0;
  if (v279)
    operator delete(v279);
  if (v516)
    operator delete(v516);
  v280 = v554[0];
  if (v554[0])
  {
    do
    {
      v281 = (_QWORD *)*v280;
      operator delete(v280);
      v280 = v281;
    }
    while (v281);
  }
  v282 = v553[0];
  v553[0] = 0;
  if (v282)
    operator delete(v282);
  v283 = v557[0];
  if (v557[0])
  {
    do
    {
      v284 = (_QWORD *)*v283;
      operator delete(v283);
      v283 = v284;
    }
    while (v284);
  }
  v285 = v556[0];
  v556[0] = 0;
  if (v285)
    operator delete(v285);
  v596 = off_250AFB6B8;
  free(v670[1]);
  free(v669[0]);
  v596 = off_250AFB770;
  free(v665[0]);
  free(v663[1]);
  sub_239C40AE0((uint64_t)&v596);
  v3 = v513;
  v2 = v514;
  return v3 != v2;
}

void sub_239C10010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  void *a69;
  uint64_t v69;
  unint64_t *v71;
  uint64_t v72;

  std::locale::~locale((std::locale *)(v69 - 256));
  free(a66);
  free(a69);
  if (!STACK[0x7E8])
    sub_2394172E0();
  (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x7E8] + 48))(STACK[0x7E8]);
  v71 = (unint64_t *)STACK[0x7E8];
  if ((unint64_t *)STACK[0x7E8] == &STACK[0x7D0])
  {
    v72 = 4;
    v71 = &STACK[0x7D0];
  }
  else
  {
    if (!v71)
      goto LABEL_8;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_8:
  sub_239C0BE14((uint64_t)&STACK[0x200]);
  sub_239C30284();
  sub_239C1AAB0(&STACK[0x320]);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  sub_239420950((uint64_t)&a41);
  if (a12)
    operator delete(a12);
  sub_239420950((uint64_t)&a51);
  sub_239420950((uint64_t)&a57);
  sub_239C40BD8((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_239C103D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_239A4D7C0((uint64_t)&a47);
  JUMPOUT(0x239C10508);
}

void sub_239C103E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_239A4D7C0((uint64_t)&a49);
  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  JUMPOUT(0x239C10508);
}

void sub_239C10428()
{
  sub_239C1AAB0(&STACK[0x320]);
  JUMPOUT(0x239C104D8);
}

void sub_239C10458()
{
  JUMPOUT(0x239C10510);
}

void sub_239C10460()
{
  JUMPOUT(0x239C10518);
}

void sub_239C1046C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;

  if (v41)
    operator delete(v41);
  if (a14)
    operator delete(a14);
  sub_239420950((uint64_t)&a41);
  if (!a12)
    JUMPOUT(0x239C10510);
  JUMPOUT(0x239C10508);
}

void sub_239C104A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  sub_239A4D7C0(v69 - 256);
  sub_239A4D7C0((uint64_t)&a39);
  sub_239A4D7C0((uint64_t)&a69);
  JUMPOUT(0x239C104D0);
}

void sub_239C104CC()
{
  JUMPOUT(0x239C104D8);
}

BOOL sub_239C10530(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  char *v16;
  unint64_t v17;
  unint64_t *v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  double v28;
  char *v29;
  int8x16_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  unsigned int v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  _QWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  _QWORD *v62;
  void **v63;
  unsigned int v64;
  int v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t **v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  _DWORD *v75;
  void *v76;
  void (**v77)();
  unsigned int *v78;
  unsigned int *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned int *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 v92;
  unsigned int v93;
  double *v94;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  uint8x8_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  int8x8_t v116;
  uint8x8_t v117;
  unint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  float64x2_t v124;
  double v126;
  double v128;
  float64x2_t v130;
  char *v139;
  double v140;
  char *v141;
  std::__shared_weak_count *v142;
  double v143;
  unint64_t *v144;
  double v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  __int128 v151;
  unint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  char *v162;
  char *v163;
  double *v164;
  double *v165;
  int v166;
  double v167;
  char *v168;
  char *v169;
  void *v170;
  uint64_t v171;
  __int128 v172;
  void *v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  __int128 v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  __int128 v192;
  _QWORD *v193;
  char *v194;
  std::locale::__imp *v195;
  std::string::size_type v196;
  double v197;
  double v198;
  std::__shared_weak_count *v199;
  double v200;
  unint64_t *v201;
  double v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char v206;
  char v207;
  unint64_t v208;
  std::locale::__imp *locale;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *p_shared_owners;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  __int128 v222;
  double v223;
  double v224;
  _BYTE *v225;
  _BYTE *v226;
  int64_t v227;
  char *v228;
  double *v229;
  uint64_t v230;
  double *v231;
  long double v232;
  long double v233;
  double v236;
  double v237;
  std::locale *v238;
  uint64_t v239;
  double v240;
  uint64_t v241;
  double v242;
  double v243;
  uint64_t v244;
  uint64_t v245;
  double v246;
  _QWORD *v247;
  const std::locale::facet *v248;
  std::string *v249;
  std::string *v250;
  uint64_t v251;
  int v252;
  unint64_t v253;
  _QWORD *v254;
  unint64_t *v255;
  uint64_t **v256;
  uint64_t **v257;
  std::locale::__imp *v258;
  uint64_t *k;
  char *v260;
  double v261;
  float64x2_t v264;
  float64x2_t v266;
  _QWORD *m;
  uint64_t v268;
  uint64_t *v269;
  __int128 v270;
  uint64_t *v271;
  uint64_t **v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t **v276;
  char *v277;
  uint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  void *v281;
  _QWORD *v282;
  _QWORD *v283;
  void *v284;
  _QWORD *v285;
  _QWORD *v286;
  void *v287;
  _BYTE *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int64_t v293;
  unint64_t v294;
  char *v295;
  uint64_t **v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t **v299;
  uint64_t *v300;
  uint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t *v304;
  char *v305;
  unint64_t v306;
  uint64_t v307;
  char *v308;
  __int128 *v309;
  uint64_t v310;
  __int128 v311;
  unint64_t v312;
  unint64_t v313;
  _QWORD *v314;
  unint64_t *v315;
  int64_t v316;
  uint64_t v317;
  unint64_t v318;
  int64_t v319;
  unint64_t v320;
  _BYTE *v321;
  uint64_t **v322;
  uint64_t **v323;
  uint64_t *v324;
  uint64_t **v325;
  uint64_t *v326;
  uint64_t **v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t *v330;
  char *v331;
  unint64_t v332;
  unint64_t *v333;
  uint64_t v334;
  _OWORD *v335;
  unint64_t *v336;
  uint64_t v337;
  __int128 v338;
  unint64_t v339;
  uint64_t **v340;
  unsigned int v341;
  uint64_t *v342;
  uint64_t **v343;
  uint64_t **v344;
  char v345;
  int v346;
  uint64_t *v347;
  uint64_t **v348;
  uint64_t **v349;
  uint64_t i;
  uint64_t v351;
  uint64_t *v352;
  uint64_t **v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t *v356;
  std::locale::__imp *v357;
  unsigned int v358;
  _QWORD *v359;
  unsigned int v360;
  uint64_t *v361;
  _QWORD *v362;
  _QWORD *v363;
  unsigned int v364;
  _QWORD *v365;
  _QWORD *v366;
  void *v367;
  std::locale::__imp *v368;
  std::locale::__imp *v369;
  std::locale::__imp *v370;
  uint64_t v371;
  char *v372;
  _QWORD *v373;
  _BYTE *v374;
  int64_t v375;
  int64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  _BYTE *v380;
  _QWORD *v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  _OWORD *v385;
  char *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  uint64_t **v390;
  unsigned int v391;
  uint64_t *v392;
  uint64_t **v393;
  uint64_t **v394;
  char v395;
  uint64_t *v396;
  uint64_t **v397;
  uint64_t **v398;
  int v399;
  uint64_t *v400;
  uint64_t **v401;
  uint64_t j;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  _QWORD *v407;
  unsigned int v408;
  uint64_t *v409;
  uint64_t **v410;
  unsigned int v411;
  uint64_t *v412;
  uint64_t *v413;
  uint64_t **v414;
  unsigned int v415;
  uint64_t *v416;
  unsigned int v417;
  _QWORD *v418;
  void *v419;
  std::locale::__imp *v420;
  std::locale::__imp *v421;
  std::locale::__imp *v422;
  uint64_t v423;
  void *v424;
  _BYTE *v425;
  int64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  _BYTE *v431;
  _QWORD *v432;
  char *v433;
  unint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  _OWORD *v437;
  __int128 *v438;
  uint64_t v439;
  __int128 v440;
  uint64_t v441;
  double v442;
  double v443;
  float64x2_t v444;
  double v445;
  double v446;
  unsigned int v447;
  size_t v448;
  size_t v449;
  double *v450;
  double v451;
  double *v452;
  uint64_t v453;
  double v454;
  double v455;
  _QWORD *v456;
  const std::locale::facet *v457;
  _QWORD *v458;
  double v459;
  double v460;
  char v461;
  char *v462;
  int v463;
  int v464;
  double v465;
  double *v466;
  unint64_t v467;
  unint64_t v468;
  float64x2_t *v469;
  uint64_t v470;
  float64x2_t v471;
  float64x2_t v472;
  double v473;
  double v474;
  uint64_t v476;
  const void *v477;
  int64_t v478;
  char *v479;
  double *v480;
  uint64_t v481;
  double v482;
  double v483;
  _QWORD *v484;
  _QWORD *v485;
  const std::locale::facet *v486;
  BOOL v488;
  double v489;
  uint64_t v491;
  double v492;
  _QWORD *v493;
  const std::locale::facet *v494;
  int v495;
  uint64_t **v496;
  uint64_t **v497;
  double v498;
  uint64_t *v499;
  uint64_t **v500;
  uint64_t *v501;
  uint64_t **v502;
  _QWORD *v503;
  const std::locale::facet *v504;
  int v505;
  _QWORD *v506;
  const std::locale::facet *v507;
  _QWORD *v508;
  const std::locale::facet *v509;
  _QWORD *v510;
  _QWORD *v511;
  const std::locale::facet *v512;
  std::bad_alloc *exception;
  std::bad_alloc *v514;
  uint64_t v515;
  uint64_t v516;
  _BYTE *v517;
  char *v518;
  uint64_t v519;
  char *v520;
  _BYTE *v521;
  char *v522;
  char *v523;
  uint64_t v524;
  uint64_t *v525;
  _QWORD *v526;
  uint64_t v527;
  int8x16_t v528;
  uint64_t v529;
  int64x2_t v530;
  uint64_t v531;
  _QWORD *v532;
  int64x2_t v533;
  int8x16_t v534;
  char *v535;
  float64x2_t v536;
  __int128 v537;
  uint64_t v538;
  double v539;
  int8x16_t v540;
  int v541;
  char *v542;
  float64x2_t v543;
  unint64_t v544;
  float64x2_t v545;
  uint64_t v546;
  std::__shared_weak_count *v547;
  void *v548[2];
  void *v549[2];
  int v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  char *v554;
  void *v555[2];
  void *v556[2];
  int v557;
  void *v558[2];
  void *v559[2];
  int v560;
  void *v561;
  char *v562;
  char *v563;
  void *v564;
  uint64_t v565;
  unsigned int v566;
  void *__dst;
  double v568;
  unsigned int v569;
  double v570;
  void *v571[2];
  std::locale::__imp *v572;
  std::string v573;
  _QWORD *v574;
  uint64_t v575;
  __int128 v576;
  void *v577[2];
  void *v578[2];
  __int128 v579;
  void *v580[2];
  __int128 v581;
  int64x2_t v582;
  void *__p[2];
  _BYTE *v584;
  void (**v585)();
  __int128 v586;
  __int128 v587;
  _BYTE v588[25];
  _BYTE v589[24];
  _BYTE *v590;
  _BYTE v591[24];
  _BYTE *v592;
  double v593;
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t (**v598)();
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t (**v603)();
  uint64_t **v604;
  _QWORD v605[2];
  uint64_t **v606;
  uint64_t *v607;
  uint64_t v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  int v613;
  uint64_t v614;
  char *v615;
  char *v616;
  char *v617;
  unsigned int *v618;
  unsigned int *v619;
  unsigned int *v620;
  _DWORD v621[2];
  uint64_t v622;
  unsigned __int8 v623;
  __int128 v624;
  void *__src[2];
  unsigned int v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD v633[3];
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  void (**v646)();
  uint64_t v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  __int16 v658;
  uint64_t v659;
  _QWORD *v660;
  uint64_t v661;
  _QWORD v662[2];
  int v663;
  void *v664[2];
  __int128 v665;
  void *v666[2];
  __int128 v667;
  uint64_t v668;
  uint64_t v669;
  void *v670[2];
  void *v671[4];
  std::string v672;
  std::string *v673;
  std::locale v674[4];
  int v675;
  __int128 v676;
  __int128 v677;
  int v678;
  uint64_t v679;

  v679 = *MEMORY[0x24BDAC8D0];
  v2 = a1[10];
  v3 = a1[11];
  if (v3 == v2)
    return v3 != v2;
  v516 = a1[10];
  bzero(&v613, 0x2E8uLL);
  __asm { FMOV            V0.2D, #1.0 }
  v599 = _Q0;
  v600 = _Q0;
  v601 = _Q0;
  v602 = _Q0;
  v603 = &off_250AFBF10;
  v605[0] = 0;
  v604 = (uint64_t **)v605;
  v608 = 0;
  v607 = 0;
  v605[1] = 0;
  v606 = &v607;
  v609 = 0u;
  v610 = 0u;
  LOBYTE(v613) = 1;
  BYTE2(v613) = 1;
  v611 = 0u;
  v612 = 0u;
  sub_239C32BF4((uint64_t)&v614);
  v526 = a1;
  v515 = v3;
  memset(v621, 0, 5);
  v622 = 0;
  v623 = 0;
  v627 = 0;
  v624 = 0u;
  *(_OWORD *)__src = 0u;
  v626 = 0;
  v10 = operator new();
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)v10 = &off_250AFDE20;
  v629 = 0;
  v630 = 0;
  v628 = v10;
  v631 = 0;
  v632 = 0x3EE4F8B588E368F1;
  v633[0] = &v603;
  v633[1] = __src;
  v633[2] = v662;
  v635 = 0u;
  v634 = 0u;
  v645 = 0u;
  v644 = 0u;
  v636 = 0u;
  v643 = 0u;
  v641 = 0u;
  v642 = 0u;
  v639 = 0u;
  v640 = 0u;
  v637 = 0u;
  v638 = 0u;
  v646 = off_250AFBF70;
  v653 = 0;
  v651 = 0;
  v650 = 0;
  v652 = 0;
  v648 = 0;
  v647 = 0;
  v649 = 0;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_250AFDE20;
  v654 = v11;
  v659 = 0;
  v655 = 0;
  v657 = 0;
  v656 = 0;
  v658 = 0;
  v660 = v633;
  v661 = 0x3EE4F8B588E368F1;
  v662[0] = 0;
  v662[1] = 0;
  v663 = 0;
  *(_OWORD *)v664 = 0u;
  v665 = 0u;
  *(_OWORD *)v666 = 0u;
  v667 = 0u;
  v668 = 0;
  v669 = 2;
  *(_OWORD *)v670 = 0u;
  memset(v671, 0, 28);
  v646 = (void (**)())&off_250AFBF30;
  v598 = off_250AFBB20;
  v12 = a1;
  v521 = (_BYTE *)a1[11];
  v524 = a1[14];
  v517 = (_BYTE *)a1[10];
  v519 = a1[13];
  v13 = a1[79];
  *(_OWORD *)v558 = 0u;
  *(_OWORD *)v559 = 0u;
  v560 = 1065353216;
  v14 = (uint64_t *)a1[2];
  if (v14)
  {
    v15 = v13 != 0;
    do
    {
      v18 = (unint64_t *)(v14 + 2);
      v17 = v14[2];
      if (v15)
      {
        v19 = (int8x8_t)v526[72];
        if (v19)
        {
          v20 = (uint8x8_t)vcnt_s8(v19);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] > 1uLL)
          {
            v21 = v14[2];
            if (v17 >= *(_QWORD *)&v19)
              v21 = v17 % *(_QWORD *)&v19;
          }
          else
          {
            v21 = (*(_QWORD *)&v19 - 1) & v17;
          }
          v23 = *(_QWORD **)(v526[71] + 8 * v21);
          if (v23)
          {
            v23 = (_QWORD *)*v23;
            if (v23)
            {
              if (v20.u32[0] < 2uLL)
              {
                v24 = *(_QWORD *)&v19 - 1;
                while (1)
                {
                  v26 = v23[1];
                  if (v26 == v17)
                  {
                    if (v23[2] == v17)
                      goto LABEL_31;
                  }
                  else if ((v26 & v24) != v21)
                  {
                    goto LABEL_30;
                  }
                  v23 = (_QWORD *)*v23;
                  if (!v23)
                    goto LABEL_31;
                }
              }
              do
              {
                v25 = v23[1];
                if (v25 == v17)
                {
                  if (v23[2] == v17)
                    break;
                }
                else
                {
                  if (v25 >= *(_QWORD *)&v19)
                    v25 %= *(_QWORD *)&v19;
                  if (v25 != v21)
                    goto LABEL_30;
                }
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
          }
        }
        else
        {
LABEL_30:
          v23 = 0;
        }
LABEL_31:
        v22 = v23 == 0;
      }
      else
      {
        v22 = 0;
      }
      *(_QWORD *)&v27.f64[0] = v14[5];
      v530 = *(int64x2_t *)(v14 + 7);
      v533 = *(int64x2_t *)(v14 + 3);
      v28 = *((double *)v14 + 13);
      v539 = *((double *)v14 + 17);
      v536 = *(float64x2_t *)(v14 + 15);
      *(_QWORD *)&v27.f64[1] = v14[9];
      v543 = v27;
      v545 = *(float64x2_t *)(v14 + 11);
      v29 = sub_239C18404((float *)v558, v17, v14 + 2);
      _V3.D[1] = v545.f64[1];
      _Q1 = vmulq_f64(v545, v536);
      _D2 = v536.f64[1];
      __asm { FMLA            D1, D2, V3.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + v28 * v539;
      v33 = (int8x16_t)vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v533, v530), v536.f64[0]), (float64x2_t)vzip2q_s64(v533, v530), v536, 1), v543, v539));
      *((_QWORD *)v29 + 5) = *(_OWORD *)&vnegq_f64(_Q1);
      v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
      *(int8x16_t *)(v29 + 24) = v33;
      v29[48] = v22;
      v34 = sub_239C18404((float *)v558, *v18, v14 + 2);
      v35 = *v18;
      v36 = v34[48];
      v1 = v1 & 0xFFFFFF0000000000 | *v18 | (v36 << 32);
      v37 = (uint64_t *)v605[0];
      v38 = (uint64_t **)v605;
      v12 = v526;
      if (!v605[0])
        goto LABEL_42;
      v39 = (uint64_t **)v605;
      do
      {
        v40 = (uint64_t **)v37;
        v41 = v39;
        v42 = *((_DWORD *)v37 + 8);
        if (v42 >= v35)
          v39 = (uint64_t **)v37;
        else
          ++v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
      v38 = (uint64_t **)v605;
      if (v39 == v605)
        goto LABEL_42;
      if (v42 < v35)
        v40 = v41;
      v38 = v39;
      if (*((_DWORD *)v40 + 8) != (_DWORD)v35)
      {
LABEL_42:
        v573 = *(std::string *)(v34 + 1);
        LODWORD(v571[0]) = v35;
        v571[1] = (void *)v1;
        v572 = (std::locale::__imp *)(v34 + 24);
        LOBYTE(v574) = v36;
        LODWORD(v575) = -1;
        BYTE4(v575) = 1;
        LODWORD(v576) = 0;
        v577[0] = 0;
        v577[1] = 0;
        *((_QWORD *)&v576 + 1) = 0;
        LOBYTE(v578[0]) = 1;
        sub_239C31FF8(&v604, v38, v35, (uint64_t)v571);
        v12 = v526;
        if ((_DWORD)v36)
        {
          v43 = v616;
          if (v616 < v617)
          {
            *(_DWORD *)v616 = v35;
            v16 = v43 + 4;
          }
          else
          {
            v44 = v615;
            v45 = (char *)(v616 - v615);
            v46 = (v616 - v615) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
              sub_2394189F8();
            v48 = v617 - v615;
            if ((v617 - v615) >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              if (v49 >> 62)
                sub_239418A80();
              v50 = (char *)operator new(4 * v49);
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[4 * v46];
            *(_DWORD *)v51 = v35;
            v16 = v51 + 4;
            if (v43 != v44)
            {
              v52 = v43 - v44 - 4;
              if (v52 < 0x2C)
                goto LABEL_881;
              if ((unint64_t)(v43 - v50 - (_QWORD)v45) < 0x20)
                goto LABEL_881;
              v53 = (v52 >> 2) + 1;
              v54 = &v50[4 * v46 - 16];
              v55 = (__int128 *)(v43 - 16);
              v56 = v53 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v57 = *v55;
                *((_OWORD *)v54 - 1) = *(v55 - 1);
                *(_OWORD *)v54 = v57;
                v54 -= 32;
                v55 -= 2;
                v56 -= 8;
              }
              while (v56);
              v51 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              v43 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_881:
                do
                {
                  v58 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v51 - 1) = v58;
                  v51 -= 4;
                }
                while (v43 != v44);
              }
            }
            v615 = v51;
            v616 = v16;
            v617 = &v50[4 * v49];
            if (v44)
              operator delete(v44);
            v12 = v526;
          }
          v616 = v16;
        }
        BYTE2(v613) = 0;
        LOBYTE(v613) = 0;
        v621[0] = 0;
      }
      v14 = (uint64_t *)*v14;
      v15 = 1;
    }
    while (v14);
  }
  *(_OWORD *)v555 = 0u;
  *(_OWORD *)v556 = 0u;
  v557 = 1065353216;
  v59 = (_QWORD *)v12[7];
  if (v59)
  {
    while (1)
    {
      v61 = v59[4];
      v62 = sub_239C18878((float *)v555, v59[2], v59 + 2);
      v62[3] = v61;
      *((_BYTE *)v62 + 32) = 1;
      v63 = (void **)sub_239C18878((float *)v555, v59[2], v59 + 2);
      v64 = *((_DWORD *)v59 + 4);
      v65 = *((unsigned __int8 *)v63 + 32);
      v66 = (uint64_t *)&v607;
      v67 = v607;
      if (v607)
      {
        v68 = &v607;
        do
        {
          v69 = v67;
          v70 = v68;
          v71 = *((_DWORD *)v67 + 8);
          if (v71 >= v64)
            v68 = (uint64_t **)v67;
          else
            ++v67;
          v67 = (uint64_t *)*v67;
        }
        while (v67);
        v66 = (uint64_t *)&v607;
        if (v68 != &v607)
        {
          if (v71 < v64)
            v69 = (uint64_t *)v70;
          v66 = (uint64_t *)v68;
          if (*((_DWORD *)v69 + 8) == v64)
            goto LABEL_69;
        }
      }
      v72 = v63 + 3;
      v571[0] = v63[3];
      LOBYTE(v571[1]) = *((_BYTE *)v63 + 32);
      v73 = sub_239C31E70(&v606, v66, (uint64_t **)&v585, (uint64_t **)v674, v64);
      if (!*v73)
        break;
      if (v65)
        goto LABEL_86;
LABEL_68:
      BYTE2(v613) = 0;
      LOBYTE(v613) = 0;
      v621[0] = 0;
LABEL_69:
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_106;
    }
    v74 = v73;
    v75 = operator new(0x68uLL);
    v75[8] = v64;
    v75[10] = v64;
    *((_BYTE *)v75 + 44) = v65;
    v76 = v571[0];
    *((_QWORD *)v75 + 6) = v72;
    *((_QWORD *)v75 + 7) = v76;
    *((_BYTE *)v75 + 64) = v571[1];
    v75[18] = -1;
    *((_BYTE *)v75 + 76) = 1;
    v75[20] = 0;
    *((_QWORD *)v75 + 11) = 0;
    *((_BYTE *)v75 + 96) = 1;
    v77 = v585;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = v77;
    *v74 = (uint64_t)v75;
    if (*v606)
    {
      v606 = (uint64_t **)*v606;
      v75 = (_DWORD *)*v74;
    }
    sub_2394213B8(v607, (uint64_t *)v75);
    ++v608;
    if (!v65)
      goto LABEL_68;
LABEL_86:
    v78 = v619;
    if (v619 < v620)
    {
      *v619 = v64;
      v60 = v78 + 1;
    }
    else
    {
      v79 = v618;
      v80 = (char *)((char *)v619 - (char *)v618);
      v81 = v619 - v618;
      v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 62)
        sub_2394189F8();
      v83 = (char *)v620 - (char *)v618;
      if (((char *)v620 - (char *)v618) >> 1 > v82)
        v82 = v83 >> 1;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
        v84 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v84 = v82;
      if (v84)
      {
        if (v84 >> 62)
          sub_239418A80();
        v85 = (char *)operator new(4 * v84);
      }
      else
      {
        v85 = 0;
      }
      v86 = (unsigned int *)&v85[4 * v81];
      *v86 = v64;
      v60 = v86 + 1;
      if (v78 != v79)
      {
        v87 = (char *)v78 - (char *)v79 - 4;
        if (v87 < 0x2C)
          goto LABEL_882;
        if ((unint64_t)((char *)v78 - v85 - (_QWORD)v80) < 0x20)
          goto LABEL_882;
        v88 = (v87 >> 2) + 1;
        v89 = &v85[4 * v81 - 16];
        v90 = v78 - 4;
        v91 = v88 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v92 = *(_OWORD *)v90;
          *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
          *(_OWORD *)v89 = v92;
          v89 -= 32;
          v90 -= 8;
          v91 -= 8;
        }
        while (v91);
        v86 -= v88 & 0x7FFFFFFFFFFFFFF8;
        v78 -= v88 & 0x7FFFFFFFFFFFFFF8;
        if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_882:
          do
          {
            v93 = *--v78;
            *--v86 = v93;
          }
          while (v78 != v79);
        }
      }
      v618 = v86;
      v619 = v60;
      v620 = (unsigned int *)&v85[4 * v84];
      if (v79)
        operator delete(v79);
    }
    v619 = v60;
    goto LABEL_68;
  }
LABEL_106:
  v546 = (v524 - v519) >> 3;
  v544 = 0x8E38E38E38E38E39 * ((v521 - v517) >> 4);
  v94 = (double *)v526;
  v96 = (uint64_t *)v526[10];
  v95 = (uint64_t *)v526[11];
  if (v95 == v96)
  {
    v518 = 0;
    goto LABEL_191;
  }
  if ((0x8E38E38E38E38E39 * (((char *)v95 - (char *)v96) >> 4)) >> 59)
    sub_2394189F8();
  v97 = (char *)operator new(0xC71C71C71C71C720 * (((char *)v95 - (char *)v96) >> 4));
  v518 = v97;
  v98 = v97;
  do
  {
    *(_OWORD *)v98 = 0uLL;
    *((_OWORD *)v98 + 1) = 0uLL;
    v98[24] = 1;
    v98 += 32;
  }
  while (v98 != &v97[0xC71C71C71C71C720 * (((char *)v95 - (char *)v96) >> 4)]);
  v99 = 0;
  do
  {
    v100 = *v96;
    v101 = v96[1];
    v102 = (int8x8_t)v94[77];
    if (!*(_QWORD *)&v102)
      goto LABEL_151;
    v103 = (uint8x8_t)vcnt_s8(v102);
    v103.i16[0] = vaddlv_u8(v103);
    if (v103.u32[0] > 1uLL)
    {
      v104 = *v96;
      if (v100 >= *(_QWORD *)&v102)
        v104 = v100 % *(_QWORD *)&v102;
    }
    else
    {
      v104 = (*(_QWORD *)&v102 - 1) & v100;
    }
    v105 = *((_QWORD *)v94 + 76);
    v106 = *(_QWORD **)(v105 + 8 * v104);
    if (!v106)
      goto LABEL_151;
    v107 = (_QWORD *)*v106;
    if (!*v106)
      goto LABEL_151;
    v108 = *(_QWORD *)&v102 - 1;
    if (v103.u32[0] < 2uLL)
    {
      while (1)
      {
        v109 = v107[1];
        if (v109 == v100)
        {
          if (v107[2] == v100)
            goto LABEL_132;
        }
        else if ((v109 & v108) != v104)
        {
          goto LABEL_151;
        }
        v107 = (_QWORD *)*v107;
        if (!v107)
          goto LABEL_151;
      }
    }
    while (1)
    {
      v110 = v107[1];
      if (v110 == v100)
        break;
      if (v110 >= *(_QWORD *)&v102)
        v110 %= *(_QWORD *)&v102;
      if (v110 != v104)
        goto LABEL_151;
LABEL_126:
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_151;
    }
    if (v107[2] != v100)
      goto LABEL_126;
LABEL_132:
    if (v103.u32[0] > 1uLL)
    {
      v111 = v96[1];
      if (v101 >= *(_QWORD *)&v102)
        v111 = v101 % *(_QWORD *)&v102;
    }
    else
    {
      v111 = v108 & v101;
    }
    v112 = *(_QWORD **)(v105 + 8 * v111);
    if (v112)
    {
      v113 = (_QWORD *)*v112;
      if (v113)
      {
        if (v103.u32[0] < 2uLL)
        {
          while (1)
          {
            v114 = v113[1];
            if (v114 == v101)
            {
              if (v113[2] == v101)
                goto LABEL_188;
            }
            else if ((v114 & v108) != v111)
            {
              goto LABEL_151;
            }
            v113 = (_QWORD *)*v113;
            if (!v113)
              goto LABEL_151;
          }
        }
        do
        {
          v115 = v113[1];
          if (v115 == v101)
          {
            if (v113[2] == v101)
              goto LABEL_188;
          }
          else
          {
            if (v115 >= *(_QWORD *)&v102)
              v115 %= *(_QWORD *)&v102;
            if (v115 != v111)
              break;
          }
          v113 = (_QWORD *)*v113;
        }
        while (v113);
      }
    }
LABEL_151:
    v116 = (int8x8_t)v94[1];
    if (!*(_QWORD *)&v116)
      goto LABEL_860;
    v117 = (uint8x8_t)vcnt_s8(v116);
    v117.i16[0] = vaddlv_u8(v117);
    if (v117.u32[0] > 1uLL)
    {
      v118 = v96[1];
      if (v101 >= *(_QWORD *)&v116)
        v118 = v101 % *(_QWORD *)&v116;
    }
    else
    {
      v118 = (*(_QWORD *)&v116 - 1) & v101;
    }
    v119 = *(uint64_t ***)(*(_QWORD *)v94 + 8 * v118);
    if (!v119 || (v120 = *v119) == 0)
    {
LABEL_860:
      sub_239A444D4((uint64_t)"unknown file", 140, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (v117.u32[0] < 2uLL)
    {
      v121 = *(_QWORD *)&v116 - 1;
      while (1)
      {
        v123 = v120[1];
        if (v123 == v101)
        {
          if (v120[2] == v101)
            goto LABEL_171;
        }
        else if ((v123 & v121) != v118)
        {
          goto LABEL_860;
        }
        v120 = (uint64_t *)*v120;
        if (!v120)
          goto LABEL_860;
      }
    }
    while (2)
    {
      v122 = v120[1];
      if (v122 != v101)
      {
        if (v122 >= *(_QWORD *)&v116)
          v122 %= *(_QWORD *)&v116;
        if (v122 != v118)
          goto LABEL_860;
LABEL_161:
        v120 = (uint64_t *)*v120;
        if (!v120)
          goto LABEL_860;
        continue;
      }
      break;
    }
    if (v120[2] != v101)
      goto LABEL_161;
LABEL_171:
    *(_QWORD *)&v124.f64[0] = v120[5];
    _Q1 = *(float64x2_t *)(v120 + 3);
    v126 = *((double *)v120 + 13);
    _Q5 = *(float64x2_t *)(v120 + 11);
    v128 = *((double *)v96 + 16);
    _Q7 = *((float64x2_t *)v96 + 7);
    v130 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q1, *(int64x2_t *)(v120 + 7)), _Q7.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q1, *(int64x2_t *)(v120 + 7)), _Q7, 1);
    _Q17 = vmulq_f64(_Q7, _Q1);
    *(_QWORD *)&_Q1.f64[0] = v120[4];
    __asm { FMLA            D17, D1, V7.D[1] }
    *(_QWORD *)&v124.f64[1] = v120[9];
    _Q16 = vmlaq_n_f64(v130, v124, v128);
    _Q0 = vmulq_f64(_Q5, _Q7);
    *(_QWORD *)&_Q17.f64[0] = v96[15];
    __asm { FMLA            D18, D17, V5.D[1] }
    _Q17.f64[0] = _D18 + v126 * v128;
    _D3 = v120[8];
    __asm { FMLA            D18, D3, V7.D[1] }
    _D2 = _D18 + v128 * *((double *)v120 + 9);
    _D3 = v120[12];
    __asm
    {
      FMLA            D0, D3, V7.D[1]
      FMLA            D1, D2, V16.D[1]
    }
    _Q0.f64[0] = 1.0 / sqrt(_Q1.f64[0] + (_Q0.f64[0] + v128 * v126) * _Q17.f64[0]);
    v139 = &v518[32 * v99];
    *(float64x2_t *)v139 = vmulq_n_f64(_Q16, _Q0.f64[0]);
    *((_QWORD *)v139 + 2) = *(_OWORD *)&vmulq_f64(_Q17, _Q0);
    v139[24] = 1;
    if (v546 == v544)
    {
      v140 = *(double *)(*((_QWORD *)v94 + 13) + 8 * v99);
      v141 = (char *)operator new(0x30uLL);
      v142 = (std::__shared_weak_count *)v141;
      v143 = 1.0 / v140;
      *((_QWORD *)v141 + 1) = 0;
      v144 = (unint64_t *)(v141 + 8);
      *((_QWORD *)v141 + 2) = 0;
      *(_QWORD *)v141 = &off_250AFE808;
      *((_QWORD *)v141 + 3) = &off_250AFE840;
      if (1.0 / v140 < 1.0e-15)
        v145 = NAN;
      else
        v145 = 1.0 / sqrt(v143);
      *((double *)v141 + 5) = v145;
      v141[32] = v143 >= 1.0e-15;
      v585 = (void (**)())(v141 + 24);
      *(_QWORD *)&v586 = v141;
      v571[1] = 0;
      v572 = 0;
      v571[0] = &v518[32 * v99];
      v553 = v141 + 24;
      v554 = v141;
      do
        v146 = __ldxr(v144);
      while (__stxr(v146 + 1, v144));
      sub_239C32CDC((int64x2_t *)&v598, (uint64_t)v571, v100 | ((unint64_t)v101 << 32), (uint64_t)(v141 + 24), (std::__shared_weak_count *)v141);
      do
        v147 = __ldaxr(v144);
      while (__stlxr(v147 - 1, v144));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
      v148 = (std::__shared_weak_count *)v586;
      v94 = (double *)v526;
      if ((_QWORD)v586)
      {
        v149 = (unint64_t *)(v586 + 8);
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
    }
    else
    {
      v571[1] = 0;
      v572 = 0;
      v571[0] = &v518[32 * v99];
      v551 = 0;
      v552 = 0;
      sub_239C32CDC((int64x2_t *)&v598, (uint64_t)v571, v100 | ((unint64_t)v101 << 32), 0, 0);
    }
    ++v99;
LABEL_188:
    v96 += 18;
  }
  while (v96 != v95);
LABEL_191:
  *((_QWORD *)&v151 + 1) = 0;
  *(_OWORD *)v548 = 0u;
  *(_OWORD *)v549 = 0u;
  v550 = 1065353216;
  v152 = *((_QWORD *)v94 + 8);
  if (!v152)
  {
    v158 = 0;
    v162 = 0;
    goto LABEL_295;
  }
  *(_OWORD *)&v672.__r_.__value_.__l.__data_ = 0uLL;
  v153 = (uint64_t *)*((_QWORD *)v94 + 2);
  if (v153)
  {
    do
    {
      v527 = v153[5];
      v528 = *(int8x16_t *)(v153 + 3);
      v531 = v153[9];
      *(_QWORD *)&v151 = v153[13];
      v534 = *(int8x16_t *)(v153 + 7);
      v537 = v151;
      v540 = *(int8x16_t *)(v153 + 11);
      v154 = sub_239C1974C((float *)v548, v153[2], v153 + 2);
      v155 = v528;
      v156 = v534;
      v157 = v540;
      *((_BYTE *)v154 + 24) = 1;
      v154[6] = v527;
      v155.i64[1] = vextq_s8(v155, v155, 8uLL).u64[0];
      *((int8x16_t *)v154 + 2) = v155;
      v154[9] = v531;
      v156.i64[1] = vextq_s8(v156, v156, 8uLL).u64[0];
      *(int8x16_t *)(v154 + 7) = v156;
      *((_QWORD *)&v151 + 1) = *((_QWORD *)&v537 + 1);
      v154[12] = v537;
      v157.i64[1] = vextq_s8(v157, v157, 8uLL).u64[0];
      *((int8x16_t *)v154 + 5) = v157;
      v153 = (uint64_t *)*v153;
    }
    while (v153);
    v152 = *((_QWORD *)v94 + 8);
    if (!v152)
    {
      v158 = 0;
      v520 = 0;
      v159 = *((_QWORD *)v94 + 7);
      if (v159)
        goto LABEL_197;
      goto LABEL_205;
    }
  }
  if (v152 >> 59)
    sub_2394189F8();
  v158 = (char *)operator new(32 * v152);
  v520 = &v158[32 * v152];
  v159 = *((_QWORD *)v94 + 7);
  if (!v159)
  {
LABEL_205:
    v162 = 0;
    v163 = 0;
    v160 = 0;
    goto LABEL_206;
  }
LABEL_197:
  v160 = 0;
  v161 = (_QWORD *)v159;
  do
  {
    v160 += (uint64_t)(v161[9] - v161[8]) >> 5;
    v161 = (_QWORD *)*v161;
  }
  while (v161);
  if (v160)
  {
    if (v160 >> 59)
      sub_2394189F8();
    v162 = (char *)operator new(32 * v160);
    v163 = &v162[32 * v160];
  }
  else
  {
    v162 = 0;
    v163 = 0;
  }
LABEL_206:
  if (v546 == v544)
  {
    v164 = (double *)*((_QWORD *)v94 + 13);
    v165 = (double *)*((_QWORD *)v94 + 14);
    if (v164 == v165)
    {
      v166 = 0;
    }
    else
    {
      v166 = 0;
      do
      {
        v167 = *v164++;
        v166 = (int)(v167 + (double)v166);
      }
      while (v164 != v165);
    }
    v94[16] = (double)v166 * 200.0 / (double)v160;
  }
  if (v159)
  {
    v168 = v158;
    v169 = v162;
    while (1)
    {
      v170 = *(void **)(v159 + 24);
      v561 = v170;
      v541 = *(_DWORD *)(v159 + 16);
      v171 = (v168 - v158) >> 5;
      *(_OWORD *)v571 = *(_OWORD *)(v159 + 40);
      v572 = *(std::locale::__imp **)(v159 + 56);
      v525 = (uint64_t *)v159;
      if (v168 >= v520)
      {
        v174 = v171 + 1;
        if ((unint64_t)(v171 + 1) >> 59)
          sub_2394189F8();
        if ((v520 - v158) >> 4 > v174)
          v174 = (v520 - v158) >> 4;
        v175 = (unint64_t)(v520 - v158) >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v174;
        if (v175)
        {
          if (v175 >> 59)
            sub_239418A80();
          v176 = (char *)operator new(32 * v175);
        }
        else
        {
          v176 = 0;
        }
        v177 = &v176[32 * v171];
        *(_OWORD *)v177 = *(_OWORD *)v571;
        *((_QWORD *)v177 + 2) = v572;
        v177[24] = 1;
        if (v168 == v158)
        {
          v179 = &v176[32 * v171];
        }
        else
        {
          v178 = &v176[32 * v171];
          do
          {
            v179 = v178 - 32;
            v180 = *((_OWORD *)v168 - 2);
            *((_QWORD *)v178 - 2) = *((_QWORD *)v168 - 2);
            *((_OWORD *)v178 - 2) = v180;
            *(v178 - 8) = *(v168 - 8);
            v168 -= 32;
            v178 -= 32;
          }
          while (v168 != v158);
        }
        v520 = &v176[32 * v175];
        v168 = v177 + 32;
        if (v158)
        {
          operator delete(v158);
          v173 = v561;
        }
        else
        {
          v173 = v170;
        }
        v158 = v179;
      }
      else
      {
        v172 = *(_OWORD *)(v159 + 40);
        *((_QWORD *)v168 + 2) = *(_QWORD *)(v159 + 56);
        *(_OWORD *)v168 = v172;
        v168[24] = 1;
        v168 += 32;
        v173 = v170;
      }
      v522 = v158;
      v181 = sub_239C1974C((float *)v548, (unint64_t)v173, &v561);
      v182 = v525[8];
      v538 = v525[9];
      if (v182 != v538)
        break;
LABEL_215:
      v158 = v522;
      v159 = *v525;
      if (!*v525)
        goto LABEL_294;
    }
    v535 = &v522[32 * v171];
    v532 = v181 + 3;
    v529 = v170;
    while (2)
    {
      v183 = *(_QWORD *)v182;
      v184 = (v169 - v162) >> 5;
      *(_OWORD *)v571 = *(_OWORD *)(v182 + 8);
      v572 = *(std::locale::__imp **)(v182 + 24);
      if (v169 >= v163)
      {
        v186 = v184 + 1;
        if ((unint64_t)(v184 + 1) >> 59)
          sub_2394189F8();
        if ((v163 - v162) >> 4 > v186)
          v186 = (v163 - v162) >> 4;
        if ((unint64_t)(v163 - v162) >= 0x7FFFFFFFFFFFFFE0)
          v187 = 0x7FFFFFFFFFFFFFFLL;
        else
          v187 = v186;
        if (v187)
        {
          if (v187 >> 59)
            sub_239418A80();
          v188 = (char *)operator new(32 * v187);
        }
        else
        {
          v188 = 0;
        }
        v189 = &v188[32 * v184];
        *(_OWORD *)v189 = *(_OWORD *)v571;
        *((_QWORD *)v189 + 2) = v572;
        v189[24] = 1;
        if (v169 == v162)
        {
          v191 = &v188[32 * v184];
        }
        else
        {
          v190 = &v188[32 * v184];
          do
          {
            v191 = v190 - 32;
            v192 = *((_OWORD *)v169 - 2);
            *((_QWORD *)v190 - 2) = *((_QWORD *)v169 - 2);
            *((_OWORD *)v190 - 2) = v192;
            *(v190 - 8) = *(v169 - 8);
            v169 -= 32;
            v190 -= 32;
          }
          while (v169 != v162);
        }
        v163 = &v188[32 * v187];
        v169 = v189 + 32;
        if (v162)
          operator delete(v162);
        v162 = v191;
      }
      else
      {
        v185 = *(_OWORD *)(v182 + 8);
        *((_QWORD *)v169 + 2) = *(_QWORD *)(v182 + 24);
        *(_OWORD *)v169 = v185;
        v169[24] = 1;
        v169 += 32;
      }
      v193 = sub_239C1974C((float *)v548, *(_QWORD *)v182, (_QWORD *)v182);
      v194 = v162;
      v195 = (std::locale::__imp *)&v162[32 * v184];
      v196 = (std::string::size_type)(v193 + 3);
      if (v546 == v544)
      {
        v197 = *((double *)v526 + 16);
        v198 = COERCE_DOUBLE(operator new(0x30uLL));
        v199 = *(std::__shared_weak_count **)&v198;
        v200 = 1.0 / v197;
        *(_QWORD *)(*(_QWORD *)&v198 + 8) = 0;
        v201 = (unint64_t *)(*(_QWORD *)&v198 + 8);
        *(_QWORD *)(*(_QWORD *)&v198 + 16) = 0;
        **(_QWORD **)&v198 = &off_250AFE808;
        *(_QWORD *)(*(_QWORD *)&v198 + 24) = &off_250AFE840;
        if (1.0 / v197 < 1.0e-15)
          v202 = NAN;
        else
          v202 = 1.0 / sqrt(v200);
        *(double *)(*(_QWORD *)&v198 + 40) = v202;
        *(_BYTE *)(*(_QWORD *)&v198 + 32) = v200 >= 1.0e-15;
        __dst = (void *)(*(_QWORD *)&v198 + 24);
        v568 = v198;
        v547 = *(std::__shared_weak_count **)&v198;
        do
          v203 = __ldxr(v201);
        while (__stxr(v203 + 1, v201));
        v571[0] = (void *)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v611 - *((_QWORD *)&v610 + 1)) >> 5));
        v572 = v195;
        *(_OWORD *)&v573.__r_.__value_.__r.__words[1] = *(_OWORD *)&v672.__r_.__value_.__l.__data_;
        v573.__r_.__value_.__r.__words[0] = v196;
        v574 = v532;
        v575 = 0;
        *(_QWORD *)&v576 = v535;
        v564 = (void *)(v529 | (v183 << 32));
        LODWORD(v565) = v541;
        v674[0].__locale_ = (std::locale::__imp *)(*(_QWORD *)&v198 + 24);
        v674[1] = *(std::locale *)&v198;
        do
          v204 = __ldxr(v201);
        while (__stxr(v204 + 1, v201));
        v585 = (void (**)())(*(_QWORD *)&v198 + 24);
        *(double *)&v586 = v198;
        v162 = v194;
        do
          v205 = __ldxr(v201);
        while (__stxr(v205 + 1, v201));
        v206 = sub_239C33744((uint64_t)&v603, (__int128 *)v571, (unsigned int *)&v564, *(_QWORD *)&v198 + 24, *(std::__shared_weak_count **)&v198);
        v207 = v206;
        do
          v208 = __ldaxr(v201);
        while (__stlxr(v208 - 1, v201));
        if (v208)
        {
          if ((v206 & 1) == 0)
            goto LABEL_276;
LABEL_279:
          v621[0] = 0;
          locale = v674[1].__locale_;
          if (v674[1].__locale_)
            goto LABEL_280;
LABEL_283:
          v212 = v547;
          if (v547)
            goto LABEL_284;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
          if ((v207 & 1) != 0)
            goto LABEL_279;
LABEL_276:
          locale = v674[1].__locale_;
          if (!v674[1].__locale_)
            goto LABEL_283;
LABEL_280:
          v210 = (unint64_t *)((char *)locale + 8);
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (v211)
            goto LABEL_283;
          (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
          v212 = v547;
          if (v547)
          {
LABEL_284:
            p_shared_owners = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldaxr(p_shared_owners);
            while (__stlxr(v214 - 1, p_shared_owners));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
        }
        v215 = *(std::__shared_weak_count **)&v568;
        if (v568 != 0.0)
        {
          v216 = (unint64_t *)(*(_QWORD *)&v568 + 8);
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
      }
      else
      {
        v571[0] = (void *)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v611 - *((_QWORD *)&v610 + 1)) >> 5));
        v572 = v195;
        *(_OWORD *)&v573.__r_.__value_.__r.__words[1] = *(_OWORD *)&v672.__r_.__value_.__l.__data_;
        v573.__r_.__value_.__r.__words[0] = (std::string::size_type)(v193 + 3);
        v574 = v532;
        v575 = 0;
        *(_QWORD *)&v576 = v535;
        __dst = (void *)(v529 | (v183 << 32));
        LODWORD(v568) = v541;
        v674[0].__locale_ = 0;
        v674[1].__locale_ = 0;
        *(_QWORD *)&v586 = 0;
        v585 = 0;
        v162 = v194;
        if ((sub_239C33744((uint64_t)&v603, (__int128 *)v571, (unsigned int *)&__dst, 0, 0) & 1) != 0)
          v621[0] = 0;
      }
      v182 += 32;
      if (v182 == v538)
        goto LABEL_215;
      continue;
    }
  }
LABEL_294:
  v94 = (double *)v526;
LABEL_295:
  v585 = off_250AFEA50;
  v586 = *(_OWORD *)(v94 + 17);
  v587 = *(_OWORD *)(v94 + 19);
  *(_OWORD *)v588 = *(_OWORD *)(v94 + 21);
  *(_OWORD *)&v588[9] = *(_OWORD *)((char *)v94 + 177);
  v218 = v589;
  v219 = *((_QWORD *)v94 + 28);
  v542 = v162;
  v523 = v158;
  if (v219)
  {
    if ((double *)v219 != v94 + 25)
    {
      v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 16))(v219);
      goto LABEL_298;
    }
    v590 = v589;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v219 + 24))(v219, v589);
  }
  else
  {
LABEL_298:
    v590 = (_BYTE *)v219;
  }
  v220 = v591;
  v221 = *((_QWORD *)v94 + 32);
  if (v221)
  {
    if ((double *)v221 != v94 + 29)
    {
      v221 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 16))(v221);
      goto LABEL_303;
    }
    v592 = v591;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v221 + 24))(v221, v591);
  }
  else
  {
LABEL_303:
    v592 = (_BYTE *)v221;
  }
  v593 = -1.0;
  v585 = (void (**)())&off_250AFE9E8;
  v222 = *(_OWORD *)(v94 + 35);
  v594 = *(_OWORD *)(v94 + 33);
  v595 = v222;
  v596 = *((_QWORD *)&v594 + 1);
  v597 = 0x4000000000000000;
  if (DWORD2(v624) != 1)
  {
    DWORD2(v624) = 1;
    BYTE2(v621[0]) = 0;
    LOWORD(v621[0]) = 0;
  }
  v223 = 1.0;
  v224 = 1.0;
  if (v546 == v544)
  {
    v571[1] = 0;
    v571[0] = 0;
    v572 = 0;
    v226 = (_BYTE *)*((_QWORD *)v94 + 13);
    v225 = (_BYTE *)*((_QWORD *)v94 + 14);
    v227 = v225 - v226;
    if (v225 == v226)
    {
      v228 = 0;
      v229 = 0;
    }
    else
    {
      if (v227 < 0)
        sub_2394189F8();
      v228 = (char *)operator new(v225 - v226);
      v229 = (double *)&v228[8 * (v227 >> 3)];
      memcpy(v228, v226, v227);
    }
    v230 = ((char *)v229 - v228) >> 4;
    v231 = (double *)&v228[8 * v230];
    if (v231 != v229)
      sub_2395F71EC((double *)v228, (double *)&v228[8 * v230], v229);
    v224 = *v231;
    v223 = v94[16];
    operator delete(v228);
  }
  v232 = cos(v94[68] * 3.14159265 / 180.0);
  *(double *)&v600 = (v224 + v224) * (1.0 - v232) * ((v224 + v224) * (1.0 - v232));
  *((double *)&v600 + 1) = 1.0 / *(double *)&v600;
  v233 = cos(v94[69] * 3.14159265 / 180.0);
  *(double *)&v602 = (v223 + v223) * (1.0 - v233) * ((v223 + v223) * (1.0 - v233));
  *((double *)&v602 + 1) = 1.0 / *(double *)&v602;
  memset(v621, 0, 5);
  kdebug_trace();
  ((void (*)(char *@<X8>))v585[2])((char *)v674);
  ((void (*)(std::string *@<X8>))*v598)(&v672);
  if (SHIBYTE(v674[2].__locale_) < 0)
  {
    sub_23941A7F8(v571, v674[0].__locale_, (unint64_t)v674[1].__locale_);
  }
  else
  {
    *(_OWORD *)v571 = *(_OWORD *)&v674[0].__locale_;
    v572 = v674[2].__locale_;
  }
  if (SHIBYTE(v672.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v573, v672.__r_.__value_.__l.__data_, v672.__r_.__value_.__l.__size_);
    v574 = 0;
    LODWORD(v575) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v576 = _Q0;
    *(_OWORD *)v577 = 0u;
    *(_OWORD *)v578 = 0u;
    v579 = 0u;
    *(_OWORD *)v580 = 0u;
    v581 = 0u;
    v582 = 0u;
    *(_OWORD *)__p = 0u;
    v584 = 0;
    if (SHIBYTE(v672.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v672.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v674[2].__locale_) & 0x80000000) == 0)
        goto LABEL_323;
    }
    else if ((SHIBYTE(v674[2].__locale_) & 0x80000000) == 0)
    {
      goto LABEL_323;
    }
LABEL_320:
    operator delete(v674[0].__locale_);
    goto LABEL_323;
  }
  v573 = v672;
  v574 = 0;
  LODWORD(v575) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v576 = _Q0;
  *(_OWORD *)v577 = 0u;
  *(_OWORD *)v578 = 0u;
  v579 = 0u;
  *(_OWORD *)v580 = 0u;
  v581 = 0u;
  v582 = 0u;
  *(_OWORD *)__p = 0u;
  v584 = 0;
  if (SHIBYTE(v674[2].__locale_) < 0)
    goto LABEL_320;
LABEL_323:
  sub_239C2F538(v571, 2uLL, 2uLL);
  kdebug_trace();
  ((void (*)(uint64_t))v598[4])((uint64_t)&v598);
  v237 = v236;
  v673 = 0;
  v674[0].__locale_ = (std::locale::__imp *)&off_250AFBFF8;
  v674[1].__locale_ = (std::locale::__imp *)&v598;
  v674[2].__locale_ = (std::locale::__imp *)v623;
  v674[3].__locale_ = (std::locale::__imp *)v674;
  sub_23965A910(v674, &v672);
  v238 = (std::locale *)v674[3].__locale_;
  if ((std::locale *)v674[3].__locale_ == v674)
  {
    v239 = 4;
    v238 = v674;
LABEL_327:
    (*((void (**)(void))v238->__locale_ + v239))();
  }
  else if (v674[3].__locale_)
  {
    v239 = 5;
    goto LABEL_327;
  }
  if (((unsigned int (__cdecl *)())v585[3])())
  {
    v623 = 1;
    if (((unsigned int (*)(uint64_t))v585[5])((uint64_t)&v585))
      ((void (*)(uint64_t, double))v585[6])((uint64_t)&v585, 0.0);
    else
      ((void (*)(uint64_t))v585[7])((uint64_t)&v585);
    v240 = ((double (*)(uint64_t))v585[4])((uint64_t)&v585);
    ((void (*)(uint64_t, double))v598[12])((uint64_t)&v598, v240);
  }
  kdebug_trace();
  if (v588[8])
  {
    if (v588[24])
    {
      v674[0].__locale_ = (std::locale::__imp *)&v598;
      v674[1] = *(std::locale *)&v588[16];
      v674[2].__locale_ = (std::locale::__imp *)&__dst;
      sub_239C3BE4C((uint64_t)v674);
      v241 = (uint64_t)__dst;
      if (*(double *)&__dst <= 0.0)
      {
        v242 = 1.0e20;
        v241 = 0x3DDB7CDFD9D7BDBBLL;
      }
      else
      {
        v242 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
      }
      *(_QWORD *)&v599 = v241;
      *((double *)&v599 + 1) = v242;
      *(_QWORD *)&v601 = v241;
      *((double *)&v601 + 1) = v242;
    }
    else
    {
      v674[0].__locale_ = (std::locale::__imp *)&v598;
      v674[1] = *(std::locale *)&v588[16];
      v674[2].__locale_ = (std::locale::__imp *)&__dst;
      sub_239C3C004((double *)v674);
      sub_239C3C12C((double *)v674);
      v243 = 1.0e20;
      v244 = 0x3DDB7CDFD9D7BDBBLL;
      v245 = 0x3DDB7CDFD9D7BDBBLL;
      v246 = 1.0e20;
      if (*(double *)&__dst > 0.0)
      {
        v245 = (uint64_t)__dst;
        v246 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
      }
      *(_QWORD *)&v599 = v245;
      *((double *)&v599 + 1) = v246;
      if (v568 > 0.0)
      {
        v244 = *(_QWORD *)&v568;
        v243 = 1.0 / (v568 * v568);
      }
      *(_QWORD *)&v601 = v244;
      *((double *)&v601 + 1) = v243;
    }
    memset(v621, 0, 5);
  }
  if (((unsigned int (*)(uint64_t))v598[1])((uint64_t)&v598))
  {
    if (BYTE8(v586))
    {
      v247 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v247 + *(_QWORD *)(*v247 - 24)));
      v248 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v248->__vftable[2].~facet_0)(v248, 10);
      std::locale::~locale(v674);
      std::ostream::put();
      std::ostream::flush();
    }
    LODWORD(v575) = 0;
    v249 = v673;
    if (!v673)
      goto LABEL_859;
    goto LABEL_349;
  }
  *(_QWORD *)&v576 = sub_239C3C294((uint64_t)&v598, (uint64_t)v577);
  *((_QWORD *)&v576 + 1) = v576;
  v593 = *(double *)&v576;
  sub_23945D3D0(&v578[1], (char *)v577[0], (char *)v577[1], ((char *)v577[1] - (char *)v577[0]) >> 3);
  kdebug_trace();
  v252 = v613;
  if ((_BYTE)v613)
  {
LABEL_353:
    v253 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v609 + 1) - v609) >> 3);
  }
  else
  {
    v296 = v604;
    if (v604 == v605)
    {
LABEL_444:
      v297 = v606;
      if (v606 == &v607)
        goto LABEL_353;
      while ((*((_BYTE *)v297 + 76) & 6) == 0)
      {
        v300 = v297[1];
        if (v300)
        {
          do
          {
            v301 = (uint64_t **)v300;
            v300 = (uint64_t *)*v300;
          }
          while (v300);
        }
        else
        {
          do
          {
            v301 = (uint64_t **)v297[2];
            _ZF = *v301 == (uint64_t *)v297;
            v297 = v301;
          }
          while (!_ZF);
        }
        v297 = v301;
        if (v301 == &v607)
          goto LABEL_353;
      }
    }
    else
    {
      while ((*((_BYTE *)v296 + 92) & 6) == 0)
      {
        v298 = v296[1];
        if (v298)
        {
          do
          {
            v299 = (uint64_t **)v298;
            v298 = (uint64_t *)*v298;
          }
          while (v298);
        }
        else
        {
          do
          {
            v299 = (uint64_t **)v296[2];
            _ZF = *v299 == (uint64_t *)v296;
            v296 = v299;
          }
          while (!_ZF);
        }
        v296 = v299;
        if (v299 == v605)
          goto LABEL_444;
      }
    }
    v302 = v609;
    if ((_QWORD)v609 == *((_QWORD *)&v609 + 1))
    {
      v253 = 0;
    }
    else
    {
      v253 = 0;
      v303 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v302 + 48) + 52) & 6) == 0
          && (*(_BYTE *)(*(_QWORD *)(v302 + 56) + 52) & 6) == 0)
        {
          v253 = ++v303;
        }
        v302 += 120;
      }
      while (v302 != *((_QWORD *)&v609 + 1));
    }
  }
  v254 = (_QWORD *)v581;
  v580[0] = (char *)v580[0] + v253;
  if ((unint64_t)v581 < *((_QWORD *)&v581 + 1))
  {
    *(_QWORD *)v581 = v253;
    v255 = v254 + 1;
    goto LABEL_479;
  }
  v289 = v580[1];
  v290 = v581 - (unint64_t)v580[1];
  v291 = (uint64_t)(v581 - (unint64_t)v580[1]) >> 3;
  v292 = v291 + 1;
  if ((unint64_t)(v291 + 1) >> 61)
    goto LABEL_872;
  v293 = *((_QWORD *)&v581 + 1) - (unint64_t)v580[1];
  if ((uint64_t)(*((_QWORD *)&v581 + 1) - (unint64_t)v580[1]) >> 2 > v292)
    v292 = v293 >> 2;
  if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
    v294 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v294 = v292;
  if (v294)
  {
    if (!(v294 >> 61))
    {
      v295 = (char *)operator new(8 * v294);
      goto LABEL_470;
    }
LABEL_877:
    sub_239418A80();
  }
  v295 = 0;
LABEL_470:
  v304 = (unint64_t *)&v295[8 * v291];
  v305 = &v295[8 * v294];
  *v304 = v253;
  v255 = v304 + 1;
  if (v254 != (_QWORD *)v289)
  {
    v306 = (char *)v254 - v289 - 8;
    if (v306 < 0x58)
      goto LABEL_883;
    if ((unint64_t)((char *)v254 - &v295[v290]) < 0x20)
      goto LABEL_883;
    v307 = (v306 >> 3) + 1;
    v308 = &v295[8 * v291 - 16];
    v309 = (__int128 *)(v254 - 2);
    v310 = v307 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v311 = *v309;
      *((_OWORD *)v308 - 1) = *(v309 - 1);
      *(_OWORD *)v308 = v311;
      v308 -= 32;
      v309 -= 2;
      v310 -= 4;
    }
    while (v310);
    v304 -= v307 & 0x3FFFFFFFFFFFFFFCLL;
    v254 -= v307 & 0x3FFFFFFFFFFFFFFCLL;
    if (v307 != (v307 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_883:
      do
      {
        v312 = *--v254;
        *--v304 = v312;
      }
      while (v254 != (_QWORD *)v289);
    }
  }
  v580[1] = v304;
  *(_QWORD *)&v581 = v255;
  *((_QWORD *)&v581 + 1) = v305;
  if (v289)
  {
    operator delete(v289);
    v252 = v613;
  }
LABEL_479:
  *(_QWORD *)&v581 = v255;
  if (v252)
  {
LABEL_480:
    v313 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v611 - *((_QWORD *)&v610 + 1)) >> 5);
  }
  else
  {
    v322 = v604;
    if (v604 == v605)
    {
LABEL_493:
      v323 = v606;
      if (v606 == &v607)
        goto LABEL_480;
      while ((*((_BYTE *)v323 + 76) & 6) == 0)
      {
        v326 = v323[1];
        if (v326)
        {
          do
          {
            v327 = (uint64_t **)v326;
            v326 = (uint64_t *)*v326;
          }
          while (v326);
        }
        else
        {
          do
          {
            v327 = (uint64_t **)v323[2];
            _ZF = *v327 == (uint64_t *)v323;
            v323 = v327;
          }
          while (!_ZF);
        }
        v323 = v327;
        if (v327 == &v607)
          goto LABEL_480;
      }
    }
    else
    {
      while ((*((_BYTE *)v322 + 92) & 6) == 0)
      {
        v324 = v322[1];
        if (v324)
        {
          do
          {
            v325 = (uint64_t **)v324;
            v324 = (uint64_t *)*v324;
          }
          while (v324);
        }
        else
        {
          do
          {
            v325 = (uint64_t **)v322[2];
            _ZF = *v325 == (uint64_t *)v322;
            v322 = v325;
          }
          while (!_ZF);
        }
        v322 = v325;
        if (v325 == v605)
          goto LABEL_493;
      }
    }
    v328 = (_QWORD *)*((_QWORD *)&v610 + 1);
    if (*((_QWORD *)&v610 + 1) == (_QWORD)v611)
    {
      v313 = 0;
    }
    else
    {
      v313 = 0;
      v329 = 0;
      do
      {
        if ((*(_BYTE *)(v328[10] + 52) & 6) == 0
          && (*(_BYTE *)(v328[11] + 52) & 6) == 0
          && (*(_BYTE *)(v328[12] + 36) & 6) == 0)
        {
          v313 = ++v329;
        }
        v328 += 20;
      }
      while (v328 != (_QWORD *)v611);
    }
  }
  v580[0] = (char *)v580[0] + v313;
  if ((unint64_t)v255 < *((_QWORD *)&v581 + 1))
  {
    *v255 = v313;
    v314 = v255 + 1;
    goto LABEL_531;
  }
  v315 = (unint64_t *)v580[1];
  v316 = (char *)v255 - (char *)v580[1];
  v317 = ((char *)v255 - (char *)v580[1]) >> 3;
  v318 = v317 + 1;
  if ((unint64_t)(v317 + 1) >> 61)
LABEL_872:
    sub_2394189F8();
  v319 = *((_QWORD *)&v581 + 1) - (unint64_t)v580[1];
  if ((uint64_t)(*((_QWORD *)&v581 + 1) - (unint64_t)v580[1]) >> 2 > v318)
    v318 = v319 >> 2;
  if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFF8)
    v320 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v320 = v318;
  if (v320)
  {
    if (v320 >> 61)
      goto LABEL_877;
    v321 = operator new(8 * v320);
  }
  else
  {
    v321 = 0;
  }
  v330 = (unint64_t *)&v321[8 * v317];
  v331 = &v321[8 * v320];
  *v330 = v313;
  v314 = v330 + 1;
  if (v255 != v315)
  {
    v332 = (char *)v255 - (char *)v315 - 8;
    if (v332 < 0x58)
    {
      v333 = v255;
      goto LABEL_528;
    }
    if ((unint64_t)((char *)v255 - &v321[v316]) < 0x20)
    {
      v333 = v255;
      goto LABEL_528;
    }
    v334 = (v332 >> 3) + 1;
    v333 = &v255[-(v334 & 0x3FFFFFFFFFFFFFFCLL)];
    v335 = &v321[8 * v317 - 16];
    v336 = v255 - 2;
    v337 = v334 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v338 = *(_OWORD *)v336;
      *(v335 - 1) = *((_OWORD *)v336 - 1);
      *v335 = v338;
      v335 -= 2;
      v336 -= 4;
      v337 -= 4;
    }
    while (v337);
    v330 -= v334 & 0x3FFFFFFFFFFFFFFCLL;
    if (v334 != (v334 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_528:
        v339 = *--v333;
        *--v330 = v339;
      }
      while (v333 != v315);
    }
  }
  v580[1] = v330;
  *(_QWORD *)&v581 = v314;
  *((_QWORD *)&v581 + 1) = v331;
  if (v315)
  {
    operator delete(v315);
    v252 = v613;
  }
LABEL_531:
  *(_QWORD *)&v581 = v314;
  if (v252)
  {
    v340 = v604;
    if (v604 != v605)
    {
      v341 = 0;
      while (1)
      {
        if ((*((_BYTE *)v340 + 92) & 6) != 0)
        {
          v342 = v340[1];
          if (v342)
            goto LABEL_539;
        }
        else
        {
          v341 += *((unsigned __int8 *)v340 + 44);
          v342 = v340[1];
          if (v342)
          {
            do
            {
LABEL_539:
              v343 = (uint64_t **)v342;
              v342 = (uint64_t *)*v342;
            }
            while (v342);
            goto LABEL_534;
          }
        }
        do
        {
          v343 = (uint64_t **)v340[2];
          _ZF = *v343 == (uint64_t *)v340;
          v340 = v343;
        }
        while (!_ZF);
LABEL_534:
        v340 = v343;
        if (v343 == v605)
          goto LABEL_611;
      }
    }
    v341 = 0;
  }
  else
  {
    memset(v674, 0, sizeof(v674));
    v676 = 0u;
    v677 = 0u;
    v675 = 1065353216;
    v678 = 1065353216;
    v344 = v604;
    if (v604 == v605)
    {
      v341 = 0;
      v345 = 0;
    }
    else
    {
      v341 = 0;
      v345 = 0;
      v346 = 0;
      do
      {
        if ((*((_BYTE *)v344 + 92) & 6) != 0)
          v345 = 1;
        if (*((_BYTE *)v344 + 44))
          v341 = ++v346;
        v347 = v344[1];
        if (v347)
        {
          do
          {
            v348 = (uint64_t **)v347;
            v347 = (uint64_t *)*v347;
          }
          while (v347);
        }
        else
        {
          do
          {
            v348 = (uint64_t **)v344[2];
            _ZF = *v348 == (uint64_t *)v344;
            v344 = v348;
          }
          while (!_ZF);
        }
        v344 = v348;
      }
      while (v348 != v605);
    }
    v349 = v606;
    if (v606 != &v607)
    {
      do
      {
        if ((*((_BYTE *)v349 + 76) & 6) != 0)
          v345 = 1;
        v352 = v349[1];
        if (v352)
        {
          do
          {
            v353 = (uint64_t **)v352;
            v352 = (uint64_t *)*v352;
          }
          while (v352);
        }
        else
        {
          do
          {
            v353 = (uint64_t **)v349[2];
            _ZF = *v353 == (uint64_t *)v349;
            v349 = v353;
          }
          while (!_ZF);
        }
        v349 = v353;
      }
      while (v353 != &v607);
    }
    if (v345)
    {
      v351 = *((_QWORD *)&v609 + 1);
      for (i = v609; i != v351; i += 120)
      {
        v354 = *(_QWORD *)(i + 48);
        if ((*(_BYTE *)(v354 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(i + 56) + 52) & 6) != 0)
        {
          LODWORD(v564) = *(_DWORD *)v354;
          *(double *)&__dst = COERCE_DOUBLE(&v564);
          v355 = sub_2395EC77C((uint64_t)v674, (unsigned int *)&v564, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v355 + 5);
          LODWORD(v564) = **(_DWORD **)(i + 56);
          *(double *)&__dst = COERCE_DOUBLE(&v564);
          v356 = sub_2395EC77C((uint64_t)v674, (unsigned int *)&v564, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v356 + 5);
        }
      }
      sub_239C29188(*((uint64_t **)&v610 + 1), (uint64_t *)v611, (uint64_t)v674);
      v357 = v674[2].__locale_;
      if (v674[2].__locale_)
      {
        if (v605[0])
        {
          v358 = 0;
          do
          {
            v360 = *((_DWORD *)v357 + 4);
            v359 = v605;
            v361 = (uint64_t *)v605[0];
            do
            {
              v362 = v361;
              v363 = v359;
              v364 = *((_DWORD *)v361 + 8);
              if (v364 >= v360)
                v359 = v361;
              else
                ++v361;
              v361 = (uint64_t *)*v361;
            }
            while (v361);
            if (v359 == v605)
              goto LABEL_579;
            if (v364 < v360)
              v362 = v363;
            if (v360 < *((_DWORD *)v362 + 8))
LABEL_579:
              v359 = v605;
            if (*((_DWORD *)v359 + 24) == *((_DWORD *)v357 + 5))
              ++v358;
            v357 = *(std::locale::__imp **)v357;
          }
          while (v357);
        }
        else
        {
          v358 = 0;
          do
          {
            if (DWORD2(v612) == *((_DWORD *)v357 + 5))
              ++v358;
            v357 = *(std::locale::__imp **)v357;
          }
          while (v357);
        }
      }
      else
      {
        v358 = 0;
      }
      if (v341 >= v358)
        v341 -= v358;
      else
        v341 = 0;
      v365 = (_QWORD *)v677;
      if ((_QWORD)v677)
      {
        do
        {
          v366 = (_QWORD *)*v365;
          operator delete(v365);
          v365 = v366;
        }
        while (v366);
      }
    }
    v367 = (void *)v676;
    *(_QWORD *)&v676 = 0;
    if (v367)
      operator delete(v367);
    v368 = v674[2].__locale_;
    if (v674[2].__locale_)
    {
      do
      {
        v369 = *(std::locale::__imp **)v368;
        operator delete(v368);
        v368 = v369;
      }
      while (v369);
    }
    v370 = v674[0].__locale_;
    v674[0].__locale_ = 0;
    if (v370)
      operator delete(v370);
  }
LABEL_611:
  v371 = v341;
  v582.i64[0] += v341;
  v582.i64[1] += 3 * v341;
  v372 = (char *)__p[1];
  if (__p[1] >= v584)
  {
    v374 = __p[0];
    v375 = (char *)__p[1] - (char *)__p[0];
    v376 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v377 = v376 + 1;
    if ((unint64_t)(v376 + 1) >> 61)
      goto LABEL_873;
    v378 = v584 - (char *)__p[0];
    if ((v584 - (char *)__p[0]) >> 2 > v377)
      v377 = v378 >> 2;
    if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFF8)
      v379 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v379 = v377;
    if (v379)
    {
      if (v379 >> 61)
        goto LABEL_878;
      v380 = operator new(8 * v379);
    }
    else
    {
      v380 = 0;
    }
    v381 = &v380[8 * v376];
    v382 = &v380[8 * v379];
    *v381 = v371;
    v373 = v381 + 1;
    if (v372 != v374)
    {
      v383 = v372 - v374 - 8;
      if (v383 < 0x58)
        goto LABEL_884;
      if ((unint64_t)(v372 - v380 - v375) < 0x20)
        goto LABEL_884;
      v384 = (v383 >> 3) + 1;
      v385 = &v380[8 * v376 - 16];
      v386 = v372 - 16;
      v387 = v384 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v388 = *(_OWORD *)v386;
        *(v385 - 1) = *((_OWORD *)v386 - 1);
        *v385 = v388;
        v385 -= 2;
        v386 -= 32;
        v387 -= 4;
      }
      while (v387);
      v381 -= v384 & 0x3FFFFFFFFFFFFFFCLL;
      v372 -= 8 * (v384 & 0x3FFFFFFFFFFFFFFCLL);
      if (v384 != (v384 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_884:
        do
        {
          v389 = *((_QWORD *)v372 - 1);
          v372 -= 8;
          *--v381 = v389;
        }
        while (v372 != v374);
      }
    }
    __p[0] = v381;
    __p[1] = v373;
    v584 = v382;
    if (v374)
      operator delete(v374);
  }
  else
  {
    *(_QWORD *)__p[1] = v371;
    v373 = v372 + 8;
  }
  __p[1] = v373;
  if ((_BYTE)v613)
  {
    v390 = v606;
    if (v606 != &v607)
    {
      v391 = 0;
      while (1)
      {
        if ((*((_BYTE *)v390 + 76) & 6) != 0)
        {
          v392 = v390[1];
          if (v392)
            goto LABEL_640;
        }
        else
        {
          v391 += *((unsigned __int8 *)v390 + 44);
          v392 = v390[1];
          if (v392)
          {
            do
            {
LABEL_640:
              v393 = (uint64_t **)v392;
              v392 = (uint64_t *)*v392;
            }
            while (v392);
            goto LABEL_635;
          }
        }
        do
        {
          v393 = (uint64_t **)v390[2];
          _ZF = *v393 == (uint64_t *)v390;
          v390 = v393;
        }
        while (!_ZF);
LABEL_635:
        v390 = v393;
        if (v393 == &v607)
          goto LABEL_711;
      }
    }
    v391 = 0;
  }
  else
  {
    memset(v674, 0, sizeof(v674));
    v676 = 0u;
    v677 = 0u;
    v675 = 1065353216;
    v678 = 1065353216;
    v394 = v604;
    if (v604 == v605)
    {
      v395 = 0;
    }
    else
    {
      v395 = 0;
      do
      {
        if ((*((_BYTE *)v394 + 92) & 6) != 0)
          v395 = 1;
        v396 = v394[1];
        if (v396)
        {
          do
          {
            v397 = (uint64_t **)v396;
            v396 = (uint64_t *)*v396;
          }
          while (v396);
        }
        else
        {
          do
          {
            v397 = (uint64_t **)v394[2];
            _ZF = *v397 == (uint64_t *)v394;
            v394 = v397;
          }
          while (!_ZF);
        }
        v394 = v397;
      }
      while (v397 != v605);
    }
    v398 = v606;
    if (v606 == &v607)
    {
      v391 = 0;
    }
    else
    {
      v391 = 0;
      v399 = 0;
      do
      {
        if ((*((_BYTE *)v398 + 76) & 6) != 0)
          v395 = 1;
        if (*((_BYTE *)v398 + 44))
          v391 = ++v399;
        v400 = v398[1];
        if (v400)
        {
          do
          {
            v401 = (uint64_t **)v400;
            v400 = (uint64_t *)*v400;
          }
          while (v400);
        }
        else
        {
          do
          {
            v401 = (uint64_t **)v398[2];
            _ZF = *v401 == (uint64_t *)v398;
            v398 = v401;
          }
          while (!_ZF);
        }
        v398 = v401;
      }
      while (v401 != &v607);
    }
    if (v395)
    {
      v403 = *((_QWORD *)&v609 + 1);
      for (j = v609; j != v403; j += 120)
      {
        v404 = *(_QWORD *)(j + 48);
        if ((*(_BYTE *)(v404 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(j + 56) + 52) & 6) != 0)
        {
          LODWORD(v564) = *(_DWORD *)v404;
          *(double *)&__dst = COERCE_DOUBLE(&v564);
          v405 = sub_2395EC77C((uint64_t)v674, (unsigned int *)&v564, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v405 + 5);
          LODWORD(v564) = **(_DWORD **)(j + 56);
          *(double *)&__dst = COERCE_DOUBLE(&v564);
          v406 = sub_2395EC77C((uint64_t)v674, (unsigned int *)&v564, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v406 + 5);
        }
      }
      sub_239C29188(*((uint64_t **)&v610 + 1), (uint64_t *)v611, (uint64_t)v674);
      v407 = (_QWORD *)v677;
      if ((_QWORD)v677)
      {
        if (v607)
        {
          v408 = 0;
          v409 = (uint64_t *)v677;
          do
          {
            v411 = *((_DWORD *)v409 + 4);
            v410 = &v607;
            v412 = v607;
            do
            {
              v413 = v412;
              v414 = v410;
              v415 = *((_DWORD *)v412 + 8);
              if (v415 >= v411)
                v410 = (uint64_t **)v412;
              else
                ++v412;
              v412 = (uint64_t *)*v412;
            }
            while (v412);
            if (v410 == &v607)
              goto LABEL_682;
            if (v415 < v411)
              v413 = (uint64_t *)v414;
            if (v411 < *((_DWORD *)v413 + 8))
LABEL_682:
              v410 = &v607;
            if (*((_DWORD *)v410 + 20) == *((_DWORD *)v409 + 5))
              ++v408;
            v409 = (uint64_t *)*v409;
          }
          while (v409);
        }
        else
        {
          v408 = 0;
          v416 = (uint64_t *)v677;
          do
          {
            if (v613 == *((_DWORD *)v416 + 5))
              ++v408;
            v416 = (uint64_t *)*v416;
          }
          while (v416);
        }
        _CF = v391 >= v408;
        v417 = v391 - v408;
        if (_CF)
          v391 = v417;
        else
          v391 = 0;
        do
        {
          v418 = (_QWORD *)*v407;
          operator delete(v407);
          v407 = v418;
        }
        while (v418);
      }
    }
    v419 = (void *)v676;
    *(_QWORD *)&v676 = 0;
    if (v419)
      operator delete(v419);
    v420 = v674[2].__locale_;
    if (v674[2].__locale_)
    {
      do
      {
        v421 = *(std::locale::__imp **)v420;
        operator delete(v420);
        v420 = v421;
      }
      while (v421);
    }
    v422 = v674[0].__locale_;
    v674[0].__locale_ = 0;
    if (v422)
      operator delete(v422);
    v373 = __p[1];
  }
LABEL_711:
  v423 = v391;
  v582 = vaddq_s64(v582, vdupq_n_s64(v391));
  if (v373 >= (_QWORD *)v584)
  {
    v425 = __p[0];
    v426 = (char *)v373 - (char *)__p[0];
    v427 = ((char *)v373 - (char *)__p[0]) >> 3;
    v428 = v427 + 1;
    if (!((unint64_t)(v427 + 1) >> 61))
    {
      v429 = v584 - (char *)__p[0];
      if ((v584 - (char *)__p[0]) >> 2 > v428)
        v428 = v429 >> 2;
      if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFF8)
        v430 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v430 = v428;
      if (!v430)
      {
        v431 = 0;
LABEL_723:
        v432 = &v431[8 * v427];
        v433 = &v431[8 * v430];
        *v432 = v423;
        v424 = v432 + 1;
        if (v373 == (_QWORD *)v425)
          goto LABEL_732;
        v434 = (char *)v373 - v425 - 8;
        if (v434 >= 0x58)
        {
          if ((unint64_t)((char *)v373 - v431 - v426) >= 0x20)
          {
            v436 = (v434 >> 3) + 1;
            v435 = &v373[-(v436 & 0x3FFFFFFFFFFFFFFCLL)];
            v437 = &v431[8 * v427 - 16];
            v438 = (__int128 *)(v373 - 2);
            v439 = v436 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v440 = *v438;
              *(v437 - 1) = *(v438 - 1);
              *v437 = v440;
              v437 -= 2;
              v438 -= 2;
              v439 -= 4;
            }
            while (v439);
            v432 -= v436 & 0x3FFFFFFFFFFFFFFCLL;
            if (v436 == (v436 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_732:
              __p[0] = v432;
              __p[1] = v424;
              v584 = v433;
              if (v425)
                operator delete(v425);
              goto LABEL_734;
            }
          }
          else
          {
            v435 = v373;
          }
        }
        else
        {
          v435 = v373;
        }
        do
        {
          v441 = *--v435;
          *--v432 = v441;
        }
        while (v435 != (_QWORD *)v425);
        goto LABEL_732;
      }
      if (!(v430 >> 61))
      {
        v431 = operator new(8 * v430);
        goto LABEL_723;
      }
LABEL_878:
      sub_239418A80();
    }
LABEL_873:
    sub_2394189F8();
  }
  *v373 = v391;
  v424 = v373 + 1;
LABEL_734:
  __p[1] = v424;
  if (((unsigned int (__cdecl *)())v585[3])())
  {
    if (((unsigned int (*)(uint64_t))v585[5])((uint64_t)&v585))
    {
      v445 = ((double (*)(uint64_t, double, double, float64x2_t))v598[11])((uint64_t)&v598, v442, v443, v444);
      ((void (*)(uint64_t, double))v585[6])((uint64_t)&v585, v445);
    }
    else
    {
      ((void (*)(uint64_t))v585[7])((uint64_t)&v585);
    }
    v446 = ((double (*)(uint64_t))v585[4])((uint64_t)&v585);
    ((void (*)(uint64_t, double))v598[12])((uint64_t)&v598, v446);
  }
  v447 = v626;
  v448 = 8 * v626;
  v449 = (v448 + 31) & 0xFFFFFFFE0;
  *(double *)&__dst = 0.0;
  *(_QWORD *)&v568 = v449 >> 3;
  v674[0].__locale_ = 0;
  malloc_type_posix_memalign((void **)&v674[0].__locale_, 0x20uLL, v449, 0x100BBD03uLL);
  v450 = (double *)v674[0].__locale_;
  __dst = v674[0].__locale_;
  v94 = (double *)v526;
  v162 = v542;
  v218 = v589;
  if (!v674[0].__locale_)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v514 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v514, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v447)
  {
    memcpy(v674[0].__locale_, __src[0], v448);
    v450 = (double *)__dst;
  }
  v569 = v626;
  v451 = fabs(*v450);
  if (v626 != 1)
  {
    v452 = v450 + 1;
    v453 = 8 * v626 - 8;
    do
    {
      v454 = *v452++;
      v455 = fabs(v454);
      if (v451 < v455)
        v451 = v455;
      v453 -= 8;
    }
    while (v453);
  }
  if (v451 < v451 * *(double *)&v587)
  {
    if (BYTE8(v586))
    {
      v456 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v456 + *(_QWORD *)(*v456 - 24)));
      v457 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v457->__vftable[2].~facet_0)(v457, 10);
      std::locale::~locale(v674);
      std::ostream::put();
      std::ostream::flush();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
      v458 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v458, (uint64_t)"][", 2);
      if (v451 == 0.0)
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
      else
        std::ostream::operator<<();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
      v510 = (_QWORD *)std::ostream::operator<<();
      v511 = sub_239458500(v510, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v511 + *(_QWORD *)(*v511 - 24)));
      v512 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v512->__vftable[2].~facet_0)(v512, 10);
      std::locale::~locale(v674);
      std::ostream::put();
      std::ostream::flush();
    }
    LODWORD(v575) = 1;
    goto LABEL_858;
  }
  v459 = v593;
  kdebug_trace();
  v564 = 0;
  v565 = 0;
  v566 = 0;
  v460 = v451;
  do
  {
    v463 = (int)v574;
    if ((int)v574 >= SDWORD1(v586))
      break;
    v464 = (_DWORD)v574 + 1;
    LODWORD(v574) = (_DWORD)v574 + 1;
    if (((unsigned int (*)(uint64_t, uint64_t))v598[2])((uint64_t)&v598, (uint64_t)&v564))
    {
      v505 = BYTE8(v586);
      if (BYTE8(v586))
      {
        v506 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
        std::ios_base::getloc((const std::ios_base *)((char *)v506 + *(_QWORD *)(*v506 - 24)));
        v507 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v507->__vftable[2].~facet_0)(v507, 10);
        std::locale::~locale(v674);
        std::ostream::put();
        std::ostream::flush();
        v505 = 0;
      }
      goto LABEL_851;
    }
    ++HIDWORD(v574);
    if (v566)
    {
      v465 = *(double *)v564 * *(double *)v564;
      if (v566 != 1)
      {
        v466 = (double *)((char *)v564 + 8);
        v467 = (v566 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v467 >= 3)
        {
          v468 = v467 + 1;
          v469 = (float64x2_t *)((char *)v564 + 24);
          v470 = v468 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v471 = vmulq_f64(v469[-1], v469[-1]);
            v472 = vmulq_f64(*v469, *v469);
            v465 = v465 + v471.f64[0] + v471.f64[1] + v472.f64[0] + v472.f64[1];
            v469 += 2;
            v470 -= 4;
          }
          while (v470);
          if (v468 == (v468 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_767;
          v466 += v468 & 0x3FFFFFFFFFFFFFFCLL;
        }
        do
        {
          v473 = *v466++;
          v465 = v465 + v473 * v473;
        }
        while (v466 != (double *)((char *)v564 + 8 * v566));
      }
    }
    else
    {
      v465 = 0.0;
    }
LABEL_767:
    v474 = sqrt(v465);
    if (v474 < *((double *)&v587 + 1) * (v237 + *((double *)&v587 + 1)) && v463 >= (int)v586)
    {
      if (BYTE8(v586))
      {
        v508 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
        std::ios_base::getloc((const std::ios_base *)((char *)v508 + *(_QWORD *)(*v508 - 24)));
        v509 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v509->__vftable[2].~facet_0)(v509, 10);
        std::locale::~locale(v674);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v585[8])((uint64_t)&v585, v459, v474, v460, v451);
      }
      v505 = 2;
LABEL_851:
      LODWORD(v575) = v505;
      break;
    }
    ((void (*)(uint64_t, _QWORD *))v598[5])((uint64_t)&v598, &v564);
    v476 = v626;
    sub_23945215C((uint64_t)&__dst, v626);
    if ((_DWORD)v476)
      memcpy(__dst, __src[0], 8 * v476);
    v569 = v626;
    if (v592)
      (*(void (**)(_BYTE *))(*(_QWORD *)v592 + 48))(v592);
    v561 = 0;
    v562 = 0;
    v563 = 0;
    v477 = v578[1];
    v478 = v579 - (unint64_t)v578[1];
    if ((void *)v579 != v578[1])
    {
      if (v478 < 0)
        sub_2394189F8();
      v561 = operator new(v579 - (unint64_t)v578[1]);
      v562 = (char *)v561;
      v479 = (char *)v561 + 8 * (v478 >> 3);
      v563 = v479;
      memcpy(v561, v477, v478);
      v562 = v479;
      v162 = v542;
    }
    v94 = (double *)v526;
    v459 = sub_239C3C294((uint64_t)&v598, (uint64_t)&v578[1]);
    v460 = fabs(*(double *)__dst);
    if (v569 != 1)
    {
      v480 = (double *)((char *)__dst + 8);
      v481 = 8 * v569 - 8;
      do
      {
        v482 = *v480++;
        v483 = fabs(v482);
        if (v460 < v483)
          v460 = v483;
        v481 -= 8;
      }
      while (v481);
    }
    if (BYTE8(v586))
      ((void (*)(uint64_t, double, double, double, double))v585[8])((uint64_t)&v585, v459, v474, v460, v451);
    if (v459 == 0.0)
    {
      if (BYTE8(v586))
      {
        v484 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v485 = sub_239458500(v484, (uint64_t)"N.A.", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v485 + *(_QWORD *)(*v485 - 24)));
        v486 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v486->__vftable[2].~facet_0)(v486, 10);
        std::locale::~locale(v674);
        std::ostream::put();
        goto LABEL_811;
      }
      goto LABEL_812;
    }
    if (vabdd_f64(v459, v593) < v459 * *(double *)v588 && v463 >= (int)v586)
    {
      if (BYTE8(v586))
      {
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v493 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v493 + *(_QWORD *)(*v493 - 24)));
        v494 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v494->__vftable[2].~facet_0)(v494, 10);
        std::locale::~locale(v674);
        std::ostream::put();
LABEL_811:
        std::ostream::flush();
      }
LABEL_812:
      v593 = v459;
      v495 = 3;
LABEL_813:
      v461 = 0;
      LODWORD(v575) = v495;
      v462 = (char *)v561;
      if (!v561)
        continue;
      goto LABEL_753;
    }
    if (DWORD2(v624))
    {
      memset(v674, 0, 20);
      ((void (*)(uint64_t, uint64_t))v598[19])((uint64_t)&v598, (uint64_t)v674);
      v488 = ((BOOL (*)(double *, uint64_t, double **, double **, double))v585[10])((double *)&v585, (uint64_t)&v564, (double **)&__dst, (double **)v674, v459);
      free(v674[0].__locale_);
      if (!v488)
        goto LABEL_816;
    }
    else if (!((BOOL (*)(double *, uint64_t, double **, double))v585[9])((double *)&v585, (uint64_t)&v564, (double **)&__dst, v459))
    {
LABEL_816:
      --HIDWORD(v574);
      v496 = v604;
      if (v604 != v605)
      {
        do
        {
          if (*((_BYTE *)v496 + 44))
          {
            *(_OWORD *)(v496 + 7) = *(_OWORD *)(v496 + 13);
            v496[9] = v496[15];
            *((_BYTE *)v496 + 80) = *((_BYTE *)v496 + 128);
          }
          v499 = v496[1];
          if (v499)
          {
            do
            {
              v500 = (uint64_t **)v499;
              v499 = (uint64_t *)*v499;
            }
            while (v499);
          }
          else
          {
            do
            {
              v500 = (uint64_t **)v496[2];
              _ZF = *v500 == (uint64_t *)v496;
              v496 = v500;
            }
            while (!_ZF);
          }
          v496 = v500;
        }
        while (v500 != v605);
      }
      v497 = v606;
      if (v606 != &v607)
      {
        do
        {
          if (*((_BYTE *)v497 + 44))
          {
            v497[7] = v497[11];
            *((_BYTE *)v497 + 64) = *((_BYTE *)v497 + 96);
          }
          v501 = v497[1];
          if (v501)
          {
            do
            {
              v502 = (uint64_t **)v501;
              v501 = (uint64_t *)*v501;
            }
            while (v501);
          }
          else
          {
            do
            {
              v502 = (uint64_t **)v497[2];
              _ZF = *v502 == (uint64_t *)v497;
              v497 = v502;
            }
            while (!_ZF);
          }
          v497 = v502;
        }
        while (v502 != &v607);
      }
      LOBYTE(v621[0]) = 0;
      *(_WORD *)((char *)v621 + 3) = 0;
      BYTE1(v621[0]) = BYTE2(v621[0]);
      sub_23945D3D0(&v578[1], (char *)v561, v562, (v562 - (_BYTE *)v561) >> 3);
      if (((unsigned int (__cdecl *)())v585[3])())
      {
        v498 = ((double (*)(uint64_t))v585[4])((uint64_t)&v585);
        ((void (*)(uint64_t, double))v598[12])((uint64_t)&v598, v498);
      }
      goto LABEL_843;
    }
    if (((unsigned int (__cdecl *)())v585[3])())
    {
      v489 = ((double (*)(uint64_t))v585[4])((uint64_t)&v585);
      ((void (*)(uint64_t, double))v598[12])((uint64_t)&v598, v489);
    }
    if (v460 < v451 * *(double *)&v587 && v463 >= (int)v586)
    {
      if (BYTE8(v586))
      {
        v503 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v503 + *(_QWORD *)(*v503 - 24)));
        v504 = std::locale::use_facet(v674, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v504->__vftable[2].~facet_0)(v504, 10);
        std::locale::~locale(v674);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v585[8])((uint64_t)&v585, v459, v474, v460, v451);
      }
      v495 = 1;
      goto LABEL_813;
    }
    if (v464 < SDWORD1(v586) && v588[8])
    {
      if (v588[24])
      {
        v674[0].__locale_ = (std::locale::__imp *)&v598;
        v674[1] = *(std::locale *)&v588[16];
        v674[2].__locale_ = (std::locale::__imp *)&v570;
        sub_239C3BE4C((uint64_t)v674);
        v491 = 0x3DDB7CDFD9D7BDBBLL;
        v492 = 1.0e20;
        if (v570 > 0.0)
        {
          v491 = *(_QWORD *)&v570;
          v492 = 1.0 / (v570 * v570);
        }
        *(_QWORD *)&v599 = v491;
        *((double *)&v599 + 1) = v492;
        *(_QWORD *)&v601 = v491;
        *((double *)&v601 + 1) = v492;
        memset(v621, 0, 5);
      }
      else
      {
        sub_239C3C794((uint64_t)&v598, *(double *)&v588[16]);
      }
      v593 = sub_239C3C294((uint64_t)&v598, (uint64_t)&v578[1]);
    }
LABEL_843:
    if (v464 < SDWORD1(v586) && v590)
      (*(void (**)(_BYTE *))(*(_QWORD *)v590 + 48))(v590);
    v461 = 1;
    v462 = (char *)v561;
    if (!v561)
      continue;
LABEL_753:
    v562 = v462;
    operator delete(v462);
  }
  while ((v461 & 1) != 0);
  *((double *)&v576 + 1) = v593;
  if (v590)
    (*(void (**)(_BYTE *))(*(_QWORD *)v590 + 48))(v590);
  free(v564);
  v218 = v589;
LABEL_858:
  free(__dst);
  v249 = v673;
  if (!v673)
LABEL_859:
    sub_2394172E0();
LABEL_349:
  (*(void (**)(std::string *))(v249->__r_.__value_.__r.__words[0] + 48))(v249);
  v250 = v673;
  if (v673 == &v672)
  {
    v251 = 4;
    v250 = &v672;
LABEL_357:
    (*(void (**)(void))(v250->__r_.__value_.__r.__words[0] + 8 * v251))();
  }
  else if (v673)
  {
    v251 = 5;
    goto LABEL_357;
  }
  kdebug_trace();
  sub_239C19F80((uint64_t)(v94 + 37), (__int128 *)v571);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v580[1])
  {
    *(void **)&v581 = v580[1];
    operator delete(v580[1]);
  }
  if (v578[1])
  {
    *(void **)&v579 = v578[1];
    operator delete(v578[1]);
  }
  if (v577[0])
  {
    v577[1] = v577[0];
    operator delete(v577[0]);
  }
  if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v573.__r_.__value_.__l.__data_);
    if (SHIBYTE(v572) < 0)
      goto LABEL_404;
  }
  else
  {
    if ((SHIBYTE(v572) & 0x80000000) == 0)
      goto LABEL_368;
LABEL_404:
    operator delete(v571[0]);
  }
LABEL_368:
  v256 = v604;
  if (v604 != v605)
  {
    do
    {
      if (*((_BYTE *)v256 + 44))
      {
        v269 = v256[6];
        if (v269)
        {
          v270 = *(_OWORD *)(v256 + 7);
          v269[2] = (uint64_t)v256[9];
          *(_OWORD *)v269 = v270;
          *((_BYTE *)v269 + 24) = *((_BYTE *)v256 + 80);
        }
      }
      v271 = v256[1];
      if (v271)
      {
        do
        {
          v272 = (uint64_t **)v271;
          v271 = (uint64_t *)*v271;
        }
        while (v271);
      }
      else
      {
        do
        {
          v272 = (uint64_t **)v256[2];
          _ZF = *v272 == (uint64_t *)v256;
          v256 = v272;
        }
        while (!_ZF);
      }
      v256 = v272;
    }
    while (v272 != v605);
  }
  v257 = v606;
  if (v606 != &v607)
  {
    do
    {
      if (*((_BYTE *)v257 + 44))
      {
        v273 = v257[6];
        if (v273)
        {
          v274 = v257[7];
          *((_BYTE *)v273 + 8) = *((_BYTE *)v257 + 64);
          *v273 = (uint64_t)v274;
        }
      }
      v275 = v257[1];
      if (v275)
      {
        do
        {
          v276 = (uint64_t **)v275;
          v275 = (uint64_t *)*v275;
        }
        while (v275);
      }
      else
      {
        do
        {
          v276 = (uint64_t **)v257[2];
          _ZF = *v276 == (uint64_t *)v257;
          v257 = v276;
        }
        while (!_ZF);
      }
      v257 = v276;
    }
    while (v276 != &v607);
  }
  if (*((_BYTE *)v94 + 144))
  {
    sub_2394988CC((uint64_t)v571);
    HIBYTE(v674[2].__locale_) = 18;
    strcpy((char *)v674, "TranslationAverage");
    sub_239C1A0F4((uint64_t)(v94 + 37), &v572, (uint64_t)v674);
    if (SHIBYTE(v674[2].__locale_) < 0)
      operator delete(v674[0].__locale_);
    v571[0] = *(void **)MEMORY[0x24BEDB7F0];
    v258 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v571 + *((_QWORD *)v571[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v572 = v258;
    v573.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v578[1]) < 0)
      operator delete(v577[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v580);
  }
  for (k = (uint64_t *)*((_QWORD *)v94 + 2); k; k = (uint64_t *)*k)
  {
    v260 = sub_239C18404((float *)v558, k[2], k + 2);
    v261 = *((double *)v260 + 5);
    _Q1 = *(float64x2_t *)(v260 + 24);
    _D4 = k[9];
    v264 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(k + 3), _Q1.f64[0]), *(float64x2_t *)(k + 7), _Q1, 1), *(float64x2_t *)(k + 11), v261);
    __asm { FMLA            D2, D4, V1.D[1] }
    v266.f64[0] = _D2 + *((double *)k + 13) * v261;
    *(float64x2_t *)(k + 15) = vnegq_f64(v264);
    k[17] = *(_OWORD *)&vnegq_f64(v266);
  }
  for (m = (_QWORD *)*((_QWORD *)v94 + 7); m; m = (_QWORD *)*m)
    m[4] = sub_239C18878((float *)v555, m[2], m + 2)[3];
  v585 = off_250AFEA50;
  if (v592 == v591)
  {
    v268 = 4;
LABEL_406:
    (*(void (**)(_QWORD *))(*v220 + 8 * v268))(v220);
  }
  else if (v592)
  {
    v268 = 5;
    v220 = v592;
    goto LABEL_406;
  }
  if (v590 == v589)
  {
    v278 = 4;
    v277 = v523;
LABEL_411:
    (*(void (**)(_QWORD *))(*v218 + 8 * v278))(v218);
  }
  else
  {
    v277 = v523;
    if (v590)
    {
      v278 = 5;
      v218 = v590;
      goto LABEL_411;
    }
  }
  if (v162)
    operator delete(v162);
  if (v277)
    operator delete(v277);
  v279 = v549[0];
  if (v549[0])
  {
    do
    {
      v280 = (_QWORD *)*v279;
      operator delete(v279);
      v279 = v280;
    }
    while (v280);
  }
  v281 = v548[0];
  v548[0] = 0;
  if (v281)
    operator delete(v281);
  if (v518)
    operator delete(v518);
  v282 = v556[0];
  if (v556[0])
  {
    do
    {
      v283 = (_QWORD *)*v282;
      operator delete(v282);
      v282 = v283;
    }
    while (v283);
  }
  v284 = v555[0];
  v555[0] = 0;
  if (v284)
    operator delete(v284);
  v285 = v559[0];
  if (v559[0])
  {
    do
    {
      v286 = (_QWORD *)*v285;
      operator delete(v285);
      v285 = v286;
    }
    while (v286);
  }
  v287 = v558[0];
  v558[0] = 0;
  if (v287)
    operator delete(v287);
  v598 = off_250AFBBD8;
  free(v671[1]);
  free(v670[0]);
  v598 = off_250AFBC90;
  free(v666[0]);
  free(v664[1]);
  sub_239C33AF4((uint64_t)&v598);
  v3 = v515;
  v2 = v516;
  return v3 != v2;
}

void sub_239C14020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  void *a69;
  uint64_t v69;
  unint64_t *v71;
  uint64_t v72;

  std::locale::~locale((std::locale *)(v69 - 256));
  free(a66);
  free(a69);
  if (!STACK[0x7D8])
    sub_2394172E0();
  (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x7D8] + 48))(STACK[0x7D8]);
  v71 = (unint64_t *)STACK[0x7D8];
  if ((unint64_t *)STACK[0x7D8] == &STACK[0x7C0])
  {
    v72 = 4;
    v71 = &STACK[0x7C0];
  }
  else
  {
    if (!v71)
      goto LABEL_8;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_8:
  sub_239C0BE14((uint64_t)&STACK[0x200]);
  sub_239C30284();
  sub_239C1AAB0(&STACK[0x320]);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  sub_239420950((uint64_t)&a41);
  if (a12)
    operator delete(a12);
  sub_239420950((uint64_t)&a51);
  sub_239420950((uint64_t)&a57);
  sub_239C33BEC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_239C143E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_239A4D7C0((uint64_t)&a47);
  JUMPOUT(0x239C14518);
}

void sub_239C143F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_239A4D7C0((uint64_t)&a49);
  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  JUMPOUT(0x239C14518);
}

void sub_239C14438()
{
  sub_239C1AAB0(&STACK[0x320]);
  JUMPOUT(0x239C144E8);
}

void sub_239C14468()
{
  JUMPOUT(0x239C14520);
}

void sub_239C14470()
{
  JUMPOUT(0x239C14528);
}

void sub_239C1447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;

  if (v41)
    operator delete(v41);
  if (a14)
    operator delete(a14);
  sub_239420950((uint64_t)&a41);
  if (!a12)
    JUMPOUT(0x239C14520);
  JUMPOUT(0x239C14518);
}

void sub_239C144B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  sub_239A4D7C0(v69 - 256);
  sub_239A4D7C0((uint64_t)&a39);
  sub_239A4D7C0((uint64_t)&a69);
  JUMPOUT(0x239C144E0);
}

void sub_239C144DC()
{
  JUMPOUT(0x239C144E8);
}

BOOL sub_239C14540(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  char *v16;
  unint64_t v17;
  unint64_t *v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  double v28;
  char *v29;
  int8x16_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  unsigned int v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  _QWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  _QWORD *v62;
  void **v63;
  unsigned int v64;
  int v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t **v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t *v74;
  _DWORD *v75;
  void *v76;
  void (**v77)();
  unsigned int *v78;
  unsigned int *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned int *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 v92;
  unsigned int v93;
  double *v94;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x8_t v102;
  uint8x8_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  int8x8_t v116;
  uint8x8_t v117;
  unint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  float64x2_t v124;
  double v126;
  double v128;
  float64x2_t v130;
  char *v139;
  double v140;
  char *v141;
  std::__shared_weak_count *v142;
  double v143;
  unint64_t *v144;
  double v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  __int128 v151;
  unint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  char *v162;
  char *v163;
  double *v164;
  double *v165;
  int v166;
  double v167;
  char *v168;
  char *v169;
  char *v170;
  void *v171;
  uint64_t v172;
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  __int128 v180;
  void *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  __int128 v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  __int128 v194;
  _QWORD *v195;
  std::locale::__imp *v196;
  std::string::size_type v197;
  double v198;
  double v199;
  std::__shared_weak_count *v200;
  double v201;
  unint64_t *v202;
  double v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char v207;
  char v208;
  unint64_t v209;
  std::locale::__imp *locale;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *p_shared_owners;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  __int128 v223;
  double v226;
  double v227;
  std::locale *v228;
  uint64_t v229;
  double v230;
  uint64_t v231;
  double v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  _QWORD *v237;
  const std::locale::facet *v238;
  std::string *v239;
  std::string *v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t *v245;
  uint64_t **v246;
  uint64_t **v247;
  std::locale::__imp *v248;
  uint64_t *k;
  char *v250;
  double v251;
  float64x2_t v254;
  float64x2_t v256;
  _QWORD *m;
  uint64_t v258;
  uint64_t *v259;
  __int128 v260;
  uint64_t *v261;
  uint64_t **v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t **v266;
  char *v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  void *v271;
  _QWORD *v272;
  _QWORD *v273;
  void *v274;
  _QWORD *v275;
  _QWORD *v276;
  void *v277;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  int64_t v283;
  unint64_t v284;
  char *v285;
  uint64_t **v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t **v289;
  uint64_t *v290;
  uint64_t **v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t *v294;
  char *v295;
  unint64_t v296;
  uint64_t v297;
  char *v298;
  __int128 *v299;
  uint64_t v300;
  __int128 v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  unint64_t *v305;
  int64_t v306;
  uint64_t v307;
  unint64_t v308;
  int64_t v309;
  unint64_t v310;
  _BYTE *v311;
  uint64_t **v312;
  uint64_t **v313;
  uint64_t *v314;
  uint64_t **v315;
  uint64_t *v316;
  uint64_t **v317;
  _QWORD *v318;
  uint64_t v319;
  unint64_t *v320;
  char *v321;
  unint64_t v322;
  unint64_t *v323;
  uint64_t v324;
  _OWORD *v325;
  unint64_t *v326;
  uint64_t v327;
  __int128 v328;
  unint64_t v329;
  uint64_t **v330;
  unsigned int v331;
  uint64_t *v332;
  uint64_t **v333;
  uint64_t **v334;
  char v335;
  int v336;
  uint64_t *v337;
  uint64_t **v338;
  uint64_t **v339;
  uint64_t i;
  uint64_t v341;
  uint64_t *v342;
  uint64_t **v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  std::locale::__imp *v347;
  unsigned int v348;
  _QWORD *v349;
  unsigned int v350;
  uint64_t *v351;
  _QWORD *v352;
  _QWORD *v353;
  unsigned int v354;
  _QWORD *v355;
  _QWORD *v356;
  void *v357;
  std::locale::__imp *v358;
  std::locale::__imp *v359;
  std::locale::__imp *v360;
  uint64_t v361;
  char *v362;
  _QWORD *v363;
  _BYTE *v364;
  int64_t v365;
  int64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  _BYTE *v370;
  _QWORD *v371;
  char *v372;
  unint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  char *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  uint64_t **v380;
  unsigned int v381;
  uint64_t *v382;
  uint64_t **v383;
  uint64_t **v384;
  char v385;
  uint64_t *v386;
  uint64_t **v387;
  uint64_t **v388;
  int v389;
  uint64_t *v390;
  uint64_t **v391;
  uint64_t j;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t *v396;
  _QWORD *v397;
  unsigned int v398;
  uint64_t *v399;
  uint64_t **v400;
  unsigned int v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t **v404;
  unsigned int v405;
  uint64_t *v406;
  unsigned int v407;
  _QWORD *v408;
  void *v409;
  std::locale::__imp *v410;
  std::locale::__imp *v411;
  std::locale::__imp *v412;
  uint64_t v413;
  void *v414;
  _BYTE *v415;
  int64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  _BYTE *v421;
  _QWORD *v422;
  char *v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _OWORD *v427;
  __int128 *v428;
  uint64_t v429;
  __int128 v430;
  uint64_t v431;
  double v432;
  double v433;
  float64x2_t v434;
  double v435;
  double v436;
  unsigned int v437;
  size_t v438;
  size_t v439;
  double *v440;
  double v441;
  double *v442;
  uint64_t v443;
  double v444;
  double v445;
  _QWORD *v446;
  const std::locale::facet *v447;
  _QWORD *v448;
  double v449;
  double v450;
  char v451;
  char *v452;
  int v453;
  int v454;
  double v455;
  double *v456;
  unint64_t v457;
  unint64_t v458;
  float64x2_t *v459;
  uint64_t v460;
  float64x2_t v461;
  float64x2_t v462;
  double v463;
  double v464;
  uint64_t v466;
  const void *v467;
  int64_t v468;
  char *v469;
  double *v470;
  uint64_t v471;
  double v472;
  double v473;
  _QWORD *v474;
  _QWORD *v475;
  const std::locale::facet *v476;
  BOOL v478;
  double v479;
  uint64_t v481;
  double v482;
  _QWORD *v483;
  const std::locale::facet *v484;
  int v485;
  uint64_t **v486;
  uint64_t **v487;
  double v488;
  uint64_t *v489;
  uint64_t **v490;
  uint64_t *v491;
  uint64_t **v492;
  _QWORD *v493;
  const std::locale::facet *v494;
  int v495;
  _QWORD *v496;
  const std::locale::facet *v497;
  _QWORD *v498;
  const std::locale::facet *v499;
  _QWORD *v500;
  _QWORD *v501;
  const std::locale::facet *v502;
  std::bad_alloc *exception;
  std::bad_alloc *v504;
  uint64_t v505;
  uint64_t v506;
  _BYTE *v507;
  char *v508;
  uint64_t v509;
  char *v510;
  _BYTE *v511;
  char *v512;
  char *v513;
  uint64_t v514;
  uint64_t *v515;
  _QWORD *v516;
  uint64_t v517;
  void *v518[2];
  char *v519;
  char *v520;
  int64x2_t v521;
  uint64_t v522;
  uint64_t v523;
  int64x2_t v524;
  int8x16_t v525;
  _QWORD *v526;
  float64x2_t v527;
  __int128 v528;
  char *v529;
  double v530;
  int8x16_t v531;
  int v532;
  float64x2_t v533;
  unint64_t v534;
  float64x2_t v535;
  uint64_t v536;
  std::__shared_weak_count *v537;
  void *v538[2];
  void *v539[2];
  int v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  char *v544;
  void *v545[2];
  void *v546[2];
  int v547;
  void *v548[2];
  void *v549[2];
  int v550;
  void *v551;
  char *v552;
  char *v553;
  void *v554;
  uint64_t v555;
  unsigned int v556;
  void *__dst;
  double v558;
  unsigned int v559;
  double v560;
  void *v561[2];
  std::locale::__imp *v562;
  std::string v563;
  _QWORD *v564;
  uint64_t v565;
  __int128 v566;
  void *v567[2];
  void *v568[2];
  __int128 v569;
  void *v570[2];
  __int128 v571;
  int64x2_t v572;
  void *__p[2];
  _BYTE *v574;
  void (**v575)();
  __int128 v576;
  __int128 v577;
  _BYTE v578[25];
  _BYTE v579[24];
  _BYTE *v580;
  _BYTE v581[24];
  _BYTE *v582;
  double v583;
  __int128 v584;
  __int128 v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t (**v588)();
  __int128 v589;
  __int128 v590;
  uint64_t (**v591)();
  uint64_t **v592;
  _QWORD v593[2];
  uint64_t **v594;
  uint64_t *v595;
  uint64_t v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  int v601;
  uint64_t v602;
  char *v603;
  char *v604;
  char *v605;
  unsigned int *v606;
  unsigned int *v607;
  unsigned int *v608;
  _DWORD v609[2];
  uint64_t v610;
  unsigned __int8 v611;
  __int128 v612;
  void *__src[2];
  unsigned int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  _QWORD v621[3];
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  void (**v634)();
  uint64_t v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  __int16 v646;
  uint64_t v647;
  _QWORD *v648;
  uint64_t v649;
  _QWORD v650[2];
  int v651;
  void *v652[2];
  __int128 v653;
  void *v654[2];
  __int128 v655;
  uint64_t v656;
  uint64_t v657;
  void *v658[2];
  void *v659[4];
  std::string v660;
  std::string *v661;
  std::locale v662[4];
  int v663;
  __int128 v664;
  __int128 v665;
  int v666;
  uint64_t v667;

  v667 = *MEMORY[0x24BDAC8D0];
  v3 = a1[10];
  v2 = a1[11];
  if (v2 == v3)
    return v2 != v3;
  bzero(&v601, 0x2E8uLL);
  __asm { FMOV            V0.2D, #1.0 }
  v589 = _Q0;
  v590 = _Q0;
  v591 = &off_250AFB4D0;
  v593[0] = 0;
  v592 = (uint64_t **)v593;
  v596 = 0;
  v595 = 0;
  v593[1] = 0;
  v594 = &v595;
  v597 = 0u;
  v598 = 0u;
  LOBYTE(v601) = 1;
  BYTE2(v601) = 1;
  v599 = 0u;
  v600 = 0u;
  sub_239C32BF4((uint64_t)&v602);
  v516 = a1;
  v505 = v3;
  v506 = v2;
  memset(v609, 0, 5);
  v610 = 0;
  v611 = 0;
  v615 = 0;
  v612 = 0u;
  *(_OWORD *)__src = 0u;
  v614 = 0;
  v10 = operator new();
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)v10 = &off_250AFDE20;
  v617 = 0;
  v618 = 0;
  v616 = v10;
  v619 = 0;
  v620 = 0x3EE4F8B588E368F1;
  v621[0] = &v591;
  v621[1] = __src;
  v621[2] = v650;
  v623 = 0u;
  v622 = 0u;
  v633 = 0u;
  v632 = 0u;
  v624 = 0u;
  v631 = 0u;
  v629 = 0u;
  v630 = 0u;
  v627 = 0u;
  v628 = 0u;
  v625 = 0u;
  v626 = 0u;
  v634 = off_250AFB530;
  v641 = 0;
  v639 = 0;
  v638 = 0;
  v640 = 0;
  v636 = 0;
  v635 = 0;
  v637 = 0;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_250AFDE20;
  v642 = v11;
  v647 = 0;
  v643 = 0;
  v645 = 0;
  v644 = 0;
  v646 = 0;
  v648 = v621;
  v649 = 0x3EE4F8B588E368F1;
  v650[0] = 0;
  v650[1] = 0;
  v651 = 0;
  *(_OWORD *)v652 = 0u;
  v653 = 0u;
  *(_OWORD *)v654 = 0u;
  v655 = 0u;
  v656 = 0;
  v657 = 2;
  *(_OWORD *)v658 = 0u;
  memset(v659, 0, 28);
  v634 = (void (**)())&off_250AFB4F0;
  v588 = off_250AFB0E0;
  v12 = a1;
  v511 = (_BYTE *)a1[11];
  v514 = a1[14];
  v507 = (_BYTE *)a1[10];
  v509 = a1[13];
  v13 = a1[79];
  *(_OWORD *)v548 = 0u;
  *(_OWORD *)v549 = 0u;
  v550 = 1065353216;
  v14 = (uint64_t *)a1[2];
  if (v14)
  {
    v15 = v13 != 0;
    do
    {
      v18 = (unint64_t *)(v14 + 2);
      v17 = v14[2];
      if (v15)
      {
        v19 = (int8x8_t)v516[72];
        if (v19)
        {
          v20 = (uint8x8_t)vcnt_s8(v19);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] > 1uLL)
          {
            v21 = v14[2];
            if (v17 >= *(_QWORD *)&v19)
              v21 = v17 % *(_QWORD *)&v19;
          }
          else
          {
            v21 = (*(_QWORD *)&v19 - 1) & v17;
          }
          v23 = *(_QWORD **)(v516[71] + 8 * v21);
          if (v23)
          {
            v23 = (_QWORD *)*v23;
            if (v23)
            {
              if (v20.u32[0] < 2uLL)
              {
                v24 = *(_QWORD *)&v19 - 1;
                while (1)
                {
                  v26 = v23[1];
                  if (v26 == v17)
                  {
                    if (v23[2] == v17)
                      goto LABEL_31;
                  }
                  else if ((v26 & v24) != v21)
                  {
                    goto LABEL_30;
                  }
                  v23 = (_QWORD *)*v23;
                  if (!v23)
                    goto LABEL_31;
                }
              }
              do
              {
                v25 = v23[1];
                if (v25 == v17)
                {
                  if (v23[2] == v17)
                    break;
                }
                else
                {
                  if (v25 >= *(_QWORD *)&v19)
                    v25 %= *(_QWORD *)&v19;
                  if (v25 != v21)
                    goto LABEL_30;
                }
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
          }
        }
        else
        {
LABEL_30:
          v23 = 0;
        }
LABEL_31:
        v22 = v23 == 0;
      }
      else
      {
        v22 = 0;
      }
      *(_QWORD *)&v27.f64[0] = v14[5];
      v521 = *(int64x2_t *)(v14 + 7);
      v524 = *(int64x2_t *)(v14 + 3);
      v28 = *((double *)v14 + 13);
      v530 = *((double *)v14 + 17);
      v527 = *(float64x2_t *)(v14 + 15);
      *(_QWORD *)&v27.f64[1] = v14[9];
      v533 = v27;
      v535 = *(float64x2_t *)(v14 + 11);
      v29 = sub_239C18404((float *)v548, v17, v14 + 2);
      _V3.D[1] = v535.f64[1];
      _Q1 = vmulq_f64(v535, v527);
      _D2 = v527.f64[1];
      __asm { FMLA            D1, D2, V3.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + v28 * v530;
      v33 = (int8x16_t)vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v524, v521), v527.f64[0]), (float64x2_t)vzip2q_s64(v524, v521), v527, 1), v533, v530));
      *((_QWORD *)v29 + 5) = *(_OWORD *)&vnegq_f64(_Q1);
      v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
      *(int8x16_t *)(v29 + 24) = v33;
      v29[48] = v22;
      v34 = sub_239C18404((float *)v548, *v18, v14 + 2);
      v35 = *v18;
      v36 = v34[48];
      v1 = v1 & 0xFFFFFF0000000000 | *v18 | (v36 << 32);
      v37 = (uint64_t *)v593[0];
      v38 = (uint64_t **)v593;
      v12 = v516;
      if (!v593[0])
        goto LABEL_42;
      v39 = (uint64_t **)v593;
      do
      {
        v40 = (uint64_t **)v37;
        v41 = v39;
        v42 = *((_DWORD *)v37 + 8);
        if (v42 >= v35)
          v39 = (uint64_t **)v37;
        else
          ++v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
      v38 = (uint64_t **)v593;
      if (v39 == v593)
        goto LABEL_42;
      if (v42 < v35)
        v40 = v41;
      v38 = v39;
      if (*((_DWORD *)v40 + 8) != (_DWORD)v35)
      {
LABEL_42:
        v563 = *(std::string *)(v34 + 1);
        LODWORD(v561[0]) = v35;
        v561[1] = (void *)v1;
        v562 = (std::locale::__imp *)(v34 + 24);
        LOBYTE(v564) = v36;
        LODWORD(v565) = -1;
        BYTE4(v565) = 1;
        LODWORD(v566) = 0;
        v567[0] = 0;
        v567[1] = 0;
        *((_QWORD *)&v566 + 1) = 0;
        LOBYTE(v568[0]) = 1;
        sub_239C31FF8(&v592, v38, v35, (uint64_t)v561);
        v12 = v516;
        if ((_DWORD)v36)
        {
          v43 = v604;
          if (v604 < v605)
          {
            *(_DWORD *)v604 = v35;
            v16 = v43 + 4;
          }
          else
          {
            v44 = v603;
            v45 = (char *)(v604 - v603);
            v46 = (v604 - v603) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
              sub_2394189F8();
            v48 = v605 - v603;
            if ((v605 - v603) >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              if (v49 >> 62)
                sub_239418A80();
              v50 = (char *)operator new(4 * v49);
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[4 * v46];
            *(_DWORD *)v51 = v35;
            v16 = v51 + 4;
            if (v43 != v44)
            {
              v52 = v43 - v44 - 4;
              if (v52 < 0x2C)
                goto LABEL_872;
              if ((unint64_t)(v43 - v50 - (_QWORD)v45) < 0x20)
                goto LABEL_872;
              v53 = (v52 >> 2) + 1;
              v54 = &v50[4 * v46 - 16];
              v55 = (__int128 *)(v43 - 16);
              v56 = v53 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v57 = *v55;
                *((_OWORD *)v54 - 1) = *(v55 - 1);
                *(_OWORD *)v54 = v57;
                v54 -= 32;
                v55 -= 2;
                v56 -= 8;
              }
              while (v56);
              v51 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              v43 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_872:
                do
                {
                  v58 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v51 - 1) = v58;
                  v51 -= 4;
                }
                while (v43 != v44);
              }
            }
            v603 = v51;
            v604 = v16;
            v605 = &v50[4 * v49];
            if (v44)
              operator delete(v44);
            v12 = v516;
          }
          v604 = v16;
        }
        BYTE2(v601) = 0;
        LOBYTE(v601) = 0;
        v609[0] = 0;
      }
      v14 = (uint64_t *)*v14;
      v15 = 1;
    }
    while (v14);
  }
  *(_OWORD *)v545 = 0u;
  *(_OWORD *)v546 = 0u;
  v547 = 1065353216;
  v59 = (_QWORD *)v12[7];
  if (v59)
  {
    while (1)
    {
      v61 = v59[4];
      v62 = sub_239C18878((float *)v545, v59[2], v59 + 2);
      v62[3] = v61;
      *((_BYTE *)v62 + 32) = 1;
      v63 = (void **)sub_239C18878((float *)v545, v59[2], v59 + 2);
      v64 = *((_DWORD *)v59 + 4);
      v65 = *((unsigned __int8 *)v63 + 32);
      v66 = (uint64_t *)&v595;
      v67 = v595;
      if (v595)
      {
        v68 = &v595;
        do
        {
          v69 = v67;
          v70 = v68;
          v71 = *((_DWORD *)v67 + 8);
          if (v71 >= v64)
            v68 = (uint64_t **)v67;
          else
            ++v67;
          v67 = (uint64_t *)*v67;
        }
        while (v67);
        v66 = (uint64_t *)&v595;
        if (v68 != &v595)
        {
          if (v71 < v64)
            v69 = (uint64_t *)v70;
          v66 = (uint64_t *)v68;
          if (*((_DWORD *)v69 + 8) == v64)
            goto LABEL_69;
        }
      }
      v72 = v63 + 3;
      v561[0] = v63[3];
      LOBYTE(v561[1]) = *((_BYTE *)v63 + 32);
      v73 = sub_239C31E70(&v594, v66, (uint64_t **)&v575, (uint64_t **)v662, v64);
      if (!*v73)
        break;
      if (v65)
        goto LABEL_86;
LABEL_68:
      BYTE2(v601) = 0;
      LOBYTE(v601) = 0;
      v609[0] = 0;
LABEL_69:
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_106;
    }
    v74 = v73;
    v75 = operator new(0x68uLL);
    v75[8] = v64;
    v75[10] = v64;
    *((_BYTE *)v75 + 44) = v65;
    v76 = v561[0];
    *((_QWORD *)v75 + 6) = v72;
    *((_QWORD *)v75 + 7) = v76;
    *((_BYTE *)v75 + 64) = v561[1];
    v75[18] = -1;
    *((_BYTE *)v75 + 76) = 1;
    v75[20] = 0;
    *((_QWORD *)v75 + 11) = 0;
    *((_BYTE *)v75 + 96) = 1;
    v77 = v575;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = v77;
    *v74 = (uint64_t)v75;
    if (*v594)
    {
      v594 = (uint64_t **)*v594;
      v75 = (_DWORD *)*v74;
    }
    sub_2394213B8(v595, (uint64_t *)v75);
    ++v596;
    if (!v65)
      goto LABEL_68;
LABEL_86:
    v78 = v607;
    if (v607 < v608)
    {
      *v607 = v64;
      v60 = v78 + 1;
    }
    else
    {
      v79 = v606;
      v80 = (char *)((char *)v607 - (char *)v606);
      v81 = v607 - v606;
      v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 62)
        sub_2394189F8();
      v83 = (char *)v608 - (char *)v606;
      if (((char *)v608 - (char *)v606) >> 1 > v82)
        v82 = v83 >> 1;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
        v84 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v84 = v82;
      if (v84)
      {
        if (v84 >> 62)
          sub_239418A80();
        v85 = (char *)operator new(4 * v84);
      }
      else
      {
        v85 = 0;
      }
      v86 = (unsigned int *)&v85[4 * v81];
      *v86 = v64;
      v60 = v86 + 1;
      if (v78 != v79)
      {
        v87 = (char *)v78 - (char *)v79 - 4;
        if (v87 < 0x2C)
          goto LABEL_873;
        if ((unint64_t)((char *)v78 - v85 - (_QWORD)v80) < 0x20)
          goto LABEL_873;
        v88 = (v87 >> 2) + 1;
        v89 = &v85[4 * v81 - 16];
        v90 = v78 - 4;
        v91 = v88 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v92 = *(_OWORD *)v90;
          *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
          *(_OWORD *)v89 = v92;
          v89 -= 32;
          v90 -= 8;
          v91 -= 8;
        }
        while (v91);
        v86 -= v88 & 0x7FFFFFFFFFFFFFF8;
        v78 -= v88 & 0x7FFFFFFFFFFFFFF8;
        if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_873:
          do
          {
            v93 = *--v78;
            *--v86 = v93;
          }
          while (v78 != v79);
        }
      }
      v606 = v86;
      v607 = v60;
      v608 = (unsigned int *)&v85[4 * v84];
      if (v79)
        operator delete(v79);
    }
    v607 = v60;
    goto LABEL_68;
  }
LABEL_106:
  v536 = (v514 - v509) >> 3;
  v534 = 0x8E38E38E38E38E39 * ((v511 - v507) >> 4);
  v94 = (double *)v516;
  v96 = (uint64_t *)v516[10];
  v95 = (uint64_t *)v516[11];
  if (v95 == v96)
  {
    v508 = 0;
    goto LABEL_191;
  }
  if ((0x8E38E38E38E38E39 * (((char *)v95 - (char *)v96) >> 4)) >> 59)
    sub_2394189F8();
  v97 = (char *)operator new(0xC71C71C71C71C720 * (((char *)v95 - (char *)v96) >> 4));
  v508 = v97;
  v98 = v97;
  do
  {
    *(_OWORD *)v98 = 0uLL;
    *((_OWORD *)v98 + 1) = 0uLL;
    v98[24] = 1;
    v98 += 32;
  }
  while (v98 != &v97[0xC71C71C71C71C720 * (((char *)v95 - (char *)v96) >> 4)]);
  v99 = 0;
  do
  {
    v100 = *v96;
    v101 = v96[1];
    v102 = (int8x8_t)v94[77];
    if (!*(_QWORD *)&v102)
      goto LABEL_151;
    v103 = (uint8x8_t)vcnt_s8(v102);
    v103.i16[0] = vaddlv_u8(v103);
    if (v103.u32[0] > 1uLL)
    {
      v104 = *v96;
      if (v100 >= *(_QWORD *)&v102)
        v104 = v100 % *(_QWORD *)&v102;
    }
    else
    {
      v104 = (*(_QWORD *)&v102 - 1) & v100;
    }
    v105 = *((_QWORD *)v94 + 76);
    v106 = *(_QWORD **)(v105 + 8 * v104);
    if (!v106)
      goto LABEL_151;
    v107 = (_QWORD *)*v106;
    if (!*v106)
      goto LABEL_151;
    v108 = *(_QWORD *)&v102 - 1;
    if (v103.u32[0] < 2uLL)
    {
      while (1)
      {
        v109 = v107[1];
        if (v109 == v100)
        {
          if (v107[2] == v100)
            goto LABEL_132;
        }
        else if ((v109 & v108) != v104)
        {
          goto LABEL_151;
        }
        v107 = (_QWORD *)*v107;
        if (!v107)
          goto LABEL_151;
      }
    }
    while (1)
    {
      v110 = v107[1];
      if (v110 == v100)
        break;
      if (v110 >= *(_QWORD *)&v102)
        v110 %= *(_QWORD *)&v102;
      if (v110 != v104)
        goto LABEL_151;
LABEL_126:
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_151;
    }
    if (v107[2] != v100)
      goto LABEL_126;
LABEL_132:
    if (v103.u32[0] > 1uLL)
    {
      v111 = v96[1];
      if (v101 >= *(_QWORD *)&v102)
        v111 = v101 % *(_QWORD *)&v102;
    }
    else
    {
      v111 = v108 & v101;
    }
    v112 = *(_QWORD **)(v105 + 8 * v111);
    if (v112)
    {
      v113 = (_QWORD *)*v112;
      if (v113)
      {
        if (v103.u32[0] < 2uLL)
        {
          while (1)
          {
            v114 = v113[1];
            if (v114 == v101)
            {
              if (v113[2] == v101)
                goto LABEL_188;
            }
            else if ((v114 & v108) != v111)
            {
              goto LABEL_151;
            }
            v113 = (_QWORD *)*v113;
            if (!v113)
              goto LABEL_151;
          }
        }
        do
        {
          v115 = v113[1];
          if (v115 == v101)
          {
            if (v113[2] == v101)
              goto LABEL_188;
          }
          else
          {
            if (v115 >= *(_QWORD *)&v102)
              v115 %= *(_QWORD *)&v102;
            if (v115 != v111)
              break;
          }
          v113 = (_QWORD *)*v113;
        }
        while (v113);
      }
    }
LABEL_151:
    v116 = (int8x8_t)v94[1];
    if (!*(_QWORD *)&v116)
      goto LABEL_852;
    v117 = (uint8x8_t)vcnt_s8(v116);
    v117.i16[0] = vaddlv_u8(v117);
    if (v117.u32[0] > 1uLL)
    {
      v118 = v96[1];
      if (v101 >= *(_QWORD *)&v116)
        v118 = v101 % *(_QWORD *)&v116;
    }
    else
    {
      v118 = (*(_QWORD *)&v116 - 1) & v101;
    }
    v119 = *(uint64_t ***)(*(_QWORD *)v94 + 8 * v118);
    if (!v119 || (v120 = *v119) == 0)
    {
LABEL_852:
      sub_239A444D4((uint64_t)"unknown file", 140, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (v117.u32[0] < 2uLL)
    {
      v121 = *(_QWORD *)&v116 - 1;
      while (1)
      {
        v123 = v120[1];
        if (v123 == v101)
        {
          if (v120[2] == v101)
            goto LABEL_171;
        }
        else if ((v123 & v121) != v118)
        {
          goto LABEL_852;
        }
        v120 = (uint64_t *)*v120;
        if (!v120)
          goto LABEL_852;
      }
    }
    while (2)
    {
      v122 = v120[1];
      if (v122 != v101)
      {
        if (v122 >= *(_QWORD *)&v116)
          v122 %= *(_QWORD *)&v116;
        if (v122 != v118)
          goto LABEL_852;
LABEL_161:
        v120 = (uint64_t *)*v120;
        if (!v120)
          goto LABEL_852;
        continue;
      }
      break;
    }
    if (v120[2] != v101)
      goto LABEL_161;
LABEL_171:
    *(_QWORD *)&v124.f64[0] = v120[5];
    _Q1 = *(float64x2_t *)(v120 + 3);
    v126 = *((double *)v120 + 13);
    _Q5 = *(float64x2_t *)(v120 + 11);
    v128 = *((double *)v96 + 16);
    _Q7 = *((float64x2_t *)v96 + 7);
    v130 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q1, *(int64x2_t *)(v120 + 7)), _Q7.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q1, *(int64x2_t *)(v120 + 7)), _Q7, 1);
    _Q17 = vmulq_f64(_Q7, _Q1);
    *(_QWORD *)&_Q1.f64[0] = v120[4];
    __asm { FMLA            D17, D1, V7.D[1] }
    *(_QWORD *)&v124.f64[1] = v120[9];
    _Q16 = vmlaq_n_f64(v130, v124, v128);
    _Q0 = vmulq_f64(_Q5, _Q7);
    *(_QWORD *)&_Q17.f64[0] = v96[15];
    __asm { FMLA            D18, D17, V5.D[1] }
    _Q17.f64[0] = _D18 + v126 * v128;
    _D3 = v120[8];
    __asm { FMLA            D18, D3, V7.D[1] }
    _D2 = _D18 + v128 * *((double *)v120 + 9);
    _D3 = v120[12];
    __asm
    {
      FMLA            D0, D3, V7.D[1]
      FMLA            D1, D2, V16.D[1]
    }
    _Q0.f64[0] = 1.0 / sqrt(_Q1.f64[0] + (_Q0.f64[0] + v128 * v126) * _Q17.f64[0]);
    v139 = &v508[32 * v99];
    *(float64x2_t *)v139 = vmulq_n_f64(_Q16, _Q0.f64[0]);
    *((_QWORD *)v139 + 2) = *(_OWORD *)&vmulq_f64(_Q17, _Q0);
    v139[24] = 1;
    if (v536 == v534)
    {
      v140 = *(double *)(*((_QWORD *)v94 + 13) + 8 * v99);
      v141 = (char *)operator new(0x30uLL);
      v142 = (std::__shared_weak_count *)v141;
      v143 = 1.0 / v140;
      *((_QWORD *)v141 + 1) = 0;
      v144 = (unint64_t *)(v141 + 8);
      *((_QWORD *)v141 + 2) = 0;
      *(_QWORD *)v141 = &off_250AFE808;
      *((_QWORD *)v141 + 3) = &off_250AFE840;
      if (1.0 / v140 < 1.0e-15)
        v145 = NAN;
      else
        v145 = 1.0 / sqrt(v143);
      *((double *)v141 + 5) = v145;
      v141[32] = v143 >= 1.0e-15;
      v575 = (void (**)())(v141 + 24);
      *(_QWORD *)&v576 = v141;
      v561[1] = 0;
      v562 = 0;
      v561[0] = &v508[32 * v99];
      v543 = v141 + 24;
      v544 = v141;
      do
        v146 = __ldxr(v144);
      while (__stxr(v146 + 1, v144));
      sub_239C18CE4((int64x2_t *)&v588, (uint64_t)v561, v100 | ((unint64_t)v101 << 32), (uint64_t)(v141 + 24), (std::__shared_weak_count *)v141);
      do
        v147 = __ldaxr(v144);
      while (__stlxr(v147 - 1, v144));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
      v148 = (std::__shared_weak_count *)v576;
      v94 = (double *)v516;
      if ((_QWORD)v576)
      {
        v149 = (unint64_t *)(v576 + 8);
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
    }
    else
    {
      v561[1] = 0;
      v562 = 0;
      v561[0] = &v508[32 * v99];
      v541 = 0;
      v542 = 0;
      sub_239C18CE4((int64x2_t *)&v588, (uint64_t)v561, v100 | ((unint64_t)v101 << 32), 0, 0);
    }
    ++v99;
LABEL_188:
    v96 += 18;
  }
  while (v96 != v95);
LABEL_191:
  *((_QWORD *)&v151 + 1) = 0;
  *(_OWORD *)v538 = 0u;
  *(_OWORD *)v539 = 0u;
  v540 = 1065353216;
  v152 = *((_QWORD *)v94 + 8);
  if (!v152)
  {
    v158 = 0;
    v519 = 0;
    goto LABEL_295;
  }
  *(_OWORD *)&v660.__r_.__value_.__l.__data_ = 0uLL;
  v153 = (uint64_t *)*((_QWORD *)v94 + 2);
  if (v153)
  {
    do
    {
      v517 = v153[5];
      *(_OWORD *)v518 = *(_OWORD *)(v153 + 3);
      v522 = v153[9];
      *(_QWORD *)&v151 = v153[13];
      v525 = *(int8x16_t *)(v153 + 7);
      v528 = v151;
      v531 = *(int8x16_t *)(v153 + 11);
      v154 = sub_239C1974C((float *)v538, v153[2], v153 + 2);
      v155 = *(int8x16_t *)v518;
      v156 = v525;
      v157 = v531;
      *((_BYTE *)v154 + 24) = 1;
      v154[6] = v517;
      v155.i64[1] = vextq_s8(v155, v155, 8uLL).u64[0];
      *((int8x16_t *)v154 + 2) = v155;
      v154[9] = v522;
      v156.i64[1] = vextq_s8(v156, v156, 8uLL).u64[0];
      *(int8x16_t *)(v154 + 7) = v156;
      *((_QWORD *)&v151 + 1) = *((_QWORD *)&v528 + 1);
      v154[12] = v528;
      v157.i64[1] = vextq_s8(v157, v157, 8uLL).u64[0];
      *((int8x16_t *)v154 + 5) = v157;
      v153 = (uint64_t *)*v153;
    }
    while (v153);
    v152 = *((_QWORD *)v94 + 8);
    if (!v152)
    {
      v158 = 0;
      v510 = 0;
      v159 = *((_QWORD *)v94 + 7);
      if (v159)
        goto LABEL_197;
      goto LABEL_205;
    }
  }
  if (v152 >> 59)
    sub_2394189F8();
  v158 = (char *)operator new(32 * v152);
  v510 = &v158[32 * v152];
  v159 = *((_QWORD *)v94 + 7);
  if (!v159)
  {
LABEL_205:
    v162 = 0;
    v163 = 0;
    v160 = 0;
    goto LABEL_206;
  }
LABEL_197:
  v160 = 0;
  v161 = (_QWORD *)v159;
  do
  {
    v160 += (uint64_t)(v161[9] - v161[8]) >> 5;
    v161 = (_QWORD *)*v161;
  }
  while (v161);
  if (v160)
  {
    if (v160 >> 59)
      sub_2394189F8();
    v162 = (char *)operator new(32 * v160);
    v163 = &v162[32 * v160];
  }
  else
  {
    v162 = 0;
    v163 = 0;
  }
LABEL_206:
  if (v536 == v534)
  {
    v164 = (double *)*((_QWORD *)v94 + 13);
    v165 = (double *)*((_QWORD *)v94 + 14);
    if (v164 == v165)
    {
      v166 = 0;
    }
    else
    {
      v166 = 0;
      do
      {
        v167 = *v164++;
        v166 = (int)(v167 + (double)v166);
      }
      while (v164 != v165);
    }
    v94[16] = (double)v166 * 50.0 / (double)v160;
  }
  if (v159)
  {
    v168 = v158;
    v169 = v162;
    do
    {
      v170 = v162;
      v171 = *(void **)(v159 + 24);
      v551 = v171;
      v532 = *(_DWORD *)(v159 + 16);
      v172 = (v168 - v158) >> 5;
      *(_OWORD *)v561 = *(_OWORD *)(v159 + 40);
      v562 = *(std::locale::__imp **)(v159 + 56);
      v515 = (uint64_t *)v159;
      if (v168 >= v510)
      {
        v174 = v172 + 1;
        if ((unint64_t)(v172 + 1) >> 59)
          sub_2394189F8();
        if ((v510 - v158) >> 4 > v174)
          v174 = (v510 - v158) >> 4;
        if ((unint64_t)(v510 - v158) >= 0x7FFFFFFFFFFFFFE0)
          v175 = 0x7FFFFFFFFFFFFFFLL;
        else
          v175 = v174;
        if (v175)
        {
          if (v175 >> 59)
            sub_239418A80();
          v176 = (char *)operator new(32 * v175);
        }
        else
        {
          v176 = 0;
        }
        v177 = &v176[32 * v172];
        *(_OWORD *)v177 = *(_OWORD *)v561;
        *((_QWORD *)v177 + 2) = v562;
        v177[24] = 1;
        v178 = v158;
        if (v168 == v158)
        {
          v158 = &v176[32 * v172];
        }
        else
        {
          v179 = &v176[32 * v172];
          do
          {
            v158 = v179 - 32;
            v180 = *((_OWORD *)v168 - 2);
            *((_QWORD *)v179 - 2) = *((_QWORD *)v168 - 2);
            *((_OWORD *)v179 - 2) = v180;
            *(v179 - 8) = *(v168 - 8);
            v168 -= 32;
            v179 -= 32;
          }
          while (v168 != v178);
        }
        v510 = &v176[32 * v175];
        v168 = v177 + 32;
        if (v178)
        {
          operator delete(v178);
          v181 = v551;
          goto LABEL_237;
        }
      }
      else
      {
        v173 = *(_OWORD *)(v159 + 40);
        *((_QWORD *)v168 + 2) = *(_QWORD *)(v159 + 56);
        *(_OWORD *)v168 = v173;
        v168[24] = 1;
        v168 += 32;
      }
      v181 = v171;
LABEL_237:
      v512 = v158;
      v182 = sub_239C1974C((float *)v538, (unint64_t)v181, &v551);
      v184 = v515[8];
      v183 = v515[9];
      if (v184 != v183)
      {
        v529 = &v512[32 * v172];
        v526 = v182 + 3;
        v523 = v171;
        v162 = v170;
        while (1)
        {
          v185 = *(_QWORD *)v184;
          v186 = (v169 - v162) >> 5;
          *(_OWORD *)v561 = *(_OWORD *)(v184 + 8);
          v562 = *(std::locale::__imp **)(v184 + 24);
          if (v169 >= v163)
          {
            v188 = v186 + 1;
            if ((unint64_t)(v186 + 1) >> 59)
              sub_2394189F8();
            if ((v163 - v162) >> 4 > v188)
              v188 = (v163 - v162) >> 4;
            if ((unint64_t)(v163 - v162) >= 0x7FFFFFFFFFFFFFE0)
              v189 = 0x7FFFFFFFFFFFFFFLL;
            else
              v189 = v188;
            if (v189)
            {
              if (v189 >> 59)
                sub_239418A80();
              v190 = (char *)operator new(32 * v189);
            }
            else
            {
              v190 = 0;
            }
            v191 = &v190[32 * v186];
            *(_OWORD *)v191 = *(_OWORD *)v561;
            *((_QWORD *)v191 + 2) = v562;
            v191[24] = 1;
            if (v169 == v162)
            {
              v193 = &v190[32 * v186];
            }
            else
            {
              v192 = &v190[32 * v186];
              do
              {
                v193 = v192 - 32;
                v194 = *((_OWORD *)v169 - 2);
                *((_QWORD *)v192 - 2) = *((_QWORD *)v169 - 2);
                *((_OWORD *)v192 - 2) = v194;
                *(v192 - 8) = *(v169 - 8);
                v169 -= 32;
                v192 -= 32;
              }
              while (v169 != v162);
            }
            v163 = &v190[32 * v189];
            v169 = v191 + 32;
            if (v162)
              operator delete(v162);
            v162 = v193;
          }
          else
          {
            v187 = *(_OWORD *)(v184 + 8);
            *((_QWORD *)v169 + 2) = *(_QWORD *)(v184 + 24);
            *(_OWORD *)v169 = v187;
            v169[24] = 1;
            v169 += 32;
          }
          v195 = sub_239C1974C((float *)v538, *(_QWORD *)v184, (_QWORD *)v184);
          v196 = (std::locale::__imp *)&v162[32 * v186];
          v197 = (std::string::size_type)(v195 + 3);
          if (v536 != v534)
          {
            v561[0] = (void *)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v599 - *((_QWORD *)&v598 + 1)) >> 5));
            v562 = (std::locale::__imp *)&v162[32 * v186];
            *(_OWORD *)&v563.__r_.__value_.__r.__words[1] = *(_OWORD *)&v660.__r_.__value_.__l.__data_;
            v563.__r_.__value_.__r.__words[0] = (std::string::size_type)(v195 + 3);
            v564 = v526;
            v565 = 0;
            *(_QWORD *)&v566 = v529;
            __dst = (void *)(v523 | (v185 << 32));
            LODWORD(v558) = v532;
            v662[0].__locale_ = 0;
            v662[1].__locale_ = 0;
            *(_QWORD *)&v576 = 0;
            v575 = 0;
            if ((sub_239C19BD0((uint64_t)&v591, (__int128 *)v561, (unsigned int *)&__dst, 0, 0) & 1) != 0)
              v609[0] = 0;
            goto LABEL_239;
          }
          v520 = v162;
          v198 = *((double *)v516 + 16);
          v199 = COERCE_DOUBLE(operator new(0x30uLL));
          v200 = *(std::__shared_weak_count **)&v199;
          v201 = 1.0 / v198;
          *(_QWORD *)(*(_QWORD *)&v199 + 8) = 0;
          v202 = (unint64_t *)(*(_QWORD *)&v199 + 8);
          *(_QWORD *)(*(_QWORD *)&v199 + 16) = 0;
          **(_QWORD **)&v199 = &off_250AFE808;
          *(_QWORD *)(*(_QWORD *)&v199 + 24) = &off_250AFE840;
          v203 = 1.0 / v198 < 1.0e-15 ? NAN : 1.0 / sqrt(v201);
          *(double *)(*(_QWORD *)&v199 + 40) = v203;
          *(_BYTE *)(*(_QWORD *)&v199 + 32) = v201 >= 1.0e-15;
          __dst = (void *)(*(_QWORD *)&v199 + 24);
          v558 = v199;
          v537 = *(std::__shared_weak_count **)&v199;
          do
            v204 = __ldxr(v202);
          while (__stxr(v204 + 1, v202));
          v561[0] = (void *)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v599 - *((_QWORD *)&v598 + 1)) >> 5));
          v562 = v196;
          *(_OWORD *)&v563.__r_.__value_.__r.__words[1] = *(_OWORD *)&v660.__r_.__value_.__l.__data_;
          v563.__r_.__value_.__r.__words[0] = v197;
          v564 = v526;
          v565 = 0;
          *(_QWORD *)&v566 = v529;
          v554 = (void *)(v523 | (v185 << 32));
          LODWORD(v555) = v532;
          v662[0].__locale_ = (std::locale::__imp *)(*(_QWORD *)&v199 + 24);
          v662[1] = *(std::locale *)&v199;
          do
            v205 = __ldxr(v202);
          while (__stxr(v205 + 1, v202));
          v575 = (void (**)())(*(_QWORD *)&v199 + 24);
          *(double *)&v576 = v199;
          do
            v206 = __ldxr(v202);
          while (__stxr(v206 + 1, v202));
          v207 = sub_239C19BD0((uint64_t)&v591, (__int128 *)v561, (unsigned int *)&v554, *(_QWORD *)&v199 + 24, *(std::__shared_weak_count **)&v199);
          v208 = v207;
          do
            v209 = __ldaxr(v202);
          while (__stlxr(v209 - 1, v202));
          if (!v209)
            break;
          if ((v207 & 1) != 0)
            goto LABEL_276;
LABEL_277:
          locale = v662[1].__locale_;
          v162 = v520;
          if (!v662[1].__locale_)
            goto LABEL_281;
          v211 = (unint64_t *)((char *)v662[1].__locale_ + 8);
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
            v213 = v537;
            if (v537)
            {
LABEL_282:
              p_shared_owners = (unint64_t *)&v213->__shared_owners_;
              do
                v215 = __ldaxr(p_shared_owners);
              while (__stlxr(v215 - 1, p_shared_owners));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
          }
          else
          {
LABEL_281:
            v213 = v537;
            if (v537)
              goto LABEL_282;
          }
          v216 = *(std::__shared_weak_count **)&v558;
          if (v558 != 0.0)
          {
            v217 = (unint64_t *)(*(_QWORD *)&v558 + 8);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
            if (!v218)
            {
              ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
              std::__shared_weak_count::__release_weak(v216);
            }
          }
LABEL_239:
          v184 += 32;
          if (v184 == v183)
            goto LABEL_216;
        }
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
        if ((v208 & 1) == 0)
          goto LABEL_277;
LABEL_276:
        v609[0] = 0;
        goto LABEL_277;
      }
      v162 = v170;
LABEL_216:
      v158 = v512;
      v159 = *v515;
    }
    while (*v515);
  }
  v519 = v162;
  v94 = (double *)v516;
LABEL_295:
  v575 = off_250AFEA50;
  v576 = *(_OWORD *)(v94 + 17);
  v577 = *(_OWORD *)(v94 + 19);
  *(_OWORD *)v578 = *(_OWORD *)(v94 + 21);
  *(_OWORD *)&v578[9] = *(_OWORD *)((char *)v94 + 177);
  v219 = v579;
  v220 = *((_QWORD *)v94 + 28);
  v513 = v158;
  if (!v220)
  {
LABEL_298:
    v580 = (_BYTE *)v220;
    goto LABEL_300;
  }
  if ((double *)v220 != v94 + 25)
  {
    v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 16))(v220);
    goto LABEL_298;
  }
  v580 = v579;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v220 + 24))(v220, v579);
LABEL_300:
  v221 = v581;
  v222 = *((_QWORD *)v94 + 32);
  if (!v222)
  {
LABEL_303:
    v582 = (_BYTE *)v222;
    goto LABEL_305;
  }
  if ((double *)v222 != v94 + 29)
  {
    v222 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v222 + 16))(v222);
    goto LABEL_303;
  }
  v582 = v581;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v222 + 24))(v222, v581);
LABEL_305:
  v583 = -1.0;
  v575 = (void (**)())&off_250AFE9E8;
  v223 = *(_OWORD *)(v94 + 35);
  v584 = *(_OWORD *)(v94 + 33);
  v585 = v223;
  v586 = *((_QWORD *)&v584 + 1);
  v587 = 0x4000000000000000;
  if (DWORD2(v612) != 1)
  {
    DWORD2(v612) = 1;
    BYTE2(v609[0]) = 0;
    LOWORD(v609[0]) = 0;
  }
  kdebug_trace();
  ((void (*)(char *@<X8>))v575[2])((char *)v662);
  ((void (*)(std::string *@<X8>))*v588)(&v660);
  if (SHIBYTE(v662[2].__locale_) < 0)
  {
    sub_23941A7F8(v561, v662[0].__locale_, (unint64_t)v662[1].__locale_);
  }
  else
  {
    *(_OWORD *)v561 = *(_OWORD *)&v662[0].__locale_;
    v562 = v662[2].__locale_;
  }
  if ((SHIBYTE(v660.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v563 = v660;
    v564 = 0;
    LODWORD(v565) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v566 = _Q0;
    *(_OWORD *)v567 = 0u;
    *(_OWORD *)v568 = 0u;
    v569 = 0u;
    *(_OWORD *)v570 = 0u;
    v571 = 0u;
    v572 = 0u;
    *(_OWORD *)__p = 0u;
    v574 = 0;
    if ((SHIBYTE(v662[2].__locale_) & 0x80000000) == 0)
      goto LABEL_315;
    goto LABEL_312;
  }
  sub_23941A7F8(&v563, v660.__r_.__value_.__l.__data_, v660.__r_.__value_.__l.__size_);
  v564 = 0;
  LODWORD(v565) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v566 = _Q0;
  *(_OWORD *)v567 = 0u;
  *(_OWORD *)v568 = 0u;
  v569 = 0u;
  *(_OWORD *)v570 = 0u;
  v571 = 0u;
  v572 = 0u;
  *(_OWORD *)__p = 0u;
  v574 = 0;
  if ((SHIBYTE(v660.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v662[2].__locale_) & 0x80000000) == 0)
      goto LABEL_315;
LABEL_312:
    operator delete(v662[0].__locale_);
    goto LABEL_315;
  }
  operator delete(v660.__r_.__value_.__l.__data_);
  if (SHIBYTE(v662[2].__locale_) < 0)
    goto LABEL_312;
LABEL_315:
  sub_239C2F538(v561, 2uLL, 2uLL);
  kdebug_trace();
  ((void (*)(uint64_t))v588[4])((uint64_t)&v588);
  v227 = v226;
  v661 = 0;
  v662[0].__locale_ = (std::locale::__imp *)&off_250AFB5B8;
  v662[1].__locale_ = (std::locale::__imp *)&v588;
  v662[2].__locale_ = (std::locale::__imp *)v611;
  v662[3].__locale_ = (std::locale::__imp *)v662;
  sub_23965A910(v662, &v660);
  v228 = (std::locale *)v662[3].__locale_;
  if ((std::locale *)v662[3].__locale_ == v662)
  {
    v229 = 4;
    v228 = v662;
  }
  else
  {
    if (!v662[3].__locale_)
      goto LABEL_320;
    v229 = 5;
  }
  (*((void (**)(void))v228->__locale_ + v229))();
LABEL_320:
  if (((unsigned int (__cdecl *)())v575[3])())
  {
    v611 = 1;
    if (((unsigned int (*)(uint64_t))v575[5])((uint64_t)&v575))
      ((void (*)(uint64_t, double))v575[6])((uint64_t)&v575, 0.0);
    else
      ((void (*)(uint64_t))v575[7])((uint64_t)&v575);
    v230 = ((double (*)(uint64_t))v575[4])((uint64_t)&v575);
    ((void (*)(uint64_t, double))v588[12])((uint64_t)&v588, v230);
  }
  kdebug_trace();
  if (v578[8])
  {
    if (v578[24])
    {
      v662[0].__locale_ = (std::locale::__imp *)&v588;
      v662[1] = *(std::locale *)&v578[16];
      v662[2].__locale_ = (std::locale::__imp *)&__dst;
      sub_239C2F8F4((uint64_t)v662);
      v231 = (uint64_t)__dst;
      if (*(double *)&__dst <= 0.0)
      {
        v232 = 1.0e20;
        v231 = 0x3DDB7CDFD9D7BDBBLL;
      }
      else
      {
        v232 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
      }
      *(_QWORD *)&v589 = v231;
      *((double *)&v589 + 1) = v232;
      *(_QWORD *)&v590 = v231;
      *((double *)&v590 + 1) = v232;
    }
    else
    {
      v662[0].__locale_ = (std::locale::__imp *)&v588;
      v662[1] = *(std::locale *)&v578[16];
      v662[2].__locale_ = (std::locale::__imp *)&__dst;
      sub_239C2FAAC((double *)v662);
      sub_239C2FBD4((double *)v662);
      v233 = 1.0e20;
      v234 = 0x3DDB7CDFD9D7BDBBLL;
      v235 = 0x3DDB7CDFD9D7BDBBLL;
      v236 = 1.0e20;
      if (*(double *)&__dst > 0.0)
      {
        v235 = (uint64_t)__dst;
        v236 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
      }
      *(_QWORD *)&v589 = v235;
      *((double *)&v589 + 1) = v236;
      if (v558 > 0.0)
      {
        v234 = *(_QWORD *)&v558;
        v233 = 1.0 / (v558 * v558);
      }
      *(_QWORD *)&v590 = v234;
      *((double *)&v590 + 1) = v233;
    }
    memset(v609, 0, 5);
  }
  if (((unsigned int (*)(uint64_t))v588[1])((uint64_t)&v588))
  {
    if (BYTE8(v576))
    {
      v237 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v237 + *(_QWORD *)(*v237 - 24)));
      v238 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v238->__vftable[2].~facet_0)(v238, 10);
      std::locale::~locale(v662);
      std::ostream::put();
      std::ostream::flush();
    }
    LODWORD(v565) = 0;
    v239 = v661;
    if (!v661)
      goto LABEL_851;
    goto LABEL_341;
  }
  *(_QWORD *)&v566 = sub_239C2FD3C((uint64_t)&v588, (uint64_t)v567);
  *((_QWORD *)&v566 + 1) = v566;
  v583 = *(double *)&v566;
  sub_23945D3D0(&v568[1], (char *)v567[0], (char *)v567[1], ((char *)v567[1] - (char *)v567[0]) >> 3);
  kdebug_trace();
  v242 = v601;
  if ((_BYTE)v601)
    goto LABEL_345;
  v286 = v592;
  if (v592 == v593)
  {
LABEL_436:
    v287 = v594;
    if (v594 == &v595)
    {
LABEL_345:
      v243 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v597 + 1) - v597) >> 3);
      goto LABEL_346;
    }
    while ((*((_BYTE *)v287 + 76) & 6) == 0)
    {
      v290 = v287[1];
      if (v290)
      {
        do
        {
          v291 = (uint64_t **)v290;
          v290 = (uint64_t *)*v290;
        }
        while (v290);
      }
      else
      {
        do
        {
          v291 = (uint64_t **)v287[2];
          _ZF = *v291 == (uint64_t *)v287;
          v287 = v291;
        }
        while (!_ZF);
      }
      v287 = v291;
      if (v291 == &v595)
        goto LABEL_345;
    }
  }
  else
  {
    while ((*((_BYTE *)v286 + 92) & 6) == 0)
    {
      v288 = v286[1];
      if (v288)
      {
        do
        {
          v289 = (uint64_t **)v288;
          v288 = (uint64_t *)*v288;
        }
        while (v288);
      }
      else
      {
        do
        {
          v289 = (uint64_t **)v286[2];
          _ZF = *v289 == (uint64_t *)v286;
          v286 = v289;
        }
        while (!_ZF);
      }
      v286 = v289;
      if (v289 == v593)
        goto LABEL_436;
    }
  }
  v292 = v597;
  if ((_QWORD)v597 == *((_QWORD *)&v597 + 1))
  {
    v243 = 0;
  }
  else
  {
    v243 = 0;
    v293 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v292 + 48) + 52) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v292 + 56) + 52) & 6) == 0)
        v243 = ++v293;
      v292 += 120;
    }
    while (v292 != *((_QWORD *)&v597 + 1));
  }
LABEL_346:
  v244 = (_QWORD *)v571;
  v570[0] = (char *)v570[0] + v243;
  if ((unint64_t)v571 >= *((_QWORD *)&v571 + 1))
  {
    v279 = v570[1];
    v280 = v571 - (unint64_t)v570[1];
    v281 = (uint64_t)(v571 - (unint64_t)v570[1]) >> 3;
    v282 = v281 + 1;
    if ((unint64_t)(v281 + 1) >> 61)
      goto LABEL_864;
    v283 = *((_QWORD *)&v571 + 1) - (unint64_t)v570[1];
    if ((uint64_t)(*((_QWORD *)&v571 + 1) - (unint64_t)v570[1]) >> 2 > v282)
      v282 = v283 >> 2;
    if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
      v284 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v284 = v282;
    if (v284)
    {
      if (v284 >> 61)
        goto LABEL_868;
      v285 = (char *)operator new(8 * v284);
    }
    else
    {
      v285 = 0;
    }
    v294 = (unint64_t *)&v285[8 * v281];
    v295 = &v285[8 * v284];
    *v294 = v243;
    v245 = v294 + 1;
    if (v244 != (_QWORD *)v279)
    {
      v296 = (char *)v244 - v279 - 8;
      if (v296 < 0x58)
        goto LABEL_874;
      if ((unint64_t)((char *)v244 - &v285[v280]) < 0x20)
        goto LABEL_874;
      v297 = (v296 >> 3) + 1;
      v298 = &v285[8 * v281 - 16];
      v299 = (__int128 *)(v244 - 2);
      v300 = v297 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v301 = *v299;
        *((_OWORD *)v298 - 1) = *(v299 - 1);
        *(_OWORD *)v298 = v301;
        v298 -= 32;
        v299 -= 2;
        v300 -= 4;
      }
      while (v300);
      v294 -= v297 & 0x3FFFFFFFFFFFFFFCLL;
      v244 -= v297 & 0x3FFFFFFFFFFFFFFCLL;
      if (v297 != (v297 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_874:
        do
        {
          v302 = *--v244;
          *--v294 = v302;
        }
        while (v244 != (_QWORD *)v279);
      }
    }
    v570[1] = v294;
    *(_QWORD *)&v571 = v245;
    *((_QWORD *)&v571 + 1) = v295;
    if (v279)
    {
      operator delete(v279);
      v242 = v601;
    }
  }
  else
  {
    *(_QWORD *)v571 = v243;
    v245 = v244 + 1;
  }
  *(_QWORD *)&v571 = v245;
  if (v242)
    goto LABEL_472;
  v312 = v592;
  if (v592 == v593)
  {
LABEL_485:
    v313 = v594;
    if (v594 == &v595)
    {
LABEL_472:
      v303 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v599 - *((_QWORD *)&v598 + 1)) >> 5);
      goto LABEL_473;
    }
    while ((*((_BYTE *)v313 + 76) & 6) == 0)
    {
      v316 = v313[1];
      if (v316)
      {
        do
        {
          v317 = (uint64_t **)v316;
          v316 = (uint64_t *)*v316;
        }
        while (v316);
      }
      else
      {
        do
        {
          v317 = (uint64_t **)v313[2];
          _ZF = *v317 == (uint64_t *)v313;
          v313 = v317;
        }
        while (!_ZF);
      }
      v313 = v317;
      if (v317 == &v595)
        goto LABEL_472;
    }
  }
  else
  {
    while ((*((_BYTE *)v312 + 92) & 6) == 0)
    {
      v314 = v312[1];
      if (v314)
      {
        do
        {
          v315 = (uint64_t **)v314;
          v314 = (uint64_t *)*v314;
        }
        while (v314);
      }
      else
      {
        do
        {
          v315 = (uint64_t **)v312[2];
          _ZF = *v315 == (uint64_t *)v312;
          v312 = v315;
        }
        while (!_ZF);
      }
      v312 = v315;
      if (v315 == v593)
        goto LABEL_485;
    }
  }
  v318 = (_QWORD *)*((_QWORD *)&v598 + 1);
  if (*((_QWORD *)&v598 + 1) == (_QWORD)v599)
  {
    v303 = 0;
  }
  else
  {
    v303 = 0;
    v319 = 0;
    do
    {
      if ((*(_BYTE *)(v318[10] + 52) & 6) == 0
        && (*(_BYTE *)(v318[11] + 52) & 6) == 0
        && (*(_BYTE *)(v318[12] + 36) & 6) == 0)
      {
        v303 = ++v319;
      }
      v318 += 20;
    }
    while (v318 != (_QWORD *)v599);
  }
LABEL_473:
  v570[0] = (char *)v570[0] + v303;
  if ((unint64_t)v245 < *((_QWORD *)&v571 + 1))
  {
    *v245 = v303;
    v304 = v245 + 1;
    goto LABEL_523;
  }
  v305 = (unint64_t *)v570[1];
  v306 = (char *)v245 - (char *)v570[1];
  v307 = ((char *)v245 - (char *)v570[1]) >> 3;
  v308 = v307 + 1;
  if ((unint64_t)(v307 + 1) >> 61)
LABEL_864:
    sub_2394189F8();
  v309 = *((_QWORD *)&v571 + 1) - (unint64_t)v570[1];
  if ((uint64_t)(*((_QWORD *)&v571 + 1) - (unint64_t)v570[1]) >> 2 > v308)
    v308 = v309 >> 2;
  if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFF8)
    v310 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v310 = v308;
  if (v310)
  {
    if (!(v310 >> 61))
    {
      v311 = operator new(8 * v310);
      goto LABEL_512;
    }
LABEL_868:
    sub_239418A80();
  }
  v311 = 0;
LABEL_512:
  v320 = (unint64_t *)&v311[8 * v307];
  v321 = &v311[8 * v310];
  *v320 = v303;
  v304 = v320 + 1;
  if (v245 == v305)
    goto LABEL_521;
  v322 = (char *)v245 - (char *)v305 - 8;
  if (v322 < 0x58)
  {
    v323 = v245;
    goto LABEL_520;
  }
  if ((unint64_t)((char *)v245 - &v311[v306]) < 0x20)
  {
    v323 = v245;
    do
    {
LABEL_520:
      v329 = *--v323;
      *--v320 = v329;
    }
    while (v323 != v305);
    goto LABEL_521;
  }
  v324 = (v322 >> 3) + 1;
  v323 = &v245[-(v324 & 0x3FFFFFFFFFFFFFFCLL)];
  v325 = &v311[8 * v307 - 16];
  v326 = v245 - 2;
  v327 = v324 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v328 = *(_OWORD *)v326;
    *(v325 - 1) = *((_OWORD *)v326 - 1);
    *v325 = v328;
    v325 -= 2;
    v326 -= 4;
    v327 -= 4;
  }
  while (v327);
  v320 -= v324 & 0x3FFFFFFFFFFFFFFCLL;
  if (v324 != (v324 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_520;
LABEL_521:
  v570[1] = v320;
  *(_QWORD *)&v571 = v304;
  *((_QWORD *)&v571 + 1) = v321;
  if (v305)
  {
    operator delete(v305);
    v242 = v601;
  }
LABEL_523:
  *(_QWORD *)&v571 = v304;
  if (v242)
  {
    v330 = v592;
    if (v592 != v593)
    {
      v331 = 0;
      while (1)
      {
        if ((*((_BYTE *)v330 + 92) & 6) != 0)
        {
          v332 = v330[1];
          if (v332)
            goto LABEL_531;
        }
        else
        {
          v331 += *((unsigned __int8 *)v330 + 44);
          v332 = v330[1];
          if (v332)
          {
            do
            {
LABEL_531:
              v333 = (uint64_t **)v332;
              v332 = (uint64_t *)*v332;
            }
            while (v332);
            goto LABEL_526;
          }
        }
        do
        {
          v333 = (uint64_t **)v330[2];
          _ZF = *v333 == (uint64_t *)v330;
          v330 = v333;
        }
        while (!_ZF);
LABEL_526:
        v330 = v333;
        if (v333 == v593)
          goto LABEL_603;
      }
    }
    v331 = 0;
  }
  else
  {
    memset(v662, 0, sizeof(v662));
    v664 = 0u;
    v665 = 0u;
    v663 = 1065353216;
    v666 = 1065353216;
    v334 = v592;
    if (v592 == v593)
    {
      v331 = 0;
      v335 = 0;
    }
    else
    {
      v331 = 0;
      v335 = 0;
      v336 = 0;
      do
      {
        if ((*((_BYTE *)v334 + 92) & 6) != 0)
          v335 = 1;
        if (*((_BYTE *)v334 + 44))
          v331 = ++v336;
        v337 = v334[1];
        if (v337)
        {
          do
          {
            v338 = (uint64_t **)v337;
            v337 = (uint64_t *)*v337;
          }
          while (v337);
        }
        else
        {
          do
          {
            v338 = (uint64_t **)v334[2];
            _ZF = *v338 == (uint64_t *)v334;
            v334 = v338;
          }
          while (!_ZF);
        }
        v334 = v338;
      }
      while (v338 != v593);
    }
    v339 = v594;
    if (v594 != &v595)
    {
      do
      {
        if ((*((_BYTE *)v339 + 76) & 6) != 0)
          v335 = 1;
        v342 = v339[1];
        if (v342)
        {
          do
          {
            v343 = (uint64_t **)v342;
            v342 = (uint64_t *)*v342;
          }
          while (v342);
        }
        else
        {
          do
          {
            v343 = (uint64_t **)v339[2];
            _ZF = *v343 == (uint64_t *)v339;
            v339 = v343;
          }
          while (!_ZF);
        }
        v339 = v343;
      }
      while (v343 != &v595);
    }
    if (v335)
    {
      v341 = *((_QWORD *)&v597 + 1);
      for (i = v597; i != v341; i += 120)
      {
        v344 = *(_QWORD *)(i + 48);
        if ((*(_BYTE *)(v344 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(i + 56) + 52) & 6) != 0)
        {
          LODWORD(v554) = *(_DWORD *)v344;
          *(double *)&__dst = COERCE_DOUBLE(&v554);
          v345 = sub_2395EC77C((uint64_t)v662, (unsigned int *)&v554, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v345 + 5);
          LODWORD(v554) = **(_DWORD **)(i + 56);
          *(double *)&__dst = COERCE_DOUBLE(&v554);
          v346 = sub_2395EC77C((uint64_t)v662, (unsigned int *)&v554, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v346 + 5);
        }
      }
      sub_239C29188(*((uint64_t **)&v598 + 1), (uint64_t *)v599, (uint64_t)v662);
      v347 = v662[2].__locale_;
      if (v662[2].__locale_)
      {
        if (v593[0])
        {
          v348 = 0;
          do
          {
            v350 = *((_DWORD *)v347 + 4);
            v349 = v593;
            v351 = (uint64_t *)v593[0];
            do
            {
              v352 = v351;
              v353 = v349;
              v354 = *((_DWORD *)v351 + 8);
              if (v354 >= v350)
                v349 = v351;
              else
                ++v351;
              v351 = (uint64_t *)*v351;
            }
            while (v351);
            if (v349 == v593)
              goto LABEL_571;
            if (v354 < v350)
              v352 = v353;
            if (v350 < *((_DWORD *)v352 + 8))
LABEL_571:
              v349 = v593;
            if (*((_DWORD *)v349 + 24) == *((_DWORD *)v347 + 5))
              ++v348;
            v347 = *(std::locale::__imp **)v347;
          }
          while (v347);
        }
        else
        {
          v348 = 0;
          do
          {
            if (DWORD2(v600) == *((_DWORD *)v347 + 5))
              ++v348;
            v347 = *(std::locale::__imp **)v347;
          }
          while (v347);
        }
      }
      else
      {
        v348 = 0;
      }
      if (v331 >= v348)
        v331 -= v348;
      else
        v331 = 0;
      v355 = (_QWORD *)v665;
      if ((_QWORD)v665)
      {
        do
        {
          v356 = (_QWORD *)*v355;
          operator delete(v355);
          v355 = v356;
        }
        while (v356);
      }
    }
    v357 = (void *)v664;
    *(_QWORD *)&v664 = 0;
    if (v357)
      operator delete(v357);
    v358 = v662[2].__locale_;
    if (v662[2].__locale_)
    {
      do
      {
        v359 = *(std::locale::__imp **)v358;
        operator delete(v358);
        v358 = v359;
      }
      while (v359);
    }
    v360 = v662[0].__locale_;
    v662[0].__locale_ = 0;
    if (v360)
      operator delete(v360);
  }
LABEL_603:
  v361 = v331;
  v572.i64[0] += v331;
  v572.i64[1] += 3 * v331;
  v362 = (char *)__p[1];
  if (__p[1] >= v574)
  {
    v364 = __p[0];
    v365 = (char *)__p[1] - (char *)__p[0];
    v366 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v367 = v366 + 1;
    if ((unint64_t)(v366 + 1) >> 61)
      goto LABEL_865;
    v368 = v574 - (char *)__p[0];
    if ((v574 - (char *)__p[0]) >> 2 > v367)
      v367 = v368 >> 2;
    if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFF8)
      v369 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v369 = v367;
    if (v369)
    {
      if (v369 >> 61)
        goto LABEL_869;
      v370 = operator new(8 * v369);
    }
    else
    {
      v370 = 0;
    }
    v371 = &v370[8 * v366];
    v372 = &v370[8 * v369];
    *v371 = v361;
    v363 = v371 + 1;
    if (v362 != v364)
    {
      v373 = v362 - v364 - 8;
      if (v373 < 0x58)
        goto LABEL_875;
      if ((unint64_t)(v362 - v370 - v365) < 0x20)
        goto LABEL_875;
      v374 = (v373 >> 3) + 1;
      v375 = &v370[8 * v366 - 16];
      v376 = v362 - 16;
      v377 = v374 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v378 = *(_OWORD *)v376;
        *(v375 - 1) = *((_OWORD *)v376 - 1);
        *v375 = v378;
        v375 -= 2;
        v376 -= 32;
        v377 -= 4;
      }
      while (v377);
      v371 -= v374 & 0x3FFFFFFFFFFFFFFCLL;
      v362 -= 8 * (v374 & 0x3FFFFFFFFFFFFFFCLL);
      if (v374 != (v374 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_875:
        do
        {
          v379 = *((_QWORD *)v362 - 1);
          v362 -= 8;
          *--v371 = v379;
        }
        while (v362 != v364);
      }
    }
    __p[0] = v371;
    __p[1] = v363;
    v574 = v372;
    if (v364)
      operator delete(v364);
  }
  else
  {
    *(_QWORD *)__p[1] = v361;
    v363 = v362 + 8;
  }
  __p[1] = v363;
  if ((_BYTE)v601)
  {
    v380 = v594;
    if (v594 != &v595)
    {
      v381 = 0;
      while (1)
      {
        if ((*((_BYTE *)v380 + 76) & 6) != 0)
        {
          v382 = v380[1];
          if (v382)
            goto LABEL_632;
        }
        else
        {
          v381 += *((unsigned __int8 *)v380 + 44);
          v382 = v380[1];
          if (v382)
          {
            do
            {
LABEL_632:
              v383 = (uint64_t **)v382;
              v382 = (uint64_t *)*v382;
            }
            while (v382);
            goto LABEL_627;
          }
        }
        do
        {
          v383 = (uint64_t **)v380[2];
          _ZF = *v383 == (uint64_t *)v380;
          v380 = v383;
        }
        while (!_ZF);
LABEL_627:
        v380 = v383;
        if (v383 == &v595)
          goto LABEL_703;
      }
    }
    v381 = 0;
  }
  else
  {
    memset(v662, 0, sizeof(v662));
    v664 = 0u;
    v665 = 0u;
    v663 = 1065353216;
    v666 = 1065353216;
    v384 = v592;
    if (v592 == v593)
    {
      v385 = 0;
    }
    else
    {
      v385 = 0;
      do
      {
        if ((*((_BYTE *)v384 + 92) & 6) != 0)
          v385 = 1;
        v386 = v384[1];
        if (v386)
        {
          do
          {
            v387 = (uint64_t **)v386;
            v386 = (uint64_t *)*v386;
          }
          while (v386);
        }
        else
        {
          do
          {
            v387 = (uint64_t **)v384[2];
            _ZF = *v387 == (uint64_t *)v384;
            v384 = v387;
          }
          while (!_ZF);
        }
        v384 = v387;
      }
      while (v387 != v593);
    }
    v388 = v594;
    if (v594 == &v595)
    {
      v381 = 0;
    }
    else
    {
      v381 = 0;
      v389 = 0;
      do
      {
        if ((*((_BYTE *)v388 + 76) & 6) != 0)
          v385 = 1;
        if (*((_BYTE *)v388 + 44))
          v381 = ++v389;
        v390 = v388[1];
        if (v390)
        {
          do
          {
            v391 = (uint64_t **)v390;
            v390 = (uint64_t *)*v390;
          }
          while (v390);
        }
        else
        {
          do
          {
            v391 = (uint64_t **)v388[2];
            _ZF = *v391 == (uint64_t *)v388;
            v388 = v391;
          }
          while (!_ZF);
        }
        v388 = v391;
      }
      while (v391 != &v595);
    }
    if (v385)
    {
      v393 = *((_QWORD *)&v597 + 1);
      for (j = v597; j != v393; j += 120)
      {
        v394 = *(_QWORD *)(j + 48);
        if ((*(_BYTE *)(v394 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(j + 56) + 52) & 6) != 0)
        {
          LODWORD(v554) = *(_DWORD *)v394;
          *(double *)&__dst = COERCE_DOUBLE(&v554);
          v395 = sub_2395EC77C((uint64_t)v662, (unsigned int *)&v554, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v395 + 5);
          LODWORD(v554) = **(_DWORD **)(j + 56);
          *(double *)&__dst = COERCE_DOUBLE(&v554);
          v396 = sub_2395EC77C((uint64_t)v662, (unsigned int *)&v554, (uint64_t)&unk_239EC6E98, (_DWORD **)&__dst);
          ++*((_DWORD *)v396 + 5);
        }
      }
      sub_239C29188(*((uint64_t **)&v598 + 1), (uint64_t *)v599, (uint64_t)v662);
      v397 = (_QWORD *)v665;
      if ((_QWORD)v665)
      {
        if (v595)
        {
          v398 = 0;
          v399 = (uint64_t *)v665;
          do
          {
            v401 = *((_DWORD *)v399 + 4);
            v400 = &v595;
            v402 = v595;
            do
            {
              v403 = v402;
              v404 = v400;
              v405 = *((_DWORD *)v402 + 8);
              if (v405 >= v401)
                v400 = (uint64_t **)v402;
              else
                ++v402;
              v402 = (uint64_t *)*v402;
            }
            while (v402);
            if (v400 == &v595)
              goto LABEL_674;
            if (v405 < v401)
              v403 = (uint64_t *)v404;
            if (v401 < *((_DWORD *)v403 + 8))
LABEL_674:
              v400 = &v595;
            if (*((_DWORD *)v400 + 20) == *((_DWORD *)v399 + 5))
              ++v398;
            v399 = (uint64_t *)*v399;
          }
          while (v399);
        }
        else
        {
          v398 = 0;
          v406 = (uint64_t *)v665;
          do
          {
            if (v601 == *((_DWORD *)v406 + 5))
              ++v398;
            v406 = (uint64_t *)*v406;
          }
          while (v406);
        }
        _CF = v381 >= v398;
        v407 = v381 - v398;
        if (_CF)
          v381 = v407;
        else
          v381 = 0;
        do
        {
          v408 = (_QWORD *)*v397;
          operator delete(v397);
          v397 = v408;
        }
        while (v408);
      }
    }
    v409 = (void *)v664;
    *(_QWORD *)&v664 = 0;
    if (v409)
      operator delete(v409);
    v410 = v662[2].__locale_;
    if (v662[2].__locale_)
    {
      do
      {
        v411 = *(std::locale::__imp **)v410;
        operator delete(v410);
        v410 = v411;
      }
      while (v411);
    }
    v412 = v662[0].__locale_;
    v662[0].__locale_ = 0;
    if (v412)
      operator delete(v412);
    v363 = __p[1];
  }
LABEL_703:
  v413 = v381;
  v572 = vaddq_s64(v572, vdupq_n_s64(v381));
  if (v363 >= (_QWORD *)v574)
  {
    v415 = __p[0];
    v416 = (char *)v363 - (char *)__p[0];
    v417 = ((char *)v363 - (char *)__p[0]) >> 3;
    v418 = v417 + 1;
    if (!((unint64_t)(v417 + 1) >> 61))
    {
      v419 = v574 - (char *)__p[0];
      if ((v574 - (char *)__p[0]) >> 2 > v418)
        v418 = v419 >> 2;
      if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF8)
        v420 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v420 = v418;
      if (!v420)
      {
        v421 = 0;
LABEL_715:
        v422 = &v421[8 * v417];
        v423 = &v421[8 * v420];
        *v422 = v413;
        v414 = v422 + 1;
        if (v363 == (_QWORD *)v415)
          goto LABEL_724;
        v424 = (char *)v363 - v415 - 8;
        if (v424 >= 0x58)
        {
          if ((unint64_t)((char *)v363 - v421 - v416) >= 0x20)
          {
            v426 = (v424 >> 3) + 1;
            v425 = &v363[-(v426 & 0x3FFFFFFFFFFFFFFCLL)];
            v427 = &v421[8 * v417 - 16];
            v428 = (__int128 *)(v363 - 2);
            v429 = v426 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v430 = *v428;
              *(v427 - 1) = *(v428 - 1);
              *v427 = v430;
              v427 -= 2;
              v428 -= 2;
              v429 -= 4;
            }
            while (v429);
            v422 -= v426 & 0x3FFFFFFFFFFFFFFCLL;
            if (v426 == (v426 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_724:
              __p[0] = v422;
              __p[1] = v414;
              v574 = v423;
              if (v415)
                operator delete(v415);
              goto LABEL_726;
            }
          }
          else
          {
            v425 = v363;
          }
        }
        else
        {
          v425 = v363;
        }
        do
        {
          v431 = *--v425;
          *--v422 = v431;
        }
        while (v425 != (_QWORD *)v415);
        goto LABEL_724;
      }
      if (!(v420 >> 61))
      {
        v421 = operator new(8 * v420);
        goto LABEL_715;
      }
LABEL_869:
      sub_239418A80();
    }
LABEL_865:
    sub_2394189F8();
  }
  *v363 = v381;
  v414 = v363 + 1;
LABEL_726:
  __p[1] = v414;
  if (((unsigned int (__cdecl *)())v575[3])())
  {
    if (((unsigned int (*)(uint64_t))v575[5])((uint64_t)&v575))
    {
      v435 = ((double (*)(uint64_t, double, double, float64x2_t))v588[11])((uint64_t)&v588, v432, v433, v434);
      ((void (*)(uint64_t, double))v575[6])((uint64_t)&v575, v435);
    }
    else
    {
      ((void (*)(uint64_t))v575[7])((uint64_t)&v575);
    }
    v436 = ((double (*)(uint64_t))v575[4])((uint64_t)&v575);
    ((void (*)(uint64_t, double))v588[12])((uint64_t)&v588, v436);
  }
  v437 = v614;
  v438 = 8 * v614;
  v439 = (v438 + 31) & 0xFFFFFFFE0;
  *(double *)&__dst = 0.0;
  *(_QWORD *)&v558 = v439 >> 3;
  v662[0].__locale_ = 0;
  malloc_type_posix_memalign((void **)&v662[0].__locale_, 0x20uLL, v439, 0x100BBD03uLL);
  v440 = (double *)v662[0].__locale_;
  __dst = v662[0].__locale_;
  v94 = (double *)v516;
  if (!v662[0].__locale_)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v504 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v504, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v437)
  {
    memcpy(v662[0].__locale_, __src[0], v438);
    v440 = (double *)__dst;
  }
  v559 = v614;
  v441 = fabs(*v440);
  if (v614 != 1)
  {
    v442 = v440 + 1;
    v443 = 8 * v614 - 8;
    do
    {
      v444 = *v442++;
      v445 = fabs(v444);
      if (v441 < v445)
        v441 = v445;
      v443 -= 8;
    }
    while (v443);
  }
  if (v441 < v441 * *(double *)&v577)
  {
    if (BYTE8(v576))
    {
      v446 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v446 + *(_QWORD *)(*v446 - 24)));
      v447 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v447->__vftable[2].~facet_0)(v447, 10);
      std::locale::~locale(v662);
      std::ostream::put();
      std::ostream::flush();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
      v448 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v448, (uint64_t)"][", 2);
      if (v441 == 0.0)
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
      else
        std::ostream::operator<<();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
      v500 = (_QWORD *)std::ostream::operator<<();
      v501 = sub_239458500(v500, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v501 + *(_QWORD *)(*v501 - 24)));
      v502 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v502->__vftable[2].~facet_0)(v502, 10);
      std::locale::~locale(v662);
      std::ostream::put();
      std::ostream::flush();
    }
    LODWORD(v565) = 1;
    goto LABEL_850;
  }
  v449 = v583;
  kdebug_trace();
  v554 = 0;
  v555 = 0;
  v556 = 0;
  v450 = v441;
  do
  {
    v453 = (int)v564;
    if ((int)v564 >= SDWORD1(v576))
      break;
    v454 = (_DWORD)v564 + 1;
    LODWORD(v564) = (_DWORD)v564 + 1;
    if (((unsigned int (*)(uint64_t, uint64_t))v588[2])((uint64_t)&v588, (uint64_t)&v554))
    {
      v495 = BYTE8(v576);
      if (BYTE8(v576))
      {
        v496 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
        std::ios_base::getloc((const std::ios_base *)((char *)v496 + *(_QWORD *)(*v496 - 24)));
        v497 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v497->__vftable[2].~facet_0)(v497, 10);
        std::locale::~locale(v662);
        std::ostream::put();
        std::ostream::flush();
        v495 = 0;
      }
      goto LABEL_843;
    }
    ++HIDWORD(v564);
    if (v556)
    {
      v455 = *(double *)v554 * *(double *)v554;
      if (v556 != 1)
      {
        v456 = (double *)((char *)v554 + 8);
        v457 = (v556 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v457 >= 3)
        {
          v458 = v457 + 1;
          v459 = (float64x2_t *)((char *)v554 + 24);
          v460 = v458 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v461 = vmulq_f64(v459[-1], v459[-1]);
            v462 = vmulq_f64(*v459, *v459);
            v455 = v455 + v461.f64[0] + v461.f64[1] + v462.f64[0] + v462.f64[1];
            v459 += 2;
            v460 -= 4;
          }
          while (v460);
          if (v458 == (v458 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_759;
          v456 += v458 & 0x3FFFFFFFFFFFFFFCLL;
        }
        do
        {
          v463 = *v456++;
          v455 = v455 + v463 * v463;
        }
        while (v456 != (double *)((char *)v554 + 8 * v556));
      }
    }
    else
    {
      v455 = 0.0;
    }
LABEL_759:
    v464 = sqrt(v455);
    if (v464 < *((double *)&v577 + 1) * (v227 + *((double *)&v577 + 1)) && v453 >= (int)v576)
    {
      if (BYTE8(v576))
      {
        v498 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
        std::ios_base::getloc((const std::ios_base *)((char *)v498 + *(_QWORD *)(*v498 - 24)));
        v499 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v499->__vftable[2].~facet_0)(v499, 10);
        std::locale::~locale(v662);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v575[8])((uint64_t)&v575, v449, v464, v450, v441);
      }
      v495 = 2;
LABEL_843:
      LODWORD(v565) = v495;
      break;
    }
    ((void (*)(uint64_t, _QWORD *))v588[5])((uint64_t)&v588, &v554);
    v466 = v614;
    sub_23945215C((uint64_t)&__dst, v614);
    if ((_DWORD)v466)
      memcpy(__dst, __src[0], 8 * v466);
    v559 = v614;
    if (v582)
      (*(void (**)(_BYTE *))(*(_QWORD *)v582 + 48))(v582);
    v551 = 0;
    v552 = 0;
    v553 = 0;
    v467 = v568[1];
    v468 = v569 - (unint64_t)v568[1];
    if ((void *)v569 != v568[1])
    {
      if (v468 < 0)
        sub_2394189F8();
      v551 = operator new(v569 - (unint64_t)v568[1]);
      v552 = (char *)v551;
      v469 = (char *)v551 + 8 * (v468 >> 3);
      v553 = v469;
      memcpy(v551, v467, v468);
      v552 = v469;
    }
    v94 = (double *)v516;
    v449 = sub_239C2FD3C((uint64_t)&v588, (uint64_t)&v568[1]);
    v450 = fabs(*(double *)__dst);
    if (v559 != 1)
    {
      v470 = (double *)((char *)__dst + 8);
      v471 = 8 * v559 - 8;
      do
      {
        v472 = *v470++;
        v473 = fabs(v472);
        if (v450 < v473)
          v450 = v473;
        v471 -= 8;
      }
      while (v471);
    }
    if (BYTE8(v576))
      ((void (*)(uint64_t, double, double, double, double))v575[8])((uint64_t)&v575, v449, v464, v450, v441);
    if (v449 == 0.0)
    {
      if (BYTE8(v576))
      {
        v474 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v475 = sub_239458500(v474, (uint64_t)"N.A.", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v475 + *(_QWORD *)(*v475 - 24)));
        v476 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v476->__vftable[2].~facet_0)(v476, 10);
        std::locale::~locale(v662);
        std::ostream::put();
        goto LABEL_803;
      }
      goto LABEL_804;
    }
    if (vabdd_f64(v449, v583) < v449 * *(double *)v578 && v453 >= (int)v576)
    {
      if (BYTE8(v576))
      {
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v483 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v483 + *(_QWORD *)(*v483 - 24)));
        v484 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v484->__vftable[2].~facet_0)(v484, 10);
        std::locale::~locale(v662);
        std::ostream::put();
LABEL_803:
        std::ostream::flush();
      }
LABEL_804:
      v583 = v449;
      v485 = 3;
LABEL_805:
      v451 = 0;
      LODWORD(v565) = v485;
      v452 = (char *)v551;
      if (!v551)
        continue;
      goto LABEL_745;
    }
    if (DWORD2(v612))
    {
      memset(v662, 0, 20);
      ((void (*)(uint64_t, uint64_t))v588[19])((uint64_t)&v588, (uint64_t)v662);
      v478 = ((BOOL (*)(double *, uint64_t, double **, double **, double))v575[10])((double *)&v575, (uint64_t)&v554, (double **)&__dst, (double **)v662, v449);
      free(v662[0].__locale_);
      if (!v478)
        goto LABEL_808;
    }
    else if (!((BOOL (*)(double *, uint64_t, double **, double))v575[9])((double *)&v575, (uint64_t)&v554, (double **)&__dst, v449))
    {
LABEL_808:
      --HIDWORD(v564);
      v486 = v592;
      if (v592 != v593)
      {
        do
        {
          if (*((_BYTE *)v486 + 44))
          {
            *(_OWORD *)(v486 + 7) = *(_OWORD *)(v486 + 13);
            v486[9] = v486[15];
            *((_BYTE *)v486 + 80) = *((_BYTE *)v486 + 128);
          }
          v489 = v486[1];
          if (v489)
          {
            do
            {
              v490 = (uint64_t **)v489;
              v489 = (uint64_t *)*v489;
            }
            while (v489);
          }
          else
          {
            do
            {
              v490 = (uint64_t **)v486[2];
              _ZF = *v490 == (uint64_t *)v486;
              v486 = v490;
            }
            while (!_ZF);
          }
          v486 = v490;
        }
        while (v490 != v593);
      }
      v487 = v594;
      if (v594 != &v595)
      {
        do
        {
          if (*((_BYTE *)v487 + 44))
          {
            v487[7] = v487[11];
            *((_BYTE *)v487 + 64) = *((_BYTE *)v487 + 96);
          }
          v491 = v487[1];
          if (v491)
          {
            do
            {
              v492 = (uint64_t **)v491;
              v491 = (uint64_t *)*v491;
            }
            while (v491);
          }
          else
          {
            do
            {
              v492 = (uint64_t **)v487[2];
              _ZF = *v492 == (uint64_t *)v487;
              v487 = v492;
            }
            while (!_ZF);
          }
          v487 = v492;
        }
        while (v492 != &v595);
      }
      LOBYTE(v609[0]) = 0;
      *(_WORD *)((char *)v609 + 3) = 0;
      BYTE1(v609[0]) = BYTE2(v609[0]);
      sub_23945D3D0(&v568[1], (char *)v551, v552, (v552 - (_BYTE *)v551) >> 3);
      if (((unsigned int (__cdecl *)())v575[3])())
      {
        v488 = ((double (*)(uint64_t))v575[4])((uint64_t)&v575);
        ((void (*)(uint64_t, double))v588[12])((uint64_t)&v588, v488);
      }
      goto LABEL_835;
    }
    if (((unsigned int (__cdecl *)())v575[3])())
    {
      v479 = ((double (*)(uint64_t))v575[4])((uint64_t)&v575);
      ((void (*)(uint64_t, double))v588[12])((uint64_t)&v588, v479);
    }
    if (v450 < v441 * *(double *)&v577 && v453 >= (int)v576)
    {
      if (BYTE8(v576))
      {
        v493 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v493 + *(_QWORD *)(*v493 - 24)));
        v494 = std::locale::use_facet(v662, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v494->__vftable[2].~facet_0)(v494, 10);
        std::locale::~locale(v662);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v575[8])((uint64_t)&v575, v449, v464, v450, v441);
      }
      v485 = 1;
      goto LABEL_805;
    }
    if (v454 < SDWORD1(v576) && v578[8])
    {
      if (v578[24])
      {
        v662[0].__locale_ = (std::locale::__imp *)&v588;
        v662[1] = *(std::locale *)&v578[16];
        v662[2].__locale_ = (std::locale::__imp *)&v560;
        sub_239C2F8F4((uint64_t)v662);
        v481 = 0x3DDB7CDFD9D7BDBBLL;
        v482 = 1.0e20;
        if (v560 > 0.0)
        {
          v481 = *(_QWORD *)&v560;
          v482 = 1.0 / (v560 * v560);
        }
        *(_QWORD *)&v589 = v481;
        *((double *)&v589 + 1) = v482;
        *(_QWORD *)&v590 = v481;
        *((double *)&v590 + 1) = v482;
        memset(v609, 0, 5);
      }
      else
      {
        sub_239C301E0((uint64_t)&v588, *(double *)&v578[16]);
      }
      v583 = sub_239C2FD3C((uint64_t)&v588, (uint64_t)&v568[1]);
    }
LABEL_835:
    if (v454 < SDWORD1(v576) && v580)
      (*(void (**)(_BYTE *))(*(_QWORD *)v580 + 48))(v580);
    v451 = 1;
    v452 = (char *)v551;
    if (!v551)
      continue;
LABEL_745:
    v552 = v452;
    operator delete(v452);
  }
  while ((v451 & 1) != 0);
  *((double *)&v566 + 1) = v583;
  if (v580)
    (*(void (**)(_BYTE *))(*(_QWORD *)v580 + 48))(v580);
  free(v554);
LABEL_850:
  free(__dst);
  v239 = v661;
  if (!v661)
LABEL_851:
    sub_2394172E0();
LABEL_341:
  (*(void (**)(std::string *))(v239->__r_.__value_.__r.__words[0] + 48))(v239);
  v240 = v661;
  if (v661 == &v660)
  {
    v241 = 4;
    v240 = &v660;
LABEL_349:
    (*(void (**)(void))(v240->__r_.__value_.__r.__words[0] + 8 * v241))();
  }
  else if (v661)
  {
    v241 = 5;
    goto LABEL_349;
  }
  kdebug_trace();
  sub_239C19F80((uint64_t)(v94 + 37), (__int128 *)v561);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v570[1])
  {
    *(void **)&v571 = v570[1];
    operator delete(v570[1]);
  }
  if (v568[1])
  {
    *(void **)&v569 = v568[1];
    operator delete(v568[1]);
  }
  if (v567[0])
  {
    v567[1] = v567[0];
    operator delete(v567[0]);
  }
  if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v563.__r_.__value_.__l.__data_);
    if (SHIBYTE(v562) < 0)
      goto LABEL_396;
  }
  else
  {
    if ((SHIBYTE(v562) & 0x80000000) == 0)
      goto LABEL_360;
LABEL_396:
    operator delete(v561[0]);
  }
LABEL_360:
  v246 = v592;
  if (v592 != v593)
  {
    do
    {
      if (*((_BYTE *)v246 + 44))
      {
        v259 = v246[6];
        if (v259)
        {
          v260 = *(_OWORD *)(v246 + 7);
          v259[2] = (uint64_t)v246[9];
          *(_OWORD *)v259 = v260;
          *((_BYTE *)v259 + 24) = *((_BYTE *)v246 + 80);
        }
      }
      v261 = v246[1];
      if (v261)
      {
        do
        {
          v262 = (uint64_t **)v261;
          v261 = (uint64_t *)*v261;
        }
        while (v261);
      }
      else
      {
        do
        {
          v262 = (uint64_t **)v246[2];
          _ZF = *v262 == (uint64_t *)v246;
          v246 = v262;
        }
        while (!_ZF);
      }
      v246 = v262;
    }
    while (v262 != v593);
  }
  v247 = v594;
  if (v594 != &v595)
  {
    do
    {
      if (*((_BYTE *)v247 + 44))
      {
        v263 = v247[6];
        if (v263)
        {
          v264 = v247[7];
          *((_BYTE *)v263 + 8) = *((_BYTE *)v247 + 64);
          *v263 = (uint64_t)v264;
        }
      }
      v265 = v247[1];
      if (v265)
      {
        do
        {
          v266 = (uint64_t **)v265;
          v265 = (uint64_t *)*v265;
        }
        while (v265);
      }
      else
      {
        do
        {
          v266 = (uint64_t **)v247[2];
          _ZF = *v266 == (uint64_t *)v247;
          v247 = v266;
        }
        while (!_ZF);
      }
      v247 = v266;
    }
    while (v266 != &v595);
  }
  if (*((_BYTE *)v94 + 144))
  {
    sub_2394988CC((uint64_t)v561);
    HIBYTE(v662[2].__locale_) = 18;
    strcpy((char *)v662, "TranslationAverage");
    sub_239C1A0F4((uint64_t)(v94 + 37), &v562, (uint64_t)v662);
    if (SHIBYTE(v662[2].__locale_) < 0)
      operator delete(v662[0].__locale_);
    v561[0] = *(void **)MEMORY[0x24BEDB7F0];
    v248 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v561 + *((_QWORD *)v561[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v562 = v248;
    v563.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v568[1]) < 0)
      operator delete(v567[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v570);
  }
  for (k = (uint64_t *)*((_QWORD *)v94 + 2); k; k = (uint64_t *)*k)
  {
    v250 = sub_239C18404((float *)v548, k[2], k + 2);
    v251 = *((double *)v250 + 5);
    _Q1 = *(float64x2_t *)(v250 + 24);
    _D4 = k[9];
    v254 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(k + 3), _Q1.f64[0]), *(float64x2_t *)(k + 7), _Q1, 1), *(float64x2_t *)(k + 11), v251);
    __asm { FMLA            D2, D4, V1.D[1] }
    v256.f64[0] = _D2 + *((double *)k + 13) * v251;
    *(float64x2_t *)(k + 15) = vnegq_f64(v254);
    k[17] = *(_OWORD *)&vnegq_f64(v256);
  }
  for (m = (_QWORD *)*((_QWORD *)v94 + 7); m; m = (_QWORD *)*m)
    m[4] = sub_239C18878((float *)v545, m[2], m + 2)[3];
  v575 = off_250AFEA50;
  if (v582 == v581)
  {
    v258 = 4;
LABEL_398:
    (*(void (**)(_QWORD *))(*v221 + 8 * v258))(v221);
  }
  else if (v582)
  {
    v258 = 5;
    v221 = v582;
    goto LABEL_398;
  }
  if (v580 == v579)
  {
    v268 = 4;
    v267 = v513;
LABEL_403:
    (*(void (**)(_QWORD *))(*v219 + 8 * v268))(v219);
  }
  else
  {
    v267 = v513;
    if (v580)
    {
      v268 = 5;
      v219 = v580;
      goto LABEL_403;
    }
  }
  if (v519)
    operator delete(v519);
  v3 = v505;
  if (v267)
    operator delete(v267);
  v269 = v539[0];
  if (v539[0])
  {
    do
    {
      v270 = (_QWORD *)*v269;
      operator delete(v269);
      v269 = v270;
    }
    while (v270);
  }
  v271 = v538[0];
  v538[0] = 0;
  if (v271)
    operator delete(v271);
  if (v508)
    operator delete(v508);
  v272 = v546[0];
  if (v546[0])
  {
    do
    {
      v273 = (_QWORD *)*v272;
      operator delete(v272);
      v272 = v273;
    }
    while (v273);
  }
  v274 = v545[0];
  v545[0] = 0;
  if (v274)
    operator delete(v274);
  v275 = v549[0];
  if (v549[0])
  {
    do
    {
      v276 = (_QWORD *)*v275;
      operator delete(v275);
      v275 = v276;
    }
    while (v276);
  }
  v277 = v548[0];
  v548[0] = 0;
  if (v277)
    operator delete(v277);
  v588 = off_250AFB198;
  free(v659[1]);
  free(v658[0]);
  v588 = off_250AFB250;
  free(v654[0]);
  free(v652[1]);
  sub_239C1A9B8((uint64_t)&v588);
  v2 = v506;
  return v2 != v3;
}

void sub_239C17F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  void *a69;
  uint64_t v69;
  unint64_t *v71;
  uint64_t v72;

  std::locale::~locale((std::locale *)(v69 - 256));
  free(a66);
  free(a69);
  if (!STACK[0x7B8])
    sub_2394172E0();
  (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x7B8] + 48))(STACK[0x7B8]);
  v71 = (unint64_t *)STACK[0x7B8];
  if ((unint64_t *)STACK[0x7B8] == &STACK[0x7A0])
  {
    v72 = 4;
    v71 = &STACK[0x7A0];
  }
  else
  {
    if (!v71)
      goto LABEL_8;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_8:
  sub_239C0BE14((uint64_t)&STACK[0x200]);
  sub_239C30284();
  sub_239C1AAB0(&STACK[0x320]);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  sub_239420950((uint64_t)&a41);
  if (a12)
    operator delete(a12);
  sub_239420950((uint64_t)&a51);
  sub_239420950((uint64_t)&a57);
  sub_239C1AB3C((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_239C182A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_239A4D7C0((uint64_t)&a47);
  JUMPOUT(0x239C183DCLL);
}

void sub_239C182B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_239A4D7C0((uint64_t)&a49);
  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  JUMPOUT(0x239C183DCLL);
}

void sub_239C182E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;

  if (v41)
    operator delete(v41);
  if (a14)
    operator delete(a14);
  sub_239420950(&a41);
  if (!a12)
    JUMPOUT(0x239C183E4);
  JUMPOUT(0x239C183DCLL);
}

void sub_239C18308()
{
  sub_239C1AAB0(&STACK[0x320]);
  JUMPOUT(0x239C1838CLL);
}

void sub_239C1832C()
{
  JUMPOUT(0x239C183E4);
}

void sub_239C18334()
{
  JUMPOUT(0x239C183ECLL);
}

void sub_239C18340()
{
  JUMPOUT(0x239C183ACLL);
}

void sub_239C18348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  sub_239A4D7C0(v37 - 256);
  sub_239A4D7C0((uint64_t)&a37);
  JUMPOUT(0x239C183A4);
}

void sub_239C18368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_239A4D7C0((uint64_t)&STACK[0x320]);
  sub_239A4D7C0(v69 - 256);
  sub_239A4D7C0((uint64_t)&a39);
  sub_239A4D7C0((uint64_t)&a69);
  JUMPOUT(0x239C1838CLL);
}

void sub_239C183A0()
{
  JUMPOUT(0x239C183ACLL);
}

char *sub_239C18404(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  v10[48] = 1;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_239418A80();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_59;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_239C18864(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239C18878(float *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v41;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  v13 = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v13;
  *((_BYTE *)v10 + 32) = 1;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_239418A80();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
      goto LABEL_59;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_64:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime < v7)
  {
    if (!prime)
    {
      v41 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v41)
        operator delete(v41);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v38)
  {
    *v10 = *v38;
LABEL_80:
    *v38 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v37[v5] = a1 + 4;
  if (*v10)
  {
    v39 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_239C18CD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239C18CE4(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int8 *v26;
  uint64_t v27;
  __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  __int8 *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  std::__shared_weak_count *v100;
  __int128 v101;
  _BYTE v102[48];
  char *v103;
  __int128 v104;
  unint64_t v105;
  __int128 v106;
  _BYTE v107[32];
  char *v108;
  unint64_t *v109;
  char *v110;

  v5 = a5;
  v8 = (unint64_t *)a1[6].i64[0];
  v9 = (unint64_t *)a1[6].i64[1];
  v10 = v9 - v8;
  *(_OWORD *)&v107[8] = *(_OWORD *)a2;
  *(_QWORD *)&v107[24] = *(_QWORD *)(a2 + 16);
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v100 = a5;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v8 = (unint64_t *)a1[6].i64[0];
    v9 = (unint64_t *)a1[6].i64[1];
  }
  else
  {
    v100 = 0;
  }
  v14 = 0xEEEEEEEEEEEEEEEFLL * v10;
  if (v8 == v9 || *(v9 - 15) < v14)
    goto LABEL_19;
  v15 = 0xEEEEEEEEEEEEEEEFLL * (v9 - v8);
  do
  {
    v16 = v15 >> 1;
    v17 = &v8[15 * (v15 >> 1)];
    v19 = *v17;
    v18 = v17 + 15;
    v15 += ~(v15 >> 1);
    if (v19 < v14)
      v8 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v8 == v9 || (v9 = v8, *v8 != v14))
  {
LABEL_19:
    if (a5)
    {
      v21 = (unint64_t *)&a5->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_OWORD *)&v102[8] = *(_OWORD *)v107;
    *(_OWORD *)&v102[24] = *(_OWORD *)&v107[16];
    *(_QWORD *)v102 = v14;
    *(_QWORD *)&v106 = a4;
    *((_QWORD *)&v106 + 1) = a5;
    if (a5)
    {
      v23 = (unint64_t *)&a5->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = &a1[3].i8[8];
    v27 = a1[3].i64[1];
    if (!v27)
      goto LABEL_49;
    v28 = &a1[3].i8[8];
    v29 = a1[3].i64[1];
    do
    {
      v30 = *(_DWORD *)(v29 + 32);
      v31 = v30 >= a3;
      if (v30 >= a3)
        v32 = (uint64_t *)v29;
      else
        v32 = (uint64_t *)(v29 + 8);
      if (v31)
        v28 = (__int8 *)v29;
      v29 = *v32;
    }
    while (*v32);
    if (v28 == v26 || *((_DWORD *)v28 + 8) > a3)
      goto LABEL_49;
    *(_QWORD *)&v102[40] = v28 + 40;
    ++*((_DWORD *)v28 + 24);
    v33 = &a1[3].i8[8];
    do
    {
      v34 = *(_DWORD *)(v27 + 32);
      v35 = v34 >= HIDWORD(a3);
      if (v34 >= HIDWORD(a3))
        v36 = (uint64_t *)v27;
      else
        v36 = (uint64_t *)(v27 + 8);
      if (v35)
        v33 = (__int8 *)v27;
      v27 = *v36;
    }
    while (*v36);
    if (v33 != v26
      && *((_DWORD *)v33 + 8) <= HIDWORD(a3)
      && ((v103 = v33 + 40, ++*((_DWORD *)v33 + 24), v28[44]) || v33[44]))
    {
      v43 = (unint64_t *)a1[6].i64[1];
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (v43 == v9 || *v9 != v14)
      {
        v45 = a1[7].u64[0];
        v46 = a1[6].i64[0];
        v47 = (uint64_t)v9 - v46;
        v48 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v9 - v46) >> 3);
        v98 = (unint64_t *)v46;
        if ((unint64_t)v43 >= v45)
        {
          v64 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v43 - v46) >> 3) + 1;
          if (v64 > 0x222222222222222)
            sub_2394189F8();
          v65 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v45 - v46) >> 3);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x111111111111111)
            v66 = 0x222222222222222;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 > 0x222222222222222)
              sub_239418A80();
            v67 = (char *)operator new(120 * v66);
          }
          else
          {
            v67 = 0;
          }
          v73 = &v67[120 * v48];
          v110 = &v67[120 * v66];
          if (v48 == v66)
          {
            if (v47 < 1)
            {
              if (v9 == v98)
                v75 = 1;
              else
                v75 = 2 * v48;
              if (v75 > 0x222222222222222)
                sub_239418A80();
              v76 = (char *)operator new(120 * v75);
              v73 = &v76[120 * (v75 >> 2)];
              v110 = &v76[120 * v75];
              if (v67)
                operator delete(v67);
            }
            else
            {
              v74 = v48 + 2;
              if (v48 >= -1)
                v74 = v48 + 1;
              v73 -= 120 * (v74 >> 1);
            }
          }
          *(_OWORD *)(v73 + 40) = *(_OWORD *)&v102[32];
          *(_OWORD *)(v73 + 24) = *(_OWORD *)&v102[16];
          *(_QWORD *)v73 = v14;
          *((_QWORD *)v73 + 7) = v103;
          *(_OWORD *)(v73 + 8) = *(_OWORD *)v102;
          *((_OWORD *)v73 + 4) = v104;
          *((_QWORD *)v73 + 10) = v105;
          *((_QWORD *)v73 + 11) = 0xBFF0000000000000;
          *((_OWORD *)v73 + 6) = v106;
          v101 = 0uLL;
          v73[112] = 0;
          v77 = (uint64_t)(v73 + 120);
          v108 = v73 + 120;
          v78 = (unint64_t *)a1[6].i64[0];
          if (v78 != v9)
          {
            v79 = 0;
            do
            {
              v80 = &v73[v79 * 8];
              v81 = (char *)&v9[v79];
              *((_QWORD *)v80 - 15) = v9[v79 - 15];
              v82 = *(_OWORD *)&v9[v79 - 14];
              v83 = *(_OWORD *)&v9[v79 - 12];
              v84 = *(_OWORD *)&v9[v79 - 10];
              *((_QWORD *)v80 - 8) = v9[v79 - 8];
              *((_OWORD *)v80 - 6) = v83;
              *((_OWORD *)v80 - 5) = v84;
              *((_OWORD *)v80 - 7) = v82;
              v85 = *(_OWORD *)&v9[v79 - 7];
              *((_QWORD *)v80 - 5) = v9[v79 - 5];
              *(_OWORD *)(v80 - 56) = v85;
              *((_QWORD *)v80 - 4) = v9[v79 - 4];
              *(_OWORD *)(v80 - 24) = *(_OWORD *)&v9[v79 - 3];
              *((_QWORD *)v81 - 3) = 0;
              *((_QWORD *)v81 - 2) = 0;
              *(v80 - 8) = v9[v79 - 1];
              v79 -= 15;
            }
            while (&v9[v79] != v78);
            v73 += v79 * 8;
            v77 = (uint64_t)v108;
          }
          v86 = (unint64_t *)a1[6].i64[1];
          if (v86 != v9)
          {
            do
            {
              *(_QWORD *)v77 = *v9;
              v87 = *(_OWORD *)(v9 + 1);
              v88 = *(_OWORD *)(v9 + 3);
              v89 = *(_OWORD *)(v9 + 5);
              *(_QWORD *)(v77 + 56) = v9[7];
              *(_OWORD *)(v77 + 40) = v89;
              *(_OWORD *)(v77 + 24) = v88;
              *(_OWORD *)(v77 + 8) = v87;
              v90 = *((_OWORD *)v9 + 4);
              *(_QWORD *)(v77 + 80) = v9[10];
              *(_OWORD *)(v77 + 64) = v90;
              *(_QWORD *)(v77 + 88) = v9[11];
              *(_OWORD *)(v77 + 96) = *((_OWORD *)v9 + 6);
              v9[12] = 0;
              v9[13] = 0;
              *(_BYTE *)(v77 + 112) = *((_BYTE *)v9 + 112);
              v77 += 120;
              v9 += 15;
            }
            while (v9 != v86);
            v9 = (unint64_t *)a1[6].i64[1];
          }
          v91 = (unint64_t *)a1[6].i64[0];
          a1[6].i64[0] = (uint64_t)v73;
          a1[6].i64[1] = v77;
          a1[7].i64[0] = (uint64_t)v110;
          if (v9 != v91)
          {
            do
            {
              v109 = v9 - 15;
              v92 = (std::__shared_weak_count *)*(v9 - 2);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v9 = v109;
            }
            while (v109 != v91);
            v9 = v91;
          }
          if (v9)
            operator delete(v9);
        }
        else if (v9 == v43)
        {
          *v43 = v14;
          v72 = v46 + 8 * (((uint64_t)v9 - v46) >> 3);
          *(_QWORD *)(v72 + 56) = v103;
          *(_OWORD *)(v72 + 40) = *(_OWORD *)&v102[32];
          *(_OWORD *)(v72 + 24) = *(_OWORD *)&v102[16];
          *(_OWORD *)(v72 + 8) = *(_OWORD *)v102;
          *(_QWORD *)(v72 + 80) = v105;
          *(_OWORD *)(v72 + 64) = v104;
          *(_QWORD *)(v72 + 88) = 0xBFF0000000000000;
          *(_OWORD *)(v72 + 96) = v106;
          v101 = 0uLL;
          *(_BYTE *)(v72 + 112) = 0;
          a1[6].i64[1] = (uint64_t)(v43 + 15);
        }
        else
        {
          v97 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v9 - v46) >> 3);
          v101 = 0uLL;
          v49 = v43 - 15;
          v50 = a1[6].i64[1];
          if ((unint64_t)v43 >= 0x78)
          {
            v51 = v43 - 15;
            v50 = a1[6].i64[1];
            do
            {
              *(_QWORD *)v50 = *v51;
              v52 = *(_OWORD *)(v51 + 1);
              v53 = *(_OWORD *)(v51 + 3);
              v54 = *(_OWORD *)(v51 + 5);
              *(_QWORD *)(v50 + 56) = v51[7];
              *(_OWORD *)(v50 + 40) = v54;
              *(_OWORD *)(v50 + 24) = v53;
              *(_OWORD *)(v50 + 8) = v52;
              v55 = *((_OWORD *)v51 + 4);
              *(_QWORD *)(v50 + 80) = v51[10];
              *(_OWORD *)(v50 + 64) = v55;
              *(_QWORD *)(v50 + 88) = v51[11];
              *(_OWORD *)(v50 + 96) = *((_OWORD *)v51 + 6);
              v51[12] = 0;
              v51[13] = 0;
              *(_BYTE *)(v50 + 112) = *((_BYTE *)v51 + 112);
              v50 += 120;
              v51 += 15;
            }
            while (v51 < v43);
          }
          a1[6].i64[1] = v50;
          if (v43 != v9 + 15)
          {
            v56 = v43 - 15;
            v57 = v43;
            do
            {
              v58 = *(v56 - 15);
              v56 -= 15;
              *(v57 - 15) = v58;
              v57 -= 15;
              *(_OWORD *)(v57 + 1) = *(_OWORD *)(v56 + 1);
              v57[3] = v56[3];
              v57[4] = v56[4];
              v57[5] = v56[5];
              v57[6] = v56[6];
              v57[7] = v56[7];
              v59 = *((_OWORD *)v56 + 4);
              v57[10] = v56[10];
              *((_OWORD *)v57 + 4) = v59;
              v57[11] = v56[11];
              v60 = *((_OWORD *)v56 + 6);
              v56[12] = 0;
              v56[13] = 0;
              v61 = (std::__shared_weak_count *)v57[13];
              *((_OWORD *)v57 + 6) = v60;
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              *((_BYTE *)v43 - 8) = *((_BYTE *)v49 - 8);
              v43 = v57;
              v49 = v56;
            }
            while (v56 != v9);
          }
          *v9 = v14;
          v68 = &v98[15 * v97];
          *(_OWORD *)(v68 + 1) = *(_OWORD *)v102;
          *(_OWORD *)(v68 + 3) = *(_OWORD *)&v102[16];
          *(_OWORD *)(v68 + 5) = *(_OWORD *)&v102[32];
          v68[7] = (unint64_t)v103;
          *((_OWORD *)v68 + 4) = v104;
          v68[10] = v105;
          v68[11] = 0xBFF0000000000000;
          v69 = (std::__shared_weak_count *)v68[13];
          *((_OWORD *)v68 + 6) = v106;
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          LOBYTE(v98[15 * v97 + 14]) = 0;
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      }
      if (v44)
      {
        v95 = (unint64_t *)&v44->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      a1[10].i8[2] = 0;
      a1[10].i8[0] = 0;
      a1[9] = vaddq_s64(a1[9], (int64x2_t)xmmword_239F0C400);
      v20 = 1;
    }
    else
    {
LABEL_49:
      v20 = 0;
      if (*((_QWORD *)&v106 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 16))(*((_QWORD *)&v106 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v106 + 1));
        }
      }
    }
    v5 = v100;
    if (!v100)
    {
LABEL_58:
      if (!v20)
        goto LABEL_60;
      goto LABEL_59;
    }
  }
  else
  {
    v20 = 0;
    if (!a5)
      goto LABEL_58;
  }
  v39 = (unint64_t *)&v5->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    goto LABEL_58;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v20)
LABEL_59:
    a1[19].i32[2] = 0;
LABEL_60:
  if (a5)
  {
    v41 = (unint64_t *)&a5->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
}

void sub_239C19710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_239C31C48(v39 - 160);
  sub_239C31B98((uint64_t)&a24);
  sub_239C31BF0((uint64_t)&a39);
  sub_239A4D7C0((uint64_t)&a22);
  sub_239A4D7C0((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *sub_239C1974C(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x68uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 1;
  v10[12] = 0x3FF0000000000000;
  *((_OWORD *)v10 + 2) = xmmword_239F13A00;
  *((_OWORD *)v10 + 3) = *(_OWORD *)algn_239F13A10;
  *((_OWORD *)v10 + 4) = xmmword_239F13A20;
  *((_OWORD *)v10 + 5) = *(_OWORD *)dbl_239F13A30;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_239418A80();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_59;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_239C19BBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239C19BD0(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  void **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;

  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 80);
  v11 = *(char **)(a1 + 88);
  v10 = (void **)(a1 + 80);
  if (v9 == v11)
  {
    v11 = *(char **)(a1 + 80);
  }
  else if (*((_QWORD *)v11 - 20) >= v8)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v9) >> 5);
    do
    {
      v13 = v12 >> 1;
      v14 = (unint64_t *)&v9[160 * (v12 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 20);
      v12 += ~(v12 >> 1);
      if (v16 < v8)
        v9 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v9 != v11)
    {
      v11 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = a2[3];
  v67 = a2[2];
  v68 = v20;
  v21 = *((_QWORD *)a2 + 8);
  v22 = a2[1];
  v65 = *a2;
  v66 = v22;
  v69 = v21;
  v70 = 0uLL;
  v73 = 0xBFF0000000000000;
  v74 = a4;
  v75 = a5;
  if (a5)
  {
    v23 = (unint64_t *)&a5->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v76 = 0;
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v76 = 0;
  }
  v26 = a1 + 16;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    goto LABEL_55;
  v28 = *a3;
  v29 = a1 + 16;
  v30 = *(_QWORD *)(a1 + 16);
  do
  {
    v31 = *(_DWORD *)(v30 + 32);
    v32 = v31 >= v28;
    if (v31 >= v28)
      v33 = (uint64_t *)v30;
    else
      v33 = (uint64_t *)(v30 + 8);
    if (v32)
      v29 = v30;
    v30 = *v33;
  }
  while (*v33);
  if (v29 == v26 || *(_DWORD *)(v29 + 32) > v28)
    goto LABEL_55;
  *((_QWORD *)&v69 + 1) = v29 + 40;
  ++*(_DWORD *)(v29 + 96);
  v34 = a3[1];
  v35 = a1 + 16;
  do
  {
    v36 = *(_DWORD *)(v27 + 32);
    v37 = v36 >= v34;
    if (v36 >= v34)
      v38 = (uint64_t *)v27;
    else
      v38 = (uint64_t *)(v27 + 8);
    if (v37)
      v35 = v27;
    v27 = *v38;
  }
  while (*v38);
  if (v35 == v26)
    goto LABEL_55;
  if (*(_DWORD *)(v35 + 32) > v34)
    goto LABEL_55;
  *(_QWORD *)&v70 = v35 + 40;
  ++*(_DWORD *)(v35 + 96);
  v39 = *(_QWORD *)(a1 + 40);
  if (!v39)
    goto LABEL_55;
  v40 = a3[2];
  v41 = a1 + 40;
  do
  {
    v42 = *(_DWORD *)(v39 + 32);
    v43 = v42 >= v40;
    if (v42 >= v40)
      v44 = (uint64_t *)v39;
    else
      v44 = (uint64_t *)(v39 + 8);
    if (v43)
      v41 = v39;
    v39 = *v44;
  }
  while (*v44);
  if (v41 == a1 + 40
    || *(_DWORD *)(v41 + 32) > v40
    || (*((_QWORD *)&v70 + 1) = v41 + 40, ++*(_DWORD *)(v41 + 80), !*(_BYTE *)(v29 + 44))
    && !*(_BYTE *)(v35 + 44)
    && !*(_BYTE *)(v41 + 44))
  {
LABEL_55:
    v17 = 0;
    v45 = v75;
    if (!v75)
      return v17;
    goto LABEL_56;
  }
  v55 = v67;
  v56 = v68;
  v57 = v69;
  v58 = v70;
  v53 = v65;
  v52 = v8;
  v54 = v66;
  v59 = v71;
  v60 = v72;
  v61 = v73;
  v49 = v75;
  v62 = v74;
  v63 = v75;
  v74 = 0;
  v75 = 0;
  v64 = v76;
  if (*(char **)(a1 + 88) == v11 || *(_QWORD *)v11 != v8)
  {
    sub_239C313BC(v10, v11, (uint64_t *)&v52);
    v49 = v63;
  }
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_BYTE *)(a1 + 122) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_239F0C400);
  v17 = 1;
  v45 = v75;
  if (v75)
  {
LABEL_56:
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v17;
}

void sub_239C19F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_239C31AB4((uint64_t)&a9);
  sub_239C30548((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_239C19F80(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = a2[4];
  v8 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v7;
  if (v8)
  {
    *(_QWORD *)(a1 + 88) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  v9 = *(void **)(a1 + 104);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  v10 = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v11 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v10;
  if (v11)
  {
    *(_QWORD *)(a1 + 144) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  v12 = *(void **)(a1 + 176);
  *(_OWORD *)(a1 + 160) = a2[10];
  if (v12)
  {
    *(_QWORD *)(a1 + 184) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
  }
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  return a1;
}

uint64_t sub_239C1A0F4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  const char *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  const char *v78;
  uint64_t v79;
  _QWORD *v80;
  const std::locale::facet *v81;
  std::locale v83;

  if (*(char *)(a3 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  v7 = sub_239458500(a2, (uint64_t)"MINIMIZER SUMMARY:", 18);
  if (v6)
  {
    v8 = sub_239458500(v7, (uint64_t)" ", 1);
    v9 = *(char *)(a3 + 23);
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *(_QWORD *)a3;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    v7 = sub_239458500(v8, v10, v11);
  }
  LOBYTE(v83.__locale_) = 10;
  sub_239458500(v7, (uint64_t)&v83, 1);
  if (*(_QWORD *)(a1 + 128))
  {
    v12 = sub_239458500(a2, (uint64_t)"         ", 9);
    v13 = sub_239458500(v12, (uint64_t)"METHOD: ", 8);
    v14 = *(char *)(a1 + 23);
    if (v14 >= 0)
      v15 = a1;
    else
      v15 = *(_QWORD *)a1;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 23);
    else
      v16 = *(_QWORD *)(a1 + 8);
    v17 = sub_239458500(v13, v15, v16);
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v17, (uint64_t)&v83, 1);
    v18 = sub_239458500(a2, (uint64_t)"         ", 9);
    v19 = sub_239458500(v18, (uint64_t)"FACTORIZATION: ", 15);
    v20 = *(char *)(a1 + 47);
    if (v20 >= 0)
      v21 = a1 + 24;
    else
      v21 = *(_QWORD *)(a1 + 24);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 47);
    else
      v22 = *(_QWORD *)(a1 + 32);
    v23 = sub_239458500(v19, v21, v22);
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v23, (uint64_t)&v83, 1);
    v24 = sub_239458500(a2, (uint64_t)"         ", 9);
    sub_239458500(v24, (uint64_t)"CONVERGENCE: ", 13);
    switch(*(_DWORD *)(a1 + 56))
    {
      case 0:
        v25 = "Maximum iterations exceeded.";
        goto LABEL_29;
      case 1:
        v25 = "Convergence in the gradient.";
LABEL_29:
        v28 = a2;
        v29 = 28;
        goto LABEL_32;
      case 2:
        v25 = "Convergence in the parameters.";
        v28 = a2;
        v29 = 30;
        goto LABEL_32;
      case 3:
        v25 = "Convergence in the cost.";
        v28 = a2;
        v29 = 24;
LABEL_32:
        v30 = sub_239458500(v28, (uint64_t)v25, v29);
        LOBYTE(v83.__locale_) = 10;
        sub_239458500(v30, (uint64_t)&v83, 1);
        break;
      default:
        break;
    }
    v31 = sub_239458500(a2, (uint64_t)"         ", 9);
    sub_239458500(v31, (uint64_t)"ITERATIONS: [Successful | Total][", 33);
    v32 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v32, (uint64_t)" | ", 3);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = sub_239458500(v33, (uint64_t)"]", 1);
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v34, (uint64_t)&v83, 1);
    v35 = sub_239458500(a2, (uint64_t)"         ", 9);
    v36 = sub_239458500(v35, (uint64_t)"VARIABLES(s): ", 14);
    sub_239458500(v36, (uint64_t)"[ ", 2);
    v37 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v37, (uint64_t)" ", 1);
    if (*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176) >= 9uLL)
    {
      v38 = 1;
      do
      {
        v39 = v38 + 1;
        v40 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v40, (uint64_t)" ", 1);
        v38 = v39;
      }
      while (v39 < (uint64_t)(*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
    }
    sub_239458500(a2, (uint64_t)"] = ", 4);
    v41 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v41, (uint64_t)&v83, 1);
    v42 = sub_239458500(a2, (uint64_t)"         ", 9);
    sub_239458500(v42, (uint64_t)"SIZE OF VARIABLES(s): ", 22);
    v43 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v43, (uint64_t)&v83, 1);
    v44 = sub_239458500(a2, (uint64_t)"         ", 9);
    v45 = sub_239458500(v44, (uint64_t)"FACTOR(s): ", 11);
    sub_239458500(v45, (uint64_t)"[ ", 2);
    v46 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v46, (uint64_t)" ", 1);
    if (*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136) >= 9uLL)
    {
      v47 = 1;
      do
      {
        v48 = v47 + 1;
        v49 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v49, (uint64_t)" ", 1);
        v47 = v48;
      }
      while (v48 < (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3);
    }
    sub_239458500(a2, (uint64_t)"] = ", 4);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v50, (uint64_t)&v83, 1);
    v51 = sub_239458500(a2, (uint64_t)"         ", 9);
    v52 = sub_239458500(v51, (uint64_t)"START ERROR(s): ", 16);
    sub_239458500(v52, (uint64_t)"[ ", 2);
    v53 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v53, (uint64_t)" ", 1);
    if (*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136) >= 9uLL)
    {
      v54 = 1;
      do
      {
        v55 = v54 + 1;
        v56 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v56, (uint64_t)" ", 1);
        v54 = v55;
      }
      while (v55 < (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3);
    }
    sub_239458500(a2, (uint64_t)"] = ", 4);
    v57 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v57, (uint64_t)&v83, 1);
    v58 = sub_239458500(a2, (uint64_t)"         ", 9);
    v59 = sub_239458500(v58, (uint64_t)"END ERROR(s): ", 14);
    sub_239458500(v59, (uint64_t)"[ ", 2);
    v60 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v60, (uint64_t)" ", 1);
    if (*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136) >= 9uLL)
    {
      v61 = 1;
      do
      {
        v62 = v61 + 1;
        v63 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v63, (uint64_t)" ", 1);
        v61 = v62;
      }
      while (v62 < (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3);
    }
    sub_239458500(a2, (uint64_t)"] = ", 4);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v64, (uint64_t)&v83, 1);
    v65 = sub_239458500(a2, (uint64_t)"         ", 9);
    v66 = sub_239458500(v65, (uint64_t)"AVERAGE START ERROR(s): ", 24);
    sub_239458500(v66, (uint64_t)"[ ", 2);
    v67 = *(_QWORD *)(a1 + 136);
    if (*(_QWORD *)(a1 + 144) != v67)
    {
      v68 = 0;
      do
      {
        if (*(_QWORD *)(v67 + 8 * v68))
        {
          v69 = (_QWORD *)std::ostream::operator<<();
          v70 = " ";
          v71 = 1;
        }
        else
        {
          v69 = a2;
          v70 = "N.A. ";
          v71 = 5;
        }
        sub_239458500(v69, (uint64_t)v70, v71);
        ++v68;
        v67 = *(_QWORD *)(a1 + 136);
      }
      while (v68 < (*(_QWORD *)(a1 + 144) - v67) >> 3);
    }
    sub_239458500(a2, (uint64_t)"] = ", 4);
    if (*(_QWORD *)(a1 + 128))
      v72 = (_QWORD *)std::ostream::operator<<();
    else
      v72 = sub_239458500(a2, (uint64_t)"N.A.", 4);
    LOBYTE(v83.__locale_) = 10;
    sub_239458500(v72, (uint64_t)&v83, 1);
    v73 = sub_239458500(a2, (uint64_t)"         ", 9);
    v74 = sub_239458500(v73, (uint64_t)"AVERAGE END ERROR(s): ", 22);
    sub_239458500(v74, (uint64_t)"[ ", 2);
    v75 = *(_QWORD *)(a1 + 136);
    if (*(_QWORD *)(a1 + 144) != v75)
    {
      v76 = 0;
      do
      {
        if (*(_QWORD *)(v75 + 8 * v76))
        {
          v77 = (_QWORD *)std::ostream::operator<<();
          v78 = " ";
          v79 = 1;
        }
        else
        {
          v77 = a2;
          v78 = "N.A. ";
          v79 = 5;
        }
        sub_239458500(v77, (uint64_t)v78, v79);
        ++v76;
        v75 = *(_QWORD *)(a1 + 136);
      }
      while (v76 < (*(_QWORD *)(a1 + 144) - v75) >> 3);
    }
    sub_239458500(a2, (uint64_t)"] = ", 4);
    if (*(_QWORD *)(a1 + 128))
      v80 = (_QWORD *)std::ostream::operator<<();
    else
      v80 = sub_239458500(a2, (uint64_t)"N.A.", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(_QWORD *)(*v80 - 24)));
    v81 = std::locale::use_facet(&v83, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
  }
  else
  {
    v26 = sub_239458500(a2, (uint64_t)"Invalid LinearSystem.", 21);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v83, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  }
  std::locale::~locale(&v83);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_239C1A99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_239C1A9B8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_250AFB308;
  free(*(void **)(a1 + 808));
  *(_QWORD *)(a1 + 656) = off_250AFB530;
  v2 = *(_QWORD **)(a1 + 784);
  if (v2 == (_QWORD *)(a1 + 760))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 760);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(_QWORD *)(a1 + 736) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 720);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  free(*(void **)(a1 + 688));
  free(*(void **)(a1 + 664));
  sub_239C1AB94((_QWORD *)(a1 + 424));
  *(_QWORD *)a1 = &unk_250AFB3B8;
  v6 = *(void **)(a1 + 392);
  if (v6)
  {
    *(_QWORD *)(a1 + 400) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 384);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  free(*(void **)(a1 + 352));
  *(_QWORD *)a1 = &unk_250AFB468;
  sub_239C1AC34(a1 + 40);
  return a1;
}

_QWORD *sub_239C1AAB0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = off_250AFEA50;
  v2 = a1 + 13;
  v3 = (_QWORD *)a1[16];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_239C1AB3C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB198;
  free(*(void **)(a1 + 936));
  free(*(void **)(a1 + 912));
  *(_QWORD *)a1 = off_250AFB250;
  free(*(void **)(a1 + 864));
  free(*(void **)(a1 + 840));
  return sub_239C1A9B8(a1);
}

_QWORD *sub_239C1AB94(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[13];
  if (v6)
  {
    a1[14] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[10];
  if (v7)
  {
    a1[11] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_239C1AC34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_250AFB4D0;
  v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 128);
  if (v7)
  {
    *(_QWORD *)(a1 + 136) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(void **)(a1 + 80);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 160;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(void **)(a1 + 56);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 16);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 120;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v14;
    operator delete(v16);
  }
  sub_239A61F08(*(_QWORD **)(a1 + 40));
  sub_239A61F08(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_239C1ADBC(uint64_t a1)
{
  sub_239C1AC34(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_239C1ADE0()
{
  return 0.0;
}

_QWORD *sub_239C1ADE8(_QWORD *result)
{
  _QWORD *v1;
  double v2;
  double *v3;
  _QWORD *v11;
  _QWORD *v12;
  double *v13;
  double *v14;

  v1 = (_QWORD *)result[6];
  v2 = 0.0;
  if (v1 != result + 7)
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 2) == 0 && *((_BYTE *)v1 + 44))
      {
        _Q2 = *(_OWORD *)(v1 + 7);
        _D4 = v1[8];
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *((double *)v1 + 9) * *((double *)v1 + 9);
      }
      v11 = (_QWORD *)v1[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v1[2];
          _ZF = *v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!_ZF);
      }
      v1 = v12;
    }
    while (v12 != result + 7);
  }
  v3 = (double *)result[9];
  if (v3 != (double *)(result + 10))
  {
    do
    {
      if ((*((_BYTE *)v3 + 76) & 2) == 0 && *((_BYTE *)v3 + 44))
        v2 = v2 + v3[7] * v3[7];
      v13 = (double *)*((_QWORD *)v3 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(double **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (double *)*((_QWORD *)v3 + 2);
          _ZF = *(_QWORD *)v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!_ZF);
      }
      v3 = v14;
    }
    while (v14 != (double *)(result + 10));
  }
  return result;
}

